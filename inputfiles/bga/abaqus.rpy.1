# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 6.13-3 replay file
# Internal Version: 2013_10_09-13.29.32 126623
# Run by johan on Wed Mar  7 16:14:00 2018
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=419.099975585938, 
    height=237.175018310547)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
Mdb()
#: A new model database has been created.
#: The model "Model-1" has been created.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
s = mdb.models['Model-1'].ConstrainedSketch(name='__profile__', 
    sheetSize=10000.0)
g, v, d, c = s.geometry, s.vertices, s.dimensions, s.constraints
s.setPrimaryObject(option=STANDALONE)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7537.75, 
    farPlane=11318.4, width=19631.7, height=11532.2, cameraPosition=(1693.51, 
    139.104, 9428.09), cameraTarget=(1693.51, 139.104, 0))
s.CircleByCenterPerimeter(center=(0.0, 0.0), point1=(60000.0, 0.0))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2110.06, 
    farPlane=16746.1, width=79133.4, height=46484.9, cameraPosition=(5667.75, 
    4424.36, 9428.09), cameraTarget=(5667.75, 4424.36, 0))
p = mdb.models['Model-1'].Part(name='Part-1', dimensionality=THREE_D, 
    type=DEFORMABLE_BODY)
p = mdb.models['Model-1'].parts['Part-1']
p.BaseSolidExtrude(sketch=s, depth=50.0)
s.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
del mdb.models['Model-1'].sketches['__profile__']
session.viewports['Viewport: 1'].view.setValues(nearPlane=315383, 
    farPlane=363440, width=259193, height=152256, viewOffsetX=-2852.06, 
    viewOffsetY=7426.22)
p = mdb.models['Model-1'].parts['Part-1']
s1 = p.features['Solid extrude-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s1)
s2 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s2.geometry, s2.vertices, s2.dimensions, s2.constraints
s2.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s2, 
    upToFeature=p.features['Solid extrude-1'], filter=COPLANAR_EDGES)
session.viewports['Viewport: 1'].view.setValues(nearPlane=316046, 
    farPlane=362727, width=252122, height=148102, cameraPosition=(-4363.27, 
    -4603.75, 339411), cameraTarget=(-4363.27, -4603.75, 0))
s2.rectangle(point1=(-30000.0, 30000.0), point2=(30000.0, 31000.0))
s2.rectangle(point1=(9850.0, 50900.0), point2=(30000.0, 30000.0))
s2.undo()
s2.undo()
s2.undo()
s2.undo()
#* Nothing to undo.
s2.unsetPrimaryObject()
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Part-1']
del p.features['Solid extrude-1']
s = mdb.models['Model-1'].ConstrainedSketch(name='__profile__', 
    sheetSize=10000.0)
g, v, d, c = s.geometry, s.vertices, s.dimensions, s.constraints
s.setPrimaryObject(option=STANDALONE)
s.ConstructionLine(point1=(0.0, -5000.0), point2=(0.0, 5000.0))
s.FixedConstraint(entity=g[2])
session.viewports['Viewport: 1'].view.setValues(nearPlane=7684.5, 
    farPlane=11171.7, width=18107.7, height=10636.9, cameraPosition=(16.9999, 
    73.6823, 9428.09), cameraTarget=(16.9999, 73.6823, 0))
s.rectangle(point1=(0.0, 4400.0), point2=(4800.0, 3800.0))
s.CoincidentConstraint(entity1=v[0], entity2=g[2], addUndoState=False)
s.undo()
s.rectangle(point1=(0.0, 4000.0), point2=(3000.0, 4600.0))
s.CoincidentConstraint(entity1=v[0], entity2=g[2], addUndoState=False)
s.rectangle(point1=(0.0, -4000.0), point2=(3000.0, -4600.0))
s.CoincidentConstraint(entity1=v[4], entity2=g[2], addUndoState=False)
s.Arc3Points(point1=(1500.0, 4000.0), point2=(1500.0, -4000.0), point3=(4000.0, 
    0.0))
s.CoincidentConstraint(entity1=v[8], entity2=g[6], addUndoState=False)
s.EqualDistanceConstraint(entity1=v[3], entity2=v[0], midpoint=v[8], 
    addUndoState=False)
s.CoincidentConstraint(entity1=v[9], entity2=g[10], addUndoState=False)
s.EqualDistanceConstraint(entity1=v[7], entity2=v[4], midpoint=v[9], 
    addUndoState=False)
s.Line(point1=(0.0, 4000.0), point2=(0.0, -4000.0))
s.VerticalConstraint(entity=g[12], addUndoState=False)
s.ParallelConstraint(entity1=g[3], entity2=g[12], addUndoState=False)
s.Line(point1=(1500.0, 4000.0), point2=(0.0, 4000.0))
s.HorizontalConstraint(entity=g[13], addUndoState=False)
s.Line(point1=(1500.0, -4000.0), point2=(0.0, -4000.0))
s.HorizontalConstraint(entity=g[14], addUndoState=False)
s.unsetPrimaryObject()
del mdb.models['Model-1'].sketches['__profile__']
p1 = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
s1 = mdb.models['Model-1'].ConstrainedSketch(name='__profile__', 
    sheetSize=1000.0)
g, v, d, c = s1.geometry, s1.vertices, s1.dimensions, s1.constraints
s1.setPrimaryObject(option=STANDALONE)
s1.ConstructionLine(point1=(0.0, -500.0), point2=(0.0, 500.0))
s1.FixedConstraint(entity=g[2])
session.viewports['Viewport: 1'].view.setValues(nearPlane=757.478, 
    farPlane=1128.14, width=2004.07, height=1177.24, cameraPosition=(25.3275, 
    -33.3288, 942.809), cameraTarget=(25.3275, -33.3288, 0))
s1.Line(point1=(0.0, 500.0), point2=(300.0, 500.0))
s1.HorizontalConstraint(entity=g[3], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[2], entity2=g[3], addUndoState=False)
s1.CoincidentConstraint(entity1=v[0], entity2=g[2], addUndoState=False)
s1.Line(point1=(300.0, 500.0), point2=(300.0, 440.0))
s1.VerticalConstraint(entity=g[4], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[3], entity2=g[4], addUndoState=False)
s1.Line(point1=(300.0, 440.0), point2=(150.0, 440.0))
s1.HorizontalConstraint(entity=g[5], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[4], entity2=g[5], addUndoState=False)
s1.Line(point1=(0.0, -500.0), point2=(300.0, -500.0))
s1.HorizontalConstraint(entity=g[6], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[2], entity2=g[6], addUndoState=False)
s1.CoincidentConstraint(entity1=v[4], entity2=g[2], addUndoState=False)
s1.Line(point1=(300.0, -500.0), point2=(300.0, -440.0))
s1.VerticalConstraint(entity=g[7], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[6], entity2=g[7], addUndoState=False)
s1.Line(point1=(300.0, -440.0), point2=(150.0, -440.0))
s1.HorizontalConstraint(entity=g[8], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[7], entity2=g[8], addUndoState=False)
s1.Arc3Points(point1=(150.0, 440.0), point2=(150.0, -440.0), point3=(500.0, 
    0.0))
s1.Line(point1=(0.0, 500.0), point2=(0.0, -500.0))
s1.VerticalConstraint(entity=g[10], addUndoState=False)
s1.PerpendicularConstraint(entity1=g[3], entity2=g[10], addUndoState=False)
p = mdb.models['Model-1'].Part(name='Part-2', dimensionality=THREE_D, 
    type=DEFORMABLE_BODY)
p = mdb.models['Model-1'].parts['Part-2']
p.BaseSolidRevolve(sketch=s1, angle=180.0, flipRevolveDirection=ON)
s1.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Part-2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
del mdb.models['Model-1'].sketches['__profile__']
session.viewports['Viewport: 1'].view.setValues(nearPlane=2580.14, 
    farPlane=4183.38, width=2169.94, height=1274.68, cameraPosition=(1416.36, 
    992.145, 2656.31), cameraUpVector=(-0.236657, 0.800969, -0.549948), 
    cameraTarget=(22.3105, -13.0923, -259.218))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2797.36, 
    farPlane=3946.25, width=2352.62, height=1381.99, cameraPosition=(-128.325, 
    557.374, 3073.03), cameraUpVector=(0.0169365, 0.873168, -0.487125), 
    cameraTarget=(23.5175, -12.7526, -259.544))
p1 = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
p1 = mdb.models['Model-1'].parts['Part-2']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
p1 = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
del mdb.models['Model-1'].parts['Part-1']
p = mdb.models['Model-1'].parts['Part-2']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    optimizationTasks=OFF, geometricRestrictions=OFF, stopConditions=OFF)
a = mdb.models['Model-1'].rootAssembly
a.DatumCsysByDefault(CARTESIAN)
p = mdb.models['Model-1'].parts['Part-2']
a.Instance(name='Part-2-1', part=p, dependent=ON)
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
p1 = mdb.models['Model-1'].parts['Part-2']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
p = mdb.models['Model-1'].parts['Part-2']
p.seedPart(size=50.0, deviationFactor=0.1, minSizeFactor=0.1)
elemType1 = mesh.ElemType(elemCode=C3D8, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
elemType1 = mesh.ElemType(elemCode=C3D8, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
elemType1 = mesh.ElemType(elemCode=C3D8, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
elemType1 = mesh.ElemType(elemCode=C3D8, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2817.19, 
    farPlane=3935.46, width=1911.59, height=1125.87, cameraPosition=(-140.989, 
    547.916, 3078.67), cameraTarget=(10.4806, -20.8115, -245.725))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2541.59, 
    farPlane=4192.38, width=1724.59, height=1015.73, cameraPosition=(-2618.02, 
    563.86, 1790.86), cameraUpVector=(0.316689, 0.863811, -0.391839), 
    cameraTarget=(10.3094, -20.8104, -245.814))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2541.01, 
    farPlane=4187.29, width=1724.19, height=1015.5, cameraPosition=(-3048.32, 
    609.478, 1036.15), cameraUpVector=(0.418059, 0.856808, -0.301839), 
    cameraTarget=(11.4733, -20.9338, -243.773))
elemType1 = mesh.ElemType(elemCode=C3D8, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
pickedRegions = c.getSequenceFromMask(mask=('[#1 ]', ), )
p.setMeshControls(regions=pickedRegions, elemShape=TET, technique=FREE)
elemType1 = mesh.ElemType(elemCode=C3D20R)
elemType2 = mesh.ElemType(elemCode=C3D15)
elemType3 = mesh.ElemType(elemCode=C3D10)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
elemType1 = mesh.ElemType(elemCode=C3D8R, elemLibrary=STANDARD)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
elemType1 = mesh.ElemType(elemCode=C3D8R, elemLibrary=STANDARD)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2486.15, 
    farPlane=4259.23, width=1686.98, height=993.575, cameraPosition=(-3045.75, 
    -1206.3, 552.287), cameraUpVector=(-0.045084, 0.994093, -0.0987266), 
    cameraTarget=(11.4642, -14.4854, -242.055))
p = mdb.models['Model-1'].parts['Part-2']
p.generateMesh()
session.viewports['Viewport: 1'].view.setValues(nearPlane=2619.94, 
    farPlane=4133.52, width=1777.76, height=1047.04, cameraPosition=(-2076.69, 
    -551.988, 2354.87), cameraUpVector=(0.176696, 0.980267, -0.0886275), 
    cameraTarget=(10.4878, -15.1447, -243.871))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2684.91, 
    farPlane=4063.06, width=1821.85, height=1073.01, cameraPosition=(-2101.81, 
    58.6558, 2388.77), cameraUpVector=(0.314266, 0.927751, -0.201283), 
    cameraTarget=(10.483, -15.0286, -243.865))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2763.95, 
    farPlane=3990.58, width=1875.48, height=1104.6, cameraPosition=(-838.971, 
    408.614, 2995.83), cameraUpVector=(0.066778, 0.892259, -0.44656), 
    cameraTarget=(9.69537, -15.2468, -244.244))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2529.37, 
    farPlane=4208.65, width=1716.31, height=1010.85, cameraPosition=(-2621.87, 
    686.854, 1751.14), cameraUpVector=(0.441356, 0.851962, -0.28172), 
    cameraTarget=(9.07434, -15.1499, -244.678))
elemType1 = mesh.ElemType(elemCode=C3D8R, elemLibrary=STANDARD)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
p = mdb.models['Model-1'].parts['Part-2']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
a = mdb.models['Model-1'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p1 = mdb.models['Model-1'].parts['Part-2']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
p = mdb.models['Model-1'].parts['Part-2']
f = p.elements
face1Elements = f.getSequenceFromMask(mask=(
    '[#0:66 #80000 #0:9 #200000 #0:21 #20 #0:29', 
    ' #10 #0:16 #1008000 #0:2 #1800 #0:6 #4', 
    ' #0:4 #20000 #0:3 #800 #0:2 #2000000 #0:3', 
    ' #10 #0 #100 #0:14 #200000 #0:5 #800', 
    ' #8 #0 #4 #0:4 #8000000 #0:2 #100', 
    ' #0:21 #40000000 #0:2 #20008000 #40000000 #0:14 #4000', 
    ' #0:10 #2000000 ]', ), )
face2Elements = f.getSequenceFromMask(mask=(
    '[#0:51 #1000 #0:19 #8 #0:12 #20 #0:6', 
    ' #20 #0:52 #1000 #0:9 #2000000 #0:2 #400', 
    ' #0 #1000000 #0:5 #20000000 #0 #400 #0:7', 
    ' #200000 #0 #2000 #8000000 #0:3 #8 #0:3', 
    ' #200000 #0 #200 #0:9 #40000000 #0:3 #400000', 
    ' #0 #4000 #0:49 #10 #0:6 #10 ]', ), )
face3Elements = f.getSequenceFromMask(mask=(
    '[#0:3 #20000 #0:3 #10000000 #0 #1 #0:8', 
    ' #2000000 #0:7 #20 #0:12 #80 #0:5 #40', 
    ' #0:2 #40000000 #0 #8000000 #0 #1000000 #0', 
    ' #80000 #2020 #0 #80 #2 #40080000 #20004000', 
    ' #0:2 #140010 #1000 #0 #8 #20100000 #4', 
    ' #8000 #0:2 #8000 #0 #10000 #0:3 #20000000', 
    ' #0 #40600000 #0 #400 #8000 #0 #8000000', 
    ' #1020200 #0:2 #848 #4000001 #0 #10000 #42000000', 
    ' #40 #10 #4100000 #30000000 #10 #80000 #800040', 
    ' #800 #104200 #2000241 #4002000 #10040 #4000810 #3400000', 
    ' #2 #2000000 #90000002 #800000 #1000110 #40200000 #20000', 
    ' #8000 #80000000 #2000100 #0:2 #4008 #3000 #20000', 
    ' #81020010 #2002 #40821000 #18010000 #40 #2200 #0', 
    ' #80 #12400000 #10820000 #0 #5000000 #80000000 #200', 
    ' #100000 #60000220 #1020080 #400000 #2093 #4000 #24000020', 
    ' #80000 #8 #0 #3004 #410000 #8308610 #c1000300', 
    ' #815808f0 #2020422 #804c0840 #4c083698 #8124000 #a000860 #2d508148', 
    ' #81120 #12060010 #4040101 #2044 #261a123a #30422269 #80280000', 
    ' #4950a00 #61713056 #45004018 #60411000 #50c0800 #1081c850 #8a20820', 
    ' #d0a90207 #a50221 #6085691 #5044a004 #20000 #d0a1100a #10cc11', 
    ' #8c80804 #5a870116 #403b0574 #e0801195 #b0d4 #0:2 #1400000', 
    ' #2080c #40482006 #40051000 #100830 #99030 #681920a0 #400a00', 
    ' #a0004020 #21140a86 #2 #2088c00 #13094 #893aa260 #180a12', 
    ' #aa8c0460 #a09815 #60a8064 #a97a01a3 #30840006 #2088781 #8228440', 
    ' #76022206 #18c10256 #44103421 #a1b0123b #228090c0 #903c18c0 #5a492644', 
    ' #10011 #0:3 #600000 #1000 #0 #9000825 #a040', 
    ' #4 #23c2 #80010000 #30 #10 #10000180 #c001000', 
    ' #34004000 #40 #2001000 #42 #8000 #0 #40000188', 
    ' #0 #2000002 #0 #81300000 #80000000 #2000000 #8000000', 
    ' #0:3 #20000000 #0 #800 #10 #0:2 #220', 
    ' #0:2 #10 #0:2 #1000000 #8 #10000 ]', ), )
face4Elements = f.getSequenceFromMask(mask=(
    '[#0:35 #10000 #0:19 #8000000 #0:3 #8000 #0:6', 
    ' #20000000 #0:21 #401000 #0:8 #4 #0:2 #40000000', 
    ' #0:14 #8000000 #0:18 #10000000 #0:4 #10000000 #0:3', 
    ' #c0000000 #0:4 #80 #1 #80 #40000 #0:7', 
    ' #60 #0:4 #8000000 #0:4 #400000 #4000000 #0', 
    ' #100000 #0:18 #100 #0:3 #10000 #0:2 #1', 
    ' #0:8 #40000 #0 #1 #0:2 #4000 #0', ' #100 #0:12 #1 #0:7 #44 #0:3 #100', 
    ' #0:10 #100000 #0:6 #400000 #0:5 #40000 ]', ), )
p.Surface(face1Elements=face1Elements, face2Elements=face2Elements, 
    face3Elements=face3Elements, face4Elements=face4Elements, name='Surf-1')
#: The surface 'Surf-1' has been created (762 mesh faces).
del mdb.models['Model-1'].parts['Part-2'].surfaces['Surf-1']
p = mdb.models['Model-1'].parts['Part-2']
s = p.faces
side1Faces = s.getSequenceFromMask(mask=('[#180 ]', ), )
p.Surface(side1Faces=side1Faces, name='Surf-1')
#: The surface 'Surf-1' has been created (2 faces).
del mdb.models['Model-1'].parts['Part-2'].surfaces['Surf-1']
p = mdb.models['Model-1'].parts['Part-2']
s = p.faces
side1Faces = s.getSequenceFromMask(mask=('[#40 ]', ), )
p.Surface(side1Faces=side1Faces, name='top')
#: The surface 'top' has been created (1 face).
p = mdb.models['Model-1'].parts['Part-2']
s = p.faces
side1Faces = s.getSequenceFromMask(mask=('[#180 ]', ), )
p.Surface(side1Faces=side1Faces, name='front')
#: The surface 'front' has been created (2 faces).
session.viewports['Viewport: 1'].view.setValues(nearPlane=2465.07, 
    farPlane=4291.82, width=1672.68, height=985.155, cameraPosition=(-2236.21, 
    -1517.9, 1777.17), cameraUpVector=(0.000624429, 0.984074, 0.177758), 
    cameraTarget=(8.26428, -10.519, -244.733))
