(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55
sS'cpp_type'
p56
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57
sS'default'
p58
g3
sS'name'
p59
S'control_tags'
p60
sS'required'
p61
I00
sS'group_name'
p62
S'Advanced'
p63
sa(dp64
S'description'
p65
S'Set the enabled status of the MooseObject.\n'
p66
sS'cpp_type'
p67
S'bool'
p68
sS'default'
p69
S'1'
p70
sS'name'
p71
S'enable'
p72
sS'required'
p73
I00
sS'group_name'
p74
S'Advanced'
p75
sa(dp76
S'description'
p77
S'The analytic solution to compare against\n'
p78
sS'cpp_type'
p79
S'FunctionName'
p80
sS'default'
p81
g3
sS'name'
p82
S'function'
p83
sS'required'
p84
I01
sS'group_name'
p85
Nsa(dp86
S'description'
p87
S'Determines whether this object is calculated using an implicit or explicit form\n'
p88
sS'cpp_type'
p89
S'bool'
p90
sS'default'
p91
S'1'
p92
sS'name'
p93
S'implicit'
p94
sS'required'
p95
I00
sS'group_name'
p96
S'Advanced'
p97
sa(dp98
S'description'
p99
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100
sS'cpp_type'
p101
S'std::vector<OutputName, std::allocator<OutputName> >'
p102
sS'default'
p103
g3
sS'name'
p104
S'outputs'
p105
sS'required'
p106
I00
sS'group_name'
p107
S'Advanced'
p108
sa(dp109
S'description'
p110
g3
sS'cpp_type'
p111
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112
sS'default'
p113
S'AnalyticalIndicator'
p114
sS'name'
p115
S'type'
p116
sS'required'
p117
I00
sS'group_name'
p118
Nsa(dp119
S'description'
p120
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121
sS'cpp_type'
p122
S'bool'
p123
sS'default'
p124
S'0'
p125
sS'name'
p126
S'use_displaced_mesh'
p127
sS'required'
p128
I00
sS'group_name'
p129
S'Advanced'
p130
sa(dp131
S'description'
p132
S'The name of the variable that this Indicator operates on\n'
p133
sS'cpp_type'
p134
S'VariableName'
p135
sS'default'
p136
g3
sS'name'
p137
S'variable'
p138
sS'required'
p139
I01
sS'group_name'
p140
NsasS'name'
p141
S'/Adaptivity/Indicators/AnalyticalIndicator'
p142
sa(dp143
S'description'
p144
g3
sS'subblocks'
p145
NsS'parameters'
p146
(lp147
(dp148
S'description'
p149
S'The list of block ids (SubdomainID) that this object will be applied\n'
p150
sS'cpp_type'
p151
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p152
sS'default'
p153
g3
sS'name'
p154
S'block'
p155
sS'required'
p156
I00
sS'group_name'
p157
Nsa(dp158
S'description'
p159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p160
sS'cpp_type'
p161
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p162
sS'default'
p163
g3
sS'name'
p164
S'control_tags'
p165
sS'required'
p166
I00
sS'group_name'
p167
S'Advanced'
p168
sa(dp169
S'description'
p170
S'Set the enabled status of the MooseObject.\n'
p171
sS'cpp_type'
p172
S'bool'
p173
sS'default'
p174
S'1'
p175
sS'name'
p176
S'enable'
p177
sS'required'
p178
I00
sS'group_name'
p179
S'Advanced'
p180
sa(dp181
S'description'
p182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p183
sS'cpp_type'
p184
S'std::vector<OutputName, std::allocator<OutputName> >'
p185
sS'default'
p186
g3
sS'name'
p187
S'outputs'
p188
sS'required'
p189
I00
sS'group_name'
p190
S'Advanced'
p191
sa(dp192
S'description'
p193
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p194
sS'cpp_type'
p195
S'bool'
p196
sS'default'
p197
S'0'
p198
sS'name'
p199
S'scale_by_flux_faces'
p200
sS'required'
p201
I00
sS'group_name'
p202
Nsa(dp203
S'description'
p204
g3
sS'cpp_type'
p205
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p206
sS'default'
p207
S'GradientJumpIndicator'
p208
sS'name'
p209
S'type'
p210
sS'required'
p211
I00
sS'group_name'
p212
Nsa(dp213
S'description'
p214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p215
sS'cpp_type'
p216
S'bool'
p217
sS'default'
p218
S'0'
p219
sS'name'
p220
S'use_displaced_mesh'
p221
sS'required'
p222
I00
sS'group_name'
p223
S'Advanced'
p224
sa(dp225
S'description'
p226
S'The name of the variable that this side indicator applies to\n'
p227
sS'cpp_type'
p228
S'VariableName'
p229
sS'default'
p230
g3
sS'name'
p231
S'variable'
p232
sS'required'
p233
I01
sS'group_name'
p234
NsasS'name'
p235
S'/Adaptivity/Indicators/GradientJumpIndicator'
p236
sa(dp237
S'description'
p238
g3
sS'subblocks'
p239
NsS'parameters'
p240
(lp241
(dp242
S'description'
p243
S'The list of block ids (SubdomainID) that this object will be applied\n'
p244
sS'cpp_type'
p245
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p246
sS'default'
p247
g3
sS'name'
p248
S'block'
p249
sS'required'
p250
I00
sS'group_name'
p251
Nsa(dp252
S'description'
p253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p254
sS'cpp_type'
p255
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p256
sS'default'
p257
g3
sS'name'
p258
S'control_tags'
p259
sS'required'
p260
I00
sS'group_name'
p261
S'Advanced'
p262
sa(dp263
S'description'
p264
S'Set the enabled status of the MooseObject.\n'
p265
sS'cpp_type'
p266
S'bool'
p267
sS'default'
p268
S'1'
p269
sS'name'
p270
S'enable'
p271
sS'required'
p272
I00
sS'group_name'
p273
S'Advanced'
p274
sa(dp275
S'description'
p276
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p277
sS'cpp_type'
p278
S'std::vector<OutputName, std::allocator<OutputName> >'
p279
sS'default'
p280
g3
sS'name'
p281
S'outputs'
p282
sS'required'
p283
I00
sS'group_name'
p284
S'Advanced'
p285
sa(dp286
S'description'
p287
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p288
sS'cpp_type'
p289
S'bool'
p290
sS'default'
p291
S'0'
p292
sS'name'
p293
S'scale_by_flux_faces'
p294
sS'required'
p295
I00
sS'group_name'
p296
Nsa(dp297
S'description'
p298
g3
sS'cpp_type'
p299
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p300
sS'default'
p301
S'LaplacianJumpIndicator'
p302
sS'name'
p303
S'type'
p304
sS'required'
p305
I00
sS'group_name'
p306
Nsa(dp307
S'description'
p308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p309
sS'cpp_type'
p310
S'bool'
p311
sS'default'
p312
S'0'
p313
sS'name'
p314
S'use_displaced_mesh'
p315
sS'required'
p316
I00
sS'group_name'
p317
S'Advanced'
p318
sa(dp319
S'description'
p320
S'The name of the variable that this side indicator applies to\n'
p321
sS'cpp_type'
p322
S'VariableName'
p323
sS'default'
p324
g3
sS'name'
p325
S'variable'
p326
sS'required'
p327
I01
sS'group_name'
p328
NsasS'name'
p329
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p330
sasS'parameters'
p331
NsS'name'
p332
S'/Adaptivity/Indicators'
p333
sa(dp334
S'description'
p335
g3
sS'subblocks'
p336
(lp337
(dp338
S'description'
p339
g3
sS'subblocks'
p340
NsS'parameters'
p341
(lp342
(dp343
S'description'
p344
S'The block id where this object lives.\n'
p345
sS'cpp_type'
p346
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p347
sS'default'
p348
g3
sS'name'
p349
S'block'
p350
sS'required'
p351
I00
sS'group_name'
p352
Nsa(dp353
S'description'
p354
S'A string representing the Moose Object that will be built by this Action\n'
p355
sS'cpp_type'
p356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p357
sS'default'
p358
g3
sS'name'
p359
S'type'
p360
sS'required'
p361
I01
sS'group_name'
p362
NsasS'name'
p363
S'/Adaptivity/Markers/*'
p364
sa(dp365
S'description'
p366
S"Marks the region inside and outside of a 'box' domain for refinement or coarsening.\n"
p367
sS'subblocks'
p368
NsS'parameters'
p369
(lp370
(dp371
S'description'
p372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p373
sS'cpp_type'
p374
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p375
sS'default'
p376
g3
sS'name'
p377
S'block'
p378
sS'required'
p379
I00
sS'group_name'
p380
Nsa(dp381
S'description'
p382
S'The bottom left point (in x,y,z with spaces in-between).\n'
p383
sS'cpp_type'
p384
S'libMesh::VectorValue<double>'
p385
sS'default'
p386
g3
sS'name'
p387
S'bottom_left'
p388
sS'required'
p389
I01
sS'group_name'
p390
Nsa(dp391
S'description'
p392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p393
sS'cpp_type'
p394
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p395
sS'default'
p396
g3
sS'name'
p397
S'control_tags'
p398
sS'required'
p399
I00
sS'group_name'
p400
S'Advanced'
p401
sa(dp402
S'description'
p403
S'Set the enabled status of the MooseObject.\n'
p404
sS'cpp_type'
p405
S'bool'
p406
sS'default'
p407
S'1'
p408
sS'name'
p409
S'enable'
p410
sS'required'
p411
I00
sS'group_name'
p412
S'Advanced'
p413
sa(dp414
S'name'
p415
S'inside'
p416
sS'cpp_type'
p417
S'MooseEnum'
p418
sS'default'
p419
g3
sS'description'
p420
S'How to mark elements inside the box.\n'
p421
sS'required'
p422
I01
sS'options'
p423
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p424
sS'group_name'
p425
Nsa(dp426
S'description'
p427
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p428
sS'cpp_type'
p429
S'std::vector<OutputName, std::allocator<OutputName> >'
p430
sS'default'
p431
g3
sS'name'
p432
S'outputs'
p433
sS'required'
p434
I00
sS'group_name'
p435
S'Advanced'
p436
sa(dp437
S'name'
p438
S'outside'
p439
sS'cpp_type'
p440
S'MooseEnum'
p441
sS'default'
p442
g3
sS'description'
p443
S'How to mark elements outside the box.\n'
p444
sS'required'
p445
I01
sS'options'
p446
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p447
sS'group_name'
p448
Nsa(dp449
S'description'
p450
S'The bottom left point (in x,y,z with spaces in-between).\n'
p451
sS'cpp_type'
p452
S'libMesh::VectorValue<double>'
p453
sS'default'
p454
g3
sS'name'
p455
S'top_right'
p456
sS'required'
p457
I01
sS'group_name'
p458
Nsa(dp459
S'description'
p460
g3
sS'cpp_type'
p461
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p462
sS'default'
p463
S'BoxMarker'
p464
sS'name'
p465
S'type'
p466
sS'required'
p467
I00
sS'group_name'
p468
Nsa(dp469
S'description'
p470
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p471
sS'cpp_type'
p472
S'bool'
p473
sS'default'
p474
S'0'
p475
sS'name'
p476
S'use_displaced_mesh'
p477
sS'required'
p478
I00
sS'group_name'
p479
S'Advanced'
p480
sasS'name'
p481
S'/Adaptivity/Markers/BoxMarker'
p482
sa(dp483
S'description'
p484
S'A marker that converts many markers into a single marker by considering the maximum value of the listed markers (i.e., refinement takes precedent).\n'
p485
sS'subblocks'
p486
NsS'parameters'
p487
(lp488
(dp489
S'description'
p490
S'The list of block ids (SubdomainID) that this object will be applied\n'
p491
sS'cpp_type'
p492
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p493
sS'default'
p494
g3
sS'name'
p495
S'block'
p496
sS'required'
p497
I00
sS'group_name'
p498
Nsa(dp499
S'description'
p500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p501
sS'cpp_type'
p502
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p503
sS'default'
p504
g3
sS'name'
p505
S'control_tags'
p506
sS'required'
p507
I00
sS'group_name'
p508
S'Advanced'
p509
sa(dp510
S'description'
p511
S'Set the enabled status of the MooseObject.\n'
p512
sS'cpp_type'
p513
S'bool'
p514
sS'default'
p515
S'1'
p516
sS'name'
p517
S'enable'
p518
sS'required'
p519
I00
sS'group_name'
p520
S'Advanced'
p521
sa(dp522
S'description'
p523
S'A list of marker names to combine into a single marker.\n'
p524
sS'cpp_type'
p525
S'std::vector<MarkerName, std::allocator<MarkerName> >'
p526
sS'default'
p527
g3
sS'name'
p528
S'markers'
p529
sS'required'
p530
I01
sS'group_name'
p531
Nsa(dp532
S'description'
p533
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p534
sS'cpp_type'
p535
S'std::vector<OutputName, std::allocator<OutputName> >'
p536
sS'default'
p537
g3
sS'name'
p538
S'outputs'
p539
sS'required'
p540
I00
sS'group_name'
p541
S'Advanced'
p542
sa(dp543
S'description'
p544
g3
sS'cpp_type'
p545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p546
sS'default'
p547
S'ComboMarker'
p548
sS'name'
p549
S'type'
p550
sS'required'
p551
I00
sS'group_name'
p552
Nsa(dp553
S'description'
p554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p555
sS'cpp_type'
p556
S'bool'
p557
sS'default'
p558
S'0'
p559
sS'name'
p560
S'use_displaced_mesh'
p561
sS'required'
p562
I00
sS'group_name'
p563
S'Advanced'
p564
sasS'name'
p565
S'/Adaptivity/Markers/ComboMarker'
p566
sa(dp567
S'description'
p568
S'Marks elements for refinement or coarsening based on the fraction of the total error from the supplied indicator.\n'
p569
sS'subblocks'
p570
NsS'parameters'
p571
(lp572
(dp573
S'description'
p574
S'The list of block ids (SubdomainID) that this object will be applied\n'
p575
sS'cpp_type'
p576
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p577
sS'default'
p578
g3
sS'name'
p579
S'block'
p580
sS'required'
p581
I00
sS'group_name'
p582
Nsa(dp583
S'description'
p584
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p585
sS'cpp_type'
p586
S'double'
p587
sS'default'
p588
S'0'
p589
sS'name'
p590
S'coarsen'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p596
sS'cpp_type'
p597
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p598
sS'default'
p599
g3
sS'name'
p600
S'control_tags'
p601
sS'required'
p602
I00
sS'group_name'
p603
S'Advanced'
p604
sa(dp605
S'description'
p606
S'Set the enabled status of the MooseObject.\n'
p607
sS'cpp_type'
p608
S'bool'
p609
sS'default'
p610
S'1'
p611
sS'name'
p612
S'enable'
p613
sS'required'
p614
I00
sS'group_name'
p615
S'Advanced'
p616
sa(dp617
S'description'
p618
S'The name of the Indicator that this Marker uses.\n'
p619
sS'cpp_type'
p620
S'IndicatorName'
p621
sS'default'
p622
g3
sS'name'
p623
S'indicator'
p624
sS'required'
p625
I01
sS'group_name'
p626
Nsa(dp627
S'description'
p628
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p629
sS'cpp_type'
p630
S'std::vector<OutputName, std::allocator<OutputName> >'
p631
sS'default'
p632
g3
sS'name'
p633
S'outputs'
p634
sS'required'
p635
I00
sS'group_name'
p636
S'Advanced'
p637
sa(dp638
S'description'
p639
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p640
sS'cpp_type'
p641
S'double'
p642
sS'default'
p643
S'0'
p644
sS'name'
p645
S'refine'
p646
sS'required'
p647
I00
sS'group_name'
p648
Nsa(dp649
S'description'
p650
g3
sS'cpp_type'
p651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p652
sS'default'
p653
S'ErrorFractionMarker'
p654
sS'name'
p655
S'type'
p656
sS'required'
p657
I00
sS'group_name'
p658
Nsa(dp659
S'description'
p660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p661
sS'cpp_type'
p662
S'bool'
p663
sS'default'
p664
S'0'
p665
sS'name'
p666
S'use_displaced_mesh'
p667
sS'required'
p668
I00
sS'group_name'
p669
S'Advanced'
p670
sasS'name'
p671
S'/Adaptivity/Markers/ErrorFractionMarker'
p672
sa(dp673
S'description'
p674
S'Coarsen or refine elements based on an absolute tolerance allowed from the supplied indicator.\n'
p675
sS'subblocks'
p676
NsS'parameters'
p677
(lp678
(dp679
S'description'
p680
S'The list of block ids (SubdomainID) that this object will be applied\n'
p681
sS'cpp_type'
p682
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p683
sS'default'
p684
g3
sS'name'
p685
S'block'
p686
sS'required'
p687
I00
sS'group_name'
p688
Nsa(dp689
S'description'
p690
S'Elements with error less than this will be coarsened.\n'
p691
sS'cpp_type'
p692
S'double'
p693
sS'default'
p694
S'0'
p695
sS'name'
p696
S'coarsen'
p697
sS'required'
p698
I00
sS'group_name'
p699
Nsa(dp700
S'description'
p701
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p702
sS'cpp_type'
p703
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p704
sS'default'
p705
g3
sS'name'
p706
S'control_tags'
p707
sS'required'
p708
I00
sS'group_name'
p709
S'Advanced'
p710
sa(dp711
S'description'
p712
S'Set the enabled status of the MooseObject.\n'
p713
sS'cpp_type'
p714
S'bool'
p715
sS'default'
p716
S'1'
p717
sS'name'
p718
S'enable'
p719
sS'required'
p720
I00
sS'group_name'
p721
S'Advanced'
p722
sa(dp723
S'description'
p724
S'The name of the Indicator that this Marker uses.\n'
p725
sS'cpp_type'
p726
S'IndicatorName'
p727
sS'default'
p728
g3
sS'name'
p729
S'indicator'
p730
sS'required'
p731
I01
sS'group_name'
p732
Nsa(dp733
S'description'
p734
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p735
sS'cpp_type'
p736
S'std::vector<OutputName, std::allocator<OutputName> >'
p737
sS'default'
p738
g3
sS'name'
p739
S'outputs'
p740
sS'required'
p741
I00
sS'group_name'
p742
S'Advanced'
p743
sa(dp744
S'description'
p745
S'Elements with error more than this will be refined.\n'
p746
sS'cpp_type'
p747
S'double'
p748
sS'default'
p749
S'1.79769e+308'
p750
sS'name'
p751
S'refine'
p752
sS'required'
p753
I00
sS'group_name'
p754
Nsa(dp755
S'description'
p756
g3
sS'cpp_type'
p757
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p758
sS'default'
p759
S'ErrorToleranceMarker'
p760
sS'name'
p761
S'type'
p762
sS'required'
p763
I00
sS'group_name'
p764
Nsa(dp765
S'description'
p766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p767
sS'cpp_type'
p768
S'bool'
p769
sS'default'
p770
S'0'
p771
sS'name'
p772
S'use_displaced_mesh'
p773
sS'required'
p774
I00
sS'group_name'
p775
S'Advanced'
p776
sasS'name'
p777
S'/Adaptivity/Markers/ErrorToleranceMarker'
p778
sa(dp779
S'description'
p780
S'Marks inside and outside a box that can have arbitrary orientation and center point.\n'
p781
sS'subblocks'
p782
NsS'parameters'
p783
(lp784
(dp785
S'description'
p786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p787
sS'cpp_type'
p788
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p789
sS'default'
p790
g3
sS'name'
p791
S'block'
p792
sS'required'
p793
I00
sS'group_name'
p794
Nsa(dp795
S'description'
p796
S"The center (many people spell this 'center') of the box.\n"
p797
sS'cpp_type'
p798
S'libMesh::Point'
p799
sS'default'
p800
g3
sS'name'
p801
S'center'
p802
sS'required'
p803
I01
sS'group_name'
p804
Nsa(dp805
S'description'
p806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p807
sS'cpp_type'
p808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p809
sS'default'
p810
g3
sS'name'
p811
S'control_tags'
p812
sS'required'
p813
I00
sS'group_name'
p814
S'Advanced'
p815
sa(dp816
S'description'
p817
S'Set the enabled status of the MooseObject.\n'
p818
sS'cpp_type'
p819
S'bool'
p820
sS'default'
p821
S'1'
p822
sS'name'
p823
S'enable'
p824
sS'required'
p825
I00
sS'group_name'
p826
S'Advanced'
p827
sa(dp828
S'description'
p829
S'The height of the box\n'
p830
sS'cpp_type'
p831
S'double'
p832
sS'default'
p833
g3
sS'name'
p834
S'height'
p835
sS'required'
p836
I01
sS'group_name'
p837
Nsa(dp838
S'name'
p839
S'inside'
p840
sS'cpp_type'
p841
S'MooseEnum'
p842
sS'default'
p843
g3
sS'description'
p844
S'How to mark elements inside the box.\n'
p845
sS'required'
p846
I01
sS'options'
p847
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p848
sS'group_name'
p849
Nsa(dp850
S'description'
p851
S'The length of the box\n'
p852
sS'cpp_type'
p853
S'double'
p854
sS'default'
p855
g3
sS'name'
p856
S'length'
p857
sS'required'
p858
I01
sS'group_name'
p859
Nsa(dp860
S'description'
p861
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p862
sS'cpp_type'
p863
S'libMesh::VectorValue<double>'
p864
sS'default'
p865
g3
sS'name'
p866
S'length_direction'
p867
sS'required'
p868
I01
sS'group_name'
p869
Nsa(dp870
S'description'
p871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p872
sS'cpp_type'
p873
S'std::vector<OutputName, std::allocator<OutputName> >'
p874
sS'default'
p875
g3
sS'name'
p876
S'outputs'
p877
sS'required'
p878
I00
sS'group_name'
p879
S'Advanced'
p880
sa(dp881
S'name'
p882
S'outside'
p883
sS'cpp_type'
p884
S'MooseEnum'
p885
sS'default'
p886
g3
sS'description'
p887
S'How to mark elements outside the box.\n'
p888
sS'required'
p889
I01
sS'options'
p890
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p891
sS'group_name'
p892
Nsa(dp893
S'description'
p894
g3
sS'cpp_type'
p895
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p896
sS'default'
p897
S'OrientedBoxMarker'
p898
sS'name'
p899
S'type'
p900
sS'required'
p901
I00
sS'group_name'
p902
Nsa(dp903
S'description'
p904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p905
sS'cpp_type'
p906
S'bool'
p907
sS'default'
p908
S'0'
p909
sS'name'
p910
S'use_displaced_mesh'
p911
sS'required'
p912
I00
sS'group_name'
p913
S'Advanced'
p914
sa(dp915
S'description'
p916
S'The width of the box\n'
p917
sS'cpp_type'
p918
S'double'
p919
sS'default'
p920
g3
sS'name'
p921
S'width'
p922
sS'required'
p923
I01
sS'group_name'
p924
Nsa(dp925
S'description'
p926
S'The direction along which the width is oriented.\n'
p927
sS'cpp_type'
p928
S'libMesh::VectorValue<double>'
p929
sS'default'
p930
g3
sS'name'
p931
S'width_direction'
p932
sS'required'
p933
I01
sS'group_name'
p934
NsasS'name'
p935
S'/Adaptivity/Markers/OrientedBoxMarker'
p936
sa(dp937
S'description'
p938
S'Uniformly mark all elements for refinement or coarsening.\n'
p939
sS'subblocks'
p940
NsS'parameters'
p941
(lp942
(dp943
S'description'
p944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p945
sS'cpp_type'
p946
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p947
sS'default'
p948
g3
sS'name'
p949
S'block'
p950
sS'required'
p951
I00
sS'group_name'
p952
Nsa(dp953
S'description'
p954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p955
sS'cpp_type'
p956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p957
sS'default'
p958
g3
sS'name'
p959
S'control_tags'
p960
sS'required'
p961
I00
sS'group_name'
p962
S'Advanced'
p963
sa(dp964
S'description'
p965
S'Set the enabled status of the MooseObject.\n'
p966
sS'cpp_type'
p967
S'bool'
p968
sS'default'
p969
S'1'
p970
sS'name'
p971
S'enable'
p972
sS'required'
p973
I00
sS'group_name'
p974
S'Advanced'
p975
sa(dp976
S'name'
p977
S'mark'
p978
sS'cpp_type'
p979
S'MooseEnum'
p980
sS'default'
p981
g3
sS'description'
p982
S'How to mark elements.\n'
p983
sS'required'
p984
I01
sS'options'
p985
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p986
sS'group_name'
p987
Nsa(dp988
S'description'
p989
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p990
sS'cpp_type'
p991
S'std::vector<OutputName, std::allocator<OutputName> >'
p992
sS'default'
p993
g3
sS'name'
p994
S'outputs'
p995
sS'required'
p996
I00
sS'group_name'
p997
S'Advanced'
p998
sa(dp999
S'description'
p1000
g3
sS'cpp_type'
p1001
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1002
sS'default'
p1003
S'UniformMarker'
p1004
sS'name'
p1005
S'type'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1011
sS'cpp_type'
p1012
S'bool'
p1013
sS'default'
p1014
S'0'
p1015
sS'name'
p1016
S'use_displaced_mesh'
p1017
sS'required'
p1018
I00
sS'group_name'
p1019
S'Advanced'
p1020
sasS'name'
p1021
S'/Adaptivity/Markers/UniformMarker'
p1022
sa(dp1023
S'description'
p1024
S'Mark elements for adaptivity based on the supplied upper and lower bounds and the specified variable.\n'
p1025
sS'subblocks'
p1026
NsS'parameters'
p1027
(lp1028
(dp1029
S'description'
p1030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1031
sS'cpp_type'
p1032
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1033
sS'default'
p1034
g3
sS'name'
p1035
S'block'
p1036
sS'required'
p1037
I00
sS'group_name'
p1038
Nsa(dp1039
S'description'
p1040
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p1041
sS'cpp_type'
p1042
S'double'
p1043
sS'default'
p1044
S'0'
p1045
sS'name'
p1046
S'buffer_size'
p1047
sS'required'
p1048
I00
sS'group_name'
p1049
Nsa(dp1050
S'description'
p1051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1052
sS'cpp_type'
p1053
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1054
sS'default'
p1055
g3
sS'name'
p1056
S'control_tags'
p1057
sS'required'
p1058
I00
sS'group_name'
p1059
S'Advanced'
p1060
sa(dp1061
S'description'
p1062
S'Set the enabled status of the MooseObject.\n'
p1063
sS'cpp_type'
p1064
S'bool'
p1065
sS'default'
p1066
S'1'
p1067
sS'name'
p1068
S'enable'
p1069
sS'required'
p1070
I00
sS'group_name'
p1071
S'Advanced'
p1072
sa(dp1073
S'description'
p1074
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p1075
sS'cpp_type'
p1076
S'bool'
p1077
sS'default'
p1078
S'0'
p1079
sS'name'
p1080
S'invert'
p1081
sS'required'
p1082
I00
sS'group_name'
p1083
Nsa(dp1084
S'description'
p1085
S'The lower bound value for the range.\n'
p1086
sS'cpp_type'
p1087
S'double'
p1088
sS'default'
p1089
g3
sS'name'
p1090
S'lower_bound'
p1091
sS'required'
p1092
I01
sS'group_name'
p1093
Nsa(dp1094
S'description'
p1095
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1096
sS'cpp_type'
p1097
S'std::vector<OutputName, std::allocator<OutputName> >'
p1098
sS'default'
p1099
g3
sS'name'
p1100
S'outputs'
p1101
sS'required'
p1102
I00
sS'group_name'
p1103
S'Advanced'
p1104
sa(dp1105
S'name'
p1106
S'third_state'
p1107
sS'cpp_type'
p1108
S'MooseEnum'
p1109
sS'default'
p1110
S'DONT_MARK'
p1111
sS'description'
p1112
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p1113
sS'required'
p1114
I00
sS'options'
p1115
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1116
sS'group_name'
p1117
Nsa(dp1118
S'description'
p1119
g3
sS'cpp_type'
p1120
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1121
sS'default'
p1122
S'ValueRangeMarker'
p1123
sS'name'
p1124
S'type'
p1125
sS'required'
p1126
I00
sS'group_name'
p1127
Nsa(dp1128
S'description'
p1129
S'The upper bound value for the range.\n'
p1130
sS'cpp_type'
p1131
S'double'
p1132
sS'default'
p1133
g3
sS'name'
p1134
S'upper_bound'
p1135
sS'required'
p1136
I01
sS'group_name'
p1137
Nsa(dp1138
S'description'
p1139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1140
sS'cpp_type'
p1141
S'bool'
p1142
sS'default'
p1143
S'0'
p1144
sS'name'
p1145
S'use_displaced_mesh'
p1146
sS'required'
p1147
I00
sS'group_name'
p1148
S'Advanced'
p1149
sa(dp1150
S'description'
p1151
S'The variable whose values are used in this marker.\n'
p1152
sS'cpp_type'
p1153
S'std::vector<VariableName>'
p1154
sS'default'
p1155
g3
sS'name'
p1156
S'variable'
p1157
sS'required'
p1158
I01
sS'group_name'
p1159
NsasS'name'
p1160
S'/Adaptivity/Markers/ValueRangeMarker'
p1161
sa(dp1162
S'description'
p1163
S'The the refinement state based on a threshold value compared to the specified variable.\n'
p1164
sS'subblocks'
p1165
NsS'parameters'
p1166
(lp1167
(dp1168
S'description'
p1169
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1170
sS'cpp_type'
p1171
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1172
sS'default'
p1173
g3
sS'name'
p1174
S'block'
p1175
sS'required'
p1176
I00
sS'group_name'
p1177
Nsa(dp1178
S'description'
p1179
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p1180
sS'cpp_type'
p1181
S'double'
p1182
sS'default'
p1183
g3
sS'name'
p1184
S'coarsen'
p1185
sS'required'
p1186
I00
sS'group_name'
p1187
Nsa(dp1188
S'description'
p1189
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1190
sS'cpp_type'
p1191
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1192
sS'default'
p1193
g3
sS'name'
p1194
S'control_tags'
p1195
sS'required'
p1196
I00
sS'group_name'
p1197
S'Advanced'
p1198
sa(dp1199
S'description'
p1200
S'Set the enabled status of the MooseObject.\n'
p1201
sS'cpp_type'
p1202
S'bool'
p1203
sS'default'
p1204
S'1'
p1205
sS'name'
p1206
S'enable'
p1207
sS'required'
p1208
I00
sS'group_name'
p1209
S'Advanced'
p1210
sa(dp1211
S'description'
p1212
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p1213
sS'cpp_type'
p1214
S'bool'
p1215
sS'default'
p1216
S'0'
p1217
sS'name'
p1218
S'invert'
p1219
sS'required'
p1220
I00
sS'group_name'
p1221
Nsa(dp1222
S'description'
p1223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1224
sS'cpp_type'
p1225
S'std::vector<OutputName, std::allocator<OutputName> >'
p1226
sS'default'
p1227
g3
sS'name'
p1228
S'outputs'
p1229
sS'required'
p1230
I00
sS'group_name'
p1231
S'Advanced'
p1232
sa(dp1233
S'description'
p1234
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p1235
sS'cpp_type'
p1236
S'double'
p1237
sS'default'
p1238
g3
sS'name'
p1239
S'refine'
p1240
sS'required'
p1241
I00
sS'group_name'
p1242
Nsa(dp1243
S'name'
p1244
S'third_state'
p1245
sS'cpp_type'
p1246
S'MooseEnum'
p1247
sS'default'
p1248
S'DONT_MARK'
p1249
sS'description'
p1250
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p1251
sS'required'
p1252
I00
sS'options'
p1253
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1254
sS'group_name'
p1255
Nsa(dp1256
S'description'
p1257
g3
sS'cpp_type'
p1258
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1259
sS'default'
p1260
S'ValueThresholdMarker'
p1261
sS'name'
p1262
S'type'
p1263
sS'required'
p1264
I00
sS'group_name'
p1265
Nsa(dp1266
S'description'
p1267
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1268
sS'cpp_type'
p1269
S'bool'
p1270
sS'default'
p1271
S'0'
p1272
sS'name'
p1273
S'use_displaced_mesh'
p1274
sS'required'
p1275
I00
sS'group_name'
p1276
S'Advanced'
p1277
sa(dp1278
S'description'
p1279
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1280
sS'cpp_type'
p1281
S'std::vector<VariableName>'
p1282
sS'default'
p1283
g3
sS'name'
p1284
S'variable'
p1285
sS'required'
p1286
I01
sS'group_name'
p1287
NsasS'name'
p1288
S'/Adaptivity/Markers/ValueThresholdMarker'
p1289
sasS'parameters'
p1290
NsS'name'
p1291
S'/Adaptivity/Markers'
p1292
sasS'parameters'
p1293
(lp1294
(dp1295
S'description'
p1296
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1297
sS'cpp_type'
p1298
S'unsigned int'
p1299
sS'default'
p1300
S'1'
p1301
sS'name'
p1302
S'cycles_per_step'
p1303
sS'required'
p1304
I00
sS'group_name'
p1305
Nsa(dp1306
S'description'
p1307
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1308
sS'cpp_type'
p1309
S'MarkerName'
p1310
sS'default'
p1311
g3
sS'name'
p1312
S'initial_marker'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The number of adaptive steps to do based on the initial condition.\n'
p1318
sS'cpp_type'
p1319
S'unsigned int'
p1320
sS'default'
p1321
S'0'
p1322
sS'name'
p1323
S'initial_steps'
p1324
sS'required'
p1325
I00
sS'group_name'
p1326
Nsa(dp1327
S'description'
p1328
S'The name of the Marker to use to actually adapt the mesh.\n'
p1329
sS'cpp_type'
p1330
S'MarkerName'
p1331
sS'default'
p1332
g3
sS'name'
p1333
S'marker'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
Nsa(dp1337
S'description'
p1338
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1339
sS'cpp_type'
p1340
S'unsigned int'
p1341
sS'default'
p1342
S'0'
p1343
sS'name'
p1344
S'max_h_level'
p1345
sS'required'
p1346
I00
sS'group_name'
p1347
Nsa(dp1348
S'description'
p1349
S'Recompute markers during adaptivity cycles\n'
p1350
sS'cpp_type'
p1351
S'bool'
p1352
sS'default'
p1353
S'0'
p1354
sS'name'
p1355
S'recompute_markers_during_cycles'
p1356
sS'required'
p1357
I00
sS'group_name'
p1358
Nsa(dp1359
S'description'
p1360
S'The time that adaptivity will be active after.\n'
p1361
sS'cpp_type'
p1362
S'double'
p1363
sS'default'
p1364
S'-1.79769e+308'
p1365
sS'name'
p1366
S'start_time'
p1367
sS'required'
p1368
I00
sS'group_name'
p1369
Nsa(dp1370
S'description'
p1371
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1372
sS'cpp_type'
p1373
S'unsigned int'
p1374
sS'default'
p1375
S'0'
p1376
sS'name'
p1377
S'steps'
p1378
sS'required'
p1379
I00
sS'group_name'
p1380
Nsa(dp1381
S'description'
p1382
S'The time after which adaptivity will no longer be active.\n'
p1383
sS'cpp_type'
p1384
S'double'
p1385
sS'default'
p1386
S'1.79769e+308'
p1387
sS'name'
p1388
S'stop_time'
p1389
sS'required'
p1390
I00
sS'group_name'
p1391
NsasS'name'
p1392
S'/Adaptivity'
p1393
sa(dp1394
S'description'
p1395
g3
sS'subblocks'
p1396
(lp1397
(dp1398
S'description'
p1399
g3
sS'subblocks'
p1400
NsS'parameters'
p1401
(lp1402
(dp1403
S'description'
p1404
S'A string representing the Moose Object that will be built by this Action\n'
p1405
sS'cpp_type'
p1406
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1407
sS'default'
p1408
g3
sS'name'
p1409
S'type'
p1410
sS'required'
p1411
I01
sS'group_name'
p1412
NsasS'name'
p1413
S'/AuxKernels/*'
p1414
sa(dp1415
S'description'
p1416
g3
sS'subblocks'
p1417
NsS'parameters'
p1418
(lp1419
(dp1420
S'description'
p1421
S'Variable whose values are to be accumulated into the current variable\n'
p1422
sS'cpp_type'
p1423
S'std::vector<VariableName>'
p1424
sS'default'
p1425
g3
sS'name'
p1426
S'accumulate_from_variable'
p1427
sS'required'
p1428
I01
sS'group_name'
p1429
Nsa(dp1430
S'description'
p1431
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1432
sS'cpp_type'
p1433
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1434
sS'default'
p1435
g3
sS'name'
p1436
S'block'
p1437
sS'required'
p1438
I00
sS'group_name'
p1439
Nsa(dp1440
S'description'
p1441
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1442
sS'cpp_type'
p1443
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1444
sS'default'
p1445
g3
sS'name'
p1446
S'boundary'
p1447
sS'required'
p1448
I00
sS'group_name'
p1449
Nsa(dp1450
S'description'
p1451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1452
sS'cpp_type'
p1453
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1454
sS'default'
p1455
g3
sS'name'
p1456
S'control_tags'
p1457
sS'required'
p1458
I00
sS'group_name'
p1459
S'Advanced'
p1460
sa(dp1461
S'description'
p1462
S'Set the enabled status of the MooseObject.\n'
p1463
sS'cpp_type'
p1464
S'bool'
p1465
sS'default'
p1466
S'1'
p1467
sS'name'
p1468
S'enable'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
S'Advanced'
p1472
sa(dp1473
S'name'
p1474
S'execute_on'
p1475
sS'cpp_type'
p1476
S'MultiMooseEnum'
p1477
sS'default'
p1478
S'LINEAR'
p1479
sS'description'
p1480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1481
sS'required'
p1482
I00
sS'options'
p1483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1484
sS'group_name'
p1485
Nsa(dp1486
S'description'
p1487
S'The seed for the master random number generator\n'
p1488
sS'cpp_type'
p1489
S'unsigned int'
p1490
sS'default'
p1491
S'0'
p1492
sS'name'
p1493
S'seed'
p1494
sS'required'
p1495
I00
sS'group_name'
p1496
S'Advanced'
p1497
sa(dp1498
S'description'
p1499
g3
sS'cpp_type'
p1500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1501
sS'default'
p1502
S'AccumulateAux'
p1503
sS'name'
p1504
S'type'
p1505
sS'required'
p1506
I00
sS'group_name'
p1507
Nsa(dp1508
S'description'
p1509
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1510
sS'cpp_type'
p1511
S'bool'
p1512
sS'default'
p1513
S'0'
p1514
sS'name'
p1515
S'use_displaced_mesh'
p1516
sS'required'
p1517
I00
sS'group_name'
p1518
S'Advanced'
p1519
sa(dp1520
S'description'
p1521
S'The name of the variable that this object applies to\n'
p1522
sS'cpp_type'
p1523
S'AuxVariableName'
p1524
sS'default'
p1525
g3
sS'name'
p1526
S'variable'
p1527
sS'required'
p1528
I01
sS'group_name'
p1529
NsasS'name'
p1530
S'/AuxKernels/AccumulateAux'
p1531
sa(dp1532
S'description'
p1533
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p1534
sS'subblocks'
p1535
NsS'parameters'
p1536
(lp1537
(dp1538
S'description'
p1539
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1540
sS'cpp_type'
p1541
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1542
sS'default'
p1543
g3
sS'name'
p1544
S'block'
p1545
sS'required'
p1546
I00
sS'group_name'
p1547
Nsa(dp1548
S'description'
p1549
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1550
sS'cpp_type'
p1551
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1552
sS'default'
p1553
g3
sS'name'
p1554
S'boundary'
p1555
sS'required'
p1556
I00
sS'group_name'
p1557
Nsa(dp1558
S'description'
p1559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1560
sS'cpp_type'
p1561
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1562
sS'default'
p1563
g3
sS'name'
p1564
S'control_tags'
p1565
sS'required'
p1566
I00
sS'group_name'
p1567
S'Advanced'
p1568
sa(dp1569
S'description'
p1570
S'Set the enabled status of the MooseObject.\n'
p1571
sS'cpp_type'
p1572
S'bool'
p1573
sS'default'
p1574
S'1'
p1575
sS'name'
p1576
S'enable'
p1577
sS'required'
p1578
I00
sS'group_name'
p1579
S'Advanced'
p1580
sa(dp1581
S'name'
p1582
S'execute_on'
p1583
sS'cpp_type'
p1584
S'MultiMooseEnum'
p1585
sS'default'
p1586
S'LINEAR'
p1587
sS'description'
p1588
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1589
sS'required'
p1590
I00
sS'options'
p1591
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1592
sS'group_name'
p1593
Nsa(dp1594
S'description'
p1595
S'Array of coupled variables (num_name)\n'
p1596
sS'cpp_type'
p1597
S'unsigned int'
p1598
sS'default'
p1599
g3
sS'name'
p1600
S'op_num'
p1601
sS'required'
p1602
I00
sS'group_name'
p1603
Nsa(dp1604
S'description'
p1605
S'The seed for the master random number generator\n'
p1606
sS'cpp_type'
p1607
S'unsigned int'
p1608
sS'default'
p1609
S'0'
p1610
sS'name'
p1611
S'seed'
p1612
sS'required'
p1613
I00
sS'group_name'
p1614
S'Advanced'
p1615
sa(dp1616
S'description'
p1617
g3
sS'cpp_type'
p1618
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1619
sS'default'
p1620
S'BndsCalcAux'
p1621
sS'name'
p1622
S'type'
p1623
sS'required'
p1624
I00
sS'group_name'
p1625
Nsa(dp1626
S'description'
p1627
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1628
sS'cpp_type'
p1629
S'bool'
p1630
sS'default'
p1631
S'0'
p1632
sS'name'
p1633
S'use_displaced_mesh'
p1634
sS'required'
p1635
I00
sS'group_name'
p1636
S'Advanced'
p1637
sa(dp1638
S'description'
p1639
S'Array of coupled variables\n'
p1640
sS'cpp_type'
p1641
S'std::vector<VariableName>'
p1642
sS'default'
p1643
g3
sS'name'
p1644
S'v'
p1645
sS'required'
p1646
I01
sS'group_name'
p1647
Nsa(dp1648
S'description'
p1649
S'Array of coupled variables (base_name)\n'
p1650
sS'cpp_type'
p1651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1652
sS'default'
p1653
g3
sS'name'
p1654
S'var_name_base'
p1655
sS'required'
p1656
I00
sS'group_name'
p1657
Nsa(dp1658
S'description'
p1659
S'The name of the variable that this object applies to\n'
p1660
sS'cpp_type'
p1661
S'AuxVariableName'
p1662
sS'default'
p1663
g3
sS'name'
p1664
S'variable'
p1665
sS'required'
p1666
I01
sS'group_name'
p1667
NsasS'name'
p1668
S'/AuxKernels/BndsCalcAux'
p1669
sa(dp1670
S'description'
p1671
g3
sS'subblocks'
p1672
NsS'parameters'
p1673
(lp1674
(dp1675
S'description'
p1676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1677
sS'cpp_type'
p1678
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'block'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1687
sS'cpp_type'
p1688
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'boundary'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'description'
p1696
S'The variable to be bounded\n'
p1697
sS'cpp_type'
p1698
S'std::vector<VariableName>'
p1699
sS'default'
p1700
g3
sS'name'
p1701
S'bounded_variable'
p1702
sS'required'
p1703
I01
sS'group_name'
p1704
Nsa(dp1705
S'description'
p1706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1707
sS'cpp_type'
p1708
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1709
sS'default'
p1710
g3
sS'name'
p1711
S'control_tags'
p1712
sS'required'
p1713
I00
sS'group_name'
p1714
S'Advanced'
p1715
sa(dp1716
S'description'
p1717
S'Set the enabled status of the MooseObject.\n'
p1718
sS'cpp_type'
p1719
S'bool'
p1720
sS'default'
p1721
S'1'
p1722
sS'name'
p1723
S'enable'
p1724
sS'required'
p1725
I00
sS'group_name'
p1726
S'Advanced'
p1727
sa(dp1728
S'name'
p1729
S'execute_on'
p1730
sS'cpp_type'
p1731
S'MultiMooseEnum'
p1732
sS'default'
p1733
S'LINEAR'
p1734
sS'description'
p1735
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1736
sS'required'
p1737
I00
sS'options'
p1738
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1739
sS'group_name'
p1740
Nsa(dp1741
S'description'
p1742
S'The lower bound for the variable\n'
p1743
sS'cpp_type'
p1744
S'double'
p1745
sS'default'
p1746
g3
sS'name'
p1747
S'lower'
p1748
sS'required'
p1749
I00
sS'group_name'
p1750
Nsa(dp1751
S'description'
p1752
S'The seed for the master random number generator\n'
p1753
sS'cpp_type'
p1754
S'unsigned int'
p1755
sS'default'
p1756
S'0'
p1757
sS'name'
p1758
S'seed'
p1759
sS'required'
p1760
I00
sS'group_name'
p1761
S'Advanced'
p1762
sa(dp1763
S'description'
p1764
g3
sS'cpp_type'
p1765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1766
sS'default'
p1767
S'BoundsAux'
p1768
sS'name'
p1769
S'type'
p1770
sS'required'
p1771
I00
sS'group_name'
p1772
Nsa(dp1773
S'description'
p1774
S'The upper bound for the variable\n'
p1775
sS'cpp_type'
p1776
S'double'
p1777
sS'default'
p1778
g3
sS'name'
p1779
S'upper'
p1780
sS'required'
p1781
I00
sS'group_name'
p1782
Nsa(dp1783
S'description'
p1784
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1785
sS'cpp_type'
p1786
S'bool'
p1787
sS'default'
p1788
S'0'
p1789
sS'name'
p1790
S'use_displaced_mesh'
p1791
sS'required'
p1792
I00
sS'group_name'
p1793
S'Advanced'
p1794
sa(dp1795
S'description'
p1796
S'The name of the variable that this object applies to\n'
p1797
sS'cpp_type'
p1798
S'AuxVariableName'
p1799
sS'default'
p1800
g3
sS'name'
p1801
S'variable'
p1802
sS'required'
p1803
I01
sS'group_name'
p1804
NsasS'name'
p1805
S'/AuxKernels/BoundsAux'
p1806
sa(dp1807
S'description'
p1808
g3
sS'subblocks'
p1809
NsS'parameters'
p1810
(lp1811
(dp1812
S'description'
p1813
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1814
sS'cpp_type'
p1815
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1816
sS'default'
p1817
g3
sS'name'
p1818
S'block'
p1819
sS'required'
p1820
I00
sS'group_name'
p1821
Nsa(dp1822
S'description'
p1823
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1824
sS'cpp_type'
p1825
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1826
sS'default'
p1827
g3
sS'name'
p1828
S'boundary'
p1829
sS'required'
p1830
I00
sS'group_name'
p1831
Nsa(dp1832
S'description'
p1833
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1834
sS'cpp_type'
p1835
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1836
sS'default'
p1837
g3
sS'name'
p1838
S'control_tags'
p1839
sS'required'
p1840
I00
sS'group_name'
p1841
S'Advanced'
p1842
sa(dp1843
S'description'
p1844
S'Set the enabled status of the MooseObject.\n'
p1845
sS'cpp_type'
p1846
S'bool'
p1847
sS'default'
p1848
S'1'
p1849
sS'name'
p1850
S'enable'
p1851
sS'required'
p1852
I00
sS'group_name'
p1853
S'Advanced'
p1854
sa(dp1855
S'name'
p1856
S'execute_on'
p1857
sS'cpp_type'
p1858
S'MultiMooseEnum'
p1859
sS'default'
p1860
S'LINEAR'
p1861
sS'description'
p1862
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1863
sS'required'
p1864
I00
sS'options'
p1865
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1866
sS'group_name'
p1867
Nsa(dp1868
S'description'
p1869
S'The seed for the master random number generator\n'
p1870
sS'cpp_type'
p1871
S'unsigned int'
p1872
sS'default'
p1873
S'0'
p1874
sS'name'
p1875
S'seed'
p1876
sS'required'
p1877
I00
sS'group_name'
p1878
S'Advanced'
p1879
sa(dp1880
S'description'
p1881
g3
sS'cpp_type'
p1882
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1883
sS'default'
p1884
S'ConstantAux'
p1885
sS'name'
p1886
S'type'
p1887
sS'required'
p1888
I00
sS'group_name'
p1889
Nsa(dp1890
S'description'
p1891
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1892
sS'cpp_type'
p1893
S'bool'
p1894
sS'default'
p1895
S'0'
p1896
sS'name'
p1897
S'use_displaced_mesh'
p1898
sS'required'
p1899
I00
sS'group_name'
p1900
S'Advanced'
p1901
sa(dp1902
S'description'
p1903
S'Some constant value that can be read from the input file\n'
p1904
sS'cpp_type'
p1905
S'double'
p1906
sS'default'
p1907
S'0'
p1908
sS'name'
p1909
S'value'
p1910
sS'required'
p1911
I00
sS'group_name'
p1912
Nsa(dp1913
S'description'
p1914
S'The name of the variable that this object applies to\n'
p1915
sS'cpp_type'
p1916
S'AuxVariableName'
p1917
sS'default'
p1918
g3
sS'name'
p1919
S'variable'
p1920
sS'required'
p1921
I01
sS'group_name'
p1922
NsasS'name'
p1923
S'/AuxKernels/ConstantAux'
p1924
sa(dp1925
S'description'
p1926
S'Free energy contribution from the cross terms in ACMultiInetrface\n'
p1927
sS'subblocks'
p1928
NsS'parameters'
p1929
(lp1930
(dp1931
S'description'
p1932
S'Coupled variable holding additional free energy contributions to be summed up\n'
p1933
sS'cpp_type'
p1934
S'std::vector<VariableName>'
p1935
sS'default'
p1936
S'0'
p1937
sS'name'
p1938
S'additional_free_energy'
p1939
sS'required'
p1940
I00
sS'group_name'
p1941
Nsa(dp1942
S'description'
p1943
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1944
sS'cpp_type'
p1945
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1946
sS'default'
p1947
g3
sS'name'
p1948
S'block'
p1949
sS'required'
p1950
I00
sS'group_name'
p1951
Nsa(dp1952
S'description'
p1953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1954
sS'cpp_type'
p1955
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1956
sS'default'
p1957
g3
sS'name'
p1958
S'boundary'
p1959
sS'required'
p1960
I00
sS'group_name'
p1961
Nsa(dp1962
S'description'
p1963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1964
sS'cpp_type'
p1965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1966
sS'default'
p1967
g3
sS'name'
p1968
S'control_tags'
p1969
sS'required'
p1970
I00
sS'group_name'
p1971
S'Advanced'
p1972
sa(dp1973
S'description'
p1974
S'Set the enabled status of the MooseObject.\n'
p1975
sS'cpp_type'
p1976
S'bool'
p1977
sS'default'
p1978
S'1'
p1979
sS'name'
p1980
S'enable'
p1981
sS'required'
p1982
I00
sS'group_name'
p1983
S'Advanced'
p1984
sa(dp1985
S'name'
p1986
S'execute_on'
p1987
sS'cpp_type'
p1988
S'MultiMooseEnum'
p1989
sS'default'
p1990
S'LINEAR'
p1991
sS'description'
p1992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1993
sS'required'
p1994
I00
sS'options'
p1995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1996
sS'group_name'
p1997
Nsa(dp1998
S'description'
p1999
S'Variable names that contribute to interfacial energy\n'
p2000
sS'cpp_type'
p2001
S'std::vector<VariableName>'
p2002
sS'default'
p2003
g3
sS'name'
p2004
S'interfacial_vars'
p2005
sS'required'
p2006
I00
sS'group_name'
p2007
Nsa(dp2008
S'description'
p2009
S'Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n'
p2010
sS'cpp_type'
p2011
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p2012
sS'default'
p2013
g3
sS'name'
p2014
S'kappa_names'
p2015
sS'required'
p2016
I01
sS'group_name'
p2017
Nsa(dp2018
S'description'
p2019
S'The seed for the master random number generator\n'
p2020
sS'cpp_type'
p2021
S'unsigned int'
p2022
sS'default'
p2023
S'0'
p2024
sS'name'
p2025
S'seed'
p2026
sS'required'
p2027
I00
sS'group_name'
p2028
S'Advanced'
p2029
sa(dp2030
S'description'
p2031
g3
sS'cpp_type'
p2032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2033
sS'default'
p2034
S'CrossTermGradientFreeEnergy'
p2035
sS'name'
p2036
S'type'
p2037
sS'required'
p2038
I00
sS'group_name'
p2039
Nsa(dp2040
S'description'
p2041
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2042
sS'cpp_type'
p2043
S'bool'
p2044
sS'default'
p2045
S'0'
p2046
sS'name'
p2047
S'use_displaced_mesh'
p2048
sS'required'
p2049
I00
sS'group_name'
p2050
S'Advanced'
p2051
sa(dp2052
S'description'
p2053
S'The name of the variable that this object applies to\n'
p2054
sS'cpp_type'
p2055
S'AuxVariableName'
p2056
sS'default'
p2057
g3
sS'name'
p2058
S'variable'
p2059
sS'required'
p2060
I01
sS'group_name'
p2061
NsasS'name'
p2062
S'/AuxKernels/CrossTermGradientFreeEnergy'
p2063
sa(dp2064
S'description'
p2065
S'Output updated rotation tensor to a file: Use for stereographic plots\n'
p2066
sS'subblocks'
p2067
NsS'parameters'
p2068
(lp2069
(dp2070
S'description'
p2071
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2072
sS'cpp_type'
p2073
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2074
sS'default'
p2075
g3
sS'name'
p2076
S'block'
p2077
sS'required'
p2078
I00
sS'group_name'
p2079
Nsa(dp2080
S'description'
p2081
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2082
sS'cpp_type'
p2083
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2084
sS'default'
p2085
g3
sS'name'
p2086
S'boundary'
p2087
sS'required'
p2088
I00
sS'group_name'
p2089
Nsa(dp2090
S'description'
p2091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2092
sS'cpp_type'
p2093
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2094
sS'default'
p2095
g3
sS'name'
p2096
S'control_tags'
p2097
sS'required'
p2098
I00
sS'group_name'
p2099
S'Advanced'
p2100
sa(dp2101
S'description'
p2102
S'Set the enabled status of the MooseObject.\n'
p2103
sS'cpp_type'
p2104
S'bool'
p2105
sS'default'
p2106
S'1'
p2107
sS'name'
p2108
S'enable'
p2109
sS'required'
p2110
I00
sS'group_name'
p2111
S'Advanced'
p2112
sa(dp2113
S'name'
p2114
S'execute_on'
p2115
sS'cpp_type'
p2116
S'MultiMooseEnum'
p2117
sS'default'
p2118
S'LINEAR'
p2119
sS'description'
p2120
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2121
sS'required'
p2122
I00
sS'options'
p2123
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2124
sS'group_name'
p2125
Nsa(dp2126
S'description'
p2127
S'Frequency of Output\n'
p2128
sS'cpp_type'
p2129
S'unsigned int'
p2130
sS'default'
p2131
S'1'
p2132
sS'name'
p2133
S'output_frequency'
p2134
sS'required'
p2135
I00
sS'group_name'
p2136
Nsa(dp2137
S'description'
p2138
S'Name of rotation output file: Default rot.out\n'
p2139
sS'cpp_type'
p2140
S'FileName'
p2141
sS'default'
p2142
S'rot.out'
p2143
sS'name'
p2144
S'rotout_file_name'
p2145
sS'required'
p2146
I00
sS'group_name'
p2147
Nsa(dp2148
S'description'
p2149
S'The seed for the master random number generator\n'
p2150
sS'cpp_type'
p2151
S'unsigned int'
p2152
sS'default'
p2153
S'0'
p2154
sS'name'
p2155
S'seed'
p2156
sS'required'
p2157
I00
sS'group_name'
p2158
S'Advanced'
p2159
sa(dp2160
S'description'
p2161
g3
sS'cpp_type'
p2162
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2163
sS'default'
p2164
S'CrystalPlasticityRotationOutAux'
p2165
sS'name'
p2166
S'type'
p2167
sS'required'
p2168
I00
sS'group_name'
p2169
Nsa(dp2170
S'description'
p2171
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2172
sS'cpp_type'
p2173
S'bool'
p2174
sS'default'
p2175
S'0'
p2176
sS'name'
p2177
S'use_displaced_mesh'
p2178
sS'required'
p2179
I00
sS'group_name'
p2180
S'Advanced'
p2181
sa(dp2182
S'description'
p2183
S'The name of the variable that this object applies to\n'
p2184
sS'cpp_type'
p2185
S'AuxVariableName'
p2186
sS'default'
p2187
g3
sS'name'
p2188
S'variable'
p2189
sS'required'
p2190
I01
sS'group_name'
p2191
NsasS'name'
p2192
S'/AuxKernels/CrystalPlasticityRotationOutAux'
p2193
sa(dp2194
S'description'
p2195
S'Takes RankTwoTensor material and outputs component in cylindrical coordinates\n'
p2196
sS'subblocks'
p2197
NsS'parameters'
p2198
(lp2199
(dp2200
S'description'
p2201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2202
sS'cpp_type'
p2203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2204
sS'default'
p2205
g3
sS'name'
p2206
S'block'
p2207
sS'required'
p2208
I00
sS'group_name'
p2209
Nsa(dp2210
S'description'
p2211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2212
sS'cpp_type'
p2213
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2214
sS'default'
p2215
g3
sS'name'
p2216
S'boundary'
p2217
sS'required'
p2218
I00
sS'group_name'
p2219
Nsa(dp2220
S'description'
p2221
S'Location of the center point of the cylindrical coordinates\n'
p2222
sS'cpp_type'
p2223
S'libMesh::Point'
p2224
sS'default'
p2225
g3
sS'name'
p2226
S'center_point'
p2227
sS'required'
p2228
I01
sS'group_name'
p2229
Nsa(dp2230
S'description'
p2231
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2232
sS'cpp_type'
p2233
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2234
sS'default'
p2235
g3
sS'name'
p2236
S'control_tags'
p2237
sS'required'
p2238
I00
sS'group_name'
p2239
S'Advanced'
p2240
sa(dp2241
S'description'
p2242
S'Set the enabled status of the MooseObject.\n'
p2243
sS'cpp_type'
p2244
S'bool'
p2245
sS'default'
p2246
S'1'
p2247
sS'name'
p2248
S'enable'
p2249
sS'required'
p2250
I00
sS'group_name'
p2251
S'Advanced'
p2252
sa(dp2253
S'name'
p2254
S'execute_on'
p2255
sS'cpp_type'
p2256
S'MultiMooseEnum'
p2257
sS'default'
p2258
S'LINEAR'
p2259
sS'description'
p2260
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2261
sS'required'
p2262
I00
sS'options'
p2263
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2264
sS'group_name'
p2265
Nsa(dp2266
S'description'
p2267
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p2268
sS'cpp_type'
p2269
S'unsigned int'
p2270
sS'default'
p2271
g3
sS'name'
p2272
S'index_i'
p2273
sS'required'
p2274
I01
sS'group_name'
p2275
Nsa(dp2276
S'description'
p2277
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p2278
sS'cpp_type'
p2279
S'unsigned int'
p2280
sS'default'
p2281
g3
sS'name'
p2282
S'index_j'
p2283
sS'required'
p2284
I01
sS'group_name'
p2285
Nsa(dp2286
S'description'
p2287
S'The rank two material tensor name\n'
p2288
sS'cpp_type'
p2289
S'MaterialPropertyName'
p2290
sS'default'
p2291
g3
sS'name'
p2292
S'rank_two_tensor'
p2293
sS'required'
p2294
I01
sS'group_name'
p2295
Nsa(dp2296
S'description'
p2297
S'The seed for the master random number generator\n'
p2298
sS'cpp_type'
p2299
S'unsigned int'
p2300
sS'default'
p2301
S'0'
p2302
sS'name'
p2303
S'seed'
p2304
sS'required'
p2305
I00
sS'group_name'
p2306
S'Advanced'
p2307
sa(dp2308
S'description'
p2309
g3
sS'cpp_type'
p2310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2311
sS'default'
p2312
S'CylindricalRankTwoAux'
p2313
sS'name'
p2314
S'type'
p2315
sS'required'
p2316
I00
sS'group_name'
p2317
Nsa(dp2318
S'description'
p2319
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2320
sS'cpp_type'
p2321
S'bool'
p2322
sS'default'
p2323
S'0'
p2324
sS'name'
p2325
S'use_displaced_mesh'
p2326
sS'required'
p2327
I00
sS'group_name'
p2328
S'Advanced'
p2329
sa(dp2330
S'description'
p2331
S'The name of the variable that this object applies to\n'
p2332
sS'cpp_type'
p2333
S'AuxVariableName'
p2334
sS'default'
p2335
g3
sS'name'
p2336
S'variable'
p2337
sS'required'
p2338
I01
sS'group_name'
p2339
NsasS'name'
p2340
S'/AuxKernels/CylindricalRankTwoAux'
p2341
sa(dp2342
S'description'
p2343
g3
sS'subblocks'
p2344
NsS'parameters'
p2345
(lp2346
(dp2347
S'description'
p2348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2349
sS'cpp_type'
p2350
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2351
sS'default'
p2352
g3
sS'name'
p2353
S'block'
p2354
sS'required'
p2355
I00
sS'group_name'
p2356
Nsa(dp2357
S'description'
p2358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2359
sS'cpp_type'
p2360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2361
sS'default'
p2362
g3
sS'name'
p2363
S'boundary'
p2364
sS'required'
p2365
I00
sS'group_name'
p2366
Nsa(dp2367
S'description'
p2368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2369
sS'cpp_type'
p2370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2371
sS'default'
p2372
g3
sS'name'
p2373
S'control_tags'
p2374
sS'required'
p2375
I00
sS'group_name'
p2376
S'Advanced'
p2377
sa(dp2378
S'description'
p2379
S'The variable that is being debugged.\n'
p2380
sS'cpp_type'
p2381
S'NonlinearVariableName'
p2382
sS'default'
p2383
g3
sS'name'
p2384
S'debug_variable'
p2385
sS'required'
p2386
I01
sS'group_name'
p2387
Nsa(dp2388
S'description'
p2389
S'Set the enabled status of the MooseObject.\n'
p2390
sS'cpp_type'
p2391
S'bool'
p2392
sS'default'
p2393
S'1'
p2394
sS'name'
p2395
S'enable'
p2396
sS'required'
p2397
I00
sS'group_name'
p2398
S'Advanced'
p2399
sa(dp2400
S'name'
p2401
S'execute_on'
p2402
sS'cpp_type'
p2403
S'MultiMooseEnum'
p2404
sS'default'
p2405
S'LINEAR'
p2406
sS'description'
p2407
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2408
sS'required'
p2409
I00
sS'options'
p2410
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2411
sS'group_name'
p2412
Nsa(dp2413
S'description'
p2414
S'The seed for the master random number generator\n'
p2415
sS'cpp_type'
p2416
S'unsigned int'
p2417
sS'default'
p2418
S'0'
p2419
sS'name'
p2420
S'seed'
p2421
sS'required'
p2422
I00
sS'group_name'
p2423
S'Advanced'
p2424
sa(dp2425
S'description'
p2426
g3
sS'cpp_type'
p2427
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2428
sS'default'
p2429
S'DebugResidualAux'
p2430
sS'name'
p2431
S'type'
p2432
sS'required'
p2433
I00
sS'group_name'
p2434
Nsa(dp2435
S'description'
p2436
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2437
sS'cpp_type'
p2438
S'bool'
p2439
sS'default'
p2440
S'0'
p2441
sS'name'
p2442
S'use_displaced_mesh'
p2443
sS'required'
p2444
I00
sS'group_name'
p2445
S'Advanced'
p2446
sa(dp2447
S'description'
p2448
S'The name of the variable that this object applies to\n'
p2449
sS'cpp_type'
p2450
S'AuxVariableName'
p2451
sS'default'
p2452
g3
sS'name'
p2453
S'variable'
p2454
sS'required'
p2455
I01
sS'group_name'
p2456
NsasS'name'
p2457
S'/AuxKernels/DebugResidualAux'
p2458
sa(dp2459
S'description'
p2460
g3
sS'subblocks'
p2461
NsS'parameters'
p2462
(lp2463
(dp2464
S'description'
p2465
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2466
sS'cpp_type'
p2467
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2468
sS'default'
p2469
g3
sS'name'
p2470
S'block'
p2471
sS'required'
p2472
I00
sS'group_name'
p2473
Nsa(dp2474
S'description'
p2475
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2476
sS'cpp_type'
p2477
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2478
sS'default'
p2479
g3
sS'name'
p2480
S'boundary'
p2481
sS'required'
p2482
I00
sS'group_name'
p2483
Nsa(dp2484
S'description'
p2485
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2486
sS'cpp_type'
p2487
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2488
sS'default'
p2489
g3
sS'name'
p2490
S'control_tags'
p2491
sS'required'
p2492
I00
sS'group_name'
p2493
S'Advanced'
p2494
sa(dp2495
S'name'
p2496
S'data_name'
p2497
sS'cpp_type'
p2498
S'MooseEnum'
p2499
sS'default'
p2500
g3
sS'description'
p2501
S'The averaged data to be extracted from the EBSD data by this AuxKernel\n'
p2502
sS'required'
p2503
I01
sS'options'
p2504
S'phi1 phi phi2 phase symmetry local_id feature_id'
p2505
sS'group_name'
p2506
Nsa(dp2507
S'description'
p2508
S'The EBSDReader GeneralUserObject\n'
p2509
sS'cpp_type'
p2510
S'UserObjectName'
p2511
sS'default'
p2512
g3
sS'name'
p2513
S'ebsd_reader'
p2514
sS'required'
p2515
I01
sS'group_name'
p2516
Nsa(dp2517
S'description'
p2518
S'Set the enabled status of the MooseObject.\n'
p2519
sS'cpp_type'
p2520
S'bool'
p2521
sS'default'
p2522
S'1'
p2523
sS'name'
p2524
S'enable'
p2525
sS'required'
p2526
I00
sS'group_name'
p2527
S'Advanced'
p2528
sa(dp2529
S'name'
p2530
S'execute_on'
p2531
sS'cpp_type'
p2532
S'MultiMooseEnum'
p2533
sS'default'
p2534
S'LINEAR'
p2535
sS'description'
p2536
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2537
sS'required'
p2538
I00
sS'options'
p2539
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2540
sS'group_name'
p2541
Nsa(dp2542
S'description'
p2543
S'The GrainTracker UserObject\n'
p2544
sS'cpp_type'
p2545
S'UserObjectName'
p2546
sS'default'
p2547
g3
sS'name'
p2548
S'grain_tracker'
p2549
sS'required'
p2550
I01
sS'group_name'
p2551
Nsa(dp2552
S'description'
p2553
S'Value to return for points without active grains.\n'
p2554
sS'cpp_type'
p2555
S'double'
p2556
sS'default'
p2557
S'-1'
p2558
sS'name'
p2559
S'invalid'
p2560
sS'required'
p2561
I00
sS'group_name'
p2562
Nsa(dp2563
S'description'
p2564
S'The seed for the master random number generator\n'
p2565
sS'cpp_type'
p2566
S'unsigned int'
p2567
sS'default'
p2568
S'0'
p2569
sS'name'
p2570
S'seed'
p2571
sS'required'
p2572
I00
sS'group_name'
p2573
S'Advanced'
p2574
sa(dp2575
S'description'
p2576
g3
sS'cpp_type'
p2577
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2578
sS'default'
p2579
S'EBSDReaderAvgDataAux'
p2580
sS'name'
p2581
S'type'
p2582
sS'required'
p2583
I00
sS'group_name'
p2584
Nsa(dp2585
S'description'
p2586
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2587
sS'cpp_type'
p2588
S'bool'
p2589
sS'default'
p2590
S'0'
p2591
sS'name'
p2592
S'use_displaced_mesh'
p2593
sS'required'
p2594
I00
sS'group_name'
p2595
S'Advanced'
p2596
sa(dp2597
S'description'
p2598
S'The name of the variable that this object applies to\n'
p2599
sS'cpp_type'
p2600
S'AuxVariableName'
p2601
sS'default'
p2602
g3
sS'name'
p2603
S'variable'
p2604
sS'required'
p2605
I01
sS'group_name'
p2606
NsasS'name'
p2607
S'/AuxKernels/EBSDReaderAvgDataAux'
p2608
sa(dp2609
S'description'
p2610
g3
sS'subblocks'
p2611
NsS'parameters'
p2612
(lp2613
(dp2614
S'description'
p2615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2616
sS'cpp_type'
p2617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2618
sS'default'
p2619
g3
sS'name'
p2620
S'block'
p2621
sS'required'
p2622
I00
sS'group_name'
p2623
Nsa(dp2624
S'description'
p2625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2626
sS'cpp_type'
p2627
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2628
sS'default'
p2629
g3
sS'name'
p2630
S'boundary'
p2631
sS'required'
p2632
I00
sS'group_name'
p2633
Nsa(dp2634
S'description'
p2635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2636
sS'cpp_type'
p2637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2638
sS'default'
p2639
g3
sS'name'
p2640
S'control_tags'
p2641
sS'required'
p2642
I00
sS'group_name'
p2643
S'Advanced'
p2644
sa(dp2645
S'name'
p2646
S'data_name'
p2647
sS'cpp_type'
p2648
S'MooseEnum'
p2649
sS'default'
p2650
g3
sS'description'
p2651
S'The data to be extracted from the EBSD data by this AuxKernel\n'
p2652
sS'required'
p2653
I01
sS'options'
p2654
S'phi1 phi phi2 feature_id phase symmetry'
p2655
sS'group_name'
p2656
Nsa(dp2657
S'description'
p2658
S'The EBSDReader GeneralUserObject\n'
p2659
sS'cpp_type'
p2660
S'UserObjectName'
p2661
sS'default'
p2662
g3
sS'name'
p2663
S'ebsd_reader'
p2664
sS'required'
p2665
I01
sS'group_name'
p2666
Nsa(dp2667
S'description'
p2668
S'Set the enabled status of the MooseObject.\n'
p2669
sS'cpp_type'
p2670
S'bool'
p2671
sS'default'
p2672
S'1'
p2673
sS'name'
p2674
S'enable'
p2675
sS'required'
p2676
I00
sS'group_name'
p2677
S'Advanced'
p2678
sa(dp2679
S'name'
p2680
S'execute_on'
p2681
sS'cpp_type'
p2682
S'MultiMooseEnum'
p2683
sS'default'
p2684
S'LINEAR'
p2685
sS'description'
p2686
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2687
sS'required'
p2688
I00
sS'options'
p2689
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2690
sS'group_name'
p2691
Nsa(dp2692
S'description'
p2693
S'The seed for the master random number generator\n'
p2694
sS'cpp_type'
p2695
S'unsigned int'
p2696
sS'default'
p2697
S'0'
p2698
sS'name'
p2699
S'seed'
p2700
sS'required'
p2701
I00
sS'group_name'
p2702
S'Advanced'
p2703
sa(dp2704
S'description'
p2705
g3
sS'cpp_type'
p2706
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2707
sS'default'
p2708
S'EBSDReaderPointDataAux'
p2709
sS'name'
p2710
S'type'
p2711
sS'required'
p2712
I00
sS'group_name'
p2713
Nsa(dp2714
S'description'
p2715
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2716
sS'cpp_type'
p2717
S'bool'
p2718
sS'default'
p2719
S'0'
p2720
sS'name'
p2721
S'use_displaced_mesh'
p2722
sS'required'
p2723
I00
sS'group_name'
p2724
S'Advanced'
p2725
sa(dp2726
S'description'
p2727
S'The name of the variable that this object applies to\n'
p2728
sS'cpp_type'
p2729
S'AuxVariableName'
p2730
sS'default'
p2731
g3
sS'name'
p2732
S'variable'
p2733
sS'required'
p2734
I01
sS'group_name'
p2735
NsasS'name'
p2736
S'/AuxKernels/EBSDReaderPointDataAux'
p2737
sa(dp2738
S'description'
p2739
S'Compute the local elastic energy\n'
p2740
sS'subblocks'
p2741
NsS'parameters'
p2742
(lp2743
(dp2744
S'description'
p2745
S'Mechanical property base name\n'
p2746
sS'cpp_type'
p2747
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2748
sS'default'
p2749
g3
sS'name'
p2750
S'base_name'
p2751
sS'required'
p2752
I00
sS'group_name'
p2753
Nsa(dp2754
S'description'
p2755
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2756
sS'cpp_type'
p2757
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2758
sS'default'
p2759
g3
sS'name'
p2760
S'block'
p2761
sS'required'
p2762
I00
sS'group_name'
p2763
Nsa(dp2764
S'description'
p2765
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2766
sS'cpp_type'
p2767
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2768
sS'default'
p2769
g3
sS'name'
p2770
S'boundary'
p2771
sS'required'
p2772
I00
sS'group_name'
p2773
Nsa(dp2774
S'description'
p2775
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2776
sS'cpp_type'
p2777
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2778
sS'default'
p2779
g3
sS'name'
p2780
S'control_tags'
p2781
sS'required'
p2782
I00
sS'group_name'
p2783
S'Advanced'
p2784
sa(dp2785
S'description'
p2786
S'Set the enabled status of the MooseObject.\n'
p2787
sS'cpp_type'
p2788
S'bool'
p2789
sS'default'
p2790
S'1'
p2791
sS'name'
p2792
S'enable'
p2793
sS'required'
p2794
I00
sS'group_name'
p2795
S'Advanced'
p2796
sa(dp2797
S'name'
p2798
S'execute_on'
p2799
sS'cpp_type'
p2800
S'MultiMooseEnum'
p2801
sS'default'
p2802
S'LINEAR'
p2803
sS'description'
p2804
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2805
sS'required'
p2806
I00
sS'options'
p2807
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2808
sS'group_name'
p2809
Nsa(dp2810
S'description'
p2811
S'The seed for the master random number generator\n'
p2812
sS'cpp_type'
p2813
S'unsigned int'
p2814
sS'default'
p2815
S'0'
p2816
sS'name'
p2817
S'seed'
p2818
sS'required'
p2819
I00
sS'group_name'
p2820
S'Advanced'
p2821
sa(dp2822
S'description'
p2823
g3
sS'cpp_type'
p2824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2825
sS'default'
p2826
S'ElasticEnergyAux'
p2827
sS'name'
p2828
S'type'
p2829
sS'required'
p2830
I00
sS'group_name'
p2831
Nsa(dp2832
S'description'
p2833
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2834
sS'cpp_type'
p2835
S'bool'
p2836
sS'default'
p2837
S'0'
p2838
sS'name'
p2839
S'use_displaced_mesh'
p2840
sS'required'
p2841
I00
sS'group_name'
p2842
S'Advanced'
p2843
sa(dp2844
S'description'
p2845
S'The name of the variable that this object applies to\n'
p2846
sS'cpp_type'
p2847
S'AuxVariableName'
p2848
sS'default'
p2849
g3
sS'name'
p2850
S'variable'
p2851
sS'required'
p2852
I01
sS'group_name'
p2853
NsasS'name'
p2854
S'/AuxKernels/ElasticEnergyAux'
p2855
sa(dp2856
S'description'
p2857
g3
sS'subblocks'
p2858
NsS'parameters'
p2859
(lp2860
(dp2861
S'description'
p2862
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2863
sS'cpp_type'
p2864
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2865
sS'default'
p2866
g3
sS'name'
p2867
S'block'
p2868
sS'required'
p2869
I00
sS'group_name'
p2870
Nsa(dp2871
S'description'
p2872
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2873
sS'cpp_type'
p2874
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2875
sS'default'
p2876
g3
sS'name'
p2877
S'boundary'
p2878
sS'required'
p2879
I00
sS'group_name'
p2880
Nsa(dp2881
S'description'
p2882
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2883
sS'cpp_type'
p2884
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2885
sS'default'
p2886
g3
sS'name'
p2887
S'control_tags'
p2888
sS'required'
p2889
I00
sS'group_name'
p2890
S'Advanced'
p2891
sa(dp2892
S'description'
p2893
S'The variable to compute the norm of.\n'
p2894
sS'cpp_type'
p2895
S'std::vector<VariableName>'
p2896
sS'default'
p2897
g3
sS'name'
p2898
S'coupled_variable'
p2899
sS'required'
p2900
I01
sS'group_name'
p2901
Nsa(dp2902
S'description'
p2903
S'Set the enabled status of the MooseObject.\n'
p2904
sS'cpp_type'
p2905
S'bool'
p2906
sS'default'
p2907
S'1'
p2908
sS'name'
p2909
S'enable'
p2910
sS'required'
p2911
I00
sS'group_name'
p2912
S'Advanced'
p2913
sa(dp2914
S'name'
p2915
S'execute_on'
p2916
sS'cpp_type'
p2917
S'MultiMooseEnum'
p2918
sS'default'
p2919
S'LINEAR'
p2920
sS'description'
p2921
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2922
sS'required'
p2923
I00
sS'options'
p2924
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2925
sS'group_name'
p2926
Nsa(dp2927
S'description'
p2928
S'Function representing the exact solution\n'
p2929
sS'cpp_type'
p2930
S'FunctionName'
p2931
sS'default'
p2932
g3
sS'name'
p2933
S'function'
p2934
sS'required'
p2935
I01
sS'group_name'
p2936
Nsa(dp2937
S'description'
p2938
S'The exponent used in the norm.\n'
p2939
sS'cpp_type'
p2940
S'double'
p2941
sS'default'
p2942
S'2'
p2943
sS'name'
p2944
S'p'
p2945
sS'required'
p2946
I00
sS'group_name'
p2947
Nsa(dp2948
S'description'
p2949
S'The seed for the master random number generator\n'
p2950
sS'cpp_type'
p2951
S'unsigned int'
p2952
sS'default'
p2953
S'0'
p2954
sS'name'
p2955
S'seed'
p2956
sS'required'
p2957
I00
sS'group_name'
p2958
S'Advanced'
p2959
sa(dp2960
S'description'
p2961
g3
sS'cpp_type'
p2962
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2963
sS'default'
p2964
S'ElementH1ErrorFunctionAux'
p2965
sS'name'
p2966
S'type'
p2967
sS'required'
p2968
I00
sS'group_name'
p2969
Nsa(dp2970
S'description'
p2971
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2972
sS'cpp_type'
p2973
S'bool'
p2974
sS'default'
p2975
S'0'
p2976
sS'name'
p2977
S'use_displaced_mesh'
p2978
sS'required'
p2979
I00
sS'group_name'
p2980
S'Advanced'
p2981
sa(dp2982
S'description'
p2983
S'The name of the variable that this object applies to\n'
p2984
sS'cpp_type'
p2985
S'AuxVariableName'
p2986
sS'default'
p2987
g3
sS'name'
p2988
S'variable'
p2989
sS'required'
p2990
I01
sS'group_name'
p2991
NsasS'name'
p2992
S'/AuxKernels/ElementH1ErrorFunctionAux'
p2993
sa(dp2994
S'description'
p2995
g3
sS'subblocks'
p2996
NsS'parameters'
p2997
(lp2998
(dp2999
S'description'
p3000
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3001
sS'cpp_type'
p3002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3003
sS'default'
p3004
g3
sS'name'
p3005
S'block'
p3006
sS'required'
p3007
I00
sS'group_name'
p3008
Nsa(dp3009
S'description'
p3010
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3011
sS'cpp_type'
p3012
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3013
sS'default'
p3014
g3
sS'name'
p3015
S'boundary'
p3016
sS'required'
p3017
I00
sS'group_name'
p3018
Nsa(dp3019
S'description'
p3020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3021
sS'cpp_type'
p3022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3023
sS'default'
p3024
g3
sS'name'
p3025
S'control_tags'
p3026
sS'required'
p3027
I00
sS'group_name'
p3028
S'Advanced'
p3029
sa(dp3030
S'description'
p3031
S'The variable to compute the norm of.\n'
p3032
sS'cpp_type'
p3033
S'std::vector<VariableName>'
p3034
sS'default'
p3035
g3
sS'name'
p3036
S'coupled_variable'
p3037
sS'required'
p3038
I01
sS'group_name'
p3039
Nsa(dp3040
S'description'
p3041
S'Set the enabled status of the MooseObject.\n'
p3042
sS'cpp_type'
p3043
S'bool'
p3044
sS'default'
p3045
S'1'
p3046
sS'name'
p3047
S'enable'
p3048
sS'required'
p3049
I00
sS'group_name'
p3050
S'Advanced'
p3051
sa(dp3052
S'name'
p3053
S'execute_on'
p3054
sS'cpp_type'
p3055
S'MultiMooseEnum'
p3056
sS'default'
p3057
S'LINEAR'
p3058
sS'description'
p3059
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3060
sS'required'
p3061
I00
sS'options'
p3062
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3063
sS'group_name'
p3064
Nsa(dp3065
S'description'
p3066
S'Function representing the exact solution\n'
p3067
sS'cpp_type'
p3068
S'FunctionName'
p3069
sS'default'
p3070
g3
sS'name'
p3071
S'function'
p3072
sS'required'
p3073
I01
sS'group_name'
p3074
Nsa(dp3075
S'description'
p3076
S'The exponent used in the norm.\n'
p3077
sS'cpp_type'
p3078
S'double'
p3079
sS'default'
p3080
S'2'
p3081
sS'name'
p3082
S'p'
p3083
sS'required'
p3084
I00
sS'group_name'
p3085
Nsa(dp3086
S'description'
p3087
S'The seed for the master random number generator\n'
p3088
sS'cpp_type'
p3089
S'unsigned int'
p3090
sS'default'
p3091
S'0'
p3092
sS'name'
p3093
S'seed'
p3094
sS'required'
p3095
I00
sS'group_name'
p3096
S'Advanced'
p3097
sa(dp3098
S'description'
p3099
g3
sS'cpp_type'
p3100
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3101
sS'default'
p3102
S'ElementL2ErrorFunctionAux'
p3103
sS'name'
p3104
S'type'
p3105
sS'required'
p3106
I00
sS'group_name'
p3107
Nsa(dp3108
S'description'
p3109
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3110
sS'cpp_type'
p3111
S'bool'
p3112
sS'default'
p3113
S'0'
p3114
sS'name'
p3115
S'use_displaced_mesh'
p3116
sS'required'
p3117
I00
sS'group_name'
p3118
S'Advanced'
p3119
sa(dp3120
S'description'
p3121
S'The name of the variable that this object applies to\n'
p3122
sS'cpp_type'
p3123
S'AuxVariableName'
p3124
sS'default'
p3125
g3
sS'name'
p3126
S'variable'
p3127
sS'required'
p3128
I01
sS'group_name'
p3129
NsasS'name'
p3130
S'/AuxKernels/ElementL2ErrorFunctionAux'
p3131
sa(dp3132
S'description'
p3133
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p3134
sS'subblocks'
p3135
NsS'parameters'
p3136
(lp3137
(dp3138
S'description'
p3139
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3140
sS'cpp_type'
p3141
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3142
sS'default'
p3143
g3
sS'name'
p3144
S'block'
p3145
sS'required'
p3146
I00
sS'group_name'
p3147
Nsa(dp3148
S'description'
p3149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3150
sS'cpp_type'
p3151
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3152
sS'default'
p3153
g3
sS'name'
p3154
S'boundary'
p3155
sS'required'
p3156
I00
sS'group_name'
p3157
Nsa(dp3158
S'description'
p3159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3160
sS'cpp_type'
p3161
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3162
sS'default'
p3163
g3
sS'name'
p3164
S'control_tags'
p3165
sS'required'
p3166
I00
sS'group_name'
p3167
S'Advanced'
p3168
sa(dp3169
S'description'
p3170
S'Set the enabled status of the MooseObject.\n'
p3171
sS'cpp_type'
p3172
S'bool'
p3173
sS'default'
p3174
S'1'
p3175
sS'name'
p3176
S'enable'
p3177
sS'required'
p3178
I00
sS'group_name'
p3179
S'Advanced'
p3180
sa(dp3181
S'name'
p3182
S'execute_on'
p3183
sS'cpp_type'
p3184
S'MultiMooseEnum'
p3185
sS'default'
p3186
S'LINEAR'
p3187
sS'description'
p3188
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3189
sS'required'
p3190
I00
sS'options'
p3191
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3192
sS'group_name'
p3193
Nsa(dp3194
S'name'
p3195
S'method'
p3196
sS'cpp_type'
p3197
S'MooseEnum'
p3198
sS'default'
p3199
g3
sS'description'
p3200
S"The size calculation to perform ('min' or 'max').\n"
p3201
sS'required'
p3202
I01
sS'options'
p3203
S'min max'
p3204
sS'group_name'
p3205
Nsa(dp3206
S'description'
p3207
S'The seed for the master random number generator\n'
p3208
sS'cpp_type'
p3209
S'unsigned int'
p3210
sS'default'
p3211
S'0'
p3212
sS'name'
p3213
S'seed'
p3214
sS'required'
p3215
I00
sS'group_name'
p3216
S'Advanced'
p3217
sa(dp3218
S'description'
p3219
g3
sS'cpp_type'
p3220
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3221
sS'default'
p3222
S'ElementLengthAux'
p3223
sS'name'
p3224
S'type'
p3225
sS'required'
p3226
I00
sS'group_name'
p3227
Nsa(dp3228
S'description'
p3229
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3230
sS'cpp_type'
p3231
S'bool'
p3232
sS'default'
p3233
S'0'
p3234
sS'name'
p3235
S'use_displaced_mesh'
p3236
sS'required'
p3237
I00
sS'group_name'
p3238
S'Advanced'
p3239
sa(dp3240
S'description'
p3241
S'The name of the variable that this object applies to\n'
p3242
sS'cpp_type'
p3243
S'AuxVariableName'
p3244
sS'default'
p3245
g3
sS'name'
p3246
S'variable'
p3247
sS'required'
p3248
I01
sS'group_name'
p3249
NsasS'name'
p3250
S'/AuxKernels/ElementLengthAux'
p3251
sa(dp3252
S'description'
p3253
g3
sS'subblocks'
p3254
NsS'parameters'
p3255
(lp3256
(dp3257
S'description'
p3258
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3259
sS'cpp_type'
p3260
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3261
sS'default'
p3262
g3
sS'name'
p3263
S'block'
p3264
sS'required'
p3265
I00
sS'group_name'
p3266
Nsa(dp3267
S'description'
p3268
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3269
sS'cpp_type'
p3270
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3271
sS'default'
p3272
g3
sS'name'
p3273
S'boundary'
p3274
sS'required'
p3275
I00
sS'group_name'
p3276
Nsa(dp3277
S'description'
p3278
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3279
sS'cpp_type'
p3280
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3281
sS'default'
p3282
g3
sS'name'
p3283
S'control_tags'
p3284
sS'required'
p3285
I00
sS'group_name'
p3286
S'Advanced'
p3287
sa(dp3288
S'description'
p3289
S'The variable to compute the norm of.\n'
p3290
sS'cpp_type'
p3291
S'std::vector<VariableName>'
p3292
sS'default'
p3293
g3
sS'name'
p3294
S'coupled_variable'
p3295
sS'required'
p3296
I01
sS'group_name'
p3297
Nsa(dp3298
S'description'
p3299
S'Set the enabled status of the MooseObject.\n'
p3300
sS'cpp_type'
p3301
S'bool'
p3302
sS'default'
p3303
S'1'
p3304
sS'name'
p3305
S'enable'
p3306
sS'required'
p3307
I00
sS'group_name'
p3308
S'Advanced'
p3309
sa(dp3310
S'name'
p3311
S'execute_on'
p3312
sS'cpp_type'
p3313
S'MultiMooseEnum'
p3314
sS'default'
p3315
S'LINEAR'
p3316
sS'description'
p3317
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3318
sS'required'
p3319
I00
sS'options'
p3320
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3321
sS'group_name'
p3322
Nsa(dp3323
S'description'
p3324
S'The exponent used in the norm.\n'
p3325
sS'cpp_type'
p3326
S'double'
p3327
sS'default'
p3328
S'2'
p3329
sS'name'
p3330
S'p'
p3331
sS'required'
p3332
I00
sS'group_name'
p3333
Nsa(dp3334
S'description'
p3335
S'The seed for the master random number generator\n'
p3336
sS'cpp_type'
p3337
S'unsigned int'
p3338
sS'default'
p3339
S'0'
p3340
sS'name'
p3341
S'seed'
p3342
sS'required'
p3343
I00
sS'group_name'
p3344
S'Advanced'
p3345
sa(dp3346
S'description'
p3347
g3
sS'cpp_type'
p3348
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3349
sS'default'
p3350
S'ElementLpNormAux'
p3351
sS'name'
p3352
S'type'
p3353
sS'required'
p3354
I00
sS'group_name'
p3355
Nsa(dp3356
S'description'
p3357
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3358
sS'cpp_type'
p3359
S'bool'
p3360
sS'default'
p3361
S'0'
p3362
sS'name'
p3363
S'use_displaced_mesh'
p3364
sS'required'
p3365
I00
sS'group_name'
p3366
S'Advanced'
p3367
sa(dp3368
S'description'
p3369
S'The name of the variable that this object applies to\n'
p3370
sS'cpp_type'
p3371
S'AuxVariableName'
p3372
sS'default'
p3373
g3
sS'name'
p3374
S'variable'
p3375
sS'required'
p3376
I01
sS'group_name'
p3377
NsasS'name'
p3378
S'/AuxKernels/ElementLpNormAux'
p3379
sa(dp3380
S'description'
p3381
S'Output RGB representation of crystal orientation from user object to an AuxVariable. The entire domain must have the same crystal structure.\n'
p3382
sS'subblocks'
p3383
NsS'parameters'
p3384
(lp3385
(dp3386
S'description'
p3387
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3388
sS'cpp_type'
p3389
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3390
sS'default'
p3391
g3
sS'name'
p3392
S'block'
p3393
sS'required'
p3394
I00
sS'group_name'
p3395
Nsa(dp3396
S'description'
p3397
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3398
sS'cpp_type'
p3399
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3400
sS'default'
p3401
g3
sS'name'
p3402
S'boundary'
p3403
sS'required'
p3404
I00
sS'group_name'
p3405
Nsa(dp3406
S'description'
p3407
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3408
sS'cpp_type'
p3409
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3410
sS'default'
p3411
g3
sS'name'
p3412
S'control_tags'
p3413
sS'required'
p3414
I00
sS'group_name'
p3415
S'Advanced'
p3416
sa(dp3417
S'name'
p3418
S'crystal_structure'
p3419
sS'cpp_type'
p3420
S'MooseEnum'
p3421
sS'default'
p3422
g3
sS'description'
p3423
S'Crystal structure of the material\n'
p3424
sS'required'
p3425
I01
sS'options'
p3426
S'cubic hexagonal tetragonal trigonal orthorhombic monoclinic triclinic'
p3427
sS'group_name'
p3428
Nsa(dp3429
S'description'
p3430
S'Set the enabled status of the MooseObject.\n'
p3431
sS'cpp_type'
p3432
S'bool'
p3433
sS'default'
p3434
S'1'
p3435
sS'name'
p3436
S'enable'
p3437
sS'required'
p3438
I00
sS'group_name'
p3439
S'Advanced'
p3440
sa(dp3441
S'description'
p3442
S'Name of Euler angle provider user object\n'
p3443
sS'cpp_type'
p3444
S'UserObjectName'
p3445
sS'default'
p3446
g3
sS'name'
p3447
S'euler_angle_provider'
p3448
sS'required'
p3449
I01
sS'group_name'
p3450
Nsa(dp3451
S'name'
p3452
S'execute_on'
p3453
sS'cpp_type'
p3454
S'MultiMooseEnum'
p3455
sS'default'
p3456
S'LINEAR'
p3457
sS'description'
p3458
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3459
sS'required'
p3460
I00
sS'options'
p3461
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3462
sS'group_name'
p3463
Nsa(dp3464
S'description'
p3465
S'The GrainTracker UserObject to get values from.\n'
p3466
sS'cpp_type'
p3467
S'UserObjectName'
p3468
sS'default'
p3469
g3
sS'name'
p3470
S'grain_tracker'
p3471
sS'required'
p3472
I01
sS'group_name'
p3473
Nsa(dp3474
S'description'
p3475
S'RGB value of color used to represent area with no grains, defaults to black\n'
p3476
sS'cpp_type'
p3477
S'libMesh::Point'
p3478
sS'default'
p3479
S'0 0 0'
p3480
sS'name'
p3481
S'no_grain_color'
p3482
sS'required'
p3483
I00
sS'group_name'
p3484
Nsa(dp3485
S'name'
p3486
S'output_type'
p3487
sS'cpp_type'
p3488
S'MooseEnum'
p3489
sS'default'
p3490
S'scalar'
p3491
sS'description'
p3492
S'Type of value that will be outputted\n'
p3493
sS'required'
p3494
I00
sS'options'
p3495
S'red green blue scalar'
p3496
sS'group_name'
p3497
Nsa(dp3498
S'name'
p3499
S'sd'
p3500
sS'cpp_type'
p3501
S'MooseEnum'
p3502
sS'default'
p3503
S'001'
p3504
sS'description'
p3505
S'Reference sample direction\n'
p3506
sS'required'
p3507
I00
sS'options'
p3508
S'100 010 001'
p3509
sS'group_name'
p3510
Nsa(dp3511
S'description'
p3512
S'The seed for the master random number generator\n'
p3513
sS'cpp_type'
p3514
S'unsigned int'
p3515
sS'default'
p3516
S'0'
p3517
sS'name'
p3518
S'seed'
p3519
sS'required'
p3520
I00
sS'group_name'
p3521
S'Advanced'
p3522
sa(dp3523
S'description'
p3524
g3
sS'cpp_type'
p3525
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3526
sS'default'
p3527
S'EulerAngleProvider2RGBAux'
p3528
sS'name'
p3529
S'type'
p3530
sS'required'
p3531
I00
sS'group_name'
p3532
Nsa(dp3533
S'description'
p3534
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3535
sS'cpp_type'
p3536
S'bool'
p3537
sS'default'
p3538
S'0'
p3539
sS'name'
p3540
S'use_displaced_mesh'
p3541
sS'required'
p3542
I00
sS'group_name'
p3543
S'Advanced'
p3544
sa(dp3545
S'description'
p3546
S'The name of the variable that this object applies to\n'
p3547
sS'cpp_type'
p3548
S'AuxVariableName'
p3549
sS'default'
p3550
g3
sS'name'
p3551
S'variable'
p3552
sS'required'
p3553
I01
sS'group_name'
p3554
NsasS'name'
p3555
S'/AuxKernels/EulerAngleProvider2RGBAux'
p3556
sa(dp3557
S'description'
p3558
g3
sS'subblocks'
p3559
NsS'parameters'
p3560
(lp3561
(dp3562
S'description'
p3563
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3564
sS'cpp_type'
p3565
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3566
sS'default'
p3567
g3
sS'name'
p3568
S'block'
p3569
sS'required'
p3570
I00
sS'group_name'
p3571
Nsa(dp3572
S'description'
p3573
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3574
sS'cpp_type'
p3575
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3576
sS'default'
p3577
g3
sS'name'
p3578
S'boundary'
p3579
sS'required'
p3580
I00
sS'group_name'
p3581
Nsa(dp3582
S'description'
p3583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3584
sS'cpp_type'
p3585
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3586
sS'default'
p3587
g3
sS'name'
p3588
S'control_tags'
p3589
sS'required'
p3590
I00
sS'group_name'
p3591
S'Advanced'
p3592
sa(dp3593
S'description'
p3594
S'Set the enabled status of the MooseObject.\n'
p3595
sS'cpp_type'
p3596
S'bool'
p3597
sS'default'
p3598
S'1'
p3599
sS'name'
p3600
S'enable'
p3601
sS'required'
p3602
I00
sS'group_name'
p3603
S'Advanced'
p3604
sa(dp3605
S'name'
p3606
S'execute_on'
p3607
sS'cpp_type'
p3608
S'MultiMooseEnum'
p3609
sS'default'
p3610
S'LINEAR'
p3611
sS'description'
p3612
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3613
sS'required'
p3614
I00
sS'options'
p3615
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3616
sS'group_name'
p3617
Nsa(dp3618
S'name'
p3619
S'output_type'
p3620
sS'cpp_type'
p3621
S'MooseEnum'
p3622
sS'default'
p3623
S'scalar'
p3624
sS'description'
p3625
S'Type of value that will be outputted\n'
p3626
sS'required'
p3627
I00
sS'options'
p3628
S'red green blue scalar'
p3629
sS'group_name'
p3630
Nsa(dp3631
S'description'
p3632
S'Grain phase index\n'
p3633
sS'cpp_type'
p3634
S'std::vector<VariableName>'
p3635
sS'default'
p3636
g3
sS'name'
p3637
S'phase'
p3638
sS'required'
p3639
I00
sS'group_name'
p3640
Nsa(dp3641
S'description'
p3642
S'Euler angle 2\n'
p3643
sS'cpp_type'
p3644
S'std::vector<VariableName>'
p3645
sS'default'
p3646
g3
sS'name'
p3647
S'phi'
p3648
sS'required'
p3649
I00
sS'group_name'
p3650
Nsa(dp3651
S'description'
p3652
S'Euler angle 1\n'
p3653
sS'cpp_type'
p3654
S'std::vector<VariableName>'
p3655
sS'default'
p3656
g3
sS'name'
p3657
S'phi1'
p3658
sS'required'
p3659
I00
sS'group_name'
p3660
Nsa(dp3661
S'description'
p3662
S'Euler angle 3\n'
p3663
sS'cpp_type'
p3664
S'std::vector<VariableName>'
p3665
sS'default'
p3666
g3
sS'name'
p3667
S'phi2'
p3668
sS'required'
p3669
I00
sS'group_name'
p3670
Nsa(dp3671
S'name'
p3672
S'sd'
p3673
sS'cpp_type'
p3674
S'MooseEnum'
p3675
sS'default'
p3676
S'001'
p3677
sS'description'
p3678
S'Reference sample direction\n'
p3679
sS'required'
p3680
I00
sS'options'
p3681
S'100 010 001'
p3682
sS'group_name'
p3683
Nsa(dp3684
S'description'
p3685
S'The seed for the master random number generator\n'
p3686
sS'cpp_type'
p3687
S'unsigned int'
p3688
sS'default'
p3689
S'0'
p3690
sS'name'
p3691
S'seed'
p3692
sS'required'
p3693
I00
sS'group_name'
p3694
S'Advanced'
p3695
sa(dp3696
S'description'
p3697
S'Grain symmetry indentifier\n'
p3698
sS'cpp_type'
p3699
S'std::vector<VariableName>'
p3700
sS'default'
p3701
g3
sS'name'
p3702
S'symmetry'
p3703
sS'required'
p3704
I00
sS'group_name'
p3705
Nsa(dp3706
S'description'
p3707
g3
sS'cpp_type'
p3708
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3709
sS'default'
p3710
S'EulerAngleVariables2RGBAux'
p3711
sS'name'
p3712
S'type'
p3713
sS'required'
p3714
I00
sS'group_name'
p3715
Nsa(dp3716
S'description'
p3717
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3718
sS'cpp_type'
p3719
S'bool'
p3720
sS'default'
p3721
S'0'
p3722
sS'name'
p3723
S'use_displaced_mesh'
p3724
sS'required'
p3725
I00
sS'group_name'
p3726
S'Advanced'
p3727
sa(dp3728
S'description'
p3729
S'The name of the variable that this object applies to\n'
p3730
sS'cpp_type'
p3731
S'AuxVariableName'
p3732
sS'default'
p3733
g3
sS'name'
p3734
S'variable'
p3735
sS'required'
p3736
I01
sS'group_name'
p3737
NsasS'name'
p3738
S'/AuxKernels/EulerAngleVariables2RGBAux'
p3739
sa(dp3740
S'description'
p3741
S'Feature detection by connectivity analysis\n'
p3742
sS'subblocks'
p3743
NsS'parameters'
p3744
(lp3745
(dp3746
S'description'
p3747
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3748
sS'cpp_type'
p3749
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3750
sS'default'
p3751
g3
sS'name'
p3752
S'block'
p3753
sS'required'
p3754
I00
sS'group_name'
p3755
Nsa(dp3756
S'description'
p3757
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3758
sS'cpp_type'
p3759
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3760
sS'default'
p3761
g3
sS'name'
p3762
S'boundary'
p3763
sS'required'
p3764
I00
sS'group_name'
p3765
Nsa(dp3766
S'description'
p3767
S'The FeatureFloodCount UserObject to get values from.\n'
p3768
sS'cpp_type'
p3769
S'UserObjectName'
p3770
sS'default'
p3771
g3
sS'name'
p3772
S'bubble_object'
p3773
sS'required'
p3774
I00
sS'group_name'
p3775
Nsa(dp3776
S'description'
p3777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3778
sS'cpp_type'
p3779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3780
sS'default'
p3781
g3
sS'name'
p3782
S'control_tags'
p3783
sS'required'
p3784
I00
sS'group_name'
p3785
S'Advanced'
p3786
sa(dp3787
S'description'
p3788
S'Set the enabled status of the MooseObject.\n'
p3789
sS'cpp_type'
p3790
S'bool'
p3791
sS'default'
p3792
S'1'
p3793
sS'name'
p3794
S'enable'
p3795
sS'required'
p3796
I00
sS'group_name'
p3797
S'Advanced'
p3798
sa(dp3799
S'name'
p3800
S'execute_on'
p3801
sS'cpp_type'
p3802
S'MultiMooseEnum'
p3803
sS'default'
p3804
S'INITIAL TIMESTEP_END'
p3805
sS'description'
p3806
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3807
sS'required'
p3808
I00
sS'options'
p3809
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3810
sS'group_name'
p3811
Nsa(dp3812
S'name'
p3813
S'field_display'
p3814
sS'cpp_type'
p3815
S'MooseEnum'
p3816
sS'default'
p3817
S'UNIQUE_REGION'
p3818
sS'description'
p3819
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p3820
sS'required'
p3821
I00
sS'options'
p3822
S'UNIQUE_REGION VARIABLE_COLORING GHOSTED_ENTITIES HALOS CENTROID ACTIVE_BOUNDS'
p3823
sS'group_name'
p3824
Nsa(dp3825
S'description'
p3826
S'The FeatureFloodCount UserObject to get values from.\n'
p3827
sS'cpp_type'
p3828
S'UserObjectName'
p3829
sS'default'
p3830
g3
sS'name'
p3831
S'flood_counter'
p3832
sS'required'
p3833
I01
sS'group_name'
p3834
Nsa(dp3835
S'description'
p3836
S'The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n'
p3837
sS'cpp_type'
p3838
S'unsigned int'
p3839
sS'default'
p3840
g3
sS'name'
p3841
S'map_index'
p3842
sS'required'
p3843
I00
sS'group_name'
p3844
Nsa(dp3845
S'description'
p3846
S'The seed for the master random number generator\n'
p3847
sS'cpp_type'
p3848
S'unsigned int'
p3849
sS'default'
p3850
S'0'
p3851
sS'name'
p3852
S'seed'
p3853
sS'required'
p3854
I00
sS'group_name'
p3855
S'Advanced'
p3856
sa(dp3857
S'description'
p3858
g3
sS'cpp_type'
p3859
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3860
sS'default'
p3861
S'FeatureFloodCountAux'
p3862
sS'name'
p3863
S'type'
p3864
sS'required'
p3865
I00
sS'group_name'
p3866
Nsa(dp3867
S'description'
p3868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3869
sS'cpp_type'
p3870
S'bool'
p3871
sS'default'
p3872
S'0'
p3873
sS'name'
p3874
S'use_displaced_mesh'
p3875
sS'required'
p3876
I00
sS'group_name'
p3877
S'Advanced'
p3878
sa(dp3879
S'description'
p3880
S'The name of the variable that this object applies to\n'
p3881
sS'cpp_type'
p3882
S'AuxVariableName'
p3883
sS'default'
p3884
g3
sS'name'
p3885
S'variable'
p3886
sS'required'
p3887
I01
sS'group_name'
p3888
NsasS'name'
p3889
S'/AuxKernels/FeatureFloodCountAux'
p3890
sa(dp3891
S'description'
p3892
g3
sS'subblocks'
p3893
NsS'parameters'
p3894
(lp3895
(dp3896
S'description'
p3897
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3898
sS'cpp_type'
p3899
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3900
sS'default'
p3901
g3
sS'name'
p3902
S'block'
p3903
sS'required'
p3904
I00
sS'group_name'
p3905
Nsa(dp3906
S'description'
p3907
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3908
sS'cpp_type'
p3909
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3910
sS'default'
p3911
g3
sS'name'
p3912
S'boundary'
p3913
sS'required'
p3914
I00
sS'group_name'
p3915
Nsa(dp3916
S'description'
p3917
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3918
sS'cpp_type'
p3919
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3920
sS'default'
p3921
g3
sS'name'
p3922
S'control_tags'
p3923
sS'required'
p3924
I00
sS'group_name'
p3925
S'Advanced'
p3926
sa(dp3927
S'description'
p3928
S'Set the enabled status of the MooseObject.\n'
p3929
sS'cpp_type'
p3930
S'bool'
p3931
sS'default'
p3932
S'1'
p3933
sS'name'
p3934
S'enable'
p3935
sS'required'
p3936
I00
sS'group_name'
p3937
S'Advanced'
p3938
sa(dp3939
S'name'
p3940
S'execute_on'
p3941
sS'cpp_type'
p3942
S'MultiMooseEnum'
p3943
sS'default'
p3944
S'LINEAR'
p3945
sS'description'
p3946
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3947
sS'required'
p3948
I00
sS'options'
p3949
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3950
sS'group_name'
p3951
Nsa(dp3952
S'description'
p3953
S'The function to use as the value\n'
p3954
sS'cpp_type'
p3955
S'FunctionName'
p3956
sS'default'
p3957
g3
sS'name'
p3958
S'function'
p3959
sS'required'
p3960
I01
sS'group_name'
p3961
Nsa(dp3962
S'description'
p3963
S'The seed for the master random number generator\n'
p3964
sS'cpp_type'
p3965
S'unsigned int'
p3966
sS'default'
p3967
S'0'
p3968
sS'name'
p3969
S'seed'
p3970
sS'required'
p3971
I00
sS'group_name'
p3972
S'Advanced'
p3973
sa(dp3974
S'description'
p3975
g3
sS'cpp_type'
p3976
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3977
sS'default'
p3978
S'FunctionAux'
p3979
sS'name'
p3980
S'type'
p3981
sS'required'
p3982
I00
sS'group_name'
p3983
Nsa(dp3984
S'description'
p3985
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3986
sS'cpp_type'
p3987
S'bool'
p3988
sS'default'
p3989
S'0'
p3990
sS'name'
p3991
S'use_displaced_mesh'
p3992
sS'required'
p3993
I00
sS'group_name'
p3994
S'Advanced'
p3995
sa(dp3996
S'description'
p3997
S'The name of the variable that this object applies to\n'
p3998
sS'cpp_type'
p3999
S'AuxVariableName'
p4000
sS'default'
p4001
g3
sS'name'
p4002
S'variable'
p4003
sS'required'
p4004
I01
sS'group_name'
p4005
NsasS'name'
p4006
S'/AuxKernels/FunctionAux'
p4007
sa(dp4008
S'description'
p4009
g3
sS'subblocks'
p4010
NsS'parameters'
p4011
(lp4012
(dp4013
S'description'
p4014
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4015
sS'cpp_type'
p4016
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4017
sS'default'
p4018
g3
sS'name'
p4019
S'block'
p4020
sS'required'
p4021
I00
sS'group_name'
p4022
Nsa(dp4023
S'description'
p4024
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4025
sS'cpp_type'
p4026
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4027
sS'default'
p4028
g3
sS'name'
p4029
S'boundary'
p4030
sS'required'
p4031
I00
sS'group_name'
p4032
Nsa(dp4033
S'description'
p4034
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4035
sS'cpp_type'
p4036
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4037
sS'default'
p4038
g3
sS'name'
p4039
S'control_tags'
p4040
sS'required'
p4041
I00
sS'group_name'
p4042
S'Advanced'
p4043
sa(dp4044
S'description'
p4045
S'Set the enabled status of the MooseObject.\n'
p4046
sS'cpp_type'
p4047
S'bool'
p4048
sS'default'
p4049
S'1'
p4050
sS'name'
p4051
S'enable'
p4052
sS'required'
p4053
I00
sS'group_name'
p4054
S'Advanced'
p4055
sa(dp4056
S'name'
p4057
S'execute_on'
p4058
sS'cpp_type'
p4059
S'MultiMooseEnum'
p4060
sS'default'
p4061
S'LINEAR'
p4062
sS'description'
p4063
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4064
sS'required'
p4065
I00
sS'options'
p4066
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4067
sS'group_name'
p4068
Nsa(dp4069
S'description'
p4070
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4071
sS'cpp_type'
p4072
S'double'
p4073
sS'default'
p4074
g3
sS'name'
p4075
S'normal_smoothing_distance'
p4076
sS'required'
p4077
I00
sS'group_name'
p4078
Nsa(dp4079
S'description'
p4080
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4081
sS'cpp_type'
p4082
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4083
sS'default'
p4084
g3
sS'name'
p4085
S'normal_smoothing_method'
p4086
sS'required'
p4087
I00
sS'group_name'
p4088
Nsa(dp4089
S'name'
p4090
S'order'
p4091
sS'cpp_type'
p4092
S'MooseEnum'
p4093
sS'default'
p4094
S'FIRST'
p4095
sS'description'
p4096
S'The finite element order\n'
p4097
sS'required'
p4098
I00
sS'options'
p4099
S'FIRST SECOND THIRD FOURTH'
p4100
sS'group_name'
p4101
Nsa(dp4102
S'description'
p4103
S'The boundary on the other side of a gap.\n'
p4104
sS'cpp_type'
p4105
S'BoundaryName'
p4106
sS'default'
p4107
g3
sS'name'
p4108
S'paired_boundary'
p4109
sS'required'
p4110
I01
sS'group_name'
p4111
Nsa(dp4112
S'description'
p4113
S'The variable to get the value of.\n'
p4114
sS'cpp_type'
p4115
S'VariableName'
p4116
sS'default'
p4117
g3
sS'name'
p4118
S'paired_variable'
p4119
sS'required'
p4120
I01
sS'group_name'
p4121
Nsa(dp4122
S'description'
p4123
S'The seed for the master random number generator\n'
p4124
sS'cpp_type'
p4125
S'unsigned int'
p4126
sS'default'
p4127
S'0'
p4128
sS'name'
p4129
S'seed'
p4130
sS'required'
p4131
I00
sS'group_name'
p4132
S'Advanced'
p4133
sa(dp4134
S'description'
p4135
S'Tangential distance to extend edges of contact surfaces\n'
p4136
sS'cpp_type'
p4137
S'double'
p4138
sS'default'
p4139
g3
sS'name'
p4140
S'tangential_tolerance'
p4141
sS'required'
p4142
I00
sS'group_name'
p4143
Nsa(dp4144
S'description'
p4145
g3
sS'cpp_type'
p4146
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4147
sS'default'
p4148
S'GapValueAux'
p4149
sS'name'
p4150
S'type'
p4151
sS'required'
p4152
I00
sS'group_name'
p4153
Nsa(dp4154
S'description'
p4155
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4156
sS'cpp_type'
p4157
S'bool'
p4158
sS'default'
p4159
S'1'
p4160
sS'name'
p4161
S'use_displaced_mesh'
p4162
sS'required'
p4163
I00
sS'group_name'
p4164
S'Advanced'
p4165
sa(dp4166
S'description'
p4167
S'The name of the variable that this object applies to\n'
p4168
sS'cpp_type'
p4169
S'AuxVariableName'
p4170
sS'default'
p4171
g3
sS'name'
p4172
S'variable'
p4173
sS'required'
p4174
I01
sS'group_name'
p4175
Nsa(dp4176
S'description'
p4177
S'Whether to output warning messages concerning nodes not being found\n'
p4178
sS'cpp_type'
p4179
S'bool'
p4180
sS'default'
p4181
S'0'
p4182
sS'name'
p4183
S'warnings'
p4184
sS'required'
p4185
I00
sS'group_name'
p4186
NsasS'name'
p4187
S'/AuxKernels/GapValueAux'
p4188
sa(dp4189
S'description'
p4190
S'Calculates the advection velocity of grain due to rigid body translation and rotation\n'
p4191
sS'subblocks'
p4192
NsS'parameters'
p4193
(lp4194
(dp4195
S'description'
p4196
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4197
sS'cpp_type'
p4198
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4199
sS'default'
p4200
g3
sS'name'
p4201
S'block'
p4202
sS'required'
p4203
I00
sS'group_name'
p4204
Nsa(dp4205
S'description'
p4206
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4207
sS'cpp_type'
p4208
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4209
sS'default'
p4210
g3
sS'name'
p4211
S'boundary'
p4212
sS'required'
p4213
I00
sS'group_name'
p4214
Nsa(dp4215
S'name'
p4216
S'component'
p4217
sS'cpp_type'
p4218
S'MooseEnum'
p4219
sS'default'
p4220
g3
sS'description'
p4221
S'The gradient component to compute\n'
p4222
sS'required'
p4223
I00
sS'options'
p4224
S'x y z'
p4225
sS'group_name'
p4226
Nsa(dp4227
S'description'
p4228
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4229
sS'cpp_type'
p4230
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4231
sS'default'
p4232
g3
sS'name'
p4233
S'control_tags'
p4234
sS'required'
p4235
I00
sS'group_name'
p4236
S'Advanced'
p4237
sa(dp4238
S'description'
p4239
S'Set the enabled status of the MooseObject.\n'
p4240
sS'cpp_type'
p4241
S'bool'
p4242
sS'default'
p4243
S'1'
p4244
sS'name'
p4245
S'enable'
p4246
sS'required'
p4247
I00
sS'group_name'
p4248
S'Advanced'
p4249
sa(dp4250
S'name'
p4251
S'execute_on'
p4252
sS'cpp_type'
p4253
S'MultiMooseEnum'
p4254
sS'default'
p4255
S'LINEAR'
p4256
sS'description'
p4257
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4258
sS'required'
p4259
I00
sS'options'
p4260
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4261
sS'group_name'
p4262
Nsa(dp4263
S'description'
p4264
S'userobject for getting force and torque acting on grains\n'
p4265
sS'cpp_type'
p4266
S'UserObjectName'
p4267
sS'default'
p4268
g3
sS'name'
p4269
S'grain_force'
p4270
sS'required'
p4271
I00
sS'group_name'
p4272
Nsa(dp4273
S'description'
p4274
S'userobject for getting volume and center of mass of grains\n'
p4275
sS'cpp_type'
p4276
S'UserObjectName'
p4277
sS'default'
p4278
g3
sS'name'
p4279
S'grain_tracker_object'
p4280
sS'required'
p4281
I00
sS'group_name'
p4282
Nsa(dp4283
S'description'
p4284
S'The feature volume VectorPostprocessorValue.\n'
p4285
sS'cpp_type'
p4286
S'VectorPostprocessorName'
p4287
sS'default'
p4288
g3
sS'name'
p4289
S'grain_volumes'
p4290
sS'required'
p4291
I00
sS'group_name'
p4292
Nsa(dp4293
S'description'
p4294
S'constant value characterizing grain rotation\n'
p4295
sS'cpp_type'
p4296
S'double'
p4297
sS'default'
p4298
S'1'
p4299
sS'name'
p4300
S'rotation_constant'
p4301
sS'required'
p4302
I00
sS'group_name'
p4303
Nsa(dp4304
S'description'
p4305
S'The seed for the master random number generator\n'
p4306
sS'cpp_type'
p4307
S'unsigned int'
p4308
sS'default'
p4309
S'0'
p4310
sS'name'
p4311
S'seed'
p4312
sS'required'
p4313
I00
sS'group_name'
p4314
S'Advanced'
p4315
sa(dp4316
S'description'
p4317
S'constant value characterizing grain translation\n'
p4318
sS'cpp_type'
p4319
S'double'
p4320
sS'default'
p4321
S'1'
p4322
sS'name'
p4323
S'translation_constant'
p4324
sS'required'
p4325
I00
sS'group_name'
p4326
Nsa(dp4327
S'description'
p4328
g3
sS'cpp_type'
p4329
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4330
sS'default'
p4331
S'GrainAdvectionAux'
p4332
sS'name'
p4333
S'type'
p4334
sS'required'
p4335
I00
sS'group_name'
p4336
Nsa(dp4337
S'description'
p4338
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4339
sS'cpp_type'
p4340
S'bool'
p4341
sS'default'
p4342
S'0'
p4343
sS'name'
p4344
S'use_displaced_mesh'
p4345
sS'required'
p4346
I00
sS'group_name'
p4347
S'Advanced'
p4348
sa(dp4349
S'description'
p4350
S'The name of the variable that this object applies to\n'
p4351
sS'cpp_type'
p4352
S'AuxVariableName'
p4353
sS'default'
p4354
g3
sS'name'
p4355
S'variable'
p4356
sS'required'
p4357
I01
sS'group_name'
p4358
NsasS'name'
p4359
S'/AuxKernels/GrainAdvectionAux'
p4360
sa(dp4361
S'description'
p4362
S'Total free energy in KKS system, including chemical, barrier and gradient terms\n'
p4363
sS'subblocks'
p4364
NsS'parameters'
p4365
(lp4366
(dp4367
S'description'
p4368
S'Coupled variable holding additional free energy contributions to be summed up\n'
p4369
sS'cpp_type'
p4370
S'std::vector<VariableName>'
p4371
sS'default'
p4372
S'0'
p4373
sS'name'
p4374
S'additional_free_energy'
p4375
sS'required'
p4376
I00
sS'group_name'
p4377
Nsa(dp4378
S'description'
p4379
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4380
sS'cpp_type'
p4381
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4382
sS'default'
p4383
g3
sS'name'
p4384
S'block'
p4385
sS'required'
p4386
I00
sS'group_name'
p4387
Nsa(dp4388
S'description'
p4389
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4390
sS'cpp_type'
p4391
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4392
sS'default'
p4393
g3
sS'name'
p4394
S'boundary'
p4395
sS'required'
p4396
I00
sS'group_name'
p4397
Nsa(dp4398
S'description'
p4399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4400
sS'cpp_type'
p4401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4402
sS'default'
p4403
g3
sS'name'
p4404
S'control_tags'
p4405
sS'required'
p4406
I00
sS'group_name'
p4407
S'Advanced'
p4408
sa(dp4409
S'description'
p4410
S'Set the enabled status of the MooseObject.\n'
p4411
sS'cpp_type'
p4412
S'bool'
p4413
sS'default'
p4414
S'1'
p4415
sS'name'
p4416
S'enable'
p4417
sS'required'
p4418
I00
sS'group_name'
p4419
S'Advanced'
p4420
sa(dp4421
S'name'
p4422
S'execute_on'
p4423
sS'cpp_type'
p4424
S'MultiMooseEnum'
p4425
sS'default'
p4426
S'LINEAR'
p4427
sS'description'
p4428
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4429
sS'required'
p4430
I00
sS'options'
p4431
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4432
sS'group_name'
p4433
Nsa(dp4434
S'description'
p4435
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p4436
sS'cpp_type'
p4437
S'MaterialPropertyName'
p4438
sS'default'
p4439
g3
sS'name'
p4440
S'fa_name'
p4441
sS'required'
p4442
I01
sS'group_name'
p4443
Nsa(dp4444
S'description'
p4445
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p4446
sS'cpp_type'
p4447
S'MaterialPropertyName'
p4448
sS'default'
p4449
g3
sS'name'
p4450
S'fb_name'
p4451
sS'required'
p4452
I01
sS'group_name'
p4453
Nsa(dp4454
S'description'
p4455
S'Base name for the double well function g(eta)\n'
p4456
sS'cpp_type'
p4457
S'MaterialPropertyName'
p4458
sS'default'
p4459
S'g'
p4460
sS'name'
p4461
S'g_name'
p4462
sS'required'
p4463
I00
sS'group_name'
p4464
Nsa(dp4465
S'description'
p4466
S'Base name for the switching function h(eta)\n'
p4467
sS'cpp_type'
p4468
S'MaterialPropertyName'
p4469
sS'default'
p4470
S'h'
p4471
sS'name'
p4472
S'h_name'
p4473
sS'required'
p4474
I00
sS'group_name'
p4475
Nsa(dp4476
S'description'
p4477
S'Variable names that contribute to interfacial energy\n'
p4478
sS'cpp_type'
p4479
S'std::vector<VariableName>'
p4480
sS'default'
p4481
g3
sS'name'
p4482
S'interfacial_vars'
p4483
sS'required'
p4484
I00
sS'group_name'
p4485
Nsa(dp4486
S'description'
p4487
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order. For basic KKS, there is 1 kappa, 1 interfacial_var.\n'
p4488
sS'cpp_type'
p4489
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4490
sS'default'
p4491
g3
sS'name'
p4492
S'kappa_names'
p4493
sS'required'
p4494
I00
sS'group_name'
p4495
Nsa(dp4496
S'description'
p4497
S'The seed for the master random number generator\n'
p4498
sS'cpp_type'
p4499
S'unsigned int'
p4500
sS'default'
p4501
S'0'
p4502
sS'name'
p4503
S'seed'
p4504
sS'required'
p4505
I00
sS'group_name'
p4506
S'Advanced'
p4507
sa(dp4508
S'description'
p4509
g3
sS'cpp_type'
p4510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4511
sS'default'
p4512
S'KKSGlobalFreeEnergy'
p4513
sS'name'
p4514
S'type'
p4515
sS'required'
p4516
I00
sS'group_name'
p4517
Nsa(dp4518
S'description'
p4519
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4520
sS'cpp_type'
p4521
S'bool'
p4522
sS'default'
p4523
S'0'
p4524
sS'name'
p4525
S'use_displaced_mesh'
p4526
sS'required'
p4527
I00
sS'group_name'
p4528
S'Advanced'
p4529
sa(dp4530
S'description'
p4531
S'The name of the variable that this object applies to\n'
p4532
sS'cpp_type'
p4533
S'AuxVariableName'
p4534
sS'default'
p4535
g3
sS'name'
p4536
S'variable'
p4537
sS'required'
p4538
I01
sS'group_name'
p4539
Nsa(dp4540
S'description'
p4541
S'Double well height parameter\n'
p4542
sS'cpp_type'
p4543
S'double'
p4544
sS'default'
p4545
g3
sS'name'
p4546
S'w'
p4547
sS'required'
p4548
I01
sS'group_name'
p4549
NsasS'name'
p4550
S'/AuxKernels/KKSGlobalFreeEnergy'
p4551
sa(dp4552
S'description'
p4553
S'Total free energy in multi-phase KKS system, including chemical, barrier and gradient terms\n'
p4554
sS'subblocks'
p4555
NsS'parameters'
p4556
(lp4557
(dp4558
S'description'
p4559
S'List of free energies for each phase. Place in same order as hj_names and gj_names!\n'
p4560
sS'cpp_type'
p4561
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4562
sS'default'
p4563
g3
sS'name'
p4564
S'Fj_names'
p4565
sS'required'
p4566
I01
sS'group_name'
p4567
Nsa(dp4568
S'description'
p4569
S'Coupled variable holding additional free energy contributions to be summed up\n'
p4570
sS'cpp_type'
p4571
S'std::vector<VariableName>'
p4572
sS'default'
p4573
S'0'
p4574
sS'name'
p4575
S'additional_free_energy'
p4576
sS'required'
p4577
I00
sS'group_name'
p4578
Nsa(dp4579
S'description'
p4580
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4581
sS'cpp_type'
p4582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4583
sS'default'
p4584
g3
sS'name'
p4585
S'block'
p4586
sS'required'
p4587
I00
sS'group_name'
p4588
Nsa(dp4589
S'description'
p4590
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4591
sS'cpp_type'
p4592
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4593
sS'default'
p4594
g3
sS'name'
p4595
S'boundary'
p4596
sS'required'
p4597
I00
sS'group_name'
p4598
Nsa(dp4599
S'description'
p4600
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4601
sS'cpp_type'
p4602
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4603
sS'default'
p4604
g3
sS'name'
p4605
S'control_tags'
p4606
sS'required'
p4607
I00
sS'group_name'
p4608
S'Advanced'
p4609
sa(dp4610
S'description'
p4611
S'Set the enabled status of the MooseObject.\n'
p4612
sS'cpp_type'
p4613
S'bool'
p4614
sS'default'
p4615
S'1'
p4616
sS'name'
p4617
S'enable'
p4618
sS'required'
p4619
I00
sS'group_name'
p4620
S'Advanced'
p4621
sa(dp4622
S'name'
p4623
S'execute_on'
p4624
sS'cpp_type'
p4625
S'MultiMooseEnum'
p4626
sS'default'
p4627
S'LINEAR'
p4628
sS'description'
p4629
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4630
sS'required'
p4631
I00
sS'options'
p4632
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4633
sS'group_name'
p4634
Nsa(dp4635
S'description'
p4636
S'Barrier Function Materials that provide g. Place in same order as Fj_names and hj_names!\n'
p4637
sS'cpp_type'
p4638
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4639
sS'default'
p4640
g3
sS'name'
p4641
S'gj_names'
p4642
sS'required'
p4643
I01
sS'group_name'
p4644
Nsa(dp4645
S'description'
p4646
S'Switching Function Materials that provide h. Place in same order as Fj_names and gj_names!\n'
p4647
sS'cpp_type'
p4648
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4649
sS'default'
p4650
g3
sS'name'
p4651
S'hj_names'
p4652
sS'required'
p4653
I01
sS'group_name'
p4654
Nsa(dp4655
S'description'
p4656
S'Variable names that contribute to interfacial energy\n'
p4657
sS'cpp_type'
p4658
S'std::vector<VariableName>'
p4659
sS'default'
p4660
g3
sS'name'
p4661
S'interfacial_vars'
p4662
sS'required'
p4663
I00
sS'group_name'
p4664
Nsa(dp4665
S'description'
p4666
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p4667
sS'cpp_type'
p4668
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4669
sS'default'
p4670
g3
sS'name'
p4671
S'kappa_names'
p4672
sS'required'
p4673
I00
sS'group_name'
p4674
Nsa(dp4675
S'description'
p4676
S'The seed for the master random number generator\n'
p4677
sS'cpp_type'
p4678
S'unsigned int'
p4679
sS'default'
p4680
S'0'
p4681
sS'name'
p4682
S'seed'
p4683
sS'required'
p4684
I00
sS'group_name'
p4685
S'Advanced'
p4686
sa(dp4687
S'description'
p4688
g3
sS'cpp_type'
p4689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4690
sS'default'
p4691
S'KKSMultiFreeEnergy'
p4692
sS'name'
p4693
S'type'
p4694
sS'required'
p4695
I00
sS'group_name'
p4696
Nsa(dp4697
S'description'
p4698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4699
sS'cpp_type'
p4700
S'bool'
p4701
sS'default'
p4702
S'0'
p4703
sS'name'
p4704
S'use_displaced_mesh'
p4705
sS'required'
p4706
I00
sS'group_name'
p4707
S'Advanced'
p4708
sa(dp4709
S'description'
p4710
S'The name of the variable that this object applies to\n'
p4711
sS'cpp_type'
p4712
S'AuxVariableName'
p4713
sS'default'
p4714
g3
sS'name'
p4715
S'variable'
p4716
sS'required'
p4717
I01
sS'group_name'
p4718
Nsa(dp4719
S'description'
p4720
S'Double well height parameter\n'
p4721
sS'cpp_type'
p4722
S'double'
p4723
sS'default'
p4724
g3
sS'name'
p4725
S'w'
p4726
sS'required'
p4727
I01
sS'group_name'
p4728
NsasS'name'
p4729
S'/AuxKernels/KKSMultiFreeEnergy'
p4730
sa(dp4731
S'description'
p4732
g3
sS'subblocks'
p4733
NsS'parameters'
p4734
(lp4735
(dp4736
S'description'
p4737
S'the dimensions of the mesh\n'
p4738
sS'cpp_type'
p4739
S'unsigned int'
p4740
sS'default'
p4741
g3
sS'name'
p4742
S'dim'
p4743
sS'required'
p4744
I01
sS'group_name'
p4745
Nsa(dp4746
S'description'
p4747
S'Scalar material property name for divergence variable\n'
p4748
sS'cpp_type'
p4749
S'MaterialPropertyName'
p4750
sS'default'
p4751
g3
sS'name'
p4752
S'divergence_property'
p4753
sS'required'
p4754
I00
sS'group_name'
p4755
Nsa(dp4756
S'description'
p4757
S'Name of divergence variable to generate kernels for\n'
p4758
sS'cpp_type'
p4759
S'AuxVariableName'
p4760
sS'default'
p4761
g3
sS'name'
p4762
S'divergence_variable'
p4763
sS'required'
p4764
I00
sS'group_name'
p4765
Nsa(dp4766
S'description'
p4767
S'Value that specifies the number of grains to create\n'
p4768
sS'cpp_type'
p4769
S'unsigned int'
p4770
sS'default'
p4771
g3
sS'name'
p4772
S'op_num'
p4773
sS'required'
p4774
I01
sS'group_name'
p4775
Nsa(dp4776
S'description'
p4777
S'the scalar material property names\n'
p4778
sS'cpp_type'
p4779
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4780
sS'default'
p4781
g3
sS'name'
p4782
S'property'
p4783
sS'required'
p4784
I01
sS'group_name'
p4785
Nsa(dp4786
S'description'
p4787
S'Whether to use displaced mesh in the kernels\n'
p4788
sS'cpp_type'
p4789
S'bool'
p4790
sS'default'
p4791
S'0'
p4792
sS'name'
p4793
S'use_displaced_mesh'
p4794
sS'required'
p4795
I00
sS'group_name'
p4796
Nsa(dp4797
S'description'
p4798
S'Vector specifies the base name of the variables\n'
p4799
sS'cpp_type'
p4800
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4801
sS'default'
p4802
g3
sS'name'
p4803
S'var_name_base'
p4804
sS'required'
p4805
I01
sS'group_name'
p4806
NsasS'name'
p4807
S'/AuxKernels/MatVecRealGradAuxKernel'
p4808
sa(dp4809
S'description'
p4810
g3
sS'subblocks'
p4811
NsS'parameters'
p4812
(lp4813
(dp4814
S'description'
p4815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4816
sS'cpp_type'
p4817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4818
sS'default'
p4819
g3
sS'name'
p4820
S'block'
p4821
sS'required'
p4822
I00
sS'group_name'
p4823
Nsa(dp4824
S'description'
p4825
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4826
sS'cpp_type'
p4827
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4828
sS'default'
p4829
g3
sS'name'
p4830
S'boundary'
p4831
sS'required'
p4832
I00
sS'group_name'
p4833
Nsa(dp4834
S'description'
p4835
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4836
sS'cpp_type'
p4837
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4838
sS'default'
p4839
g3
sS'name'
p4840
S'control_tags'
p4841
sS'required'
p4842
I00
sS'group_name'
p4843
S'Advanced'
p4844
sa(dp4845
S'description'
p4846
S'Set the enabled status of the MooseObject.\n'
p4847
sS'cpp_type'
p4848
S'bool'
p4849
sS'default'
p4850
S'1'
p4851
sS'name'
p4852
S'enable'
p4853
sS'required'
p4854
I00
sS'group_name'
p4855
S'Advanced'
p4856
sa(dp4857
S'name'
p4858
S'execute_on'
p4859
sS'cpp_type'
p4860
S'MultiMooseEnum'
p4861
sS'default'
p4862
S'LINEAR'
p4863
sS'description'
p4864
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4865
sS'required'
p4866
I00
sS'options'
p4867
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4868
sS'group_name'
p4869
Nsa(dp4870
S'description'
p4871
S'The factor by which to multiply your material property for visualization\n'
p4872
sS'cpp_type'
p4873
S'double'
p4874
sS'default'
p4875
S'1'
p4876
sS'name'
p4877
S'factor'
p4878
sS'required'
p4879
I00
sS'group_name'
p4880
Nsa(dp4881
S'description'
p4882
S'The offset to add to your material property for visualization\n'
p4883
sS'cpp_type'
p4884
S'double'
p4885
sS'default'
p4886
S'0'
p4887
sS'name'
p4888
S'offset'
p4889
sS'required'
p4890
I00
sS'group_name'
p4891
Nsa(dp4892
S'description'
p4893
S'The scalar material property name\n'
p4894
sS'cpp_type'
p4895
S'MaterialPropertyName'
p4896
sS'default'
p4897
g3
sS'name'
p4898
S'property'
p4899
sS'required'
p4900
I01
sS'group_name'
p4901
Nsa(dp4902
S'description'
p4903
S'The seed for the master random number generator\n'
p4904
sS'cpp_type'
p4905
S'unsigned int'
p4906
sS'default'
p4907
S'0'
p4908
sS'name'
p4909
S'seed'
p4910
sS'required'
p4911
I00
sS'group_name'
p4912
S'Advanced'
p4913
sa(dp4914
S'description'
p4915
g3
sS'cpp_type'
p4916
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4917
sS'default'
p4918
S'MaterialRealAux'
p4919
sS'name'
p4920
S'type'
p4921
sS'required'
p4922
I00
sS'group_name'
p4923
Nsa(dp4924
S'description'
p4925
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4926
sS'cpp_type'
p4927
S'bool'
p4928
sS'default'
p4929
S'0'
p4930
sS'name'
p4931
S'use_displaced_mesh'
p4932
sS'required'
p4933
I00
sS'group_name'
p4934
S'Advanced'
p4935
sa(dp4936
S'description'
p4937
S'The name of the variable that this object applies to\n'
p4938
sS'cpp_type'
p4939
S'AuxVariableName'
p4940
sS'default'
p4941
g3
sS'name'
p4942
S'variable'
p4943
sS'required'
p4944
I01
sS'group_name'
p4945
NsasS'name'
p4946
S'/AuxKernels/MaterialRealAux'
p4947
sa(dp4948
S'description'
p4949
g3
sS'subblocks'
p4950
NsS'parameters'
p4951
(lp4952
(dp4953
S'description'
p4954
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4955
sS'cpp_type'
p4956
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4957
sS'default'
p4958
g3
sS'name'
p4959
S'block'
p4960
sS'required'
p4961
I00
sS'group_name'
p4962
Nsa(dp4963
S'description'
p4964
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4965
sS'cpp_type'
p4966
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4967
sS'default'
p4968
g3
sS'name'
p4969
S'boundary'
p4970
sS'required'
p4971
I00
sS'group_name'
p4972
Nsa(dp4973
S'description'
p4974
S'The column component to consider for this kernel\n'
p4975
sS'cpp_type'
p4976
S'unsigned int'
p4977
sS'default'
p4978
S'0'
p4979
sS'name'
p4980
S'column'
p4981
sS'required'
p4982
I00
sS'group_name'
p4983
Nsa(dp4984
S'description'
p4985
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4986
sS'cpp_type'
p4987
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4988
sS'default'
p4989
g3
sS'name'
p4990
S'control_tags'
p4991
sS'required'
p4992
I00
sS'group_name'
p4993
S'Advanced'
p4994
sa(dp4995
S'description'
p4996
S'Set the enabled status of the MooseObject.\n'
p4997
sS'cpp_type'
p4998
S'bool'
p4999
sS'default'
p5000
S'1'
p5001
sS'name'
p5002
S'enable'
p5003
sS'required'
p5004
I00
sS'group_name'
p5005
S'Advanced'
p5006
sa(dp5007
S'name'
p5008
S'execute_on'
p5009
sS'cpp_type'
p5010
S'MultiMooseEnum'
p5011
sS'default'
p5012
S'LINEAR'
p5013
sS'description'
p5014
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5015
sS'required'
p5016
I00
sS'options'
p5017
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5018
sS'group_name'
p5019
Nsa(dp5020
S'description'
p5021
S'The factor by which to multiply your material property for visualization\n'
p5022
sS'cpp_type'
p5023
S'double'
p5024
sS'default'
p5025
S'1'
p5026
sS'name'
p5027
S'factor'
p5028
sS'required'
p5029
I00
sS'group_name'
p5030
Nsa(dp5031
S'description'
p5032
S'The offset to add to your material property for visualization\n'
p5033
sS'cpp_type'
p5034
S'double'
p5035
sS'default'
p5036
S'0'
p5037
sS'name'
p5038
S'offset'
p5039
sS'required'
p5040
I00
sS'group_name'
p5041
Nsa(dp5042
S'description'
p5043
S'The scalar material property name\n'
p5044
sS'cpp_type'
p5045
S'MaterialPropertyName'
p5046
sS'default'
p5047
g3
sS'name'
p5048
S'property'
p5049
sS'required'
p5050
I01
sS'group_name'
p5051
Nsa(dp5052
S'description'
p5053
S'The row component to consider for this kernel\n'
p5054
sS'cpp_type'
p5055
S'unsigned int'
p5056
sS'default'
p5057
S'0'
p5058
sS'name'
p5059
S'row'
p5060
sS'required'
p5061
I00
sS'group_name'
p5062
Nsa(dp5063
S'description'
p5064
S'The seed for the master random number generator\n'
p5065
sS'cpp_type'
p5066
S'unsigned int'
p5067
sS'default'
p5068
S'0'
p5069
sS'name'
p5070
S'seed'
p5071
sS'required'
p5072
I00
sS'group_name'
p5073
S'Advanced'
p5074
sa(dp5075
S'description'
p5076
g3
sS'cpp_type'
p5077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5078
sS'default'
p5079
S'MaterialRealDenseMatrixAux'
p5080
sS'name'
p5081
S'type'
p5082
sS'required'
p5083
I00
sS'group_name'
p5084
Nsa(dp5085
S'description'
p5086
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5087
sS'cpp_type'
p5088
S'bool'
p5089
sS'default'
p5090
S'0'
p5091
sS'name'
p5092
S'use_displaced_mesh'
p5093
sS'required'
p5094
I00
sS'group_name'
p5095
S'Advanced'
p5096
sa(dp5097
S'description'
p5098
S'The name of the variable that this object applies to\n'
p5099
sS'cpp_type'
p5100
S'AuxVariableName'
p5101
sS'default'
p5102
g3
sS'name'
p5103
S'variable'
p5104
sS'required'
p5105
I01
sS'group_name'
p5106
NsasS'name'
p5107
S'/AuxKernels/MaterialRealDenseMatrixAux'
p5108
sa(dp5109
S'description'
p5110
g3
sS'subblocks'
p5111
NsS'parameters'
p5112
(lp5113
(dp5114
S'description'
p5115
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5116
sS'cpp_type'
p5117
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5118
sS'default'
p5119
g3
sS'name'
p5120
S'block'
p5121
sS'required'
p5122
I00
sS'group_name'
p5123
Nsa(dp5124
S'description'
p5125
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5126
sS'cpp_type'
p5127
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5128
sS'default'
p5129
g3
sS'name'
p5130
S'boundary'
p5131
sS'required'
p5132
I00
sS'group_name'
p5133
Nsa(dp5134
S'description'
p5135
S'The column component to consider for this kernel\n'
p5136
sS'cpp_type'
p5137
S'unsigned int'
p5138
sS'default'
p5139
S'0'
p5140
sS'name'
p5141
S'column'
p5142
sS'required'
p5143
I00
sS'group_name'
p5144
Nsa(dp5145
S'description'
p5146
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5147
sS'cpp_type'
p5148
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5149
sS'default'
p5150
g3
sS'name'
p5151
S'control_tags'
p5152
sS'required'
p5153
I00
sS'group_name'
p5154
S'Advanced'
p5155
sa(dp5156
S'description'
p5157
S'Set the enabled status of the MooseObject.\n'
p5158
sS'cpp_type'
p5159
S'bool'
p5160
sS'default'
p5161
S'1'
p5162
sS'name'
p5163
S'enable'
p5164
sS'required'
p5165
I00
sS'group_name'
p5166
S'Advanced'
p5167
sa(dp5168
S'name'
p5169
S'execute_on'
p5170
sS'cpp_type'
p5171
S'MultiMooseEnum'
p5172
sS'default'
p5173
S'LINEAR'
p5174
sS'description'
p5175
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5176
sS'required'
p5177
I00
sS'options'
p5178
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5179
sS'group_name'
p5180
Nsa(dp5181
S'description'
p5182
S'The factor by which to multiply your material property for visualization\n'
p5183
sS'cpp_type'
p5184
S'double'
p5185
sS'default'
p5186
S'1'
p5187
sS'name'
p5188
S'factor'
p5189
sS'required'
p5190
I00
sS'group_name'
p5191
Nsa(dp5192
S'description'
p5193
S'The offset to add to your material property for visualization\n'
p5194
sS'cpp_type'
p5195
S'double'
p5196
sS'default'
p5197
S'0'
p5198
sS'name'
p5199
S'offset'
p5200
sS'required'
p5201
I00
sS'group_name'
p5202
Nsa(dp5203
S'description'
p5204
S'The scalar material property name\n'
p5205
sS'cpp_type'
p5206
S'MaterialPropertyName'
p5207
sS'default'
p5208
g3
sS'name'
p5209
S'property'
p5210
sS'required'
p5211
I01
sS'group_name'
p5212
Nsa(dp5213
S'description'
p5214
S'The row component to consider for this kernel\n'
p5215
sS'cpp_type'
p5216
S'unsigned int'
p5217
sS'default'
p5218
S'0'
p5219
sS'name'
p5220
S'row'
p5221
sS'required'
p5222
I00
sS'group_name'
p5223
Nsa(dp5224
S'description'
p5225
S'The seed for the master random number generator\n'
p5226
sS'cpp_type'
p5227
S'unsigned int'
p5228
sS'default'
p5229
S'0'
p5230
sS'name'
p5231
S'seed'
p5232
sS'required'
p5233
I00
sS'group_name'
p5234
S'Advanced'
p5235
sa(dp5236
S'description'
p5237
g3
sS'cpp_type'
p5238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5239
sS'default'
p5240
S'MaterialRealTensorValueAux'
p5241
sS'name'
p5242
S'type'
p5243
sS'required'
p5244
I00
sS'group_name'
p5245
Nsa(dp5246
S'description'
p5247
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5248
sS'cpp_type'
p5249
S'bool'
p5250
sS'default'
p5251
S'0'
p5252
sS'name'
p5253
S'use_displaced_mesh'
p5254
sS'required'
p5255
I00
sS'group_name'
p5256
S'Advanced'
p5257
sa(dp5258
S'description'
p5259
S'The name of the variable that this object applies to\n'
p5260
sS'cpp_type'
p5261
S'AuxVariableName'
p5262
sS'default'
p5263
g3
sS'name'
p5264
S'variable'
p5265
sS'required'
p5266
I01
sS'group_name'
p5267
NsasS'name'
p5268
S'/AuxKernels/MaterialRealTensorValueAux'
p5269
sa(dp5270
S'description'
p5271
g3
sS'subblocks'
p5272
NsS'parameters'
p5273
(lp5274
(dp5275
S'description'
p5276
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5277
sS'cpp_type'
p5278
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5279
sS'default'
p5280
g3
sS'name'
p5281
S'block'
p5282
sS'required'
p5283
I00
sS'group_name'
p5284
Nsa(dp5285
S'description'
p5286
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5287
sS'cpp_type'
p5288
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5289
sS'default'
p5290
g3
sS'name'
p5291
S'boundary'
p5292
sS'required'
p5293
I00
sS'group_name'
p5294
Nsa(dp5295
S'description'
p5296
S'The vector component to consider for this kernel\n'
p5297
sS'cpp_type'
p5298
S'unsigned int'
p5299
sS'default'
p5300
S'0'
p5301
sS'name'
p5302
S'component'
p5303
sS'required'
p5304
I00
sS'group_name'
p5305
Nsa(dp5306
S'description'
p5307
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5308
sS'cpp_type'
p5309
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5310
sS'default'
p5311
g3
sS'name'
p5312
S'control_tags'
p5313
sS'required'
p5314
I00
sS'group_name'
p5315
S'Advanced'
p5316
sa(dp5317
S'description'
p5318
S'Set the enabled status of the MooseObject.\n'
p5319
sS'cpp_type'
p5320
S'bool'
p5321
sS'default'
p5322
S'1'
p5323
sS'name'
p5324
S'enable'
p5325
sS'required'
p5326
I00
sS'group_name'
p5327
S'Advanced'
p5328
sa(dp5329
S'name'
p5330
S'execute_on'
p5331
sS'cpp_type'
p5332
S'MultiMooseEnum'
p5333
sS'default'
p5334
S'LINEAR'
p5335
sS'description'
p5336
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5337
sS'required'
p5338
I00
sS'options'
p5339
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5340
sS'group_name'
p5341
Nsa(dp5342
S'description'
p5343
S'The factor by which to multiply your material property for visualization\n'
p5344
sS'cpp_type'
p5345
S'double'
p5346
sS'default'
p5347
S'1'
p5348
sS'name'
p5349
S'factor'
p5350
sS'required'
p5351
I00
sS'group_name'
p5352
Nsa(dp5353
S'description'
p5354
S'The offset to add to your material property for visualization\n'
p5355
sS'cpp_type'
p5356
S'double'
p5357
sS'default'
p5358
S'0'
p5359
sS'name'
p5360
S'offset'
p5361
sS'required'
p5362
I00
sS'group_name'
p5363
Nsa(dp5364
S'description'
p5365
S'The scalar material property name\n'
p5366
sS'cpp_type'
p5367
S'MaterialPropertyName'
p5368
sS'default'
p5369
g3
sS'name'
p5370
S'property'
p5371
sS'required'
p5372
I01
sS'group_name'
p5373
Nsa(dp5374
S'description'
p5375
S'The seed for the master random number generator\n'
p5376
sS'cpp_type'
p5377
S'unsigned int'
p5378
sS'default'
p5379
S'0'
p5380
sS'name'
p5381
S'seed'
p5382
sS'required'
p5383
I00
sS'group_name'
p5384
S'Advanced'
p5385
sa(dp5386
S'description'
p5387
g3
sS'cpp_type'
p5388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5389
sS'default'
p5390
S'MaterialRealVectorValueAux'
p5391
sS'name'
p5392
S'type'
p5393
sS'required'
p5394
I00
sS'group_name'
p5395
Nsa(dp5396
S'description'
p5397
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5398
sS'cpp_type'
p5399
S'bool'
p5400
sS'default'
p5401
S'0'
p5402
sS'name'
p5403
S'use_displaced_mesh'
p5404
sS'required'
p5405
I00
sS'group_name'
p5406
S'Advanced'
p5407
sa(dp5408
S'description'
p5409
S'The name of the variable that this object applies to\n'
p5410
sS'cpp_type'
p5411
S'AuxVariableName'
p5412
sS'default'
p5413
g3
sS'name'
p5414
S'variable'
p5415
sS'required'
p5416
I01
sS'group_name'
p5417
NsasS'name'
p5418
S'/AuxKernels/MaterialRealVectorValueAux'
p5419
sa(dp5420
S'description'
p5421
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p5422
sS'subblocks'
p5423
NsS'parameters'
p5424
(lp5425
(dp5426
S'description'
p5427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5428
sS'cpp_type'
p5429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5430
sS'default'
p5431
g3
sS'name'
p5432
S'block'
p5433
sS'required'
p5434
I00
sS'group_name'
p5435
Nsa(dp5436
S'description'
p5437
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5438
sS'cpp_type'
p5439
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5440
sS'default'
p5441
g3
sS'name'
p5442
S'boundary'
p5443
sS'required'
p5444
I00
sS'group_name'
p5445
Nsa(dp5446
S'description'
p5447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5448
sS'cpp_type'
p5449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5450
sS'default'
p5451
g3
sS'name'
p5452
S'control_tags'
p5453
sS'required'
p5454
I00
sS'group_name'
p5455
S'Advanced'
p5456
sa(dp5457
S'description'
p5458
S'Set the enabled status of the MooseObject.\n'
p5459
sS'cpp_type'
p5460
S'bool'
p5461
sS'default'
p5462
S'1'
p5463
sS'name'
p5464
S'enable'
p5465
sS'required'
p5466
I00
sS'group_name'
p5467
S'Advanced'
p5468
sa(dp5469
S'name'
p5470
S'execute_on'
p5471
sS'cpp_type'
p5472
S'MultiMooseEnum'
p5473
sS'default'
p5474
S'LINEAR'
p5475
sS'description'
p5476
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5477
sS'required'
p5478
I00
sS'options'
p5479
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5480
sS'group_name'
p5481
Nsa(dp5482
S'description'
p5483
S'The factor by which to multiply your material property for visualization\n'
p5484
sS'cpp_type'
p5485
S'double'
p5486
sS'default'
p5487
S'1'
p5488
sS'name'
p5489
S'factor'
p5490
sS'required'
p5491
I00
sS'group_name'
p5492
Nsa(dp5493
S'description'
p5494
S'The index to consider for this kernel\n'
p5495
sS'cpp_type'
p5496
S'unsigned int'
p5497
sS'default'
p5498
S'0'
p5499
sS'name'
p5500
S'index'
p5501
sS'required'
p5502
I00
sS'group_name'
p5503
Nsa(dp5504
S'description'
p5505
S'The offset to add to your material property for visualization\n'
p5506
sS'cpp_type'
p5507
S'double'
p5508
sS'default'
p5509
S'0'
p5510
sS'name'
p5511
S'offset'
p5512
sS'required'
p5513
I00
sS'group_name'
p5514
Nsa(dp5515
S'description'
p5516
S'The scalar material property name\n'
p5517
sS'cpp_type'
p5518
S'MaterialPropertyName'
p5519
sS'default'
p5520
g3
sS'name'
p5521
S'property'
p5522
sS'required'
p5523
I01
sS'group_name'
p5524
Nsa(dp5525
S'description'
p5526
S'The seed for the master random number generator\n'
p5527
sS'cpp_type'
p5528
S'unsigned int'
p5529
sS'default'
p5530
S'0'
p5531
sS'name'
p5532
S'seed'
p5533
sS'required'
p5534
I00
sS'group_name'
p5535
S'Advanced'
p5536
sa(dp5537
S'description'
p5538
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p5539
sS'cpp_type'
p5540
S'unsigned int'
p5541
sS'default'
p5542
g3
sS'name'
p5543
S'selected_qp'
p5544
sS'required'
p5545
I00
sS'group_name'
p5546
S'Advanced'
p5547
sa(dp5548
S'description'
p5549
g3
sS'cpp_type'
p5550
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5551
sS'default'
p5552
S'MaterialStdVectorAux'
p5553
sS'name'
p5554
S'type'
p5555
sS'required'
p5556
I00
sS'group_name'
p5557
Nsa(dp5558
S'description'
p5559
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5560
sS'cpp_type'
p5561
S'bool'
p5562
sS'default'
p5563
S'0'
p5564
sS'name'
p5565
S'use_displaced_mesh'
p5566
sS'required'
p5567
I00
sS'group_name'
p5568
S'Advanced'
p5569
sa(dp5570
S'description'
p5571
S'The name of the variable that this object applies to\n'
p5572
sS'cpp_type'
p5573
S'AuxVariableName'
p5574
sS'default'
p5575
g3
sS'name'
p5576
S'variable'
p5577
sS'required'
p5578
I01
sS'group_name'
p5579
NsasS'name'
p5580
S'/AuxKernels/MaterialStdVectorAux'
p5581
sa(dp5582
S'description'
p5583
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p5584
sS'subblocks'
p5585
NsS'parameters'
p5586
(lp5587
(dp5588
S'description'
p5589
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5590
sS'cpp_type'
p5591
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5592
sS'default'
p5593
g3
sS'name'
p5594
S'block'
p5595
sS'required'
p5596
I00
sS'group_name'
p5597
Nsa(dp5598
S'description'
p5599
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5600
sS'cpp_type'
p5601
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5602
sS'default'
p5603
g3
sS'name'
p5604
S'boundary'
p5605
sS'required'
p5606
I00
sS'group_name'
p5607
Nsa(dp5608
S'description'
p5609
S'The gradient component to be extracted for this kernel\n'
p5610
sS'cpp_type'
p5611
S'unsigned int'
p5612
sS'default'
p5613
S'0'
p5614
sS'name'
p5615
S'component'
p5616
sS'required'
p5617
I00
sS'group_name'
p5618
Nsa(dp5619
S'description'
p5620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5621
sS'cpp_type'
p5622
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5623
sS'default'
p5624
g3
sS'name'
p5625
S'control_tags'
p5626
sS'required'
p5627
I00
sS'group_name'
p5628
S'Advanced'
p5629
sa(dp5630
S'description'
p5631
S'Set the enabled status of the MooseObject.\n'
p5632
sS'cpp_type'
p5633
S'bool'
p5634
sS'default'
p5635
S'1'
p5636
sS'name'
p5637
S'enable'
p5638
sS'required'
p5639
I00
sS'group_name'
p5640
S'Advanced'
p5641
sa(dp5642
S'name'
p5643
S'execute_on'
p5644
sS'cpp_type'
p5645
S'MultiMooseEnum'
p5646
sS'default'
p5647
S'LINEAR'
p5648
sS'description'
p5649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5650
sS'required'
p5651
I00
sS'options'
p5652
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5653
sS'group_name'
p5654
Nsa(dp5655
S'description'
p5656
S'The factor by which to multiply your material property for visualization\n'
p5657
sS'cpp_type'
p5658
S'double'
p5659
sS'default'
p5660
S'1'
p5661
sS'name'
p5662
S'factor'
p5663
sS'required'
p5664
I00
sS'group_name'
p5665
Nsa(dp5666
S'description'
p5667
S'The index to consider for this kernel\n'
p5668
sS'cpp_type'
p5669
S'unsigned int'
p5670
sS'default'
p5671
S'0'
p5672
sS'name'
p5673
S'index'
p5674
sS'required'
p5675
I00
sS'group_name'
p5676
Nsa(dp5677
S'description'
p5678
S'The offset to add to your material property for visualization\n'
p5679
sS'cpp_type'
p5680
S'double'
p5681
sS'default'
p5682
S'0'
p5683
sS'name'
p5684
S'offset'
p5685
sS'required'
p5686
I00
sS'group_name'
p5687
Nsa(dp5688
S'description'
p5689
S'The scalar material property name\n'
p5690
sS'cpp_type'
p5691
S'MaterialPropertyName'
p5692
sS'default'
p5693
g3
sS'name'
p5694
S'property'
p5695
sS'required'
p5696
I01
sS'group_name'
p5697
Nsa(dp5698
S'description'
p5699
S'The seed for the master random number generator\n'
p5700
sS'cpp_type'
p5701
S'unsigned int'
p5702
sS'default'
p5703
S'0'
p5704
sS'name'
p5705
S'seed'
p5706
sS'required'
p5707
I00
sS'group_name'
p5708
S'Advanced'
p5709
sa(dp5710
S'description'
p5711
g3
sS'cpp_type'
p5712
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5713
sS'default'
p5714
S'MaterialStdVectorRealGradientAux'
p5715
sS'name'
p5716
S'type'
p5717
sS'required'
p5718
I00
sS'group_name'
p5719
Nsa(dp5720
S'description'
p5721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5722
sS'cpp_type'
p5723
S'bool'
p5724
sS'default'
p5725
S'0'
p5726
sS'name'
p5727
S'use_displaced_mesh'
p5728
sS'required'
p5729
I00
sS'group_name'
p5730
S'Advanced'
p5731
sa(dp5732
S'description'
p5733
S'The name of the variable that this object applies to\n'
p5734
sS'cpp_type'
p5735
S'AuxVariableName'
p5736
sS'default'
p5737
g3
sS'name'
p5738
S'variable'
p5739
sS'required'
p5740
I01
sS'group_name'
p5741
NsasS'name'
p5742
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p5743
sa(dp5744
S'description'
p5745
g3
sS'subblocks'
p5746
NsS'parameters'
p5747
(lp5748
(dp5749
S'description'
p5750
S'Value that specifies the number of grains to create aux kernels for.\n'
p5751
sS'cpp_type'
p5752
S'unsigned int'
p5753
sS'default'
p5754
g3
sS'name'
p5755
S'grain_num'
p5756
sS'required'
p5757
I01
sS'group_name'
p5758
Nsa(dp5759
S'description'
p5760
S'The material property names.\n'
p5761
sS'cpp_type'
p5762
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p5763
sS'default'
p5764
g3
sS'name'
p5765
S'property'
p5766
sS'required'
p5767
I01
sS'group_name'
p5768
Nsa(dp5769
S'description'
p5770
S'Whether to use displaced mesh in the kernels.\n'
p5771
sS'cpp_type'
p5772
S'bool'
p5773
sS'default'
p5774
S'0'
p5775
sS'name'
p5776
S'use_displaced_mesh'
p5777
sS'required'
p5778
I00
sS'group_name'
p5779
Nsa(dp5780
S'description'
p5781
S'Vector specifies the base name of the variables.\n'
p5782
sS'cpp_type'
p5783
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5784
sS'default'
p5785
g3
sS'name'
p5786
S'variable_base'
p5787
sS'required'
p5788
I01
sS'group_name'
p5789
NsasS'name'
p5790
S'/AuxKernels/MaterialVectorAuxKernel'
p5791
sa(dp5792
S'description'
p5793
g3
sS'subblocks'
p5794
NsS'parameters'
p5795
(lp5796
(dp5797
S'description'
p5798
S'Value that specifies the number of grains to create aux kernels for.\n'
p5799
sS'cpp_type'
p5800
S'unsigned int'
p5801
sS'default'
p5802
g3
sS'name'
p5803
S'grain_num'
p5804
sS'required'
p5805
I01
sS'group_name'
p5806
Nsa(dp5807
S'description'
p5808
S'The material property names.\n'
p5809
sS'cpp_type'
p5810
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p5811
sS'default'
p5812
g3
sS'name'
p5813
S'property'
p5814
sS'required'
p5815
I01
sS'group_name'
p5816
Nsa(dp5817
S'description'
p5818
S'Whether to use displaced mesh in the kernels.\n'
p5819
sS'cpp_type'
p5820
S'bool'
p5821
sS'default'
p5822
S'0'
p5823
sS'name'
p5824
S'use_displaced_mesh'
p5825
sS'required'
p5826
I00
sS'group_name'
p5827
Nsa(dp5828
S'description'
p5829
S'Vector specifies the base name of the variables.\n'
p5830
sS'cpp_type'
p5831
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5832
sS'default'
p5833
g3
sS'name'
p5834
S'variable_base'
p5835
sS'required'
p5836
I01
sS'group_name'
p5837
NsasS'name'
p5838
S'/AuxKernels/MaterialVectorGradAuxKernel'
p5839
sa(dp5840
S'description'
p5841
g3
sS'subblocks'
p5842
NsS'parameters'
p5843
(lp5844
(dp5845
S'description'
p5846
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5847
sS'cpp_type'
p5848
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5849
sS'default'
p5850
g3
sS'name'
p5851
S'block'
p5852
sS'required'
p5853
I00
sS'group_name'
p5854
Nsa(dp5855
S'description'
p5856
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5857
sS'cpp_type'
p5858
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5859
sS'default'
p5860
g3
sS'name'
p5861
S'boundary'
p5862
sS'required'
p5863
I00
sS'group_name'
p5864
Nsa(dp5865
S'description'
p5866
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5867
sS'cpp_type'
p5868
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5869
sS'default'
p5870
g3
sS'name'
p5871
S'control_tags'
p5872
sS'required'
p5873
I00
sS'group_name'
p5874
S'Advanced'
p5875
sa(dp5876
S'description'
p5877
S'Set the enabled status of the MooseObject.\n'
p5878
sS'cpp_type'
p5879
S'bool'
p5880
sS'default'
p5881
S'1'
p5882
sS'name'
p5883
S'enable'
p5884
sS'required'
p5885
I00
sS'group_name'
p5886
S'Advanced'
p5887
sa(dp5888
S'name'
p5889
S'execute_on'
p5890
sS'cpp_type'
p5891
S'MultiMooseEnum'
p5892
sS'default'
p5893
S'LINEAR'
p5894
sS'description'
p5895
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5896
sS'required'
p5897
I00
sS'options'
p5898
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5899
sS'group_name'
p5900
Nsa(dp5901
S'description'
p5902
S'The boundary to find the distance to.\n'
p5903
sS'cpp_type'
p5904
S'BoundaryName'
p5905
sS'default'
p5906
g3
sS'name'
p5907
S'paired_boundary'
p5908
sS'required'
p5909
I01
sS'group_name'
p5910
Nsa(dp5911
S'description'
p5912
S'The seed for the master random number generator\n'
p5913
sS'cpp_type'
p5914
S'unsigned int'
p5915
sS'default'
p5916
S'0'
p5917
sS'name'
p5918
S'seed'
p5919
sS'required'
p5920
I00
sS'group_name'
p5921
S'Advanced'
p5922
sa(dp5923
S'description'
p5924
g3
sS'cpp_type'
p5925
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5926
sS'default'
p5927
S'NearestNodeDistanceAux'
p5928
sS'name'
p5929
S'type'
p5930
sS'required'
p5931
I00
sS'group_name'
p5932
Nsa(dp5933
S'description'
p5934
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5935
sS'cpp_type'
p5936
S'bool'
p5937
sS'default'
p5938
S'1'
p5939
sS'name'
p5940
S'use_displaced_mesh'
p5941
sS'required'
p5942
I00
sS'group_name'
p5943
S'Advanced'
p5944
sa(dp5945
S'description'
p5946
S'The name of the variable that this object applies to\n'
p5947
sS'cpp_type'
p5948
S'AuxVariableName'
p5949
sS'default'
p5950
g3
sS'name'
p5951
S'variable'
p5952
sS'required'
p5953
I01
sS'group_name'
p5954
NsasS'name'
p5955
S'/AuxKernels/NearestNodeDistanceAux'
p5956
sa(dp5957
S'description'
p5958
g3
sS'subblocks'
p5959
NsS'parameters'
p5960
(lp5961
(dp5962
S'description'
p5963
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5964
sS'cpp_type'
p5965
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5966
sS'default'
p5967
g3
sS'name'
p5968
S'block'
p5969
sS'required'
p5970
I00
sS'group_name'
p5971
Nsa(dp5972
S'description'
p5973
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5974
sS'cpp_type'
p5975
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5976
sS'default'
p5977
g3
sS'name'
p5978
S'boundary'
p5979
sS'required'
p5980
I00
sS'group_name'
p5981
Nsa(dp5982
S'description'
p5983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5984
sS'cpp_type'
p5985
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5986
sS'default'
p5987
g3
sS'name'
p5988
S'control_tags'
p5989
sS'required'
p5990
I00
sS'group_name'
p5991
S'Advanced'
p5992
sa(dp5993
S'description'
p5994
S'Set the enabled status of the MooseObject.\n'
p5995
sS'cpp_type'
p5996
S'bool'
p5997
sS'default'
p5998
S'1'
p5999
sS'name'
p6000
S'enable'
p6001
sS'required'
p6002
I00
sS'group_name'
p6003
S'Advanced'
p6004
sa(dp6005
S'name'
p6006
S'execute_on'
p6007
sS'cpp_type'
p6008
S'MultiMooseEnum'
p6009
sS'default'
p6010
S'LINEAR'
p6011
sS'description'
p6012
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6013
sS'required'
p6014
I00
sS'options'
p6015
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6016
sS'group_name'
p6017
Nsa(dp6018
S'description'
p6019
S'The boundary to get the value from.\n'
p6020
sS'cpp_type'
p6021
S'BoundaryName'
p6022
sS'default'
p6023
g3
sS'name'
p6024
S'paired_boundary'
p6025
sS'required'
p6026
I01
sS'group_name'
p6027
Nsa(dp6028
S'description'
p6029
S'The variable to get the value of.\n'
p6030
sS'cpp_type'
p6031
S'std::vector<VariableName>'
p6032
sS'default'
p6033
g3
sS'name'
p6034
S'paired_variable'
p6035
sS'required'
p6036
I01
sS'group_name'
p6037
Nsa(dp6038
S'description'
p6039
S'The seed for the master random number generator\n'
p6040
sS'cpp_type'
p6041
S'unsigned int'
p6042
sS'default'
p6043
S'0'
p6044
sS'name'
p6045
S'seed'
p6046
sS'required'
p6047
I00
sS'group_name'
p6048
S'Advanced'
p6049
sa(dp6050
S'description'
p6051
g3
sS'cpp_type'
p6052
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6053
sS'default'
p6054
S'NearestNodeValueAux'
p6055
sS'name'
p6056
S'type'
p6057
sS'required'
p6058
I00
sS'group_name'
p6059
Nsa(dp6060
S'description'
p6061
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6062
sS'cpp_type'
p6063
S'bool'
p6064
sS'default'
p6065
S'1'
p6066
sS'name'
p6067
S'use_displaced_mesh'
p6068
sS'required'
p6069
I00
sS'group_name'
p6070
S'Advanced'
p6071
sa(dp6072
S'description'
p6073
S'The name of the variable that this object applies to\n'
p6074
sS'cpp_type'
p6075
S'AuxVariableName'
p6076
sS'default'
p6077
g3
sS'name'
p6078
S'variable'
p6079
sS'required'
p6080
I01
sS'group_name'
p6081
NsasS'name'
p6082
S'/AuxKernels/NearestNodeValueAux'
p6083
sa(dp6084
S'description'
p6085
g3
sS'subblocks'
p6086
NsS'parameters'
p6087
(lp6088
(dp6089
S'description'
p6090
S'beta parameter\n'
p6091
sS'cpp_type'
p6092
S'double'
p6093
sS'default'
p6094
g3
sS'name'
p6095
S'beta'
p6096
sS'required'
p6097
I01
sS'group_name'
p6098
Nsa(dp6099
S'description'
p6100
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6101
sS'cpp_type'
p6102
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6103
sS'default'
p6104
g3
sS'name'
p6105
S'block'
p6106
sS'required'
p6107
I00
sS'group_name'
p6108
Nsa(dp6109
S'description'
p6110
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6111
sS'cpp_type'
p6112
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6113
sS'default'
p6114
g3
sS'name'
p6115
S'boundary'
p6116
sS'required'
p6117
I00
sS'group_name'
p6118
Nsa(dp6119
S'description'
p6120
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6121
sS'cpp_type'
p6122
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6123
sS'default'
p6124
g3
sS'name'
p6125
S'control_tags'
p6126
sS'required'
p6127
I00
sS'group_name'
p6128
S'Advanced'
p6129
sa(dp6130
S'description'
p6131
S'displacement variable\n'
p6132
sS'cpp_type'
p6133
S'std::vector<VariableName>'
p6134
sS'default'
p6135
g3
sS'name'
p6136
S'displacement'
p6137
sS'required'
p6138
I01
sS'group_name'
p6139
Nsa(dp6140
S'description'
p6141
S'Set the enabled status of the MooseObject.\n'
p6142
sS'cpp_type'
p6143
S'bool'
p6144
sS'default'
p6145
S'1'
p6146
sS'name'
p6147
S'enable'
p6148
sS'required'
p6149
I00
sS'group_name'
p6150
S'Advanced'
p6151
sa(dp6152
S'name'
p6153
S'execute_on'
p6154
sS'cpp_type'
p6155
S'MultiMooseEnum'
p6156
sS'default'
p6157
S'LINEAR'
p6158
sS'description'
p6159
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6160
sS'required'
p6161
I00
sS'options'
p6162
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6163
sS'group_name'
p6164
Nsa(dp6165
S'description'
p6166
S'The seed for the master random number generator\n'
p6167
sS'cpp_type'
p6168
S'unsigned int'
p6169
sS'default'
p6170
S'0'
p6171
sS'name'
p6172
S'seed'
p6173
sS'required'
p6174
I00
sS'group_name'
p6175
S'Advanced'
p6176
sa(dp6177
S'description'
p6178
g3
sS'cpp_type'
p6179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6180
sS'default'
p6181
S'NewmarkAccelAux'
p6182
sS'name'
p6183
S'type'
p6184
sS'required'
p6185
I00
sS'group_name'
p6186
Nsa(dp6187
S'description'
p6188
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6189
sS'cpp_type'
p6190
S'bool'
p6191
sS'default'
p6192
S'0'
p6193
sS'name'
p6194
S'use_displaced_mesh'
p6195
sS'required'
p6196
I00
sS'group_name'
p6197
S'Advanced'
p6198
sa(dp6199
S'description'
p6200
S'The name of the variable that this object applies to\n'
p6201
sS'cpp_type'
p6202
S'AuxVariableName'
p6203
sS'default'
p6204
g3
sS'name'
p6205
S'variable'
p6206
sS'required'
p6207
I01
sS'group_name'
p6208
Nsa(dp6209
S'description'
p6210
S'velocity variable\n'
p6211
sS'cpp_type'
p6212
S'std::vector<VariableName>'
p6213
sS'default'
p6214
g3
sS'name'
p6215
S'velocity'
p6216
sS'required'
p6217
I01
sS'group_name'
p6218
NsasS'name'
p6219
S'/AuxKernels/NewmarkAccelAux'
p6220
sa(dp6221
S'description'
p6222
g3
sS'subblocks'
p6223
NsS'parameters'
p6224
(lp6225
(dp6226
S'description'
p6227
S'acceleration variable\n'
p6228
sS'cpp_type'
p6229
S'std::vector<VariableName>'
p6230
sS'default'
p6231
g3
sS'name'
p6232
S'acceleration'
p6233
sS'required'
p6234
I01
sS'group_name'
p6235
Nsa(dp6236
S'description'
p6237
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6238
sS'cpp_type'
p6239
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6240
sS'default'
p6241
g3
sS'name'
p6242
S'block'
p6243
sS'required'
p6244
I00
sS'group_name'
p6245
Nsa(dp6246
S'description'
p6247
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6248
sS'cpp_type'
p6249
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6250
sS'default'
p6251
g3
sS'name'
p6252
S'boundary'
p6253
sS'required'
p6254
I00
sS'group_name'
p6255
Nsa(dp6256
S'description'
p6257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6258
sS'cpp_type'
p6259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6260
sS'default'
p6261
g3
sS'name'
p6262
S'control_tags'
p6263
sS'required'
p6264
I00
sS'group_name'
p6265
S'Advanced'
p6266
sa(dp6267
S'description'
p6268
S'Set the enabled status of the MooseObject.\n'
p6269
sS'cpp_type'
p6270
S'bool'
p6271
sS'default'
p6272
S'1'
p6273
sS'name'
p6274
S'enable'
p6275
sS'required'
p6276
I00
sS'group_name'
p6277
S'Advanced'
p6278
sa(dp6279
S'name'
p6280
S'execute_on'
p6281
sS'cpp_type'
p6282
S'MultiMooseEnum'
p6283
sS'default'
p6284
S'LINEAR'
p6285
sS'description'
p6286
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6287
sS'required'
p6288
I00
sS'options'
p6289
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6290
sS'group_name'
p6291
Nsa(dp6292
S'description'
p6293
S'gamma parameter\n'
p6294
sS'cpp_type'
p6295
S'double'
p6296
sS'default'
p6297
g3
sS'name'
p6298
S'gamma'
p6299
sS'required'
p6300
I01
sS'group_name'
p6301
Nsa(dp6302
S'description'
p6303
S'The seed for the master random number generator\n'
p6304
sS'cpp_type'
p6305
S'unsigned int'
p6306
sS'default'
p6307
S'0'
p6308
sS'name'
p6309
S'seed'
p6310
sS'required'
p6311
I00
sS'group_name'
p6312
S'Advanced'
p6313
sa(dp6314
S'description'
p6315
g3
sS'cpp_type'
p6316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6317
sS'default'
p6318
S'NewmarkVelAux'
p6319
sS'name'
p6320
S'type'
p6321
sS'required'
p6322
I00
sS'group_name'
p6323
Nsa(dp6324
S'description'
p6325
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6326
sS'cpp_type'
p6327
S'bool'
p6328
sS'default'
p6329
S'0'
p6330
sS'name'
p6331
S'use_displaced_mesh'
p6332
sS'required'
p6333
I00
sS'group_name'
p6334
S'Advanced'
p6335
sa(dp6336
S'description'
p6337
S'The name of the variable that this object applies to\n'
p6338
sS'cpp_type'
p6339
S'AuxVariableName'
p6340
sS'default'
p6341
g3
sS'name'
p6342
S'variable'
p6343
sS'required'
p6344
I01
sS'group_name'
p6345
NsasS'name'
p6346
S'/AuxKernels/NewmarkVelAux'
p6347
sa(dp6348
S'description'
p6349
g3
sS'subblocks'
p6350
NsS'parameters'
p6351
(lp6352
(dp6353
S'description'
p6354
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6355
sS'cpp_type'
p6356
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6357
sS'default'
p6358
g3
sS'name'
p6359
S'block'
p6360
sS'required'
p6361
I00
sS'group_name'
p6362
Nsa(dp6363
S'description'
p6364
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6365
sS'cpp_type'
p6366
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6367
sS'default'
p6368
g3
sS'name'
p6369
S'boundary'
p6370
sS'required'
p6371
I00
sS'group_name'
p6372
Nsa(dp6373
S'description'
p6374
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6375
sS'cpp_type'
p6376
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6377
sS'default'
p6378
g3
sS'name'
p6379
S'control_tags'
p6380
sS'required'
p6381
I00
sS'group_name'
p6382
S'Advanced'
p6383
sa(dp6384
S'description'
p6385
S'Set the enabled status of the MooseObject.\n'
p6386
sS'cpp_type'
p6387
S'bool'
p6388
sS'default'
p6389
S'1'
p6390
sS'name'
p6391
S'enable'
p6392
sS'required'
p6393
I00
sS'group_name'
p6394
S'Advanced'
p6395
sa(dp6396
S'name'
p6397
S'execute_on'
p6398
sS'cpp_type'
p6399
S'MultiMooseEnum'
p6400
sS'default'
p6401
S'LINEAR'
p6402
sS'description'
p6403
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6404
sS'required'
p6405
I00
sS'options'
p6406
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6407
sS'group_name'
p6408
Nsa(dp6409
S'description'
p6410
S'The normalization factor\n'
p6411
sS'cpp_type'
p6412
S'double'
p6413
sS'default'
p6414
S'1'
p6415
sS'name'
p6416
S'normal_factor'
p6417
sS'required'
p6418
I00
sS'group_name'
p6419
Nsa(dp6420
S'description'
p6421
S'The postprocessor on the source\n'
p6422
sS'cpp_type'
p6423
S'PostprocessorName'
p6424
sS'default'
p6425
g3
sS'name'
p6426
S'normalization'
p6427
sS'required'
p6428
I01
sS'group_name'
p6429
Nsa(dp6430
S'description'
p6431
S'The seed for the master random number generator\n'
p6432
sS'cpp_type'
p6433
S'unsigned int'
p6434
sS'default'
p6435
S'0'
p6436
sS'name'
p6437
S'seed'
p6438
sS'required'
p6439
I00
sS'group_name'
p6440
S'Advanced'
p6441
sa(dp6442
S'description'
p6443
S'The variable to be normalized\n'
p6444
sS'cpp_type'
p6445
S'std::vector<VariableName>'
p6446
sS'default'
p6447
g3
sS'name'
p6448
S'source_variable'
p6449
sS'required'
p6450
I01
sS'group_name'
p6451
Nsa(dp6452
S'description'
p6453
g3
sS'cpp_type'
p6454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6455
sS'default'
p6456
S'NormalizationAux'
p6457
sS'name'
p6458
S'type'
p6459
sS'required'
p6460
I00
sS'group_name'
p6461
Nsa(dp6462
S'description'
p6463
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6464
sS'cpp_type'
p6465
S'bool'
p6466
sS'default'
p6467
S'0'
p6468
sS'name'
p6469
S'use_displaced_mesh'
p6470
sS'required'
p6471
I00
sS'group_name'
p6472
S'Advanced'
p6473
sa(dp6474
S'description'
p6475
S'The name of the variable that this object applies to\n'
p6476
sS'cpp_type'
p6477
S'AuxVariableName'
p6478
sS'default'
p6479
g3
sS'name'
p6480
S'variable'
p6481
sS'required'
p6482
I01
sS'group_name'
p6483
NsasS'name'
p6484
S'/AuxKernels/NormalizationAux'
p6485
sa(dp6486
S'description'
p6487
S'Output euler angles from user object to an AuxVariable.\n'
p6488
sS'subblocks'
p6489
NsS'parameters'
p6490
(lp6491
(dp6492
S'description'
p6493
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6494
sS'cpp_type'
p6495
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6496
sS'default'
p6497
g3
sS'name'
p6498
S'block'
p6499
sS'required'
p6500
I00
sS'group_name'
p6501
Nsa(dp6502
S'description'
p6503
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6504
sS'cpp_type'
p6505
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6506
sS'default'
p6507
g3
sS'name'
p6508
S'boundary'
p6509
sS'required'
p6510
I00
sS'group_name'
p6511
Nsa(dp6512
S'description'
p6513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6514
sS'cpp_type'
p6515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6516
sS'default'
p6517
g3
sS'name'
p6518
S'control_tags'
p6519
sS'required'
p6520
I00
sS'group_name'
p6521
S'Advanced'
p6522
sa(dp6523
S'description'
p6524
S'Set the enabled status of the MooseObject.\n'
p6525
sS'cpp_type'
p6526
S'bool'
p6527
sS'default'
p6528
S'1'
p6529
sS'name'
p6530
S'enable'
p6531
sS'required'
p6532
I00
sS'group_name'
p6533
S'Advanced'
p6534
sa(dp6535
S'description'
p6536
S'Name of Euler angle provider user object\n'
p6537
sS'cpp_type'
p6538
S'UserObjectName'
p6539
sS'default'
p6540
g3
sS'name'
p6541
S'euler_angle_provider'
p6542
sS'required'
p6543
I01
sS'group_name'
p6544
Nsa(dp6545
S'name'
p6546
S'execute_on'
p6547
sS'cpp_type'
p6548
S'MultiMooseEnum'
p6549
sS'default'
p6550
S'LINEAR'
p6551
sS'description'
p6552
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6553
sS'required'
p6554
I00
sS'options'
p6555
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6556
sS'group_name'
p6557
Nsa(dp6558
S'description'
p6559
S'The GrainTracker UserObject to get values from.\n'
p6560
sS'cpp_type'
p6561
S'UserObjectName'
p6562
sS'default'
p6563
g3
sS'name'
p6564
S'grain_tracker'
p6565
sS'required'
p6566
I01
sS'group_name'
p6567
Nsa(dp6568
S'name'
p6569
S'output_euler_angle'
p6570
sS'cpp_type'
p6571
S'MooseEnum'
p6572
sS'default'
p6573
g3
sS'description'
p6574
S'Euler angle to output\n'
p6575
sS'required'
p6576
I01
sS'options'
p6577
S'phi1 Phi phi2'
p6578
sS'group_name'
p6579
Nsa(dp6580
S'description'
p6581
S'The seed for the master random number generator\n'
p6582
sS'cpp_type'
p6583
S'unsigned int'
p6584
sS'default'
p6585
S'0'
p6586
sS'name'
p6587
S'seed'
p6588
sS'required'
p6589
I00
sS'group_name'
p6590
S'Advanced'
p6591
sa(dp6592
S'description'
p6593
g3
sS'cpp_type'
p6594
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6595
sS'default'
p6596
S'OutputEulerAngles'
p6597
sS'name'
p6598
S'type'
p6599
sS'required'
p6600
I00
sS'group_name'
p6601
Nsa(dp6602
S'description'
p6603
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6604
sS'cpp_type'
p6605
S'bool'
p6606
sS'default'
p6607
S'0'
p6608
sS'name'
p6609
S'use_displaced_mesh'
p6610
sS'required'
p6611
I00
sS'group_name'
p6612
S'Advanced'
p6613
sa(dp6614
S'description'
p6615
S'The name of the variable that this object applies to\n'
p6616
sS'cpp_type'
p6617
S'AuxVariableName'
p6618
sS'default'
p6619
g3
sS'name'
p6620
S'variable'
p6621
sS'required'
p6622
I01
sS'group_name'
p6623
NsasS'name'
p6624
S'/AuxKernels/OutputEulerAngles'
p6625
sa(dp6626
S'description'
p6627
g3
sS'subblocks'
p6628
NsS'parameters'
p6629
(lp6630
(dp6631
S'description'
p6632
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6633
sS'cpp_type'
p6634
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6635
sS'default'
p6636
g3
sS'name'
p6637
S'block'
p6638
sS'required'
p6639
I00
sS'group_name'
p6640
Nsa(dp6641
S'description'
p6642
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6643
sS'cpp_type'
p6644
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6645
sS'default'
p6646
g3
sS'name'
p6647
S'boundary'
p6648
sS'required'
p6649
I00
sS'group_name'
p6650
Nsa(dp6651
S'description'
p6652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6653
sS'cpp_type'
p6654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6655
sS'default'
p6656
g3
sS'name'
p6657
S'control_tags'
p6658
sS'required'
p6659
I00
sS'group_name'
p6660
S'Advanced'
p6661
sa(dp6662
S'description'
p6663
S'Set the enabled status of the MooseObject.\n'
p6664
sS'cpp_type'
p6665
S'bool'
p6666
sS'default'
p6667
S'1'
p6668
sS'name'
p6669
S'enable'
p6670
sS'required'
p6671
I00
sS'group_name'
p6672
S'Advanced'
p6673
sa(dp6674
S'name'
p6675
S'execute_on'
p6676
sS'cpp_type'
p6677
S'MultiMooseEnum'
p6678
sS'default'
p6679
S'LINEAR'
p6680
sS'description'
p6681
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6682
sS'required'
p6683
I00
sS'options'
p6684
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6685
sS'group_name'
p6686
Nsa(dp6687
S'description'
p6688
S'The seed for the master random number generator\n'
p6689
sS'cpp_type'
p6690
S'unsigned int'
p6691
sS'default'
p6692
S'0'
p6693
sS'name'
p6694
S'seed'
p6695
sS'required'
p6696
I00
sS'group_name'
p6697
S'Advanced'
p6698
sa(dp6699
S'description'
p6700
g3
sS'cpp_type'
p6701
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6702
sS'default'
p6703
S'PFCEnergyDensity'
p6704
sS'name'
p6705
S'type'
p6706
sS'required'
p6707
I00
sS'group_name'
p6708
Nsa(dp6709
S'description'
p6710
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6711
sS'cpp_type'
p6712
S'bool'
p6713
sS'default'
p6714
S'0'
p6715
sS'name'
p6716
S'use_displaced_mesh'
p6717
sS'required'
p6718
I00
sS'group_name'
p6719
S'Advanced'
p6720
sa(dp6721
S'description'
p6722
S'Array of coupled variables\n'
p6723
sS'cpp_type'
p6724
S'std::vector<VariableName>'
p6725
sS'default'
p6726
g3
sS'name'
p6727
S'v'
p6728
sS'required'
p6729
I01
sS'group_name'
p6730
Nsa(dp6731
S'description'
p6732
S'The name of the variable that this object applies to\n'
p6733
sS'cpp_type'
p6734
S'AuxVariableName'
p6735
sS'default'
p6736
g3
sS'name'
p6737
S'variable'
p6738
sS'required'
p6739
I01
sS'group_name'
p6740
NsasS'name'
p6741
S'/AuxKernels/PFCEnergyDensity'
p6742
sa(dp6743
S'description'
p6744
g3
sS'subblocks'
p6745
NsS'parameters'
p6746
(lp6747
(dp6748
S'description'
p6749
S'Modified Coefficent in Taylor Series Expanstion\n'
p6750
sS'cpp_type'
p6751
S'double'
p6752
sS'default'
p6753
S'1'
p6754
sS'name'
p6755
S'a'
p6756
sS'required'
p6757
I00
sS'group_name'
p6758
Nsa(dp6759
S'description'
p6760
S'Modified Coefficent in Taylor Series Expanstion\n'
p6761
sS'cpp_type'
p6762
S'double'
p6763
sS'default'
p6764
S'1'
p6765
sS'name'
p6766
S'b'
p6767
sS'required'
p6768
I00
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6772
sS'cpp_type'
p6773
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6774
sS'default'
p6775
g3
sS'name'
p6776
S'block'
p6777
sS'required'
p6778
I00
sS'group_name'
p6779
Nsa(dp6780
S'description'
p6781
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6782
sS'cpp_type'
p6783
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6784
sS'default'
p6785
g3
sS'name'
p6786
S'boundary'
p6787
sS'required'
p6788
I00
sS'group_name'
p6789
Nsa(dp6790
S'description'
p6791
S'Modified Coefficent in Taylor Series Expanstion\n'
p6792
sS'cpp_type'
p6793
S'double'
p6794
sS'default'
p6795
S'1'
p6796
sS'name'
p6797
S'c'
p6798
sS'required'
p6799
I00
sS'group_name'
p6800
Nsa(dp6801
S'description'
p6802
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6803
sS'cpp_type'
p6804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6805
sS'default'
p6806
g3
sS'name'
p6807
S'control_tags'
p6808
sS'required'
p6809
I00
sS'group_name'
p6810
S'Advanced'
p6811
sa(dp6812
S'description'
p6813
S'Set the enabled status of the MooseObject.\n'
p6814
sS'cpp_type'
p6815
S'bool'
p6816
sS'default'
p6817
S'1'
p6818
sS'name'
p6819
S'enable'
p6820
sS'required'
p6821
I00
sS'group_name'
p6822
S'Advanced'
p6823
sa(dp6824
S'name'
p6825
S'execute_on'
p6826
sS'cpp_type'
p6827
S'MultiMooseEnum'
p6828
sS'default'
p6829
S'LINEAR'
p6830
sS'description'
p6831
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6832
sS'required'
p6833
I00
sS'options'
p6834
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6835
sS'group_name'
p6836
Nsa(dp6837
S'name'
p6838
S'log_approach'
p6839
sS'cpp_type'
p6840
S'MooseEnum'
p6841
sS'default'
p6842
g3
sS'description'
p6843
S'Which approach will be used to handle the natural log\n'
p6844
sS'required'
p6845
I01
sS'options'
p6846
S'tolerance cancelation expansion nothing'
p6847
sS'group_name'
p6848
Nsa(dp6849
S'description'
p6850
S'This is the number of terms to use in the taylor series expansion\n'
p6851
sS'cpp_type'
p6852
S'unsigned int'
p6853
sS'default'
p6854
S'4'
p6855
sS'name'
p6856
S'num_exp_terms'
p6857
sS'required'
p6858
I00
sS'group_name'
p6859
Nsa(dp6860
S'description'
p6861
S'The seed for the master random number generator\n'
p6862
sS'cpp_type'
p6863
S'unsigned int'
p6864
sS'default'
p6865
S'0'
p6866
sS'name'
p6867
S'seed'
p6868
sS'required'
p6869
I00
sS'group_name'
p6870
S'Advanced'
p6871
sa(dp6872
S'description'
p6873
S'Tolerance used when the tolerance approach is chosen\n'
p6874
sS'cpp_type'
p6875
S'double'
p6876
sS'default'
p6877
S'1e-09'
p6878
sS'name'
p6879
S'tol'
p6880
sS'required'
p6881
I00
sS'group_name'
p6882
Nsa(dp6883
S'description'
p6884
g3
sS'cpp_type'
p6885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6886
sS'default'
p6887
S'PFCRFFEnergyDensity'
p6888
sS'name'
p6889
S'type'
p6890
sS'required'
p6891
I00
sS'group_name'
p6892
Nsa(dp6893
S'description'
p6894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6895
sS'cpp_type'
p6896
S'bool'
p6897
sS'default'
p6898
S'0'
p6899
sS'name'
p6900
S'use_displaced_mesh'
p6901
sS'required'
p6902
I00
sS'group_name'
p6903
S'Advanced'
p6904
sa(dp6905
S'description'
p6906
S'Array of coupled variables\n'
p6907
sS'cpp_type'
p6908
S'std::vector<VariableName>'
p6909
sS'default'
p6910
g3
sS'name'
p6911
S'v'
p6912
sS'required'
p6913
I01
sS'group_name'
p6914
Nsa(dp6915
S'description'
p6916
S'The name of the variable that this object applies to\n'
p6917
sS'cpp_type'
p6918
S'AuxVariableName'
p6919
sS'default'
p6920
g3
sS'name'
p6921
S'variable'
p6922
sS'required'
p6923
I01
sS'group_name'
p6924
NsasS'name'
p6925
S'/AuxKernels/PFCRFFEnergyDensity'
p6926
sa(dp6927
S'description'
p6928
S'Parsed function AuxKernel.\n'
p6929
sS'subblocks'
p6930
NsS'parameters'
p6931
(lp6932
(dp6933
S'description'
p6934
S'coupled variables\n'
p6935
sS'cpp_type'
p6936
S'std::vector<VariableName>'
p6937
sS'default'
p6938
g3
sS'name'
p6939
S'args'
p6940
sS'required'
p6941
I00
sS'group_name'
p6942
Nsa(dp6943
S'description'
p6944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6945
sS'cpp_type'
p6946
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6947
sS'default'
p6948
g3
sS'name'
p6949
S'block'
p6950
sS'required'
p6951
I00
sS'group_name'
p6952
Nsa(dp6953
S'description'
p6954
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6955
sS'cpp_type'
p6956
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6957
sS'default'
p6958
g3
sS'name'
p6959
S'boundary'
p6960
sS'required'
p6961
I00
sS'group_name'
p6962
Nsa(dp6963
S'description'
p6964
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p6965
sS'cpp_type'
p6966
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6967
sS'default'
p6968
g3
sS'name'
p6969
S'constant_expressions'
p6970
sS'required'
p6971
I00
sS'group_name'
p6972
Nsa(dp6973
S'description'
p6974
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p6975
sS'cpp_type'
p6976
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6977
sS'default'
p6978
g3
sS'name'
p6979
S'constant_names'
p6980
sS'required'
p6981
I00
sS'group_name'
p6982
Nsa(dp6983
S'description'
p6984
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6985
sS'cpp_type'
p6986
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6987
sS'default'
p6988
g3
sS'name'
p6989
S'control_tags'
p6990
sS'required'
p6991
I00
sS'group_name'
p6992
S'Advanced'
p6993
sa(dp6994
S'description'
p6995
S'Disable the function parser algebraic optimizer\n'
p6996
sS'cpp_type'
p6997
S'bool'
p6998
sS'default'
p6999
S'0'
p7000
sS'name'
p7001
S'disable_fpoptimizer'
p7002
sS'required'
p7003
I00
sS'group_name'
p7004
S'Advanced'
p7005
sa(dp7006
S'description'
p7007
S'Set the enabled status of the MooseObject.\n'
p7008
sS'cpp_type'
p7009
S'bool'
p7010
sS'default'
p7011
S'1'
p7012
sS'name'
p7013
S'enable'
p7014
sS'required'
p7015
I00
sS'group_name'
p7016
S'Advanced'
p7017
sa(dp7018
S'description'
p7019
S'Enable cacheing of function derivatives for faster startup time\n'
p7020
sS'cpp_type'
p7021
S'bool'
p7022
sS'default'
p7023
S'1'
p7024
sS'name'
p7025
S'enable_ad_cache'
p7026
sS'required'
p7027
I00
sS'group_name'
p7028
S'Advanced'
p7029
sa(dp7030
S'description'
p7031
S'Enable automatic immediate optimization of derivatives\n'
p7032
sS'cpp_type'
p7033
S'bool'
p7034
sS'default'
p7035
S'1'
p7036
sS'name'
p7037
S'enable_auto_optimize'
p7038
sS'required'
p7039
I00
sS'group_name'
p7040
S'Advanced'
p7041
sa(dp7042
S'description'
p7043
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p7044
sS'cpp_type'
p7045
S'bool'
p7046
sS'default'
p7047
S'1'
p7048
sS'name'
p7049
S'enable_jit'
p7050
sS'required'
p7051
I00
sS'group_name'
p7052
S'Advanced'
p7053
sa(dp7054
S'name'
p7055
S'execute_on'
p7056
sS'cpp_type'
p7057
S'MultiMooseEnum'
p7058
sS'default'
p7059
S'LINEAR'
p7060
sS'description'
p7061
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7062
sS'required'
p7063
I00
sS'options'
p7064
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7065
sS'group_name'
p7066
Nsa(dp7067
S'description'
p7068
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p7069
sS'cpp_type'
p7070
S'bool'
p7071
sS'default'
p7072
S'0'
p7073
sS'name'
p7074
S'fail_on_evalerror'
p7075
sS'required'
p7076
I00
sS'group_name'
p7077
S'Advanced'
p7078
sa(dp7079
S'description'
p7080
S'function expression\n'
p7081
sS'cpp_type'
p7082
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7083
sS'default'
p7084
g3
sS'name'
p7085
S'function'
p7086
sS'required'
p7087
I01
sS'group_name'
p7088
Nsa(dp7089
S'description'
p7090
S'The seed for the master random number generator\n'
p7091
sS'cpp_type'
p7092
S'unsigned int'
p7093
sS'default'
p7094
S'0'
p7095
sS'name'
p7096
S'seed'
p7097
sS'required'
p7098
I00
sS'group_name'
p7099
S'Advanced'
p7100
sa(dp7101
S'description'
p7102
g3
sS'cpp_type'
p7103
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7104
sS'default'
p7105
S'ParsedAux'
p7106
sS'name'
p7107
S'type'
p7108
sS'required'
p7109
I00
sS'group_name'
p7110
Nsa(dp7111
S'description'
p7112
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7113
sS'cpp_type'
p7114
S'bool'
p7115
sS'default'
p7116
S'0'
p7117
sS'name'
p7118
S'use_displaced_mesh'
p7119
sS'required'
p7120
I00
sS'group_name'
p7121
S'Advanced'
p7122
sa(dp7123
S'description'
p7124
S'The name of the variable that this object applies to\n'
p7125
sS'cpp_type'
p7126
S'AuxVariableName'
p7127
sS'default'
p7128
g3
sS'name'
p7129
S'variable'
p7130
sS'required'
p7131
I01
sS'group_name'
p7132
NsasS'name'
p7133
S'/AuxKernels/ParsedAux'
p7134
sa(dp7135
S'description'
p7136
g3
sS'subblocks'
p7137
NsS'parameters'
p7138
(lp7139
(dp7140
S'description'
p7141
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7142
sS'cpp_type'
p7143
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7144
sS'default'
p7145
g3
sS'name'
p7146
S'block'
p7147
sS'required'
p7148
I00
sS'group_name'
p7149
Nsa(dp7150
S'description'
p7151
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7152
sS'cpp_type'
p7153
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7154
sS'default'
p7155
g3
sS'name'
p7156
S'boundary'
p7157
sS'required'
p7158
I00
sS'group_name'
p7159
Nsa(dp7160
S'description'
p7161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7162
sS'cpp_type'
p7163
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7164
sS'default'
p7165
g3
sS'name'
p7166
S'control_tags'
p7167
sS'required'
p7168
I00
sS'group_name'
p7169
S'Advanced'
p7170
sa(dp7171
S'description'
p7172
S'Set the enabled status of the MooseObject.\n'
p7173
sS'cpp_type'
p7174
S'bool'
p7175
sS'default'
p7176
S'1'
p7177
sS'name'
p7178
S'enable'
p7179
sS'required'
p7180
I00
sS'group_name'
p7181
S'Advanced'
p7182
sa(dp7183
S'name'
p7184
S'execute_on'
p7185
sS'cpp_type'
p7186
S'MultiMooseEnum'
p7187
sS'default'
p7188
S'LINEAR'
p7189
sS'description'
p7190
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7191
sS'required'
p7192
I00
sS'options'
p7193
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7194
sS'group_name'
p7195
Nsa(dp7196
S'description'
p7197
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p7198
sS'cpp_type'
p7199
S'double'
p7200
sS'default'
p7201
g3
sS'name'
p7202
S'normal_smoothing_distance'
p7203
sS'required'
p7204
I00
sS'group_name'
p7205
Nsa(dp7206
S'description'
p7207
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p7208
sS'cpp_type'
p7209
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7210
sS'default'
p7211
g3
sS'name'
p7212
S'normal_smoothing_method'
p7213
sS'required'
p7214
I00
sS'group_name'
p7215
Nsa(dp7216
S'name'
p7217
S'order'
p7218
sS'cpp_type'
p7219
S'MooseEnum'
p7220
sS'default'
p7221
S'FIRST'
p7222
sS'description'
p7223
S'The finite element order\n'
p7224
sS'required'
p7225
I00
sS'options'
p7226
S'FIRST SECOND THIRD FOURTH'
p7227
sS'group_name'
p7228
Nsa(dp7229
S'description'
p7230
S'The boundary to be penetrated\n'
p7231
sS'cpp_type'
p7232
S'BoundaryName'
p7233
sS'default'
p7234
g3
sS'name'
p7235
S'paired_boundary'
p7236
sS'required'
p7237
I01
sS'group_name'
p7238
Nsa(dp7239
S'name'
p7240
S'quantity'
p7241
sS'cpp_type'
p7242
S'MooseEnum'
p7243
sS'default'
p7244
S'distance'
p7245
sS'description'
p7246
S'The quantity to recover from the available penetration information\n'
p7247
sS'required'
p7248
I00
sS'options'
p7249
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p7250
sS'group_name'
p7251
Nsa(dp7252
S'description'
p7253
S'The seed for the master random number generator\n'
p7254
sS'cpp_type'
p7255
S'unsigned int'
p7256
sS'default'
p7257
S'0'
p7258
sS'name'
p7259
S'seed'
p7260
sS'required'
p7261
I00
sS'group_name'
p7262
S'Advanced'
p7263
sa(dp7264
S'description'
p7265
S'Tangential distance to extend edges of contact surfaces\n'
p7266
sS'cpp_type'
p7267
S'double'
p7268
sS'default'
p7269
g3
sS'name'
p7270
S'tangential_tolerance'
p7271
sS'required'
p7272
I00
sS'group_name'
p7273
Nsa(dp7274
S'description'
p7275
g3
sS'cpp_type'
p7276
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7277
sS'default'
p7278
S'PenetrationAux'
p7279
sS'name'
p7280
S'type'
p7281
sS'required'
p7282
I00
sS'group_name'
p7283
Nsa(dp7284
S'description'
p7285
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7286
sS'cpp_type'
p7287
S'bool'
p7288
sS'default'
p7289
S'1'
p7290
sS'name'
p7291
S'use_displaced_mesh'
p7292
sS'required'
p7293
I00
sS'group_name'
p7294
S'Advanced'
p7295
sa(dp7296
S'description'
p7297
S'The name of the variable that this object applies to\n'
p7298
sS'cpp_type'
p7299
S'AuxVariableName'
p7300
sS'default'
p7301
g3
sS'name'
p7302
S'variable'
p7303
sS'required'
p7304
I01
sS'group_name'
p7305
NsasS'name'
p7306
S'/AuxKernels/PenetrationAux'
p7307
sa(dp7308
S'description'
p7309
g3
sS'subblocks'
p7310
NsS'parameters'
p7311
(lp7312
(dp7313
S'description'
p7314
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7315
sS'cpp_type'
p7316
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7317
sS'default'
p7318
g3
sS'name'
p7319
S'block'
p7320
sS'required'
p7321
I00
sS'group_name'
p7322
Nsa(dp7323
S'description'
p7324
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7325
sS'cpp_type'
p7326
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7327
sS'default'
p7328
g3
sS'name'
p7329
S'boundary'
p7330
sS'required'
p7331
I00
sS'group_name'
p7332
Nsa(dp7333
S'description'
p7334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7335
sS'cpp_type'
p7336
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7337
sS'default'
p7338
g3
sS'name'
p7339
S'control_tags'
p7340
sS'required'
p7341
I00
sS'group_name'
p7342
S'Advanced'
p7343
sa(dp7344
S'description'
p7345
S'Set the enabled status of the MooseObject.\n'
p7346
sS'cpp_type'
p7347
S'bool'
p7348
sS'default'
p7349
S'1'
p7350
sS'name'
p7351
S'enable'
p7352
sS'required'
p7353
I00
sS'group_name'
p7354
S'Advanced'
p7355
sa(dp7356
S'name'
p7357
S'execute_on'
p7358
sS'cpp_type'
p7359
S'MultiMooseEnum'
p7360
sS'default'
p7361
S'LINEAR'
p7362
sS'description'
p7363
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7364
sS'required'
p7365
I00
sS'options'
p7366
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7367
sS'group_name'
p7368
Nsa(dp7369
S'description'
p7370
S'The seed for the master random number generator\n'
p7371
sS'cpp_type'
p7372
S'unsigned int'
p7373
sS'default'
p7374
S'0'
p7375
sS'name'
p7376
S'seed'
p7377
sS'required'
p7378
I00
sS'group_name'
p7379
S'Advanced'
p7380
sa(dp7381
S'description'
p7382
g3
sS'cpp_type'
p7383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7384
sS'default'
p7385
S'ProcessorIDAux'
p7386
sS'name'
p7387
S'type'
p7388
sS'required'
p7389
I00
sS'group_name'
p7390
Nsa(dp7391
S'description'
p7392
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7393
sS'cpp_type'
p7394
S'bool'
p7395
sS'default'
p7396
S'0'
p7397
sS'name'
p7398
S'use_displaced_mesh'
p7399
sS'required'
p7400
I00
sS'group_name'
p7401
S'Advanced'
p7402
sa(dp7403
S'description'
p7404
S'The name of the variable that this object applies to\n'
p7405
sS'cpp_type'
p7406
S'AuxVariableName'
p7407
sS'default'
p7408
g3
sS'name'
p7409
S'variable'
p7410
sS'required'
p7411
I01
sS'group_name'
p7412
NsasS'name'
p7413
S'/AuxKernels/ProcessorIDAux'
p7414
sa(dp7415
S'description'
p7416
g3
sS'subblocks'
p7417
NsS'parameters'
p7418
(lp7419
(dp7420
S'description'
p7421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7422
sS'cpp_type'
p7423
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7424
sS'default'
p7425
g3
sS'name'
p7426
S'block'
p7427
sS'required'
p7428
I00
sS'group_name'
p7429
Nsa(dp7430
S'description'
p7431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7432
sS'cpp_type'
p7433
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7434
sS'default'
p7435
g3
sS'name'
p7436
S'boundary'
p7437
sS'required'
p7438
I00
sS'group_name'
p7439
Nsa(dp7440
S'description'
p7441
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7442
sS'cpp_type'
p7443
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7444
sS'default'
p7445
g3
sS'name'
p7446
S'control_tags'
p7447
sS'required'
p7448
I00
sS'group_name'
p7449
S'Advanced'
p7450
sa(dp7451
S'description'
p7452
S'The downstairs of the quotient variable\n'
p7453
sS'cpp_type'
p7454
S'std::vector<VariableName>'
p7455
sS'default'
p7456
g3
sS'name'
p7457
S'denominator'
p7458
sS'required'
p7459
I00
sS'group_name'
p7460
Nsa(dp7461
S'description'
p7462
S'Set the enabled status of the MooseObject.\n'
p7463
sS'cpp_type'
p7464
S'bool'
p7465
sS'default'
p7466
S'1'
p7467
sS'name'
p7468
S'enable'
p7469
sS'required'
p7470
I00
sS'group_name'
p7471
S'Advanced'
p7472
sa(dp7473
S'name'
p7474
S'execute_on'
p7475
sS'cpp_type'
p7476
S'MultiMooseEnum'
p7477
sS'default'
p7478
S'LINEAR'
p7479
sS'description'
p7480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7481
sS'required'
p7482
I00
sS'options'
p7483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7484
sS'group_name'
p7485
Nsa(dp7486
S'description'
p7487
S'The upstairs of the quotient variable\n'
p7488
sS'cpp_type'
p7489
S'std::vector<VariableName>'
p7490
sS'default'
p7491
g3
sS'name'
p7492
S'numerator'
p7493
sS'required'
p7494
I00
sS'group_name'
p7495
Nsa(dp7496
S'description'
p7497
S'The seed for the master random number generator\n'
p7498
sS'cpp_type'
p7499
S'unsigned int'
p7500
sS'default'
p7501
S'0'
p7502
sS'name'
p7503
S'seed'
p7504
sS'required'
p7505
I00
sS'group_name'
p7506
S'Advanced'
p7507
sa(dp7508
S'description'
p7509
g3
sS'cpp_type'
p7510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7511
sS'default'
p7512
S'QuotientAux'
p7513
sS'name'
p7514
S'type'
p7515
sS'required'
p7516
I00
sS'group_name'
p7517
Nsa(dp7518
S'description'
p7519
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7520
sS'cpp_type'
p7521
S'bool'
p7522
sS'default'
p7523
S'0'
p7524
sS'name'
p7525
S'use_displaced_mesh'
p7526
sS'required'
p7527
I00
sS'group_name'
p7528
S'Advanced'
p7529
sa(dp7530
S'description'
p7531
S'The name of the variable that this object applies to\n'
p7532
sS'cpp_type'
p7533
S'AuxVariableName'
p7534
sS'default'
p7535
g3
sS'name'
p7536
S'variable'
p7537
sS'required'
p7538
I01
sS'group_name'
p7539
NsasS'name'
p7540
S'/AuxKernels/QuotientAux'
p7541
sa(dp7542
S'description'
p7543
S'Compute the radial component of the displacement vector for cylindrical models.\n'
p7544
sS'subblocks'
p7545
NsS'parameters'
p7546
(lp7547
(dp7548
S'description'
p7549
S'Vector defining direction of cylindrical axis (3D Cartesian models)\n'
p7550
sS'cpp_type'
p7551
S'libMesh::VectorValue<double>'
p7552
sS'default'
p7553
g3
sS'name'
p7554
S'axis_vector'
p7555
sS'required'
p7556
I00
sS'group_name'
p7557
Nsa(dp7558
S'description'
p7559
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7560
sS'cpp_type'
p7561
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7562
sS'default'
p7563
g3
sS'name'
p7564
S'block'
p7565
sS'required'
p7566
I00
sS'group_name'
p7567
Nsa(dp7568
S'description'
p7569
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7570
sS'cpp_type'
p7571
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7572
sS'default'
p7573
g3
sS'name'
p7574
S'boundary'
p7575
sS'required'
p7576
I00
sS'group_name'
p7577
Nsa(dp7578
S'description'
p7579
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7580
sS'cpp_type'
p7581
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7582
sS'default'
p7583
g3
sS'name'
p7584
S'control_tags'
p7585
sS'required'
p7586
I00
sS'group_name'
p7587
S'Advanced'
p7588
sa(dp7589
S'description'
p7590
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p7591
sS'cpp_type'
p7592
S'std::vector<VariableName>'
p7593
sS'default'
p7594
g3
sS'name'
p7595
S'displacements'
p7596
sS'required'
p7597
I01
sS'group_name'
p7598
Nsa(dp7599
S'description'
p7600
S'Set the enabled status of the MooseObject.\n'
p7601
sS'cpp_type'
p7602
S'bool'
p7603
sS'default'
p7604
S'1'
p7605
sS'name'
p7606
S'enable'
p7607
sS'required'
p7608
I00
sS'group_name'
p7609
S'Advanced'
p7610
sa(dp7611
S'name'
p7612
S'execute_on'
p7613
sS'cpp_type'
p7614
S'MultiMooseEnum'
p7615
sS'default'
p7616
S'LINEAR'
p7617
sS'description'
p7618
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7619
sS'required'
p7620
I00
sS'options'
p7621
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7622
sS'group_name'
p7623
Nsa(dp7624
S'description'
p7625
S'Origin of cylinder axis of rotation for 2D and 3D Cartesian models\n'
p7626
sS'cpp_type'
p7627
S'libMesh::VectorValue<double>'
p7628
sS'default'
p7629
g3
sS'name'
p7630
S'origin'
p7631
sS'required'
p7632
I00
sS'group_name'
p7633
Nsa(dp7634
S'description'
p7635
S'The seed for the master random number generator\n'
p7636
sS'cpp_type'
p7637
S'unsigned int'
p7638
sS'default'
p7639
S'0'
p7640
sS'name'
p7641
S'seed'
p7642
sS'required'
p7643
I00
sS'group_name'
p7644
S'Advanced'
p7645
sa(dp7646
S'description'
p7647
g3
sS'cpp_type'
p7648
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7649
sS'default'
p7650
S'RadialDisplacementCylinderAux'
p7651
sS'name'
p7652
S'type'
p7653
sS'required'
p7654
I00
sS'group_name'
p7655
Nsa(dp7656
S'description'
p7657
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7658
sS'cpp_type'
p7659
S'bool'
p7660
sS'default'
p7661
S'0'
p7662
sS'name'
p7663
S'use_displaced_mesh'
p7664
sS'required'
p7665
I00
sS'group_name'
p7666
S'Advanced'
p7667
sa(dp7668
S'description'
p7669
S'The name of the variable that this object applies to\n'
p7670
sS'cpp_type'
p7671
S'AuxVariableName'
p7672
sS'default'
p7673
g3
sS'name'
p7674
S'variable'
p7675
sS'required'
p7676
I01
sS'group_name'
p7677
NsasS'name'
p7678
S'/AuxKernels/RadialDisplacementCylinderAux'
p7679
sa(dp7680
S'description'
p7681
S'Compute the radial component of the displacement vector for spherical models.\n'
p7682
sS'subblocks'
p7683
NsS'parameters'
p7684
(lp7685
(dp7686
S'description'
p7687
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7688
sS'cpp_type'
p7689
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7690
sS'default'
p7691
g3
sS'name'
p7692
S'block'
p7693
sS'required'
p7694
I00
sS'group_name'
p7695
Nsa(dp7696
S'description'
p7697
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7698
sS'cpp_type'
p7699
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7700
sS'default'
p7701
g3
sS'name'
p7702
S'boundary'
p7703
sS'required'
p7704
I00
sS'group_name'
p7705
Nsa(dp7706
S'description'
p7707
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7708
sS'cpp_type'
p7709
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7710
sS'default'
p7711
g3
sS'name'
p7712
S'control_tags'
p7713
sS'required'
p7714
I00
sS'group_name'
p7715
S'Advanced'
p7716
sa(dp7717
S'description'
p7718
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p7719
sS'cpp_type'
p7720
S'std::vector<VariableName>'
p7721
sS'default'
p7722
g3
sS'name'
p7723
S'displacements'
p7724
sS'required'
p7725
I01
sS'group_name'
p7726
Nsa(dp7727
S'description'
p7728
S'Set the enabled status of the MooseObject.\n'
p7729
sS'cpp_type'
p7730
S'bool'
p7731
sS'default'
p7732
S'1'
p7733
sS'name'
p7734
S'enable'
p7735
sS'required'
p7736
I00
sS'group_name'
p7737
S'Advanced'
p7738
sa(dp7739
S'name'
p7740
S'execute_on'
p7741
sS'cpp_type'
p7742
S'MultiMooseEnum'
p7743
sS'default'
p7744
S'LINEAR'
p7745
sS'description'
p7746
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7747
sS'required'
p7748
I00
sS'options'
p7749
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7750
sS'group_name'
p7751
Nsa(dp7752
S'description'
p7753
S'Sphere origin for 3D Cartesian and 2D axisymmetric models\n'
p7754
sS'cpp_type'
p7755
S'libMesh::VectorValue<double>'
p7756
sS'default'
p7757
g3
sS'name'
p7758
S'origin'
p7759
sS'required'
p7760
I00
sS'group_name'
p7761
Nsa(dp7762
S'description'
p7763
S'The seed for the master random number generator\n'
p7764
sS'cpp_type'
p7765
S'unsigned int'
p7766
sS'default'
p7767
S'0'
p7768
sS'name'
p7769
S'seed'
p7770
sS'required'
p7771
I00
sS'group_name'
p7772
S'Advanced'
p7773
sa(dp7774
S'description'
p7775
g3
sS'cpp_type'
p7776
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7777
sS'default'
p7778
S'RadialDisplacementSphereAux'
p7779
sS'name'
p7780
S'type'
p7781
sS'required'
p7782
I00
sS'group_name'
p7783
Nsa(dp7784
S'description'
p7785
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7786
sS'cpp_type'
p7787
S'bool'
p7788
sS'default'
p7789
S'0'
p7790
sS'name'
p7791
S'use_displaced_mesh'
p7792
sS'required'
p7793
I00
sS'group_name'
p7794
S'Advanced'
p7795
sa(dp7796
S'description'
p7797
S'The name of the variable that this object applies to\n'
p7798
sS'cpp_type'
p7799
S'AuxVariableName'
p7800
sS'default'
p7801
g3
sS'name'
p7802
S'variable'
p7803
sS'required'
p7804
I01
sS'group_name'
p7805
NsasS'name'
p7806
S'/AuxKernels/RadialDisplacementSphereAux'
p7807
sa(dp7808
S'description'
p7809
S'Access a component of a RankFourTensor\n'
p7810
sS'subblocks'
p7811
NsS'parameters'
p7812
(lp7813
(dp7814
S'description'
p7815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7816
sS'cpp_type'
p7817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7818
sS'default'
p7819
g3
sS'name'
p7820
S'block'
p7821
sS'required'
p7822
I00
sS'group_name'
p7823
Nsa(dp7824
S'description'
p7825
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7826
sS'cpp_type'
p7827
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7828
sS'default'
p7829
g3
sS'name'
p7830
S'boundary'
p7831
sS'required'
p7832
I00
sS'group_name'
p7833
Nsa(dp7834
S'description'
p7835
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7836
sS'cpp_type'
p7837
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7838
sS'default'
p7839
g3
sS'name'
p7840
S'control_tags'
p7841
sS'required'
p7842
I00
sS'group_name'
p7843
S'Advanced'
p7844
sa(dp7845
S'description'
p7846
S'Set the enabled status of the MooseObject.\n'
p7847
sS'cpp_type'
p7848
S'bool'
p7849
sS'default'
p7850
S'1'
p7851
sS'name'
p7852
S'enable'
p7853
sS'required'
p7854
I00
sS'group_name'
p7855
S'Advanced'
p7856
sa(dp7857
S'name'
p7858
S'execute_on'
p7859
sS'cpp_type'
p7860
S'MultiMooseEnum'
p7861
sS'default'
p7862
S'LINEAR'
p7863
sS'description'
p7864
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7865
sS'required'
p7866
I00
sS'options'
p7867
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7868
sS'group_name'
p7869
Nsa(dp7870
S'description'
p7871
S'The index i of ijkl for the tensor to output (0, 1, 2)\n'
p7872
sS'cpp_type'
p7873
S'unsigned int'
p7874
sS'default'
p7875
g3
sS'name'
p7876
S'index_i'
p7877
sS'required'
p7878
I01
sS'group_name'
p7879
Nsa(dp7880
S'description'
p7881
S'The index j of ijkl for the tensor to output (0, 1, 2)\n'
p7882
sS'cpp_type'
p7883
S'unsigned int'
p7884
sS'default'
p7885
g3
sS'name'
p7886
S'index_j'
p7887
sS'required'
p7888
I01
sS'group_name'
p7889
Nsa(dp7890
S'description'
p7891
S'The index k of ijkl for the tensor to output (0, 1, 2)\n'
p7892
sS'cpp_type'
p7893
S'unsigned int'
p7894
sS'default'
p7895
g3
sS'name'
p7896
S'index_k'
p7897
sS'required'
p7898
I01
sS'group_name'
p7899
Nsa(dp7900
S'description'
p7901
S'The index l of ijkl for the tensor to output (0, 1, 2)\n'
p7902
sS'cpp_type'
p7903
S'unsigned int'
p7904
sS'default'
p7905
g3
sS'name'
p7906
S'index_l'
p7907
sS'required'
p7908
I01
sS'group_name'
p7909
Nsa(dp7910
S'description'
p7911
S'The rank four material tensor name\n'
p7912
sS'cpp_type'
p7913
S'MaterialPropertyName'
p7914
sS'default'
p7915
g3
sS'name'
p7916
S'rank_four_tensor'
p7917
sS'required'
p7918
I01
sS'group_name'
p7919
Nsa(dp7920
S'description'
p7921
S'The seed for the master random number generator\n'
p7922
sS'cpp_type'
p7923
S'unsigned int'
p7924
sS'default'
p7925
S'0'
p7926
sS'name'
p7927
S'seed'
p7928
sS'required'
p7929
I00
sS'group_name'
p7930
S'Advanced'
p7931
sa(dp7932
S'description'
p7933
g3
sS'cpp_type'
p7934
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7935
sS'default'
p7936
S'RankFourAux'
p7937
sS'name'
p7938
S'type'
p7939
sS'required'
p7940
I00
sS'group_name'
p7941
Nsa(dp7942
S'description'
p7943
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7944
sS'cpp_type'
p7945
S'bool'
p7946
sS'default'
p7947
S'0'
p7948
sS'name'
p7949
S'use_displaced_mesh'
p7950
sS'required'
p7951
I00
sS'group_name'
p7952
S'Advanced'
p7953
sa(dp7954
S'description'
p7955
S'The name of the variable that this object applies to\n'
p7956
sS'cpp_type'
p7957
S'AuxVariableName'
p7958
sS'default'
p7959
g3
sS'name'
p7960
S'variable'
p7961
sS'required'
p7962
I01
sS'group_name'
p7963
NsasS'name'
p7964
S'/AuxKernels/RankFourAux'
p7965
sa(dp7966
S'description'
p7967
S'Access a component of a RankTwoTensor\n'
p7968
sS'subblocks'
p7969
NsS'parameters'
p7970
(lp7971
(dp7972
S'description'
p7973
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7974
sS'cpp_type'
p7975
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7976
sS'default'
p7977
g3
sS'name'
p7978
S'block'
p7979
sS'required'
p7980
I00
sS'group_name'
p7981
Nsa(dp7982
S'description'
p7983
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7984
sS'cpp_type'
p7985
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7986
sS'default'
p7987
g3
sS'name'
p7988
S'boundary'
p7989
sS'required'
p7990
I00
sS'group_name'
p7991
Nsa(dp7992
S'description'
p7993
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7994
sS'cpp_type'
p7995
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7996
sS'default'
p7997
g3
sS'name'
p7998
S'control_tags'
p7999
sS'required'
p8000
I00
sS'group_name'
p8001
S'Advanced'
p8002
sa(dp8003
S'description'
p8004
S'Set the enabled status of the MooseObject.\n'
p8005
sS'cpp_type'
p8006
S'bool'
p8007
sS'default'
p8008
S'1'
p8009
sS'name'
p8010
S'enable'
p8011
sS'required'
p8012
I00
sS'group_name'
p8013
S'Advanced'
p8014
sa(dp8015
S'name'
p8016
S'execute_on'
p8017
sS'cpp_type'
p8018
S'MultiMooseEnum'
p8019
sS'default'
p8020
S'LINEAR'
p8021
sS'description'
p8022
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8023
sS'required'
p8024
I00
sS'options'
p8025
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8026
sS'group_name'
p8027
Nsa(dp8028
S'description'
p8029
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p8030
sS'cpp_type'
p8031
S'unsigned int'
p8032
sS'default'
p8033
g3
sS'name'
p8034
S'index_i'
p8035
sS'required'
p8036
I01
sS'group_name'
p8037
Nsa(dp8038
S'description'
p8039
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p8040
sS'cpp_type'
p8041
S'unsigned int'
p8042
sS'default'
p8043
g3
sS'name'
p8044
S'index_j'
p8045
sS'required'
p8046
I01
sS'group_name'
p8047
Nsa(dp8048
S'description'
p8049
S'The rank two material tensor name\n'
p8050
sS'cpp_type'
p8051
S'MaterialPropertyName'
p8052
sS'default'
p8053
g3
sS'name'
p8054
S'rank_two_tensor'
p8055
sS'required'
p8056
I01
sS'group_name'
p8057
Nsa(dp8058
S'description'
p8059
S'The seed for the master random number generator\n'
p8060
sS'cpp_type'
p8061
S'unsigned int'
p8062
sS'default'
p8063
S'0'
p8064
sS'name'
p8065
S'seed'
p8066
sS'required'
p8067
I00
sS'group_name'
p8068
S'Advanced'
p8069
sa(dp8070
S'description'
p8071
S'Evaluate the tensor at this specific quadpoint\n'
p8072
sS'cpp_type'
p8073
S'unsigned int'
p8074
sS'default'
p8075
g3
sS'name'
p8076
S'selected_qp'
p8077
sS'required'
p8078
I00
sS'group_name'
p8079
S'Advanced'
p8080
sa(dp8081
S'description'
p8082
g3
sS'cpp_type'
p8083
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8084
sS'default'
p8085
S'RankTwoAux'
p8086
sS'name'
p8087
S'type'
p8088
sS'required'
p8089
I00
sS'group_name'
p8090
Nsa(dp8091
S'description'
p8092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8093
sS'cpp_type'
p8094
S'bool'
p8095
sS'default'
p8096
S'0'
p8097
sS'name'
p8098
S'use_displaced_mesh'
p8099
sS'required'
p8100
I00
sS'group_name'
p8101
S'Advanced'
p8102
sa(dp8103
S'description'
p8104
S'The name of the variable that this object applies to\n'
p8105
sS'cpp_type'
p8106
S'AuxVariableName'
p8107
sS'default'
p8108
g3
sS'name'
p8109
S'variable'
p8110
sS'required'
p8111
I01
sS'group_name'
p8112
NsasS'name'
p8113
S'/AuxKernels/RankTwoAux'
p8114
sa(dp8115
S'description'
p8116
S'Compute a scalar property of a RankTwoTensor\n'
p8117
sS'subblocks'
p8118
NsS'parameters'
p8119
(lp8120
(dp8121
S'description'
p8122
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8123
sS'cpp_type'
p8124
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8125
sS'default'
p8126
g3
sS'name'
p8127
S'block'
p8128
sS'required'
p8129
I00
sS'group_name'
p8130
Nsa(dp8131
S'description'
p8132
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8133
sS'cpp_type'
p8134
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8135
sS'default'
p8136
g3
sS'name'
p8137
S'boundary'
p8138
sS'required'
p8139
I00
sS'group_name'
p8140
Nsa(dp8141
S'description'
p8142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8143
sS'cpp_type'
p8144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8145
sS'default'
p8146
g3
sS'name'
p8147
S'control_tags'
p8148
sS'required'
p8149
I00
sS'group_name'
p8150
S'Advanced'
p8151
sa(dp8152
S'description'
p8153
S'Direction vector\n'
p8154
sS'cpp_type'
p8155
S'libMesh::Point'
p8156
sS'default'
p8157
S'0 0 1'
p8158
sS'name'
p8159
S'direction'
p8160
sS'required'
p8161
I00
sS'group_name'
p8162
Nsa(dp8163
S'description'
p8164
S'Set the enabled status of the MooseObject.\n'
p8165
sS'cpp_type'
p8166
S'bool'
p8167
sS'default'
p8168
S'1'
p8169
sS'name'
p8170
S'enable'
p8171
sS'required'
p8172
I00
sS'group_name'
p8173
S'Advanced'
p8174
sa(dp8175
S'name'
p8176
S'execute_on'
p8177
sS'cpp_type'
p8178
S'MultiMooseEnum'
p8179
sS'default'
p8180
S'LINEAR'
p8181
sS'description'
p8182
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8183
sS'required'
p8184
I00
sS'options'
p8185
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8186
sS'group_name'
p8187
Nsa(dp8188
S'description'
p8189
S'Start point for axis used to calculate some cylinderical material tensor quantities\n'
p8190
sS'cpp_type'
p8191
S'libMesh::Point'
p8192
sS'default'
p8193
S'0 0 0'
p8194
sS'name'
p8195
S'point1'
p8196
sS'required'
p8197
I00
sS'group_name'
p8198
Nsa(dp8199
S'description'
p8200
S'End point for axis used to calculate some material tensor quantities\n'
p8201
sS'cpp_type'
p8202
S'libMesh::Point'
p8203
sS'default'
p8204
S'0 1 0'
p8205
sS'name'
p8206
S'point2'
p8207
sS'required'
p8208
I00
sS'group_name'
p8209
Nsa(dp8210
S'description'
p8211
S'The rank two material tensor name\n'
p8212
sS'cpp_type'
p8213
S'MaterialPropertyName'
p8214
sS'default'
p8215
g3
sS'name'
p8216
S'rank_two_tensor'
p8217
sS'required'
p8218
I01
sS'group_name'
p8219
Nsa(dp8220
S'name'
p8221
S'scalar_type'
p8222
sS'cpp_type'
p8223
S'MooseEnum'
p8224
sS'default'
p8225
g3
sS'description'
p8226
S'Type of scalar output\n'
p8227
sS'required'
p8228
I00
sS'options'
p8229
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction'
p8230
sS'group_name'
p8231
Nsa(dp8232
S'description'
p8233
S'The seed for the master random number generator\n'
p8234
sS'cpp_type'
p8235
S'unsigned int'
p8236
sS'default'
p8237
S'0'
p8238
sS'name'
p8239
S'seed'
p8240
sS'required'
p8241
I00
sS'group_name'
p8242
S'Advanced'
p8243
sa(dp8244
S'description'
p8245
S'Evaluate the tensor at this quadpoint.  This option only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p8246
sS'cpp_type'
p8247
S'unsigned int'
p8248
sS'default'
p8249
g3
sS'name'
p8250
S'selected_qp'
p8251
sS'required'
p8252
I00
sS'group_name'
p8253
S'Advanced'
p8254
sa(dp8255
S'description'
p8256
g3
sS'cpp_type'
p8257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8258
sS'default'
p8259
S'RankTwoScalarAux'
p8260
sS'name'
p8261
S'type'
p8262
sS'required'
p8263
I00
sS'group_name'
p8264
Nsa(dp8265
S'description'
p8266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8267
sS'cpp_type'
p8268
S'bool'
p8269
sS'default'
p8270
S'0'
p8271
sS'name'
p8272
S'use_displaced_mesh'
p8273
sS'required'
p8274
I00
sS'group_name'
p8275
S'Advanced'
p8276
sa(dp8277
S'description'
p8278
S'The name of the variable that this object applies to\n'
p8279
sS'cpp_type'
p8280
S'AuxVariableName'
p8281
sS'default'
p8282
g3
sS'name'
p8283
S'variable'
p8284
sS'required'
p8285
I01
sS'group_name'
p8286
NsasS'name'
p8287
S'/AuxKernels/RankTwoScalarAux'
p8288
sa(dp8289
S'description'
p8290
g3
sS'subblocks'
p8291
NsS'parameters'
p8292
(lp8293
(dp8294
S'description'
p8295
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8296
sS'cpp_type'
p8297
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8298
sS'default'
p8299
g3
sS'name'
p8300
S'block'
p8301
sS'required'
p8302
I00
sS'group_name'
p8303
Nsa(dp8304
S'description'
p8305
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8306
sS'cpp_type'
p8307
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8308
sS'default'
p8309
g3
sS'name'
p8310
S'boundary'
p8311
sS'required'
p8312
I00
sS'group_name'
p8313
Nsa(dp8314
S'description'
p8315
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8316
sS'cpp_type'
p8317
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8318
sS'default'
p8319
g3
sS'name'
p8320
S'control_tags'
p8321
sS'required'
p8322
I00
sS'group_name'
p8323
S'Advanced'
p8324
sa(dp8325
S'description'
p8326
S'Set the enabled status of the MooseObject.\n'
p8327
sS'cpp_type'
p8328
S'bool'
p8329
sS'default'
p8330
S'1'
p8331
sS'name'
p8332
S'enable'
p8333
sS'required'
p8334
I00
sS'group_name'
p8335
S'Advanced'
p8336
sa(dp8337
S'name'
p8338
S'execute_on'
p8339
sS'cpp_type'
p8340
S'MultiMooseEnum'
p8341
sS'default'
p8342
S'LINEAR'
p8343
sS'description'
p8344
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8345
sS'required'
p8346
I00
sS'options'
p8347
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8348
sS'group_name'
p8349
Nsa(dp8350
S'description'
p8351
S'The seed for the master random number generator\n'
p8352
sS'cpp_type'
p8353
S'unsigned int'
p8354
sS'default'
p8355
S'0'
p8356
sS'name'
p8357
S'seed'
p8358
sS'required'
p8359
I00
sS'group_name'
p8360
S'Advanced'
p8361
sa(dp8362
S'description'
p8363
g3
sS'cpp_type'
p8364
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8365
sS'default'
p8366
S'SelfAux'
p8367
sS'name'
p8368
S'type'
p8369
sS'required'
p8370
I00
sS'group_name'
p8371
Nsa(dp8372
S'description'
p8373
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8374
sS'cpp_type'
p8375
S'bool'
p8376
sS'default'
p8377
S'0'
p8378
sS'name'
p8379
S'use_displaced_mesh'
p8380
sS'required'
p8381
I00
sS'group_name'
p8382
S'Advanced'
p8383
sa(dp8384
S'description'
p8385
S'The name of the variable that this object applies to\n'
p8386
sS'cpp_type'
p8387
S'AuxVariableName'
p8388
sS'default'
p8389
g3
sS'name'
p8390
S'variable'
p8391
sS'required'
p8392
I01
sS'group_name'
p8393
NsasS'name'
p8394
S'/AuxKernels/SelfAux'
p8395
sa(dp8396
S'description'
p8397
g3
sS'subblocks'
p8398
NsS'parameters'
p8399
(lp8400
(dp8401
S'description'
p8402
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p8403
sS'cpp_type'
p8404
S'double'
p8405
sS'default'
p8406
S'0'
p8407
sS'name'
p8408
S'add_factor'
p8409
sS'required'
p8410
I00
sS'group_name'
p8411
Nsa(dp8412
S'description'
p8413
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8414
sS'cpp_type'
p8415
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8416
sS'default'
p8417
g3
sS'name'
p8418
S'block'
p8419
sS'required'
p8420
I00
sS'group_name'
p8421
Nsa(dp8422
S'description'
p8423
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8424
sS'cpp_type'
p8425
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8426
sS'default'
p8427
g3
sS'name'
p8428
S'boundary'
p8429
sS'required'
p8430
I00
sS'group_name'
p8431
Nsa(dp8432
S'description'
p8433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8434
sS'cpp_type'
p8435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8436
sS'default'
p8437
g3
sS'name'
p8438
S'control_tags'
p8439
sS'required'
p8440
I00
sS'group_name'
p8441
S'Advanced'
p8442
sa(dp8443
S'description'
p8444
S'If true the meshes must be the same and then the values are simply copied over.\n'
p8445
sS'cpp_type'
p8446
S'bool'
p8447
sS'default'
p8448
S'0'
p8449
sS'name'
p8450
S'direct'
p8451
sS'required'
p8452
I00
sS'group_name'
p8453
Nsa(dp8454
S'description'
p8455
S'Set the enabled status of the MooseObject.\n'
p8456
sS'cpp_type'
p8457
S'bool'
p8458
sS'default'
p8459
S'1'
p8460
sS'name'
p8461
S'enable'
p8462
sS'required'
p8463
I00
sS'group_name'
p8464
S'Advanced'
p8465
sa(dp8466
S'name'
p8467
S'execute_on'
p8468
sS'cpp_type'
p8469
S'MultiMooseEnum'
p8470
sS'default'
p8471
S'LINEAR'
p8472
sS'description'
p8473
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8474
sS'required'
p8475
I00
sS'options'
p8476
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8477
sS'group_name'
p8478
Nsa(dp8479
S'description'
p8480
S'The name of the variable to extract from the file\n'
p8481
sS'cpp_type'
p8482
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8483
sS'default'
p8484
g3
sS'name'
p8485
S'from_variable'
p8486
sS'required'
p8487
I00
sS'group_name'
p8488
Nsa(dp8489
S'description'
p8490
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p8491
sS'cpp_type'
p8492
S'double'
p8493
sS'default'
p8494
S'1'
p8495
sS'name'
p8496
S'scale_factor'
p8497
sS'required'
p8498
I00
sS'group_name'
p8499
Nsa(dp8500
S'description'
p8501
S'The seed for the master random number generator\n'
p8502
sS'cpp_type'
p8503
S'unsigned int'
p8504
sS'default'
p8505
S'0'
p8506
sS'name'
p8507
S'seed'
p8508
sS'required'
p8509
I00
sS'group_name'
p8510
S'Advanced'
p8511
sa(dp8512
S'description'
p8513
S'The name of the SolutionUserObject\n'
p8514
sS'cpp_type'
p8515
S'UserObjectName'
p8516
sS'default'
p8517
g3
sS'name'
p8518
S'solution'
p8519
sS'required'
p8520
I01
sS'group_name'
p8521
Nsa(dp8522
S'description'
p8523
g3
sS'cpp_type'
p8524
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8525
sS'default'
p8526
S'SolutionAux'
p8527
sS'name'
p8528
S'type'
p8529
sS'required'
p8530
I00
sS'group_name'
p8531
Nsa(dp8532
S'description'
p8533
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8534
sS'cpp_type'
p8535
S'bool'
p8536
sS'default'
p8537
S'0'
p8538
sS'name'
p8539
S'use_displaced_mesh'
p8540
sS'required'
p8541
I00
sS'group_name'
p8542
S'Advanced'
p8543
sa(dp8544
S'description'
p8545
S'The name of the variable that this object applies to\n'
p8546
sS'cpp_type'
p8547
S'AuxVariableName'
p8548
sS'default'
p8549
g3
sS'name'
p8550
S'variable'
p8551
sS'required'
p8552
I01
sS'group_name'
p8553
NsasS'name'
p8554
S'/AuxKernels/SolutionAux'
p8555
sa(dp8556
S'description'
p8557
g3
sS'subblocks'
p8558
NsS'parameters'
p8559
(lp8560
(dp8561
S'description'
p8562
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8563
sS'cpp_type'
p8564
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8565
sS'default'
p8566
g3
sS'name'
p8567
S'block'
p8568
sS'required'
p8569
I00
sS'group_name'
p8570
Nsa(dp8571
S'description'
p8572
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8573
sS'cpp_type'
p8574
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8575
sS'default'
p8576
g3
sS'name'
p8577
S'boundary'
p8578
sS'required'
p8579
I00
sS'group_name'
p8580
Nsa(dp8581
S'description'
p8582
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8583
sS'cpp_type'
p8584
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8585
sS'default'
p8586
g3
sS'name'
p8587
S'control_tags'
p8588
sS'required'
p8589
I00
sS'group_name'
p8590
S'Advanced'
p8591
sa(dp8592
S'description'
p8593
S'Set the enabled status of the MooseObject.\n'
p8594
sS'cpp_type'
p8595
S'bool'
p8596
sS'default'
p8597
S'1'
p8598
sS'name'
p8599
S'enable'
p8600
sS'required'
p8601
I00
sS'group_name'
p8602
S'Advanced'
p8603
sa(dp8604
S'name'
p8605
S'execute_on'
p8606
sS'cpp_type'
p8607
S'MultiMooseEnum'
p8608
sS'default'
p8609
S'LINEAR'
p8610
sS'description'
p8611
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8612
sS'required'
p8613
I00
sS'options'
p8614
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8615
sS'group_name'
p8616
Nsa(dp8617
S'description'
p8618
S'The seed for the master random number generator\n'
p8619
sS'cpp_type'
p8620
S'unsigned int'
p8621
sS'default'
p8622
S'0'
p8623
sS'name'
p8624
S'seed'
p8625
sS'required'
p8626
I00
sS'group_name'
p8627
S'Advanced'
p8628
sa(dp8629
S'description'
p8630
g3
sS'cpp_type'
p8631
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8632
sS'default'
p8633
S'SpatialUserObjectAux'
p8634
sS'name'
p8635
S'type'
p8636
sS'required'
p8637
I00
sS'group_name'
p8638
Nsa(dp8639
S'description'
p8640
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8641
sS'cpp_type'
p8642
S'bool'
p8643
sS'default'
p8644
S'0'
p8645
sS'name'
p8646
S'use_displaced_mesh'
p8647
sS'required'
p8648
I00
sS'group_name'
p8649
S'Advanced'
p8650
sa(dp8651
S'description'
p8652
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p8653
sS'cpp_type'
p8654
S'UserObjectName'
p8655
sS'default'
p8656
g3
sS'name'
p8657
S'user_object'
p8658
sS'required'
p8659
I01
sS'group_name'
p8660
Nsa(dp8661
S'description'
p8662
S'The name of the variable that this object applies to\n'
p8663
sS'cpp_type'
p8664
S'AuxVariableName'
p8665
sS'default'
p8666
g3
sS'name'
p8667
S'variable'
p8668
sS'required'
p8669
I01
sS'group_name'
p8670
NsasS'name'
p8671
S'/AuxKernels/SpatialUserObjectAux'
p8672
sa(dp8673
S'description'
p8674
S'Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n'
p8675
sS'subblocks'
p8676
NsS'parameters'
p8677
(lp8678
(dp8679
S'description'
p8680
S'Coupled variable holding additional free energy contributions to be summed up\n'
p8681
sS'cpp_type'
p8682
S'std::vector<VariableName>'
p8683
sS'default'
p8684
S'0'
p8685
sS'name'
p8686
S'additional_free_energy'
p8687
sS'required'
p8688
I00
sS'group_name'
p8689
Nsa(dp8690
S'description'
p8691
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8692
sS'cpp_type'
p8693
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8694
sS'default'
p8695
g3
sS'name'
p8696
S'block'
p8697
sS'required'
p8698
I00
sS'group_name'
p8699
Nsa(dp8700
S'description'
p8701
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8702
sS'cpp_type'
p8703
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8704
sS'default'
p8705
g3
sS'name'
p8706
S'boundary'
p8707
sS'required'
p8708
I00
sS'group_name'
p8709
Nsa(dp8710
S'description'
p8711
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8712
sS'cpp_type'
p8713
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8714
sS'default'
p8715
g3
sS'name'
p8716
S'control_tags'
p8717
sS'required'
p8718
I00
sS'group_name'
p8719
S'Advanced'
p8720
sa(dp8721
S'description'
p8722
S'Set the enabled status of the MooseObject.\n'
p8723
sS'cpp_type'
p8724
S'bool'
p8725
sS'default'
p8726
S'1'
p8727
sS'name'
p8728
S'enable'
p8729
sS'required'
p8730
I00
sS'group_name'
p8731
S'Advanced'
p8732
sa(dp8733
S'name'
p8734
S'execute_on'
p8735
sS'cpp_type'
p8736
S'MultiMooseEnum'
p8737
sS'default'
p8738
S'LINEAR'
p8739
sS'description'
p8740
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8741
sS'required'
p8742
I00
sS'options'
p8743
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8744
sS'group_name'
p8745
Nsa(dp8746
S'description'
p8747
S'Base name of the free energy function\n'
p8748
sS'cpp_type'
p8749
S'MaterialPropertyName'
p8750
sS'default'
p8751
S'F'
p8752
sS'name'
p8753
S'f_name'
p8754
sS'required'
p8755
I00
sS'group_name'
p8756
Nsa(dp8757
S'description'
p8758
S'Variable names that contribute to interfacial energy\n'
p8759
sS'cpp_type'
p8760
S'std::vector<VariableName>'
p8761
sS'default'
p8762
g3
sS'name'
p8763
S'interfacial_vars'
p8764
sS'required'
p8765
I00
sS'group_name'
p8766
Nsa(dp8767
S'description'
p8768
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p8769
sS'cpp_type'
p8770
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p8771
sS'default'
p8772
g3
sS'name'
p8773
S'kappa_names'
p8774
sS'required'
p8775
I00
sS'group_name'
p8776
Nsa(dp8777
S'description'
p8778
S'The seed for the master random number generator\n'
p8779
sS'cpp_type'
p8780
S'unsigned int'
p8781
sS'default'
p8782
S'0'
p8783
sS'name'
p8784
S'seed'
p8785
sS'required'
p8786
I00
sS'group_name'
p8787
S'Advanced'
p8788
sa(dp8789
S'description'
p8790
g3
sS'cpp_type'
p8791
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8792
sS'default'
p8793
S'TotalFreeEnergy'
p8794
sS'name'
p8795
S'type'
p8796
sS'required'
p8797
I00
sS'group_name'
p8798
Nsa(dp8799
S'description'
p8800
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8801
sS'cpp_type'
p8802
S'bool'
p8803
sS'default'
p8804
S'0'
p8805
sS'name'
p8806
S'use_displaced_mesh'
p8807
sS'required'
p8808
I00
sS'group_name'
p8809
S'Advanced'
p8810
sa(dp8811
S'description'
p8812
S'The name of the variable that this object applies to\n'
p8813
sS'cpp_type'
p8814
S'AuxVariableName'
p8815
sS'default'
p8816
g3
sS'name'
p8817
S'variable'
p8818
sS'required'
p8819
I01
sS'group_name'
p8820
NsasS'name'
p8821
S'/AuxKernels/TotalFreeEnergy'
p8822
sa(dp8823
S'description'
p8824
g3
sS'subblocks'
p8825
NsS'parameters'
p8826
(lp8827
(dp8828
S'description'
p8829
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8830
sS'cpp_type'
p8831
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8832
sS'default'
p8833
g3
sS'name'
p8834
S'block'
p8835
sS'required'
p8836
I00
sS'group_name'
p8837
Nsa(dp8838
S'description'
p8839
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8840
sS'cpp_type'
p8841
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8842
sS'default'
p8843
g3
sS'name'
p8844
S'boundary'
p8845
sS'required'
p8846
I00
sS'group_name'
p8847
Nsa(dp8848
S'name'
p8849
S'component'
p8850
sS'cpp_type'
p8851
S'MooseEnum'
p8852
sS'default'
p8853
g3
sS'description'
p8854
S'The gradient component to compute\n'
p8855
sS'required'
p8856
I00
sS'options'
p8857
S'x y z'
p8858
sS'group_name'
p8859
Nsa(dp8860
S'description'
p8861
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8862
sS'cpp_type'
p8863
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8864
sS'default'
p8865
g3
sS'name'
p8866
S'control_tags'
p8867
sS'required'
p8868
I00
sS'group_name'
p8869
S'Advanced'
p8870
sa(dp8871
S'description'
p8872
S'Set the enabled status of the MooseObject.\n'
p8873
sS'cpp_type'
p8874
S'bool'
p8875
sS'default'
p8876
S'1'
p8877
sS'name'
p8878
S'enable'
p8879
sS'required'
p8880
I00
sS'group_name'
p8881
S'Advanced'
p8882
sa(dp8883
S'name'
p8884
S'execute_on'
p8885
sS'cpp_type'
p8886
S'MultiMooseEnum'
p8887
sS'default'
p8888
S'LINEAR'
p8889
sS'description'
p8890
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8891
sS'required'
p8892
I00
sS'options'
p8893
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8894
sS'group_name'
p8895
Nsa(dp8896
S'description'
p8897
S'The variable from which to compute the gradient component\n'
p8898
sS'cpp_type'
p8899
S'std::vector<VariableName>'
p8900
sS'default'
p8901
g3
sS'name'
p8902
S'gradient_variable'
p8903
sS'required'
p8904
I01
sS'group_name'
p8905
Nsa(dp8906
S'description'
p8907
S'The seed for the master random number generator\n'
p8908
sS'cpp_type'
p8909
S'unsigned int'
p8910
sS'default'
p8911
S'0'
p8912
sS'name'
p8913
S'seed'
p8914
sS'required'
p8915
I00
sS'group_name'
p8916
S'Advanced'
p8917
sa(dp8918
S'description'
p8919
g3
sS'cpp_type'
p8920
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8921
sS'default'
p8922
S'VariableGradientComponent'
p8923
sS'name'
p8924
S'type'
p8925
sS'required'
p8926
I00
sS'group_name'
p8927
Nsa(dp8928
S'description'
p8929
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8930
sS'cpp_type'
p8931
S'bool'
p8932
sS'default'
p8933
S'0'
p8934
sS'name'
p8935
S'use_displaced_mesh'
p8936
sS'required'
p8937
I00
sS'group_name'
p8938
S'Advanced'
p8939
sa(dp8940
S'description'
p8941
S'The name of the variable that this object applies to\n'
p8942
sS'cpp_type'
p8943
S'AuxVariableName'
p8944
sS'default'
p8945
g3
sS'name'
p8946
S'variable'
p8947
sS'required'
p8948
I01
sS'group_name'
p8949
NsasS'name'
p8950
S'/AuxKernels/VariableGradientComponent'
p8951
sa(dp8952
S'description'
p8953
g3
sS'subblocks'
p8954
NsS'parameters'
p8955
(lp8956
(dp8957
S'description'
p8958
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8959
sS'cpp_type'
p8960
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8961
sS'default'
p8962
g3
sS'name'
p8963
S'block'
p8964
sS'required'
p8965
I00
sS'group_name'
p8966
Nsa(dp8967
S'description'
p8968
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8969
sS'cpp_type'
p8970
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8971
sS'default'
p8972
g3
sS'name'
p8973
S'boundary'
p8974
sS'required'
p8975
I00
sS'group_name'
p8976
Nsa(dp8977
S'description'
p8978
S'A simple coefficient\n'
p8979
sS'cpp_type'
p8980
S'double'
p8981
sS'default'
p8982
S'1'
p8983
sS'name'
p8984
S'coefficient'
p8985
sS'required'
p8986
I00
sS'group_name'
p8987
Nsa(dp8988
S'description'
p8989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8990
sS'cpp_type'
p8991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8992
sS'default'
p8993
g3
sS'name'
p8994
S'control_tags'
p8995
sS'required'
p8996
I00
sS'group_name'
p8997
S'Advanced'
p8998
sa(dp8999
S'description'
p9000
S'Set the enabled status of the MooseObject.\n'
p9001
sS'cpp_type'
p9002
S'bool'
p9003
sS'default'
p9004
S'1'
p9005
sS'name'
p9006
S'enable'
p9007
sS'required'
p9008
I00
sS'group_name'
p9009
S'Advanced'
p9010
sa(dp9011
S'name'
p9012
S'execute_on'
p9013
sS'cpp_type'
p9014
S'MultiMooseEnum'
p9015
sS'default'
p9016
S'LINEAR'
p9017
sS'description'
p9018
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9019
sS'required'
p9020
I00
sS'options'
p9021
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9022
sS'group_name'
p9023
Nsa(dp9024
S'description'
p9025
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p9026
sS'cpp_type'
p9027
S'unsigned int'
p9028
sS'default'
p9029
S'2'
p9030
sS'name'
p9031
S'order'
p9032
sS'required'
p9033
I00
sS'group_name'
p9034
Nsa(dp9035
S'description'
p9036
S'The seed for the master random number generator\n'
p9037
sS'cpp_type'
p9038
S'unsigned int'
p9039
sS'default'
p9040
S'0'
p9041
sS'name'
p9042
S'seed'
p9043
sS'required'
p9044
I00
sS'group_name'
p9045
S'Advanced'
p9046
sa(dp9047
S'description'
p9048
g3
sS'cpp_type'
p9049
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9050
sS'default'
p9051
S'VariableTimeIntegrationAux'
p9052
sS'name'
p9053
S'type'
p9054
sS'required'
p9055
I00
sS'group_name'
p9056
Nsa(dp9057
S'description'
p9058
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9059
sS'cpp_type'
p9060
S'bool'
p9061
sS'default'
p9062
S'0'
p9063
sS'name'
p9064
S'use_displaced_mesh'
p9065
sS'required'
p9066
I00
sS'group_name'
p9067
S'Advanced'
p9068
sa(dp9069
S'description'
p9070
S'The name of the variable that this object applies to\n'
p9071
sS'cpp_type'
p9072
S'AuxVariableName'
p9073
sS'default'
p9074
g3
sS'name'
p9075
S'variable'
p9076
sS'required'
p9077
I01
sS'group_name'
p9078
Nsa(dp9079
S'description'
p9080
S'The variable to be integrated\n'
p9081
sS'cpp_type'
p9082
S'std::vector<VariableName>'
p9083
sS'default'
p9084
g3
sS'name'
p9085
S'variable_to_integrate'
p9086
sS'required'
p9087
I01
sS'group_name'
p9088
NsasS'name'
p9089
S'/AuxKernels/VariableTimeIntegrationAux'
p9090
sa(dp9091
S'description'
p9092
g3
sS'subblocks'
p9093
NsS'parameters'
p9094
(lp9095
(dp9096
S'description'
p9097
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9098
sS'cpp_type'
p9099
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9100
sS'default'
p9101
g3
sS'name'
p9102
S'block'
p9103
sS'required'
p9104
I00
sS'group_name'
p9105
Nsa(dp9106
S'description'
p9107
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9108
sS'cpp_type'
p9109
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9110
sS'default'
p9111
g3
sS'name'
p9112
S'boundary'
p9113
sS'required'
p9114
I00
sS'group_name'
p9115
Nsa(dp9116
S'description'
p9117
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9118
sS'cpp_type'
p9119
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9120
sS'default'
p9121
g3
sS'name'
p9122
S'control_tags'
p9123
sS'required'
p9124
I00
sS'group_name'
p9125
S'Advanced'
p9126
sa(dp9127
S'description'
p9128
S'Set the enabled status of the MooseObject.\n'
p9129
sS'cpp_type'
p9130
S'bool'
p9131
sS'default'
p9132
S'1'
p9133
sS'name'
p9134
S'enable'
p9135
sS'required'
p9136
I00
sS'group_name'
p9137
S'Advanced'
p9138
sa(dp9139
S'name'
p9140
S'execute_on'
p9141
sS'cpp_type'
p9142
S'MultiMooseEnum'
p9143
sS'default'
p9144
S'LINEAR'
p9145
sS'description'
p9146
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9147
sS'required'
p9148
I00
sS'options'
p9149
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9150
sS'group_name'
p9151
Nsa(dp9152
S'description'
p9153
S'The seed for the master random number generator\n'
p9154
sS'cpp_type'
p9155
S'unsigned int'
p9156
sS'default'
p9157
S'0'
p9158
sS'name'
p9159
S'seed'
p9160
sS'required'
p9161
I00
sS'group_name'
p9162
S'Advanced'
p9163
sa(dp9164
S'description'
p9165
g3
sS'cpp_type'
p9166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9167
sS'default'
p9168
S'VectorMagnitudeAux'
p9169
sS'name'
p9170
S'type'
p9171
sS'required'
p9172
I00
sS'group_name'
p9173
Nsa(dp9174
S'description'
p9175
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9176
sS'cpp_type'
p9177
S'bool'
p9178
sS'default'
p9179
S'0'
p9180
sS'name'
p9181
S'use_displaced_mesh'
p9182
sS'required'
p9183
I00
sS'group_name'
p9184
S'Advanced'
p9185
sa(dp9186
S'description'
p9187
S'The name of the variable that this object applies to\n'
p9188
sS'cpp_type'
p9189
S'AuxVariableName'
p9190
sS'default'
p9191
g3
sS'name'
p9192
S'variable'
p9193
sS'required'
p9194
I01
sS'group_name'
p9195
Nsa(dp9196
S'description'
p9197
S'x-component of the vector\n'
p9198
sS'cpp_type'
p9199
S'std::vector<VariableName>'
p9200
sS'default'
p9201
g3
sS'name'
p9202
S'x'
p9203
sS'required'
p9204
I01
sS'group_name'
p9205
Nsa(dp9206
S'description'
p9207
S'y-component of the vector\n'
p9208
sS'cpp_type'
p9209
S'std::vector<VariableName>'
p9210
sS'default'
p9211
g3
sS'name'
p9212
S'y'
p9213
sS'required'
p9214
I00
sS'group_name'
p9215
Nsa(dp9216
S'description'
p9217
S'z-component of the vector\n'
p9218
sS'cpp_type'
p9219
S'std::vector<VariableName>'
p9220
sS'default'
p9221
g3
sS'name'
p9222
S'z'
p9223
sS'required'
p9224
I00
sS'group_name'
p9225
NsasS'name'
p9226
S'/AuxKernels/VectorMagnitudeAux'
p9227
sasS'parameters'
p9228
NsS'name'
p9229
S'/AuxKernels'
p9230
sa(dp9231
S'description'
p9232
g3
sS'subblocks'
p9233
(lp9234
(dp9235
S'description'
p9236
g3
sS'subblocks'
p9237
NsS'parameters'
p9238
(lp9239
(dp9240
S'description'
p9241
S'A string representing the Moose Object that will be built by this Action\n'
p9242
sS'cpp_type'
p9243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9244
sS'default'
p9245
g3
sS'name'
p9246
S'type'
p9247
sS'required'
p9248
I01
sS'group_name'
p9249
NsasS'name'
p9250
S'/AuxScalarKernels/*'
p9251
sa(dp9252
S'description'
p9253
g3
sS'subblocks'
p9254
NsS'parameters'
p9255
(lp9256
(dp9257
S'description'
p9258
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9259
sS'cpp_type'
p9260
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9261
sS'default'
p9262
g3
sS'name'
p9263
S'control_tags'
p9264
sS'required'
p9265
I00
sS'group_name'
p9266
S'Advanced'
p9267
sa(dp9268
S'description'
p9269
S'Set the enabled status of the MooseObject.\n'
p9270
sS'cpp_type'
p9271
S'bool'
p9272
sS'default'
p9273
S'1'
p9274
sS'name'
p9275
S'enable'
p9276
sS'required'
p9277
I00
sS'group_name'
p9278
S'Advanced'
p9279
sa(dp9280
S'name'
p9281
S'execute_on'
p9282
sS'cpp_type'
p9283
S'MultiMooseEnum'
p9284
sS'default'
p9285
S'LINEAR'
p9286
sS'description'
p9287
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9288
sS'required'
p9289
I00
sS'options'
p9290
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9291
sS'group_name'
p9292
Nsa(dp9293
S'description'
p9294
g3
sS'cpp_type'
p9295
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9296
sS'default'
p9297
S'ConstantScalarAux'
p9298
sS'name'
p9299
S'type'
p9300
sS'required'
p9301
I00
sS'group_name'
p9302
Nsa(dp9303
S'description'
p9304
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9305
sS'cpp_type'
p9306
S'bool'
p9307
sS'default'
p9308
S'0'
p9309
sS'name'
p9310
S'use_displaced_mesh'
p9311
sS'required'
p9312
I00
sS'group_name'
p9313
S'Advanced'
p9314
sa(dp9315
S'description'
p9316
S'The value to be set to the scalar variable.\n'
p9317
sS'cpp_type'
p9318
S'double'
p9319
sS'default'
p9320
g3
sS'name'
p9321
S'value'
p9322
sS'required'
p9323
I01
sS'group_name'
p9324
Nsa(dp9325
S'description'
p9326
S'The name of the variable that this kernel operates on\n'
p9327
sS'cpp_type'
p9328
S'AuxVariableName'
p9329
sS'default'
p9330
g3
sS'name'
p9331
S'variable'
p9332
sS'required'
p9333
I01
sS'group_name'
p9334
NsasS'name'
p9335
S'/AuxScalarKernels/ConstantScalarAux'
p9336
sa(dp9337
S'description'
p9338
g3
sS'subblocks'
p9339
NsS'parameters'
p9340
(lp9341
(dp9342
S'description'
p9343
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9344
sS'cpp_type'
p9345
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9346
sS'default'
p9347
g3
sS'name'
p9348
S'control_tags'
p9349
sS'required'
p9350
I00
sS'group_name'
p9351
S'Advanced'
p9352
sa(dp9353
S'description'
p9354
S'Set the enabled status of the MooseObject.\n'
p9355
sS'cpp_type'
p9356
S'bool'
p9357
sS'default'
p9358
S'1'
p9359
sS'name'
p9360
S'enable'
p9361
sS'required'
p9362
I00
sS'group_name'
p9363
S'Advanced'
p9364
sa(dp9365
S'name'
p9366
S'execute_on'
p9367
sS'cpp_type'
p9368
S'MultiMooseEnum'
p9369
sS'default'
p9370
S'LINEAR'
p9371
sS'description'
p9372
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9373
sS'required'
p9374
I00
sS'options'
p9375
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9376
sS'group_name'
p9377
Nsa(dp9378
S'description'
p9379
S'The functions to set the scalar variable components.\n'
p9380
sS'cpp_type'
p9381
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p9382
sS'default'
p9383
g3
sS'name'
p9384
S'function'
p9385
sS'required'
p9386
I01
sS'group_name'
p9387
Nsa(dp9388
S'description'
p9389
g3
sS'cpp_type'
p9390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9391
sS'default'
p9392
S'FunctionScalarAux'
p9393
sS'name'
p9394
S'type'
p9395
sS'required'
p9396
I00
sS'group_name'
p9397
Nsa(dp9398
S'description'
p9399
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9400
sS'cpp_type'
p9401
S'bool'
p9402
sS'default'
p9403
S'0'
p9404
sS'name'
p9405
S'use_displaced_mesh'
p9406
sS'required'
p9407
I00
sS'group_name'
p9408
S'Advanced'
p9409
sa(dp9410
S'description'
p9411
S'The name of the variable that this kernel operates on\n'
p9412
sS'cpp_type'
p9413
S'AuxVariableName'
p9414
sS'default'
p9415
g3
sS'name'
p9416
S'variable'
p9417
sS'required'
p9418
I01
sS'group_name'
p9419
NsasS'name'
p9420
S'/AuxScalarKernels/FunctionScalarAux'
p9421
sa(dp9422
S'description'
p9423
g3
sS'subblocks'
p9424
NsS'parameters'
p9425
(lp9426
(dp9427
S'description'
p9428
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9429
sS'cpp_type'
p9430
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9431
sS'default'
p9432
g3
sS'name'
p9433
S'control_tags'
p9434
sS'required'
p9435
I00
sS'group_name'
p9436
S'Advanced'
p9437
sa(dp9438
S'description'
p9439
S'The downstairs of the quotient variable\n'
p9440
sS'cpp_type'
p9441
S'std::vector<VariableName>'
p9442
sS'default'
p9443
g3
sS'name'
p9444
S'denominator'
p9445
sS'required'
p9446
I00
sS'group_name'
p9447
Nsa(dp9448
S'description'
p9449
S'Set the enabled status of the MooseObject.\n'
p9450
sS'cpp_type'
p9451
S'bool'
p9452
sS'default'
p9453
S'1'
p9454
sS'name'
p9455
S'enable'
p9456
sS'required'
p9457
I00
sS'group_name'
p9458
S'Advanced'
p9459
sa(dp9460
S'name'
p9461
S'execute_on'
p9462
sS'cpp_type'
p9463
S'MultiMooseEnum'
p9464
sS'default'
p9465
S'LINEAR'
p9466
sS'description'
p9467
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9468
sS'required'
p9469
I00
sS'options'
p9470
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9471
sS'group_name'
p9472
Nsa(dp9473
S'description'
p9474
S'The upstairs of the quotient variable\n'
p9475
sS'cpp_type'
p9476
S'std::vector<VariableName>'
p9477
sS'default'
p9478
g3
sS'name'
p9479
S'numerator'
p9480
sS'required'
p9481
I00
sS'group_name'
p9482
Nsa(dp9483
S'description'
p9484
g3
sS'cpp_type'
p9485
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9486
sS'default'
p9487
S'QuotientScalarAux'
p9488
sS'name'
p9489
S'type'
p9490
sS'required'
p9491
I00
sS'group_name'
p9492
Nsa(dp9493
S'description'
p9494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9495
sS'cpp_type'
p9496
S'bool'
p9497
sS'default'
p9498
S'0'
p9499
sS'name'
p9500
S'use_displaced_mesh'
p9501
sS'required'
p9502
I00
sS'group_name'
p9503
S'Advanced'
p9504
sa(dp9505
S'description'
p9506
S'The name of the variable that this kernel operates on\n'
p9507
sS'cpp_type'
p9508
S'AuxVariableName'
p9509
sS'default'
p9510
g3
sS'name'
p9511
S'variable'
p9512
sS'required'
p9513
I01
sS'group_name'
p9514
NsasS'name'
p9515
S'/AuxScalarKernels/QuotientScalarAux'
p9516
sasS'parameters'
p9517
NsS'name'
p9518
S'/AuxScalarKernels'
p9519
sa(dp9520
S'description'
p9521
g3
sS'subblocks'
p9522
(lp9523
(dp9524
S'description'
p9525
g3
sS'subblocks'
p9526
(lp9527
(dp9528
S'description'
p9529
g3
sS'subblocks'
p9530
(lp9531
(dp9532
S'description'
p9533
g3
sS'subblocks'
p9534
(lp9535
(dp9536
S'description'
p9537
S'Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n'
p9538
sS'subblocks'
p9539
NsS'parameters'
p9540
(lp9541
(dp9542
S'description'
p9543
S'Semiaxis a for each superellipsoid\n'
p9544
sS'cpp_type'
p9545
S'std::vector<double, std::allocator<double> >'
p9546
sS'default'
p9547
g3
sS'name'
p9548
S'as'
p9549
sS'required'
p9550
I01
sS'group_name'
p9551
Nsa(dp9552
S'description'
p9553
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9554
sS'cpp_type'
p9555
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9556
sS'default'
p9557
g3
sS'name'
p9558
S'block'
p9559
sS'required'
p9560
I00
sS'group_name'
p9561
Nsa(dp9562
S'description'
p9563
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9564
sS'cpp_type'
p9565
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9566
sS'default'
p9567
g3
sS'name'
p9568
S'boundary'
p9569
sS'required'
p9570
I00
sS'group_name'
p9571
Nsa(dp9572
S'description'
p9573
S'Semiaxis b for each superellipsoid\n'
p9574
sS'cpp_type'
p9575
S'std::vector<double, std::allocator<double> >'
p9576
sS'default'
p9577
g3
sS'name'
p9578
S'bs'
p9579
sS'required'
p9580
I01
sS'group_name'
p9581
Nsa(dp9582
S'description'
p9583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9584
sS'cpp_type'
p9585
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9586
sS'default'
p9587
g3
sS'name'
p9588
S'control_tags'
p9589
sS'required'
p9590
I00
sS'group_name'
p9591
S'Advanced'
p9592
sa(dp9593
S'description'
p9594
S'Semiaxis c for each superellipsoid\n'
p9595
sS'cpp_type'
p9596
S'std::vector<double, std::allocator<double> >'
p9597
sS'default'
p9598
g3
sS'name'
p9599
S'cs'
p9600
sS'required'
p9601
I01
sS'group_name'
p9602
Nsa(dp9603
S'description'
p9604
S'Set the enabled status of the MooseObject.\n'
p9605
sS'cpp_type'
p9606
S'bool'
p9607
sS'default'
p9608
S'1'
p9609
sS'name'
p9610
S'enable'
p9611
sS'required'
p9612
I00
sS'group_name'
p9613
S'Advanced'
p9614
sa(dp9615
S'description'
p9616
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p9617
sS'cpp_type'
p9618
S'bool'
p9619
sS'default'
p9620
S'0'
p9621
sS'name'
p9622
S'ignore_uo_dependency'
p9623
sS'required'
p9624
I00
sS'group_name'
p9625
S'Advanced'
p9626
sa(dp9627
S'description'
p9628
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p9629
sS'cpp_type'
p9630
S'double'
p9631
sS'default'
p9632
S'0'
p9633
sS'name'
p9634
S'int_width'
p9635
sS'required'
p9636
I00
sS'group_name'
p9637
Nsa(dp9638
S'description'
p9639
S'The variable value inside the superellipsoid\n'
p9640
sS'cpp_type'
p9641
S'double'
p9642
sS'default'
p9643
g3
sS'name'
p9644
S'invalue'
p9645
sS'required'
p9646
I01
sS'group_name'
p9647
Nsa(dp9648
S'description'
p9649
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p9650
sS'cpp_type'
p9651
S'double'
p9652
sS'default'
p9653
g3
sS'name'
p9654
S'large_spac'
p9655
sS'required'
p9656
I01
sS'group_name'
p9657
Nsa(dp9658
S'description'
p9659
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p9660
sS'cpp_type'
p9661
S'double'
p9662
sS'default'
p9663
g3
sS'name'
p9664
S'nestedvalue'
p9665
sS'required'
p9666
I00
sS'group_name'
p9667
Nsa(dp9668
S'description'
p9669
S'The number of random (small) particles to place\n'
p9670
sS'cpp_type'
p9671
S'unsigned int'
p9672
sS'default'
p9673
g3
sS'name'
p9674
S'npart'
p9675
sS'required'
p9676
I01
sS'group_name'
p9677
Nsa(dp9678
S'description'
p9679
S'Exponent n for each superellipsoid\n'
p9680
sS'cpp_type'
p9681
S'std::vector<double, std::allocator<double> >'
p9682
sS'default'
p9683
g3
sS'name'
p9684
S'ns'
p9685
sS'required'
p9686
I01
sS'group_name'
p9687
Nsa(dp9688
S'description'
p9689
S'The number of tries to place the random particles\n'
p9690
sS'cpp_type'
p9691
S'unsigned int'
p9692
sS'default'
p9693
S'1000'
p9694
sS'name'
p9695
S'numtries'
p9696
sS'required'
p9697
I00
sS'group_name'
p9698
Nsa(dp9699
S'description'
p9700
S'The variable value outside the superellipsoid\n'
p9701
sS'cpp_type'
p9702
S'double'
p9703
sS'default'
p9704
g3
sS'name'
p9705
S'outvalue'
p9706
sS'required'
p9707
I01
sS'group_name'
p9708
Nsa(dp9709
S'description'
p9710
S'Seed value for the random number generator\n'
p9711
sS'cpp_type'
p9712
S'unsigned int'
p9713
sS'default'
p9714
S'12345'
p9715
sS'name'
p9716
S'rand_seed'
p9717
sS'required'
p9718
I00
sS'group_name'
p9719
Nsa(dp9720
S'description'
p9721
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p9722
sS'cpp_type'
p9723
S'double'
p9724
sS'default'
p9725
S'0'
p9726
sS'name'
p9727
S'size_variation'
p9728
sS'required'
p9729
I00
sS'group_name'
p9730
Nsa(dp9731
S'name'
p9732
S'size_variation_type'
p9733
sS'cpp_type'
p9734
S'MooseEnum'
p9735
sS'default'
p9736
S'none'
p9737
sS'description'
p9738
S'Type of distribution that random semiaxes will follow\n'
p9739
sS'required'
p9740
I00
sS'options'
p9741
S'uniform normal none'
p9742
sS'group_name'
p9743
Nsa(dp9744
S'description'
p9745
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p9746
sS'cpp_type'
p9747
S'double'
p9748
sS'default'
p9749
g3
sS'name'
p9750
S'small_a'
p9751
sS'required'
p9752
I01
sS'group_name'
p9753
Nsa(dp9754
S'description'
p9755
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p9756
sS'cpp_type'
p9757
S'double'
p9758
sS'default'
p9759
g3
sS'name'
p9760
S'small_b'
p9761
sS'required'
p9762
I01
sS'group_name'
p9763
Nsa(dp9764
S'description'
p9765
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p9766
sS'cpp_type'
p9767
S'double'
p9768
sS'default'
p9769
g3
sS'name'
p9770
S'small_c'
p9771
sS'required'
p9772
I01
sS'group_name'
p9773
Nsa(dp9774
S'description'
p9775
S'Exponent n for the randomly placed (small) superellipsoids\n'
p9776
sS'cpp_type'
p9777
S'double'
p9778
sS'default'
p9779
g3
sS'name'
p9780
S'small_n'
p9781
sS'required'
p9782
I01
sS'group_name'
p9783
Nsa(dp9784
S'description'
p9785
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p9786
sS'cpp_type'
p9787
S'double'
p9788
sS'default'
p9789
g3
sS'name'
p9790
S'small_spac'
p9791
sS'required'
p9792
I01
sS'group_name'
p9793
Nsa(dp9794
S'description'
p9795
g3
sS'cpp_type'
p9796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9797
sS'default'
p9798
S'BimodalInverseSuperellipsoidsIC'
p9799
sS'name'
p9800
S'type'
p9801
sS'required'
p9802
I00
sS'group_name'
p9803
Nsa(dp9804
S'description'
p9805
S'The variable this initial condition is supposed to provide values for.\n'
p9806
sS'cpp_type'
p9807
S'VariableName'
p9808
sS'default'
p9809
g3
sS'name'
p9810
S'variable'
p9811
sS'required'
p9812
I01
sS'group_name'
p9813
Nsa(dp9814
S'description'
p9815
S'The x-coordinate for each superellipsoid center\n'
p9816
sS'cpp_type'
p9817
S'std::vector<double, std::allocator<double> >'
p9818
sS'default'
p9819
g3
sS'name'
p9820
S'x_positions'
p9821
sS'required'
p9822
I01
sS'group_name'
p9823
Nsa(dp9824
S'description'
p9825
S'The y-coordinate for each superellipsoid center\n'
p9826
sS'cpp_type'
p9827
S'std::vector<double, std::allocator<double> >'
p9828
sS'default'
p9829
g3
sS'name'
p9830
S'y_positions'
p9831
sS'required'
p9832
I01
sS'group_name'
p9833
Nsa(dp9834
S'description'
p9835
S'The z-coordinate for each superellipsoid center\n'
p9836
sS'cpp_type'
p9837
S'std::vector<double, std::allocator<double> >'
p9838
sS'default'
p9839
g3
sS'name'
p9840
S'z_positions'
p9841
sS'required'
p9842
I01
sS'group_name'
p9843
Nsa(dp9844
S'description'
p9845
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p9846
sS'cpp_type'
p9847
S'bool'
p9848
sS'default'
p9849
S'0'
p9850
sS'name'
p9851
S'zero_gradient'
p9852
sS'required'
p9853
I00
sS'group_name'
p9854
NsasS'name'
p9855
S'/AuxVariables/*/InitialCondition/<type>/BimodalInverseSuperellipsoidsIC'
p9856
sa(dp9857
S'description'
p9858
S'Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n'
p9859
sS'subblocks'
p9860
NsS'parameters'
p9861
(lp9862
(dp9863
S'description'
p9864
S'Semiaxis a for each superellipsoid\n'
p9865
sS'cpp_type'
p9866
S'std::vector<double, std::allocator<double> >'
p9867
sS'default'
p9868
g3
sS'name'
p9869
S'as'
p9870
sS'required'
p9871
I01
sS'group_name'
p9872
Nsa(dp9873
S'description'
p9874
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9875
sS'cpp_type'
p9876
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9877
sS'default'
p9878
g3
sS'name'
p9879
S'block'
p9880
sS'required'
p9881
I00
sS'group_name'
p9882
Nsa(dp9883
S'description'
p9884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9885
sS'cpp_type'
p9886
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9887
sS'default'
p9888
g3
sS'name'
p9889
S'boundary'
p9890
sS'required'
p9891
I00
sS'group_name'
p9892
Nsa(dp9893
S'description'
p9894
S'Semiaxis b for each superellipsoid\n'
p9895
sS'cpp_type'
p9896
S'std::vector<double, std::allocator<double> >'
p9897
sS'default'
p9898
g3
sS'name'
p9899
S'bs'
p9900
sS'required'
p9901
I01
sS'group_name'
p9902
Nsa(dp9903
S'description'
p9904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9905
sS'cpp_type'
p9906
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9907
sS'default'
p9908
g3
sS'name'
p9909
S'control_tags'
p9910
sS'required'
p9911
I00
sS'group_name'
p9912
S'Advanced'
p9913
sa(dp9914
S'description'
p9915
S'Semiaxis c for each superellipsoid\n'
p9916
sS'cpp_type'
p9917
S'std::vector<double, std::allocator<double> >'
p9918
sS'default'
p9919
g3
sS'name'
p9920
S'cs'
p9921
sS'required'
p9922
I01
sS'group_name'
p9923
Nsa(dp9924
S'description'
p9925
S'Set the enabled status of the MooseObject.\n'
p9926
sS'cpp_type'
p9927
S'bool'
p9928
sS'default'
p9929
S'1'
p9930
sS'name'
p9931
S'enable'
p9932
sS'required'
p9933
I00
sS'group_name'
p9934
S'Advanced'
p9935
sa(dp9936
S'description'
p9937
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p9938
sS'cpp_type'
p9939
S'bool'
p9940
sS'default'
p9941
S'0'
p9942
sS'name'
p9943
S'ignore_uo_dependency'
p9944
sS'required'
p9945
I00
sS'group_name'
p9946
S'Advanced'
p9947
sa(dp9948
S'description'
p9949
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p9950
sS'cpp_type'
p9951
S'double'
p9952
sS'default'
p9953
S'0'
p9954
sS'name'
p9955
S'int_width'
p9956
sS'required'
p9957
I00
sS'group_name'
p9958
Nsa(dp9959
S'description'
p9960
S'The variable value inside the superellipsoid\n'
p9961
sS'cpp_type'
p9962
S'double'
p9963
sS'default'
p9964
g3
sS'name'
p9965
S'invalue'
p9966
sS'required'
p9967
I01
sS'group_name'
p9968
Nsa(dp9969
S'description'
p9970
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p9971
sS'cpp_type'
p9972
S'double'
p9973
sS'default'
p9974
g3
sS'name'
p9975
S'large_spac'
p9976
sS'required'
p9977
I01
sS'group_name'
p9978
Nsa(dp9979
S'description'
p9980
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p9981
sS'cpp_type'
p9982
S'double'
p9983
sS'default'
p9984
g3
sS'name'
p9985
S'nestedvalue'
p9986
sS'required'
p9987
I00
sS'group_name'
p9988
Nsa(dp9989
S'description'
p9990
S'The number of random (small) particles to place\n'
p9991
sS'cpp_type'
p9992
S'unsigned int'
p9993
sS'default'
p9994
g3
sS'name'
p9995
S'npart'
p9996
sS'required'
p9997
I01
sS'group_name'
p9998
Nsa(dp9999
S'description'
p10000
S'Exponent n for each superellipsoid\n'
p10001
sS'cpp_type'
p10002
S'std::vector<double, std::allocator<double> >'
p10003
sS'default'
p10004
g3
sS'name'
p10005
S'ns'
p10006
sS'required'
p10007
I01
sS'group_name'
p10008
Nsa(dp10009
S'description'
p10010
S'The number of tries to place the random particles\n'
p10011
sS'cpp_type'
p10012
S'unsigned int'
p10013
sS'default'
p10014
S'1000'
p10015
sS'name'
p10016
S'numtries'
p10017
sS'required'
p10018
I00
sS'group_name'
p10019
Nsa(dp10020
S'description'
p10021
S'The variable value outside the superellipsoid\n'
p10022
sS'cpp_type'
p10023
S'double'
p10024
sS'default'
p10025
g3
sS'name'
p10026
S'outvalue'
p10027
sS'required'
p10028
I01
sS'group_name'
p10029
Nsa(dp10030
S'description'
p10031
S'Seed value for the random number generator\n'
p10032
sS'cpp_type'
p10033
S'unsigned int'
p10034
sS'default'
p10035
S'12345'
p10036
sS'name'
p10037
S'rand_seed'
p10038
sS'required'
p10039
I00
sS'group_name'
p10040
Nsa(dp10041
S'description'
p10042
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p10043
sS'cpp_type'
p10044
S'double'
p10045
sS'default'
p10046
S'0'
p10047
sS'name'
p10048
S'size_variation'
p10049
sS'required'
p10050
I00
sS'group_name'
p10051
Nsa(dp10052
S'name'
p10053
S'size_variation_type'
p10054
sS'cpp_type'
p10055
S'MooseEnum'
p10056
sS'default'
p10057
S'none'
p10058
sS'description'
p10059
S'Type of distribution that random semiaxes will follow\n'
p10060
sS'required'
p10061
I00
sS'options'
p10062
S'uniform normal none'
p10063
sS'group_name'
p10064
Nsa(dp10065
S'description'
p10066
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p10067
sS'cpp_type'
p10068
S'double'
p10069
sS'default'
p10070
g3
sS'name'
p10071
S'small_a'
p10072
sS'required'
p10073
I01
sS'group_name'
p10074
Nsa(dp10075
S'description'
p10076
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p10077
sS'cpp_type'
p10078
S'double'
p10079
sS'default'
p10080
g3
sS'name'
p10081
S'small_b'
p10082
sS'required'
p10083
I01
sS'group_name'
p10084
Nsa(dp10085
S'description'
p10086
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p10087
sS'cpp_type'
p10088
S'double'
p10089
sS'default'
p10090
g3
sS'name'
p10091
S'small_c'
p10092
sS'required'
p10093
I01
sS'group_name'
p10094
Nsa(dp10095
S'description'
p10096
S'Exponent n for the randomly placed (small) superellipsoids\n'
p10097
sS'cpp_type'
p10098
S'double'
p10099
sS'default'
p10100
g3
sS'name'
p10101
S'small_n'
p10102
sS'required'
p10103
I01
sS'group_name'
p10104
Nsa(dp10105
S'description'
p10106
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p10107
sS'cpp_type'
p10108
S'double'
p10109
sS'default'
p10110
g3
sS'name'
p10111
S'small_spac'
p10112
sS'required'
p10113
I01
sS'group_name'
p10114
Nsa(dp10115
S'description'
p10116
g3
sS'cpp_type'
p10117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10118
sS'default'
p10119
S'BimodalSuperellipsoidsIC'
p10120
sS'name'
p10121
S'type'
p10122
sS'required'
p10123
I00
sS'group_name'
p10124
Nsa(dp10125
S'description'
p10126
S'The variable this initial condition is supposed to provide values for.\n'
p10127
sS'cpp_type'
p10128
S'VariableName'
p10129
sS'default'
p10130
g3
sS'name'
p10131
S'variable'
p10132
sS'required'
p10133
I01
sS'group_name'
p10134
Nsa(dp10135
S'description'
p10136
S'The x-coordinate for each superellipsoid center\n'
p10137
sS'cpp_type'
p10138
S'std::vector<double, std::allocator<double> >'
p10139
sS'default'
p10140
g3
sS'name'
p10141
S'x_positions'
p10142
sS'required'
p10143
I01
sS'group_name'
p10144
Nsa(dp10145
S'description'
p10146
S'The y-coordinate for each superellipsoid center\n'
p10147
sS'cpp_type'
p10148
S'std::vector<double, std::allocator<double> >'
p10149
sS'default'
p10150
g3
sS'name'
p10151
S'y_positions'
p10152
sS'required'
p10153
I01
sS'group_name'
p10154
Nsa(dp10155
S'description'
p10156
S'The z-coordinate for each superellipsoid center\n'
p10157
sS'cpp_type'
p10158
S'std::vector<double, std::allocator<double> >'
p10159
sS'default'
p10160
g3
sS'name'
p10161
S'z_positions'
p10162
sS'required'
p10163
I01
sS'group_name'
p10164
Nsa(dp10165
S'description'
p10166
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p10167
sS'cpp_type'
p10168
S'bool'
p10169
sS'default'
p10170
S'0'
p10171
sS'name'
p10172
S'zero_gradient'
p10173
sS'required'
p10174
I00
sS'group_name'
p10175
NsasS'name'
p10176
S'/AuxVariables/*/InitialCondition/<type>/BimodalSuperellipsoidsIC'
p10177
sa(dp10178
S'description'
p10179
g3
sS'subblocks'
p10180
NsS'parameters'
p10181
(lp10182
(dp10183
S'description'
p10184
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10185
sS'cpp_type'
p10186
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10187
sS'default'
p10188
g3
sS'name'
p10189
S'block'
p10190
sS'required'
p10191
I00
sS'group_name'
p10192
Nsa(dp10193
S'description'
p10194
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10195
sS'cpp_type'
p10196
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10197
sS'default'
p10198
g3
sS'name'
p10199
S'boundary'
p10200
sS'required'
p10201
I00
sS'group_name'
p10202
Nsa(dp10203
S'description'
p10204
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10205
sS'cpp_type'
p10206
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10207
sS'default'
p10208
g3
sS'name'
p10209
S'control_tags'
p10210
sS'required'
p10211
I00
sS'group_name'
p10212
S'Advanced'
p10213
sa(dp10214
S'description'
p10215
S'Set the enabled status of the MooseObject.\n'
p10216
sS'cpp_type'
p10217
S'bool'
p10218
sS'default'
p10219
S'1'
p10220
sS'name'
p10221
S'enable'
p10222
sS'required'
p10223
I00
sS'group_name'
p10224
S'Advanced'
p10225
sa(dp10226
S'description'
p10227
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10228
sS'cpp_type'
p10229
S'bool'
p10230
sS'default'
p10231
S'0'
p10232
sS'name'
p10233
S'ignore_uo_dependency'
p10234
sS'required'
p10235
I00
sS'group_name'
p10236
S'Advanced'
p10237
sa(dp10238
S'description'
p10239
S'The value of the variable inside the box\n'
p10240
sS'cpp_type'
p10241
S'double'
p10242
sS'default'
p10243
S'0'
p10244
sS'name'
p10245
S'inside'
p10246
sS'required'
p10247
I00
sS'group_name'
p10248
Nsa(dp10249
S'description'
p10250
S'The value of the variable outside the box\n'
p10251
sS'cpp_type'
p10252
S'double'
p10253
sS'default'
p10254
S'0'
p10255
sS'name'
p10256
S'outside'
p10257
sS'required'
p10258
I00
sS'group_name'
p10259
Nsa(dp10260
S'description'
p10261
g3
sS'cpp_type'
p10262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10263
sS'default'
p10264
S'BoundingBoxIC'
p10265
sS'name'
p10266
S'type'
p10267
sS'required'
p10268
I00
sS'group_name'
p10269
Nsa(dp10270
S'description'
p10271
S'The variable this initial condition is supposed to provide values for.\n'
p10272
sS'cpp_type'
p10273
S'VariableName'
p10274
sS'default'
p10275
g3
sS'name'
p10276
S'variable'
p10277
sS'required'
p10278
I01
sS'group_name'
p10279
Nsa(dp10280
S'description'
p10281
S'The x coordinate of the lower left-hand corner of the box\n'
p10282
sS'cpp_type'
p10283
S'double'
p10284
sS'default'
p10285
g3
sS'name'
p10286
S'x1'
p10287
sS'required'
p10288
I01
sS'group_name'
p10289
Nsa(dp10290
S'description'
p10291
S'The x coordinate of the upper right-hand corner of the box\n'
p10292
sS'cpp_type'
p10293
S'double'
p10294
sS'default'
p10295
g3
sS'name'
p10296
S'x2'
p10297
sS'required'
p10298
I01
sS'group_name'
p10299
Nsa(dp10300
S'description'
p10301
S'The y coordinate of the lower left-hand corner of the box\n'
p10302
sS'cpp_type'
p10303
S'double'
p10304
sS'default'
p10305
g3
sS'name'
p10306
S'y1'
p10307
sS'required'
p10308
I01
sS'group_name'
p10309
Nsa(dp10310
S'description'
p10311
S'The y coordinate of the upper right-hand corner of the box\n'
p10312
sS'cpp_type'
p10313
S'double'
p10314
sS'default'
p10315
g3
sS'name'
p10316
S'y2'
p10317
sS'required'
p10318
I01
sS'group_name'
p10319
Nsa(dp10320
S'description'
p10321
S'The z coordinate of the lower left-hand corner of the box\n'
p10322
sS'cpp_type'
p10323
S'double'
p10324
sS'default'
p10325
S'0'
p10326
sS'name'
p10327
S'z1'
p10328
sS'required'
p10329
I00
sS'group_name'
p10330
Nsa(dp10331
S'description'
p10332
S'The z coordinate of the upper right-hand corner of the box\n'
p10333
sS'cpp_type'
p10334
S'double'
p10335
sS'default'
p10336
S'0'
p10337
sS'name'
p10338
S'z2'
p10339
sS'required'
p10340
I00
sS'group_name'
p10341
NsasS'name'
p10342
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p10343
sa(dp10344
S'description'
p10345
S'Close packed arrangement of smooth circles\n'
p10346
sS'subblocks'
p10347
NsS'parameters'
p10348
(lp10349
(dp10350
S'description'
p10351
S'in 3D, whether the objects are spheres or columns\n'
p10352
sS'cpp_type'
p10353
S'bool'
p10354
sS'default'
p10355
S'1'
p10356
sS'name'
p10357
S'3D_spheres'
p10358
sS'required'
p10359
I00
sS'group_name'
p10360
Nsa(dp10361
S'description'
p10362
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10363
sS'cpp_type'
p10364
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10365
sS'default'
p10366
g3
sS'name'
p10367
S'block'
p10368
sS'required'
p10369
I00
sS'group_name'
p10370
Nsa(dp10371
S'description'
p10372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10373
sS'cpp_type'
p10374
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10375
sS'default'
p10376
g3
sS'name'
p10377
S'boundary'
p10378
sS'required'
p10379
I00
sS'group_name'
p10380
Nsa(dp10381
S'description'
p10382
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10383
sS'cpp_type'
p10384
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10385
sS'default'
p10386
g3
sS'name'
p10387
S'control_tags'
p10388
sS'required'
p10389
I00
sS'group_name'
p10390
S'Advanced'
p10391
sa(dp10392
S'description'
p10393
S'Set the enabled status of the MooseObject.\n'
p10394
sS'cpp_type'
p10395
S'bool'
p10396
sS'default'
p10397
S'1'
p10398
sS'name'
p10399
S'enable'
p10400
sS'required'
p10401
I00
sS'group_name'
p10402
S'Advanced'
p10403
sa(dp10404
S'description'
p10405
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10406
sS'cpp_type'
p10407
S'bool'
p10408
sS'default'
p10409
S'0'
p10410
sS'name'
p10411
S'ignore_uo_dependency'
p10412
sS'required'
p10413
I00
sS'group_name'
p10414
S'Advanced'
p10415
sa(dp10416
S'description'
p10417
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p10418
sS'cpp_type'
p10419
S'double'
p10420
sS'default'
p10421
S'0'
p10422
sS'name'
p10423
S'int_width'
p10424
sS'required'
p10425
I00
sS'group_name'
p10426
Nsa(dp10427
S'description'
p10428
S'The variable value inside the circle\n'
p10429
sS'cpp_type'
p10430
S'double'
p10431
sS'default'
p10432
g3
sS'name'
p10433
S'invalue'
p10434
sS'required'
p10435
I01
sS'group_name'
p10436
Nsa(dp10437
S'description'
p10438
S'The variable value outside the circle\n'
p10439
sS'cpp_type'
p10440
S'double'
p10441
sS'default'
p10442
g3
sS'name'
p10443
S'outvalue'
p10444
sS'required'
p10445
I01
sS'group_name'
p10446
Nsa(dp10447
S'description'
p10448
S'The radius of a circle\n'
p10449
sS'cpp_type'
p10450
S'double'
p10451
sS'default'
p10452
g3
sS'name'
p10453
S'radius'
p10454
sS'required'
p10455
I01
sS'group_name'
p10456
Nsa(dp10457
S'description'
p10458
S'Seed value for the random number generator\n'
p10459
sS'cpp_type'
p10460
S'unsigned int'
p10461
sS'default'
p10462
S'12345'
p10463
sS'name'
p10464
S'rand_seed'
p10465
sS'required'
p10466
I00
sS'group_name'
p10467
Nsa(dp10468
S'description'
p10469
g3
sS'cpp_type'
p10470
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10471
sS'default'
p10472
S'ClosePackIC'
p10473
sS'name'
p10474
S'type'
p10475
sS'required'
p10476
I00
sS'group_name'
p10477
Nsa(dp10478
S'description'
p10479
S'The variable this initial condition is supposed to provide values for.\n'
p10480
sS'cpp_type'
p10481
S'VariableName'
p10482
sS'default'
p10483
g3
sS'name'
p10484
S'variable'
p10485
sS'required'
p10486
I01
sS'group_name'
p10487
Nsa(dp10488
S'description'
p10489
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p10490
sS'cpp_type'
p10491
S'bool'
p10492
sS'default'
p10493
S'0'
p10494
sS'name'
p10495
S'zero_gradient'
p10496
sS'required'
p10497
I00
sS'group_name'
p10498
NsasS'name'
p10499
S'/AuxVariables/*/InitialCondition/<type>/ClosePackIC'
p10500
sa(dp10501
S'description'
p10502
g3
sS'subblocks'
p10503
NsS'parameters'
p10504
(lp10505
(dp10506
S'description'
p10507
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10508
sS'cpp_type'
p10509
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10510
sS'default'
p10511
g3
sS'name'
p10512
S'block'
p10513
sS'required'
p10514
I00
sS'group_name'
p10515
Nsa(dp10516
S'description'
p10517
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10518
sS'cpp_type'
p10519
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10520
sS'default'
p10521
g3
sS'name'
p10522
S'boundary'
p10523
sS'required'
p10524
I00
sS'group_name'
p10525
Nsa(dp10526
S'description'
p10527
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10528
sS'cpp_type'
p10529
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10530
sS'default'
p10531
g3
sS'name'
p10532
S'control_tags'
p10533
sS'required'
p10534
I00
sS'group_name'
p10535
S'Advanced'
p10536
sa(dp10537
S'description'
p10538
S'Set the enabled status of the MooseObject.\n'
p10539
sS'cpp_type'
p10540
S'bool'
p10541
sS'default'
p10542
S'1'
p10543
sS'name'
p10544
S'enable'
p10545
sS'required'
p10546
I00
sS'group_name'
p10547
S'Advanced'
p10548
sa(dp10549
S'description'
p10550
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10551
sS'cpp_type'
p10552
S'bool'
p10553
sS'default'
p10554
S'0'
p10555
sS'name'
p10556
S'ignore_uo_dependency'
p10557
sS'required'
p10558
I00
sS'group_name'
p10559
S'Advanced'
p10560
sa(dp10561
S'description'
p10562
g3
sS'cpp_type'
p10563
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10564
sS'default'
p10565
S'ConstantIC'
p10566
sS'name'
p10567
S'type'
p10568
sS'required'
p10569
I00
sS'group_name'
p10570
Nsa(dp10571
S'description'
p10572
S'The value to be set in IC\n'
p10573
sS'cpp_type'
p10574
S'double'
p10575
sS'default'
p10576
g3
sS'name'
p10577
S'value'
p10578
sS'required'
p10579
I01
sS'group_name'
p10580
Nsa(dp10581
S'description'
p10582
S'The variable this initial condition is supposed to provide values for.\n'
p10583
sS'cpp_type'
p10584
S'VariableName'
p10585
sS'default'
p10586
g3
sS'name'
p10587
S'variable'
p10588
sS'required'
p10589
I01
sS'group_name'
p10590
NsasS'name'
p10591
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p10592
sa(dp10593
S'description'
p10594
S'Cross-shaped initial condition\n'
p10595
sS'subblocks'
p10596
NsS'parameters'
p10597
(lp10598
(dp10599
S'description'
p10600
S'The amplitude\n'
p10601
sS'cpp_type'
p10602
S'double'
p10603
sS'default'
p10604
S'1'
p10605
sS'name'
p10606
S'amplitude'
p10607
sS'required'
p10608
I00
sS'group_name'
p10609
Nsa(dp10610
S'description'
p10611
S'The average value\n'
p10612
sS'cpp_type'
p10613
S'double'
p10614
sS'default'
p10615
S'0'
p10616
sS'name'
p10617
S'average'
p10618
sS'required'
p10619
I00
sS'group_name'
p10620
Nsa(dp10621
S'description'
p10622
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10623
sS'cpp_type'
p10624
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10625
sS'default'
p10626
g3
sS'name'
p10627
S'block'
p10628
sS'required'
p10629
I00
sS'group_name'
p10630
Nsa(dp10631
S'description'
p10632
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10633
sS'cpp_type'
p10634
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10635
sS'default'
p10636
g3
sS'name'
p10637
S'boundary'
p10638
sS'required'
p10639
I00
sS'group_name'
p10640
Nsa(dp10641
S'description'
p10642
S'A small area between the max value and the interface\n'
p10643
sS'cpp_type'
p10644
S'double'
p10645
sS'default'
p10646
S'0.03125'
p10647
sS'name'
p10648
S'buffer'
p10649
sS'required'
p10650
I00
sS'group_name'
p10651
Nsa(dp10652
S'description'
p10653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10654
sS'cpp_type'
p10655
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10656
sS'default'
p10657
g3
sS'name'
p10658
S'control_tags'
p10659
sS'required'
p10660
I00
sS'group_name'
p10661
S'Advanced'
p10662
sa(dp10663
S'description'
p10664
S'Set the enabled status of the MooseObject.\n'
p10665
sS'cpp_type'
p10666
S'bool'
p10667
sS'default'
p10668
S'1'
p10669
sS'name'
p10670
S'enable'
p10671
sS'required'
p10672
I00
sS'group_name'
p10673
S'Advanced'
p10674
sa(dp10675
S'description'
p10676
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10677
sS'cpp_type'
p10678
S'bool'
p10679
sS'default'
p10680
S'0'
p10681
sS'name'
p10682
S'ignore_uo_dependency'
p10683
sS'required'
p10684
I00
sS'group_name'
p10685
S'Advanced'
p10686
sa(dp10687
S'description'
p10688
S'The interface width\n'
p10689
sS'cpp_type'
p10690
S'double'
p10691
sS'default'
p10692
S'0.03125'
p10693
sS'name'
p10694
S'interface'
p10695
sS'required'
p10696
I00
sS'group_name'
p10697
Nsa(dp10698
S'description'
p10699
S'The length\n'
p10700
sS'cpp_type'
p10701
S'double'
p10702
sS'default'
p10703
S'0.75'
p10704
sS'name'
p10705
S'length'
p10706
sS'required'
p10707
I00
sS'group_name'
p10708
Nsa(dp10709
S'description'
p10710
g3
sS'cpp_type'
p10711
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10712
sS'default'
p10713
S'CrossIC'
p10714
sS'name'
p10715
S'type'
p10716
sS'required'
p10717
I00
sS'group_name'
p10718
Nsa(dp10719
S'description'
p10720
S'The variable this initial condition is supposed to provide values for.\n'
p10721
sS'cpp_type'
p10722
S'VariableName'
p10723
sS'default'
p10724
g3
sS'name'
p10725
S'variable'
p10726
sS'required'
p10727
I01
sS'group_name'
p10728
Nsa(dp10729
S'description'
p10730
S'The width\n'
p10731
sS'cpp_type'
p10732
S'double'
p10733
sS'default'
p10734
S'0.125'
p10735
sS'name'
p10736
S'width'
p10737
sS'required'
p10738
I00
sS'group_name'
p10739
Nsa(dp10740
S'description'
p10741
S'The x coordinate of the lower left-hand corner of the box\n'
p10742
sS'cpp_type'
p10743
S'double'
p10744
sS'default'
p10745
S'0'
p10746
sS'name'
p10747
S'x1'
p10748
sS'required'
p10749
I00
sS'group_name'
p10750
Nsa(dp10751
S'description'
p10752
S'The x coordinate of the upper right-hand corner of the box\n'
p10753
sS'cpp_type'
p10754
S'double'
p10755
sS'default'
p10756
S'1'
p10757
sS'name'
p10758
S'x2'
p10759
sS'required'
p10760
I00
sS'group_name'
p10761
Nsa(dp10762
S'description'
p10763
S'The y coordinate of the lower left-hand corner of the box\n'
p10764
sS'cpp_type'
p10765
S'double'
p10766
sS'default'
p10767
S'0'
p10768
sS'name'
p10769
S'y1'
p10770
sS'required'
p10771
I00
sS'group_name'
p10772
Nsa(dp10773
S'description'
p10774
S'The y coordinate of the upper right-hand corner of the box\n'
p10775
sS'cpp_type'
p10776
S'double'
p10777
sS'default'
p10778
S'1'
p10779
sS'name'
p10780
S'y2'
p10781
sS'required'
p10782
I00
sS'group_name'
p10783
NsasS'name'
p10784
S'/AuxVariables/*/InitialCondition/<type>/CrossIC'
p10785
sa(dp10786
S'description'
p10787
g3
sS'subblocks'
p10788
NsS'parameters'
p10789
(lp10790
(dp10791
S'description'
p10792
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10793
sS'cpp_type'
p10794
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10795
sS'default'
p10796
g3
sS'name'
p10797
S'block'
p10798
sS'required'
p10799
I00
sS'group_name'
p10800
Nsa(dp10801
S'description'
p10802
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10803
sS'cpp_type'
p10804
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10805
sS'default'
p10806
g3
sS'name'
p10807
S'boundary'
p10808
sS'required'
p10809
I00
sS'group_name'
p10810
Nsa(dp10811
S'description'
p10812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10813
sS'cpp_type'
p10814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10815
sS'default'
p10816
g3
sS'name'
p10817
S'control_tags'
p10818
sS'required'
p10819
I00
sS'group_name'
p10820
S'Advanced'
p10821
sa(dp10822
S'description'
p10823
S'Set the enabled status of the MooseObject.\n'
p10824
sS'cpp_type'
p10825
S'bool'
p10826
sS'default'
p10827
S'1'
p10828
sS'name'
p10829
S'enable'
p10830
sS'required'
p10831
I00
sS'group_name'
p10832
S'Advanced'
p10833
sa(dp10834
S'description'
p10835
S'The initial condition function.\n'
p10836
sS'cpp_type'
p10837
S'FunctionName'
p10838
sS'default'
p10839
g3
sS'name'
p10840
S'function'
p10841
sS'required'
p10842
I01
sS'group_name'
p10843
Nsa(dp10844
S'description'
p10845
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10846
sS'cpp_type'
p10847
S'bool'
p10848
sS'default'
p10849
S'0'
p10850
sS'name'
p10851
S'ignore_uo_dependency'
p10852
sS'required'
p10853
I00
sS'group_name'
p10854
S'Advanced'
p10855
sa(dp10856
S'description'
p10857
g3
sS'cpp_type'
p10858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10859
sS'default'
p10860
S'FunctionIC'
p10861
sS'name'
p10862
S'type'
p10863
sS'required'
p10864
I00
sS'group_name'
p10865
Nsa(dp10866
S'description'
p10867
S'The variable this initial condition is supposed to provide values for.\n'
p10868
sS'cpp_type'
p10869
S'VariableName'
p10870
sS'default'
p10871
g3
sS'name'
p10872
S'variable'
p10873
sS'required'
p10874
I01
sS'group_name'
p10875
NsasS'name'
p10876
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p10877
sa(dp10878
S'description'
p10879
g3
sS'subblocks'
p10880
NsS'parameters'
p10881
(lp10882
(dp10883
S'description'
p10884
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10885
sS'cpp_type'
p10886
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10887
sS'default'
p10888
g3
sS'name'
p10889
S'control_tags'
p10890
sS'required'
p10891
I00
sS'group_name'
p10892
S'Advanced'
p10893
sa(dp10894
S'description'
p10895
S'Set the enabled status of the MooseObject.\n'
p10896
sS'cpp_type'
p10897
S'bool'
p10898
sS'default'
p10899
S'1'
p10900
sS'name'
p10901
S'enable'
p10902
sS'required'
p10903
I00
sS'group_name'
p10904
S'Advanced'
p10905
sa(dp10906
S'description'
p10907
S'The initial condition function.\n'
p10908
sS'cpp_type'
p10909
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p10910
sS'default'
p10911
g3
sS'name'
p10912
S'function'
p10913
sS'required'
p10914
I01
sS'group_name'
p10915
Nsa(dp10916
S'description'
p10917
g3
sS'cpp_type'
p10918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10919
sS'default'
p10920
S'FunctionScalarIC'
p10921
sS'name'
p10922
S'type'
p10923
sS'required'
p10924
I00
sS'group_name'
p10925
Nsa(dp10926
S'description'
p10927
S'The variable this initial condition is supposed to provide values for.\n'
p10928
sS'cpp_type'
p10929
S'VariableName'
p10930
sS'default'
p10931
g3
sS'name'
p10932
S'variable'
p10933
sS'required'
p10934
I00
sS'group_name'
p10935
NsasS'name'
p10936
S'/AuxVariables/*/InitialCondition/<type>/FunctionScalarIC'
p10937
sa(dp10938
S'description'
p10939
S'Perturbed hexagonal polycrystal\n'
p10940
sS'subblocks'
p10941
NsS'parameters'
p10942
(lp10943
(dp10944
S'description'
p10945
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10946
sS'cpp_type'
p10947
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10948
sS'default'
p10949
g3
sS'name'
p10950
S'block'
p10951
sS'required'
p10952
I00
sS'group_name'
p10953
Nsa(dp10954
S'description'
p10955
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10956
sS'cpp_type'
p10957
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10958
sS'default'
p10959
g3
sS'name'
p10960
S'boundary'
p10961
sS'required'
p10962
I00
sS'group_name'
p10963
Nsa(dp10964
S'name'
p10965
S'coloring_algorithm'
p10966
sS'cpp_type'
p10967
S'MooseEnum'
p10968
sS'default'
p10969
S'legacy'
p10970
sS'description'
p10971
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p10972
sS'required'
p10973
I00
sS'options'
p10974
S'legacy bt jp power greedy'
p10975
sS'group_name'
p10976
Nsa(dp10977
S'description'
p10978
S'3D microstructure will be columnar in the z-direction?\n'
p10979
sS'cpp_type'
p10980
S'bool'
p10981
sS'default'
p10982
S'0'
p10983
sS'name'
p10984
S'columnar_3D'
p10985
sS'required'
p10986
I00
sS'group_name'
p10987
Nsa(dp10988
S'description'
p10989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10990
sS'cpp_type'
p10991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10992
sS'default'
p10993
g3
sS'name'
p10994
S'control_tags'
p10995
sS'required'
p10996
I00
sS'group_name'
p10997
S'Advanced'
p10998
sa(dp10999
S'description'
p11000
S'Set the enabled status of the MooseObject.\n'
p11001
sS'cpp_type'
p11002
S'bool'
p11003
sS'default'
p11004
S'1'
p11005
sS'name'
p11006
S'enable'
p11007
sS'required'
p11008
I00
sS'group_name'
p11009
S'Advanced'
p11010
sa(dp11011
S'description'
p11012
S'Number of grains being represented by the order parameters\n'
p11013
sS'cpp_type'
p11014
S'unsigned int'
p11015
sS'default'
p11016
g3
sS'name'
p11017
S'grain_num'
p11018
sS'required'
p11019
I01
sS'group_name'
p11020
Nsa(dp11021
S'description'
p11022
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11023
sS'cpp_type'
p11024
S'bool'
p11025
sS'default'
p11026
S'0'
p11027
sS'name'
p11028
S'ignore_uo_dependency'
p11029
sS'required'
p11030
I00
sS'group_name'
p11031
S'Advanced'
p11032
sa(dp11033
S'description'
p11034
S'The index for the current order parameter\n'
p11035
sS'cpp_type'
p11036
S'unsigned int'
p11037
sS'default'
p11038
g3
sS'name'
p11039
S'op_index'
p11040
sS'required'
p11041
I01
sS'group_name'
p11042
Nsa(dp11043
S'description'
p11044
S'Number of order parameters\n'
p11045
sS'cpp_type'
p11046
S'unsigned int'
p11047
sS'default'
p11048
g3
sS'name'
p11049
S'op_num'
p11050
sS'required'
p11051
I01
sS'group_name'
p11052
Nsa(dp11053
S'description'
p11054
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p11055
sS'cpp_type'
p11056
S'double'
p11057
sS'default'
p11058
S'0'
p11059
sS'name'
p11060
S'perturbation_percent'
p11061
sS'required'
p11062
I00
sS'group_name'
p11063
Nsa(dp11064
S'description'
p11065
S'The random seed\n'
p11066
sS'cpp_type'
p11067
S'unsigned int'
p11068
sS'default'
p11069
S'12444'
p11070
sS'name'
p11071
S'rand_seed'
p11072
sS'required'
p11073
I00
sS'group_name'
p11074
Nsa(dp11075
S'description'
p11076
g3
sS'cpp_type'
p11077
S'int'
p11078
sS'default'
p11079
S'1'
p11080
sS'name'
p11081
S'typ'
p11082
sS'required'
p11083
I00
sS'group_name'
p11084
Nsa(dp11085
S'description'
p11086
g3
sS'cpp_type'
p11087
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11088
sS'default'
p11089
S'HexPolycrystalIC'
p11090
sS'name'
p11091
S'type'
p11092
sS'required'
p11093
I00
sS'group_name'
p11094
Nsa(dp11095
S'description'
p11096
S'The variable this initial condition is supposed to provide values for.\n'
p11097
sS'cpp_type'
p11098
S'VariableName'
p11099
sS'default'
p11100
g3
sS'name'
p11101
S'variable'
p11102
sS'required'
p11103
I01
sS'group_name'
p11104
Nsa(dp11105
S'description'
p11106
S'Specifies offset of hexagon grid in x-direction\n'
p11107
sS'cpp_type'
p11108
S'double'
p11109
sS'default'
p11110
S'0.5'
p11111
sS'name'
p11112
S'x_offset'
p11113
sS'required'
p11114
I00
sS'group_name'
p11115
NsasS'name'
p11116
S'/AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC'
p11117
sa(dp11118
S'description'
p11119
S'Perturbed square lattice of smooth circles\n'
p11120
sS'subblocks'
p11121
NsS'parameters'
p11122
(lp11123
(dp11124
S'description'
p11125
S'in 3D, whether the objects are spheres or columns\n'
p11126
sS'cpp_type'
p11127
S'bool'
p11128
sS'default'
p11129
S'1'
p11130
sS'name'
p11131
S'3D_spheres'
p11132
sS'required'
p11133
I00
sS'group_name'
p11134
Nsa(dp11135
S'description'
p11136
S'Variation from central lattice position\n'
p11137
sS'cpp_type'
p11138
S'double'
p11139
sS'default'
p11140
g3
sS'name'
p11141
S'Rnd_variation'
p11142
sS'required'
p11143
I00
sS'group_name'
p11144
Nsa(dp11145
S'description'
p11146
S"Don't place any bubbles on the simulation cell boundaries\n"
p11147
sS'cpp_type'
p11148
S'bool'
p11149
sS'default'
p11150
S'1'
p11151
sS'name'
p11152
S'avoid_bounds'
p11153
sS'required'
p11154
I00
sS'group_name'
p11155
Nsa(dp11156
S'description'
p11157
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11158
sS'cpp_type'
p11159
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11160
sS'default'
p11161
g3
sS'name'
p11162
S'block'
p11163
sS'required'
p11164
I00
sS'group_name'
p11165
Nsa(dp11166
S'description'
p11167
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11168
sS'cpp_type'
p11169
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11170
sS'default'
p11171
g3
sS'name'
p11172
S'boundary'
p11173
sS'required'
p11174
I00
sS'group_name'
p11175
Nsa(dp11176
S'description'
p11177
S'Vector containing the number of bubbles along each side\n'
p11178
sS'cpp_type'
p11179
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p11180
sS'default'
p11181
g3
sS'name'
p11182
S'circles_per_side'
p11183
sS'required'
p11184
I01
sS'group_name'
p11185
Nsa(dp11186
S'description'
p11187
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11188
sS'cpp_type'
p11189
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11190
sS'default'
p11191
g3
sS'name'
p11192
S'control_tags'
p11193
sS'required'
p11194
I00
sS'group_name'
p11195
S'Advanced'
p11196
sa(dp11197
S'description'
p11198
S'Set the enabled status of the MooseObject.\n'
p11199
sS'cpp_type'
p11200
S'bool'
p11201
sS'default'
p11202
S'1'
p11203
sS'name'
p11204
S'enable'
p11205
sS'required'
p11206
I00
sS'group_name'
p11207
S'Advanced'
p11208
sa(dp11209
S'description'
p11210
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11211
sS'cpp_type'
p11212
S'bool'
p11213
sS'default'
p11214
S'0'
p11215
sS'name'
p11216
S'ignore_uo_dependency'
p11217
sS'required'
p11218
I00
sS'group_name'
p11219
S'Advanced'
p11220
sa(dp11221
S'description'
p11222
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11223
sS'cpp_type'
p11224
S'double'
p11225
sS'default'
p11226
S'0'
p11227
sS'name'
p11228
S'int_width'
p11229
sS'required'
p11230
I00
sS'group_name'
p11231
Nsa(dp11232
S'description'
p11233
S'The variable value inside the circle\n'
p11234
sS'cpp_type'
p11235
S'double'
p11236
sS'default'
p11237
g3
sS'name'
p11238
S'invalue'
p11239
sS'required'
p11240
I01
sS'group_name'
p11241
Nsa(dp11242
S'description'
p11243
S'The variable value outside the circle\n'
p11244
sS'cpp_type'
p11245
S'double'
p11246
sS'default'
p11247
g3
sS'name'
p11248
S'outvalue'
p11249
sS'required'
p11250
I01
sS'group_name'
p11251
Nsa(dp11252
S'description'
p11253
S'Variation from central lattice position\n'
p11254
sS'cpp_type'
p11255
S'double'
p11256
sS'default'
p11257
S'0'
p11258
sS'name'
p11259
S'pos_variation'
p11260
sS'required'
p11261
I00
sS'group_name'
p11262
Nsa(dp11263
S'description'
p11264
S'Mean radius value for the circels\n'
p11265
sS'cpp_type'
p11266
S'double'
p11267
sS'default'
p11268
g3
sS'name'
p11269
S'radius'
p11270
sS'required'
p11271
I01
sS'group_name'
p11272
Nsa(dp11273
S'description'
p11274
S'Plus or minus fraction of random variation in the bubble radius\n'
p11275
sS'cpp_type'
p11276
S'double'
p11277
sS'default'
p11278
S'0'
p11279
sS'name'
p11280
S'radius_variation'
p11281
sS'required'
p11282
I00
sS'group_name'
p11283
Nsa(dp11284
S'name'
p11285
S'radius_variation_type'
p11286
sS'cpp_type'
p11287
S'MooseEnum'
p11288
sS'default'
p11289
S'none'
p11290
sS'description'
p11291
S'Type of distribution that random circle radii will follow\n'
p11292
sS'required'
p11293
I00
sS'options'
p11294
S'uniform normal none'
p11295
sS'group_name'
p11296
Nsa(dp11297
S'description'
p11298
S'random seed\n'
p11299
sS'cpp_type'
p11300
S'unsigned int'
p11301
sS'default'
p11302
S'2000'
p11303
sS'name'
p11304
S'rand_seed'
p11305
sS'required'
p11306
I00
sS'group_name'
p11307
Nsa(dp11308
S'description'
p11309
g3
sS'cpp_type'
p11310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11311
sS'default'
p11312
S'LatticeSmoothCircleIC'
p11313
sS'name'
p11314
S'type'
p11315
sS'required'
p11316
I00
sS'group_name'
p11317
Nsa(dp11318
S'description'
p11319
S'The variable this initial condition is supposed to provide values for.\n'
p11320
sS'cpp_type'
p11321
S'VariableName'
p11322
sS'default'
p11323
g3
sS'name'
p11324
S'variable'
p11325
sS'required'
p11326
I01
sS'group_name'
p11327
Nsa(dp11328
S'description'
p11329
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p11330
sS'cpp_type'
p11331
S'bool'
p11332
sS'default'
p11333
S'0'
p11334
sS'name'
p11335
S'zero_gradient'
p11336
sS'required'
p11337
I00
sS'group_name'
p11338
NsasS'name'
p11339
S'/AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p11340
sa(dp11341
S'description'
p11342
S'Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n'
p11343
sS'subblocks'
p11344
NsS'parameters'
p11345
(lp11346
(dp11347
S'description'
p11348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11349
sS'cpp_type'
p11350
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11351
sS'default'
p11352
g3
sS'name'
p11353
S'block'
p11354
sS'required'
p11355
I00
sS'group_name'
p11356
Nsa(dp11357
S'description'
p11358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11359
sS'cpp_type'
p11360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11361
sS'default'
p11362
g3
sS'name'
p11363
S'boundary'
p11364
sS'required'
p11365
I00
sS'group_name'
p11366
Nsa(dp11367
S'description'
p11368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11369
sS'cpp_type'
p11370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11371
sS'default'
p11372
g3
sS'name'
p11373
S'control_tags'
p11374
sS'required'
p11375
I00
sS'group_name'
p11376
S'Advanced'
p11377
sa(dp11378
S'description'
p11379
S'The corner coordinates boxes\n'
p11380
sS'cpp_type'
p11381
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p11382
sS'default'
p11383
g3
sS'name'
p11384
S'corners'
p11385
sS'required'
p11386
I01
sS'group_name'
p11387
Nsa(dp11388
S'description'
p11389
S'Set the enabled status of the MooseObject.\n'
p11390
sS'cpp_type'
p11391
S'bool'
p11392
sS'default'
p11393
S'1'
p11394
sS'name'
p11395
S'enable'
p11396
sS'required'
p11397
I00
sS'group_name'
p11398
S'Advanced'
p11399
sa(dp11400
S'description'
p11401
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11402
sS'cpp_type'
p11403
S'bool'
p11404
sS'default'
p11405
S'0'
p11406
sS'name'
p11407
S'ignore_uo_dependency'
p11408
sS'required'
p11409
I00
sS'group_name'
p11410
S'Advanced'
p11411
sa(dp11412
S'description'
p11413
S'The value of the variable inside each box (one value per box or a single value for all boxes)\n'
p11414
sS'cpp_type'
p11415
S'std::vector<double, std::allocator<double> >'
p11416
sS'default'
p11417
g3
sS'name'
p11418
S'inside'
p11419
sS'required'
p11420
I01
sS'group_name'
p11421
Nsa(dp11422
S'description'
p11423
S'The coordinates of the opposite corners of the boxes\n'
p11424
sS'cpp_type'
p11425
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p11426
sS'default'
p11427
g3
sS'name'
p11428
S'opposite_corners'
p11429
sS'required'
p11430
I01
sS'group_name'
p11431
Nsa(dp11432
S'description'
p11433
S'The value of the variable outside the box\n'
p11434
sS'cpp_type'
p11435
S'double'
p11436
sS'default'
p11437
S'0'
p11438
sS'name'
p11439
S'outside'
p11440
sS'required'
p11441
I00
sS'group_name'
p11442
Nsa(dp11443
S'description'
p11444
g3
sS'cpp_type'
p11445
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11446
sS'default'
p11447
S'MultiBoundingBoxIC'
p11448
sS'name'
p11449
S'type'
p11450
sS'required'
p11451
I00
sS'group_name'
p11452
Nsa(dp11453
S'description'
p11454
S'The variable this initial condition is supposed to provide values for.\n'
p11455
sS'cpp_type'
p11456
S'VariableName'
p11457
sS'default'
p11458
g3
sS'name'
p11459
S'variable'
p11460
sS'required'
p11461
I01
sS'group_name'
p11462
NsasS'name'
p11463
S'/AuxVariables/*/InitialCondition/<type>/MultiBoundingBoxIC'
p11464
sa(dp11465
S'description'
p11466
S'Random distribution of smooth circles with given minimum spacing\n'
p11467
sS'subblocks'
p11468
NsS'parameters'
p11469
(lp11470
(dp11471
S'description'
p11472
S'in 3D, whether the objects are spheres or columns\n'
p11473
sS'cpp_type'
p11474
S'bool'
p11475
sS'default'
p11476
S'1'
p11477
sS'name'
p11478
S'3D_spheres'
p11479
sS'required'
p11480
I00
sS'group_name'
p11481
Nsa(dp11482
S'description'
p11483
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11484
sS'cpp_type'
p11485
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11486
sS'default'
p11487
g3
sS'name'
p11488
S'block'
p11489
sS'required'
p11490
I00
sS'group_name'
p11491
Nsa(dp11492
S'description'
p11493
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11494
sS'cpp_type'
p11495
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11496
sS'default'
p11497
g3
sS'name'
p11498
S'boundary'
p11499
sS'required'
p11500
I00
sS'group_name'
p11501
Nsa(dp11502
S'description'
p11503
S'minimum spacing of bubbles, measured from center to center\n'
p11504
sS'cpp_type'
p11505
S'double'
p11506
sS'default'
p11507
g3
sS'name'
p11508
S'bubspac'
p11509
sS'required'
p11510
I01
sS'group_name'
p11511
Nsa(dp11512
S'description'
p11513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11514
sS'cpp_type'
p11515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11516
sS'default'
p11517
g3
sS'name'
p11518
S'control_tags'
p11519
sS'required'
p11520
I00
sS'group_name'
p11521
S'Advanced'
p11522
sa(dp11523
S'description'
p11524
S'Set the enabled status of the MooseObject.\n'
p11525
sS'cpp_type'
p11526
S'bool'
p11527
sS'default'
p11528
S'1'
p11529
sS'name'
p11530
S'enable'
p11531
sS'required'
p11532
I00
sS'group_name'
p11533
S'Advanced'
p11534
sa(dp11535
S'description'
p11536
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11537
sS'cpp_type'
p11538
S'bool'
p11539
sS'default'
p11540
S'0'
p11541
sS'name'
p11542
S'ignore_uo_dependency'
p11543
sS'required'
p11544
I00
sS'group_name'
p11545
S'Advanced'
p11546
sa(dp11547
S'description'
p11548
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11549
sS'cpp_type'
p11550
S'double'
p11551
sS'default'
p11552
S'0'
p11553
sS'name'
p11554
S'int_width'
p11555
sS'required'
p11556
I00
sS'group_name'
p11557
Nsa(dp11558
S'description'
p11559
S'The variable value inside the circle\n'
p11560
sS'cpp_type'
p11561
S'double'
p11562
sS'default'
p11563
g3
sS'name'
p11564
S'invalue'
p11565
sS'required'
p11566
I01
sS'group_name'
p11567
Nsa(dp11568
S'description'
p11569
S'The number of bubbles to place\n'
p11570
sS'cpp_type'
p11571
S'unsigned int'
p11572
sS'default'
p11573
g3
sS'name'
p11574
S'numbub'
p11575
sS'required'
p11576
I01
sS'group_name'
p11577
Nsa(dp11578
S'description'
p11579
S'The number of tries\n'
p11580
sS'cpp_type'
p11581
S'unsigned int'
p11582
sS'default'
p11583
S'1000'
p11584
sS'name'
p11585
S'numtries'
p11586
sS'required'
p11587
I00
sS'group_name'
p11588
Nsa(dp11589
S'description'
p11590
S'The variable value outside the circle\n'
p11591
sS'cpp_type'
p11592
S'double'
p11593
sS'default'
p11594
g3
sS'name'
p11595
S'outvalue'
p11596
sS'required'
p11597
I01
sS'group_name'
p11598
Nsa(dp11599
S'description'
p11600
S'Mean radius value for the circles\n'
p11601
sS'cpp_type'
p11602
S'double'
p11603
sS'default'
p11604
g3
sS'name'
p11605
S'radius'
p11606
sS'required'
p11607
I01
sS'group_name'
p11608
Nsa(dp11609
S'description'
p11610
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p11611
sS'cpp_type'
p11612
S'double'
p11613
sS'default'
p11614
S'0'
p11615
sS'name'
p11616
S'radius_variation'
p11617
sS'required'
p11618
I00
sS'group_name'
p11619
Nsa(dp11620
S'name'
p11621
S'radius_variation_type'
p11622
sS'cpp_type'
p11623
S'MooseEnum'
p11624
sS'default'
p11625
S'none'
p11626
sS'description'
p11627
S'Type of distribution that random circle radii will follow\n'
p11628
sS'required'
p11629
I00
sS'options'
p11630
S'uniform normal none'
p11631
sS'group_name'
p11632
Nsa(dp11633
S'description'
p11634
S'Seed value for the random number generator\n'
p11635
sS'cpp_type'
p11636
S'unsigned int'
p11637
sS'default'
p11638
S'12345'
p11639
sS'name'
p11640
S'rand_seed'
p11641
sS'required'
p11642
I00
sS'group_name'
p11643
Nsa(dp11644
S'description'
p11645
g3
sS'cpp_type'
p11646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11647
sS'default'
p11648
S'MultiSmoothCircleIC'
p11649
sS'name'
p11650
S'type'
p11651
sS'required'
p11652
I00
sS'group_name'
p11653
Nsa(dp11654
S'description'
p11655
S'The variable this initial condition is supposed to provide values for.\n'
p11656
sS'cpp_type'
p11657
S'VariableName'
p11658
sS'default'
p11659
g3
sS'name'
p11660
S'variable'
p11661
sS'required'
p11662
I01
sS'group_name'
p11663
Nsa(dp11664
S'description'
p11665
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p11666
sS'cpp_type'
p11667
S'bool'
p11668
sS'default'
p11669
S'0'
p11670
sS'name'
p11671
S'zero_gradient'
p11672
sS'required'
p11673
I00
sS'group_name'
p11674
NsasS'name'
p11675
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p11676
sa(dp11677
S'description'
p11678
S'Random distribution of smooth ellipse with given minimum spacing\n'
p11679
sS'subblocks'
p11680
NsS'parameters'
p11681
(lp11682
(dp11683
S'description'
p11684
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11685
sS'cpp_type'
p11686
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11687
sS'default'
p11688
g3
sS'name'
p11689
S'block'
p11690
sS'required'
p11691
I00
sS'group_name'
p11692
Nsa(dp11693
S'description'
p11694
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11695
sS'cpp_type'
p11696
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11697
sS'default'
p11698
g3
sS'name'
p11699
S'boundary'
p11700
sS'required'
p11701
I00
sS'group_name'
p11702
Nsa(dp11703
S'description'
p11704
S'Vector of the minimum spacing of bubbles of one type, measured from center to center\n'
p11705
sS'cpp_type'
p11706
S'std::vector<double, std::allocator<double> >'
p11707
sS'default'
p11708
g3
sS'name'
p11709
S'bubspac'
p11710
sS'required'
p11711
I01
sS'group_name'
p11712
Nsa(dp11713
S'description'
p11714
S'Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n'
p11715
sS'cpp_type'
p11716
S'bool'
p11717
sS'default'
p11718
S'0'
p11719
sS'name'
p11720
S'check_extremes'
p11721
sS'required'
p11722
I00
sS'group_name'
p11723
Nsa(dp11724
S'description'
p11725
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11726
sS'cpp_type'
p11727
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11728
sS'default'
p11729
g3
sS'name'
p11730
S'control_tags'
p11731
sS'required'
p11732
I00
sS'group_name'
p11733
S'Advanced'
p11734
sa(dp11735
S'description'
p11736
S'Set the enabled status of the MooseObject.\n'
p11737
sS'cpp_type'
p11738
S'bool'
p11739
sS'default'
p11740
S'1'
p11741
sS'name'
p11742
S'enable'
p11743
sS'required'
p11744
I00
sS'group_name'
p11745
S'Advanced'
p11746
sa(dp11747
S'description'
p11748
S'Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n'
p11749
sS'cpp_type'
p11750
S'std::vector<double, std::allocator<double> >'
p11751
sS'default'
p11752
g3
sS'name'
p11753
S'exponent'
p11754
sS'required'
p11755
I00
sS'group_name'
p11756
Nsa(dp11757
S'description'
p11758
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11759
sS'cpp_type'
p11760
S'bool'
p11761
sS'default'
p11762
S'0'
p11763
sS'name'
p11764
S'ignore_uo_dependency'
p11765
sS'required'
p11766
I00
sS'group_name'
p11767
S'Advanced'
p11768
sa(dp11769
S'description'
p11770
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11771
sS'cpp_type'
p11772
S'double'
p11773
sS'default'
p11774
S'0'
p11775
sS'name'
p11776
S'int_width'
p11777
sS'required'
p11778
I00
sS'group_name'
p11779
Nsa(dp11780
S'description'
p11781
S'The variable value inside the superellipsoid\n'
p11782
sS'cpp_type'
p11783
S'double'
p11784
sS'default'
p11785
g3
sS'name'
p11786
S'invalue'
p11787
sS'required'
p11788
I01
sS'group_name'
p11789
Nsa(dp11790
S'description'
p11791
S'The number of tries\n'
p11792
sS'cpp_type'
p11793
S'unsigned int'
p11794
sS'default'
p11795
S'1000'
p11796
sS'name'
p11797
S'max_num_tries'
p11798
sS'required'
p11799
I00
sS'group_name'
p11800
Nsa(dp11801
S'description'
p11802
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p11803
sS'cpp_type'
p11804
S'double'
p11805
sS'default'
p11806
g3
sS'name'
p11807
S'nestedvalue'
p11808
sS'required'
p11809
I00
sS'group_name'
p11810
Nsa(dp11811
S'description'
p11812
S'Vector of the number of bubbles to place\n'
p11813
sS'cpp_type'
p11814
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p11815
sS'default'
p11816
g3
sS'name'
p11817
S'numbub'
p11818
sS'required'
p11819
I01
sS'group_name'
p11820
Nsa(dp11821
S'description'
p11822
S'The variable value outside the superellipsoid\n'
p11823
sS'cpp_type'
p11824
S'double'
p11825
sS'default'
p11826
g3
sS'name'
p11827
S'outvalue'
p11828
sS'required'
p11829
I01
sS'group_name'
p11830
Nsa(dp11831
S'description'
p11832
S'Check all Superellipsoid centers for overlap with other Superellipsoids.\n'
p11833
sS'cpp_type'
p11834
S'bool'
p11835
sS'default'
p11836
S'0'
p11837
sS'name'
p11838
S'prevent_overlap'
p11839
sS'required'
p11840
I00
sS'group_name'
p11841
Nsa(dp11842
S'description'
p11843
S'Seed value for the random number generator\n'
p11844
sS'cpp_type'
p11845
S'unsigned int'
p11846
sS'default'
p11847
S'12345'
p11848
sS'name'
p11849
S'rand_seed'
p11850
sS'required'
p11851
I00
sS'group_name'
p11852
Nsa(dp11853
S'description'
p11854
S'Vector of mean semiaxis values in the x direction for the ellipse\n'
p11855
sS'cpp_type'
p11856
S'std::vector<double, std::allocator<double> >'
p11857
sS'default'
p11858
g3
sS'name'
p11859
S'semiaxis_a'
p11860
sS'required'
p11861
I01
sS'group_name'
p11862
Nsa(dp11863
S'description'
p11864
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n'
p11865
sS'cpp_type'
p11866
S'std::vector<double, std::allocator<double> >'
p11867
sS'default'
p11868
g3
sS'name'
p11869
S'semiaxis_a_variation'
p11870
sS'required'
p11871
I00
sS'group_name'
p11872
Nsa(dp11873
S'description'
p11874
S'Vector of mean semiaxis values in the y direction for the ellipse\n'
p11875
sS'cpp_type'
p11876
S'std::vector<double, std::allocator<double> >'
p11877
sS'default'
p11878
g3
sS'name'
p11879
S'semiaxis_b'
p11880
sS'required'
p11881
I01
sS'group_name'
p11882
Nsa(dp11883
S'description'
p11884
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n'
p11885
sS'cpp_type'
p11886
S'std::vector<double, std::allocator<double> >'
p11887
sS'default'
p11888
g3
sS'name'
p11889
S'semiaxis_b_variation'
p11890
sS'required'
p11891
I00
sS'group_name'
p11892
Nsa(dp11893
S'description'
p11894
S'Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n'
p11895
sS'cpp_type'
p11896
S'std::vector<double, std::allocator<double> >'
p11897
sS'default'
p11898
g3
sS'name'
p11899
S'semiaxis_c'
p11900
sS'required'
p11901
I01
sS'group_name'
p11902
Nsa(dp11903
S'description'
p11904
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n'
p11905
sS'cpp_type'
p11906
S'std::vector<double, std::allocator<double> >'
p11907
sS'default'
p11908
g3
sS'name'
p11909
S'semiaxis_c_variation'
p11910
sS'required'
p11911
I00
sS'group_name'
p11912
Nsa(dp11913
S'name'
p11914
S'semiaxis_variation_type'
p11915
sS'cpp_type'
p11916
S'MooseEnum'
p11917
sS'default'
p11918
S'none'
p11919
sS'description'
p11920
S'Type of distribution that random superellipsoid semiaxes will follow\n'
p11921
sS'required'
p11922
I00
sS'options'
p11923
S'uniform normal none'
p11924
sS'group_name'
p11925
Nsa(dp11926
S'description'
p11927
g3
sS'cpp_type'
p11928
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11929
sS'default'
p11930
S'MultiSmoothSuperellipsoidIC'
p11931
sS'name'
p11932
S'type'
p11933
sS'required'
p11934
I00
sS'group_name'
p11935
Nsa(dp11936
S'description'
p11937
S'The variable this initial condition is supposed to provide values for.\n'
p11938
sS'cpp_type'
p11939
S'VariableName'
p11940
sS'default'
p11941
g3
sS'name'
p11942
S'variable'
p11943
sS'required'
p11944
I01
sS'group_name'
p11945
Nsa(dp11946
S'description'
p11947
S'If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n'
p11948
sS'cpp_type'
p11949
S'bool'
p11950
sS'default'
p11951
S'1'
p11952
sS'name'
p11953
S'vary_axes_independently'
p11954
sS'required'
p11955
I00
sS'group_name'
p11956
Nsa(dp11957
S'description'
p11958
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p11959
sS'cpp_type'
p11960
S'bool'
p11961
sS'default'
p11962
S'0'
p11963
sS'name'
p11964
S'zero_gradient'
p11965
sS'required'
p11966
I00
sS'group_name'
p11967
NsasS'name'
p11968
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothSuperellipsoidIC'
p11969
sa(dp11970
S'description'
p11971
g3
sS'subblocks'
p11972
NsS'parameters'
p11973
(lp11974
(dp11975
S'description'
p11976
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11977
sS'cpp_type'
p11978
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11979
sS'default'
p11980
g3
sS'name'
p11981
S'block'
p11982
sS'required'
p11983
I00
sS'group_name'
p11984
Nsa(dp11985
S'description'
p11986
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11987
sS'cpp_type'
p11988
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11989
sS'default'
p11990
g3
sS'name'
p11991
S'boundary'
p11992
sS'required'
p11993
I00
sS'group_name'
p11994
Nsa(dp11995
S'description'
p11996
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11997
sS'cpp_type'
p11998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11999
sS'default'
p12000
g3
sS'name'
p12001
S'control_tags'
p12002
sS'required'
p12003
I00
sS'group_name'
p12004
S'Advanced'
p12005
sa(dp12006
S'name'
p12007
S'crystal_structure'
p12008
sS'cpp_type'
p12009
S'MooseEnum'
p12010
sS'default'
p12011
g3
sS'description'
p12012
S'The type of crystal structure\n'
p12013
sS'required'
p12014
I00
sS'options'
p12015
S'FCC BCC'
p12016
sS'group_name'
p12017
Nsa(dp12018
S'description'
p12019
S'Set the enabled status of the MooseObject.\n'
p12020
sS'cpp_type'
p12021
S'bool'
p12022
sS'default'
p12023
S'1'
p12024
sS'name'
p12025
S'enable'
p12026
sS'required'
p12027
I00
sS'group_name'
p12028
S'Advanced'
p12029
sa(dp12030
S'description'
p12031
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12032
sS'cpp_type'
p12033
S'bool'
p12034
sS'default'
p12035
S'0'
p12036
sS'name'
p12037
S'ignore_uo_dependency'
p12038
sS'required'
p12039
I00
sS'group_name'
p12040
S'Advanced'
p12041
sa(dp12042
S'description'
p12043
S'Value inside sinusoids\n'
p12044
sS'cpp_type'
p12045
S'double'
p12046
sS'default'
p12047
S'1'
p12048
sS'name'
p12049
S'inside'
p12050
sS'required'
p12051
I00
sS'group_name'
p12052
Nsa(dp12053
S'description'
p12054
S'The lattice constant off the crystal structure\n'
p12055
sS'cpp_type'
p12056
S'double'
p12057
sS'default'
p12058
g3
sS'name'
p12059
S'lc'
p12060
sS'required'
p12061
I01
sS'group_name'
p12062
Nsa(dp12063
S'description'
p12064
S'Upper bound of the randomly generated values\n'
p12065
sS'cpp_type'
p12066
S'double'
p12067
sS'default'
p12068
S'1'
p12069
sS'name'
p12070
S'max'
p12071
sS'required'
p12072
I00
sS'group_name'
p12073
Nsa(dp12074
S'description'
p12075
S'Lower bound of the randomly generated values\n'
p12076
sS'cpp_type'
p12077
S'double'
p12078
sS'default'
p12079
S'0'
p12080
sS'name'
p12081
S'min'
p12082
sS'required'
p12083
I00
sS'group_name'
p12084
Nsa(dp12085
S'description'
p12086
S'Value outside sinusoids\n'
p12087
sS'cpp_type'
p12088
S'double'
p12089
sS'default'
p12090
S'0'
p12091
sS'name'
p12092
S'outside'
p12093
sS'required'
p12094
I00
sS'group_name'
p12095
Nsa(dp12096
S'description'
p12097
S'Seed value for the random number generator\n'
p12098
sS'cpp_type'
p12099
S'unsigned int'
p12100
sS'default'
p12101
S'0'
p12102
sS'name'
p12103
S'seed'
p12104
sS'required'
p12105
I00
sS'group_name'
p12106
Nsa(dp12107
S'description'
p12108
g3
sS'cpp_type'
p12109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12110
sS'default'
p12111
S'PFCFreezingIC'
p12112
sS'name'
p12113
S'type'
p12114
sS'required'
p12115
I00
sS'group_name'
p12116
Nsa(dp12117
S'description'
p12118
S'The variable this initial condition is supposed to provide values for.\n'
p12119
sS'cpp_type'
p12120
S'VariableName'
p12121
sS'default'
p12122
g3
sS'name'
p12123
S'variable'
p12124
sS'required'
p12125
I01
sS'group_name'
p12126
Nsa(dp12127
S'description'
p12128
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p12129
sS'cpp_type'
p12130
S'double'
p12131
sS'default'
p12132
g3
sS'name'
p12133
S'x1'
p12134
sS'required'
p12135
I01
sS'group_name'
p12136
Nsa(dp12137
S'description'
p12138
S'The x coordinate of the upper right-hand corner of the box\n'
p12139
sS'cpp_type'
p12140
S'double'
p12141
sS'default'
p12142
g3
sS'name'
p12143
S'x2'
p12144
sS'required'
p12145
I01
sS'group_name'
p12146
Nsa(dp12147
S'description'
p12148
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p12149
sS'cpp_type'
p12150
S'double'
p12151
sS'default'
p12152
g3
sS'name'
p12153
S'y1'
p12154
sS'required'
p12155
I01
sS'group_name'
p12156
Nsa(dp12157
S'description'
p12158
S'The y coordinate of the upper right-hand corner of the box\n'
p12159
sS'cpp_type'
p12160
S'double'
p12161
sS'default'
p12162
g3
sS'name'
p12163
S'y2'
p12164
sS'required'
p12165
I01
sS'group_name'
p12166
Nsa(dp12167
S'description'
p12168
S'The z coordinate of the lower left-hand corner of the box\n'
p12169
sS'cpp_type'
p12170
S'double'
p12171
sS'default'
p12172
S'0'
p12173
sS'name'
p12174
S'z1'
p12175
sS'required'
p12176
I00
sS'group_name'
p12177
Nsa(dp12178
S'description'
p12179
S'The z coordinate of the upper right-hand corner of the box\n'
p12180
sS'cpp_type'
p12181
S'double'
p12182
sS'default'
p12183
S'0'
p12184
sS'name'
p12185
S'z2'
p12186
sS'required'
p12187
I00
sS'group_name'
p12188
NsasS'name'
p12189
S'/AuxVariables/*/InitialCondition/<type>/PFCFreezingIC'
p12190
sa(dp12191
S'description'
p12192
S'Random initial condition for a polycrystalline material\n'
p12193
sS'subblocks'
p12194
NsS'parameters'
p12195
(lp12196
(dp12197
S'description'
p12198
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12199
sS'cpp_type'
p12200
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12201
sS'default'
p12202
g3
sS'name'
p12203
S'block'
p12204
sS'required'
p12205
I00
sS'group_name'
p12206
Nsa(dp12207
S'description'
p12208
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12209
sS'cpp_type'
p12210
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12211
sS'default'
p12212
g3
sS'name'
p12213
S'boundary'
p12214
sS'required'
p12215
I00
sS'group_name'
p12216
Nsa(dp12217
S'description'
p12218
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12219
sS'cpp_type'
p12220
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12221
sS'default'
p12222
g3
sS'name'
p12223
S'control_tags'
p12224
sS'required'
p12225
I00
sS'group_name'
p12226
S'Advanced'
p12227
sa(dp12228
S'description'
p12229
S'Set the enabled status of the MooseObject.\n'
p12230
sS'cpp_type'
p12231
S'bool'
p12232
sS'default'
p12233
S'1'
p12234
sS'name'
p12235
S'enable'
p12236
sS'required'
p12237
I00
sS'group_name'
p12238
S'Advanced'
p12239
sa(dp12240
S'description'
p12241
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12242
sS'cpp_type'
p12243
S'bool'
p12244
sS'default'
p12245
S'0'
p12246
sS'name'
p12247
S'ignore_uo_dependency'
p12248
sS'required'
p12249
I00
sS'group_name'
p12250
S'Advanced'
p12251
sa(dp12252
S'description'
p12253
S'The index for the current order parameter\n'
p12254
sS'cpp_type'
p12255
S'unsigned int'
p12256
sS'default'
p12257
g3
sS'name'
p12258
S'op_index'
p12259
sS'required'
p12260
I01
sS'group_name'
p12261
Nsa(dp12262
S'description'
p12263
S'Number of order parameters\n'
p12264
sS'cpp_type'
p12265
S'unsigned int'
p12266
sS'default'
p12267
g3
sS'name'
p12268
S'op_num'
p12269
sS'required'
p12270
I01
sS'group_name'
p12271
Nsa(dp12272
S'description'
p12273
S'Type of random grain structure\n'
p12274
sS'cpp_type'
p12275
S'unsigned int'
p12276
sS'default'
p12277
g3
sS'name'
p12278
S'typ'
p12279
sS'required'
p12280
I01
sS'group_name'
p12281
Nsa(dp12282
S'description'
p12283
g3
sS'cpp_type'
p12284
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12285
sS'default'
p12286
S'PolycrystalRandomIC'
p12287
sS'name'
p12288
S'type'
p12289
sS'required'
p12290
I00
sS'group_name'
p12291
Nsa(dp12292
S'description'
p12293
S'The variable this initial condition is supposed to provide values for.\n'
p12294
sS'cpp_type'
p12295
S'VariableName'
p12296
sS'default'
p12297
g3
sS'name'
p12298
S'variable'
p12299
sS'required'
p12300
I01
sS'group_name'
p12301
NsasS'name'
p12302
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC'
p12303
sa(dp12304
S'description'
p12305
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p12306
sS'subblocks'
p12307
NsS'parameters'
p12308
(lp12309
(dp12310
S'description'
p12311
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12312
sS'cpp_type'
p12313
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12314
sS'default'
p12315
g3
sS'name'
p12316
S'block'
p12317
sS'required'
p12318
I00
sS'group_name'
p12319
Nsa(dp12320
S'description'
p12321
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12322
sS'cpp_type'
p12323
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12324
sS'default'
p12325
g3
sS'name'
p12326
S'boundary'
p12327
sS'required'
p12328
I00
sS'group_name'
p12329
Nsa(dp12330
S'name'
p12331
S'coloring_algorithm'
p12332
sS'cpp_type'
p12333
S'MooseEnum'
p12334
sS'default'
p12335
S'legacy'
p12336
sS'description'
p12337
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p12338
sS'required'
p12339
I00
sS'options'
p12340
S'legacy bt jp power greedy'
p12341
sS'group_name'
p12342
Nsa(dp12343
S'description'
p12344
S'3D microstructure will be columnar in the z-direction?\n'
p12345
sS'cpp_type'
p12346
S'bool'
p12347
sS'default'
p12348
S'0'
p12349
sS'name'
p12350
S'columnar_3D'
p12351
sS'required'
p12352
I00
sS'group_name'
p12353
Nsa(dp12354
S'description'
p12355
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12356
sS'cpp_type'
p12357
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12358
sS'default'
p12359
g3
sS'name'
p12360
S'control_tags'
p12361
sS'required'
p12362
I00
sS'group_name'
p12363
S'Advanced'
p12364
sa(dp12365
S'description'
p12366
S'Set the enabled status of the MooseObject.\n'
p12367
sS'cpp_type'
p12368
S'bool'
p12369
sS'default'
p12370
S'1'
p12371
sS'name'
p12372
S'enable'
p12373
sS'required'
p12374
I00
sS'group_name'
p12375
S'Advanced'
p12376
sa(dp12377
S'description'
p12378
S'Number of grains being represented by the order parameters\n'
p12379
sS'cpp_type'
p12380
S'unsigned int'
p12381
sS'default'
p12382
g3
sS'name'
p12383
S'grain_num'
p12384
sS'required'
p12385
I01
sS'group_name'
p12386
Nsa(dp12387
S'description'
p12388
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12389
sS'cpp_type'
p12390
S'bool'
p12391
sS'default'
p12392
S'0'
p12393
sS'name'
p12394
S'ignore_uo_dependency'
p12395
sS'required'
p12396
I00
sS'group_name'
p12397
S'Advanced'
p12398
sa(dp12399
S'description'
p12400
S'The index for the current order parameter\n'
p12401
sS'cpp_type'
p12402
S'unsigned int'
p12403
sS'default'
p12404
g3
sS'name'
p12405
S'op_index'
p12406
sS'required'
p12407
I01
sS'group_name'
p12408
Nsa(dp12409
S'description'
p12410
S'Number of order parameters\n'
p12411
sS'cpp_type'
p12412
S'unsigned int'
p12413
sS'default'
p12414
g3
sS'name'
p12415
S'op_num'
p12416
sS'required'
p12417
I01
sS'group_name'
p12418
Nsa(dp12419
S'description'
p12420
S'The random seed\n'
p12421
sS'cpp_type'
p12422
S'unsigned int'
p12423
sS'default'
p12424
S'12444'
p12425
sS'name'
p12426
S'rand_seed'
p12427
sS'required'
p12428
I00
sS'group_name'
p12429
Nsa(dp12430
S'description'
p12431
g3
sS'cpp_type'
p12432
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12433
sS'default'
p12434
S'PolycrystalReducedIC'
p12435
sS'name'
p12436
S'type'
p12437
sS'required'
p12438
I00
sS'group_name'
p12439
Nsa(dp12440
S'description'
p12441
S'The variable this initial condition is supposed to provide values for.\n'
p12442
sS'cpp_type'
p12443
S'VariableName'
p12444
sS'default'
p12445
g3
sS'name'
p12446
S'variable'
p12447
sS'required'
p12448
I01
sS'group_name'
p12449
NsasS'name'
p12450
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC'
p12451
sa(dp12452
S'description'
p12453
S'Random distribution of smooth circles with given minimum spacing\n'
p12454
sS'subblocks'
p12455
NsS'parameters'
p12456
(lp12457
(dp12458
S'description'
p12459
S'in 3D, whether the objects are spheres or columns\n'
p12460
sS'cpp_type'
p12461
S'bool'
p12462
sS'default'
p12463
S'1'
p12464
sS'name'
p12465
S'3D_spheres'
p12466
sS'required'
p12467
I00
sS'group_name'
p12468
Nsa(dp12469
S'description'
p12470
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12471
sS'cpp_type'
p12472
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12473
sS'default'
p12474
g3
sS'name'
p12475
S'block'
p12476
sS'required'
p12477
I00
sS'group_name'
p12478
Nsa(dp12479
S'description'
p12480
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12481
sS'cpp_type'
p12482
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12483
sS'default'
p12484
g3
sS'name'
p12485
S'boundary'
p12486
sS'required'
p12487
I00
sS'group_name'
p12488
Nsa(dp12489
S'description'
p12490
S'minimum spacing of bubbles, measured from center to center\n'
p12491
sS'cpp_type'
p12492
S'double'
p12493
sS'default'
p12494
g3
sS'name'
p12495
S'bubspac'
p12496
sS'required'
p12497
I01
sS'group_name'
p12498
Nsa(dp12499
S'description'
p12500
S'3D microstructure will be columnar in the z-direction?\n'
p12501
sS'cpp_type'
p12502
S'bool'
p12503
sS'default'
p12504
S'0'
p12505
sS'name'
p12506
S'columnar_3D'
p12507
sS'required'
p12508
I00
sS'group_name'
p12509
Nsa(dp12510
S'description'
p12511
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12512
sS'cpp_type'
p12513
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12514
sS'default'
p12515
g3
sS'name'
p12516
S'control_tags'
p12517
sS'required'
p12518
I00
sS'group_name'
p12519
S'Advanced'
p12520
sa(dp12521
S'description'
p12522
S'Set the enabled status of the MooseObject.\n'
p12523
sS'cpp_type'
p12524
S'bool'
p12525
sS'default'
p12526
S'1'
p12527
sS'name'
p12528
S'enable'
p12529
sS'required'
p12530
I00
sS'group_name'
p12531
S'Advanced'
p12532
sa(dp12533
S'description'
p12534
S'Number of grains being represented by the order parameters\n'
p12535
sS'cpp_type'
p12536
S'unsigned int'
p12537
sS'default'
p12538
g3
sS'name'
p12539
S'grain_num'
p12540
sS'required'
p12541
I01
sS'group_name'
p12542
Nsa(dp12543
S'description'
p12544
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12545
sS'cpp_type'
p12546
S'bool'
p12547
sS'default'
p12548
S'0'
p12549
sS'name'
p12550
S'ignore_uo_dependency'
p12551
sS'required'
p12552
I00
sS'group_name'
p12553
S'Advanced'
p12554
sa(dp12555
S'description'
p12556
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p12557
sS'cpp_type'
p12558
S'double'
p12559
sS'default'
p12560
S'0'
p12561
sS'name'
p12562
S'int_width'
p12563
sS'required'
p12564
I00
sS'group_name'
p12565
Nsa(dp12566
S'description'
p12567
S'The variable value inside the circle\n'
p12568
sS'cpp_type'
p12569
S'double'
p12570
sS'default'
p12571
g3
sS'name'
p12572
S'invalue'
p12573
sS'required'
p12574
I01
sS'group_name'
p12575
Nsa(dp12576
S'description'
p12577
S'The number of bubbles to place\n'
p12578
sS'cpp_type'
p12579
S'unsigned int'
p12580
sS'default'
p12581
g3
sS'name'
p12582
S'numbub'
p12583
sS'required'
p12584
I01
sS'group_name'
p12585
Nsa(dp12586
S'description'
p12587
S'The number of tries\n'
p12588
sS'cpp_type'
p12589
S'unsigned int'
p12590
sS'default'
p12591
S'1000'
p12592
sS'name'
p12593
S'numtries'
p12594
sS'required'
p12595
I00
sS'group_name'
p12596
Nsa(dp12597
S'description'
p12598
S'The index for the current order parameter, not needed if structure_type = voids\n'
p12599
sS'cpp_type'
p12600
S'unsigned int'
p12601
sS'default'
p12602
S'0'
p12603
sS'name'
p12604
S'op_index'
p12605
sS'required'
p12606
I00
sS'group_name'
p12607
Nsa(dp12608
S'description'
p12609
S'Number of order parameters\n'
p12610
sS'cpp_type'
p12611
S'unsigned int'
p12612
sS'default'
p12613
g3
sS'name'
p12614
S'op_num'
p12615
sS'required'
p12616
I01
sS'group_name'
p12617
Nsa(dp12618
S'description'
p12619
S'The variable value outside the circle\n'
p12620
sS'cpp_type'
p12621
S'double'
p12622
sS'default'
p12623
g3
sS'name'
p12624
S'outvalue'
p12625
sS'required'
p12626
I01
sS'group_name'
p12627
Nsa(dp12628
S'description'
p12629
S'Mean radius value for the circles\n'
p12630
sS'cpp_type'
p12631
S'double'
p12632
sS'default'
p12633
g3
sS'name'
p12634
S'radius'
p12635
sS'required'
p12636
I01
sS'group_name'
p12637
Nsa(dp12638
S'description'
p12639
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p12640
sS'cpp_type'
p12641
S'double'
p12642
sS'default'
p12643
S'0'
p12644
sS'name'
p12645
S'radius_variation'
p12646
sS'required'
p12647
I00
sS'group_name'
p12648
Nsa(dp12649
S'name'
p12650
S'radius_variation_type'
p12651
sS'cpp_type'
p12652
S'MooseEnum'
p12653
sS'default'
p12654
S'none'
p12655
sS'description'
p12656
S'Type of distribution that random circle radii will follow\n'
p12657
sS'required'
p12658
I00
sS'options'
p12659
S'uniform normal none'
p12660
sS'group_name'
p12661
Nsa(dp12662
S'description'
p12663
S'The random seed\n'
p12664
sS'cpp_type'
p12665
S'unsigned int'
p12666
sS'default'
p12667
S'12444'
p12668
sS'name'
p12669
S'rand_seed'
p12670
sS'required'
p12671
I00
sS'group_name'
p12672
Nsa(dp12673
S'name'
p12674
S'structure_type'
p12675
sS'cpp_type'
p12676
S'MooseEnum'
p12677
sS'default'
p12678
g3
sS'description'
p12679
S'Which structure type is being initialized, grains or voids\n'
p12680
sS'required'
p12681
I01
sS'options'
p12682
S'grains voids'
p12683
sS'group_name'
p12684
Nsa(dp12685
S'description'
p12686
g3
sS'cpp_type'
p12687
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12688
sS'default'
p12689
S'PolycrystalVoronoiVoidIC'
p12690
sS'name'
p12691
S'type'
p12692
sS'required'
p12693
I00
sS'group_name'
p12694
Nsa(dp12695
S'description'
p12696
S'The variable this initial condition is supposed to provide values for.\n'
p12697
sS'cpp_type'
p12698
S'VariableName'
p12699
sS'default'
p12700
g3
sS'name'
p12701
S'variable'
p12702
sS'required'
p12703
I01
sS'group_name'
p12704
Nsa(dp12705
S'description'
p12706
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p12707
sS'cpp_type'
p12708
S'bool'
p12709
sS'default'
p12710
S'0'
p12711
sS'name'
p12712
S'zero_gradient'
p12713
sS'required'
p12714
I00
sS'group_name'
p12715
NsasS'name'
p12716
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalVoronoiVoidIC'
p12717
sa(dp12718
S'description'
p12719
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p12720
sS'subblocks'
p12721
NsS'parameters'
p12722
(lp12723
(dp12724
S'description'
p12725
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12726
sS'cpp_type'
p12727
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12728
sS'default'
p12729
g3
sS'name'
p12730
S'block'
p12731
sS'required'
p12732
I00
sS'group_name'
p12733
Nsa(dp12734
S'description'
p12735
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12736
sS'cpp_type'
p12737
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12738
sS'default'
p12739
g3
sS'name'
p12740
S'boundary'
p12741
sS'required'
p12742
I00
sS'group_name'
p12743
Nsa(dp12744
S'description'
p12745
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12746
sS'cpp_type'
p12747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12748
sS'default'
p12749
g3
sS'name'
p12750
S'control_tags'
p12751
sS'required'
p12752
I00
sS'group_name'
p12753
S'Advanced'
p12754
sa(dp12755
S'description'
p12756
S'Set the enabled status of the MooseObject.\n'
p12757
sS'cpp_type'
p12758
S'bool'
p12759
sS'default'
p12760
S'1'
p12761
sS'name'
p12762
S'enable'
p12763
sS'required'
p12764
I00
sS'group_name'
p12765
S'Advanced'
p12766
sa(dp12767
S'description'
p12768
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12769
sS'cpp_type'
p12770
S'bool'
p12771
sS'default'
p12772
S'0'
p12773
sS'name'
p12774
S'ignore_uo_dependency'
p12775
sS'required'
p12776
I00
sS'group_name'
p12777
S'Advanced'
p12778
sa(dp12779
S'description'
p12780
g3
sS'cpp_type'
p12781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12782
sS'default'
p12783
S'RampIC'
p12784
sS'name'
p12785
S'type'
p12786
sS'required'
p12787
I00
sS'group_name'
p12788
Nsa(dp12789
S'description'
p12790
S'The value on left (xmin) boundary.\n'
p12791
sS'cpp_type'
p12792
S'double'
p12793
sS'default'
p12794
g3
sS'name'
p12795
S'value_left'
p12796
sS'required'
p12797
I01
sS'group_name'
p12798
Nsa(dp12799
S'description'
p12800
S'The value on right (xmax) boundary.\n'
p12801
sS'cpp_type'
p12802
S'double'
p12803
sS'default'
p12804
g3
sS'name'
p12805
S'value_right'
p12806
sS'required'
p12807
I01
sS'group_name'
p12808
Nsa(dp12809
S'description'
p12810
S'The variable this initial condition is supposed to provide values for.\n'
p12811
sS'cpp_type'
p12812
S'VariableName'
p12813
sS'default'
p12814
g3
sS'name'
p12815
S'variable'
p12816
sS'required'
p12817
I01
sS'group_name'
p12818
NsasS'name'
p12819
S'/AuxVariables/*/InitialCondition/<type>/RampIC'
p12820
sa(dp12821
S'description'
p12822
g3
sS'subblocks'
p12823
NsS'parameters'
p12824
(lp12825
(dp12826
S'description'
p12827
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12828
sS'cpp_type'
p12829
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12830
sS'default'
p12831
g3
sS'name'
p12832
S'block'
p12833
sS'required'
p12834
I00
sS'group_name'
p12835
Nsa(dp12836
S'description'
p12837
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12838
sS'cpp_type'
p12839
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12840
sS'default'
p12841
g3
sS'name'
p12842
S'boundary'
p12843
sS'required'
p12844
I00
sS'group_name'
p12845
Nsa(dp12846
S'description'
p12847
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12848
sS'cpp_type'
p12849
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12850
sS'default'
p12851
g3
sS'name'
p12852
S'control_tags'
p12853
sS'required'
p12854
I00
sS'group_name'
p12855
S'Advanced'
p12856
sa(dp12857
S'description'
p12858
S'Set the enabled status of the MooseObject.\n'
p12859
sS'cpp_type'
p12860
S'bool'
p12861
sS'default'
p12862
S'1'
p12863
sS'name'
p12864
S'enable'
p12865
sS'required'
p12866
I00
sS'group_name'
p12867
S'Advanced'
p12868
sa(dp12869
S'description'
p12870
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12871
sS'cpp_type'
p12872
S'bool'
p12873
sS'default'
p12874
S'0'
p12875
sS'name'
p12876
S'ignore_uo_dependency'
p12877
sS'required'
p12878
I00
sS'group_name'
p12879
S'Advanced'
p12880
sa(dp12881
S'description'
p12882
S'Upper bound of the randomly generated values\n'
p12883
sS'cpp_type'
p12884
S'double'
p12885
sS'default'
p12886
S'1'
p12887
sS'name'
p12888
S'max'
p12889
sS'required'
p12890
I00
sS'group_name'
p12891
Nsa(dp12892
S'description'
p12893
S'Lower bound of the randomly generated values\n'
p12894
sS'cpp_type'
p12895
S'double'
p12896
sS'default'
p12897
S'0'
p12898
sS'name'
p12899
S'min'
p12900
sS'required'
p12901
I00
sS'group_name'
p12902
Nsa(dp12903
S'description'
p12904
S'Seed value for the random number generator\n'
p12905
sS'cpp_type'
p12906
S'unsigned int'
p12907
sS'default'
p12908
S'0'
p12909
sS'name'
p12910
S'seed'
p12911
sS'required'
p12912
I00
sS'group_name'
p12913
Nsa(dp12914
S'description'
p12915
g3
sS'cpp_type'
p12916
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12917
sS'default'
p12918
S'RandomIC'
p12919
sS'name'
p12920
S'type'
p12921
sS'required'
p12922
I00
sS'group_name'
p12923
Nsa(dp12924
S'description'
p12925
S'The variable this initial condition is supposed to provide values for.\n'
p12926
sS'cpp_type'
p12927
S'VariableName'
p12928
sS'default'
p12929
g3
sS'name'
p12930
S'variable'
p12931
sS'required'
p12932
I01
sS'group_name'
p12933
NsasS'name'
p12934
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p12935
sa(dp12936
S'description'
p12937
g3
sS'subblocks'
p12938
NsS'parameters'
p12939
(lp12940
(dp12941
S'description'
p12942
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12943
sS'cpp_type'
p12944
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12945
sS'default'
p12946
g3
sS'name'
p12947
S'block'
p12948
sS'required'
p12949
I00
sS'group_name'
p12950
Nsa(dp12951
S'description'
p12952
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12953
sS'cpp_type'
p12954
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12955
sS'default'
p12956
g3
sS'name'
p12957
S'boundary'
p12958
sS'required'
p12959
I00
sS'group_name'
p12960
Nsa(dp12961
S'description'
p12962
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12963
sS'cpp_type'
p12964
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12965
sS'default'
p12966
g3
sS'name'
p12967
S'control_tags'
p12968
sS'required'
p12969
I00
sS'group_name'
p12970
S'Advanced'
p12971
sa(dp12972
S'description'
p12973
S'The EBSDReader object holding the EBSD data\n'
p12974
sS'cpp_type'
p12975
S'UserObjectName'
p12976
sS'default'
p12977
g3
sS'name'
p12978
S'ebsd_reader'
p12979
sS'required'
p12980
I01
sS'group_name'
p12981
Nsa(dp12982
S'description'
p12983
S'Set the enabled status of the MooseObject.\n'
p12984
sS'cpp_type'
p12985
S'bool'
p12986
sS'default'
p12987
S'1'
p12988
sS'name'
p12989
S'enable'
p12990
sS'required'
p12991
I00
sS'group_name'
p12992
S'Advanced'
p12993
sa(dp12994
S'description'
p12995
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12996
sS'cpp_type'
p12997
S'bool'
p12998
sS'default'
p12999
S'0'
p13000
sS'name'
p13001
S'ignore_uo_dependency'
p13002
sS'required'
p13003
I00
sS'group_name'
p13004
S'Advanced'
p13005
sa(dp13006
S'description'
p13007
S'EBSD phase number this variable is to represent\n'
p13008
sS'cpp_type'
p13009
S'unsigned int'
p13010
sS'default'
p13011
g3
sS'name'
p13012
S'phase'
p13013
sS'required'
p13014
I01
sS'group_name'
p13015
Nsa(dp13016
S'description'
p13017
g3
sS'cpp_type'
p13018
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13019
sS'default'
p13020
S'ReconPhaseVarIC'
p13021
sS'name'
p13022
S'type'
p13023
sS'required'
p13024
I00
sS'group_name'
p13025
Nsa(dp13026
S'description'
p13027
S'The variable this initial condition is supposed to provide values for.\n'
p13028
sS'cpp_type'
p13029
S'VariableName'
p13030
sS'default'
p13031
g3
sS'name'
p13032
S'variable'
p13033
sS'required'
p13034
I01
sS'group_name'
p13035
NsasS'name'
p13036
S'/AuxVariables/*/InitialCondition/<type>/ReconPhaseVarIC'
p13037
sa(dp13038
S'description'
p13039
g3
sS'subblocks'
p13040
NsS'parameters'
p13041
(lp13042
(dp13043
S'description'
p13044
g3
sS'cpp_type'
p13045
S'bool'
p13046
sS'default'
p13047
S'0'
p13048
sS'name'
p13049
S'all_op_elemental'
p13050
sS'required'
p13051
I00
sS'group_name'
p13052
Nsa(dp13053
S'description'
p13054
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13055
sS'cpp_type'
p13056
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13057
sS'default'
p13058
g3
sS'name'
p13059
S'block'
p13060
sS'required'
p13061
I00
sS'group_name'
p13062
Nsa(dp13063
S'description'
p13064
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13065
sS'cpp_type'
p13066
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13067
sS'default'
p13068
g3
sS'name'
p13069
S'boundary'
p13070
sS'required'
p13071
I00
sS'group_name'
p13072
Nsa(dp13073
S'name'
p13074
S'coloring_algorithm'
p13075
sS'cpp_type'
p13076
S'MooseEnum'
p13077
sS'default'
p13078
S'legacy'
p13079
sS'description'
p13080
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p13081
sS'required'
p13082
I00
sS'options'
p13083
S'legacy bt jp power greedy'
p13084
sS'group_name'
p13085
Nsa(dp13086
S'description'
p13087
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13088
sS'cpp_type'
p13089
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13090
sS'default'
p13091
g3
sS'name'
p13092
S'control_tags'
p13093
sS'required'
p13094
I00
sS'group_name'
p13095
S'Advanced'
p13096
sa(dp13097
S'description'
p13098
S'The EBSDReader GeneralUserObject\n'
p13099
sS'cpp_type'
p13100
S'UserObjectName'
p13101
sS'default'
p13102
g3
sS'name'
p13103
S'ebsd_reader'
p13104
sS'required'
p13105
I01
sS'group_name'
p13106
Nsa(dp13107
S'description'
p13108
S'Set the enabled status of the MooseObject.\n'
p13109
sS'cpp_type'
p13110
S'bool'
p13111
sS'default'
p13112
S'1'
p13113
sS'name'
p13114
S'enable'
p13115
sS'required'
p13116
I00
sS'group_name'
p13117
S'Advanced'
p13118
sa(dp13119
S'description'
p13120
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13121
sS'cpp_type'
p13122
S'bool'
p13123
sS'default'
p13124
S'0'
p13125
sS'name'
p13126
S'ignore_uo_dependency'
p13127
sS'required'
p13128
I00
sS'group_name'
p13129
S'Advanced'
p13130
sa(dp13131
S'description'
p13132
S'The index for the current order parameter\n'
p13133
sS'cpp_type'
p13134
S'unsigned int'
p13135
sS'default'
p13136
g3
sS'name'
p13137
S'op_index'
p13138
sS'required'
p13139
I01
sS'group_name'
p13140
Nsa(dp13141
S'description'
p13142
S'Specifies the number of order parameters to create\n'
p13143
sS'cpp_type'
p13144
S'unsigned int'
p13145
sS'default'
p13146
g3
sS'name'
p13147
S'op_num'
p13148
sS'required'
p13149
I01
sS'group_name'
p13150
Nsa(dp13151
S'description'
p13152
S'EBSD phase number to be assigned to this grain\n'
p13153
sS'cpp_type'
p13154
S'unsigned int'
p13155
sS'default'
p13156
g3
sS'name'
p13157
S'phase'
p13158
sS'required'
p13159
I00
sS'group_name'
p13160
Nsa(dp13161
S'description'
p13162
g3
sS'cpp_type'
p13163
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13164
sS'default'
p13165
S'ReconVarIC'
p13166
sS'name'
p13167
S'type'
p13168
sS'required'
p13169
I00
sS'group_name'
p13170
Nsa(dp13171
S'description'
p13172
S'The variable this initial condition is supposed to provide values for.\n'
p13173
sS'cpp_type'
p13174
S'VariableName'
p13175
sS'default'
p13176
g3
sS'name'
p13177
S'variable'
p13178
sS'required'
p13179
I01
sS'group_name'
p13180
NsasS'name'
p13181
S'/AuxVariables/*/InitialCondition/<type>/ReconVarIC'
p13182
sa(dp13183
S'description'
p13184
S'Random noise with different min/max inside/outside of a bounding box\n'
p13185
sS'subblocks'
p13186
NsS'parameters'
p13187
(lp13188
(dp13189
S'description'
p13190
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13191
sS'cpp_type'
p13192
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13193
sS'default'
p13194
g3
sS'name'
p13195
S'block'
p13196
sS'required'
p13197
I00
sS'group_name'
p13198
Nsa(dp13199
S'description'
p13200
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13201
sS'cpp_type'
p13202
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13203
sS'default'
p13204
g3
sS'name'
p13205
S'boundary'
p13206
sS'required'
p13207
I00
sS'group_name'
p13208
Nsa(dp13209
S'description'
p13210
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13211
sS'cpp_type'
p13212
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13213
sS'default'
p13214
g3
sS'name'
p13215
S'control_tags'
p13216
sS'required'
p13217
I00
sS'group_name'
p13218
S'Advanced'
p13219
sa(dp13220
S'description'
p13221
S'Set the enabled status of the MooseObject.\n'
p13222
sS'cpp_type'
p13223
S'bool'
p13224
sS'default'
p13225
S'1'
p13226
sS'name'
p13227
S'enable'
p13228
sS'required'
p13229
I00
sS'group_name'
p13230
S'Advanced'
p13231
sa(dp13232
S'description'
p13233
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13234
sS'cpp_type'
p13235
S'bool'
p13236
sS'default'
p13237
S'0'
p13238
sS'name'
p13239
S'ignore_uo_dependency'
p13240
sS'required'
p13241
I00
sS'group_name'
p13242
S'Advanced'
p13243
sa(dp13244
S'description'
p13245
S'The min value of the variable invalue the box\n'
p13246
sS'cpp_type'
p13247
S'double'
p13248
sS'default'
p13249
S'0'
p13250
sS'name'
p13251
S'mn_invalue'
p13252
sS'required'
p13253
I00
sS'group_name'
p13254
Nsa(dp13255
S'description'
p13256
S'The min value of the variable outvalue the box\n'
p13257
sS'cpp_type'
p13258
S'double'
p13259
sS'default'
p13260
S'0'
p13261
sS'name'
p13262
S'mn_outvalue'
p13263
sS'required'
p13264
I00
sS'group_name'
p13265
Nsa(dp13266
S'description'
p13267
S'The max value of the variable invalue the box\n'
p13268
sS'cpp_type'
p13269
S'double'
p13270
sS'default'
p13271
g3
sS'name'
p13272
S'mx_invalue'
p13273
sS'required'
p13274
I01
sS'group_name'
p13275
Nsa(dp13276
S'description'
p13277
S'The max value of the variable outvalue the box\n'
p13278
sS'cpp_type'
p13279
S'double'
p13280
sS'default'
p13281
g3
sS'name'
p13282
S'mx_outvalue'
p13283
sS'required'
p13284
I01
sS'group_name'
p13285
Nsa(dp13286
S'description'
p13287
g3
sS'cpp_type'
p13288
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13289
sS'default'
p13290
S'RndBoundingBoxIC'
p13291
sS'name'
p13292
S'type'
p13293
sS'required'
p13294
I00
sS'group_name'
p13295
Nsa(dp13296
S'description'
p13297
S'The variable this initial condition is supposed to provide values for.\n'
p13298
sS'cpp_type'
p13299
S'VariableName'
p13300
sS'default'
p13301
g3
sS'name'
p13302
S'variable'
p13303
sS'required'
p13304
I01
sS'group_name'
p13305
Nsa(dp13306
S'description'
p13307
S'The x coordinate of the lower left-hand corner of the box\n'
p13308
sS'cpp_type'
p13309
S'double'
p13310
sS'default'
p13311
g3
sS'name'
p13312
S'x1'
p13313
sS'required'
p13314
I01
sS'group_name'
p13315
Nsa(dp13316
S'description'
p13317
S'The x coordinate of the upper right-hand corner of the box\n'
p13318
sS'cpp_type'
p13319
S'double'
p13320
sS'default'
p13321
g3
sS'name'
p13322
S'x2'
p13323
sS'required'
p13324
I01
sS'group_name'
p13325
Nsa(dp13326
S'description'
p13327
S'The y coordinate of the lower left-hand corner of the box\n'
p13328
sS'cpp_type'
p13329
S'double'
p13330
sS'default'
p13331
g3
sS'name'
p13332
S'y1'
p13333
sS'required'
p13334
I01
sS'group_name'
p13335
Nsa(dp13336
S'description'
p13337
S'The y coordinate of the upper right-hand corner of the box\n'
p13338
sS'cpp_type'
p13339
S'double'
p13340
sS'default'
p13341
g3
sS'name'
p13342
S'y2'
p13343
sS'required'
p13344
I01
sS'group_name'
p13345
Nsa(dp13346
S'description'
p13347
S'The z coordinate of the lower left-hand corner of the box\n'
p13348
sS'cpp_type'
p13349
S'double'
p13350
sS'default'
p13351
S'0'
p13352
sS'name'
p13353
S'z1'
p13354
sS'required'
p13355
I00
sS'group_name'
p13356
Nsa(dp13357
S'description'
p13358
S'The z coordinate of the upper right-hand corner of the box\n'
p13359
sS'cpp_type'
p13360
S'double'
p13361
sS'default'
p13362
S'0'
p13363
sS'name'
p13364
S'z2'
p13365
sS'required'
p13366
I00
sS'group_name'
p13367
NsasS'name'
p13368
S'/AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC'
p13369
sa(dp13370
S'description'
p13371
S'Random noise with different min/max inside/outside of a smooth circle\n'
p13372
sS'subblocks'
p13373
NsS'parameters'
p13374
(lp13375
(dp13376
S'description'
p13377
S'in 3D, whether the objects are spheres or columns\n'
p13378
sS'cpp_type'
p13379
S'bool'
p13380
sS'default'
p13381
S'1'
p13382
sS'name'
p13383
S'3D_spheres'
p13384
sS'required'
p13385
I00
sS'group_name'
p13386
Nsa(dp13387
S'description'
p13388
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13389
sS'cpp_type'
p13390
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13391
sS'default'
p13392
g3
sS'name'
p13393
S'block'
p13394
sS'required'
p13395
I00
sS'group_name'
p13396
Nsa(dp13397
S'description'
p13398
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13399
sS'cpp_type'
p13400
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13401
sS'default'
p13402
g3
sS'name'
p13403
S'boundary'
p13404
sS'required'
p13405
I00
sS'group_name'
p13406
Nsa(dp13407
S'description'
p13408
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13409
sS'cpp_type'
p13410
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13411
sS'default'
p13412
g3
sS'name'
p13413
S'control_tags'
p13414
sS'required'
p13415
I00
sS'group_name'
p13416
S'Advanced'
p13417
sa(dp13418
S'description'
p13419
S'Set the enabled status of the MooseObject.\n'
p13420
sS'cpp_type'
p13421
S'bool'
p13422
sS'default'
p13423
S'1'
p13424
sS'name'
p13425
S'enable'
p13426
sS'required'
p13427
I00
sS'group_name'
p13428
S'Advanced'
p13429
sa(dp13430
S'description'
p13431
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13432
sS'cpp_type'
p13433
S'bool'
p13434
sS'default'
p13435
S'0'
p13436
sS'name'
p13437
S'ignore_uo_dependency'
p13438
sS'required'
p13439
I00
sS'group_name'
p13440
S'Advanced'
p13441
sa(dp13442
S'description'
p13443
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13444
sS'cpp_type'
p13445
S'double'
p13446
sS'default'
p13447
S'0'
p13448
sS'name'
p13449
S'int_width'
p13450
sS'required'
p13451
I00
sS'group_name'
p13452
Nsa(dp13453
S'description'
p13454
S'The variable value inside the circle\n'
p13455
sS'cpp_type'
p13456
S'double'
p13457
sS'default'
p13458
g3
sS'name'
p13459
S'invalue'
p13460
sS'required'
p13461
I01
sS'group_name'
p13462
Nsa(dp13463
S'description'
p13464
S'The variable value outside the circle\n'
p13465
sS'cpp_type'
p13466
S'double'
p13467
sS'default'
p13468
g3
sS'name'
p13469
S'outvalue'
p13470
sS'required'
p13471
I01
sS'group_name'
p13472
Nsa(dp13473
S'description'
p13474
S'The radius of a circle\n'
p13475
sS'cpp_type'
p13476
S'double'
p13477
sS'default'
p13478
g3
sS'name'
p13479
S'radius'
p13480
sS'required'
p13481
I01
sS'group_name'
p13482
Nsa(dp13483
S'description'
p13484
S'Seed value for the random number generator\n'
p13485
sS'cpp_type'
p13486
S'unsigned int'
p13487
sS'default'
p13488
S'12345'
p13489
sS'name'
p13490
S'rand_seed'
p13491
sS'required'
p13492
I00
sS'group_name'
p13493
Nsa(dp13494
S'description'
p13495
g3
sS'cpp_type'
p13496
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13497
sS'default'
p13498
S'RndSmoothCircleIC'
p13499
sS'name'
p13500
S'type'
p13501
sS'required'
p13502
I00
sS'group_name'
p13503
Nsa(dp13504
S'description'
p13505
S'The variable this initial condition is supposed to provide values for.\n'
p13506
sS'cpp_type'
p13507
S'VariableName'
p13508
sS'default'
p13509
g3
sS'name'
p13510
S'variable'
p13511
sS'required'
p13512
I01
sS'group_name'
p13513
Nsa(dp13514
S'description'
p13515
S'Plus or minus this amount on the invalue\n'
p13516
sS'cpp_type'
p13517
S'double'
p13518
sS'default'
p13519
g3
sS'name'
p13520
S'variation_invalue'
p13521
sS'required'
p13522
I01
sS'group_name'
p13523
Nsa(dp13524
S'description'
p13525
S'Plus or minus this amount on the outvalue\n'
p13526
sS'cpp_type'
p13527
S'double'
p13528
sS'default'
p13529
g3
sS'name'
p13530
S'variation_outvalue'
p13531
sS'required'
p13532
I01
sS'group_name'
p13533
Nsa(dp13534
S'description'
p13535
S'The x coordinate of the circle center\n'
p13536
sS'cpp_type'
p13537
S'double'
p13538
sS'default'
p13539
g3
sS'name'
p13540
S'x1'
p13541
sS'required'
p13542
I01
sS'group_name'
p13543
Nsa(dp13544
S'description'
p13545
S'The y coordinate of the circle center\n'
p13546
sS'cpp_type'
p13547
S'double'
p13548
sS'default'
p13549
g3
sS'name'
p13550
S'y1'
p13551
sS'required'
p13552
I01
sS'group_name'
p13553
Nsa(dp13554
S'description'
p13555
S'The z coordinate of the circle center\n'
p13556
sS'cpp_type'
p13557
S'double'
p13558
sS'default'
p13559
S'0'
p13560
sS'name'
p13561
S'z1'
p13562
sS'required'
p13563
I00
sS'group_name'
p13564
Nsa(dp13565
S'description'
p13566
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p13567
sS'cpp_type'
p13568
S'bool'
p13569
sS'default'
p13570
S'0'
p13571
sS'name'
p13572
S'zero_gradient'
p13573
sS'required'
p13574
I00
sS'group_name'
p13575
NsasS'name'
p13576
S'/AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC'
p13577
sa(dp13578
S'description'
p13579
g3
sS'subblocks'
p13580
NsS'parameters'
p13581
(lp13582
(dp13583
S'description'
p13584
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13585
sS'cpp_type'
p13586
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13587
sS'default'
p13588
g3
sS'name'
p13589
S'control_tags'
p13590
sS'required'
p13591
I00
sS'group_name'
p13592
S'Advanced'
p13593
sa(dp13594
S'description'
p13595
S'Set the enabled status of the MooseObject.\n'
p13596
sS'cpp_type'
p13597
S'bool'
p13598
sS'default'
p13599
S'1'
p13600
sS'name'
p13601
S'enable'
p13602
sS'required'
p13603
I00
sS'group_name'
p13604
S'Advanced'
p13605
sa(dp13606
S'description'
p13607
g3
sS'cpp_type'
p13608
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13609
sS'default'
p13610
S'ScalarComponentIC'
p13611
sS'name'
p13612
S'type'
p13613
sS'required'
p13614
I00
sS'group_name'
p13615
Nsa(dp13616
S'description'
p13617
S'Initial values to initialize the scalar variable.\n'
p13618
sS'cpp_type'
p13619
S'std::vector<double, std::allocator<double> >'
p13620
sS'default'
p13621
g3
sS'name'
p13622
S'values'
p13623
sS'required'
p13624
I01
sS'group_name'
p13625
Nsa(dp13626
S'description'
p13627
S'The variable this initial condition is supposed to provide values for.\n'
p13628
sS'cpp_type'
p13629
S'VariableName'
p13630
sS'default'
p13631
g3
sS'name'
p13632
S'variable'
p13633
sS'required'
p13634
I00
sS'group_name'
p13635
NsasS'name'
p13636
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p13637
sa(dp13638
S'description'
p13639
g3
sS'subblocks'
p13640
NsS'parameters'
p13641
(lp13642
(dp13643
S'description'
p13644
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13645
sS'cpp_type'
p13646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13647
sS'default'
p13648
g3
sS'name'
p13649
S'control_tags'
p13650
sS'required'
p13651
I00
sS'group_name'
p13652
S'Advanced'
p13653
sa(dp13654
S'description'
p13655
S'Set the enabled status of the MooseObject.\n'
p13656
sS'cpp_type'
p13657
S'bool'
p13658
sS'default'
p13659
S'1'
p13660
sS'name'
p13661
S'enable'
p13662
sS'required'
p13663
I00
sS'group_name'
p13664
S'Advanced'
p13665
sa(dp13666
S'description'
p13667
g3
sS'cpp_type'
p13668
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13669
sS'default'
p13670
S'ScalarConstantIC'
p13671
sS'name'
p13672
S'type'
p13673
sS'required'
p13674
I00
sS'group_name'
p13675
Nsa(dp13676
S'description'
p13677
g3
sS'cpp_type'
p13678
S'double'
p13679
sS'default'
p13680
S'0'
p13681
sS'name'
p13682
S'value'
p13683
sS'required'
p13684
I00
sS'group_name'
p13685
Nsa(dp13686
S'description'
p13687
S'The variable this initial condition is supposed to provide values for.\n'
p13688
sS'cpp_type'
p13689
S'VariableName'
p13690
sS'default'
p13691
g3
sS'name'
p13692
S'variable'
p13693
sS'required'
p13694
I00
sS'group_name'
p13695
NsasS'name'
p13696
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p13697
sa(dp13698
S'description'
p13699
S'Circle with a smooth interface\n'
p13700
sS'subblocks'
p13701
NsS'parameters'
p13702
(lp13703
(dp13704
S'description'
p13705
S'in 3D, whether the objects are spheres or columns\n'
p13706
sS'cpp_type'
p13707
S'bool'
p13708
sS'default'
p13709
S'1'
p13710
sS'name'
p13711
S'3D_spheres'
p13712
sS'required'
p13713
I00
sS'group_name'
p13714
Nsa(dp13715
S'description'
p13716
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13717
sS'cpp_type'
p13718
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13719
sS'default'
p13720
g3
sS'name'
p13721
S'block'
p13722
sS'required'
p13723
I00
sS'group_name'
p13724
Nsa(dp13725
S'description'
p13726
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13727
sS'cpp_type'
p13728
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13729
sS'default'
p13730
g3
sS'name'
p13731
S'boundary'
p13732
sS'required'
p13733
I00
sS'group_name'
p13734
Nsa(dp13735
S'description'
p13736
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13737
sS'cpp_type'
p13738
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13739
sS'default'
p13740
g3
sS'name'
p13741
S'control_tags'
p13742
sS'required'
p13743
I00
sS'group_name'
p13744
S'Advanced'
p13745
sa(dp13746
S'description'
p13747
S'Set the enabled status of the MooseObject.\n'
p13748
sS'cpp_type'
p13749
S'bool'
p13750
sS'default'
p13751
S'1'
p13752
sS'name'
p13753
S'enable'
p13754
sS'required'
p13755
I00
sS'group_name'
p13756
S'Advanced'
p13757
sa(dp13758
S'description'
p13759
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13760
sS'cpp_type'
p13761
S'bool'
p13762
sS'default'
p13763
S'0'
p13764
sS'name'
p13765
S'ignore_uo_dependency'
p13766
sS'required'
p13767
I00
sS'group_name'
p13768
S'Advanced'
p13769
sa(dp13770
S'description'
p13771
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13772
sS'cpp_type'
p13773
S'double'
p13774
sS'default'
p13775
S'0'
p13776
sS'name'
p13777
S'int_width'
p13778
sS'required'
p13779
I00
sS'group_name'
p13780
Nsa(dp13781
S'description'
p13782
S'The variable value inside the circle\n'
p13783
sS'cpp_type'
p13784
S'double'
p13785
sS'default'
p13786
g3
sS'name'
p13787
S'invalue'
p13788
sS'required'
p13789
I01
sS'group_name'
p13790
Nsa(dp13791
S'description'
p13792
S'The variable value outside the circle\n'
p13793
sS'cpp_type'
p13794
S'double'
p13795
sS'default'
p13796
g3
sS'name'
p13797
S'outvalue'
p13798
sS'required'
p13799
I01
sS'group_name'
p13800
Nsa(dp13801
S'description'
p13802
S'The radius of a circle\n'
p13803
sS'cpp_type'
p13804
S'double'
p13805
sS'default'
p13806
g3
sS'name'
p13807
S'radius'
p13808
sS'required'
p13809
I01
sS'group_name'
p13810
Nsa(dp13811
S'description'
p13812
S'Seed value for the random number generator\n'
p13813
sS'cpp_type'
p13814
S'unsigned int'
p13815
sS'default'
p13816
S'12345'
p13817
sS'name'
p13818
S'rand_seed'
p13819
sS'required'
p13820
I00
sS'group_name'
p13821
Nsa(dp13822
S'description'
p13823
g3
sS'cpp_type'
p13824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13825
sS'default'
p13826
S'SmoothCircleIC'
p13827
sS'name'
p13828
S'type'
p13829
sS'required'
p13830
I00
sS'group_name'
p13831
Nsa(dp13832
S'description'
p13833
S'The variable this initial condition is supposed to provide values for.\n'
p13834
sS'cpp_type'
p13835
S'VariableName'
p13836
sS'default'
p13837
g3
sS'name'
p13838
S'variable'
p13839
sS'required'
p13840
I01
sS'group_name'
p13841
Nsa(dp13842
S'description'
p13843
S'The x coordinate of the circle center\n'
p13844
sS'cpp_type'
p13845
S'double'
p13846
sS'default'
p13847
g3
sS'name'
p13848
S'x1'
p13849
sS'required'
p13850
I01
sS'group_name'
p13851
Nsa(dp13852
S'description'
p13853
S'The y coordinate of the circle center\n'
p13854
sS'cpp_type'
p13855
S'double'
p13856
sS'default'
p13857
g3
sS'name'
p13858
S'y1'
p13859
sS'required'
p13860
I01
sS'group_name'
p13861
Nsa(dp13862
S'description'
p13863
S'The z coordinate of the circle center\n'
p13864
sS'cpp_type'
p13865
S'double'
p13866
sS'default'
p13867
S'0'
p13868
sS'name'
p13869
S'z1'
p13870
sS'required'
p13871
I00
sS'group_name'
p13872
Nsa(dp13873
S'description'
p13874
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p13875
sS'cpp_type'
p13876
S'bool'
p13877
sS'default'
p13878
S'0'
p13879
sS'name'
p13880
S'zero_gradient'
p13881
sS'required'
p13882
I00
sS'group_name'
p13883
NsasS'name'
p13884
S'/AuxVariables/*/InitialCondition/<type>/SmoothCircleIC'
p13885
sa(dp13886
S'description'
p13887
S'Superellipsoid with a smooth interface\n'
p13888
sS'subblocks'
p13889
NsS'parameters'
p13890
(lp13891
(dp13892
S'description'
p13893
S'Semiaxis a of the superellipsoid\n'
p13894
sS'cpp_type'
p13895
S'double'
p13896
sS'default'
p13897
g3
sS'name'
p13898
S'a'
p13899
sS'required'
p13900
I01
sS'group_name'
p13901
Nsa(dp13902
S'description'
p13903
S'Semiaxis b of the superellipsoid\n'
p13904
sS'cpp_type'
p13905
S'double'
p13906
sS'default'
p13907
g3
sS'name'
p13908
S'b'
p13909
sS'required'
p13910
I01
sS'group_name'
p13911
Nsa(dp13912
S'description'
p13913
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13914
sS'cpp_type'
p13915
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13916
sS'default'
p13917
g3
sS'name'
p13918
S'block'
p13919
sS'required'
p13920
I00
sS'group_name'
p13921
Nsa(dp13922
S'description'
p13923
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13924
sS'cpp_type'
p13925
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13926
sS'default'
p13927
g3
sS'name'
p13928
S'boundary'
p13929
sS'required'
p13930
I00
sS'group_name'
p13931
Nsa(dp13932
S'description'
p13933
S'Semiaxis c of the superellipsoid\n'
p13934
sS'cpp_type'
p13935
S'double'
p13936
sS'default'
p13937
S'1'
p13938
sS'name'
p13939
S'c'
p13940
sS'required'
p13941
I00
sS'group_name'
p13942
Nsa(dp13943
S'description'
p13944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13945
sS'cpp_type'
p13946
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13947
sS'default'
p13948
g3
sS'name'
p13949
S'control_tags'
p13950
sS'required'
p13951
I00
sS'group_name'
p13952
S'Advanced'
p13953
sa(dp13954
S'description'
p13955
S'Set the enabled status of the MooseObject.\n'
p13956
sS'cpp_type'
p13957
S'bool'
p13958
sS'default'
p13959
S'1'
p13960
sS'name'
p13961
S'enable'
p13962
sS'required'
p13963
I00
sS'group_name'
p13964
S'Advanced'
p13965
sa(dp13966
S'description'
p13967
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13968
sS'cpp_type'
p13969
S'bool'
p13970
sS'default'
p13971
S'0'
p13972
sS'name'
p13973
S'ignore_uo_dependency'
p13974
sS'required'
p13975
I00
sS'group_name'
p13976
S'Advanced'
p13977
sa(dp13978
S'description'
p13979
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13980
sS'cpp_type'
p13981
S'double'
p13982
sS'default'
p13983
S'0'
p13984
sS'name'
p13985
S'int_width'
p13986
sS'required'
p13987
I00
sS'group_name'
p13988
Nsa(dp13989
S'description'
p13990
S'The variable value inside the superellipsoid\n'
p13991
sS'cpp_type'
p13992
S'double'
p13993
sS'default'
p13994
g3
sS'name'
p13995
S'invalue'
p13996
sS'required'
p13997
I01
sS'group_name'
p13998
Nsa(dp13999
S'description'
p14000
S'Exponent n of the superellipsoid\n'
p14001
sS'cpp_type'
p14002
S'double'
p14003
sS'default'
p14004
g3
sS'name'
p14005
S'n'
p14006
sS'required'
p14007
I01
sS'group_name'
p14008
Nsa(dp14009
S'description'
p14010
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p14011
sS'cpp_type'
p14012
S'double'
p14013
sS'default'
p14014
g3
sS'name'
p14015
S'nestedvalue'
p14016
sS'required'
p14017
I00
sS'group_name'
p14018
Nsa(dp14019
S'description'
p14020
S'The variable value outside the superellipsoid\n'
p14021
sS'cpp_type'
p14022
S'double'
p14023
sS'default'
p14024
g3
sS'name'
p14025
S'outvalue'
p14026
sS'required'
p14027
I01
sS'group_name'
p14028
Nsa(dp14029
S'description'
p14030
S'Seed value for the random number generator\n'
p14031
sS'cpp_type'
p14032
S'unsigned int'
p14033
sS'default'
p14034
S'12345'
p14035
sS'name'
p14036
S'rand_seed'
p14037
sS'required'
p14038
I00
sS'group_name'
p14039
Nsa(dp14040
S'description'
p14041
g3
sS'cpp_type'
p14042
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14043
sS'default'
p14044
S'SmoothSuperellipsoidIC'
p14045
sS'name'
p14046
S'type'
p14047
sS'required'
p14048
I00
sS'group_name'
p14049
Nsa(dp14050
S'description'
p14051
S'The variable this initial condition is supposed to provide values for.\n'
p14052
sS'cpp_type'
p14053
S'VariableName'
p14054
sS'default'
p14055
g3
sS'name'
p14056
S'variable'
p14057
sS'required'
p14058
I01
sS'group_name'
p14059
Nsa(dp14060
S'description'
p14061
S'The x coordinate of the superellipsoid center\n'
p14062
sS'cpp_type'
p14063
S'double'
p14064
sS'default'
p14065
g3
sS'name'
p14066
S'x1'
p14067
sS'required'
p14068
I01
sS'group_name'
p14069
Nsa(dp14070
S'description'
p14071
S'The y coordinate of the superellipsoid center\n'
p14072
sS'cpp_type'
p14073
S'double'
p14074
sS'default'
p14075
g3
sS'name'
p14076
S'y1'
p14077
sS'required'
p14078
I01
sS'group_name'
p14079
Nsa(dp14080
S'description'
p14081
S'The z coordinate of the superellipsoid center\n'
p14082
sS'cpp_type'
p14083
S'double'
p14084
sS'default'
p14085
S'0'
p14086
sS'name'
p14087
S'z1'
p14088
sS'required'
p14089
I00
sS'group_name'
p14090
Nsa(dp14091
S'description'
p14092
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p14093
sS'cpp_type'
p14094
S'bool'
p14095
sS'default'
p14096
S'0'
p14097
sS'name'
p14098
S'zero_gradient'
p14099
sS'required'
p14100
I00
sS'group_name'
p14101
NsasS'name'
p14102
S'/AuxVariables/*/InitialCondition/<type>/SmoothSuperellipsoidIC'
p14103
sa(dp14104
S'description'
p14105
S'Multiple smooth circles with manually specified radii and center points\n'
p14106
sS'subblocks'
p14107
NsS'parameters'
p14108
(lp14109
(dp14110
S'description'
p14111
S'in 3D, whether the objects are spheres or columns\n'
p14112
sS'cpp_type'
p14113
S'bool'
p14114
sS'default'
p14115
S'1'
p14116
sS'name'
p14117
S'3D_spheres'
p14118
sS'required'
p14119
I00
sS'group_name'
p14120
Nsa(dp14121
S'description'
p14122
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14123
sS'cpp_type'
p14124
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14125
sS'default'
p14126
g3
sS'name'
p14127
S'block'
p14128
sS'required'
p14129
I00
sS'group_name'
p14130
Nsa(dp14131
S'description'
p14132
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14133
sS'cpp_type'
p14134
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14135
sS'default'
p14136
g3
sS'name'
p14137
S'boundary'
p14138
sS'required'
p14139
I00
sS'group_name'
p14140
Nsa(dp14141
S'description'
p14142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14143
sS'cpp_type'
p14144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14145
sS'default'
p14146
g3
sS'name'
p14147
S'control_tags'
p14148
sS'required'
p14149
I00
sS'group_name'
p14150
S'Advanced'
p14151
sa(dp14152
S'description'
p14153
S'Set the enabled status of the MooseObject.\n'
p14154
sS'cpp_type'
p14155
S'bool'
p14156
sS'default'
p14157
S'1'
p14158
sS'name'
p14159
S'enable'
p14160
sS'required'
p14161
I00
sS'group_name'
p14162
S'Advanced'
p14163
sa(dp14164
S'description'
p14165
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14166
sS'cpp_type'
p14167
S'bool'
p14168
sS'default'
p14169
S'0'
p14170
sS'name'
p14171
S'ignore_uo_dependency'
p14172
sS'required'
p14173
I00
sS'group_name'
p14174
S'Advanced'
p14175
sa(dp14176
S'description'
p14177
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p14178
sS'cpp_type'
p14179
S'double'
p14180
sS'default'
p14181
S'0'
p14182
sS'name'
p14183
S'int_width'
p14184
sS'required'
p14185
I00
sS'group_name'
p14186
Nsa(dp14187
S'description'
p14188
S'The variable value inside the circle\n'
p14189
sS'cpp_type'
p14190
S'double'
p14191
sS'default'
p14192
g3
sS'name'
p14193
S'invalue'
p14194
sS'required'
p14195
I01
sS'group_name'
p14196
Nsa(dp14197
S'description'
p14198
S'The variable value outside the circle\n'
p14199
sS'cpp_type'
p14200
S'double'
p14201
sS'default'
p14202
g3
sS'name'
p14203
S'outvalue'
p14204
sS'required'
p14205
I01
sS'group_name'
p14206
Nsa(dp14207
S'description'
p14208
S'The radius for each circle\n'
p14209
sS'cpp_type'
p14210
S'std::vector<double, std::allocator<double> >'
p14211
sS'default'
p14212
g3
sS'name'
p14213
S'radii'
p14214
sS'required'
p14215
I01
sS'group_name'
p14216
Nsa(dp14217
S'description'
p14218
S'Seed value for the random number generator\n'
p14219
sS'cpp_type'
p14220
S'unsigned int'
p14221
sS'default'
p14222
S'12345'
p14223
sS'name'
p14224
S'rand_seed'
p14225
sS'required'
p14226
I00
sS'group_name'
p14227
Nsa(dp14228
S'description'
p14229
g3
sS'cpp_type'
p14230
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14231
sS'default'
p14232
S'SpecifiedSmoothCircleIC'
p14233
sS'name'
p14234
S'type'
p14235
sS'required'
p14236
I00
sS'group_name'
p14237
Nsa(dp14238
S'description'
p14239
S'The variable this initial condition is supposed to provide values for.\n'
p14240
sS'cpp_type'
p14241
S'VariableName'
p14242
sS'default'
p14243
g3
sS'name'
p14244
S'variable'
p14245
sS'required'
p14246
I01
sS'group_name'
p14247
Nsa(dp14248
S'description'
p14249
S'The x-coordinate for each circle center\n'
p14250
sS'cpp_type'
p14251
S'std::vector<double, std::allocator<double> >'
p14252
sS'default'
p14253
g3
sS'name'
p14254
S'x_positions'
p14255
sS'required'
p14256
I01
sS'group_name'
p14257
Nsa(dp14258
S'description'
p14259
S'The y-coordinate for each circle center\n'
p14260
sS'cpp_type'
p14261
S'std::vector<double, std::allocator<double> >'
p14262
sS'default'
p14263
g3
sS'name'
p14264
S'y_positions'
p14265
sS'required'
p14266
I01
sS'group_name'
p14267
Nsa(dp14268
S'description'
p14269
S'The z-coordinate for each circle center\n'
p14270
sS'cpp_type'
p14271
S'std::vector<double, std::allocator<double> >'
p14272
sS'default'
p14273
g3
sS'name'
p14274
S'z_positions'
p14275
sS'required'
p14276
I01
sS'group_name'
p14277
Nsa(dp14278
S'description'
p14279
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p14280
sS'cpp_type'
p14281
S'bool'
p14282
sS'default'
p14283
S'0'
p14284
sS'name'
p14285
S'zero_gradient'
p14286
sS'required'
p14287
I00
sS'group_name'
p14288
NsasS'name'
p14289
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p14290
sa(dp14291
S'description'
p14292
S'Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n'
p14293
sS'subblocks'
p14294
NsS'parameters'
p14295
(lp14296
(dp14297
S'description'
p14298
S'Semiaxis a for each superellipsoid\n'
p14299
sS'cpp_type'
p14300
S'std::vector<double, std::allocator<double> >'
p14301
sS'default'
p14302
g3
sS'name'
p14303
S'as'
p14304
sS'required'
p14305
I01
sS'group_name'
p14306
Nsa(dp14307
S'description'
p14308
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14309
sS'cpp_type'
p14310
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14311
sS'default'
p14312
g3
sS'name'
p14313
S'block'
p14314
sS'required'
p14315
I00
sS'group_name'
p14316
Nsa(dp14317
S'description'
p14318
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14319
sS'cpp_type'
p14320
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14321
sS'default'
p14322
g3
sS'name'
p14323
S'boundary'
p14324
sS'required'
p14325
I00
sS'group_name'
p14326
Nsa(dp14327
S'description'
p14328
S'Semiaxis b for each superellipsoid\n'
p14329
sS'cpp_type'
p14330
S'std::vector<double, std::allocator<double> >'
p14331
sS'default'
p14332
g3
sS'name'
p14333
S'bs'
p14334
sS'required'
p14335
I01
sS'group_name'
p14336
Nsa(dp14337
S'description'
p14338
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14339
sS'cpp_type'
p14340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14341
sS'default'
p14342
g3
sS'name'
p14343
S'control_tags'
p14344
sS'required'
p14345
I00
sS'group_name'
p14346
S'Advanced'
p14347
sa(dp14348
S'description'
p14349
S'Semiaxis c for each superellipsoid\n'
p14350
sS'cpp_type'
p14351
S'std::vector<double, std::allocator<double> >'
p14352
sS'default'
p14353
g3
sS'name'
p14354
S'cs'
p14355
sS'required'
p14356
I01
sS'group_name'
p14357
Nsa(dp14358
S'description'
p14359
S'Set the enabled status of the MooseObject.\n'
p14360
sS'cpp_type'
p14361
S'bool'
p14362
sS'default'
p14363
S'1'
p14364
sS'name'
p14365
S'enable'
p14366
sS'required'
p14367
I00
sS'group_name'
p14368
S'Advanced'
p14369
sa(dp14370
S'description'
p14371
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14372
sS'cpp_type'
p14373
S'bool'
p14374
sS'default'
p14375
S'0'
p14376
sS'name'
p14377
S'ignore_uo_dependency'
p14378
sS'required'
p14379
I00
sS'group_name'
p14380
S'Advanced'
p14381
sa(dp14382
S'description'
p14383
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p14384
sS'cpp_type'
p14385
S'double'
p14386
sS'default'
p14387
S'0'
p14388
sS'name'
p14389
S'int_width'
p14390
sS'required'
p14391
I00
sS'group_name'
p14392
Nsa(dp14393
S'description'
p14394
S'The variable value inside the superellipsoid\n'
p14395
sS'cpp_type'
p14396
S'double'
p14397
sS'default'
p14398
g3
sS'name'
p14399
S'invalue'
p14400
sS'required'
p14401
I01
sS'group_name'
p14402
Nsa(dp14403
S'description'
p14404
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p14405
sS'cpp_type'
p14406
S'double'
p14407
sS'default'
p14408
g3
sS'name'
p14409
S'nestedvalue'
p14410
sS'required'
p14411
I00
sS'group_name'
p14412
Nsa(dp14413
S'description'
p14414
S'Exponent n for each superellipsoid\n'
p14415
sS'cpp_type'
p14416
S'std::vector<double, std::allocator<double> >'
p14417
sS'default'
p14418
g3
sS'name'
p14419
S'ns'
p14420
sS'required'
p14421
I01
sS'group_name'
p14422
Nsa(dp14423
S'description'
p14424
S'The variable value outside the superellipsoid\n'
p14425
sS'cpp_type'
p14426
S'double'
p14427
sS'default'
p14428
g3
sS'name'
p14429
S'outvalue'
p14430
sS'required'
p14431
I01
sS'group_name'
p14432
Nsa(dp14433
S'description'
p14434
S'Seed value for the random number generator\n'
p14435
sS'cpp_type'
p14436
S'unsigned int'
p14437
sS'default'
p14438
S'12345'
p14439
sS'name'
p14440
S'rand_seed'
p14441
sS'required'
p14442
I00
sS'group_name'
p14443
Nsa(dp14444
S'description'
p14445
g3
sS'cpp_type'
p14446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14447
sS'default'
p14448
S'SpecifiedSmoothSuperellipsoidIC'
p14449
sS'name'
p14450
S'type'
p14451
sS'required'
p14452
I00
sS'group_name'
p14453
Nsa(dp14454
S'description'
p14455
S'The variable this initial condition is supposed to provide values for.\n'
p14456
sS'cpp_type'
p14457
S'VariableName'
p14458
sS'default'
p14459
g3
sS'name'
p14460
S'variable'
p14461
sS'required'
p14462
I01
sS'group_name'
p14463
Nsa(dp14464
S'description'
p14465
S'The x-coordinate for each superellipsoid center\n'
p14466
sS'cpp_type'
p14467
S'std::vector<double, std::allocator<double> >'
p14468
sS'default'
p14469
g3
sS'name'
p14470
S'x_positions'
p14471
sS'required'
p14472
I01
sS'group_name'
p14473
Nsa(dp14474
S'description'
p14475
S'The y-coordinate for each superellipsoid center\n'
p14476
sS'cpp_type'
p14477
S'std::vector<double, std::allocator<double> >'
p14478
sS'default'
p14479
g3
sS'name'
p14480
S'y_positions'
p14481
sS'required'
p14482
I01
sS'group_name'
p14483
Nsa(dp14484
S'description'
p14485
S'The z-coordinate for each superellipsoid center\n'
p14486
sS'cpp_type'
p14487
S'std::vector<double, std::allocator<double> >'
p14488
sS'default'
p14489
g3
sS'name'
p14490
S'z_positions'
p14491
sS'required'
p14492
I01
sS'group_name'
p14493
Nsa(dp14494
S'description'
p14495
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p14496
sS'cpp_type'
p14497
S'bool'
p14498
sS'default'
p14499
S'0'
p14500
sS'name'
p14501
S'zero_gradient'
p14502
sS'required'
p14503
I00
sS'group_name'
p14504
NsasS'name'
p14505
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothSuperellipsoidIC'
p14506
sa(dp14507
S'description'
p14508
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p14509
sS'subblocks'
p14510
NsS'parameters'
p14511
(lp14512
(dp14513
S'description'
p14514
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14515
sS'cpp_type'
p14516
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14517
sS'default'
p14518
g3
sS'name'
p14519
S'block'
p14520
sS'required'
p14521
I00
sS'group_name'
p14522
Nsa(dp14523
S'description'
p14524
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14525
sS'cpp_type'
p14526
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14527
sS'default'
p14528
g3
sS'name'
p14529
S'boundary'
p14530
sS'required'
p14531
I00
sS'group_name'
p14532
Nsa(dp14533
S'description'
p14534
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14535
sS'cpp_type'
p14536
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14537
sS'default'
p14538
g3
sS'name'
p14539
S'control_tags'
p14540
sS'required'
p14541
I00
sS'group_name'
p14542
S'Advanced'
p14543
sa(dp14544
S'description'
p14545
S'Set the enabled status of the MooseObject.\n'
p14546
sS'cpp_type'
p14547
S'bool'
p14548
sS'default'
p14549
S'1'
p14550
sS'name'
p14551
S'enable'
p14552
sS'required'
p14553
I00
sS'group_name'
p14554
S'Advanced'
p14555
sa(dp14556
S'description'
p14557
S'The z coordinate of the circle center\n'
p14558
sS'cpp_type'
p14559
S'double'
p14560
sS'default'
p14561
g3
sS'name'
p14562
S'height'
p14563
sS'required'
p14564
I01
sS'group_name'
p14565
Nsa(dp14566
S'description'
p14567
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14568
sS'cpp_type'
p14569
S'bool'
p14570
sS'default'
p14571
S'0'
p14572
sS'name'
p14573
S'ignore_uo_dependency'
p14574
sS'required'
p14575
I00
sS'group_name'
p14576
S'Advanced'
p14577
sa(dp14578
S'description'
p14579
S'The variable value inside the circle\n'
p14580
sS'cpp_type'
p14581
S'double'
p14582
sS'default'
p14583
g3
sS'name'
p14584
S'invalue'
p14585
sS'required'
p14586
I01
sS'group_name'
p14587
Nsa(dp14588
S'description'
p14589
S'The variable value outside the circle\n'
p14590
sS'cpp_type'
p14591
S'double'
p14592
sS'default'
p14593
g3
sS'name'
p14594
S'outvalue'
p14595
sS'required'
p14596
I01
sS'group_name'
p14597
Nsa(dp14598
S'description'
p14599
g3
sS'cpp_type'
p14600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14601
sS'default'
p14602
S'ThumbIC'
p14603
sS'name'
p14604
S'type'
p14605
sS'required'
p14606
I00
sS'group_name'
p14607
Nsa(dp14608
S'description'
p14609
S'The variable this initial condition is supposed to provide values for.\n'
p14610
sS'cpp_type'
p14611
S'VariableName'
p14612
sS'default'
p14613
g3
sS'name'
p14614
S'variable'
p14615
sS'required'
p14616
I01
sS'group_name'
p14617
Nsa(dp14618
S'description'
p14619
S'The y coordinate of the circle center\n'
p14620
sS'cpp_type'
p14621
S'double'
p14622
sS'default'
p14623
g3
sS'name'
p14624
S'width'
p14625
sS'required'
p14626
I01
sS'group_name'
p14627
Nsa(dp14628
S'description'
p14629
S'The x coordinate of the circle center\n'
p14630
sS'cpp_type'
p14631
S'double'
p14632
sS'default'
p14633
g3
sS'name'
p14634
S'xcoord'
p14635
sS'required'
p14636
I01
sS'group_name'
p14637
NsasS'name'
p14638
S'/AuxVariables/*/InitialCondition/<type>/ThumbIC'
p14639
sa(dp14640
S'description'
p14641
S'Tricrystal with two circles/bubbles\n'
p14642
sS'subblocks'
p14643
NsS'parameters'
p14644
(lp14645
(dp14646
S'description'
p14647
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14648
sS'cpp_type'
p14649
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14650
sS'default'
p14651
g3
sS'name'
p14652
S'block'
p14653
sS'required'
p14654
I00
sS'group_name'
p14655
Nsa(dp14656
S'description'
p14657
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14658
sS'cpp_type'
p14659
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14660
sS'default'
p14661
g3
sS'name'
p14662
S'boundary'
p14663
sS'required'
p14664
I00
sS'group_name'
p14665
Nsa(dp14666
S'description'
p14667
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14668
sS'cpp_type'
p14669
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14670
sS'default'
p14671
g3
sS'name'
p14672
S'control_tags'
p14673
sS'required'
p14674
I00
sS'group_name'
p14675
S'Advanced'
p14676
sa(dp14677
S'description'
p14678
S'Set the enabled status of the MooseObject.\n'
p14679
sS'cpp_type'
p14680
S'bool'
p14681
sS'default'
p14682
S'1'
p14683
sS'name'
p14684
S'enable'
p14685
sS'required'
p14686
I00
sS'group_name'
p14687
S'Advanced'
p14688
sa(dp14689
S'description'
p14690
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14691
sS'cpp_type'
p14692
S'bool'
p14693
sS'default'
p14694
S'0'
p14695
sS'name'
p14696
S'ignore_uo_dependency'
p14697
sS'required'
p14698
I00
sS'group_name'
p14699
S'Advanced'
p14700
sa(dp14701
S'description'
p14702
S'Index for the current grain order parameter\n'
p14703
sS'cpp_type'
p14704
S'unsigned int'
p14705
sS'default'
p14706
g3
sS'name'
p14707
S'op_index'
p14708
sS'required'
p14709
I01
sS'group_name'
p14710
Nsa(dp14711
S'description'
p14712
S'Number of grain order parameters\n'
p14713
sS'cpp_type'
p14714
S'unsigned int'
p14715
sS'default'
p14716
g3
sS'name'
p14717
S'op_num'
p14718
sS'required'
p14719
I01
sS'group_name'
p14720
Nsa(dp14721
S'description'
p14722
g3
sS'cpp_type'
p14723
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14724
sS'default'
p14725
S'Tricrystal2CircleGrainsIC'
p14726
sS'name'
p14727
S'type'
p14728
sS'required'
p14729
I00
sS'group_name'
p14730
Nsa(dp14731
S'description'
p14732
S'The variable this initial condition is supposed to provide values for.\n'
p14733
sS'cpp_type'
p14734
S'VariableName'
p14735
sS'default'
p14736
g3
sS'name'
p14737
S'variable'
p14738
sS'required'
p14739
I01
sS'group_name'
p14740
NsasS'name'
p14741
S'/AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p14742
sa(dp14743
S'description'
p14744
S'Tricrystal with a triple junction\n'
p14745
sS'subblocks'
p14746
NsS'parameters'
p14747
(lp14748
(dp14749
S'description'
p14750
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14751
sS'cpp_type'
p14752
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14753
sS'default'
p14754
g3
sS'name'
p14755
S'block'
p14756
sS'required'
p14757
I00
sS'group_name'
p14758
Nsa(dp14759
S'description'
p14760
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14761
sS'cpp_type'
p14762
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14763
sS'default'
p14764
g3
sS'name'
p14765
S'boundary'
p14766
sS'required'
p14767
I00
sS'group_name'
p14768
Nsa(dp14769
S'description'
p14770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14771
sS'cpp_type'
p14772
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14773
sS'default'
p14774
g3
sS'name'
p14775
S'control_tags'
p14776
sS'required'
p14777
I00
sS'group_name'
p14778
S'Advanced'
p14779
sa(dp14780
S'description'
p14781
S'Set the enabled status of the MooseObject.\n'
p14782
sS'cpp_type'
p14783
S'bool'
p14784
sS'default'
p14785
S'1'
p14786
sS'name'
p14787
S'enable'
p14788
sS'required'
p14789
I00
sS'group_name'
p14790
S'Advanced'
p14791
sa(dp14792
S'description'
p14793
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14794
sS'cpp_type'
p14795
S'bool'
p14796
sS'default'
p14797
S'0'
p14798
sS'name'
p14799
S'ignore_uo_dependency'
p14800
sS'required'
p14801
I00
sS'group_name'
p14802
S'Advanced'
p14803
sa(dp14804
S'description'
p14805
S'The point where the triple junction is located. Default is the center of the mesh\n'
p14806
sS'cpp_type'
p14807
S'libMesh::Point'
p14808
sS'default'
p14809
g3
sS'name'
p14810
S'junction'
p14811
sS'required'
p14812
I00
sS'group_name'
p14813
Nsa(dp14814
S'description'
p14815
S'Index for the current grain order parameter\n'
p14816
sS'cpp_type'
p14817
S'unsigned int'
p14818
sS'default'
p14819
g3
sS'name'
p14820
S'op_index'
p14821
sS'required'
p14822
I01
sS'group_name'
p14823
Nsa(dp14824
S'description'
p14825
S'Number of grain order parameters\n'
p14826
sS'cpp_type'
p14827
S'unsigned int'
p14828
sS'default'
p14829
g3
sS'name'
p14830
S'op_num'
p14831
sS'required'
p14832
I01
sS'group_name'
p14833
Nsa(dp14834
S'description'
p14835
S'Angle of first grain at triple junction in degrees\n'
p14836
sS'cpp_type'
p14837
S'double'
p14838
sS'default'
p14839
S'135'
p14840
sS'name'
p14841
S'theta1'
p14842
sS'required'
p14843
I00
sS'group_name'
p14844
Nsa(dp14845
S'description'
p14846
S'Angle of second grain at triple junction in degrees\n'
p14847
sS'cpp_type'
p14848
S'double'
p14849
sS'default'
p14850
S'135'
p14851
sS'name'
p14852
S'theta2'
p14853
sS'required'
p14854
I00
sS'group_name'
p14855
Nsa(dp14856
S'description'
p14857
g3
sS'cpp_type'
p14858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14859
sS'default'
p14860
S'TricrystalTripleJunctionIC'
p14861
sS'name'
p14862
S'type'
p14863
sS'required'
p14864
I00
sS'group_name'
p14865
Nsa(dp14866
S'description'
p14867
S'The variable this initial condition is supposed to provide values for.\n'
p14868
sS'cpp_type'
p14869
S'VariableName'
p14870
sS'default'
p14871
g3
sS'name'
p14872
S'variable'
p14873
sS'required'
p14874
I01
sS'group_name'
p14875
NsasS'name'
p14876
S'/AuxVariables/*/InitialCondition/<type>/TricrystalTripleJunctionIC'
p14877
sasS'parameters'
p14878
NsS'name'
p14879
S'/AuxVariables/*/InitialCondition/<type>'
p14880
sasS'parameters'
p14881
(lp14882
(dp14883
S'description'
p14884
S'A string representing the Moose Object that will be built by this Action\n'
p14885
sS'cpp_type'
p14886
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14887
sS'default'
p14888
g3
sS'name'
p14889
S'type'
p14890
sS'required'
p14891
I01
sS'group_name'
p14892
NsasS'name'
p14893
S'/AuxVariables/*/InitialCondition'
p14894
sasS'parameters'
p14895
(lp14896
(dp14897
S'description'
p14898
S'The block id where this variable lives\n'
p14899
sS'cpp_type'
p14900
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14901
sS'default'
p14902
g3
sS'name'
p14903
S'block'
p14904
sS'required'
p14905
I00
sS'group_name'
p14906
Nsa(dp14907
S'name'
p14908
S'family'
p14909
sS'cpp_type'
p14910
S'MooseEnum'
p14911
sS'default'
p14912
S'LAGRANGE'
p14913
sS'description'
p14914
S'Specifies the family of FE shape functions to use for this variable\n'
p14915
sS'required'
p14916
I00
sS'options'
p14917
S'LAGRANGE MONOMIAL SCALAR'
p14918
sS'group_name'
p14919
Nsa(dp14920
S'description'
p14921
S'Specifies the initial condition for this variable\n'
p14922
sS'cpp_type'
p14923
S'double'
p14924
sS'default'
p14925
g3
sS'name'
p14926
S'initial_condition'
p14927
sS'required'
p14928
I00
sS'group_name'
p14929
Nsa(dp14930
S'name'
p14931
S'order'
p14932
sS'cpp_type'
p14933
S'MooseEnum'
p14934
sS'default'
p14935
S'FIRST'
p14936
sS'description'
p14937
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p14938
sS'required'
p14939
I00
sS'options'
p14940
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p14941
sS'group_name'
p14942
Nsa(dp14943
S'description'
p14944
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p14945
sS'cpp_type'
p14946
S'std::vector<OutputName, std::allocator<OutputName> >'
p14947
sS'default'
p14948
g3
sS'name'
p14949
S'outputs'
p14950
sS'required'
p14951
I00
sS'group_name'
p14952
S'Advanced'
p14953
sa(dp14954
S'description'
p14955
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p14956
sS'cpp_type'
p14957
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14958
sS'default'
p14959
S'LATEST'
p14960
sS'name'
p14961
S'initial_from_file_timestep'
p14962
sS'required'
p14963
I00
sS'group_name'
p14964
S'Initial From File'
p14965
sa(dp14966
S'description'
p14967
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p14968
sS'cpp_type'
p14969
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14970
sS'default'
p14971
g3
sS'name'
p14972
S'initial_from_file_var'
p14973
sS'required'
p14974
I00
sS'group_name'
p14975
S'Initial From File'
p14976
sasS'name'
p14977
S'/AuxVariables/*'
p14978
sa(dp14979
S'description'
p14980
g3
sS'subblocks'
p14981
NsS'parameters'
p14982
(lp14983
(dp14984
S'description'
p14985
S'The block id where this variable lives\n'
p14986
sS'cpp_type'
p14987
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14988
sS'default'
p14989
g3
sS'name'
p14990
S'block'
p14991
sS'required'
p14992
I00
sS'group_name'
p14993
Nsa(dp14994
S'name'
p14995
S'data_type'
p14996
sS'cpp_type'
p14997
S'MultiMooseEnum'
p14998
sS'default'
p14999
S'REAL'
p15000
sS'description'
p15001
S'Specifying data type of the materials property, variables are created accordingly\n'
p15002
sS'required'
p15003
I01
sS'options'
p15004
S'Real RealGradient'
p15005
sS'group_name'
p15006
Nsa(dp15007
S'name'
p15008
S'family'
p15009
sS'cpp_type'
p15010
S'MooseEnum'
p15011
sS'default'
p15012
S'LAGRANGE'
p15013
sS'description'
p15014
S'Specifies the family of FE shape functions to use for this variable\n'
p15015
sS'required'
p15016
I00
sS'options'
p15017
S'LAGRANGE MONOMIAL SCALAR'
p15018
sS'group_name'
p15019
Nsa(dp15020
S'description'
p15021
S'Specifies the number of grains to create the aux varaivles for.\n'
p15022
sS'cpp_type'
p15023
S'unsigned int'
p15024
sS'default'
p15025
g3
sS'name'
p15026
S'grain_num'
p15027
sS'required'
p15028
I01
sS'group_name'
p15029
Nsa(dp15030
S'description'
p15031
S'Specifies the initial condition for this variable\n'
p15032
sS'cpp_type'
p15033
S'double'
p15034
sS'default'
p15035
g3
sS'name'
p15036
S'initial_condition'
p15037
sS'required'
p15038
I00
sS'group_name'
p15039
Nsa(dp15040
S'name'
p15041
S'order'
p15042
sS'cpp_type'
p15043
S'MooseEnum'
p15044
sS'default'
p15045
S'FIRST'
p15046
sS'description'
p15047
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p15048
sS'required'
p15049
I00
sS'options'
p15050
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p15051
sS'group_name'
p15052
Nsa(dp15053
S'description'
p15054
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p15055
sS'cpp_type'
p15056
S'std::vector<OutputName, std::allocator<OutputName> >'
p15057
sS'default'
p15058
g3
sS'name'
p15059
S'outputs'
p15060
sS'required'
p15061
I00
sS'group_name'
p15062
S'Advanced'
p15063
sa(dp15064
S'description'
p15065
S'Vector that specifies the base name of the variables.\n'
p15066
sS'cpp_type'
p15067
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15068
sS'default'
p15069
g3
sS'name'
p15070
S'variable_base'
p15071
sS'required'
p15072
I01
sS'group_name'
p15073
NsasS'name'
p15074
S'/AuxVariables/MultiAuxVariables'
p15075
sasS'parameters'
p15076
NsS'name'
p15077
S'/AuxVariables'
p15078
sa(dp15079
S'description'
p15080
g3
sS'subblocks'
p15081
(lp15082
(dp15083
S'description'
p15084
g3
sS'subblocks'
p15085
NsS'parameters'
p15086
(lp15087
(dp15088
S'description'
p15089
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15090
sS'cpp_type'
p15091
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15092
sS'default'
p15093
g3
sS'name'
p15094
S'boundary'
p15095
sS'required'
p15096
I01
sS'group_name'
p15097
Nsa(dp15098
S'description'
p15099
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15100
sS'cpp_type'
p15101
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15102
sS'default'
p15103
g3
sS'name'
p15104
S'control_tags'
p15105
sS'required'
p15106
I00
sS'group_name'
p15107
S'Advanced'
p15108
sa(dp15109
S'description'
p15110
S'Set the enabled status of the MooseObject.\n'
p15111
sS'cpp_type'
p15112
S'bool'
p15113
sS'default'
p15114
S'1'
p15115
sS'name'
p15116
S'enable'
p15117
sS'required'
p15118
I00
sS'group_name'
p15119
S'Advanced'
p15120
sa(dp15121
S'description'
p15122
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15123
sS'cpp_type'
p15124
S'bool'
p15125
sS'default'
p15126
S'1'
p15127
sS'name'
p15128
S'implicit'
p15129
sS'required'
p15130
I00
sS'group_name'
p15131
S'Advanced'
p15132
sa(dp15133
S'description'
p15134
S'A string representing the Moose Object that will be built by this Action\n'
p15135
sS'cpp_type'
p15136
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15137
sS'default'
p15138
g3
sS'name'
p15139
S'type'
p15140
sS'required'
p15141
I01
sS'group_name'
p15142
Nsa(dp15143
S'description'
p15144
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15145
sS'cpp_type'
p15146
S'bool'
p15147
sS'default'
p15148
S'0'
p15149
sS'name'
p15150
S'use_displaced_mesh'
p15151
sS'required'
p15152
I00
sS'group_name'
p15153
S'Advanced'
p15154
sa(dp15155
S'description'
p15156
S'The name of the variable that this boundary condition applies to\n'
p15157
sS'cpp_type'
p15158
S'NonlinearVariableName'
p15159
sS'default'
p15160
g3
sS'name'
p15161
S'variable'
p15162
sS'required'
p15163
I01
sS'group_name'
p15164
NsasS'name'
p15165
S'/BCs/*'
p15166
sa(dp15167
S'description'
p15168
S'Cahn-Hilliard fixed flux boundary condition using a tensorial (anisotropic) mobility\n'
p15169
sS'subblocks'
p15170
NsS'parameters'
p15171
(lp15172
(dp15173
S'description'
p15174
S'Vector of arguments of the mobility\n'
p15175
sS'cpp_type'
p15176
S'std::vector<VariableName>'
p15177
sS'default'
p15178
g3
sS'name'
p15179
S'args'
p15180
sS'required'
p15181
I00
sS'group_name'
p15182
Nsa(dp15183
S'description'
p15184
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15185
sS'cpp_type'
p15186
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15187
sS'default'
p15188
g3
sS'name'
p15189
S'boundary'
p15190
sS'required'
p15191
I01
sS'group_name'
p15192
Nsa(dp15193
S'description'
p15194
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15195
sS'cpp_type'
p15196
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15197
sS'default'
p15198
g3
sS'name'
p15199
S'control_tags'
p15200
sS'required'
p15201
I00
sS'group_name'
p15202
S'Advanced'
p15203
sa(dp15204
S'description'
p15205
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15206
sS'cpp_type'
p15207
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15208
sS'default'
p15209
g3
sS'name'
p15210
S'diag_save_in'
p15211
sS'required'
p15212
I00
sS'group_name'
p15213
S'Advanced'
p15214
sa(dp15215
S'description'
p15216
S'Set the enabled status of the MooseObject.\n'
p15217
sS'cpp_type'
p15218
S'bool'
p15219
sS'default'
p15220
S'1'
p15221
sS'name'
p15222
S'enable'
p15223
sS'required'
p15224
I00
sS'group_name'
p15225
S'Advanced'
p15226
sa(dp15227
S'description'
p15228
S'The flux set at the boundary\n'
p15229
sS'cpp_type'
p15230
S'libMesh::VectorValue<double>'
p15231
sS'default'
p15232
g3
sS'name'
p15233
S'flux'
p15234
sS'required'
p15235
I00
sS'group_name'
p15236
Nsa(dp15237
S'description'
p15238
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15239
sS'cpp_type'
p15240
S'bool'
p15241
sS'default'
p15242
S'1'
p15243
sS'name'
p15244
S'implicit'
p15245
sS'required'
p15246
I00
sS'group_name'
p15247
S'Advanced'
p15248
sa(dp15249
S'description'
p15250
S'The mobility used with the kernel\n'
p15251
sS'cpp_type'
p15252
S'MaterialPropertyName'
p15253
sS'default'
p15254
S'M'
p15255
sS'name'
p15256
S'mob_name'
p15257
sS'required'
p15258
I00
sS'group_name'
p15259
Nsa(dp15260
S'description'
p15261
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15262
sS'cpp_type'
p15263
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15264
sS'default'
p15265
g3
sS'name'
p15266
S'save_in'
p15267
sS'required'
p15268
I00
sS'group_name'
p15269
S'Advanced'
p15270
sa(dp15271
S'description'
p15272
S'The seed for the master random number generator\n'
p15273
sS'cpp_type'
p15274
S'unsigned int'
p15275
sS'default'
p15276
S'0'
p15277
sS'name'
p15278
S'seed'
p15279
sS'required'
p15280
I00
sS'group_name'
p15281
S'Advanced'
p15282
sa(dp15283
S'description'
p15284
g3
sS'cpp_type'
p15285
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15286
sS'default'
p15287
S'CahnHilliardAnisoFluxBC'
p15288
sS'name'
p15289
S'type'
p15290
sS'required'
p15291
I00
sS'group_name'
p15292
Nsa(dp15293
S'description'
p15294
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15295
sS'cpp_type'
p15296
S'bool'
p15297
sS'default'
p15298
S'0'
p15299
sS'name'
p15300
S'use_displaced_mesh'
p15301
sS'required'
p15302
I00
sS'group_name'
p15303
S'Advanced'
p15304
sa(dp15305
S'description'
p15306
S'The name of the variable that this boundary condition applies to\n'
p15307
sS'cpp_type'
p15308
S'NonlinearVariableName'
p15309
sS'default'
p15310
g3
sS'name'
p15311
S'variable'
p15312
sS'required'
p15313
I01
sS'group_name'
p15314
NsasS'name'
p15315
S'/BCs/CahnHilliardAnisoFluxBC'
p15316
sa(dp15317
S'description'
p15318
S'Cahn-Hilliard fixed flux boundary condition using a scalar (isotropic) mobility\n'
p15319
sS'subblocks'
p15320
NsS'parameters'
p15321
(lp15322
(dp15323
S'description'
p15324
S'Vector of arguments of the mobility\n'
p15325
sS'cpp_type'
p15326
S'std::vector<VariableName>'
p15327
sS'default'
p15328
g3
sS'name'
p15329
S'args'
p15330
sS'required'
p15331
I00
sS'group_name'
p15332
Nsa(dp15333
S'description'
p15334
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15335
sS'cpp_type'
p15336
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15337
sS'default'
p15338
g3
sS'name'
p15339
S'boundary'
p15340
sS'required'
p15341
I01
sS'group_name'
p15342
Nsa(dp15343
S'description'
p15344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15345
sS'cpp_type'
p15346
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15347
sS'default'
p15348
g3
sS'name'
p15349
S'control_tags'
p15350
sS'required'
p15351
I00
sS'group_name'
p15352
S'Advanced'
p15353
sa(dp15354
S'description'
p15355
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15356
sS'cpp_type'
p15357
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15358
sS'default'
p15359
g3
sS'name'
p15360
S'diag_save_in'
p15361
sS'required'
p15362
I00
sS'group_name'
p15363
S'Advanced'
p15364
sa(dp15365
S'description'
p15366
S'Set the enabled status of the MooseObject.\n'
p15367
sS'cpp_type'
p15368
S'bool'
p15369
sS'default'
p15370
S'1'
p15371
sS'name'
p15372
S'enable'
p15373
sS'required'
p15374
I00
sS'group_name'
p15375
S'Advanced'
p15376
sa(dp15377
S'description'
p15378
S'The flux set at the boundary\n'
p15379
sS'cpp_type'
p15380
S'libMesh::VectorValue<double>'
p15381
sS'default'
p15382
g3
sS'name'
p15383
S'flux'
p15384
sS'required'
p15385
I00
sS'group_name'
p15386
Nsa(dp15387
S'description'
p15388
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15389
sS'cpp_type'
p15390
S'bool'
p15391
sS'default'
p15392
S'1'
p15393
sS'name'
p15394
S'implicit'
p15395
sS'required'
p15396
I00
sS'group_name'
p15397
S'Advanced'
p15398
sa(dp15399
S'description'
p15400
S'The mobility used with the kernel\n'
p15401
sS'cpp_type'
p15402
S'MaterialPropertyName'
p15403
sS'default'
p15404
S'M'
p15405
sS'name'
p15406
S'mob_name'
p15407
sS'required'
p15408
I00
sS'group_name'
p15409
Nsa(dp15410
S'description'
p15411
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15412
sS'cpp_type'
p15413
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15414
sS'default'
p15415
g3
sS'name'
p15416
S'save_in'
p15417
sS'required'
p15418
I00
sS'group_name'
p15419
S'Advanced'
p15420
sa(dp15421
S'description'
p15422
S'The seed for the master random number generator\n'
p15423
sS'cpp_type'
p15424
S'unsigned int'
p15425
sS'default'
p15426
S'0'
p15427
sS'name'
p15428
S'seed'
p15429
sS'required'
p15430
I00
sS'group_name'
p15431
S'Advanced'
p15432
sa(dp15433
S'description'
p15434
g3
sS'cpp_type'
p15435
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15436
sS'default'
p15437
S'CahnHilliardFluxBC'
p15438
sS'name'
p15439
S'type'
p15440
sS'required'
p15441
I00
sS'group_name'
p15442
Nsa(dp15443
S'description'
p15444
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15445
sS'cpp_type'
p15446
S'bool'
p15447
sS'default'
p15448
S'0'
p15449
sS'name'
p15450
S'use_displaced_mesh'
p15451
sS'required'
p15452
I00
sS'group_name'
p15453
S'Advanced'
p15454
sa(dp15455
S'description'
p15456
S'The name of the variable that this boundary condition applies to\n'
p15457
sS'cpp_type'
p15458
S'NonlinearVariableName'
p15459
sS'default'
p15460
g3
sS'name'
p15461
S'variable'
p15462
sS'required'
p15463
I01
sS'group_name'
p15464
NsasS'name'
p15465
S'/BCs/CahnHilliardFluxBC'
p15466
sa(dp15467
S'description'
p15468
g3
sS'subblocks'
p15469
(lp15470
(dp15471
S'description'
p15472
g3
sS'subblocks'
p15473
NsS'parameters'
p15474
(lp15475
(dp15476
S'description'
p15477
S'The list of boundary IDs from the mesh where the pressure will be applied\n'
p15478
sS'cpp_type'
p15479
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15480
sS'default'
p15481
g3
sS'name'
p15482
S'boundary'
p15483
sS'required'
p15484
I01
sS'group_name'
p15485
Nsa(dp15486
S'description'
p15487
S'The nonlinear displacement variables\n'
p15488
sS'cpp_type'
p15489
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p15490
sS'default'
p15491
g3
sS'name'
p15492
S'displacements'
p15493
sS'required'
p15494
I01
sS'group_name'
p15495
Nsa(dp15496
S'description'
p15497
S'The name to use for the plenum pressure value\n'
p15498
sS'cpp_type'
p15499
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15500
sS'default'
p15501
g3
sS'name'
p15502
S'output'
p15503
sS'required'
p15504
I00
sS'group_name'
p15505
Nsa(dp15506
S'description'
p15507
S'Auxiliary variables to save the displacement residuals\n'
p15508
sS'cpp_type'
p15509
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15510
sS'default'
p15511
g3
sS'name'
p15512
S'save_in'
p15513
sS'required'
p15514
I00
sS'group_name'
p15515
Nsa(dp15516
S'description'
p15517
S'Whether to use displaced mesh in the boundary condition\n'
p15518
sS'cpp_type'
p15519
S'bool'
p15520
sS'default'
p15521
S'1'
p15522
sS'name'
p15523
S'use_displaced_mesh'
p15524
sS'required'
p15525
I00
sS'group_name'
p15526
Nsa(dp15527
S'description'
p15528
S'The name to use when reporting the initial moles of gas\n'
p15529
sS'cpp_type'
p15530
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15531
sS'default'
p15532
g3
sS'name'
p15533
S'output_initial_moles'
p15534
sS'required'
p15535
I00
sS'group_name'
p15536
Nsa(dp15537
S'description'
p15538
S'The universal gas constant for the units used\n'
p15539
sS'cpp_type'
p15540
S'double'
p15541
sS'default'
p15542
g3
sS'name'
p15543
S'R'
p15544
sS'required'
p15545
I01
sS'group_name'
p15546
Nsa(dp15547
S'name'
p15548
S'execute_on'
p15549
sS'cpp_type'
p15550
S'MultiMooseEnum'
p15551
sS'default'
p15552
S'LINEAR'
p15553
sS'description'
p15554
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p15555
sS'required'
p15556
I00
sS'options'
p15557
S'none initial linear nonlinear timestep_end timestep_begin custom'
p15558
sS'group_name'
p15559
Nsa(dp15560
S'description'
p15561
S'The initial pressure in the cavity\n'
p15562
sS'cpp_type'
p15563
S'double'
p15564
sS'default'
p15565
S'0'
p15566
sS'name'
p15567
S'initial_pressure'
p15568
sS'required'
p15569
I00
sS'group_name'
p15570
Nsa(dp15571
S'description'
p15572
S'Initial temperature (optional)\n'
p15573
sS'cpp_type'
p15574
S'double'
p15575
sS'default'
p15576
g3
sS'name'
p15577
S'initial_temperature'
p15578
sS'required'
p15579
I00
sS'group_name'
p15580
Nsa(dp15581
S'description'
p15582
S'The name of the postprocessor(s) that holds the amount of material injected into the cavity\n'
p15583
sS'cpp_type'
p15584
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p15585
sS'default'
p15586
g3
sS'name'
p15587
S'material_input'
p15588
sS'required'
p15589
I00
sS'group_name'
p15590
Nsa(dp15591
S'description'
p15592
S'The amount of time during which the pressure will ramp from zero to its true value\n'
p15593
sS'cpp_type'
p15594
S'double'
p15595
sS'default'
p15596
S'0'
p15597
sS'name'
p15598
S'startup_time'
p15599
sS'required'
p15600
I00
sS'group_name'
p15601
Nsa(dp15602
S'description'
p15603
S'The name of the average temperature postprocessor value\n'
p15604
sS'cpp_type'
p15605
S'PostprocessorName'
p15606
sS'default'
p15607
g3
sS'name'
p15608
S'temperature'
p15609
sS'required'
p15610
I01
sS'group_name'
p15611
Nsa(dp15612
S'description'
p15613
S'The name of the internal volume postprocessor value\n'
p15614
sS'cpp_type'
p15615
S'PostprocessorName'
p15616
sS'default'
p15617
g3
sS'name'
p15618
S'volume'
p15619
sS'required'
p15620
I01
sS'group_name'
p15621
NsasS'name'
p15622
S'/BCs/CavityPressure/*'
p15623
sasS'parameters'
p15624
NsS'name'
p15625
S'/BCs/CavityPressure'
p15626
sa(dp15627
S'description'
p15628
g3
sS'subblocks'
p15629
NsS'parameters'
p15630
(lp15631
(dp15632
S'description'
p15633
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15634
sS'cpp_type'
p15635
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15636
sS'default'
p15637
g3
sS'name'
p15638
S'boundary'
p15639
sS'required'
p15640
I01
sS'group_name'
p15641
Nsa(dp15642
S'description'
p15643
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15644
sS'cpp_type'
p15645
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15646
sS'default'
p15647
g3
sS'name'
p15648
S'control_tags'
p15649
sS'required'
p15650
I00
sS'group_name'
p15651
S'Advanced'
p15652
sa(dp15653
S'description'
p15654
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15655
sS'cpp_type'
p15656
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15657
sS'default'
p15658
g3
sS'name'
p15659
S'diag_save_in'
p15660
sS'required'
p15661
I00
sS'group_name'
p15662
S'Advanced'
p15663
sa(dp15664
S'description'
p15665
g3
sS'cpp_type'
p15666
S'double'
p15667
sS'default'
p15668
S'0'
p15669
sS'name'
p15670
S'duration'
p15671
sS'required'
p15672
I00
sS'group_name'
p15673
Nsa(dp15674
S'description'
p15675
S'Set the enabled status of the MooseObject.\n'
p15676
sS'cpp_type'
p15677
S'bool'
p15678
sS'default'
p15679
S'1'
p15680
sS'name'
p15681
S'enable'
p15682
sS'required'
p15683
I00
sS'group_name'
p15684
S'Advanced'
p15685
sa(dp15686
S'description'
p15687
g3
sS'cpp_type'
p15688
S'double'
p15689
sS'default'
p15690
S'500'
p15691
sS'name'
p15692
S'final'
p15693
sS'required'
p15694
I00
sS'group_name'
p15695
Nsa(dp15696
S'description'
p15697
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15698
sS'cpp_type'
p15699
S'bool'
p15700
sS'default'
p15701
S'1'
p15702
sS'name'
p15703
S'implicit'
p15704
sS'required'
p15705
I00
sS'group_name'
p15706
S'Advanced'
p15707
sa(dp15708
S'description'
p15709
g3
sS'cpp_type'
p15710
S'double'
p15711
sS'default'
p15712
S'500'
p15713
sS'name'
p15714
S'initial'
p15715
sS'required'
p15716
I00
sS'group_name'
p15717
Nsa(dp15718
S'description'
p15719
g3
sS'cpp_type'
p15720
S'double'
p15721
sS'default'
p15722
S'7500'
p15723
sS'name'
p15724
S'rate'
p15725
sS'required'
p15726
I00
sS'group_name'
p15727
Nsa(dp15728
S'description'
p15729
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15730
sS'cpp_type'
p15731
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15732
sS'default'
p15733
g3
sS'name'
p15734
S'save_in'
p15735
sS'required'
p15736
I00
sS'group_name'
p15737
S'Advanced'
p15738
sa(dp15739
S'description'
p15740
S'The seed for the master random number generator\n'
p15741
sS'cpp_type'
p15742
S'unsigned int'
p15743
sS'default'
p15744
S'0'
p15745
sS'name'
p15746
S'seed'
p15747
sS'required'
p15748
I00
sS'group_name'
p15749
S'Advanced'
p15750
sa(dp15751
S'description'
p15752
g3
sS'cpp_type'
p15753
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15754
sS'default'
p15755
S'ConvectiveFluxBC'
p15756
sS'name'
p15757
S'type'
p15758
sS'required'
p15759
I00
sS'group_name'
p15760
Nsa(dp15761
S'description'
p15762
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15763
sS'cpp_type'
p15764
S'bool'
p15765
sS'default'
p15766
S'0'
p15767
sS'name'
p15768
S'use_displaced_mesh'
p15769
sS'required'
p15770
I00
sS'group_name'
p15771
S'Advanced'
p15772
sa(dp15773
S'description'
p15774
S'The name of the variable that this boundary condition applies to\n'
p15775
sS'cpp_type'
p15776
S'NonlinearVariableName'
p15777
sS'default'
p15778
g3
sS'name'
p15779
S'variable'
p15780
sS'required'
p15781
I01
sS'group_name'
p15782
NsasS'name'
p15783
S'/BCs/ConvectiveFluxBC'
p15784
sa(dp15785
S'description'
p15786
g3
sS'subblocks'
p15787
NsS'parameters'
p15788
(lp15789
(dp15790
S'description'
p15791
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15792
sS'cpp_type'
p15793
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15794
sS'default'
p15795
g3
sS'name'
p15796
S'boundary'
p15797
sS'required'
p15798
I01
sS'group_name'
p15799
Nsa(dp15800
S'description'
p15801
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15802
sS'cpp_type'
p15803
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15804
sS'default'
p15805
g3
sS'name'
p15806
S'control_tags'
p15807
sS'required'
p15808
I00
sS'group_name'
p15809
S'Advanced'
p15810
sa(dp15811
S'description'
p15812
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15813
sS'cpp_type'
p15814
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15815
sS'default'
p15816
g3
sS'name'
p15817
S'diag_save_in'
p15818
sS'required'
p15819
I00
sS'group_name'
p15820
S'Advanced'
p15821
sa(dp15822
S'description'
p15823
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p15824
sS'cpp_type'
p15825
S'MaterialPropertyName'
p15826
sS'default'
p15827
S'1'
p15828
sS'name'
p15829
S'diff'
p15830
sS'required'
p15831
I00
sS'group_name'
p15832
Nsa(dp15833
S'description'
p15834
S'Set the enabled status of the MooseObject.\n'
p15835
sS'cpp_type'
p15836
S'bool'
p15837
sS'default'
p15838
S'1'
p15839
sS'name'
p15840
S'enable'
p15841
sS'required'
p15842
I00
sS'group_name'
p15843
S'Advanced'
p15844
sa(dp15845
S'description'
p15846
S'Epsilon\n'
p15847
sS'cpp_type'
p15848
S'double'
p15849
sS'default'
p15850
g3
sS'name'
p15851
S'epsilon'
p15852
sS'required'
p15853
I01
sS'group_name'
p15854
Nsa(dp15855
S'description'
p15856
S'The forcing function.\n'
p15857
sS'cpp_type'
p15858
S'FunctionName'
p15859
sS'default'
p15860
g3
sS'name'
p15861
S'function'
p15862
sS'required'
p15863
I01
sS'group_name'
p15864
Nsa(dp15865
S'description'
p15866
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15867
sS'cpp_type'
p15868
S'bool'
p15869
sS'default'
p15870
S'1'
p15871
sS'name'
p15872
S'implicit'
p15873
sS'required'
p15874
I00
sS'group_name'
p15875
S'Advanced'
p15876
sa(dp15877
S'description'
p15878
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15879
sS'cpp_type'
p15880
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15881
sS'default'
p15882
g3
sS'name'
p15883
S'save_in'
p15884
sS'required'
p15885
I00
sS'group_name'
p15886
S'Advanced'
p15887
sa(dp15888
S'description'
p15889
S'The seed for the master random number generator\n'
p15890
sS'cpp_type'
p15891
S'unsigned int'
p15892
sS'default'
p15893
S'0'
p15894
sS'name'
p15895
S'seed'
p15896
sS'required'
p15897
I00
sS'group_name'
p15898
S'Advanced'
p15899
sa(dp15900
S'description'
p15901
S'Sigma\n'
p15902
sS'cpp_type'
p15903
S'double'
p15904
sS'default'
p15905
g3
sS'name'
p15906
S'sigma'
p15907
sS'required'
p15908
I01
sS'group_name'
p15909
Nsa(dp15910
S'description'
p15911
g3
sS'cpp_type'
p15912
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15913
sS'default'
p15914
S'DGFunctionDiffusionDirichletBC'
p15915
sS'name'
p15916
S'type'
p15917
sS'required'
p15918
I00
sS'group_name'
p15919
Nsa(dp15920
S'description'
p15921
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15922
sS'cpp_type'
p15923
S'bool'
p15924
sS'default'
p15925
S'0'
p15926
sS'name'
p15927
S'use_displaced_mesh'
p15928
sS'required'
p15929
I00
sS'group_name'
p15930
S'Advanced'
p15931
sa(dp15932
S'description'
p15933
S'The value the variable should have on the boundary\n'
p15934
sS'cpp_type'
p15935
S'double'
p15936
sS'default'
p15937
S'0'
p15938
sS'name'
p15939
S'value'
p15940
sS'required'
p15941
I00
sS'group_name'
p15942
Nsa(dp15943
S'description'
p15944
S'The name of the variable that this boundary condition applies to\n'
p15945
sS'cpp_type'
p15946
S'NonlinearVariableName'
p15947
sS'default'
p15948
g3
sS'name'
p15949
S'variable'
p15950
sS'required'
p15951
I01
sS'group_name'
p15952
NsasS'name'
p15953
S'/BCs/DGFunctionDiffusionDirichletBC'
p15954
sa(dp15955
S'description'
p15956
g3
sS'subblocks'
p15957
NsS'parameters'
p15958
(lp15959
(dp15960
S'description'
p15961
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15962
sS'cpp_type'
p15963
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15964
sS'default'
p15965
g3
sS'name'
p15966
S'boundary'
p15967
sS'required'
p15968
I01
sS'group_name'
p15969
Nsa(dp15970
S'description'
p15971
S'The viscosity coefficient\n'
p15972
sS'cpp_type'
p15973
S'double'
p15974
sS'default'
p15975
S'1'
p15976
sS'name'
p15977
S'coefficient'
p15978
sS'required'
p15979
I00
sS'group_name'
p15980
Nsa(dp15981
S'description'
p15982
S'The displacement component corresponding the variable this BC acts on.\n'
p15983
sS'cpp_type'
p15984
S'unsigned int'
p15985
sS'default'
p15986
g3
sS'name'
p15987
S'component'
p15988
sS'required'
p15989
I01
sS'group_name'
p15990
Nsa(dp15991
S'description'
p15992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15993
sS'cpp_type'
p15994
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15995
sS'default'
p15996
g3
sS'name'
p15997
S'control_tags'
p15998
sS'required'
p15999
I00
sS'group_name'
p16000
S'Advanced'
p16001
sa(dp16002
S'description'
p16003
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16004
sS'cpp_type'
p16005
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16006
sS'default'
p16007
g3
sS'name'
p16008
S'diag_save_in'
p16009
sS'required'
p16010
I00
sS'group_name'
p16011
S'Advanced'
p16012
sa(dp16013
S'description'
p16014
S'Displacement in the x direction\n'
p16015
sS'cpp_type'
p16016
S'std::vector<VariableName>'
p16017
sS'default'
p16018
g3
sS'name'
p16019
S'disp_x'
p16020
sS'required'
p16021
I01
sS'group_name'
p16022
Nsa(dp16023
S'description'
p16024
S'Displacement in the y direction\n'
p16025
sS'cpp_type'
p16026
S'std::vector<VariableName>'
p16027
sS'default'
p16028
g3
sS'name'
p16029
S'disp_y'
p16030
sS'required'
p16031
I00
sS'group_name'
p16032
Nsa(dp16033
S'description'
p16034
S'Displacement in the z direction\n'
p16035
sS'cpp_type'
p16036
S'std::vector<VariableName>'
p16037
sS'default'
p16038
g3
sS'name'
p16039
S'disp_z'
p16040
sS'required'
p16041
I00
sS'group_name'
p16042
Nsa(dp16043
S'description'
p16044
S'Set the enabled status of the MooseObject.\n'
p16045
sS'cpp_type'
p16046
S'bool'
p16047
sS'default'
p16048
S'1'
p16049
sS'name'
p16050
S'enable'
p16051
sS'required'
p16052
I00
sS'group_name'
p16053
S'Advanced'
p16054
sa(dp16055
S'description'
p16056
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16057
sS'cpp_type'
p16058
S'bool'
p16059
sS'default'
p16060
S'1'
p16061
sS'name'
p16062
S'implicit'
p16063
sS'required'
p16064
I00
sS'group_name'
p16065
S'Advanced'
p16066
sa(dp16067
S'description'
p16068
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16069
sS'cpp_type'
p16070
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16071
sS'default'
p16072
g3
sS'name'
p16073
S'save_in'
p16074
sS'required'
p16075
I00
sS'group_name'
p16076
S'Advanced'
p16077
sa(dp16078
S'description'
p16079
S'The seed for the master random number generator\n'
p16080
sS'cpp_type'
p16081
S'unsigned int'
p16082
sS'default'
p16083
S'0'
p16084
sS'name'
p16085
S'seed'
p16086
sS'required'
p16087
I00
sS'group_name'
p16088
S'Advanced'
p16089
sa(dp16090
S'description'
p16091
g3
sS'cpp_type'
p16092
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16093
sS'default'
p16094
S'DashpotBC'
p16095
sS'name'
p16096
S'type'
p16097
sS'required'
p16098
I00
sS'group_name'
p16099
Nsa(dp16100
S'description'
p16101
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16102
sS'cpp_type'
p16103
S'bool'
p16104
sS'default'
p16105
S'0'
p16106
sS'name'
p16107
S'use_displaced_mesh'
p16108
sS'required'
p16109
I00
sS'group_name'
p16110
S'Advanced'
p16111
sa(dp16112
S'description'
p16113
S'The name of the variable that this boundary condition applies to\n'
p16114
sS'cpp_type'
p16115
S'NonlinearVariableName'
p16116
sS'default'
p16117
g3
sS'name'
p16118
S'variable'
p16119
sS'required'
p16120
I01
sS'group_name'
p16121
NsasS'name'
p16122
S'/BCs/DashpotBC'
p16123
sa(dp16124
S'description'
p16125
g3
sS'subblocks'
p16126
NsS'parameters'
p16127
(lp16128
(dp16129
S'description'
p16130
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16131
sS'cpp_type'
p16132
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16133
sS'default'
p16134
g3
sS'name'
p16135
S'boundary'
p16136
sS'required'
p16137
I01
sS'group_name'
p16138
Nsa(dp16139
S'description'
p16140
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16141
sS'cpp_type'
p16142
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16143
sS'default'
p16144
g3
sS'name'
p16145
S'control_tags'
p16146
sS'required'
p16147
I00
sS'group_name'
p16148
S'Advanced'
p16149
sa(dp16150
S'description'
p16151
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16152
sS'cpp_type'
p16153
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16154
sS'default'
p16155
g3
sS'name'
p16156
S'diag_save_in'
p16157
sS'required'
p16158
I00
sS'group_name'
p16159
S'Advanced'
p16160
sa(dp16161
S'description'
p16162
S'Set the enabled status of the MooseObject.\n'
p16163
sS'cpp_type'
p16164
S'bool'
p16165
sS'default'
p16166
S'1'
p16167
sS'name'
p16168
S'enable'
p16169
sS'required'
p16170
I00
sS'group_name'
p16171
S'Advanced'
p16172
sa(dp16173
S'description'
p16174
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16175
sS'cpp_type'
p16176
S'bool'
p16177
sS'default'
p16178
S'1'
p16179
sS'name'
p16180
S'implicit'
p16181
sS'required'
p16182
I00
sS'group_name'
p16183
S'Advanced'
p16184
sa(dp16185
S'description'
p16186
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16187
sS'cpp_type'
p16188
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16189
sS'default'
p16190
g3
sS'name'
p16191
S'save_in'
p16192
sS'required'
p16193
I00
sS'group_name'
p16194
S'Advanced'
p16195
sa(dp16196
S'description'
p16197
S'The seed for the master random number generator\n'
p16198
sS'cpp_type'
p16199
S'unsigned int'
p16200
sS'default'
p16201
S'0'
p16202
sS'name'
p16203
S'seed'
p16204
sS'required'
p16205
I00
sS'group_name'
p16206
S'Advanced'
p16207
sa(dp16208
S'description'
p16209
g3
sS'cpp_type'
p16210
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16211
sS'default'
p16212
S'DiffusionFluxBC'
p16213
sS'name'
p16214
S'type'
p16215
sS'required'
p16216
I00
sS'group_name'
p16217
Nsa(dp16218
S'description'
p16219
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16220
sS'cpp_type'
p16221
S'bool'
p16222
sS'default'
p16223
S'0'
p16224
sS'name'
p16225
S'use_displaced_mesh'
p16226
sS'required'
p16227
I00
sS'group_name'
p16228
S'Advanced'
p16229
sa(dp16230
S'description'
p16231
S'The name of the variable that this boundary condition applies to\n'
p16232
sS'cpp_type'
p16233
S'NonlinearVariableName'
p16234
sS'default'
p16235
g3
sS'name'
p16236
S'variable'
p16237
sS'required'
p16238
I01
sS'group_name'
p16239
NsasS'name'
p16240
S'/BCs/DiffusionFluxBC'
p16241
sa(dp16242
S'description'
p16243
g3
sS'subblocks'
p16244
NsS'parameters'
p16245
(lp16246
(dp16247
S'description'
p16248
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16249
sS'cpp_type'
p16250
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16251
sS'default'
p16252
g3
sS'name'
p16253
S'boundary'
p16254
sS'required'
p16255
I01
sS'group_name'
p16256
Nsa(dp16257
S'description'
p16258
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16259
sS'cpp_type'
p16260
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16261
sS'default'
p16262
g3
sS'name'
p16263
S'control_tags'
p16264
sS'required'
p16265
I00
sS'group_name'
p16266
S'Advanced'
p16267
sa(dp16268
S'description'
p16269
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16270
sS'cpp_type'
p16271
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16272
sS'default'
p16273
g3
sS'name'
p16274
S'diag_save_in'
p16275
sS'required'
p16276
I00
sS'group_name'
p16277
Nsa(dp16278
S'description'
p16279
S'Set the enabled status of the MooseObject.\n'
p16280
sS'cpp_type'
p16281
S'bool'
p16282
sS'default'
p16283
S'1'
p16284
sS'name'
p16285
S'enable'
p16286
sS'required'
p16287
I00
sS'group_name'
p16288
S'Advanced'
p16289
sa(dp16290
S'description'
p16291
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16292
sS'cpp_type'
p16293
S'bool'
p16294
sS'default'
p16295
S'1'
p16296
sS'name'
p16297
S'implicit'
p16298
sS'required'
p16299
I00
sS'group_name'
p16300
S'Advanced'
p16301
sa(dp16302
S'description'
p16303
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16304
sS'cpp_type'
p16305
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16306
sS'default'
p16307
g3
sS'name'
p16308
S'save_in'
p16309
sS'required'
p16310
I00
sS'group_name'
p16311
Nsa(dp16312
S'description'
p16313
S'The seed for the master random number generator\n'
p16314
sS'cpp_type'
p16315
S'unsigned int'
p16316
sS'default'
p16317
S'0'
p16318
sS'name'
p16319
S'seed'
p16320
sS'required'
p16321
I00
sS'group_name'
p16322
S'Advanced'
p16323
sa(dp16324
S'description'
p16325
g3
sS'cpp_type'
p16326
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16327
sS'default'
p16328
S'DirichletBC'
p16329
sS'name'
p16330
S'type'
p16331
sS'required'
p16332
I00
sS'group_name'
p16333
Nsa(dp16334
S'description'
p16335
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16336
sS'cpp_type'
p16337
S'bool'
p16338
sS'default'
p16339
S'0'
p16340
sS'name'
p16341
S'use_displaced_mesh'
p16342
sS'required'
p16343
I00
sS'group_name'
p16344
S'Advanced'
p16345
sa(dp16346
S'description'
p16347
S'Value of the BC\n'
p16348
sS'cpp_type'
p16349
S'double'
p16350
sS'default'
p16351
g3
sS'name'
p16352
S'value'
p16353
sS'required'
p16354
I01
sS'group_name'
p16355
Nsa(dp16356
S'description'
p16357
S'The name of the variable that this boundary condition applies to\n'
p16358
sS'cpp_type'
p16359
S'NonlinearVariableName'
p16360
sS'default'
p16361
g3
sS'name'
p16362
S'variable'
p16363
sS'required'
p16364
I01
sS'group_name'
p16365
NsasS'name'
p16366
S'/BCs/DirichletBC'
p16367
sa(dp16368
S'description'
p16369
g3
sS'subblocks'
p16370
NsS'parameters'
p16371
(lp16372
(dp16373
S'name'
p16374
S'angle_units'
p16375
sS'cpp_type'
p16376
S'MooseEnum'
p16377
sS'default'
p16378
g3
sS'description'
p16379
S'The units of the angle of rotation. Choices are:degrees radians\n'
p16380
sS'required'
p16381
I01
sS'options'
p16382
S'degrees radians'
p16383
sS'group_name'
p16384
Nsa(dp16385
S'description'
p16386
S'Direction of the axis of rotation\n'
p16387
sS'cpp_type'
p16388
S'libMesh::VectorValue<double>'
p16389
sS'default'
p16390
g3
sS'name'
p16391
S'axis_direction'
p16392
sS'required'
p16393
I01
sS'group_name'
p16394
Nsa(dp16395
S'description'
p16396
S'Origin of the axis of rotation\n'
p16397
sS'cpp_type'
p16398
S'libMesh::VectorValue<double>'
p16399
sS'default'
p16400
g3
sS'name'
p16401
S'axis_origin'
p16402
sS'required'
p16403
I01
sS'group_name'
p16404
Nsa(dp16405
S'description'
p16406
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16407
sS'cpp_type'
p16408
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16409
sS'default'
p16410
g3
sS'name'
p16411
S'boundary'
p16412
sS'required'
p16413
I01
sS'group_name'
p16414
Nsa(dp16415
S'description'
p16416
S'The component for the rotational displacement\n'
p16417
sS'cpp_type'
p16418
S'int'
p16419
sS'default'
p16420
g3
sS'name'
p16421
S'component'
p16422
sS'required'
p16423
I01
sS'group_name'
p16424
Nsa(dp16425
S'description'
p16426
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16427
sS'cpp_type'
p16428
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16429
sS'default'
p16430
g3
sS'name'
p16431
S'control_tags'
p16432
sS'required'
p16433
I00
sS'group_name'
p16434
S'Advanced'
p16435
sa(dp16436
S'description'
p16437
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16438
sS'cpp_type'
p16439
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16440
sS'default'
p16441
g3
sS'name'
p16442
S'diag_save_in'
p16443
sS'required'
p16444
I00
sS'group_name'
p16445
Nsa(dp16446
S'description'
p16447
S'Set the enabled status of the MooseObject.\n'
p16448
sS'cpp_type'
p16449
S'bool'
p16450
sS'default'
p16451
S'1'
p16452
sS'name'
p16453
S'enable'
p16454
sS'required'
p16455
I00
sS'group_name'
p16456
S'Advanced'
p16457
sa(dp16458
S'description'
p16459
S'The function providing the angle of rotation.\n'
p16460
sS'cpp_type'
p16461
S'FunctionName'
p16462
sS'default'
p16463
g3
sS'name'
p16464
S'function'
p16465
sS'required'
p16466
I01
sS'group_name'
p16467
Nsa(dp16468
S'description'
p16469
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16470
sS'cpp_type'
p16471
S'bool'
p16472
sS'default'
p16473
S'1'
p16474
sS'name'
p16475
S'implicit'
p16476
sS'required'
p16477
I00
sS'group_name'
p16478
S'Advanced'
p16479
sa(dp16480
S'description'
p16481
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16482
sS'cpp_type'
p16483
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16484
sS'default'
p16485
g3
sS'name'
p16486
S'save_in'
p16487
sS'required'
p16488
I00
sS'group_name'
p16489
Nsa(dp16490
S'description'
p16491
S'The seed for the master random number generator\n'
p16492
sS'cpp_type'
p16493
S'unsigned int'
p16494
sS'default'
p16495
S'0'
p16496
sS'name'
p16497
S'seed'
p16498
sS'required'
p16499
I00
sS'group_name'
p16500
S'Advanced'
p16501
sa(dp16502
S'description'
p16503
g3
sS'cpp_type'
p16504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16505
sS'default'
p16506
S'DisplacementAboutAxis'
p16507
sS'name'
p16508
S'type'
p16509
sS'required'
p16510
I00
sS'group_name'
p16511
Nsa(dp16512
S'description'
p16513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16514
sS'cpp_type'
p16515
S'bool'
p16516
sS'default'
p16517
S'1'
p16518
sS'name'
p16519
S'use_displaced_mesh'
p16520
sS'required'
p16521
I00
sS'group_name'
p16522
S'Advanced'
p16523
sa(dp16524
S'description'
p16525
S'The name of the variable that this boundary condition applies to\n'
p16526
sS'cpp_type'
p16527
S'NonlinearVariableName'
p16528
sS'default'
p16529
g3
sS'name'
p16530
S'variable'
p16531
sS'required'
p16532
I01
sS'group_name'
p16533
NsasS'name'
p16534
S'/BCs/DisplacementAboutAxis'
p16535
sa(dp16536
S'description'
p16537
g3
sS'subblocks'
p16538
NsS'parameters'
p16539
(lp16540
(dp16541
S'description'
p16542
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16543
sS'cpp_type'
p16544
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16545
sS'default'
p16546
g3
sS'name'
p16547
S'boundary'
p16548
sS'required'
p16549
I01
sS'group_name'
p16550
Nsa(dp16551
S'description'
p16552
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16553
sS'cpp_type'
p16554
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16555
sS'default'
p16556
g3
sS'name'
p16557
S'control_tags'
p16558
sS'required'
p16559
I00
sS'group_name'
p16560
S'Advanced'
p16561
sa(dp16562
S'description'
p16563
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16564
sS'cpp_type'
p16565
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16566
sS'default'
p16567
g3
sS'name'
p16568
S'diag_save_in'
p16569
sS'required'
p16570
I00
sS'group_name'
p16571
Nsa(dp16572
S'description'
p16573
S'Set the enabled status of the MooseObject.\n'
p16574
sS'cpp_type'
p16575
S'bool'
p16576
sS'default'
p16577
S'1'
p16578
sS'name'
p16579
S'enable'
p16580
sS'required'
p16581
I00
sS'group_name'
p16582
S'Advanced'
p16583
sa(dp16584
S'description'
p16585
S'The forcing function.\n'
p16586
sS'cpp_type'
p16587
S'FunctionName'
p16588
sS'default'
p16589
g3
sS'name'
p16590
S'function'
p16591
sS'required'
p16592
I01
sS'group_name'
p16593
Nsa(dp16594
S'description'
p16595
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16596
sS'cpp_type'
p16597
S'bool'
p16598
sS'default'
p16599
S'1'
p16600
sS'name'
p16601
S'implicit'
p16602
sS'required'
p16603
I00
sS'group_name'
p16604
S'Advanced'
p16605
sa(dp16606
S'description'
p16607
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16608
sS'cpp_type'
p16609
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16610
sS'default'
p16611
g3
sS'name'
p16612
S'save_in'
p16613
sS'required'
p16614
I00
sS'group_name'
p16615
Nsa(dp16616
S'description'
p16617
S'The seed for the master random number generator\n'
p16618
sS'cpp_type'
p16619
S'unsigned int'
p16620
sS'default'
p16621
S'0'
p16622
sS'name'
p16623
S'seed'
p16624
sS'required'
p16625
I00
sS'group_name'
p16626
S'Advanced'
p16627
sa(dp16628
S'description'
p16629
g3
sS'cpp_type'
p16630
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16631
sS'default'
p16632
S'FunctionDirichletBC'
p16633
sS'name'
p16634
S'type'
p16635
sS'required'
p16636
I00
sS'group_name'
p16637
Nsa(dp16638
S'description'
p16639
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16640
sS'cpp_type'
p16641
S'bool'
p16642
sS'default'
p16643
S'0'
p16644
sS'name'
p16645
S'use_displaced_mesh'
p16646
sS'required'
p16647
I00
sS'group_name'
p16648
S'Advanced'
p16649
sa(dp16650
S'description'
p16651
S'The name of the variable that this boundary condition applies to\n'
p16652
sS'cpp_type'
p16653
S'NonlinearVariableName'
p16654
sS'default'
p16655
g3
sS'name'
p16656
S'variable'
p16657
sS'required'
p16658
I01
sS'group_name'
p16659
NsasS'name'
p16660
S'/BCs/FunctionDirichletBC'
p16661
sa(dp16662
S'description'
p16663
g3
sS'subblocks'
p16664
NsS'parameters'
p16665
(lp16666
(dp16667
S'description'
p16668
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16669
sS'cpp_type'
p16670
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16671
sS'default'
p16672
g3
sS'name'
p16673
S'boundary'
p16674
sS'required'
p16675
I01
sS'group_name'
p16676
Nsa(dp16677
S'description'
p16678
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16679
sS'cpp_type'
p16680
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16681
sS'default'
p16682
g3
sS'name'
p16683
S'control_tags'
p16684
sS'required'
p16685
I00
sS'group_name'
p16686
S'Advanced'
p16687
sa(dp16688
S'description'
p16689
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16690
sS'cpp_type'
p16691
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16692
sS'default'
p16693
g3
sS'name'
p16694
S'diag_save_in'
p16695
sS'required'
p16696
I00
sS'group_name'
p16697
S'Advanced'
p16698
sa(dp16699
S'description'
p16700
S'Set the enabled status of the MooseObject.\n'
p16701
sS'cpp_type'
p16702
S'bool'
p16703
sS'default'
p16704
S'1'
p16705
sS'name'
p16706
S'enable'
p16707
sS'required'
p16708
I00
sS'group_name'
p16709
S'Advanced'
p16710
sa(dp16711
S'description'
p16712
S'The function.\n'
p16713
sS'cpp_type'
p16714
S'FunctionName'
p16715
sS'default'
p16716
g3
sS'name'
p16717
S'function'
p16718
sS'required'
p16719
I01
sS'group_name'
p16720
Nsa(dp16721
S'description'
p16722
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16723
sS'cpp_type'
p16724
S'bool'
p16725
sS'default'
p16726
S'1'
p16727
sS'name'
p16728
S'implicit'
p16729
sS'required'
p16730
I00
sS'group_name'
p16731
S'Advanced'
p16732
sa(dp16733
S'description'
p16734
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16735
sS'cpp_type'
p16736
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16737
sS'default'
p16738
g3
sS'name'
p16739
S'save_in'
p16740
sS'required'
p16741
I00
sS'group_name'
p16742
S'Advanced'
p16743
sa(dp16744
S'description'
p16745
S'The seed for the master random number generator\n'
p16746
sS'cpp_type'
p16747
S'unsigned int'
p16748
sS'default'
p16749
S'0'
p16750
sS'name'
p16751
S'seed'
p16752
sS'required'
p16753
I00
sS'group_name'
p16754
S'Advanced'
p16755
sa(dp16756
S'description'
p16757
g3
sS'cpp_type'
p16758
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16759
sS'default'
p16760
S'FunctionNeumannBC'
p16761
sS'name'
p16762
S'type'
p16763
sS'required'
p16764
I00
sS'group_name'
p16765
Nsa(dp16766
S'description'
p16767
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16768
sS'cpp_type'
p16769
S'bool'
p16770
sS'default'
p16771
S'0'
p16772
sS'name'
p16773
S'use_displaced_mesh'
p16774
sS'required'
p16775
I00
sS'group_name'
p16776
S'Advanced'
p16777
sa(dp16778
S'description'
p16779
S'The name of the variable that this boundary condition applies to\n'
p16780
sS'cpp_type'
p16781
S'NonlinearVariableName'
p16782
sS'default'
p16783
g3
sS'name'
p16784
S'variable'
p16785
sS'required'
p16786
I01
sS'group_name'
p16787
NsasS'name'
p16788
S'/BCs/FunctionNeumannBC'
p16789
sa(dp16790
S'description'
p16791
g3
sS'subblocks'
p16792
NsS'parameters'
p16793
(lp16794
(dp16795
S'description'
p16796
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16797
sS'cpp_type'
p16798
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16799
sS'default'
p16800
g3
sS'name'
p16801
S'boundary'
p16802
sS'required'
p16803
I01
sS'group_name'
p16804
Nsa(dp16805
S'description'
p16806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16807
sS'cpp_type'
p16808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16809
sS'default'
p16810
g3
sS'name'
p16811
S'control_tags'
p16812
sS'required'
p16813
I00
sS'group_name'
p16814
S'Advanced'
p16815
sa(dp16816
S'description'
p16817
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16818
sS'cpp_type'
p16819
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16820
sS'default'
p16821
g3
sS'name'
p16822
S'diag_save_in'
p16823
sS'required'
p16824
I00
sS'group_name'
p16825
S'Advanced'
p16826
sa(dp16827
S'description'
p16828
S'Set the enabled status of the MooseObject.\n'
p16829
sS'cpp_type'
p16830
S'bool'
p16831
sS'default'
p16832
S'1'
p16833
sS'name'
p16834
S'enable'
p16835
sS'required'
p16836
I00
sS'group_name'
p16837
S'Advanced'
p16838
sa(dp16839
S'description'
p16840
S'Forcing function\n'
p16841
sS'cpp_type'
p16842
S'FunctionName'
p16843
sS'default'
p16844
g3
sS'name'
p16845
S'function'
p16846
sS'required'
p16847
I01
sS'group_name'
p16848
Nsa(dp16849
S'description'
p16850
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16851
sS'cpp_type'
p16852
S'bool'
p16853
sS'default'
p16854
S'1'
p16855
sS'name'
p16856
S'implicit'
p16857
sS'required'
p16858
I00
sS'group_name'
p16859
S'Advanced'
p16860
sa(dp16861
S'description'
p16862
S'Penalty scalar\n'
p16863
sS'cpp_type'
p16864
S'double'
p16865
sS'default'
p16866
g3
sS'name'
p16867
S'penalty'
p16868
sS'required'
p16869
I01
sS'group_name'
p16870
Nsa(dp16871
S'description'
p16872
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16873
sS'cpp_type'
p16874
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16875
sS'default'
p16876
g3
sS'name'
p16877
S'save_in'
p16878
sS'required'
p16879
I00
sS'group_name'
p16880
S'Advanced'
p16881
sa(dp16882
S'description'
p16883
S'The seed for the master random number generator\n'
p16884
sS'cpp_type'
p16885
S'unsigned int'
p16886
sS'default'
p16887
S'0'
p16888
sS'name'
p16889
S'seed'
p16890
sS'required'
p16891
I00
sS'group_name'
p16892
S'Advanced'
p16893
sa(dp16894
S'description'
p16895
g3
sS'cpp_type'
p16896
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16897
sS'default'
p16898
S'FunctionPenaltyDirichletBC'
p16899
sS'name'
p16900
S'type'
p16901
sS'required'
p16902
I00
sS'group_name'
p16903
Nsa(dp16904
S'description'
p16905
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16906
sS'cpp_type'
p16907
S'bool'
p16908
sS'default'
p16909
S'0'
p16910
sS'name'
p16911
S'use_displaced_mesh'
p16912
sS'required'
p16913
I00
sS'group_name'
p16914
S'Advanced'
p16915
sa(dp16916
S'description'
p16917
S'The name of the variable that this boundary condition applies to\n'
p16918
sS'cpp_type'
p16919
S'NonlinearVariableName'
p16920
sS'default'
p16921
g3
sS'name'
p16922
S'variable'
p16923
sS'required'
p16924
I01
sS'group_name'
p16925
NsasS'name'
p16926
S'/BCs/FunctionPenaltyDirichletBC'
p16927
sa(dp16928
S'description'
p16929
g3
sS'subblocks'
p16930
NsS'parameters'
p16931
(lp16932
(dp16933
S'description'
p16934
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16935
sS'cpp_type'
p16936
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16937
sS'default'
p16938
g3
sS'name'
p16939
S'boundary'
p16940
sS'required'
p16941
I01
sS'group_name'
p16942
Nsa(dp16943
S'description'
p16944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16945
sS'cpp_type'
p16946
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16947
sS'default'
p16948
g3
sS'name'
p16949
S'control_tags'
p16950
sS'required'
p16951
I00
sS'group_name'
p16952
S'Advanced'
p16953
sa(dp16954
S'description'
p16955
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16956
sS'cpp_type'
p16957
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16958
sS'default'
p16959
g3
sS'name'
p16960
S'diag_save_in'
p16961
sS'required'
p16962
I00
sS'group_name'
p16963
Nsa(dp16964
S'description'
p16965
S'Set the enabled status of the MooseObject.\n'
p16966
sS'cpp_type'
p16967
S'bool'
p16968
sS'default'
p16969
S'1'
p16970
sS'name'
p16971
S'enable'
p16972
sS'required'
p16973
I00
sS'group_name'
p16974
S'Advanced'
p16975
sa(dp16976
S'description'
p16977
S'The forcing function.\n'
p16978
sS'cpp_type'
p16979
S'FunctionName'
p16980
sS'default'
p16981
g3
sS'name'
p16982
S'function'
p16983
sS'required'
p16984
I01
sS'group_name'
p16985
Nsa(dp16986
S'description'
p16987
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16988
sS'cpp_type'
p16989
S'bool'
p16990
sS'default'
p16991
S'1'
p16992
sS'name'
p16993
S'implicit'
p16994
sS'required'
p16995
I00
sS'group_name'
p16996
S'Advanced'
p16997
sa(dp16998
S'description'
p16999
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17000
sS'cpp_type'
p17001
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17002
sS'default'
p17003
g3
sS'name'
p17004
S'save_in'
p17005
sS'required'
p17006
I00
sS'group_name'
p17007
Nsa(dp17008
S'description'
p17009
S'The seed for the master random number generator\n'
p17010
sS'cpp_type'
p17011
S'unsigned int'
p17012
sS'default'
p17013
S'0'
p17014
sS'name'
p17015
S'seed'
p17016
sS'required'
p17017
I00
sS'group_name'
p17018
S'Advanced'
p17019
sa(dp17020
S'description'
p17021
g3
sS'cpp_type'
p17022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17023
sS'default'
p17024
S'FunctionPresetBC'
p17025
sS'name'
p17026
S'type'
p17027
sS'required'
p17028
I00
sS'group_name'
p17029
Nsa(dp17030
S'description'
p17031
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17032
sS'cpp_type'
p17033
S'bool'
p17034
sS'default'
p17035
S'0'
p17036
sS'name'
p17037
S'use_displaced_mesh'
p17038
sS'required'
p17039
I00
sS'group_name'
p17040
S'Advanced'
p17041
sa(dp17042
S'description'
p17043
S'The name of the variable that this boundary condition applies to\n'
p17044
sS'cpp_type'
p17045
S'NonlinearVariableName'
p17046
sS'default'
p17047
g3
sS'name'
p17048
S'variable'
p17049
sS'required'
p17050
I01
sS'group_name'
p17051
NsasS'name'
p17052
S'/BCs/FunctionPresetBC'
p17053
sa(dp17054
S'description'
p17055
g3
sS'subblocks'
p17056
NsS'parameters'
p17057
(lp17058
(dp17059
S'description'
p17060
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17061
sS'cpp_type'
p17062
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17063
sS'default'
p17064
g3
sS'name'
p17065
S'boundary'
p17066
sS'required'
p17067
I01
sS'group_name'
p17068
Nsa(dp17069
S'description'
p17070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17071
sS'cpp_type'
p17072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17073
sS'default'
p17074
g3
sS'name'
p17075
S'control_tags'
p17076
sS'required'
p17077
I00
sS'group_name'
p17078
S'Advanced'
p17079
sa(dp17080
S'description'
p17081
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17082
sS'cpp_type'
p17083
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17084
sS'default'
p17085
g3
sS'name'
p17086
S'diag_save_in'
p17087
sS'required'
p17088
I00
sS'group_name'
p17089
Nsa(dp17090
S'description'
p17091
S'Set the enabled status of the MooseObject.\n'
p17092
sS'cpp_type'
p17093
S'bool'
p17094
sS'default'
p17095
S'1'
p17096
sS'name'
p17097
S'enable'
p17098
sS'required'
p17099
I00
sS'group_name'
p17100
S'Advanced'
p17101
sa(dp17102
S'description'
p17103
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17104
sS'cpp_type'
p17105
S'bool'
p17106
sS'default'
p17107
S'1'
p17108
sS'name'
p17109
S'implicit'
p17110
sS'required'
p17111
I00
sS'group_name'
p17112
S'Advanced'
p17113
sa(dp17114
S'description'
p17115
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17116
sS'cpp_type'
p17117
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17118
sS'default'
p17119
g3
sS'name'
p17120
S'save_in'
p17121
sS'required'
p17122
I00
sS'group_name'
p17123
Nsa(dp17124
S'description'
p17125
S'The seed for the master random number generator\n'
p17126
sS'cpp_type'
p17127
S'unsigned int'
p17128
sS'default'
p17129
S'0'
p17130
sS'name'
p17131
S'seed'
p17132
sS'required'
p17133
I00
sS'group_name'
p17134
S'Advanced'
p17135
sa(dp17136
S'description'
p17137
g3
sS'cpp_type'
p17138
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17139
sS'default'
p17140
S'MatchedValueBC'
p17141
sS'name'
p17142
S'type'
p17143
sS'required'
p17144
I00
sS'group_name'
p17145
Nsa(dp17146
S'description'
p17147
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17148
sS'cpp_type'
p17149
S'bool'
p17150
sS'default'
p17151
S'0'
p17152
sS'name'
p17153
S'use_displaced_mesh'
p17154
sS'required'
p17155
I00
sS'group_name'
p17156
S'Advanced'
p17157
sa(dp17158
S'description'
p17159
S'The variable whose value we are to match.\n'
p17160
sS'cpp_type'
p17161
S'std::vector<VariableName>'
p17162
sS'default'
p17163
g3
sS'name'
p17164
S'v'
p17165
sS'required'
p17166
I01
sS'group_name'
p17167
Nsa(dp17168
S'description'
p17169
S'The name of the variable that this boundary condition applies to\n'
p17170
sS'cpp_type'
p17171
S'NonlinearVariableName'
p17172
sS'default'
p17173
g3
sS'name'
p17174
S'variable'
p17175
sS'required'
p17176
I01
sS'group_name'
p17177
NsasS'name'
p17178
S'/BCs/MatchedValueBC'
p17179
sa(dp17180
S'description'
p17181
g3
sS'subblocks'
p17182
NsS'parameters'
p17183
(lp17184
(dp17185
S'description'
p17186
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17187
sS'cpp_type'
p17188
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17189
sS'default'
p17190
g3
sS'name'
p17191
S'boundary'
p17192
sS'required'
p17193
I01
sS'group_name'
p17194
Nsa(dp17195
S'description'
p17196
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17197
sS'cpp_type'
p17198
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17199
sS'default'
p17200
g3
sS'name'
p17201
S'control_tags'
p17202
sS'required'
p17203
I00
sS'group_name'
p17204
S'Advanced'
p17205
sa(dp17206
S'description'
p17207
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17208
sS'cpp_type'
p17209
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17210
sS'default'
p17211
g3
sS'name'
p17212
S'diag_save_in'
p17213
sS'required'
p17214
I00
sS'group_name'
p17215
S'Advanced'
p17216
sa(dp17217
S'description'
p17218
S'Set the enabled status of the MooseObject.\n'
p17219
sS'cpp_type'
p17220
S'bool'
p17221
sS'default'
p17222
S'1'
p17223
sS'name'
p17224
S'enable'
p17225
sS'required'
p17226
I00
sS'group_name'
p17227
S'Advanced'
p17228
sa(dp17229
S'description'
p17230
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17231
sS'cpp_type'
p17232
S'bool'
p17233
sS'default'
p17234
S'1'
p17235
sS'name'
p17236
S'implicit'
p17237
sS'required'
p17238
I00
sS'group_name'
p17239
S'Advanced'
p17240
sa(dp17241
S'description'
p17242
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17243
sS'cpp_type'
p17244
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17245
sS'default'
p17246
g3
sS'name'
p17247
S'save_in'
p17248
sS'required'
p17249
I00
sS'group_name'
p17250
S'Advanced'
p17251
sa(dp17252
S'description'
p17253
S'The seed for the master random number generator\n'
p17254
sS'cpp_type'
p17255
S'unsigned int'
p17256
sS'default'
p17257
S'0'
p17258
sS'name'
p17259
S'seed'
p17260
sS'required'
p17261
I00
sS'group_name'
p17262
S'Advanced'
p17263
sa(dp17264
S'description'
p17265
g3
sS'cpp_type'
p17266
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17267
sS'default'
p17268
S'NeumannBC'
p17269
sS'name'
p17270
S'type'
p17271
sS'required'
p17272
I00
sS'group_name'
p17273
Nsa(dp17274
S'description'
p17275
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17276
sS'cpp_type'
p17277
S'bool'
p17278
sS'default'
p17279
S'0'
p17280
sS'name'
p17281
S'use_displaced_mesh'
p17282
sS'required'
p17283
I00
sS'group_name'
p17284
S'Advanced'
p17285
sa(dp17286
S'description'
p17287
S'The value of the gradient on the boundary.\n'
p17288
sS'cpp_type'
p17289
S'double'
p17290
sS'default'
p17291
S'0'
p17292
sS'name'
p17293
S'value'
p17294
sS'required'
p17295
I00
sS'group_name'
p17296
Nsa(dp17297
S'description'
p17298
S'The name of the variable that this boundary condition applies to\n'
p17299
sS'cpp_type'
p17300
S'NonlinearVariableName'
p17301
sS'default'
p17302
g3
sS'name'
p17303
S'variable'
p17304
sS'required'
p17305
I01
sS'group_name'
p17306
NsasS'name'
p17307
S'/BCs/NeumannBC'
p17308
sa(dp17309
S'description'
p17310
g3
sS'subblocks'
p17311
NsS'parameters'
p17312
(lp17313
(dp17314
S'description'
p17315
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17316
sS'cpp_type'
p17317
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17318
sS'default'
p17319
g3
sS'name'
p17320
S'boundary'
p17321
sS'required'
p17322
I01
sS'group_name'
p17323
Nsa(dp17324
S'description'
p17325
S'Component of the Lagrange multiplier\n'
p17326
sS'cpp_type'
p17327
S'unsigned int'
p17328
sS'default'
p17329
g3
sS'name'
p17330
S'component'
p17331
sS'required'
p17332
I01
sS'group_name'
p17333
Nsa(dp17334
S'description'
p17335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17336
sS'cpp_type'
p17337
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17338
sS'default'
p17339
g3
sS'name'
p17340
S'control_tags'
p17341
sS'required'
p17342
I00
sS'group_name'
p17343
S'Advanced'
p17344
sa(dp17345
S'description'
p17346
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17347
sS'cpp_type'
p17348
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17349
sS'default'
p17350
g3
sS'name'
p17351
S'diag_save_in'
p17352
sS'required'
p17353
I00
sS'group_name'
p17354
S'Advanced'
p17355
sa(dp17356
S'description'
p17357
S'Set the enabled status of the MooseObject.\n'
p17358
sS'cpp_type'
p17359
S'bool'
p17360
sS'default'
p17361
S'1'
p17362
sS'name'
p17363
S'enable'
p17364
sS'required'
p17365
I00
sS'group_name'
p17366
S'Advanced'
p17367
sa(dp17368
S'description'
p17369
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17370
sS'cpp_type'
p17371
S'bool'
p17372
sS'default'
p17373
S'1'
p17374
sS'name'
p17375
S'implicit'
p17376
sS'required'
p17377
I00
sS'group_name'
p17378
S'Advanced'
p17379
sa(dp17380
S'description'
p17381
S'Lagrange multiplier\n'
p17382
sS'cpp_type'
p17383
S'std::vector<VariableName>'
p17384
sS'default'
p17385
g3
sS'name'
p17386
S'lambda'
p17387
sS'required'
p17388
I01
sS'group_name'
p17389
Nsa(dp17390
S'description'
p17391
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17392
sS'cpp_type'
p17393
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17394
sS'default'
p17395
g3
sS'name'
p17396
S'save_in'
p17397
sS'required'
p17398
I00
sS'group_name'
p17399
S'Advanced'
p17400
sa(dp17401
S'description'
p17402
S'The seed for the master random number generator\n'
p17403
sS'cpp_type'
p17404
S'unsigned int'
p17405
sS'default'
p17406
S'0'
p17407
sS'name'
p17408
S'seed'
p17409
sS'required'
p17410
I00
sS'group_name'
p17411
S'Advanced'
p17412
sa(dp17413
S'description'
p17414
g3
sS'cpp_type'
p17415
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17416
sS'default'
p17417
S'OneDEqualValueConstraintBC'
p17418
sS'name'
p17419
S'type'
p17420
sS'required'
p17421
I00
sS'group_name'
p17422
Nsa(dp17423
S'description'
p17424
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17425
sS'cpp_type'
p17426
S'bool'
p17427
sS'default'
p17428
S'0'
p17429
sS'name'
p17430
S'use_displaced_mesh'
p17431
sS'required'
p17432
I00
sS'group_name'
p17433
S'Advanced'
p17434
sa(dp17435
S'description'
p17436
S'The name of the variable that this boundary condition applies to\n'
p17437
sS'cpp_type'
p17438
S'NonlinearVariableName'
p17439
sS'default'
p17440
g3
sS'name'
p17441
S'variable'
p17442
sS'required'
p17443
I01
sS'group_name'
p17444
Nsa(dp17445
S'description'
p17446
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p17447
sS'cpp_type'
p17448
S'double'
p17449
sS'default'
p17450
g3
sS'name'
p17451
S'vg'
p17452
sS'required'
p17453
I01
sS'group_name'
p17454
NsasS'name'
p17455
S'/BCs/OneDEqualValueConstraintBC'
p17456
sa(dp17457
S'description'
p17458
g3
sS'subblocks'
p17459
NsS'parameters'
p17460
(lp17461
(dp17462
S'description'
p17463
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17464
sS'cpp_type'
p17465
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17466
sS'default'
p17467
g3
sS'name'
p17468
S'boundary'
p17469
sS'required'
p17470
I01
sS'group_name'
p17471
Nsa(dp17472
S'description'
p17473
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17474
sS'cpp_type'
p17475
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17476
sS'default'
p17477
g3
sS'name'
p17478
S'control_tags'
p17479
sS'required'
p17480
I00
sS'group_name'
p17481
S'Advanced'
p17482
sa(dp17483
S'description'
p17484
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17485
sS'cpp_type'
p17486
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17487
sS'default'
p17488
g3
sS'name'
p17489
S'diag_save_in'
p17490
sS'required'
p17491
I00
sS'group_name'
p17492
S'Advanced'
p17493
sa(dp17494
S'description'
p17495
S'Set the enabled status of the MooseObject.\n'
p17496
sS'cpp_type'
p17497
S'bool'
p17498
sS'default'
p17499
S'1'
p17500
sS'name'
p17501
S'enable'
p17502
sS'required'
p17503
I00
sS'group_name'
p17504
S'Advanced'
p17505
sa(dp17506
S'description'
p17507
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17508
sS'cpp_type'
p17509
S'bool'
p17510
sS'default'
p17511
S'1'
p17512
sS'name'
p17513
S'implicit'
p17514
sS'required'
p17515
I00
sS'group_name'
p17516
S'Advanced'
p17517
sa(dp17518
S'description'
p17519
S'Penalty scalar\n'
p17520
sS'cpp_type'
p17521
S'double'
p17522
sS'default'
p17523
g3
sS'name'
p17524
S'penalty'
p17525
sS'required'
p17526
I01
sS'group_name'
p17527
Nsa(dp17528
S'description'
p17529
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17530
sS'cpp_type'
p17531
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17532
sS'default'
p17533
g3
sS'name'
p17534
S'save_in'
p17535
sS'required'
p17536
I00
sS'group_name'
p17537
S'Advanced'
p17538
sa(dp17539
S'description'
p17540
S'The seed for the master random number generator\n'
p17541
sS'cpp_type'
p17542
S'unsigned int'
p17543
sS'default'
p17544
S'0'
p17545
sS'name'
p17546
S'seed'
p17547
sS'required'
p17548
I00
sS'group_name'
p17549
S'Advanced'
p17550
sa(dp17551
S'description'
p17552
g3
sS'cpp_type'
p17553
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17554
sS'default'
p17555
S'PenaltyDirichletBC'
p17556
sS'name'
p17557
S'type'
p17558
sS'required'
p17559
I00
sS'group_name'
p17560
Nsa(dp17561
S'description'
p17562
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17563
sS'cpp_type'
p17564
S'bool'
p17565
sS'default'
p17566
S'0'
p17567
sS'name'
p17568
S'use_displaced_mesh'
p17569
sS'required'
p17570
I00
sS'group_name'
p17571
S'Advanced'
p17572
sa(dp17573
S'description'
p17574
S'Boundary value of the variable\n'
p17575
sS'cpp_type'
p17576
S'double'
p17577
sS'default'
p17578
S'0'
p17579
sS'name'
p17580
S'value'
p17581
sS'required'
p17582
I00
sS'group_name'
p17583
Nsa(dp17584
S'description'
p17585
S'The name of the variable that this boundary condition applies to\n'
p17586
sS'cpp_type'
p17587
S'NonlinearVariableName'
p17588
sS'default'
p17589
g3
sS'name'
p17590
S'variable'
p17591
sS'required'
p17592
I01
sS'group_name'
p17593
NsasS'name'
p17594
S'/BCs/PenaltyDirichletBC'
p17595
sa(dp17596
S'description'
p17597
g3
sS'subblocks'
p17598
(lp17599
(dp17600
S'description'
p17601
g3
sS'subblocks'
p17602
NsS'parameters'
p17603
(lp17604
(dp17605
S'description'
p17606
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p17607
sS'cpp_type'
p17608
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17609
sS'default'
p17610
g3
sS'name'
p17611
S'auto_direction'
p17612
sS'required'
p17613
I00
sS'group_name'
p17614
Nsa(dp17615
S'description'
p17616
S'Functions that specify the inverse transformation\n'
p17617
sS'cpp_type'
p17618
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17619
sS'default'
p17620
g3
sS'name'
p17621
S'inv_transform_func'
p17622
sS'required'
p17623
I00
sS'group_name'
p17624
Nsa(dp17625
S'description'
p17626
S'Boundary ID associated with the primary boundary.\n'
p17627
sS'cpp_type'
p17628
S'BoundaryName'
p17629
sS'default'
p17630
g3
sS'name'
p17631
S'primary'
p17632
sS'required'
p17633
I00
sS'group_name'
p17634
Nsa(dp17635
S'description'
p17636
S'Boundary ID associated with the secondary boundary.\n'
p17637
sS'cpp_type'
p17638
S'BoundaryName'
p17639
sS'default'
p17640
g3
sS'name'
p17641
S'secondary'
p17642
sS'required'
p17643
I00
sS'group_name'
p17644
Nsa(dp17645
S'description'
p17646
S'Functions that specify the transformation\n'
p17647
sS'cpp_type'
p17648
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17649
sS'default'
p17650
g3
sS'name'
p17651
S'transform_func'
p17652
sS'required'
p17653
I00
sS'group_name'
p17654
Nsa(dp17655
S'description'
p17656
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p17657
sS'cpp_type'
p17658
S'libMesh::VectorValue<double>'
p17659
sS'default'
p17660
g3
sS'name'
p17661
S'translation'
p17662
sS'required'
p17663
I00
sS'group_name'
p17664
Nsa(dp17665
S'description'
p17666
S'Variable for the periodic boundary\n'
p17667
sS'cpp_type'
p17668
S'std::vector<VariableName, std::allocator<VariableName> >'
p17669
sS'default'
p17670
g3
sS'name'
p17671
S'variable'
p17672
sS'required'
p17673
I00
sS'group_name'
p17674
NsasS'name'
p17675
S'/BCs/Periodic/*'
p17676
sasS'parameters'
p17677
NsS'name'
p17678
S'/BCs/Periodic'
p17679
sa(dp17680
S'description'
p17681
g3
sS'subblocks'
p17682
NsS'parameters'
p17683
(lp17684
(dp17685
S'description'
p17686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17687
sS'cpp_type'
p17688
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17689
sS'default'
p17690
g3
sS'name'
p17691
S'boundary'
p17692
sS'required'
p17693
I01
sS'group_name'
p17694
Nsa(dp17695
S'description'
p17696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17697
sS'cpp_type'
p17698
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17699
sS'default'
p17700
g3
sS'name'
p17701
S'control_tags'
p17702
sS'required'
p17703
I00
sS'group_name'
p17704
S'Advanced'
p17705
sa(dp17706
S'description'
p17707
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17708
sS'cpp_type'
p17709
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17710
sS'default'
p17711
g3
sS'name'
p17712
S'diag_save_in'
p17713
sS'required'
p17714
I00
sS'group_name'
p17715
Nsa(dp17716
S'description'
p17717
S'Set the enabled status of the MooseObject.\n'
p17718
sS'cpp_type'
p17719
S'bool'
p17720
sS'default'
p17721
S'1'
p17722
sS'name'
p17723
S'enable'
p17724
sS'required'
p17725
I00
sS'group_name'
p17726
S'Advanced'
p17727
sa(dp17728
S'description'
p17729
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17730
sS'cpp_type'
p17731
S'bool'
p17732
sS'default'
p17733
S'1'
p17734
sS'name'
p17735
S'implicit'
p17736
sS'required'
p17737
I00
sS'group_name'
p17738
S'Advanced'
p17739
sa(dp17740
S'description'
p17741
S'The postprocessor to set the value to on the boundary.\n'
p17742
sS'cpp_type'
p17743
S'PostprocessorName'
p17744
sS'default'
p17745
g3
sS'name'
p17746
S'postprocessor'
p17747
sS'required'
p17748
I01
sS'group_name'
p17749
Nsa(dp17750
S'description'
p17751
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17752
sS'cpp_type'
p17753
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17754
sS'default'
p17755
g3
sS'name'
p17756
S'save_in'
p17757
sS'required'
p17758
I00
sS'group_name'
p17759
Nsa(dp17760
S'description'
p17761
S'The seed for the master random number generator\n'
p17762
sS'cpp_type'
p17763
S'unsigned int'
p17764
sS'default'
p17765
S'0'
p17766
sS'name'
p17767
S'seed'
p17768
sS'required'
p17769
I00
sS'group_name'
p17770
S'Advanced'
p17771
sa(dp17772
S'description'
p17773
g3
sS'cpp_type'
p17774
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17775
sS'default'
p17776
S'PostprocessorDirichletBC'
p17777
sS'name'
p17778
S'type'
p17779
sS'required'
p17780
I00
sS'group_name'
p17781
Nsa(dp17782
S'description'
p17783
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17784
sS'cpp_type'
p17785
S'bool'
p17786
sS'default'
p17787
S'0'
p17788
sS'name'
p17789
S'use_displaced_mesh'
p17790
sS'required'
p17791
I00
sS'group_name'
p17792
S'Advanced'
p17793
sa(dp17794
S'description'
p17795
S'The name of the variable that this boundary condition applies to\n'
p17796
sS'cpp_type'
p17797
S'NonlinearVariableName'
p17798
sS'default'
p17799
g3
sS'name'
p17800
S'variable'
p17801
sS'required'
p17802
I01
sS'group_name'
p17803
NsasS'name'
p17804
S'/BCs/PostprocessorDirichletBC'
p17805
sa(dp17806
S'description'
p17807
g3
sS'subblocks'
p17808
NsS'parameters'
p17809
(lp17810
(dp17811
S'description'
p17812
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17813
sS'cpp_type'
p17814
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17815
sS'default'
p17816
g3
sS'name'
p17817
S'boundary'
p17818
sS'required'
p17819
I01
sS'group_name'
p17820
Nsa(dp17821
S'description'
p17822
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17823
sS'cpp_type'
p17824
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17825
sS'default'
p17826
g3
sS'name'
p17827
S'control_tags'
p17828
sS'required'
p17829
I00
sS'group_name'
p17830
S'Advanced'
p17831
sa(dp17832
S'description'
p17833
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17834
sS'cpp_type'
p17835
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17836
sS'default'
p17837
g3
sS'name'
p17838
S'diag_save_in'
p17839
sS'required'
p17840
I00
sS'group_name'
p17841
S'Advanced'
p17842
sa(dp17843
S'description'
p17844
S'Set the enabled status of the MooseObject.\n'
p17845
sS'cpp_type'
p17846
S'bool'
p17847
sS'default'
p17848
S'1'
p17849
sS'name'
p17850
S'enable'
p17851
sS'required'
p17852
I00
sS'group_name'
p17853
S'Advanced'
p17854
sa(dp17855
S'description'
p17856
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17857
sS'cpp_type'
p17858
S'bool'
p17859
sS'default'
p17860
S'1'
p17861
sS'name'
p17862
S'implicit'
p17863
sS'required'
p17864
I00
sS'group_name'
p17865
S'Advanced'
p17866
sa(dp17867
S'description'
p17868
S'The postprocessor to use for value of the gradient on the boundary.\n'
p17869
sS'cpp_type'
p17870
S'PostprocessorName'
p17871
sS'default'
p17872
S'0'
p17873
sS'name'
p17874
S'postprocessor'
p17875
sS'required'
p17876
I00
sS'group_name'
p17877
Nsa(dp17878
S'description'
p17879
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17880
sS'cpp_type'
p17881
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17882
sS'default'
p17883
g3
sS'name'
p17884
S'save_in'
p17885
sS'required'
p17886
I00
sS'group_name'
p17887
S'Advanced'
p17888
sa(dp17889
S'description'
p17890
S'The seed for the master random number generator\n'
p17891
sS'cpp_type'
p17892
S'unsigned int'
p17893
sS'default'
p17894
S'0'
p17895
sS'name'
p17896
S'seed'
p17897
sS'required'
p17898
I00
sS'group_name'
p17899
S'Advanced'
p17900
sa(dp17901
S'description'
p17902
g3
sS'cpp_type'
p17903
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17904
sS'default'
p17905
S'PostprocessorNeumannBC'
p17906
sS'name'
p17907
S'type'
p17908
sS'required'
p17909
I00
sS'group_name'
p17910
Nsa(dp17911
S'description'
p17912
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17913
sS'cpp_type'
p17914
S'bool'
p17915
sS'default'
p17916
S'0'
p17917
sS'name'
p17918
S'use_displaced_mesh'
p17919
sS'required'
p17920
I00
sS'group_name'
p17921
S'Advanced'
p17922
sa(dp17923
S'description'
p17924
S'The name of the variable that this boundary condition applies to\n'
p17925
sS'cpp_type'
p17926
S'NonlinearVariableName'
p17927
sS'default'
p17928
g3
sS'name'
p17929
S'variable'
p17930
sS'required'
p17931
I01
sS'group_name'
p17932
NsasS'name'
p17933
S'/BCs/PostprocessorNeumannBC'
p17934
sa(dp17935
S'description'
p17936
S'Prescribe acceleration on a given boundary in a given direction\n'
p17937
sS'subblocks'
p17938
NsS'parameters'
p17939
(lp17940
(dp17941
S'description'
p17942
S'The acceleration variable.\n'
p17943
sS'cpp_type'
p17944
S'std::vector<VariableName>'
p17945
sS'default'
p17946
g3
sS'name'
p17947
S'acceleration'
p17948
sS'required'
p17949
I01
sS'group_name'
p17950
Nsa(dp17951
S'description'
p17952
S'beta parameter for Newmark time integration.\n'
p17953
sS'cpp_type'
p17954
S'double'
p17955
sS'default'
p17956
g3
sS'name'
p17957
S'beta'
p17958
sS'required'
p17959
I01
sS'group_name'
p17960
Nsa(dp17961
S'description'
p17962
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17963
sS'cpp_type'
p17964
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17965
sS'default'
p17966
g3
sS'name'
p17967
S'boundary'
p17968
sS'required'
p17969
I01
sS'group_name'
p17970
Nsa(dp17971
S'description'
p17972
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17973
sS'cpp_type'
p17974
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17975
sS'default'
p17976
g3
sS'name'
p17977
S'control_tags'
p17978
sS'required'
p17979
I00
sS'group_name'
p17980
S'Advanced'
p17981
sa(dp17982
S'description'
p17983
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17984
sS'cpp_type'
p17985
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17986
sS'default'
p17987
g3
sS'name'
p17988
S'diag_save_in'
p17989
sS'required'
p17990
I00
sS'group_name'
p17991
Nsa(dp17992
S'description'
p17993
S'Set the enabled status of the MooseObject.\n'
p17994
sS'cpp_type'
p17995
S'bool'
p17996
sS'default'
p17997
S'1'
p17998
sS'name'
p17999
S'enable'
p18000
sS'required'
p18001
I00
sS'group_name'
p18002
S'Advanced'
p18003
sa(dp18004
S'description'
p18005
S'Function describing the velocity.\n'
p18006
sS'cpp_type'
p18007
S'FunctionName'
p18008
sS'default'
p18009
S'1'
p18010
sS'name'
p18011
S'function'
p18012
sS'required'
p18013
I00
sS'group_name'
p18014
Nsa(dp18015
S'description'
p18016
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18017
sS'cpp_type'
p18018
S'bool'
p18019
sS'default'
p18020
S'1'
p18021
sS'name'
p18022
S'implicit'
p18023
sS'required'
p18024
I00
sS'group_name'
p18025
S'Advanced'
p18026
sa(dp18027
S'description'
p18028
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18029
sS'cpp_type'
p18030
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18031
sS'default'
p18032
g3
sS'name'
p18033
S'save_in'
p18034
sS'required'
p18035
I00
sS'group_name'
p18036
Nsa(dp18037
S'description'
p18038
S'Scale factor if function is given.\n'
p18039
sS'cpp_type'
p18040
S'double'
p18041
sS'default'
p18042
S'1'
p18043
sS'name'
p18044
S'scale_factor'
p18045
sS'required'
p18046
I00
sS'group_name'
p18047
Nsa(dp18048
S'description'
p18049
S'The seed for the master random number generator\n'
p18050
sS'cpp_type'
p18051
S'unsigned int'
p18052
sS'default'
p18053
S'0'
p18054
sS'name'
p18055
S'seed'
p18056
sS'required'
p18057
I00
sS'group_name'
p18058
S'Advanced'
p18059
sa(dp18060
S'description'
p18061
g3
sS'cpp_type'
p18062
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18063
sS'default'
p18064
S'PresetAcceleration'
p18065
sS'name'
p18066
S'type'
p18067
sS'required'
p18068
I00
sS'group_name'
p18069
Nsa(dp18070
S'description'
p18071
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18072
sS'cpp_type'
p18073
S'bool'
p18074
sS'default'
p18075
S'0'
p18076
sS'name'
p18077
S'use_displaced_mesh'
p18078
sS'required'
p18079
I00
sS'group_name'
p18080
S'Advanced'
p18081
sa(dp18082
S'description'
p18083
S'The name of the variable that this boundary condition applies to\n'
p18084
sS'cpp_type'
p18085
S'NonlinearVariableName'
p18086
sS'default'
p18087
g3
sS'name'
p18088
S'variable'
p18089
sS'required'
p18090
I01
sS'group_name'
p18091
Nsa(dp18092
S'description'
p18093
S'The velocity variable.\n'
p18094
sS'cpp_type'
p18095
S'std::vector<VariableName>'
p18096
sS'default'
p18097
g3
sS'name'
p18098
S'velocity'
p18099
sS'required'
p18100
I01
sS'group_name'
p18101
NsasS'name'
p18102
S'/BCs/PresetAcceleration'
p18103
sa(dp18104
S'description'
p18105
g3
sS'subblocks'
p18106
NsS'parameters'
p18107
(lp18108
(dp18109
S'description'
p18110
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18111
sS'cpp_type'
p18112
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18113
sS'default'
p18114
g3
sS'name'
p18115
S'boundary'
p18116
sS'required'
p18117
I01
sS'group_name'
p18118
Nsa(dp18119
S'description'
p18120
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18121
sS'cpp_type'
p18122
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18123
sS'default'
p18124
g3
sS'name'
p18125
S'control_tags'
p18126
sS'required'
p18127
I00
sS'group_name'
p18128
S'Advanced'
p18129
sa(dp18130
S'description'
p18131
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18132
sS'cpp_type'
p18133
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18134
sS'default'
p18135
g3
sS'name'
p18136
S'diag_save_in'
p18137
sS'required'
p18138
I00
sS'group_name'
p18139
Nsa(dp18140
S'description'
p18141
S'Set the enabled status of the MooseObject.\n'
p18142
sS'cpp_type'
p18143
S'bool'
p18144
sS'default'
p18145
S'1'
p18146
sS'name'
p18147
S'enable'
p18148
sS'required'
p18149
I00
sS'group_name'
p18150
S'Advanced'
p18151
sa(dp18152
S'description'
p18153
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18154
sS'cpp_type'
p18155
S'bool'
p18156
sS'default'
p18157
S'1'
p18158
sS'name'
p18159
S'implicit'
p18160
sS'required'
p18161
I00
sS'group_name'
p18162
S'Advanced'
p18163
sa(dp18164
S'description'
p18165
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18166
sS'cpp_type'
p18167
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18168
sS'default'
p18169
g3
sS'name'
p18170
S'save_in'
p18171
sS'required'
p18172
I00
sS'group_name'
p18173
Nsa(dp18174
S'description'
p18175
S'The seed for the master random number generator\n'
p18176
sS'cpp_type'
p18177
S'unsigned int'
p18178
sS'default'
p18179
S'0'
p18180
sS'name'
p18181
S'seed'
p18182
sS'required'
p18183
I00
sS'group_name'
p18184
S'Advanced'
p18185
sa(dp18186
S'description'
p18187
g3
sS'cpp_type'
p18188
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18189
sS'default'
p18190
S'PresetBC'
p18191
sS'name'
p18192
S'type'
p18193
sS'required'
p18194
I00
sS'group_name'
p18195
Nsa(dp18196
S'description'
p18197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18198
sS'cpp_type'
p18199
S'bool'
p18200
sS'default'
p18201
S'0'
p18202
sS'name'
p18203
S'use_displaced_mesh'
p18204
sS'required'
p18205
I00
sS'group_name'
p18206
S'Advanced'
p18207
sa(dp18208
S'description'
p18209
S'Value of the BC\n'
p18210
sS'cpp_type'
p18211
S'double'
p18212
sS'default'
p18213
g3
sS'name'
p18214
S'value'
p18215
sS'required'
p18216
I01
sS'group_name'
p18217
Nsa(dp18218
S'description'
p18219
S'The name of the variable that this boundary condition applies to\n'
p18220
sS'cpp_type'
p18221
S'NonlinearVariableName'
p18222
sS'default'
p18223
g3
sS'name'
p18224
S'variable'
p18225
sS'required'
p18226
I01
sS'group_name'
p18227
NsasS'name'
p18228
S'/BCs/PresetBC'
p18229
sa(dp18230
S'description'
p18231
S'Prescribe the displacement on a given boundary in a given direction.\n'
p18232
sS'subblocks'
p18233
NsS'parameters'
p18234
(lp18235
(dp18236
S'description'
p18237
S'The acceleration variable.\n'
p18238
sS'cpp_type'
p18239
S'std::vector<VariableName>'
p18240
sS'default'
p18241
g3
sS'name'
p18242
S'acceleration'
p18243
sS'required'
p18244
I01
sS'group_name'
p18245
Nsa(dp18246
S'description'
p18247
S'beta parameter for Newmark time integration.\n'
p18248
sS'cpp_type'
p18249
S'double'
p18250
sS'default'
p18251
g3
sS'name'
p18252
S'beta'
p18253
sS'required'
p18254
I01
sS'group_name'
p18255
Nsa(dp18256
S'description'
p18257
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18258
sS'cpp_type'
p18259
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18260
sS'default'
p18261
g3
sS'name'
p18262
S'boundary'
p18263
sS'required'
p18264
I01
sS'group_name'
p18265
Nsa(dp18266
S'description'
p18267
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18268
sS'cpp_type'
p18269
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18270
sS'default'
p18271
g3
sS'name'
p18272
S'control_tags'
p18273
sS'required'
p18274
I00
sS'group_name'
p18275
S'Advanced'
p18276
sa(dp18277
S'description'
p18278
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18279
sS'cpp_type'
p18280
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18281
sS'default'
p18282
g3
sS'name'
p18283
S'diag_save_in'
p18284
sS'required'
p18285
I00
sS'group_name'
p18286
Nsa(dp18287
S'description'
p18288
S'Set the enabled status of the MooseObject.\n'
p18289
sS'cpp_type'
p18290
S'bool'
p18291
sS'default'
p18292
S'1'
p18293
sS'name'
p18294
S'enable'
p18295
sS'required'
p18296
I00
sS'group_name'
p18297
S'Advanced'
p18298
sa(dp18299
S'description'
p18300
S'Function describing the displacement.\n'
p18301
sS'cpp_type'
p18302
S'FunctionName'
p18303
sS'default'
p18304
S'1'
p18305
sS'name'
p18306
S'function'
p18307
sS'required'
p18308
I00
sS'group_name'
p18309
Nsa(dp18310
S'description'
p18311
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18312
sS'cpp_type'
p18313
S'bool'
p18314
sS'default'
p18315
S'1'
p18316
sS'name'
p18317
S'implicit'
p18318
sS'required'
p18319
I00
sS'group_name'
p18320
S'Advanced'
p18321
sa(dp18322
S'description'
p18323
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18324
sS'cpp_type'
p18325
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18326
sS'default'
p18327
g3
sS'name'
p18328
S'save_in'
p18329
sS'required'
p18330
I00
sS'group_name'
p18331
Nsa(dp18332
S'description'
p18333
S'Scale factor if function is given.\n'
p18334
sS'cpp_type'
p18335
S'double'
p18336
sS'default'
p18337
S'1'
p18338
sS'name'
p18339
S'scale_factor'
p18340
sS'required'
p18341
I00
sS'group_name'
p18342
Nsa(dp18343
S'description'
p18344
S'The seed for the master random number generator\n'
p18345
sS'cpp_type'
p18346
S'unsigned int'
p18347
sS'default'
p18348
S'0'
p18349
sS'name'
p18350
S'seed'
p18351
sS'required'
p18352
I00
sS'group_name'
p18353
S'Advanced'
p18354
sa(dp18355
S'description'
p18356
g3
sS'cpp_type'
p18357
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18358
sS'default'
p18359
S'PresetDisplacement'
p18360
sS'name'
p18361
S'type'
p18362
sS'required'
p18363
I00
sS'group_name'
p18364
Nsa(dp18365
S'description'
p18366
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18367
sS'cpp_type'
p18368
S'bool'
p18369
sS'default'
p18370
S'0'
p18371
sS'name'
p18372
S'use_displaced_mesh'
p18373
sS'required'
p18374
I00
sS'group_name'
p18375
S'Advanced'
p18376
sa(dp18377
S'description'
p18378
S'The name of the variable that this boundary condition applies to\n'
p18379
sS'cpp_type'
p18380
S'NonlinearVariableName'
p18381
sS'default'
p18382
g3
sS'name'
p18383
S'variable'
p18384
sS'required'
p18385
I01
sS'group_name'
p18386
Nsa(dp18387
S'description'
p18388
S'The velocity variable.\n'
p18389
sS'cpp_type'
p18390
S'std::vector<VariableName>'
p18391
sS'default'
p18392
g3
sS'name'
p18393
S'velocity'
p18394
sS'required'
p18395
I01
sS'group_name'
p18396
NsasS'name'
p18397
S'/BCs/PresetDisplacement'
p18398
sa(dp18399
S'description'
p18400
g3
sS'subblocks'
p18401
NsS'parameters'
p18402
(lp18403
(dp18404
S'description'
p18405
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18406
sS'cpp_type'
p18407
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18408
sS'default'
p18409
g3
sS'name'
p18410
S'boundary'
p18411
sS'required'
p18412
I01
sS'group_name'
p18413
Nsa(dp18414
S'description'
p18415
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18416
sS'cpp_type'
p18417
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18418
sS'default'
p18419
g3
sS'name'
p18420
S'control_tags'
p18421
sS'required'
p18422
I00
sS'group_name'
p18423
S'Advanced'
p18424
sa(dp18425
S'description'
p18426
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18427
sS'cpp_type'
p18428
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18429
sS'default'
p18430
g3
sS'name'
p18431
S'diag_save_in'
p18432
sS'required'
p18433
I00
sS'group_name'
p18434
Nsa(dp18435
S'description'
p18436
S'Set the enabled status of the MooseObject.\n'
p18437
sS'cpp_type'
p18438
S'bool'
p18439
sS'default'
p18440
S'1'
p18441
sS'name'
p18442
S'enable'
p18443
sS'required'
p18444
I00
sS'group_name'
p18445
S'Advanced'
p18446
sa(dp18447
S'description'
p18448
S'Function describing the velocity.\n'
p18449
sS'cpp_type'
p18450
S'FunctionName'
p18451
sS'default'
p18452
S'1'
p18453
sS'name'
p18454
S'function'
p18455
sS'required'
p18456
I00
sS'group_name'
p18457
Nsa(dp18458
S'description'
p18459
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18460
sS'cpp_type'
p18461
S'bool'
p18462
sS'default'
p18463
S'1'
p18464
sS'name'
p18465
S'implicit'
p18466
sS'required'
p18467
I00
sS'group_name'
p18468
S'Advanced'
p18469
sa(dp18470
S'description'
p18471
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18472
sS'cpp_type'
p18473
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18474
sS'default'
p18475
g3
sS'name'
p18476
S'save_in'
p18477
sS'required'
p18478
I00
sS'group_name'
p18479
Nsa(dp18480
S'description'
p18481
S'The seed for the master random number generator\n'
p18482
sS'cpp_type'
p18483
S'unsigned int'
p18484
sS'default'
p18485
S'0'
p18486
sS'name'
p18487
S'seed'
p18488
sS'required'
p18489
I00
sS'group_name'
p18490
S'Advanced'
p18491
sa(dp18492
S'description'
p18493
g3
sS'cpp_type'
p18494
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18495
sS'default'
p18496
S'PresetVelocity'
p18497
sS'name'
p18498
S'type'
p18499
sS'required'
p18500
I00
sS'group_name'
p18501
Nsa(dp18502
S'description'
p18503
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18504
sS'cpp_type'
p18505
S'bool'
p18506
sS'default'
p18507
S'0'
p18508
sS'name'
p18509
S'use_displaced_mesh'
p18510
sS'required'
p18511
I00
sS'group_name'
p18512
S'Advanced'
p18513
sa(dp18514
S'description'
p18515
S'The name of the variable that this boundary condition applies to\n'
p18516
sS'cpp_type'
p18517
S'NonlinearVariableName'
p18518
sS'default'
p18519
g3
sS'name'
p18520
S'variable'
p18521
sS'required'
p18522
I01
sS'group_name'
p18523
Nsa(dp18524
S'description'
p18525
S'Value of the velocity.  Used as scale factor if function is given.\n'
p18526
sS'cpp_type'
p18527
S'double'
p18528
sS'default'
p18529
S'1'
p18530
sS'name'
p18531
S'velocity'
p18532
sS'required'
p18533
I00
sS'group_name'
p18534
NsasS'name'
p18535
S'/BCs/PresetVelocity'
p18536
sa(dp18537
S'description'
p18538
S'Applies a pressure on a given boundary in a given direction\n'
p18539
sS'subblocks'
p18540
(lp18541
(dp18542
S'description'
p18543
g3
sS'subblocks'
p18544
NsS'parameters'
p18545
(lp18546
(dp18547
S'description'
p18548
S'alpha parameter for HHT time integration\n'
p18549
sS'cpp_type'
p18550
S'double'
p18551
sS'default'
p18552
S'0'
p18553
sS'name'
p18554
S'alpha'
p18555
sS'required'
p18556
I00
sS'group_name'
p18557
Nsa(dp18558
S'description'
p18559
S'The list of boundary IDs from the mesh where the pressure will be applied\n'
p18560
sS'cpp_type'
p18561
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18562
sS'default'
p18563
g3
sS'name'
p18564
S'boundary'
p18565
sS'required'
p18566
I01
sS'group_name'
p18567
Nsa(dp18568
S'description'
p18569
S'The x displacement\n'
p18570
sS'cpp_type'
p18571
S'NonlinearVariableName'
p18572
sS'default'
p18573
g3
sS'name'
p18574
S'disp_x'
p18575
sS'required'
p18576
I00
sS'group_name'
p18577
Nsa(dp18578
S'description'
p18579
S'The y displacement\n'
p18580
sS'cpp_type'
p18581
S'NonlinearVariableName'
p18582
sS'default'
p18583
g3
sS'name'
p18584
S'disp_y'
p18585
sS'required'
p18586
I00
sS'group_name'
p18587
Nsa(dp18588
S'description'
p18589
S'The z displacement\n'
p18590
sS'cpp_type'
p18591
S'NonlinearVariableName'
p18592
sS'default'
p18593
g3
sS'name'
p18594
S'disp_z'
p18595
sS'required'
p18596
I00
sS'group_name'
p18597
Nsa(dp18598
S'description'
p18599
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p18600
sS'cpp_type'
p18601
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p18602
sS'default'
p18603
g3
sS'name'
p18604
S'displacements'
p18605
sS'required'
p18606
I00
sS'group_name'
p18607
Nsa(dp18608
S'description'
p18609
S'The factor to use in computing the pressure\n'
p18610
sS'cpp_type'
p18611
S'double'
p18612
sS'default'
p18613
S'1'
p18614
sS'name'
p18615
S'factor'
p18616
sS'required'
p18617
I00
sS'group_name'
p18618
Nsa(dp18619
S'description'
p18620
S'The function that describes the pressure\n'
p18621
sS'cpp_type'
p18622
S'FunctionName'
p18623
sS'default'
p18624
g3
sS'name'
p18625
S'function'
p18626
sS'required'
p18627
I00
sS'group_name'
p18628
Nsa(dp18629
S'description'
p18630
S'The save_in variables for x displacement\n'
p18631
sS'cpp_type'
p18632
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18633
sS'default'
p18634
g3
sS'name'
p18635
S'save_in_disp_x'
p18636
sS'required'
p18637
I00
sS'group_name'
p18638
Nsa(dp18639
S'description'
p18640
S'The save_in variables for y displacement\n'
p18641
sS'cpp_type'
p18642
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18643
sS'default'
p18644
g3
sS'name'
p18645
S'save_in_disp_y'
p18646
sS'required'
p18647
I00
sS'group_name'
p18648
Nsa(dp18649
S'description'
p18650
S'The save_in variables for z displacement\n'
p18651
sS'cpp_type'
p18652
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18653
sS'default'
p18654
g3
sS'name'
p18655
S'save_in_disp_z'
p18656
sS'required'
p18657
I00
sS'group_name'
p18658
NsasS'name'
p18659
S'/BCs/Pressure/*'
p18660
sasS'parameters'
p18661
(lp18662
(dp18663
S'description'
p18664
S'alpha parameter required for HHT time integration scheme\n'
p18665
sS'cpp_type'
p18666
S'double'
p18667
sS'default'
p18668
S'0'
p18669
sS'name'
p18670
S'alpha'
p18671
sS'required'
p18672
I00
sS'group_name'
p18673
Nsa(dp18674
S'description'
p18675
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18676
sS'cpp_type'
p18677
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18678
sS'default'
p18679
g3
sS'name'
p18680
S'boundary'
p18681
sS'required'
p18682
I01
sS'group_name'
p18683
Nsa(dp18684
S'description'
p18685
S'The component for the pressure\n'
p18686
sS'cpp_type'
p18687
S'unsigned int'
p18688
sS'default'
p18689
g3
sS'name'
p18690
S'component'
p18691
sS'required'
p18692
I01
sS'group_name'
p18693
Nsa(dp18694
S'description'
p18695
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18696
sS'cpp_type'
p18697
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18698
sS'default'
p18699
g3
sS'name'
p18700
S'control_tags'
p18701
sS'required'
p18702
I00
sS'group_name'
p18703
S'Advanced'
p18704
sa(dp18705
S'description'
p18706
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18707
sS'cpp_type'
p18708
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18709
sS'default'
p18710
g3
sS'name'
p18711
S'diag_save_in'
p18712
sS'required'
p18713
I00
sS'group_name'
p18714
S'Advanced'
p18715
sa(dp18716
S'description'
p18717
S'Set the enabled status of the MooseObject.\n'
p18718
sS'cpp_type'
p18719
S'bool'
p18720
sS'default'
p18721
S'1'
p18722
sS'name'
p18723
S'enable'
p18724
sS'required'
p18725
I00
sS'group_name'
p18726
S'Advanced'
p18727
sa(dp18728
S'description'
p18729
S'The magnitude to use in computing the pressure\n'
p18730
sS'cpp_type'
p18731
S'double'
p18732
sS'default'
p18733
S'1'
p18734
sS'name'
p18735
S'factor'
p18736
sS'required'
p18737
I00
sS'group_name'
p18738
Nsa(dp18739
S'description'
p18740
S'The function that describes the pressure\n'
p18741
sS'cpp_type'
p18742
S'FunctionName'
p18743
sS'default'
p18744
g3
sS'name'
p18745
S'function'
p18746
sS'required'
p18747
I00
sS'group_name'
p18748
Nsa(dp18749
S'description'
p18750
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18751
sS'cpp_type'
p18752
S'bool'
p18753
sS'default'
p18754
S'1'
p18755
sS'name'
p18756
S'implicit'
p18757
sS'required'
p18758
I00
sS'group_name'
p18759
S'Advanced'
p18760
sa(dp18761
S'description'
p18762
S'Postprocessor that will supply the pressure value\n'
p18763
sS'cpp_type'
p18764
S'PostprocessorName'
p18765
sS'default'
p18766
g3
sS'name'
p18767
S'postprocessor'
p18768
sS'required'
p18769
I00
sS'group_name'
p18770
Nsa(dp18771
S'description'
p18772
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18773
sS'cpp_type'
p18774
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18775
sS'default'
p18776
g3
sS'name'
p18777
S'save_in'
p18778
sS'required'
p18779
I00
sS'group_name'
p18780
S'Advanced'
p18781
sa(dp18782
S'description'
p18783
S'The seed for the master random number generator\n'
p18784
sS'cpp_type'
p18785
S'unsigned int'
p18786
sS'default'
p18787
S'0'
p18788
sS'name'
p18789
S'seed'
p18790
sS'required'
p18791
I00
sS'group_name'
p18792
S'Advanced'
p18793
sa(dp18794
S'description'
p18795
g3
sS'cpp_type'
p18796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18797
sS'default'
p18798
S'Pressure'
p18799
sS'name'
p18800
S'type'
p18801
sS'required'
p18802
I00
sS'group_name'
p18803
Nsa(dp18804
S'description'
p18805
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18806
sS'cpp_type'
p18807
S'bool'
p18808
sS'default'
p18809
S'1'
p18810
sS'name'
p18811
S'use_displaced_mesh'
p18812
sS'required'
p18813
I00
sS'group_name'
p18814
S'Advanced'
p18815
sa(dp18816
S'description'
p18817
S'The name of the variable that this boundary condition applies to\n'
p18818
sS'cpp_type'
p18819
S'NonlinearVariableName'
p18820
sS'default'
p18821
g3
sS'name'
p18822
S'variable'
p18823
sS'required'
p18824
I01
sS'group_name'
p18825
NsasS'name'
p18826
S'/BCs/Pressure'
p18827
sa(dp18828
S'description'
p18829
g3
sS'subblocks'
p18830
NsS'parameters'
p18831
(lp18832
(dp18833
S'description'
p18834
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18835
sS'cpp_type'
p18836
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18837
sS'default'
p18838
g3
sS'name'
p18839
S'boundary'
p18840
sS'required'
p18841
I01
sS'group_name'
p18842
Nsa(dp18843
S'description'
p18844
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18845
sS'cpp_type'
p18846
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18847
sS'default'
p18848
g3
sS'name'
p18849
S'control_tags'
p18850
sS'required'
p18851
I00
sS'group_name'
p18852
S'Advanced'
p18853
sa(dp18854
S'description'
p18855
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18856
sS'cpp_type'
p18857
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18858
sS'default'
p18859
g3
sS'name'
p18860
S'diag_save_in'
p18861
sS'required'
p18862
I00
sS'group_name'
p18863
Nsa(dp18864
S'description'
p18865
g3
sS'cpp_type'
p18866
S'double'
p18867
sS'default'
p18868
S'0'
p18869
sS'name'
p18870
S'duration'
p18871
sS'required'
p18872
I00
sS'group_name'
p18873
Nsa(dp18874
S'description'
p18875
S'Set the enabled status of the MooseObject.\n'
p18876
sS'cpp_type'
p18877
S'bool'
p18878
sS'default'
p18879
S'1'
p18880
sS'name'
p18881
S'enable'
p18882
sS'required'
p18883
I00
sS'group_name'
p18884
S'Advanced'
p18885
sa(dp18886
S'description'
p18887
g3
sS'cpp_type'
p18888
S'double'
p18889
sS'default'
p18890
S'0'
p18891
sS'name'
p18892
S'final'
p18893
sS'required'
p18894
I00
sS'group_name'
p18895
Nsa(dp18896
S'description'
p18897
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18898
sS'cpp_type'
p18899
S'bool'
p18900
sS'default'
p18901
S'1'
p18902
sS'name'
p18903
S'implicit'
p18904
sS'required'
p18905
I00
sS'group_name'
p18906
S'Advanced'
p18907
sa(dp18908
S'description'
p18909
g3
sS'cpp_type'
p18910
S'double'
p18911
sS'default'
p18912
S'0'
p18913
sS'name'
p18914
S'initial'
p18915
sS'required'
p18916
I00
sS'group_name'
p18917
Nsa(dp18918
S'description'
p18919
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18920
sS'cpp_type'
p18921
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18922
sS'default'
p18923
g3
sS'name'
p18924
S'save_in'
p18925
sS'required'
p18926
I00
sS'group_name'
p18927
Nsa(dp18928
S'description'
p18929
S'The seed for the master random number generator\n'
p18930
sS'cpp_type'
p18931
S'unsigned int'
p18932
sS'default'
p18933
S'0'
p18934
sS'name'
p18935
S'seed'
p18936
sS'required'
p18937
I00
sS'group_name'
p18938
S'Advanced'
p18939
sa(dp18940
S'description'
p18941
g3
sS'cpp_type'
p18942
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18943
sS'default'
p18944
S'SinDirichletBC'
p18945
sS'name'
p18946
S'type'
p18947
sS'required'
p18948
I00
sS'group_name'
p18949
Nsa(dp18950
S'description'
p18951
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18952
sS'cpp_type'
p18953
S'bool'
p18954
sS'default'
p18955
S'0'
p18956
sS'name'
p18957
S'use_displaced_mesh'
p18958
sS'required'
p18959
I00
sS'group_name'
p18960
S'Advanced'
p18961
sa(dp18962
S'description'
p18963
S'The name of the variable that this boundary condition applies to\n'
p18964
sS'cpp_type'
p18965
S'NonlinearVariableName'
p18966
sS'default'
p18967
g3
sS'name'
p18968
S'variable'
p18969
sS'required'
p18970
I01
sS'group_name'
p18971
NsasS'name'
p18972
S'/BCs/SinDirichletBC'
p18973
sa(dp18974
S'description'
p18975
g3
sS'subblocks'
p18976
NsS'parameters'
p18977
(lp18978
(dp18979
S'description'
p18980
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18981
sS'cpp_type'
p18982
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18983
sS'default'
p18984
g3
sS'name'
p18985
S'boundary'
p18986
sS'required'
p18987
I01
sS'group_name'
p18988
Nsa(dp18989
S'description'
p18990
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18991
sS'cpp_type'
p18992
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18993
sS'default'
p18994
g3
sS'name'
p18995
S'control_tags'
p18996
sS'required'
p18997
I00
sS'group_name'
p18998
S'Advanced'
p18999
sa(dp19000
S'description'
p19001
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19002
sS'cpp_type'
p19003
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19004
sS'default'
p19005
g3
sS'name'
p19006
S'diag_save_in'
p19007
sS'required'
p19008
I00
sS'group_name'
p19009
S'Advanced'
p19010
sa(dp19011
S'description'
p19012
S'The duration of the ramp\n'
p19013
sS'cpp_type'
p19014
S'double'
p19015
sS'default'
p19016
S'0'
p19017
sS'name'
p19018
S'duration'
p19019
sS'required'
p19020
I00
sS'group_name'
p19021
Nsa(dp19022
S'description'
p19023
S'Set the enabled status of the MooseObject.\n'
p19024
sS'cpp_type'
p19025
S'bool'
p19026
sS'default'
p19027
S'1'
p19028
sS'name'
p19029
S'enable'
p19030
sS'required'
p19031
I00
sS'group_name'
p19032
S'Advanced'
p19033
sa(dp19034
S'description'
p19035
S'The final value of the gradient on the boundary\n'
p19036
sS'cpp_type'
p19037
S'double'
p19038
sS'default'
p19039
S'0'
p19040
sS'name'
p19041
S'final'
p19042
sS'required'
p19043
I00
sS'group_name'
p19044
Nsa(dp19045
S'description'
p19046
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19047
sS'cpp_type'
p19048
S'bool'
p19049
sS'default'
p19050
S'1'
p19051
sS'name'
p19052
S'implicit'
p19053
sS'required'
p19054
I00
sS'group_name'
p19055
S'Advanced'
p19056
sa(dp19057
S'description'
p19058
S'The initial value of the gradient on the boundary\n'
p19059
sS'cpp_type'
p19060
S'double'
p19061
sS'default'
p19062
S'0'
p19063
sS'name'
p19064
S'initial'
p19065
sS'required'
p19066
I00
sS'group_name'
p19067
Nsa(dp19068
S'description'
p19069
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19070
sS'cpp_type'
p19071
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19072
sS'default'
p19073
g3
sS'name'
p19074
S'save_in'
p19075
sS'required'
p19076
I00
sS'group_name'
p19077
S'Advanced'
p19078
sa(dp19079
S'description'
p19080
S'The seed for the master random number generator\n'
p19081
sS'cpp_type'
p19082
S'unsigned int'
p19083
sS'default'
p19084
S'0'
p19085
sS'name'
p19086
S'seed'
p19087
sS'required'
p19088
I00
sS'group_name'
p19089
S'Advanced'
p19090
sa(dp19091
S'description'
p19092
g3
sS'cpp_type'
p19093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19094
sS'default'
p19095
S'SinNeumannBC'
p19096
sS'name'
p19097
S'type'
p19098
sS'required'
p19099
I00
sS'group_name'
p19100
Nsa(dp19101
S'description'
p19102
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19103
sS'cpp_type'
p19104
S'bool'
p19105
sS'default'
p19106
S'0'
p19107
sS'name'
p19108
S'use_displaced_mesh'
p19109
sS'required'
p19110
I00
sS'group_name'
p19111
S'Advanced'
p19112
sa(dp19113
S'description'
p19114
S'The name of the variable that this boundary condition applies to\n'
p19115
sS'cpp_type'
p19116
S'NonlinearVariableName'
p19117
sS'default'
p19118
g3
sS'name'
p19119
S'variable'
p19120
sS'required'
p19121
I01
sS'group_name'
p19122
NsasS'name'
p19123
S'/BCs/SinNeumannBC'
p19124
sa(dp19125
S'description'
p19126
g3
sS'subblocks'
p19127
NsS'parameters'
p19128
(lp19129
(dp19130
S'description'
p19131
S'No idea.\n'
p19132
sS'cpp_type'
p19133
S'double'
p19134
sS'default'
p19135
S'1'
p19136
sS'name'
p19137
S'alpha'
p19138
sS'required'
p19139
I00
sS'group_name'
p19140
Nsa(dp19141
S'description'
p19142
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19143
sS'cpp_type'
p19144
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19145
sS'default'
p19146
g3
sS'name'
p19147
S'boundary'
p19148
sS'required'
p19149
I01
sS'group_name'
p19150
Nsa(dp19151
S'description'
p19152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19153
sS'cpp_type'
p19154
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19155
sS'default'
p19156
g3
sS'name'
p19157
S'control_tags'
p19158
sS'required'
p19159
I00
sS'group_name'
p19160
S'Advanced'
p19161
sa(dp19162
S'description'
p19163
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19164
sS'cpp_type'
p19165
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19166
sS'default'
p19167
g3
sS'name'
p19168
S'diag_save_in'
p19169
sS'required'
p19170
I00
sS'group_name'
p19171
S'Advanced'
p19172
sa(dp19173
S'description'
p19174
S'Set the enabled status of the MooseObject.\n'
p19175
sS'cpp_type'
p19176
S'bool'
p19177
sS'default'
p19178
S'1'
p19179
sS'name'
p19180
S'enable'
p19181
sS'required'
p19182
I00
sS'group_name'
p19183
S'Advanced'
p19184
sa(dp19185
S'description'
p19186
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19187
sS'cpp_type'
p19188
S'bool'
p19189
sS'default'
p19190
S'1'
p19191
sS'name'
p19192
S'implicit'
p19193
sS'required'
p19194
I00
sS'group_name'
p19195
S'Advanced'
p19196
sa(dp19197
S'description'
p19198
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19199
sS'cpp_type'
p19200
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19201
sS'default'
p19202
g3
sS'name'
p19203
S'save_in'
p19204
sS'required'
p19205
I00
sS'group_name'
p19206
S'Advanced'
p19207
sa(dp19208
S'description'
p19209
S'The seed for the master random number generator\n'
p19210
sS'cpp_type'
p19211
S'unsigned int'
p19212
sS'default'
p19213
S'0'
p19214
sS'name'
p19215
S'seed'
p19216
sS'required'
p19217
I00
sS'group_name'
p19218
S'Advanced'
p19219
sa(dp19220
S'description'
p19221
g3
sS'cpp_type'
p19222
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19223
sS'default'
p19224
S'VacuumBC'
p19225
sS'name'
p19226
S'type'
p19227
sS'required'
p19228
I00
sS'group_name'
p19229
Nsa(dp19230
S'description'
p19231
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19232
sS'cpp_type'
p19233
S'bool'
p19234
sS'default'
p19235
S'0'
p19236
sS'name'
p19237
S'use_displaced_mesh'
p19238
sS'required'
p19239
I00
sS'group_name'
p19240
S'Advanced'
p19241
sa(dp19242
S'description'
p19243
S'The name of the variable that this boundary condition applies to\n'
p19244
sS'cpp_type'
p19245
S'NonlinearVariableName'
p19246
sS'default'
p19247
g3
sS'name'
p19248
S'variable'
p19249
sS'required'
p19250
I01
sS'group_name'
p19251
NsasS'name'
p19252
S'/BCs/VacuumBC'
p19253
sa(dp19254
S'description'
p19255
g3
sS'subblocks'
p19256
NsS'parameters'
p19257
(lp19258
(dp19259
S'description'
p19260
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19261
sS'cpp_type'
p19262
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19263
sS'default'
p19264
g3
sS'name'
p19265
S'boundary'
p19266
sS'required'
p19267
I01
sS'group_name'
p19268
Nsa(dp19269
S'description'
p19270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19271
sS'cpp_type'
p19272
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19273
sS'default'
p19274
g3
sS'name'
p19275
S'control_tags'
p19276
sS'required'
p19277
I00
sS'group_name'
p19278
S'Advanced'
p19279
sa(dp19280
S'description'
p19281
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19282
sS'cpp_type'
p19283
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19284
sS'default'
p19285
g3
sS'name'
p19286
S'diag_save_in'
p19287
sS'required'
p19288
I00
sS'group_name'
p19289
S'Advanced'
p19290
sa(dp19291
S'description'
p19292
S'Set the enabled status of the MooseObject.\n'
p19293
sS'cpp_type'
p19294
S'bool'
p19295
sS'default'
p19296
S'1'
p19297
sS'name'
p19298
S'enable'
p19299
sS'required'
p19300
I00
sS'group_name'
p19301
S'Advanced'
p19302
sa(dp19303
S'description'
p19304
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19305
sS'cpp_type'
p19306
S'bool'
p19307
sS'default'
p19308
S'1'
p19309
sS'name'
p19310
S'implicit'
p19311
sS'required'
p19312
I00
sS'group_name'
p19313
S'Advanced'
p19314
sa(dp19315
S'description'
p19316
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19317
sS'cpp_type'
p19318
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19319
sS'default'
p19320
g3
sS'name'
p19321
S'save_in'
p19322
sS'required'
p19323
I00
sS'group_name'
p19324
S'Advanced'
p19325
sa(dp19326
S'description'
p19327
S'The seed for the master random number generator\n'
p19328
sS'cpp_type'
p19329
S'unsigned int'
p19330
sS'default'
p19331
S'0'
p19332
sS'name'
p19333
S'seed'
p19334
sS'required'
p19335
I00
sS'group_name'
p19336
S'Advanced'
p19337
sa(dp19338
S'description'
p19339
g3
sS'cpp_type'
p19340
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19341
sS'default'
p19342
S'VectorNeumannBC'
p19343
sS'name'
p19344
S'type'
p19345
sS'required'
p19346
I00
sS'group_name'
p19347
Nsa(dp19348
S'description'
p19349
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19350
sS'cpp_type'
p19351
S'bool'
p19352
sS'default'
p19353
S'0'
p19354
sS'name'
p19355
S'use_displaced_mesh'
p19356
sS'required'
p19357
I00
sS'group_name'
p19358
S'Advanced'
p19359
sa(dp19360
S'description'
p19361
S'The name of the variable that this boundary condition applies to\n'
p19362
sS'cpp_type'
p19363
S'NonlinearVariableName'
p19364
sS'default'
p19365
g3
sS'name'
p19366
S'variable'
p19367
sS'required'
p19368
I01
sS'group_name'
p19369
Nsa(dp19370
S'description'
p19371
S'vector this BC should act in\n'
p19372
sS'cpp_type'
p19373
S'libMesh::VectorValue<double>'
p19374
sS'default'
p19375
S'0 0 0'
p19376
sS'name'
p19377
S'vector_value'
p19378
sS'required'
p19379
I00
sS'group_name'
p19380
NsasS'name'
p19381
S'/BCs/VectorNeumannBC'
p19382
sa(dp19383
S'description'
p19384
g3
sS'subblocks'
p19385
NsS'parameters'
p19386
(lp19387
(dp19388
S'description'
p19389
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19390
sS'cpp_type'
p19391
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19392
sS'default'
p19393
g3
sS'name'
p19394
S'boundary'
p19395
sS'required'
p19396
I01
sS'group_name'
p19397
Nsa(dp19398
S'description'
p19399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19400
sS'cpp_type'
p19401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19402
sS'default'
p19403
g3
sS'name'
p19404
S'control_tags'
p19405
sS'required'
p19406
I00
sS'group_name'
p19407
S'Advanced'
p19408
sa(dp19409
S'description'
p19410
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19411
sS'cpp_type'
p19412
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19413
sS'default'
p19414
g3
sS'name'
p19415
S'diag_save_in'
p19416
sS'required'
p19417
I00
sS'group_name'
p19418
S'Advanced'
p19419
sa(dp19420
S'description'
p19421
S'Set the enabled status of the MooseObject.\n'
p19422
sS'cpp_type'
p19423
S'bool'
p19424
sS'default'
p19425
S'1'
p19426
sS'name'
p19427
S'enable'
p19428
sS'required'
p19429
I00
sS'group_name'
p19430
S'Advanced'
p19431
sa(dp19432
S'description'
p19433
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19434
sS'cpp_type'
p19435
S'bool'
p19436
sS'default'
p19437
S'1'
p19438
sS'name'
p19439
S'implicit'
p19440
sS'required'
p19441
I00
sS'group_name'
p19442
S'Advanced'
p19443
sa(dp19444
S'description'
p19445
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19446
sS'cpp_type'
p19447
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19448
sS'default'
p19449
g3
sS'name'
p19450
S'save_in'
p19451
sS'required'
p19452
I00
sS'group_name'
p19453
S'Advanced'
p19454
sa(dp19455
S'description'
p19456
S'The seed for the master random number generator\n'
p19457
sS'cpp_type'
p19458
S'unsigned int'
p19459
sS'default'
p19460
S'0'
p19461
sS'name'
p19462
S'seed'
p19463
sS'required'
p19464
I00
sS'group_name'
p19465
S'Advanced'
p19466
sa(dp19467
S'description'
p19468
g3
sS'cpp_type'
p19469
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19470
sS'default'
p19471
S'WeakGradientBC'
p19472
sS'name'
p19473
S'type'
p19474
sS'required'
p19475
I00
sS'group_name'
p19476
Nsa(dp19477
S'description'
p19478
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19479
sS'cpp_type'
p19480
S'bool'
p19481
sS'default'
p19482
S'0'
p19483
sS'name'
p19484
S'use_displaced_mesh'
p19485
sS'required'
p19486
I00
sS'group_name'
p19487
S'Advanced'
p19488
sa(dp19489
S'description'
p19490
S'The name of the variable that this boundary condition applies to\n'
p19491
sS'cpp_type'
p19492
S'NonlinearVariableName'
p19493
sS'default'
p19494
g3
sS'name'
p19495
S'variable'
p19496
sS'required'
p19497
I01
sS'group_name'
p19498
NsasS'name'
p19499
S'/BCs/WeakGradientBC'
p19500
sasS'parameters'
p19501
NsS'name'
p19502
S'/BCs'
p19503
sa(dp19504
S'description'
p19505
g3
sS'subblocks'
p19506
(lp19507
(dp19508
S'description'
p19509
g3
sS'subblocks'
p19510
NsS'parameters'
p19511
(lp19512
(dp19513
S'description'
p19514
S'A string representing the Moose Object that will be built by this Action\n'
p19515
sS'cpp_type'
p19516
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19517
sS'default'
p19518
g3
sS'name'
p19519
S'type'
p19520
sS'required'
p19521
I01
sS'group_name'
p19522
NsasS'name'
p19523
S'/Bounds/*'
p19524
sa(dp19525
S'description'
p19526
g3
sS'subblocks'
p19527
NsS'parameters'
p19528
(lp19529
(dp19530
S'description'
p19531
S'Variable whose values are to be accumulated into the current variable\n'
p19532
sS'cpp_type'
p19533
S'std::vector<VariableName>'
p19534
sS'default'
p19535
g3
sS'name'
p19536
S'accumulate_from_variable'
p19537
sS'required'
p19538
I01
sS'group_name'
p19539
Nsa(dp19540
S'description'
p19541
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19542
sS'cpp_type'
p19543
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19544
sS'default'
p19545
g3
sS'name'
p19546
S'block'
p19547
sS'required'
p19548
I00
sS'group_name'
p19549
Nsa(dp19550
S'description'
p19551
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19552
sS'cpp_type'
p19553
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19554
sS'default'
p19555
g3
sS'name'
p19556
S'boundary'
p19557
sS'required'
p19558
I00
sS'group_name'
p19559
Nsa(dp19560
S'description'
p19561
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19562
sS'cpp_type'
p19563
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19564
sS'default'
p19565
g3
sS'name'
p19566
S'control_tags'
p19567
sS'required'
p19568
I00
sS'group_name'
p19569
S'Advanced'
p19570
sa(dp19571
S'description'
p19572
S'Set the enabled status of the MooseObject.\n'
p19573
sS'cpp_type'
p19574
S'bool'
p19575
sS'default'
p19576
S'1'
p19577
sS'name'
p19578
S'enable'
p19579
sS'required'
p19580
I00
sS'group_name'
p19581
S'Advanced'
p19582
sa(dp19583
S'name'
p19584
S'execute_on'
p19585
sS'cpp_type'
p19586
S'MultiMooseEnum'
p19587
sS'default'
p19588
S'LINEAR'
p19589
sS'description'
p19590
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p19591
sS'required'
p19592
I00
sS'options'
p19593
S'none initial linear nonlinear timestep_end timestep_begin custom'
p19594
sS'group_name'
p19595
Nsa(dp19596
S'description'
p19597
S'The seed for the master random number generator\n'
p19598
sS'cpp_type'
p19599
S'unsigned int'
p19600
sS'default'
p19601
S'0'
p19602
sS'name'
p19603
S'seed'
p19604
sS'required'
p19605
I00
sS'group_name'
p19606
S'Advanced'
p19607
sa(dp19608
S'description'
p19609
g3
sS'cpp_type'
p19610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19611
sS'default'
p19612
S'AccumulateAux'
p19613
sS'name'
p19614
S'type'
p19615
sS'required'
p19616
I00
sS'group_name'
p19617
Nsa(dp19618
S'description'
p19619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19620
sS'cpp_type'
p19621
S'bool'
p19622
sS'default'
p19623
S'0'
p19624
sS'name'
p19625
S'use_displaced_mesh'
p19626
sS'required'
p19627
I00
sS'group_name'
p19628
S'Advanced'
p19629
sa(dp19630
S'description'
p19631
S'The name of the variable that this object applies to\n'
p19632
sS'cpp_type'
p19633
S'AuxVariableName'
p19634
sS'default'
p19635
g3
sS'name'
p19636
S'variable'
p19637
sS'required'
p19638
I01
sS'group_name'
p19639
NsasS'name'
p19640
S'/Bounds/AccumulateAux'
p19641
sa(dp19642
S'description'
p19643
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p19644
sS'subblocks'
p19645
NsS'parameters'
p19646
(lp19647
(dp19648
S'description'
p19649
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19650
sS'cpp_type'
p19651
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19652
sS'default'
p19653
g3
sS'name'
p19654
S'block'
p19655
sS'required'
p19656
I00
sS'group_name'
p19657
Nsa(dp19658
S'description'
p19659
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19660
sS'cpp_type'
p19661
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19662
sS'default'
p19663
g3
sS'name'
p19664
S'boundary'
p19665
sS'required'
p19666
I00
sS'group_name'
p19667
Nsa(dp19668
S'description'
p19669
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19670
sS'cpp_type'
p19671
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19672
sS'default'
p19673
g3
sS'name'
p19674
S'control_tags'
p19675
sS'required'
p19676
I00
sS'group_name'
p19677
S'Advanced'
p19678
sa(dp19679
S'description'
p19680
S'Set the enabled status of the MooseObject.\n'
p19681
sS'cpp_type'
p19682
S'bool'
p19683
sS'default'
p19684
S'1'
p19685
sS'name'
p19686
S'enable'
p19687
sS'required'
p19688
I00
sS'group_name'
p19689
S'Advanced'
p19690
sa(dp19691
S'name'
p19692
S'execute_on'
p19693
sS'cpp_type'
p19694
S'MultiMooseEnum'
p19695
sS'default'
p19696
S'LINEAR'
p19697
sS'description'
p19698
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p19699
sS'required'
p19700
I00
sS'options'
p19701
S'none initial linear nonlinear timestep_end timestep_begin custom'
p19702
sS'group_name'
p19703
Nsa(dp19704
S'description'
p19705
S'Array of coupled variables (num_name)\n'
p19706
sS'cpp_type'
p19707
S'unsigned int'
p19708
sS'default'
p19709
g3
sS'name'
p19710
S'op_num'
p19711
sS'required'
p19712
I00
sS'group_name'
p19713
Nsa(dp19714
S'description'
p19715
S'The seed for the master random number generator\n'
p19716
sS'cpp_type'
p19717
S'unsigned int'
p19718
sS'default'
p19719
S'0'
p19720
sS'name'
p19721
S'seed'
p19722
sS'required'
p19723
I00
sS'group_name'
p19724
S'Advanced'
p19725
sa(dp19726
S'description'
p19727
g3
sS'cpp_type'
p19728
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19729
sS'default'
p19730
S'BndsCalcAux'
p19731
sS'name'
p19732
S'type'
p19733
sS'required'
p19734
I00
sS'group_name'
p19735
Nsa(dp19736
S'description'
p19737
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19738
sS'cpp_type'
p19739
S'bool'
p19740
sS'default'
p19741
S'0'
p19742
sS'name'
p19743
S'use_displaced_mesh'
p19744
sS'required'
p19745
I00
sS'group_name'
p19746
S'Advanced'
p19747
sa(dp19748
S'description'
p19749
S'Array of coupled variables\n'
p19750
sS'cpp_type'
p19751
S'std::vector<VariableName>'
p19752
sS'default'
p19753
g3
sS'name'
p19754
S'v'
p19755
sS'required'
p19756
I01
sS'group_name'
p19757
Nsa(dp19758
S'description'
p19759
S'Array of coupled variables (base_name)\n'
p19760
sS'cpp_type'
p19761
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19762
sS'default'
p19763
g3
sS'name'
p19764
S'var_name_base'
p19765
sS'required'
p19766
I00
sS'group_name'
p19767
Nsa(dp19768
S'description'
p19769
S'The name of the variable that this object applies to\n'
p19770
sS'cpp_type'
p19771
S'AuxVariableName'
p19772
sS'default'
p19773
g3
sS'name'
p19774
S'variable'
p19775
sS'required'
p19776
I01
sS'group_name'
p19777
NsasS'name'
p19778
S'/Bounds/BndsCalcAux'
p19779
sa(dp19780
S'description'
p19781
g3
sS'subblocks'
p19782
NsS'parameters'
p19783
(lp19784
(dp19785
S'description'
p19786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19787
sS'cpp_type'
p19788
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19789
sS'default'
p19790
g3
sS'name'
p19791
S'block'
p19792
sS'required'
p19793
I00
sS'group_name'
p19794
Nsa(dp19795
S'description'
p19796
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19797
sS'cpp_type'
p19798
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19799
sS'default'
p19800
g3
sS'name'
p19801
S'boundary'
p19802
sS'required'
p19803
I00
sS'group_name'
p19804
Nsa(dp19805
S'description'
p19806
S'The variable to be bounded\n'
p19807
sS'cpp_type'
p19808
S'std::vector<VariableName>'
p19809
sS'default'
p19810
g3
sS'name'
p19811
S'bounded_variable'
p19812
sS'required'
p19813
I01
sS'group_name'
p19814
Nsa(dp19815
S'description'
p19816
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19817
sS'cpp_type'
p19818
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19819
sS'default'
p19820
g3
sS'name'
p19821
S'control_tags'
p19822
sS'required'
p19823
I00
sS'group_name'
p19824
S'Advanced'
p19825
sa(dp19826
S'description'
p19827
S'Set the enabled status of the MooseObject.\n'
p19828
sS'cpp_type'
p19829
S'bool'
p19830
sS'default'
p19831
S'1'
p19832
sS'name'
p19833
S'enable'
p19834
sS'required'
p19835
I00
sS'group_name'
p19836
S'Advanced'
p19837
sa(dp19838
S'name'
p19839
S'execute_on'
p19840
sS'cpp_type'
p19841
S'MultiMooseEnum'
p19842
sS'default'
p19843
S'LINEAR'
p19844
sS'description'
p19845
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p19846
sS'required'
p19847
I00
sS'options'
p19848
S'none initial linear nonlinear timestep_end timestep_begin custom'
p19849
sS'group_name'
p19850
Nsa(dp19851
S'description'
p19852
S'The lower bound for the variable\n'
p19853
sS'cpp_type'
p19854
S'double'
p19855
sS'default'
p19856
g3
sS'name'
p19857
S'lower'
p19858
sS'required'
p19859
I00
sS'group_name'
p19860
Nsa(dp19861
S'description'
p19862
S'The seed for the master random number generator\n'
p19863
sS'cpp_type'
p19864
S'unsigned int'
p19865
sS'default'
p19866
S'0'
p19867
sS'name'
p19868
S'seed'
p19869
sS'required'
p19870
I00
sS'group_name'
p19871
S'Advanced'
p19872
sa(dp19873
S'description'
p19874
g3
sS'cpp_type'
p19875
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19876
sS'default'
p19877
S'BoundsAux'
p19878
sS'name'
p19879
S'type'
p19880
sS'required'
p19881
I00
sS'group_name'
p19882
Nsa(dp19883
S'description'
p19884
S'The upper bound for the variable\n'
p19885
sS'cpp_type'
p19886
S'double'
p19887
sS'default'
p19888
g3
sS'name'
p19889
S'upper'
p19890
sS'required'
p19891
I00
sS'group_name'
p19892
Nsa(dp19893
S'description'
p19894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19895
sS'cpp_type'
p19896
S'bool'
p19897
sS'default'
p19898
S'0'
p19899
sS'name'
p19900
S'use_displaced_mesh'
p19901
sS'required'
p19902
I00
sS'group_name'
p19903
S'Advanced'
p19904
sa(dp19905
S'description'
p19906
S'The name of the variable that this object applies to\n'
p19907
sS'cpp_type'
p19908
S'AuxVariableName'
p19909
sS'default'
p19910
g3
sS'name'
p19911
S'variable'
p19912
sS'required'
p19913
I01
sS'group_name'
p19914
NsasS'name'
p19915
S'/Bounds/BoundsAux'
p19916
sa(dp19917
S'description'
p19918
g3
sS'subblocks'
p19919
NsS'parameters'
p19920
(lp19921
(dp19922
S'description'
p19923
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19924
sS'cpp_type'
p19925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19926
sS'default'
p19927
g3
sS'name'
p19928
S'block'
p19929
sS'required'
p19930
I00
sS'group_name'
p19931
Nsa(dp19932
S'description'
p19933
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19934
sS'cpp_type'
p19935
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19936
sS'default'
p19937
g3
sS'name'
p19938
S'boundary'
p19939
sS'required'
p19940
I00
sS'group_name'
p19941
Nsa(dp19942
S'description'
p19943
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19944
sS'cpp_type'
p19945
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19946
sS'default'
p19947
g3
sS'name'
p19948
S'control_tags'
p19949
sS'required'
p19950
I00
sS'group_name'
p19951
S'Advanced'
p19952
sa(dp19953
S'description'
p19954
S'Set the enabled status of the MooseObject.\n'
p19955
sS'cpp_type'
p19956
S'bool'
p19957
sS'default'
p19958
S'1'
p19959
sS'name'
p19960
S'enable'
p19961
sS'required'
p19962
I00
sS'group_name'
p19963
S'Advanced'
p19964
sa(dp19965
S'name'
p19966
S'execute_on'
p19967
sS'cpp_type'
p19968
S'MultiMooseEnum'
p19969
sS'default'
p19970
S'LINEAR'
p19971
sS'description'
p19972
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p19973
sS'required'
p19974
I00
sS'options'
p19975
S'none initial linear nonlinear timestep_end timestep_begin custom'
p19976
sS'group_name'
p19977
Nsa(dp19978
S'description'
p19979
S'The seed for the master random number generator\n'
p19980
sS'cpp_type'
p19981
S'unsigned int'
p19982
sS'default'
p19983
S'0'
p19984
sS'name'
p19985
S'seed'
p19986
sS'required'
p19987
I00
sS'group_name'
p19988
S'Advanced'
p19989
sa(dp19990
S'description'
p19991
g3
sS'cpp_type'
p19992
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19993
sS'default'
p19994
S'ConstantAux'
p19995
sS'name'
p19996
S'type'
p19997
sS'required'
p19998
I00
sS'group_name'
p19999
Nsa(dp20000
S'description'
p20001
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20002
sS'cpp_type'
p20003
S'bool'
p20004
sS'default'
p20005
S'0'
p20006
sS'name'
p20007
S'use_displaced_mesh'
p20008
sS'required'
p20009
I00
sS'group_name'
p20010
S'Advanced'
p20011
sa(dp20012
S'description'
p20013
S'Some constant value that can be read from the input file\n'
p20014
sS'cpp_type'
p20015
S'double'
p20016
sS'default'
p20017
S'0'
p20018
sS'name'
p20019
S'value'
p20020
sS'required'
p20021
I00
sS'group_name'
p20022
Nsa(dp20023
S'description'
p20024
S'The name of the variable that this object applies to\n'
p20025
sS'cpp_type'
p20026
S'AuxVariableName'
p20027
sS'default'
p20028
g3
sS'name'
p20029
S'variable'
p20030
sS'required'
p20031
I01
sS'group_name'
p20032
NsasS'name'
p20033
S'/Bounds/ConstantAux'
p20034
sa(dp20035
S'description'
p20036
S'Free energy contribution from the cross terms in ACMultiInetrface\n'
p20037
sS'subblocks'
p20038
NsS'parameters'
p20039
(lp20040
(dp20041
S'description'
p20042
S'Coupled variable holding additional free energy contributions to be summed up\n'
p20043
sS'cpp_type'
p20044
S'std::vector<VariableName>'
p20045
sS'default'
p20046
S'0'
p20047
sS'name'
p20048
S'additional_free_energy'
p20049
sS'required'
p20050
I00
sS'group_name'
p20051
Nsa(dp20052
S'description'
p20053
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20054
sS'cpp_type'
p20055
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20056
sS'default'
p20057
g3
sS'name'
p20058
S'block'
p20059
sS'required'
p20060
I00
sS'group_name'
p20061
Nsa(dp20062
S'description'
p20063
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20064
sS'cpp_type'
p20065
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20066
sS'default'
p20067
g3
sS'name'
p20068
S'boundary'
p20069
sS'required'
p20070
I00
sS'group_name'
p20071
Nsa(dp20072
S'description'
p20073
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20074
sS'cpp_type'
p20075
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20076
sS'default'
p20077
g3
sS'name'
p20078
S'control_tags'
p20079
sS'required'
p20080
I00
sS'group_name'
p20081
S'Advanced'
p20082
sa(dp20083
S'description'
p20084
S'Set the enabled status of the MooseObject.\n'
p20085
sS'cpp_type'
p20086
S'bool'
p20087
sS'default'
p20088
S'1'
p20089
sS'name'
p20090
S'enable'
p20091
sS'required'
p20092
I00
sS'group_name'
p20093
S'Advanced'
p20094
sa(dp20095
S'name'
p20096
S'execute_on'
p20097
sS'cpp_type'
p20098
S'MultiMooseEnum'
p20099
sS'default'
p20100
S'LINEAR'
p20101
sS'description'
p20102
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20103
sS'required'
p20104
I00
sS'options'
p20105
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20106
sS'group_name'
p20107
Nsa(dp20108
S'description'
p20109
S'Variable names that contribute to interfacial energy\n'
p20110
sS'cpp_type'
p20111
S'std::vector<VariableName>'
p20112
sS'default'
p20113
g3
sS'name'
p20114
S'interfacial_vars'
p20115
sS'required'
p20116
I00
sS'group_name'
p20117
Nsa(dp20118
S'description'
p20119
S'Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n'
p20120
sS'cpp_type'
p20121
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p20122
sS'default'
p20123
g3
sS'name'
p20124
S'kappa_names'
p20125
sS'required'
p20126
I01
sS'group_name'
p20127
Nsa(dp20128
S'description'
p20129
S'The seed for the master random number generator\n'
p20130
sS'cpp_type'
p20131
S'unsigned int'
p20132
sS'default'
p20133
S'0'
p20134
sS'name'
p20135
S'seed'
p20136
sS'required'
p20137
I00
sS'group_name'
p20138
S'Advanced'
p20139
sa(dp20140
S'description'
p20141
g3
sS'cpp_type'
p20142
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20143
sS'default'
p20144
S'CrossTermGradientFreeEnergy'
p20145
sS'name'
p20146
S'type'
p20147
sS'required'
p20148
I00
sS'group_name'
p20149
Nsa(dp20150
S'description'
p20151
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20152
sS'cpp_type'
p20153
S'bool'
p20154
sS'default'
p20155
S'0'
p20156
sS'name'
p20157
S'use_displaced_mesh'
p20158
sS'required'
p20159
I00
sS'group_name'
p20160
S'Advanced'
p20161
sa(dp20162
S'description'
p20163
S'The name of the variable that this object applies to\n'
p20164
sS'cpp_type'
p20165
S'AuxVariableName'
p20166
sS'default'
p20167
g3
sS'name'
p20168
S'variable'
p20169
sS'required'
p20170
I01
sS'group_name'
p20171
NsasS'name'
p20172
S'/Bounds/CrossTermGradientFreeEnergy'
p20173
sa(dp20174
S'description'
p20175
S'Output updated rotation tensor to a file: Use for stereographic plots\n'
p20176
sS'subblocks'
p20177
NsS'parameters'
p20178
(lp20179
(dp20180
S'description'
p20181
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20182
sS'cpp_type'
p20183
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20184
sS'default'
p20185
g3
sS'name'
p20186
S'block'
p20187
sS'required'
p20188
I00
sS'group_name'
p20189
Nsa(dp20190
S'description'
p20191
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20192
sS'cpp_type'
p20193
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20194
sS'default'
p20195
g3
sS'name'
p20196
S'boundary'
p20197
sS'required'
p20198
I00
sS'group_name'
p20199
Nsa(dp20200
S'description'
p20201
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20202
sS'cpp_type'
p20203
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20204
sS'default'
p20205
g3
sS'name'
p20206
S'control_tags'
p20207
sS'required'
p20208
I00
sS'group_name'
p20209
S'Advanced'
p20210
sa(dp20211
S'description'
p20212
S'Set the enabled status of the MooseObject.\n'
p20213
sS'cpp_type'
p20214
S'bool'
p20215
sS'default'
p20216
S'1'
p20217
sS'name'
p20218
S'enable'
p20219
sS'required'
p20220
I00
sS'group_name'
p20221
S'Advanced'
p20222
sa(dp20223
S'name'
p20224
S'execute_on'
p20225
sS'cpp_type'
p20226
S'MultiMooseEnum'
p20227
sS'default'
p20228
S'LINEAR'
p20229
sS'description'
p20230
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20231
sS'required'
p20232
I00
sS'options'
p20233
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20234
sS'group_name'
p20235
Nsa(dp20236
S'description'
p20237
S'Frequency of Output\n'
p20238
sS'cpp_type'
p20239
S'unsigned int'
p20240
sS'default'
p20241
S'1'
p20242
sS'name'
p20243
S'output_frequency'
p20244
sS'required'
p20245
I00
sS'group_name'
p20246
Nsa(dp20247
S'description'
p20248
S'Name of rotation output file: Default rot.out\n'
p20249
sS'cpp_type'
p20250
S'FileName'
p20251
sS'default'
p20252
S'rot.out'
p20253
sS'name'
p20254
S'rotout_file_name'
p20255
sS'required'
p20256
I00
sS'group_name'
p20257
Nsa(dp20258
S'description'
p20259
S'The seed for the master random number generator\n'
p20260
sS'cpp_type'
p20261
S'unsigned int'
p20262
sS'default'
p20263
S'0'
p20264
sS'name'
p20265
S'seed'
p20266
sS'required'
p20267
I00
sS'group_name'
p20268
S'Advanced'
p20269
sa(dp20270
S'description'
p20271
g3
sS'cpp_type'
p20272
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20273
sS'default'
p20274
S'CrystalPlasticityRotationOutAux'
p20275
sS'name'
p20276
S'type'
p20277
sS'required'
p20278
I00
sS'group_name'
p20279
Nsa(dp20280
S'description'
p20281
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20282
sS'cpp_type'
p20283
S'bool'
p20284
sS'default'
p20285
S'0'
p20286
sS'name'
p20287
S'use_displaced_mesh'
p20288
sS'required'
p20289
I00
sS'group_name'
p20290
S'Advanced'
p20291
sa(dp20292
S'description'
p20293
S'The name of the variable that this object applies to\n'
p20294
sS'cpp_type'
p20295
S'AuxVariableName'
p20296
sS'default'
p20297
g3
sS'name'
p20298
S'variable'
p20299
sS'required'
p20300
I01
sS'group_name'
p20301
NsasS'name'
p20302
S'/Bounds/CrystalPlasticityRotationOutAux'
p20303
sa(dp20304
S'description'
p20305
S'Takes RankTwoTensor material and outputs component in cylindrical coordinates\n'
p20306
sS'subblocks'
p20307
NsS'parameters'
p20308
(lp20309
(dp20310
S'description'
p20311
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20312
sS'cpp_type'
p20313
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20314
sS'default'
p20315
g3
sS'name'
p20316
S'block'
p20317
sS'required'
p20318
I00
sS'group_name'
p20319
Nsa(dp20320
S'description'
p20321
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20322
sS'cpp_type'
p20323
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20324
sS'default'
p20325
g3
sS'name'
p20326
S'boundary'
p20327
sS'required'
p20328
I00
sS'group_name'
p20329
Nsa(dp20330
S'description'
p20331
S'Location of the center point of the cylindrical coordinates\n'
p20332
sS'cpp_type'
p20333
S'libMesh::Point'
p20334
sS'default'
p20335
g3
sS'name'
p20336
S'center_point'
p20337
sS'required'
p20338
I01
sS'group_name'
p20339
Nsa(dp20340
S'description'
p20341
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20342
sS'cpp_type'
p20343
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20344
sS'default'
p20345
g3
sS'name'
p20346
S'control_tags'
p20347
sS'required'
p20348
I00
sS'group_name'
p20349
S'Advanced'
p20350
sa(dp20351
S'description'
p20352
S'Set the enabled status of the MooseObject.\n'
p20353
sS'cpp_type'
p20354
S'bool'
p20355
sS'default'
p20356
S'1'
p20357
sS'name'
p20358
S'enable'
p20359
sS'required'
p20360
I00
sS'group_name'
p20361
S'Advanced'
p20362
sa(dp20363
S'name'
p20364
S'execute_on'
p20365
sS'cpp_type'
p20366
S'MultiMooseEnum'
p20367
sS'default'
p20368
S'LINEAR'
p20369
sS'description'
p20370
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20371
sS'required'
p20372
I00
sS'options'
p20373
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20374
sS'group_name'
p20375
Nsa(dp20376
S'description'
p20377
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p20378
sS'cpp_type'
p20379
S'unsigned int'
p20380
sS'default'
p20381
g3
sS'name'
p20382
S'index_i'
p20383
sS'required'
p20384
I01
sS'group_name'
p20385
Nsa(dp20386
S'description'
p20387
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p20388
sS'cpp_type'
p20389
S'unsigned int'
p20390
sS'default'
p20391
g3
sS'name'
p20392
S'index_j'
p20393
sS'required'
p20394
I01
sS'group_name'
p20395
Nsa(dp20396
S'description'
p20397
S'The rank two material tensor name\n'
p20398
sS'cpp_type'
p20399
S'MaterialPropertyName'
p20400
sS'default'
p20401
g3
sS'name'
p20402
S'rank_two_tensor'
p20403
sS'required'
p20404
I01
sS'group_name'
p20405
Nsa(dp20406
S'description'
p20407
S'The seed for the master random number generator\n'
p20408
sS'cpp_type'
p20409
S'unsigned int'
p20410
sS'default'
p20411
S'0'
p20412
sS'name'
p20413
S'seed'
p20414
sS'required'
p20415
I00
sS'group_name'
p20416
S'Advanced'
p20417
sa(dp20418
S'description'
p20419
g3
sS'cpp_type'
p20420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20421
sS'default'
p20422
S'CylindricalRankTwoAux'
p20423
sS'name'
p20424
S'type'
p20425
sS'required'
p20426
I00
sS'group_name'
p20427
Nsa(dp20428
S'description'
p20429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20430
sS'cpp_type'
p20431
S'bool'
p20432
sS'default'
p20433
S'0'
p20434
sS'name'
p20435
S'use_displaced_mesh'
p20436
sS'required'
p20437
I00
sS'group_name'
p20438
S'Advanced'
p20439
sa(dp20440
S'description'
p20441
S'The name of the variable that this object applies to\n'
p20442
sS'cpp_type'
p20443
S'AuxVariableName'
p20444
sS'default'
p20445
g3
sS'name'
p20446
S'variable'
p20447
sS'required'
p20448
I01
sS'group_name'
p20449
NsasS'name'
p20450
S'/Bounds/CylindricalRankTwoAux'
p20451
sa(dp20452
S'description'
p20453
g3
sS'subblocks'
p20454
NsS'parameters'
p20455
(lp20456
(dp20457
S'description'
p20458
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20459
sS'cpp_type'
p20460
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20461
sS'default'
p20462
g3
sS'name'
p20463
S'block'
p20464
sS'required'
p20465
I00
sS'group_name'
p20466
Nsa(dp20467
S'description'
p20468
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20469
sS'cpp_type'
p20470
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20471
sS'default'
p20472
g3
sS'name'
p20473
S'boundary'
p20474
sS'required'
p20475
I00
sS'group_name'
p20476
Nsa(dp20477
S'description'
p20478
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20479
sS'cpp_type'
p20480
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20481
sS'default'
p20482
g3
sS'name'
p20483
S'control_tags'
p20484
sS'required'
p20485
I00
sS'group_name'
p20486
S'Advanced'
p20487
sa(dp20488
S'description'
p20489
S'The variable that is being debugged.\n'
p20490
sS'cpp_type'
p20491
S'NonlinearVariableName'
p20492
sS'default'
p20493
g3
sS'name'
p20494
S'debug_variable'
p20495
sS'required'
p20496
I01
sS'group_name'
p20497
Nsa(dp20498
S'description'
p20499
S'Set the enabled status of the MooseObject.\n'
p20500
sS'cpp_type'
p20501
S'bool'
p20502
sS'default'
p20503
S'1'
p20504
sS'name'
p20505
S'enable'
p20506
sS'required'
p20507
I00
sS'group_name'
p20508
S'Advanced'
p20509
sa(dp20510
S'name'
p20511
S'execute_on'
p20512
sS'cpp_type'
p20513
S'MultiMooseEnum'
p20514
sS'default'
p20515
S'LINEAR'
p20516
sS'description'
p20517
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20518
sS'required'
p20519
I00
sS'options'
p20520
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20521
sS'group_name'
p20522
Nsa(dp20523
S'description'
p20524
S'The seed for the master random number generator\n'
p20525
sS'cpp_type'
p20526
S'unsigned int'
p20527
sS'default'
p20528
S'0'
p20529
sS'name'
p20530
S'seed'
p20531
sS'required'
p20532
I00
sS'group_name'
p20533
S'Advanced'
p20534
sa(dp20535
S'description'
p20536
g3
sS'cpp_type'
p20537
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20538
sS'default'
p20539
S'DebugResidualAux'
p20540
sS'name'
p20541
S'type'
p20542
sS'required'
p20543
I00
sS'group_name'
p20544
Nsa(dp20545
S'description'
p20546
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20547
sS'cpp_type'
p20548
S'bool'
p20549
sS'default'
p20550
S'0'
p20551
sS'name'
p20552
S'use_displaced_mesh'
p20553
sS'required'
p20554
I00
sS'group_name'
p20555
S'Advanced'
p20556
sa(dp20557
S'description'
p20558
S'The name of the variable that this object applies to\n'
p20559
sS'cpp_type'
p20560
S'AuxVariableName'
p20561
sS'default'
p20562
g3
sS'name'
p20563
S'variable'
p20564
sS'required'
p20565
I01
sS'group_name'
p20566
NsasS'name'
p20567
S'/Bounds/DebugResidualAux'
p20568
sa(dp20569
S'description'
p20570
g3
sS'subblocks'
p20571
NsS'parameters'
p20572
(lp20573
(dp20574
S'description'
p20575
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20576
sS'cpp_type'
p20577
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20578
sS'default'
p20579
g3
sS'name'
p20580
S'block'
p20581
sS'required'
p20582
I00
sS'group_name'
p20583
Nsa(dp20584
S'description'
p20585
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20586
sS'cpp_type'
p20587
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20588
sS'default'
p20589
g3
sS'name'
p20590
S'boundary'
p20591
sS'required'
p20592
I00
sS'group_name'
p20593
Nsa(dp20594
S'description'
p20595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20596
sS'cpp_type'
p20597
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20598
sS'default'
p20599
g3
sS'name'
p20600
S'control_tags'
p20601
sS'required'
p20602
I00
sS'group_name'
p20603
S'Advanced'
p20604
sa(dp20605
S'name'
p20606
S'data_name'
p20607
sS'cpp_type'
p20608
S'MooseEnum'
p20609
sS'default'
p20610
g3
sS'description'
p20611
S'The averaged data to be extracted from the EBSD data by this AuxKernel\n'
p20612
sS'required'
p20613
I01
sS'options'
p20614
S'phi1 phi phi2 phase symmetry local_id feature_id'
p20615
sS'group_name'
p20616
Nsa(dp20617
S'description'
p20618
S'The EBSDReader GeneralUserObject\n'
p20619
sS'cpp_type'
p20620
S'UserObjectName'
p20621
sS'default'
p20622
g3
sS'name'
p20623
S'ebsd_reader'
p20624
sS'required'
p20625
I01
sS'group_name'
p20626
Nsa(dp20627
S'description'
p20628
S'Set the enabled status of the MooseObject.\n'
p20629
sS'cpp_type'
p20630
S'bool'
p20631
sS'default'
p20632
S'1'
p20633
sS'name'
p20634
S'enable'
p20635
sS'required'
p20636
I00
sS'group_name'
p20637
S'Advanced'
p20638
sa(dp20639
S'name'
p20640
S'execute_on'
p20641
sS'cpp_type'
p20642
S'MultiMooseEnum'
p20643
sS'default'
p20644
S'LINEAR'
p20645
sS'description'
p20646
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20647
sS'required'
p20648
I00
sS'options'
p20649
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20650
sS'group_name'
p20651
Nsa(dp20652
S'description'
p20653
S'The GrainTracker UserObject\n'
p20654
sS'cpp_type'
p20655
S'UserObjectName'
p20656
sS'default'
p20657
g3
sS'name'
p20658
S'grain_tracker'
p20659
sS'required'
p20660
I01
sS'group_name'
p20661
Nsa(dp20662
S'description'
p20663
S'Value to return for points without active grains.\n'
p20664
sS'cpp_type'
p20665
S'double'
p20666
sS'default'
p20667
S'-1'
p20668
sS'name'
p20669
S'invalid'
p20670
sS'required'
p20671
I00
sS'group_name'
p20672
Nsa(dp20673
S'description'
p20674
S'The seed for the master random number generator\n'
p20675
sS'cpp_type'
p20676
S'unsigned int'
p20677
sS'default'
p20678
S'0'
p20679
sS'name'
p20680
S'seed'
p20681
sS'required'
p20682
I00
sS'group_name'
p20683
S'Advanced'
p20684
sa(dp20685
S'description'
p20686
g3
sS'cpp_type'
p20687
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20688
sS'default'
p20689
S'EBSDReaderAvgDataAux'
p20690
sS'name'
p20691
S'type'
p20692
sS'required'
p20693
I00
sS'group_name'
p20694
Nsa(dp20695
S'description'
p20696
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20697
sS'cpp_type'
p20698
S'bool'
p20699
sS'default'
p20700
S'0'
p20701
sS'name'
p20702
S'use_displaced_mesh'
p20703
sS'required'
p20704
I00
sS'group_name'
p20705
S'Advanced'
p20706
sa(dp20707
S'description'
p20708
S'The name of the variable that this object applies to\n'
p20709
sS'cpp_type'
p20710
S'AuxVariableName'
p20711
sS'default'
p20712
g3
sS'name'
p20713
S'variable'
p20714
sS'required'
p20715
I01
sS'group_name'
p20716
NsasS'name'
p20717
S'/Bounds/EBSDReaderAvgDataAux'
p20718
sa(dp20719
S'description'
p20720
g3
sS'subblocks'
p20721
NsS'parameters'
p20722
(lp20723
(dp20724
S'description'
p20725
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20726
sS'cpp_type'
p20727
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20728
sS'default'
p20729
g3
sS'name'
p20730
S'block'
p20731
sS'required'
p20732
I00
sS'group_name'
p20733
Nsa(dp20734
S'description'
p20735
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20736
sS'cpp_type'
p20737
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20738
sS'default'
p20739
g3
sS'name'
p20740
S'boundary'
p20741
sS'required'
p20742
I00
sS'group_name'
p20743
Nsa(dp20744
S'description'
p20745
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20746
sS'cpp_type'
p20747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20748
sS'default'
p20749
g3
sS'name'
p20750
S'control_tags'
p20751
sS'required'
p20752
I00
sS'group_name'
p20753
S'Advanced'
p20754
sa(dp20755
S'name'
p20756
S'data_name'
p20757
sS'cpp_type'
p20758
S'MooseEnum'
p20759
sS'default'
p20760
g3
sS'description'
p20761
S'The data to be extracted from the EBSD data by this AuxKernel\n'
p20762
sS'required'
p20763
I01
sS'options'
p20764
S'phi1 phi phi2 feature_id phase symmetry'
p20765
sS'group_name'
p20766
Nsa(dp20767
S'description'
p20768
S'The EBSDReader GeneralUserObject\n'
p20769
sS'cpp_type'
p20770
S'UserObjectName'
p20771
sS'default'
p20772
g3
sS'name'
p20773
S'ebsd_reader'
p20774
sS'required'
p20775
I01
sS'group_name'
p20776
Nsa(dp20777
S'description'
p20778
S'Set the enabled status of the MooseObject.\n'
p20779
sS'cpp_type'
p20780
S'bool'
p20781
sS'default'
p20782
S'1'
p20783
sS'name'
p20784
S'enable'
p20785
sS'required'
p20786
I00
sS'group_name'
p20787
S'Advanced'
p20788
sa(dp20789
S'name'
p20790
S'execute_on'
p20791
sS'cpp_type'
p20792
S'MultiMooseEnum'
p20793
sS'default'
p20794
S'LINEAR'
p20795
sS'description'
p20796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20797
sS'required'
p20798
I00
sS'options'
p20799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20800
sS'group_name'
p20801
Nsa(dp20802
S'description'
p20803
S'The seed for the master random number generator\n'
p20804
sS'cpp_type'
p20805
S'unsigned int'
p20806
sS'default'
p20807
S'0'
p20808
sS'name'
p20809
S'seed'
p20810
sS'required'
p20811
I00
sS'group_name'
p20812
S'Advanced'
p20813
sa(dp20814
S'description'
p20815
g3
sS'cpp_type'
p20816
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20817
sS'default'
p20818
S'EBSDReaderPointDataAux'
p20819
sS'name'
p20820
S'type'
p20821
sS'required'
p20822
I00
sS'group_name'
p20823
Nsa(dp20824
S'description'
p20825
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20826
sS'cpp_type'
p20827
S'bool'
p20828
sS'default'
p20829
S'0'
p20830
sS'name'
p20831
S'use_displaced_mesh'
p20832
sS'required'
p20833
I00
sS'group_name'
p20834
S'Advanced'
p20835
sa(dp20836
S'description'
p20837
S'The name of the variable that this object applies to\n'
p20838
sS'cpp_type'
p20839
S'AuxVariableName'
p20840
sS'default'
p20841
g3
sS'name'
p20842
S'variable'
p20843
sS'required'
p20844
I01
sS'group_name'
p20845
NsasS'name'
p20846
S'/Bounds/EBSDReaderPointDataAux'
p20847
sa(dp20848
S'description'
p20849
S'Compute the local elastic energy\n'
p20850
sS'subblocks'
p20851
NsS'parameters'
p20852
(lp20853
(dp20854
S'description'
p20855
S'Mechanical property base name\n'
p20856
sS'cpp_type'
p20857
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20858
sS'default'
p20859
g3
sS'name'
p20860
S'base_name'
p20861
sS'required'
p20862
I00
sS'group_name'
p20863
Nsa(dp20864
S'description'
p20865
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20866
sS'cpp_type'
p20867
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20868
sS'default'
p20869
g3
sS'name'
p20870
S'block'
p20871
sS'required'
p20872
I00
sS'group_name'
p20873
Nsa(dp20874
S'description'
p20875
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20876
sS'cpp_type'
p20877
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20878
sS'default'
p20879
g3
sS'name'
p20880
S'boundary'
p20881
sS'required'
p20882
I00
sS'group_name'
p20883
Nsa(dp20884
S'description'
p20885
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20886
sS'cpp_type'
p20887
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20888
sS'default'
p20889
g3
sS'name'
p20890
S'control_tags'
p20891
sS'required'
p20892
I00
sS'group_name'
p20893
S'Advanced'
p20894
sa(dp20895
S'description'
p20896
S'Set the enabled status of the MooseObject.\n'
p20897
sS'cpp_type'
p20898
S'bool'
p20899
sS'default'
p20900
S'1'
p20901
sS'name'
p20902
S'enable'
p20903
sS'required'
p20904
I00
sS'group_name'
p20905
S'Advanced'
p20906
sa(dp20907
S'name'
p20908
S'execute_on'
p20909
sS'cpp_type'
p20910
S'MultiMooseEnum'
p20911
sS'default'
p20912
S'LINEAR'
p20913
sS'description'
p20914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20915
sS'required'
p20916
I00
sS'options'
p20917
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20918
sS'group_name'
p20919
Nsa(dp20920
S'description'
p20921
S'The seed for the master random number generator\n'
p20922
sS'cpp_type'
p20923
S'unsigned int'
p20924
sS'default'
p20925
S'0'
p20926
sS'name'
p20927
S'seed'
p20928
sS'required'
p20929
I00
sS'group_name'
p20930
S'Advanced'
p20931
sa(dp20932
S'description'
p20933
g3
sS'cpp_type'
p20934
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20935
sS'default'
p20936
S'ElasticEnergyAux'
p20937
sS'name'
p20938
S'type'
p20939
sS'required'
p20940
I00
sS'group_name'
p20941
Nsa(dp20942
S'description'
p20943
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20944
sS'cpp_type'
p20945
S'bool'
p20946
sS'default'
p20947
S'0'
p20948
sS'name'
p20949
S'use_displaced_mesh'
p20950
sS'required'
p20951
I00
sS'group_name'
p20952
S'Advanced'
p20953
sa(dp20954
S'description'
p20955
S'The name of the variable that this object applies to\n'
p20956
sS'cpp_type'
p20957
S'AuxVariableName'
p20958
sS'default'
p20959
g3
sS'name'
p20960
S'variable'
p20961
sS'required'
p20962
I01
sS'group_name'
p20963
NsasS'name'
p20964
S'/Bounds/ElasticEnergyAux'
p20965
sa(dp20966
S'description'
p20967
g3
sS'subblocks'
p20968
NsS'parameters'
p20969
(lp20970
(dp20971
S'description'
p20972
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20973
sS'cpp_type'
p20974
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20975
sS'default'
p20976
g3
sS'name'
p20977
S'block'
p20978
sS'required'
p20979
I00
sS'group_name'
p20980
Nsa(dp20981
S'description'
p20982
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20983
sS'cpp_type'
p20984
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20985
sS'default'
p20986
g3
sS'name'
p20987
S'boundary'
p20988
sS'required'
p20989
I00
sS'group_name'
p20990
Nsa(dp20991
S'description'
p20992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20993
sS'cpp_type'
p20994
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20995
sS'default'
p20996
g3
sS'name'
p20997
S'control_tags'
p20998
sS'required'
p20999
I00
sS'group_name'
p21000
S'Advanced'
p21001
sa(dp21002
S'description'
p21003
S'The variable to compute the norm of.\n'
p21004
sS'cpp_type'
p21005
S'std::vector<VariableName>'
p21006
sS'default'
p21007
g3
sS'name'
p21008
S'coupled_variable'
p21009
sS'required'
p21010
I01
sS'group_name'
p21011
Nsa(dp21012
S'description'
p21013
S'Set the enabled status of the MooseObject.\n'
p21014
sS'cpp_type'
p21015
S'bool'
p21016
sS'default'
p21017
S'1'
p21018
sS'name'
p21019
S'enable'
p21020
sS'required'
p21021
I00
sS'group_name'
p21022
S'Advanced'
p21023
sa(dp21024
S'name'
p21025
S'execute_on'
p21026
sS'cpp_type'
p21027
S'MultiMooseEnum'
p21028
sS'default'
p21029
S'LINEAR'
p21030
sS'description'
p21031
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21032
sS'required'
p21033
I00
sS'options'
p21034
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21035
sS'group_name'
p21036
Nsa(dp21037
S'description'
p21038
S'Function representing the exact solution\n'
p21039
sS'cpp_type'
p21040
S'FunctionName'
p21041
sS'default'
p21042
g3
sS'name'
p21043
S'function'
p21044
sS'required'
p21045
I01
sS'group_name'
p21046
Nsa(dp21047
S'description'
p21048
S'The exponent used in the norm.\n'
p21049
sS'cpp_type'
p21050
S'double'
p21051
sS'default'
p21052
S'2'
p21053
sS'name'
p21054
S'p'
p21055
sS'required'
p21056
I00
sS'group_name'
p21057
Nsa(dp21058
S'description'
p21059
S'The seed for the master random number generator\n'
p21060
sS'cpp_type'
p21061
S'unsigned int'
p21062
sS'default'
p21063
S'0'
p21064
sS'name'
p21065
S'seed'
p21066
sS'required'
p21067
I00
sS'group_name'
p21068
S'Advanced'
p21069
sa(dp21070
S'description'
p21071
g3
sS'cpp_type'
p21072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21073
sS'default'
p21074
S'ElementH1ErrorFunctionAux'
p21075
sS'name'
p21076
S'type'
p21077
sS'required'
p21078
I00
sS'group_name'
p21079
Nsa(dp21080
S'description'
p21081
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21082
sS'cpp_type'
p21083
S'bool'
p21084
sS'default'
p21085
S'0'
p21086
sS'name'
p21087
S'use_displaced_mesh'
p21088
sS'required'
p21089
I00
sS'group_name'
p21090
S'Advanced'
p21091
sa(dp21092
S'description'
p21093
S'The name of the variable that this object applies to\n'
p21094
sS'cpp_type'
p21095
S'AuxVariableName'
p21096
sS'default'
p21097
g3
sS'name'
p21098
S'variable'
p21099
sS'required'
p21100
I01
sS'group_name'
p21101
NsasS'name'
p21102
S'/Bounds/ElementH1ErrorFunctionAux'
p21103
sa(dp21104
S'description'
p21105
g3
sS'subblocks'
p21106
NsS'parameters'
p21107
(lp21108
(dp21109
S'description'
p21110
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21111
sS'cpp_type'
p21112
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21113
sS'default'
p21114
g3
sS'name'
p21115
S'block'
p21116
sS'required'
p21117
I00
sS'group_name'
p21118
Nsa(dp21119
S'description'
p21120
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21121
sS'cpp_type'
p21122
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21123
sS'default'
p21124
g3
sS'name'
p21125
S'boundary'
p21126
sS'required'
p21127
I00
sS'group_name'
p21128
Nsa(dp21129
S'description'
p21130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21131
sS'cpp_type'
p21132
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21133
sS'default'
p21134
g3
sS'name'
p21135
S'control_tags'
p21136
sS'required'
p21137
I00
sS'group_name'
p21138
S'Advanced'
p21139
sa(dp21140
S'description'
p21141
S'The variable to compute the norm of.\n'
p21142
sS'cpp_type'
p21143
S'std::vector<VariableName>'
p21144
sS'default'
p21145
g3
sS'name'
p21146
S'coupled_variable'
p21147
sS'required'
p21148
I01
sS'group_name'
p21149
Nsa(dp21150
S'description'
p21151
S'Set the enabled status of the MooseObject.\n'
p21152
sS'cpp_type'
p21153
S'bool'
p21154
sS'default'
p21155
S'1'
p21156
sS'name'
p21157
S'enable'
p21158
sS'required'
p21159
I00
sS'group_name'
p21160
S'Advanced'
p21161
sa(dp21162
S'name'
p21163
S'execute_on'
p21164
sS'cpp_type'
p21165
S'MultiMooseEnum'
p21166
sS'default'
p21167
S'LINEAR'
p21168
sS'description'
p21169
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21170
sS'required'
p21171
I00
sS'options'
p21172
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21173
sS'group_name'
p21174
Nsa(dp21175
S'description'
p21176
S'Function representing the exact solution\n'
p21177
sS'cpp_type'
p21178
S'FunctionName'
p21179
sS'default'
p21180
g3
sS'name'
p21181
S'function'
p21182
sS'required'
p21183
I01
sS'group_name'
p21184
Nsa(dp21185
S'description'
p21186
S'The exponent used in the norm.\n'
p21187
sS'cpp_type'
p21188
S'double'
p21189
sS'default'
p21190
S'2'
p21191
sS'name'
p21192
S'p'
p21193
sS'required'
p21194
I00
sS'group_name'
p21195
Nsa(dp21196
S'description'
p21197
S'The seed for the master random number generator\n'
p21198
sS'cpp_type'
p21199
S'unsigned int'
p21200
sS'default'
p21201
S'0'
p21202
sS'name'
p21203
S'seed'
p21204
sS'required'
p21205
I00
sS'group_name'
p21206
S'Advanced'
p21207
sa(dp21208
S'description'
p21209
g3
sS'cpp_type'
p21210
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21211
sS'default'
p21212
S'ElementL2ErrorFunctionAux'
p21213
sS'name'
p21214
S'type'
p21215
sS'required'
p21216
I00
sS'group_name'
p21217
Nsa(dp21218
S'description'
p21219
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21220
sS'cpp_type'
p21221
S'bool'
p21222
sS'default'
p21223
S'0'
p21224
sS'name'
p21225
S'use_displaced_mesh'
p21226
sS'required'
p21227
I00
sS'group_name'
p21228
S'Advanced'
p21229
sa(dp21230
S'description'
p21231
S'The name of the variable that this object applies to\n'
p21232
sS'cpp_type'
p21233
S'AuxVariableName'
p21234
sS'default'
p21235
g3
sS'name'
p21236
S'variable'
p21237
sS'required'
p21238
I01
sS'group_name'
p21239
NsasS'name'
p21240
S'/Bounds/ElementL2ErrorFunctionAux'
p21241
sa(dp21242
S'description'
p21243
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p21244
sS'subblocks'
p21245
NsS'parameters'
p21246
(lp21247
(dp21248
S'description'
p21249
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21250
sS'cpp_type'
p21251
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21252
sS'default'
p21253
g3
sS'name'
p21254
S'block'
p21255
sS'required'
p21256
I00
sS'group_name'
p21257
Nsa(dp21258
S'description'
p21259
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21260
sS'cpp_type'
p21261
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21262
sS'default'
p21263
g3
sS'name'
p21264
S'boundary'
p21265
sS'required'
p21266
I00
sS'group_name'
p21267
Nsa(dp21268
S'description'
p21269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21270
sS'cpp_type'
p21271
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21272
sS'default'
p21273
g3
sS'name'
p21274
S'control_tags'
p21275
sS'required'
p21276
I00
sS'group_name'
p21277
S'Advanced'
p21278
sa(dp21279
S'description'
p21280
S'Set the enabled status of the MooseObject.\n'
p21281
sS'cpp_type'
p21282
S'bool'
p21283
sS'default'
p21284
S'1'
p21285
sS'name'
p21286
S'enable'
p21287
sS'required'
p21288
I00
sS'group_name'
p21289
S'Advanced'
p21290
sa(dp21291
S'name'
p21292
S'execute_on'
p21293
sS'cpp_type'
p21294
S'MultiMooseEnum'
p21295
sS'default'
p21296
S'LINEAR'
p21297
sS'description'
p21298
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21299
sS'required'
p21300
I00
sS'options'
p21301
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21302
sS'group_name'
p21303
Nsa(dp21304
S'name'
p21305
S'method'
p21306
sS'cpp_type'
p21307
S'MooseEnum'
p21308
sS'default'
p21309
g3
sS'description'
p21310
S"The size calculation to perform ('min' or 'max').\n"
p21311
sS'required'
p21312
I01
sS'options'
p21313
S'min max'
p21314
sS'group_name'
p21315
Nsa(dp21316
S'description'
p21317
S'The seed for the master random number generator\n'
p21318
sS'cpp_type'
p21319
S'unsigned int'
p21320
sS'default'
p21321
S'0'
p21322
sS'name'
p21323
S'seed'
p21324
sS'required'
p21325
I00
sS'group_name'
p21326
S'Advanced'
p21327
sa(dp21328
S'description'
p21329
g3
sS'cpp_type'
p21330
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21331
sS'default'
p21332
S'ElementLengthAux'
p21333
sS'name'
p21334
S'type'
p21335
sS'required'
p21336
I00
sS'group_name'
p21337
Nsa(dp21338
S'description'
p21339
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21340
sS'cpp_type'
p21341
S'bool'
p21342
sS'default'
p21343
S'0'
p21344
sS'name'
p21345
S'use_displaced_mesh'
p21346
sS'required'
p21347
I00
sS'group_name'
p21348
S'Advanced'
p21349
sa(dp21350
S'description'
p21351
S'The name of the variable that this object applies to\n'
p21352
sS'cpp_type'
p21353
S'AuxVariableName'
p21354
sS'default'
p21355
g3
sS'name'
p21356
S'variable'
p21357
sS'required'
p21358
I01
sS'group_name'
p21359
NsasS'name'
p21360
S'/Bounds/ElementLengthAux'
p21361
sa(dp21362
S'description'
p21363
g3
sS'subblocks'
p21364
NsS'parameters'
p21365
(lp21366
(dp21367
S'description'
p21368
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21369
sS'cpp_type'
p21370
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21371
sS'default'
p21372
g3
sS'name'
p21373
S'block'
p21374
sS'required'
p21375
I00
sS'group_name'
p21376
Nsa(dp21377
S'description'
p21378
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21379
sS'cpp_type'
p21380
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21381
sS'default'
p21382
g3
sS'name'
p21383
S'boundary'
p21384
sS'required'
p21385
I00
sS'group_name'
p21386
Nsa(dp21387
S'description'
p21388
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21389
sS'cpp_type'
p21390
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21391
sS'default'
p21392
g3
sS'name'
p21393
S'control_tags'
p21394
sS'required'
p21395
I00
sS'group_name'
p21396
S'Advanced'
p21397
sa(dp21398
S'description'
p21399
S'The variable to compute the norm of.\n'
p21400
sS'cpp_type'
p21401
S'std::vector<VariableName>'
p21402
sS'default'
p21403
g3
sS'name'
p21404
S'coupled_variable'
p21405
sS'required'
p21406
I01
sS'group_name'
p21407
Nsa(dp21408
S'description'
p21409
S'Set the enabled status of the MooseObject.\n'
p21410
sS'cpp_type'
p21411
S'bool'
p21412
sS'default'
p21413
S'1'
p21414
sS'name'
p21415
S'enable'
p21416
sS'required'
p21417
I00
sS'group_name'
p21418
S'Advanced'
p21419
sa(dp21420
S'name'
p21421
S'execute_on'
p21422
sS'cpp_type'
p21423
S'MultiMooseEnum'
p21424
sS'default'
p21425
S'LINEAR'
p21426
sS'description'
p21427
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21428
sS'required'
p21429
I00
sS'options'
p21430
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21431
sS'group_name'
p21432
Nsa(dp21433
S'description'
p21434
S'The exponent used in the norm.\n'
p21435
sS'cpp_type'
p21436
S'double'
p21437
sS'default'
p21438
S'2'
p21439
sS'name'
p21440
S'p'
p21441
sS'required'
p21442
I00
sS'group_name'
p21443
Nsa(dp21444
S'description'
p21445
S'The seed for the master random number generator\n'
p21446
sS'cpp_type'
p21447
S'unsigned int'
p21448
sS'default'
p21449
S'0'
p21450
sS'name'
p21451
S'seed'
p21452
sS'required'
p21453
I00
sS'group_name'
p21454
S'Advanced'
p21455
sa(dp21456
S'description'
p21457
g3
sS'cpp_type'
p21458
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21459
sS'default'
p21460
S'ElementLpNormAux'
p21461
sS'name'
p21462
S'type'
p21463
sS'required'
p21464
I00
sS'group_name'
p21465
Nsa(dp21466
S'description'
p21467
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21468
sS'cpp_type'
p21469
S'bool'
p21470
sS'default'
p21471
S'0'
p21472
sS'name'
p21473
S'use_displaced_mesh'
p21474
sS'required'
p21475
I00
sS'group_name'
p21476
S'Advanced'
p21477
sa(dp21478
S'description'
p21479
S'The name of the variable that this object applies to\n'
p21480
sS'cpp_type'
p21481
S'AuxVariableName'
p21482
sS'default'
p21483
g3
sS'name'
p21484
S'variable'
p21485
sS'required'
p21486
I01
sS'group_name'
p21487
NsasS'name'
p21488
S'/Bounds/ElementLpNormAux'
p21489
sa(dp21490
S'description'
p21491
S'Output RGB representation of crystal orientation from user object to an AuxVariable. The entire domain must have the same crystal structure.\n'
p21492
sS'subblocks'
p21493
NsS'parameters'
p21494
(lp21495
(dp21496
S'description'
p21497
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21498
sS'cpp_type'
p21499
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21500
sS'default'
p21501
g3
sS'name'
p21502
S'block'
p21503
sS'required'
p21504
I00
sS'group_name'
p21505
Nsa(dp21506
S'description'
p21507
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21508
sS'cpp_type'
p21509
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21510
sS'default'
p21511
g3
sS'name'
p21512
S'boundary'
p21513
sS'required'
p21514
I00
sS'group_name'
p21515
Nsa(dp21516
S'description'
p21517
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21518
sS'cpp_type'
p21519
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21520
sS'default'
p21521
g3
sS'name'
p21522
S'control_tags'
p21523
sS'required'
p21524
I00
sS'group_name'
p21525
S'Advanced'
p21526
sa(dp21527
S'name'
p21528
S'crystal_structure'
p21529
sS'cpp_type'
p21530
S'MooseEnum'
p21531
sS'default'
p21532
g3
sS'description'
p21533
S'Crystal structure of the material\n'
p21534
sS'required'
p21535
I01
sS'options'
p21536
S'cubic hexagonal tetragonal trigonal orthorhombic monoclinic triclinic'
p21537
sS'group_name'
p21538
Nsa(dp21539
S'description'
p21540
S'Set the enabled status of the MooseObject.\n'
p21541
sS'cpp_type'
p21542
S'bool'
p21543
sS'default'
p21544
S'1'
p21545
sS'name'
p21546
S'enable'
p21547
sS'required'
p21548
I00
sS'group_name'
p21549
S'Advanced'
p21550
sa(dp21551
S'description'
p21552
S'Name of Euler angle provider user object\n'
p21553
sS'cpp_type'
p21554
S'UserObjectName'
p21555
sS'default'
p21556
g3
sS'name'
p21557
S'euler_angle_provider'
p21558
sS'required'
p21559
I01
sS'group_name'
p21560
Nsa(dp21561
S'name'
p21562
S'execute_on'
p21563
sS'cpp_type'
p21564
S'MultiMooseEnum'
p21565
sS'default'
p21566
S'LINEAR'
p21567
sS'description'
p21568
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21569
sS'required'
p21570
I00
sS'options'
p21571
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21572
sS'group_name'
p21573
Nsa(dp21574
S'description'
p21575
S'The GrainTracker UserObject to get values from.\n'
p21576
sS'cpp_type'
p21577
S'UserObjectName'
p21578
sS'default'
p21579
g3
sS'name'
p21580
S'grain_tracker'
p21581
sS'required'
p21582
I01
sS'group_name'
p21583
Nsa(dp21584
S'description'
p21585
S'RGB value of color used to represent area with no grains, defaults to black\n'
p21586
sS'cpp_type'
p21587
S'libMesh::Point'
p21588
sS'default'
p21589
S'0 0 0'
p21590
sS'name'
p21591
S'no_grain_color'
p21592
sS'required'
p21593
I00
sS'group_name'
p21594
Nsa(dp21595
S'name'
p21596
S'output_type'
p21597
sS'cpp_type'
p21598
S'MooseEnum'
p21599
sS'default'
p21600
S'scalar'
p21601
sS'description'
p21602
S'Type of value that will be outputted\n'
p21603
sS'required'
p21604
I00
sS'options'
p21605
S'red green blue scalar'
p21606
sS'group_name'
p21607
Nsa(dp21608
S'name'
p21609
S'sd'
p21610
sS'cpp_type'
p21611
S'MooseEnum'
p21612
sS'default'
p21613
S'001'
p21614
sS'description'
p21615
S'Reference sample direction\n'
p21616
sS'required'
p21617
I00
sS'options'
p21618
S'100 010 001'
p21619
sS'group_name'
p21620
Nsa(dp21621
S'description'
p21622
S'The seed for the master random number generator\n'
p21623
sS'cpp_type'
p21624
S'unsigned int'
p21625
sS'default'
p21626
S'0'
p21627
sS'name'
p21628
S'seed'
p21629
sS'required'
p21630
I00
sS'group_name'
p21631
S'Advanced'
p21632
sa(dp21633
S'description'
p21634
g3
sS'cpp_type'
p21635
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21636
sS'default'
p21637
S'EulerAngleProvider2RGBAux'
p21638
sS'name'
p21639
S'type'
p21640
sS'required'
p21641
I00
sS'group_name'
p21642
Nsa(dp21643
S'description'
p21644
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21645
sS'cpp_type'
p21646
S'bool'
p21647
sS'default'
p21648
S'0'
p21649
sS'name'
p21650
S'use_displaced_mesh'
p21651
sS'required'
p21652
I00
sS'group_name'
p21653
S'Advanced'
p21654
sa(dp21655
S'description'
p21656
S'The name of the variable that this object applies to\n'
p21657
sS'cpp_type'
p21658
S'AuxVariableName'
p21659
sS'default'
p21660
g3
sS'name'
p21661
S'variable'
p21662
sS'required'
p21663
I01
sS'group_name'
p21664
NsasS'name'
p21665
S'/Bounds/EulerAngleProvider2RGBAux'
p21666
sa(dp21667
S'description'
p21668
g3
sS'subblocks'
p21669
NsS'parameters'
p21670
(lp21671
(dp21672
S'description'
p21673
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21674
sS'cpp_type'
p21675
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21676
sS'default'
p21677
g3
sS'name'
p21678
S'block'
p21679
sS'required'
p21680
I00
sS'group_name'
p21681
Nsa(dp21682
S'description'
p21683
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21684
sS'cpp_type'
p21685
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21686
sS'default'
p21687
g3
sS'name'
p21688
S'boundary'
p21689
sS'required'
p21690
I00
sS'group_name'
p21691
Nsa(dp21692
S'description'
p21693
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21694
sS'cpp_type'
p21695
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21696
sS'default'
p21697
g3
sS'name'
p21698
S'control_tags'
p21699
sS'required'
p21700
I00
sS'group_name'
p21701
S'Advanced'
p21702
sa(dp21703
S'description'
p21704
S'Set the enabled status of the MooseObject.\n'
p21705
sS'cpp_type'
p21706
S'bool'
p21707
sS'default'
p21708
S'1'
p21709
sS'name'
p21710
S'enable'
p21711
sS'required'
p21712
I00
sS'group_name'
p21713
S'Advanced'
p21714
sa(dp21715
S'name'
p21716
S'execute_on'
p21717
sS'cpp_type'
p21718
S'MultiMooseEnum'
p21719
sS'default'
p21720
S'LINEAR'
p21721
sS'description'
p21722
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21723
sS'required'
p21724
I00
sS'options'
p21725
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21726
sS'group_name'
p21727
Nsa(dp21728
S'name'
p21729
S'output_type'
p21730
sS'cpp_type'
p21731
S'MooseEnum'
p21732
sS'default'
p21733
S'scalar'
p21734
sS'description'
p21735
S'Type of value that will be outputted\n'
p21736
sS'required'
p21737
I00
sS'options'
p21738
S'red green blue scalar'
p21739
sS'group_name'
p21740
Nsa(dp21741
S'description'
p21742
S'Grain phase index\n'
p21743
sS'cpp_type'
p21744
S'std::vector<VariableName>'
p21745
sS'default'
p21746
g3
sS'name'
p21747
S'phase'
p21748
sS'required'
p21749
I00
sS'group_name'
p21750
Nsa(dp21751
S'description'
p21752
S'Euler angle 2\n'
p21753
sS'cpp_type'
p21754
S'std::vector<VariableName>'
p21755
sS'default'
p21756
g3
sS'name'
p21757
S'phi'
p21758
sS'required'
p21759
I00
sS'group_name'
p21760
Nsa(dp21761
S'description'
p21762
S'Euler angle 1\n'
p21763
sS'cpp_type'
p21764
S'std::vector<VariableName>'
p21765
sS'default'
p21766
g3
sS'name'
p21767
S'phi1'
p21768
sS'required'
p21769
I00
sS'group_name'
p21770
Nsa(dp21771
S'description'
p21772
S'Euler angle 3\n'
p21773
sS'cpp_type'
p21774
S'std::vector<VariableName>'
p21775
sS'default'
p21776
g3
sS'name'
p21777
S'phi2'
p21778
sS'required'
p21779
I00
sS'group_name'
p21780
Nsa(dp21781
S'name'
p21782
S'sd'
p21783
sS'cpp_type'
p21784
S'MooseEnum'
p21785
sS'default'
p21786
S'001'
p21787
sS'description'
p21788
S'Reference sample direction\n'
p21789
sS'required'
p21790
I00
sS'options'
p21791
S'100 010 001'
p21792
sS'group_name'
p21793
Nsa(dp21794
S'description'
p21795
S'The seed for the master random number generator\n'
p21796
sS'cpp_type'
p21797
S'unsigned int'
p21798
sS'default'
p21799
S'0'
p21800
sS'name'
p21801
S'seed'
p21802
sS'required'
p21803
I00
sS'group_name'
p21804
S'Advanced'
p21805
sa(dp21806
S'description'
p21807
S'Grain symmetry indentifier\n'
p21808
sS'cpp_type'
p21809
S'std::vector<VariableName>'
p21810
sS'default'
p21811
g3
sS'name'
p21812
S'symmetry'
p21813
sS'required'
p21814
I00
sS'group_name'
p21815
Nsa(dp21816
S'description'
p21817
g3
sS'cpp_type'
p21818
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21819
sS'default'
p21820
S'EulerAngleVariables2RGBAux'
p21821
sS'name'
p21822
S'type'
p21823
sS'required'
p21824
I00
sS'group_name'
p21825
Nsa(dp21826
S'description'
p21827
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21828
sS'cpp_type'
p21829
S'bool'
p21830
sS'default'
p21831
S'0'
p21832
sS'name'
p21833
S'use_displaced_mesh'
p21834
sS'required'
p21835
I00
sS'group_name'
p21836
S'Advanced'
p21837
sa(dp21838
S'description'
p21839
S'The name of the variable that this object applies to\n'
p21840
sS'cpp_type'
p21841
S'AuxVariableName'
p21842
sS'default'
p21843
g3
sS'name'
p21844
S'variable'
p21845
sS'required'
p21846
I01
sS'group_name'
p21847
NsasS'name'
p21848
S'/Bounds/EulerAngleVariables2RGBAux'
p21849
sa(dp21850
S'description'
p21851
S'Feature detection by connectivity analysis\n'
p21852
sS'subblocks'
p21853
NsS'parameters'
p21854
(lp21855
(dp21856
S'description'
p21857
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21858
sS'cpp_type'
p21859
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21860
sS'default'
p21861
g3
sS'name'
p21862
S'block'
p21863
sS'required'
p21864
I00
sS'group_name'
p21865
Nsa(dp21866
S'description'
p21867
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21868
sS'cpp_type'
p21869
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21870
sS'default'
p21871
g3
sS'name'
p21872
S'boundary'
p21873
sS'required'
p21874
I00
sS'group_name'
p21875
Nsa(dp21876
S'description'
p21877
S'The FeatureFloodCount UserObject to get values from.\n'
p21878
sS'cpp_type'
p21879
S'UserObjectName'
p21880
sS'default'
p21881
g3
sS'name'
p21882
S'bubble_object'
p21883
sS'required'
p21884
I00
sS'group_name'
p21885
Nsa(dp21886
S'description'
p21887
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21888
sS'cpp_type'
p21889
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21890
sS'default'
p21891
g3
sS'name'
p21892
S'control_tags'
p21893
sS'required'
p21894
I00
sS'group_name'
p21895
S'Advanced'
p21896
sa(dp21897
S'description'
p21898
S'Set the enabled status of the MooseObject.\n'
p21899
sS'cpp_type'
p21900
S'bool'
p21901
sS'default'
p21902
S'1'
p21903
sS'name'
p21904
S'enable'
p21905
sS'required'
p21906
I00
sS'group_name'
p21907
S'Advanced'
p21908
sa(dp21909
S'name'
p21910
S'execute_on'
p21911
sS'cpp_type'
p21912
S'MultiMooseEnum'
p21913
sS'default'
p21914
S'INITIAL TIMESTEP_END'
p21915
sS'description'
p21916
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21917
sS'required'
p21918
I00
sS'options'
p21919
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21920
sS'group_name'
p21921
Nsa(dp21922
S'name'
p21923
S'field_display'
p21924
sS'cpp_type'
p21925
S'MooseEnum'
p21926
sS'default'
p21927
S'UNIQUE_REGION'
p21928
sS'description'
p21929
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p21930
sS'required'
p21931
I00
sS'options'
p21932
S'UNIQUE_REGION VARIABLE_COLORING GHOSTED_ENTITIES HALOS CENTROID ACTIVE_BOUNDS'
p21933
sS'group_name'
p21934
Nsa(dp21935
S'description'
p21936
S'The FeatureFloodCount UserObject to get values from.\n'
p21937
sS'cpp_type'
p21938
S'UserObjectName'
p21939
sS'default'
p21940
g3
sS'name'
p21941
S'flood_counter'
p21942
sS'required'
p21943
I01
sS'group_name'
p21944
Nsa(dp21945
S'description'
p21946
S'The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n'
p21947
sS'cpp_type'
p21948
S'unsigned int'
p21949
sS'default'
p21950
g3
sS'name'
p21951
S'map_index'
p21952
sS'required'
p21953
I00
sS'group_name'
p21954
Nsa(dp21955
S'description'
p21956
S'The seed for the master random number generator\n'
p21957
sS'cpp_type'
p21958
S'unsigned int'
p21959
sS'default'
p21960
S'0'
p21961
sS'name'
p21962
S'seed'
p21963
sS'required'
p21964
I00
sS'group_name'
p21965
S'Advanced'
p21966
sa(dp21967
S'description'
p21968
g3
sS'cpp_type'
p21969
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21970
sS'default'
p21971
S'FeatureFloodCountAux'
p21972
sS'name'
p21973
S'type'
p21974
sS'required'
p21975
I00
sS'group_name'
p21976
Nsa(dp21977
S'description'
p21978
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21979
sS'cpp_type'
p21980
S'bool'
p21981
sS'default'
p21982
S'0'
p21983
sS'name'
p21984
S'use_displaced_mesh'
p21985
sS'required'
p21986
I00
sS'group_name'
p21987
S'Advanced'
p21988
sa(dp21989
S'description'
p21990
S'The name of the variable that this object applies to\n'
p21991
sS'cpp_type'
p21992
S'AuxVariableName'
p21993
sS'default'
p21994
g3
sS'name'
p21995
S'variable'
p21996
sS'required'
p21997
I01
sS'group_name'
p21998
NsasS'name'
p21999
S'/Bounds/FeatureFloodCountAux'
p22000
sa(dp22001
S'description'
p22002
g3
sS'subblocks'
p22003
NsS'parameters'
p22004
(lp22005
(dp22006
S'description'
p22007
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22008
sS'cpp_type'
p22009
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22010
sS'default'
p22011
g3
sS'name'
p22012
S'block'
p22013
sS'required'
p22014
I00
sS'group_name'
p22015
Nsa(dp22016
S'description'
p22017
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22018
sS'cpp_type'
p22019
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22020
sS'default'
p22021
g3
sS'name'
p22022
S'boundary'
p22023
sS'required'
p22024
I00
sS'group_name'
p22025
Nsa(dp22026
S'description'
p22027
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22028
sS'cpp_type'
p22029
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22030
sS'default'
p22031
g3
sS'name'
p22032
S'control_tags'
p22033
sS'required'
p22034
I00
sS'group_name'
p22035
S'Advanced'
p22036
sa(dp22037
S'description'
p22038
S'Set the enabled status of the MooseObject.\n'
p22039
sS'cpp_type'
p22040
S'bool'
p22041
sS'default'
p22042
S'1'
p22043
sS'name'
p22044
S'enable'
p22045
sS'required'
p22046
I00
sS'group_name'
p22047
S'Advanced'
p22048
sa(dp22049
S'name'
p22050
S'execute_on'
p22051
sS'cpp_type'
p22052
S'MultiMooseEnum'
p22053
sS'default'
p22054
S'LINEAR'
p22055
sS'description'
p22056
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22057
sS'required'
p22058
I00
sS'options'
p22059
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22060
sS'group_name'
p22061
Nsa(dp22062
S'description'
p22063
S'The function to use as the value\n'
p22064
sS'cpp_type'
p22065
S'FunctionName'
p22066
sS'default'
p22067
g3
sS'name'
p22068
S'function'
p22069
sS'required'
p22070
I01
sS'group_name'
p22071
Nsa(dp22072
S'description'
p22073
S'The seed for the master random number generator\n'
p22074
sS'cpp_type'
p22075
S'unsigned int'
p22076
sS'default'
p22077
S'0'
p22078
sS'name'
p22079
S'seed'
p22080
sS'required'
p22081
I00
sS'group_name'
p22082
S'Advanced'
p22083
sa(dp22084
S'description'
p22085
g3
sS'cpp_type'
p22086
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22087
sS'default'
p22088
S'FunctionAux'
p22089
sS'name'
p22090
S'type'
p22091
sS'required'
p22092
I00
sS'group_name'
p22093
Nsa(dp22094
S'description'
p22095
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22096
sS'cpp_type'
p22097
S'bool'
p22098
sS'default'
p22099
S'0'
p22100
sS'name'
p22101
S'use_displaced_mesh'
p22102
sS'required'
p22103
I00
sS'group_name'
p22104
S'Advanced'
p22105
sa(dp22106
S'description'
p22107
S'The name of the variable that this object applies to\n'
p22108
sS'cpp_type'
p22109
S'AuxVariableName'
p22110
sS'default'
p22111
g3
sS'name'
p22112
S'variable'
p22113
sS'required'
p22114
I01
sS'group_name'
p22115
NsasS'name'
p22116
S'/Bounds/FunctionAux'
p22117
sa(dp22118
S'description'
p22119
g3
sS'subblocks'
p22120
NsS'parameters'
p22121
(lp22122
(dp22123
S'description'
p22124
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22125
sS'cpp_type'
p22126
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22127
sS'default'
p22128
g3
sS'name'
p22129
S'block'
p22130
sS'required'
p22131
I00
sS'group_name'
p22132
Nsa(dp22133
S'description'
p22134
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22135
sS'cpp_type'
p22136
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22137
sS'default'
p22138
g3
sS'name'
p22139
S'boundary'
p22140
sS'required'
p22141
I00
sS'group_name'
p22142
Nsa(dp22143
S'description'
p22144
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22145
sS'cpp_type'
p22146
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22147
sS'default'
p22148
g3
sS'name'
p22149
S'control_tags'
p22150
sS'required'
p22151
I00
sS'group_name'
p22152
S'Advanced'
p22153
sa(dp22154
S'description'
p22155
S'Set the enabled status of the MooseObject.\n'
p22156
sS'cpp_type'
p22157
S'bool'
p22158
sS'default'
p22159
S'1'
p22160
sS'name'
p22161
S'enable'
p22162
sS'required'
p22163
I00
sS'group_name'
p22164
S'Advanced'
p22165
sa(dp22166
S'name'
p22167
S'execute_on'
p22168
sS'cpp_type'
p22169
S'MultiMooseEnum'
p22170
sS'default'
p22171
S'LINEAR'
p22172
sS'description'
p22173
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22174
sS'required'
p22175
I00
sS'options'
p22176
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22177
sS'group_name'
p22178
Nsa(dp22179
S'description'
p22180
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p22181
sS'cpp_type'
p22182
S'double'
p22183
sS'default'
p22184
g3
sS'name'
p22185
S'normal_smoothing_distance'
p22186
sS'required'
p22187
I00
sS'group_name'
p22188
Nsa(dp22189
S'description'
p22190
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p22191
sS'cpp_type'
p22192
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22193
sS'default'
p22194
g3
sS'name'
p22195
S'normal_smoothing_method'
p22196
sS'required'
p22197
I00
sS'group_name'
p22198
Nsa(dp22199
S'name'
p22200
S'order'
p22201
sS'cpp_type'
p22202
S'MooseEnum'
p22203
sS'default'
p22204
S'FIRST'
p22205
sS'description'
p22206
S'The finite element order\n'
p22207
sS'required'
p22208
I00
sS'options'
p22209
S'FIRST SECOND THIRD FOURTH'
p22210
sS'group_name'
p22211
Nsa(dp22212
S'description'
p22213
S'The boundary on the other side of a gap.\n'
p22214
sS'cpp_type'
p22215
S'BoundaryName'
p22216
sS'default'
p22217
g3
sS'name'
p22218
S'paired_boundary'
p22219
sS'required'
p22220
I01
sS'group_name'
p22221
Nsa(dp22222
S'description'
p22223
S'The variable to get the value of.\n'
p22224
sS'cpp_type'
p22225
S'VariableName'
p22226
sS'default'
p22227
g3
sS'name'
p22228
S'paired_variable'
p22229
sS'required'
p22230
I01
sS'group_name'
p22231
Nsa(dp22232
S'description'
p22233
S'The seed for the master random number generator\n'
p22234
sS'cpp_type'
p22235
S'unsigned int'
p22236
sS'default'
p22237
S'0'
p22238
sS'name'
p22239
S'seed'
p22240
sS'required'
p22241
I00
sS'group_name'
p22242
S'Advanced'
p22243
sa(dp22244
S'description'
p22245
S'Tangential distance to extend edges of contact surfaces\n'
p22246
sS'cpp_type'
p22247
S'double'
p22248
sS'default'
p22249
g3
sS'name'
p22250
S'tangential_tolerance'
p22251
sS'required'
p22252
I00
sS'group_name'
p22253
Nsa(dp22254
S'description'
p22255
g3
sS'cpp_type'
p22256
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22257
sS'default'
p22258
S'GapValueAux'
p22259
sS'name'
p22260
S'type'
p22261
sS'required'
p22262
I00
sS'group_name'
p22263
Nsa(dp22264
S'description'
p22265
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22266
sS'cpp_type'
p22267
S'bool'
p22268
sS'default'
p22269
S'1'
p22270
sS'name'
p22271
S'use_displaced_mesh'
p22272
sS'required'
p22273
I00
sS'group_name'
p22274
S'Advanced'
p22275
sa(dp22276
S'description'
p22277
S'The name of the variable that this object applies to\n'
p22278
sS'cpp_type'
p22279
S'AuxVariableName'
p22280
sS'default'
p22281
g3
sS'name'
p22282
S'variable'
p22283
sS'required'
p22284
I01
sS'group_name'
p22285
Nsa(dp22286
S'description'
p22287
S'Whether to output warning messages concerning nodes not being found\n'
p22288
sS'cpp_type'
p22289
S'bool'
p22290
sS'default'
p22291
S'0'
p22292
sS'name'
p22293
S'warnings'
p22294
sS'required'
p22295
I00
sS'group_name'
p22296
NsasS'name'
p22297
S'/Bounds/GapValueAux'
p22298
sa(dp22299
S'description'
p22300
S'Calculates the advection velocity of grain due to rigid body translation and rotation\n'
p22301
sS'subblocks'
p22302
NsS'parameters'
p22303
(lp22304
(dp22305
S'description'
p22306
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22307
sS'cpp_type'
p22308
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22309
sS'default'
p22310
g3
sS'name'
p22311
S'block'
p22312
sS'required'
p22313
I00
sS'group_name'
p22314
Nsa(dp22315
S'description'
p22316
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22317
sS'cpp_type'
p22318
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22319
sS'default'
p22320
g3
sS'name'
p22321
S'boundary'
p22322
sS'required'
p22323
I00
sS'group_name'
p22324
Nsa(dp22325
S'name'
p22326
S'component'
p22327
sS'cpp_type'
p22328
S'MooseEnum'
p22329
sS'default'
p22330
g3
sS'description'
p22331
S'The gradient component to compute\n'
p22332
sS'required'
p22333
I00
sS'options'
p22334
S'x y z'
p22335
sS'group_name'
p22336
Nsa(dp22337
S'description'
p22338
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22339
sS'cpp_type'
p22340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22341
sS'default'
p22342
g3
sS'name'
p22343
S'control_tags'
p22344
sS'required'
p22345
I00
sS'group_name'
p22346
S'Advanced'
p22347
sa(dp22348
S'description'
p22349
S'Set the enabled status of the MooseObject.\n'
p22350
sS'cpp_type'
p22351
S'bool'
p22352
sS'default'
p22353
S'1'
p22354
sS'name'
p22355
S'enable'
p22356
sS'required'
p22357
I00
sS'group_name'
p22358
S'Advanced'
p22359
sa(dp22360
S'name'
p22361
S'execute_on'
p22362
sS'cpp_type'
p22363
S'MultiMooseEnum'
p22364
sS'default'
p22365
S'LINEAR'
p22366
sS'description'
p22367
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22368
sS'required'
p22369
I00
sS'options'
p22370
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22371
sS'group_name'
p22372
Nsa(dp22373
S'description'
p22374
S'userobject for getting force and torque acting on grains\n'
p22375
sS'cpp_type'
p22376
S'UserObjectName'
p22377
sS'default'
p22378
g3
sS'name'
p22379
S'grain_force'
p22380
sS'required'
p22381
I00
sS'group_name'
p22382
Nsa(dp22383
S'description'
p22384
S'userobject for getting volume and center of mass of grains\n'
p22385
sS'cpp_type'
p22386
S'UserObjectName'
p22387
sS'default'
p22388
g3
sS'name'
p22389
S'grain_tracker_object'
p22390
sS'required'
p22391
I00
sS'group_name'
p22392
Nsa(dp22393
S'description'
p22394
S'The feature volume VectorPostprocessorValue.\n'
p22395
sS'cpp_type'
p22396
S'VectorPostprocessorName'
p22397
sS'default'
p22398
g3
sS'name'
p22399
S'grain_volumes'
p22400
sS'required'
p22401
I00
sS'group_name'
p22402
Nsa(dp22403
S'description'
p22404
S'constant value characterizing grain rotation\n'
p22405
sS'cpp_type'
p22406
S'double'
p22407
sS'default'
p22408
S'1'
p22409
sS'name'
p22410
S'rotation_constant'
p22411
sS'required'
p22412
I00
sS'group_name'
p22413
Nsa(dp22414
S'description'
p22415
S'The seed for the master random number generator\n'
p22416
sS'cpp_type'
p22417
S'unsigned int'
p22418
sS'default'
p22419
S'0'
p22420
sS'name'
p22421
S'seed'
p22422
sS'required'
p22423
I00
sS'group_name'
p22424
S'Advanced'
p22425
sa(dp22426
S'description'
p22427
S'constant value characterizing grain translation\n'
p22428
sS'cpp_type'
p22429
S'double'
p22430
sS'default'
p22431
S'1'
p22432
sS'name'
p22433
S'translation_constant'
p22434
sS'required'
p22435
I00
sS'group_name'
p22436
Nsa(dp22437
S'description'
p22438
g3
sS'cpp_type'
p22439
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22440
sS'default'
p22441
S'GrainAdvectionAux'
p22442
sS'name'
p22443
S'type'
p22444
sS'required'
p22445
I00
sS'group_name'
p22446
Nsa(dp22447
S'description'
p22448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22449
sS'cpp_type'
p22450
S'bool'
p22451
sS'default'
p22452
S'0'
p22453
sS'name'
p22454
S'use_displaced_mesh'
p22455
sS'required'
p22456
I00
sS'group_name'
p22457
S'Advanced'
p22458
sa(dp22459
S'description'
p22460
S'The name of the variable that this object applies to\n'
p22461
sS'cpp_type'
p22462
S'AuxVariableName'
p22463
sS'default'
p22464
g3
sS'name'
p22465
S'variable'
p22466
sS'required'
p22467
I01
sS'group_name'
p22468
NsasS'name'
p22469
S'/Bounds/GrainAdvectionAux'
p22470
sa(dp22471
S'description'
p22472
S'Total free energy in KKS system, including chemical, barrier and gradient terms\n'
p22473
sS'subblocks'
p22474
NsS'parameters'
p22475
(lp22476
(dp22477
S'description'
p22478
S'Coupled variable holding additional free energy contributions to be summed up\n'
p22479
sS'cpp_type'
p22480
S'std::vector<VariableName>'
p22481
sS'default'
p22482
S'0'
p22483
sS'name'
p22484
S'additional_free_energy'
p22485
sS'required'
p22486
I00
sS'group_name'
p22487
Nsa(dp22488
S'description'
p22489
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22490
sS'cpp_type'
p22491
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22492
sS'default'
p22493
g3
sS'name'
p22494
S'block'
p22495
sS'required'
p22496
I00
sS'group_name'
p22497
Nsa(dp22498
S'description'
p22499
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22500
sS'cpp_type'
p22501
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22502
sS'default'
p22503
g3
sS'name'
p22504
S'boundary'
p22505
sS'required'
p22506
I00
sS'group_name'
p22507
Nsa(dp22508
S'description'
p22509
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22510
sS'cpp_type'
p22511
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22512
sS'default'
p22513
g3
sS'name'
p22514
S'control_tags'
p22515
sS'required'
p22516
I00
sS'group_name'
p22517
S'Advanced'
p22518
sa(dp22519
S'description'
p22520
S'Set the enabled status of the MooseObject.\n'
p22521
sS'cpp_type'
p22522
S'bool'
p22523
sS'default'
p22524
S'1'
p22525
sS'name'
p22526
S'enable'
p22527
sS'required'
p22528
I00
sS'group_name'
p22529
S'Advanced'
p22530
sa(dp22531
S'name'
p22532
S'execute_on'
p22533
sS'cpp_type'
p22534
S'MultiMooseEnum'
p22535
sS'default'
p22536
S'LINEAR'
p22537
sS'description'
p22538
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22539
sS'required'
p22540
I00
sS'options'
p22541
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22542
sS'group_name'
p22543
Nsa(dp22544
S'description'
p22545
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p22546
sS'cpp_type'
p22547
S'MaterialPropertyName'
p22548
sS'default'
p22549
g3
sS'name'
p22550
S'fa_name'
p22551
sS'required'
p22552
I01
sS'group_name'
p22553
Nsa(dp22554
S'description'
p22555
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p22556
sS'cpp_type'
p22557
S'MaterialPropertyName'
p22558
sS'default'
p22559
g3
sS'name'
p22560
S'fb_name'
p22561
sS'required'
p22562
I01
sS'group_name'
p22563
Nsa(dp22564
S'description'
p22565
S'Base name for the double well function g(eta)\n'
p22566
sS'cpp_type'
p22567
S'MaterialPropertyName'
p22568
sS'default'
p22569
S'g'
p22570
sS'name'
p22571
S'g_name'
p22572
sS'required'
p22573
I00
sS'group_name'
p22574
Nsa(dp22575
S'description'
p22576
S'Base name for the switching function h(eta)\n'
p22577
sS'cpp_type'
p22578
S'MaterialPropertyName'
p22579
sS'default'
p22580
S'h'
p22581
sS'name'
p22582
S'h_name'
p22583
sS'required'
p22584
I00
sS'group_name'
p22585
Nsa(dp22586
S'description'
p22587
S'Variable names that contribute to interfacial energy\n'
p22588
sS'cpp_type'
p22589
S'std::vector<VariableName>'
p22590
sS'default'
p22591
g3
sS'name'
p22592
S'interfacial_vars'
p22593
sS'required'
p22594
I00
sS'group_name'
p22595
Nsa(dp22596
S'description'
p22597
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order. For basic KKS, there is 1 kappa, 1 interfacial_var.\n'
p22598
sS'cpp_type'
p22599
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22600
sS'default'
p22601
g3
sS'name'
p22602
S'kappa_names'
p22603
sS'required'
p22604
I00
sS'group_name'
p22605
Nsa(dp22606
S'description'
p22607
S'The seed for the master random number generator\n'
p22608
sS'cpp_type'
p22609
S'unsigned int'
p22610
sS'default'
p22611
S'0'
p22612
sS'name'
p22613
S'seed'
p22614
sS'required'
p22615
I00
sS'group_name'
p22616
S'Advanced'
p22617
sa(dp22618
S'description'
p22619
g3
sS'cpp_type'
p22620
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22621
sS'default'
p22622
S'KKSGlobalFreeEnergy'
p22623
sS'name'
p22624
S'type'
p22625
sS'required'
p22626
I00
sS'group_name'
p22627
Nsa(dp22628
S'description'
p22629
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22630
sS'cpp_type'
p22631
S'bool'
p22632
sS'default'
p22633
S'0'
p22634
sS'name'
p22635
S'use_displaced_mesh'
p22636
sS'required'
p22637
I00
sS'group_name'
p22638
S'Advanced'
p22639
sa(dp22640
S'description'
p22641
S'The name of the variable that this object applies to\n'
p22642
sS'cpp_type'
p22643
S'AuxVariableName'
p22644
sS'default'
p22645
g3
sS'name'
p22646
S'variable'
p22647
sS'required'
p22648
I01
sS'group_name'
p22649
Nsa(dp22650
S'description'
p22651
S'Double well height parameter\n'
p22652
sS'cpp_type'
p22653
S'double'
p22654
sS'default'
p22655
g3
sS'name'
p22656
S'w'
p22657
sS'required'
p22658
I01
sS'group_name'
p22659
NsasS'name'
p22660
S'/Bounds/KKSGlobalFreeEnergy'
p22661
sa(dp22662
S'description'
p22663
S'Total free energy in multi-phase KKS system, including chemical, barrier and gradient terms\n'
p22664
sS'subblocks'
p22665
NsS'parameters'
p22666
(lp22667
(dp22668
S'description'
p22669
S'List of free energies for each phase. Place in same order as hj_names and gj_names!\n'
p22670
sS'cpp_type'
p22671
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22672
sS'default'
p22673
g3
sS'name'
p22674
S'Fj_names'
p22675
sS'required'
p22676
I01
sS'group_name'
p22677
Nsa(dp22678
S'description'
p22679
S'Coupled variable holding additional free energy contributions to be summed up\n'
p22680
sS'cpp_type'
p22681
S'std::vector<VariableName>'
p22682
sS'default'
p22683
S'0'
p22684
sS'name'
p22685
S'additional_free_energy'
p22686
sS'required'
p22687
I00
sS'group_name'
p22688
Nsa(dp22689
S'description'
p22690
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22691
sS'cpp_type'
p22692
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22693
sS'default'
p22694
g3
sS'name'
p22695
S'block'
p22696
sS'required'
p22697
I00
sS'group_name'
p22698
Nsa(dp22699
S'description'
p22700
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22701
sS'cpp_type'
p22702
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22703
sS'default'
p22704
g3
sS'name'
p22705
S'boundary'
p22706
sS'required'
p22707
I00
sS'group_name'
p22708
Nsa(dp22709
S'description'
p22710
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22711
sS'cpp_type'
p22712
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22713
sS'default'
p22714
g3
sS'name'
p22715
S'control_tags'
p22716
sS'required'
p22717
I00
sS'group_name'
p22718
S'Advanced'
p22719
sa(dp22720
S'description'
p22721
S'Set the enabled status of the MooseObject.\n'
p22722
sS'cpp_type'
p22723
S'bool'
p22724
sS'default'
p22725
S'1'
p22726
sS'name'
p22727
S'enable'
p22728
sS'required'
p22729
I00
sS'group_name'
p22730
S'Advanced'
p22731
sa(dp22732
S'name'
p22733
S'execute_on'
p22734
sS'cpp_type'
p22735
S'MultiMooseEnum'
p22736
sS'default'
p22737
S'LINEAR'
p22738
sS'description'
p22739
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22740
sS'required'
p22741
I00
sS'options'
p22742
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22743
sS'group_name'
p22744
Nsa(dp22745
S'description'
p22746
S'Barrier Function Materials that provide g. Place in same order as Fj_names and hj_names!\n'
p22747
sS'cpp_type'
p22748
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22749
sS'default'
p22750
g3
sS'name'
p22751
S'gj_names'
p22752
sS'required'
p22753
I01
sS'group_name'
p22754
Nsa(dp22755
S'description'
p22756
S'Switching Function Materials that provide h. Place in same order as Fj_names and gj_names!\n'
p22757
sS'cpp_type'
p22758
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22759
sS'default'
p22760
g3
sS'name'
p22761
S'hj_names'
p22762
sS'required'
p22763
I01
sS'group_name'
p22764
Nsa(dp22765
S'description'
p22766
S'Variable names that contribute to interfacial energy\n'
p22767
sS'cpp_type'
p22768
S'std::vector<VariableName>'
p22769
sS'default'
p22770
g3
sS'name'
p22771
S'interfacial_vars'
p22772
sS'required'
p22773
I00
sS'group_name'
p22774
Nsa(dp22775
S'description'
p22776
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p22777
sS'cpp_type'
p22778
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22779
sS'default'
p22780
g3
sS'name'
p22781
S'kappa_names'
p22782
sS'required'
p22783
I00
sS'group_name'
p22784
Nsa(dp22785
S'description'
p22786
S'The seed for the master random number generator\n'
p22787
sS'cpp_type'
p22788
S'unsigned int'
p22789
sS'default'
p22790
S'0'
p22791
sS'name'
p22792
S'seed'
p22793
sS'required'
p22794
I00
sS'group_name'
p22795
S'Advanced'
p22796
sa(dp22797
S'description'
p22798
g3
sS'cpp_type'
p22799
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22800
sS'default'
p22801
S'KKSMultiFreeEnergy'
p22802
sS'name'
p22803
S'type'
p22804
sS'required'
p22805
I00
sS'group_name'
p22806
Nsa(dp22807
S'description'
p22808
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22809
sS'cpp_type'
p22810
S'bool'
p22811
sS'default'
p22812
S'0'
p22813
sS'name'
p22814
S'use_displaced_mesh'
p22815
sS'required'
p22816
I00
sS'group_name'
p22817
S'Advanced'
p22818
sa(dp22819
S'description'
p22820
S'The name of the variable that this object applies to\n'
p22821
sS'cpp_type'
p22822
S'AuxVariableName'
p22823
sS'default'
p22824
g3
sS'name'
p22825
S'variable'
p22826
sS'required'
p22827
I01
sS'group_name'
p22828
Nsa(dp22829
S'description'
p22830
S'Double well height parameter\n'
p22831
sS'cpp_type'
p22832
S'double'
p22833
sS'default'
p22834
g3
sS'name'
p22835
S'w'
p22836
sS'required'
p22837
I01
sS'group_name'
p22838
NsasS'name'
p22839
S'/Bounds/KKSMultiFreeEnergy'
p22840
sa(dp22841
S'description'
p22842
g3
sS'subblocks'
p22843
NsS'parameters'
p22844
(lp22845
(dp22846
S'description'
p22847
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22848
sS'cpp_type'
p22849
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22850
sS'default'
p22851
g3
sS'name'
p22852
S'block'
p22853
sS'required'
p22854
I00
sS'group_name'
p22855
Nsa(dp22856
S'description'
p22857
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22858
sS'cpp_type'
p22859
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22860
sS'default'
p22861
g3
sS'name'
p22862
S'boundary'
p22863
sS'required'
p22864
I00
sS'group_name'
p22865
Nsa(dp22866
S'description'
p22867
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22868
sS'cpp_type'
p22869
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22870
sS'default'
p22871
g3
sS'name'
p22872
S'control_tags'
p22873
sS'required'
p22874
I00
sS'group_name'
p22875
S'Advanced'
p22876
sa(dp22877
S'description'
p22878
S'Set the enabled status of the MooseObject.\n'
p22879
sS'cpp_type'
p22880
S'bool'
p22881
sS'default'
p22882
S'1'
p22883
sS'name'
p22884
S'enable'
p22885
sS'required'
p22886
I00
sS'group_name'
p22887
S'Advanced'
p22888
sa(dp22889
S'name'
p22890
S'execute_on'
p22891
sS'cpp_type'
p22892
S'MultiMooseEnum'
p22893
sS'default'
p22894
S'LINEAR'
p22895
sS'description'
p22896
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22897
sS'required'
p22898
I00
sS'options'
p22899
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22900
sS'group_name'
p22901
Nsa(dp22902
S'description'
p22903
S'The factor by which to multiply your material property for visualization\n'
p22904
sS'cpp_type'
p22905
S'double'
p22906
sS'default'
p22907
S'1'
p22908
sS'name'
p22909
S'factor'
p22910
sS'required'
p22911
I00
sS'group_name'
p22912
Nsa(dp22913
S'description'
p22914
S'The offset to add to your material property for visualization\n'
p22915
sS'cpp_type'
p22916
S'double'
p22917
sS'default'
p22918
S'0'
p22919
sS'name'
p22920
S'offset'
p22921
sS'required'
p22922
I00
sS'group_name'
p22923
Nsa(dp22924
S'description'
p22925
S'The scalar material property name\n'
p22926
sS'cpp_type'
p22927
S'MaterialPropertyName'
p22928
sS'default'
p22929
g3
sS'name'
p22930
S'property'
p22931
sS'required'
p22932
I01
sS'group_name'
p22933
Nsa(dp22934
S'description'
p22935
S'The seed for the master random number generator\n'
p22936
sS'cpp_type'
p22937
S'unsigned int'
p22938
sS'default'
p22939
S'0'
p22940
sS'name'
p22941
S'seed'
p22942
sS'required'
p22943
I00
sS'group_name'
p22944
S'Advanced'
p22945
sa(dp22946
S'description'
p22947
g3
sS'cpp_type'
p22948
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22949
sS'default'
p22950
S'MaterialRealAux'
p22951
sS'name'
p22952
S'type'
p22953
sS'required'
p22954
I00
sS'group_name'
p22955
Nsa(dp22956
S'description'
p22957
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22958
sS'cpp_type'
p22959
S'bool'
p22960
sS'default'
p22961
S'0'
p22962
sS'name'
p22963
S'use_displaced_mesh'
p22964
sS'required'
p22965
I00
sS'group_name'
p22966
S'Advanced'
p22967
sa(dp22968
S'description'
p22969
S'The name of the variable that this object applies to\n'
p22970
sS'cpp_type'
p22971
S'AuxVariableName'
p22972
sS'default'
p22973
g3
sS'name'
p22974
S'variable'
p22975
sS'required'
p22976
I01
sS'group_name'
p22977
NsasS'name'
p22978
S'/Bounds/MaterialRealAux'
p22979
sa(dp22980
S'description'
p22981
g3
sS'subblocks'
p22982
NsS'parameters'
p22983
(lp22984
(dp22985
S'description'
p22986
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22987
sS'cpp_type'
p22988
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22989
sS'default'
p22990
g3
sS'name'
p22991
S'block'
p22992
sS'required'
p22993
I00
sS'group_name'
p22994
Nsa(dp22995
S'description'
p22996
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22997
sS'cpp_type'
p22998
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22999
sS'default'
p23000
g3
sS'name'
p23001
S'boundary'
p23002
sS'required'
p23003
I00
sS'group_name'
p23004
Nsa(dp23005
S'description'
p23006
S'The column component to consider for this kernel\n'
p23007
sS'cpp_type'
p23008
S'unsigned int'
p23009
sS'default'
p23010
S'0'
p23011
sS'name'
p23012
S'column'
p23013
sS'required'
p23014
I00
sS'group_name'
p23015
Nsa(dp23016
S'description'
p23017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23018
sS'cpp_type'
p23019
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23020
sS'default'
p23021
g3
sS'name'
p23022
S'control_tags'
p23023
sS'required'
p23024
I00
sS'group_name'
p23025
S'Advanced'
p23026
sa(dp23027
S'description'
p23028
S'Set the enabled status of the MooseObject.\n'
p23029
sS'cpp_type'
p23030
S'bool'
p23031
sS'default'
p23032
S'1'
p23033
sS'name'
p23034
S'enable'
p23035
sS'required'
p23036
I00
sS'group_name'
p23037
S'Advanced'
p23038
sa(dp23039
S'name'
p23040
S'execute_on'
p23041
sS'cpp_type'
p23042
S'MultiMooseEnum'
p23043
sS'default'
p23044
S'LINEAR'
p23045
sS'description'
p23046
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23047
sS'required'
p23048
I00
sS'options'
p23049
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23050
sS'group_name'
p23051
Nsa(dp23052
S'description'
p23053
S'The factor by which to multiply your material property for visualization\n'
p23054
sS'cpp_type'
p23055
S'double'
p23056
sS'default'
p23057
S'1'
p23058
sS'name'
p23059
S'factor'
p23060
sS'required'
p23061
I00
sS'group_name'
p23062
Nsa(dp23063
S'description'
p23064
S'The offset to add to your material property for visualization\n'
p23065
sS'cpp_type'
p23066
S'double'
p23067
sS'default'
p23068
S'0'
p23069
sS'name'
p23070
S'offset'
p23071
sS'required'
p23072
I00
sS'group_name'
p23073
Nsa(dp23074
S'description'
p23075
S'The scalar material property name\n'
p23076
sS'cpp_type'
p23077
S'MaterialPropertyName'
p23078
sS'default'
p23079
g3
sS'name'
p23080
S'property'
p23081
sS'required'
p23082
I01
sS'group_name'
p23083
Nsa(dp23084
S'description'
p23085
S'The row component to consider for this kernel\n'
p23086
sS'cpp_type'
p23087
S'unsigned int'
p23088
sS'default'
p23089
S'0'
p23090
sS'name'
p23091
S'row'
p23092
sS'required'
p23093
I00
sS'group_name'
p23094
Nsa(dp23095
S'description'
p23096
S'The seed for the master random number generator\n'
p23097
sS'cpp_type'
p23098
S'unsigned int'
p23099
sS'default'
p23100
S'0'
p23101
sS'name'
p23102
S'seed'
p23103
sS'required'
p23104
I00
sS'group_name'
p23105
S'Advanced'
p23106
sa(dp23107
S'description'
p23108
g3
sS'cpp_type'
p23109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23110
sS'default'
p23111
S'MaterialRealDenseMatrixAux'
p23112
sS'name'
p23113
S'type'
p23114
sS'required'
p23115
I00
sS'group_name'
p23116
Nsa(dp23117
S'description'
p23118
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23119
sS'cpp_type'
p23120
S'bool'
p23121
sS'default'
p23122
S'0'
p23123
sS'name'
p23124
S'use_displaced_mesh'
p23125
sS'required'
p23126
I00
sS'group_name'
p23127
S'Advanced'
p23128
sa(dp23129
S'description'
p23130
S'The name of the variable that this object applies to\n'
p23131
sS'cpp_type'
p23132
S'AuxVariableName'
p23133
sS'default'
p23134
g3
sS'name'
p23135
S'variable'
p23136
sS'required'
p23137
I01
sS'group_name'
p23138
NsasS'name'
p23139
S'/Bounds/MaterialRealDenseMatrixAux'
p23140
sa(dp23141
S'description'
p23142
g3
sS'subblocks'
p23143
NsS'parameters'
p23144
(lp23145
(dp23146
S'description'
p23147
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23148
sS'cpp_type'
p23149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23150
sS'default'
p23151
g3
sS'name'
p23152
S'block'
p23153
sS'required'
p23154
I00
sS'group_name'
p23155
Nsa(dp23156
S'description'
p23157
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23158
sS'cpp_type'
p23159
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23160
sS'default'
p23161
g3
sS'name'
p23162
S'boundary'
p23163
sS'required'
p23164
I00
sS'group_name'
p23165
Nsa(dp23166
S'description'
p23167
S'The column component to consider for this kernel\n'
p23168
sS'cpp_type'
p23169
S'unsigned int'
p23170
sS'default'
p23171
S'0'
p23172
sS'name'
p23173
S'column'
p23174
sS'required'
p23175
I00
sS'group_name'
p23176
Nsa(dp23177
S'description'
p23178
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23179
sS'cpp_type'
p23180
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23181
sS'default'
p23182
g3
sS'name'
p23183
S'control_tags'
p23184
sS'required'
p23185
I00
sS'group_name'
p23186
S'Advanced'
p23187
sa(dp23188
S'description'
p23189
S'Set the enabled status of the MooseObject.\n'
p23190
sS'cpp_type'
p23191
S'bool'
p23192
sS'default'
p23193
S'1'
p23194
sS'name'
p23195
S'enable'
p23196
sS'required'
p23197
I00
sS'group_name'
p23198
S'Advanced'
p23199
sa(dp23200
S'name'
p23201
S'execute_on'
p23202
sS'cpp_type'
p23203
S'MultiMooseEnum'
p23204
sS'default'
p23205
S'LINEAR'
p23206
sS'description'
p23207
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23208
sS'required'
p23209
I00
sS'options'
p23210
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23211
sS'group_name'
p23212
Nsa(dp23213
S'description'
p23214
S'The factor by which to multiply your material property for visualization\n'
p23215
sS'cpp_type'
p23216
S'double'
p23217
sS'default'
p23218
S'1'
p23219
sS'name'
p23220
S'factor'
p23221
sS'required'
p23222
I00
sS'group_name'
p23223
Nsa(dp23224
S'description'
p23225
S'The offset to add to your material property for visualization\n'
p23226
sS'cpp_type'
p23227
S'double'
p23228
sS'default'
p23229
S'0'
p23230
sS'name'
p23231
S'offset'
p23232
sS'required'
p23233
I00
sS'group_name'
p23234
Nsa(dp23235
S'description'
p23236
S'The scalar material property name\n'
p23237
sS'cpp_type'
p23238
S'MaterialPropertyName'
p23239
sS'default'
p23240
g3
sS'name'
p23241
S'property'
p23242
sS'required'
p23243
I01
sS'group_name'
p23244
Nsa(dp23245
S'description'
p23246
S'The row component to consider for this kernel\n'
p23247
sS'cpp_type'
p23248
S'unsigned int'
p23249
sS'default'
p23250
S'0'
p23251
sS'name'
p23252
S'row'
p23253
sS'required'
p23254
I00
sS'group_name'
p23255
Nsa(dp23256
S'description'
p23257
S'The seed for the master random number generator\n'
p23258
sS'cpp_type'
p23259
S'unsigned int'
p23260
sS'default'
p23261
S'0'
p23262
sS'name'
p23263
S'seed'
p23264
sS'required'
p23265
I00
sS'group_name'
p23266
S'Advanced'
p23267
sa(dp23268
S'description'
p23269
g3
sS'cpp_type'
p23270
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23271
sS'default'
p23272
S'MaterialRealTensorValueAux'
p23273
sS'name'
p23274
S'type'
p23275
sS'required'
p23276
I00
sS'group_name'
p23277
Nsa(dp23278
S'description'
p23279
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23280
sS'cpp_type'
p23281
S'bool'
p23282
sS'default'
p23283
S'0'
p23284
sS'name'
p23285
S'use_displaced_mesh'
p23286
sS'required'
p23287
I00
sS'group_name'
p23288
S'Advanced'
p23289
sa(dp23290
S'description'
p23291
S'The name of the variable that this object applies to\n'
p23292
sS'cpp_type'
p23293
S'AuxVariableName'
p23294
sS'default'
p23295
g3
sS'name'
p23296
S'variable'
p23297
sS'required'
p23298
I01
sS'group_name'
p23299
NsasS'name'
p23300
S'/Bounds/MaterialRealTensorValueAux'
p23301
sa(dp23302
S'description'
p23303
g3
sS'subblocks'
p23304
NsS'parameters'
p23305
(lp23306
(dp23307
S'description'
p23308
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23309
sS'cpp_type'
p23310
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23311
sS'default'
p23312
g3
sS'name'
p23313
S'block'
p23314
sS'required'
p23315
I00
sS'group_name'
p23316
Nsa(dp23317
S'description'
p23318
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23319
sS'cpp_type'
p23320
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23321
sS'default'
p23322
g3
sS'name'
p23323
S'boundary'
p23324
sS'required'
p23325
I00
sS'group_name'
p23326
Nsa(dp23327
S'description'
p23328
S'The vector component to consider for this kernel\n'
p23329
sS'cpp_type'
p23330
S'unsigned int'
p23331
sS'default'
p23332
S'0'
p23333
sS'name'
p23334
S'component'
p23335
sS'required'
p23336
I00
sS'group_name'
p23337
Nsa(dp23338
S'description'
p23339
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23340
sS'cpp_type'
p23341
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23342
sS'default'
p23343
g3
sS'name'
p23344
S'control_tags'
p23345
sS'required'
p23346
I00
sS'group_name'
p23347
S'Advanced'
p23348
sa(dp23349
S'description'
p23350
S'Set the enabled status of the MooseObject.\n'
p23351
sS'cpp_type'
p23352
S'bool'
p23353
sS'default'
p23354
S'1'
p23355
sS'name'
p23356
S'enable'
p23357
sS'required'
p23358
I00
sS'group_name'
p23359
S'Advanced'
p23360
sa(dp23361
S'name'
p23362
S'execute_on'
p23363
sS'cpp_type'
p23364
S'MultiMooseEnum'
p23365
sS'default'
p23366
S'LINEAR'
p23367
sS'description'
p23368
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23369
sS'required'
p23370
I00
sS'options'
p23371
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23372
sS'group_name'
p23373
Nsa(dp23374
S'description'
p23375
S'The factor by which to multiply your material property for visualization\n'
p23376
sS'cpp_type'
p23377
S'double'
p23378
sS'default'
p23379
S'1'
p23380
sS'name'
p23381
S'factor'
p23382
sS'required'
p23383
I00
sS'group_name'
p23384
Nsa(dp23385
S'description'
p23386
S'The offset to add to your material property for visualization\n'
p23387
sS'cpp_type'
p23388
S'double'
p23389
sS'default'
p23390
S'0'
p23391
sS'name'
p23392
S'offset'
p23393
sS'required'
p23394
I00
sS'group_name'
p23395
Nsa(dp23396
S'description'
p23397
S'The scalar material property name\n'
p23398
sS'cpp_type'
p23399
S'MaterialPropertyName'
p23400
sS'default'
p23401
g3
sS'name'
p23402
S'property'
p23403
sS'required'
p23404
I01
sS'group_name'
p23405
Nsa(dp23406
S'description'
p23407
S'The seed for the master random number generator\n'
p23408
sS'cpp_type'
p23409
S'unsigned int'
p23410
sS'default'
p23411
S'0'
p23412
sS'name'
p23413
S'seed'
p23414
sS'required'
p23415
I00
sS'group_name'
p23416
S'Advanced'
p23417
sa(dp23418
S'description'
p23419
g3
sS'cpp_type'
p23420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23421
sS'default'
p23422
S'MaterialRealVectorValueAux'
p23423
sS'name'
p23424
S'type'
p23425
sS'required'
p23426
I00
sS'group_name'
p23427
Nsa(dp23428
S'description'
p23429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23430
sS'cpp_type'
p23431
S'bool'
p23432
sS'default'
p23433
S'0'
p23434
sS'name'
p23435
S'use_displaced_mesh'
p23436
sS'required'
p23437
I00
sS'group_name'
p23438
S'Advanced'
p23439
sa(dp23440
S'description'
p23441
S'The name of the variable that this object applies to\n'
p23442
sS'cpp_type'
p23443
S'AuxVariableName'
p23444
sS'default'
p23445
g3
sS'name'
p23446
S'variable'
p23447
sS'required'
p23448
I01
sS'group_name'
p23449
NsasS'name'
p23450
S'/Bounds/MaterialRealVectorValueAux'
p23451
sa(dp23452
S'description'
p23453
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p23454
sS'subblocks'
p23455
NsS'parameters'
p23456
(lp23457
(dp23458
S'description'
p23459
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23460
sS'cpp_type'
p23461
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23462
sS'default'
p23463
g3
sS'name'
p23464
S'block'
p23465
sS'required'
p23466
I00
sS'group_name'
p23467
Nsa(dp23468
S'description'
p23469
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23470
sS'cpp_type'
p23471
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23472
sS'default'
p23473
g3
sS'name'
p23474
S'boundary'
p23475
sS'required'
p23476
I00
sS'group_name'
p23477
Nsa(dp23478
S'description'
p23479
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23480
sS'cpp_type'
p23481
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23482
sS'default'
p23483
g3
sS'name'
p23484
S'control_tags'
p23485
sS'required'
p23486
I00
sS'group_name'
p23487
S'Advanced'
p23488
sa(dp23489
S'description'
p23490
S'Set the enabled status of the MooseObject.\n'
p23491
sS'cpp_type'
p23492
S'bool'
p23493
sS'default'
p23494
S'1'
p23495
sS'name'
p23496
S'enable'
p23497
sS'required'
p23498
I00
sS'group_name'
p23499
S'Advanced'
p23500
sa(dp23501
S'name'
p23502
S'execute_on'
p23503
sS'cpp_type'
p23504
S'MultiMooseEnum'
p23505
sS'default'
p23506
S'LINEAR'
p23507
sS'description'
p23508
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23509
sS'required'
p23510
I00
sS'options'
p23511
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23512
sS'group_name'
p23513
Nsa(dp23514
S'description'
p23515
S'The factor by which to multiply your material property for visualization\n'
p23516
sS'cpp_type'
p23517
S'double'
p23518
sS'default'
p23519
S'1'
p23520
sS'name'
p23521
S'factor'
p23522
sS'required'
p23523
I00
sS'group_name'
p23524
Nsa(dp23525
S'description'
p23526
S'The index to consider for this kernel\n'
p23527
sS'cpp_type'
p23528
S'unsigned int'
p23529
sS'default'
p23530
S'0'
p23531
sS'name'
p23532
S'index'
p23533
sS'required'
p23534
I00
sS'group_name'
p23535
Nsa(dp23536
S'description'
p23537
S'The offset to add to your material property for visualization\n'
p23538
sS'cpp_type'
p23539
S'double'
p23540
sS'default'
p23541
S'0'
p23542
sS'name'
p23543
S'offset'
p23544
sS'required'
p23545
I00
sS'group_name'
p23546
Nsa(dp23547
S'description'
p23548
S'The scalar material property name\n'
p23549
sS'cpp_type'
p23550
S'MaterialPropertyName'
p23551
sS'default'
p23552
g3
sS'name'
p23553
S'property'
p23554
sS'required'
p23555
I01
sS'group_name'
p23556
Nsa(dp23557
S'description'
p23558
S'The seed for the master random number generator\n'
p23559
sS'cpp_type'
p23560
S'unsigned int'
p23561
sS'default'
p23562
S'0'
p23563
sS'name'
p23564
S'seed'
p23565
sS'required'
p23566
I00
sS'group_name'
p23567
S'Advanced'
p23568
sa(dp23569
S'description'
p23570
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p23571
sS'cpp_type'
p23572
S'unsigned int'
p23573
sS'default'
p23574
g3
sS'name'
p23575
S'selected_qp'
p23576
sS'required'
p23577
I00
sS'group_name'
p23578
S'Advanced'
p23579
sa(dp23580
S'description'
p23581
g3
sS'cpp_type'
p23582
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23583
sS'default'
p23584
S'MaterialStdVectorAux'
p23585
sS'name'
p23586
S'type'
p23587
sS'required'
p23588
I00
sS'group_name'
p23589
Nsa(dp23590
S'description'
p23591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23592
sS'cpp_type'
p23593
S'bool'
p23594
sS'default'
p23595
S'0'
p23596
sS'name'
p23597
S'use_displaced_mesh'
p23598
sS'required'
p23599
I00
sS'group_name'
p23600
S'Advanced'
p23601
sa(dp23602
S'description'
p23603
S'The name of the variable that this object applies to\n'
p23604
sS'cpp_type'
p23605
S'AuxVariableName'
p23606
sS'default'
p23607
g3
sS'name'
p23608
S'variable'
p23609
sS'required'
p23610
I01
sS'group_name'
p23611
NsasS'name'
p23612
S'/Bounds/MaterialStdVectorAux'
p23613
sa(dp23614
S'description'
p23615
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p23616
sS'subblocks'
p23617
NsS'parameters'
p23618
(lp23619
(dp23620
S'description'
p23621
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23622
sS'cpp_type'
p23623
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23624
sS'default'
p23625
g3
sS'name'
p23626
S'block'
p23627
sS'required'
p23628
I00
sS'group_name'
p23629
Nsa(dp23630
S'description'
p23631
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23632
sS'cpp_type'
p23633
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23634
sS'default'
p23635
g3
sS'name'
p23636
S'boundary'
p23637
sS'required'
p23638
I00
sS'group_name'
p23639
Nsa(dp23640
S'description'
p23641
S'The gradient component to be extracted for this kernel\n'
p23642
sS'cpp_type'
p23643
S'unsigned int'
p23644
sS'default'
p23645
S'0'
p23646
sS'name'
p23647
S'component'
p23648
sS'required'
p23649
I00
sS'group_name'
p23650
Nsa(dp23651
S'description'
p23652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23653
sS'cpp_type'
p23654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23655
sS'default'
p23656
g3
sS'name'
p23657
S'control_tags'
p23658
sS'required'
p23659
I00
sS'group_name'
p23660
S'Advanced'
p23661
sa(dp23662
S'description'
p23663
S'Set the enabled status of the MooseObject.\n'
p23664
sS'cpp_type'
p23665
S'bool'
p23666
sS'default'
p23667
S'1'
p23668
sS'name'
p23669
S'enable'
p23670
sS'required'
p23671
I00
sS'group_name'
p23672
S'Advanced'
p23673
sa(dp23674
S'name'
p23675
S'execute_on'
p23676
sS'cpp_type'
p23677
S'MultiMooseEnum'
p23678
sS'default'
p23679
S'LINEAR'
p23680
sS'description'
p23681
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23682
sS'required'
p23683
I00
sS'options'
p23684
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23685
sS'group_name'
p23686
Nsa(dp23687
S'description'
p23688
S'The factor by which to multiply your material property for visualization\n'
p23689
sS'cpp_type'
p23690
S'double'
p23691
sS'default'
p23692
S'1'
p23693
sS'name'
p23694
S'factor'
p23695
sS'required'
p23696
I00
sS'group_name'
p23697
Nsa(dp23698
S'description'
p23699
S'The index to consider for this kernel\n'
p23700
sS'cpp_type'
p23701
S'unsigned int'
p23702
sS'default'
p23703
S'0'
p23704
sS'name'
p23705
S'index'
p23706
sS'required'
p23707
I00
sS'group_name'
p23708
Nsa(dp23709
S'description'
p23710
S'The offset to add to your material property for visualization\n'
p23711
sS'cpp_type'
p23712
S'double'
p23713
sS'default'
p23714
S'0'
p23715
sS'name'
p23716
S'offset'
p23717
sS'required'
p23718
I00
sS'group_name'
p23719
Nsa(dp23720
S'description'
p23721
S'The scalar material property name\n'
p23722
sS'cpp_type'
p23723
S'MaterialPropertyName'
p23724
sS'default'
p23725
g3
sS'name'
p23726
S'property'
p23727
sS'required'
p23728
I01
sS'group_name'
p23729
Nsa(dp23730
S'description'
p23731
S'The seed for the master random number generator\n'
p23732
sS'cpp_type'
p23733
S'unsigned int'
p23734
sS'default'
p23735
S'0'
p23736
sS'name'
p23737
S'seed'
p23738
sS'required'
p23739
I00
sS'group_name'
p23740
S'Advanced'
p23741
sa(dp23742
S'description'
p23743
g3
sS'cpp_type'
p23744
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23745
sS'default'
p23746
S'MaterialStdVectorRealGradientAux'
p23747
sS'name'
p23748
S'type'
p23749
sS'required'
p23750
I00
sS'group_name'
p23751
Nsa(dp23752
S'description'
p23753
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23754
sS'cpp_type'
p23755
S'bool'
p23756
sS'default'
p23757
S'0'
p23758
sS'name'
p23759
S'use_displaced_mesh'
p23760
sS'required'
p23761
I00
sS'group_name'
p23762
S'Advanced'
p23763
sa(dp23764
S'description'
p23765
S'The name of the variable that this object applies to\n'
p23766
sS'cpp_type'
p23767
S'AuxVariableName'
p23768
sS'default'
p23769
g3
sS'name'
p23770
S'variable'
p23771
sS'required'
p23772
I01
sS'group_name'
p23773
NsasS'name'
p23774
S'/Bounds/MaterialStdVectorRealGradientAux'
p23775
sa(dp23776
S'description'
p23777
g3
sS'subblocks'
p23778
NsS'parameters'
p23779
(lp23780
(dp23781
S'description'
p23782
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23783
sS'cpp_type'
p23784
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23785
sS'default'
p23786
g3
sS'name'
p23787
S'block'
p23788
sS'required'
p23789
I00
sS'group_name'
p23790
Nsa(dp23791
S'description'
p23792
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23793
sS'cpp_type'
p23794
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23795
sS'default'
p23796
g3
sS'name'
p23797
S'boundary'
p23798
sS'required'
p23799
I00
sS'group_name'
p23800
Nsa(dp23801
S'description'
p23802
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23803
sS'cpp_type'
p23804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23805
sS'default'
p23806
g3
sS'name'
p23807
S'control_tags'
p23808
sS'required'
p23809
I00
sS'group_name'
p23810
S'Advanced'
p23811
sa(dp23812
S'description'
p23813
S'Set the enabled status of the MooseObject.\n'
p23814
sS'cpp_type'
p23815
S'bool'
p23816
sS'default'
p23817
S'1'
p23818
sS'name'
p23819
S'enable'
p23820
sS'required'
p23821
I00
sS'group_name'
p23822
S'Advanced'
p23823
sa(dp23824
S'name'
p23825
S'execute_on'
p23826
sS'cpp_type'
p23827
S'MultiMooseEnum'
p23828
sS'default'
p23829
S'LINEAR'
p23830
sS'description'
p23831
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23832
sS'required'
p23833
I00
sS'options'
p23834
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23835
sS'group_name'
p23836
Nsa(dp23837
S'description'
p23838
S'The boundary to find the distance to.\n'
p23839
sS'cpp_type'
p23840
S'BoundaryName'
p23841
sS'default'
p23842
g3
sS'name'
p23843
S'paired_boundary'
p23844
sS'required'
p23845
I01
sS'group_name'
p23846
Nsa(dp23847
S'description'
p23848
S'The seed for the master random number generator\n'
p23849
sS'cpp_type'
p23850
S'unsigned int'
p23851
sS'default'
p23852
S'0'
p23853
sS'name'
p23854
S'seed'
p23855
sS'required'
p23856
I00
sS'group_name'
p23857
S'Advanced'
p23858
sa(dp23859
S'description'
p23860
g3
sS'cpp_type'
p23861
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23862
sS'default'
p23863
S'NearestNodeDistanceAux'
p23864
sS'name'
p23865
S'type'
p23866
sS'required'
p23867
I00
sS'group_name'
p23868
Nsa(dp23869
S'description'
p23870
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23871
sS'cpp_type'
p23872
S'bool'
p23873
sS'default'
p23874
S'1'
p23875
sS'name'
p23876
S'use_displaced_mesh'
p23877
sS'required'
p23878
I00
sS'group_name'
p23879
S'Advanced'
p23880
sa(dp23881
S'description'
p23882
S'The name of the variable that this object applies to\n'
p23883
sS'cpp_type'
p23884
S'AuxVariableName'
p23885
sS'default'
p23886
g3
sS'name'
p23887
S'variable'
p23888
sS'required'
p23889
I01
sS'group_name'
p23890
NsasS'name'
p23891
S'/Bounds/NearestNodeDistanceAux'
p23892
sa(dp23893
S'description'
p23894
g3
sS'subblocks'
p23895
NsS'parameters'
p23896
(lp23897
(dp23898
S'description'
p23899
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23900
sS'cpp_type'
p23901
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23902
sS'default'
p23903
g3
sS'name'
p23904
S'block'
p23905
sS'required'
p23906
I00
sS'group_name'
p23907
Nsa(dp23908
S'description'
p23909
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23910
sS'cpp_type'
p23911
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23912
sS'default'
p23913
g3
sS'name'
p23914
S'boundary'
p23915
sS'required'
p23916
I00
sS'group_name'
p23917
Nsa(dp23918
S'description'
p23919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23920
sS'cpp_type'
p23921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23922
sS'default'
p23923
g3
sS'name'
p23924
S'control_tags'
p23925
sS'required'
p23926
I00
sS'group_name'
p23927
S'Advanced'
p23928
sa(dp23929
S'description'
p23930
S'Set the enabled status of the MooseObject.\n'
p23931
sS'cpp_type'
p23932
S'bool'
p23933
sS'default'
p23934
S'1'
p23935
sS'name'
p23936
S'enable'
p23937
sS'required'
p23938
I00
sS'group_name'
p23939
S'Advanced'
p23940
sa(dp23941
S'name'
p23942
S'execute_on'
p23943
sS'cpp_type'
p23944
S'MultiMooseEnum'
p23945
sS'default'
p23946
S'LINEAR'
p23947
sS'description'
p23948
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23949
sS'required'
p23950
I00
sS'options'
p23951
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23952
sS'group_name'
p23953
Nsa(dp23954
S'description'
p23955
S'The boundary to get the value from.\n'
p23956
sS'cpp_type'
p23957
S'BoundaryName'
p23958
sS'default'
p23959
g3
sS'name'
p23960
S'paired_boundary'
p23961
sS'required'
p23962
I01
sS'group_name'
p23963
Nsa(dp23964
S'description'
p23965
S'The variable to get the value of.\n'
p23966
sS'cpp_type'
p23967
S'std::vector<VariableName>'
p23968
sS'default'
p23969
g3
sS'name'
p23970
S'paired_variable'
p23971
sS'required'
p23972
I01
sS'group_name'
p23973
Nsa(dp23974
S'description'
p23975
S'The seed for the master random number generator\n'
p23976
sS'cpp_type'
p23977
S'unsigned int'
p23978
sS'default'
p23979
S'0'
p23980
sS'name'
p23981
S'seed'
p23982
sS'required'
p23983
I00
sS'group_name'
p23984
S'Advanced'
p23985
sa(dp23986
S'description'
p23987
g3
sS'cpp_type'
p23988
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23989
sS'default'
p23990
S'NearestNodeValueAux'
p23991
sS'name'
p23992
S'type'
p23993
sS'required'
p23994
I00
sS'group_name'
p23995
Nsa(dp23996
S'description'
p23997
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23998
sS'cpp_type'
p23999
S'bool'
p24000
sS'default'
p24001
S'1'
p24002
sS'name'
p24003
S'use_displaced_mesh'
p24004
sS'required'
p24005
I00
sS'group_name'
p24006
S'Advanced'
p24007
sa(dp24008
S'description'
p24009
S'The name of the variable that this object applies to\n'
p24010
sS'cpp_type'
p24011
S'AuxVariableName'
p24012
sS'default'
p24013
g3
sS'name'
p24014
S'variable'
p24015
sS'required'
p24016
I01
sS'group_name'
p24017
NsasS'name'
p24018
S'/Bounds/NearestNodeValueAux'
p24019
sa(dp24020
S'description'
p24021
g3
sS'subblocks'
p24022
NsS'parameters'
p24023
(lp24024
(dp24025
S'description'
p24026
S'beta parameter\n'
p24027
sS'cpp_type'
p24028
S'double'
p24029
sS'default'
p24030
g3
sS'name'
p24031
S'beta'
p24032
sS'required'
p24033
I01
sS'group_name'
p24034
Nsa(dp24035
S'description'
p24036
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24037
sS'cpp_type'
p24038
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24039
sS'default'
p24040
g3
sS'name'
p24041
S'block'
p24042
sS'required'
p24043
I00
sS'group_name'
p24044
Nsa(dp24045
S'description'
p24046
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24047
sS'cpp_type'
p24048
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24049
sS'default'
p24050
g3
sS'name'
p24051
S'boundary'
p24052
sS'required'
p24053
I00
sS'group_name'
p24054
Nsa(dp24055
S'description'
p24056
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24057
sS'cpp_type'
p24058
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24059
sS'default'
p24060
g3
sS'name'
p24061
S'control_tags'
p24062
sS'required'
p24063
I00
sS'group_name'
p24064
S'Advanced'
p24065
sa(dp24066
S'description'
p24067
S'displacement variable\n'
p24068
sS'cpp_type'
p24069
S'std::vector<VariableName>'
p24070
sS'default'
p24071
g3
sS'name'
p24072
S'displacement'
p24073
sS'required'
p24074
I01
sS'group_name'
p24075
Nsa(dp24076
S'description'
p24077
S'Set the enabled status of the MooseObject.\n'
p24078
sS'cpp_type'
p24079
S'bool'
p24080
sS'default'
p24081
S'1'
p24082
sS'name'
p24083
S'enable'
p24084
sS'required'
p24085
I00
sS'group_name'
p24086
S'Advanced'
p24087
sa(dp24088
S'name'
p24089
S'execute_on'
p24090
sS'cpp_type'
p24091
S'MultiMooseEnum'
p24092
sS'default'
p24093
S'LINEAR'
p24094
sS'description'
p24095
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24096
sS'required'
p24097
I00
sS'options'
p24098
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24099
sS'group_name'
p24100
Nsa(dp24101
S'description'
p24102
S'The seed for the master random number generator\n'
p24103
sS'cpp_type'
p24104
S'unsigned int'
p24105
sS'default'
p24106
S'0'
p24107
sS'name'
p24108
S'seed'
p24109
sS'required'
p24110
I00
sS'group_name'
p24111
S'Advanced'
p24112
sa(dp24113
S'description'
p24114
g3
sS'cpp_type'
p24115
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24116
sS'default'
p24117
S'NewmarkAccelAux'
p24118
sS'name'
p24119
S'type'
p24120
sS'required'
p24121
I00
sS'group_name'
p24122
Nsa(dp24123
S'description'
p24124
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24125
sS'cpp_type'
p24126
S'bool'
p24127
sS'default'
p24128
S'0'
p24129
sS'name'
p24130
S'use_displaced_mesh'
p24131
sS'required'
p24132
I00
sS'group_name'
p24133
S'Advanced'
p24134
sa(dp24135
S'description'
p24136
S'The name of the variable that this object applies to\n'
p24137
sS'cpp_type'
p24138
S'AuxVariableName'
p24139
sS'default'
p24140
g3
sS'name'
p24141
S'variable'
p24142
sS'required'
p24143
I01
sS'group_name'
p24144
Nsa(dp24145
S'description'
p24146
S'velocity variable\n'
p24147
sS'cpp_type'
p24148
S'std::vector<VariableName>'
p24149
sS'default'
p24150
g3
sS'name'
p24151
S'velocity'
p24152
sS'required'
p24153
I01
sS'group_name'
p24154
NsasS'name'
p24155
S'/Bounds/NewmarkAccelAux'
p24156
sa(dp24157
S'description'
p24158
g3
sS'subblocks'
p24159
NsS'parameters'
p24160
(lp24161
(dp24162
S'description'
p24163
S'acceleration variable\n'
p24164
sS'cpp_type'
p24165
S'std::vector<VariableName>'
p24166
sS'default'
p24167
g3
sS'name'
p24168
S'acceleration'
p24169
sS'required'
p24170
I01
sS'group_name'
p24171
Nsa(dp24172
S'description'
p24173
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24174
sS'cpp_type'
p24175
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24176
sS'default'
p24177
g3
sS'name'
p24178
S'block'
p24179
sS'required'
p24180
I00
sS'group_name'
p24181
Nsa(dp24182
S'description'
p24183
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24184
sS'cpp_type'
p24185
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24186
sS'default'
p24187
g3
sS'name'
p24188
S'boundary'
p24189
sS'required'
p24190
I00
sS'group_name'
p24191
Nsa(dp24192
S'description'
p24193
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24194
sS'cpp_type'
p24195
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24196
sS'default'
p24197
g3
sS'name'
p24198
S'control_tags'
p24199
sS'required'
p24200
I00
sS'group_name'
p24201
S'Advanced'
p24202
sa(dp24203
S'description'
p24204
S'Set the enabled status of the MooseObject.\n'
p24205
sS'cpp_type'
p24206
S'bool'
p24207
sS'default'
p24208
S'1'
p24209
sS'name'
p24210
S'enable'
p24211
sS'required'
p24212
I00
sS'group_name'
p24213
S'Advanced'
p24214
sa(dp24215
S'name'
p24216
S'execute_on'
p24217
sS'cpp_type'
p24218
S'MultiMooseEnum'
p24219
sS'default'
p24220
S'LINEAR'
p24221
sS'description'
p24222
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24223
sS'required'
p24224
I00
sS'options'
p24225
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24226
sS'group_name'
p24227
Nsa(dp24228
S'description'
p24229
S'gamma parameter\n'
p24230
sS'cpp_type'
p24231
S'double'
p24232
sS'default'
p24233
g3
sS'name'
p24234
S'gamma'
p24235
sS'required'
p24236
I01
sS'group_name'
p24237
Nsa(dp24238
S'description'
p24239
S'The seed for the master random number generator\n'
p24240
sS'cpp_type'
p24241
S'unsigned int'
p24242
sS'default'
p24243
S'0'
p24244
sS'name'
p24245
S'seed'
p24246
sS'required'
p24247
I00
sS'group_name'
p24248
S'Advanced'
p24249
sa(dp24250
S'description'
p24251
g3
sS'cpp_type'
p24252
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24253
sS'default'
p24254
S'NewmarkVelAux'
p24255
sS'name'
p24256
S'type'
p24257
sS'required'
p24258
I00
sS'group_name'
p24259
Nsa(dp24260
S'description'
p24261
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24262
sS'cpp_type'
p24263
S'bool'
p24264
sS'default'
p24265
S'0'
p24266
sS'name'
p24267
S'use_displaced_mesh'
p24268
sS'required'
p24269
I00
sS'group_name'
p24270
S'Advanced'
p24271
sa(dp24272
S'description'
p24273
S'The name of the variable that this object applies to\n'
p24274
sS'cpp_type'
p24275
S'AuxVariableName'
p24276
sS'default'
p24277
g3
sS'name'
p24278
S'variable'
p24279
sS'required'
p24280
I01
sS'group_name'
p24281
NsasS'name'
p24282
S'/Bounds/NewmarkVelAux'
p24283
sa(dp24284
S'description'
p24285
g3
sS'subblocks'
p24286
NsS'parameters'
p24287
(lp24288
(dp24289
S'description'
p24290
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24291
sS'cpp_type'
p24292
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24293
sS'default'
p24294
g3
sS'name'
p24295
S'block'
p24296
sS'required'
p24297
I00
sS'group_name'
p24298
Nsa(dp24299
S'description'
p24300
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24301
sS'cpp_type'
p24302
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24303
sS'default'
p24304
g3
sS'name'
p24305
S'boundary'
p24306
sS'required'
p24307
I00
sS'group_name'
p24308
Nsa(dp24309
S'description'
p24310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24311
sS'cpp_type'
p24312
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24313
sS'default'
p24314
g3
sS'name'
p24315
S'control_tags'
p24316
sS'required'
p24317
I00
sS'group_name'
p24318
S'Advanced'
p24319
sa(dp24320
S'description'
p24321
S'Set the enabled status of the MooseObject.\n'
p24322
sS'cpp_type'
p24323
S'bool'
p24324
sS'default'
p24325
S'1'
p24326
sS'name'
p24327
S'enable'
p24328
sS'required'
p24329
I00
sS'group_name'
p24330
S'Advanced'
p24331
sa(dp24332
S'name'
p24333
S'execute_on'
p24334
sS'cpp_type'
p24335
S'MultiMooseEnum'
p24336
sS'default'
p24337
S'LINEAR'
p24338
sS'description'
p24339
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24340
sS'required'
p24341
I00
sS'options'
p24342
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24343
sS'group_name'
p24344
Nsa(dp24345
S'description'
p24346
S'The normalization factor\n'
p24347
sS'cpp_type'
p24348
S'double'
p24349
sS'default'
p24350
S'1'
p24351
sS'name'
p24352
S'normal_factor'
p24353
sS'required'
p24354
I00
sS'group_name'
p24355
Nsa(dp24356
S'description'
p24357
S'The postprocessor on the source\n'
p24358
sS'cpp_type'
p24359
S'PostprocessorName'
p24360
sS'default'
p24361
g3
sS'name'
p24362
S'normalization'
p24363
sS'required'
p24364
I01
sS'group_name'
p24365
Nsa(dp24366
S'description'
p24367
S'The seed for the master random number generator\n'
p24368
sS'cpp_type'
p24369
S'unsigned int'
p24370
sS'default'
p24371
S'0'
p24372
sS'name'
p24373
S'seed'
p24374
sS'required'
p24375
I00
sS'group_name'
p24376
S'Advanced'
p24377
sa(dp24378
S'description'
p24379
S'The variable to be normalized\n'
p24380
sS'cpp_type'
p24381
S'std::vector<VariableName>'
p24382
sS'default'
p24383
g3
sS'name'
p24384
S'source_variable'
p24385
sS'required'
p24386
I01
sS'group_name'
p24387
Nsa(dp24388
S'description'
p24389
g3
sS'cpp_type'
p24390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24391
sS'default'
p24392
S'NormalizationAux'
p24393
sS'name'
p24394
S'type'
p24395
sS'required'
p24396
I00
sS'group_name'
p24397
Nsa(dp24398
S'description'
p24399
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24400
sS'cpp_type'
p24401
S'bool'
p24402
sS'default'
p24403
S'0'
p24404
sS'name'
p24405
S'use_displaced_mesh'
p24406
sS'required'
p24407
I00
sS'group_name'
p24408
S'Advanced'
p24409
sa(dp24410
S'description'
p24411
S'The name of the variable that this object applies to\n'
p24412
sS'cpp_type'
p24413
S'AuxVariableName'
p24414
sS'default'
p24415
g3
sS'name'
p24416
S'variable'
p24417
sS'required'
p24418
I01
sS'group_name'
p24419
NsasS'name'
p24420
S'/Bounds/NormalizationAux'
p24421
sa(dp24422
S'description'
p24423
S'Output euler angles from user object to an AuxVariable.\n'
p24424
sS'subblocks'
p24425
NsS'parameters'
p24426
(lp24427
(dp24428
S'description'
p24429
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24430
sS'cpp_type'
p24431
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24432
sS'default'
p24433
g3
sS'name'
p24434
S'block'
p24435
sS'required'
p24436
I00
sS'group_name'
p24437
Nsa(dp24438
S'description'
p24439
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24440
sS'cpp_type'
p24441
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24442
sS'default'
p24443
g3
sS'name'
p24444
S'boundary'
p24445
sS'required'
p24446
I00
sS'group_name'
p24447
Nsa(dp24448
S'description'
p24449
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24450
sS'cpp_type'
p24451
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24452
sS'default'
p24453
g3
sS'name'
p24454
S'control_tags'
p24455
sS'required'
p24456
I00
sS'group_name'
p24457
S'Advanced'
p24458
sa(dp24459
S'description'
p24460
S'Set the enabled status of the MooseObject.\n'
p24461
sS'cpp_type'
p24462
S'bool'
p24463
sS'default'
p24464
S'1'
p24465
sS'name'
p24466
S'enable'
p24467
sS'required'
p24468
I00
sS'group_name'
p24469
S'Advanced'
p24470
sa(dp24471
S'description'
p24472
S'Name of Euler angle provider user object\n'
p24473
sS'cpp_type'
p24474
S'UserObjectName'
p24475
sS'default'
p24476
g3
sS'name'
p24477
S'euler_angle_provider'
p24478
sS'required'
p24479
I01
sS'group_name'
p24480
Nsa(dp24481
S'name'
p24482
S'execute_on'
p24483
sS'cpp_type'
p24484
S'MultiMooseEnum'
p24485
sS'default'
p24486
S'LINEAR'
p24487
sS'description'
p24488
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24489
sS'required'
p24490
I00
sS'options'
p24491
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24492
sS'group_name'
p24493
Nsa(dp24494
S'description'
p24495
S'The GrainTracker UserObject to get values from.\n'
p24496
sS'cpp_type'
p24497
S'UserObjectName'
p24498
sS'default'
p24499
g3
sS'name'
p24500
S'grain_tracker'
p24501
sS'required'
p24502
I01
sS'group_name'
p24503
Nsa(dp24504
S'name'
p24505
S'output_euler_angle'
p24506
sS'cpp_type'
p24507
S'MooseEnum'
p24508
sS'default'
p24509
g3
sS'description'
p24510
S'Euler angle to output\n'
p24511
sS'required'
p24512
I01
sS'options'
p24513
S'phi1 Phi phi2'
p24514
sS'group_name'
p24515
Nsa(dp24516
S'description'
p24517
S'The seed for the master random number generator\n'
p24518
sS'cpp_type'
p24519
S'unsigned int'
p24520
sS'default'
p24521
S'0'
p24522
sS'name'
p24523
S'seed'
p24524
sS'required'
p24525
I00
sS'group_name'
p24526
S'Advanced'
p24527
sa(dp24528
S'description'
p24529
g3
sS'cpp_type'
p24530
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24531
sS'default'
p24532
S'OutputEulerAngles'
p24533
sS'name'
p24534
S'type'
p24535
sS'required'
p24536
I00
sS'group_name'
p24537
Nsa(dp24538
S'description'
p24539
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24540
sS'cpp_type'
p24541
S'bool'
p24542
sS'default'
p24543
S'0'
p24544
sS'name'
p24545
S'use_displaced_mesh'
p24546
sS'required'
p24547
I00
sS'group_name'
p24548
S'Advanced'
p24549
sa(dp24550
S'description'
p24551
S'The name of the variable that this object applies to\n'
p24552
sS'cpp_type'
p24553
S'AuxVariableName'
p24554
sS'default'
p24555
g3
sS'name'
p24556
S'variable'
p24557
sS'required'
p24558
I01
sS'group_name'
p24559
NsasS'name'
p24560
S'/Bounds/OutputEulerAngles'
p24561
sa(dp24562
S'description'
p24563
g3
sS'subblocks'
p24564
NsS'parameters'
p24565
(lp24566
(dp24567
S'description'
p24568
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24569
sS'cpp_type'
p24570
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24571
sS'default'
p24572
g3
sS'name'
p24573
S'block'
p24574
sS'required'
p24575
I00
sS'group_name'
p24576
Nsa(dp24577
S'description'
p24578
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24579
sS'cpp_type'
p24580
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24581
sS'default'
p24582
g3
sS'name'
p24583
S'boundary'
p24584
sS'required'
p24585
I00
sS'group_name'
p24586
Nsa(dp24587
S'description'
p24588
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24589
sS'cpp_type'
p24590
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24591
sS'default'
p24592
g3
sS'name'
p24593
S'control_tags'
p24594
sS'required'
p24595
I00
sS'group_name'
p24596
S'Advanced'
p24597
sa(dp24598
S'description'
p24599
S'Set the enabled status of the MooseObject.\n'
p24600
sS'cpp_type'
p24601
S'bool'
p24602
sS'default'
p24603
S'1'
p24604
sS'name'
p24605
S'enable'
p24606
sS'required'
p24607
I00
sS'group_name'
p24608
S'Advanced'
p24609
sa(dp24610
S'name'
p24611
S'execute_on'
p24612
sS'cpp_type'
p24613
S'MultiMooseEnum'
p24614
sS'default'
p24615
S'LINEAR'
p24616
sS'description'
p24617
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24618
sS'required'
p24619
I00
sS'options'
p24620
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24621
sS'group_name'
p24622
Nsa(dp24623
S'description'
p24624
S'The seed for the master random number generator\n'
p24625
sS'cpp_type'
p24626
S'unsigned int'
p24627
sS'default'
p24628
S'0'
p24629
sS'name'
p24630
S'seed'
p24631
sS'required'
p24632
I00
sS'group_name'
p24633
S'Advanced'
p24634
sa(dp24635
S'description'
p24636
g3
sS'cpp_type'
p24637
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24638
sS'default'
p24639
S'PFCEnergyDensity'
p24640
sS'name'
p24641
S'type'
p24642
sS'required'
p24643
I00
sS'group_name'
p24644
Nsa(dp24645
S'description'
p24646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24647
sS'cpp_type'
p24648
S'bool'
p24649
sS'default'
p24650
S'0'
p24651
sS'name'
p24652
S'use_displaced_mesh'
p24653
sS'required'
p24654
I00
sS'group_name'
p24655
S'Advanced'
p24656
sa(dp24657
S'description'
p24658
S'Array of coupled variables\n'
p24659
sS'cpp_type'
p24660
S'std::vector<VariableName>'
p24661
sS'default'
p24662
g3
sS'name'
p24663
S'v'
p24664
sS'required'
p24665
I01
sS'group_name'
p24666
Nsa(dp24667
S'description'
p24668
S'The name of the variable that this object applies to\n'
p24669
sS'cpp_type'
p24670
S'AuxVariableName'
p24671
sS'default'
p24672
g3
sS'name'
p24673
S'variable'
p24674
sS'required'
p24675
I01
sS'group_name'
p24676
NsasS'name'
p24677
S'/Bounds/PFCEnergyDensity'
p24678
sa(dp24679
S'description'
p24680
g3
sS'subblocks'
p24681
NsS'parameters'
p24682
(lp24683
(dp24684
S'description'
p24685
S'Modified Coefficent in Taylor Series Expanstion\n'
p24686
sS'cpp_type'
p24687
S'double'
p24688
sS'default'
p24689
S'1'
p24690
sS'name'
p24691
S'a'
p24692
sS'required'
p24693
I00
sS'group_name'
p24694
Nsa(dp24695
S'description'
p24696
S'Modified Coefficent in Taylor Series Expanstion\n'
p24697
sS'cpp_type'
p24698
S'double'
p24699
sS'default'
p24700
S'1'
p24701
sS'name'
p24702
S'b'
p24703
sS'required'
p24704
I00
sS'group_name'
p24705
Nsa(dp24706
S'description'
p24707
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24708
sS'cpp_type'
p24709
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24710
sS'default'
p24711
g3
sS'name'
p24712
S'block'
p24713
sS'required'
p24714
I00
sS'group_name'
p24715
Nsa(dp24716
S'description'
p24717
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24718
sS'cpp_type'
p24719
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24720
sS'default'
p24721
g3
sS'name'
p24722
S'boundary'
p24723
sS'required'
p24724
I00
sS'group_name'
p24725
Nsa(dp24726
S'description'
p24727
S'Modified Coefficent in Taylor Series Expanstion\n'
p24728
sS'cpp_type'
p24729
S'double'
p24730
sS'default'
p24731
S'1'
p24732
sS'name'
p24733
S'c'
p24734
sS'required'
p24735
I00
sS'group_name'
p24736
Nsa(dp24737
S'description'
p24738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24739
sS'cpp_type'
p24740
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24741
sS'default'
p24742
g3
sS'name'
p24743
S'control_tags'
p24744
sS'required'
p24745
I00
sS'group_name'
p24746
S'Advanced'
p24747
sa(dp24748
S'description'
p24749
S'Set the enabled status of the MooseObject.\n'
p24750
sS'cpp_type'
p24751
S'bool'
p24752
sS'default'
p24753
S'1'
p24754
sS'name'
p24755
S'enable'
p24756
sS'required'
p24757
I00
sS'group_name'
p24758
S'Advanced'
p24759
sa(dp24760
S'name'
p24761
S'execute_on'
p24762
sS'cpp_type'
p24763
S'MultiMooseEnum'
p24764
sS'default'
p24765
S'LINEAR'
p24766
sS'description'
p24767
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24768
sS'required'
p24769
I00
sS'options'
p24770
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24771
sS'group_name'
p24772
Nsa(dp24773
S'name'
p24774
S'log_approach'
p24775
sS'cpp_type'
p24776
S'MooseEnum'
p24777
sS'default'
p24778
g3
sS'description'
p24779
S'Which approach will be used to handle the natural log\n'
p24780
sS'required'
p24781
I01
sS'options'
p24782
S'tolerance cancelation expansion nothing'
p24783
sS'group_name'
p24784
Nsa(dp24785
S'description'
p24786
S'This is the number of terms to use in the taylor series expansion\n'
p24787
sS'cpp_type'
p24788
S'unsigned int'
p24789
sS'default'
p24790
S'4'
p24791
sS'name'
p24792
S'num_exp_terms'
p24793
sS'required'
p24794
I00
sS'group_name'
p24795
Nsa(dp24796
S'description'
p24797
S'The seed for the master random number generator\n'
p24798
sS'cpp_type'
p24799
S'unsigned int'
p24800
sS'default'
p24801
S'0'
p24802
sS'name'
p24803
S'seed'
p24804
sS'required'
p24805
I00
sS'group_name'
p24806
S'Advanced'
p24807
sa(dp24808
S'description'
p24809
S'Tolerance used when the tolerance approach is chosen\n'
p24810
sS'cpp_type'
p24811
S'double'
p24812
sS'default'
p24813
S'1e-09'
p24814
sS'name'
p24815
S'tol'
p24816
sS'required'
p24817
I00
sS'group_name'
p24818
Nsa(dp24819
S'description'
p24820
g3
sS'cpp_type'
p24821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24822
sS'default'
p24823
S'PFCRFFEnergyDensity'
p24824
sS'name'
p24825
S'type'
p24826
sS'required'
p24827
I00
sS'group_name'
p24828
Nsa(dp24829
S'description'
p24830
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24831
sS'cpp_type'
p24832
S'bool'
p24833
sS'default'
p24834
S'0'
p24835
sS'name'
p24836
S'use_displaced_mesh'
p24837
sS'required'
p24838
I00
sS'group_name'
p24839
S'Advanced'
p24840
sa(dp24841
S'description'
p24842
S'Array of coupled variables\n'
p24843
sS'cpp_type'
p24844
S'std::vector<VariableName>'
p24845
sS'default'
p24846
g3
sS'name'
p24847
S'v'
p24848
sS'required'
p24849
I01
sS'group_name'
p24850
Nsa(dp24851
S'description'
p24852
S'The name of the variable that this object applies to\n'
p24853
sS'cpp_type'
p24854
S'AuxVariableName'
p24855
sS'default'
p24856
g3
sS'name'
p24857
S'variable'
p24858
sS'required'
p24859
I01
sS'group_name'
p24860
NsasS'name'
p24861
S'/Bounds/PFCRFFEnergyDensity'
p24862
sa(dp24863
S'description'
p24864
S'Parsed function AuxKernel.\n'
p24865
sS'subblocks'
p24866
NsS'parameters'
p24867
(lp24868
(dp24869
S'description'
p24870
S'coupled variables\n'
p24871
sS'cpp_type'
p24872
S'std::vector<VariableName>'
p24873
sS'default'
p24874
g3
sS'name'
p24875
S'args'
p24876
sS'required'
p24877
I00
sS'group_name'
p24878
Nsa(dp24879
S'description'
p24880
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24881
sS'cpp_type'
p24882
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24883
sS'default'
p24884
g3
sS'name'
p24885
S'block'
p24886
sS'required'
p24887
I00
sS'group_name'
p24888
Nsa(dp24889
S'description'
p24890
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24891
sS'cpp_type'
p24892
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24893
sS'default'
p24894
g3
sS'name'
p24895
S'boundary'
p24896
sS'required'
p24897
I00
sS'group_name'
p24898
Nsa(dp24899
S'description'
p24900
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p24901
sS'cpp_type'
p24902
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24903
sS'default'
p24904
g3
sS'name'
p24905
S'constant_expressions'
p24906
sS'required'
p24907
I00
sS'group_name'
p24908
Nsa(dp24909
S'description'
p24910
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p24911
sS'cpp_type'
p24912
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24913
sS'default'
p24914
g3
sS'name'
p24915
S'constant_names'
p24916
sS'required'
p24917
I00
sS'group_name'
p24918
Nsa(dp24919
S'description'
p24920
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24921
sS'cpp_type'
p24922
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24923
sS'default'
p24924
g3
sS'name'
p24925
S'control_tags'
p24926
sS'required'
p24927
I00
sS'group_name'
p24928
S'Advanced'
p24929
sa(dp24930
S'description'
p24931
S'Disable the function parser algebraic optimizer\n'
p24932
sS'cpp_type'
p24933
S'bool'
p24934
sS'default'
p24935
S'0'
p24936
sS'name'
p24937
S'disable_fpoptimizer'
p24938
sS'required'
p24939
I00
sS'group_name'
p24940
S'Advanced'
p24941
sa(dp24942
S'description'
p24943
S'Set the enabled status of the MooseObject.\n'
p24944
sS'cpp_type'
p24945
S'bool'
p24946
sS'default'
p24947
S'1'
p24948
sS'name'
p24949
S'enable'
p24950
sS'required'
p24951
I00
sS'group_name'
p24952
S'Advanced'
p24953
sa(dp24954
S'description'
p24955
S'Enable cacheing of function derivatives for faster startup time\n'
p24956
sS'cpp_type'
p24957
S'bool'
p24958
sS'default'
p24959
S'1'
p24960
sS'name'
p24961
S'enable_ad_cache'
p24962
sS'required'
p24963
I00
sS'group_name'
p24964
S'Advanced'
p24965
sa(dp24966
S'description'
p24967
S'Enable automatic immediate optimization of derivatives\n'
p24968
sS'cpp_type'
p24969
S'bool'
p24970
sS'default'
p24971
S'1'
p24972
sS'name'
p24973
S'enable_auto_optimize'
p24974
sS'required'
p24975
I00
sS'group_name'
p24976
S'Advanced'
p24977
sa(dp24978
S'description'
p24979
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p24980
sS'cpp_type'
p24981
S'bool'
p24982
sS'default'
p24983
S'1'
p24984
sS'name'
p24985
S'enable_jit'
p24986
sS'required'
p24987
I00
sS'group_name'
p24988
S'Advanced'
p24989
sa(dp24990
S'name'
p24991
S'execute_on'
p24992
sS'cpp_type'
p24993
S'MultiMooseEnum'
p24994
sS'default'
p24995
S'LINEAR'
p24996
sS'description'
p24997
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24998
sS'required'
p24999
I00
sS'options'
p25000
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25001
sS'group_name'
p25002
Nsa(dp25003
S'description'
p25004
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p25005
sS'cpp_type'
p25006
S'bool'
p25007
sS'default'
p25008
S'0'
p25009
sS'name'
p25010
S'fail_on_evalerror'
p25011
sS'required'
p25012
I00
sS'group_name'
p25013
S'Advanced'
p25014
sa(dp25015
S'description'
p25016
S'function expression\n'
p25017
sS'cpp_type'
p25018
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25019
sS'default'
p25020
g3
sS'name'
p25021
S'function'
p25022
sS'required'
p25023
I01
sS'group_name'
p25024
Nsa(dp25025
S'description'
p25026
S'The seed for the master random number generator\n'
p25027
sS'cpp_type'
p25028
S'unsigned int'
p25029
sS'default'
p25030
S'0'
p25031
sS'name'
p25032
S'seed'
p25033
sS'required'
p25034
I00
sS'group_name'
p25035
S'Advanced'
p25036
sa(dp25037
S'description'
p25038
g3
sS'cpp_type'
p25039
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25040
sS'default'
p25041
S'ParsedAux'
p25042
sS'name'
p25043
S'type'
p25044
sS'required'
p25045
I00
sS'group_name'
p25046
Nsa(dp25047
S'description'
p25048
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25049
sS'cpp_type'
p25050
S'bool'
p25051
sS'default'
p25052
S'0'
p25053
sS'name'
p25054
S'use_displaced_mesh'
p25055
sS'required'
p25056
I00
sS'group_name'
p25057
S'Advanced'
p25058
sa(dp25059
S'description'
p25060
S'The name of the variable that this object applies to\n'
p25061
sS'cpp_type'
p25062
S'AuxVariableName'
p25063
sS'default'
p25064
g3
sS'name'
p25065
S'variable'
p25066
sS'required'
p25067
I01
sS'group_name'
p25068
NsasS'name'
p25069
S'/Bounds/ParsedAux'
p25070
sa(dp25071
S'description'
p25072
g3
sS'subblocks'
p25073
NsS'parameters'
p25074
(lp25075
(dp25076
S'description'
p25077
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25078
sS'cpp_type'
p25079
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25080
sS'default'
p25081
g3
sS'name'
p25082
S'block'
p25083
sS'required'
p25084
I00
sS'group_name'
p25085
Nsa(dp25086
S'description'
p25087
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25088
sS'cpp_type'
p25089
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25090
sS'default'
p25091
g3
sS'name'
p25092
S'boundary'
p25093
sS'required'
p25094
I00
sS'group_name'
p25095
Nsa(dp25096
S'description'
p25097
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25098
sS'cpp_type'
p25099
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25100
sS'default'
p25101
g3
sS'name'
p25102
S'control_tags'
p25103
sS'required'
p25104
I00
sS'group_name'
p25105
S'Advanced'
p25106
sa(dp25107
S'description'
p25108
S'Set the enabled status of the MooseObject.\n'
p25109
sS'cpp_type'
p25110
S'bool'
p25111
sS'default'
p25112
S'1'
p25113
sS'name'
p25114
S'enable'
p25115
sS'required'
p25116
I00
sS'group_name'
p25117
S'Advanced'
p25118
sa(dp25119
S'name'
p25120
S'execute_on'
p25121
sS'cpp_type'
p25122
S'MultiMooseEnum'
p25123
sS'default'
p25124
S'LINEAR'
p25125
sS'description'
p25126
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25127
sS'required'
p25128
I00
sS'options'
p25129
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25130
sS'group_name'
p25131
Nsa(dp25132
S'description'
p25133
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p25134
sS'cpp_type'
p25135
S'double'
p25136
sS'default'
p25137
g3
sS'name'
p25138
S'normal_smoothing_distance'
p25139
sS'required'
p25140
I00
sS'group_name'
p25141
Nsa(dp25142
S'description'
p25143
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p25144
sS'cpp_type'
p25145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25146
sS'default'
p25147
g3
sS'name'
p25148
S'normal_smoothing_method'
p25149
sS'required'
p25150
I00
sS'group_name'
p25151
Nsa(dp25152
S'name'
p25153
S'order'
p25154
sS'cpp_type'
p25155
S'MooseEnum'
p25156
sS'default'
p25157
S'FIRST'
p25158
sS'description'
p25159
S'The finite element order\n'
p25160
sS'required'
p25161
I00
sS'options'
p25162
S'FIRST SECOND THIRD FOURTH'
p25163
sS'group_name'
p25164
Nsa(dp25165
S'description'
p25166
S'The boundary to be penetrated\n'
p25167
sS'cpp_type'
p25168
S'BoundaryName'
p25169
sS'default'
p25170
g3
sS'name'
p25171
S'paired_boundary'
p25172
sS'required'
p25173
I01
sS'group_name'
p25174
Nsa(dp25175
S'name'
p25176
S'quantity'
p25177
sS'cpp_type'
p25178
S'MooseEnum'
p25179
sS'default'
p25180
S'distance'
p25181
sS'description'
p25182
S'The quantity to recover from the available penetration information\n'
p25183
sS'required'
p25184
I00
sS'options'
p25185
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p25186
sS'group_name'
p25187
Nsa(dp25188
S'description'
p25189
S'The seed for the master random number generator\n'
p25190
sS'cpp_type'
p25191
S'unsigned int'
p25192
sS'default'
p25193
S'0'
p25194
sS'name'
p25195
S'seed'
p25196
sS'required'
p25197
I00
sS'group_name'
p25198
S'Advanced'
p25199
sa(dp25200
S'description'
p25201
S'Tangential distance to extend edges of contact surfaces\n'
p25202
sS'cpp_type'
p25203
S'double'
p25204
sS'default'
p25205
g3
sS'name'
p25206
S'tangential_tolerance'
p25207
sS'required'
p25208
I00
sS'group_name'
p25209
Nsa(dp25210
S'description'
p25211
g3
sS'cpp_type'
p25212
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25213
sS'default'
p25214
S'PenetrationAux'
p25215
sS'name'
p25216
S'type'
p25217
sS'required'
p25218
I00
sS'group_name'
p25219
Nsa(dp25220
S'description'
p25221
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25222
sS'cpp_type'
p25223
S'bool'
p25224
sS'default'
p25225
S'1'
p25226
sS'name'
p25227
S'use_displaced_mesh'
p25228
sS'required'
p25229
I00
sS'group_name'
p25230
S'Advanced'
p25231
sa(dp25232
S'description'
p25233
S'The name of the variable that this object applies to\n'
p25234
sS'cpp_type'
p25235
S'AuxVariableName'
p25236
sS'default'
p25237
g3
sS'name'
p25238
S'variable'
p25239
sS'required'
p25240
I01
sS'group_name'
p25241
NsasS'name'
p25242
S'/Bounds/PenetrationAux'
p25243
sa(dp25244
S'description'
p25245
g3
sS'subblocks'
p25246
NsS'parameters'
p25247
(lp25248
(dp25249
S'description'
p25250
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25251
sS'cpp_type'
p25252
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25253
sS'default'
p25254
g3
sS'name'
p25255
S'block'
p25256
sS'required'
p25257
I00
sS'group_name'
p25258
Nsa(dp25259
S'description'
p25260
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25261
sS'cpp_type'
p25262
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25263
sS'default'
p25264
g3
sS'name'
p25265
S'boundary'
p25266
sS'required'
p25267
I00
sS'group_name'
p25268
Nsa(dp25269
S'description'
p25270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25271
sS'cpp_type'
p25272
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25273
sS'default'
p25274
g3
sS'name'
p25275
S'control_tags'
p25276
sS'required'
p25277
I00
sS'group_name'
p25278
S'Advanced'
p25279
sa(dp25280
S'description'
p25281
S'Set the enabled status of the MooseObject.\n'
p25282
sS'cpp_type'
p25283
S'bool'
p25284
sS'default'
p25285
S'1'
p25286
sS'name'
p25287
S'enable'
p25288
sS'required'
p25289
I00
sS'group_name'
p25290
S'Advanced'
p25291
sa(dp25292
S'name'
p25293
S'execute_on'
p25294
sS'cpp_type'
p25295
S'MultiMooseEnum'
p25296
sS'default'
p25297
S'LINEAR'
p25298
sS'description'
p25299
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25300
sS'required'
p25301
I00
sS'options'
p25302
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25303
sS'group_name'
p25304
Nsa(dp25305
S'description'
p25306
S'The seed for the master random number generator\n'
p25307
sS'cpp_type'
p25308
S'unsigned int'
p25309
sS'default'
p25310
S'0'
p25311
sS'name'
p25312
S'seed'
p25313
sS'required'
p25314
I00
sS'group_name'
p25315
S'Advanced'
p25316
sa(dp25317
S'description'
p25318
g3
sS'cpp_type'
p25319
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25320
sS'default'
p25321
S'ProcessorIDAux'
p25322
sS'name'
p25323
S'type'
p25324
sS'required'
p25325
I00
sS'group_name'
p25326
Nsa(dp25327
S'description'
p25328
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25329
sS'cpp_type'
p25330
S'bool'
p25331
sS'default'
p25332
S'0'
p25333
sS'name'
p25334
S'use_displaced_mesh'
p25335
sS'required'
p25336
I00
sS'group_name'
p25337
S'Advanced'
p25338
sa(dp25339
S'description'
p25340
S'The name of the variable that this object applies to\n'
p25341
sS'cpp_type'
p25342
S'AuxVariableName'
p25343
sS'default'
p25344
g3
sS'name'
p25345
S'variable'
p25346
sS'required'
p25347
I01
sS'group_name'
p25348
NsasS'name'
p25349
S'/Bounds/ProcessorIDAux'
p25350
sa(dp25351
S'description'
p25352
g3
sS'subblocks'
p25353
NsS'parameters'
p25354
(lp25355
(dp25356
S'description'
p25357
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25358
sS'cpp_type'
p25359
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25360
sS'default'
p25361
g3
sS'name'
p25362
S'block'
p25363
sS'required'
p25364
I00
sS'group_name'
p25365
Nsa(dp25366
S'description'
p25367
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25368
sS'cpp_type'
p25369
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25370
sS'default'
p25371
g3
sS'name'
p25372
S'boundary'
p25373
sS'required'
p25374
I00
sS'group_name'
p25375
Nsa(dp25376
S'description'
p25377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25378
sS'cpp_type'
p25379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25380
sS'default'
p25381
g3
sS'name'
p25382
S'control_tags'
p25383
sS'required'
p25384
I00
sS'group_name'
p25385
S'Advanced'
p25386
sa(dp25387
S'description'
p25388
S'The downstairs of the quotient variable\n'
p25389
sS'cpp_type'
p25390
S'std::vector<VariableName>'
p25391
sS'default'
p25392
g3
sS'name'
p25393
S'denominator'
p25394
sS'required'
p25395
I00
sS'group_name'
p25396
Nsa(dp25397
S'description'
p25398
S'Set the enabled status of the MooseObject.\n'
p25399
sS'cpp_type'
p25400
S'bool'
p25401
sS'default'
p25402
S'1'
p25403
sS'name'
p25404
S'enable'
p25405
sS'required'
p25406
I00
sS'group_name'
p25407
S'Advanced'
p25408
sa(dp25409
S'name'
p25410
S'execute_on'
p25411
sS'cpp_type'
p25412
S'MultiMooseEnum'
p25413
sS'default'
p25414
S'LINEAR'
p25415
sS'description'
p25416
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25417
sS'required'
p25418
I00
sS'options'
p25419
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25420
sS'group_name'
p25421
Nsa(dp25422
S'description'
p25423
S'The upstairs of the quotient variable\n'
p25424
sS'cpp_type'
p25425
S'std::vector<VariableName>'
p25426
sS'default'
p25427
g3
sS'name'
p25428
S'numerator'
p25429
sS'required'
p25430
I00
sS'group_name'
p25431
Nsa(dp25432
S'description'
p25433
S'The seed for the master random number generator\n'
p25434
sS'cpp_type'
p25435
S'unsigned int'
p25436
sS'default'
p25437
S'0'
p25438
sS'name'
p25439
S'seed'
p25440
sS'required'
p25441
I00
sS'group_name'
p25442
S'Advanced'
p25443
sa(dp25444
S'description'
p25445
g3
sS'cpp_type'
p25446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25447
sS'default'
p25448
S'QuotientAux'
p25449
sS'name'
p25450
S'type'
p25451
sS'required'
p25452
I00
sS'group_name'
p25453
Nsa(dp25454
S'description'
p25455
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25456
sS'cpp_type'
p25457
S'bool'
p25458
sS'default'
p25459
S'0'
p25460
sS'name'
p25461
S'use_displaced_mesh'
p25462
sS'required'
p25463
I00
sS'group_name'
p25464
S'Advanced'
p25465
sa(dp25466
S'description'
p25467
S'The name of the variable that this object applies to\n'
p25468
sS'cpp_type'
p25469
S'AuxVariableName'
p25470
sS'default'
p25471
g3
sS'name'
p25472
S'variable'
p25473
sS'required'
p25474
I01
sS'group_name'
p25475
NsasS'name'
p25476
S'/Bounds/QuotientAux'
p25477
sa(dp25478
S'description'
p25479
S'Compute the radial component of the displacement vector for cylindrical models.\n'
p25480
sS'subblocks'
p25481
NsS'parameters'
p25482
(lp25483
(dp25484
S'description'
p25485
S'Vector defining direction of cylindrical axis (3D Cartesian models)\n'
p25486
sS'cpp_type'
p25487
S'libMesh::VectorValue<double>'
p25488
sS'default'
p25489
g3
sS'name'
p25490
S'axis_vector'
p25491
sS'required'
p25492
I00
sS'group_name'
p25493
Nsa(dp25494
S'description'
p25495
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25496
sS'cpp_type'
p25497
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25498
sS'default'
p25499
g3
sS'name'
p25500
S'block'
p25501
sS'required'
p25502
I00
sS'group_name'
p25503
Nsa(dp25504
S'description'
p25505
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25506
sS'cpp_type'
p25507
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25508
sS'default'
p25509
g3
sS'name'
p25510
S'boundary'
p25511
sS'required'
p25512
I00
sS'group_name'
p25513
Nsa(dp25514
S'description'
p25515
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25516
sS'cpp_type'
p25517
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25518
sS'default'
p25519
g3
sS'name'
p25520
S'control_tags'
p25521
sS'required'
p25522
I00
sS'group_name'
p25523
S'Advanced'
p25524
sa(dp25525
S'description'
p25526
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p25527
sS'cpp_type'
p25528
S'std::vector<VariableName>'
p25529
sS'default'
p25530
g3
sS'name'
p25531
S'displacements'
p25532
sS'required'
p25533
I01
sS'group_name'
p25534
Nsa(dp25535
S'description'
p25536
S'Set the enabled status of the MooseObject.\n'
p25537
sS'cpp_type'
p25538
S'bool'
p25539
sS'default'
p25540
S'1'
p25541
sS'name'
p25542
S'enable'
p25543
sS'required'
p25544
I00
sS'group_name'
p25545
S'Advanced'
p25546
sa(dp25547
S'name'
p25548
S'execute_on'
p25549
sS'cpp_type'
p25550
S'MultiMooseEnum'
p25551
sS'default'
p25552
S'LINEAR'
p25553
sS'description'
p25554
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25555
sS'required'
p25556
I00
sS'options'
p25557
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25558
sS'group_name'
p25559
Nsa(dp25560
S'description'
p25561
S'Origin of cylinder axis of rotation for 2D and 3D Cartesian models\n'
p25562
sS'cpp_type'
p25563
S'libMesh::VectorValue<double>'
p25564
sS'default'
p25565
g3
sS'name'
p25566
S'origin'
p25567
sS'required'
p25568
I00
sS'group_name'
p25569
Nsa(dp25570
S'description'
p25571
S'The seed for the master random number generator\n'
p25572
sS'cpp_type'
p25573
S'unsigned int'
p25574
sS'default'
p25575
S'0'
p25576
sS'name'
p25577
S'seed'
p25578
sS'required'
p25579
I00
sS'group_name'
p25580
S'Advanced'
p25581
sa(dp25582
S'description'
p25583
g3
sS'cpp_type'
p25584
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25585
sS'default'
p25586
S'RadialDisplacementCylinderAux'
p25587
sS'name'
p25588
S'type'
p25589
sS'required'
p25590
I00
sS'group_name'
p25591
Nsa(dp25592
S'description'
p25593
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25594
sS'cpp_type'
p25595
S'bool'
p25596
sS'default'
p25597
S'0'
p25598
sS'name'
p25599
S'use_displaced_mesh'
p25600
sS'required'
p25601
I00
sS'group_name'
p25602
S'Advanced'
p25603
sa(dp25604
S'description'
p25605
S'The name of the variable that this object applies to\n'
p25606
sS'cpp_type'
p25607
S'AuxVariableName'
p25608
sS'default'
p25609
g3
sS'name'
p25610
S'variable'
p25611
sS'required'
p25612
I01
sS'group_name'
p25613
NsasS'name'
p25614
S'/Bounds/RadialDisplacementCylinderAux'
p25615
sa(dp25616
S'description'
p25617
S'Compute the radial component of the displacement vector for spherical models.\n'
p25618
sS'subblocks'
p25619
NsS'parameters'
p25620
(lp25621
(dp25622
S'description'
p25623
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25624
sS'cpp_type'
p25625
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25626
sS'default'
p25627
g3
sS'name'
p25628
S'block'
p25629
sS'required'
p25630
I00
sS'group_name'
p25631
Nsa(dp25632
S'description'
p25633
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25634
sS'cpp_type'
p25635
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25636
sS'default'
p25637
g3
sS'name'
p25638
S'boundary'
p25639
sS'required'
p25640
I00
sS'group_name'
p25641
Nsa(dp25642
S'description'
p25643
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25644
sS'cpp_type'
p25645
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25646
sS'default'
p25647
g3
sS'name'
p25648
S'control_tags'
p25649
sS'required'
p25650
I00
sS'group_name'
p25651
S'Advanced'
p25652
sa(dp25653
S'description'
p25654
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p25655
sS'cpp_type'
p25656
S'std::vector<VariableName>'
p25657
sS'default'
p25658
g3
sS'name'
p25659
S'displacements'
p25660
sS'required'
p25661
I01
sS'group_name'
p25662
Nsa(dp25663
S'description'
p25664
S'Set the enabled status of the MooseObject.\n'
p25665
sS'cpp_type'
p25666
S'bool'
p25667
sS'default'
p25668
S'1'
p25669
sS'name'
p25670
S'enable'
p25671
sS'required'
p25672
I00
sS'group_name'
p25673
S'Advanced'
p25674
sa(dp25675
S'name'
p25676
S'execute_on'
p25677
sS'cpp_type'
p25678
S'MultiMooseEnum'
p25679
sS'default'
p25680
S'LINEAR'
p25681
sS'description'
p25682
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25683
sS'required'
p25684
I00
sS'options'
p25685
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25686
sS'group_name'
p25687
Nsa(dp25688
S'description'
p25689
S'Sphere origin for 3D Cartesian and 2D axisymmetric models\n'
p25690
sS'cpp_type'
p25691
S'libMesh::VectorValue<double>'
p25692
sS'default'
p25693
g3
sS'name'
p25694
S'origin'
p25695
sS'required'
p25696
I00
sS'group_name'
p25697
Nsa(dp25698
S'description'
p25699
S'The seed for the master random number generator\n'
p25700
sS'cpp_type'
p25701
S'unsigned int'
p25702
sS'default'
p25703
S'0'
p25704
sS'name'
p25705
S'seed'
p25706
sS'required'
p25707
I00
sS'group_name'
p25708
S'Advanced'
p25709
sa(dp25710
S'description'
p25711
g3
sS'cpp_type'
p25712
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25713
sS'default'
p25714
S'RadialDisplacementSphereAux'
p25715
sS'name'
p25716
S'type'
p25717
sS'required'
p25718
I00
sS'group_name'
p25719
Nsa(dp25720
S'description'
p25721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25722
sS'cpp_type'
p25723
S'bool'
p25724
sS'default'
p25725
S'0'
p25726
sS'name'
p25727
S'use_displaced_mesh'
p25728
sS'required'
p25729
I00
sS'group_name'
p25730
S'Advanced'
p25731
sa(dp25732
S'description'
p25733
S'The name of the variable that this object applies to\n'
p25734
sS'cpp_type'
p25735
S'AuxVariableName'
p25736
sS'default'
p25737
g3
sS'name'
p25738
S'variable'
p25739
sS'required'
p25740
I01
sS'group_name'
p25741
NsasS'name'
p25742
S'/Bounds/RadialDisplacementSphereAux'
p25743
sa(dp25744
S'description'
p25745
S'Access a component of a RankFourTensor\n'
p25746
sS'subblocks'
p25747
NsS'parameters'
p25748
(lp25749
(dp25750
S'description'
p25751
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25752
sS'cpp_type'
p25753
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25754
sS'default'
p25755
g3
sS'name'
p25756
S'block'
p25757
sS'required'
p25758
I00
sS'group_name'
p25759
Nsa(dp25760
S'description'
p25761
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25762
sS'cpp_type'
p25763
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25764
sS'default'
p25765
g3
sS'name'
p25766
S'boundary'
p25767
sS'required'
p25768
I00
sS'group_name'
p25769
Nsa(dp25770
S'description'
p25771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25772
sS'cpp_type'
p25773
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25774
sS'default'
p25775
g3
sS'name'
p25776
S'control_tags'
p25777
sS'required'
p25778
I00
sS'group_name'
p25779
S'Advanced'
p25780
sa(dp25781
S'description'
p25782
S'Set the enabled status of the MooseObject.\n'
p25783
sS'cpp_type'
p25784
S'bool'
p25785
sS'default'
p25786
S'1'
p25787
sS'name'
p25788
S'enable'
p25789
sS'required'
p25790
I00
sS'group_name'
p25791
S'Advanced'
p25792
sa(dp25793
S'name'
p25794
S'execute_on'
p25795
sS'cpp_type'
p25796
S'MultiMooseEnum'
p25797
sS'default'
p25798
S'LINEAR'
p25799
sS'description'
p25800
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25801
sS'required'
p25802
I00
sS'options'
p25803
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25804
sS'group_name'
p25805
Nsa(dp25806
S'description'
p25807
S'The index i of ijkl for the tensor to output (0, 1, 2)\n'
p25808
sS'cpp_type'
p25809
S'unsigned int'
p25810
sS'default'
p25811
g3
sS'name'
p25812
S'index_i'
p25813
sS'required'
p25814
I01
sS'group_name'
p25815
Nsa(dp25816
S'description'
p25817
S'The index j of ijkl for the tensor to output (0, 1, 2)\n'
p25818
sS'cpp_type'
p25819
S'unsigned int'
p25820
sS'default'
p25821
g3
sS'name'
p25822
S'index_j'
p25823
sS'required'
p25824
I01
sS'group_name'
p25825
Nsa(dp25826
S'description'
p25827
S'The index k of ijkl for the tensor to output (0, 1, 2)\n'
p25828
sS'cpp_type'
p25829
S'unsigned int'
p25830
sS'default'
p25831
g3
sS'name'
p25832
S'index_k'
p25833
sS'required'
p25834
I01
sS'group_name'
p25835
Nsa(dp25836
S'description'
p25837
S'The index l of ijkl for the tensor to output (0, 1, 2)\n'
p25838
sS'cpp_type'
p25839
S'unsigned int'
p25840
sS'default'
p25841
g3
sS'name'
p25842
S'index_l'
p25843
sS'required'
p25844
I01
sS'group_name'
p25845
Nsa(dp25846
S'description'
p25847
S'The rank four material tensor name\n'
p25848
sS'cpp_type'
p25849
S'MaterialPropertyName'
p25850
sS'default'
p25851
g3
sS'name'
p25852
S'rank_four_tensor'
p25853
sS'required'
p25854
I01
sS'group_name'
p25855
Nsa(dp25856
S'description'
p25857
S'The seed for the master random number generator\n'
p25858
sS'cpp_type'
p25859
S'unsigned int'
p25860
sS'default'
p25861
S'0'
p25862
sS'name'
p25863
S'seed'
p25864
sS'required'
p25865
I00
sS'group_name'
p25866
S'Advanced'
p25867
sa(dp25868
S'description'
p25869
g3
sS'cpp_type'
p25870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25871
sS'default'
p25872
S'RankFourAux'
p25873
sS'name'
p25874
S'type'
p25875
sS'required'
p25876
I00
sS'group_name'
p25877
Nsa(dp25878
S'description'
p25879
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25880
sS'cpp_type'
p25881
S'bool'
p25882
sS'default'
p25883
S'0'
p25884
sS'name'
p25885
S'use_displaced_mesh'
p25886
sS'required'
p25887
I00
sS'group_name'
p25888
S'Advanced'
p25889
sa(dp25890
S'description'
p25891
S'The name of the variable that this object applies to\n'
p25892
sS'cpp_type'
p25893
S'AuxVariableName'
p25894
sS'default'
p25895
g3
sS'name'
p25896
S'variable'
p25897
sS'required'
p25898
I01
sS'group_name'
p25899
NsasS'name'
p25900
S'/Bounds/RankFourAux'
p25901
sa(dp25902
S'description'
p25903
S'Access a component of a RankTwoTensor\n'
p25904
sS'subblocks'
p25905
NsS'parameters'
p25906
(lp25907
(dp25908
S'description'
p25909
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25910
sS'cpp_type'
p25911
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25912
sS'default'
p25913
g3
sS'name'
p25914
S'block'
p25915
sS'required'
p25916
I00
sS'group_name'
p25917
Nsa(dp25918
S'description'
p25919
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25920
sS'cpp_type'
p25921
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25922
sS'default'
p25923
g3
sS'name'
p25924
S'boundary'
p25925
sS'required'
p25926
I00
sS'group_name'
p25927
Nsa(dp25928
S'description'
p25929
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25930
sS'cpp_type'
p25931
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25932
sS'default'
p25933
g3
sS'name'
p25934
S'control_tags'
p25935
sS'required'
p25936
I00
sS'group_name'
p25937
S'Advanced'
p25938
sa(dp25939
S'description'
p25940
S'Set the enabled status of the MooseObject.\n'
p25941
sS'cpp_type'
p25942
S'bool'
p25943
sS'default'
p25944
S'1'
p25945
sS'name'
p25946
S'enable'
p25947
sS'required'
p25948
I00
sS'group_name'
p25949
S'Advanced'
p25950
sa(dp25951
S'name'
p25952
S'execute_on'
p25953
sS'cpp_type'
p25954
S'MultiMooseEnum'
p25955
sS'default'
p25956
S'LINEAR'
p25957
sS'description'
p25958
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25959
sS'required'
p25960
I00
sS'options'
p25961
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25962
sS'group_name'
p25963
Nsa(dp25964
S'description'
p25965
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p25966
sS'cpp_type'
p25967
S'unsigned int'
p25968
sS'default'
p25969
g3
sS'name'
p25970
S'index_i'
p25971
sS'required'
p25972
I01
sS'group_name'
p25973
Nsa(dp25974
S'description'
p25975
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p25976
sS'cpp_type'
p25977
S'unsigned int'
p25978
sS'default'
p25979
g3
sS'name'
p25980
S'index_j'
p25981
sS'required'
p25982
I01
sS'group_name'
p25983
Nsa(dp25984
S'description'
p25985
S'The rank two material tensor name\n'
p25986
sS'cpp_type'
p25987
S'MaterialPropertyName'
p25988
sS'default'
p25989
g3
sS'name'
p25990
S'rank_two_tensor'
p25991
sS'required'
p25992
I01
sS'group_name'
p25993
Nsa(dp25994
S'description'
p25995
S'The seed for the master random number generator\n'
p25996
sS'cpp_type'
p25997
S'unsigned int'
p25998
sS'default'
p25999
S'0'
p26000
sS'name'
p26001
S'seed'
p26002
sS'required'
p26003
I00
sS'group_name'
p26004
S'Advanced'
p26005
sa(dp26006
S'description'
p26007
S'Evaluate the tensor at this specific quadpoint\n'
p26008
sS'cpp_type'
p26009
S'unsigned int'
p26010
sS'default'
p26011
g3
sS'name'
p26012
S'selected_qp'
p26013
sS'required'
p26014
I00
sS'group_name'
p26015
S'Advanced'
p26016
sa(dp26017
S'description'
p26018
g3
sS'cpp_type'
p26019
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26020
sS'default'
p26021
S'RankTwoAux'
p26022
sS'name'
p26023
S'type'
p26024
sS'required'
p26025
I00
sS'group_name'
p26026
Nsa(dp26027
S'description'
p26028
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26029
sS'cpp_type'
p26030
S'bool'
p26031
sS'default'
p26032
S'0'
p26033
sS'name'
p26034
S'use_displaced_mesh'
p26035
sS'required'
p26036
I00
sS'group_name'
p26037
S'Advanced'
p26038
sa(dp26039
S'description'
p26040
S'The name of the variable that this object applies to\n'
p26041
sS'cpp_type'
p26042
S'AuxVariableName'
p26043
sS'default'
p26044
g3
sS'name'
p26045
S'variable'
p26046
sS'required'
p26047
I01
sS'group_name'
p26048
NsasS'name'
p26049
S'/Bounds/RankTwoAux'
p26050
sa(dp26051
S'description'
p26052
S'Compute a scalar property of a RankTwoTensor\n'
p26053
sS'subblocks'
p26054
NsS'parameters'
p26055
(lp26056
(dp26057
S'description'
p26058
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26059
sS'cpp_type'
p26060
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26061
sS'default'
p26062
g3
sS'name'
p26063
S'block'
p26064
sS'required'
p26065
I00
sS'group_name'
p26066
Nsa(dp26067
S'description'
p26068
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26069
sS'cpp_type'
p26070
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26071
sS'default'
p26072
g3
sS'name'
p26073
S'boundary'
p26074
sS'required'
p26075
I00
sS'group_name'
p26076
Nsa(dp26077
S'description'
p26078
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26079
sS'cpp_type'
p26080
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26081
sS'default'
p26082
g3
sS'name'
p26083
S'control_tags'
p26084
sS'required'
p26085
I00
sS'group_name'
p26086
S'Advanced'
p26087
sa(dp26088
S'description'
p26089
S'Direction vector\n'
p26090
sS'cpp_type'
p26091
S'libMesh::Point'
p26092
sS'default'
p26093
S'0 0 1'
p26094
sS'name'
p26095
S'direction'
p26096
sS'required'
p26097
I00
sS'group_name'
p26098
Nsa(dp26099
S'description'
p26100
S'Set the enabled status of the MooseObject.\n'
p26101
sS'cpp_type'
p26102
S'bool'
p26103
sS'default'
p26104
S'1'
p26105
sS'name'
p26106
S'enable'
p26107
sS'required'
p26108
I00
sS'group_name'
p26109
S'Advanced'
p26110
sa(dp26111
S'name'
p26112
S'execute_on'
p26113
sS'cpp_type'
p26114
S'MultiMooseEnum'
p26115
sS'default'
p26116
S'LINEAR'
p26117
sS'description'
p26118
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26119
sS'required'
p26120
I00
sS'options'
p26121
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26122
sS'group_name'
p26123
Nsa(dp26124
S'description'
p26125
S'Start point for axis used to calculate some cylinderical material tensor quantities\n'
p26126
sS'cpp_type'
p26127
S'libMesh::Point'
p26128
sS'default'
p26129
S'0 0 0'
p26130
sS'name'
p26131
S'point1'
p26132
sS'required'
p26133
I00
sS'group_name'
p26134
Nsa(dp26135
S'description'
p26136
S'End point for axis used to calculate some material tensor quantities\n'
p26137
sS'cpp_type'
p26138
S'libMesh::Point'
p26139
sS'default'
p26140
S'0 1 0'
p26141
sS'name'
p26142
S'point2'
p26143
sS'required'
p26144
I00
sS'group_name'
p26145
Nsa(dp26146
S'description'
p26147
S'The rank two material tensor name\n'
p26148
sS'cpp_type'
p26149
S'MaterialPropertyName'
p26150
sS'default'
p26151
g3
sS'name'
p26152
S'rank_two_tensor'
p26153
sS'required'
p26154
I01
sS'group_name'
p26155
Nsa(dp26156
S'name'
p26157
S'scalar_type'
p26158
sS'cpp_type'
p26159
S'MooseEnum'
p26160
sS'default'
p26161
g3
sS'description'
p26162
S'Type of scalar output\n'
p26163
sS'required'
p26164
I00
sS'options'
p26165
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction'
p26166
sS'group_name'
p26167
Nsa(dp26168
S'description'
p26169
S'The seed for the master random number generator\n'
p26170
sS'cpp_type'
p26171
S'unsigned int'
p26172
sS'default'
p26173
S'0'
p26174
sS'name'
p26175
S'seed'
p26176
sS'required'
p26177
I00
sS'group_name'
p26178
S'Advanced'
p26179
sa(dp26180
S'description'
p26181
S'Evaluate the tensor at this quadpoint.  This option only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p26182
sS'cpp_type'
p26183
S'unsigned int'
p26184
sS'default'
p26185
g3
sS'name'
p26186
S'selected_qp'
p26187
sS'required'
p26188
I00
sS'group_name'
p26189
S'Advanced'
p26190
sa(dp26191
S'description'
p26192
g3
sS'cpp_type'
p26193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26194
sS'default'
p26195
S'RankTwoScalarAux'
p26196
sS'name'
p26197
S'type'
p26198
sS'required'
p26199
I00
sS'group_name'
p26200
Nsa(dp26201
S'description'
p26202
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26203
sS'cpp_type'
p26204
S'bool'
p26205
sS'default'
p26206
S'0'
p26207
sS'name'
p26208
S'use_displaced_mesh'
p26209
sS'required'
p26210
I00
sS'group_name'
p26211
S'Advanced'
p26212
sa(dp26213
S'description'
p26214
S'The name of the variable that this object applies to\n'
p26215
sS'cpp_type'
p26216
S'AuxVariableName'
p26217
sS'default'
p26218
g3
sS'name'
p26219
S'variable'
p26220
sS'required'
p26221
I01
sS'group_name'
p26222
NsasS'name'
p26223
S'/Bounds/RankTwoScalarAux'
p26224
sa(dp26225
S'description'
p26226
g3
sS'subblocks'
p26227
NsS'parameters'
p26228
(lp26229
(dp26230
S'description'
p26231
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26232
sS'cpp_type'
p26233
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26234
sS'default'
p26235
g3
sS'name'
p26236
S'block'
p26237
sS'required'
p26238
I00
sS'group_name'
p26239
Nsa(dp26240
S'description'
p26241
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26242
sS'cpp_type'
p26243
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26244
sS'default'
p26245
g3
sS'name'
p26246
S'boundary'
p26247
sS'required'
p26248
I00
sS'group_name'
p26249
Nsa(dp26250
S'description'
p26251
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26252
sS'cpp_type'
p26253
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26254
sS'default'
p26255
g3
sS'name'
p26256
S'control_tags'
p26257
sS'required'
p26258
I00
sS'group_name'
p26259
S'Advanced'
p26260
sa(dp26261
S'description'
p26262
S'Set the enabled status of the MooseObject.\n'
p26263
sS'cpp_type'
p26264
S'bool'
p26265
sS'default'
p26266
S'1'
p26267
sS'name'
p26268
S'enable'
p26269
sS'required'
p26270
I00
sS'group_name'
p26271
S'Advanced'
p26272
sa(dp26273
S'name'
p26274
S'execute_on'
p26275
sS'cpp_type'
p26276
S'MultiMooseEnum'
p26277
sS'default'
p26278
S'LINEAR'
p26279
sS'description'
p26280
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26281
sS'required'
p26282
I00
sS'options'
p26283
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26284
sS'group_name'
p26285
Nsa(dp26286
S'description'
p26287
S'The seed for the master random number generator\n'
p26288
sS'cpp_type'
p26289
S'unsigned int'
p26290
sS'default'
p26291
S'0'
p26292
sS'name'
p26293
S'seed'
p26294
sS'required'
p26295
I00
sS'group_name'
p26296
S'Advanced'
p26297
sa(dp26298
S'description'
p26299
g3
sS'cpp_type'
p26300
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26301
sS'default'
p26302
S'SelfAux'
p26303
sS'name'
p26304
S'type'
p26305
sS'required'
p26306
I00
sS'group_name'
p26307
Nsa(dp26308
S'description'
p26309
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26310
sS'cpp_type'
p26311
S'bool'
p26312
sS'default'
p26313
S'0'
p26314
sS'name'
p26315
S'use_displaced_mesh'
p26316
sS'required'
p26317
I00
sS'group_name'
p26318
S'Advanced'
p26319
sa(dp26320
S'description'
p26321
S'The name of the variable that this object applies to\n'
p26322
sS'cpp_type'
p26323
S'AuxVariableName'
p26324
sS'default'
p26325
g3
sS'name'
p26326
S'variable'
p26327
sS'required'
p26328
I01
sS'group_name'
p26329
NsasS'name'
p26330
S'/Bounds/SelfAux'
p26331
sa(dp26332
S'description'
p26333
g3
sS'subblocks'
p26334
NsS'parameters'
p26335
(lp26336
(dp26337
S'description'
p26338
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p26339
sS'cpp_type'
p26340
S'double'
p26341
sS'default'
p26342
S'0'
p26343
sS'name'
p26344
S'add_factor'
p26345
sS'required'
p26346
I00
sS'group_name'
p26347
Nsa(dp26348
S'description'
p26349
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26350
sS'cpp_type'
p26351
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26352
sS'default'
p26353
g3
sS'name'
p26354
S'block'
p26355
sS'required'
p26356
I00
sS'group_name'
p26357
Nsa(dp26358
S'description'
p26359
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26360
sS'cpp_type'
p26361
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26362
sS'default'
p26363
g3
sS'name'
p26364
S'boundary'
p26365
sS'required'
p26366
I00
sS'group_name'
p26367
Nsa(dp26368
S'description'
p26369
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26370
sS'cpp_type'
p26371
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26372
sS'default'
p26373
g3
sS'name'
p26374
S'control_tags'
p26375
sS'required'
p26376
I00
sS'group_name'
p26377
S'Advanced'
p26378
sa(dp26379
S'description'
p26380
S'If true the meshes must be the same and then the values are simply copied over.\n'
p26381
sS'cpp_type'
p26382
S'bool'
p26383
sS'default'
p26384
S'0'
p26385
sS'name'
p26386
S'direct'
p26387
sS'required'
p26388
I00
sS'group_name'
p26389
Nsa(dp26390
S'description'
p26391
S'Set the enabled status of the MooseObject.\n'
p26392
sS'cpp_type'
p26393
S'bool'
p26394
sS'default'
p26395
S'1'
p26396
sS'name'
p26397
S'enable'
p26398
sS'required'
p26399
I00
sS'group_name'
p26400
S'Advanced'
p26401
sa(dp26402
S'name'
p26403
S'execute_on'
p26404
sS'cpp_type'
p26405
S'MultiMooseEnum'
p26406
sS'default'
p26407
S'LINEAR'
p26408
sS'description'
p26409
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26410
sS'required'
p26411
I00
sS'options'
p26412
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26413
sS'group_name'
p26414
Nsa(dp26415
S'description'
p26416
S'The name of the variable to extract from the file\n'
p26417
sS'cpp_type'
p26418
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26419
sS'default'
p26420
g3
sS'name'
p26421
S'from_variable'
p26422
sS'required'
p26423
I00
sS'group_name'
p26424
Nsa(dp26425
S'description'
p26426
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p26427
sS'cpp_type'
p26428
S'double'
p26429
sS'default'
p26430
S'1'
p26431
sS'name'
p26432
S'scale_factor'
p26433
sS'required'
p26434
I00
sS'group_name'
p26435
Nsa(dp26436
S'description'
p26437
S'The seed for the master random number generator\n'
p26438
sS'cpp_type'
p26439
S'unsigned int'
p26440
sS'default'
p26441
S'0'
p26442
sS'name'
p26443
S'seed'
p26444
sS'required'
p26445
I00
sS'group_name'
p26446
S'Advanced'
p26447
sa(dp26448
S'description'
p26449
S'The name of the SolutionUserObject\n'
p26450
sS'cpp_type'
p26451
S'UserObjectName'
p26452
sS'default'
p26453
g3
sS'name'
p26454
S'solution'
p26455
sS'required'
p26456
I01
sS'group_name'
p26457
Nsa(dp26458
S'description'
p26459
g3
sS'cpp_type'
p26460
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26461
sS'default'
p26462
S'SolutionAux'
p26463
sS'name'
p26464
S'type'
p26465
sS'required'
p26466
I00
sS'group_name'
p26467
Nsa(dp26468
S'description'
p26469
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26470
sS'cpp_type'
p26471
S'bool'
p26472
sS'default'
p26473
S'0'
p26474
sS'name'
p26475
S'use_displaced_mesh'
p26476
sS'required'
p26477
I00
sS'group_name'
p26478
S'Advanced'
p26479
sa(dp26480
S'description'
p26481
S'The name of the variable that this object applies to\n'
p26482
sS'cpp_type'
p26483
S'AuxVariableName'
p26484
sS'default'
p26485
g3
sS'name'
p26486
S'variable'
p26487
sS'required'
p26488
I01
sS'group_name'
p26489
NsasS'name'
p26490
S'/Bounds/SolutionAux'
p26491
sa(dp26492
S'description'
p26493
g3
sS'subblocks'
p26494
NsS'parameters'
p26495
(lp26496
(dp26497
S'description'
p26498
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26499
sS'cpp_type'
p26500
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26501
sS'default'
p26502
g3
sS'name'
p26503
S'block'
p26504
sS'required'
p26505
I00
sS'group_name'
p26506
Nsa(dp26507
S'description'
p26508
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26509
sS'cpp_type'
p26510
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26511
sS'default'
p26512
g3
sS'name'
p26513
S'boundary'
p26514
sS'required'
p26515
I00
sS'group_name'
p26516
Nsa(dp26517
S'description'
p26518
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26519
sS'cpp_type'
p26520
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26521
sS'default'
p26522
g3
sS'name'
p26523
S'control_tags'
p26524
sS'required'
p26525
I00
sS'group_name'
p26526
S'Advanced'
p26527
sa(dp26528
S'description'
p26529
S'Set the enabled status of the MooseObject.\n'
p26530
sS'cpp_type'
p26531
S'bool'
p26532
sS'default'
p26533
S'1'
p26534
sS'name'
p26535
S'enable'
p26536
sS'required'
p26537
I00
sS'group_name'
p26538
S'Advanced'
p26539
sa(dp26540
S'name'
p26541
S'execute_on'
p26542
sS'cpp_type'
p26543
S'MultiMooseEnum'
p26544
sS'default'
p26545
S'LINEAR'
p26546
sS'description'
p26547
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26548
sS'required'
p26549
I00
sS'options'
p26550
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26551
sS'group_name'
p26552
Nsa(dp26553
S'description'
p26554
S'The seed for the master random number generator\n'
p26555
sS'cpp_type'
p26556
S'unsigned int'
p26557
sS'default'
p26558
S'0'
p26559
sS'name'
p26560
S'seed'
p26561
sS'required'
p26562
I00
sS'group_name'
p26563
S'Advanced'
p26564
sa(dp26565
S'description'
p26566
g3
sS'cpp_type'
p26567
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26568
sS'default'
p26569
S'SpatialUserObjectAux'
p26570
sS'name'
p26571
S'type'
p26572
sS'required'
p26573
I00
sS'group_name'
p26574
Nsa(dp26575
S'description'
p26576
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26577
sS'cpp_type'
p26578
S'bool'
p26579
sS'default'
p26580
S'0'
p26581
sS'name'
p26582
S'use_displaced_mesh'
p26583
sS'required'
p26584
I00
sS'group_name'
p26585
S'Advanced'
p26586
sa(dp26587
S'description'
p26588
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p26589
sS'cpp_type'
p26590
S'UserObjectName'
p26591
sS'default'
p26592
g3
sS'name'
p26593
S'user_object'
p26594
sS'required'
p26595
I01
sS'group_name'
p26596
Nsa(dp26597
S'description'
p26598
S'The name of the variable that this object applies to\n'
p26599
sS'cpp_type'
p26600
S'AuxVariableName'
p26601
sS'default'
p26602
g3
sS'name'
p26603
S'variable'
p26604
sS'required'
p26605
I01
sS'group_name'
p26606
NsasS'name'
p26607
S'/Bounds/SpatialUserObjectAux'
p26608
sa(dp26609
S'description'
p26610
S'Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n'
p26611
sS'subblocks'
p26612
NsS'parameters'
p26613
(lp26614
(dp26615
S'description'
p26616
S'Coupled variable holding additional free energy contributions to be summed up\n'
p26617
sS'cpp_type'
p26618
S'std::vector<VariableName>'
p26619
sS'default'
p26620
S'0'
p26621
sS'name'
p26622
S'additional_free_energy'
p26623
sS'required'
p26624
I00
sS'group_name'
p26625
Nsa(dp26626
S'description'
p26627
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26628
sS'cpp_type'
p26629
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26630
sS'default'
p26631
g3
sS'name'
p26632
S'block'
p26633
sS'required'
p26634
I00
sS'group_name'
p26635
Nsa(dp26636
S'description'
p26637
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26638
sS'cpp_type'
p26639
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26640
sS'default'
p26641
g3
sS'name'
p26642
S'boundary'
p26643
sS'required'
p26644
I00
sS'group_name'
p26645
Nsa(dp26646
S'description'
p26647
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26648
sS'cpp_type'
p26649
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26650
sS'default'
p26651
g3
sS'name'
p26652
S'control_tags'
p26653
sS'required'
p26654
I00
sS'group_name'
p26655
S'Advanced'
p26656
sa(dp26657
S'description'
p26658
S'Set the enabled status of the MooseObject.\n'
p26659
sS'cpp_type'
p26660
S'bool'
p26661
sS'default'
p26662
S'1'
p26663
sS'name'
p26664
S'enable'
p26665
sS'required'
p26666
I00
sS'group_name'
p26667
S'Advanced'
p26668
sa(dp26669
S'name'
p26670
S'execute_on'
p26671
sS'cpp_type'
p26672
S'MultiMooseEnum'
p26673
sS'default'
p26674
S'LINEAR'
p26675
sS'description'
p26676
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26677
sS'required'
p26678
I00
sS'options'
p26679
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26680
sS'group_name'
p26681
Nsa(dp26682
S'description'
p26683
S'Base name of the free energy function\n'
p26684
sS'cpp_type'
p26685
S'MaterialPropertyName'
p26686
sS'default'
p26687
S'F'
p26688
sS'name'
p26689
S'f_name'
p26690
sS'required'
p26691
I00
sS'group_name'
p26692
Nsa(dp26693
S'description'
p26694
S'Variable names that contribute to interfacial energy\n'
p26695
sS'cpp_type'
p26696
S'std::vector<VariableName>'
p26697
sS'default'
p26698
g3
sS'name'
p26699
S'interfacial_vars'
p26700
sS'required'
p26701
I00
sS'group_name'
p26702
Nsa(dp26703
S'description'
p26704
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p26705
sS'cpp_type'
p26706
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p26707
sS'default'
p26708
g3
sS'name'
p26709
S'kappa_names'
p26710
sS'required'
p26711
I00
sS'group_name'
p26712
Nsa(dp26713
S'description'
p26714
S'The seed for the master random number generator\n'
p26715
sS'cpp_type'
p26716
S'unsigned int'
p26717
sS'default'
p26718
S'0'
p26719
sS'name'
p26720
S'seed'
p26721
sS'required'
p26722
I00
sS'group_name'
p26723
S'Advanced'
p26724
sa(dp26725
S'description'
p26726
g3
sS'cpp_type'
p26727
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26728
sS'default'
p26729
S'TotalFreeEnergy'
p26730
sS'name'
p26731
S'type'
p26732
sS'required'
p26733
I00
sS'group_name'
p26734
Nsa(dp26735
S'description'
p26736
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26737
sS'cpp_type'
p26738
S'bool'
p26739
sS'default'
p26740
S'0'
p26741
sS'name'
p26742
S'use_displaced_mesh'
p26743
sS'required'
p26744
I00
sS'group_name'
p26745
S'Advanced'
p26746
sa(dp26747
S'description'
p26748
S'The name of the variable that this object applies to\n'
p26749
sS'cpp_type'
p26750
S'AuxVariableName'
p26751
sS'default'
p26752
g3
sS'name'
p26753
S'variable'
p26754
sS'required'
p26755
I01
sS'group_name'
p26756
NsasS'name'
p26757
S'/Bounds/TotalFreeEnergy'
p26758
sa(dp26759
S'description'
p26760
g3
sS'subblocks'
p26761
NsS'parameters'
p26762
(lp26763
(dp26764
S'description'
p26765
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26766
sS'cpp_type'
p26767
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26768
sS'default'
p26769
g3
sS'name'
p26770
S'block'
p26771
sS'required'
p26772
I00
sS'group_name'
p26773
Nsa(dp26774
S'description'
p26775
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26776
sS'cpp_type'
p26777
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26778
sS'default'
p26779
g3
sS'name'
p26780
S'boundary'
p26781
sS'required'
p26782
I00
sS'group_name'
p26783
Nsa(dp26784
S'name'
p26785
S'component'
p26786
sS'cpp_type'
p26787
S'MooseEnum'
p26788
sS'default'
p26789
g3
sS'description'
p26790
S'The gradient component to compute\n'
p26791
sS'required'
p26792
I00
sS'options'
p26793
S'x y z'
p26794
sS'group_name'
p26795
Nsa(dp26796
S'description'
p26797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26798
sS'cpp_type'
p26799
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26800
sS'default'
p26801
g3
sS'name'
p26802
S'control_tags'
p26803
sS'required'
p26804
I00
sS'group_name'
p26805
S'Advanced'
p26806
sa(dp26807
S'description'
p26808
S'Set the enabled status of the MooseObject.\n'
p26809
sS'cpp_type'
p26810
S'bool'
p26811
sS'default'
p26812
S'1'
p26813
sS'name'
p26814
S'enable'
p26815
sS'required'
p26816
I00
sS'group_name'
p26817
S'Advanced'
p26818
sa(dp26819
S'name'
p26820
S'execute_on'
p26821
sS'cpp_type'
p26822
S'MultiMooseEnum'
p26823
sS'default'
p26824
S'LINEAR'
p26825
sS'description'
p26826
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26827
sS'required'
p26828
I00
sS'options'
p26829
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26830
sS'group_name'
p26831
Nsa(dp26832
S'description'
p26833
S'The variable from which to compute the gradient component\n'
p26834
sS'cpp_type'
p26835
S'std::vector<VariableName>'
p26836
sS'default'
p26837
g3
sS'name'
p26838
S'gradient_variable'
p26839
sS'required'
p26840
I01
sS'group_name'
p26841
Nsa(dp26842
S'description'
p26843
S'The seed for the master random number generator\n'
p26844
sS'cpp_type'
p26845
S'unsigned int'
p26846
sS'default'
p26847
S'0'
p26848
sS'name'
p26849
S'seed'
p26850
sS'required'
p26851
I00
sS'group_name'
p26852
S'Advanced'
p26853
sa(dp26854
S'description'
p26855
g3
sS'cpp_type'
p26856
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26857
sS'default'
p26858
S'VariableGradientComponent'
p26859
sS'name'
p26860
S'type'
p26861
sS'required'
p26862
I00
sS'group_name'
p26863
Nsa(dp26864
S'description'
p26865
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26866
sS'cpp_type'
p26867
S'bool'
p26868
sS'default'
p26869
S'0'
p26870
sS'name'
p26871
S'use_displaced_mesh'
p26872
sS'required'
p26873
I00
sS'group_name'
p26874
S'Advanced'
p26875
sa(dp26876
S'description'
p26877
S'The name of the variable that this object applies to\n'
p26878
sS'cpp_type'
p26879
S'AuxVariableName'
p26880
sS'default'
p26881
g3
sS'name'
p26882
S'variable'
p26883
sS'required'
p26884
I01
sS'group_name'
p26885
NsasS'name'
p26886
S'/Bounds/VariableGradientComponent'
p26887
sa(dp26888
S'description'
p26889
g3
sS'subblocks'
p26890
NsS'parameters'
p26891
(lp26892
(dp26893
S'description'
p26894
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26895
sS'cpp_type'
p26896
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26897
sS'default'
p26898
g3
sS'name'
p26899
S'block'
p26900
sS'required'
p26901
I00
sS'group_name'
p26902
Nsa(dp26903
S'description'
p26904
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26905
sS'cpp_type'
p26906
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26907
sS'default'
p26908
g3
sS'name'
p26909
S'boundary'
p26910
sS'required'
p26911
I00
sS'group_name'
p26912
Nsa(dp26913
S'description'
p26914
S'A simple coefficient\n'
p26915
sS'cpp_type'
p26916
S'double'
p26917
sS'default'
p26918
S'1'
p26919
sS'name'
p26920
S'coefficient'
p26921
sS'required'
p26922
I00
sS'group_name'
p26923
Nsa(dp26924
S'description'
p26925
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26926
sS'cpp_type'
p26927
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26928
sS'default'
p26929
g3
sS'name'
p26930
S'control_tags'
p26931
sS'required'
p26932
I00
sS'group_name'
p26933
S'Advanced'
p26934
sa(dp26935
S'description'
p26936
S'Set the enabled status of the MooseObject.\n'
p26937
sS'cpp_type'
p26938
S'bool'
p26939
sS'default'
p26940
S'1'
p26941
sS'name'
p26942
S'enable'
p26943
sS'required'
p26944
I00
sS'group_name'
p26945
S'Advanced'
p26946
sa(dp26947
S'name'
p26948
S'execute_on'
p26949
sS'cpp_type'
p26950
S'MultiMooseEnum'
p26951
sS'default'
p26952
S'LINEAR'
p26953
sS'description'
p26954
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26955
sS'required'
p26956
I00
sS'options'
p26957
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26958
sS'group_name'
p26959
Nsa(dp26960
S'description'
p26961
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p26962
sS'cpp_type'
p26963
S'unsigned int'
p26964
sS'default'
p26965
S'2'
p26966
sS'name'
p26967
S'order'
p26968
sS'required'
p26969
I00
sS'group_name'
p26970
Nsa(dp26971
S'description'
p26972
S'The seed for the master random number generator\n'
p26973
sS'cpp_type'
p26974
S'unsigned int'
p26975
sS'default'
p26976
S'0'
p26977
sS'name'
p26978
S'seed'
p26979
sS'required'
p26980
I00
sS'group_name'
p26981
S'Advanced'
p26982
sa(dp26983
S'description'
p26984
g3
sS'cpp_type'
p26985
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26986
sS'default'
p26987
S'VariableTimeIntegrationAux'
p26988
sS'name'
p26989
S'type'
p26990
sS'required'
p26991
I00
sS'group_name'
p26992
Nsa(dp26993
S'description'
p26994
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26995
sS'cpp_type'
p26996
S'bool'
p26997
sS'default'
p26998
S'0'
p26999
sS'name'
p27000
S'use_displaced_mesh'
p27001
sS'required'
p27002
I00
sS'group_name'
p27003
S'Advanced'
p27004
sa(dp27005
S'description'
p27006
S'The name of the variable that this object applies to\n'
p27007
sS'cpp_type'
p27008
S'AuxVariableName'
p27009
sS'default'
p27010
g3
sS'name'
p27011
S'variable'
p27012
sS'required'
p27013
I01
sS'group_name'
p27014
Nsa(dp27015
S'description'
p27016
S'The variable to be integrated\n'
p27017
sS'cpp_type'
p27018
S'std::vector<VariableName>'
p27019
sS'default'
p27020
g3
sS'name'
p27021
S'variable_to_integrate'
p27022
sS'required'
p27023
I01
sS'group_name'
p27024
NsasS'name'
p27025
S'/Bounds/VariableTimeIntegrationAux'
p27026
sa(dp27027
S'description'
p27028
g3
sS'subblocks'
p27029
NsS'parameters'
p27030
(lp27031
(dp27032
S'description'
p27033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27034
sS'cpp_type'
p27035
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27036
sS'default'
p27037
g3
sS'name'
p27038
S'block'
p27039
sS'required'
p27040
I00
sS'group_name'
p27041
Nsa(dp27042
S'description'
p27043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27044
sS'cpp_type'
p27045
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27046
sS'default'
p27047
g3
sS'name'
p27048
S'boundary'
p27049
sS'required'
p27050
I00
sS'group_name'
p27051
Nsa(dp27052
S'description'
p27053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27054
sS'cpp_type'
p27055
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27056
sS'default'
p27057
g3
sS'name'
p27058
S'control_tags'
p27059
sS'required'
p27060
I00
sS'group_name'
p27061
S'Advanced'
p27062
sa(dp27063
S'description'
p27064
S'Set the enabled status of the MooseObject.\n'
p27065
sS'cpp_type'
p27066
S'bool'
p27067
sS'default'
p27068
S'1'
p27069
sS'name'
p27070
S'enable'
p27071
sS'required'
p27072
I00
sS'group_name'
p27073
S'Advanced'
p27074
sa(dp27075
S'name'
p27076
S'execute_on'
p27077
sS'cpp_type'
p27078
S'MultiMooseEnum'
p27079
sS'default'
p27080
S'LINEAR'
p27081
sS'description'
p27082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27083
sS'required'
p27084
I00
sS'options'
p27085
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27086
sS'group_name'
p27087
Nsa(dp27088
S'description'
p27089
S'The seed for the master random number generator\n'
p27090
sS'cpp_type'
p27091
S'unsigned int'
p27092
sS'default'
p27093
S'0'
p27094
sS'name'
p27095
S'seed'
p27096
sS'required'
p27097
I00
sS'group_name'
p27098
S'Advanced'
p27099
sa(dp27100
S'description'
p27101
g3
sS'cpp_type'
p27102
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27103
sS'default'
p27104
S'VectorMagnitudeAux'
p27105
sS'name'
p27106
S'type'
p27107
sS'required'
p27108
I00
sS'group_name'
p27109
Nsa(dp27110
S'description'
p27111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27112
sS'cpp_type'
p27113
S'bool'
p27114
sS'default'
p27115
S'0'
p27116
sS'name'
p27117
S'use_displaced_mesh'
p27118
sS'required'
p27119
I00
sS'group_name'
p27120
S'Advanced'
p27121
sa(dp27122
S'description'
p27123
S'The name of the variable that this object applies to\n'
p27124
sS'cpp_type'
p27125
S'AuxVariableName'
p27126
sS'default'
p27127
g3
sS'name'
p27128
S'variable'
p27129
sS'required'
p27130
I01
sS'group_name'
p27131
Nsa(dp27132
S'description'
p27133
S'x-component of the vector\n'
p27134
sS'cpp_type'
p27135
S'std::vector<VariableName>'
p27136
sS'default'
p27137
g3
sS'name'
p27138
S'x'
p27139
sS'required'
p27140
I01
sS'group_name'
p27141
Nsa(dp27142
S'description'
p27143
S'y-component of the vector\n'
p27144
sS'cpp_type'
p27145
S'std::vector<VariableName>'
p27146
sS'default'
p27147
g3
sS'name'
p27148
S'y'
p27149
sS'required'
p27150
I00
sS'group_name'
p27151
Nsa(dp27152
S'description'
p27153
S'z-component of the vector\n'
p27154
sS'cpp_type'
p27155
S'std::vector<VariableName>'
p27156
sS'default'
p27157
g3
sS'name'
p27158
S'z'
p27159
sS'required'
p27160
I00
sS'group_name'
p27161
NsasS'name'
p27162
S'/Bounds/VectorMagnitudeAux'
p27163
sasS'parameters'
p27164
NsS'name'
p27165
S'/Bounds'
p27166
sa(dp27167
S'description'
p27168
g3
sS'subblocks'
p27169
(lp27170
(dp27171
S'description'
p27172
g3
sS'subblocks'
p27173
NsS'parameters'
p27174
(lp27175
(dp27176
S'description'
p27177
S'A string representing the Moose Object that will be built by this Action\n'
p27178
sS'cpp_type'
p27179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27180
sS'default'
p27181
g3
sS'name'
p27182
S'type'
p27183
sS'required'
p27184
I01
sS'group_name'
p27185
NsasS'name'
p27186
S'/Constraints/*'
p27187
sa(dp27188
S'description'
p27189
g3
sS'subblocks'
p27190
NsS'parameters'
p27191
(lp27192
(dp27193
S'description'
p27194
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27195
sS'cpp_type'
p27196
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27197
sS'default'
p27198
g3
sS'name'
p27199
S'control_tags'
p27200
sS'required'
p27201
I00
sS'group_name'
p27202
S'Advanced'
p27203
sa(dp27204
S'description'
p27205
S'Set the enabled status of the MooseObject.\n'
p27206
sS'cpp_type'
p27207
S'bool'
p27208
sS'default'
p27209
S'1'
p27210
sS'name'
p27211
S'enable'
p27212
sS'required'
p27213
I00
sS'group_name'
p27214
S'Advanced'
p27215
sa(dp27216
S'name'
p27217
S'execute_on'
p27218
sS'cpp_type'
p27219
S'MultiMooseEnum'
p27220
sS'default'
p27221
S'LINEAR'
p27222
sS'description'
p27223
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27224
sS'required'
p27225
I00
sS'options'
p27226
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27227
sS'group_name'
p27228
Nsa(dp27229
S'description'
p27230
S'The boundary ID associated with the master side\n'
p27231
sS'cpp_type'
p27232
S'BoundaryName'
p27233
sS'default'
p27234
g3
sS'name'
p27235
S'master'
p27236
sS'required'
p27237
I01
sS'group_name'
p27238
Nsa(dp27239
S'description'
p27240
S'The variable on the master side of the domain\n'
p27241
sS'cpp_type'
p27242
S'std::vector<VariableName>'
p27243
sS'default'
p27244
g3
sS'name'
p27245
S'master_variable'
p27246
sS'required'
p27247
I01
sS'group_name'
p27248
Nsa(dp27249
S'description'
p27250
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p27251
sS'cpp_type'
p27252
S'double'
p27253
sS'default'
p27254
g3
sS'name'
p27255
S'normal_smoothing_distance'
p27256
sS'required'
p27257
I00
sS'group_name'
p27258
Nsa(dp27259
S'description'
p27260
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p27261
sS'cpp_type'
p27262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27263
sS'default'
p27264
g3
sS'name'
p27265
S'normal_smoothing_method'
p27266
sS'required'
p27267
I00
sS'group_name'
p27268
Nsa(dp27269
S'name'
p27270
S'order'
p27271
sS'cpp_type'
p27272
S'MooseEnum'
p27273
sS'default'
p27274
S'FIRST'
p27275
sS'description'
p27276
S'The finite element order used for projections\n'
p27277
sS'required'
p27278
I00
sS'options'
p27279
S'FIRST SECOND THIRD FOURTH'
p27280
sS'group_name'
p27281
Nsa(dp27282
S'description'
p27283
S'scaling factor to be applied to constraint equations\n'
p27284
sS'cpp_type'
p27285
S'double'
p27286
sS'default'
p27287
S'1'
p27288
sS'name'
p27289
S'scaling'
p27290
sS'required'
p27291
I00
sS'group_name'
p27292
Nsa(dp27293
S'description'
p27294
S'The boundary ID associated with the slave side\n'
p27295
sS'cpp_type'
p27296
S'BoundaryName'
p27297
sS'default'
p27298
g3
sS'name'
p27299
S'slave'
p27300
sS'required'
p27301
I01
sS'group_name'
p27302
Nsa(dp27303
S'description'
p27304
S'Tangential distance to extend edges of contact surfaces\n'
p27305
sS'cpp_type'
p27306
S'double'
p27307
sS'default'
p27308
g3
sS'name'
p27309
S'tangential_tolerance'
p27310
sS'required'
p27311
I00
sS'group_name'
p27312
Nsa(dp27313
S'description'
p27314
g3
sS'cpp_type'
p27315
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27316
sS'default'
p27317
S'CoupledTiedValueConstraint'
p27318
sS'name'
p27319
S'type'
p27320
sS'required'
p27321
I00
sS'group_name'
p27322
Nsa(dp27323
S'description'
p27324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27325
sS'cpp_type'
p27326
S'bool'
p27327
sS'default'
p27328
S'1'
p27329
sS'name'
p27330
S'use_displaced_mesh'
p27331
sS'required'
p27332
I00
sS'group_name'
p27333
S'Advanced'
p27334
sa(dp27335
S'description'
p27336
S'The name of the variable that this constraint is applied to.\n'
p27337
sS'cpp_type'
p27338
S'NonlinearVariableName'
p27339
sS'default'
p27340
g3
sS'name'
p27341
S'variable'
p27342
sS'required'
p27343
I01
sS'group_name'
p27344
NsasS'name'
p27345
S'/Constraints/CoupledTiedValueConstraint'
p27346
sa(dp27347
S'description'
p27348
g3
sS'subblocks'
p27349
NsS'parameters'
p27350
(lp27351
(dp27352
S'description'
p27353
S'Gradient component to constrain\n'
p27354
sS'cpp_type'
p27355
S'unsigned int'
p27356
sS'default'
p27357
g3
sS'name'
p27358
S'component'
p27359
sS'required'
p27360
I01
sS'group_name'
p27361
Nsa(dp27362
S'description'
p27363
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27364
sS'cpp_type'
p27365
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27366
sS'default'
p27367
g3
sS'name'
p27368
S'control_tags'
p27369
sS'required'
p27370
I00
sS'group_name'
p27371
S'Advanced'
p27372
sa(dp27373
S'description'
p27374
S'Set the enabled status of the MooseObject.\n'
p27375
sS'cpp_type'
p27376
S'bool'
p27377
sS'default'
p27378
S'1'
p27379
sS'name'
p27380
S'enable'
p27381
sS'required'
p27382
I00
sS'group_name'
p27383
S'Advanced'
p27384
sa(dp27385
S'name'
p27386
S'execute_on'
p27387
sS'cpp_type'
p27388
S'MultiMooseEnum'
p27389
sS'default'
p27390
S'LINEAR'
p27391
sS'description'
p27392
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27393
sS'required'
p27394
I00
sS'options'
p27395
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27396
sS'group_name'
p27397
Nsa(dp27398
S'description'
p27399
S'The name of the interface.\n'
p27400
sS'cpp_type'
p27401
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27402
sS'default'
p27403
g3
sS'name'
p27404
S'interface'
p27405
sS'required'
p27406
I01
sS'group_name'
p27407
Nsa(dp27408
S'description'
p27409
S'Variable on master surface\n'
p27410
sS'cpp_type'
p27411
S'VariableName'
p27412
sS'default'
p27413
g3
sS'name'
p27414
S'master_variable'
p27415
sS'required'
p27416
I01
sS'group_name'
p27417
Nsa(dp27418
S'description'
p27419
S'Variable on master surface\n'
p27420
sS'cpp_type'
p27421
S'VariableName'
p27422
sS'default'
p27423
g3
sS'name'
p27424
S'slave_variable'
p27425
sS'required'
p27426
I00
sS'group_name'
p27427
Nsa(dp27428
S'description'
p27429
g3
sS'cpp_type'
p27430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27431
sS'default'
p27432
S'EqualGradientConstraint'
p27433
sS'name'
p27434
S'type'
p27435
sS'required'
p27436
I00
sS'group_name'
p27437
Nsa(dp27438
S'description'
p27439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27440
sS'cpp_type'
p27441
S'bool'
p27442
sS'default'
p27443
S'0'
p27444
sS'name'
p27445
S'use_displaced_mesh'
p27446
sS'required'
p27447
I00
sS'group_name'
p27448
S'Advanced'
p27449
sa(dp27450
S'description'
p27451
S'The name of the variable that this constraint is applied to.\n'
p27452
sS'cpp_type'
p27453
S'NonlinearVariableName'
p27454
sS'default'
p27455
g3
sS'name'
p27456
S'variable'
p27457
sS'required'
p27458
I01
sS'group_name'
p27459
NsasS'name'
p27460
S'/Constraints/EqualGradientConstraint'
p27461
sa(dp27462
S'description'
p27463
g3
sS'subblocks'
p27464
NsS'parameters'
p27465
(lp27466
(dp27467
S'description'
p27468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27469
sS'cpp_type'
p27470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27471
sS'default'
p27472
g3
sS'name'
p27473
S'control_tags'
p27474
sS'required'
p27475
I00
sS'group_name'
p27476
S'Advanced'
p27477
sa(dp27478
S'description'
p27479
S'Set the enabled status of the MooseObject.\n'
p27480
sS'cpp_type'
p27481
S'bool'
p27482
sS'default'
p27483
S'1'
p27484
sS'name'
p27485
S'enable'
p27486
sS'required'
p27487
I00
sS'group_name'
p27488
S'Advanced'
p27489
sa(dp27490
S'name'
p27491
S'execute_on'
p27492
sS'cpp_type'
p27493
S'MultiMooseEnum'
p27494
sS'default'
p27495
S'LINEAR'
p27496
sS'description'
p27497
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27498
sS'required'
p27499
I00
sS'options'
p27500
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27501
sS'group_name'
p27502
Nsa(dp27503
S'name'
p27504
S'formulation'
p27505
sS'cpp_type'
p27506
S'MooseEnum'
p27507
sS'default'
p27508
S'penalty'
p27509
sS'description'
p27510
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p27511
sS'required'
p27512
I00
sS'options'
p27513
S'penalty kinematic'
p27514
sS'group_name'
p27515
Nsa(dp27516
S'description'
p27517
S'The ID of the master node. If no ID is provided, first node of slave set is chosen.\n'
p27518
sS'cpp_type'
p27519
S'unsigned int'
p27520
sS'default'
p27521
S'4294967295'
p27522
sS'name'
p27523
S'master'
p27524
sS'required'
p27525
I00
sS'group_name'
p27526
Nsa(dp27527
S'description'
p27528
S'The penalty used for the boundary term\n'
p27529
sS'cpp_type'
p27530
S'double'
p27531
sS'default'
p27532
g3
sS'name'
p27533
S'penalty'
p27534
sS'required'
p27535
I01
sS'group_name'
p27536
Nsa(dp27537
S'description'
p27538
S'The boundary ID associated with the slave side\n'
p27539
sS'cpp_type'
p27540
S'BoundaryName'
p27541
sS'default'
p27542
S'NaN'
p27543
sS'name'
p27544
S'slave'
p27545
sS'required'
p27546
I00
sS'group_name'
p27547
Nsa(dp27548
S'description'
p27549
S'The IDs of the slave node\n'
p27550
sS'cpp_type'
p27551
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p27552
sS'default'
p27553
g3
sS'name'
p27554
S'slave_node_ids'
p27555
sS'required'
p27556
I00
sS'group_name'
p27557
Nsa(dp27558
S'description'
p27559
g3
sS'cpp_type'
p27560
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27561
sS'default'
p27562
S'EqualValueBoundaryConstraint'
p27563
sS'name'
p27564
S'type'
p27565
sS'required'
p27566
I00
sS'group_name'
p27567
Nsa(dp27568
S'description'
p27569
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27570
sS'cpp_type'
p27571
S'bool'
p27572
sS'default'
p27573
S'0'
p27574
sS'name'
p27575
S'use_displaced_mesh'
p27576
sS'required'
p27577
I00
sS'group_name'
p27578
S'Advanced'
p27579
sa(dp27580
S'description'
p27581
S'The name of the variable that this constraint is applied to.\n'
p27582
sS'cpp_type'
p27583
S'NonlinearVariableName'
p27584
sS'default'
p27585
g3
sS'name'
p27586
S'variable'
p27587
sS'required'
p27588
I01
sS'group_name'
p27589
NsasS'name'
p27590
S'/Constraints/EqualValueBoundaryConstraint'
p27591
sa(dp27592
S'description'
p27593
g3
sS'subblocks'
p27594
NsS'parameters'
p27595
(lp27596
(dp27597
S'description'
p27598
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27599
sS'cpp_type'
p27600
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27601
sS'default'
p27602
g3
sS'name'
p27603
S'control_tags'
p27604
sS'required'
p27605
I00
sS'group_name'
p27606
S'Advanced'
p27607
sa(dp27608
S'description'
p27609
S'Set the enabled status of the MooseObject.\n'
p27610
sS'cpp_type'
p27611
S'bool'
p27612
sS'default'
p27613
S'1'
p27614
sS'name'
p27615
S'enable'
p27616
sS'required'
p27617
I00
sS'group_name'
p27618
S'Advanced'
p27619
sa(dp27620
S'name'
p27621
S'execute_on'
p27622
sS'cpp_type'
p27623
S'MultiMooseEnum'
p27624
sS'default'
p27625
S'LINEAR'
p27626
sS'description'
p27627
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27628
sS'required'
p27629
I00
sS'options'
p27630
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27631
sS'group_name'
p27632
Nsa(dp27633
S'description'
p27634
S'The name of the interface.\n'
p27635
sS'cpp_type'
p27636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27637
sS'default'
p27638
g3
sS'name'
p27639
S'interface'
p27640
sS'required'
p27641
I01
sS'group_name'
p27642
Nsa(dp27643
S'description'
p27644
S'Variable on master surface\n'
p27645
sS'cpp_type'
p27646
S'VariableName'
p27647
sS'default'
p27648
g3
sS'name'
p27649
S'master_variable'
p27650
sS'required'
p27651
I01
sS'group_name'
p27652
Nsa(dp27653
S'description'
p27654
S'Variable on master surface\n'
p27655
sS'cpp_type'
p27656
S'VariableName'
p27657
sS'default'
p27658
g3
sS'name'
p27659
S'slave_variable'
p27660
sS'required'
p27661
I00
sS'group_name'
p27662
Nsa(dp27663
S'description'
p27664
g3
sS'cpp_type'
p27665
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27666
sS'default'
p27667
S'EqualValueConstraint'
p27668
sS'name'
p27669
S'type'
p27670
sS'required'
p27671
I00
sS'group_name'
p27672
Nsa(dp27673
S'description'
p27674
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27675
sS'cpp_type'
p27676
S'bool'
p27677
sS'default'
p27678
S'0'
p27679
sS'name'
p27680
S'use_displaced_mesh'
p27681
sS'required'
p27682
I00
sS'group_name'
p27683
S'Advanced'
p27684
sa(dp27685
S'description'
p27686
S'The name of the variable that this constraint is applied to.\n'
p27687
sS'cpp_type'
p27688
S'NonlinearVariableName'
p27689
sS'default'
p27690
g3
sS'name'
p27691
S'variable'
p27692
sS'required'
p27693
I01
sS'group_name'
p27694
NsasS'name'
p27695
S'/Constraints/EqualValueConstraint'
p27696
sa(dp27697
S'description'
p27698
g3
sS'subblocks'
p27699
NsS'parameters'
p27700
(lp27701
(dp27702
S'description'
p27703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27704
sS'cpp_type'
p27705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27706
sS'default'
p27707
g3
sS'name'
p27708
S'control_tags'
p27709
sS'required'
p27710
I00
sS'group_name'
p27711
S'Advanced'
p27712
sa(dp27713
S'description'
p27714
S'Set the enabled status of the MooseObject.\n'
p27715
sS'cpp_type'
p27716
S'bool'
p27717
sS'default'
p27718
S'1'
p27719
sS'name'
p27720
S'enable'
p27721
sS'required'
p27722
I00
sS'group_name'
p27723
S'Advanced'
p27724
sa(dp27725
S'name'
p27726
S'execute_on'
p27727
sS'cpp_type'
p27728
S'MultiMooseEnum'
p27729
sS'default'
p27730
S'LINEAR'
p27731
sS'description'
p27732
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27733
sS'required'
p27734
I00
sS'options'
p27735
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27736
sS'group_name'
p27737
Nsa(dp27738
S'name'
p27739
S'formulation'
p27740
sS'cpp_type'
p27741
S'MooseEnum'
p27742
sS'default'
p27743
S'penalty'
p27744
sS'description'
p27745
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p27746
sS'required'
p27747
I00
sS'options'
p27748
S'penalty kinematic'
p27749
sS'group_name'
p27750
Nsa(dp27751
S'description'
p27752
S'The master node IDs.\n'
p27753
sS'cpp_type'
p27754
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p27755
sS'default'
p27756
g3
sS'name'
p27757
S'master'
p27758
sS'required'
p27759
I01
sS'group_name'
p27760
Nsa(dp27761
S'description'
p27762
S'The penalty used for the boundary term\n'
p27763
sS'cpp_type'
p27764
S'double'
p27765
sS'default'
p27766
g3
sS'name'
p27767
S'penalty'
p27768
sS'required'
p27769
I01
sS'group_name'
p27770
Nsa(dp27771
S'description'
p27772
S'The list of slave node ids\n'
p27773
sS'cpp_type'
p27774
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p27775
sS'default'
p27776
g3
sS'name'
p27777
S'slave_node_ids'
p27778
sS'required'
p27779
I00
sS'group_name'
p27780
Nsa(dp27781
S'description'
p27782
S'The boundary ID associated with the slave side\n'
p27783
sS'cpp_type'
p27784
S'BoundaryName'
p27785
sS'default'
p27786
S'NaN'
p27787
sS'name'
p27788
S'slave_node_set'
p27789
sS'required'
p27790
I00
sS'group_name'
p27791
Nsa(dp27792
S'description'
p27793
g3
sS'cpp_type'
p27794
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27795
sS'default'
p27796
S'LinearNodalConstraint'
p27797
sS'name'
p27798
S'type'
p27799
sS'required'
p27800
I00
sS'group_name'
p27801
Nsa(dp27802
S'description'
p27803
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27804
sS'cpp_type'
p27805
S'bool'
p27806
sS'default'
p27807
S'0'
p27808
sS'name'
p27809
S'use_displaced_mesh'
p27810
sS'required'
p27811
I00
sS'group_name'
p27812
S'Advanced'
p27813
sa(dp27814
S'description'
p27815
S'The name of the variable that this constraint is applied to.\n'
p27816
sS'cpp_type'
p27817
S'NonlinearVariableName'
p27818
sS'default'
p27819
g3
sS'name'
p27820
S'variable'
p27821
sS'required'
p27822
I01
sS'group_name'
p27823
Nsa(dp27824
S'description'
p27825
S'The weights associated with the master node ids. Must be of the same size as master nodes\n'
p27826
sS'cpp_type'
p27827
S'std::vector<double, std::allocator<double> >'
p27828
sS'default'
p27829
g3
sS'name'
p27830
S'weights'
p27831
sS'required'
p27832
I01
sS'group_name'
p27833
NsasS'name'
p27834
S'/Constraints/LinearNodalConstraint'
p27835
sa(dp27836
S'description'
p27837
g3
sS'subblocks'
p27838
NsS'parameters'
p27839
(lp27840
(dp27841
S'description'
p27842
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27843
sS'cpp_type'
p27844
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27845
sS'default'
p27846
g3
sS'name'
p27847
S'control_tags'
p27848
sS'required'
p27849
I00
sS'group_name'
p27850
S'Advanced'
p27851
sa(dp27852
S'description'
p27853
S'Set the enabled status of the MooseObject.\n'
p27854
sS'cpp_type'
p27855
S'bool'
p27856
sS'default'
p27857
S'1'
p27858
sS'name'
p27859
S'enable'
p27860
sS'required'
p27861
I00
sS'group_name'
p27862
S'Advanced'
p27863
sa(dp27864
S'name'
p27865
S'execute_on'
p27866
sS'cpp_type'
p27867
S'MultiMooseEnum'
p27868
sS'default'
p27869
S'LINEAR'
p27870
sS'description'
p27871
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27872
sS'required'
p27873
I00
sS'options'
p27874
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27875
sS'group_name'
p27876
Nsa(dp27877
S'description'
p27878
S'The boundary ID associated with the master side\n'
p27879
sS'cpp_type'
p27880
S'BoundaryName'
p27881
sS'default'
p27882
g3
sS'name'
p27883
S'master'
p27884
sS'required'
p27885
I01
sS'group_name'
p27886
Nsa(dp27887
S'description'
p27888
S'The variable on the master side of the domain\n'
p27889
sS'cpp_type'
p27890
S'std::vector<VariableName>'
p27891
sS'default'
p27892
g3
sS'name'
p27893
S'master_variable'
p27894
sS'required'
p27895
I01
sS'group_name'
p27896
Nsa(dp27897
S'description'
p27898
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p27899
sS'cpp_type'
p27900
S'double'
p27901
sS'default'
p27902
g3
sS'name'
p27903
S'normal_smoothing_distance'
p27904
sS'required'
p27905
I00
sS'group_name'
p27906
Nsa(dp27907
S'description'
p27908
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p27909
sS'cpp_type'
p27910
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27911
sS'default'
p27912
g3
sS'name'
p27913
S'normal_smoothing_method'
p27914
sS'required'
p27915
I00
sS'group_name'
p27916
Nsa(dp27917
S'name'
p27918
S'order'
p27919
sS'cpp_type'
p27920
S'MooseEnum'
p27921
sS'default'
p27922
S'FIRST'
p27923
sS'description'
p27924
S'The finite element order used for projections\n'
p27925
sS'required'
p27926
I00
sS'options'
p27927
S'FIRST SECOND THIRD FOURTH'
p27928
sS'group_name'
p27929
Nsa(dp27930
S'description'
p27931
S'scaling factor to be applied to constraint equations\n'
p27932
sS'cpp_type'
p27933
S'double'
p27934
sS'default'
p27935
S'1'
p27936
sS'name'
p27937
S'scaling'
p27938
sS'required'
p27939
I00
sS'group_name'
p27940
Nsa(dp27941
S'description'
p27942
S'The boundary ID associated with the slave side\n'
p27943
sS'cpp_type'
p27944
S'BoundaryName'
p27945
sS'default'
p27946
g3
sS'name'
p27947
S'slave'
p27948
sS'required'
p27949
I01
sS'group_name'
p27950
Nsa(dp27951
S'description'
p27952
S'Tangential distance to extend edges of contact surfaces\n'
p27953
sS'cpp_type'
p27954
S'double'
p27955
sS'default'
p27956
g3
sS'name'
p27957
S'tangential_tolerance'
p27958
sS'required'
p27959
I00
sS'group_name'
p27960
Nsa(dp27961
S'description'
p27962
g3
sS'cpp_type'
p27963
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27964
sS'default'
p27965
S'TiedValueConstraint'
p27966
sS'name'
p27967
S'type'
p27968
sS'required'
p27969
I00
sS'group_name'
p27970
Nsa(dp27971
S'description'
p27972
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27973
sS'cpp_type'
p27974
S'bool'
p27975
sS'default'
p27976
S'1'
p27977
sS'name'
p27978
S'use_displaced_mesh'
p27979
sS'required'
p27980
I00
sS'group_name'
p27981
S'Advanced'
p27982
sa(dp27983
S'description'
p27984
S'The name of the variable that this constraint is applied to.\n'
p27985
sS'cpp_type'
p27986
S'NonlinearVariableName'
p27987
sS'default'
p27988
g3
sS'name'
p27989
S'variable'
p27990
sS'required'
p27991
I01
sS'group_name'
p27992
NsasS'name'
p27993
S'/Constraints/TiedValueConstraint'
p27994
sasS'parameters'
p27995
NsS'name'
p27996
S'/Constraints'
p27997
sa(dp27998
S'description'
p27999
g3
sS'subblocks'
p28000
(lp28001
(dp28002
S'description'
p28003
g3
sS'subblocks'
p28004
NsS'parameters'
p28005
(lp28006
(dp28007
S'description'
p28008
S'A string representing the Moose Object that will be built by this Action\n'
p28009
sS'cpp_type'
p28010
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28011
sS'default'
p28012
g3
sS'name'
p28013
S'type'
p28014
sS'required'
p28015
I01
sS'group_name'
p28016
NsasS'name'
p28017
S'/Controls/*'
p28018
sa(dp28019
S'description'
p28020
g3
sS'subblocks'
p28021
NsS'parameters'
p28022
(lp28023
(dp28024
S'description'
p28025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28026
sS'cpp_type'
p28027
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28028
sS'default'
p28029
g3
sS'name'
p28030
S'control_tags'
p28031
sS'required'
p28032
I00
sS'group_name'
p28033
S'Advanced'
p28034
sa(dp28035
S'description'
p28036
S'Set the enabled status of the MooseObject.\n'
p28037
sS'cpp_type'
p28038
S'bool'
p28039
sS'default'
p28040
S'1'
p28041
sS'name'
p28042
S'enable'
p28043
sS'required'
p28044
I00
sS'group_name'
p28045
S'Advanced'
p28046
sa(dp28047
S'name'
p28048
S'execute_on'
p28049
sS'cpp_type'
p28050
S'MultiMooseEnum'
p28051
sS'default'
p28052
S'INITIAL TIMESTEP_END'
p28053
sS'description'
p28054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28055
sS'required'
p28056
I00
sS'options'
p28057
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p28058
sS'group_name'
p28059
Nsa(dp28060
S'description'
p28061
S'The function to use for controlling the specified parameter.\n'
p28062
sS'cpp_type'
p28063
S'FunctionName'
p28064
sS'default'
p28065
g3
sS'name'
p28066
S'function'
p28067
sS'required'
p28068
I01
sS'group_name'
p28069
Nsa(dp28070
S'description'
p28071
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28072
sS'cpp_type'
p28073
S'bool'
p28074
sS'default'
p28075
S'1'
p28076
sS'name'
p28077
S'implicit'
p28078
sS'required'
p28079
I00
sS'group_name'
p28080
S'Advanced'
p28081
sa(dp28082
S'description'
p28083
S'The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n'
p28084
sS'cpp_type'
p28085
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28086
sS'default'
p28087
g3
sS'name'
p28088
S'parameter'
p28089
sS'required'
p28090
I01
sS'group_name'
p28091
Nsa(dp28092
S'description'
p28093
g3
sS'cpp_type'
p28094
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28095
sS'default'
p28096
S'RealFunctionControl'
p28097
sS'name'
p28098
S'type'
p28099
sS'required'
p28100
I00
sS'group_name'
p28101
NsasS'name'
p28102
S'/Controls/RealFunctionControl'
p28103
sa(dp28104
S'description'
p28105
g3
sS'subblocks'
p28106
NsS'parameters'
p28107
(lp28108
(dp28109
S'description'
p28110
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28111
sS'cpp_type'
p28112
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28113
sS'default'
p28114
g3
sS'name'
p28115
S'control_tags'
p28116
sS'required'
p28117
I00
sS'group_name'
p28118
S'Advanced'
p28119
sa(dp28120
S'description'
p28121
S'A list of object tags to disable.\n'
p28122
sS'cpp_type'
p28123
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28124
sS'default'
p28125
g3
sS'name'
p28126
S'disable_objects'
p28127
sS'required'
p28128
I00
sS'group_name'
p28129
Nsa(dp28130
S'description'
p28131
S'Set the enabled status of the MooseObject.\n'
p28132
sS'cpp_type'
p28133
S'bool'
p28134
sS'default'
p28135
S'1'
p28136
sS'name'
p28137
S'enable'
p28138
sS'required'
p28139
I00
sS'group_name'
p28140
S'Advanced'
p28141
sa(dp28142
S'description'
p28143
S'A list of object tags to enable.\n'
p28144
sS'cpp_type'
p28145
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28146
sS'default'
p28147
g3
sS'name'
p28148
S'enable_objects'
p28149
sS'required'
p28150
I00
sS'group_name'
p28151
Nsa(dp28152
S'description'
p28153
S'The time at which the objects are to be enable/disabled.\n'
p28154
sS'cpp_type'
p28155
S'std::vector<double, std::allocator<double> >'
p28156
sS'default'
p28157
g3
sS'name'
p28158
S'end_time'
p28159
sS'required'
p28160
I00
sS'group_name'
p28161
Nsa(dp28162
S'name'
p28163
S'execute_on'
p28164
sS'cpp_type'
p28165
S'MultiMooseEnum'
p28166
sS'default'
p28167
S'INITIAL TIMESTEP_END'
p28168
sS'description'
p28169
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28170
sS'required'
p28171
I00
sS'options'
p28172
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p28173
sS'group_name'
p28174
Nsa(dp28175
S'description'
p28176
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28177
sS'cpp_type'
p28178
S'bool'
p28179
sS'default'
p28180
S'1'
p28181
sS'name'
p28182
S'implicit'
p28183
sS'required'
p28184
I00
sS'group_name'
p28185
S'Advanced'
p28186
sa(dp28187
S'description'
p28188
S'When true the disable/enable lists are set to opposite values when outside of the given time range.\n'
p28189
sS'cpp_type'
p28190
S'bool'
p28191
sS'default'
p28192
S'1'
p28193
sS'name'
p28194
S'set_outside_of_range'
p28195
sS'required'
p28196
I00
sS'group_name'
p28197
Nsa(dp28198
S'description'
p28199
S'Set the start and end time as execute sync times.\n'
p28200
sS'cpp_type'
p28201
S'bool'
p28202
sS'default'
p28203
S'0'
p28204
sS'name'
p28205
S'set_sync_times'
p28206
sS'required'
p28207
I00
sS'group_name'
p28208
Nsa(dp28209
S'description'
p28210
S'The time at which the objects are to be enabled/disabled.\n'
p28211
sS'cpp_type'
p28212
S'std::vector<double, std::allocator<double> >'
p28213
sS'default'
p28214
g3
sS'name'
p28215
S'start_time'
p28216
sS'required'
p28217
I00
sS'group_name'
p28218
Nsa(dp28219
S'description'
p28220
g3
sS'cpp_type'
p28221
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28222
sS'default'
p28223
S'TimePeriod'
p28224
sS'name'
p28225
S'type'
p28226
sS'required'
p28227
I00
sS'group_name'
p28228
NsasS'name'
p28229
S'/Controls/TimePeriod'
p28230
sasS'parameters'
p28231
NsS'name'
p28232
S'/Controls'
p28233
sa(dp28234
S'description'
p28235
g3
sS'subblocks'
p28236
(lp28237
(dp28238
S'description'
p28239
g3
sS'subblocks'
p28240
NsS'parameters'
p28241
(lp28242
(dp28243
S'description'
p28244
S'A string representing the Moose Object that will be built by this Action\n'
p28245
sS'cpp_type'
p28246
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28247
sS'default'
p28248
g3
sS'name'
p28249
S'type'
p28250
sS'required'
p28251
I01
sS'group_name'
p28252
NsasS'name'
p28253
S'/DGKernels/*'
p28254
sa(dp28255
S'description'
p28256
S'DG upwinding for the convection\n'
p28257
sS'subblocks'
p28258
NsS'parameters'
p28259
(lp28260
(dp28261
S'description'
p28262
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28263
sS'cpp_type'
p28264
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28265
sS'default'
p28266
g3
sS'name'
p28267
S'block'
p28268
sS'required'
p28269
I00
sS'group_name'
p28270
Nsa(dp28271
S'description'
p28272
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28273
sS'cpp_type'
p28274
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28275
sS'default'
p28276
g3
sS'name'
p28277
S'boundary'
p28278
sS'required'
p28279
I00
sS'group_name'
p28280
Nsa(dp28281
S'description'
p28282
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28283
sS'cpp_type'
p28284
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28285
sS'default'
p28286
g3
sS'name'
p28287
S'control_tags'
p28288
sS'required'
p28289
I00
sS'group_name'
p28290
S'Advanced'
p28291
sa(dp28292
S'description'
p28293
S'Set the enabled status of the MooseObject.\n'
p28294
sS'cpp_type'
p28295
S'bool'
p28296
sS'default'
p28297
S'1'
p28298
sS'name'
p28299
S'enable'
p28300
sS'required'
p28301
I00
sS'group_name'
p28302
S'Advanced'
p28303
sa(dp28304
S'description'
p28305
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28306
sS'cpp_type'
p28307
S'bool'
p28308
sS'default'
p28309
S'1'
p28310
sS'name'
p28311
S'implicit'
p28312
sS'required'
p28313
I00
sS'group_name'
p28314
S'Advanced'
p28315
sa(dp28316
S'description'
p28317
g3
sS'cpp_type'
p28318
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28319
sS'default'
p28320
S'DGConvection'
p28321
sS'name'
p28322
S'type'
p28323
sS'required'
p28324
I00
sS'group_name'
p28325
Nsa(dp28326
S'description'
p28327
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28328
sS'cpp_type'
p28329
S'bool'
p28330
sS'default'
p28331
S'0'
p28332
sS'name'
p28333
S'use_displaced_mesh'
p28334
sS'required'
p28335
I00
sS'group_name'
p28336
S'Advanced'
p28337
sa(dp28338
S'description'
p28339
S'The name of the variable that this boundary condition applies to\n'
p28340
sS'cpp_type'
p28341
S'NonlinearVariableName'
p28342
sS'default'
p28343
g3
sS'name'
p28344
S'variable'
p28345
sS'required'
p28346
I01
sS'group_name'
p28347
Nsa(dp28348
S'description'
p28349
S'Velocity vector\n'
p28350
sS'cpp_type'
p28351
S'libMesh::VectorValue<double>'
p28352
sS'default'
p28353
g3
sS'name'
p28354
S'velocity'
p28355
sS'required'
p28356
I01
sS'group_name'
p28357
NsasS'name'
p28358
S'/DGKernels/DGConvection'
p28359
sa(dp28360
S'description'
p28361
g3
sS'subblocks'
p28362
NsS'parameters'
p28363
(lp28364
(dp28365
S'description'
p28366
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28367
sS'cpp_type'
p28368
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28369
sS'default'
p28370
g3
sS'name'
p28371
S'block'
p28372
sS'required'
p28373
I00
sS'group_name'
p28374
Nsa(dp28375
S'description'
p28376
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28377
sS'cpp_type'
p28378
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28379
sS'default'
p28380
g3
sS'name'
p28381
S'boundary'
p28382
sS'required'
p28383
I00
sS'group_name'
p28384
Nsa(dp28385
S'description'
p28386
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28387
sS'cpp_type'
p28388
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28389
sS'default'
p28390
g3
sS'name'
p28391
S'control_tags'
p28392
sS'required'
p28393
I00
sS'group_name'
p28394
S'Advanced'
p28395
sa(dp28396
S'description'
p28397
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p28398
sS'cpp_type'
p28399
S'MaterialPropertyName'
p28400
sS'default'
p28401
S'1'
p28402
sS'name'
p28403
S'diff'
p28404
sS'required'
p28405
I00
sS'group_name'
p28406
Nsa(dp28407
S'description'
p28408
S'Set the enabled status of the MooseObject.\n'
p28409
sS'cpp_type'
p28410
S'bool'
p28411
sS'default'
p28412
S'1'
p28413
sS'name'
p28414
S'enable'
p28415
sS'required'
p28416
I00
sS'group_name'
p28417
S'Advanced'
p28418
sa(dp28419
S'description'
p28420
S'epsilon\n'
p28421
sS'cpp_type'
p28422
S'double'
p28423
sS'default'
p28424
g3
sS'name'
p28425
S'epsilon'
p28426
sS'required'
p28427
I01
sS'group_name'
p28428
Nsa(dp28429
S'description'
p28430
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28431
sS'cpp_type'
p28432
S'bool'
p28433
sS'default'
p28434
S'1'
p28435
sS'name'
p28436
S'implicit'
p28437
sS'required'
p28438
I00
sS'group_name'
p28439
S'Advanced'
p28440
sa(dp28441
S'description'
p28442
S'sigma\n'
p28443
sS'cpp_type'
p28444
S'double'
p28445
sS'default'
p28446
g3
sS'name'
p28447
S'sigma'
p28448
sS'required'
p28449
I01
sS'group_name'
p28450
Nsa(dp28451
S'description'
p28452
g3
sS'cpp_type'
p28453
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28454
sS'default'
p28455
S'DGDiffusion'
p28456
sS'name'
p28457
S'type'
p28458
sS'required'
p28459
I00
sS'group_name'
p28460
Nsa(dp28461
S'description'
p28462
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28463
sS'cpp_type'
p28464
S'bool'
p28465
sS'default'
p28466
S'0'
p28467
sS'name'
p28468
S'use_displaced_mesh'
p28469
sS'required'
p28470
I00
sS'group_name'
p28471
S'Advanced'
p28472
sa(dp28473
S'description'
p28474
S'The name of the variable that this boundary condition applies to\n'
p28475
sS'cpp_type'
p28476
S'NonlinearVariableName'
p28477
sS'default'
p28478
g3
sS'name'
p28479
S'variable'
p28480
sS'required'
p28481
I01
sS'group_name'
p28482
NsasS'name'
p28483
S'/DGKernels/DGDiffusion'
p28484
sasS'parameters'
p28485
NsS'name'
p28486
S'/DGKernels'
p28487
sa(dp28488
S'description'
p28489
g3
sS'subblocks'
p28490
(lp28491
(dp28492
S'description'
p28493
g3
sS'subblocks'
p28494
NsS'parameters'
p28495
(lp28496
(dp28497
S'description'
p28498
S'A string representing the Moose Object that will be built by this Action\n'
p28499
sS'cpp_type'
p28500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28501
sS'default'
p28502
g3
sS'name'
p28503
S'type'
p28504
sS'required'
p28505
I01
sS'group_name'
p28506
NsasS'name'
p28507
S'/Dampers/*'
p28508
sa(dp28509
S'description'
p28510
g3
sS'subblocks'
p28511
NsS'parameters'
p28512
(lp28513
(dp28514
S'description'
p28515
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28516
sS'cpp_type'
p28517
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28518
sS'default'
p28519
g3
sS'name'
p28520
S'control_tags'
p28521
sS'required'
p28522
I00
sS'group_name'
p28523
S'Advanced'
p28524
sa(dp28525
S'description'
p28526
S'Set the enabled status of the MooseObject.\n'
p28527
sS'cpp_type'
p28528
S'bool'
p28529
sS'default'
p28530
S'1'
p28531
sS'name'
p28532
S'enable'
p28533
sS'required'
p28534
I00
sS'group_name'
p28535
S'Advanced'
p28536
sa(dp28537
S'description'
p28538
S'The maximum permissible iterative value for the variable.\n'
p28539
sS'cpp_type'
p28540
S'double'
p28541
sS'default'
p28542
S'1.79769e+308'
p28543
sS'name'
p28544
S'max_value'
p28545
sS'required'
p28546
I00
sS'group_name'
p28547
Nsa(dp28548
S'description'
p28549
S'The minimum permissible iterative value for the variable.\n'
p28550
sS'cpp_type'
p28551
S'double'
p28552
sS'default'
p28553
S'-1.79769e+308'
p28554
sS'name'
p28555
S'min_value'
p28556
sS'required'
p28557
I00
sS'group_name'
p28558
Nsa(dp28559
S'description'
p28560
g3
sS'cpp_type'
p28561
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28562
sS'default'
p28563
S'BoundingValueElementDamper'
p28564
sS'name'
p28565
S'type'
p28566
sS'required'
p28567
I00
sS'group_name'
p28568
Nsa(dp28569
S'description'
p28570
S'The name of the variable that this damper operates on\n'
p28571
sS'cpp_type'
p28572
S'NonlinearVariableName'
p28573
sS'default'
p28574
g3
sS'name'
p28575
S'variable'
p28576
sS'required'
p28577
I01
sS'group_name'
p28578
NsasS'name'
p28579
S'/Dampers/BoundingValueElementDamper'
p28580
sa(dp28581
S'description'
p28582
g3
sS'subblocks'
p28583
NsS'parameters'
p28584
(lp28585
(dp28586
S'description'
p28587
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28588
sS'cpp_type'
p28589
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28590
sS'default'
p28591
g3
sS'name'
p28592
S'control_tags'
p28593
sS'required'
p28594
I00
sS'group_name'
p28595
S'Advanced'
p28596
sa(dp28597
S'description'
p28598
S'Set the enabled status of the MooseObject.\n'
p28599
sS'cpp_type'
p28600
S'bool'
p28601
sS'default'
p28602
S'1'
p28603
sS'name'
p28604
S'enable'
p28605
sS'required'
p28606
I00
sS'group_name'
p28607
S'Advanced'
p28608
sa(dp28609
S'description'
p28610
S'The maximum permissible iterative value for the variable.\n'
p28611
sS'cpp_type'
p28612
S'double'
p28613
sS'default'
p28614
S'1.79769e+308'
p28615
sS'name'
p28616
S'max_value'
p28617
sS'required'
p28618
I00
sS'group_name'
p28619
Nsa(dp28620
S'description'
p28621
S'The minimum permissible iterative value for the variable.\n'
p28622
sS'cpp_type'
p28623
S'double'
p28624
sS'default'
p28625
S'-1.79769e+308'
p28626
sS'name'
p28627
S'min_value'
p28628
sS'required'
p28629
I00
sS'group_name'
p28630
Nsa(dp28631
S'description'
p28632
g3
sS'cpp_type'
p28633
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28634
sS'default'
p28635
S'BoundingValueNodalDamper'
p28636
sS'name'
p28637
S'type'
p28638
sS'required'
p28639
I00
sS'group_name'
p28640
Nsa(dp28641
S'description'
p28642
S'The name of the variable that this damper operates on\n'
p28643
sS'cpp_type'
p28644
S'NonlinearVariableName'
p28645
sS'default'
p28646
g3
sS'name'
p28647
S'variable'
p28648
sS'required'
p28649
I01
sS'group_name'
p28650
NsasS'name'
p28651
S'/Dampers/BoundingValueNodalDamper'
p28652
sa(dp28653
S'description'
p28654
g3
sS'subblocks'
p28655
NsS'parameters'
p28656
(lp28657
(dp28658
S'description'
p28659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28660
sS'cpp_type'
p28661
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28662
sS'default'
p28663
g3
sS'name'
p28664
S'control_tags'
p28665
sS'required'
p28666
I00
sS'group_name'
p28667
S'Advanced'
p28668
sa(dp28669
S'description'
p28670
S'The percentage (between 0 and 1) of the newton update to take.\n'
p28671
sS'cpp_type'
p28672
S'double'
p28673
sS'default'
p28674
g3
sS'name'
p28675
S'damping'
p28676
sS'required'
p28677
I01
sS'group_name'
p28678
Nsa(dp28679
S'description'
p28680
S'Set the enabled status of the MooseObject.\n'
p28681
sS'cpp_type'
p28682
S'bool'
p28683
sS'default'
p28684
S'1'
p28685
sS'name'
p28686
S'enable'
p28687
sS'required'
p28688
I00
sS'group_name'
p28689
S'Advanced'
p28690
sa(dp28691
S'description'
p28692
g3
sS'cpp_type'
p28693
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28694
sS'default'
p28695
S'ConstantDamper'
p28696
sS'name'
p28697
S'type'
p28698
sS'required'
p28699
I00
sS'group_name'
p28700
NsasS'name'
p28701
S'/Dampers/ConstantDamper'
p28702
sa(dp28703
S'description'
p28704
S'Damper that limits the change in element Jacobians\n'
p28705
sS'subblocks'
p28706
NsS'parameters'
p28707
(lp28708
(dp28709
S'description'
p28710
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28711
sS'cpp_type'
p28712
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28713
sS'default'
p28714
g3
sS'name'
p28715
S'control_tags'
p28716
sS'required'
p28717
I00
sS'group_name'
p28718
S'Advanced'
p28719
sa(dp28720
S'description'
p28721
S'The nonlinear displacement variables\n'
p28722
sS'cpp_type'
p28723
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p28724
sS'default'
p28725
g3
sS'name'
p28726
S'displacements'
p28727
sS'required'
p28728
I00
sS'group_name'
p28729
Nsa(dp28730
S'description'
p28731
S'Set the enabled status of the MooseObject.\n'
p28732
sS'cpp_type'
p28733
S'bool'
p28734
sS'default'
p28735
S'1'
p28736
sS'name'
p28737
S'enable'
p28738
sS'required'
p28739
I00
sS'group_name'
p28740
S'Advanced'
p28741
sa(dp28742
S'description'
p28743
S'The maximum permissible relative increment in the Jacobian per Newton iteration\n'
p28744
sS'cpp_type'
p28745
S'double'
p28746
sS'default'
p28747
S'0.1'
p28748
sS'name'
p28749
S'max_increment'
p28750
sS'required'
p28751
I00
sS'group_name'
p28752
Nsa(dp28753
S'description'
p28754
g3
sS'cpp_type'
p28755
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28756
sS'default'
p28757
S'ElementJacobianDamper'
p28758
sS'name'
p28759
S'type'
p28760
sS'required'
p28761
I00
sS'group_name'
p28762
Nsa(dp28763
S'description'
p28764
g3
sS'cpp_type'
p28765
S'bool'
p28766
sS'default'
p28767
S'1'
p28768
sS'name'
p28769
S'use_displaced_mesh'
p28770
sS'required'
p28771
I00
sS'group_name'
p28772
NsasS'name'
p28773
S'/Dampers/ElementJacobianDamper'
p28774
sa(dp28775
S'description'
p28776
g3
sS'subblocks'
p28777
NsS'parameters'
p28778
(lp28779
(dp28780
S'description'
p28781
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28782
sS'cpp_type'
p28783
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28784
sS'default'
p28785
g3
sS'name'
p28786
S'control_tags'
p28787
sS'required'
p28788
I00
sS'group_name'
p28789
S'Advanced'
p28790
sa(dp28791
S'description'
p28792
S'Set the enabled status of the MooseObject.\n'
p28793
sS'cpp_type'
p28794
S'bool'
p28795
sS'default'
p28796
S'1'
p28797
sS'name'
p28798
S'enable'
p28799
sS'required'
p28800
I00
sS'group_name'
p28801
S'Advanced'
p28802
sa(dp28803
S'description'
p28804
S'The maximum newton increment for the variable.\n'
p28805
sS'cpp_type'
p28806
S'double'
p28807
sS'default'
p28808
g3
sS'name'
p28809
S'max_increment'
p28810
sS'required'
p28811
I01
sS'group_name'
p28812
Nsa(dp28813
S'description'
p28814
g3
sS'cpp_type'
p28815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28816
sS'default'
p28817
S'MaxIncrement'
p28818
sS'name'
p28819
S'type'
p28820
sS'required'
p28821
I00
sS'group_name'
p28822
Nsa(dp28823
S'description'
p28824
S'The name of the variable that this damper operates on\n'
p28825
sS'cpp_type'
p28826
S'NonlinearVariableName'
p28827
sS'default'
p28828
g3
sS'name'
p28829
S'variable'
p28830
sS'required'
p28831
I01
sS'group_name'
p28832
NsasS'name'
p28833
S'/Dampers/MaxIncrement'
p28834
sasS'parameters'
p28835
NsS'name'
p28836
S'/Dampers'
p28837
sa(dp28838
S'description'
p28839
g3
sS'subblocks'
p28840
NsS'parameters'
p28841
(lp28842
(dp28843
S'description'
p28844
S'Print out the actions being executed\n'
p28845
sS'cpp_type'
p28846
S'bool'
p28847
sS'default'
p28848
S'0'
p28849
sS'name'
p28850
S'show_actions'
p28851
sS'required'
p28852
I00
sS'group_name'
p28853
Nsa(dp28854
S'description'
p28855
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p28856
sS'cpp_type'
p28857
S'bool'
p28858
sS'default'
p28859
S'0'
p28860
sS'name'
p28861
S'show_material_props'
p28862
sS'required'
p28863
I00
sS'group_name'
p28864
Nsa(dp28865
S'description'
p28866
S'Shows parser block extraction and debugging information\n'
p28867
sS'cpp_type'
p28868
S'bool'
p28869
sS'default'
p28870
S'0'
p28871
sS'name'
p28872
S'show_parser'
p28873
sS'required'
p28874
I00
sS'group_name'
p28875
Nsa(dp28876
S'description'
p28877
S'The number of top residuals to print out (0 = no output)\n'
p28878
sS'cpp_type'
p28879
S'unsigned int'
p28880
sS'default'
p28881
S'0'
p28882
sS'name'
p28883
S'show_top_residuals'
p28884
sS'required'
p28885
I00
sS'group_name'
p28886
Nsa(dp28887
S'description'
p28888
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p28889
sS'cpp_type'
p28890
S'bool'
p28891
sS'default'
p28892
S'0'
p28893
sS'name'
p28894
S'show_var_residual_norms'
p28895
sS'required'
p28896
I00
sS'group_name'
p28897
Nsa(dp28898
S'description'
p28899
S'Variables for which residuals will be sent to the output file\n'
p28900
sS'cpp_type'
p28901
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p28902
sS'default'
p28903
g3
sS'name'
p28904
S'show_var_residual'
p28905
sS'required'
p28906
I00
sS'group_name'
p28907
NsasS'name'
p28908
S'/Debug'
p28909
sa(dp28910
S'description'
p28911
g3
sS'subblocks'
p28912
NsS'parameters'
p28913
(lp28914
(dp28915
S'description'
p28916
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p28917
sS'cpp_type'
p28918
S'bool'
p28919
sS'default'
p28920
g3
sS'name'
p28921
S'DEPRECATED'
p28922
sS'required'
p28923
I00
sS'group_name'
p28924
NsasS'name'
p28925
S'/DeprecatedBlock'
p28926
sa(dp28927
S'description'
p28928
g3
sS'subblocks'
p28929
(lp28930
(dp28931
S'description'
p28932
g3
sS'subblocks'
p28933
NsS'parameters'
p28934
(lp28935
(dp28936
S'description'
p28937
S'A string representing the Moose Object that will be built by this Action\n'
p28938
sS'cpp_type'
p28939
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28940
sS'default'
p28941
g3
sS'name'
p28942
S'type'
p28943
sS'required'
p28944
I01
sS'group_name'
p28945
NsasS'name'
p28946
S'/DiracKernels/*'
p28947
sa(dp28948
S'description'
p28949
g3
sS'subblocks'
p28950
NsS'parameters'
p28951
(lp28952
(dp28953
S'description'
p28954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28955
sS'cpp_type'
p28956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28957
sS'default'
p28958
g3
sS'name'
p28959
S'control_tags'
p28960
sS'required'
p28961
I00
sS'group_name'
p28962
S'Advanced'
p28963
sa(dp28964
S'description'
p28965
S'By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n'
p28966
sS'cpp_type'
p28967
S'bool'
p28968
sS'default'
p28969
S'1'
p28970
sS'name'
p28971
S'drop_duplicate_points'
p28972
sS'required'
p28973
I00
sS'group_name'
p28974
S'Advanced'
p28975
sa(dp28976
S'description'
p28977
S'Set the enabled status of the MooseObject.\n'
p28978
sS'cpp_type'
p28979
S'bool'
p28980
sS'default'
p28981
S'1'
p28982
sS'name'
p28983
S'enable'
p28984
sS'required'
p28985
I00
sS'group_name'
p28986
S'Advanced'
p28987
sa(dp28988
S'description'
p28989
S'The x,y,z coordinates of the point\n'
p28990
sS'cpp_type'
p28991
S'std::vector<double, std::allocator<double> >'
p28992
sS'default'
p28993
g3
sS'name'
p28994
S'point'
p28995
sS'required'
p28996
I01
sS'group_name'
p28997
Nsa(dp28998
S'description'
p28999
g3
sS'cpp_type'
p29000
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29001
sS'default'
p29002
S'ConstantPointSource'
p29003
sS'name'
p29004
S'type'
p29005
sS'required'
p29006
I00
sS'group_name'
p29007
Nsa(dp29008
S'description'
p29009
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29010
sS'cpp_type'
p29011
S'bool'
p29012
sS'default'
p29013
S'0'
p29014
sS'name'
p29015
S'use_displaced_mesh'
p29016
sS'required'
p29017
I00
sS'group_name'
p29018
S'Advanced'
p29019
sa(dp29020
S'description'
p29021
S'The value of the point source\n'
p29022
sS'cpp_type'
p29023
S'double'
p29024
sS'default'
p29025
g3
sS'name'
p29026
S'value'
p29027
sS'required'
p29028
I01
sS'group_name'
p29029
Nsa(dp29030
S'description'
p29031
S'The name of the variable that this kernel operates on\n'
p29032
sS'cpp_type'
p29033
S'NonlinearVariableName'
p29034
sS'default'
p29035
g3
sS'name'
p29036
S'variable'
p29037
sS'required'
p29038
I01
sS'group_name'
p29039
NsasS'name'
p29040
S'/DiracKernels/ConstantPointSource'
p29041
sasS'parameters'
p29042
NsS'name'
p29043
S'/DiracKernels'
p29044
sa(dp29045
S'description'
p29046
g3
sS'subblocks'
p29047
(lp29048
(dp29049
S'description'
p29050
g3
sS'subblocks'
p29051
NsS'parameters'
p29052
(lp29053
(dp29054
S'description'
p29055
S'A string representing the Moose Object that will be built by this Action\n'
p29056
sS'cpp_type'
p29057
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29058
sS'default'
p29059
g3
sS'name'
p29060
S'type'
p29061
sS'required'
p29062
I01
sS'group_name'
p29063
NsasS'name'
p29064
S'/Distributions/*'
p29065
sasS'parameters'
p29066
NsS'name'
p29067
S'/Distributions'
p29068
sa(dp29069
S'description'
p29070
g3
sS'subblocks'
p29071
(lp29072
(dp29073
S'description'
p29074
g3
sS'subblocks'
p29075
(lp29076
(dp29077
S'description'
p29078
g3
sS'subblocks'
p29079
NsS'parameters'
p29080
(lp29081
(dp29082
S'description'
p29083
S'If Chebyshev acceleration is turned on\n'
p29084
sS'cpp_type'
p29085
S'bool'
p29086
sS'default'
p29087
S'1'
p29088
sS'name'
p29089
S'Chebyshev_acceleration_on'
p29090
sS'required'
p29091
I00
sS'group_name'
p29092
Nsa(dp29093
S'description'
p29094
S'True to ask the solver to set initial\n'
p29095
sS'cpp_type'
p29096
S'bool'
p29097
sS'default'
p29098
S'1'
p29099
sS'name'
p29100
S'auto_initialization'
p29101
sS'required'
p29102
I00
sS'group_name'
p29103
S'Advanced'
p29104
sa(dp29105
S'description'
p29106
S'To evaluate |Bx| for the eigenvalue\n'
p29107
sS'cpp_type'
p29108
S'PostprocessorName'
p29109
sS'default'
p29110
g3
sS'name'
p29111
S'bx_norm'
p29112
sS'required'
p29113
I01
sS'group_name'
p29114
Nsa(dp29115
S'description'
p29116
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p29117
sS'cpp_type'
p29118
S'bool'
p29119
sS'default'
p29120
S'0'
p29121
sS'name'
p29122
S'compute_initial_residual_before_preset_bcs'
p29123
sS'required'
p29124
I00
sS'group_name'
p29125
S'Solver'
p29126
sa(dp29127
S'description'
p29128
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29129
sS'cpp_type'
p29130
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29131
sS'default'
p29132
g3
sS'name'
p29133
S'control_tags'
p29134
sS'required'
p29135
I00
sS'group_name'
p29136
S'Advanced'
p29137
sa(dp29138
S'description'
p29139
S'Eigenvalue convergence tolerance\n'
p29140
sS'cpp_type'
p29141
S'double'
p29142
sS'default'
p29143
S'1e-06'
p29144
sS'name'
p29145
S'eig_check_tol'
p29146
sS'required'
p29147
I00
sS'group_name'
p29148
Nsa(dp29149
S'description'
p29150
S'Set the enabled status of the MooseObject.\n'
p29151
sS'cpp_type'
p29152
S'bool'
p29153
sS'default'
p29154
S'1'
p29155
sS'name'
p29156
S'enable'
p29157
sS'required'
p29158
I00
sS'group_name'
p29159
S'Advanced'
p29160
sa(dp29161
S'description'
p29162
S'Initial guess of the eigenvalue\n'
p29163
sS'cpp_type'
p29164
S'double'
p29165
sS'default'
p29166
S'1'
p29167
sS'name'
p29168
S'k0'
p29169
sS'required'
p29170
I00
sS'group_name'
p29171
Nsa(dp29172
S'description'
p29173
S'Linear Absolute Step Tolerance\n'
p29174
sS'cpp_type'
p29175
S'double'
p29176
sS'default'
p29177
S'-1'
p29178
sS'name'
p29179
S'l_abs_step_tol'
p29180
sS'required'
p29181
I00
sS'group_name'
p29182
S'Solver'
p29183
sa(dp29184
S'description'
p29185
S'Max Linear Iterations\n'
p29186
sS'cpp_type'
p29187
S'unsigned int'
p29188
sS'default'
p29189
S'10000'
p29190
sS'name'
p29191
S'l_max_its'
p29192
sS'required'
p29193
I00
sS'group_name'
p29194
S'Solver'
p29195
sa(dp29196
S'description'
p29197
S'Linear Tolerance\n'
p29198
sS'cpp_type'
p29199
S'double'
p29200
sS'default'
p29201
S'1e-05'
p29202
sS'name'
p29203
S'l_tol'
p29204
sS'required'
p29205
I00
sS'group_name'
p29206
S'Solver'
p29207
sa(dp29208
S'name'
p29209
S'line_search'
p29210
sS'cpp_type'
p29211
S'MooseEnum'
p29212
sS'default'
p29213
S'default'
p29214
sS'description'
p29215
S'Specifies the line search type (Note: none = basic)\n'
p29216
sS'required'
p29217
I00
sS'options'
p29218
S'default shell none basic l2 bt cp'
p29219
sS'group_name'
p29220
Nsa(dp29221
S'description'
p29222
S'The maximum number of power iterations\n'
p29223
sS'cpp_type'
p29224
S'unsigned int'
p29225
sS'default'
p29226
S'300'
p29227
sS'name'
p29228
S'max_power_iterations'
p29229
sS'required'
p29230
I00
sS'group_name'
p29231
Nsa(dp29232
S'description'
p29233
S'Minimum number of power iterations\n'
p29234
sS'cpp_type'
p29235
S'unsigned int'
p29236
sS'default'
p29237
S'1'
p29238
sS'name'
p29239
S'min_power_iterations'
p29240
sS'required'
p29241
I00
sS'group_name'
p29242
Nsa(dp29243
S'description'
p29244
S'Nonlinear Absolute step Tolerance\n'
p29245
sS'cpp_type'
p29246
S'double'
p29247
sS'default'
p29248
S'1e-50'
p29249
sS'name'
p29250
S'nl_abs_step_tol'
p29251
sS'required'
p29252
I00
sS'group_name'
p29253
S'Solver'
p29254
sa(dp29255
S'description'
p29256
S'Nonlinear Absolute Tolerance\n'
p29257
sS'cpp_type'
p29258
S'double'
p29259
sS'default'
p29260
S'1e-50'
p29261
sS'name'
p29262
S'nl_abs_tol'
p29263
sS'required'
p29264
I00
sS'group_name'
p29265
S'Solver'
p29266
sa(dp29267
S'description'
p29268
S'Max Nonlinear solver function evaluations\n'
p29269
sS'cpp_type'
p29270
S'unsigned int'
p29271
sS'default'
p29272
S'10000'
p29273
sS'name'
p29274
S'nl_max_funcs'
p29275
sS'required'
p29276
I00
sS'group_name'
p29277
S'Solver'
p29278
sa(dp29279
S'description'
p29280
S'Max Nonlinear Iterations\n'
p29281
sS'cpp_type'
p29282
S'unsigned int'
p29283
sS'default'
p29284
S'50'
p29285
sS'name'
p29286
S'nl_max_its'
p29287
sS'required'
p29288
I00
sS'group_name'
p29289
S'Solver'
p29290
sa(dp29291
S'description'
p29292
S'Nonlinear Relative step Tolerance\n'
p29293
sS'cpp_type'
p29294
S'double'
p29295
sS'default'
p29296
S'1e-50'
p29297
sS'name'
p29298
S'nl_rel_step_tol'
p29299
sS'required'
p29300
I00
sS'group_name'
p29301
S'Solver'
p29302
sa(dp29303
S'description'
p29304
S'Nonlinear Relative Tolerance\n'
p29305
sS'cpp_type'
p29306
S'double'
p29307
sS'default'
p29308
S'1e-08'
p29309
sS'name'
p29310
S'nl_rel_tol'
p29311
sS'required'
p29312
I00
sS'group_name'
p29313
S'Solver'
p29314
sa(dp29315
S'description'
p29316
S'Specifies whether or not to reinitialize FEs\n'
p29317
sS'cpp_type'
p29318
S'bool'
p29319
sS'default'
p29320
S'0'
p29321
sS'name'
p29322
S'no_fe_reinit'
p29323
sS'required'
p29324
I00
sS'group_name'
p29325
S'Advanced'
p29326
sa(dp29327
S'description'
p29328
S'Normalize x to make |x| equal to this factor\n'
p29329
sS'cpp_type'
p29330
S'double'
p29331
sS'default'
p29332
g3
sS'name'
p29333
S'normal_factor'
p29334
sS'required'
p29335
I00
sS'group_name'
p29336
S'Normalization'
p29337
sa(dp29338
S'description'
p29339
S'To evaluate |x| for normalization\n'
p29340
sS'cpp_type'
p29341
S'PostprocessorName'
p29342
sS'default'
p29343
g3
sS'name'
p29344
S'normalization'
p29345
sS'required'
p29346
I00
sS'group_name'
p29347
S'Normalization'
p29348
sa(dp29349
S'description'
p29350
S'True to output a step before normalization\n'
p29351
sS'cpp_type'
p29352
S'bool'
p29353
sS'default'
p29354
S'1'
p29355
sS'name'
p29356
S'output_before_normalization'
p29357
sS'required'
p29358
I00
sS'group_name'
p29359
S'Normalization'
p29360
sa(dp29361
S'name'
p29362
S'petsc_options'
p29363
sS'cpp_type'
p29364
S'MultiMooseEnum'
p29365
sS'default'
p29366
g3
sS'description'
p29367
S'Singleton PETSc options\n'
p29368
sS'required'
p29369
I00
sS'options'
p29370
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p29371
sS'group_name'
p29372
Nsa(dp29373
S'name'
p29374
S'petsc_options_iname'
p29375
sS'cpp_type'
p29376
S'MultiMooseEnum'
p29377
sS'default'
p29378
g3
sS'description'
p29379
S'Names of PETSc name/value pairs\n'
p29380
sS'required'
p29381
I00
sS'options'
p29382
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p29383
sS'group_name'
p29384
Nsa(dp29385
S'description'
p29386
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p29387
sS'cpp_type'
p29388
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29389
sS'default'
p29390
g3
sS'name'
p29391
S'petsc_options_value'
p29392
sS'required'
p29393
I00
sS'group_name'
p29394
Nsa(dp29395
S'description'
p29396
S'Reduce residual norm per power iteration by this factor\n'
p29397
sS'cpp_type'
p29398
S'double'
p29399
sS'default'
p29400
S'0.01'
p29401
sS'name'
p29402
S'pfactor'
p29403
sS'required'
p29404
I00
sS'group_name'
p29405
Nsa(dp29406
S'description'
p29407
S'File base name used for restart\n'
p29408
sS'cpp_type'
p29409
S'FileNameNoExtension'
p29410
sS'default'
p29411
g3
sS'name'
p29412
S'restart_file_base'
p29413
sS'required'
p29414
I00
sS'group_name'
p29415
S'Restart'
p29416
sa(dp29417
S'description'
p29418
S'Convergence tolerance on |x-x_previous| when provided\n'
p29419
sS'cpp_type'
p29420
S'double'
p29421
sS'default'
p29422
S'1.79769e+308'
p29423
sS'name'
p29424
S'sol_check_tol'
p29425
sS'required'
p29426
I00
sS'group_name'
p29427
Nsa(dp29428
S'name'
p29429
S'solve_type'
p29430
sS'cpp_type'
p29431
S'MooseEnum'
p29432
sS'default'
p29433
g3
sS'description'
p29434
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p29435
sS'required'
p29436
I00
sS'options'
p29437
S'PJFNK JFNK NEWTON FD LINEAR'
p29438
sS'group_name'
p29439
Nsa(dp29440
S'description'
p29441
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p29442
sS'cpp_type'
p29443
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29444
sS'default'
p29445
g3
sS'name'
p29446
S'splitting'
p29447
sS'required'
p29448
I00
sS'group_name'
p29449
Nsa(dp29450
S'description'
p29451
S'System time\n'
p29452
sS'cpp_type'
p29453
S'double'
p29454
sS'default'
p29455
S'0'
p29456
sS'name'
p29457
S'time'
p29458
sS'required'
p29459
I00
sS'group_name'
p29460
S'Advanced'
p29461
sa(dp29462
S'description'
p29463
g3
sS'cpp_type'
p29464
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29465
sS'default'
p29466
S'InversePowerMethod'
p29467
sS'name'
p29468
S'type'
p29469
sS'required'
p29470
I00
sS'group_name'
p29471
Nsa(dp29472
S'description'
p29473
S'To evaluate |x-x_previous| for power iterations\n'
p29474
sS'cpp_type'
p29475
S'PostprocessorName'
p29476
sS'default'
p29477
g3
sS'name'
p29478
S'xdiff'
p29479
sS'required'
p29480
I00
sS'group_name'
p29481
NsasS'name'
p29482
S'/Executioner/<type>/InversePowerMethod'
p29483
sa(dp29484
S'description'
p29485
g3
sS'subblocks'
p29486
NsS'parameters'
p29487
(lp29488
(dp29489
S'description'
p29490
S'True to ask the solver to set initial\n'
p29491
sS'cpp_type'
p29492
S'bool'
p29493
sS'default'
p29494
S'1'
p29495
sS'name'
p29496
S'auto_initialization'
p29497
sS'required'
p29498
I00
sS'group_name'
p29499
S'Advanced'
p29500
sa(dp29501
S'description'
p29502
S'To evaluate |Bx| for the eigenvalue\n'
p29503
sS'cpp_type'
p29504
S'PostprocessorName'
p29505
sS'default'
p29506
g3
sS'name'
p29507
S'bx_norm'
p29508
sS'required'
p29509
I01
sS'group_name'
p29510
Nsa(dp29511
S'description'
p29512
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p29513
sS'cpp_type'
p29514
S'bool'
p29515
sS'default'
p29516
S'0'
p29517
sS'name'
p29518
S'compute_initial_residual_before_preset_bcs'
p29519
sS'required'
p29520
I00
sS'group_name'
p29521
S'Solver'
p29522
sa(dp29523
S'description'
p29524
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29525
sS'cpp_type'
p29526
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29527
sS'default'
p29528
g3
sS'name'
p29529
S'control_tags'
p29530
sS'required'
p29531
I00
sS'group_name'
p29532
S'Advanced'
p29533
sa(dp29534
S'description'
p29535
S'Set the enabled status of the MooseObject.\n'
p29536
sS'cpp_type'
p29537
S'bool'
p29538
sS'default'
p29539
S'1'
p29540
sS'name'
p29541
S'enable'
p29542
sS'required'
p29543
I00
sS'group_name'
p29544
S'Advanced'
p29545
sa(dp29546
S'description'
p29547
S'The number of free power iterations\n'
p29548
sS'cpp_type'
p29549
S'unsigned int'
p29550
sS'default'
p29551
S'4'
p29552
sS'name'
p29553
S'free_power_iterations'
p29554
sS'required'
p29555
I00
sS'group_name'
p29556
Nsa(dp29557
S'description'
p29558
S'Initial guess of the eigenvalue\n'
p29559
sS'cpp_type'
p29560
S'double'
p29561
sS'default'
p29562
S'1'
p29563
sS'name'
p29564
S'k0'
p29565
sS'required'
p29566
I00
sS'group_name'
p29567
Nsa(dp29568
S'description'
p29569
S'Linear Absolute Step Tolerance\n'
p29570
sS'cpp_type'
p29571
S'double'
p29572
sS'default'
p29573
S'-1'
p29574
sS'name'
p29575
S'l_abs_step_tol'
p29576
sS'required'
p29577
I00
sS'group_name'
p29578
S'Solver'
p29579
sa(dp29580
S'description'
p29581
S'Max Linear Iterations\n'
p29582
sS'cpp_type'
p29583
S'unsigned int'
p29584
sS'default'
p29585
S'10000'
p29586
sS'name'
p29587
S'l_max_its'
p29588
sS'required'
p29589
I00
sS'group_name'
p29590
S'Solver'
p29591
sa(dp29592
S'description'
p29593
S'Linear Tolerance\n'
p29594
sS'cpp_type'
p29595
S'double'
p29596
sS'default'
p29597
S'1e-05'
p29598
sS'name'
p29599
S'l_tol'
p29600
sS'required'
p29601
I00
sS'group_name'
p29602
S'Solver'
p29603
sa(dp29604
S'name'
p29605
S'line_search'
p29606
sS'cpp_type'
p29607
S'MooseEnum'
p29608
sS'default'
p29609
S'default'
p29610
sS'description'
p29611
S'Specifies the line search type (Note: none = basic)\n'
p29612
sS'required'
p29613
I00
sS'options'
p29614
S'default shell none basic l2 bt cp'
p29615
sS'group_name'
p29616
Nsa(dp29617
S'description'
p29618
S'Nonlinear Absolute step Tolerance\n'
p29619
sS'cpp_type'
p29620
S'double'
p29621
sS'default'
p29622
S'1e-50'
p29623
sS'name'
p29624
S'nl_abs_step_tol'
p29625
sS'required'
p29626
I00
sS'group_name'
p29627
S'Solver'
p29628
sa(dp29629
S'description'
p29630
S'Nonlinear Absolute Tolerance\n'
p29631
sS'cpp_type'
p29632
S'double'
p29633
sS'default'
p29634
S'1e-50'
p29635
sS'name'
p29636
S'nl_abs_tol'
p29637
sS'required'
p29638
I00
sS'group_name'
p29639
S'Solver'
p29640
sa(dp29641
S'description'
p29642
S'Max Nonlinear solver function evaluations\n'
p29643
sS'cpp_type'
p29644
S'unsigned int'
p29645
sS'default'
p29646
S'10000'
p29647
sS'name'
p29648
S'nl_max_funcs'
p29649
sS'required'
p29650
I00
sS'group_name'
p29651
S'Solver'
p29652
sa(dp29653
S'description'
p29654
S'Max Nonlinear Iterations\n'
p29655
sS'cpp_type'
p29656
S'unsigned int'
p29657
sS'default'
p29658
S'50'
p29659
sS'name'
p29660
S'nl_max_its'
p29661
sS'required'
p29662
I00
sS'group_name'
p29663
S'Solver'
p29664
sa(dp29665
S'description'
p29666
S'Nonlinear Relative step Tolerance\n'
p29667
sS'cpp_type'
p29668
S'double'
p29669
sS'default'
p29670
S'1e-50'
p29671
sS'name'
p29672
S'nl_rel_step_tol'
p29673
sS'required'
p29674
I00
sS'group_name'
p29675
S'Solver'
p29676
sa(dp29677
S'description'
p29678
S'Nonlinear Relative Tolerance\n'
p29679
sS'cpp_type'
p29680
S'double'
p29681
sS'default'
p29682
S'1e-08'
p29683
sS'name'
p29684
S'nl_rel_tol'
p29685
sS'required'
p29686
I00
sS'group_name'
p29687
S'Solver'
p29688
sa(dp29689
S'description'
p29690
S'Specifies whether or not to reinitialize FEs\n'
p29691
sS'cpp_type'
p29692
S'bool'
p29693
sS'default'
p29694
S'0'
p29695
sS'name'
p29696
S'no_fe_reinit'
p29697
sS'required'
p29698
I00
sS'group_name'
p29699
S'Advanced'
p29700
sa(dp29701
S'description'
p29702
S'Normalize x to make |x| equal to this factor\n'
p29703
sS'cpp_type'
p29704
S'double'
p29705
sS'default'
p29706
g3
sS'name'
p29707
S'normal_factor'
p29708
sS'required'
p29709
I00
sS'group_name'
p29710
S'Normalization'
p29711
sa(dp29712
S'description'
p29713
S'To evaluate |x| for normalization\n'
p29714
sS'cpp_type'
p29715
S'PostprocessorName'
p29716
sS'default'
p29717
g3
sS'name'
p29718
S'normalization'
p29719
sS'required'
p29720
I00
sS'group_name'
p29721
S'Normalization'
p29722
sa(dp29723
S'description'
p29724
S'True to output solution after free power iterations\n'
p29725
sS'cpp_type'
p29726
S'bool'
p29727
sS'default'
p29728
S'1'
p29729
sS'name'
p29730
S'output_after_power_iterations'
p29731
sS'required'
p29732
I00
sS'group_name'
p29733
Nsa(dp29734
S'description'
p29735
S'True to output a step before normalization\n'
p29736
sS'cpp_type'
p29737
S'bool'
p29738
sS'default'
p29739
S'1'
p29740
sS'name'
p29741
S'output_before_normalization'
p29742
sS'required'
p29743
I00
sS'group_name'
p29744
S'Normalization'
p29745
sa(dp29746
S'name'
p29747
S'petsc_options'
p29748
sS'cpp_type'
p29749
S'MultiMooseEnum'
p29750
sS'default'
p29751
g3
sS'description'
p29752
S'Singleton PETSc options\n'
p29753
sS'required'
p29754
I00
sS'options'
p29755
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p29756
sS'group_name'
p29757
Nsa(dp29758
S'name'
p29759
S'petsc_options_iname'
p29760
sS'cpp_type'
p29761
S'MultiMooseEnum'
p29762
sS'default'
p29763
g3
sS'description'
p29764
S'Names of PETSc name/value pairs\n'
p29765
sS'required'
p29766
I00
sS'options'
p29767
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p29768
sS'group_name'
p29769
Nsa(dp29770
S'description'
p29771
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p29772
sS'cpp_type'
p29773
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29774
sS'default'
p29775
g3
sS'name'
p29776
S'petsc_options_value'
p29777
sS'required'
p29778
I00
sS'group_name'
p29779
Nsa(dp29780
S'description'
p29781
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p29782
sS'cpp_type'
p29783
S'double'
p29784
sS'default'
p29785
S'0.01'
p29786
sS'name'
p29787
S'pfactor'
p29788
sS'required'
p29789
I00
sS'group_name'
p29790
Nsa(dp29791
S'description'
p29792
S'File base name used for restart\n'
p29793
sS'cpp_type'
p29794
S'FileNameNoExtension'
p29795
sS'default'
p29796
g3
sS'name'
p29797
S'restart_file_base'
p29798
sS'required'
p29799
I00
sS'group_name'
p29800
S'Restart'
p29801
sa(dp29802
S'name'
p29803
S'solve_type'
p29804
sS'cpp_type'
p29805
S'MooseEnum'
p29806
sS'default'
p29807
g3
sS'description'
p29808
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p29809
sS'required'
p29810
I00
sS'options'
p29811
S'PJFNK JFNK NEWTON FD LINEAR'
p29812
sS'group_name'
p29813
Nsa(dp29814
S'description'
p29815
S'Absolute tolernance on residual norm\n'
p29816
sS'cpp_type'
p29817
S'double'
p29818
sS'default'
p29819
S'1e-06'
p29820
sS'name'
p29821
S'source_abs_tol'
p29822
sS'required'
p29823
I00
sS'group_name'
p29824
Nsa(dp29825
S'description'
p29826
S'Relative tolernance on residual norm after free power iterations\n'
p29827
sS'cpp_type'
p29828
S'double'
p29829
sS'default'
p29830
S'1e-50'
p29831
sS'name'
p29832
S'source_rel_tol'
p29833
sS'required'
p29834
I00
sS'group_name'
p29835
Nsa(dp29836
S'description'
p29837
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p29838
sS'cpp_type'
p29839
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29840
sS'default'
p29841
g3
sS'name'
p29842
S'splitting'
p29843
sS'required'
p29844
I00
sS'group_name'
p29845
Nsa(dp29846
S'description'
p29847
S'System time\n'
p29848
sS'cpp_type'
p29849
S'double'
p29850
sS'default'
p29851
S'0'
p29852
sS'name'
p29853
S'time'
p29854
sS'required'
p29855
I00
sS'group_name'
p29856
S'Advanced'
p29857
sa(dp29858
S'description'
p29859
g3
sS'cpp_type'
p29860
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29861
sS'default'
p29862
S'NonlinearEigen'
p29863
sS'name'
p29864
S'type'
p29865
sS'required'
p29866
I00
sS'group_name'
p29867
NsasS'name'
p29868
S'/Executioner/<type>/NonlinearEigen'
p29869
sa(dp29870
S'description'
p29871
g3
sS'subblocks'
p29872
NsS'parameters'
p29873
(lp29874
(dp29875
S'description'
p29876
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p29877
sS'cpp_type'
p29878
S'bool'
p29879
sS'default'
p29880
S'0'
p29881
sS'name'
p29882
S'compute_initial_residual_before_preset_bcs'
p29883
sS'required'
p29884
I00
sS'group_name'
p29885
S'Solver'
p29886
sa(dp29887
S'description'
p29888
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29889
sS'cpp_type'
p29890
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29891
sS'default'
p29892
g3
sS'name'
p29893
S'control_tags'
p29894
sS'required'
p29895
I00
sS'group_name'
p29896
S'Advanced'
p29897
sa(dp29898
S'description'
p29899
S'Set the enabled status of the MooseObject.\n'
p29900
sS'cpp_type'
p29901
S'bool'
p29902
sS'default'
p29903
S'1'
p29904
sS'name'
p29905
S'enable'
p29906
sS'required'
p29907
I00
sS'group_name'
p29908
S'Advanced'
p29909
sa(dp29910
S'description'
p29911
S'Linear Absolute Step Tolerance\n'
p29912
sS'cpp_type'
p29913
S'double'
p29914
sS'default'
p29915
S'-1'
p29916
sS'name'
p29917
S'l_abs_step_tol'
p29918
sS'required'
p29919
I00
sS'group_name'
p29920
S'Solver'
p29921
sa(dp29922
S'description'
p29923
S'Max Linear Iterations\n'
p29924
sS'cpp_type'
p29925
S'unsigned int'
p29926
sS'default'
p29927
S'10000'
p29928
sS'name'
p29929
S'l_max_its'
p29930
sS'required'
p29931
I00
sS'group_name'
p29932
S'Solver'
p29933
sa(dp29934
S'description'
p29935
S'Linear Tolerance\n'
p29936
sS'cpp_type'
p29937
S'double'
p29938
sS'default'
p29939
S'1e-05'
p29940
sS'name'
p29941
S'l_tol'
p29942
sS'required'
p29943
I00
sS'group_name'
p29944
S'Solver'
p29945
sa(dp29946
S'name'
p29947
S'line_search'
p29948
sS'cpp_type'
p29949
S'MooseEnum'
p29950
sS'default'
p29951
S'default'
p29952
sS'description'
p29953
S'Specifies the line search type (Note: none = basic)\n'
p29954
sS'required'
p29955
I00
sS'options'
p29956
S'default shell none basic l2 bt cp'
p29957
sS'group_name'
p29958
Nsa(dp29959
S'description'
p29960
S'Nonlinear Absolute step Tolerance\n'
p29961
sS'cpp_type'
p29962
S'double'
p29963
sS'default'
p29964
S'1e-50'
p29965
sS'name'
p29966
S'nl_abs_step_tol'
p29967
sS'required'
p29968
I00
sS'group_name'
p29969
S'Solver'
p29970
sa(dp29971
S'description'
p29972
S'Nonlinear Absolute Tolerance\n'
p29973
sS'cpp_type'
p29974
S'double'
p29975
sS'default'
p29976
S'1e-50'
p29977
sS'name'
p29978
S'nl_abs_tol'
p29979
sS'required'
p29980
I00
sS'group_name'
p29981
S'Solver'
p29982
sa(dp29983
S'description'
p29984
S'Max Nonlinear solver function evaluations\n'
p29985
sS'cpp_type'
p29986
S'unsigned int'
p29987
sS'default'
p29988
S'10000'
p29989
sS'name'
p29990
S'nl_max_funcs'
p29991
sS'required'
p29992
I00
sS'group_name'
p29993
S'Solver'
p29994
sa(dp29995
S'description'
p29996
S'Max Nonlinear Iterations\n'
p29997
sS'cpp_type'
p29998
S'unsigned int'
p29999
sS'default'
p30000
S'50'
p30001
sS'name'
p30002
S'nl_max_its'
p30003
sS'required'
p30004
I00
sS'group_name'
p30005
S'Solver'
p30006
sa(dp30007
S'description'
p30008
S'Nonlinear Relative step Tolerance\n'
p30009
sS'cpp_type'
p30010
S'double'
p30011
sS'default'
p30012
S'1e-50'
p30013
sS'name'
p30014
S'nl_rel_step_tol'
p30015
sS'required'
p30016
I00
sS'group_name'
p30017
S'Solver'
p30018
sa(dp30019
S'description'
p30020
S'Nonlinear Relative Tolerance\n'
p30021
sS'cpp_type'
p30022
S'double'
p30023
sS'default'
p30024
S'1e-08'
p30025
sS'name'
p30026
S'nl_rel_tol'
p30027
sS'required'
p30028
I00
sS'group_name'
p30029
S'Solver'
p30030
sa(dp30031
S'description'
p30032
S'Specifies whether or not to reinitialize FEs\n'
p30033
sS'cpp_type'
p30034
S'bool'
p30035
sS'default'
p30036
S'0'
p30037
sS'name'
p30038
S'no_fe_reinit'
p30039
sS'required'
p30040
I00
sS'group_name'
p30041
S'Advanced'
p30042
sa(dp30043
S'name'
p30044
S'petsc_options'
p30045
sS'cpp_type'
p30046
S'MultiMooseEnum'
p30047
sS'default'
p30048
g3
sS'description'
p30049
S'Singleton PETSc options\n'
p30050
sS'required'
p30051
I00
sS'options'
p30052
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p30053
sS'group_name'
p30054
Nsa(dp30055
S'name'
p30056
S'petsc_options_iname'
p30057
sS'cpp_type'
p30058
S'MultiMooseEnum'
p30059
sS'default'
p30060
g3
sS'description'
p30061
S'Names of PETSc name/value pairs\n'
p30062
sS'required'
p30063
I00
sS'options'
p30064
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p30065
sS'group_name'
p30066
Nsa(dp30067
S'description'
p30068
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p30069
sS'cpp_type'
p30070
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30071
sS'default'
p30072
g3
sS'name'
p30073
S'petsc_options_value'
p30074
sS'required'
p30075
I00
sS'group_name'
p30076
Nsa(dp30077
S'description'
p30078
S'File base name used for restart\n'
p30079
sS'cpp_type'
p30080
S'FileNameNoExtension'
p30081
sS'default'
p30082
g3
sS'name'
p30083
S'restart_file_base'
p30084
sS'required'
p30085
I00
sS'group_name'
p30086
S'Restart'
p30087
sa(dp30088
S'name'
p30089
S'solve_type'
p30090
sS'cpp_type'
p30091
S'MooseEnum'
p30092
sS'default'
p30093
g3
sS'description'
p30094
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p30095
sS'required'
p30096
I00
sS'options'
p30097
S'PJFNK JFNK NEWTON FD LINEAR'
p30098
sS'group_name'
p30099
Nsa(dp30100
S'description'
p30101
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p30102
sS'cpp_type'
p30103
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30104
sS'default'
p30105
g3
sS'name'
p30106
S'splitting'
p30107
sS'required'
p30108
I00
sS'group_name'
p30109
Nsa(dp30110
S'description'
p30111
g3
sS'cpp_type'
p30112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30113
sS'default'
p30114
S'Steady'
p30115
sS'name'
p30116
S'type'
p30117
sS'required'
p30118
I00
sS'group_name'
p30119
NsasS'name'
p30120
S'/Executioner/<type>/Steady'
p30121
sa(dp30122
S'description'
p30123
g3
sS'subblocks'
p30124
NsS'parameters'
p30125
(lp30126
(dp30127
S'description'
p30128
S'abort if solve not converged rather than cut timestep\n'
p30129
sS'cpp_type'
p30130
S'bool'
p30131
sS'default'
p30132
S'0'
p30133
sS'name'
p30134
S'abort_on_solve_fail'
p30135
sS'required'
p30136
I00
sS'group_name'
p30137
S'Advanced'
p30138
sa(dp30139
S'description'
p30140
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p30141
sS'cpp_type'
p30142
S'bool'
p30143
sS'default'
p30144
S'0'
p30145
sS'name'
p30146
S'compute_initial_residual_before_preset_bcs'
p30147
sS'required'
p30148
I00
sS'group_name'
p30149
S'Solver'
p30150
sa(dp30151
S'description'
p30152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30153
sS'cpp_type'
p30154
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30155
sS'default'
p30156
g3
sS'name'
p30157
S'control_tags'
p30158
sS'required'
p30159
I00
sS'group_name'
p30160
S'Advanced'
p30161
sa(dp30162
S'description'
p30163
S'The timestep size between solves\n'
p30164
sS'cpp_type'
p30165
S'double'
p30166
sS'default'
p30167
S'1'
p30168
sS'name'
p30169
S'dt'
p30170
sS'required'
p30171
I00
sS'group_name'
p30172
Nsa(dp30173
S'description'
p30174
S'The maximum timestep size in an adaptive run\n'
p30175
sS'cpp_type'
p30176
S'double'
p30177
sS'default'
p30178
S'1e+30'
p30179
sS'name'
p30180
S'dtmax'
p30181
sS'required'
p30182
I00
sS'group_name'
p30183
S'Advanced'
p30184
sa(dp30185
S'description'
p30186
S'The minimum timestep size in an adaptive run\n'
p30187
sS'cpp_type'
p30188
S'double'
p30189
sS'default'
p30190
S'2e-14'
p30191
sS'name'
p30192
S'dtmin'
p30193
sS'required'
p30194
I00
sS'group_name'
p30195
S'Advanced'
p30196
sa(dp30197
S'description'
p30198
S'Set the enabled status of the MooseObject.\n'
p30199
sS'cpp_type'
p30200
S'bool'
p30201
sS'default'
p30202
S'1'
p30203
sS'name'
p30204
S'enable'
p30205
sS'required'
p30206
I00
sS'group_name'
p30207
S'Advanced'
p30208
sa(dp30209
S'description'
p30210
S'The end time of the simulation\n'
p30211
sS'cpp_type'
p30212
S'double'
p30213
sS'default'
p30214
S'1e+30'
p30215
sS'name'
p30216
S'end_time'
p30217
sS'required'
p30218
I00
sS'group_name'
p30219
Nsa(dp30220
S'description'
p30221
S'Linear Absolute Step Tolerance\n'
p30222
sS'cpp_type'
p30223
S'double'
p30224
sS'default'
p30225
S'-1'
p30226
sS'name'
p30227
S'l_abs_step_tol'
p30228
sS'required'
p30229
I00
sS'group_name'
p30230
S'Solver'
p30231
sa(dp30232
S'description'
p30233
S'Max Linear Iterations\n'
p30234
sS'cpp_type'
p30235
S'unsigned int'
p30236
sS'default'
p30237
S'10000'
p30238
sS'name'
p30239
S'l_max_its'
p30240
sS'required'
p30241
I00
sS'group_name'
p30242
S'Solver'
p30243
sa(dp30244
S'description'
p30245
S'Linear Tolerance\n'
p30246
sS'cpp_type'
p30247
S'double'
p30248
sS'default'
p30249
S'1e-05'
p30250
sS'name'
p30251
S'l_tol'
p30252
sS'required'
p30253
I00
sS'group_name'
p30254
S'Solver'
p30255
sa(dp30256
S'name'
p30257
S'line_search'
p30258
sS'cpp_type'
p30259
S'MooseEnum'
p30260
sS'default'
p30261
S'default'
p30262
sS'description'
p30263
S'Specifies the line search type (Note: none = basic)\n'
p30264
sS'required'
p30265
I00
sS'options'
p30266
S'default shell none basic l2 bt cp'
p30267
sS'group_name'
p30268
Nsa(dp30269
S'description'
p30270
S'Maximum number of times to update XFEM crack topology in a step due to evolving cracks\n'
p30271
sS'cpp_type'
p30272
S'unsigned int'
p30273
sS'default'
p30274
S'4294967295'
p30275
sS'name'
p30276
S'max_xfem_update'
p30277
sS'required'
p30278
I00
sS'group_name'
p30279
Nsa(dp30280
S'description'
p30281
S'The number of timesteps during startup\n'
p30282
sS'cpp_type'
p30283
S'int'
p30284
sS'default'
p30285
S'0'
p30286
sS'name'
p30287
S'n_startup_steps'
p30288
sS'required'
p30289
I00
sS'group_name'
p30290
S'Advanced'
p30291
sa(dp30292
S'description'
p30293
S'Nonlinear Absolute step Tolerance\n'
p30294
sS'cpp_type'
p30295
S'double'
p30296
sS'default'
p30297
S'1e-50'
p30298
sS'name'
p30299
S'nl_abs_step_tol'
p30300
sS'required'
p30301
I00
sS'group_name'
p30302
S'Solver'
p30303
sa(dp30304
S'description'
p30305
S'Nonlinear Absolute Tolerance\n'
p30306
sS'cpp_type'
p30307
S'double'
p30308
sS'default'
p30309
S'1e-50'
p30310
sS'name'
p30311
S'nl_abs_tol'
p30312
sS'required'
p30313
I00
sS'group_name'
p30314
S'Solver'
p30315
sa(dp30316
S'description'
p30317
S'Max Nonlinear solver function evaluations\n'
p30318
sS'cpp_type'
p30319
S'unsigned int'
p30320
sS'default'
p30321
S'10000'
p30322
sS'name'
p30323
S'nl_max_funcs'
p30324
sS'required'
p30325
I00
sS'group_name'
p30326
S'Solver'
p30327
sa(dp30328
S'description'
p30329
S'Max Nonlinear Iterations\n'
p30330
sS'cpp_type'
p30331
S'unsigned int'
p30332
sS'default'
p30333
S'50'
p30334
sS'name'
p30335
S'nl_max_its'
p30336
sS'required'
p30337
I00
sS'group_name'
p30338
S'Solver'
p30339
sa(dp30340
S'description'
p30341
S'Nonlinear Relative step Tolerance\n'
p30342
sS'cpp_type'
p30343
S'double'
p30344
sS'default'
p30345
S'1e-50'
p30346
sS'name'
p30347
S'nl_rel_step_tol'
p30348
sS'required'
p30349
I00
sS'group_name'
p30350
S'Solver'
p30351
sa(dp30352
S'description'
p30353
S'Nonlinear Relative Tolerance\n'
p30354
sS'cpp_type'
p30355
S'double'
p30356
sS'default'
p30357
S'1e-08'
p30358
sS'name'
p30359
S'nl_rel_tol'
p30360
sS'required'
p30361
I00
sS'group_name'
p30362
S'Solver'
p30363
sa(dp30364
S'description'
p30365
S'Specifies whether or not to reinitialize FEs\n'
p30366
sS'cpp_type'
p30367
S'bool'
p30368
sS'default'
p30369
S'0'
p30370
sS'name'
p30371
S'no_fe_reinit'
p30372
sS'required'
p30373
I00
sS'group_name'
p30374
S'Advanced'
p30375
sa(dp30376
S'description'
p30377
S'The number of timesteps in a transient run\n'
p30378
sS'cpp_type'
p30379
S'unsigned int'
p30380
sS'default'
p30381
S'4294967295'
p30382
sS'name'
p30383
S'num_steps'
p30384
sS'required'
p30385
I00
sS'group_name'
p30386
Nsa(dp30387
S'name'
p30388
S'petsc_options'
p30389
sS'cpp_type'
p30390
S'MultiMooseEnum'
p30391
sS'default'
p30392
g3
sS'description'
p30393
S'Singleton PETSc options\n'
p30394
sS'required'
p30395
I00
sS'options'
p30396
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p30397
sS'group_name'
p30398
Nsa(dp30399
S'name'
p30400
S'petsc_options_iname'
p30401
sS'cpp_type'
p30402
S'MultiMooseEnum'
p30403
sS'default'
p30404
g3
sS'description'
p30405
S'Names of PETSc name/value pairs\n'
p30406
sS'required'
p30407
I00
sS'options'
p30408
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p30409
sS'group_name'
p30410
Nsa(dp30411
S'description'
p30412
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p30413
sS'cpp_type'
p30414
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30415
sS'default'
p30416
g3
sS'name'
p30417
S'petsc_options_value'
p30418
sS'required'
p30419
I00
sS'group_name'
p30420
Nsa(dp30421
S'description'
p30422
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p30423
sS'cpp_type'
p30424
S'double'
p30425
sS'default'
p30426
S'1e-50'
p30427
sS'name'
p30428
S'picard_abs_tol'
p30429
sS'required'
p30430
I00
sS'group_name'
p30431
S'Picard'
p30432
sa(dp30433
S'description'
p30434
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p30435
sS'cpp_type'
p30436
S'unsigned int'
p30437
sS'default'
p30438
S'1'
p30439
sS'name'
p30440
S'picard_max_its'
p30441
sS'required'
p30442
I00
sS'group_name'
p30443
S'Picard'
p30444
sa(dp30445
S'description'
p30446
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p30447
sS'cpp_type'
p30448
S'double'
p30449
sS'default'
p30450
S'1e-08'
p30451
sS'name'
p30452
S'picard_rel_tol'
p30453
sS'required'
p30454
I00
sS'group_name'
p30455
S'Picard'
p30456
sa(dp30457
S'description'
p30458
S'Use when restarting a calculation to force a change in dt.\n'
p30459
sS'cpp_type'
p30460
S'bool'
p30461
sS'default'
p30462
S'0'
p30463
sS'name'
p30464
S'reset_dt'
p30465
sS'required'
p30466
I00
sS'group_name'
p30467
Nsa(dp30468
S'description'
p30469
S'File base name used for restart\n'
p30470
sS'cpp_type'
p30471
S'FileNameNoExtension'
p30472
sS'default'
p30473
g3
sS'name'
p30474
S'restart_file_base'
p30475
sS'required'
p30476
I00
sS'group_name'
p30477
S'Restart'
p30478
sa(dp30479
S'name'
p30480
S'scheme'
p30481
sS'cpp_type'
p30482
S'MooseEnum'
p30483
sS'default'
p30484
g3
sS'description'
p30485
S'Time integration scheme used.\n'
p30486
sS'required'
p30487
I00
sS'options'
p30488
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk explicit-tvd-rk-2'
p30489
sS'group_name'
p30490
Nsa(dp30491
S'name'
p30492
S'solve_type'
p30493
sS'cpp_type'
p30494
S'MooseEnum'
p30495
sS'default'
p30496
g3
sS'description'
p30497
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p30498
sS'required'
p30499
I00
sS'options'
p30500
S'PJFNK JFNK NEWTON FD LINEAR'
p30501
sS'group_name'
p30502
Nsa(dp30503
S'description'
p30504
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p30505
sS'cpp_type'
p30506
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30507
sS'default'
p30508
g3
sS'name'
p30509
S'splitting'
p30510
sS'required'
p30511
I00
sS'group_name'
p30512
Nsa(dp30513
S'description'
p30514
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p30515
sS'cpp_type'
p30516
S'double'
p30517
sS'default'
p30518
S'1e-08'
p30519
sS'name'
p30520
S'ss_check_tol'
p30521
sS'required'
p30522
I00
sS'group_name'
p30523
S'Advanced'
p30524
sa(dp30525
S'description'
p30526
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p30527
sS'cpp_type'
p30528
S'double'
p30529
sS'default'
p30530
S'0'
p30531
sS'name'
p30532
S'ss_tmin'
p30533
sS'required'
p30534
I00
sS'group_name'
p30535
S'Advanced'
p30536
sa(dp30537
S'description'
p30538
S'The start time of the simulation\n'
p30539
sS'cpp_type'
p30540
S'double'
p30541
sS'default'
p30542
S'0'
p30543
sS'name'
p30544
S'start_time'
p30545
sS'required'
p30546
I00
sS'group_name'
p30547
S'Advanced'
p30548
sa(dp30549
S'description'
p30550
S'The end times of time periods\n'
p30551
sS'cpp_type'
p30552
S'std::vector<double, std::allocator<double> >'
p30553
sS'default'
p30554
g3
sS'name'
p30555
S'time_period_ends'
p30556
sS'required'
p30557
I00
sS'group_name'
p30558
S'Time Periods'
p30559
sa(dp30560
S'description'
p30561
S'The start times of time periods\n'
p30562
sS'cpp_type'
p30563
S'std::vector<double, std::allocator<double> >'
p30564
sS'default'
p30565
g3
sS'name'
p30566
S'time_period_starts'
p30567
sS'required'
p30568
I00
sS'group_name'
p30569
S'Time Periods'
p30570
sa(dp30571
S'description'
p30572
S'The names of periods\n'
p30573
sS'cpp_type'
p30574
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30575
sS'default'
p30576
g3
sS'name'
p30577
S'time_periods'
p30578
sS'required'
p30579
I00
sS'group_name'
p30580
S'Time Periods'
p30581
sa(dp30582
S'description'
p30583
S'the tolerance setting for final timestep size and sync times\n'
p30584
sS'cpp_type'
p30585
S'double'
p30586
sS'default'
p30587
S'2e-14'
p30588
sS'name'
p30589
S'timestep_tolerance'
p30590
sS'required'
p30591
I00
sS'group_name'
p30592
S'Advanced'
p30593
sa(dp30594
S'description'
p30595
S'Whether or not to check for steady state conditions\n'
p30596
sS'cpp_type'
p30597
S'bool'
p30598
sS'default'
p30599
S'0'
p30600
sS'name'
p30601
S'trans_ss_check'
p30602
sS'required'
p30603
I00
sS'group_name'
p30604
S'Advanced'
p30605
sa(dp30606
S'description'
p30607
g3
sS'cpp_type'
p30608
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30609
sS'default'
p30610
S'Transient'
p30611
sS'name'
p30612
S'type'
p30613
sS'required'
p30614
I00
sS'group_name'
p30615
Nsa(dp30616
S'description'
p30617
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p30618
sS'cpp_type'
p30619
S'bool'
p30620
sS'default'
p30621
S'0'
p30622
sS'name'
p30623
S'use_multiapp_dt'
p30624
sS'required'
p30625
I00
sS'group_name'
p30626
S'Advanced'
p30627
sa(dp30628
S'description'
p30629
S'Print detailed diagnostics on timestep calculation\n'
p30630
sS'cpp_type'
p30631
S'bool'
p30632
sS'default'
p30633
S'0'
p30634
sS'name'
p30635
S'verbose'
p30636
sS'required'
p30637
I00
sS'group_name'
p30638
NsasS'name'
p30639
S'/Executioner/<type>/Transient'
p30640
sasS'parameters'
p30641
NsS'name'
p30642
S'/Executioner/<type>'
p30643
sa(dp30644
S'description'
p30645
g3
sS'subblocks'
p30646
NsS'parameters'
p30647
(lp30648
(dp30649
S'description'
p30650
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p30651
sS'cpp_type'
p30652
S'double'
p30653
sS'default'
p30654
S'0'
p30655
sS'name'
p30656
S'coarsen_fraction'
p30657
sS'required'
p30658
I00
sS'group_name'
p30659
Nsa(dp30660
S'description'
p30661
S'The number of adaptivity cycles per step\n'
p30662
sS'cpp_type'
p30663
S'unsigned int'
p30664
sS'default'
p30665
S'1'
p30666
sS'name'
p30667
S'cycles_per_step'
p30668
sS'required'
p30669
I00
sS'group_name'
p30670
Nsa(dp30671
S'name'
p30672
S'error_estimator'
p30673
sS'cpp_type'
p30674
S'MooseEnum'
p30675
sS'default'
p30676
S'KellyErrorEstimator'
p30677
sS'description'
p30678
S'The class name of the error estimator you want to use.\n'
p30679
sS'required'
p30680
I00
sS'options'
p30681
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p30682
sS'group_name'
p30683
Nsa(dp30684
S'description'
p30685
S'The number of adaptivity steps to perform using the initial conditions\n'
p30686
sS'cpp_type'
p30687
S'unsigned int'
p30688
sS'default'
p30689
S'0'
p30690
sS'name'
p30691
S'initial_adaptivity'
p30692
sS'required'
p30693
I00
sS'group_name'
p30694
Nsa(dp30695
S'description'
p30696
S'The number of time steps betweeen each adaptivity phase\n'
p30697
sS'cpp_type'
p30698
S'unsigned int'
p30699
sS'default'
p30700
S'1'
p30701
sS'name'
p30702
S'interval'
p30703
sS'required'
p30704
I00
sS'group_name'
p30705
Nsa(dp30706
S'description'
p30707
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p30708
sS'cpp_type'
p30709
S'unsigned int'
p30710
sS'default'
p30711
S'0'
p30712
sS'name'
p30713
S'max_h_level'
p30714
sS'required'
p30715
I00
sS'group_name'
p30716
Nsa(dp30717
S'description'
p30718
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p30719
sS'cpp_type'
p30720
S'bool'
p30721
sS'default'
p30722
S'0'
p30723
sS'name'
p30724
S'print_changed_info'
p30725
sS'required'
p30726
I00
sS'group_name'
p30727
Nsa(dp30728
S'description'
p30729
S'Recompute markers during adaptivity cycles\n'
p30730
sS'cpp_type'
p30731
S'bool'
p30732
sS'default'
p30733
S'0'
p30734
sS'name'
p30735
S'recompute_markers_during_cycles'
p30736
sS'required'
p30737
I00
sS'group_name'
p30738
Nsa(dp30739
S'description'
p30740
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p30741
sS'cpp_type'
p30742
S'double'
p30743
sS'default'
p30744
S'0'
p30745
sS'name'
p30746
S'refine_fraction'
p30747
sS'required'
p30748
I00
sS'group_name'
p30749
Nsa(dp30750
S'description'
p30751
S'Show the progress of the initial adaptivity\n'
p30752
sS'cpp_type'
p30753
S'bool'
p30754
sS'default'
p30755
S'1'
p30756
sS'name'
p30757
S'show_initial_progress'
p30758
sS'required'
p30759
I00
sS'group_name'
p30760
Nsa(dp30761
S'description'
p30762
S'The time that adaptivity will be active after.\n'
p30763
sS'cpp_type'
p30764
S'double'
p30765
sS'default'
p30766
S'-1.79769e+308'
p30767
sS'name'
p30768
S'start_time'
p30769
sS'required'
p30770
I00
sS'group_name'
p30771
Nsa(dp30772
S'description'
p30773
S'The number of adaptivity steps to perform at any one time for steady state\n'
p30774
sS'cpp_type'
p30775
S'unsigned int'
p30776
sS'default'
p30777
S'0'
p30778
sS'name'
p30779
S'steps'
p30780
sS'required'
p30781
I00
sS'group_name'
p30782
Nsa(dp30783
S'description'
p30784
S'The time after which adaptivity will no longer be active.\n'
p30785
sS'cpp_type'
p30786
S'double'
p30787
sS'default'
p30788
S'1.79769e+308'
p30789
sS'name'
p30790
S'stop_time'
p30791
sS'required'
p30792
I00
sS'group_name'
p30793
Nsa(dp30794
S'description'
p30795
S'List of names of variables that will be associated with weight_values\n'
p30796
sS'cpp_type'
p30797
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30798
sS'default'
p30799
g3
sS'name'
p30800
S'weight_names'
p30801
sS'required'
p30802
I00
sS'group_name'
p30803
Nsa(dp30804
S'description'
p30805
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p30806
sS'cpp_type'
p30807
S'std::vector<double, std::allocator<double> >'
p30808
sS'default'
p30809
g3
sS'name'
p30810
S'weight_values'
p30811
sS'required'
p30812
I00
sS'group_name'
p30813
NsasS'name'
p30814
S'/Executioner/Adaptivity'
p30815
sa(dp30816
S'description'
p30817
g3
sS'subblocks'
p30818
(lp30819
(dp30820
S'description'
p30821
g3
sS'subblocks'
p30822
(lp30823
(dp30824
S'description'
p30825
g3
sS'subblocks'
p30826
NsS'parameters'
p30827
(lp30828
(dp30829
S'description'
p30830
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30831
sS'cpp_type'
p30832
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30833
sS'default'
p30834
g3
sS'name'
p30835
S'control_tags'
p30836
sS'required'
p30837
I00
sS'group_name'
p30838
S'Advanced'
p30839
sa(dp30840
S'description'
p30841
S'Set the enabled status of the MooseObject.\n'
p30842
sS'cpp_type'
p30843
S'bool'
p30844
sS'default'
p30845
S'1'
p30846
sS'name'
p30847
S'enable'
p30848
sS'required'
p30849
I00
sS'group_name'
p30850
S'Advanced'
p30851
sa(dp30852
S'description'
p30853
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p30854
sS'cpp_type'
p30855
S'int'
p30856
sS'default'
p30857
S'2'
p30858
sS'name'
p30859
S'order'
p30860
sS'required'
p30861
I00
sS'group_name'
p30862
Nsa(dp30863
S'description'
p30864
S'The scale factor for the predictor (can range from 0 to 1)\n'
p30865
sS'cpp_type'
p30866
S'double'
p30867
sS'default'
p30868
g3
sS'name'
p30869
S'scale'
p30870
sS'required'
p30871
I01
sS'group_name'
p30872
Nsa(dp30873
S'description'
p30874
S'Skip the predictor if the current solution time is in this list of times\n'
p30875
sS'cpp_type'
p30876
S'std::vector<double, std::allocator<double> >'
p30877
sS'default'
p30878
g3
sS'name'
p30879
S'skip_times'
p30880
sS'required'
p30881
I00
sS'group_name'
p30882
Nsa(dp30883
S'description'
p30884
S'Skip the predictor if the previous solution time is in this list of times\n'
p30885
sS'cpp_type'
p30886
S'std::vector<double, std::allocator<double> >'
p30887
sS'default'
p30888
g3
sS'name'
p30889
S'skip_times_old'
p30890
sS'required'
p30891
I00
sS'group_name'
p30892
Nsa(dp30893
S'description'
p30894
g3
sS'cpp_type'
p30895
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30896
sS'default'
p30897
S'AdamsPredictor'
p30898
sS'name'
p30899
S'type'
p30900
sS'required'
p30901
I00
sS'group_name'
p30902
NsasS'name'
p30903
S'/Executioner/Predictor/<type>/AdamsPredictor'
p30904
sa(dp30905
S'description'
p30906
g3
sS'subblocks'
p30907
NsS'parameters'
p30908
(lp30909
(dp30910
S'description'
p30911
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30912
sS'cpp_type'
p30913
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30914
sS'default'
p30915
g3
sS'name'
p30916
S'control_tags'
p30917
sS'required'
p30918
I00
sS'group_name'
p30919
S'Advanced'
p30920
sa(dp30921
S'description'
p30922
S'Set the enabled status of the MooseObject.\n'
p30923
sS'cpp_type'
p30924
S'bool'
p30925
sS'default'
p30926
S'1'
p30927
sS'name'
p30928
S'enable'
p30929
sS'required'
p30930
I00
sS'group_name'
p30931
S'Advanced'
p30932
sa(dp30933
S'description'
p30934
S'The scale factor for the predictor (can range from 0 to 1)\n'
p30935
sS'cpp_type'
p30936
S'double'
p30937
sS'default'
p30938
g3
sS'name'
p30939
S'scale'
p30940
sS'required'
p30941
I01
sS'group_name'
p30942
Nsa(dp30943
S'description'
p30944
S'Skip the predictor if the current solution time is in this list of times\n'
p30945
sS'cpp_type'
p30946
S'std::vector<double, std::allocator<double> >'
p30947
sS'default'
p30948
g3
sS'name'
p30949
S'skip_times'
p30950
sS'required'
p30951
I00
sS'group_name'
p30952
Nsa(dp30953
S'description'
p30954
S'Skip the predictor if the previous solution time is in this list of times\n'
p30955
sS'cpp_type'
p30956
S'std::vector<double, std::allocator<double> >'
p30957
sS'default'
p30958
g3
sS'name'
p30959
S'skip_times_old'
p30960
sS'required'
p30961
I00
sS'group_name'
p30962
Nsa(dp30963
S'description'
p30964
g3
sS'cpp_type'
p30965
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30966
sS'default'
p30967
S'SimplePredictor'
p30968
sS'name'
p30969
S'type'
p30970
sS'required'
p30971
I00
sS'group_name'
p30972
NsasS'name'
p30973
S'/Executioner/Predictor/<type>/SimplePredictor'
p30974
sasS'parameters'
p30975
NsS'name'
p30976
S'/Executioner/Predictor/<type>'
p30977
sasS'parameters'
p30978
(lp30979
(dp30980
S'description'
p30981
S'A string representing the Moose Object that will be built by this Action\n'
p30982
sS'cpp_type'
p30983
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30984
sS'default'
p30985
g3
sS'name'
p30986
S'type'
p30987
sS'required'
p30988
I01
sS'group_name'
p30989
NsasS'name'
p30990
S'/Executioner/Predictor'
p30991
sa(dp30992
S'description'
p30993
g3
sS'subblocks'
p30994
NsS'parameters'
p30995
(lp30996
(dp30997
S'name'
p30998
S'element_order'
p30999
sS'cpp_type'
p31000
S'MooseEnum'
p31001
sS'default'
p31002
S'AUTO'
p31003
sS'description'
p31004
S'Order of the quadrature for elements\n'
p31005
sS'required'
p31006
I00
sS'options'
p31007
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p31008
sS'group_name'
p31009
Nsa(dp31010
S'name'
p31011
S'order'
p31012
sS'cpp_type'
p31013
S'MooseEnum'
p31014
sS'default'
p31015
S'AUTO'
p31016
sS'description'
p31017
S'Order of the quadrature\n'
p31018
sS'required'
p31019
I00
sS'options'
p31020
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p31021
sS'group_name'
p31022
Nsa(dp31023
S'name'
p31024
S'side_order'
p31025
sS'cpp_type'
p31026
S'MooseEnum'
p31027
sS'default'
p31028
S'AUTO'
p31029
sS'description'
p31030
S'Order of the quadrature for sides\n'
p31031
sS'required'
p31032
I00
sS'options'
p31033
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p31034
sS'group_name'
p31035
Nsa(dp31036
S'name'
p31037
S'type'
p31038
sS'cpp_type'
p31039
S'MooseEnum'
p31040
sS'default'
p31041
S'GAUSS'
p31042
sS'description'
p31043
S'Type of the quadrature rule\n'
p31044
sS'required'
p31045
I00
sS'options'
p31046
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p31047
sS'group_name'
p31048
NsasS'name'
p31049
S'/Executioner/Quadrature'
p31050
sa(dp31051
S'description'
p31052
g3
sS'subblocks'
p31053
(lp31054
(dp31055
S'description'
p31056
g3
sS'subblocks'
p31057
(lp31058
(dp31059
S'description'
p31060
g3
sS'subblocks'
p31061
NsS'parameters'
p31062
(lp31063
(dp31064
S'description'
p31065
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31066
sS'cpp_type'
p31067
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31068
sS'default'
p31069
g3
sS'name'
p31070
S'control_tags'
p31071
sS'required'
p31072
I00
sS'group_name'
p31073
S'Advanced'
p31074
sa(dp31075
S'description'
p31076
S'Set the enabled status of the MooseObject.\n'
p31077
sS'cpp_type'
p31078
S'bool'
p31079
sS'default'
p31080
S'1'
p31081
sS'name'
p31082
S'enable'
p31083
sS'required'
p31084
I00
sS'group_name'
p31085
S'Advanced'
p31086
sa(dp31087
S'description'
p31088
S'If true, use LStableDirk4 to bootstrap this method.\n'
p31089
sS'cpp_type'
p31090
S'bool'
p31091
sS'default'
p31092
S'1'
p31093
sS'name'
p31094
S'safe_start'
p31095
sS'required'
p31096
I00
sS'group_name'
p31097
Nsa(dp31098
S'description'
p31099
g3
sS'cpp_type'
p31100
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31101
sS'default'
p31102
S'AStableDirk4'
p31103
sS'name'
p31104
S'type'
p31105
sS'required'
p31106
I00
sS'group_name'
p31107
NsasS'name'
p31108
S'/Executioner/TimeIntegrator/<type>/AStableDirk4'
p31109
sa(dp31110
S'description'
p31111
g3
sS'subblocks'
p31112
NsS'parameters'
p31113
(lp31114
(dp31115
S'description'
p31116
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31117
sS'cpp_type'
p31118
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31119
sS'default'
p31120
g3
sS'name'
p31121
S'control_tags'
p31122
sS'required'
p31123
I00
sS'group_name'
p31124
S'Advanced'
p31125
sa(dp31126
S'description'
p31127
S'Set the enabled status of the MooseObject.\n'
p31128
sS'cpp_type'
p31129
S'bool'
p31130
sS'default'
p31131
S'1'
p31132
sS'name'
p31133
S'enable'
p31134
sS'required'
p31135
I00
sS'group_name'
p31136
S'Advanced'
p31137
sa(dp31138
S'description'
p31139
g3
sS'cpp_type'
p31140
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31141
sS'default'
p31142
S'BDF2'
p31143
sS'name'
p31144
S'type'
p31145
sS'required'
p31146
I00
sS'group_name'
p31147
NsasS'name'
p31148
S'/Executioner/TimeIntegrator/<type>/BDF2'
p31149
sa(dp31150
S'description'
p31151
g3
sS'subblocks'
p31152
NsS'parameters'
p31153
(lp31154
(dp31155
S'description'
p31156
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31157
sS'cpp_type'
p31158
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31159
sS'default'
p31160
g3
sS'name'
p31161
S'control_tags'
p31162
sS'required'
p31163
I00
sS'group_name'
p31164
S'Advanced'
p31165
sa(dp31166
S'description'
p31167
S'Set the enabled status of the MooseObject.\n'
p31168
sS'cpp_type'
p31169
S'bool'
p31170
sS'default'
p31171
S'1'
p31172
sS'name'
p31173
S'enable'
p31174
sS'required'
p31175
I00
sS'group_name'
p31176
S'Advanced'
p31177
sa(dp31178
S'description'
p31179
g3
sS'cpp_type'
p31180
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31181
sS'default'
p31182
S'CrankNicolson'
p31183
sS'name'
p31184
S'type'
p31185
sS'required'
p31186
I00
sS'group_name'
p31187
NsasS'name'
p31188
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p31189
sa(dp31190
S'description'
p31191
g3
sS'subblocks'
p31192
NsS'parameters'
p31193
(lp31194
(dp31195
S'description'
p31196
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31197
sS'cpp_type'
p31198
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31199
sS'default'
p31200
g3
sS'name'
p31201
S'control_tags'
p31202
sS'required'
p31203
I00
sS'group_name'
p31204
S'Advanced'
p31205
sa(dp31206
S'description'
p31207
S'Set the enabled status of the MooseObject.\n'
p31208
sS'cpp_type'
p31209
S'bool'
p31210
sS'default'
p31211
S'1'
p31212
sS'name'
p31213
S'enable'
p31214
sS'required'
p31215
I00
sS'group_name'
p31216
S'Advanced'
p31217
sa(dp31218
S'description'
p31219
g3
sS'cpp_type'
p31220
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31221
sS'default'
p31222
S'ExplicitEuler'
p31223
sS'name'
p31224
S'type'
p31225
sS'required'
p31226
I00
sS'group_name'
p31227
NsasS'name'
p31228
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p31229
sa(dp31230
S'description'
p31231
g3
sS'subblocks'
p31232
NsS'parameters'
p31233
(lp31234
(dp31235
S'description'
p31236
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31237
sS'cpp_type'
p31238
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31239
sS'default'
p31240
g3
sS'name'
p31241
S'control_tags'
p31242
sS'required'
p31243
I00
sS'group_name'
p31244
S'Advanced'
p31245
sa(dp31246
S'description'
p31247
S'Set the enabled status of the MooseObject.\n'
p31248
sS'cpp_type'
p31249
S'bool'
p31250
sS'default'
p31251
S'1'
p31252
sS'name'
p31253
S'enable'
p31254
sS'required'
p31255
I00
sS'group_name'
p31256
S'Advanced'
p31257
sa(dp31258
S'description'
p31259
g3
sS'cpp_type'
p31260
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31261
sS'default'
p31262
S'ExplicitMidpoint'
p31263
sS'name'
p31264
S'type'
p31265
sS'required'
p31266
I00
sS'group_name'
p31267
NsasS'name'
p31268
S'/Executioner/TimeIntegrator/<type>/ExplicitMidpoint'
p31269
sa(dp31270
S'description'
p31271
g3
sS'subblocks'
p31272
NsS'parameters'
p31273
(lp31274
(dp31275
S'description'
p31276
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31277
sS'cpp_type'
p31278
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31279
sS'default'
p31280
g3
sS'name'
p31281
S'control_tags'
p31282
sS'required'
p31283
I00
sS'group_name'
p31284
S'Advanced'
p31285
sa(dp31286
S'description'
p31287
S'Set the enabled status of the MooseObject.\n'
p31288
sS'cpp_type'
p31289
S'bool'
p31290
sS'default'
p31291
S'1'
p31292
sS'name'
p31293
S'enable'
p31294
sS'required'
p31295
I00
sS'group_name'
p31296
S'Advanced'
p31297
sa(dp31298
S'description'
p31299
g3
sS'cpp_type'
p31300
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31301
sS'default'
p31302
S'ExplicitTVDRK2'
p31303
sS'name'
p31304
S'type'
p31305
sS'required'
p31306
I00
sS'group_name'
p31307
NsasS'name'
p31308
S'/Executioner/TimeIntegrator/<type>/ExplicitTVDRK2'
p31309
sa(dp31310
S'description'
p31311
g3
sS'subblocks'
p31312
NsS'parameters'
p31313
(lp31314
(dp31315
S'description'
p31316
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31317
sS'cpp_type'
p31318
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31319
sS'default'
p31320
g3
sS'name'
p31321
S'control_tags'
p31322
sS'required'
p31323
I00
sS'group_name'
p31324
S'Advanced'
p31325
sa(dp31326
S'description'
p31327
S'Set the enabled status of the MooseObject.\n'
p31328
sS'cpp_type'
p31329
S'bool'
p31330
sS'default'
p31331
S'1'
p31332
sS'name'
p31333
S'enable'
p31334
sS'required'
p31335
I00
sS'group_name'
p31336
S'Advanced'
p31337
sa(dp31338
S'description'
p31339
g3
sS'cpp_type'
p31340
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31341
sS'default'
p31342
S'Heun'
p31343
sS'name'
p31344
S'type'
p31345
sS'required'
p31346
I00
sS'group_name'
p31347
NsasS'name'
p31348
S'/Executioner/TimeIntegrator/<type>/Heun'
p31349
sa(dp31350
S'description'
p31351
g3
sS'subblocks'
p31352
NsS'parameters'
p31353
(lp31354
(dp31355
S'description'
p31356
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31357
sS'cpp_type'
p31358
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31359
sS'default'
p31360
g3
sS'name'
p31361
S'control_tags'
p31362
sS'required'
p31363
I00
sS'group_name'
p31364
S'Advanced'
p31365
sa(dp31366
S'description'
p31367
S'Set the enabled status of the MooseObject.\n'
p31368
sS'cpp_type'
p31369
S'bool'
p31370
sS'default'
p31371
S'1'
p31372
sS'name'
p31373
S'enable'
p31374
sS'required'
p31375
I00
sS'group_name'
p31376
S'Advanced'
p31377
sa(dp31378
S'description'
p31379
g3
sS'cpp_type'
p31380
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31381
sS'default'
p31382
S'ImplicitEuler'
p31383
sS'name'
p31384
S'type'
p31385
sS'required'
p31386
I00
sS'group_name'
p31387
NsasS'name'
p31388
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p31389
sa(dp31390
S'description'
p31391
g3
sS'subblocks'
p31392
NsS'parameters'
p31393
(lp31394
(dp31395
S'description'
p31396
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31397
sS'cpp_type'
p31398
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31399
sS'default'
p31400
g3
sS'name'
p31401
S'control_tags'
p31402
sS'required'
p31403
I00
sS'group_name'
p31404
S'Advanced'
p31405
sa(dp31406
S'description'
p31407
S'Set the enabled status of the MooseObject.\n'
p31408
sS'cpp_type'
p31409
S'bool'
p31410
sS'default'
p31411
S'1'
p31412
sS'name'
p31413
S'enable'
p31414
sS'required'
p31415
I00
sS'group_name'
p31416
S'Advanced'
p31417
sa(dp31418
S'description'
p31419
g3
sS'cpp_type'
p31420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31421
sS'default'
p31422
S'ImplicitMidpoint'
p31423
sS'name'
p31424
S'type'
p31425
sS'required'
p31426
I00
sS'group_name'
p31427
NsasS'name'
p31428
S'/Executioner/TimeIntegrator/<type>/ImplicitMidpoint'
p31429
sa(dp31430
S'description'
p31431
g3
sS'subblocks'
p31432
NsS'parameters'
p31433
(lp31434
(dp31435
S'description'
p31436
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31437
sS'cpp_type'
p31438
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31439
sS'default'
p31440
g3
sS'name'
p31441
S'control_tags'
p31442
sS'required'
p31443
I00
sS'group_name'
p31444
S'Advanced'
p31445
sa(dp31446
S'description'
p31447
S'Set the enabled status of the MooseObject.\n'
p31448
sS'cpp_type'
p31449
S'bool'
p31450
sS'default'
p31451
S'1'
p31452
sS'name'
p31453
S'enable'
p31454
sS'required'
p31455
I00
sS'group_name'
p31456
S'Advanced'
p31457
sa(dp31458
S'description'
p31459
g3
sS'cpp_type'
p31460
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31461
sS'default'
p31462
S'LStableDirk2'
p31463
sS'name'
p31464
S'type'
p31465
sS'required'
p31466
I00
sS'group_name'
p31467
NsasS'name'
p31468
S'/Executioner/TimeIntegrator/<type>/LStableDirk2'
p31469
sa(dp31470
S'description'
p31471
g3
sS'subblocks'
p31472
NsS'parameters'
p31473
(lp31474
(dp31475
S'description'
p31476
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31477
sS'cpp_type'
p31478
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31479
sS'default'
p31480
g3
sS'name'
p31481
S'control_tags'
p31482
sS'required'
p31483
I00
sS'group_name'
p31484
S'Advanced'
p31485
sa(dp31486
S'description'
p31487
S'Set the enabled status of the MooseObject.\n'
p31488
sS'cpp_type'
p31489
S'bool'
p31490
sS'default'
p31491
S'1'
p31492
sS'name'
p31493
S'enable'
p31494
sS'required'
p31495
I00
sS'group_name'
p31496
S'Advanced'
p31497
sa(dp31498
S'description'
p31499
g3
sS'cpp_type'
p31500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31501
sS'default'
p31502
S'LStableDirk3'
p31503
sS'name'
p31504
S'type'
p31505
sS'required'
p31506
I00
sS'group_name'
p31507
NsasS'name'
p31508
S'/Executioner/TimeIntegrator/<type>/LStableDirk3'
p31509
sa(dp31510
S'description'
p31511
g3
sS'subblocks'
p31512
NsS'parameters'
p31513
(lp31514
(dp31515
S'description'
p31516
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31517
sS'cpp_type'
p31518
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31519
sS'default'
p31520
g3
sS'name'
p31521
S'control_tags'
p31522
sS'required'
p31523
I00
sS'group_name'
p31524
S'Advanced'
p31525
sa(dp31526
S'description'
p31527
S'Set the enabled status of the MooseObject.\n'
p31528
sS'cpp_type'
p31529
S'bool'
p31530
sS'default'
p31531
S'1'
p31532
sS'name'
p31533
S'enable'
p31534
sS'required'
p31535
I00
sS'group_name'
p31536
S'Advanced'
p31537
sa(dp31538
S'description'
p31539
g3
sS'cpp_type'
p31540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31541
sS'default'
p31542
S'LStableDirk4'
p31543
sS'name'
p31544
S'type'
p31545
sS'required'
p31546
I00
sS'group_name'
p31547
NsasS'name'
p31548
S'/Executioner/TimeIntegrator/<type>/LStableDirk4'
p31549
sa(dp31550
S'description'
p31551
g3
sS'subblocks'
p31552
NsS'parameters'
p31553
(lp31554
(dp31555
S'description'
p31556
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31557
sS'cpp_type'
p31558
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31559
sS'default'
p31560
g3
sS'name'
p31561
S'control_tags'
p31562
sS'required'
p31563
I00
sS'group_name'
p31564
S'Advanced'
p31565
sa(dp31566
S'description'
p31567
S'Set the enabled status of the MooseObject.\n'
p31568
sS'cpp_type'
p31569
S'bool'
p31570
sS'default'
p31571
S'1'
p31572
sS'name'
p31573
S'enable'
p31574
sS'required'
p31575
I00
sS'group_name'
p31576
S'Advanced'
p31577
sa(dp31578
S'description'
p31579
g3
sS'cpp_type'
p31580
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31581
sS'default'
p31582
S'Ralston'
p31583
sS'name'
p31584
S'type'
p31585
sS'required'
p31586
I00
sS'group_name'
p31587
NsasS'name'
p31588
S'/Executioner/TimeIntegrator/<type>/Ralston'
p31589
sa(dp31590
S'description'
p31591
g3
sS'subblocks'
p31592
NsS'parameters'
p31593
(lp31594
(dp31595
S'description'
p31596
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31597
sS'cpp_type'
p31598
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31599
sS'default'
p31600
g3
sS'name'
p31601
S'control_tags'
p31602
sS'required'
p31603
I00
sS'group_name'
p31604
S'Advanced'
p31605
sa(dp31606
S'description'
p31607
S'Set the enabled status of the MooseObject.\n'
p31608
sS'cpp_type'
p31609
S'bool'
p31610
sS'default'
p31611
S'1'
p31612
sS'name'
p31613
S'enable'
p31614
sS'required'
p31615
I00
sS'group_name'
p31616
S'Advanced'
p31617
sa(dp31618
S'description'
p31619
g3
sS'cpp_type'
p31620
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31621
sS'default'
p31622
S'SteadyState'
p31623
sS'name'
p31624
S'type'
p31625
sS'required'
p31626
I00
sS'group_name'
p31627
NsasS'name'
p31628
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p31629
sasS'parameters'
p31630
NsS'name'
p31631
S'/Executioner/TimeIntegrator/<type>'
p31632
sasS'parameters'
p31633
(lp31634
(dp31635
S'description'
p31636
S'A string representing the Moose Object that will be built by this Action\n'
p31637
sS'cpp_type'
p31638
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31639
sS'default'
p31640
g3
sS'name'
p31641
S'type'
p31642
sS'required'
p31643
I01
sS'group_name'
p31644
NsasS'name'
p31645
S'/Executioner/TimeIntegrator'
p31646
sa(dp31647
S'description'
p31648
g3
sS'subblocks'
p31649
(lp31650
(dp31651
S'description'
p31652
g3
sS'subblocks'
p31653
(lp31654
(dp31655
S'description'
p31656
g3
sS'subblocks'
p31657
NsS'parameters'
p31658
(lp31659
(dp31660
S'description'
p31661
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31662
sS'cpp_type'
p31663
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31664
sS'default'
p31665
g3
sS'name'
p31666
S'control_tags'
p31667
sS'required'
p31668
I00
sS'group_name'
p31669
S'Advanced'
p31670
sa(dp31671
S'description'
p31672
S'Initial time step size\n'
p31673
sS'cpp_type'
p31674
S'double'
p31675
sS'default'
p31676
g3
sS'name'
p31677
S'dt'
p31678
sS'required'
p31679
I01
sS'group_name'
p31680
Nsa(dp31681
S'description'
p31682
S'Maximum acceptable error.\n'
p31683
sS'cpp_type'
p31684
S'double'
p31685
sS'default'
p31686
g3
sS'name'
p31687
S'e_max'
p31688
sS'required'
p31689
I01
sS'group_name'
p31690
Nsa(dp31691
S'description'
p31692
S'Target error tolerance.\n'
p31693
sS'cpp_type'
p31694
S'double'
p31695
sS'default'
p31696
g3
sS'name'
p31697
S'e_tol'
p31698
sS'required'
p31699
I01
sS'group_name'
p31700
Nsa(dp31701
S'description'
p31702
S'Set the enabled status of the MooseObject.\n'
p31703
sS'cpp_type'
p31704
S'bool'
p31705
sS'default'
p31706
S'1'
p31707
sS'name'
p31708
S'enable'
p31709
sS'required'
p31710
I00
sS'group_name'
p31711
S'Advanced'
p31712
sa(dp31713
S'description'
p31714
S'Maximum ratio that the time step can increase.\n'
p31715
sS'cpp_type'
p31716
S'double'
p31717
sS'default'
p31718
S'1e+09'
p31719
sS'name'
p31720
S'max_increase'
p31721
sS'required'
p31722
I00
sS'group_name'
p31723
Nsa(dp31724
S'description'
p31725
S'Use when restarting a calculation to force a change in dt.\n'
p31726
sS'cpp_type'
p31727
S'bool'
p31728
sS'default'
p31729
S'0'
p31730
sS'name'
p31731
S'reset_dt'
p31732
sS'required'
p31733
I00
sS'group_name'
p31734
Nsa(dp31735
S'description'
p31736
S'scaling parameter for dt selection\n'
p31737
sS'cpp_type'
p31738
S'double'
p31739
sS'default'
p31740
S'0.8'
p31741
sS'name'
p31742
S'scaling_parameter'
p31743
sS'required'
p31744
I00
sS'group_name'
p31745
Nsa(dp31746
S'description'
p31747
S'when to start taking adaptive time steps\n'
p31748
sS'cpp_type'
p31749
S'int'
p31750
sS'default'
p31751
S'2'
p31752
sS'name'
p31753
S'start_adapting'
p31754
sS'required'
p31755
I00
sS'group_name'
p31756
Nsa(dp31757
S'description'
p31758
S'the number of time steps before recalculating dt\n'
p31759
sS'cpp_type'
p31760
S'int'
p31761
sS'default'
p31762
S'1'
p31763
sS'name'
p31764
S'steps_between_increase'
p31765
sS'required'
p31766
I00
sS'group_name'
p31767
Nsa(dp31768
S'description'
p31769
g3
sS'cpp_type'
p31770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31771
sS'default'
p31772
S'AB2PredictorCorrector'
p31773
sS'name'
p31774
S'type'
p31775
sS'required'
p31776
I00
sS'group_name'
p31777
NsasS'name'
p31778
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p31779
sa(dp31780
S'description'
p31781
g3
sS'subblocks'
p31782
NsS'parameters'
p31783
(lp31784
(dp31785
S'description'
p31786
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31787
sS'cpp_type'
p31788
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31789
sS'default'
p31790
g3
sS'name'
p31791
S'control_tags'
p31792
sS'required'
p31793
I00
sS'group_name'
p31794
S'Advanced'
p31795
sa(dp31796
S'description'
p31797
S'Size of the time step\n'
p31798
sS'cpp_type'
p31799
S'double'
p31800
sS'default'
p31801
g3
sS'name'
p31802
S'dt'
p31803
sS'required'
p31804
I01
sS'group_name'
p31805
Nsa(dp31806
S'description'
p31807
S'Set the enabled status of the MooseObject.\n'
p31808
sS'cpp_type'
p31809
S'bool'
p31810
sS'default'
p31811
S'1'
p31812
sS'name'
p31813
S'enable'
p31814
sS'required'
p31815
I00
sS'group_name'
p31816
S'Advanced'
p31817
sa(dp31818
S'description'
p31819
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p31820
sS'cpp_type'
p31821
S'double'
p31822
sS'default'
p31823
S'2'
p31824
sS'name'
p31825
S'growth_factor'
p31826
sS'required'
p31827
I00
sS'group_name'
p31828
Nsa(dp31829
S'description'
p31830
S'Use when restarting a calculation to force a change in dt.\n'
p31831
sS'cpp_type'
p31832
S'bool'
p31833
sS'default'
p31834
S'0'
p31835
sS'name'
p31836
S'reset_dt'
p31837
sS'required'
p31838
I00
sS'group_name'
p31839
Nsa(dp31840
S'description'
p31841
g3
sS'cpp_type'
p31842
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31843
sS'default'
p31844
S'ConstantDT'
p31845
sS'name'
p31846
S'type'
p31847
sS'required'
p31848
I00
sS'group_name'
p31849
NsasS'name'
p31850
S'/Executioner/TimeStepper/<type>/ConstantDT'
p31851
sa(dp31852
S'description'
p31853
g3
sS'subblocks'
p31854
NsS'parameters'
p31855
(lp31856
(dp31857
S'description'
p31858
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31859
sS'cpp_type'
p31860
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31861
sS'default'
p31862
g3
sS'name'
p31863
S'control_tags'
p31864
sS'required'
p31865
I00
sS'group_name'
p31866
S'Advanced'
p31867
sa(dp31868
S'description'
p31869
S'The initial time step size.\n'
p31870
sS'cpp_type'
p31871
S'double'
p31872
sS'default'
p31873
S'1'
p31874
sS'name'
p31875
S'dt'
p31876
sS'required'
p31877
I00
sS'group_name'
p31878
Nsa(dp31879
S'description'
p31880
S'Maximum acceptable error.\n'
p31881
sS'cpp_type'
p31882
S'double'
p31883
sS'default'
p31884
g3
sS'name'
p31885
S'e_max'
p31886
sS'required'
p31887
I01
sS'group_name'
p31888
Nsa(dp31889
S'description'
p31890
S'Target error tolerance.\n'
p31891
sS'cpp_type'
p31892
S'double'
p31893
sS'default'
p31894
g3
sS'name'
p31895
S'e_tol'
p31896
sS'required'
p31897
I01
sS'group_name'
p31898
Nsa(dp31899
S'description'
p31900
S'Set the enabled status of the MooseObject.\n'
p31901
sS'cpp_type'
p31902
S'bool'
p31903
sS'default'
p31904
S'1'
p31905
sS'name'
p31906
S'enable'
p31907
sS'required'
p31908
I00
sS'group_name'
p31909
S'Advanced'
p31910
sa(dp31911
S'description'
p31912
S'Maximum ratio that the time step can increase.\n'
p31913
sS'cpp_type'
p31914
S'double'
p31915
sS'default'
p31916
S'1e+09'
p31917
sS'name'
p31918
S'max_increase'
p31919
sS'required'
p31920
I00
sS'group_name'
p31921
Nsa(dp31922
S'description'
p31923
S'Use when restarting a calculation to force a change in dt.\n'
p31924
sS'cpp_type'
p31925
S'bool'
p31926
sS'default'
p31927
S'0'
p31928
sS'name'
p31929
S'reset_dt'
p31930
sS'required'
p31931
I00
sS'group_name'
p31932
Nsa(dp31933
S'description'
p31934
g3
sS'cpp_type'
p31935
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31936
sS'default'
p31937
S'DT2'
p31938
sS'name'
p31939
S'type'
p31940
sS'required'
p31941
I00
sS'group_name'
p31942
NsasS'name'
p31943
S'/Executioner/TimeStepper/<type>/DT2'
p31944
sa(dp31945
S'description'
p31946
S'Solves the Transient problem at a sequence of time points taken from a specified exodus file.\n'
p31947
sS'subblocks'
p31948
NsS'parameters'
p31949
(lp31950
(dp31951
S'description'
p31952
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31953
sS'cpp_type'
p31954
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31955
sS'default'
p31956
g3
sS'name'
p31957
S'control_tags'
p31958
sS'required'
p31959
I00
sS'group_name'
p31960
S'Advanced'
p31961
sa(dp31962
S'description'
p31963
S'Set the enabled status of the MooseObject.\n'
p31964
sS'cpp_type'
p31965
S'bool'
p31966
sS'default'
p31967
S'1'
p31968
sS'name'
p31969
S'enable'
p31970
sS'required'
p31971
I00
sS'group_name'
p31972
S'Advanced'
p31973
sa(dp31974
S'description'
p31975
S'The name of the mesh file to extract the time sequence from (must be an exodusII file).\n'
p31976
sS'cpp_type'
p31977
S'MeshFileName'
p31978
sS'default'
p31979
g3
sS'name'
p31980
S'mesh'
p31981
sS'required'
p31982
I01
sS'group_name'
p31983
Nsa(dp31984
S'description'
p31985
S'Use when restarting a calculation to force a change in dt.\n'
p31986
sS'cpp_type'
p31987
S'bool'
p31988
sS'default'
p31989
S'0'
p31990
sS'name'
p31991
S'reset_dt'
p31992
sS'required'
p31993
I00
sS'group_name'
p31994
Nsa(dp31995
S'description'
p31996
g3
sS'cpp_type'
p31997
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31998
sS'default'
p31999
S'ExodusTimeSequenceStepper'
p32000
sS'name'
p32001
S'type'
p32002
sS'required'
p32003
I00
sS'group_name'
p32004
NsasS'name'
p32005
S'/Executioner/TimeStepper/<type>/ExodusTimeSequenceStepper'
p32006
sa(dp32007
S'description'
p32008
g3
sS'subblocks'
p32009
NsS'parameters'
p32010
(lp32011
(dp32012
S'description'
p32013
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32014
sS'cpp_type'
p32015
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32016
sS'default'
p32017
g3
sS'name'
p32018
S'control_tags'
p32019
sS'required'
p32020
I00
sS'group_name'
p32021
S'Advanced'
p32022
sa(dp32023
S'description'
p32024
S'Set the enabled status of the MooseObject.\n'
p32025
sS'cpp_type'
p32026
S'bool'
p32027
sS'default'
p32028
S'1'
p32029
sS'name'
p32030
S'enable'
p32031
sS'required'
p32032
I00
sS'group_name'
p32033
S'Advanced'
p32034
sa(dp32035
S'description'
p32036
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p32037
sS'cpp_type'
p32038
S'double'
p32039
sS'default'
p32040
S'1.79769e+308'
p32041
sS'name'
p32042
S'growth_factor'
p32043
sS'required'
p32044
I00
sS'group_name'
p32045
Nsa(dp32046
S'description'
p32047
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p32048
sS'cpp_type'
p32049
S'bool'
p32050
sS'default'
p32051
S'1'
p32052
sS'name'
p32053
S'interpolate'
p32054
sS'required'
p32055
I00
sS'group_name'
p32056
Nsa(dp32057
S'description'
p32058
S'The minimal dt to take.\n'
p32059
sS'cpp_type'
p32060
S'double'
p32061
sS'default'
p32062
S'0'
p32063
sS'name'
p32064
S'min_dt'
p32065
sS'required'
p32066
I00
sS'group_name'
p32067
Nsa(dp32068
S'description'
p32069
S'Use when restarting a calculation to force a change in dt.\n'
p32070
sS'cpp_type'
p32071
S'bool'
p32072
sS'default'
p32073
S'0'
p32074
sS'name'
p32075
S'reset_dt'
p32076
sS'required'
p32077
I00
sS'group_name'
p32078
Nsa(dp32079
S'description'
p32080
S'The values of dt\n'
p32081
sS'cpp_type'
p32082
S'std::vector<double, std::allocator<double> >'
p32083
sS'default'
p32084
g3
sS'name'
p32085
S'time_dt'
p32086
sS'required'
p32087
I01
sS'group_name'
p32088
Nsa(dp32089
S'description'
p32090
S'The values of t\n'
p32091
sS'cpp_type'
p32092
S'std::vector<double, std::allocator<double> >'
p32093
sS'default'
p32094
g3
sS'name'
p32095
S'time_t'
p32096
sS'required'
p32097
I01
sS'group_name'
p32098
Nsa(dp32099
S'description'
p32100
g3
sS'cpp_type'
p32101
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32102
sS'default'
p32103
S'FunctionDT'
p32104
sS'name'
p32105
S'type'
p32106
sS'required'
p32107
I00
sS'group_name'
p32108
NsasS'name'
p32109
S'/Executioner/TimeStepper/<type>/FunctionDT'
p32110
sa(dp32111
S'description'
p32112
S'Adjust the timestep based on the number of iterations\n'
p32113
sS'subblocks'
p32114
NsS'parameters'
p32115
(lp32116
(dp32117
S'description'
p32118
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32119
sS'cpp_type'
p32120
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32121
sS'default'
p32122
g3
sS'name'
p32123
S'control_tags'
p32124
sS'required'
p32125
I00
sS'group_name'
p32126
S'Advanced'
p32127
sa(dp32128
S'description'
p32129
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed\n"
p32130
sS'cpp_type'
p32131
S'double'
p32132
sS'default'
p32133
S'0.5'
p32134
sS'name'
p32135
S'cutback_factor'
p32136
sS'required'
p32137
I00
sS'group_name'
p32138
Nsa(dp32139
S'description'
p32140
S'The default timestep size between solves\n'
p32141
sS'cpp_type'
p32142
S'double'
p32143
sS'default'
p32144
g3
sS'name'
p32145
S'dt'
p32146
sS'required'
p32147
I01
sS'group_name'
p32148
Nsa(dp32149
S'description'
p32150
S'Set the enabled status of the MooseObject.\n'
p32151
sS'cpp_type'
p32152
S'bool'
p32153
sS'default'
p32154
S'1'
p32155
sS'name'
p32156
S'enable'
p32157
sS'required'
p32158
I00
sS'group_name'
p32159
S'Advanced'
p32160
sa(dp32161
S'description'
p32162
S'Forces the timestepper to take a step that is consistent with points defined in the function\n'
p32163
sS'cpp_type'
p32164
S'bool'
p32165
sS'default'
p32166
S'0'
p32167
sS'name'
p32168
S'force_step_every_function_point'
p32169
sS'required'
p32170
I00
sS'group_name'
p32171
Nsa(dp32172
S'description'
p32173
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p32174
sS'cpp_type'
p32175
S'double'
p32176
sS'default'
p32177
S'2'
p32178
sS'name'
p32179
S'growth_factor'
p32180
sS'required'
p32181
I00
sS'group_name'
p32182
Nsa(dp32183
S'description'
p32184
S"Attempt to grow/shrink timestep if the iteration count is below/above 'optimal_iterations plus/minus iteration_window' (default = optimal_iterations/5).\n"
p32185
sS'cpp_type'
p32186
S'int'
p32187
sS'default'
p32188
g3
sS'name'
p32189
S'iteration_window'
p32190
sS'required'
p32191
I00
sS'group_name'
p32192
Nsa(dp32193
S'description'
p32194
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p32195
sS'cpp_type'
p32196
S'unsigned int'
p32197
sS'default'
p32198
g3
sS'name'
p32199
S'linear_iteration_ratio'
p32200
sS'required'
p32201
I00
sS'group_name'
p32202
Nsa(dp32203
S'description'
p32204
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p32205
sS'cpp_type'
p32206
S'double'
p32207
sS'default'
p32208
g3
sS'name'
p32209
S'max_function_change'
p32210
sS'required'
p32211
I00
sS'group_name'
p32212
Nsa(dp32213
S'description'
p32214
S'The target number of nonlinear iterations for adaptive timestepping\n'
p32215
sS'cpp_type'
p32216
S'int'
p32217
sS'default'
p32218
g3
sS'name'
p32219
S'optimal_iterations'
p32220
sS'required'
p32221
I00
sS'group_name'
p32222
Nsa(dp32223
S'description'
p32224
S'If specified, the postprocessor value is used as an upper limit for the current time step length\n'
p32225
sS'cpp_type'
p32226
S'PostprocessorName'
p32227
sS'default'
p32228
g3
sS'name'
p32229
S'postprocessor_dtlim'
p32230
sS'required'
p32231
I00
sS'group_name'
p32232
Nsa(dp32233
S'description'
p32234
S'Use when restarting a calculation to force a change in dt.\n'
p32235
sS'cpp_type'
p32236
S'bool'
p32237
sS'default'
p32238
S'0'
p32239
sS'name'
p32240
S'reset_dt'
p32241
sS'required'
p32242
I00
sS'group_name'
p32243
Nsa(dp32244
S'description'
p32245
S'The values of dt\n'
p32246
sS'cpp_type'
p32247
S'std::vector<double, std::allocator<double> >'
p32248
sS'default'
p32249
g3
sS'name'
p32250
S'time_dt'
p32251
sS'required'
p32252
I00
sS'group_name'
p32253
Nsa(dp32254
S'description'
p32255
S'The values of t\n'
p32256
sS'cpp_type'
p32257
S'std::vector<double, std::allocator<double> >'
p32258
sS'default'
p32259
g3
sS'name'
p32260
S'time_t'
p32261
sS'required'
p32262
I00
sS'group_name'
p32263
Nsa(dp32264
S'description'
p32265
S"A 'Piecewise' type function used to control the timestep by limiting the change in the function over a timestep\n"
p32266
sS'cpp_type'
p32267
S'FunctionName'
p32268
sS'default'
p32269
g3
sS'name'
p32270
S'timestep_limiting_function'
p32271
sS'required'
p32272
I00
sS'group_name'
p32273
Nsa(dp32274
S'description'
p32275
g3
sS'cpp_type'
p32276
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32277
sS'default'
p32278
S'IterationAdaptiveDT'
p32279
sS'name'
p32280
S'type'
p32281
sS'required'
p32282
I00
sS'group_name'
p32283
NsasS'name'
p32284
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p32285
sa(dp32286
S'description'
p32287
g3
sS'subblocks'
p32288
NsS'parameters'
p32289
(lp32290
(dp32291
S'description'
p32292
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32293
sS'cpp_type'
p32294
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32295
sS'default'
p32296
g3
sS'name'
p32297
S'control_tags'
p32298
sS'required'
p32299
I00
sS'group_name'
p32300
S'Advanced'
p32301
sa(dp32302
S'description'
p32303
S'Initial value of dt\n'
p32304
sS'cpp_type'
p32305
S'double'
p32306
sS'default'
p32307
g3
sS'name'
p32308
S'dt'
p32309
sS'required'
p32310
I00
sS'group_name'
p32311
Nsa(dp32312
S'description'
p32313
S'Set the enabled status of the MooseObject.\n'
p32314
sS'cpp_type'
p32315
S'bool'
p32316
sS'default'
p32317
S'1'
p32318
sS'name'
p32319
S'enable'
p32320
sS'required'
p32321
I00
sS'group_name'
p32322
S'Advanced'
p32323
sa(dp32324
S'description'
p32325
S'Add a factor to the supplied postprocessor value.\n'
p32326
sS'cpp_type'
p32327
S'double'
p32328
sS'default'
p32329
S'0'
p32330
sS'name'
p32331
S'factor'
p32332
sS'required'
p32333
I00
sS'group_name'
p32334
Nsa(dp32335
S'description'
p32336
S'The name of the postprocessor that computes the dt\n'
p32337
sS'cpp_type'
p32338
S'PostprocessorName'
p32339
sS'default'
p32340
g3
sS'name'
p32341
S'postprocessor'
p32342
sS'required'
p32343
I01
sS'group_name'
p32344
Nsa(dp32345
S'description'
p32346
S'Use when restarting a calculation to force a change in dt.\n'
p32347
sS'cpp_type'
p32348
S'bool'
p32349
sS'default'
p32350
S'0'
p32351
sS'name'
p32352
S'reset_dt'
p32353
sS'required'
p32354
I00
sS'group_name'
p32355
Nsa(dp32356
S'description'
p32357
S'Multiple scale and supplied postprocessor value.\n'
p32358
sS'cpp_type'
p32359
S'double'
p32360
sS'default'
p32361
S'1'
p32362
sS'name'
p32363
S'scale'
p32364
sS'required'
p32365
I00
sS'group_name'
p32366
Nsa(dp32367
S'description'
p32368
g3
sS'cpp_type'
p32369
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32370
sS'default'
p32371
S'PostprocessorDT'
p32372
sS'name'
p32373
S'type'
p32374
sS'required'
p32375
I00
sS'group_name'
p32376
NsasS'name'
p32377
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p32378
sa(dp32379
S'description'
p32380
g3
sS'subblocks'
p32381
NsS'parameters'
p32382
(lp32383
(dp32384
S'description'
p32385
S'Output adaptive time step log\n'
p32386
sS'cpp_type'
p32387
S'bool'
p32388
sS'default'
p32389
S'0'
p32390
sS'name'
p32391
S'adapt_log'
p32392
sS'required'
p32393
I00
sS'group_name'
p32394
Nsa(dp32395
S'description'
p32396
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32397
sS'cpp_type'
p32398
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32399
sS'default'
p32400
g3
sS'name'
p32401
S'control_tags'
p32402
sS'required'
p32403
I00
sS'group_name'
p32404
S'Advanced'
p32405
sa(dp32406
S'description'
p32407
S'The timestep size between solves\n'
p32408
sS'cpp_type'
p32409
S'double'
p32410
sS'default'
p32411
g3
sS'name'
p32412
S'dt'
p32413
sS'required'
p32414
I01
sS'group_name'
p32415
Nsa(dp32416
S'description'
p32417
S'Set the enabled status of the MooseObject.\n'
p32418
sS'cpp_type'
p32419
S'bool'
p32420
sS'default'
p32421
S'1'
p32422
sS'name'
p32423
S'enable'
p32424
sS'required'
p32425
I00
sS'group_name'
p32426
S'Advanced'
p32427
sa(dp32428
S'description'
p32429
S'Direction for the first step.  1 for up... -1 for down. \n'
p32430
sS'cpp_type'
p32431
S'int'
p32432
sS'default'
p32433
S'1'
p32434
sS'name'
p32435
S'initial_direction'
p32436
sS'required'
p32437
I00
sS'group_name'
p32438
Nsa(dp32439
S'description'
p32440
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p32441
sS'cpp_type'
p32442
S'double'
p32443
sS'default'
p32444
S'0.1'
p32445
sS'name'
p32446
S'percent_change'
p32447
sS'required'
p32448
I00
sS'group_name'
p32449
Nsa(dp32450
S'description'
p32451
S'Use when restarting a calculation to force a change in dt.\n'
p32452
sS'cpp_type'
p32453
S'bool'
p32454
sS'default'
p32455
S'0'
p32456
sS'name'
p32457
S'reset_dt'
p32458
sS'required'
p32459
I00
sS'group_name'
p32460
Nsa(dp32461
S'description'
p32462
g3
sS'cpp_type'
p32463
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32464
sS'default'
p32465
S'SolutionTimeAdaptiveDT'
p32466
sS'name'
p32467
S'type'
p32468
sS'required'
p32469
I00
sS'group_name'
p32470
NsasS'name'
p32471
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p32472
sa(dp32473
S'description'
p32474
S'Solves the Transient problem at a sequence of given time points.\n'
p32475
sS'subblocks'
p32476
NsS'parameters'
p32477
(lp32478
(dp32479
S'description'
p32480
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32481
sS'cpp_type'
p32482
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32483
sS'default'
p32484
g3
sS'name'
p32485
S'control_tags'
p32486
sS'required'
p32487
I00
sS'group_name'
p32488
S'Advanced'
p32489
sa(dp32490
S'description'
p32491
S'Set the enabled status of the MooseObject.\n'
p32492
sS'cpp_type'
p32493
S'bool'
p32494
sS'default'
p32495
S'1'
p32496
sS'name'
p32497
S'enable'
p32498
sS'required'
p32499
I00
sS'group_name'
p32500
S'Advanced'
p32501
sa(dp32502
S'description'
p32503
S'Use when restarting a calculation to force a change in dt.\n'
p32504
sS'cpp_type'
p32505
S'bool'
p32506
sS'default'
p32507
S'0'
p32508
sS'name'
p32509
S'reset_dt'
p32510
sS'required'
p32511
I00
sS'group_name'
p32512
Nsa(dp32513
S'description'
p32514
S'The values of t\n'
p32515
sS'cpp_type'
p32516
S'std::vector<double, std::allocator<double> >'
p32517
sS'default'
p32518
g3
sS'name'
p32519
S'time_sequence'
p32520
sS'required'
p32521
I01
sS'group_name'
p32522
Nsa(dp32523
S'description'
p32524
g3
sS'cpp_type'
p32525
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32526
sS'default'
p32527
S'TimeSequenceStepper'
p32528
sS'name'
p32529
S'type'
p32530
sS'required'
p32531
I00
sS'group_name'
p32532
NsasS'name'
p32533
S'/Executioner/TimeStepper/<type>/TimeSequenceStepper'
p32534
sasS'parameters'
p32535
NsS'name'
p32536
S'/Executioner/TimeStepper/<type>'
p32537
sasS'parameters'
p32538
(lp32539
(dp32540
S'description'
p32541
S'A string representing the Moose Object that will be built by this Action\n'
p32542
sS'cpp_type'
p32543
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32544
sS'default'
p32545
g3
sS'name'
p32546
S'type'
p32547
sS'required'
p32548
I01
sS'group_name'
p32549
NsasS'name'
p32550
S'/Executioner/TimeStepper'
p32551
sasS'parameters'
p32552
(lp32553
(dp32554
S'description'
p32555
S'A string representing the Moose Object that will be built by this Action\n'
p32556
sS'cpp_type'
p32557
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32558
sS'default'
p32559
g3
sS'name'
p32560
S'type'
p32561
sS'required'
p32562
I01
sS'group_name'
p32563
NsasS'name'
p32564
S'/Executioner'
p32565
sa(dp32566
S'description'
p32567
g3
sS'subblocks'
p32568
(lp32569
(dp32570
S'description'
p32571
g3
sS'subblocks'
p32572
NsS'parameters'
p32573
(lp32574
(dp32575
S'description'
p32576
S'A string representing the Moose Object that will be built by this Action\n'
p32577
sS'cpp_type'
p32578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32579
sS'default'
p32580
g3
sS'name'
p32581
S'type'
p32582
sS'required'
p32583
I01
sS'group_name'
p32584
NsasS'name'
p32585
S'/Functions/*'
p32586
sa(dp32587
S'description'
p32588
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p32589
sS'subblocks'
p32590
NsS'parameters'
p32591
(lp32592
(dp32593
S'description'
p32594
S'Start point for axis of symmetry for the 2d model\n'
p32595
sS'cpp_type'
p32596
S'libMesh::VectorValue<double>'
p32597
sS'default'
p32598
S'0 0 0'
p32599
sS'name'
p32600
S'2d_axis_point1'
p32601
sS'required'
p32602
I00
sS'group_name'
p32603
Nsa(dp32604
S'description'
p32605
S'End point for axis of symmetry for the 2d model\n'
p32606
sS'cpp_type'
p32607
S'libMesh::VectorValue<double>'
p32608
sS'default'
p32609
S'0 1 0'
p32610
sS'name'
p32611
S'2d_axis_point2'
p32612
sS'required'
p32613
I00
sS'group_name'
p32614
Nsa(dp32615
S'description'
p32616
S'Start point for axis of symmetry for the 3d model\n'
p32617
sS'cpp_type'
p32618
S'libMesh::VectorValue<double>'
p32619
sS'default'
p32620
S'0 0 0'
p32621
sS'name'
p32622
S'3d_axis_point1'
p32623
sS'required'
p32624
I00
sS'group_name'
p32625
Nsa(dp32626
S'description'
p32627
S'End point for axis of symmetry for the 3d model\n'
p32628
sS'cpp_type'
p32629
S'libMesh::VectorValue<double>'
p32630
sS'default'
p32631
S'0 1 0'
p32632
sS'name'
p32633
S'3d_axis_point2'
p32634
sS'required'
p32635
I00
sS'group_name'
p32636
Nsa(dp32637
S'description'
p32638
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p32639
sS'cpp_type'
p32640
S'double'
p32641
sS'default'
p32642
S'0'
p32643
sS'name'
p32644
S'add_factor'
p32645
sS'required'
p32646
I00
sS'group_name'
p32647
Nsa(dp32648
S'description'
p32649
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p32650
sS'cpp_type'
p32651
S'double'
p32652
sS'default'
p32653
S'1'
p32654
sS'name'
p32655
S'axial_dimension_ratio'
p32656
sS'required'
p32657
I00
sS'group_name'
p32658
Nsa(dp32659
S'description'
p32660
S'Component of the variable to be computed if it is a vector\n'
p32661
sS'cpp_type'
p32662
S'unsigned int'
p32663
sS'default'
p32664
g3
sS'name'
p32665
S'component'
p32666
sS'required'
p32667
I00
sS'group_name'
p32668
Nsa(dp32669
S'description'
p32670
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32671
sS'cpp_type'
p32672
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32673
sS'default'
p32674
g3
sS'name'
p32675
S'control_tags'
p32676
sS'required'
p32677
I00
sS'group_name'
p32678
S'Advanced'
p32679
sa(dp32680
S'description'
p32681
S'Set the enabled status of the MooseObject.\n'
p32682
sS'cpp_type'
p32683
S'bool'
p32684
sS'default'
p32685
S'1'
p32686
sS'name'
p32687
S'enable'
p32688
sS'required'
p32689
I00
sS'group_name'
p32690
S'Advanced'
p32691
sa(dp32692
S'description'
p32693
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p32694
sS'cpp_type'
p32695
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32696
sS'default'
p32697
g3
sS'name'
p32698
S'from_variables'
p32699
sS'required'
p32700
I00
sS'group_name'
p32701
Nsa(dp32702
S'description'
p32703
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p32704
sS'cpp_type'
p32705
S'double'
p32706
sS'default'
p32707
S'1'
p32708
sS'name'
p32709
S'scale_factor'
p32710
sS'required'
p32711
I00
sS'group_name'
p32712
Nsa(dp32713
S'description'
p32714
S'The SolutionUserObject to extract data from.\n'
p32715
sS'cpp_type'
p32716
S'UserObjectName'
p32717
sS'default'
p32718
g3
sS'name'
p32719
S'solution'
p32720
sS'required'
p32721
I01
sS'group_name'
p32722
Nsa(dp32723
S'description'
p32724
g3
sS'cpp_type'
p32725
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32726
sS'default'
p32727
S'Axisymmetric2D3DSolutionFunction'
p32728
sS'name'
p32729
S'type'
p32730
sS'required'
p32731
I00
sS'group_name'
p32732
NsasS'name'
p32733
S'/Functions/Axisymmetric2D3DSolutionFunction'
p32734
sa(dp32735
S'description'
p32736
g3
sS'subblocks'
p32737
NsS'parameters'
p32738
(lp32739
(dp32740
S'description'
p32741
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32742
sS'cpp_type'
p32743
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32744
sS'default'
p32745
g3
sS'name'
p32746
S'control_tags'
p32747
sS'required'
p32748
I00
sS'group_name'
p32749
S'Advanced'
p32750
sa(dp32751
S'description'
p32752
S'Set the enabled status of the MooseObject.\n'
p32753
sS'cpp_type'
p32754
S'bool'
p32755
sS'default'
p32756
S'1'
p32757
sS'name'
p32758
S'enable'
p32759
sS'required'
p32760
I00
sS'group_name'
p32761
S'Advanced'
p32762
sa(dp32763
S'description'
p32764
g3
sS'cpp_type'
p32765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32766
sS'default'
p32767
S'BicubicSplineFunction'
p32768
sS'name'
p32769
S'type'
p32770
sS'required'
p32771
I00
sS'group_name'
p32772
Nsa(dp32773
S'description'
p32774
S'The first independent coordinate.\n'
p32775
sS'cpp_type'
p32776
S'std::vector<double, std::allocator<double> >'
p32777
sS'default'
p32778
g3
sS'name'
p32779
S'x1'
p32780
sS'required'
p32781
I01
sS'group_name'
p32782
Nsa(dp32783
S'description'
p32784
S'The second independent coordinate.\n'
p32785
sS'cpp_type'
p32786
S'std::vector<double, std::allocator<double> >'
p32787
sS'default'
p32788
g3
sS'name'
p32789
S'x2'
p32790
sS'required'
p32791
I01
sS'group_name'
p32792
Nsa(dp32793
S'description'
p32794
S'The dependent values\n'
p32795
sS'cpp_type'
p32796
S'std::vector<double, std::allocator<double> >'
p32797
sS'default'
p32798
g3
sS'name'
p32799
S'y'
p32800
sS'required'
p32801
I01
sS'group_name'
p32802
Nsa(dp32803
S'description'
p32804
S'The functional form of the derivative with respect to x1.\n'
p32805
sS'cpp_type'
p32806
S'FunctionName'
p32807
sS'default'
p32808
S'1e30'
p32809
sS'name'
p32810
S'yx1'
p32811
sS'required'
p32812
I00
sS'group_name'
p32813
Nsa(dp32814
S'description'
p32815
S'The values of the derivative wrt x1 on the lower interpolation grid points.\n'
p32816
sS'cpp_type'
p32817
S'std::vector<double, std::allocator<double> >'
p32818
sS'default'
p32819
g3
sS'name'
p32820
S'yx11'
p32821
sS'required'
p32822
I00
sS'group_name'
p32823
Nsa(dp32824
S'description'
p32825
S'The values of the derivative wrt x1 on the upper interpolation grid points.\n'
p32826
sS'cpp_type'
p32827
S'std::vector<double, std::allocator<double> >'
p32828
sS'default'
p32829
g3
sS'name'
p32830
S'yx1n'
p32831
sS'required'
p32832
I00
sS'group_name'
p32833
Nsa(dp32834
S'description'
p32835
S'The functional form of the derivative with respect to x2.\n'
p32836
sS'cpp_type'
p32837
S'FunctionName'
p32838
sS'default'
p32839
S'1e30'
p32840
sS'name'
p32841
S'yx2'
p32842
sS'required'
p32843
I00
sS'group_name'
p32844
Nsa(dp32845
S'description'
p32846
S'The values of the derivative wrt x2 on the lower interpolation grid points.\n'
p32847
sS'cpp_type'
p32848
S'std::vector<double, std::allocator<double> >'
p32849
sS'default'
p32850
g3
sS'name'
p32851
S'yx21'
p32852
sS'required'
p32853
I00
sS'group_name'
p32854
Nsa(dp32855
S'description'
p32856
S'The values of the derivative wrt x2 on the upper interpolation grid points.\n'
p32857
sS'cpp_type'
p32858
S'std::vector<double, std::allocator<double> >'
p32859
sS'default'
p32860
g3
sS'name'
p32861
S'yx2n'
p32862
sS'required'
p32863
I00
sS'group_name'
p32864
NsasS'name'
p32865
S'/Functions/BicubicSplineFunction'
p32866
sa(dp32867
S'description'
p32868
g3
sS'subblocks'
p32869
NsS'parameters'
p32870
(lp32871
(dp32872
S'description'
p32873
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32874
sS'cpp_type'
p32875
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32876
sS'default'
p32877
g3
sS'name'
p32878
S'control_tags'
p32879
sS'required'
p32880
I00
sS'group_name'
p32881
S'Advanced'
p32882
sa(dp32883
S'description'
p32884
S'Set the enabled status of the MooseObject.\n'
p32885
sS'cpp_type'
p32886
S'bool'
p32887
sS'default'
p32888
S'1'
p32889
sS'name'
p32890
S'enable'
p32891
sS'required'
p32892
I00
sS'group_name'
p32893
S'Advanced'
p32894
sa(dp32895
S'description'
p32896
S'The functions to be multiplied together.\n'
p32897
sS'cpp_type'
p32898
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p32899
sS'default'
p32900
g3
sS'name'
p32901
S'functions'
p32902
sS'required'
p32903
I00
sS'group_name'
p32904
Nsa(dp32905
S'description'
p32906
S'Scale factor to be applied to the ordinate values\n'
p32907
sS'cpp_type'
p32908
S'double'
p32909
sS'default'
p32910
S'1'
p32911
sS'name'
p32912
S'scale_factor'
p32913
sS'required'
p32914
I00
sS'group_name'
p32915
Nsa(dp32916
S'description'
p32917
g3
sS'cpp_type'
p32918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32919
sS'default'
p32920
S'CompositeFunction'
p32921
sS'name'
p32922
S'type'
p32923
sS'required'
p32924
I00
sS'group_name'
p32925
NsasS'name'
p32926
S'/Functions/CompositeFunction'
p32927
sa(dp32928
S'description'
p32929
g3
sS'subblocks'
p32930
NsS'parameters'
p32931
(lp32932
(dp32933
S'description'
p32934
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32935
sS'cpp_type'
p32936
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32937
sS'default'
p32938
g3
sS'name'
p32939
S'control_tags'
p32940
sS'required'
p32941
I00
sS'group_name'
p32942
S'Advanced'
p32943
sa(dp32944
S'description'
p32945
S'Set the enabled status of the MooseObject.\n'
p32946
sS'cpp_type'
p32947
S'bool'
p32948
sS'default'
p32949
S'1'
p32950
sS'name'
p32951
S'enable'
p32952
sS'required'
p32953
I00
sS'group_name'
p32954
S'Advanced'
p32955
sa(dp32956
S'description'
p32957
g3
sS'cpp_type'
p32958
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32959
sS'default'
p32960
S'ConstantFunction'
p32961
sS'name'
p32962
S'type'
p32963
sS'required'
p32964
I00
sS'group_name'
p32965
Nsa(dp32966
S'description'
p32967
S'The constant value\n'
p32968
sS'cpp_type'
p32969
S'double'
p32970
sS'default'
p32971
S'0'
p32972
sS'name'
p32973
S'value'
p32974
sS'required'
p32975
I00
sS'group_name'
p32976
NsasS'name'
p32977
S'/Functions/ConstantFunction'
p32978
sa(dp32979
S'description'
p32980
S'Function with values sampled from a given image stack\n'
p32981
sS'subblocks'
p32982
NsS'parameters'
p32983
(lp32984
(dp32985
S'description'
p32986
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p32987
sS'cpp_type'
p32988
S'unsigned int'
p32989
sS'default'
p32990
g3
sS'name'
p32991
S'component'
p32992
sS'required'
p32993
I00
sS'group_name'
p32994
Nsa(dp32995
S'description'
p32996
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32997
sS'cpp_type'
p32998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32999
sS'default'
p33000
g3
sS'name'
p33001
S'control_tags'
p33002
sS'required'
p33003
I00
sS'group_name'
p33004
S'Advanced'
p33005
sa(dp33006
S'description'
p33007
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p33008
sS'cpp_type'
p33009
S'libMesh::Point'
p33010
sS'default'
p33011
g3
sS'name'
p33012
S'dimensions'
p33013
sS'required'
p33014
I00
sS'group_name'
p33015
Nsa(dp33016
S'description'
p33017
S'Set the enabled status of the MooseObject.\n'
p33018
sS'cpp_type'
p33019
S'bool'
p33020
sS'default'
p33021
S'1'
p33022
sS'name'
p33023
S'enable'
p33024
sS'required'
p33025
I00
sS'group_name'
p33026
S'Advanced'
p33027
sa(dp33028
S'description'
p33029
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p33030
sS'cpp_type'
p33031
S'FileName'
p33032
sS'default'
p33033
g3
sS'name'
p33034
S'file'
p33035
sS'required'
p33036
I00
sS'group_name'
p33037
Nsa(dp33038
S'description'
p33039
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p33040
sS'cpp_type'
p33041
S'FileNameNoExtension'
p33042
sS'default'
p33043
g3
sS'name'
p33044
S'file_base'
p33045
sS'required'
p33046
I00
sS'group_name'
p33047
Nsa(dp33048
S'description'
p33049
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p33050
sS'cpp_type'
p33051
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p33052
sS'default'
p33053
g3
sS'name'
p33054
S'file_range'
p33055
sS'required'
p33056
I00
sS'group_name'
p33057
Nsa(dp33058
S'description'
p33059
S"Suffix of the file to open, e.g. 'png'\n"
p33060
sS'cpp_type'
p33061
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33062
sS'default'
p33063
g3
sS'name'
p33064
S'file_suffix'
p33065
sS'required'
p33066
I00
sS'group_name'
p33067
Nsa(dp33068
S'description'
p33069
S'Flip the image along the x-axis\n'
p33070
sS'cpp_type'
p33071
S'bool'
p33072
sS'default'
p33073
S'0'
p33074
sS'name'
p33075
S'flip_x'
p33076
sS'required'
p33077
I00
sS'group_name'
p33078
S'Flip'
p33079
sa(dp33080
S'description'
p33081
S'Flip the image along the y-axis\n'
p33082
sS'cpp_type'
p33083
S'bool'
p33084
sS'default'
p33085
S'0'
p33086
sS'name'
p33087
S'flip_y'
p33088
sS'required'
p33089
I00
sS'group_name'
p33090
S'Flip'
p33091
sa(dp33092
S'description'
p33093
S'Flip the image along the z-axis\n'
p33094
sS'cpp_type'
p33095
S'bool'
p33096
sS'default'
p33097
S'0'
p33098
sS'name'
p33099
S'flip_z'
p33100
sS'required'
p33101
I00
sS'group_name'
p33102
S'Flip'
p33103
sa(dp33104
S'description'
p33105
S'The value to set for data less than the threshold value\n'
p33106
sS'cpp_type'
p33107
S'double'
p33108
sS'default'
p33109
S'0'
p33110
sS'name'
p33111
S'lower_value'
p33112
sS'required'
p33113
I00
sS'group_name'
p33114
S'Threshold'
p33115
sa(dp33116
S'description'
p33117
S'Origin of the image (defaults to mesh origin)\n'
p33118
sS'cpp_type'
p33119
S'libMesh::Point'
p33120
sS'default'
p33121
g3
sS'name'
p33122
S'origin'
p33123
sS'required'
p33124
I00
sS'group_name'
p33125
Nsa(dp33126
S'description'
p33127
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p33128
sS'cpp_type'
p33129
S'double'
p33130
sS'default'
p33131
S'1'
p33132
sS'name'
p33133
S'scale'
p33134
sS'required'
p33135
I00
sS'group_name'
p33136
S'Rescale'
p33137
sa(dp33138
S'description'
p33139
S'Value to add to all pixels; occurs prior to scaling\n'
p33140
sS'cpp_type'
p33141
S'double'
p33142
sS'default'
p33143
S'0'
p33144
sS'name'
p33145
S'shift'
p33146
sS'required'
p33147
I00
sS'group_name'
p33148
S'Rescale'
p33149
sa(dp33150
S'description'
p33151
S'The threshold value\n'
p33152
sS'cpp_type'
p33153
S'double'
p33154
sS'default'
p33155
g3
sS'name'
p33156
S'threshold'
p33157
sS'required'
p33158
I00
sS'group_name'
p33159
S'Threshold'
p33160
sa(dp33161
S'description'
p33162
g3
sS'cpp_type'
p33163
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33164
sS'default'
p33165
S'ImageFunction'
p33166
sS'name'
p33167
S'type'
p33168
sS'required'
p33169
I00
sS'group_name'
p33170
Nsa(dp33171
S'description'
p33172
S'The value to set for data greater than the threshold value\n'
p33173
sS'cpp_type'
p33174
S'double'
p33175
sS'default'
p33176
S'1'
p33177
sS'name'
p33178
S'upper_value'
p33179
sS'required'
p33180
I00
sS'group_name'
p33181
S'Threshold'
p33182
sasS'name'
p33183
S'/Functions/ImageFunction'
p33184
sa(dp33185
S'description'
p33186
S'Returns the linear combination of the functions\n'
p33187
sS'subblocks'
p33188
NsS'parameters'
p33189
(lp33190
(dp33191
S'description'
p33192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33193
sS'cpp_type'
p33194
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33195
sS'default'
p33196
g3
sS'name'
p33197
S'control_tags'
p33198
sS'required'
p33199
I00
sS'group_name'
p33200
S'Advanced'
p33201
sa(dp33202
S'description'
p33203
S'Set the enabled status of the MooseObject.\n'
p33204
sS'cpp_type'
p33205
S'bool'
p33206
sS'default'
p33207
S'1'
p33208
sS'name'
p33209
S'enable'
p33210
sS'required'
p33211
I00
sS'group_name'
p33212
S'Advanced'
p33213
sa(dp33214
S'description'
p33215
S'This function will return Sum_over_i(w_i * functions_i)\n'
p33216
sS'cpp_type'
p33217
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p33218
sS'default'
p33219
g3
sS'name'
p33220
S'functions'
p33221
sS'required'
p33222
I01
sS'group_name'
p33223
Nsa(dp33224
S'description'
p33225
g3
sS'cpp_type'
p33226
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33227
sS'default'
p33228
S'LinearCombinationFunction'
p33229
sS'name'
p33230
S'type'
p33231
sS'required'
p33232
I00
sS'group_name'
p33233
Nsa(dp33234
S'description'
p33235
S'This function will return Sum_over_i(w_i * functions_i)\n'
p33236
sS'cpp_type'
p33237
S'std::vector<double, std::allocator<double> >'
p33238
sS'default'
p33239
g3
sS'name'
p33240
S'w'
p33241
sS'required'
p33242
I01
sS'group_name'
p33243
NsasS'name'
p33244
S'/Functions/LinearCombinationFunction'
p33245
sa(dp33246
S'description'
p33247
g3
sS'subblocks'
p33248
NsS'parameters'
p33249
(lp33250
(dp33251
S'description'
p33252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33253
sS'cpp_type'
p33254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33255
sS'default'
p33256
g3
sS'name'
p33257
S'control_tags'
p33258
sS'required'
p33259
I00
sS'group_name'
p33260
S'Advanced'
p33261
sa(dp33262
S'description'
p33263
S'Set the enabled status of the MooseObject.\n'
p33264
sS'cpp_type'
p33265
S'bool'
p33266
sS'default'
p33267
S'1'
p33268
sS'name'
p33269
S'enable'
p33270
sS'required'
p33271
I00
sS'group_name'
p33272
S'Advanced'
p33273
sa(dp33274
S'description'
p33275
g3
sS'cpp_type'
p33276
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33277
sS'default'
p33278
S'ParsedFunction'
p33279
sS'name'
p33280
S'type'
p33281
sS'required'
p33282
I00
sS'group_name'
p33283
Nsa(dp33284
S'description'
p33285
S'Constant numeric values or postprocessor names for vars.\n'
p33286
sS'cpp_type'
p33287
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33288
sS'default'
p33289
g3
sS'name'
p33290
S'vals'
p33291
sS'required'
p33292
I00
sS'group_name'
p33293
Nsa(dp33294
S'description'
p33295
S'The user defined function.\n'
p33296
sS'cpp_type'
p33297
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33298
sS'default'
p33299
g3
sS'name'
p33300
S'value'
p33301
sS'required'
p33302
I01
sS'group_name'
p33303
Nsa(dp33304
S'description'
p33305
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p33306
sS'cpp_type'
p33307
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33308
sS'default'
p33309
g3
sS'name'
p33310
S'vars'
p33311
sS'required'
p33312
I00
sS'group_name'
p33313
NsasS'name'
p33314
S'/Functions/ParsedFunction'
p33315
sa(dp33316
S'description'
p33317
g3
sS'subblocks'
p33318
NsS'parameters'
p33319
(lp33320
(dp33321
S'description'
p33322
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33323
sS'cpp_type'
p33324
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33325
sS'default'
p33326
g3
sS'name'
p33327
S'control_tags'
p33328
sS'required'
p33329
I00
sS'group_name'
p33330
S'Advanced'
p33331
sa(dp33332
S'description'
p33333
S'Set the enabled status of the MooseObject.\n'
p33334
sS'cpp_type'
p33335
S'bool'
p33336
sS'default'
p33337
S'1'
p33338
sS'name'
p33339
S'enable'
p33340
sS'required'
p33341
I00
sS'group_name'
p33342
S'Advanced'
p33343
sa(dp33344
S'description'
p33345
S'Partial with respect to x.\n'
p33346
sS'cpp_type'
p33347
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33348
sS'default'
p33349
S'0'
p33350
sS'name'
p33351
S'grad_x'
p33352
sS'required'
p33353
I00
sS'group_name'
p33354
Nsa(dp33355
S'description'
p33356
S'Partial with respect to y.\n'
p33357
sS'cpp_type'
p33358
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33359
sS'default'
p33360
S'0'
p33361
sS'name'
p33362
S'grad_y'
p33363
sS'required'
p33364
I00
sS'group_name'
p33365
Nsa(dp33366
S'description'
p33367
S'Partial with respect to z.\n'
p33368
sS'cpp_type'
p33369
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33370
sS'default'
p33371
S'0'
p33372
sS'name'
p33373
S'grad_z'
p33374
sS'required'
p33375
I00
sS'group_name'
p33376
Nsa(dp33377
S'description'
p33378
g3
sS'cpp_type'
p33379
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33380
sS'default'
p33381
S'ParsedGradFunction'
p33382
sS'name'
p33383
S'type'
p33384
sS'required'
p33385
I00
sS'group_name'
p33386
Nsa(dp33387
S'description'
p33388
S'Constant numeric values or postprocessor names for vars.\n'
p33389
sS'cpp_type'
p33390
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33391
sS'default'
p33392
g3
sS'name'
p33393
S'vals'
p33394
sS'required'
p33395
I00
sS'group_name'
p33396
Nsa(dp33397
S'description'
p33398
S'User defined function.\n'
p33399
sS'cpp_type'
p33400
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33401
sS'default'
p33402
S'0'
p33403
sS'name'
p33404
S'value'
p33405
sS'required'
p33406
I00
sS'group_name'
p33407
Nsa(dp33408
S'description'
p33409
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p33410
sS'cpp_type'
p33411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33412
sS'default'
p33413
g3
sS'name'
p33414
S'vars'
p33415
sS'required'
p33416
I00
sS'group_name'
p33417
NsasS'name'
p33418
S'/Functions/ParsedGradFunction'
p33419
sa(dp33420
S'description'
p33421
g3
sS'subblocks'
p33422
NsS'parameters'
p33423
(lp33424
(dp33425
S'description'
p33426
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33427
sS'cpp_type'
p33428
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33429
sS'default'
p33430
g3
sS'name'
p33431
S'control_tags'
p33432
sS'required'
p33433
I00
sS'group_name'
p33434
S'Advanced'
p33435
sa(dp33436
S'description'
p33437
S'Set the enabled status of the MooseObject.\n'
p33438
sS'cpp_type'
p33439
S'bool'
p33440
sS'default'
p33441
S'1'
p33442
sS'name'
p33443
S'enable'
p33444
sS'required'
p33445
I00
sS'group_name'
p33446
S'Advanced'
p33447
sa(dp33448
S'description'
p33449
g3
sS'cpp_type'
p33450
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33451
sS'default'
p33452
S'ParsedVectorFunction'
p33453
sS'name'
p33454
S'type'
p33455
sS'required'
p33456
I00
sS'group_name'
p33457
Nsa(dp33458
S'description'
p33459
S'Constant numeric values or postprocessor names for vars.\n'
p33460
sS'cpp_type'
p33461
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33462
sS'default'
p33463
g3
sS'name'
p33464
S'vals'
p33465
sS'required'
p33466
I00
sS'group_name'
p33467
Nsa(dp33468
S'description'
p33469
S'x-component of function.\n'
p33470
sS'cpp_type'
p33471
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33472
sS'default'
p33473
S'0'
p33474
sS'name'
p33475
S'value_x'
p33476
sS'required'
p33477
I00
sS'group_name'
p33478
Nsa(dp33479
S'description'
p33480
S'y-component of function.\n'
p33481
sS'cpp_type'
p33482
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33483
sS'default'
p33484
S'0'
p33485
sS'name'
p33486
S'value_y'
p33487
sS'required'
p33488
I00
sS'group_name'
p33489
Nsa(dp33490
S'description'
p33491
S'z-component of function.\n'
p33492
sS'cpp_type'
p33493
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33494
sS'default'
p33495
S'0'
p33496
sS'name'
p33497
S'value_z'
p33498
sS'required'
p33499
I00
sS'group_name'
p33500
Nsa(dp33501
S'description'
p33502
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p33503
sS'cpp_type'
p33504
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33505
sS'default'
p33506
g3
sS'name'
p33507
S'vars'
p33508
sS'required'
p33509
I00
sS'group_name'
p33510
NsasS'name'
p33511
S'/Functions/ParsedVectorFunction'
p33512
sa(dp33513
S'description'
p33514
g3
sS'subblocks'
p33515
NsS'parameters'
p33516
(lp33517
(dp33518
S'description'
p33519
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p33520
sS'cpp_type'
p33521
S'int'
p33522
sS'default'
p33523
S'-1'
p33524
sS'name'
p33525
S'axis'
p33526
sS'required'
p33527
I00
sS'group_name'
p33528
Nsa(dp33529
S'description'
p33530
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33531
sS'cpp_type'
p33532
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33533
sS'default'
p33534
g3
sS'name'
p33535
S'control_tags'
p33536
sS'required'
p33537
I00
sS'group_name'
p33538
S'Advanced'
p33539
sa(dp33540
S'description'
p33541
S'File holding csv data for use with PiecewiseBilinear\n'
p33542
sS'cpp_type'
p33543
S'FileName'
p33544
sS'default'
p33545
g3
sS'name'
p33546
S'data_file'
p33547
sS'required'
p33548
I00
sS'group_name'
p33549
Nsa(dp33550
S'description'
p33551
S'Set the enabled status of the MooseObject.\n'
p33552
sS'cpp_type'
p33553
S'bool'
p33554
sS'default'
p33555
S'1'
p33556
sS'name'
p33557
S'enable'
p33558
sS'required'
p33559
I00
sS'group_name'
p33560
S'Advanced'
p33561
sa(dp33562
S'description'
p33563
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p33564
sS'cpp_type'
p33565
S'bool'
p33566
sS'default'
p33567
S'0'
p33568
sS'name'
p33569
S'radial'
p33570
sS'required'
p33571
I00
sS'group_name'
p33572
Nsa(dp33573
S'description'
p33574
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p33575
sS'cpp_type'
p33576
S'double'
p33577
sS'default'
p33578
S'1'
p33579
sS'name'
p33580
S'scale_factor'
p33581
sS'required'
p33582
I00
sS'group_name'
p33583
Nsa(dp33584
S'description'
p33585
g3
sS'cpp_type'
p33586
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33587
sS'default'
p33588
S'PiecewiseBilinear'
p33589
sS'name'
p33590
S'type'
p33591
sS'required'
p33592
I00
sS'group_name'
p33593
Nsa(dp33594
S'description'
p33595
S'The x abscissa values\n'
p33596
sS'cpp_type'
p33597
S'std::vector<double, std::allocator<double> >'
p33598
sS'default'
p33599
g3
sS'name'
p33600
S'x'
p33601
sS'required'
p33602
I00
sS'group_name'
p33603
Nsa(dp33604
S'description'
p33605
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p33606
sS'cpp_type'
p33607
S'int'
p33608
sS'default'
p33609
S'-1'
p33610
sS'name'
p33611
S'xaxis'
p33612
sS'required'
p33613
I00
sS'group_name'
p33614
Nsa(dp33615
S'description'
p33616
S'The y abscissa values\n'
p33617
sS'cpp_type'
p33618
S'std::vector<double, std::allocator<double> >'
p33619
sS'default'
p33620
g3
sS'name'
p33621
S'y'
p33622
sS'required'
p33623
I00
sS'group_name'
p33624
Nsa(dp33625
S'description'
p33626
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p33627
sS'cpp_type'
p33628
S'int'
p33629
sS'default'
p33630
S'-1'
p33631
sS'name'
p33632
S'yaxis'
p33633
sS'required'
p33634
I00
sS'group_name'
p33635
Nsa(dp33636
S'description'
p33637
S'The ordinate values\n'
p33638
sS'cpp_type'
p33639
S'std::vector<double, std::allocator<double> >'
p33640
sS'default'
p33641
g3
sS'name'
p33642
S'z'
p33643
sS'required'
p33644
I00
sS'group_name'
p33645
NsasS'name'
p33646
S'/Functions/PiecewiseBilinear'
p33647
sa(dp33648
S'description'
p33649
g3
sS'subblocks'
p33650
NsS'parameters'
p33651
(lp33652
(dp33653
S'description'
p33654
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p33655
sS'cpp_type'
p33656
S'int'
p33657
sS'default'
p33658
g3
sS'name'
p33659
S'axis'
p33660
sS'required'
p33661
I00
sS'group_name'
p33662
Nsa(dp33663
S'description'
p33664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33665
sS'cpp_type'
p33666
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33667
sS'default'
p33668
g3
sS'name'
p33669
S'control_tags'
p33670
sS'required'
p33671
I00
sS'group_name'
p33672
S'Advanced'
p33673
sa(dp33674
S'description'
p33675
S'File holding csv data for use with Piecewise\n'
p33676
sS'cpp_type'
p33677
S'FileName'
p33678
sS'default'
p33679
g3
sS'name'
p33680
S'data_file'
p33681
sS'required'
p33682
I00
sS'group_name'
p33683
Nsa(dp33684
S'name'
p33685
S'direction'
p33686
sS'cpp_type'
p33687
S'MooseEnum'
p33688
sS'default'
p33689
S'left'
p33690
sS'description'
p33691
S'Direction to look to find value: left right\n'
p33692
sS'required'
p33693
I00
sS'options'
p33694
S'left right'
p33695
sS'group_name'
p33696
Nsa(dp33697
S'description'
p33698
S'Set the enabled status of the MooseObject.\n'
p33699
sS'cpp_type'
p33700
S'bool'
p33701
sS'default'
p33702
S'1'
p33703
sS'name'
p33704
S'enable'
p33705
sS'required'
p33706
I00
sS'group_name'
p33707
S'Advanced'
p33708
sa(dp33709
S'description'
p33710
S'Format of csv data file that is in either in columns or rows\n'
p33711
sS'cpp_type'
p33712
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33713
sS'default'
p33714
S'rows'
p33715
sS'name'
p33716
S'format'
p33717
sS'required'
p33718
I00
sS'group_name'
p33719
Nsa(dp33720
S'description'
p33721
S'Scale factor to be applied to the ordinate values\n'
p33722
sS'cpp_type'
p33723
S'double'
p33724
sS'default'
p33725
S'1'
p33726
sS'name'
p33727
S'scale_factor'
p33728
sS'required'
p33729
I00
sS'group_name'
p33730
Nsa(dp33731
S'description'
p33732
g3
sS'cpp_type'
p33733
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33734
sS'default'
p33735
S'PiecewiseConstant'
p33736
sS'name'
p33737
S'type'
p33738
sS'required'
p33739
I00
sS'group_name'
p33740
Nsa(dp33741
S'description'
p33742
S'The abscissa values\n'
p33743
sS'cpp_type'
p33744
S'std::vector<double, std::allocator<double> >'
p33745
sS'default'
p33746
g3
sS'name'
p33747
S'x'
p33748
sS'required'
p33749
I00
sS'group_name'
p33750
Nsa(dp33751
S'description'
p33752
S'The abscissa index in the data file\n'
p33753
sS'cpp_type'
p33754
S'unsigned int'
p33755
sS'default'
p33756
S'0'
p33757
sS'name'
p33758
S'x_index_in_file'
p33759
sS'required'
p33760
I00
sS'group_name'
p33761
Nsa(dp33762
S'description'
p33763
S'All function data, supplied in abscissa, ordinate pairs\n'
p33764
sS'cpp_type'
p33765
S'std::vector<double, std::allocator<double> >'
p33766
sS'default'
p33767
g3
sS'name'
p33768
S'xy_data'
p33769
sS'required'
p33770
I00
sS'group_name'
p33771
Nsa(dp33772
S'description'
p33773
S'If the data file only contains abscissa and ordinate data\n'
p33774
sS'cpp_type'
p33775
S'bool'
p33776
sS'default'
p33777
S'1'
p33778
sS'name'
p33779
S'xy_in_file_only'
p33780
sS'required'
p33781
I00
sS'group_name'
p33782
Nsa(dp33783
S'description'
p33784
S'The ordinate values\n'
p33785
sS'cpp_type'
p33786
S'std::vector<double, std::allocator<double> >'
p33787
sS'default'
p33788
g3
sS'name'
p33789
S'y'
p33790
sS'required'
p33791
I00
sS'group_name'
p33792
Nsa(dp33793
S'description'
p33794
S'The ordinate index in the data file\n'
p33795
sS'cpp_type'
p33796
S'unsigned int'
p33797
sS'default'
p33798
S'1'
p33799
sS'name'
p33800
S'y_index_in_file'
p33801
sS'required'
p33802
I00
sS'group_name'
p33803
NsasS'name'
p33804
S'/Functions/PiecewiseConstant'
p33805
sa(dp33806
S'description'
p33807
g3
sS'subblocks'
p33808
NsS'parameters'
p33809
(lp33810
(dp33811
S'description'
p33812
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p33813
sS'cpp_type'
p33814
S'int'
p33815
sS'default'
p33816
g3
sS'name'
p33817
S'axis'
p33818
sS'required'
p33819
I00
sS'group_name'
p33820
Nsa(dp33821
S'description'
p33822
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33823
sS'cpp_type'
p33824
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33825
sS'default'
p33826
g3
sS'name'
p33827
S'control_tags'
p33828
sS'required'
p33829
I00
sS'group_name'
p33830
S'Advanced'
p33831
sa(dp33832
S'description'
p33833
S'File holding csv data for use with Piecewise\n'
p33834
sS'cpp_type'
p33835
S'FileName'
p33836
sS'default'
p33837
g3
sS'name'
p33838
S'data_file'
p33839
sS'required'
p33840
I00
sS'group_name'
p33841
Nsa(dp33842
S'description'
p33843
S'Set the enabled status of the MooseObject.\n'
p33844
sS'cpp_type'
p33845
S'bool'
p33846
sS'default'
p33847
S'1'
p33848
sS'name'
p33849
S'enable'
p33850
sS'required'
p33851
I00
sS'group_name'
p33852
S'Advanced'
p33853
sa(dp33854
S'description'
p33855
S'Format of csv data file that is in either in columns or rows\n'
p33856
sS'cpp_type'
p33857
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33858
sS'default'
p33859
S'rows'
p33860
sS'name'
p33861
S'format'
p33862
sS'required'
p33863
I00
sS'group_name'
p33864
Nsa(dp33865
S'description'
p33866
S'Scale factor to be applied to the ordinate values\n'
p33867
sS'cpp_type'
p33868
S'double'
p33869
sS'default'
p33870
S'1'
p33871
sS'name'
p33872
S'scale_factor'
p33873
sS'required'
p33874
I00
sS'group_name'
p33875
Nsa(dp33876
S'description'
p33877
g3
sS'cpp_type'
p33878
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33879
sS'default'
p33880
S'PiecewiseLinear'
p33881
sS'name'
p33882
S'type'
p33883
sS'required'
p33884
I00
sS'group_name'
p33885
Nsa(dp33886
S'description'
p33887
S'The abscissa values\n'
p33888
sS'cpp_type'
p33889
S'std::vector<double, std::allocator<double> >'
p33890
sS'default'
p33891
g3
sS'name'
p33892
S'x'
p33893
sS'required'
p33894
I00
sS'group_name'
p33895
Nsa(dp33896
S'description'
p33897
S'The abscissa index in the data file\n'
p33898
sS'cpp_type'
p33899
S'unsigned int'
p33900
sS'default'
p33901
S'0'
p33902
sS'name'
p33903
S'x_index_in_file'
p33904
sS'required'
p33905
I00
sS'group_name'
p33906
Nsa(dp33907
S'description'
p33908
S'All function data, supplied in abscissa, ordinate pairs\n'
p33909
sS'cpp_type'
p33910
S'std::vector<double, std::allocator<double> >'
p33911
sS'default'
p33912
g3
sS'name'
p33913
S'xy_data'
p33914
sS'required'
p33915
I00
sS'group_name'
p33916
Nsa(dp33917
S'description'
p33918
S'If the data file only contains abscissa and ordinate data\n'
p33919
sS'cpp_type'
p33920
S'bool'
p33921
sS'default'
p33922
S'1'
p33923
sS'name'
p33924
S'xy_in_file_only'
p33925
sS'required'
p33926
I00
sS'group_name'
p33927
Nsa(dp33928
S'description'
p33929
S'The ordinate values\n'
p33930
sS'cpp_type'
p33931
S'std::vector<double, std::allocator<double> >'
p33932
sS'default'
p33933
g3
sS'name'
p33934
S'y'
p33935
sS'required'
p33936
I00
sS'group_name'
p33937
Nsa(dp33938
S'description'
p33939
S'The ordinate index in the data file\n'
p33940
sS'cpp_type'
p33941
S'unsigned int'
p33942
sS'default'
p33943
S'1'
p33944
sS'name'
p33945
S'y_index_in_file'
p33946
sS'required'
p33947
I00
sS'group_name'
p33948
NsasS'name'
p33949
S'/Functions/PiecewiseLinear'
p33950
sa(dp33951
S'description'
p33952
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p33953
sS'subblocks'
p33954
NsS'parameters'
p33955
(lp33956
(dp33957
S'description'
p33958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33959
sS'cpp_type'
p33960
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33961
sS'default'
p33962
g3
sS'name'
p33963
S'control_tags'
p33964
sS'required'
p33965
I00
sS'group_name'
p33966
S'Advanced'
p33967
sa(dp33968
S'description'
p33969
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p33970
sS'cpp_type'
p33971
S'FileName'
p33972
sS'default'
p33973
g3
sS'name'
p33974
S'data_file'
p33975
sS'required'
p33976
I00
sS'group_name'
p33977
Nsa(dp33978
S'description'
p33979
S'Set the enabled status of the MooseObject.\n'
p33980
sS'cpp_type'
p33981
S'bool'
p33982
sS'default'
p33983
S'1'
p33984
sS'name'
p33985
S'enable'
p33986
sS'required'
p33987
I00
sS'group_name'
p33988
S'Advanced'
p33989
sa(dp33990
S'description'
p33991
g3
sS'cpp_type'
p33992
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33993
sS'default'
p33994
S'PiecewiseMultilinear'
p33995
sS'name'
p33996
S'type'
p33997
sS'required'
p33998
I00
sS'group_name'
p33999
NsasS'name'
p34000
S'/Functions/PiecewiseMultilinear'
p34001
sa(dp34002
S'description'
p34003
g3
sS'subblocks'
p34004
NsS'parameters'
p34005
(lp34006
(dp34007
S'description'
p34008
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p34009
sS'cpp_type'
p34010
S'double'
p34011
sS'default'
p34012
S'0'
p34013
sS'name'
p34014
S'add_factor'
p34015
sS'required'
p34016
I00
sS'group_name'
p34017
Nsa(dp34018
S'description'
p34019
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34020
sS'cpp_type'
p34021
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34022
sS'default'
p34023
g3
sS'name'
p34024
S'control_tags'
p34025
sS'required'
p34026
I00
sS'group_name'
p34027
S'Advanced'
p34028
sa(dp34029
S'description'
p34030
S'Set the enabled status of the MooseObject.\n'
p34031
sS'cpp_type'
p34032
S'bool'
p34033
sS'default'
p34034
S'1'
p34035
sS'name'
p34036
S'enable'
p34037
sS'required'
p34038
I00
sS'group_name'
p34039
S'Advanced'
p34040
sa(dp34041
S'description'
p34042
S'The name of the variable in the file that is to be extracted\n'
p34043
sS'cpp_type'
p34044
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34045
sS'default'
p34046
g3
sS'name'
p34047
S'from_variable'
p34048
sS'required'
p34049
I00
sS'group_name'
p34050
Nsa(dp34051
S'description'
p34052
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p34053
sS'cpp_type'
p34054
S'double'
p34055
sS'default'
p34056
S'1'
p34057
sS'name'
p34058
S'scale_factor'
p34059
sS'required'
p34060
I00
sS'group_name'
p34061
Nsa(dp34062
S'description'
p34063
S'The SolutionUserObject to extract data from.\n'
p34064
sS'cpp_type'
p34065
S'UserObjectName'
p34066
sS'default'
p34067
g3
sS'name'
p34068
S'solution'
p34069
sS'required'
p34070
I01
sS'group_name'
p34071
Nsa(dp34072
S'description'
p34073
g3
sS'cpp_type'
p34074
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34075
sS'default'
p34076
S'SolutionFunction'
p34077
sS'name'
p34078
S'type'
p34079
sS'required'
p34080
I00
sS'group_name'
p34081
NsasS'name'
p34082
S'/Functions/SolutionFunction'
p34083
sa(dp34084
S'description'
p34085
g3
sS'subblocks'
p34086
NsS'parameters'
p34087
(lp34088
(dp34089
S'description'
p34090
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34091
sS'cpp_type'
p34092
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34093
sS'default'
p34094
g3
sS'name'
p34095
S'control_tags'
p34096
sS'required'
p34097
I00
sS'group_name'
p34098
S'Advanced'
p34099
sa(dp34100
S'description'
p34101
S'Set the enabled status of the MooseObject.\n'
p34102
sS'cpp_type'
p34103
S'bool'
p34104
sS'default'
p34105
S'1'
p34106
sS'name'
p34107
S'enable'
p34108
sS'required'
p34109
I00
sS'group_name'
p34110
S'Advanced'
p34111
sa(dp34112
S'description'
p34113
g3
sS'cpp_type'
p34114
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34115
sS'default'
p34116
S'SplineFunction'
p34117
sS'name'
p34118
S'type'
p34119
sS'required'
p34120
I00
sS'group_name'
p34121
Nsa(dp34122
S'description'
p34123
S'The abscissa values\n'
p34124
sS'cpp_type'
p34125
S'std::vector<double, std::allocator<double> >'
p34126
sS'default'
p34127
g3
sS'name'
p34128
S'x'
p34129
sS'required'
p34130
I01
sS'group_name'
p34131
Nsa(dp34132
S'description'
p34133
S'The ordinate values\n'
p34134
sS'cpp_type'
p34135
S'std::vector<double, std::allocator<double> >'
p34136
sS'default'
p34137
g3
sS'name'
p34138
S'y'
p34139
sS'required'
p34140
I01
sS'group_name'
p34141
Nsa(dp34142
S'description'
p34143
S'The value of the first derivative of the interpolating function at point 1\n'
p34144
sS'cpp_type'
p34145
S'double'
p34146
sS'default'
p34147
S'1e+30'
p34148
sS'name'
p34149
S'yp1'
p34150
sS'required'
p34151
I00
sS'group_name'
p34152
Nsa(dp34153
S'description'
p34154
S'The value of the first derivative of the interpolating function at point n\n'
p34155
sS'cpp_type'
p34156
S'double'
p34157
sS'default'
p34158
S'1e+30'
p34159
sS'name'
p34160
S'ypn'
p34161
sS'required'
p34162
I00
sS'group_name'
p34163
NsasS'name'
p34164
S'/Functions/SplineFunction'
p34165
sa(dp34166
S'description'
p34167
g3
sS'subblocks'
p34168
NsS'parameters'
p34169
(lp34170
(dp34171
S'description'
p34172
S'VectorPostprocessor column tabulating the abscissa of the sampled function\n'
p34173
sS'cpp_type'
p34174
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34175
sS'default'
p34176
g3
sS'name'
p34177
S'argument_column'
p34178
sS'required'
p34179
I01
sS'group_name'
p34180
Nsa(dp34181
S'description'
p34182
S'Component of the function evaluation point used to sample the VectorPostprocessor\n'
p34183
sS'cpp_type'
p34184
S'unsigned int'
p34185
sS'default'
p34186
g3
sS'name'
p34187
S'component'
p34188
sS'required'
p34189
I01
sS'group_name'
p34190
Nsa(dp34191
S'description'
p34192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34193
sS'cpp_type'
p34194
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34195
sS'default'
p34196
g3
sS'name'
p34197
S'control_tags'
p34198
sS'required'
p34199
I00
sS'group_name'
p34200
S'Advanced'
p34201
sa(dp34202
S'description'
p34203
S'Set the enabled status of the MooseObject.\n'
p34204
sS'cpp_type'
p34205
S'bool'
p34206
sS'default'
p34207
S'1'
p34208
sS'name'
p34209
S'enable'
p34210
sS'required'
p34211
I00
sS'group_name'
p34212
S'Advanced'
p34213
sa(dp34214
S'description'
p34215
g3
sS'cpp_type'
p34216
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34217
sS'default'
p34218
S'VectorPostprocessorFunction'
p34219
sS'name'
p34220
S'type'
p34221
sS'required'
p34222
I00
sS'group_name'
p34223
Nsa(dp34224
S'description'
p34225
S'VectorPostprocessor column tabulating the ordinate (function values) of the sampled function\n'
p34226
sS'cpp_type'
p34227
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34228
sS'default'
p34229
g3
sS'name'
p34230
S'value_column'
p34231
sS'required'
p34232
I01
sS'group_name'
p34233
Nsa(dp34234
S'description'
p34235
S'The name of the PointValueSampler that you want to use\n'
p34236
sS'cpp_type'
p34237
S'VectorPostprocessorName'
p34238
sS'default'
p34239
g3
sS'name'
p34240
S'vectorpostprocessor_name'
p34241
sS'required'
p34242
I01
sS'group_name'
p34243
NsasS'name'
p34244
S'/Functions/VectorPostprocessorFunction'
p34245
sasS'parameters'
p34246
NsS'name'
p34247
S'/Functions'
p34248
sa(dp34249
S'description'
p34250
g3
sS'subblocks'
p34251
NsS'parameters'
p34252
NsS'name'
p34253
S'/GlobalParams'
p34254
sa(dp34255
S'description'
p34256
g3
sS'subblocks'
p34257
(lp34258
(dp34259
S'description'
p34260
g3
sS'subblocks'
p34261
NsS'parameters'
p34262
(lp34263
(dp34264
S'description'
p34265
S'A string representing the Moose Object that will be built by this Action\n'
p34266
sS'cpp_type'
p34267
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34268
sS'default'
p34269
g3
sS'name'
p34270
S'type'
p34271
sS'required'
p34272
I01
sS'group_name'
p34273
NsasS'name'
p34274
S'/ICs/*'
p34275
sa(dp34276
S'description'
p34277
S'Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n'
p34278
sS'subblocks'
p34279
NsS'parameters'
p34280
(lp34281
(dp34282
S'description'
p34283
S'Semiaxis a for each superellipsoid\n'
p34284
sS'cpp_type'
p34285
S'std::vector<double, std::allocator<double> >'
p34286
sS'default'
p34287
g3
sS'name'
p34288
S'as'
p34289
sS'required'
p34290
I01
sS'group_name'
p34291
Nsa(dp34292
S'description'
p34293
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34294
sS'cpp_type'
p34295
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34296
sS'default'
p34297
g3
sS'name'
p34298
S'block'
p34299
sS'required'
p34300
I00
sS'group_name'
p34301
Nsa(dp34302
S'description'
p34303
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34304
sS'cpp_type'
p34305
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34306
sS'default'
p34307
g3
sS'name'
p34308
S'boundary'
p34309
sS'required'
p34310
I00
sS'group_name'
p34311
Nsa(dp34312
S'description'
p34313
S'Semiaxis b for each superellipsoid\n'
p34314
sS'cpp_type'
p34315
S'std::vector<double, std::allocator<double> >'
p34316
sS'default'
p34317
g3
sS'name'
p34318
S'bs'
p34319
sS'required'
p34320
I01
sS'group_name'
p34321
Nsa(dp34322
S'description'
p34323
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34324
sS'cpp_type'
p34325
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34326
sS'default'
p34327
g3
sS'name'
p34328
S'control_tags'
p34329
sS'required'
p34330
I00
sS'group_name'
p34331
S'Advanced'
p34332
sa(dp34333
S'description'
p34334
S'Semiaxis c for each superellipsoid\n'
p34335
sS'cpp_type'
p34336
S'std::vector<double, std::allocator<double> >'
p34337
sS'default'
p34338
g3
sS'name'
p34339
S'cs'
p34340
sS'required'
p34341
I01
sS'group_name'
p34342
Nsa(dp34343
S'description'
p34344
S'Set the enabled status of the MooseObject.\n'
p34345
sS'cpp_type'
p34346
S'bool'
p34347
sS'default'
p34348
S'1'
p34349
sS'name'
p34350
S'enable'
p34351
sS'required'
p34352
I00
sS'group_name'
p34353
S'Advanced'
p34354
sa(dp34355
S'description'
p34356
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p34357
sS'cpp_type'
p34358
S'bool'
p34359
sS'default'
p34360
S'0'
p34361
sS'name'
p34362
S'ignore_uo_dependency'
p34363
sS'required'
p34364
I00
sS'group_name'
p34365
S'Advanced'
p34366
sa(dp34367
S'description'
p34368
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p34369
sS'cpp_type'
p34370
S'double'
p34371
sS'default'
p34372
S'0'
p34373
sS'name'
p34374
S'int_width'
p34375
sS'required'
p34376
I00
sS'group_name'
p34377
Nsa(dp34378
S'description'
p34379
S'The variable value inside the superellipsoid\n'
p34380
sS'cpp_type'
p34381
S'double'
p34382
sS'default'
p34383
g3
sS'name'
p34384
S'invalue'
p34385
sS'required'
p34386
I01
sS'group_name'
p34387
Nsa(dp34388
S'description'
p34389
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p34390
sS'cpp_type'
p34391
S'double'
p34392
sS'default'
p34393
g3
sS'name'
p34394
S'large_spac'
p34395
sS'required'
p34396
I01
sS'group_name'
p34397
Nsa(dp34398
S'description'
p34399
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p34400
sS'cpp_type'
p34401
S'double'
p34402
sS'default'
p34403
g3
sS'name'
p34404
S'nestedvalue'
p34405
sS'required'
p34406
I00
sS'group_name'
p34407
Nsa(dp34408
S'description'
p34409
S'The number of random (small) particles to place\n'
p34410
sS'cpp_type'
p34411
S'unsigned int'
p34412
sS'default'
p34413
g3
sS'name'
p34414
S'npart'
p34415
sS'required'
p34416
I01
sS'group_name'
p34417
Nsa(dp34418
S'description'
p34419
S'Exponent n for each superellipsoid\n'
p34420
sS'cpp_type'
p34421
S'std::vector<double, std::allocator<double> >'
p34422
sS'default'
p34423
g3
sS'name'
p34424
S'ns'
p34425
sS'required'
p34426
I01
sS'group_name'
p34427
Nsa(dp34428
S'description'
p34429
S'The number of tries to place the random particles\n'
p34430
sS'cpp_type'
p34431
S'unsigned int'
p34432
sS'default'
p34433
S'1000'
p34434
sS'name'
p34435
S'numtries'
p34436
sS'required'
p34437
I00
sS'group_name'
p34438
Nsa(dp34439
S'description'
p34440
S'The variable value outside the superellipsoid\n'
p34441
sS'cpp_type'
p34442
S'double'
p34443
sS'default'
p34444
g3
sS'name'
p34445
S'outvalue'
p34446
sS'required'
p34447
I01
sS'group_name'
p34448
Nsa(dp34449
S'description'
p34450
S'Seed value for the random number generator\n'
p34451
sS'cpp_type'
p34452
S'unsigned int'
p34453
sS'default'
p34454
S'12345'
p34455
sS'name'
p34456
S'rand_seed'
p34457
sS'required'
p34458
I00
sS'group_name'
p34459
Nsa(dp34460
S'description'
p34461
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p34462
sS'cpp_type'
p34463
S'double'
p34464
sS'default'
p34465
S'0'
p34466
sS'name'
p34467
S'size_variation'
p34468
sS'required'
p34469
I00
sS'group_name'
p34470
Nsa(dp34471
S'name'
p34472
S'size_variation_type'
p34473
sS'cpp_type'
p34474
S'MooseEnum'
p34475
sS'default'
p34476
S'none'
p34477
sS'description'
p34478
S'Type of distribution that random semiaxes will follow\n'
p34479
sS'required'
p34480
I00
sS'options'
p34481
S'uniform normal none'
p34482
sS'group_name'
p34483
Nsa(dp34484
S'description'
p34485
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p34486
sS'cpp_type'
p34487
S'double'
p34488
sS'default'
p34489
g3
sS'name'
p34490
S'small_a'
p34491
sS'required'
p34492
I01
sS'group_name'
p34493
Nsa(dp34494
S'description'
p34495
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p34496
sS'cpp_type'
p34497
S'double'
p34498
sS'default'
p34499
g3
sS'name'
p34500
S'small_b'
p34501
sS'required'
p34502
I01
sS'group_name'
p34503
Nsa(dp34504
S'description'
p34505
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p34506
sS'cpp_type'
p34507
S'double'
p34508
sS'default'
p34509
g3
sS'name'
p34510
S'small_c'
p34511
sS'required'
p34512
I01
sS'group_name'
p34513
Nsa(dp34514
S'description'
p34515
S'Exponent n for the randomly placed (small) superellipsoids\n'
p34516
sS'cpp_type'
p34517
S'double'
p34518
sS'default'
p34519
g3
sS'name'
p34520
S'small_n'
p34521
sS'required'
p34522
I01
sS'group_name'
p34523
Nsa(dp34524
S'description'
p34525
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p34526
sS'cpp_type'
p34527
S'double'
p34528
sS'default'
p34529
g3
sS'name'
p34530
S'small_spac'
p34531
sS'required'
p34532
I01
sS'group_name'
p34533
Nsa(dp34534
S'description'
p34535
g3
sS'cpp_type'
p34536
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34537
sS'default'
p34538
S'BimodalInverseSuperellipsoidsIC'
p34539
sS'name'
p34540
S'type'
p34541
sS'required'
p34542
I00
sS'group_name'
p34543
Nsa(dp34544
S'description'
p34545
S'The variable this initial condition is supposed to provide values for.\n'
p34546
sS'cpp_type'
p34547
S'VariableName'
p34548
sS'default'
p34549
g3
sS'name'
p34550
S'variable'
p34551
sS'required'
p34552
I01
sS'group_name'
p34553
Nsa(dp34554
S'description'
p34555
S'The x-coordinate for each superellipsoid center\n'
p34556
sS'cpp_type'
p34557
S'std::vector<double, std::allocator<double> >'
p34558
sS'default'
p34559
g3
sS'name'
p34560
S'x_positions'
p34561
sS'required'
p34562
I01
sS'group_name'
p34563
Nsa(dp34564
S'description'
p34565
S'The y-coordinate for each superellipsoid center\n'
p34566
sS'cpp_type'
p34567
S'std::vector<double, std::allocator<double> >'
p34568
sS'default'
p34569
g3
sS'name'
p34570
S'y_positions'
p34571
sS'required'
p34572
I01
sS'group_name'
p34573
Nsa(dp34574
S'description'
p34575
S'The z-coordinate for each superellipsoid center\n'
p34576
sS'cpp_type'
p34577
S'std::vector<double, std::allocator<double> >'
p34578
sS'default'
p34579
g3
sS'name'
p34580
S'z_positions'
p34581
sS'required'
p34582
I01
sS'group_name'
p34583
Nsa(dp34584
S'description'
p34585
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p34586
sS'cpp_type'
p34587
S'bool'
p34588
sS'default'
p34589
S'0'
p34590
sS'name'
p34591
S'zero_gradient'
p34592
sS'required'
p34593
I00
sS'group_name'
p34594
NsasS'name'
p34595
S'/ICs/BimodalInverseSuperellipsoidsIC'
p34596
sa(dp34597
S'description'
p34598
S'Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n'
p34599
sS'subblocks'
p34600
NsS'parameters'
p34601
(lp34602
(dp34603
S'description'
p34604
S'Semiaxis a for each superellipsoid\n'
p34605
sS'cpp_type'
p34606
S'std::vector<double, std::allocator<double> >'
p34607
sS'default'
p34608
g3
sS'name'
p34609
S'as'
p34610
sS'required'
p34611
I01
sS'group_name'
p34612
Nsa(dp34613
S'description'
p34614
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34615
sS'cpp_type'
p34616
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34617
sS'default'
p34618
g3
sS'name'
p34619
S'block'
p34620
sS'required'
p34621
I00
sS'group_name'
p34622
Nsa(dp34623
S'description'
p34624
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34625
sS'cpp_type'
p34626
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34627
sS'default'
p34628
g3
sS'name'
p34629
S'boundary'
p34630
sS'required'
p34631
I00
sS'group_name'
p34632
Nsa(dp34633
S'description'
p34634
S'Semiaxis b for each superellipsoid\n'
p34635
sS'cpp_type'
p34636
S'std::vector<double, std::allocator<double> >'
p34637
sS'default'
p34638
g3
sS'name'
p34639
S'bs'
p34640
sS'required'
p34641
I01
sS'group_name'
p34642
Nsa(dp34643
S'description'
p34644
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34645
sS'cpp_type'
p34646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34647
sS'default'
p34648
g3
sS'name'
p34649
S'control_tags'
p34650
sS'required'
p34651
I00
sS'group_name'
p34652
S'Advanced'
p34653
sa(dp34654
S'description'
p34655
S'Semiaxis c for each superellipsoid\n'
p34656
sS'cpp_type'
p34657
S'std::vector<double, std::allocator<double> >'
p34658
sS'default'
p34659
g3
sS'name'
p34660
S'cs'
p34661
sS'required'
p34662
I01
sS'group_name'
p34663
Nsa(dp34664
S'description'
p34665
S'Set the enabled status of the MooseObject.\n'
p34666
sS'cpp_type'
p34667
S'bool'
p34668
sS'default'
p34669
S'1'
p34670
sS'name'
p34671
S'enable'
p34672
sS'required'
p34673
I00
sS'group_name'
p34674
S'Advanced'
p34675
sa(dp34676
S'description'
p34677
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p34678
sS'cpp_type'
p34679
S'bool'
p34680
sS'default'
p34681
S'0'
p34682
sS'name'
p34683
S'ignore_uo_dependency'
p34684
sS'required'
p34685
I00
sS'group_name'
p34686
S'Advanced'
p34687
sa(dp34688
S'description'
p34689
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p34690
sS'cpp_type'
p34691
S'double'
p34692
sS'default'
p34693
S'0'
p34694
sS'name'
p34695
S'int_width'
p34696
sS'required'
p34697
I00
sS'group_name'
p34698
Nsa(dp34699
S'description'
p34700
S'The variable value inside the superellipsoid\n'
p34701
sS'cpp_type'
p34702
S'double'
p34703
sS'default'
p34704
g3
sS'name'
p34705
S'invalue'
p34706
sS'required'
p34707
I01
sS'group_name'
p34708
Nsa(dp34709
S'description'
p34710
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p34711
sS'cpp_type'
p34712
S'double'
p34713
sS'default'
p34714
g3
sS'name'
p34715
S'large_spac'
p34716
sS'required'
p34717
I01
sS'group_name'
p34718
Nsa(dp34719
S'description'
p34720
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p34721
sS'cpp_type'
p34722
S'double'
p34723
sS'default'
p34724
g3
sS'name'
p34725
S'nestedvalue'
p34726
sS'required'
p34727
I00
sS'group_name'
p34728
Nsa(dp34729
S'description'
p34730
S'The number of random (small) particles to place\n'
p34731
sS'cpp_type'
p34732
S'unsigned int'
p34733
sS'default'
p34734
g3
sS'name'
p34735
S'npart'
p34736
sS'required'
p34737
I01
sS'group_name'
p34738
Nsa(dp34739
S'description'
p34740
S'Exponent n for each superellipsoid\n'
p34741
sS'cpp_type'
p34742
S'std::vector<double, std::allocator<double> >'
p34743
sS'default'
p34744
g3
sS'name'
p34745
S'ns'
p34746
sS'required'
p34747
I01
sS'group_name'
p34748
Nsa(dp34749
S'description'
p34750
S'The number of tries to place the random particles\n'
p34751
sS'cpp_type'
p34752
S'unsigned int'
p34753
sS'default'
p34754
S'1000'
p34755
sS'name'
p34756
S'numtries'
p34757
sS'required'
p34758
I00
sS'group_name'
p34759
Nsa(dp34760
S'description'
p34761
S'The variable value outside the superellipsoid\n'
p34762
sS'cpp_type'
p34763
S'double'
p34764
sS'default'
p34765
g3
sS'name'
p34766
S'outvalue'
p34767
sS'required'
p34768
I01
sS'group_name'
p34769
Nsa(dp34770
S'description'
p34771
S'Seed value for the random number generator\n'
p34772
sS'cpp_type'
p34773
S'unsigned int'
p34774
sS'default'
p34775
S'12345'
p34776
sS'name'
p34777
S'rand_seed'
p34778
sS'required'
p34779
I00
sS'group_name'
p34780
Nsa(dp34781
S'description'
p34782
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p34783
sS'cpp_type'
p34784
S'double'
p34785
sS'default'
p34786
S'0'
p34787
sS'name'
p34788
S'size_variation'
p34789
sS'required'
p34790
I00
sS'group_name'
p34791
Nsa(dp34792
S'name'
p34793
S'size_variation_type'
p34794
sS'cpp_type'
p34795
S'MooseEnum'
p34796
sS'default'
p34797
S'none'
p34798
sS'description'
p34799
S'Type of distribution that random semiaxes will follow\n'
p34800
sS'required'
p34801
I00
sS'options'
p34802
S'uniform normal none'
p34803
sS'group_name'
p34804
Nsa(dp34805
S'description'
p34806
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p34807
sS'cpp_type'
p34808
S'double'
p34809
sS'default'
p34810
g3
sS'name'
p34811
S'small_a'
p34812
sS'required'
p34813
I01
sS'group_name'
p34814
Nsa(dp34815
S'description'
p34816
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p34817
sS'cpp_type'
p34818
S'double'
p34819
sS'default'
p34820
g3
sS'name'
p34821
S'small_b'
p34822
sS'required'
p34823
I01
sS'group_name'
p34824
Nsa(dp34825
S'description'
p34826
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p34827
sS'cpp_type'
p34828
S'double'
p34829
sS'default'
p34830
g3
sS'name'
p34831
S'small_c'
p34832
sS'required'
p34833
I01
sS'group_name'
p34834
Nsa(dp34835
S'description'
p34836
S'Exponent n for the randomly placed (small) superellipsoids\n'
p34837
sS'cpp_type'
p34838
S'double'
p34839
sS'default'
p34840
g3
sS'name'
p34841
S'small_n'
p34842
sS'required'
p34843
I01
sS'group_name'
p34844
Nsa(dp34845
S'description'
p34846
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p34847
sS'cpp_type'
p34848
S'double'
p34849
sS'default'
p34850
g3
sS'name'
p34851
S'small_spac'
p34852
sS'required'
p34853
I01
sS'group_name'
p34854
Nsa(dp34855
S'description'
p34856
g3
sS'cpp_type'
p34857
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34858
sS'default'
p34859
S'BimodalSuperellipsoidsIC'
p34860
sS'name'
p34861
S'type'
p34862
sS'required'
p34863
I00
sS'group_name'
p34864
Nsa(dp34865
S'description'
p34866
S'The variable this initial condition is supposed to provide values for.\n'
p34867
sS'cpp_type'
p34868
S'VariableName'
p34869
sS'default'
p34870
g3
sS'name'
p34871
S'variable'
p34872
sS'required'
p34873
I01
sS'group_name'
p34874
Nsa(dp34875
S'description'
p34876
S'The x-coordinate for each superellipsoid center\n'
p34877
sS'cpp_type'
p34878
S'std::vector<double, std::allocator<double> >'
p34879
sS'default'
p34880
g3
sS'name'
p34881
S'x_positions'
p34882
sS'required'
p34883
I01
sS'group_name'
p34884
Nsa(dp34885
S'description'
p34886
S'The y-coordinate for each superellipsoid center\n'
p34887
sS'cpp_type'
p34888
S'std::vector<double, std::allocator<double> >'
p34889
sS'default'
p34890
g3
sS'name'
p34891
S'y_positions'
p34892
sS'required'
p34893
I01
sS'group_name'
p34894
Nsa(dp34895
S'description'
p34896
S'The z-coordinate for each superellipsoid center\n'
p34897
sS'cpp_type'
p34898
S'std::vector<double, std::allocator<double> >'
p34899
sS'default'
p34900
g3
sS'name'
p34901
S'z_positions'
p34902
sS'required'
p34903
I01
sS'group_name'
p34904
Nsa(dp34905
S'description'
p34906
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p34907
sS'cpp_type'
p34908
S'bool'
p34909
sS'default'
p34910
S'0'
p34911
sS'name'
p34912
S'zero_gradient'
p34913
sS'required'
p34914
I00
sS'group_name'
p34915
NsasS'name'
p34916
S'/ICs/BimodalSuperellipsoidsIC'
p34917
sa(dp34918
S'description'
p34919
g3
sS'subblocks'
p34920
NsS'parameters'
p34921
(lp34922
(dp34923
S'description'
p34924
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34925
sS'cpp_type'
p34926
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34927
sS'default'
p34928
g3
sS'name'
p34929
S'block'
p34930
sS'required'
p34931
I00
sS'group_name'
p34932
Nsa(dp34933
S'description'
p34934
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34935
sS'cpp_type'
p34936
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34937
sS'default'
p34938
g3
sS'name'
p34939
S'boundary'
p34940
sS'required'
p34941
I00
sS'group_name'
p34942
Nsa(dp34943
S'description'
p34944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34945
sS'cpp_type'
p34946
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34947
sS'default'
p34948
g3
sS'name'
p34949
S'control_tags'
p34950
sS'required'
p34951
I00
sS'group_name'
p34952
S'Advanced'
p34953
sa(dp34954
S'description'
p34955
S'Set the enabled status of the MooseObject.\n'
p34956
sS'cpp_type'
p34957
S'bool'
p34958
sS'default'
p34959
S'1'
p34960
sS'name'
p34961
S'enable'
p34962
sS'required'
p34963
I00
sS'group_name'
p34964
S'Advanced'
p34965
sa(dp34966
S'description'
p34967
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p34968
sS'cpp_type'
p34969
S'bool'
p34970
sS'default'
p34971
S'0'
p34972
sS'name'
p34973
S'ignore_uo_dependency'
p34974
sS'required'
p34975
I00
sS'group_name'
p34976
S'Advanced'
p34977
sa(dp34978
S'description'
p34979
S'The value of the variable inside the box\n'
p34980
sS'cpp_type'
p34981
S'double'
p34982
sS'default'
p34983
S'0'
p34984
sS'name'
p34985
S'inside'
p34986
sS'required'
p34987
I00
sS'group_name'
p34988
Nsa(dp34989
S'description'
p34990
S'The value of the variable outside the box\n'
p34991
sS'cpp_type'
p34992
S'double'
p34993
sS'default'
p34994
S'0'
p34995
sS'name'
p34996
S'outside'
p34997
sS'required'
p34998
I00
sS'group_name'
p34999
Nsa(dp35000
S'description'
p35001
g3
sS'cpp_type'
p35002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35003
sS'default'
p35004
S'BoundingBoxIC'
p35005
sS'name'
p35006
S'type'
p35007
sS'required'
p35008
I00
sS'group_name'
p35009
Nsa(dp35010
S'description'
p35011
S'The variable this initial condition is supposed to provide values for.\n'
p35012
sS'cpp_type'
p35013
S'VariableName'
p35014
sS'default'
p35015
g3
sS'name'
p35016
S'variable'
p35017
sS'required'
p35018
I01
sS'group_name'
p35019
Nsa(dp35020
S'description'
p35021
S'The x coordinate of the lower left-hand corner of the box\n'
p35022
sS'cpp_type'
p35023
S'double'
p35024
sS'default'
p35025
g3
sS'name'
p35026
S'x1'
p35027
sS'required'
p35028
I01
sS'group_name'
p35029
Nsa(dp35030
S'description'
p35031
S'The x coordinate of the upper right-hand corner of the box\n'
p35032
sS'cpp_type'
p35033
S'double'
p35034
sS'default'
p35035
g3
sS'name'
p35036
S'x2'
p35037
sS'required'
p35038
I01
sS'group_name'
p35039
Nsa(dp35040
S'description'
p35041
S'The y coordinate of the lower left-hand corner of the box\n'
p35042
sS'cpp_type'
p35043
S'double'
p35044
sS'default'
p35045
g3
sS'name'
p35046
S'y1'
p35047
sS'required'
p35048
I01
sS'group_name'
p35049
Nsa(dp35050
S'description'
p35051
S'The y coordinate of the upper right-hand corner of the box\n'
p35052
sS'cpp_type'
p35053
S'double'
p35054
sS'default'
p35055
g3
sS'name'
p35056
S'y2'
p35057
sS'required'
p35058
I01
sS'group_name'
p35059
Nsa(dp35060
S'description'
p35061
S'The z coordinate of the lower left-hand corner of the box\n'
p35062
sS'cpp_type'
p35063
S'double'
p35064
sS'default'
p35065
S'0'
p35066
sS'name'
p35067
S'z1'
p35068
sS'required'
p35069
I00
sS'group_name'
p35070
Nsa(dp35071
S'description'
p35072
S'The z coordinate of the upper right-hand corner of the box\n'
p35073
sS'cpp_type'
p35074
S'double'
p35075
sS'default'
p35076
S'0'
p35077
sS'name'
p35078
S'z2'
p35079
sS'required'
p35080
I00
sS'group_name'
p35081
NsasS'name'
p35082
S'/ICs/BoundingBoxIC'
p35083
sa(dp35084
S'description'
p35085
S'Close packed arrangement of smooth circles\n'
p35086
sS'subblocks'
p35087
NsS'parameters'
p35088
(lp35089
(dp35090
S'description'
p35091
S'in 3D, whether the objects are spheres or columns\n'
p35092
sS'cpp_type'
p35093
S'bool'
p35094
sS'default'
p35095
S'1'
p35096
sS'name'
p35097
S'3D_spheres'
p35098
sS'required'
p35099
I00
sS'group_name'
p35100
Nsa(dp35101
S'description'
p35102
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35103
sS'cpp_type'
p35104
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35105
sS'default'
p35106
g3
sS'name'
p35107
S'block'
p35108
sS'required'
p35109
I00
sS'group_name'
p35110
Nsa(dp35111
S'description'
p35112
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35113
sS'cpp_type'
p35114
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35115
sS'default'
p35116
g3
sS'name'
p35117
S'boundary'
p35118
sS'required'
p35119
I00
sS'group_name'
p35120
Nsa(dp35121
S'description'
p35122
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35123
sS'cpp_type'
p35124
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35125
sS'default'
p35126
g3
sS'name'
p35127
S'control_tags'
p35128
sS'required'
p35129
I00
sS'group_name'
p35130
S'Advanced'
p35131
sa(dp35132
S'description'
p35133
S'Set the enabled status of the MooseObject.\n'
p35134
sS'cpp_type'
p35135
S'bool'
p35136
sS'default'
p35137
S'1'
p35138
sS'name'
p35139
S'enable'
p35140
sS'required'
p35141
I00
sS'group_name'
p35142
S'Advanced'
p35143
sa(dp35144
S'description'
p35145
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35146
sS'cpp_type'
p35147
S'bool'
p35148
sS'default'
p35149
S'0'
p35150
sS'name'
p35151
S'ignore_uo_dependency'
p35152
sS'required'
p35153
I00
sS'group_name'
p35154
S'Advanced'
p35155
sa(dp35156
S'description'
p35157
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p35158
sS'cpp_type'
p35159
S'double'
p35160
sS'default'
p35161
S'0'
p35162
sS'name'
p35163
S'int_width'
p35164
sS'required'
p35165
I00
sS'group_name'
p35166
Nsa(dp35167
S'description'
p35168
S'The variable value inside the circle\n'
p35169
sS'cpp_type'
p35170
S'double'
p35171
sS'default'
p35172
g3
sS'name'
p35173
S'invalue'
p35174
sS'required'
p35175
I01
sS'group_name'
p35176
Nsa(dp35177
S'description'
p35178
S'The variable value outside the circle\n'
p35179
sS'cpp_type'
p35180
S'double'
p35181
sS'default'
p35182
g3
sS'name'
p35183
S'outvalue'
p35184
sS'required'
p35185
I01
sS'group_name'
p35186
Nsa(dp35187
S'description'
p35188
S'The radius of a circle\n'
p35189
sS'cpp_type'
p35190
S'double'
p35191
sS'default'
p35192
g3
sS'name'
p35193
S'radius'
p35194
sS'required'
p35195
I01
sS'group_name'
p35196
Nsa(dp35197
S'description'
p35198
S'Seed value for the random number generator\n'
p35199
sS'cpp_type'
p35200
S'unsigned int'
p35201
sS'default'
p35202
S'12345'
p35203
sS'name'
p35204
S'rand_seed'
p35205
sS'required'
p35206
I00
sS'group_name'
p35207
Nsa(dp35208
S'description'
p35209
g3
sS'cpp_type'
p35210
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35211
sS'default'
p35212
S'ClosePackIC'
p35213
sS'name'
p35214
S'type'
p35215
sS'required'
p35216
I00
sS'group_name'
p35217
Nsa(dp35218
S'description'
p35219
S'The variable this initial condition is supposed to provide values for.\n'
p35220
sS'cpp_type'
p35221
S'VariableName'
p35222
sS'default'
p35223
g3
sS'name'
p35224
S'variable'
p35225
sS'required'
p35226
I01
sS'group_name'
p35227
Nsa(dp35228
S'description'
p35229
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p35230
sS'cpp_type'
p35231
S'bool'
p35232
sS'default'
p35233
S'0'
p35234
sS'name'
p35235
S'zero_gradient'
p35236
sS'required'
p35237
I00
sS'group_name'
p35238
NsasS'name'
p35239
S'/ICs/ClosePackIC'
p35240
sa(dp35241
S'description'
p35242
g3
sS'subblocks'
p35243
NsS'parameters'
p35244
(lp35245
(dp35246
S'description'
p35247
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35248
sS'cpp_type'
p35249
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35250
sS'default'
p35251
g3
sS'name'
p35252
S'block'
p35253
sS'required'
p35254
I00
sS'group_name'
p35255
Nsa(dp35256
S'description'
p35257
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35258
sS'cpp_type'
p35259
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35260
sS'default'
p35261
g3
sS'name'
p35262
S'boundary'
p35263
sS'required'
p35264
I00
sS'group_name'
p35265
Nsa(dp35266
S'description'
p35267
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35268
sS'cpp_type'
p35269
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35270
sS'default'
p35271
g3
sS'name'
p35272
S'control_tags'
p35273
sS'required'
p35274
I00
sS'group_name'
p35275
S'Advanced'
p35276
sa(dp35277
S'description'
p35278
S'Set the enabled status of the MooseObject.\n'
p35279
sS'cpp_type'
p35280
S'bool'
p35281
sS'default'
p35282
S'1'
p35283
sS'name'
p35284
S'enable'
p35285
sS'required'
p35286
I00
sS'group_name'
p35287
S'Advanced'
p35288
sa(dp35289
S'description'
p35290
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35291
sS'cpp_type'
p35292
S'bool'
p35293
sS'default'
p35294
S'0'
p35295
sS'name'
p35296
S'ignore_uo_dependency'
p35297
sS'required'
p35298
I00
sS'group_name'
p35299
S'Advanced'
p35300
sa(dp35301
S'description'
p35302
g3
sS'cpp_type'
p35303
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35304
sS'default'
p35305
S'ConstantIC'
p35306
sS'name'
p35307
S'type'
p35308
sS'required'
p35309
I00
sS'group_name'
p35310
Nsa(dp35311
S'description'
p35312
S'The value to be set in IC\n'
p35313
sS'cpp_type'
p35314
S'double'
p35315
sS'default'
p35316
g3
sS'name'
p35317
S'value'
p35318
sS'required'
p35319
I01
sS'group_name'
p35320
Nsa(dp35321
S'description'
p35322
S'The variable this initial condition is supposed to provide values for.\n'
p35323
sS'cpp_type'
p35324
S'VariableName'
p35325
sS'default'
p35326
g3
sS'name'
p35327
S'variable'
p35328
sS'required'
p35329
I01
sS'group_name'
p35330
NsasS'name'
p35331
S'/ICs/ConstantIC'
p35332
sa(dp35333
S'description'
p35334
S'Cross-shaped initial condition\n'
p35335
sS'subblocks'
p35336
NsS'parameters'
p35337
(lp35338
(dp35339
S'description'
p35340
S'The amplitude\n'
p35341
sS'cpp_type'
p35342
S'double'
p35343
sS'default'
p35344
S'1'
p35345
sS'name'
p35346
S'amplitude'
p35347
sS'required'
p35348
I00
sS'group_name'
p35349
Nsa(dp35350
S'description'
p35351
S'The average value\n'
p35352
sS'cpp_type'
p35353
S'double'
p35354
sS'default'
p35355
S'0'
p35356
sS'name'
p35357
S'average'
p35358
sS'required'
p35359
I00
sS'group_name'
p35360
Nsa(dp35361
S'description'
p35362
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35363
sS'cpp_type'
p35364
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35365
sS'default'
p35366
g3
sS'name'
p35367
S'block'
p35368
sS'required'
p35369
I00
sS'group_name'
p35370
Nsa(dp35371
S'description'
p35372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35373
sS'cpp_type'
p35374
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35375
sS'default'
p35376
g3
sS'name'
p35377
S'boundary'
p35378
sS'required'
p35379
I00
sS'group_name'
p35380
Nsa(dp35381
S'description'
p35382
S'A small area between the max value and the interface\n'
p35383
sS'cpp_type'
p35384
S'double'
p35385
sS'default'
p35386
S'0.03125'
p35387
sS'name'
p35388
S'buffer'
p35389
sS'required'
p35390
I00
sS'group_name'
p35391
Nsa(dp35392
S'description'
p35393
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35394
sS'cpp_type'
p35395
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35396
sS'default'
p35397
g3
sS'name'
p35398
S'control_tags'
p35399
sS'required'
p35400
I00
sS'group_name'
p35401
S'Advanced'
p35402
sa(dp35403
S'description'
p35404
S'Set the enabled status of the MooseObject.\n'
p35405
sS'cpp_type'
p35406
S'bool'
p35407
sS'default'
p35408
S'1'
p35409
sS'name'
p35410
S'enable'
p35411
sS'required'
p35412
I00
sS'group_name'
p35413
S'Advanced'
p35414
sa(dp35415
S'description'
p35416
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35417
sS'cpp_type'
p35418
S'bool'
p35419
sS'default'
p35420
S'0'
p35421
sS'name'
p35422
S'ignore_uo_dependency'
p35423
sS'required'
p35424
I00
sS'group_name'
p35425
S'Advanced'
p35426
sa(dp35427
S'description'
p35428
S'The interface width\n'
p35429
sS'cpp_type'
p35430
S'double'
p35431
sS'default'
p35432
S'0.03125'
p35433
sS'name'
p35434
S'interface'
p35435
sS'required'
p35436
I00
sS'group_name'
p35437
Nsa(dp35438
S'description'
p35439
S'The length\n'
p35440
sS'cpp_type'
p35441
S'double'
p35442
sS'default'
p35443
S'0.75'
p35444
sS'name'
p35445
S'length'
p35446
sS'required'
p35447
I00
sS'group_name'
p35448
Nsa(dp35449
S'description'
p35450
g3
sS'cpp_type'
p35451
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35452
sS'default'
p35453
S'CrossIC'
p35454
sS'name'
p35455
S'type'
p35456
sS'required'
p35457
I00
sS'group_name'
p35458
Nsa(dp35459
S'description'
p35460
S'The variable this initial condition is supposed to provide values for.\n'
p35461
sS'cpp_type'
p35462
S'VariableName'
p35463
sS'default'
p35464
g3
sS'name'
p35465
S'variable'
p35466
sS'required'
p35467
I01
sS'group_name'
p35468
Nsa(dp35469
S'description'
p35470
S'The width\n'
p35471
sS'cpp_type'
p35472
S'double'
p35473
sS'default'
p35474
S'0.125'
p35475
sS'name'
p35476
S'width'
p35477
sS'required'
p35478
I00
sS'group_name'
p35479
Nsa(dp35480
S'description'
p35481
S'The x coordinate of the lower left-hand corner of the box\n'
p35482
sS'cpp_type'
p35483
S'double'
p35484
sS'default'
p35485
S'0'
p35486
sS'name'
p35487
S'x1'
p35488
sS'required'
p35489
I00
sS'group_name'
p35490
Nsa(dp35491
S'description'
p35492
S'The x coordinate of the upper right-hand corner of the box\n'
p35493
sS'cpp_type'
p35494
S'double'
p35495
sS'default'
p35496
S'1'
p35497
sS'name'
p35498
S'x2'
p35499
sS'required'
p35500
I00
sS'group_name'
p35501
Nsa(dp35502
S'description'
p35503
S'The y coordinate of the lower left-hand corner of the box\n'
p35504
sS'cpp_type'
p35505
S'double'
p35506
sS'default'
p35507
S'0'
p35508
sS'name'
p35509
S'y1'
p35510
sS'required'
p35511
I00
sS'group_name'
p35512
Nsa(dp35513
S'description'
p35514
S'The y coordinate of the upper right-hand corner of the box\n'
p35515
sS'cpp_type'
p35516
S'double'
p35517
sS'default'
p35518
S'1'
p35519
sS'name'
p35520
S'y2'
p35521
sS'required'
p35522
I00
sS'group_name'
p35523
NsasS'name'
p35524
S'/ICs/CrossIC'
p35525
sa(dp35526
S'description'
p35527
g3
sS'subblocks'
p35528
NsS'parameters'
p35529
(lp35530
(dp35531
S'description'
p35532
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35533
sS'cpp_type'
p35534
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35535
sS'default'
p35536
g3
sS'name'
p35537
S'block'
p35538
sS'required'
p35539
I00
sS'group_name'
p35540
Nsa(dp35541
S'description'
p35542
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35543
sS'cpp_type'
p35544
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35545
sS'default'
p35546
g3
sS'name'
p35547
S'boundary'
p35548
sS'required'
p35549
I00
sS'group_name'
p35550
Nsa(dp35551
S'description'
p35552
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35553
sS'cpp_type'
p35554
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35555
sS'default'
p35556
g3
sS'name'
p35557
S'control_tags'
p35558
sS'required'
p35559
I00
sS'group_name'
p35560
S'Advanced'
p35561
sa(dp35562
S'description'
p35563
S'Set the enabled status of the MooseObject.\n'
p35564
sS'cpp_type'
p35565
S'bool'
p35566
sS'default'
p35567
S'1'
p35568
sS'name'
p35569
S'enable'
p35570
sS'required'
p35571
I00
sS'group_name'
p35572
S'Advanced'
p35573
sa(dp35574
S'description'
p35575
S'The initial condition function.\n'
p35576
sS'cpp_type'
p35577
S'FunctionName'
p35578
sS'default'
p35579
g3
sS'name'
p35580
S'function'
p35581
sS'required'
p35582
I01
sS'group_name'
p35583
Nsa(dp35584
S'description'
p35585
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35586
sS'cpp_type'
p35587
S'bool'
p35588
sS'default'
p35589
S'0'
p35590
sS'name'
p35591
S'ignore_uo_dependency'
p35592
sS'required'
p35593
I00
sS'group_name'
p35594
S'Advanced'
p35595
sa(dp35596
S'description'
p35597
g3
sS'cpp_type'
p35598
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35599
sS'default'
p35600
S'FunctionIC'
p35601
sS'name'
p35602
S'type'
p35603
sS'required'
p35604
I00
sS'group_name'
p35605
Nsa(dp35606
S'description'
p35607
S'The variable this initial condition is supposed to provide values for.\n'
p35608
sS'cpp_type'
p35609
S'VariableName'
p35610
sS'default'
p35611
g3
sS'name'
p35612
S'variable'
p35613
sS'required'
p35614
I01
sS'group_name'
p35615
NsasS'name'
p35616
S'/ICs/FunctionIC'
p35617
sa(dp35618
S'description'
p35619
g3
sS'subblocks'
p35620
NsS'parameters'
p35621
(lp35622
(dp35623
S'description'
p35624
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35625
sS'cpp_type'
p35626
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35627
sS'default'
p35628
g3
sS'name'
p35629
S'control_tags'
p35630
sS'required'
p35631
I00
sS'group_name'
p35632
S'Advanced'
p35633
sa(dp35634
S'description'
p35635
S'Set the enabled status of the MooseObject.\n'
p35636
sS'cpp_type'
p35637
S'bool'
p35638
sS'default'
p35639
S'1'
p35640
sS'name'
p35641
S'enable'
p35642
sS'required'
p35643
I00
sS'group_name'
p35644
S'Advanced'
p35645
sa(dp35646
S'description'
p35647
S'The initial condition function.\n'
p35648
sS'cpp_type'
p35649
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p35650
sS'default'
p35651
g3
sS'name'
p35652
S'function'
p35653
sS'required'
p35654
I01
sS'group_name'
p35655
Nsa(dp35656
S'description'
p35657
g3
sS'cpp_type'
p35658
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35659
sS'default'
p35660
S'FunctionScalarIC'
p35661
sS'name'
p35662
S'type'
p35663
sS'required'
p35664
I00
sS'group_name'
p35665
Nsa(dp35666
S'description'
p35667
S'The variable this initial condition is supposed to provide values for.\n'
p35668
sS'cpp_type'
p35669
S'VariableName'
p35670
sS'default'
p35671
g3
sS'name'
p35672
S'variable'
p35673
sS'required'
p35674
I00
sS'group_name'
p35675
NsasS'name'
p35676
S'/ICs/FunctionScalarIC'
p35677
sa(dp35678
S'description'
p35679
S'Perturbed hexagonal polycrystal\n'
p35680
sS'subblocks'
p35681
NsS'parameters'
p35682
(lp35683
(dp35684
S'description'
p35685
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35686
sS'cpp_type'
p35687
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35688
sS'default'
p35689
g3
sS'name'
p35690
S'block'
p35691
sS'required'
p35692
I00
sS'group_name'
p35693
Nsa(dp35694
S'description'
p35695
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35696
sS'cpp_type'
p35697
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35698
sS'default'
p35699
g3
sS'name'
p35700
S'boundary'
p35701
sS'required'
p35702
I00
sS'group_name'
p35703
Nsa(dp35704
S'name'
p35705
S'coloring_algorithm'
p35706
sS'cpp_type'
p35707
S'MooseEnum'
p35708
sS'default'
p35709
S'legacy'
p35710
sS'description'
p35711
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p35712
sS'required'
p35713
I00
sS'options'
p35714
S'legacy bt jp power greedy'
p35715
sS'group_name'
p35716
Nsa(dp35717
S'description'
p35718
S'3D microstructure will be columnar in the z-direction?\n'
p35719
sS'cpp_type'
p35720
S'bool'
p35721
sS'default'
p35722
S'0'
p35723
sS'name'
p35724
S'columnar_3D'
p35725
sS'required'
p35726
I00
sS'group_name'
p35727
Nsa(dp35728
S'description'
p35729
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35730
sS'cpp_type'
p35731
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35732
sS'default'
p35733
g3
sS'name'
p35734
S'control_tags'
p35735
sS'required'
p35736
I00
sS'group_name'
p35737
S'Advanced'
p35738
sa(dp35739
S'description'
p35740
S'Set the enabled status of the MooseObject.\n'
p35741
sS'cpp_type'
p35742
S'bool'
p35743
sS'default'
p35744
S'1'
p35745
sS'name'
p35746
S'enable'
p35747
sS'required'
p35748
I00
sS'group_name'
p35749
S'Advanced'
p35750
sa(dp35751
S'description'
p35752
S'Number of grains being represented by the order parameters\n'
p35753
sS'cpp_type'
p35754
S'unsigned int'
p35755
sS'default'
p35756
g3
sS'name'
p35757
S'grain_num'
p35758
sS'required'
p35759
I01
sS'group_name'
p35760
Nsa(dp35761
S'description'
p35762
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35763
sS'cpp_type'
p35764
S'bool'
p35765
sS'default'
p35766
S'0'
p35767
sS'name'
p35768
S'ignore_uo_dependency'
p35769
sS'required'
p35770
I00
sS'group_name'
p35771
S'Advanced'
p35772
sa(dp35773
S'description'
p35774
S'The index for the current order parameter\n'
p35775
sS'cpp_type'
p35776
S'unsigned int'
p35777
sS'default'
p35778
g3
sS'name'
p35779
S'op_index'
p35780
sS'required'
p35781
I01
sS'group_name'
p35782
Nsa(dp35783
S'description'
p35784
S'Number of order parameters\n'
p35785
sS'cpp_type'
p35786
S'unsigned int'
p35787
sS'default'
p35788
g3
sS'name'
p35789
S'op_num'
p35790
sS'required'
p35791
I01
sS'group_name'
p35792
Nsa(dp35793
S'description'
p35794
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p35795
sS'cpp_type'
p35796
S'double'
p35797
sS'default'
p35798
S'0'
p35799
sS'name'
p35800
S'perturbation_percent'
p35801
sS'required'
p35802
I00
sS'group_name'
p35803
Nsa(dp35804
S'description'
p35805
S'The random seed\n'
p35806
sS'cpp_type'
p35807
S'unsigned int'
p35808
sS'default'
p35809
S'12444'
p35810
sS'name'
p35811
S'rand_seed'
p35812
sS'required'
p35813
I00
sS'group_name'
p35814
Nsa(dp35815
S'description'
p35816
g3
sS'cpp_type'
p35817
S'int'
p35818
sS'default'
p35819
S'1'
p35820
sS'name'
p35821
S'typ'
p35822
sS'required'
p35823
I00
sS'group_name'
p35824
Nsa(dp35825
S'description'
p35826
g3
sS'cpp_type'
p35827
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35828
sS'default'
p35829
S'HexPolycrystalIC'
p35830
sS'name'
p35831
S'type'
p35832
sS'required'
p35833
I00
sS'group_name'
p35834
Nsa(dp35835
S'description'
p35836
S'The variable this initial condition is supposed to provide values for.\n'
p35837
sS'cpp_type'
p35838
S'VariableName'
p35839
sS'default'
p35840
g3
sS'name'
p35841
S'variable'
p35842
sS'required'
p35843
I01
sS'group_name'
p35844
Nsa(dp35845
S'description'
p35846
S'Specifies offset of hexagon grid in x-direction\n'
p35847
sS'cpp_type'
p35848
S'double'
p35849
sS'default'
p35850
S'0.5'
p35851
sS'name'
p35852
S'x_offset'
p35853
sS'required'
p35854
I00
sS'group_name'
p35855
NsasS'name'
p35856
S'/ICs/HexPolycrystalIC'
p35857
sa(dp35858
S'description'
p35859
S'Perturbed square lattice of smooth circles\n'
p35860
sS'subblocks'
p35861
NsS'parameters'
p35862
(lp35863
(dp35864
S'description'
p35865
S'in 3D, whether the objects are spheres or columns\n'
p35866
sS'cpp_type'
p35867
S'bool'
p35868
sS'default'
p35869
S'1'
p35870
sS'name'
p35871
S'3D_spheres'
p35872
sS'required'
p35873
I00
sS'group_name'
p35874
Nsa(dp35875
S'description'
p35876
S'Variation from central lattice position\n'
p35877
sS'cpp_type'
p35878
S'double'
p35879
sS'default'
p35880
g3
sS'name'
p35881
S'Rnd_variation'
p35882
sS'required'
p35883
I00
sS'group_name'
p35884
Nsa(dp35885
S'description'
p35886
S"Don't place any bubbles on the simulation cell boundaries\n"
p35887
sS'cpp_type'
p35888
S'bool'
p35889
sS'default'
p35890
S'1'
p35891
sS'name'
p35892
S'avoid_bounds'
p35893
sS'required'
p35894
I00
sS'group_name'
p35895
Nsa(dp35896
S'description'
p35897
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35898
sS'cpp_type'
p35899
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35900
sS'default'
p35901
g3
sS'name'
p35902
S'block'
p35903
sS'required'
p35904
I00
sS'group_name'
p35905
Nsa(dp35906
S'description'
p35907
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35908
sS'cpp_type'
p35909
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35910
sS'default'
p35911
g3
sS'name'
p35912
S'boundary'
p35913
sS'required'
p35914
I00
sS'group_name'
p35915
Nsa(dp35916
S'description'
p35917
S'Vector containing the number of bubbles along each side\n'
p35918
sS'cpp_type'
p35919
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p35920
sS'default'
p35921
g3
sS'name'
p35922
S'circles_per_side'
p35923
sS'required'
p35924
I01
sS'group_name'
p35925
Nsa(dp35926
S'description'
p35927
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35928
sS'cpp_type'
p35929
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35930
sS'default'
p35931
g3
sS'name'
p35932
S'control_tags'
p35933
sS'required'
p35934
I00
sS'group_name'
p35935
S'Advanced'
p35936
sa(dp35937
S'description'
p35938
S'Set the enabled status of the MooseObject.\n'
p35939
sS'cpp_type'
p35940
S'bool'
p35941
sS'default'
p35942
S'1'
p35943
sS'name'
p35944
S'enable'
p35945
sS'required'
p35946
I00
sS'group_name'
p35947
S'Advanced'
p35948
sa(dp35949
S'description'
p35950
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35951
sS'cpp_type'
p35952
S'bool'
p35953
sS'default'
p35954
S'0'
p35955
sS'name'
p35956
S'ignore_uo_dependency'
p35957
sS'required'
p35958
I00
sS'group_name'
p35959
S'Advanced'
p35960
sa(dp35961
S'description'
p35962
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p35963
sS'cpp_type'
p35964
S'double'
p35965
sS'default'
p35966
S'0'
p35967
sS'name'
p35968
S'int_width'
p35969
sS'required'
p35970
I00
sS'group_name'
p35971
Nsa(dp35972
S'description'
p35973
S'The variable value inside the circle\n'
p35974
sS'cpp_type'
p35975
S'double'
p35976
sS'default'
p35977
g3
sS'name'
p35978
S'invalue'
p35979
sS'required'
p35980
I01
sS'group_name'
p35981
Nsa(dp35982
S'description'
p35983
S'The variable value outside the circle\n'
p35984
sS'cpp_type'
p35985
S'double'
p35986
sS'default'
p35987
g3
sS'name'
p35988
S'outvalue'
p35989
sS'required'
p35990
I01
sS'group_name'
p35991
Nsa(dp35992
S'description'
p35993
S'Variation from central lattice position\n'
p35994
sS'cpp_type'
p35995
S'double'
p35996
sS'default'
p35997
S'0'
p35998
sS'name'
p35999
S'pos_variation'
p36000
sS'required'
p36001
I00
sS'group_name'
p36002
Nsa(dp36003
S'description'
p36004
S'Mean radius value for the circels\n'
p36005
sS'cpp_type'
p36006
S'double'
p36007
sS'default'
p36008
g3
sS'name'
p36009
S'radius'
p36010
sS'required'
p36011
I01
sS'group_name'
p36012
Nsa(dp36013
S'description'
p36014
S'Plus or minus fraction of random variation in the bubble radius\n'
p36015
sS'cpp_type'
p36016
S'double'
p36017
sS'default'
p36018
S'0'
p36019
sS'name'
p36020
S'radius_variation'
p36021
sS'required'
p36022
I00
sS'group_name'
p36023
Nsa(dp36024
S'name'
p36025
S'radius_variation_type'
p36026
sS'cpp_type'
p36027
S'MooseEnum'
p36028
sS'default'
p36029
S'none'
p36030
sS'description'
p36031
S'Type of distribution that random circle radii will follow\n'
p36032
sS'required'
p36033
I00
sS'options'
p36034
S'uniform normal none'
p36035
sS'group_name'
p36036
Nsa(dp36037
S'description'
p36038
S'random seed\n'
p36039
sS'cpp_type'
p36040
S'unsigned int'
p36041
sS'default'
p36042
S'2000'
p36043
sS'name'
p36044
S'rand_seed'
p36045
sS'required'
p36046
I00
sS'group_name'
p36047
Nsa(dp36048
S'description'
p36049
g3
sS'cpp_type'
p36050
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36051
sS'default'
p36052
S'LatticeSmoothCircleIC'
p36053
sS'name'
p36054
S'type'
p36055
sS'required'
p36056
I00
sS'group_name'
p36057
Nsa(dp36058
S'description'
p36059
S'The variable this initial condition is supposed to provide values for.\n'
p36060
sS'cpp_type'
p36061
S'VariableName'
p36062
sS'default'
p36063
g3
sS'name'
p36064
S'variable'
p36065
sS'required'
p36066
I01
sS'group_name'
p36067
Nsa(dp36068
S'description'
p36069
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p36070
sS'cpp_type'
p36071
S'bool'
p36072
sS'default'
p36073
S'0'
p36074
sS'name'
p36075
S'zero_gradient'
p36076
sS'required'
p36077
I00
sS'group_name'
p36078
NsasS'name'
p36079
S'/ICs/LatticeSmoothCircleIC'
p36080
sa(dp36081
S'description'
p36082
S'Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n'
p36083
sS'subblocks'
p36084
NsS'parameters'
p36085
(lp36086
(dp36087
S'description'
p36088
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36089
sS'cpp_type'
p36090
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36091
sS'default'
p36092
g3
sS'name'
p36093
S'block'
p36094
sS'required'
p36095
I00
sS'group_name'
p36096
Nsa(dp36097
S'description'
p36098
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36099
sS'cpp_type'
p36100
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36101
sS'default'
p36102
g3
sS'name'
p36103
S'boundary'
p36104
sS'required'
p36105
I00
sS'group_name'
p36106
Nsa(dp36107
S'description'
p36108
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36109
sS'cpp_type'
p36110
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36111
sS'default'
p36112
g3
sS'name'
p36113
S'control_tags'
p36114
sS'required'
p36115
I00
sS'group_name'
p36116
S'Advanced'
p36117
sa(dp36118
S'description'
p36119
S'The corner coordinates boxes\n'
p36120
sS'cpp_type'
p36121
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p36122
sS'default'
p36123
g3
sS'name'
p36124
S'corners'
p36125
sS'required'
p36126
I01
sS'group_name'
p36127
Nsa(dp36128
S'description'
p36129
S'Set the enabled status of the MooseObject.\n'
p36130
sS'cpp_type'
p36131
S'bool'
p36132
sS'default'
p36133
S'1'
p36134
sS'name'
p36135
S'enable'
p36136
sS'required'
p36137
I00
sS'group_name'
p36138
S'Advanced'
p36139
sa(dp36140
S'description'
p36141
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36142
sS'cpp_type'
p36143
S'bool'
p36144
sS'default'
p36145
S'0'
p36146
sS'name'
p36147
S'ignore_uo_dependency'
p36148
sS'required'
p36149
I00
sS'group_name'
p36150
S'Advanced'
p36151
sa(dp36152
S'description'
p36153
S'The value of the variable inside each box (one value per box or a single value for all boxes)\n'
p36154
sS'cpp_type'
p36155
S'std::vector<double, std::allocator<double> >'
p36156
sS'default'
p36157
g3
sS'name'
p36158
S'inside'
p36159
sS'required'
p36160
I01
sS'group_name'
p36161
Nsa(dp36162
S'description'
p36163
S'The coordinates of the opposite corners of the boxes\n'
p36164
sS'cpp_type'
p36165
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p36166
sS'default'
p36167
g3
sS'name'
p36168
S'opposite_corners'
p36169
sS'required'
p36170
I01
sS'group_name'
p36171
Nsa(dp36172
S'description'
p36173
S'The value of the variable outside the box\n'
p36174
sS'cpp_type'
p36175
S'double'
p36176
sS'default'
p36177
S'0'
p36178
sS'name'
p36179
S'outside'
p36180
sS'required'
p36181
I00
sS'group_name'
p36182
Nsa(dp36183
S'description'
p36184
g3
sS'cpp_type'
p36185
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36186
sS'default'
p36187
S'MultiBoundingBoxIC'
p36188
sS'name'
p36189
S'type'
p36190
sS'required'
p36191
I00
sS'group_name'
p36192
Nsa(dp36193
S'description'
p36194
S'The variable this initial condition is supposed to provide values for.\n'
p36195
sS'cpp_type'
p36196
S'VariableName'
p36197
sS'default'
p36198
g3
sS'name'
p36199
S'variable'
p36200
sS'required'
p36201
I01
sS'group_name'
p36202
NsasS'name'
p36203
S'/ICs/MultiBoundingBoxIC'
p36204
sa(dp36205
S'description'
p36206
S'Random distribution of smooth circles with given minimum spacing\n'
p36207
sS'subblocks'
p36208
NsS'parameters'
p36209
(lp36210
(dp36211
S'description'
p36212
S'in 3D, whether the objects are spheres or columns\n'
p36213
sS'cpp_type'
p36214
S'bool'
p36215
sS'default'
p36216
S'1'
p36217
sS'name'
p36218
S'3D_spheres'
p36219
sS'required'
p36220
I00
sS'group_name'
p36221
Nsa(dp36222
S'description'
p36223
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36224
sS'cpp_type'
p36225
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36226
sS'default'
p36227
g3
sS'name'
p36228
S'block'
p36229
sS'required'
p36230
I00
sS'group_name'
p36231
Nsa(dp36232
S'description'
p36233
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36234
sS'cpp_type'
p36235
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36236
sS'default'
p36237
g3
sS'name'
p36238
S'boundary'
p36239
sS'required'
p36240
I00
sS'group_name'
p36241
Nsa(dp36242
S'description'
p36243
S'minimum spacing of bubbles, measured from center to center\n'
p36244
sS'cpp_type'
p36245
S'double'
p36246
sS'default'
p36247
g3
sS'name'
p36248
S'bubspac'
p36249
sS'required'
p36250
I01
sS'group_name'
p36251
Nsa(dp36252
S'description'
p36253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36254
sS'cpp_type'
p36255
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36256
sS'default'
p36257
g3
sS'name'
p36258
S'control_tags'
p36259
sS'required'
p36260
I00
sS'group_name'
p36261
S'Advanced'
p36262
sa(dp36263
S'description'
p36264
S'Set the enabled status of the MooseObject.\n'
p36265
sS'cpp_type'
p36266
S'bool'
p36267
sS'default'
p36268
S'1'
p36269
sS'name'
p36270
S'enable'
p36271
sS'required'
p36272
I00
sS'group_name'
p36273
S'Advanced'
p36274
sa(dp36275
S'description'
p36276
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36277
sS'cpp_type'
p36278
S'bool'
p36279
sS'default'
p36280
S'0'
p36281
sS'name'
p36282
S'ignore_uo_dependency'
p36283
sS'required'
p36284
I00
sS'group_name'
p36285
S'Advanced'
p36286
sa(dp36287
S'description'
p36288
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p36289
sS'cpp_type'
p36290
S'double'
p36291
sS'default'
p36292
S'0'
p36293
sS'name'
p36294
S'int_width'
p36295
sS'required'
p36296
I00
sS'group_name'
p36297
Nsa(dp36298
S'description'
p36299
S'The variable value inside the circle\n'
p36300
sS'cpp_type'
p36301
S'double'
p36302
sS'default'
p36303
g3
sS'name'
p36304
S'invalue'
p36305
sS'required'
p36306
I01
sS'group_name'
p36307
Nsa(dp36308
S'description'
p36309
S'The number of bubbles to place\n'
p36310
sS'cpp_type'
p36311
S'unsigned int'
p36312
sS'default'
p36313
g3
sS'name'
p36314
S'numbub'
p36315
sS'required'
p36316
I01
sS'group_name'
p36317
Nsa(dp36318
S'description'
p36319
S'The number of tries\n'
p36320
sS'cpp_type'
p36321
S'unsigned int'
p36322
sS'default'
p36323
S'1000'
p36324
sS'name'
p36325
S'numtries'
p36326
sS'required'
p36327
I00
sS'group_name'
p36328
Nsa(dp36329
S'description'
p36330
S'The variable value outside the circle\n'
p36331
sS'cpp_type'
p36332
S'double'
p36333
sS'default'
p36334
g3
sS'name'
p36335
S'outvalue'
p36336
sS'required'
p36337
I01
sS'group_name'
p36338
Nsa(dp36339
S'description'
p36340
S'Mean radius value for the circles\n'
p36341
sS'cpp_type'
p36342
S'double'
p36343
sS'default'
p36344
g3
sS'name'
p36345
S'radius'
p36346
sS'required'
p36347
I01
sS'group_name'
p36348
Nsa(dp36349
S'description'
p36350
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p36351
sS'cpp_type'
p36352
S'double'
p36353
sS'default'
p36354
S'0'
p36355
sS'name'
p36356
S'radius_variation'
p36357
sS'required'
p36358
I00
sS'group_name'
p36359
Nsa(dp36360
S'name'
p36361
S'radius_variation_type'
p36362
sS'cpp_type'
p36363
S'MooseEnum'
p36364
sS'default'
p36365
S'none'
p36366
sS'description'
p36367
S'Type of distribution that random circle radii will follow\n'
p36368
sS'required'
p36369
I00
sS'options'
p36370
S'uniform normal none'
p36371
sS'group_name'
p36372
Nsa(dp36373
S'description'
p36374
S'Seed value for the random number generator\n'
p36375
sS'cpp_type'
p36376
S'unsigned int'
p36377
sS'default'
p36378
S'12345'
p36379
sS'name'
p36380
S'rand_seed'
p36381
sS'required'
p36382
I00
sS'group_name'
p36383
Nsa(dp36384
S'description'
p36385
g3
sS'cpp_type'
p36386
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36387
sS'default'
p36388
S'MultiSmoothCircleIC'
p36389
sS'name'
p36390
S'type'
p36391
sS'required'
p36392
I00
sS'group_name'
p36393
Nsa(dp36394
S'description'
p36395
S'The variable this initial condition is supposed to provide values for.\n'
p36396
sS'cpp_type'
p36397
S'VariableName'
p36398
sS'default'
p36399
g3
sS'name'
p36400
S'variable'
p36401
sS'required'
p36402
I01
sS'group_name'
p36403
Nsa(dp36404
S'description'
p36405
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p36406
sS'cpp_type'
p36407
S'bool'
p36408
sS'default'
p36409
S'0'
p36410
sS'name'
p36411
S'zero_gradient'
p36412
sS'required'
p36413
I00
sS'group_name'
p36414
NsasS'name'
p36415
S'/ICs/MultiSmoothCircleIC'
p36416
sa(dp36417
S'description'
p36418
S'Random distribution of smooth ellipse with given minimum spacing\n'
p36419
sS'subblocks'
p36420
NsS'parameters'
p36421
(lp36422
(dp36423
S'description'
p36424
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36425
sS'cpp_type'
p36426
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36427
sS'default'
p36428
g3
sS'name'
p36429
S'block'
p36430
sS'required'
p36431
I00
sS'group_name'
p36432
Nsa(dp36433
S'description'
p36434
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36435
sS'cpp_type'
p36436
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36437
sS'default'
p36438
g3
sS'name'
p36439
S'boundary'
p36440
sS'required'
p36441
I00
sS'group_name'
p36442
Nsa(dp36443
S'description'
p36444
S'Vector of the minimum spacing of bubbles of one type, measured from center to center\n'
p36445
sS'cpp_type'
p36446
S'std::vector<double, std::allocator<double> >'
p36447
sS'default'
p36448
g3
sS'name'
p36449
S'bubspac'
p36450
sS'required'
p36451
I01
sS'group_name'
p36452
Nsa(dp36453
S'description'
p36454
S'Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n'
p36455
sS'cpp_type'
p36456
S'bool'
p36457
sS'default'
p36458
S'0'
p36459
sS'name'
p36460
S'check_extremes'
p36461
sS'required'
p36462
I00
sS'group_name'
p36463
Nsa(dp36464
S'description'
p36465
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36466
sS'cpp_type'
p36467
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36468
sS'default'
p36469
g3
sS'name'
p36470
S'control_tags'
p36471
sS'required'
p36472
I00
sS'group_name'
p36473
S'Advanced'
p36474
sa(dp36475
S'description'
p36476
S'Set the enabled status of the MooseObject.\n'
p36477
sS'cpp_type'
p36478
S'bool'
p36479
sS'default'
p36480
S'1'
p36481
sS'name'
p36482
S'enable'
p36483
sS'required'
p36484
I00
sS'group_name'
p36485
S'Advanced'
p36486
sa(dp36487
S'description'
p36488
S'Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n'
p36489
sS'cpp_type'
p36490
S'std::vector<double, std::allocator<double> >'
p36491
sS'default'
p36492
g3
sS'name'
p36493
S'exponent'
p36494
sS'required'
p36495
I00
sS'group_name'
p36496
Nsa(dp36497
S'description'
p36498
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36499
sS'cpp_type'
p36500
S'bool'
p36501
sS'default'
p36502
S'0'
p36503
sS'name'
p36504
S'ignore_uo_dependency'
p36505
sS'required'
p36506
I00
sS'group_name'
p36507
S'Advanced'
p36508
sa(dp36509
S'description'
p36510
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p36511
sS'cpp_type'
p36512
S'double'
p36513
sS'default'
p36514
S'0'
p36515
sS'name'
p36516
S'int_width'
p36517
sS'required'
p36518
I00
sS'group_name'
p36519
Nsa(dp36520
S'description'
p36521
S'The variable value inside the superellipsoid\n'
p36522
sS'cpp_type'
p36523
S'double'
p36524
sS'default'
p36525
g3
sS'name'
p36526
S'invalue'
p36527
sS'required'
p36528
I01
sS'group_name'
p36529
Nsa(dp36530
S'description'
p36531
S'The number of tries\n'
p36532
sS'cpp_type'
p36533
S'unsigned int'
p36534
sS'default'
p36535
S'1000'
p36536
sS'name'
p36537
S'max_num_tries'
p36538
sS'required'
p36539
I00
sS'group_name'
p36540
Nsa(dp36541
S'description'
p36542
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p36543
sS'cpp_type'
p36544
S'double'
p36545
sS'default'
p36546
g3
sS'name'
p36547
S'nestedvalue'
p36548
sS'required'
p36549
I00
sS'group_name'
p36550
Nsa(dp36551
S'description'
p36552
S'Vector of the number of bubbles to place\n'
p36553
sS'cpp_type'
p36554
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p36555
sS'default'
p36556
g3
sS'name'
p36557
S'numbub'
p36558
sS'required'
p36559
I01
sS'group_name'
p36560
Nsa(dp36561
S'description'
p36562
S'The variable value outside the superellipsoid\n'
p36563
sS'cpp_type'
p36564
S'double'
p36565
sS'default'
p36566
g3
sS'name'
p36567
S'outvalue'
p36568
sS'required'
p36569
I01
sS'group_name'
p36570
Nsa(dp36571
S'description'
p36572
S'Check all Superellipsoid centers for overlap with other Superellipsoids.\n'
p36573
sS'cpp_type'
p36574
S'bool'
p36575
sS'default'
p36576
S'0'
p36577
sS'name'
p36578
S'prevent_overlap'
p36579
sS'required'
p36580
I00
sS'group_name'
p36581
Nsa(dp36582
S'description'
p36583
S'Seed value for the random number generator\n'
p36584
sS'cpp_type'
p36585
S'unsigned int'
p36586
sS'default'
p36587
S'12345'
p36588
sS'name'
p36589
S'rand_seed'
p36590
sS'required'
p36591
I00
sS'group_name'
p36592
Nsa(dp36593
S'description'
p36594
S'Vector of mean semiaxis values in the x direction for the ellipse\n'
p36595
sS'cpp_type'
p36596
S'std::vector<double, std::allocator<double> >'
p36597
sS'default'
p36598
g3
sS'name'
p36599
S'semiaxis_a'
p36600
sS'required'
p36601
I01
sS'group_name'
p36602
Nsa(dp36603
S'description'
p36604
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n'
p36605
sS'cpp_type'
p36606
S'std::vector<double, std::allocator<double> >'
p36607
sS'default'
p36608
g3
sS'name'
p36609
S'semiaxis_a_variation'
p36610
sS'required'
p36611
I00
sS'group_name'
p36612
Nsa(dp36613
S'description'
p36614
S'Vector of mean semiaxis values in the y direction for the ellipse\n'
p36615
sS'cpp_type'
p36616
S'std::vector<double, std::allocator<double> >'
p36617
sS'default'
p36618
g3
sS'name'
p36619
S'semiaxis_b'
p36620
sS'required'
p36621
I01
sS'group_name'
p36622
Nsa(dp36623
S'description'
p36624
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n'
p36625
sS'cpp_type'
p36626
S'std::vector<double, std::allocator<double> >'
p36627
sS'default'
p36628
g3
sS'name'
p36629
S'semiaxis_b_variation'
p36630
sS'required'
p36631
I00
sS'group_name'
p36632
Nsa(dp36633
S'description'
p36634
S'Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n'
p36635
sS'cpp_type'
p36636
S'std::vector<double, std::allocator<double> >'
p36637
sS'default'
p36638
g3
sS'name'
p36639
S'semiaxis_c'
p36640
sS'required'
p36641
I01
sS'group_name'
p36642
Nsa(dp36643
S'description'
p36644
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n'
p36645
sS'cpp_type'
p36646
S'std::vector<double, std::allocator<double> >'
p36647
sS'default'
p36648
g3
sS'name'
p36649
S'semiaxis_c_variation'
p36650
sS'required'
p36651
I00
sS'group_name'
p36652
Nsa(dp36653
S'name'
p36654
S'semiaxis_variation_type'
p36655
sS'cpp_type'
p36656
S'MooseEnum'
p36657
sS'default'
p36658
S'none'
p36659
sS'description'
p36660
S'Type of distribution that random superellipsoid semiaxes will follow\n'
p36661
sS'required'
p36662
I00
sS'options'
p36663
S'uniform normal none'
p36664
sS'group_name'
p36665
Nsa(dp36666
S'description'
p36667
g3
sS'cpp_type'
p36668
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36669
sS'default'
p36670
S'MultiSmoothSuperellipsoidIC'
p36671
sS'name'
p36672
S'type'
p36673
sS'required'
p36674
I00
sS'group_name'
p36675
Nsa(dp36676
S'description'
p36677
S'The variable this initial condition is supposed to provide values for.\n'
p36678
sS'cpp_type'
p36679
S'VariableName'
p36680
sS'default'
p36681
g3
sS'name'
p36682
S'variable'
p36683
sS'required'
p36684
I01
sS'group_name'
p36685
Nsa(dp36686
S'description'
p36687
S'If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n'
p36688
sS'cpp_type'
p36689
S'bool'
p36690
sS'default'
p36691
S'1'
p36692
sS'name'
p36693
S'vary_axes_independently'
p36694
sS'required'
p36695
I00
sS'group_name'
p36696
Nsa(dp36697
S'description'
p36698
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p36699
sS'cpp_type'
p36700
S'bool'
p36701
sS'default'
p36702
S'0'
p36703
sS'name'
p36704
S'zero_gradient'
p36705
sS'required'
p36706
I00
sS'group_name'
p36707
NsasS'name'
p36708
S'/ICs/MultiSmoothSuperellipsoidIC'
p36709
sa(dp36710
S'description'
p36711
g3
sS'subblocks'
p36712
NsS'parameters'
p36713
(lp36714
(dp36715
S'description'
p36716
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36717
sS'cpp_type'
p36718
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36719
sS'default'
p36720
g3
sS'name'
p36721
S'block'
p36722
sS'required'
p36723
I00
sS'group_name'
p36724
Nsa(dp36725
S'description'
p36726
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36727
sS'cpp_type'
p36728
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36729
sS'default'
p36730
g3
sS'name'
p36731
S'boundary'
p36732
sS'required'
p36733
I00
sS'group_name'
p36734
Nsa(dp36735
S'description'
p36736
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36737
sS'cpp_type'
p36738
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36739
sS'default'
p36740
g3
sS'name'
p36741
S'control_tags'
p36742
sS'required'
p36743
I00
sS'group_name'
p36744
S'Advanced'
p36745
sa(dp36746
S'name'
p36747
S'crystal_structure'
p36748
sS'cpp_type'
p36749
S'MooseEnum'
p36750
sS'default'
p36751
g3
sS'description'
p36752
S'The type of crystal structure\n'
p36753
sS'required'
p36754
I00
sS'options'
p36755
S'FCC BCC'
p36756
sS'group_name'
p36757
Nsa(dp36758
S'description'
p36759
S'Set the enabled status of the MooseObject.\n'
p36760
sS'cpp_type'
p36761
S'bool'
p36762
sS'default'
p36763
S'1'
p36764
sS'name'
p36765
S'enable'
p36766
sS'required'
p36767
I00
sS'group_name'
p36768
S'Advanced'
p36769
sa(dp36770
S'description'
p36771
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36772
sS'cpp_type'
p36773
S'bool'
p36774
sS'default'
p36775
S'0'
p36776
sS'name'
p36777
S'ignore_uo_dependency'
p36778
sS'required'
p36779
I00
sS'group_name'
p36780
S'Advanced'
p36781
sa(dp36782
S'description'
p36783
S'Value inside sinusoids\n'
p36784
sS'cpp_type'
p36785
S'double'
p36786
sS'default'
p36787
S'1'
p36788
sS'name'
p36789
S'inside'
p36790
sS'required'
p36791
I00
sS'group_name'
p36792
Nsa(dp36793
S'description'
p36794
S'The lattice constant off the crystal structure\n'
p36795
sS'cpp_type'
p36796
S'double'
p36797
sS'default'
p36798
g3
sS'name'
p36799
S'lc'
p36800
sS'required'
p36801
I01
sS'group_name'
p36802
Nsa(dp36803
S'description'
p36804
S'Upper bound of the randomly generated values\n'
p36805
sS'cpp_type'
p36806
S'double'
p36807
sS'default'
p36808
S'1'
p36809
sS'name'
p36810
S'max'
p36811
sS'required'
p36812
I00
sS'group_name'
p36813
Nsa(dp36814
S'description'
p36815
S'Lower bound of the randomly generated values\n'
p36816
sS'cpp_type'
p36817
S'double'
p36818
sS'default'
p36819
S'0'
p36820
sS'name'
p36821
S'min'
p36822
sS'required'
p36823
I00
sS'group_name'
p36824
Nsa(dp36825
S'description'
p36826
S'Value outside sinusoids\n'
p36827
sS'cpp_type'
p36828
S'double'
p36829
sS'default'
p36830
S'0'
p36831
sS'name'
p36832
S'outside'
p36833
sS'required'
p36834
I00
sS'group_name'
p36835
Nsa(dp36836
S'description'
p36837
S'Seed value for the random number generator\n'
p36838
sS'cpp_type'
p36839
S'unsigned int'
p36840
sS'default'
p36841
S'0'
p36842
sS'name'
p36843
S'seed'
p36844
sS'required'
p36845
I00
sS'group_name'
p36846
Nsa(dp36847
S'description'
p36848
g3
sS'cpp_type'
p36849
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36850
sS'default'
p36851
S'PFCFreezingIC'
p36852
sS'name'
p36853
S'type'
p36854
sS'required'
p36855
I00
sS'group_name'
p36856
Nsa(dp36857
S'description'
p36858
S'The variable this initial condition is supposed to provide values for.\n'
p36859
sS'cpp_type'
p36860
S'VariableName'
p36861
sS'default'
p36862
g3
sS'name'
p36863
S'variable'
p36864
sS'required'
p36865
I01
sS'group_name'
p36866
Nsa(dp36867
S'description'
p36868
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p36869
sS'cpp_type'
p36870
S'double'
p36871
sS'default'
p36872
g3
sS'name'
p36873
S'x1'
p36874
sS'required'
p36875
I01
sS'group_name'
p36876
Nsa(dp36877
S'description'
p36878
S'The x coordinate of the upper right-hand corner of the box\n'
p36879
sS'cpp_type'
p36880
S'double'
p36881
sS'default'
p36882
g3
sS'name'
p36883
S'x2'
p36884
sS'required'
p36885
I01
sS'group_name'
p36886
Nsa(dp36887
S'description'
p36888
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p36889
sS'cpp_type'
p36890
S'double'
p36891
sS'default'
p36892
g3
sS'name'
p36893
S'y1'
p36894
sS'required'
p36895
I01
sS'group_name'
p36896
Nsa(dp36897
S'description'
p36898
S'The y coordinate of the upper right-hand corner of the box\n'
p36899
sS'cpp_type'
p36900
S'double'
p36901
sS'default'
p36902
g3
sS'name'
p36903
S'y2'
p36904
sS'required'
p36905
I01
sS'group_name'
p36906
Nsa(dp36907
S'description'
p36908
S'The z coordinate of the lower left-hand corner of the box\n'
p36909
sS'cpp_type'
p36910
S'double'
p36911
sS'default'
p36912
S'0'
p36913
sS'name'
p36914
S'z1'
p36915
sS'required'
p36916
I00
sS'group_name'
p36917
Nsa(dp36918
S'description'
p36919
S'The z coordinate of the upper right-hand corner of the box\n'
p36920
sS'cpp_type'
p36921
S'double'
p36922
sS'default'
p36923
S'0'
p36924
sS'name'
p36925
S'z2'
p36926
sS'required'
p36927
I00
sS'group_name'
p36928
NsasS'name'
p36929
S'/ICs/PFCFreezingIC'
p36930
sa(dp36931
S'description'
p36932
g3
sS'subblocks'
p36933
(lp36934
(dp36935
S'description'
p36936
g3
sS'subblocks'
p36937
NsS'parameters'
p36938
(lp36939
(dp36940
S'description'
p36941
S'Number of grains, should be 2\n'
p36942
sS'cpp_type'
p36943
S'unsigned int'
p36944
sS'default'
p36945
g3
sS'name'
p36946
S'op_num'
p36947
sS'required'
p36948
I01
sS'group_name'
p36949
Nsa(dp36950
S'description'
p36951
S'specifies the base name of the variables\n'
p36952
sS'cpp_type'
p36953
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36954
sS'default'
p36955
g3
sS'name'
p36956
S'var_name_base'
p36957
sS'required'
p36958
I01
sS'group_name'
p36959
Nsa(dp36960
S'description'
p36961
S'The x coordinate of the lower left-hand corner of the box\n'
p36962
sS'cpp_type'
p36963
S'double'
p36964
sS'default'
p36965
g3
sS'name'
p36966
S'x1'
p36967
sS'required'
p36968
I01
sS'group_name'
p36969
Nsa(dp36970
S'description'
p36971
S'The x coordinate of the upper right-hand corner of the box\n'
p36972
sS'cpp_type'
p36973
S'double'
p36974
sS'default'
p36975
g3
sS'name'
p36976
S'x2'
p36977
sS'required'
p36978
I01
sS'group_name'
p36979
Nsa(dp36980
S'description'
p36981
S'The y coordinate of the lower left-hand corner of the box\n'
p36982
sS'cpp_type'
p36983
S'double'
p36984
sS'default'
p36985
g3
sS'name'
p36986
S'y1'
p36987
sS'required'
p36988
I01
sS'group_name'
p36989
Nsa(dp36990
S'description'
p36991
S'The y coordinate of the upper right-hand corner of the box\n'
p36992
sS'cpp_type'
p36993
S'double'
p36994
sS'default'
p36995
g3
sS'name'
p36996
S'y2'
p36997
sS'required'
p36998
I01
sS'group_name'
p36999
Nsa(dp37000
S'description'
p37001
S'The z coordinate of the lower left-hand corner of the box\n'
p37002
sS'cpp_type'
p37003
S'double'
p37004
sS'default'
p37005
S'0'
p37006
sS'name'
p37007
S'z1'
p37008
sS'required'
p37009
I00
sS'group_name'
p37010
Nsa(dp37011
S'description'
p37012
S'The z coordinate of the upper right-hand corner of the box\n'
p37013
sS'cpp_type'
p37014
S'double'
p37015
sS'default'
p37016
S'0'
p37017
sS'name'
p37018
S'z2'
p37019
sS'required'
p37020
I00
sS'group_name'
p37021
NsasS'name'
p37022
S'/ICs/PolycrystalICs/BicrystalBoundingBoxIC'
p37023
sa(dp37024
S'description'
p37025
g3
sS'subblocks'
p37026
NsS'parameters'
p37027
(lp37028
(dp37029
S'description'
p37030
S'in 3D, whether the smaller grain is a spheres or columnar grain\n'
p37031
sS'cpp_type'
p37032
S'bool'
p37033
sS'default'
p37034
S'1'
p37035
sS'name'
p37036
S'3D_sphere'
p37037
sS'required'
p37038
I00
sS'group_name'
p37039
Nsa(dp37040
S'description'
p37041
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p37042
sS'cpp_type'
p37043
S'double'
p37044
sS'default'
p37045
S'0'
p37046
sS'name'
p37047
S'int_width'
p37048
sS'required'
p37049
I00
sS'group_name'
p37050
Nsa(dp37051
S'description'
p37052
S'Number of grains, should be 2\n'
p37053
sS'cpp_type'
p37054
S'unsigned int'
p37055
sS'default'
p37056
g3
sS'name'
p37057
S'op_num'
p37058
sS'required'
p37059
I01
sS'group_name'
p37060
Nsa(dp37061
S'description'
p37062
S'Void radius\n'
p37063
sS'cpp_type'
p37064
S'double'
p37065
sS'default'
p37066
g3
sS'name'
p37067
S'radius'
p37068
sS'required'
p37069
I01
sS'group_name'
p37070
Nsa(dp37071
S'description'
p37072
S'specifies the base name of the variables\n'
p37073
sS'cpp_type'
p37074
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37075
sS'default'
p37076
g3
sS'name'
p37077
S'var_name_base'
p37078
sS'required'
p37079
I01
sS'group_name'
p37080
Nsa(dp37081
S'description'
p37082
S'The x coordinate of the circle grain center\n'
p37083
sS'cpp_type'
p37084
S'double'
p37085
sS'default'
p37086
g3
sS'name'
p37087
S'x'
p37088
sS'required'
p37089
I01
sS'group_name'
p37090
Nsa(dp37091
S'description'
p37092
S'The y coordinate of the circle grain center\n'
p37093
sS'cpp_type'
p37094
S'double'
p37095
sS'default'
p37096
g3
sS'name'
p37097
S'y'
p37098
sS'required'
p37099
I01
sS'group_name'
p37100
Nsa(dp37101
S'description'
p37102
S'The z coordinate of the circle grain center\n'
p37103
sS'cpp_type'
p37104
S'double'
p37105
sS'default'
p37106
S'0'
p37107
sS'name'
p37108
S'z'
p37109
sS'required'
p37110
I00
sS'group_name'
p37111
NsasS'name'
p37112
S'/ICs/PolycrystalICs/BicrystalCircleGrainIC'
p37113
sa(dp37114
S'description'
p37115
g3
sS'subblocks'
p37116
NsS'parameters'
p37117
(lp37118
(dp37119
S'description'
p37120
S'Number of grains, must be a square (4, 9, 16, etc)\n'
p37121
sS'cpp_type'
p37122
S'unsigned int'
p37123
sS'default'
p37124
g3
sS'name'
p37125
S'grain_num'
p37126
sS'required'
p37127
I01
sS'group_name'
p37128
Nsa(dp37129
S'description'
p37130
S'Number of order parameters\n'
p37131
sS'cpp_type'
p37132
S'unsigned int'
p37133
sS'default'
p37134
g3
sS'name'
p37135
S'op_num'
p37136
sS'required'
p37137
I01
sS'group_name'
p37138
Nsa(dp37139
S'description'
p37140
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p37141
sS'cpp_type'
p37142
S'double'
p37143
sS'default'
p37144
S'0'
p37145
sS'name'
p37146
S'perturbation_percent'
p37147
sS'required'
p37148
I00
sS'group_name'
p37149
Nsa(dp37150
S'description'
p37151
S'The random seed\n'
p37152
sS'cpp_type'
p37153
S'unsigned int'
p37154
sS'default'
p37155
S'12444'
p37156
sS'name'
p37157
S'rand_seed'
p37158
sS'required'
p37159
I00
sS'group_name'
p37160
Nsa(dp37161
S'description'
p37162
S'specifies the base name of the variables\n'
p37163
sS'cpp_type'
p37164
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37165
sS'default'
p37166
g3
sS'name'
p37167
S'var_name_base'
p37168
sS'required'
p37169
I01
sS'group_name'
p37170
Nsa(dp37171
S'description'
p37172
S'Specifies offset of hexagon grid in x-direction\n'
p37173
sS'cpp_type'
p37174
S'double'
p37175
sS'default'
p37176
S'0.5'
p37177
sS'name'
p37178
S'x_offset'
p37179
sS'required'
p37180
I00
sS'group_name'
p37181
NsasS'name'
p37182
S'/ICs/PolycrystalICs/PolycrystalHexGrainIC'
p37183
sa(dp37184
S'description'
p37185
g3
sS'subblocks'
p37186
NsS'parameters'
p37187
(lp37188
(dp37189
S'description'
p37190
S'number of order parameters to create\n'
p37191
sS'cpp_type'
p37192
S'unsigned int'
p37193
sS'default'
p37194
g3
sS'name'
p37195
S'op_num'
p37196
sS'required'
p37197
I01
sS'group_name'
p37198
Nsa(dp37199
S'name'
p37200
S'random_type'
p37201
sS'cpp_type'
p37202
S'MooseEnum'
p37203
sS'default'
p37204
g3
sS'description'
p37205
S'The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n'
p37206
sS'required'
p37207
I00
sS'options'
p37208
S'continuous discrete'
p37209
sS'group_name'
p37210
Nsa(dp37211
S'description'
p37212
S'specifies the base name of the variables\n'
p37213
sS'cpp_type'
p37214
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37215
sS'default'
p37216
g3
sS'name'
p37217
S'var_name_base'
p37218
sS'required'
p37219
I01
sS'group_name'
p37220
NsasS'name'
p37221
S'/ICs/PolycrystalICs/PolycrystalRandomIC'
p37222
sa(dp37223
S'description'
p37224
g3
sS'subblocks'
p37225
NsS'parameters'
p37226
(lp37227
(dp37228
S'name'
p37229
S'coloring_algorithm'
p37230
sS'cpp_type'
p37231
S'MooseEnum'
p37232
sS'default'
p37233
S'legacy'
p37234
sS'description'
p37235
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p37236
sS'required'
p37237
I00
sS'options'
p37238
S'legacy bt jp power greedy'
p37239
sS'group_name'
p37240
Nsa(dp37241
S'description'
p37242
S'3D microstructure will be columnar in the z-direction?\n'
p37243
sS'cpp_type'
p37244
S'bool'
p37245
sS'default'
p37246
S'0'
p37247
sS'name'
p37248
S'columnar_3D'
p37249
sS'required'
p37250
I00
sS'group_name'
p37251
Nsa(dp37252
S'description'
p37253
S'number of grains to create, if it is going to greater than op_num\n'
p37254
sS'cpp_type'
p37255
S'unsigned int'
p37256
sS'default'
p37257
g3
sS'name'
p37258
S'grain_num'
p37259
sS'required'
p37260
I01
sS'group_name'
p37261
Nsa(dp37262
S'description'
p37263
S'number of order parameters to create\n'
p37264
sS'cpp_type'
p37265
S'unsigned int'
p37266
sS'default'
p37267
g3
sS'name'
p37268
S'op_num'
p37269
sS'required'
p37270
I01
sS'group_name'
p37271
Nsa(dp37272
S'description'
p37273
S'The random seed\n'
p37274
sS'cpp_type'
p37275
S'unsigned int'
p37276
sS'default'
p37277
S'12444'
p37278
sS'name'
p37279
S'rand_seed'
p37280
sS'required'
p37281
I00
sS'group_name'
p37282
Nsa(dp37283
S'description'
p37284
S'specifies the base name of the variables\n'
p37285
sS'cpp_type'
p37286
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37287
sS'default'
p37288
g3
sS'name'
p37289
S'var_name_base'
p37290
sS'required'
p37291
I01
sS'group_name'
p37292
NsasS'name'
p37293
S'/ICs/PolycrystalICs/PolycrystalVoronoiIC'
p37294
sa(dp37295
S'description'
p37296
g3
sS'subblocks'
p37297
NsS'parameters'
p37298
(lp37299
(dp37300
S'description'
p37301
S'in 3D, whether the objects are spheres or columns\n'
p37302
sS'cpp_type'
p37303
S'bool'
p37304
sS'default'
p37305
S'1'
p37306
sS'name'
p37307
S'3D_spheres'
p37308
sS'required'
p37309
I00
sS'group_name'
p37310
Nsa(dp37311
S'description'
p37312
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37313
sS'cpp_type'
p37314
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37315
sS'default'
p37316
g3
sS'name'
p37317
S'block'
p37318
sS'required'
p37319
I00
sS'group_name'
p37320
Nsa(dp37321
S'description'
p37322
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37323
sS'cpp_type'
p37324
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37325
sS'default'
p37326
g3
sS'name'
p37327
S'boundary'
p37328
sS'required'
p37329
I00
sS'group_name'
p37330
Nsa(dp37331
S'description'
p37332
S'minimum spacing of bubbles, measured from center to center\n'
p37333
sS'cpp_type'
p37334
S'double'
p37335
sS'default'
p37336
g3
sS'name'
p37337
S'bubspac'
p37338
sS'required'
p37339
I01
sS'group_name'
p37340
Nsa(dp37341
S'description'
p37342
S'3D microstructure will be columnar in the z-direction?\n'
p37343
sS'cpp_type'
p37344
S'bool'
p37345
sS'default'
p37346
S'0'
p37347
sS'name'
p37348
S'columnar_3D'
p37349
sS'required'
p37350
I00
sS'group_name'
p37351
Nsa(dp37352
S'description'
p37353
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37354
sS'cpp_type'
p37355
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37356
sS'default'
p37357
g3
sS'name'
p37358
S'control_tags'
p37359
sS'required'
p37360
I00
sS'group_name'
p37361
S'Advanced'
p37362
sa(dp37363
S'description'
p37364
S'Set the enabled status of the MooseObject.\n'
p37365
sS'cpp_type'
p37366
S'bool'
p37367
sS'default'
p37368
S'1'
p37369
sS'name'
p37370
S'enable'
p37371
sS'required'
p37372
I00
sS'group_name'
p37373
S'Advanced'
p37374
sa(dp37375
S'description'
p37376
S'Number of grains being represented by the order parameters\n'
p37377
sS'cpp_type'
p37378
S'unsigned int'
p37379
sS'default'
p37380
g3
sS'name'
p37381
S'grain_num'
p37382
sS'required'
p37383
I01
sS'group_name'
p37384
Nsa(dp37385
S'description'
p37386
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p37387
sS'cpp_type'
p37388
S'bool'
p37389
sS'default'
p37390
S'0'
p37391
sS'name'
p37392
S'ignore_uo_dependency'
p37393
sS'required'
p37394
I00
sS'group_name'
p37395
S'Advanced'
p37396
sa(dp37397
S'description'
p37398
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p37399
sS'cpp_type'
p37400
S'double'
p37401
sS'default'
p37402
S'0'
p37403
sS'name'
p37404
S'int_width'
p37405
sS'required'
p37406
I00
sS'group_name'
p37407
Nsa(dp37408
S'description'
p37409
S'The variable value inside the circle\n'
p37410
sS'cpp_type'
p37411
S'double'
p37412
sS'default'
p37413
g3
sS'name'
p37414
S'invalue'
p37415
sS'required'
p37416
I01
sS'group_name'
p37417
Nsa(dp37418
S'description'
p37419
S'The number of bubbles to place\n'
p37420
sS'cpp_type'
p37421
S'unsigned int'
p37422
sS'default'
p37423
g3
sS'name'
p37424
S'numbub'
p37425
sS'required'
p37426
I01
sS'group_name'
p37427
Nsa(dp37428
S'description'
p37429
S'The number of tries\n'
p37430
sS'cpp_type'
p37431
S'unsigned int'
p37432
sS'default'
p37433
S'1000'
p37434
sS'name'
p37435
S'numtries'
p37436
sS'required'
p37437
I00
sS'group_name'
p37438
Nsa(dp37439
S'description'
p37440
S'Number of order parameters\n'
p37441
sS'cpp_type'
p37442
S'unsigned int'
p37443
sS'default'
p37444
g3
sS'name'
p37445
S'op_num'
p37446
sS'required'
p37447
I01
sS'group_name'
p37448
Nsa(dp37449
S'description'
p37450
S'The variable value outside the circle\n'
p37451
sS'cpp_type'
p37452
S'double'
p37453
sS'default'
p37454
g3
sS'name'
p37455
S'outvalue'
p37456
sS'required'
p37457
I01
sS'group_name'
p37458
Nsa(dp37459
S'description'
p37460
S'Mean radius value for the circles\n'
p37461
sS'cpp_type'
p37462
S'double'
p37463
sS'default'
p37464
g3
sS'name'
p37465
S'radius'
p37466
sS'required'
p37467
I01
sS'group_name'
p37468
Nsa(dp37469
S'description'
p37470
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p37471
sS'cpp_type'
p37472
S'double'
p37473
sS'default'
p37474
S'0'
p37475
sS'name'
p37476
S'radius_variation'
p37477
sS'required'
p37478
I00
sS'group_name'
p37479
Nsa(dp37480
S'name'
p37481
S'radius_variation_type'
p37482
sS'cpp_type'
p37483
S'MooseEnum'
p37484
sS'default'
p37485
S'none'
p37486
sS'description'
p37487
S'Type of distribution that random circle radii will follow\n'
p37488
sS'required'
p37489
I00
sS'options'
p37490
S'uniform normal none'
p37491
sS'group_name'
p37492
Nsa(dp37493
S'description'
p37494
S'The random seed\n'
p37495
sS'cpp_type'
p37496
S'unsigned int'
p37497
sS'default'
p37498
S'12444'
p37499
sS'name'
p37500
S'rand_seed'
p37501
sS'required'
p37502
I00
sS'group_name'
p37503
Nsa(dp37504
S'description'
p37505
S'specifies the base name of the variables\n'
p37506
sS'cpp_type'
p37507
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37508
sS'default'
p37509
g3
sS'name'
p37510
S'var_name_base'
p37511
sS'required'
p37512
I01
sS'group_name'
p37513
Nsa(dp37514
S'description'
p37515
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p37516
sS'cpp_type'
p37517
S'bool'
p37518
sS'default'
p37519
S'0'
p37520
sS'name'
p37521
S'zero_gradient'
p37522
sS'required'
p37523
I00
sS'group_name'
p37524
NsasS'name'
p37525
S'/ICs/PolycrystalICs/PolycrystalVoronoiVoidIC'
p37526
sa(dp37527
S'description'
p37528
g3
sS'subblocks'
p37529
NsS'parameters'
p37530
(lp37531
(dp37532
S'name'
p37533
S'coloring_algorithm'
p37534
sS'cpp_type'
p37535
S'MooseEnum'
p37536
sS'default'
p37537
S'legacy'
p37538
sS'description'
p37539
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p37540
sS'required'
p37541
I00
sS'options'
p37542
S'legacy bt jp power greedy'
p37543
sS'group_name'
p37544
Nsa(dp37545
S'description'
p37546
S'The EBSDReader GeneralUserObject\n'
p37547
sS'cpp_type'
p37548
S'UserObjectName'
p37549
sS'default'
p37550
g3
sS'name'
p37551
S'ebsd_reader'
p37552
sS'required'
p37553
I01
sS'group_name'
p37554
Nsa(dp37555
S'description'
p37556
S'Specifies the number of order parameters to create\n'
p37557
sS'cpp_type'
p37558
S'unsigned int'
p37559
sS'default'
p37560
g3
sS'name'
p37561
S'op_num'
p37562
sS'required'
p37563
I01
sS'group_name'
p37564
Nsa(dp37565
S'description'
p37566
S'EBSD phase number to be assigned to this grain\n'
p37567
sS'cpp_type'
p37568
S'unsigned int'
p37569
sS'default'
p37570
g3
sS'name'
p37571
S'phase'
p37572
sS'required'
p37573
I00
sS'group_name'
p37574
Nsa(dp37575
S'description'
p37576
S'specifies the base name of the variables\n'
p37577
sS'cpp_type'
p37578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37579
sS'default'
p37580
g3
sS'name'
p37581
S'var_name_base'
p37582
sS'required'
p37583
I01
sS'group_name'
p37584
NsasS'name'
p37585
S'/ICs/PolycrystalICs/ReconVarIC'
p37586
sa(dp37587
S'description'
p37588
g3
sS'subblocks'
p37589
NsS'parameters'
p37590
(lp37591
(dp37592
S'description'
p37593
S'number of order parameters to create\n'
p37594
sS'cpp_type'
p37595
S'unsigned int'
p37596
sS'default'
p37597
g3
sS'name'
p37598
S'op_num'
p37599
sS'required'
p37600
I01
sS'group_name'
p37601
Nsa(dp37602
S'description'
p37603
S'specifies the base name of the variables\n'
p37604
sS'cpp_type'
p37605
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37606
sS'default'
p37607
g3
sS'name'
p37608
S'var_name_base'
p37609
sS'required'
p37610
I01
sS'group_name'
p37611
NsasS'name'
p37612
S'/ICs/PolycrystalICs/Tricrystal2CircleGrainsIC'
p37613
sasS'parameters'
p37614
NsS'name'
p37615
S'/ICs/PolycrystalICs'
p37616
sa(dp37617
S'description'
p37618
S'Random initial condition for a polycrystalline material\n'
p37619
sS'subblocks'
p37620
NsS'parameters'
p37621
(lp37622
(dp37623
S'description'
p37624
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37625
sS'cpp_type'
p37626
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37627
sS'default'
p37628
g3
sS'name'
p37629
S'block'
p37630
sS'required'
p37631
I00
sS'group_name'
p37632
Nsa(dp37633
S'description'
p37634
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37635
sS'cpp_type'
p37636
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37637
sS'default'
p37638
g3
sS'name'
p37639
S'boundary'
p37640
sS'required'
p37641
I00
sS'group_name'
p37642
Nsa(dp37643
S'description'
p37644
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37645
sS'cpp_type'
p37646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37647
sS'default'
p37648
g3
sS'name'
p37649
S'control_tags'
p37650
sS'required'
p37651
I00
sS'group_name'
p37652
S'Advanced'
p37653
sa(dp37654
S'description'
p37655
S'Set the enabled status of the MooseObject.\n'
p37656
sS'cpp_type'
p37657
S'bool'
p37658
sS'default'
p37659
S'1'
p37660
sS'name'
p37661
S'enable'
p37662
sS'required'
p37663
I00
sS'group_name'
p37664
S'Advanced'
p37665
sa(dp37666
S'description'
p37667
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p37668
sS'cpp_type'
p37669
S'bool'
p37670
sS'default'
p37671
S'0'
p37672
sS'name'
p37673
S'ignore_uo_dependency'
p37674
sS'required'
p37675
I00
sS'group_name'
p37676
S'Advanced'
p37677
sa(dp37678
S'description'
p37679
S'The index for the current order parameter\n'
p37680
sS'cpp_type'
p37681
S'unsigned int'
p37682
sS'default'
p37683
g3
sS'name'
p37684
S'op_index'
p37685
sS'required'
p37686
I01
sS'group_name'
p37687
Nsa(dp37688
S'description'
p37689
S'Number of order parameters\n'
p37690
sS'cpp_type'
p37691
S'unsigned int'
p37692
sS'default'
p37693
g3
sS'name'
p37694
S'op_num'
p37695
sS'required'
p37696
I01
sS'group_name'
p37697
Nsa(dp37698
S'description'
p37699
S'Type of random grain structure\n'
p37700
sS'cpp_type'
p37701
S'unsigned int'
p37702
sS'default'
p37703
g3
sS'name'
p37704
S'typ'
p37705
sS'required'
p37706
I01
sS'group_name'
p37707
Nsa(dp37708
S'description'
p37709
g3
sS'cpp_type'
p37710
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37711
sS'default'
p37712
S'PolycrystalRandomIC'
p37713
sS'name'
p37714
S'type'
p37715
sS'required'
p37716
I00
sS'group_name'
p37717
Nsa(dp37718
S'description'
p37719
S'The variable this initial condition is supposed to provide values for.\n'
p37720
sS'cpp_type'
p37721
S'VariableName'
p37722
sS'default'
p37723
g3
sS'name'
p37724
S'variable'
p37725
sS'required'
p37726
I01
sS'group_name'
p37727
NsasS'name'
p37728
S'/ICs/PolycrystalRandomIC'
p37729
sa(dp37730
S'description'
p37731
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p37732
sS'subblocks'
p37733
NsS'parameters'
p37734
(lp37735
(dp37736
S'description'
p37737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37738
sS'cpp_type'
p37739
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37740
sS'default'
p37741
g3
sS'name'
p37742
S'block'
p37743
sS'required'
p37744
I00
sS'group_name'
p37745
Nsa(dp37746
S'description'
p37747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37748
sS'cpp_type'
p37749
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37750
sS'default'
p37751
g3
sS'name'
p37752
S'boundary'
p37753
sS'required'
p37754
I00
sS'group_name'
p37755
Nsa(dp37756
S'name'
p37757
S'coloring_algorithm'
p37758
sS'cpp_type'
p37759
S'MooseEnum'
p37760
sS'default'
p37761
S'legacy'
p37762
sS'description'
p37763
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p37764
sS'required'
p37765
I00
sS'options'
p37766
S'legacy bt jp power greedy'
p37767
sS'group_name'
p37768
Nsa(dp37769
S'description'
p37770
S'3D microstructure will be columnar in the z-direction?\n'
p37771
sS'cpp_type'
p37772
S'bool'
p37773
sS'default'
p37774
S'0'
p37775
sS'name'
p37776
S'columnar_3D'
p37777
sS'required'
p37778
I00
sS'group_name'
p37779
Nsa(dp37780
S'description'
p37781
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37782
sS'cpp_type'
p37783
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37784
sS'default'
p37785
g3
sS'name'
p37786
S'control_tags'
p37787
sS'required'
p37788
I00
sS'group_name'
p37789
S'Advanced'
p37790
sa(dp37791
S'description'
p37792
S'Set the enabled status of the MooseObject.\n'
p37793
sS'cpp_type'
p37794
S'bool'
p37795
sS'default'
p37796
S'1'
p37797
sS'name'
p37798
S'enable'
p37799
sS'required'
p37800
I00
sS'group_name'
p37801
S'Advanced'
p37802
sa(dp37803
S'description'
p37804
S'Number of grains being represented by the order parameters\n'
p37805
sS'cpp_type'
p37806
S'unsigned int'
p37807
sS'default'
p37808
g3
sS'name'
p37809
S'grain_num'
p37810
sS'required'
p37811
I01
sS'group_name'
p37812
Nsa(dp37813
S'description'
p37814
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p37815
sS'cpp_type'
p37816
S'bool'
p37817
sS'default'
p37818
S'0'
p37819
sS'name'
p37820
S'ignore_uo_dependency'
p37821
sS'required'
p37822
I00
sS'group_name'
p37823
S'Advanced'
p37824
sa(dp37825
S'description'
p37826
S'The index for the current order parameter\n'
p37827
sS'cpp_type'
p37828
S'unsigned int'
p37829
sS'default'
p37830
g3
sS'name'
p37831
S'op_index'
p37832
sS'required'
p37833
I01
sS'group_name'
p37834
Nsa(dp37835
S'description'
p37836
S'Number of order parameters\n'
p37837
sS'cpp_type'
p37838
S'unsigned int'
p37839
sS'default'
p37840
g3
sS'name'
p37841
S'op_num'
p37842
sS'required'
p37843
I01
sS'group_name'
p37844
Nsa(dp37845
S'description'
p37846
S'The random seed\n'
p37847
sS'cpp_type'
p37848
S'unsigned int'
p37849
sS'default'
p37850
S'12444'
p37851
sS'name'
p37852
S'rand_seed'
p37853
sS'required'
p37854
I00
sS'group_name'
p37855
Nsa(dp37856
S'description'
p37857
g3
sS'cpp_type'
p37858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37859
sS'default'
p37860
S'PolycrystalReducedIC'
p37861
sS'name'
p37862
S'type'
p37863
sS'required'
p37864
I00
sS'group_name'
p37865
Nsa(dp37866
S'description'
p37867
S'The variable this initial condition is supposed to provide values for.\n'
p37868
sS'cpp_type'
p37869
S'VariableName'
p37870
sS'default'
p37871
g3
sS'name'
p37872
S'variable'
p37873
sS'required'
p37874
I01
sS'group_name'
p37875
NsasS'name'
p37876
S'/ICs/PolycrystalReducedIC'
p37877
sa(dp37878
S'description'
p37879
S'Random distribution of smooth circles with given minimum spacing\n'
p37880
sS'subblocks'
p37881
NsS'parameters'
p37882
(lp37883
(dp37884
S'description'
p37885
S'in 3D, whether the objects are spheres or columns\n'
p37886
sS'cpp_type'
p37887
S'bool'
p37888
sS'default'
p37889
S'1'
p37890
sS'name'
p37891
S'3D_spheres'
p37892
sS'required'
p37893
I00
sS'group_name'
p37894
Nsa(dp37895
S'description'
p37896
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37897
sS'cpp_type'
p37898
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37899
sS'default'
p37900
g3
sS'name'
p37901
S'block'
p37902
sS'required'
p37903
I00
sS'group_name'
p37904
Nsa(dp37905
S'description'
p37906
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37907
sS'cpp_type'
p37908
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37909
sS'default'
p37910
g3
sS'name'
p37911
S'boundary'
p37912
sS'required'
p37913
I00
sS'group_name'
p37914
Nsa(dp37915
S'description'
p37916
S'minimum spacing of bubbles, measured from center to center\n'
p37917
sS'cpp_type'
p37918
S'double'
p37919
sS'default'
p37920
g3
sS'name'
p37921
S'bubspac'
p37922
sS'required'
p37923
I01
sS'group_name'
p37924
Nsa(dp37925
S'description'
p37926
S'3D microstructure will be columnar in the z-direction?\n'
p37927
sS'cpp_type'
p37928
S'bool'
p37929
sS'default'
p37930
S'0'
p37931
sS'name'
p37932
S'columnar_3D'
p37933
sS'required'
p37934
I00
sS'group_name'
p37935
Nsa(dp37936
S'description'
p37937
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37938
sS'cpp_type'
p37939
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37940
sS'default'
p37941
g3
sS'name'
p37942
S'control_tags'
p37943
sS'required'
p37944
I00
sS'group_name'
p37945
S'Advanced'
p37946
sa(dp37947
S'description'
p37948
S'Set the enabled status of the MooseObject.\n'
p37949
sS'cpp_type'
p37950
S'bool'
p37951
sS'default'
p37952
S'1'
p37953
sS'name'
p37954
S'enable'
p37955
sS'required'
p37956
I00
sS'group_name'
p37957
S'Advanced'
p37958
sa(dp37959
S'description'
p37960
S'Number of grains being represented by the order parameters\n'
p37961
sS'cpp_type'
p37962
S'unsigned int'
p37963
sS'default'
p37964
g3
sS'name'
p37965
S'grain_num'
p37966
sS'required'
p37967
I01
sS'group_name'
p37968
Nsa(dp37969
S'description'
p37970
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p37971
sS'cpp_type'
p37972
S'bool'
p37973
sS'default'
p37974
S'0'
p37975
sS'name'
p37976
S'ignore_uo_dependency'
p37977
sS'required'
p37978
I00
sS'group_name'
p37979
S'Advanced'
p37980
sa(dp37981
S'description'
p37982
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p37983
sS'cpp_type'
p37984
S'double'
p37985
sS'default'
p37986
S'0'
p37987
sS'name'
p37988
S'int_width'
p37989
sS'required'
p37990
I00
sS'group_name'
p37991
Nsa(dp37992
S'description'
p37993
S'The variable value inside the circle\n'
p37994
sS'cpp_type'
p37995
S'double'
p37996
sS'default'
p37997
g3
sS'name'
p37998
S'invalue'
p37999
sS'required'
p38000
I01
sS'group_name'
p38001
Nsa(dp38002
S'description'
p38003
S'The number of bubbles to place\n'
p38004
sS'cpp_type'
p38005
S'unsigned int'
p38006
sS'default'
p38007
g3
sS'name'
p38008
S'numbub'
p38009
sS'required'
p38010
I01
sS'group_name'
p38011
Nsa(dp38012
S'description'
p38013
S'The number of tries\n'
p38014
sS'cpp_type'
p38015
S'unsigned int'
p38016
sS'default'
p38017
S'1000'
p38018
sS'name'
p38019
S'numtries'
p38020
sS'required'
p38021
I00
sS'group_name'
p38022
Nsa(dp38023
S'description'
p38024
S'The index for the current order parameter, not needed if structure_type = voids\n'
p38025
sS'cpp_type'
p38026
S'unsigned int'
p38027
sS'default'
p38028
S'0'
p38029
sS'name'
p38030
S'op_index'
p38031
sS'required'
p38032
I00
sS'group_name'
p38033
Nsa(dp38034
S'description'
p38035
S'Number of order parameters\n'
p38036
sS'cpp_type'
p38037
S'unsigned int'
p38038
sS'default'
p38039
g3
sS'name'
p38040
S'op_num'
p38041
sS'required'
p38042
I01
sS'group_name'
p38043
Nsa(dp38044
S'description'
p38045
S'The variable value outside the circle\n'
p38046
sS'cpp_type'
p38047
S'double'
p38048
sS'default'
p38049
g3
sS'name'
p38050
S'outvalue'
p38051
sS'required'
p38052
I01
sS'group_name'
p38053
Nsa(dp38054
S'description'
p38055
S'Mean radius value for the circles\n'
p38056
sS'cpp_type'
p38057
S'double'
p38058
sS'default'
p38059
g3
sS'name'
p38060
S'radius'
p38061
sS'required'
p38062
I01
sS'group_name'
p38063
Nsa(dp38064
S'description'
p38065
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p38066
sS'cpp_type'
p38067
S'double'
p38068
sS'default'
p38069
S'0'
p38070
sS'name'
p38071
S'radius_variation'
p38072
sS'required'
p38073
I00
sS'group_name'
p38074
Nsa(dp38075
S'name'
p38076
S'radius_variation_type'
p38077
sS'cpp_type'
p38078
S'MooseEnum'
p38079
sS'default'
p38080
S'none'
p38081
sS'description'
p38082
S'Type of distribution that random circle radii will follow\n'
p38083
sS'required'
p38084
I00
sS'options'
p38085
S'uniform normal none'
p38086
sS'group_name'
p38087
Nsa(dp38088
S'description'
p38089
S'The random seed\n'
p38090
sS'cpp_type'
p38091
S'unsigned int'
p38092
sS'default'
p38093
S'12444'
p38094
sS'name'
p38095
S'rand_seed'
p38096
sS'required'
p38097
I00
sS'group_name'
p38098
Nsa(dp38099
S'name'
p38100
S'structure_type'
p38101
sS'cpp_type'
p38102
S'MooseEnum'
p38103
sS'default'
p38104
g3
sS'description'
p38105
S'Which structure type is being initialized, grains or voids\n'
p38106
sS'required'
p38107
I01
sS'options'
p38108
S'grains voids'
p38109
sS'group_name'
p38110
Nsa(dp38111
S'description'
p38112
g3
sS'cpp_type'
p38113
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38114
sS'default'
p38115
S'PolycrystalVoronoiVoidIC'
p38116
sS'name'
p38117
S'type'
p38118
sS'required'
p38119
I00
sS'group_name'
p38120
Nsa(dp38121
S'description'
p38122
S'The variable this initial condition is supposed to provide values for.\n'
p38123
sS'cpp_type'
p38124
S'VariableName'
p38125
sS'default'
p38126
g3
sS'name'
p38127
S'variable'
p38128
sS'required'
p38129
I01
sS'group_name'
p38130
Nsa(dp38131
S'description'
p38132
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p38133
sS'cpp_type'
p38134
S'bool'
p38135
sS'default'
p38136
S'0'
p38137
sS'name'
p38138
S'zero_gradient'
p38139
sS'required'
p38140
I00
sS'group_name'
p38141
NsasS'name'
p38142
S'/ICs/PolycrystalVoronoiVoidIC'
p38143
sa(dp38144
S'description'
p38145
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p38146
sS'subblocks'
p38147
NsS'parameters'
p38148
(lp38149
(dp38150
S'description'
p38151
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38152
sS'cpp_type'
p38153
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38154
sS'default'
p38155
g3
sS'name'
p38156
S'block'
p38157
sS'required'
p38158
I00
sS'group_name'
p38159
Nsa(dp38160
S'description'
p38161
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38162
sS'cpp_type'
p38163
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38164
sS'default'
p38165
g3
sS'name'
p38166
S'boundary'
p38167
sS'required'
p38168
I00
sS'group_name'
p38169
Nsa(dp38170
S'description'
p38171
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38172
sS'cpp_type'
p38173
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38174
sS'default'
p38175
g3
sS'name'
p38176
S'control_tags'
p38177
sS'required'
p38178
I00
sS'group_name'
p38179
S'Advanced'
p38180
sa(dp38181
S'description'
p38182
S'Set the enabled status of the MooseObject.\n'
p38183
sS'cpp_type'
p38184
S'bool'
p38185
sS'default'
p38186
S'1'
p38187
sS'name'
p38188
S'enable'
p38189
sS'required'
p38190
I00
sS'group_name'
p38191
S'Advanced'
p38192
sa(dp38193
S'description'
p38194
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38195
sS'cpp_type'
p38196
S'bool'
p38197
sS'default'
p38198
S'0'
p38199
sS'name'
p38200
S'ignore_uo_dependency'
p38201
sS'required'
p38202
I00
sS'group_name'
p38203
S'Advanced'
p38204
sa(dp38205
S'description'
p38206
g3
sS'cpp_type'
p38207
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38208
sS'default'
p38209
S'RampIC'
p38210
sS'name'
p38211
S'type'
p38212
sS'required'
p38213
I00
sS'group_name'
p38214
Nsa(dp38215
S'description'
p38216
S'The value on left (xmin) boundary.\n'
p38217
sS'cpp_type'
p38218
S'double'
p38219
sS'default'
p38220
g3
sS'name'
p38221
S'value_left'
p38222
sS'required'
p38223
I01
sS'group_name'
p38224
Nsa(dp38225
S'description'
p38226
S'The value on right (xmax) boundary.\n'
p38227
sS'cpp_type'
p38228
S'double'
p38229
sS'default'
p38230
g3
sS'name'
p38231
S'value_right'
p38232
sS'required'
p38233
I01
sS'group_name'
p38234
Nsa(dp38235
S'description'
p38236
S'The variable this initial condition is supposed to provide values for.\n'
p38237
sS'cpp_type'
p38238
S'VariableName'
p38239
sS'default'
p38240
g3
sS'name'
p38241
S'variable'
p38242
sS'required'
p38243
I01
sS'group_name'
p38244
NsasS'name'
p38245
S'/ICs/RampIC'
p38246
sa(dp38247
S'description'
p38248
g3
sS'subblocks'
p38249
NsS'parameters'
p38250
(lp38251
(dp38252
S'description'
p38253
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38254
sS'cpp_type'
p38255
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38256
sS'default'
p38257
g3
sS'name'
p38258
S'block'
p38259
sS'required'
p38260
I00
sS'group_name'
p38261
Nsa(dp38262
S'description'
p38263
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38264
sS'cpp_type'
p38265
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38266
sS'default'
p38267
g3
sS'name'
p38268
S'boundary'
p38269
sS'required'
p38270
I00
sS'group_name'
p38271
Nsa(dp38272
S'description'
p38273
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38274
sS'cpp_type'
p38275
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38276
sS'default'
p38277
g3
sS'name'
p38278
S'control_tags'
p38279
sS'required'
p38280
I00
sS'group_name'
p38281
S'Advanced'
p38282
sa(dp38283
S'description'
p38284
S'Set the enabled status of the MooseObject.\n'
p38285
sS'cpp_type'
p38286
S'bool'
p38287
sS'default'
p38288
S'1'
p38289
sS'name'
p38290
S'enable'
p38291
sS'required'
p38292
I00
sS'group_name'
p38293
S'Advanced'
p38294
sa(dp38295
S'description'
p38296
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38297
sS'cpp_type'
p38298
S'bool'
p38299
sS'default'
p38300
S'0'
p38301
sS'name'
p38302
S'ignore_uo_dependency'
p38303
sS'required'
p38304
I00
sS'group_name'
p38305
S'Advanced'
p38306
sa(dp38307
S'description'
p38308
S'Upper bound of the randomly generated values\n'
p38309
sS'cpp_type'
p38310
S'double'
p38311
sS'default'
p38312
S'1'
p38313
sS'name'
p38314
S'max'
p38315
sS'required'
p38316
I00
sS'group_name'
p38317
Nsa(dp38318
S'description'
p38319
S'Lower bound of the randomly generated values\n'
p38320
sS'cpp_type'
p38321
S'double'
p38322
sS'default'
p38323
S'0'
p38324
sS'name'
p38325
S'min'
p38326
sS'required'
p38327
I00
sS'group_name'
p38328
Nsa(dp38329
S'description'
p38330
S'Seed value for the random number generator\n'
p38331
sS'cpp_type'
p38332
S'unsigned int'
p38333
sS'default'
p38334
S'0'
p38335
sS'name'
p38336
S'seed'
p38337
sS'required'
p38338
I00
sS'group_name'
p38339
Nsa(dp38340
S'description'
p38341
g3
sS'cpp_type'
p38342
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38343
sS'default'
p38344
S'RandomIC'
p38345
sS'name'
p38346
S'type'
p38347
sS'required'
p38348
I00
sS'group_name'
p38349
Nsa(dp38350
S'description'
p38351
S'The variable this initial condition is supposed to provide values for.\n'
p38352
sS'cpp_type'
p38353
S'VariableName'
p38354
sS'default'
p38355
g3
sS'name'
p38356
S'variable'
p38357
sS'required'
p38358
I01
sS'group_name'
p38359
NsasS'name'
p38360
S'/ICs/RandomIC'
p38361
sa(dp38362
S'description'
p38363
g3
sS'subblocks'
p38364
NsS'parameters'
p38365
(lp38366
(dp38367
S'description'
p38368
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38369
sS'cpp_type'
p38370
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38371
sS'default'
p38372
g3
sS'name'
p38373
S'block'
p38374
sS'required'
p38375
I00
sS'group_name'
p38376
Nsa(dp38377
S'description'
p38378
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38379
sS'cpp_type'
p38380
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38381
sS'default'
p38382
g3
sS'name'
p38383
S'boundary'
p38384
sS'required'
p38385
I00
sS'group_name'
p38386
Nsa(dp38387
S'description'
p38388
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38389
sS'cpp_type'
p38390
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38391
sS'default'
p38392
g3
sS'name'
p38393
S'control_tags'
p38394
sS'required'
p38395
I00
sS'group_name'
p38396
S'Advanced'
p38397
sa(dp38398
S'description'
p38399
S'The EBSDReader object holding the EBSD data\n'
p38400
sS'cpp_type'
p38401
S'UserObjectName'
p38402
sS'default'
p38403
g3
sS'name'
p38404
S'ebsd_reader'
p38405
sS'required'
p38406
I01
sS'group_name'
p38407
Nsa(dp38408
S'description'
p38409
S'Set the enabled status of the MooseObject.\n'
p38410
sS'cpp_type'
p38411
S'bool'
p38412
sS'default'
p38413
S'1'
p38414
sS'name'
p38415
S'enable'
p38416
sS'required'
p38417
I00
sS'group_name'
p38418
S'Advanced'
p38419
sa(dp38420
S'description'
p38421
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38422
sS'cpp_type'
p38423
S'bool'
p38424
sS'default'
p38425
S'0'
p38426
sS'name'
p38427
S'ignore_uo_dependency'
p38428
sS'required'
p38429
I00
sS'group_name'
p38430
S'Advanced'
p38431
sa(dp38432
S'description'
p38433
S'EBSD phase number this variable is to represent\n'
p38434
sS'cpp_type'
p38435
S'unsigned int'
p38436
sS'default'
p38437
g3
sS'name'
p38438
S'phase'
p38439
sS'required'
p38440
I01
sS'group_name'
p38441
Nsa(dp38442
S'description'
p38443
g3
sS'cpp_type'
p38444
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38445
sS'default'
p38446
S'ReconPhaseVarIC'
p38447
sS'name'
p38448
S'type'
p38449
sS'required'
p38450
I00
sS'group_name'
p38451
Nsa(dp38452
S'description'
p38453
S'The variable this initial condition is supposed to provide values for.\n'
p38454
sS'cpp_type'
p38455
S'VariableName'
p38456
sS'default'
p38457
g3
sS'name'
p38458
S'variable'
p38459
sS'required'
p38460
I01
sS'group_name'
p38461
NsasS'name'
p38462
S'/ICs/ReconPhaseVarIC'
p38463
sa(dp38464
S'description'
p38465
g3
sS'subblocks'
p38466
NsS'parameters'
p38467
(lp38468
(dp38469
S'description'
p38470
g3
sS'cpp_type'
p38471
S'bool'
p38472
sS'default'
p38473
S'0'
p38474
sS'name'
p38475
S'all_op_elemental'
p38476
sS'required'
p38477
I00
sS'group_name'
p38478
Nsa(dp38479
S'description'
p38480
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38481
sS'cpp_type'
p38482
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38483
sS'default'
p38484
g3
sS'name'
p38485
S'block'
p38486
sS'required'
p38487
I00
sS'group_name'
p38488
Nsa(dp38489
S'description'
p38490
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38491
sS'cpp_type'
p38492
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38493
sS'default'
p38494
g3
sS'name'
p38495
S'boundary'
p38496
sS'required'
p38497
I00
sS'group_name'
p38498
Nsa(dp38499
S'name'
p38500
S'coloring_algorithm'
p38501
sS'cpp_type'
p38502
S'MooseEnum'
p38503
sS'default'
p38504
S'legacy'
p38505
sS'description'
p38506
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p38507
sS'required'
p38508
I00
sS'options'
p38509
S'legacy bt jp power greedy'
p38510
sS'group_name'
p38511
Nsa(dp38512
S'description'
p38513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38514
sS'cpp_type'
p38515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38516
sS'default'
p38517
g3
sS'name'
p38518
S'control_tags'
p38519
sS'required'
p38520
I00
sS'group_name'
p38521
S'Advanced'
p38522
sa(dp38523
S'description'
p38524
S'The EBSDReader GeneralUserObject\n'
p38525
sS'cpp_type'
p38526
S'UserObjectName'
p38527
sS'default'
p38528
g3
sS'name'
p38529
S'ebsd_reader'
p38530
sS'required'
p38531
I01
sS'group_name'
p38532
Nsa(dp38533
S'description'
p38534
S'Set the enabled status of the MooseObject.\n'
p38535
sS'cpp_type'
p38536
S'bool'
p38537
sS'default'
p38538
S'1'
p38539
sS'name'
p38540
S'enable'
p38541
sS'required'
p38542
I00
sS'group_name'
p38543
S'Advanced'
p38544
sa(dp38545
S'description'
p38546
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38547
sS'cpp_type'
p38548
S'bool'
p38549
sS'default'
p38550
S'0'
p38551
sS'name'
p38552
S'ignore_uo_dependency'
p38553
sS'required'
p38554
I00
sS'group_name'
p38555
S'Advanced'
p38556
sa(dp38557
S'description'
p38558
S'The index for the current order parameter\n'
p38559
sS'cpp_type'
p38560
S'unsigned int'
p38561
sS'default'
p38562
g3
sS'name'
p38563
S'op_index'
p38564
sS'required'
p38565
I01
sS'group_name'
p38566
Nsa(dp38567
S'description'
p38568
S'Specifies the number of order parameters to create\n'
p38569
sS'cpp_type'
p38570
S'unsigned int'
p38571
sS'default'
p38572
g3
sS'name'
p38573
S'op_num'
p38574
sS'required'
p38575
I01
sS'group_name'
p38576
Nsa(dp38577
S'description'
p38578
S'EBSD phase number to be assigned to this grain\n'
p38579
sS'cpp_type'
p38580
S'unsigned int'
p38581
sS'default'
p38582
g3
sS'name'
p38583
S'phase'
p38584
sS'required'
p38585
I00
sS'group_name'
p38586
Nsa(dp38587
S'description'
p38588
g3
sS'cpp_type'
p38589
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38590
sS'default'
p38591
S'ReconVarIC'
p38592
sS'name'
p38593
S'type'
p38594
sS'required'
p38595
I00
sS'group_name'
p38596
Nsa(dp38597
S'description'
p38598
S'The variable this initial condition is supposed to provide values for.\n'
p38599
sS'cpp_type'
p38600
S'VariableName'
p38601
sS'default'
p38602
g3
sS'name'
p38603
S'variable'
p38604
sS'required'
p38605
I01
sS'group_name'
p38606
NsasS'name'
p38607
S'/ICs/ReconVarIC'
p38608
sa(dp38609
S'description'
p38610
S'Random noise with different min/max inside/outside of a bounding box\n'
p38611
sS'subblocks'
p38612
NsS'parameters'
p38613
(lp38614
(dp38615
S'description'
p38616
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38617
sS'cpp_type'
p38618
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38619
sS'default'
p38620
g3
sS'name'
p38621
S'block'
p38622
sS'required'
p38623
I00
sS'group_name'
p38624
Nsa(dp38625
S'description'
p38626
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38627
sS'cpp_type'
p38628
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38629
sS'default'
p38630
g3
sS'name'
p38631
S'boundary'
p38632
sS'required'
p38633
I00
sS'group_name'
p38634
Nsa(dp38635
S'description'
p38636
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38637
sS'cpp_type'
p38638
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38639
sS'default'
p38640
g3
sS'name'
p38641
S'control_tags'
p38642
sS'required'
p38643
I00
sS'group_name'
p38644
S'Advanced'
p38645
sa(dp38646
S'description'
p38647
S'Set the enabled status of the MooseObject.\n'
p38648
sS'cpp_type'
p38649
S'bool'
p38650
sS'default'
p38651
S'1'
p38652
sS'name'
p38653
S'enable'
p38654
sS'required'
p38655
I00
sS'group_name'
p38656
S'Advanced'
p38657
sa(dp38658
S'description'
p38659
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38660
sS'cpp_type'
p38661
S'bool'
p38662
sS'default'
p38663
S'0'
p38664
sS'name'
p38665
S'ignore_uo_dependency'
p38666
sS'required'
p38667
I00
sS'group_name'
p38668
S'Advanced'
p38669
sa(dp38670
S'description'
p38671
S'The min value of the variable invalue the box\n'
p38672
sS'cpp_type'
p38673
S'double'
p38674
sS'default'
p38675
S'0'
p38676
sS'name'
p38677
S'mn_invalue'
p38678
sS'required'
p38679
I00
sS'group_name'
p38680
Nsa(dp38681
S'description'
p38682
S'The min value of the variable outvalue the box\n'
p38683
sS'cpp_type'
p38684
S'double'
p38685
sS'default'
p38686
S'0'
p38687
sS'name'
p38688
S'mn_outvalue'
p38689
sS'required'
p38690
I00
sS'group_name'
p38691
Nsa(dp38692
S'description'
p38693
S'The max value of the variable invalue the box\n'
p38694
sS'cpp_type'
p38695
S'double'
p38696
sS'default'
p38697
g3
sS'name'
p38698
S'mx_invalue'
p38699
sS'required'
p38700
I01
sS'group_name'
p38701
Nsa(dp38702
S'description'
p38703
S'The max value of the variable outvalue the box\n'
p38704
sS'cpp_type'
p38705
S'double'
p38706
sS'default'
p38707
g3
sS'name'
p38708
S'mx_outvalue'
p38709
sS'required'
p38710
I01
sS'group_name'
p38711
Nsa(dp38712
S'description'
p38713
g3
sS'cpp_type'
p38714
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38715
sS'default'
p38716
S'RndBoundingBoxIC'
p38717
sS'name'
p38718
S'type'
p38719
sS'required'
p38720
I00
sS'group_name'
p38721
Nsa(dp38722
S'description'
p38723
S'The variable this initial condition is supposed to provide values for.\n'
p38724
sS'cpp_type'
p38725
S'VariableName'
p38726
sS'default'
p38727
g3
sS'name'
p38728
S'variable'
p38729
sS'required'
p38730
I01
sS'group_name'
p38731
Nsa(dp38732
S'description'
p38733
S'The x coordinate of the lower left-hand corner of the box\n'
p38734
sS'cpp_type'
p38735
S'double'
p38736
sS'default'
p38737
g3
sS'name'
p38738
S'x1'
p38739
sS'required'
p38740
I01
sS'group_name'
p38741
Nsa(dp38742
S'description'
p38743
S'The x coordinate of the upper right-hand corner of the box\n'
p38744
sS'cpp_type'
p38745
S'double'
p38746
sS'default'
p38747
g3
sS'name'
p38748
S'x2'
p38749
sS'required'
p38750
I01
sS'group_name'
p38751
Nsa(dp38752
S'description'
p38753
S'The y coordinate of the lower left-hand corner of the box\n'
p38754
sS'cpp_type'
p38755
S'double'
p38756
sS'default'
p38757
g3
sS'name'
p38758
S'y1'
p38759
sS'required'
p38760
I01
sS'group_name'
p38761
Nsa(dp38762
S'description'
p38763
S'The y coordinate of the upper right-hand corner of the box\n'
p38764
sS'cpp_type'
p38765
S'double'
p38766
sS'default'
p38767
g3
sS'name'
p38768
S'y2'
p38769
sS'required'
p38770
I01
sS'group_name'
p38771
Nsa(dp38772
S'description'
p38773
S'The z coordinate of the lower left-hand corner of the box\n'
p38774
sS'cpp_type'
p38775
S'double'
p38776
sS'default'
p38777
S'0'
p38778
sS'name'
p38779
S'z1'
p38780
sS'required'
p38781
I00
sS'group_name'
p38782
Nsa(dp38783
S'description'
p38784
S'The z coordinate of the upper right-hand corner of the box\n'
p38785
sS'cpp_type'
p38786
S'double'
p38787
sS'default'
p38788
S'0'
p38789
sS'name'
p38790
S'z2'
p38791
sS'required'
p38792
I00
sS'group_name'
p38793
NsasS'name'
p38794
S'/ICs/RndBoundingBoxIC'
p38795
sa(dp38796
S'description'
p38797
S'Random noise with different min/max inside/outside of a smooth circle\n'
p38798
sS'subblocks'
p38799
NsS'parameters'
p38800
(lp38801
(dp38802
S'description'
p38803
S'in 3D, whether the objects are spheres or columns\n'
p38804
sS'cpp_type'
p38805
S'bool'
p38806
sS'default'
p38807
S'1'
p38808
sS'name'
p38809
S'3D_spheres'
p38810
sS'required'
p38811
I00
sS'group_name'
p38812
Nsa(dp38813
S'description'
p38814
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38815
sS'cpp_type'
p38816
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38817
sS'default'
p38818
g3
sS'name'
p38819
S'block'
p38820
sS'required'
p38821
I00
sS'group_name'
p38822
Nsa(dp38823
S'description'
p38824
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38825
sS'cpp_type'
p38826
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38827
sS'default'
p38828
g3
sS'name'
p38829
S'boundary'
p38830
sS'required'
p38831
I00
sS'group_name'
p38832
Nsa(dp38833
S'description'
p38834
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38835
sS'cpp_type'
p38836
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38837
sS'default'
p38838
g3
sS'name'
p38839
S'control_tags'
p38840
sS'required'
p38841
I00
sS'group_name'
p38842
S'Advanced'
p38843
sa(dp38844
S'description'
p38845
S'Set the enabled status of the MooseObject.\n'
p38846
sS'cpp_type'
p38847
S'bool'
p38848
sS'default'
p38849
S'1'
p38850
sS'name'
p38851
S'enable'
p38852
sS'required'
p38853
I00
sS'group_name'
p38854
S'Advanced'
p38855
sa(dp38856
S'description'
p38857
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38858
sS'cpp_type'
p38859
S'bool'
p38860
sS'default'
p38861
S'0'
p38862
sS'name'
p38863
S'ignore_uo_dependency'
p38864
sS'required'
p38865
I00
sS'group_name'
p38866
S'Advanced'
p38867
sa(dp38868
S'description'
p38869
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p38870
sS'cpp_type'
p38871
S'double'
p38872
sS'default'
p38873
S'0'
p38874
sS'name'
p38875
S'int_width'
p38876
sS'required'
p38877
I00
sS'group_name'
p38878
Nsa(dp38879
S'description'
p38880
S'The variable value inside the circle\n'
p38881
sS'cpp_type'
p38882
S'double'
p38883
sS'default'
p38884
g3
sS'name'
p38885
S'invalue'
p38886
sS'required'
p38887
I01
sS'group_name'
p38888
Nsa(dp38889
S'description'
p38890
S'The variable value outside the circle\n'
p38891
sS'cpp_type'
p38892
S'double'
p38893
sS'default'
p38894
g3
sS'name'
p38895
S'outvalue'
p38896
sS'required'
p38897
I01
sS'group_name'
p38898
Nsa(dp38899
S'description'
p38900
S'The radius of a circle\n'
p38901
sS'cpp_type'
p38902
S'double'
p38903
sS'default'
p38904
g3
sS'name'
p38905
S'radius'
p38906
sS'required'
p38907
I01
sS'group_name'
p38908
Nsa(dp38909
S'description'
p38910
S'Seed value for the random number generator\n'
p38911
sS'cpp_type'
p38912
S'unsigned int'
p38913
sS'default'
p38914
S'12345'
p38915
sS'name'
p38916
S'rand_seed'
p38917
sS'required'
p38918
I00
sS'group_name'
p38919
Nsa(dp38920
S'description'
p38921
g3
sS'cpp_type'
p38922
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38923
sS'default'
p38924
S'RndSmoothCircleIC'
p38925
sS'name'
p38926
S'type'
p38927
sS'required'
p38928
I00
sS'group_name'
p38929
Nsa(dp38930
S'description'
p38931
S'The variable this initial condition is supposed to provide values for.\n'
p38932
sS'cpp_type'
p38933
S'VariableName'
p38934
sS'default'
p38935
g3
sS'name'
p38936
S'variable'
p38937
sS'required'
p38938
I01
sS'group_name'
p38939
Nsa(dp38940
S'description'
p38941
S'Plus or minus this amount on the invalue\n'
p38942
sS'cpp_type'
p38943
S'double'
p38944
sS'default'
p38945
g3
sS'name'
p38946
S'variation_invalue'
p38947
sS'required'
p38948
I01
sS'group_name'
p38949
Nsa(dp38950
S'description'
p38951
S'Plus or minus this amount on the outvalue\n'
p38952
sS'cpp_type'
p38953
S'double'
p38954
sS'default'
p38955
g3
sS'name'
p38956
S'variation_outvalue'
p38957
sS'required'
p38958
I01
sS'group_name'
p38959
Nsa(dp38960
S'description'
p38961
S'The x coordinate of the circle center\n'
p38962
sS'cpp_type'
p38963
S'double'
p38964
sS'default'
p38965
g3
sS'name'
p38966
S'x1'
p38967
sS'required'
p38968
I01
sS'group_name'
p38969
Nsa(dp38970
S'description'
p38971
S'The y coordinate of the circle center\n'
p38972
sS'cpp_type'
p38973
S'double'
p38974
sS'default'
p38975
g3
sS'name'
p38976
S'y1'
p38977
sS'required'
p38978
I01
sS'group_name'
p38979
Nsa(dp38980
S'description'
p38981
S'The z coordinate of the circle center\n'
p38982
sS'cpp_type'
p38983
S'double'
p38984
sS'default'
p38985
S'0'
p38986
sS'name'
p38987
S'z1'
p38988
sS'required'
p38989
I00
sS'group_name'
p38990
Nsa(dp38991
S'description'
p38992
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p38993
sS'cpp_type'
p38994
S'bool'
p38995
sS'default'
p38996
S'0'
p38997
sS'name'
p38998
S'zero_gradient'
p38999
sS'required'
p39000
I00
sS'group_name'
p39001
NsasS'name'
p39002
S'/ICs/RndSmoothCircleIC'
p39003
sa(dp39004
S'description'
p39005
g3
sS'subblocks'
p39006
NsS'parameters'
p39007
(lp39008
(dp39009
S'description'
p39010
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39011
sS'cpp_type'
p39012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39013
sS'default'
p39014
g3
sS'name'
p39015
S'control_tags'
p39016
sS'required'
p39017
I00
sS'group_name'
p39018
S'Advanced'
p39019
sa(dp39020
S'description'
p39021
S'Set the enabled status of the MooseObject.\n'
p39022
sS'cpp_type'
p39023
S'bool'
p39024
sS'default'
p39025
S'1'
p39026
sS'name'
p39027
S'enable'
p39028
sS'required'
p39029
I00
sS'group_name'
p39030
S'Advanced'
p39031
sa(dp39032
S'description'
p39033
g3
sS'cpp_type'
p39034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39035
sS'default'
p39036
S'ScalarComponentIC'
p39037
sS'name'
p39038
S'type'
p39039
sS'required'
p39040
I00
sS'group_name'
p39041
Nsa(dp39042
S'description'
p39043
S'Initial values to initialize the scalar variable.\n'
p39044
sS'cpp_type'
p39045
S'std::vector<double, std::allocator<double> >'
p39046
sS'default'
p39047
g3
sS'name'
p39048
S'values'
p39049
sS'required'
p39050
I01
sS'group_name'
p39051
Nsa(dp39052
S'description'
p39053
S'The variable this initial condition is supposed to provide values for.\n'
p39054
sS'cpp_type'
p39055
S'VariableName'
p39056
sS'default'
p39057
g3
sS'name'
p39058
S'variable'
p39059
sS'required'
p39060
I00
sS'group_name'
p39061
NsasS'name'
p39062
S'/ICs/ScalarComponentIC'
p39063
sa(dp39064
S'description'
p39065
g3
sS'subblocks'
p39066
NsS'parameters'
p39067
(lp39068
(dp39069
S'description'
p39070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39071
sS'cpp_type'
p39072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39073
sS'default'
p39074
g3
sS'name'
p39075
S'control_tags'
p39076
sS'required'
p39077
I00
sS'group_name'
p39078
S'Advanced'
p39079
sa(dp39080
S'description'
p39081
S'Set the enabled status of the MooseObject.\n'
p39082
sS'cpp_type'
p39083
S'bool'
p39084
sS'default'
p39085
S'1'
p39086
sS'name'
p39087
S'enable'
p39088
sS'required'
p39089
I00
sS'group_name'
p39090
S'Advanced'
p39091
sa(dp39092
S'description'
p39093
g3
sS'cpp_type'
p39094
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39095
sS'default'
p39096
S'ScalarConstantIC'
p39097
sS'name'
p39098
S'type'
p39099
sS'required'
p39100
I00
sS'group_name'
p39101
Nsa(dp39102
S'description'
p39103
g3
sS'cpp_type'
p39104
S'double'
p39105
sS'default'
p39106
S'0'
p39107
sS'name'
p39108
S'value'
p39109
sS'required'
p39110
I00
sS'group_name'
p39111
Nsa(dp39112
S'description'
p39113
S'The variable this initial condition is supposed to provide values for.\n'
p39114
sS'cpp_type'
p39115
S'VariableName'
p39116
sS'default'
p39117
g3
sS'name'
p39118
S'variable'
p39119
sS'required'
p39120
I00
sS'group_name'
p39121
NsasS'name'
p39122
S'/ICs/ScalarConstantIC'
p39123
sa(dp39124
S'description'
p39125
S'Circle with a smooth interface\n'
p39126
sS'subblocks'
p39127
NsS'parameters'
p39128
(lp39129
(dp39130
S'description'
p39131
S'in 3D, whether the objects are spheres or columns\n'
p39132
sS'cpp_type'
p39133
S'bool'
p39134
sS'default'
p39135
S'1'
p39136
sS'name'
p39137
S'3D_spheres'
p39138
sS'required'
p39139
I00
sS'group_name'
p39140
Nsa(dp39141
S'description'
p39142
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39143
sS'cpp_type'
p39144
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39145
sS'default'
p39146
g3
sS'name'
p39147
S'block'
p39148
sS'required'
p39149
I00
sS'group_name'
p39150
Nsa(dp39151
S'description'
p39152
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39153
sS'cpp_type'
p39154
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39155
sS'default'
p39156
g3
sS'name'
p39157
S'boundary'
p39158
sS'required'
p39159
I00
sS'group_name'
p39160
Nsa(dp39161
S'description'
p39162
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39163
sS'cpp_type'
p39164
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39165
sS'default'
p39166
g3
sS'name'
p39167
S'control_tags'
p39168
sS'required'
p39169
I00
sS'group_name'
p39170
S'Advanced'
p39171
sa(dp39172
S'description'
p39173
S'Set the enabled status of the MooseObject.\n'
p39174
sS'cpp_type'
p39175
S'bool'
p39176
sS'default'
p39177
S'1'
p39178
sS'name'
p39179
S'enable'
p39180
sS'required'
p39181
I00
sS'group_name'
p39182
S'Advanced'
p39183
sa(dp39184
S'description'
p39185
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39186
sS'cpp_type'
p39187
S'bool'
p39188
sS'default'
p39189
S'0'
p39190
sS'name'
p39191
S'ignore_uo_dependency'
p39192
sS'required'
p39193
I00
sS'group_name'
p39194
S'Advanced'
p39195
sa(dp39196
S'description'
p39197
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39198
sS'cpp_type'
p39199
S'double'
p39200
sS'default'
p39201
S'0'
p39202
sS'name'
p39203
S'int_width'
p39204
sS'required'
p39205
I00
sS'group_name'
p39206
Nsa(dp39207
S'description'
p39208
S'The variable value inside the circle\n'
p39209
sS'cpp_type'
p39210
S'double'
p39211
sS'default'
p39212
g3
sS'name'
p39213
S'invalue'
p39214
sS'required'
p39215
I01
sS'group_name'
p39216
Nsa(dp39217
S'description'
p39218
S'The variable value outside the circle\n'
p39219
sS'cpp_type'
p39220
S'double'
p39221
sS'default'
p39222
g3
sS'name'
p39223
S'outvalue'
p39224
sS'required'
p39225
I01
sS'group_name'
p39226
Nsa(dp39227
S'description'
p39228
S'The radius of a circle\n'
p39229
sS'cpp_type'
p39230
S'double'
p39231
sS'default'
p39232
g3
sS'name'
p39233
S'radius'
p39234
sS'required'
p39235
I01
sS'group_name'
p39236
Nsa(dp39237
S'description'
p39238
S'Seed value for the random number generator\n'
p39239
sS'cpp_type'
p39240
S'unsigned int'
p39241
sS'default'
p39242
S'12345'
p39243
sS'name'
p39244
S'rand_seed'
p39245
sS'required'
p39246
I00
sS'group_name'
p39247
Nsa(dp39248
S'description'
p39249
g3
sS'cpp_type'
p39250
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39251
sS'default'
p39252
S'SmoothCircleIC'
p39253
sS'name'
p39254
S'type'
p39255
sS'required'
p39256
I00
sS'group_name'
p39257
Nsa(dp39258
S'description'
p39259
S'The variable this initial condition is supposed to provide values for.\n'
p39260
sS'cpp_type'
p39261
S'VariableName'
p39262
sS'default'
p39263
g3
sS'name'
p39264
S'variable'
p39265
sS'required'
p39266
I01
sS'group_name'
p39267
Nsa(dp39268
S'description'
p39269
S'The x coordinate of the circle center\n'
p39270
sS'cpp_type'
p39271
S'double'
p39272
sS'default'
p39273
g3
sS'name'
p39274
S'x1'
p39275
sS'required'
p39276
I01
sS'group_name'
p39277
Nsa(dp39278
S'description'
p39279
S'The y coordinate of the circle center\n'
p39280
sS'cpp_type'
p39281
S'double'
p39282
sS'default'
p39283
g3
sS'name'
p39284
S'y1'
p39285
sS'required'
p39286
I01
sS'group_name'
p39287
Nsa(dp39288
S'description'
p39289
S'The z coordinate of the circle center\n'
p39290
sS'cpp_type'
p39291
S'double'
p39292
sS'default'
p39293
S'0'
p39294
sS'name'
p39295
S'z1'
p39296
sS'required'
p39297
I00
sS'group_name'
p39298
Nsa(dp39299
S'description'
p39300
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p39301
sS'cpp_type'
p39302
S'bool'
p39303
sS'default'
p39304
S'0'
p39305
sS'name'
p39306
S'zero_gradient'
p39307
sS'required'
p39308
I00
sS'group_name'
p39309
NsasS'name'
p39310
S'/ICs/SmoothCircleIC'
p39311
sa(dp39312
S'description'
p39313
S'Superellipsoid with a smooth interface\n'
p39314
sS'subblocks'
p39315
NsS'parameters'
p39316
(lp39317
(dp39318
S'description'
p39319
S'Semiaxis a of the superellipsoid\n'
p39320
sS'cpp_type'
p39321
S'double'
p39322
sS'default'
p39323
g3
sS'name'
p39324
S'a'
p39325
sS'required'
p39326
I01
sS'group_name'
p39327
Nsa(dp39328
S'description'
p39329
S'Semiaxis b of the superellipsoid\n'
p39330
sS'cpp_type'
p39331
S'double'
p39332
sS'default'
p39333
g3
sS'name'
p39334
S'b'
p39335
sS'required'
p39336
I01
sS'group_name'
p39337
Nsa(dp39338
S'description'
p39339
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39340
sS'cpp_type'
p39341
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39342
sS'default'
p39343
g3
sS'name'
p39344
S'block'
p39345
sS'required'
p39346
I00
sS'group_name'
p39347
Nsa(dp39348
S'description'
p39349
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39350
sS'cpp_type'
p39351
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39352
sS'default'
p39353
g3
sS'name'
p39354
S'boundary'
p39355
sS'required'
p39356
I00
sS'group_name'
p39357
Nsa(dp39358
S'description'
p39359
S'Semiaxis c of the superellipsoid\n'
p39360
sS'cpp_type'
p39361
S'double'
p39362
sS'default'
p39363
S'1'
p39364
sS'name'
p39365
S'c'
p39366
sS'required'
p39367
I00
sS'group_name'
p39368
Nsa(dp39369
S'description'
p39370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39371
sS'cpp_type'
p39372
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39373
sS'default'
p39374
g3
sS'name'
p39375
S'control_tags'
p39376
sS'required'
p39377
I00
sS'group_name'
p39378
S'Advanced'
p39379
sa(dp39380
S'description'
p39381
S'Set the enabled status of the MooseObject.\n'
p39382
sS'cpp_type'
p39383
S'bool'
p39384
sS'default'
p39385
S'1'
p39386
sS'name'
p39387
S'enable'
p39388
sS'required'
p39389
I00
sS'group_name'
p39390
S'Advanced'
p39391
sa(dp39392
S'description'
p39393
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39394
sS'cpp_type'
p39395
S'bool'
p39396
sS'default'
p39397
S'0'
p39398
sS'name'
p39399
S'ignore_uo_dependency'
p39400
sS'required'
p39401
I00
sS'group_name'
p39402
S'Advanced'
p39403
sa(dp39404
S'description'
p39405
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39406
sS'cpp_type'
p39407
S'double'
p39408
sS'default'
p39409
S'0'
p39410
sS'name'
p39411
S'int_width'
p39412
sS'required'
p39413
I00
sS'group_name'
p39414
Nsa(dp39415
S'description'
p39416
S'The variable value inside the superellipsoid\n'
p39417
sS'cpp_type'
p39418
S'double'
p39419
sS'default'
p39420
g3
sS'name'
p39421
S'invalue'
p39422
sS'required'
p39423
I01
sS'group_name'
p39424
Nsa(dp39425
S'description'
p39426
S'Exponent n of the superellipsoid\n'
p39427
sS'cpp_type'
p39428
S'double'
p39429
sS'default'
p39430
g3
sS'name'
p39431
S'n'
p39432
sS'required'
p39433
I01
sS'group_name'
p39434
Nsa(dp39435
S'description'
p39436
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p39437
sS'cpp_type'
p39438
S'double'
p39439
sS'default'
p39440
g3
sS'name'
p39441
S'nestedvalue'
p39442
sS'required'
p39443
I00
sS'group_name'
p39444
Nsa(dp39445
S'description'
p39446
S'The variable value outside the superellipsoid\n'
p39447
sS'cpp_type'
p39448
S'double'
p39449
sS'default'
p39450
g3
sS'name'
p39451
S'outvalue'
p39452
sS'required'
p39453
I01
sS'group_name'
p39454
Nsa(dp39455
S'description'
p39456
S'Seed value for the random number generator\n'
p39457
sS'cpp_type'
p39458
S'unsigned int'
p39459
sS'default'
p39460
S'12345'
p39461
sS'name'
p39462
S'rand_seed'
p39463
sS'required'
p39464
I00
sS'group_name'
p39465
Nsa(dp39466
S'description'
p39467
g3
sS'cpp_type'
p39468
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39469
sS'default'
p39470
S'SmoothSuperellipsoidIC'
p39471
sS'name'
p39472
S'type'
p39473
sS'required'
p39474
I00
sS'group_name'
p39475
Nsa(dp39476
S'description'
p39477
S'The variable this initial condition is supposed to provide values for.\n'
p39478
sS'cpp_type'
p39479
S'VariableName'
p39480
sS'default'
p39481
g3
sS'name'
p39482
S'variable'
p39483
sS'required'
p39484
I01
sS'group_name'
p39485
Nsa(dp39486
S'description'
p39487
S'The x coordinate of the superellipsoid center\n'
p39488
sS'cpp_type'
p39489
S'double'
p39490
sS'default'
p39491
g3
sS'name'
p39492
S'x1'
p39493
sS'required'
p39494
I01
sS'group_name'
p39495
Nsa(dp39496
S'description'
p39497
S'The y coordinate of the superellipsoid center\n'
p39498
sS'cpp_type'
p39499
S'double'
p39500
sS'default'
p39501
g3
sS'name'
p39502
S'y1'
p39503
sS'required'
p39504
I01
sS'group_name'
p39505
Nsa(dp39506
S'description'
p39507
S'The z coordinate of the superellipsoid center\n'
p39508
sS'cpp_type'
p39509
S'double'
p39510
sS'default'
p39511
S'0'
p39512
sS'name'
p39513
S'z1'
p39514
sS'required'
p39515
I00
sS'group_name'
p39516
Nsa(dp39517
S'description'
p39518
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p39519
sS'cpp_type'
p39520
S'bool'
p39521
sS'default'
p39522
S'0'
p39523
sS'name'
p39524
S'zero_gradient'
p39525
sS'required'
p39526
I00
sS'group_name'
p39527
NsasS'name'
p39528
S'/ICs/SmoothSuperellipsoidIC'
p39529
sa(dp39530
S'description'
p39531
S'Multiple smooth circles with manually specified radii and center points\n'
p39532
sS'subblocks'
p39533
NsS'parameters'
p39534
(lp39535
(dp39536
S'description'
p39537
S'in 3D, whether the objects are spheres or columns\n'
p39538
sS'cpp_type'
p39539
S'bool'
p39540
sS'default'
p39541
S'1'
p39542
sS'name'
p39543
S'3D_spheres'
p39544
sS'required'
p39545
I00
sS'group_name'
p39546
Nsa(dp39547
S'description'
p39548
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39549
sS'cpp_type'
p39550
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39551
sS'default'
p39552
g3
sS'name'
p39553
S'block'
p39554
sS'required'
p39555
I00
sS'group_name'
p39556
Nsa(dp39557
S'description'
p39558
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39559
sS'cpp_type'
p39560
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39561
sS'default'
p39562
g3
sS'name'
p39563
S'boundary'
p39564
sS'required'
p39565
I00
sS'group_name'
p39566
Nsa(dp39567
S'description'
p39568
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39569
sS'cpp_type'
p39570
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39571
sS'default'
p39572
g3
sS'name'
p39573
S'control_tags'
p39574
sS'required'
p39575
I00
sS'group_name'
p39576
S'Advanced'
p39577
sa(dp39578
S'description'
p39579
S'Set the enabled status of the MooseObject.\n'
p39580
sS'cpp_type'
p39581
S'bool'
p39582
sS'default'
p39583
S'1'
p39584
sS'name'
p39585
S'enable'
p39586
sS'required'
p39587
I00
sS'group_name'
p39588
S'Advanced'
p39589
sa(dp39590
S'description'
p39591
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39592
sS'cpp_type'
p39593
S'bool'
p39594
sS'default'
p39595
S'0'
p39596
sS'name'
p39597
S'ignore_uo_dependency'
p39598
sS'required'
p39599
I00
sS'group_name'
p39600
S'Advanced'
p39601
sa(dp39602
S'description'
p39603
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39604
sS'cpp_type'
p39605
S'double'
p39606
sS'default'
p39607
S'0'
p39608
sS'name'
p39609
S'int_width'
p39610
sS'required'
p39611
I00
sS'group_name'
p39612
Nsa(dp39613
S'description'
p39614
S'The variable value inside the circle\n'
p39615
sS'cpp_type'
p39616
S'double'
p39617
sS'default'
p39618
g3
sS'name'
p39619
S'invalue'
p39620
sS'required'
p39621
I01
sS'group_name'
p39622
Nsa(dp39623
S'description'
p39624
S'The variable value outside the circle\n'
p39625
sS'cpp_type'
p39626
S'double'
p39627
sS'default'
p39628
g3
sS'name'
p39629
S'outvalue'
p39630
sS'required'
p39631
I01
sS'group_name'
p39632
Nsa(dp39633
S'description'
p39634
S'The radius for each circle\n'
p39635
sS'cpp_type'
p39636
S'std::vector<double, std::allocator<double> >'
p39637
sS'default'
p39638
g3
sS'name'
p39639
S'radii'
p39640
sS'required'
p39641
I01
sS'group_name'
p39642
Nsa(dp39643
S'description'
p39644
S'Seed value for the random number generator\n'
p39645
sS'cpp_type'
p39646
S'unsigned int'
p39647
sS'default'
p39648
S'12345'
p39649
sS'name'
p39650
S'rand_seed'
p39651
sS'required'
p39652
I00
sS'group_name'
p39653
Nsa(dp39654
S'description'
p39655
g3
sS'cpp_type'
p39656
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39657
sS'default'
p39658
S'SpecifiedSmoothCircleIC'
p39659
sS'name'
p39660
S'type'
p39661
sS'required'
p39662
I00
sS'group_name'
p39663
Nsa(dp39664
S'description'
p39665
S'The variable this initial condition is supposed to provide values for.\n'
p39666
sS'cpp_type'
p39667
S'VariableName'
p39668
sS'default'
p39669
g3
sS'name'
p39670
S'variable'
p39671
sS'required'
p39672
I01
sS'group_name'
p39673
Nsa(dp39674
S'description'
p39675
S'The x-coordinate for each circle center\n'
p39676
sS'cpp_type'
p39677
S'std::vector<double, std::allocator<double> >'
p39678
sS'default'
p39679
g3
sS'name'
p39680
S'x_positions'
p39681
sS'required'
p39682
I01
sS'group_name'
p39683
Nsa(dp39684
S'description'
p39685
S'The y-coordinate for each circle center\n'
p39686
sS'cpp_type'
p39687
S'std::vector<double, std::allocator<double> >'
p39688
sS'default'
p39689
g3
sS'name'
p39690
S'y_positions'
p39691
sS'required'
p39692
I01
sS'group_name'
p39693
Nsa(dp39694
S'description'
p39695
S'The z-coordinate for each circle center\n'
p39696
sS'cpp_type'
p39697
S'std::vector<double, std::allocator<double> >'
p39698
sS'default'
p39699
g3
sS'name'
p39700
S'z_positions'
p39701
sS'required'
p39702
I01
sS'group_name'
p39703
Nsa(dp39704
S'description'
p39705
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p39706
sS'cpp_type'
p39707
S'bool'
p39708
sS'default'
p39709
S'0'
p39710
sS'name'
p39711
S'zero_gradient'
p39712
sS'required'
p39713
I00
sS'group_name'
p39714
NsasS'name'
p39715
S'/ICs/SpecifiedSmoothCircleIC'
p39716
sa(dp39717
S'description'
p39718
S'Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n'
p39719
sS'subblocks'
p39720
NsS'parameters'
p39721
(lp39722
(dp39723
S'description'
p39724
S'Semiaxis a for each superellipsoid\n'
p39725
sS'cpp_type'
p39726
S'std::vector<double, std::allocator<double> >'
p39727
sS'default'
p39728
g3
sS'name'
p39729
S'as'
p39730
sS'required'
p39731
I01
sS'group_name'
p39732
Nsa(dp39733
S'description'
p39734
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39735
sS'cpp_type'
p39736
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39737
sS'default'
p39738
g3
sS'name'
p39739
S'block'
p39740
sS'required'
p39741
I00
sS'group_name'
p39742
Nsa(dp39743
S'description'
p39744
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39745
sS'cpp_type'
p39746
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39747
sS'default'
p39748
g3
sS'name'
p39749
S'boundary'
p39750
sS'required'
p39751
I00
sS'group_name'
p39752
Nsa(dp39753
S'description'
p39754
S'Semiaxis b for each superellipsoid\n'
p39755
sS'cpp_type'
p39756
S'std::vector<double, std::allocator<double> >'
p39757
sS'default'
p39758
g3
sS'name'
p39759
S'bs'
p39760
sS'required'
p39761
I01
sS'group_name'
p39762
Nsa(dp39763
S'description'
p39764
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39765
sS'cpp_type'
p39766
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39767
sS'default'
p39768
g3
sS'name'
p39769
S'control_tags'
p39770
sS'required'
p39771
I00
sS'group_name'
p39772
S'Advanced'
p39773
sa(dp39774
S'description'
p39775
S'Semiaxis c for each superellipsoid\n'
p39776
sS'cpp_type'
p39777
S'std::vector<double, std::allocator<double> >'
p39778
sS'default'
p39779
g3
sS'name'
p39780
S'cs'
p39781
sS'required'
p39782
I01
sS'group_name'
p39783
Nsa(dp39784
S'description'
p39785
S'Set the enabled status of the MooseObject.\n'
p39786
sS'cpp_type'
p39787
S'bool'
p39788
sS'default'
p39789
S'1'
p39790
sS'name'
p39791
S'enable'
p39792
sS'required'
p39793
I00
sS'group_name'
p39794
S'Advanced'
p39795
sa(dp39796
S'description'
p39797
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39798
sS'cpp_type'
p39799
S'bool'
p39800
sS'default'
p39801
S'0'
p39802
sS'name'
p39803
S'ignore_uo_dependency'
p39804
sS'required'
p39805
I00
sS'group_name'
p39806
S'Advanced'
p39807
sa(dp39808
S'description'
p39809
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39810
sS'cpp_type'
p39811
S'double'
p39812
sS'default'
p39813
S'0'
p39814
sS'name'
p39815
S'int_width'
p39816
sS'required'
p39817
I00
sS'group_name'
p39818
Nsa(dp39819
S'description'
p39820
S'The variable value inside the superellipsoid\n'
p39821
sS'cpp_type'
p39822
S'double'
p39823
sS'default'
p39824
g3
sS'name'
p39825
S'invalue'
p39826
sS'required'
p39827
I01
sS'group_name'
p39828
Nsa(dp39829
S'description'
p39830
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p39831
sS'cpp_type'
p39832
S'double'
p39833
sS'default'
p39834
g3
sS'name'
p39835
S'nestedvalue'
p39836
sS'required'
p39837
I00
sS'group_name'
p39838
Nsa(dp39839
S'description'
p39840
S'Exponent n for each superellipsoid\n'
p39841
sS'cpp_type'
p39842
S'std::vector<double, std::allocator<double> >'
p39843
sS'default'
p39844
g3
sS'name'
p39845
S'ns'
p39846
sS'required'
p39847
I01
sS'group_name'
p39848
Nsa(dp39849
S'description'
p39850
S'The variable value outside the superellipsoid\n'
p39851
sS'cpp_type'
p39852
S'double'
p39853
sS'default'
p39854
g3
sS'name'
p39855
S'outvalue'
p39856
sS'required'
p39857
I01
sS'group_name'
p39858
Nsa(dp39859
S'description'
p39860
S'Seed value for the random number generator\n'
p39861
sS'cpp_type'
p39862
S'unsigned int'
p39863
sS'default'
p39864
S'12345'
p39865
sS'name'
p39866
S'rand_seed'
p39867
sS'required'
p39868
I00
sS'group_name'
p39869
Nsa(dp39870
S'description'
p39871
g3
sS'cpp_type'
p39872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39873
sS'default'
p39874
S'SpecifiedSmoothSuperellipsoidIC'
p39875
sS'name'
p39876
S'type'
p39877
sS'required'
p39878
I00
sS'group_name'
p39879
Nsa(dp39880
S'description'
p39881
S'The variable this initial condition is supposed to provide values for.\n'
p39882
sS'cpp_type'
p39883
S'VariableName'
p39884
sS'default'
p39885
g3
sS'name'
p39886
S'variable'
p39887
sS'required'
p39888
I01
sS'group_name'
p39889
Nsa(dp39890
S'description'
p39891
S'The x-coordinate for each superellipsoid center\n'
p39892
sS'cpp_type'
p39893
S'std::vector<double, std::allocator<double> >'
p39894
sS'default'
p39895
g3
sS'name'
p39896
S'x_positions'
p39897
sS'required'
p39898
I01
sS'group_name'
p39899
Nsa(dp39900
S'description'
p39901
S'The y-coordinate for each superellipsoid center\n'
p39902
sS'cpp_type'
p39903
S'std::vector<double, std::allocator<double> >'
p39904
sS'default'
p39905
g3
sS'name'
p39906
S'y_positions'
p39907
sS'required'
p39908
I01
sS'group_name'
p39909
Nsa(dp39910
S'description'
p39911
S'The z-coordinate for each superellipsoid center\n'
p39912
sS'cpp_type'
p39913
S'std::vector<double, std::allocator<double> >'
p39914
sS'default'
p39915
g3
sS'name'
p39916
S'z_positions'
p39917
sS'required'
p39918
I01
sS'group_name'
p39919
Nsa(dp39920
S'description'
p39921
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p39922
sS'cpp_type'
p39923
S'bool'
p39924
sS'default'
p39925
S'0'
p39926
sS'name'
p39927
S'zero_gradient'
p39928
sS'required'
p39929
I00
sS'group_name'
p39930
NsasS'name'
p39931
S'/ICs/SpecifiedSmoothSuperellipsoidIC'
p39932
sa(dp39933
S'description'
p39934
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p39935
sS'subblocks'
p39936
NsS'parameters'
p39937
(lp39938
(dp39939
S'description'
p39940
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39941
sS'cpp_type'
p39942
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39943
sS'default'
p39944
g3
sS'name'
p39945
S'block'
p39946
sS'required'
p39947
I00
sS'group_name'
p39948
Nsa(dp39949
S'description'
p39950
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39951
sS'cpp_type'
p39952
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39953
sS'default'
p39954
g3
sS'name'
p39955
S'boundary'
p39956
sS'required'
p39957
I00
sS'group_name'
p39958
Nsa(dp39959
S'description'
p39960
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39961
sS'cpp_type'
p39962
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39963
sS'default'
p39964
g3
sS'name'
p39965
S'control_tags'
p39966
sS'required'
p39967
I00
sS'group_name'
p39968
S'Advanced'
p39969
sa(dp39970
S'description'
p39971
S'Set the enabled status of the MooseObject.\n'
p39972
sS'cpp_type'
p39973
S'bool'
p39974
sS'default'
p39975
S'1'
p39976
sS'name'
p39977
S'enable'
p39978
sS'required'
p39979
I00
sS'group_name'
p39980
S'Advanced'
p39981
sa(dp39982
S'description'
p39983
S'The z coordinate of the circle center\n'
p39984
sS'cpp_type'
p39985
S'double'
p39986
sS'default'
p39987
g3
sS'name'
p39988
S'height'
p39989
sS'required'
p39990
I01
sS'group_name'
p39991
Nsa(dp39992
S'description'
p39993
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39994
sS'cpp_type'
p39995
S'bool'
p39996
sS'default'
p39997
S'0'
p39998
sS'name'
p39999
S'ignore_uo_dependency'
p40000
sS'required'
p40001
I00
sS'group_name'
p40002
S'Advanced'
p40003
sa(dp40004
S'description'
p40005
S'The variable value inside the circle\n'
p40006
sS'cpp_type'
p40007
S'double'
p40008
sS'default'
p40009
g3
sS'name'
p40010
S'invalue'
p40011
sS'required'
p40012
I01
sS'group_name'
p40013
Nsa(dp40014
S'description'
p40015
S'The variable value outside the circle\n'
p40016
sS'cpp_type'
p40017
S'double'
p40018
sS'default'
p40019
g3
sS'name'
p40020
S'outvalue'
p40021
sS'required'
p40022
I01
sS'group_name'
p40023
Nsa(dp40024
S'description'
p40025
g3
sS'cpp_type'
p40026
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40027
sS'default'
p40028
S'ThumbIC'
p40029
sS'name'
p40030
S'type'
p40031
sS'required'
p40032
I00
sS'group_name'
p40033
Nsa(dp40034
S'description'
p40035
S'The variable this initial condition is supposed to provide values for.\n'
p40036
sS'cpp_type'
p40037
S'VariableName'
p40038
sS'default'
p40039
g3
sS'name'
p40040
S'variable'
p40041
sS'required'
p40042
I01
sS'group_name'
p40043
Nsa(dp40044
S'description'
p40045
S'The y coordinate of the circle center\n'
p40046
sS'cpp_type'
p40047
S'double'
p40048
sS'default'
p40049
g3
sS'name'
p40050
S'width'
p40051
sS'required'
p40052
I01
sS'group_name'
p40053
Nsa(dp40054
S'description'
p40055
S'The x coordinate of the circle center\n'
p40056
sS'cpp_type'
p40057
S'double'
p40058
sS'default'
p40059
g3
sS'name'
p40060
S'xcoord'
p40061
sS'required'
p40062
I01
sS'group_name'
p40063
NsasS'name'
p40064
S'/ICs/ThumbIC'
p40065
sa(dp40066
S'description'
p40067
S'Tricrystal with two circles/bubbles\n'
p40068
sS'subblocks'
p40069
NsS'parameters'
p40070
(lp40071
(dp40072
S'description'
p40073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40074
sS'cpp_type'
p40075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40076
sS'default'
p40077
g3
sS'name'
p40078
S'block'
p40079
sS'required'
p40080
I00
sS'group_name'
p40081
Nsa(dp40082
S'description'
p40083
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40084
sS'cpp_type'
p40085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40086
sS'default'
p40087
g3
sS'name'
p40088
S'boundary'
p40089
sS'required'
p40090
I00
sS'group_name'
p40091
Nsa(dp40092
S'description'
p40093
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40094
sS'cpp_type'
p40095
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40096
sS'default'
p40097
g3
sS'name'
p40098
S'control_tags'
p40099
sS'required'
p40100
I00
sS'group_name'
p40101
S'Advanced'
p40102
sa(dp40103
S'description'
p40104
S'Set the enabled status of the MooseObject.\n'
p40105
sS'cpp_type'
p40106
S'bool'
p40107
sS'default'
p40108
S'1'
p40109
sS'name'
p40110
S'enable'
p40111
sS'required'
p40112
I00
sS'group_name'
p40113
S'Advanced'
p40114
sa(dp40115
S'description'
p40116
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40117
sS'cpp_type'
p40118
S'bool'
p40119
sS'default'
p40120
S'0'
p40121
sS'name'
p40122
S'ignore_uo_dependency'
p40123
sS'required'
p40124
I00
sS'group_name'
p40125
S'Advanced'
p40126
sa(dp40127
S'description'
p40128
S'Index for the current grain order parameter\n'
p40129
sS'cpp_type'
p40130
S'unsigned int'
p40131
sS'default'
p40132
g3
sS'name'
p40133
S'op_index'
p40134
sS'required'
p40135
I01
sS'group_name'
p40136
Nsa(dp40137
S'description'
p40138
S'Number of grain order parameters\n'
p40139
sS'cpp_type'
p40140
S'unsigned int'
p40141
sS'default'
p40142
g3
sS'name'
p40143
S'op_num'
p40144
sS'required'
p40145
I01
sS'group_name'
p40146
Nsa(dp40147
S'description'
p40148
g3
sS'cpp_type'
p40149
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40150
sS'default'
p40151
S'Tricrystal2CircleGrainsIC'
p40152
sS'name'
p40153
S'type'
p40154
sS'required'
p40155
I00
sS'group_name'
p40156
Nsa(dp40157
S'description'
p40158
S'The variable this initial condition is supposed to provide values for.\n'
p40159
sS'cpp_type'
p40160
S'VariableName'
p40161
sS'default'
p40162
g3
sS'name'
p40163
S'variable'
p40164
sS'required'
p40165
I01
sS'group_name'
p40166
NsasS'name'
p40167
S'/ICs/Tricrystal2CircleGrainsIC'
p40168
sa(dp40169
S'description'
p40170
S'Tricrystal with a triple junction\n'
p40171
sS'subblocks'
p40172
NsS'parameters'
p40173
(lp40174
(dp40175
S'description'
p40176
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40177
sS'cpp_type'
p40178
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40179
sS'default'
p40180
g3
sS'name'
p40181
S'block'
p40182
sS'required'
p40183
I00
sS'group_name'
p40184
Nsa(dp40185
S'description'
p40186
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40187
sS'cpp_type'
p40188
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40189
sS'default'
p40190
g3
sS'name'
p40191
S'boundary'
p40192
sS'required'
p40193
I00
sS'group_name'
p40194
Nsa(dp40195
S'description'
p40196
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40197
sS'cpp_type'
p40198
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40199
sS'default'
p40200
g3
sS'name'
p40201
S'control_tags'
p40202
sS'required'
p40203
I00
sS'group_name'
p40204
S'Advanced'
p40205
sa(dp40206
S'description'
p40207
S'Set the enabled status of the MooseObject.\n'
p40208
sS'cpp_type'
p40209
S'bool'
p40210
sS'default'
p40211
S'1'
p40212
sS'name'
p40213
S'enable'
p40214
sS'required'
p40215
I00
sS'group_name'
p40216
S'Advanced'
p40217
sa(dp40218
S'description'
p40219
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40220
sS'cpp_type'
p40221
S'bool'
p40222
sS'default'
p40223
S'0'
p40224
sS'name'
p40225
S'ignore_uo_dependency'
p40226
sS'required'
p40227
I00
sS'group_name'
p40228
S'Advanced'
p40229
sa(dp40230
S'description'
p40231
S'The point where the triple junction is located. Default is the center of the mesh\n'
p40232
sS'cpp_type'
p40233
S'libMesh::Point'
p40234
sS'default'
p40235
g3
sS'name'
p40236
S'junction'
p40237
sS'required'
p40238
I00
sS'group_name'
p40239
Nsa(dp40240
S'description'
p40241
S'Index for the current grain order parameter\n'
p40242
sS'cpp_type'
p40243
S'unsigned int'
p40244
sS'default'
p40245
g3
sS'name'
p40246
S'op_index'
p40247
sS'required'
p40248
I01
sS'group_name'
p40249
Nsa(dp40250
S'description'
p40251
S'Number of grain order parameters\n'
p40252
sS'cpp_type'
p40253
S'unsigned int'
p40254
sS'default'
p40255
g3
sS'name'
p40256
S'op_num'
p40257
sS'required'
p40258
I01
sS'group_name'
p40259
Nsa(dp40260
S'description'
p40261
S'Angle of first grain at triple junction in degrees\n'
p40262
sS'cpp_type'
p40263
S'double'
p40264
sS'default'
p40265
S'135'
p40266
sS'name'
p40267
S'theta1'
p40268
sS'required'
p40269
I00
sS'group_name'
p40270
Nsa(dp40271
S'description'
p40272
S'Angle of second grain at triple junction in degrees\n'
p40273
sS'cpp_type'
p40274
S'double'
p40275
sS'default'
p40276
S'135'
p40277
sS'name'
p40278
S'theta2'
p40279
sS'required'
p40280
I00
sS'group_name'
p40281
Nsa(dp40282
S'description'
p40283
g3
sS'cpp_type'
p40284
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40285
sS'default'
p40286
S'TricrystalTripleJunctionIC'
p40287
sS'name'
p40288
S'type'
p40289
sS'required'
p40290
I00
sS'group_name'
p40291
Nsa(dp40292
S'description'
p40293
S'The variable this initial condition is supposed to provide values for.\n'
p40294
sS'cpp_type'
p40295
S'VariableName'
p40296
sS'default'
p40297
g3
sS'name'
p40298
S'variable'
p40299
sS'required'
p40300
I01
sS'group_name'
p40301
NsasS'name'
p40302
S'/ICs/TricrystalTripleJunctionIC'
p40303
sasS'parameters'
p40304
NsS'name'
p40305
S'/ICs'
p40306
sa(dp40307
S'description'
p40308
g3
sS'subblocks'
p40309
(lp40310
(dp40311
S'description'
p40312
g3
sS'subblocks'
p40313
NsS'parameters'
p40314
(lp40315
(dp40316
S'description'
p40317
S'A string representing the Moose Object that will be built by this Action\n'
p40318
sS'cpp_type'
p40319
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40320
sS'default'
p40321
g3
sS'name'
p40322
S'type'
p40323
sS'required'
p40324
I01
sS'group_name'
p40325
NsasS'name'
p40326
S'/InterfaceKernels/*'
p40327
sa(dp40328
S'description'
p40329
S'Enforce componentwise gradient continuity between two different variables across a subdomain boundary using a Lagrange multiplier\n'
p40330
sS'subblocks'
p40331
NsS'parameters'
p40332
(lp40333
(dp40334
S'description'
p40335
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40336
sS'cpp_type'
p40337
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40338
sS'default'
p40339
g3
sS'name'
p40340
S'block'
p40341
sS'required'
p40342
I00
sS'group_name'
p40343
Nsa(dp40344
S'description'
p40345
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40346
sS'cpp_type'
p40347
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40348
sS'default'
p40349
g3
sS'name'
p40350
S'boundary'
p40351
sS'required'
p40352
I00
sS'group_name'
p40353
Nsa(dp40354
S'description'
p40355
S'Gradient component to constrain\n'
p40356
sS'cpp_type'
p40357
S'unsigned int'
p40358
sS'default'
p40359
g3
sS'name'
p40360
S'component'
p40361
sS'required'
p40362
I01
sS'group_name'
p40363
Nsa(dp40364
S'description'
p40365
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40366
sS'cpp_type'
p40367
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40368
sS'default'
p40369
g3
sS'name'
p40370
S'control_tags'
p40371
sS'required'
p40372
I00
sS'group_name'
p40373
S'Advanced'
p40374
sa(dp40375
S'description'
p40376
S'Set the enabled status of the MooseObject.\n'
p40377
sS'cpp_type'
p40378
S'bool'
p40379
sS'default'
p40380
S'1'
p40381
sS'name'
p40382
S'enable'
p40383
sS'required'
p40384
I00
sS'group_name'
p40385
S'Advanced'
p40386
sa(dp40387
S'description'
p40388
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40389
sS'cpp_type'
p40390
S'bool'
p40391
sS'default'
p40392
S'1'
p40393
sS'name'
p40394
S'implicit'
p40395
sS'required'
p40396
I00
sS'group_name'
p40397
S'Advanced'
p40398
sa(dp40399
S'description'
p40400
S'The gradient constrained variable on this side of the interface.\n'
p40401
sS'cpp_type'
p40402
S'std::vector<VariableName>'
p40403
sS'default'
p40404
g3
sS'name'
p40405
S'lambda'
p40406
sS'required'
p40407
I00
sS'group_name'
p40408
Nsa(dp40409
S'description'
p40410
S'The variable on the other side of the interface.\n'
p40411
sS'cpp_type'
p40412
S'std::vector<VariableName>'
p40413
sS'default'
p40414
g3
sS'name'
p40415
S'neighbor_var'
p40416
sS'required'
p40417
I01
sS'group_name'
p40418
Nsa(dp40419
S'description'
p40420
g3
sS'cpp_type'
p40421
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40422
sS'default'
p40423
S'EqualGradientLagrangeInterface'
p40424
sS'name'
p40425
S'type'
p40426
sS'required'
p40427
I00
sS'group_name'
p40428
Nsa(dp40429
S'description'
p40430
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40431
sS'cpp_type'
p40432
S'bool'
p40433
sS'default'
p40434
S'0'
p40435
sS'name'
p40436
S'use_displaced_mesh'
p40437
sS'required'
p40438
I00
sS'group_name'
p40439
S'Advanced'
p40440
sa(dp40441
S'description'
p40442
S'The name of the variable that this boundary condition applies to\n'
p40443
sS'cpp_type'
p40444
S'NonlinearVariableName'
p40445
sS'default'
p40446
g3
sS'name'
p40447
S'variable'
p40448
sS'required'
p40449
I01
sS'group_name'
p40450
NsasS'name'
p40451
S'/InterfaceKernels/EqualGradientLagrangeInterface'
p40452
sa(dp40453
S'description'
p40454
S'Lagrange multiplier kernel for EqualGradientLagrangeInterface.\n'
p40455
sS'subblocks'
p40456
NsS'parameters'
p40457
(lp40458
(dp40459
S'description'
p40460
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40461
sS'cpp_type'
p40462
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40463
sS'default'
p40464
g3
sS'name'
p40465
S'block'
p40466
sS'required'
p40467
I00
sS'group_name'
p40468
Nsa(dp40469
S'description'
p40470
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40471
sS'cpp_type'
p40472
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40473
sS'default'
p40474
g3
sS'name'
p40475
S'boundary'
p40476
sS'required'
p40477
I00
sS'group_name'
p40478
Nsa(dp40479
S'description'
p40480
S'Gradient component to constrain\n'
p40481
sS'cpp_type'
p40482
S'unsigned int'
p40483
sS'default'
p40484
g3
sS'name'
p40485
S'component'
p40486
sS'required'
p40487
I01
sS'group_name'
p40488
Nsa(dp40489
S'description'
p40490
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40491
sS'cpp_type'
p40492
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40493
sS'default'
p40494
g3
sS'name'
p40495
S'control_tags'
p40496
sS'required'
p40497
I00
sS'group_name'
p40498
S'Advanced'
p40499
sa(dp40500
S'description'
p40501
S'The gradient constrained variable on this side of the interface.\n'
p40502
sS'cpp_type'
p40503
S'std::vector<VariableName>'
p40504
sS'default'
p40505
g3
sS'name'
p40506
S'element_var'
p40507
sS'required'
p40508
I00
sS'group_name'
p40509
Nsa(dp40510
S'description'
p40511
S'Set the enabled status of the MooseObject.\n'
p40512
sS'cpp_type'
p40513
S'bool'
p40514
sS'default'
p40515
S'1'
p40516
sS'name'
p40517
S'enable'
p40518
sS'required'
p40519
I00
sS'group_name'
p40520
S'Advanced'
p40521
sa(dp40522
S'description'
p40523
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40524
sS'cpp_type'
p40525
S'bool'
p40526
sS'default'
p40527
S'1'
p40528
sS'name'
p40529
S'implicit'
p40530
sS'required'
p40531
I00
sS'group_name'
p40532
S'Advanced'
p40533
sa(dp40534
S'description'
p40535
S'Compensate on diagonal Jacobian fill term when using a NullKernel on the Lagrange multiplier variable\n'
p40536
sS'cpp_type'
p40537
S'double'
p40538
sS'default'
p40539
S'0'
p40540
sS'name'
p40541
S'jacobian_fill'
p40542
sS'required'
p40543
I00
sS'group_name'
p40544
Nsa(dp40545
S'description'
p40546
S'The variable on the other side of the interface.\n'
p40547
sS'cpp_type'
p40548
S'std::vector<VariableName>'
p40549
sS'default'
p40550
g3
sS'name'
p40551
S'neighbor_var'
p40552
sS'required'
p40553
I01
sS'group_name'
p40554
Nsa(dp40555
S'description'
p40556
g3
sS'cpp_type'
p40557
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40558
sS'default'
p40559
S'EqualGradientLagrangeMultiplier'
p40560
sS'name'
p40561
S'type'
p40562
sS'required'
p40563
I00
sS'group_name'
p40564
Nsa(dp40565
S'description'
p40566
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40567
sS'cpp_type'
p40568
S'bool'
p40569
sS'default'
p40570
S'0'
p40571
sS'name'
p40572
S'use_displaced_mesh'
p40573
sS'required'
p40574
I00
sS'group_name'
p40575
S'Advanced'
p40576
sa(dp40577
S'description'
p40578
S'The name of the variable that this boundary condition applies to\n'
p40579
sS'cpp_type'
p40580
S'NonlinearVariableName'
p40581
sS'default'
p40582
g3
sS'name'
p40583
S'variable'
p40584
sS'required'
p40585
I01
sS'group_name'
p40586
NsasS'name'
p40587
S'/InterfaceKernels/EqualGradientLagrangeMultiplier'
p40588
sa(dp40589
S'description'
p40590
S'Add weak form surface terms of the Diffusion equation for two different variables across a subdomain boundary\n'
p40591
sS'subblocks'
p40592
NsS'parameters'
p40593
(lp40594
(dp40595
S'description'
p40596
S'Diffusion coefficient\n'
p40597
sS'cpp_type'
p40598
S'double'
p40599
sS'default'
p40600
S'1'
p40601
sS'name'
p40602
S'D'
p40603
sS'required'
p40604
I00
sS'group_name'
p40605
Nsa(dp40606
S'description'
p40607
S'Neighbor variable diffusion coefficient\n'
p40608
sS'cpp_type'
p40609
S'double'
p40610
sS'default'
p40611
S'1'
p40612
sS'name'
p40613
S'D_neighbor'
p40614
sS'required'
p40615
I00
sS'group_name'
p40616
Nsa(dp40617
S'description'
p40618
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40619
sS'cpp_type'
p40620
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40621
sS'default'
p40622
g3
sS'name'
p40623
S'block'
p40624
sS'required'
p40625
I00
sS'group_name'
p40626
Nsa(dp40627
S'description'
p40628
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40629
sS'cpp_type'
p40630
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40631
sS'default'
p40632
g3
sS'name'
p40633
S'boundary'
p40634
sS'required'
p40635
I00
sS'group_name'
p40636
Nsa(dp40637
S'description'
p40638
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40639
sS'cpp_type'
p40640
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40641
sS'default'
p40642
g3
sS'name'
p40643
S'control_tags'
p40644
sS'required'
p40645
I00
sS'group_name'
p40646
S'Advanced'
p40647
sa(dp40648
S'description'
p40649
S'Set the enabled status of the MooseObject.\n'
p40650
sS'cpp_type'
p40651
S'bool'
p40652
sS'default'
p40653
S'1'
p40654
sS'name'
p40655
S'enable'
p40656
sS'required'
p40657
I00
sS'group_name'
p40658
S'Advanced'
p40659
sa(dp40660
S'description'
p40661
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40662
sS'cpp_type'
p40663
S'bool'
p40664
sS'default'
p40665
S'1'
p40666
sS'name'
p40667
S'implicit'
p40668
sS'required'
p40669
I00
sS'group_name'
p40670
S'Advanced'
p40671
sa(dp40672
S'description'
p40673
S'The variable on the other side of the interface.\n'
p40674
sS'cpp_type'
p40675
S'std::vector<VariableName>'
p40676
sS'default'
p40677
g3
sS'name'
p40678
S'neighbor_var'
p40679
sS'required'
p40680
I01
sS'group_name'
p40681
Nsa(dp40682
S'description'
p40683
g3
sS'cpp_type'
p40684
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40685
sS'default'
p40686
S'InterfaceDiffusionBoundaryTerm'
p40687
sS'name'
p40688
S'type'
p40689
sS'required'
p40690
I00
sS'group_name'
p40691
Nsa(dp40692
S'description'
p40693
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40694
sS'cpp_type'
p40695
S'bool'
p40696
sS'default'
p40697
S'0'
p40698
sS'name'
p40699
S'use_displaced_mesh'
p40700
sS'required'
p40701
I00
sS'group_name'
p40702
S'Advanced'
p40703
sa(dp40704
S'description'
p40705
S'The name of the variable that this boundary condition applies to\n'
p40706
sS'cpp_type'
p40707
S'NonlinearVariableName'
p40708
sS'default'
p40709
g3
sS'name'
p40710
S'variable'
p40711
sS'required'
p40712
I01
sS'group_name'
p40713
NsasS'name'
p40714
S'/InterfaceKernels/InterfaceDiffusionBoundaryTerm'
p40715
sa(dp40716
S'description'
p40717
S'Enforce flux continuity between two different variables across a subdomain boundary\n'
p40718
sS'subblocks'
p40719
NsS'parameters'
p40720
(lp40721
(dp40722
S'description'
p40723
S'Diffusion coefficient\n'
p40724
sS'cpp_type'
p40725
S'double'
p40726
sS'default'
p40727
S'1'
p40728
sS'name'
p40729
S'D'
p40730
sS'required'
p40731
I00
sS'group_name'
p40732
Nsa(dp40733
S'description'
p40734
S'Neighbor variable diffusion coefficient\n'
p40735
sS'cpp_type'
p40736
S'double'
p40737
sS'default'
p40738
S'1'
p40739
sS'name'
p40740
S'D_neighbor'
p40741
sS'required'
p40742
I00
sS'group_name'
p40743
Nsa(dp40744
S'description'
p40745
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40746
sS'cpp_type'
p40747
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40748
sS'default'
p40749
g3
sS'name'
p40750
S'block'
p40751
sS'required'
p40752
I00
sS'group_name'
p40753
Nsa(dp40754
S'description'
p40755
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40756
sS'cpp_type'
p40757
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40758
sS'default'
p40759
g3
sS'name'
p40760
S'boundary'
p40761
sS'required'
p40762
I00
sS'group_name'
p40763
Nsa(dp40764
S'description'
p40765
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40766
sS'cpp_type'
p40767
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40768
sS'default'
p40769
g3
sS'name'
p40770
S'control_tags'
p40771
sS'required'
p40772
I00
sS'group_name'
p40773
S'Advanced'
p40774
sa(dp40775
S'description'
p40776
S'Set the enabled status of the MooseObject.\n'
p40777
sS'cpp_type'
p40778
S'bool'
p40779
sS'default'
p40780
S'1'
p40781
sS'name'
p40782
S'enable'
p40783
sS'required'
p40784
I00
sS'group_name'
p40785
S'Advanced'
p40786
sa(dp40787
S'description'
p40788
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40789
sS'cpp_type'
p40790
S'bool'
p40791
sS'default'
p40792
S'1'
p40793
sS'name'
p40794
S'implicit'
p40795
sS'required'
p40796
I00
sS'group_name'
p40797
S'Advanced'
p40798
sa(dp40799
S'description'
p40800
S'The variable on the other side of the interface.\n'
p40801
sS'cpp_type'
p40802
S'std::vector<VariableName>'
p40803
sS'default'
p40804
g3
sS'name'
p40805
S'neighbor_var'
p40806
sS'required'
p40807
I01
sS'group_name'
p40808
Nsa(dp40809
S'description'
p40810
g3
sS'cpp_type'
p40811
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40812
sS'default'
p40813
S'InterfaceDiffusionFluxMatch'
p40814
sS'name'
p40815
S'type'
p40816
sS'required'
p40817
I00
sS'group_name'
p40818
Nsa(dp40819
S'description'
p40820
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40821
sS'cpp_type'
p40822
S'bool'
p40823
sS'default'
p40824
S'0'
p40825
sS'name'
p40826
S'use_displaced_mesh'
p40827
sS'required'
p40828
I00
sS'group_name'
p40829
S'Advanced'
p40830
sa(dp40831
S'description'
p40832
S'The name of the variable that this boundary condition applies to\n'
p40833
sS'cpp_type'
p40834
S'NonlinearVariableName'
p40835
sS'default'
p40836
g3
sS'name'
p40837
S'variable'
p40838
sS'required'
p40839
I01
sS'group_name'
p40840
NsasS'name'
p40841
S'/InterfaceKernels/InterfaceDiffusionFluxMatch'
p40842
sasS'parameters'
p40843
NsS'name'
p40844
S'/InterfaceKernels'
p40845
sa(dp40846
S'description'
p40847
g3
sS'subblocks'
p40848
(lp40849
(dp40850
S'description'
p40851
g3
sS'subblocks'
p40852
NsS'parameters'
p40853
(lp40854
(dp40855
S'description'
p40856
S'A string representing the Moose Object that will be built by this Action\n'
p40857
sS'cpp_type'
p40858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40859
sS'default'
p40860
g3
sS'name'
p40861
S'type'
p40862
sS'required'
p40863
I01
sS'group_name'
p40864
NsasS'name'
p40865
S'/Kernels/*'
p40866
sa(dp40867
S'description'
p40868
S'Grain-Boundary model concentration dependent residual\n'
p40869
sS'subblocks'
p40870
NsS'parameters'
p40871
(lp40872
(dp40873
S'description'
p40874
S'Vector of arguments of the mobility\n'
p40875
sS'cpp_type'
p40876
S'std::vector<VariableName>'
p40877
sS'default'
p40878
g3
sS'name'
p40879
S'args'
p40880
sS'required'
p40881
I00
sS'group_name'
p40882
Nsa(dp40883
S'description'
p40884
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40885
sS'cpp_type'
p40886
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40887
sS'default'
p40888
g3
sS'name'
p40889
S'block'
p40890
sS'required'
p40891
I00
sS'group_name'
p40892
Nsa(dp40893
S'description'
p40894
S'Other species concentration\n'
p40895
sS'cpp_type'
p40896
S'std::vector<VariableName>'
p40897
sS'default'
p40898
g3
sS'name'
p40899
S'c'
p40900
sS'required'
p40901
I01
sS'group_name'
p40902
Nsa(dp40903
S'description'
p40904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40905
sS'cpp_type'
p40906
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40907
sS'default'
p40908
g3
sS'name'
p40909
S'control_tags'
p40910
sS'required'
p40911
I00
sS'group_name'
p40912
S'Advanced'
p40913
sa(dp40914
S'description'
p40915
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p40916
sS'cpp_type'
p40917
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p40918
sS'default'
p40919
g3
sS'name'
p40920
S'diag_save_in'
p40921
sS'required'
p40922
I00
sS'group_name'
p40923
S'Advanced'
p40924
sa(dp40925
S'description'
p40926
S'Whether or not this kernel will be used as an eigen kernel\n'
p40927
sS'cpp_type'
p40928
S'bool'
p40929
sS'default'
p40930
S'0'
p40931
sS'name'
p40932
S'eigen_kernel'
p40933
sS'required'
p40934
I00
sS'group_name'
p40935
Nsa(dp40936
S'description'
p40937
S'Ratio of surface energy to GB energy\n'
p40938
sS'cpp_type'
p40939
S'double'
p40940
sS'default'
p40941
S'1'
p40942
sS'name'
p40943
S'en_ratio'
p40944
sS'required'
p40945
I00
sS'group_name'
p40946
Nsa(dp40947
S'description'
p40948
S'Set the enabled status of the MooseObject.\n'
p40949
sS'cpp_type'
p40950
S'bool'
p40951
sS'default'
p40952
S'1'
p40953
sS'name'
p40954
S'enable'
p40955
sS'required'
p40956
I00
sS'group_name'
p40957
S'Advanced'
p40958
sa(dp40959
S'description'
p40960
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40961
sS'cpp_type'
p40962
S'bool'
p40963
sS'default'
p40964
S'1'
p40965
sS'name'
p40966
S'implicit'
p40967
sS'required'
p40968
I00
sS'group_name'
p40969
S'Advanced'
p40970
sa(dp40971
S'description'
p40972
S'The mobility used with the kernel\n'
p40973
sS'cpp_type'
p40974
S'MaterialPropertyName'
p40975
sS'default'
p40976
S'L'
p40977
sS'name'
p40978
S'mob_name'
p40979
sS'required'
p40980
I00
sS'group_name'
p40981
Nsa(dp40982
S'description'
p40983
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p40984
sS'cpp_type'
p40985
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p40986
sS'default'
p40987
g3
sS'name'
p40988
S'save_in'
p40989
sS'required'
p40990
I00
sS'group_name'
p40991
S'Advanced'
p40992
sa(dp40993
S'description'
p40994
S'The seed for the master random number generator\n'
p40995
sS'cpp_type'
p40996
S'unsigned int'
p40997
sS'default'
p40998
S'0'
p40999
sS'name'
p41000
S'seed'
p41001
sS'required'
p41002
I00
sS'group_name'
p41003
S'Advanced'
p41004
sa(dp41005
S'description'
p41006
g3
sS'cpp_type'
p41007
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41008
sS'default'
p41009
S'ACGBPoly'
p41010
sS'name'
p41011
S'type'
p41012
sS'required'
p41013
I00
sS'group_name'
p41014
Nsa(dp41015
S'description'
p41016
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41017
sS'cpp_type'
p41018
S'bool'
p41019
sS'default'
p41020
S'0'
p41021
sS'name'
p41022
S'use_displaced_mesh'
p41023
sS'required'
p41024
I00
sS'group_name'
p41025
S'Advanced'
p41026
sa(dp41027
S'description'
p41028
S'The name of the variable that this Kernel operates on\n'
p41029
sS'cpp_type'
p41030
S'NonlinearVariableName'
p41031
sS'default'
p41032
g3
sS'name'
p41033
S'variable'
p41034
sS'required'
p41035
I01
sS'group_name'
p41036
NsasS'name'
p41037
S'/Kernels/ACGBPoly'
p41038
sa(dp41039
S'description'
p41040
S'Adds elastic energy contribution to the Allen-Cahn equation\n'
p41041
sS'subblocks'
p41042
NsS'parameters'
p41043
(lp41044
(dp41045
S'description'
p41046
S'The elastic tensor derivative for the specific order parameter\n'
p41047
sS'cpp_type'
p41048
S'MaterialPropertyName'
p41049
sS'default'
p41050
g3
sS'name'
p41051
S'D_tensor_name'
p41052
sS'required'
p41053
I01
sS'group_name'
p41054
Nsa(dp41055
S'description'
p41056
S'Vector of arguments of the mobility\n'
p41057
sS'cpp_type'
p41058
S'std::vector<VariableName>'
p41059
sS'default'
p41060
g3
sS'name'
p41061
S'args'
p41062
sS'required'
p41063
I00
sS'group_name'
p41064
Nsa(dp41065
S'description'
p41066
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41067
sS'cpp_type'
p41068
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41069
sS'default'
p41070
g3
sS'name'
p41071
S'block'
p41072
sS'required'
p41073
I00
sS'group_name'
p41074
Nsa(dp41075
S'description'
p41076
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41077
sS'cpp_type'
p41078
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41079
sS'default'
p41080
g3
sS'name'
p41081
S'control_tags'
p41082
sS'required'
p41083
I00
sS'group_name'
p41084
S'Advanced'
p41085
sa(dp41086
S'description'
p41087
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41088
sS'cpp_type'
p41089
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41090
sS'default'
p41091
g3
sS'name'
p41092
S'diag_save_in'
p41093
sS'required'
p41094
I00
sS'group_name'
p41095
S'Advanced'
p41096
sa(dp41097
S'description'
p41098
S'Whether or not this kernel will be used as an eigen kernel\n'
p41099
sS'cpp_type'
p41100
S'bool'
p41101
sS'default'
p41102
S'0'
p41103
sS'name'
p41104
S'eigen_kernel'
p41105
sS'required'
p41106
I00
sS'group_name'
p41107
Nsa(dp41108
S'description'
p41109
S'Set the enabled status of the MooseObject.\n'
p41110
sS'cpp_type'
p41111
S'bool'
p41112
sS'default'
p41113
S'1'
p41114
sS'name'
p41115
S'enable'
p41116
sS'required'
p41117
I00
sS'group_name'
p41118
S'Advanced'
p41119
sa(dp41120
S'description'
p41121
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41122
sS'cpp_type'
p41123
S'bool'
p41124
sS'default'
p41125
S'1'
p41126
sS'name'
p41127
S'implicit'
p41128
sS'required'
p41129
I00
sS'group_name'
p41130
S'Advanced'
p41131
sa(dp41132
S'description'
p41133
S'The mobility used with the kernel\n'
p41134
sS'cpp_type'
p41135
S'MaterialPropertyName'
p41136
sS'default'
p41137
S'L'
p41138
sS'name'
p41139
S'mob_name'
p41140
sS'required'
p41141
I00
sS'group_name'
p41142
Nsa(dp41143
S'description'
p41144
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41145
sS'cpp_type'
p41146
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41147
sS'default'
p41148
g3
sS'name'
p41149
S'save_in'
p41150
sS'required'
p41151
I00
sS'group_name'
p41152
S'Advanced'
p41153
sa(dp41154
S'description'
p41155
S'The seed for the master random number generator\n'
p41156
sS'cpp_type'
p41157
S'unsigned int'
p41158
sS'default'
p41159
S'0'
p41160
sS'name'
p41161
S'seed'
p41162
sS'required'
p41163
I00
sS'group_name'
p41164
S'Advanced'
p41165
sa(dp41166
S'description'
p41167
g3
sS'cpp_type'
p41168
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41169
sS'default'
p41170
S'ACGrGrElasticDrivingForce'
p41171
sS'name'
p41172
S'type'
p41173
sS'required'
p41174
I00
sS'group_name'
p41175
Nsa(dp41176
S'description'
p41177
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41178
sS'cpp_type'
p41179
S'bool'
p41180
sS'default'
p41181
S'0'
p41182
sS'name'
p41183
S'use_displaced_mesh'
p41184
sS'required'
p41185
I00
sS'group_name'
p41186
S'Advanced'
p41187
sa(dp41188
S'description'
p41189
S'The name of the variable that this Kernel operates on\n'
p41190
sS'cpp_type'
p41191
S'NonlinearVariableName'
p41192
sS'default'
p41193
g3
sS'name'
p41194
S'variable'
p41195
sS'required'
p41196
I01
sS'group_name'
p41197
NsasS'name'
p41198
S'/Kernels/ACGrGrElasticDrivingForce'
p41199
sa(dp41200
S'description'
p41201
S'Multi-phase poly-crystaline Allen-Cahn Kernel\n'
p41202
sS'subblocks'
p41203
NsS'parameters'
p41204
(lp41205
(dp41206
S'description'
p41207
S'temperature\n'
p41208
sS'cpp_type'
p41209
S'std::vector<VariableName>'
p41210
sS'default'
p41211
g3
sS'name'
p41212
S'T'
p41213
sS'required'
p41214
I00
sS'group_name'
p41215
Nsa(dp41216
S'description'
p41217
S'Vector of arguments of the mobility\n'
p41218
sS'cpp_type'
p41219
S'std::vector<VariableName>'
p41220
sS'default'
p41221
g3
sS'name'
p41222
S'args'
p41223
sS'required'
p41224
I00
sS'group_name'
p41225
Nsa(dp41226
S'description'
p41227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41228
sS'cpp_type'
p41229
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41230
sS'default'
p41231
g3
sS'name'
p41232
S'block'
p41233
sS'required'
p41234
I00
sS'group_name'
p41235
Nsa(dp41236
S'description'
p41237
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41238
sS'cpp_type'
p41239
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41240
sS'default'
p41241
g3
sS'name'
p41242
S'control_tags'
p41243
sS'required'
p41244
I00
sS'group_name'
p41245
S'Advanced'
p41246
sa(dp41247
S'description'
p41248
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41249
sS'cpp_type'
p41250
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41251
sS'default'
p41252
g3
sS'name'
p41253
S'diag_save_in'
p41254
sS'required'
p41255
I00
sS'group_name'
p41256
S'Advanced'
p41257
sa(dp41258
S'description'
p41259
S'Whether or not this kernel will be used as an eigen kernel\n'
p41260
sS'cpp_type'
p41261
S'bool'
p41262
sS'default'
p41263
S'0'
p41264
sS'name'
p41265
S'eigen_kernel'
p41266
sS'required'
p41267
I00
sS'group_name'
p41268
Nsa(dp41269
S'description'
p41270
S'Set the enabled status of the MooseObject.\n'
p41271
sS'cpp_type'
p41272
S'bool'
p41273
sS'default'
p41274
S'1'
p41275
sS'name'
p41276
S'enable'
p41277
sS'required'
p41278
I00
sS'group_name'
p41279
S'Advanced'
p41280
sa(dp41281
S'description'
p41282
S'List of gamma material property names for each other order parameter. Place in same order as order parameters (v)!\n'
p41283
sS'cpp_type'
p41284
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p41285
sS'default'
p41286
g3
sS'name'
p41287
S'gamma_names'
p41288
sS'required'
p41289
I01
sS'group_name'
p41290
Nsa(dp41291
S'description'
p41292
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41293
sS'cpp_type'
p41294
S'bool'
p41295
sS'default'
p41296
S'1'
p41297
sS'name'
p41298
S'implicit'
p41299
sS'required'
p41300
I00
sS'group_name'
p41301
S'Advanced'
p41302
sa(dp41303
S'description'
p41304
S'The mobility used with the kernel\n'
p41305
sS'cpp_type'
p41306
S'MaterialPropertyName'
p41307
sS'default'
p41308
S'L'
p41309
sS'name'
p41310
S'mob_name'
p41311
sS'required'
p41312
I00
sS'group_name'
p41313
Nsa(dp41314
S'description'
p41315
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41316
sS'cpp_type'
p41317
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41318
sS'default'
p41319
g3
sS'name'
p41320
S'save_in'
p41321
sS'required'
p41322
I00
sS'group_name'
p41323
S'Advanced'
p41324
sa(dp41325
S'description'
p41326
S'The seed for the master random number generator\n'
p41327
sS'cpp_type'
p41328
S'unsigned int'
p41329
sS'default'
p41330
S'0'
p41331
sS'name'
p41332
S'seed'
p41333
sS'required'
p41334
I00
sS'group_name'
p41335
S'Advanced'
p41336
sa(dp41337
S'description'
p41338
g3
sS'cpp_type'
p41339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41340
sS'default'
p41341
S'ACGrGrMulti'
p41342
sS'name'
p41343
S'type'
p41344
sS'required'
p41345
I00
sS'group_name'
p41346
Nsa(dp41347
S'description'
p41348
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41349
sS'cpp_type'
p41350
S'bool'
p41351
sS'default'
p41352
S'0'
p41353
sS'name'
p41354
S'use_displaced_mesh'
p41355
sS'required'
p41356
I00
sS'group_name'
p41357
S'Advanced'
p41358
sa(dp41359
S'description'
p41360
S'Array of coupled order paramter names for other order parameters\n'
p41361
sS'cpp_type'
p41362
S'std::vector<VariableName>'
p41363
sS'default'
p41364
g3
sS'name'
p41365
S'v'
p41366
sS'required'
p41367
I01
sS'group_name'
p41368
Nsa(dp41369
S'description'
p41370
S'The name of the variable that this Kernel operates on\n'
p41371
sS'cpp_type'
p41372
S'NonlinearVariableName'
p41373
sS'default'
p41374
g3
sS'name'
p41375
S'variable'
p41376
sS'required'
p41377
I01
sS'group_name'
p41378
NsasS'name'
p41379
S'/Kernels/ACGrGrMulti'
p41380
sa(dp41381
S'description'
p41382
S'Grain-Boundary model poly-crystaline interface Allen-Cahn Kernel\n'
p41383
sS'subblocks'
p41384
NsS'parameters'
p41385
(lp41386
(dp41387
S'description'
p41388
S'temperature\n'
p41389
sS'cpp_type'
p41390
S'std::vector<VariableName>'
p41391
sS'default'
p41392
g3
sS'name'
p41393
S'T'
p41394
sS'required'
p41395
I00
sS'group_name'
p41396
Nsa(dp41397
S'description'
p41398
S'Vector of arguments of the mobility\n'
p41399
sS'cpp_type'
p41400
S'std::vector<VariableName>'
p41401
sS'default'
p41402
g3
sS'name'
p41403
S'args'
p41404
sS'required'
p41405
I00
sS'group_name'
p41406
Nsa(dp41407
S'description'
p41408
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41409
sS'cpp_type'
p41410
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41411
sS'default'
p41412
g3
sS'name'
p41413
S'block'
p41414
sS'required'
p41415
I00
sS'group_name'
p41416
Nsa(dp41417
S'description'
p41418
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41419
sS'cpp_type'
p41420
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41421
sS'default'
p41422
g3
sS'name'
p41423
S'control_tags'
p41424
sS'required'
p41425
I00
sS'group_name'
p41426
S'Advanced'
p41427
sa(dp41428
S'description'
p41429
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41430
sS'cpp_type'
p41431
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41432
sS'default'
p41433
g3
sS'name'
p41434
S'diag_save_in'
p41435
sS'required'
p41436
I00
sS'group_name'
p41437
S'Advanced'
p41438
sa(dp41439
S'description'
p41440
S'Whether or not this kernel will be used as an eigen kernel\n'
p41441
sS'cpp_type'
p41442
S'bool'
p41443
sS'default'
p41444
S'0'
p41445
sS'name'
p41446
S'eigen_kernel'
p41447
sS'required'
p41448
I00
sS'group_name'
p41449
Nsa(dp41450
S'description'
p41451
S'Set the enabled status of the MooseObject.\n'
p41452
sS'cpp_type'
p41453
S'bool'
p41454
sS'default'
p41455
S'1'
p41456
sS'name'
p41457
S'enable'
p41458
sS'required'
p41459
I00
sS'group_name'
p41460
S'Advanced'
p41461
sa(dp41462
S'description'
p41463
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41464
sS'cpp_type'
p41465
S'bool'
p41466
sS'default'
p41467
S'1'
p41468
sS'name'
p41469
S'implicit'
p41470
sS'required'
p41471
I00
sS'group_name'
p41472
S'Advanced'
p41473
sa(dp41474
S'description'
p41475
S'The mobility used with the kernel\n'
p41476
sS'cpp_type'
p41477
S'MaterialPropertyName'
p41478
sS'default'
p41479
S'L'
p41480
sS'name'
p41481
S'mob_name'
p41482
sS'required'
p41483
I00
sS'group_name'
p41484
Nsa(dp41485
S'description'
p41486
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41487
sS'cpp_type'
p41488
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41489
sS'default'
p41490
g3
sS'name'
p41491
S'save_in'
p41492
sS'required'
p41493
I00
sS'group_name'
p41494
S'Advanced'
p41495
sa(dp41496
S'description'
p41497
S'The seed for the master random number generator\n'
p41498
sS'cpp_type'
p41499
S'unsigned int'
p41500
sS'default'
p41501
S'0'
p41502
sS'name'
p41503
S'seed'
p41504
sS'required'
p41505
I00
sS'group_name'
p41506
S'Advanced'
p41507
sa(dp41508
S'description'
p41509
g3
sS'cpp_type'
p41510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41511
sS'default'
p41512
S'ACGrGrPoly'
p41513
sS'name'
p41514
S'type'
p41515
sS'required'
p41516
I00
sS'group_name'
p41517
Nsa(dp41518
S'description'
p41519
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41520
sS'cpp_type'
p41521
S'bool'
p41522
sS'default'
p41523
S'0'
p41524
sS'name'
p41525
S'use_displaced_mesh'
p41526
sS'required'
p41527
I00
sS'group_name'
p41528
S'Advanced'
p41529
sa(dp41530
S'description'
p41531
S'Array of coupled order paramter names for other order parameters\n'
p41532
sS'cpp_type'
p41533
S'std::vector<VariableName>'
p41534
sS'default'
p41535
g3
sS'name'
p41536
S'v'
p41537
sS'required'
p41538
I01
sS'group_name'
p41539
Nsa(dp41540
S'description'
p41541
S'The name of the variable that this Kernel operates on\n'
p41542
sS'cpp_type'
p41543
S'NonlinearVariableName'
p41544
sS'default'
p41545
g3
sS'name'
p41546
S'variable'
p41547
sS'required'
p41548
I01
sS'group_name'
p41549
NsasS'name'
p41550
S'/Kernels/ACGrGrPoly'
p41551
sa(dp41552
S'description'
p41553
S'Gradient energy Allen-Cahn Kernel\n'
p41554
sS'subblocks'
p41555
NsS'parameters'
p41556
(lp41557
(dp41558
S'description'
p41559
S'Vector of nonlinear variable arguments this object depends on\n'
p41560
sS'cpp_type'
p41561
S'std::vector<VariableName>'
p41562
sS'default'
p41563
g3
sS'name'
p41564
S'args'
p41565
sS'required'
p41566
I00
sS'group_name'
p41567
Nsa(dp41568
S'description'
p41569
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41570
sS'cpp_type'
p41571
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41572
sS'default'
p41573
g3
sS'name'
p41574
S'block'
p41575
sS'required'
p41576
I00
sS'group_name'
p41577
Nsa(dp41578
S'description'
p41579
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41580
sS'cpp_type'
p41581
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41582
sS'default'
p41583
g3
sS'name'
p41584
S'control_tags'
p41585
sS'required'
p41586
I00
sS'group_name'
p41587
S'Advanced'
p41588
sa(dp41589
S'description'
p41590
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41591
sS'cpp_type'
p41592
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41593
sS'default'
p41594
g3
sS'name'
p41595
S'diag_save_in'
p41596
sS'required'
p41597
I00
sS'group_name'
p41598
S'Advanced'
p41599
sa(dp41600
S'description'
p41601
S'Whether or not this kernel will be used as an eigen kernel\n'
p41602
sS'cpp_type'
p41603
S'bool'
p41604
sS'default'
p41605
S'0'
p41606
sS'name'
p41607
S'eigen_kernel'
p41608
sS'required'
p41609
I00
sS'group_name'
p41610
Nsa(dp41611
S'description'
p41612
S'Set the enabled status of the MooseObject.\n'
p41613
sS'cpp_type'
p41614
S'bool'
p41615
sS'default'
p41616
S'1'
p41617
sS'name'
p41618
S'enable'
p41619
sS'required'
p41620
I00
sS'group_name'
p41621
S'Advanced'
p41622
sa(dp41623
S'description'
p41624
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41625
sS'cpp_type'
p41626
S'bool'
p41627
sS'default'
p41628
S'1'
p41629
sS'name'
p41630
S'implicit'
p41631
sS'required'
p41632
I00
sS'group_name'
p41633
S'Advanced'
p41634
sa(dp41635
S'description'
p41636
S'The kappa used with the kernel\n'
p41637
sS'cpp_type'
p41638
S'MaterialPropertyName'
p41639
sS'default'
p41640
S'kappa_op'
p41641
sS'name'
p41642
S'kappa_name'
p41643
sS'required'
p41644
I00
sS'group_name'
p41645
Nsa(dp41646
S'description'
p41647
S'The mobility used with the kernel\n'
p41648
sS'cpp_type'
p41649
S'MaterialPropertyName'
p41650
sS'default'
p41651
S'L'
p41652
sS'name'
p41653
S'mob_name'
p41654
sS'required'
p41655
I00
sS'group_name'
p41656
Nsa(dp41657
S'description'
p41658
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41659
sS'cpp_type'
p41660
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41661
sS'default'
p41662
g3
sS'name'
p41663
S'save_in'
p41664
sS'required'
p41665
I00
sS'group_name'
p41666
S'Advanced'
p41667
sa(dp41668
S'description'
p41669
S'The seed for the master random number generator\n'
p41670
sS'cpp_type'
p41671
S'unsigned int'
p41672
sS'default'
p41673
S'0'
p41674
sS'name'
p41675
S'seed'
p41676
sS'required'
p41677
I00
sS'group_name'
p41678
S'Advanced'
p41679
sa(dp41680
S'description'
p41681
g3
sS'cpp_type'
p41682
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41683
sS'default'
p41684
S'ACInterface'
p41685
sS'name'
p41686
S'type'
p41687
sS'required'
p41688
I00
sS'group_name'
p41689
Nsa(dp41690
S'description'
p41691
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41692
sS'cpp_type'
p41693
S'bool'
p41694
sS'default'
p41695
S'0'
p41696
sS'name'
p41697
S'use_displaced_mesh'
p41698
sS'required'
p41699
I00
sS'group_name'
p41700
S'Advanced'
p41701
sa(dp41702
S'description'
p41703
S'The name of the variable that this Kernel operates on\n'
p41704
sS'cpp_type'
p41705
S'NonlinearVariableName'
p41706
sS'default'
p41707
g3
sS'name'
p41708
S'variable'
p41709
sS'required'
p41710
I01
sS'group_name'
p41711
Nsa(dp41712
S'description'
p41713
S'The mobility is a function of any MOOSE variable (if this is set to false L must be constant over the entire domain!)\n'
p41714
sS'cpp_type'
p41715
S'bool'
p41716
sS'default'
p41717
S'1'
p41718
sS'name'
p41719
S'variable_L'
p41720
sS'required'
p41721
I00
sS'group_name'
p41722
NsasS'name'
p41723
S'/Kernels/ACInterface'
p41724
sa(dp41725
S'description'
p41726
S'Anisotropic gradient energy Allen-Cahn Kernel Part 1\n'
p41727
sS'subblocks'
p41728
NsS'parameters'
p41729
(lp41730
(dp41731
S'description'
p41732
S'Vector of nonlinear variable arguments this object depends on\n'
p41733
sS'cpp_type'
p41734
S'std::vector<VariableName>'
p41735
sS'default'
p41736
g3
sS'name'
p41737
S'args'
p41738
sS'required'
p41739
I00
sS'group_name'
p41740
Nsa(dp41741
S'description'
p41742
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41743
sS'cpp_type'
p41744
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41745
sS'default'
p41746
g3
sS'name'
p41747
S'block'
p41748
sS'required'
p41749
I00
sS'group_name'
p41750
Nsa(dp41751
S'description'
p41752
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41753
sS'cpp_type'
p41754
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41755
sS'default'
p41756
g3
sS'name'
p41757
S'control_tags'
p41758
sS'required'
p41759
I00
sS'group_name'
p41760
S'Advanced'
p41761
sa(dp41762
S'description'
p41763
S'The derivative of deps with respect to grad_op\n'
p41764
sS'cpp_type'
p41765
S'MaterialPropertyName'
p41766
sS'default'
p41767
S'ddepsdgrad_op'
p41768
sS'name'
p41769
S'ddepsdgrad_op_name'
p41770
sS'required'
p41771
I00
sS'group_name'
p41772
Nsa(dp41773
S'description'
p41774
S'The derivative of the anisotropic interface parameter with respect to angle\n'
p41775
sS'cpp_type'
p41776
S'MaterialPropertyName'
p41777
sS'default'
p41778
S'deps'
p41779
sS'name'
p41780
S'deps_name'
p41781
sS'required'
p41782
I00
sS'group_name'
p41783
Nsa(dp41784
S'description'
p41785
S'The derivative of the anisotropic interface parameter eps with respect to grad_op\n'
p41786
sS'cpp_type'
p41787
S'MaterialPropertyName'
p41788
sS'default'
p41789
S'depsdgrad_op'
p41790
sS'name'
p41791
S'depsdgrad_op_name'
p41792
sS'required'
p41793
I00
sS'group_name'
p41794
Nsa(dp41795
S'description'
p41796
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41797
sS'cpp_type'
p41798
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41799
sS'default'
p41800
g3
sS'name'
p41801
S'diag_save_in'
p41802
sS'required'
p41803
I00
sS'group_name'
p41804
S'Advanced'
p41805
sa(dp41806
S'description'
p41807
S'Whether or not this kernel will be used as an eigen kernel\n'
p41808
sS'cpp_type'
p41809
S'bool'
p41810
sS'default'
p41811
S'0'
p41812
sS'name'
p41813
S'eigen_kernel'
p41814
sS'required'
p41815
I00
sS'group_name'
p41816
Nsa(dp41817
S'description'
p41818
S'Set the enabled status of the MooseObject.\n'
p41819
sS'cpp_type'
p41820
S'bool'
p41821
sS'default'
p41822
S'1'
p41823
sS'name'
p41824
S'enable'
p41825
sS'required'
p41826
I00
sS'group_name'
p41827
S'Advanced'
p41828
sa(dp41829
S'description'
p41830
S'The anisotropic interface parameter\n'
p41831
sS'cpp_type'
p41832
S'MaterialPropertyName'
p41833
sS'default'
p41834
S'eps'
p41835
sS'name'
p41836
S'eps_name'
p41837
sS'required'
p41838
I00
sS'group_name'
p41839
Nsa(dp41840
S'description'
p41841
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41842
sS'cpp_type'
p41843
S'bool'
p41844
sS'default'
p41845
S'1'
p41846
sS'name'
p41847
S'implicit'
p41848
sS'required'
p41849
I00
sS'group_name'
p41850
S'Advanced'
p41851
sa(dp41852
S'description'
p41853
S'The mobility used with the kernel\n'
p41854
sS'cpp_type'
p41855
S'MaterialPropertyName'
p41856
sS'default'
p41857
S'L'
p41858
sS'name'
p41859
S'mob_name'
p41860
sS'required'
p41861
I00
sS'group_name'
p41862
Nsa(dp41863
S'description'
p41864
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41865
sS'cpp_type'
p41866
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41867
sS'default'
p41868
g3
sS'name'
p41869
S'save_in'
p41870
sS'required'
p41871
I00
sS'group_name'
p41872
S'Advanced'
p41873
sa(dp41874
S'description'
p41875
S'The seed for the master random number generator\n'
p41876
sS'cpp_type'
p41877
S'unsigned int'
p41878
sS'default'
p41879
S'0'
p41880
sS'name'
p41881
S'seed'
p41882
sS'required'
p41883
I00
sS'group_name'
p41884
S'Advanced'
p41885
sa(dp41886
S'description'
p41887
g3
sS'cpp_type'
p41888
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41889
sS'default'
p41890
S'ACInterfaceKobayashi1'
p41891
sS'name'
p41892
S'type'
p41893
sS'required'
p41894
I00
sS'group_name'
p41895
Nsa(dp41896
S'description'
p41897
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41898
sS'cpp_type'
p41899
S'bool'
p41900
sS'default'
p41901
S'0'
p41902
sS'name'
p41903
S'use_displaced_mesh'
p41904
sS'required'
p41905
I00
sS'group_name'
p41906
S'Advanced'
p41907
sa(dp41908
S'description'
p41909
S'The name of the variable that this Kernel operates on\n'
p41910
sS'cpp_type'
p41911
S'NonlinearVariableName'
p41912
sS'default'
p41913
g3
sS'name'
p41914
S'variable'
p41915
sS'required'
p41916
I01
sS'group_name'
p41917
NsasS'name'
p41918
S'/Kernels/ACInterfaceKobayashi1'
p41919
sa(dp41920
S'description'
p41921
S'Anisotropic Gradient energy Allen-Cahn Kernel Part 2\n'
p41922
sS'subblocks'
p41923
NsS'parameters'
p41924
(lp41925
(dp41926
S'description'
p41927
S'Vector of nonlinear variable arguments this object depends on\n'
p41928
sS'cpp_type'
p41929
S'std::vector<VariableName>'
p41930
sS'default'
p41931
g3
sS'name'
p41932
S'args'
p41933
sS'required'
p41934
I00
sS'group_name'
p41935
Nsa(dp41936
S'description'
p41937
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41938
sS'cpp_type'
p41939
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41940
sS'default'
p41941
g3
sS'name'
p41942
S'block'
p41943
sS'required'
p41944
I00
sS'group_name'
p41945
Nsa(dp41946
S'description'
p41947
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41948
sS'cpp_type'
p41949
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41950
sS'default'
p41951
g3
sS'name'
p41952
S'control_tags'
p41953
sS'required'
p41954
I00
sS'group_name'
p41955
S'Advanced'
p41956
sa(dp41957
S'description'
p41958
S'The derivative of the anisotropic interface parameter eps with respect to grad_op\n'
p41959
sS'cpp_type'
p41960
S'MaterialPropertyName'
p41961
sS'default'
p41962
S'depsdgrad_op'
p41963
sS'name'
p41964
S'depsdgrad_op_name'
p41965
sS'required'
p41966
I00
sS'group_name'
p41967
Nsa(dp41968
S'description'
p41969
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41970
sS'cpp_type'
p41971
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41972
sS'default'
p41973
g3
sS'name'
p41974
S'diag_save_in'
p41975
sS'required'
p41976
I00
sS'group_name'
p41977
S'Advanced'
p41978
sa(dp41979
S'description'
p41980
S'Whether or not this kernel will be used as an eigen kernel\n'
p41981
sS'cpp_type'
p41982
S'bool'
p41983
sS'default'
p41984
S'0'
p41985
sS'name'
p41986
S'eigen_kernel'
p41987
sS'required'
p41988
I00
sS'group_name'
p41989
Nsa(dp41990
S'description'
p41991
S'Set the enabled status of the MooseObject.\n'
p41992
sS'cpp_type'
p41993
S'bool'
p41994
sS'default'
p41995
S'1'
p41996
sS'name'
p41997
S'enable'
p41998
sS'required'
p41999
I00
sS'group_name'
p42000
S'Advanced'
p42001
sa(dp42002
S'description'
p42003
S'The anisotropic parameter\n'
p42004
sS'cpp_type'
p42005
S'MaterialPropertyName'
p42006
sS'default'
p42007
S'eps'
p42008
sS'name'
p42009
S'eps_name'
p42010
sS'required'
p42011
I00
sS'group_name'
p42012
Nsa(dp42013
S'description'
p42014
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42015
sS'cpp_type'
p42016
S'bool'
p42017
sS'default'
p42018
S'1'
p42019
sS'name'
p42020
S'implicit'
p42021
sS'required'
p42022
I00
sS'group_name'
p42023
S'Advanced'
p42024
sa(dp42025
S'description'
p42026
S'The mobility used with the kernel\n'
p42027
sS'cpp_type'
p42028
S'MaterialPropertyName'
p42029
sS'default'
p42030
S'L'
p42031
sS'name'
p42032
S'mob_name'
p42033
sS'required'
p42034
I00
sS'group_name'
p42035
Nsa(dp42036
S'description'
p42037
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42038
sS'cpp_type'
p42039
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42040
sS'default'
p42041
g3
sS'name'
p42042
S'save_in'
p42043
sS'required'
p42044
I00
sS'group_name'
p42045
S'Advanced'
p42046
sa(dp42047
S'description'
p42048
S'The seed for the master random number generator\n'
p42049
sS'cpp_type'
p42050
S'unsigned int'
p42051
sS'default'
p42052
S'0'
p42053
sS'name'
p42054
S'seed'
p42055
sS'required'
p42056
I00
sS'group_name'
p42057
S'Advanced'
p42058
sa(dp42059
S'description'
p42060
g3
sS'cpp_type'
p42061
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42062
sS'default'
p42063
S'ACInterfaceKobayashi2'
p42064
sS'name'
p42065
S'type'
p42066
sS'required'
p42067
I00
sS'group_name'
p42068
Nsa(dp42069
S'description'
p42070
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42071
sS'cpp_type'
p42072
S'bool'
p42073
sS'default'
p42074
S'0'
p42075
sS'name'
p42076
S'use_displaced_mesh'
p42077
sS'required'
p42078
I00
sS'group_name'
p42079
S'Advanced'
p42080
sa(dp42081
S'description'
p42082
S'The name of the variable that this Kernel operates on\n'
p42083
sS'cpp_type'
p42084
S'NonlinearVariableName'
p42085
sS'default'
p42086
g3
sS'name'
p42087
S'variable'
p42088
sS'required'
p42089
I01
sS'group_name'
p42090
NsasS'name'
p42091
S'/Kernels/ACInterfaceKobayashi2'
p42092
sa(dp42093
S'description'
p42094
S'Gradient energy Allen-Cahn Kernel with cross terms\n'
p42095
sS'subblocks'
p42096
NsS'parameters'
p42097
(lp42098
(dp42099
S'description'
p42100
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42101
sS'cpp_type'
p42102
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42103
sS'default'
p42104
g3
sS'name'
p42105
S'block'
p42106
sS'required'
p42107
I00
sS'group_name'
p42108
Nsa(dp42109
S'description'
p42110
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42111
sS'cpp_type'
p42112
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42113
sS'default'
p42114
g3
sS'name'
p42115
S'control_tags'
p42116
sS'required'
p42117
I00
sS'group_name'
p42118
S'Advanced'
p42119
sa(dp42120
S'description'
p42121
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42122
sS'cpp_type'
p42123
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42124
sS'default'
p42125
g3
sS'name'
p42126
S'diag_save_in'
p42127
sS'required'
p42128
I00
sS'group_name'
p42129
S'Advanced'
p42130
sa(dp42131
S'description'
p42132
S'Whether or not this kernel will be used as an eigen kernel\n'
p42133
sS'cpp_type'
p42134
S'bool'
p42135
sS'default'
p42136
S'0'
p42137
sS'name'
p42138
S'eigen_kernel'
p42139
sS'required'
p42140
I00
sS'group_name'
p42141
Nsa(dp42142
S'description'
p42143
S'Set the enabled status of the MooseObject.\n'
p42144
sS'cpp_type'
p42145
S'bool'
p42146
sS'default'
p42147
S'1'
p42148
sS'name'
p42149
S'enable'
p42150
sS'required'
p42151
I00
sS'group_name'
p42152
S'Advanced'
p42153
sa(dp42154
S'description'
p42155
S'All eta_i order parameters of the multiphase problem\n'
p42156
sS'cpp_type'
p42157
S'std::vector<VariableName>'
p42158
sS'default'
p42159
g3
sS'name'
p42160
S'etas'
p42161
sS'required'
p42162
I01
sS'group_name'
p42163
Nsa(dp42164
S'description'
p42165
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42166
sS'cpp_type'
p42167
S'bool'
p42168
sS'default'
p42169
S'1'
p42170
sS'name'
p42171
S'implicit'
p42172
sS'required'
p42173
I00
sS'group_name'
p42174
S'Advanced'
p42175
sa(dp42176
S'description'
p42177
S'The kappa used with the kernel\n'
p42178
sS'cpp_type'
p42179
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p42180
sS'default'
p42181
g3
sS'name'
p42182
S'kappa_names'
p42183
sS'required'
p42184
I01
sS'group_name'
p42185
Nsa(dp42186
S'description'
p42187
S'The mobility used with the kernel\n'
p42188
sS'cpp_type'
p42189
S'MaterialPropertyName'
p42190
sS'default'
p42191
S'L'
p42192
sS'name'
p42193
S'mob_name'
p42194
sS'required'
p42195
I00
sS'group_name'
p42196
Nsa(dp42197
S'description'
p42198
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42199
sS'cpp_type'
p42200
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42201
sS'default'
p42202
g3
sS'name'
p42203
S'save_in'
p42204
sS'required'
p42205
I00
sS'group_name'
p42206
S'Advanced'
p42207
sa(dp42208
S'description'
p42209
S'The seed for the master random number generator\n'
p42210
sS'cpp_type'
p42211
S'unsigned int'
p42212
sS'default'
p42213
S'0'
p42214
sS'name'
p42215
S'seed'
p42216
sS'required'
p42217
I00
sS'group_name'
p42218
S'Advanced'
p42219
sa(dp42220
S'description'
p42221
g3
sS'cpp_type'
p42222
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42223
sS'default'
p42224
S'ACMultiInterface'
p42225
sS'name'
p42226
S'type'
p42227
sS'required'
p42228
I00
sS'group_name'
p42229
Nsa(dp42230
S'description'
p42231
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42232
sS'cpp_type'
p42233
S'bool'
p42234
sS'default'
p42235
S'0'
p42236
sS'name'
p42237
S'use_displaced_mesh'
p42238
sS'required'
p42239
I00
sS'group_name'
p42240
S'Advanced'
p42241
sa(dp42242
S'description'
p42243
S'The name of the variable that this Kernel operates on\n'
p42244
sS'cpp_type'
p42245
S'NonlinearVariableName'
p42246
sS'default'
p42247
g3
sS'name'
p42248
S'variable'
p42249
sS'required'
p42250
I01
sS'group_name'
p42251
NsasS'name'
p42252
S'/Kernels/ACMultiInterface'
p42253
sa(dp42254
S'description'
p42255
S'Stored Energy contribution to grain growth\n'
p42256
sS'subblocks'
p42257
NsS'parameters'
p42258
(lp42259
(dp42260
S'description'
p42261
S'Vector of arguments of the mobility\n'
p42262
sS'cpp_type'
p42263
S'std::vector<VariableName>'
p42264
sS'default'
p42265
g3
sS'name'
p42266
S'args'
p42267
sS'required'
p42268
I00
sS'group_name'
p42269
Nsa(dp42270
S'description'
p42271
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42272
sS'cpp_type'
p42273
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42274
sS'default'
p42275
g3
sS'name'
p42276
S'block'
p42277
sS'required'
p42278
I00
sS'group_name'
p42279
Nsa(dp42280
S'description'
p42281
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42282
sS'cpp_type'
p42283
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42284
sS'default'
p42285
g3
sS'name'
p42286
S'control_tags'
p42287
sS'required'
p42288
I00
sS'group_name'
p42289
S'Advanced'
p42290
sa(dp42291
S'description'
p42292
S'Number of OP representing deformed grains\n'
p42293
sS'cpp_type'
p42294
S'unsigned int'
p42295
sS'default'
p42296
g3
sS'name'
p42297
S'deformed_grain_num'
p42298
sS'required'
p42299
I01
sS'group_name'
p42300
Nsa(dp42301
S'description'
p42302
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42303
sS'cpp_type'
p42304
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42305
sS'default'
p42306
g3
sS'name'
p42307
S'diag_save_in'
p42308
sS'required'
p42309
I00
sS'group_name'
p42310
S'Advanced'
p42311
sa(dp42312
S'description'
p42313
S'Whether or not this kernel will be used as an eigen kernel\n'
p42314
sS'cpp_type'
p42315
S'bool'
p42316
sS'default'
p42317
S'0'
p42318
sS'name'
p42319
S'eigen_kernel'
p42320
sS'required'
p42321
I00
sS'group_name'
p42322
Nsa(dp42323
S'description'
p42324
S'Set the enabled status of the MooseObject.\n'
p42325
sS'cpp_type'
p42326
S'bool'
p42327
sS'default'
p42328
S'1'
p42329
sS'name'
p42330
S'enable'
p42331
sS'required'
p42332
I00
sS'group_name'
p42333
S'Advanced'
p42334
sa(dp42335
S'description'
p42336
S'The GrainTracker UserObject to get values from.\n'
p42337
sS'cpp_type'
p42338
S'UserObjectName'
p42339
sS'default'
p42340
g3
sS'name'
p42341
S'grain_tracker'
p42342
sS'required'
p42343
I01
sS'group_name'
p42344
Nsa(dp42345
S'description'
p42346
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42347
sS'cpp_type'
p42348
S'bool'
p42349
sS'default'
p42350
S'1'
p42351
sS'name'
p42352
S'implicit'
p42353
sS'required'
p42354
I00
sS'group_name'
p42355
S'Advanced'
p42356
sa(dp42357
S'description'
p42358
S'The mobility used with the kernel\n'
p42359
sS'cpp_type'
p42360
S'MaterialPropertyName'
p42361
sS'default'
p42362
S'L'
p42363
sS'name'
p42364
S'mob_name'
p42365
sS'required'
p42366
I00
sS'group_name'
p42367
Nsa(dp42368
S'description'
p42369
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42370
sS'cpp_type'
p42371
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42372
sS'default'
p42373
g3
sS'name'
p42374
S'save_in'
p42375
sS'required'
p42376
I00
sS'group_name'
p42377
S'Advanced'
p42378
sa(dp42379
S'description'
p42380
S'The seed for the master random number generator\n'
p42381
sS'cpp_type'
p42382
S'unsigned int'
p42383
sS'default'
p42384
S'0'
p42385
sS'name'
p42386
S'seed'
p42387
sS'required'
p42388
I00
sS'group_name'
p42389
S'Advanced'
p42390
sa(dp42391
S'description'
p42392
g3
sS'cpp_type'
p42393
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42394
sS'default'
p42395
S'ACSEDGPoly'
p42396
sS'name'
p42397
S'type'
p42398
sS'required'
p42399
I00
sS'group_name'
p42400
Nsa(dp42401
S'description'
p42402
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42403
sS'cpp_type'
p42404
S'bool'
p42405
sS'default'
p42406
S'0'
p42407
sS'name'
p42408
S'use_displaced_mesh'
p42409
sS'required'
p42410
I00
sS'group_name'
p42411
S'Advanced'
p42412
sa(dp42413
S'description'
p42414
S'Array of coupled variable names\n'
p42415
sS'cpp_type'
p42416
S'std::vector<VariableName>'
p42417
sS'default'
p42418
g3
sS'name'
p42419
S'v'
p42420
sS'required'
p42421
I01
sS'group_name'
p42422
Nsa(dp42423
S'description'
p42424
S'The name of the variable that this Kernel operates on\n'
p42425
sS'cpp_type'
p42426
S'NonlinearVariableName'
p42427
sS'default'
p42428
g3
sS'name'
p42429
S'variable'
p42430
sS'required'
p42431
I01
sS'group_name'
p42432
NsasS'name'
p42433
S'/Kernels/ACSEDGPoly'
p42434
sa(dp42435
S'description'
p42436
S'Kernel for Allen-Cahn equation that adds derivatives of switching functions * energies\n'
p42437
sS'subblocks'
p42438
NsS'parameters'
p42439
(lp42440
(dp42441
S'description'
p42442
S'List of free energies for each phase. Place in same order as hj_names!\n'
p42443
sS'cpp_type'
p42444
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p42445
sS'default'
p42446
g3
sS'name'
p42447
S'Fj_names'
p42448
sS'required'
p42449
I01
sS'group_name'
p42450
Nsa(dp42451
S'description'
p42452
S'Vector of arguments of the mobility\n'
p42453
sS'cpp_type'
p42454
S'std::vector<VariableName>'
p42455
sS'default'
p42456
g3
sS'name'
p42457
S'args'
p42458
sS'required'
p42459
I00
sS'group_name'
p42460
Nsa(dp42461
S'description'
p42462
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42463
sS'cpp_type'
p42464
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42465
sS'default'
p42466
g3
sS'name'
p42467
S'block'
p42468
sS'required'
p42469
I00
sS'group_name'
p42470
Nsa(dp42471
S'description'
p42472
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42473
sS'cpp_type'
p42474
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42475
sS'default'
p42476
g3
sS'name'
p42477
S'control_tags'
p42478
sS'required'
p42479
I00
sS'group_name'
p42480
S'Advanced'
p42481
sa(dp42482
S'description'
p42483
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42484
sS'cpp_type'
p42485
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42486
sS'default'
p42487
g3
sS'name'
p42488
S'diag_save_in'
p42489
sS'required'
p42490
I00
sS'group_name'
p42491
S'Advanced'
p42492
sa(dp42493
S'description'
p42494
S'Whether or not this kernel will be used as an eigen kernel\n'
p42495
sS'cpp_type'
p42496
S'bool'
p42497
sS'default'
p42498
S'0'
p42499
sS'name'
p42500
S'eigen_kernel'
p42501
sS'required'
p42502
I00
sS'group_name'
p42503
Nsa(dp42504
S'description'
p42505
S'Set the enabled status of the MooseObject.\n'
p42506
sS'cpp_type'
p42507
S'bool'
p42508
sS'default'
p42509
S'1'
p42510
sS'name'
p42511
S'enable'
p42512
sS'required'
p42513
I00
sS'group_name'
p42514
S'Advanced'
p42515
sa(dp42516
S'description'
p42517
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p42518
sS'cpp_type'
p42519
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p42520
sS'default'
p42521
g3
sS'name'
p42522
S'hj_names'
p42523
sS'required'
p42524
I01
sS'group_name'
p42525
Nsa(dp42526
S'description'
p42527
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42528
sS'cpp_type'
p42529
S'bool'
p42530
sS'default'
p42531
S'1'
p42532
sS'name'
p42533
S'implicit'
p42534
sS'required'
p42535
I00
sS'group_name'
p42536
S'Advanced'
p42537
sa(dp42538
S'description'
p42539
S'The mobility used with the kernel\n'
p42540
sS'cpp_type'
p42541
S'MaterialPropertyName'
p42542
sS'default'
p42543
S'L'
p42544
sS'name'
p42545
S'mob_name'
p42546
sS'required'
p42547
I00
sS'group_name'
p42548
Nsa(dp42549
S'description'
p42550
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42551
sS'cpp_type'
p42552
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42553
sS'default'
p42554
g3
sS'name'
p42555
S'save_in'
p42556
sS'required'
p42557
I00
sS'group_name'
p42558
S'Advanced'
p42559
sa(dp42560
S'description'
p42561
S'The seed for the master random number generator\n'
p42562
sS'cpp_type'
p42563
S'unsigned int'
p42564
sS'default'
p42565
S'0'
p42566
sS'name'
p42567
S'seed'
p42568
sS'required'
p42569
I00
sS'group_name'
p42570
S'Advanced'
p42571
sa(dp42572
S'description'
p42573
g3
sS'cpp_type'
p42574
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42575
sS'default'
p42576
S'ACSwitching'
p42577
sS'name'
p42578
S'type'
p42579
sS'required'
p42580
I00
sS'group_name'
p42581
Nsa(dp42582
S'description'
p42583
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42584
sS'cpp_type'
p42585
S'bool'
p42586
sS'default'
p42587
S'0'
p42588
sS'name'
p42589
S'use_displaced_mesh'
p42590
sS'required'
p42591
I00
sS'group_name'
p42592
S'Advanced'
p42593
sa(dp42594
S'description'
p42595
S'The name of the variable that this Kernel operates on\n'
p42596
sS'cpp_type'
p42597
S'NonlinearVariableName'
p42598
sS'default'
p42599
g3
sS'name'
p42600
S'variable'
p42601
sS'required'
p42602
I01
sS'group_name'
p42603
NsasS'name'
p42604
S'/Kernels/ACSwitching'
p42605
sa(dp42606
S'description'
p42607
S'Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n'
p42608
sS'subblocks'
p42609
NsS'parameters'
p42610
(lp42611
(dp42612
S'description'
p42613
S'Vector of arguments of the mobility\n'
p42614
sS'cpp_type'
p42615
S'std::vector<VariableName>'
p42616
sS'default'
p42617
g3
sS'name'
p42618
S'args'
p42619
sS'required'
p42620
I00
sS'group_name'
p42621
Nsa(dp42622
S'description'
p42623
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42624
sS'cpp_type'
p42625
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42626
sS'default'
p42627
g3
sS'name'
p42628
S'block'
p42629
sS'required'
p42630
I00
sS'group_name'
p42631
Nsa(dp42632
S'description'
p42633
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42634
sS'cpp_type'
p42635
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42636
sS'default'
p42637
g3
sS'name'
p42638
S'control_tags'
p42639
sS'required'
p42640
I00
sS'group_name'
p42641
S'Advanced'
p42642
sa(dp42643
S'description'
p42644
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42645
sS'cpp_type'
p42646
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42647
sS'default'
p42648
g3
sS'name'
p42649
S'diag_save_in'
p42650
sS'required'
p42651
I00
sS'group_name'
p42652
S'Advanced'
p42653
sa(dp42654
S'description'
p42655
S'Whether or not this kernel will be used as an eigen kernel\n'
p42656
sS'cpp_type'
p42657
S'bool'
p42658
sS'default'
p42659
S'0'
p42660
sS'name'
p42661
S'eigen_kernel'
p42662
sS'required'
p42663
I00
sS'group_name'
p42664
Nsa(dp42665
S'description'
p42666
S'Set the enabled status of the MooseObject.\n'
p42667
sS'cpp_type'
p42668
S'bool'
p42669
sS'default'
p42670
S'1'
p42671
sS'name'
p42672
S'enable'
p42673
sS'required'
p42674
I00
sS'group_name'
p42675
S'Advanced'
p42676
sa(dp42677
S'description'
p42678
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p42679
sS'cpp_type'
p42680
S'MaterialPropertyName'
p42681
sS'default'
p42682
g3
sS'name'
p42683
S'f_name'
p42684
sS'required'
p42685
I01
sS'group_name'
p42686
Nsa(dp42687
S'description'
p42688
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42689
sS'cpp_type'
p42690
S'bool'
p42691
sS'default'
p42692
S'1'
p42693
sS'name'
p42694
S'implicit'
p42695
sS'required'
p42696
I00
sS'group_name'
p42697
S'Advanced'
p42698
sa(dp42699
S'description'
p42700
S'The mobility used with the kernel\n'
p42701
sS'cpp_type'
p42702
S'MaterialPropertyName'
p42703
sS'default'
p42704
S'L'
p42705
sS'name'
p42706
S'mob_name'
p42707
sS'required'
p42708
I00
sS'group_name'
p42709
Nsa(dp42710
S'description'
p42711
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42712
sS'cpp_type'
p42713
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42714
sS'default'
p42715
g3
sS'name'
p42716
S'save_in'
p42717
sS'required'
p42718
I00
sS'group_name'
p42719
S'Advanced'
p42720
sa(dp42721
S'description'
p42722
S'The seed for the master random number generator\n'
p42723
sS'cpp_type'
p42724
S'unsigned int'
p42725
sS'default'
p42726
S'0'
p42727
sS'name'
p42728
S'seed'
p42729
sS'required'
p42730
I00
sS'group_name'
p42731
S'Advanced'
p42732
sa(dp42733
S'description'
p42734
g3
sS'cpp_type'
p42735
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42736
sS'default'
p42737
S'AllenCahn'
p42738
sS'name'
p42739
S'type'
p42740
sS'required'
p42741
I00
sS'group_name'
p42742
Nsa(dp42743
S'description'
p42744
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42745
sS'cpp_type'
p42746
S'bool'
p42747
sS'default'
p42748
S'0'
p42749
sS'name'
p42750
S'use_displaced_mesh'
p42751
sS'required'
p42752
I00
sS'group_name'
p42753
S'Advanced'
p42754
sa(dp42755
S'description'
p42756
S'The name of the variable that this Kernel operates on\n'
p42757
sS'cpp_type'
p42758
S'NonlinearVariableName'
p42759
sS'default'
p42760
g3
sS'name'
p42761
S'variable'
p42762
sS'required'
p42763
I01
sS'group_name'
p42764
NsasS'name'
p42765
S'/Kernels/AllenCahn'
p42766
sa(dp42767
S'description'
p42768
S'Kernel to compute bulk energy contribution to damage order parameter residual equation\n'
p42769
sS'subblocks'
p42770
NsS'parameters'
p42771
(lp42772
(dp42773
S'description'
p42774
S'Name of material property storing the elastic energy\n'
p42775
sS'cpp_type'
p42776
S'MaterialPropertyName'
p42777
sS'default'
p42778
S'E_el'
p42779
sS'name'
p42780
S'F_name'
p42781
sS'required'
p42782
I00
sS'group_name'
p42783
Nsa(dp42784
S'description'
p42785
S'Variable storing the laplacian of c\n'
p42786
sS'cpp_type'
p42787
S'std::vector<VariableName>'
p42788
sS'default'
p42789
g3
sS'name'
p42790
S'beta'
p42791
sS'required'
p42792
I01
sS'group_name'
p42793
Nsa(dp42794
S'description'
p42795
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42796
sS'cpp_type'
p42797
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42798
sS'default'
p42799
g3
sS'name'
p42800
S'block'
p42801
sS'required'
p42802
I00
sS'group_name'
p42803
Nsa(dp42804
S'description'
p42805
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42806
sS'cpp_type'
p42807
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42808
sS'default'
p42809
g3
sS'name'
p42810
S'control_tags'
p42811
sS'required'
p42812
I00
sS'group_name'
p42813
S'Advanced'
p42814
sa(dp42815
S'description'
p42816
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42817
sS'cpp_type'
p42818
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42819
sS'default'
p42820
g3
sS'name'
p42821
S'diag_save_in'
p42822
sS'required'
p42823
I00
sS'group_name'
p42824
S'Advanced'
p42825
sa(dp42826
S'description'
p42827
S'The string of displacements suitable for the problem statement\n'
p42828
sS'cpp_type'
p42829
S'std::vector<VariableName>'
p42830
sS'default'
p42831
g3
sS'name'
p42832
S'displacements'
p42833
sS'required'
p42834
I00
sS'group_name'
p42835
Nsa(dp42836
S'description'
p42837
S'Whether or not this kernel will be used as an eigen kernel\n'
p42838
sS'cpp_type'
p42839
S'bool'
p42840
sS'default'
p42841
S'0'
p42842
sS'name'
p42843
S'eigen_kernel'
p42844
sS'required'
p42845
I00
sS'group_name'
p42846
Nsa(dp42847
S'description'
p42848
S'Set the enabled status of the MooseObject.\n'
p42849
sS'cpp_type'
p42850
S'bool'
p42851
sS'default'
p42852
S'1'
p42853
sS'name'
p42854
S'enable'
p42855
sS'required'
p42856
I00
sS'group_name'
p42857
S'Advanced'
p42858
sa(dp42859
S'description'
p42860
S'Critical fracture energy density\n'
p42861
sS'cpp_type'
p42862
S'MaterialPropertyName'
p42863
sS'default'
p42864
S'gc_prop'
p42865
sS'name'
p42866
S'gc'
p42867
sS'required'
p42868
I00
sS'group_name'
p42869
Nsa(dp42870
S'description'
p42871
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42872
sS'cpp_type'
p42873
S'bool'
p42874
sS'default'
p42875
S'1'
p42876
sS'name'
p42877
S'implicit'
p42878
sS'required'
p42879
I00
sS'group_name'
p42880
S'Advanced'
p42881
sa(dp42882
S'description'
p42883
S'Interface width\n'
p42884
sS'cpp_type'
p42885
S'MaterialPropertyName'
p42886
sS'default'
p42887
S'l'
p42888
sS'name'
p42889
S'l_name'
p42890
sS'required'
p42891
I00
sS'group_name'
p42892
Nsa(dp42893
S'description'
p42894
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42895
sS'cpp_type'
p42896
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42897
sS'default'
p42898
g3
sS'name'
p42899
S'save_in'
p42900
sS'required'
p42901
I00
sS'group_name'
p42902
S'Advanced'
p42903
sa(dp42904
S'description'
p42905
S'The seed for the master random number generator\n'
p42906
sS'cpp_type'
p42907
S'unsigned int'
p42908
sS'default'
p42909
S'0'
p42910
sS'name'
p42911
S'seed'
p42912
sS'required'
p42913
I00
sS'group_name'
p42914
S'Advanced'
p42915
sa(dp42916
S'description'
p42917
g3
sS'cpp_type'
p42918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42919
sS'default'
p42920
S'AllenCahnPFFracture'
p42921
sS'name'
p42922
S'type'
p42923
sS'required'
p42924
I00
sS'group_name'
p42925
Nsa(dp42926
S'description'
p42927
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42928
sS'cpp_type'
p42929
S'bool'
p42930
sS'default'
p42931
S'0'
p42932
sS'name'
p42933
S'use_displaced_mesh'
p42934
sS'required'
p42935
I00
sS'group_name'
p42936
S'Advanced'
p42937
sa(dp42938
S'description'
p42939
S'The name of the variable that this Kernel operates on\n'
p42940
sS'cpp_type'
p42941
S'NonlinearVariableName'
p42942
sS'default'
p42943
g3
sS'name'
p42944
S'variable'
p42945
sS'required'
p42946
I01
sS'group_name'
p42947
Nsa(dp42948
S'description'
p42949
S'Viscosity parameter\n'
p42950
sS'cpp_type'
p42951
S'MaterialPropertyName'
p42952
sS'default'
p42953
S'visco'
p42954
sS'name'
p42955
S'visco_name'
p42956
sS'required'
p42957
I00
sS'group_name'
p42958
NsasS'name'
p42959
S'/Kernels/AllenCahnPFFracture'
p42960
sa(dp42961
S'description'
p42962
g3
sS'subblocks'
p42963
NsS'parameters'
p42964
(lp42965
(dp42966
S'description'
p42967
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42968
sS'cpp_type'
p42969
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42970
sS'default'
p42971
g3
sS'name'
p42972
S'block'
p42973
sS'required'
p42974
I00
sS'group_name'
p42975
Nsa(dp42976
S'description'
p42977
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42978
sS'cpp_type'
p42979
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42980
sS'default'
p42981
g3
sS'name'
p42982
S'control_tags'
p42983
sS'required'
p42984
I00
sS'group_name'
p42985
S'Advanced'
p42986
sa(dp42987
S'description'
p42988
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42989
sS'cpp_type'
p42990
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42991
sS'default'
p42992
g3
sS'name'
p42993
S'diag_save_in'
p42994
sS'required'
p42995
I00
sS'group_name'
p42996
S'Advanced'
p42997
sa(dp42998
S'description'
p42999
S'Whether or not this kernel will be used as an eigen kernel\n'
p43000
sS'cpp_type'
p43001
S'bool'
p43002
sS'default'
p43003
S'0'
p43004
sS'name'
p43005
S'eigen_kernel'
p43006
sS'required'
p43007
I00
sS'group_name'
p43008
Nsa(dp43009
S'description'
p43010
S'Set the enabled status of the MooseObject.\n'
p43011
sS'cpp_type'
p43012
S'bool'
p43013
sS'default'
p43014
S'1'
p43015
sS'name'
p43016
S'enable'
p43017
sS'required'
p43018
I00
sS'group_name'
p43019
S'Advanced'
p43020
sa(dp43021
S'description'
p43022
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43023
sS'cpp_type'
p43024
S'bool'
p43025
sS'default'
p43026
S'1'
p43027
sS'name'
p43028
S'implicit'
p43029
sS'required'
p43030
I00
sS'group_name'
p43031
S'Advanced'
p43032
sa(dp43033
S'description'
p43034
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43035
sS'cpp_type'
p43036
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43037
sS'default'
p43038
g3
sS'name'
p43039
S'save_in'
p43040
sS'required'
p43041
I00
sS'group_name'
p43042
S'Advanced'
p43043
sa(dp43044
S'description'
p43045
S'The seed for the master random number generator\n'
p43046
sS'cpp_type'
p43047
S'unsigned int'
p43048
sS'default'
p43049
S'0'
p43050
sS'name'
p43051
S'seed'
p43052
sS'required'
p43053
I00
sS'group_name'
p43054
S'Advanced'
p43055
sa(dp43056
S'description'
p43057
S'The Tensor to multiply the Diffusion operator by\n'
p43058
sS'cpp_type'
p43059
S'libMesh::TensorValue<double>'
p43060
sS'default'
p43061
g3
sS'name'
p43062
S'tensor_coeff'
p43063
sS'required'
p43064
I01
sS'group_name'
p43065
Nsa(dp43066
S'description'
p43067
g3
sS'cpp_type'
p43068
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43069
sS'default'
p43070
S'AnisotropicDiffusion'
p43071
sS'name'
p43072
S'type'
p43073
sS'required'
p43074
I00
sS'group_name'
p43075
Nsa(dp43076
S'description'
p43077
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43078
sS'cpp_type'
p43079
S'bool'
p43080
sS'default'
p43081
S'0'
p43082
sS'name'
p43083
S'use_displaced_mesh'
p43084
sS'required'
p43085
I00
sS'group_name'
p43086
S'Advanced'
p43087
sa(dp43088
S'description'
p43089
S'The name of the variable that this Kernel operates on\n'
p43090
sS'cpp_type'
p43091
S'NonlinearVariableName'
p43092
sS'default'
p43093
g3
sS'name'
p43094
S'variable'
p43095
sS'required'
p43096
I01
sS'group_name'
p43097
NsasS'name'
p43098
S'/Kernels/AnisotropicDiffusion'
p43099
sa(dp43100
S'description'
p43101
g3
sS'subblocks'
p43102
NsS'parameters'
p43103
(lp43104
(dp43105
S'description'
p43106
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43107
sS'cpp_type'
p43108
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43109
sS'default'
p43110
g3
sS'name'
p43111
S'block'
p43112
sS'required'
p43113
I00
sS'group_name'
p43114
Nsa(dp43115
S'description'
p43116
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43117
sS'cpp_type'
p43118
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43119
sS'default'
p43120
g3
sS'name'
p43121
S'control_tags'
p43122
sS'required'
p43123
I00
sS'group_name'
p43124
S'Advanced'
p43125
sa(dp43126
S'description'
p43127
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43128
sS'cpp_type'
p43129
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43130
sS'default'
p43131
g3
sS'name'
p43132
S'diag_save_in'
p43133
sS'required'
p43134
I00
sS'group_name'
p43135
S'Advanced'
p43136
sa(dp43137
S'description'
p43138
S'Whether or not this kernel will be used as an eigen kernel\n'
p43139
sS'cpp_type'
p43140
S'bool'
p43141
sS'default'
p43142
S'0'
p43143
sS'name'
p43144
S'eigen_kernel'
p43145
sS'required'
p43146
I00
sS'group_name'
p43147
Nsa(dp43148
S'description'
p43149
S'Set the enabled status of the MooseObject.\n'
p43150
sS'cpp_type'
p43151
S'bool'
p43152
sS'default'
p43153
S'1'
p43154
sS'name'
p43155
S'enable'
p43156
sS'required'
p43157
I00
sS'group_name'
p43158
S'Advanced'
p43159
sa(dp43160
S'description'
p43161
S'A function that describes the body force\n'
p43162
sS'cpp_type'
p43163
S'FunctionName'
p43164
sS'default'
p43165
S'1'
p43166
sS'name'
p43167
S'function'
p43168
sS'required'
p43169
I00
sS'group_name'
p43170
Nsa(dp43171
S'description'
p43172
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43173
sS'cpp_type'
p43174
S'bool'
p43175
sS'default'
p43176
S'1'
p43177
sS'name'
p43178
S'implicit'
p43179
sS'required'
p43180
I00
sS'group_name'
p43181
S'Advanced'
p43182
sa(dp43183
S'description'
p43184
S'A postprocessor whose value is multiplied by the body force\n'
p43185
sS'cpp_type'
p43186
S'PostprocessorName'
p43187
sS'default'
p43188
g3
sS'name'
p43189
S'postprocessor'
p43190
sS'required'
p43191
I00
sS'group_name'
p43192
Nsa(dp43193
S'description'
p43194
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43195
sS'cpp_type'
p43196
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43197
sS'default'
p43198
g3
sS'name'
p43199
S'save_in'
p43200
sS'required'
p43201
I00
sS'group_name'
p43202
S'Advanced'
p43203
sa(dp43204
S'description'
p43205
S'The seed for the master random number generator\n'
p43206
sS'cpp_type'
p43207
S'unsigned int'
p43208
sS'default'
p43209
S'0'
p43210
sS'name'
p43211
S'seed'
p43212
sS'required'
p43213
I00
sS'group_name'
p43214
S'Advanced'
p43215
sa(dp43216
S'description'
p43217
g3
sS'cpp_type'
p43218
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43219
sS'default'
p43220
S'BodyForce'
p43221
sS'name'
p43222
S'type'
p43223
sS'required'
p43224
I00
sS'group_name'
p43225
Nsa(dp43226
S'description'
p43227
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43228
sS'cpp_type'
p43229
S'bool'
p43230
sS'default'
p43231
S'0'
p43232
sS'name'
p43233
S'use_displaced_mesh'
p43234
sS'required'
p43235
I00
sS'group_name'
p43236
S'Advanced'
p43237
sa(dp43238
S'description'
p43239
S'Coefficent to multiply by the body force term\n'
p43240
sS'cpp_type'
p43241
S'double'
p43242
sS'default'
p43243
S'1'
p43244
sS'name'
p43245
S'value'
p43246
sS'required'
p43247
I00
sS'group_name'
p43248
Nsa(dp43249
S'description'
p43250
S'The name of the variable that this Kernel operates on\n'
p43251
sS'cpp_type'
p43252
S'NonlinearVariableName'
p43253
sS'default'
p43254
g3
sS'name'
p43255
S'variable'
p43256
sS'required'
p43257
I01
sS'group_name'
p43258
NsasS'name'
p43259
S'/Kernels/BodyForce'
p43260
sa(dp43261
S'description'
p43262
S'Cahn-Hilliard base Kernel\n'
p43263
sS'subblocks'
p43264
NsS'parameters'
p43265
(lp43266
(dp43267
S'description'
p43268
S'Vector of arguments of the mobility\n'
p43269
sS'cpp_type'
p43270
S'std::vector<VariableName>'
p43271
sS'default'
p43272
g3
sS'name'
p43273
S'args'
p43274
sS'required'
p43275
I00
sS'group_name'
p43276
Nsa(dp43277
S'description'
p43278
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43279
sS'cpp_type'
p43280
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43281
sS'default'
p43282
g3
sS'name'
p43283
S'block'
p43284
sS'required'
p43285
I00
sS'group_name'
p43286
Nsa(dp43287
S'description'
p43288
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43289
sS'cpp_type'
p43290
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43291
sS'default'
p43292
g3
sS'name'
p43293
S'control_tags'
p43294
sS'required'
p43295
I00
sS'group_name'
p43296
S'Advanced'
p43297
sa(dp43298
S'description'
p43299
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43300
sS'cpp_type'
p43301
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43302
sS'default'
p43303
g3
sS'name'
p43304
S'diag_save_in'
p43305
sS'required'
p43306
I00
sS'group_name'
p43307
S'Advanced'
p43308
sa(dp43309
S'description'
p43310
S'Whether or not this kernel will be used as an eigen kernel\n'
p43311
sS'cpp_type'
p43312
S'bool'
p43313
sS'default'
p43314
S'0'
p43315
sS'name'
p43316
S'eigen_kernel'
p43317
sS'required'
p43318
I00
sS'group_name'
p43319
Nsa(dp43320
S'description'
p43321
S'Set the enabled status of the MooseObject.\n'
p43322
sS'cpp_type'
p43323
S'bool'
p43324
sS'default'
p43325
S'1'
p43326
sS'name'
p43327
S'enable'
p43328
sS'required'
p43329
I00
sS'group_name'
p43330
S'Advanced'
p43331
sa(dp43332
S'description'
p43333
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43334
sS'cpp_type'
p43335
S'bool'
p43336
sS'default'
p43337
S'1'
p43338
sS'name'
p43339
S'implicit'
p43340
sS'required'
p43341
I00
sS'group_name'
p43342
S'Advanced'
p43343
sa(dp43344
S'description'
p43345
S'The mobility used with the kernel\n'
p43346
sS'cpp_type'
p43347
S'MaterialPropertyName'
p43348
sS'default'
p43349
S'M'
p43350
sS'name'
p43351
S'mob_name'
p43352
sS'required'
p43353
I00
sS'group_name'
p43354
Nsa(dp43355
S'description'
p43356
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43357
sS'cpp_type'
p43358
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43359
sS'default'
p43360
g3
sS'name'
p43361
S'save_in'
p43362
sS'required'
p43363
I00
sS'group_name'
p43364
S'Advanced'
p43365
sa(dp43366
S'description'
p43367
S'The seed for the master random number generator\n'
p43368
sS'cpp_type'
p43369
S'unsigned int'
p43370
sS'default'
p43371
S'0'
p43372
sS'name'
p43373
S'seed'
p43374
sS'required'
p43375
I00
sS'group_name'
p43376
S'Advanced'
p43377
sa(dp43378
S'description'
p43379
g3
sS'cpp_type'
p43380
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43381
sS'default'
p43382
S'CHBulkPFCTrad'
p43383
sS'name'
p43384
S'type'
p43385
sS'required'
p43386
I00
sS'group_name'
p43387
Nsa(dp43388
S'description'
p43389
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43390
sS'cpp_type'
p43391
S'bool'
p43392
sS'default'
p43393
S'0'
p43394
sS'name'
p43395
S'use_displaced_mesh'
p43396
sS'required'
p43397
I00
sS'group_name'
p43398
S'Advanced'
p43399
sa(dp43400
S'description'
p43401
S'The name of the variable that this Kernel operates on\n'
p43402
sS'cpp_type'
p43403
S'NonlinearVariableName'
p43404
sS'default'
p43405
g3
sS'name'
p43406
S'variable'
p43407
sS'required'
p43408
I01
sS'group_name'
p43409
NsasS'name'
p43410
S'/Kernels/CHBulkPFCTrad'
p43411
sa(dp43412
S'description'
p43413
S'Split with a variable that holds the Laplacian of a phase field variable.\n'
p43414
sS'subblocks'
p43415
NsS'parameters'
p43416
(lp43417
(dp43418
S'description'
p43419
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43420
sS'cpp_type'
p43421
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43422
sS'default'
p43423
g3
sS'name'
p43424
S'block'
p43425
sS'required'
p43426
I00
sS'group_name'
p43427
Nsa(dp43428
S'description'
p43429
S'Field variable to take the Laplacian of\n'
p43430
sS'cpp_type'
p43431
S'std::vector<VariableName>'
p43432
sS'default'
p43433
g3
sS'name'
p43434
S'c'
p43435
sS'required'
p43436
I01
sS'group_name'
p43437
Nsa(dp43438
S'description'
p43439
S'Name of coefficient\n'
p43440
sS'cpp_type'
p43441
S'MaterialPropertyName'
p43442
sS'default'
p43443
g3
sS'name'
p43444
S'coeff_name'
p43445
sS'required'
p43446
I01
sS'group_name'
p43447
Nsa(dp43448
S'description'
p43449
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43450
sS'cpp_type'
p43451
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43452
sS'default'
p43453
g3
sS'name'
p43454
S'control_tags'
p43455
sS'required'
p43456
I00
sS'group_name'
p43457
S'Advanced'
p43458
sa(dp43459
S'description'
p43460
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43461
sS'cpp_type'
p43462
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43463
sS'default'
p43464
g3
sS'name'
p43465
S'diag_save_in'
p43466
sS'required'
p43467
I00
sS'group_name'
p43468
S'Advanced'
p43469
sa(dp43470
S'description'
p43471
S'Whether or not this kernel will be used as an eigen kernel\n'
p43472
sS'cpp_type'
p43473
S'bool'
p43474
sS'default'
p43475
S'0'
p43476
sS'name'
p43477
S'eigen_kernel'
p43478
sS'required'
p43479
I00
sS'group_name'
p43480
Nsa(dp43481
S'description'
p43482
S'Set the enabled status of the MooseObject.\n'
p43483
sS'cpp_type'
p43484
S'bool'
p43485
sS'default'
p43486
S'1'
p43487
sS'name'
p43488
S'enable'
p43489
sS'required'
p43490
I00
sS'group_name'
p43491
S'Advanced'
p43492
sa(dp43493
S'description'
p43494
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43495
sS'cpp_type'
p43496
S'bool'
p43497
sS'default'
p43498
S'1'
p43499
sS'name'
p43500
S'implicit'
p43501
sS'required'
p43502
I00
sS'group_name'
p43503
S'Advanced'
p43504
sa(dp43505
S'description'
p43506
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43507
sS'cpp_type'
p43508
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43509
sS'default'
p43510
g3
sS'name'
p43511
S'save_in'
p43512
sS'required'
p43513
I00
sS'group_name'
p43514
S'Advanced'
p43515
sa(dp43516
S'description'
p43517
S'The seed for the master random number generator\n'
p43518
sS'cpp_type'
p43519
S'unsigned int'
p43520
sS'default'
p43521
S'0'
p43522
sS'name'
p43523
S'seed'
p43524
sS'required'
p43525
I00
sS'group_name'
p43526
S'Advanced'
p43527
sa(dp43528
S'description'
p43529
g3
sS'cpp_type'
p43530
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43531
sS'default'
p43532
S'CHCpldPFCTrad'
p43533
sS'name'
p43534
S'type'
p43535
sS'required'
p43536
I00
sS'group_name'
p43537
Nsa(dp43538
S'description'
p43539
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43540
sS'cpp_type'
p43541
S'bool'
p43542
sS'default'
p43543
S'0'
p43544
sS'name'
p43545
S'use_displaced_mesh'
p43546
sS'required'
p43547
I00
sS'group_name'
p43548
S'Advanced'
p43549
sa(dp43550
S'description'
p43551
S'The name of the variable that this Kernel operates on\n'
p43552
sS'cpp_type'
p43553
S'NonlinearVariableName'
p43554
sS'default'
p43555
g3
sS'name'
p43556
S'variable'
p43557
sS'required'
p43558
I01
sS'group_name'
p43559
NsasS'name'
p43560
S'/Kernels/CHCpldPFCTrad'
p43561
sa(dp43562
S'description'
p43563
S'Gradient energy Cahn-Hilliard Kernel with a scalar (isotropic) mobility\n'
p43564
sS'subblocks'
p43565
NsS'parameters'
p43566
(lp43567
(dp43568
S'description'
p43569
S'Vector of arguments of the mobility\n'
p43570
sS'cpp_type'
p43571
S'std::vector<VariableName>'
p43572
sS'default'
p43573
g3
sS'name'
p43574
S'args'
p43575
sS'required'
p43576
I00
sS'group_name'
p43577
Nsa(dp43578
S'description'
p43579
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43580
sS'cpp_type'
p43581
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43582
sS'default'
p43583
g3
sS'name'
p43584
S'block'
p43585
sS'required'
p43586
I00
sS'group_name'
p43587
Nsa(dp43588
S'description'
p43589
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43590
sS'cpp_type'
p43591
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43592
sS'default'
p43593
g3
sS'name'
p43594
S'control_tags'
p43595
sS'required'
p43596
I00
sS'group_name'
p43597
S'Advanced'
p43598
sa(dp43599
S'description'
p43600
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43601
sS'cpp_type'
p43602
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43603
sS'default'
p43604
g3
sS'name'
p43605
S'diag_save_in'
p43606
sS'required'
p43607
I00
sS'group_name'
p43608
S'Advanced'
p43609
sa(dp43610
S'description'
p43611
S'Whether or not this kernel will be used as an eigen kernel\n'
p43612
sS'cpp_type'
p43613
S'bool'
p43614
sS'default'
p43615
S'0'
p43616
sS'name'
p43617
S'eigen_kernel'
p43618
sS'required'
p43619
I00
sS'group_name'
p43620
Nsa(dp43621
S'description'
p43622
S'Set the enabled status of the MooseObject.\n'
p43623
sS'cpp_type'
p43624
S'bool'
p43625
sS'default'
p43626
S'1'
p43627
sS'name'
p43628
S'enable'
p43629
sS'required'
p43630
I00
sS'group_name'
p43631
S'Advanced'
p43632
sa(dp43633
S'description'
p43634
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43635
sS'cpp_type'
p43636
S'bool'
p43637
sS'default'
p43638
S'1'
p43639
sS'name'
p43640
S'implicit'
p43641
sS'required'
p43642
I00
sS'group_name'
p43643
S'Advanced'
p43644
sa(dp43645
S'description'
p43646
S'The kappa used with the kernel\n'
p43647
sS'cpp_type'
p43648
S'MaterialPropertyName'
p43649
sS'default'
p43650
g3
sS'name'
p43651
S'kappa_name'
p43652
sS'required'
p43653
I01
sS'group_name'
p43654
Nsa(dp43655
S'description'
p43656
S'The mobility used with the kernel\n'
p43657
sS'cpp_type'
p43658
S'MaterialPropertyName'
p43659
sS'default'
p43660
g3
sS'name'
p43661
S'mob_name'
p43662
sS'required'
p43663
I01
sS'group_name'
p43664
Nsa(dp43665
S'description'
p43666
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43667
sS'cpp_type'
p43668
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43669
sS'default'
p43670
g3
sS'name'
p43671
S'save_in'
p43672
sS'required'
p43673
I00
sS'group_name'
p43674
S'Advanced'
p43675
sa(dp43676
S'description'
p43677
S'The seed for the master random number generator\n'
p43678
sS'cpp_type'
p43679
S'unsigned int'
p43680
sS'default'
p43681
S'0'
p43682
sS'name'
p43683
S'seed'
p43684
sS'required'
p43685
I00
sS'group_name'
p43686
S'Advanced'
p43687
sa(dp43688
S'description'
p43689
g3
sS'cpp_type'
p43690
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43691
sS'default'
p43692
S'CHInterface'
p43693
sS'name'
p43694
S'type'
p43695
sS'required'
p43696
I00
sS'group_name'
p43697
Nsa(dp43698
S'description'
p43699
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43700
sS'cpp_type'
p43701
S'bool'
p43702
sS'default'
p43703
S'0'
p43704
sS'name'
p43705
S'use_displaced_mesh'
p43706
sS'required'
p43707
I00
sS'group_name'
p43708
S'Advanced'
p43709
sa(dp43710
S'description'
p43711
S'The name of the variable that this Kernel operates on\n'
p43712
sS'cpp_type'
p43713
S'NonlinearVariableName'
p43714
sS'default'
p43715
g3
sS'name'
p43716
S'variable'
p43717
sS'required'
p43718
I01
sS'group_name'
p43719
NsasS'name'
p43720
S'/Kernels/CHInterface'
p43721
sa(dp43722
S'description'
p43723
S'Gradient energy Cahn-Hilliard Kernel with a tensor (anisotropic) mobility\n'
p43724
sS'subblocks'
p43725
NsS'parameters'
p43726
(lp43727
(dp43728
S'description'
p43729
S'Vector of arguments of the mobility\n'
p43730
sS'cpp_type'
p43731
S'std::vector<VariableName>'
p43732
sS'default'
p43733
g3
sS'name'
p43734
S'args'
p43735
sS'required'
p43736
I00
sS'group_name'
p43737
Nsa(dp43738
S'description'
p43739
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43740
sS'cpp_type'
p43741
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43742
sS'default'
p43743
g3
sS'name'
p43744
S'block'
p43745
sS'required'
p43746
I00
sS'group_name'
p43747
Nsa(dp43748
S'description'
p43749
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43750
sS'cpp_type'
p43751
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43752
sS'default'
p43753
g3
sS'name'
p43754
S'control_tags'
p43755
sS'required'
p43756
I00
sS'group_name'
p43757
S'Advanced'
p43758
sa(dp43759
S'description'
p43760
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43761
sS'cpp_type'
p43762
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43763
sS'default'
p43764
g3
sS'name'
p43765
S'diag_save_in'
p43766
sS'required'
p43767
I00
sS'group_name'
p43768
S'Advanced'
p43769
sa(dp43770
S'description'
p43771
S'Whether or not this kernel will be used as an eigen kernel\n'
p43772
sS'cpp_type'
p43773
S'bool'
p43774
sS'default'
p43775
S'0'
p43776
sS'name'
p43777
S'eigen_kernel'
p43778
sS'required'
p43779
I00
sS'group_name'
p43780
Nsa(dp43781
S'description'
p43782
S'Set the enabled status of the MooseObject.\n'
p43783
sS'cpp_type'
p43784
S'bool'
p43785
sS'default'
p43786
S'1'
p43787
sS'name'
p43788
S'enable'
p43789
sS'required'
p43790
I00
sS'group_name'
p43791
S'Advanced'
p43792
sa(dp43793
S'description'
p43794
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43795
sS'cpp_type'
p43796
S'bool'
p43797
sS'default'
p43798
S'1'
p43799
sS'name'
p43800
S'implicit'
p43801
sS'required'
p43802
I00
sS'group_name'
p43803
S'Advanced'
p43804
sa(dp43805
S'description'
p43806
S'The kappa used with the kernel\n'
p43807
sS'cpp_type'
p43808
S'MaterialPropertyName'
p43809
sS'default'
p43810
g3
sS'name'
p43811
S'kappa_name'
p43812
sS'required'
p43813
I01
sS'group_name'
p43814
Nsa(dp43815
S'description'
p43816
S'The mobility used with the kernel\n'
p43817
sS'cpp_type'
p43818
S'MaterialPropertyName'
p43819
sS'default'
p43820
g3
sS'name'
p43821
S'mob_name'
p43822
sS'required'
p43823
I01
sS'group_name'
p43824
Nsa(dp43825
S'description'
p43826
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43827
sS'cpp_type'
p43828
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43829
sS'default'
p43830
g3
sS'name'
p43831
S'save_in'
p43832
sS'required'
p43833
I00
sS'group_name'
p43834
S'Advanced'
p43835
sa(dp43836
S'description'
p43837
S'The seed for the master random number generator\n'
p43838
sS'cpp_type'
p43839
S'unsigned int'
p43840
sS'default'
p43841
S'0'
p43842
sS'name'
p43843
S'seed'
p43844
sS'required'
p43845
I00
sS'group_name'
p43846
S'Advanced'
p43847
sa(dp43848
S'description'
p43849
g3
sS'cpp_type'
p43850
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43851
sS'default'
p43852
S'CHInterfaceAniso'
p43853
sS'name'
p43854
S'type'
p43855
sS'required'
p43856
I00
sS'group_name'
p43857
Nsa(dp43858
S'description'
p43859
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43860
sS'cpp_type'
p43861
S'bool'
p43862
sS'default'
p43863
S'0'
p43864
sS'name'
p43865
S'use_displaced_mesh'
p43866
sS'required'
p43867
I00
sS'group_name'
p43868
S'Advanced'
p43869
sa(dp43870
S'description'
p43871
S'The name of the variable that this Kernel operates on\n'
p43872
sS'cpp_type'
p43873
S'NonlinearVariableName'
p43874
sS'default'
p43875
g3
sS'name'
p43876
S'variable'
p43877
sS'required'
p43878
I01
sS'group_name'
p43879
NsasS'name'
p43880
S'/Kernels/CHInterfaceAniso'
p43881
sa(dp43882
S'description'
p43883
S'Simple demonstration Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p43884
sS'subblocks'
p43885
NsS'parameters'
p43886
(lp43887
(dp43888
S'description'
p43889
S'Vector of arguments of the mobility\n'
p43890
sS'cpp_type'
p43891
S'std::vector<VariableName>'
p43892
sS'default'
p43893
g3
sS'name'
p43894
S'args'
p43895
sS'required'
p43896
I00
sS'group_name'
p43897
Nsa(dp43898
S'description'
p43899
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43900
sS'cpp_type'
p43901
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43902
sS'default'
p43903
g3
sS'name'
p43904
S'block'
p43905
sS'required'
p43906
I00
sS'group_name'
p43907
Nsa(dp43908
S'description'
p43909
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43910
sS'cpp_type'
p43911
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43912
sS'default'
p43913
g3
sS'name'
p43914
S'control_tags'
p43915
sS'required'
p43916
I00
sS'group_name'
p43917
S'Advanced'
p43918
sa(dp43919
S'description'
p43920
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43921
sS'cpp_type'
p43922
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43923
sS'default'
p43924
g3
sS'name'
p43925
S'diag_save_in'
p43926
sS'required'
p43927
I00
sS'group_name'
p43928
S'Advanced'
p43929
sa(dp43930
S'description'
p43931
S'Whether or not this kernel will be used as an eigen kernel\n'
p43932
sS'cpp_type'
p43933
S'bool'
p43934
sS'default'
p43935
S'0'
p43936
sS'name'
p43937
S'eigen_kernel'
p43938
sS'required'
p43939
I00
sS'group_name'
p43940
Nsa(dp43941
S'description'
p43942
S'Set the enabled status of the MooseObject.\n'
p43943
sS'cpp_type'
p43944
S'bool'
p43945
sS'default'
p43946
S'1'
p43947
sS'name'
p43948
S'enable'
p43949
sS'required'
p43950
I00
sS'group_name'
p43951
S'Advanced'
p43952
sa(dp43953
S'description'
p43954
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43955
sS'cpp_type'
p43956
S'bool'
p43957
sS'default'
p43958
S'1'
p43959
sS'name'
p43960
S'implicit'
p43961
sS'required'
p43962
I00
sS'group_name'
p43963
S'Advanced'
p43964
sa(dp43965
S'description'
p43966
S'The mobility used with the kernel\n'
p43967
sS'cpp_type'
p43968
S'MaterialPropertyName'
p43969
sS'default'
p43970
S'M'
p43971
sS'name'
p43972
S'mob_name'
p43973
sS'required'
p43974
I00
sS'group_name'
p43975
Nsa(dp43976
S'description'
p43977
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43978
sS'cpp_type'
p43979
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43980
sS'default'
p43981
g3
sS'name'
p43982
S'save_in'
p43983
sS'required'
p43984
I00
sS'group_name'
p43985
S'Advanced'
p43986
sa(dp43987
S'description'
p43988
S'The seed for the master random number generator\n'
p43989
sS'cpp_type'
p43990
S'unsigned int'
p43991
sS'default'
p43992
S'0'
p43993
sS'name'
p43994
S'seed'
p43995
sS'required'
p43996
I00
sS'group_name'
p43997
S'Advanced'
p43998
sa(dp43999
S'description'
p44000
g3
sS'cpp_type'
p44001
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44002
sS'default'
p44003
S'CHMath'
p44004
sS'name'
p44005
S'type'
p44006
sS'required'
p44007
I00
sS'group_name'
p44008
Nsa(dp44009
S'description'
p44010
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44011
sS'cpp_type'
p44012
S'bool'
p44013
sS'default'
p44014
S'0'
p44015
sS'name'
p44016
S'use_displaced_mesh'
p44017
sS'required'
p44018
I00
sS'group_name'
p44019
S'Advanced'
p44020
sa(dp44021
S'description'
p44022
S'The name of the variable that this Kernel operates on\n'
p44023
sS'cpp_type'
p44024
S'NonlinearVariableName'
p44025
sS'default'
p44026
g3
sS'name'
p44027
S'variable'
p44028
sS'required'
p44029
I01
sS'group_name'
p44030
NsasS'name'
p44031
S'/Kernels/CHMath'
p44032
sa(dp44033
S'description'
p44034
S'Cahn-Hilliard residual for the RFF form of the phase field crystal model\n'
p44035
sS'subblocks'
p44036
NsS'parameters'
p44037
(lp44038
(dp44039
S'description'
p44040
S'The D mobility used with the kernel\n'
p44041
sS'cpp_type'
p44042
S'MaterialPropertyName'
p44043
sS'default'
p44044
S'DM'
p44045
sS'name'
p44046
S'Dmob_name'
p44047
sS'required'
p44048
I00
sS'group_name'
p44049
Nsa(dp44050
S'description'
p44051
S'Constants on Taylor Series\n'
p44052
sS'cpp_type'
p44053
S'double'
p44054
sS'default'
p44055
S'1'
p44056
sS'name'
p44057
S'a'
p44058
sS'required'
p44059
I00
sS'group_name'
p44060
Nsa(dp44061
S'description'
p44062
S'Constants on Taylor Series\n'
p44063
sS'cpp_type'
p44064
S'double'
p44065
sS'default'
p44066
S'1'
p44067
sS'name'
p44068
S'b'
p44069
sS'required'
p44070
I00
sS'group_name'
p44071
Nsa(dp44072
S'description'
p44073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44074
sS'cpp_type'
p44075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44076
sS'default'
p44077
g3
sS'name'
p44078
S'block'
p44079
sS'required'
p44080
I00
sS'group_name'
p44081
Nsa(dp44082
S'description'
p44083
S'Constants on Taylor Series\n'
p44084
sS'cpp_type'
p44085
S'double'
p44086
sS'default'
p44087
S'1'
p44088
sS'name'
p44089
S'c'
p44090
sS'required'
p44091
I00
sS'group_name'
p44092
Nsa(dp44093
S'description'
p44094
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44095
sS'cpp_type'
p44096
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44097
sS'default'
p44098
g3
sS'name'
p44099
S'control_tags'
p44100
sS'required'
p44101
I00
sS'group_name'
p44102
S'Advanced'
p44103
sa(dp44104
S'description'
p44105
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44106
sS'cpp_type'
p44107
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44108
sS'default'
p44109
g3
sS'name'
p44110
S'diag_save_in'
p44111
sS'required'
p44112
I00
sS'group_name'
p44113
S'Advanced'
p44114
sa(dp44115
S'description'
p44116
S'Whether or not this kernel will be used as an eigen kernel\n'
p44117
sS'cpp_type'
p44118
S'bool'
p44119
sS'default'
p44120
S'0'
p44121
sS'name'
p44122
S'eigen_kernel'
p44123
sS'required'
p44124
I00
sS'group_name'
p44125
Nsa(dp44126
S'description'
p44127
S'Set the enabled status of the MooseObject.\n'
p44128
sS'cpp_type'
p44129
S'bool'
p44130
sS'default'
p44131
S'1'
p44132
sS'name'
p44133
S'enable'
p44134
sS'required'
p44135
I00
sS'group_name'
p44136
S'Advanced'
p44137
sa(dp44138
S'description'
p44139
S'Jacobian information for the mobility is defined\n'
p44140
sS'cpp_type'
p44141
S'bool'
p44142
sS'default'
p44143
S'0'
p44144
sS'name'
p44145
S'has_MJac'
p44146
sS'required'
p44147
I00
sS'group_name'
p44148
Nsa(dp44149
S'description'
p44150
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44151
sS'cpp_type'
p44152
S'bool'
p44153
sS'default'
p44154
S'1'
p44155
sS'name'
p44156
S'implicit'
p44157
sS'required'
p44158
I00
sS'group_name'
p44159
S'Advanced'
p44160
sa(dp44161
S'name'
p44162
S'log_approach'
p44163
sS'cpp_type'
p44164
S'MooseEnum'
p44165
sS'default'
p44166
g3
sS'description'
p44167
S'Which approach will be used to handle the natural log\n'
p44168
sS'required'
p44169
I01
sS'options'
p44170
S'tolerance cancelation expansion nothing'
p44171
sS'group_name'
p44172
Nsa(dp44173
S'description'
p44174
S'The mobility used with the kernel\n'
p44175
sS'cpp_type'
p44176
S'MaterialPropertyName'
p44177
sS'default'
p44178
S'M'
p44179
sS'name'
p44180
S'mob_name'
p44181
sS'required'
p44182
I00
sS'group_name'
p44183
Nsa(dp44184
S'description'
p44185
S'Number of terms used in the Taylor expansion of the natural log term\n'
p44186
sS'cpp_type'
p44187
S'double'
p44188
sS'default'
p44189
S'4'
p44190
sS'name'
p44191
S'n_exp_terms'
p44192
sS'required'
p44193
I00
sS'group_name'
p44194
Nsa(dp44195
S'description'
p44196
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44197
sS'cpp_type'
p44198
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44199
sS'default'
p44200
g3
sS'name'
p44201
S'save_in'
p44202
sS'required'
p44203
I00
sS'group_name'
p44204
S'Advanced'
p44205
sa(dp44206
S'description'
p44207
S'The seed for the master random number generator\n'
p44208
sS'cpp_type'
p44209
S'unsigned int'
p44210
sS'default'
p44211
S'0'
p44212
sS'name'
p44213
S'seed'
p44214
sS'required'
p44215
I00
sS'group_name'
p44216
S'Advanced'
p44217
sa(dp44218
S'description'
p44219
S'Tolerance used when the tolerance approach is chosen\n'
p44220
sS'cpp_type'
p44221
S'double'
p44222
sS'default'
p44223
S'1e-09'
p44224
sS'name'
p44225
S'tol'
p44226
sS'required'
p44227
I00
sS'group_name'
p44228
Nsa(dp44229
S'description'
p44230
g3
sS'cpp_type'
p44231
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44232
sS'default'
p44233
S'CHPFCRFF'
p44234
sS'name'
p44235
S'type'
p44236
sS'required'
p44237
I00
sS'group_name'
p44238
Nsa(dp44239
S'description'
p44240
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44241
sS'cpp_type'
p44242
S'bool'
p44243
sS'default'
p44244
S'0'
p44245
sS'name'
p44246
S'use_displaced_mesh'
p44247
sS'required'
p44248
I00
sS'group_name'
p44249
S'Advanced'
p44250
sa(dp44251
S'description'
p44252
S'Array of names of the real parts of the L variables\n'
p44253
sS'cpp_type'
p44254
S'std::vector<VariableName>'
p44255
sS'default'
p44256
g3
sS'name'
p44257
S'v'
p44258
sS'required'
p44259
I01
sS'group_name'
p44260
Nsa(dp44261
S'description'
p44262
S'The name of the variable that this Kernel operates on\n'
p44263
sS'cpp_type'
p44264
S'NonlinearVariableName'
p44265
sS'default'
p44266
g3
sS'name'
p44267
S'variable'
p44268
sS'required'
p44269
I01
sS'group_name'
p44270
NsasS'name'
p44271
S'/Kernels/CHPFCRFF'
p44272
sa(dp44273
S'description'
p44274
g3
sS'subblocks'
p44275
NsS'parameters'
p44276
(lp44277
(dp44278
S'description'
p44279
S'Base name for the complex L variables\n'
p44280
sS'cpp_type'
p44281
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44282
sS'default'
p44283
g3
sS'name'
p44284
S'L_name_base'
p44285
sS'required'
p44286
I01
sS'group_name'
p44287
Nsa(dp44288
S'name'
p44289
S'log_approach'
p44290
sS'cpp_type'
p44291
S'MooseEnum'
p44292
sS'default'
p44293
g3
sS'description'
p44294
S'Which approach will be used to handle the natural log\n'
p44295
sS'required'
p44296
I01
sS'options'
p44297
S'tolerance cancelation expansion'
p44298
sS'group_name'
p44299
Nsa(dp44300
S'description'
p44301
S'The mobility used for n in this model\n'
p44302
sS'cpp_type'
p44303
S'MaterialPropertyName'
p44304
sS'default'
p44305
S'M'
p44306
sS'name'
p44307
S'mob_name'
p44308
sS'required'
p44309
I00
sS'group_name'
p44310
Nsa(dp44311
S'description'
p44312
S'Number of terms used in the Taylor expansion of the natural log term\n'
p44313
sS'cpp_type'
p44314
S'double'
p44315
sS'default'
p44316
S'4'
p44317
sS'name'
p44318
S'n_exp_terms'
p44319
sS'required'
p44320
I00
sS'group_name'
p44321
Nsa(dp44322
S'description'
p44323
S'Variable name used for the n variable\n'
p44324
sS'cpp_type'
p44325
S'NonlinearVariableName'
p44326
sS'default'
p44327
g3
sS'name'
p44328
S'n_name'
p44329
sS'required'
p44330
I01
sS'group_name'
p44331
Nsa(dp44332
S'description'
p44333
S'specifies the number of complex L variables will be solved for\n'
p44334
sS'cpp_type'
p44335
S'unsigned int'
p44336
sS'default'
p44337
g3
sS'name'
p44338
S'num_L'
p44339
sS'required'
p44340
I01
sS'group_name'
p44341
Nsa(dp44342
S'description'
p44343
S'Tolerance used when the tolerance approach is chosen\n'
p44344
sS'cpp_type'
p44345
S'double'
p44346
sS'default'
p44347
S'1e-09'
p44348
sS'name'
p44349
S'tol'
p44350
sS'required'
p44351
I00
sS'group_name'
p44352
Nsa(dp44353
S'description'
p44354
S'Whether to use displaced mesh in the kernels\n'
p44355
sS'cpp_type'
p44356
S'bool'
p44357
sS'default'
p44358
S'0'
p44359
sS'name'
p44360
S'use_displaced_mesh'
p44361
sS'required'
p44362
I00
sS'group_name'
p44363
NsasS'name'
p44364
S'/Kernels/CHPFCRFFSplitKernel'
p44365
sa(dp44366
S'description'
p44367
S'Chemical potential kernel in Split Cahn-Hilliard that solves chemical potential in a weak form\n'
p44368
sS'subblocks'
p44369
NsS'parameters'
p44370
(lp44371
(dp44372
S'description'
p44373
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44374
sS'cpp_type'
p44375
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44376
sS'default'
p44377
g3
sS'name'
p44378
S'block'
p44379
sS'required'
p44380
I00
sS'group_name'
p44381
Nsa(dp44382
S'description'
p44383
S'Concentration\n'
p44384
sS'cpp_type'
p44385
S'std::vector<VariableName>'
p44386
sS'default'
p44387
g3
sS'name'
p44388
S'c'
p44389
sS'required'
p44390
I01
sS'group_name'
p44391
Nsa(dp44392
S'description'
p44393
S'Chemical potential property name\n'
p44394
sS'cpp_type'
p44395
S'MaterialPropertyName'
p44396
sS'default'
p44397
g3
sS'name'
p44398
S'chemical_potential_prop'
p44399
sS'required'
p44400
I01
sS'group_name'
p44401
Nsa(dp44402
S'description'
p44403
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44404
sS'cpp_type'
p44405
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44406
sS'default'
p44407
g3
sS'name'
p44408
S'control_tags'
p44409
sS'required'
p44410
I00
sS'group_name'
p44411
S'Advanced'
p44412
sa(dp44413
S'description'
p44414
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44415
sS'cpp_type'
p44416
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44417
sS'default'
p44418
g3
sS'name'
p44419
S'diag_save_in'
p44420
sS'required'
p44421
I00
sS'group_name'
p44422
S'Advanced'
p44423
sa(dp44424
S'description'
p44425
S'Whether or not this kernel will be used as an eigen kernel\n'
p44426
sS'cpp_type'
p44427
S'bool'
p44428
sS'default'
p44429
S'0'
p44430
sS'name'
p44431
S'eigen_kernel'
p44432
sS'required'
p44433
I00
sS'group_name'
p44434
Nsa(dp44435
S'description'
p44436
S'Set the enabled status of the MooseObject.\n'
p44437
sS'cpp_type'
p44438
S'bool'
p44439
sS'default'
p44440
S'1'
p44441
sS'name'
p44442
S'enable'
p44443
sS'required'
p44444
I00
sS'group_name'
p44445
S'Advanced'
p44446
sa(dp44447
S'description'
p44448
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44449
sS'cpp_type'
p44450
S'bool'
p44451
sS'default'
p44452
S'1'
p44453
sS'name'
p44454
S'implicit'
p44455
sS'required'
p44456
I00
sS'group_name'
p44457
S'Advanced'
p44458
sa(dp44459
S'description'
p44460
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44461
sS'cpp_type'
p44462
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44463
sS'default'
p44464
g3
sS'name'
p44465
S'save_in'
p44466
sS'required'
p44467
I00
sS'group_name'
p44468
S'Advanced'
p44469
sa(dp44470
S'description'
p44471
S'The seed for the master random number generator\n'
p44472
sS'cpp_type'
p44473
S'unsigned int'
p44474
sS'default'
p44475
S'0'
p44476
sS'name'
p44477
S'seed'
p44478
sS'required'
p44479
I00
sS'group_name'
p44480
S'Advanced'
p44481
sa(dp44482
S'description'
p44483
g3
sS'cpp_type'
p44484
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44485
sS'default'
p44486
S'CHSplitChemicalPotential'
p44487
sS'name'
p44488
S'type'
p44489
sS'required'
p44490
I00
sS'group_name'
p44491
Nsa(dp44492
S'description'
p44493
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44494
sS'cpp_type'
p44495
S'bool'
p44496
sS'default'
p44497
S'0'
p44498
sS'name'
p44499
S'use_displaced_mesh'
p44500
sS'required'
p44501
I00
sS'group_name'
p44502
S'Advanced'
p44503
sa(dp44504
S'description'
p44505
S'The name of the variable that this Kernel operates on\n'
p44506
sS'cpp_type'
p44507
S'NonlinearVariableName'
p44508
sS'default'
p44509
g3
sS'name'
p44510
S'variable'
p44511
sS'required'
p44512
I01
sS'group_name'
p44513
NsasS'name'
p44514
S'/Kernels/CHSplitChemicalPotential'
p44515
sa(dp44516
S'description'
p44517
S'Concentration kernel in Split Cahn-Hilliard that solves chemical potential in a weak form\n'
p44518
sS'subblocks'
p44519
NsS'parameters'
p44520
(lp44521
(dp44522
S'description'
p44523
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44524
sS'cpp_type'
p44525
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44526
sS'default'
p44527
g3
sS'name'
p44528
S'block'
p44529
sS'required'
p44530
I00
sS'group_name'
p44531
Nsa(dp44532
S'description'
p44533
S'Chemical potential variable\n'
p44534
sS'cpp_type'
p44535
S'std::vector<VariableName>'
p44536
sS'default'
p44537
g3
sS'name'
p44538
S'chemical_potential_var'
p44539
sS'required'
p44540
I01
sS'group_name'
p44541
Nsa(dp44542
S'description'
p44543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44544
sS'cpp_type'
p44545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44546
sS'default'
p44547
g3
sS'name'
p44548
S'control_tags'
p44549
sS'required'
p44550
I00
sS'group_name'
p44551
S'Advanced'
p44552
sa(dp44553
S'description'
p44554
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44555
sS'cpp_type'
p44556
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44557
sS'default'
p44558
g3
sS'name'
p44559
S'diag_save_in'
p44560
sS'required'
p44561
I00
sS'group_name'
p44562
S'Advanced'
p44563
sa(dp44564
S'description'
p44565
S'Whether or not this kernel will be used as an eigen kernel\n'
p44566
sS'cpp_type'
p44567
S'bool'
p44568
sS'default'
p44569
S'0'
p44570
sS'name'
p44571
S'eigen_kernel'
p44572
sS'required'
p44573
I00
sS'group_name'
p44574
Nsa(dp44575
S'description'
p44576
S'Set the enabled status of the MooseObject.\n'
p44577
sS'cpp_type'
p44578
S'bool'
p44579
sS'default'
p44580
S'1'
p44581
sS'name'
p44582
S'enable'
p44583
sS'required'
p44584
I00
sS'group_name'
p44585
S'Advanced'
p44586
sa(dp44587
S'description'
p44588
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44589
sS'cpp_type'
p44590
S'bool'
p44591
sS'default'
p44592
S'1'
p44593
sS'name'
p44594
S'implicit'
p44595
sS'required'
p44596
I00
sS'group_name'
p44597
S'Advanced'
p44598
sa(dp44599
S'description'
p44600
S'Mobility property name\n'
p44601
sS'cpp_type'
p44602
S'MaterialPropertyName'
p44603
sS'default'
p44604
g3
sS'name'
p44605
S'mobility'
p44606
sS'required'
p44607
I01
sS'group_name'
p44608
Nsa(dp44609
S'description'
p44610
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44611
sS'cpp_type'
p44612
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44613
sS'default'
p44614
g3
sS'name'
p44615
S'save_in'
p44616
sS'required'
p44617
I00
sS'group_name'
p44618
S'Advanced'
p44619
sa(dp44620
S'description'
p44621
S'The seed for the master random number generator\n'
p44622
sS'cpp_type'
p44623
S'unsigned int'
p44624
sS'default'
p44625
S'0'
p44626
sS'name'
p44627
S'seed'
p44628
sS'required'
p44629
I00
sS'group_name'
p44630
S'Advanced'
p44631
sa(dp44632
S'description'
p44633
g3
sS'cpp_type'
p44634
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44635
sS'default'
p44636
S'CHSplitConcentration'
p44637
sS'name'
p44638
S'type'
p44639
sS'required'
p44640
I00
sS'group_name'
p44641
Nsa(dp44642
S'description'
p44643
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44644
sS'cpp_type'
p44645
S'bool'
p44646
sS'default'
p44647
S'0'
p44648
sS'name'
p44649
S'use_displaced_mesh'
p44650
sS'required'
p44651
I00
sS'group_name'
p44652
S'Advanced'
p44653
sa(dp44654
S'description'
p44655
S'The name of the variable that this Kernel operates on\n'
p44656
sS'cpp_type'
p44657
S'NonlinearVariableName'
p44658
sS'default'
p44659
g3
sS'name'
p44660
S'variable'
p44661
sS'required'
p44662
I01
sS'group_name'
p44663
NsasS'name'
p44664
S'/Kernels/CHSplitConcentration'
p44665
sa(dp44666
S'description'
p44667
S'Computes flux as nodal variable - flux = -mobility * grad(chemical_potential)\n'
p44668
sS'subblocks'
p44669
NsS'parameters'
p44670
(lp44671
(dp44672
S'description'
p44673
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44674
sS'cpp_type'
p44675
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44676
sS'default'
p44677
g3
sS'name'
p44678
S'block'
p44679
sS'required'
p44680
I00
sS'group_name'
p44681
Nsa(dp44682
S'description'
p44683
S'Concentration\n'
p44684
sS'cpp_type'
p44685
S'std::vector<VariableName>'
p44686
sS'default'
p44687
g3
sS'name'
p44688
S'c'
p44689
sS'required'
p44690
I00
sS'group_name'
p44691
Nsa(dp44692
S'description'
p44693
S'Flux component\n'
p44694
sS'cpp_type'
p44695
S'unsigned int'
p44696
sS'default'
p44697
g3
sS'name'
p44698
S'component'
p44699
sS'required'
p44700
I01
sS'group_name'
p44701
Nsa(dp44702
S'description'
p44703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44704
sS'cpp_type'
p44705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44706
sS'default'
p44707
g3
sS'name'
p44708
S'control_tags'
p44709
sS'required'
p44710
I00
sS'group_name'
p44711
S'Advanced'
p44712
sa(dp44713
S'description'
p44714
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44715
sS'cpp_type'
p44716
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44717
sS'default'
p44718
g3
sS'name'
p44719
S'diag_save_in'
p44720
sS'required'
p44721
I00
sS'group_name'
p44722
S'Advanced'
p44723
sa(dp44724
S'description'
p44725
S'Whether or not this kernel will be used as an eigen kernel\n'
p44726
sS'cpp_type'
p44727
S'bool'
p44728
sS'default'
p44729
S'0'
p44730
sS'name'
p44731
S'eigen_kernel'
p44732
sS'required'
p44733
I00
sS'group_name'
p44734
Nsa(dp44735
S'description'
p44736
S'Set the enabled status of the MooseObject.\n'
p44737
sS'cpp_type'
p44738
S'bool'
p44739
sS'default'
p44740
S'1'
p44741
sS'name'
p44742
S'enable'
p44743
sS'required'
p44744
I00
sS'group_name'
p44745
S'Advanced'
p44746
sa(dp44747
S'description'
p44748
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44749
sS'cpp_type'
p44750
S'bool'
p44751
sS'default'
p44752
S'1'
p44753
sS'name'
p44754
S'implicit'
p44755
sS'required'
p44756
I00
sS'group_name'
p44757
S'Advanced'
p44758
sa(dp44759
S'description'
p44760
S'Mobility property name\n'
p44761
sS'cpp_type'
p44762
S'MaterialPropertyName'
p44763
sS'default'
p44764
g3
sS'name'
p44765
S'mobility_name'
p44766
sS'required'
p44767
I01
sS'group_name'
p44768
Nsa(dp44769
S'description'
p44770
S'Chemical Potential\n'
p44771
sS'cpp_type'
p44772
S'std::vector<VariableName>'
p44773
sS'default'
p44774
g3
sS'name'
p44775
S'mu'
p44776
sS'required'
p44777
I01
sS'group_name'
p44778
Nsa(dp44779
S'description'
p44780
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44781
sS'cpp_type'
p44782
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44783
sS'default'
p44784
g3
sS'name'
p44785
S'save_in'
p44786
sS'required'
p44787
I00
sS'group_name'
p44788
S'Advanced'
p44789
sa(dp44790
S'description'
p44791
S'The seed for the master random number generator\n'
p44792
sS'cpp_type'
p44793
S'unsigned int'
p44794
sS'default'
p44795
S'0'
p44796
sS'name'
p44797
S'seed'
p44798
sS'required'
p44799
I00
sS'group_name'
p44800
S'Advanced'
p44801
sa(dp44802
S'description'
p44803
g3
sS'cpp_type'
p44804
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44805
sS'default'
p44806
S'CHSplitFlux'
p44807
sS'name'
p44808
S'type'
p44809
sS'required'
p44810
I00
sS'group_name'
p44811
Nsa(dp44812
S'description'
p44813
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44814
sS'cpp_type'
p44815
S'bool'
p44816
sS'default'
p44817
S'0'
p44818
sS'name'
p44819
S'use_displaced_mesh'
p44820
sS'required'
p44821
I00
sS'group_name'
p44822
S'Advanced'
p44823
sa(dp44824
S'description'
p44825
S'The name of the variable that this Kernel operates on\n'
p44826
sS'cpp_type'
p44827
S'NonlinearVariableName'
p44828
sS'default'
p44829
g3
sS'name'
p44830
S'variable'
p44831
sS'required'
p44832
I01
sS'group_name'
p44833
NsasS'name'
p44834
S'/Kernels/CHSplitFlux'
p44835
sa(dp44836
S'description'
p44837
S'Split with a variable that holds the Laplacian of a phase field variable.\n'
p44838
sS'subblocks'
p44839
NsS'parameters'
p44840
(lp44841
(dp44842
S'description'
p44843
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44844
sS'cpp_type'
p44845
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44846
sS'default'
p44847
g3
sS'name'
p44848
S'block'
p44849
sS'required'
p44850
I00
sS'group_name'
p44851
Nsa(dp44852
S'description'
p44853
S'Field variable to take the Laplacian of\n'
p44854
sS'cpp_type'
p44855
S'std::vector<VariableName>'
p44856
sS'default'
p44857
g3
sS'name'
p44858
S'c'
p44859
sS'required'
p44860
I01
sS'group_name'
p44861
Nsa(dp44862
S'description'
p44863
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44864
sS'cpp_type'
p44865
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44866
sS'default'
p44867
g3
sS'name'
p44868
S'control_tags'
p44869
sS'required'
p44870
I00
sS'group_name'
p44871
S'Advanced'
p44872
sa(dp44873
S'description'
p44874
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44875
sS'cpp_type'
p44876
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44877
sS'default'
p44878
g3
sS'name'
p44879
S'diag_save_in'
p44880
sS'required'
p44881
I00
sS'group_name'
p44882
S'Advanced'
p44883
sa(dp44884
S'description'
p44885
S'Whether or not this kernel will be used as an eigen kernel\n'
p44886
sS'cpp_type'
p44887
S'bool'
p44888
sS'default'
p44889
S'0'
p44890
sS'name'
p44891
S'eigen_kernel'
p44892
sS'required'
p44893
I00
sS'group_name'
p44894
Nsa(dp44895
S'description'
p44896
S'Set the enabled status of the MooseObject.\n'
p44897
sS'cpp_type'
p44898
S'bool'
p44899
sS'default'
p44900
S'1'
p44901
sS'name'
p44902
S'enable'
p44903
sS'required'
p44904
I00
sS'group_name'
p44905
S'Advanced'
p44906
sa(dp44907
S'description'
p44908
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44909
sS'cpp_type'
p44910
S'bool'
p44911
sS'default'
p44912
S'1'
p44913
sS'name'
p44914
S'implicit'
p44915
sS'required'
p44916
I00
sS'group_name'
p44917
S'Advanced'
p44918
sa(dp44919
S'description'
p44920
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44921
sS'cpp_type'
p44922
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44923
sS'default'
p44924
g3
sS'name'
p44925
S'save_in'
p44926
sS'required'
p44927
I00
sS'group_name'
p44928
S'Advanced'
p44929
sa(dp44930
S'description'
p44931
S'The seed for the master random number generator\n'
p44932
sS'cpp_type'
p44933
S'unsigned int'
p44934
sS'default'
p44935
S'0'
p44936
sS'name'
p44937
S'seed'
p44938
sS'required'
p44939
I00
sS'group_name'
p44940
S'Advanced'
p44941
sa(dp44942
S'description'
p44943
g3
sS'cpp_type'
p44944
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44945
sS'default'
p44946
S'CHSplitVar'
p44947
sS'name'
p44948
S'type'
p44949
sS'required'
p44950
I00
sS'group_name'
p44951
Nsa(dp44952
S'description'
p44953
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44954
sS'cpp_type'
p44955
S'bool'
p44956
sS'default'
p44957
S'0'
p44958
sS'name'
p44959
S'use_displaced_mesh'
p44960
sS'required'
p44961
I00
sS'group_name'
p44962
S'Advanced'
p44963
sa(dp44964
S'description'
p44965
S'The name of the variable that this Kernel operates on\n'
p44966
sS'cpp_type'
p44967
S'NonlinearVariableName'
p44968
sS'default'
p44969
g3
sS'name'
p44970
S'variable'
p44971
sS'required'
p44972
I01
sS'group_name'
p44973
NsasS'name'
p44974
S'/Kernels/CHSplitVar'
p44975
sa(dp44976
S'description'
p44977
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n'
p44978
sS'subblocks'
p44979
NsS'parameters'
p44980
(lp44981
(dp44982
S'description'
p44983
S'Vector of arguments of the mobility\n'
p44984
sS'cpp_type'
p44985
S'std::vector<VariableName>'
p44986
sS'default'
p44987
g3
sS'name'
p44988
S'args'
p44989
sS'required'
p44990
I00
sS'group_name'
p44991
Nsa(dp44992
S'description'
p44993
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44994
sS'cpp_type'
p44995
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44996
sS'default'
p44997
g3
sS'name'
p44998
S'block'
p44999
sS'required'
p45000
I00
sS'group_name'
p45001
Nsa(dp45002
S'description'
p45003
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45004
sS'cpp_type'
p45005
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45006
sS'default'
p45007
g3
sS'name'
p45008
S'control_tags'
p45009
sS'required'
p45010
I00
sS'group_name'
p45011
S'Advanced'
p45012
sa(dp45013
S'description'
p45014
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45015
sS'cpp_type'
p45016
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45017
sS'default'
p45018
g3
sS'name'
p45019
S'diag_save_in'
p45020
sS'required'
p45021
I00
sS'group_name'
p45022
S'Advanced'
p45023
sa(dp45024
S'description'
p45025
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p45026
sS'cpp_type'
p45027
S'std::vector<VariableName>'
p45028
sS'default'
p45029
g3
sS'name'
p45030
S'displacement_gradients'
p45031
sS'required'
p45032
I00
sS'group_name'
p45033
Nsa(dp45034
S'description'
p45035
S'Whether or not this kernel will be used as an eigen kernel\n'
p45036
sS'cpp_type'
p45037
S'bool'
p45038
sS'default'
p45039
S'0'
p45040
sS'name'
p45041
S'eigen_kernel'
p45042
sS'required'
p45043
I00
sS'group_name'
p45044
Nsa(dp45045
S'description'
p45046
S'Set the enabled status of the MooseObject.\n'
p45047
sS'cpp_type'
p45048
S'bool'
p45049
sS'default'
p45050
S'1'
p45051
sS'name'
p45052
S'enable'
p45053
sS'required'
p45054
I00
sS'group_name'
p45055
S'Advanced'
p45056
sa(dp45057
S'description'
p45058
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p45059
sS'cpp_type'
p45060
S'MaterialPropertyName'
p45061
sS'default'
p45062
g3
sS'name'
p45063
S'f_name'
p45064
sS'required'
p45065
I01
sS'group_name'
p45066
Nsa(dp45067
S'description'
p45068
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45069
sS'cpp_type'
p45070
S'bool'
p45071
sS'default'
p45072
S'1'
p45073
sS'name'
p45074
S'implicit'
p45075
sS'required'
p45076
I00
sS'group_name'
p45077
S'Advanced'
p45078
sa(dp45079
S'description'
p45080
S'The mobility used with the kernel\n'
p45081
sS'cpp_type'
p45082
S'MaterialPropertyName'
p45083
sS'default'
p45084
S'M'
p45085
sS'name'
p45086
S'mob_name'
p45087
sS'required'
p45088
I00
sS'group_name'
p45089
Nsa(dp45090
S'description'
p45091
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45092
sS'cpp_type'
p45093
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45094
sS'default'
p45095
g3
sS'name'
p45096
S'save_in'
p45097
sS'required'
p45098
I00
sS'group_name'
p45099
S'Advanced'
p45100
sa(dp45101
S'description'
p45102
S'The seed for the master random number generator\n'
p45103
sS'cpp_type'
p45104
S'unsigned int'
p45105
sS'default'
p45106
S'0'
p45107
sS'name'
p45108
S'seed'
p45109
sS'required'
p45110
I00
sS'group_name'
p45111
S'Advanced'
p45112
sa(dp45113
S'description'
p45114
g3
sS'cpp_type'
p45115
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45116
sS'default'
p45117
S'CahnHilliard'
p45118
sS'name'
p45119
S'type'
p45120
sS'required'
p45121
I00
sS'group_name'
p45122
Nsa(dp45123
S'description'
p45124
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45125
sS'cpp_type'
p45126
S'bool'
p45127
sS'default'
p45128
S'0'
p45129
sS'name'
p45130
S'use_displaced_mesh'
p45131
sS'required'
p45132
I00
sS'group_name'
p45133
S'Advanced'
p45134
sa(dp45135
S'description'
p45136
S'The name of the variable that this Kernel operates on\n'
p45137
sS'cpp_type'
p45138
S'NonlinearVariableName'
p45139
sS'default'
p45140
g3
sS'name'
p45141
S'variable'
p45142
sS'required'
p45143
I01
sS'group_name'
p45144
NsasS'name'
p45145
S'/Kernels/CahnHilliard'
p45146
sa(dp45147
S'description'
p45148
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a tensor (anisotropic) mobility\n'
p45149
sS'subblocks'
p45150
NsS'parameters'
p45151
(lp45152
(dp45153
S'description'
p45154
S'Vector of arguments of the mobility\n'
p45155
sS'cpp_type'
p45156
S'std::vector<VariableName>'
p45157
sS'default'
p45158
g3
sS'name'
p45159
S'args'
p45160
sS'required'
p45161
I00
sS'group_name'
p45162
Nsa(dp45163
S'description'
p45164
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45165
sS'cpp_type'
p45166
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45167
sS'default'
p45168
g3
sS'name'
p45169
S'block'
p45170
sS'required'
p45171
I00
sS'group_name'
p45172
Nsa(dp45173
S'description'
p45174
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45175
sS'cpp_type'
p45176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45177
sS'default'
p45178
g3
sS'name'
p45179
S'control_tags'
p45180
sS'required'
p45181
I00
sS'group_name'
p45182
S'Advanced'
p45183
sa(dp45184
S'description'
p45185
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45186
sS'cpp_type'
p45187
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45188
sS'default'
p45189
g3
sS'name'
p45190
S'diag_save_in'
p45191
sS'required'
p45192
I00
sS'group_name'
p45193
S'Advanced'
p45194
sa(dp45195
S'description'
p45196
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p45197
sS'cpp_type'
p45198
S'std::vector<VariableName>'
p45199
sS'default'
p45200
g3
sS'name'
p45201
S'displacement_gradients'
p45202
sS'required'
p45203
I00
sS'group_name'
p45204
Nsa(dp45205
S'description'
p45206
S'Whether or not this kernel will be used as an eigen kernel\n'
p45207
sS'cpp_type'
p45208
S'bool'
p45209
sS'default'
p45210
S'0'
p45211
sS'name'
p45212
S'eigen_kernel'
p45213
sS'required'
p45214
I00
sS'group_name'
p45215
Nsa(dp45216
S'description'
p45217
S'Set the enabled status of the MooseObject.\n'
p45218
sS'cpp_type'
p45219
S'bool'
p45220
sS'default'
p45221
S'1'
p45222
sS'name'
p45223
S'enable'
p45224
sS'required'
p45225
I00
sS'group_name'
p45226
S'Advanced'
p45227
sa(dp45228
S'description'
p45229
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p45230
sS'cpp_type'
p45231
S'MaterialPropertyName'
p45232
sS'default'
p45233
g3
sS'name'
p45234
S'f_name'
p45235
sS'required'
p45236
I01
sS'group_name'
p45237
Nsa(dp45238
S'description'
p45239
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45240
sS'cpp_type'
p45241
S'bool'
p45242
sS'default'
p45243
S'1'
p45244
sS'name'
p45245
S'implicit'
p45246
sS'required'
p45247
I00
sS'group_name'
p45248
S'Advanced'
p45249
sa(dp45250
S'description'
p45251
S'The mobility used with the kernel\n'
p45252
sS'cpp_type'
p45253
S'MaterialPropertyName'
p45254
sS'default'
p45255
S'M'
p45256
sS'name'
p45257
S'mob_name'
p45258
sS'required'
p45259
I00
sS'group_name'
p45260
Nsa(dp45261
S'description'
p45262
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45263
sS'cpp_type'
p45264
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45265
sS'default'
p45266
g3
sS'name'
p45267
S'save_in'
p45268
sS'required'
p45269
I00
sS'group_name'
p45270
S'Advanced'
p45271
sa(dp45272
S'description'
p45273
S'The seed for the master random number generator\n'
p45274
sS'cpp_type'
p45275
S'unsigned int'
p45276
sS'default'
p45277
S'0'
p45278
sS'name'
p45279
S'seed'
p45280
sS'required'
p45281
I00
sS'group_name'
p45282
S'Advanced'
p45283
sa(dp45284
S'description'
p45285
g3
sS'cpp_type'
p45286
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45287
sS'default'
p45288
S'CahnHilliardAniso'
p45289
sS'name'
p45290
S'type'
p45291
sS'required'
p45292
I00
sS'group_name'
p45293
Nsa(dp45294
S'description'
p45295
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45296
sS'cpp_type'
p45297
S'bool'
p45298
sS'default'
p45299
S'0'
p45300
sS'name'
p45301
S'use_displaced_mesh'
p45302
sS'required'
p45303
I00
sS'group_name'
p45304
S'Advanced'
p45305
sa(dp45306
S'description'
p45307
S'The name of the variable that this Kernel operates on\n'
p45308
sS'cpp_type'
p45309
S'NonlinearVariableName'
p45310
sS'default'
p45311
g3
sS'name'
p45312
S'variable'
p45313
sS'required'
p45314
I01
sS'group_name'
p45315
NsasS'name'
p45316
S'/Kernels/CahnHilliardAniso'
p45317
sa(dp45318
S'description'
p45319
S'Scaled time derivative Kernel that acts on a coupled variable\n'
p45320
sS'subblocks'
p45321
NsS'parameters'
p45322
(lp45323
(dp45324
S'description'
p45325
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45326
sS'cpp_type'
p45327
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45328
sS'default'
p45329
g3
sS'name'
p45330
S'block'
p45331
sS'required'
p45332
I00
sS'group_name'
p45333
Nsa(dp45334
S'description'
p45335
S'Coefficient\n'
p45336
sS'cpp_type'
p45337
S'double'
p45338
sS'default'
p45339
g3
sS'name'
p45340
S'coef'
p45341
sS'required'
p45342
I01
sS'group_name'
p45343
Nsa(dp45344
S'description'
p45345
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45346
sS'cpp_type'
p45347
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45348
sS'default'
p45349
g3
sS'name'
p45350
S'control_tags'
p45351
sS'required'
p45352
I00
sS'group_name'
p45353
S'Advanced'
p45354
sa(dp45355
S'description'
p45356
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45357
sS'cpp_type'
p45358
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45359
sS'default'
p45360
g3
sS'name'
p45361
S'diag_save_in'
p45362
sS'required'
p45363
I00
sS'group_name'
p45364
S'Advanced'
p45365
sa(dp45366
S'description'
p45367
S'Whether or not this kernel will be used as an eigen kernel\n'
p45368
sS'cpp_type'
p45369
S'bool'
p45370
sS'default'
p45371
S'0'
p45372
sS'name'
p45373
S'eigen_kernel'
p45374
sS'required'
p45375
I00
sS'group_name'
p45376
Nsa(dp45377
S'description'
p45378
S'Set the enabled status of the MooseObject.\n'
p45379
sS'cpp_type'
p45380
S'bool'
p45381
sS'default'
p45382
S'1'
p45383
sS'name'
p45384
S'enable'
p45385
sS'required'
p45386
I00
sS'group_name'
p45387
S'Advanced'
p45388
sa(dp45389
S'description'
p45390
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45391
sS'cpp_type'
p45392
S'bool'
p45393
sS'default'
p45394
S'1'
p45395
sS'name'
p45396
S'implicit'
p45397
sS'required'
p45398
I00
sS'group_name'
p45399
S'Advanced'
p45400
sa(dp45401
S'description'
p45402
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45403
sS'cpp_type'
p45404
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45405
sS'default'
p45406
g3
sS'name'
p45407
S'save_in'
p45408
sS'required'
p45409
I00
sS'group_name'
p45410
S'Advanced'
p45411
sa(dp45412
S'description'
p45413
S'The seed for the master random number generator\n'
p45414
sS'cpp_type'
p45415
S'unsigned int'
p45416
sS'default'
p45417
S'0'
p45418
sS'name'
p45419
S'seed'
p45420
sS'required'
p45421
I00
sS'group_name'
p45422
S'Advanced'
p45423
sa(dp45424
S'description'
p45425
g3
sS'cpp_type'
p45426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45427
sS'default'
p45428
S'CoefCoupledTimeDerivative'
p45429
sS'name'
p45430
S'type'
p45431
sS'required'
p45432
I00
sS'group_name'
p45433
Nsa(dp45434
S'description'
p45435
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45436
sS'cpp_type'
p45437
S'bool'
p45438
sS'default'
p45439
S'0'
p45440
sS'name'
p45441
S'use_displaced_mesh'
p45442
sS'required'
p45443
I00
sS'group_name'
p45444
S'Advanced'
p45445
sa(dp45446
S'description'
p45447
S'Coupled variable\n'
p45448
sS'cpp_type'
p45449
S'std::vector<VariableName>'
p45450
sS'default'
p45451
g3
sS'name'
p45452
S'v'
p45453
sS'required'
p45454
I01
sS'group_name'
p45455
Nsa(dp45456
S'description'
p45457
S'The name of the variable that this Kernel operates on\n'
p45458
sS'cpp_type'
p45459
S'NonlinearVariableName'
p45460
sS'default'
p45461
g3
sS'name'
p45462
S'variable'
p45463
sS'required'
p45464
I01
sS'group_name'
p45465
NsasS'name'
p45466
S'/Kernels/CoefCoupledTimeDerivative'
p45467
sa(dp45468
S'description'
p45469
g3
sS'subblocks'
p45470
NsS'parameters'
p45471
(lp45472
(dp45473
S'description'
p45474
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45475
sS'cpp_type'
p45476
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45477
sS'default'
p45478
g3
sS'name'
p45479
S'block'
p45480
sS'required'
p45481
I00
sS'group_name'
p45482
Nsa(dp45483
S'description'
p45484
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45485
sS'cpp_type'
p45486
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45487
sS'default'
p45488
g3
sS'name'
p45489
S'control_tags'
p45490
sS'required'
p45491
I00
sS'group_name'
p45492
S'Advanced'
p45493
sa(dp45494
S'description'
p45495
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45496
sS'cpp_type'
p45497
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45498
sS'default'
p45499
g3
sS'name'
p45500
S'diag_save_in'
p45501
sS'required'
p45502
I00
sS'group_name'
p45503
S'Advanced'
p45504
sa(dp45505
S'description'
p45506
S'Whether or not this kernel will be used as an eigen kernel\n'
p45507
sS'cpp_type'
p45508
S'bool'
p45509
sS'default'
p45510
S'0'
p45511
sS'name'
p45512
S'eigen_kernel'
p45513
sS'required'
p45514
I00
sS'group_name'
p45515
Nsa(dp45516
S'description'
p45517
S'Set the enabled status of the MooseObject.\n'
p45518
sS'cpp_type'
p45519
S'bool'
p45520
sS'default'
p45521
S'1'
p45522
sS'name'
p45523
S'enable'
p45524
sS'required'
p45525
I00
sS'group_name'
p45526
S'Advanced'
p45527
sa(dp45528
S'description'
p45529
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45530
sS'cpp_type'
p45531
S'bool'
p45532
sS'default'
p45533
S'1'
p45534
sS'name'
p45535
S'implicit'
p45536
sS'required'
p45537
I00
sS'group_name'
p45538
S'Advanced'
p45539
sa(dp45540
S'description'
p45541
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45542
sS'cpp_type'
p45543
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45544
sS'default'
p45545
g3
sS'name'
p45546
S'save_in'
p45547
sS'required'
p45548
I00
sS'group_name'
p45549
S'Advanced'
p45550
sa(dp45551
S'description'
p45552
S'The seed for the master random number generator\n'
p45553
sS'cpp_type'
p45554
S'unsigned int'
p45555
sS'default'
p45556
S'0'
p45557
sS'name'
p45558
S'seed'
p45559
sS'required'
p45560
I00
sS'group_name'
p45561
S'Advanced'
p45562
sa(dp45563
S'description'
p45564
g3
sS'cpp_type'
p45565
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45566
sS'default'
p45567
S'ConservativeAdvection'
p45568
sS'name'
p45569
S'type'
p45570
sS'required'
p45571
I00
sS'group_name'
p45572
Nsa(dp45573
S'description'
p45574
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45575
sS'cpp_type'
p45576
S'bool'
p45577
sS'default'
p45578
S'0'
p45579
sS'name'
p45580
S'use_displaced_mesh'
p45581
sS'required'
p45582
I00
sS'group_name'
p45583
S'Advanced'
p45584
sa(dp45585
S'description'
p45586
S'The name of the variable that this Kernel operates on\n'
p45587
sS'cpp_type'
p45588
S'NonlinearVariableName'
p45589
sS'default'
p45590
g3
sS'name'
p45591
S'variable'
p45592
sS'required'
p45593
I01
sS'group_name'
p45594
Nsa(dp45595
S'description'
p45596
S'Velocity vector\n'
p45597
sS'cpp_type'
p45598
S'libMesh::VectorValue<double>'
p45599
sS'default'
p45600
g3
sS'name'
p45601
S'velocity'
p45602
sS'required'
p45603
I01
sS'group_name'
p45604
NsasS'name'
p45605
S'/Kernels/ConservativeAdvection'
p45606
sa(dp45607
S'description'
p45608
S'Source term for noise from a ConservativeNoise userobject\n'
p45609
sS'subblocks'
p45610
NsS'parameters'
p45611
(lp45612
(dp45613
S'description'
p45614
S'Amplitude\n'
p45615
sS'cpp_type'
p45616
S'double'
p45617
sS'default'
p45618
g3
sS'name'
p45619
S'amplitude'
p45620
sS'required'
p45621
I01
sS'group_name'
p45622
Nsa(dp45623
S'description'
p45624
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45625
sS'cpp_type'
p45626
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45627
sS'default'
p45628
g3
sS'name'
p45629
S'block'
p45630
sS'required'
p45631
I00
sS'group_name'
p45632
Nsa(dp45633
S'description'
p45634
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45635
sS'cpp_type'
p45636
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45637
sS'default'
p45638
g3
sS'name'
p45639
S'control_tags'
p45640
sS'required'
p45641
I00
sS'group_name'
p45642
S'Advanced'
p45643
sa(dp45644
S'description'
p45645
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45646
sS'cpp_type'
p45647
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45648
sS'default'
p45649
g3
sS'name'
p45650
S'diag_save_in'
p45651
sS'required'
p45652
I00
sS'group_name'
p45653
S'Advanced'
p45654
sa(dp45655
S'description'
p45656
S'Whether or not this kernel will be used as an eigen kernel\n'
p45657
sS'cpp_type'
p45658
S'bool'
p45659
sS'default'
p45660
S'0'
p45661
sS'name'
p45662
S'eigen_kernel'
p45663
sS'required'
p45664
I00
sS'group_name'
p45665
Nsa(dp45666
S'description'
p45667
S'Set the enabled status of the MooseObject.\n'
p45668
sS'cpp_type'
p45669
S'bool'
p45670
sS'default'
p45671
S'1'
p45672
sS'name'
p45673
S'enable'
p45674
sS'required'
p45675
I00
sS'group_name'
p45676
S'Advanced'
p45677
sa(dp45678
S'description'
p45679
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45680
sS'cpp_type'
p45681
S'bool'
p45682
sS'default'
p45683
S'1'
p45684
sS'name'
p45685
S'implicit'
p45686
sS'required'
p45687
I00
sS'group_name'
p45688
S'Advanced'
p45689
sa(dp45690
S'description'
p45691
S'Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n'
p45692
sS'cpp_type'
p45693
S'MaterialPropertyName'
p45694
sS'default'
p45695
S'1'
p45696
sS'name'
p45697
S'multiplier'
p45698
sS'required'
p45699
I00
sS'group_name'
p45700
Nsa(dp45701
S'description'
p45702
S'ConservativeNoise userobject that produces the random numbers\n'
p45703
sS'cpp_type'
p45704
S'UserObjectName'
p45705
sS'default'
p45706
g3
sS'name'
p45707
S'noise'
p45708
sS'required'
p45709
I01
sS'group_name'
p45710
Nsa(dp45711
S'description'
p45712
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45713
sS'cpp_type'
p45714
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45715
sS'default'
p45716
g3
sS'name'
p45717
S'save_in'
p45718
sS'required'
p45719
I00
sS'group_name'
p45720
S'Advanced'
p45721
sa(dp45722
S'description'
p45723
S'The seed for the master random number generator\n'
p45724
sS'cpp_type'
p45725
S'unsigned int'
p45726
sS'default'
p45727
S'0'
p45728
sS'name'
p45729
S'seed'
p45730
sS'required'
p45731
I00
sS'group_name'
p45732
S'Advanced'
p45733
sa(dp45734
S'description'
p45735
g3
sS'cpp_type'
p45736
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45737
sS'default'
p45738
S'ConservedLangevinNoise'
p45739
sS'name'
p45740
S'type'
p45741
sS'required'
p45742
I00
sS'group_name'
p45743
Nsa(dp45744
S'description'
p45745
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45746
sS'cpp_type'
p45747
S'bool'
p45748
sS'default'
p45749
S'0'
p45750
sS'name'
p45751
S'use_displaced_mesh'
p45752
sS'required'
p45753
I00
sS'group_name'
p45754
S'Advanced'
p45755
sa(dp45756
S'description'
p45757
S'The name of the variable that this Kernel operates on\n'
p45758
sS'cpp_type'
p45759
S'NonlinearVariableName'
p45760
sS'default'
p45761
g3
sS'name'
p45762
S'variable'
p45763
sS'required'
p45764
I01
sS'group_name'
p45765
NsasS'name'
p45766
S'/Kernels/ConservedLangevinNoise'
p45767
sa(dp45768
S'description'
p45769
S'Stress divergence kernel for the Cartesian coordinate system\n'
p45770
sS'subblocks'
p45771
NsS'parameters'
p45772
(lp45773
(dp45774
S'description'
p45775
S'The 3 Cosserat rotation variables\n'
p45776
sS'cpp_type'
p45777
S'std::vector<VariableName>'
p45778
sS'default'
p45779
g3
sS'name'
p45780
S'Cosserat_rotations'
p45781
sS'required'
p45782
I01
sS'group_name'
p45783
Nsa(dp45784
S'description'
p45785
S'Material property base name\n'
p45786
sS'cpp_type'
p45787
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45788
sS'default'
p45789
g3
sS'name'
p45790
S'base_name'
p45791
sS'required'
p45792
I00
sS'group_name'
p45793
Nsa(dp45794
S'description'
p45795
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45796
sS'cpp_type'
p45797
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45798
sS'default'
p45799
g3
sS'name'
p45800
S'block'
p45801
sS'required'
p45802
I00
sS'group_name'
p45803
Nsa(dp45804
S'description'
p45805
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p45806
sS'cpp_type'
p45807
S'unsigned int'
p45808
sS'default'
p45809
g3
sS'name'
p45810
S'component'
p45811
sS'required'
p45812
I01
sS'group_name'
p45813
Nsa(dp45814
S'description'
p45815
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45816
sS'cpp_type'
p45817
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45818
sS'default'
p45819
g3
sS'name'
p45820
S'control_tags'
p45821
sS'required'
p45822
I00
sS'group_name'
p45823
S'Advanced'
p45824
sa(dp45825
S'description'
p45826
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45827
sS'cpp_type'
p45828
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45829
sS'default'
p45830
g3
sS'name'
p45831
S'diag_save_in'
p45832
sS'required'
p45833
I00
sS'group_name'
p45834
S'Advanced'
p45835
sa(dp45836
S'description'
p45837
S'The string of displacements suitable for the problem statement\n'
p45838
sS'cpp_type'
p45839
S'std::vector<VariableName>'
p45840
sS'default'
p45841
g3
sS'name'
p45842
S'displacements'
p45843
sS'required'
p45844
I01
sS'group_name'
p45845
Nsa(dp45846
S'description'
p45847
S'Whether or not this kernel will be used as an eigen kernel\n'
p45848
sS'cpp_type'
p45849
S'bool'
p45850
sS'default'
p45851
S'0'
p45852
sS'name'
p45853
S'eigen_kernel'
p45854
sS'required'
p45855
I00
sS'group_name'
p45856
Nsa(dp45857
S'description'
p45858
S'Set the enabled status of the MooseObject.\n'
p45859
sS'cpp_type'
p45860
S'bool'
p45861
sS'default'
p45862
S'1'
p45863
sS'name'
p45864
S'enable'
p45865
sS'required'
p45866
I00
sS'group_name'
p45867
S'Advanced'
p45868
sa(dp45869
S'description'
p45870
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45871
sS'cpp_type'
p45872
S'bool'
p45873
sS'default'
p45874
S'1'
p45875
sS'name'
p45876
S'implicit'
p45877
sS'required'
p45878
I00
sS'group_name'
p45879
S'Advanced'
p45880
sa(dp45881
S'description'
p45882
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45883
sS'cpp_type'
p45884
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45885
sS'default'
p45886
g3
sS'name'
p45887
S'save_in'
p45888
sS'required'
p45889
I00
sS'group_name'
p45890
S'Advanced'
p45891
sa(dp45892
S'description'
p45893
S'The seed for the master random number generator\n'
p45894
sS'cpp_type'
p45895
S'unsigned int'
p45896
sS'default'
p45897
S'0'
p45898
sS'name'
p45899
S'seed'
p45900
sS'required'
p45901
I00
sS'group_name'
p45902
S'Advanced'
p45903
sa(dp45904
S'description'
p45905
S'The temperature\n'
p45906
sS'cpp_type'
p45907
S'std::vector<VariableName>'
p45908
sS'default'
p45909
g3
sS'name'
p45910
S'temp'
p45911
sS'required'
p45912
I00
sS'group_name'
p45913
Nsa(dp45914
S'description'
p45915
S'The temperature\n'
p45916
sS'cpp_type'
p45917
S'std::vector<VariableName>'
p45918
sS'default'
p45919
g3
sS'name'
p45920
S'temperature'
p45921
sS'required'
p45922
I00
sS'group_name'
p45923
Nsa(dp45924
S'description'
p45925
g3
sS'cpp_type'
p45926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45927
sS'default'
p45928
S'CosseratStressDivergenceTensors'
p45929
sS'name'
p45930
S'type'
p45931
sS'required'
p45932
I00
sS'group_name'
p45933
Nsa(dp45934
S'description'
p45935
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45936
sS'cpp_type'
p45937
S'bool'
p45938
sS'default'
p45939
S'0'
p45940
sS'name'
p45941
S'use_displaced_mesh'
p45942
sS'required'
p45943
I00
sS'group_name'
p45944
S'Advanced'
p45945
sa(dp45946
S'description'
p45947
S'Jacobian for corotational finite strain\n'
p45948
sS'cpp_type'
p45949
S'bool'
p45950
sS'default'
p45951
S'0'
p45952
sS'name'
p45953
S'use_finite_deform_jacobian'
p45954
sS'required'
p45955
I00
sS'group_name'
p45956
Nsa(dp45957
S'description'
p45958
S'The name of the variable that this Kernel operates on\n'
p45959
sS'cpp_type'
p45960
S'NonlinearVariableName'
p45961
sS'default'
p45962
g3
sS'name'
p45963
S'variable'
p45964
sS'required'
p45965
I01
sS'group_name'
p45966
Nsa(dp45967
S'description'
p45968
S'Set to false to turn off volumetric locking correction\n'
p45969
sS'cpp_type'
p45970
S'bool'
p45971
sS'default'
p45972
S'0'
p45973
sS'name'
p45974
S'volumetric_locking_correction'
p45975
sS'required'
p45976
I00
sS'group_name'
p45977
NsasS'name'
p45978
S'/Kernels/CosseratStressDivergenceTensors'
p45979
sa(dp45980
S'description'
p45981
S'Coupled Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n'
p45982
sS'subblocks'
p45983
NsS'parameters'
p45984
(lp45985
(dp45986
S'description'
p45987
S'Vector of arguments of the mobility\n'
p45988
sS'cpp_type'
p45989
S'std::vector<VariableName>'
p45990
sS'default'
p45991
g3
sS'name'
p45992
S'args'
p45993
sS'required'
p45994
I00
sS'group_name'
p45995
Nsa(dp45996
S'description'
p45997
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45998
sS'cpp_type'
p45999
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46000
sS'default'
p46001
g3
sS'name'
p46002
S'block'
p46003
sS'required'
p46004
I00
sS'group_name'
p46005
Nsa(dp46006
S'description'
p46007
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46008
sS'cpp_type'
p46009
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46010
sS'default'
p46011
g3
sS'name'
p46012
S'control_tags'
p46013
sS'required'
p46014
I00
sS'group_name'
p46015
S'Advanced'
p46016
sa(dp46017
S'description'
p46018
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46019
sS'cpp_type'
p46020
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46021
sS'default'
p46022
g3
sS'name'
p46023
S'diag_save_in'
p46024
sS'required'
p46025
I00
sS'group_name'
p46026
S'Advanced'
p46027
sa(dp46028
S'description'
p46029
S'Whether or not this kernel will be used as an eigen kernel\n'
p46030
sS'cpp_type'
p46031
S'bool'
p46032
sS'default'
p46033
S'0'
p46034
sS'name'
p46035
S'eigen_kernel'
p46036
sS'required'
p46037
I00
sS'group_name'
p46038
Nsa(dp46039
S'description'
p46040
S'Set the enabled status of the MooseObject.\n'
p46041
sS'cpp_type'
p46042
S'bool'
p46043
sS'default'
p46044
S'1'
p46045
sS'name'
p46046
S'enable'
p46047
sS'required'
p46048
I00
sS'group_name'
p46049
S'Advanced'
p46050
sa(dp46051
S'description'
p46052
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p46053
sS'cpp_type'
p46054
S'MaterialPropertyName'
p46055
sS'default'
p46056
g3
sS'name'
p46057
S'f_name'
p46058
sS'required'
p46059
I01
sS'group_name'
p46060
Nsa(dp46061
S'description'
p46062
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46063
sS'cpp_type'
p46064
S'bool'
p46065
sS'default'
p46066
S'1'
p46067
sS'name'
p46068
S'implicit'
p46069
sS'required'
p46070
I00
sS'group_name'
p46071
S'Advanced'
p46072
sa(dp46073
S'description'
p46074
S'The mobility used with the kernel\n'
p46075
sS'cpp_type'
p46076
S'MaterialPropertyName'
p46077
sS'default'
p46078
S'L'
p46079
sS'name'
p46080
S'mob_name'
p46081
sS'required'
p46082
I00
sS'group_name'
p46083
Nsa(dp46084
S'description'
p46085
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46086
sS'cpp_type'
p46087
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46088
sS'default'
p46089
g3
sS'name'
p46090
S'save_in'
p46091
sS'required'
p46092
I00
sS'group_name'
p46093
S'Advanced'
p46094
sa(dp46095
S'description'
p46096
S'The seed for the master random number generator\n'
p46097
sS'cpp_type'
p46098
S'unsigned int'
p46099
sS'default'
p46100
S'0'
p46101
sS'name'
p46102
S'seed'
p46103
sS'required'
p46104
I00
sS'group_name'
p46105
S'Advanced'
p46106
sa(dp46107
S'description'
p46108
g3
sS'cpp_type'
p46109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46110
sS'default'
p46111
S'CoupledAllenCahn'
p46112
sS'name'
p46113
S'type'
p46114
sS'required'
p46115
I00
sS'group_name'
p46116
Nsa(dp46117
S'description'
p46118
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46119
sS'cpp_type'
p46120
S'bool'
p46121
sS'default'
p46122
S'0'
p46123
sS'name'
p46124
S'use_displaced_mesh'
p46125
sS'required'
p46126
I00
sS'group_name'
p46127
S'Advanced'
p46128
sa(dp46129
S'description'
p46130
S'Coupled variable\n'
p46131
sS'cpp_type'
p46132
S'std::vector<VariableName>'
p46133
sS'default'
p46134
g3
sS'name'
p46135
S'v'
p46136
sS'required'
p46137
I01
sS'group_name'
p46138
Nsa(dp46139
S'description'
p46140
S'The name of the variable that this Kernel operates on\n'
p46141
sS'cpp_type'
p46142
S'NonlinearVariableName'
p46143
sS'default'
p46144
g3
sS'name'
p46145
S'variable'
p46146
sS'required'
p46147
I01
sS'group_name'
p46148
NsasS'name'
p46149
S'/Kernels/CoupledAllenCahn'
p46150
sa(dp46151
S'description'
p46152
g3
sS'subblocks'
p46153
NsS'parameters'
p46154
(lp46155
(dp46156
S'description'
p46157
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46158
sS'cpp_type'
p46159
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46160
sS'default'
p46161
g3
sS'name'
p46162
S'block'
p46163
sS'required'
p46164
I00
sS'group_name'
p46165
Nsa(dp46166
S'description'
p46167
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46168
sS'cpp_type'
p46169
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46170
sS'default'
p46171
g3
sS'name'
p46172
S'control_tags'
p46173
sS'required'
p46174
I00
sS'group_name'
p46175
S'Advanced'
p46176
sa(dp46177
S'description'
p46178
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46179
sS'cpp_type'
p46180
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46181
sS'default'
p46182
g3
sS'name'
p46183
S'diag_save_in'
p46184
sS'required'
p46185
I00
sS'group_name'
p46186
S'Advanced'
p46187
sa(dp46188
S'description'
p46189
S'Whether or not this kernel will be used as an eigen kernel\n'
p46190
sS'cpp_type'
p46191
S'bool'
p46192
sS'default'
p46193
S'0'
p46194
sS'name'
p46195
S'eigen_kernel'
p46196
sS'required'
p46197
I00
sS'group_name'
p46198
Nsa(dp46199
S'description'
p46200
S'Set the enabled status of the MooseObject.\n'
p46201
sS'cpp_type'
p46202
S'bool'
p46203
sS'default'
p46204
S'1'
p46205
sS'name'
p46206
S'enable'
p46207
sS'required'
p46208
I00
sS'group_name'
p46209
S'Advanced'
p46210
sa(dp46211
S'description'
p46212
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46213
sS'cpp_type'
p46214
S'bool'
p46215
sS'default'
p46216
S'1'
p46217
sS'name'
p46218
S'implicit'
p46219
sS'required'
p46220
I00
sS'group_name'
p46221
S'Advanced'
p46222
sa(dp46223
S'description'
p46224
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46225
sS'cpp_type'
p46226
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46227
sS'default'
p46228
g3
sS'name'
p46229
S'save_in'
p46230
sS'required'
p46231
I00
sS'group_name'
p46232
S'Advanced'
p46233
sa(dp46234
S'description'
p46235
S'The seed for the master random number generator\n'
p46236
sS'cpp_type'
p46237
S'unsigned int'
p46238
sS'default'
p46239
S'0'
p46240
sS'name'
p46241
S'seed'
p46242
sS'required'
p46243
I00
sS'group_name'
p46244
S'Advanced'
p46245
sa(dp46246
S'description'
p46247
g3
sS'cpp_type'
p46248
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46249
sS'default'
p46250
S'CoupledForce'
p46251
sS'name'
p46252
S'type'
p46253
sS'required'
p46254
I00
sS'group_name'
p46255
Nsa(dp46256
S'description'
p46257
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46258
sS'cpp_type'
p46259
S'bool'
p46260
sS'default'
p46261
S'0'
p46262
sS'name'
p46263
S'use_displaced_mesh'
p46264
sS'required'
p46265
I00
sS'group_name'
p46266
S'Advanced'
p46267
sa(dp46268
S'description'
p46269
S'The coupled variable which provides the force\n'
p46270
sS'cpp_type'
p46271
S'std::vector<VariableName>'
p46272
sS'default'
p46273
g3
sS'name'
p46274
S'v'
p46275
sS'required'
p46276
I01
sS'group_name'
p46277
Nsa(dp46278
S'description'
p46279
S'The name of the variable that this Kernel operates on\n'
p46280
sS'cpp_type'
p46281
S'NonlinearVariableName'
p46282
sS'default'
p46283
g3
sS'name'
p46284
S'variable'
p46285
sS'required'
p46286
I01
sS'group_name'
p46287
NsasS'name'
p46288
S'/Kernels/CoupledForce'
p46289
sa(dp46290
S'description'
p46291
S'A modified coupled time derivative Kernel that multiply the time derivative of a coupled variable by a function of the variables\n'
p46292
sS'subblocks'
p46293
NsS'parameters'
p46294
(lp46295
(dp46296
S'description'
p46297
S'Vector of arguments of the susceptibility\n'
p46298
sS'cpp_type'
p46299
S'std::vector<VariableName>'
p46300
sS'default'
p46301
g3
sS'name'
p46302
S'args'
p46303
sS'required'
p46304
I00
sS'group_name'
p46305
Nsa(dp46306
S'description'
p46307
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46308
sS'cpp_type'
p46309
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46310
sS'default'
p46311
g3
sS'name'
p46312
S'block'
p46313
sS'required'
p46314
I00
sS'group_name'
p46315
Nsa(dp46316
S'description'
p46317
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46318
sS'cpp_type'
p46319
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46320
sS'default'
p46321
g3
sS'name'
p46322
S'control_tags'
p46323
sS'required'
p46324
I00
sS'group_name'
p46325
S'Advanced'
p46326
sa(dp46327
S'description'
p46328
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46329
sS'cpp_type'
p46330
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46331
sS'default'
p46332
g3
sS'name'
p46333
S'diag_save_in'
p46334
sS'required'
p46335
I00
sS'group_name'
p46336
S'Advanced'
p46337
sa(dp46338
S'description'
p46339
S'Whether or not this kernel will be used as an eigen kernel\n'
p46340
sS'cpp_type'
p46341
S'bool'
p46342
sS'default'
p46343
S'0'
p46344
sS'name'
p46345
S'eigen_kernel'
p46346
sS'required'
p46347
I00
sS'group_name'
p46348
Nsa(dp46349
S'description'
p46350
S'Set the enabled status of the MooseObject.\n'
p46351
sS'cpp_type'
p46352
S'bool'
p46353
sS'default'
p46354
S'1'
p46355
sS'name'
p46356
S'enable'
p46357
sS'required'
p46358
I00
sS'group_name'
p46359
S'Advanced'
p46360
sa(dp46361
S'description'
p46362
S'Base name of the function F defined in a DerivativeParsedMaterial\n'
p46363
sS'cpp_type'
p46364
S'MaterialPropertyName'
p46365
sS'default'
p46366
g3
sS'name'
p46367
S'f_name'
p46368
sS'required'
p46369
I01
sS'group_name'
p46370
Nsa(dp46371
S'description'
p46372
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46373
sS'cpp_type'
p46374
S'bool'
p46375
sS'default'
p46376
S'1'
p46377
sS'name'
p46378
S'implicit'
p46379
sS'required'
p46380
I00
sS'group_name'
p46381
S'Advanced'
p46382
sa(dp46383
S'description'
p46384
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46385
sS'cpp_type'
p46386
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46387
sS'default'
p46388
g3
sS'name'
p46389
S'save_in'
p46390
sS'required'
p46391
I00
sS'group_name'
p46392
S'Advanced'
p46393
sa(dp46394
S'description'
p46395
S'The seed for the master random number generator\n'
p46396
sS'cpp_type'
p46397
S'unsigned int'
p46398
sS'default'
p46399
S'0'
p46400
sS'name'
p46401
S'seed'
p46402
sS'required'
p46403
I00
sS'group_name'
p46404
S'Advanced'
p46405
sa(dp46406
S'description'
p46407
g3
sS'cpp_type'
p46408
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46409
sS'default'
p46410
S'CoupledSusceptibilityTimeDerivative'
p46411
sS'name'
p46412
S'type'
p46413
sS'required'
p46414
I00
sS'group_name'
p46415
Nsa(dp46416
S'description'
p46417
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46418
sS'cpp_type'
p46419
S'bool'
p46420
sS'default'
p46421
S'0'
p46422
sS'name'
p46423
S'use_displaced_mesh'
p46424
sS'required'
p46425
I00
sS'group_name'
p46426
S'Advanced'
p46427
sa(dp46428
S'description'
p46429
S'Coupled variable\n'
p46430
sS'cpp_type'
p46431
S'std::vector<VariableName>'
p46432
sS'default'
p46433
g3
sS'name'
p46434
S'v'
p46435
sS'required'
p46436
I01
sS'group_name'
p46437
Nsa(dp46438
S'description'
p46439
S'The name of the variable that this Kernel operates on\n'
p46440
sS'cpp_type'
p46441
S'NonlinearVariableName'
p46442
sS'default'
p46443
g3
sS'name'
p46444
S'variable'
p46445
sS'required'
p46446
I01
sS'group_name'
p46447
NsasS'name'
p46448
S'/Kernels/CoupledSusceptibilityTimeDerivative'
p46449
sa(dp46450
S'description'
p46451
S'Coupled time derivative Kernel that multiplies time derivative by (dh_a/deta_i * Fa + dh_b/deta_i * Fb + ..)\n'
p46452
sS'subblocks'
p46453
NsS'parameters'
p46454
(lp46455
(dp46456
S'description'
p46457
S'List of functions for each phase. Place in same order as hj_names!\n'
p46458
sS'cpp_type'
p46459
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p46460
sS'default'
p46461
g3
sS'name'
p46462
S'Fj_names'
p46463
sS'required'
p46464
I01
sS'group_name'
p46465
Nsa(dp46466
S'description'
p46467
S'Vector of arguments of Fj and hj\n'
p46468
sS'cpp_type'
p46469
S'std::vector<VariableName>'
p46470
sS'default'
p46471
g3
sS'name'
p46472
S'args'
p46473
sS'required'
p46474
I00
sS'group_name'
p46475
Nsa(dp46476
S'description'
p46477
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46478
sS'cpp_type'
p46479
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46480
sS'default'
p46481
g3
sS'name'
p46482
S'block'
p46483
sS'required'
p46484
I00
sS'group_name'
p46485
Nsa(dp46486
S'description'
p46487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46488
sS'cpp_type'
p46489
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46490
sS'default'
p46491
g3
sS'name'
p46492
S'control_tags'
p46493
sS'required'
p46494
I00
sS'group_name'
p46495
S'Advanced'
p46496
sa(dp46497
S'description'
p46498
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46499
sS'cpp_type'
p46500
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46501
sS'default'
p46502
g3
sS'name'
p46503
S'diag_save_in'
p46504
sS'required'
p46505
I00
sS'group_name'
p46506
S'Advanced'
p46507
sa(dp46508
S'description'
p46509
S'Whether or not this kernel will be used as an eigen kernel\n'
p46510
sS'cpp_type'
p46511
S'bool'
p46512
sS'default'
p46513
S'0'
p46514
sS'name'
p46515
S'eigen_kernel'
p46516
sS'required'
p46517
I00
sS'group_name'
p46518
Nsa(dp46519
S'description'
p46520
S'Set the enabled status of the MooseObject.\n'
p46521
sS'cpp_type'
p46522
S'bool'
p46523
sS'default'
p46524
S'1'
p46525
sS'name'
p46526
S'enable'
p46527
sS'required'
p46528
I00
sS'group_name'
p46529
S'Advanced'
p46530
sa(dp46531
S'description'
p46532
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p46533
sS'cpp_type'
p46534
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p46535
sS'default'
p46536
g3
sS'name'
p46537
S'hj_names'
p46538
sS'required'
p46539
I01
sS'group_name'
p46540
Nsa(dp46541
S'description'
p46542
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46543
sS'cpp_type'
p46544
S'bool'
p46545
sS'default'
p46546
S'1'
p46547
sS'name'
p46548
S'implicit'
p46549
sS'required'
p46550
I00
sS'group_name'
p46551
S'Advanced'
p46552
sa(dp46553
S'description'
p46554
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46555
sS'cpp_type'
p46556
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46557
sS'default'
p46558
g3
sS'name'
p46559
S'save_in'
p46560
sS'required'
p46561
I00
sS'group_name'
p46562
S'Advanced'
p46563
sa(dp46564
S'description'
p46565
S'The seed for the master random number generator\n'
p46566
sS'cpp_type'
p46567
S'unsigned int'
p46568
sS'default'
p46569
S'0'
p46570
sS'name'
p46571
S'seed'
p46572
sS'required'
p46573
I00
sS'group_name'
p46574
S'Advanced'
p46575
sa(dp46576
S'description'
p46577
g3
sS'cpp_type'
p46578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46579
sS'default'
p46580
S'CoupledSwitchingTimeDerivative'
p46581
sS'name'
p46582
S'type'
p46583
sS'required'
p46584
I00
sS'group_name'
p46585
Nsa(dp46586
S'description'
p46587
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46588
sS'cpp_type'
p46589
S'bool'
p46590
sS'default'
p46591
S'0'
p46592
sS'name'
p46593
S'use_displaced_mesh'
p46594
sS'required'
p46595
I00
sS'group_name'
p46596
S'Advanced'
p46597
sa(dp46598
S'description'
p46599
S'Coupled variable\n'
p46600
sS'cpp_type'
p46601
S'std::vector<VariableName>'
p46602
sS'default'
p46603
g3
sS'name'
p46604
S'v'
p46605
sS'required'
p46606
I01
sS'group_name'
p46607
Nsa(dp46608
S'description'
p46609
S'The name of the variable that this Kernel operates on\n'
p46610
sS'cpp_type'
p46611
S'NonlinearVariableName'
p46612
sS'default'
p46613
g3
sS'name'
p46614
S'variable'
p46615
sS'required'
p46616
I01
sS'group_name'
p46617
NsasS'name'
p46618
S'/Kernels/CoupledSwitchingTimeDerivative'
p46619
sa(dp46620
S'description'
p46621
S'Time derivative Kernel that acts on a coupled variable\n'
p46622
sS'subblocks'
p46623
NsS'parameters'
p46624
(lp46625
(dp46626
S'description'
p46627
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46628
sS'cpp_type'
p46629
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46630
sS'default'
p46631
g3
sS'name'
p46632
S'block'
p46633
sS'required'
p46634
I00
sS'group_name'
p46635
Nsa(dp46636
S'description'
p46637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46638
sS'cpp_type'
p46639
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46640
sS'default'
p46641
g3
sS'name'
p46642
S'control_tags'
p46643
sS'required'
p46644
I00
sS'group_name'
p46645
S'Advanced'
p46646
sa(dp46647
S'description'
p46648
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46649
sS'cpp_type'
p46650
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46651
sS'default'
p46652
g3
sS'name'
p46653
S'diag_save_in'
p46654
sS'required'
p46655
I00
sS'group_name'
p46656
S'Advanced'
p46657
sa(dp46658
S'description'
p46659
S'Whether or not this kernel will be used as an eigen kernel\n'
p46660
sS'cpp_type'
p46661
S'bool'
p46662
sS'default'
p46663
S'0'
p46664
sS'name'
p46665
S'eigen_kernel'
p46666
sS'required'
p46667
I00
sS'group_name'
p46668
Nsa(dp46669
S'description'
p46670
S'Set the enabled status of the MooseObject.\n'
p46671
sS'cpp_type'
p46672
S'bool'
p46673
sS'default'
p46674
S'1'
p46675
sS'name'
p46676
S'enable'
p46677
sS'required'
p46678
I00
sS'group_name'
p46679
S'Advanced'
p46680
sa(dp46681
S'description'
p46682
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46683
sS'cpp_type'
p46684
S'bool'
p46685
sS'default'
p46686
S'1'
p46687
sS'name'
p46688
S'implicit'
p46689
sS'required'
p46690
I00
sS'group_name'
p46691
S'Advanced'
p46692
sa(dp46693
S'description'
p46694
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46695
sS'cpp_type'
p46696
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46697
sS'default'
p46698
g3
sS'name'
p46699
S'save_in'
p46700
sS'required'
p46701
I00
sS'group_name'
p46702
S'Advanced'
p46703
sa(dp46704
S'description'
p46705
S'The seed for the master random number generator\n'
p46706
sS'cpp_type'
p46707
S'unsigned int'
p46708
sS'default'
p46709
S'0'
p46710
sS'name'
p46711
S'seed'
p46712
sS'required'
p46713
I00
sS'group_name'
p46714
S'Advanced'
p46715
sa(dp46716
S'description'
p46717
g3
sS'cpp_type'
p46718
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46719
sS'default'
p46720
S'CoupledTimeDerivative'
p46721
sS'name'
p46722
S'type'
p46723
sS'required'
p46724
I00
sS'group_name'
p46725
Nsa(dp46726
S'description'
p46727
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46728
sS'cpp_type'
p46729
S'bool'
p46730
sS'default'
p46731
S'0'
p46732
sS'name'
p46733
S'use_displaced_mesh'
p46734
sS'required'
p46735
I00
sS'group_name'
p46736
S'Advanced'
p46737
sa(dp46738
S'description'
p46739
S'Coupled variable\n'
p46740
sS'cpp_type'
p46741
S'std::vector<VariableName>'
p46742
sS'default'
p46743
g3
sS'name'
p46744
S'v'
p46745
sS'required'
p46746
I01
sS'group_name'
p46747
Nsa(dp46748
S'description'
p46749
S'The name of the variable that this Kernel operates on\n'
p46750
sS'cpp_type'
p46751
S'NonlinearVariableName'
p46752
sS'default'
p46753
g3
sS'name'
p46754
S'variable'
p46755
sS'required'
p46756
I01
sS'group_name'
p46757
NsasS'name'
p46758
S'/Kernels/CoupledTimeDerivative'
p46759
sa(dp46760
S'description'
p46761
S'The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak form of $(\\nabla \\phi_i, \\nabla u_h)$.\n'
p46762
sS'subblocks'
p46763
NsS'parameters'
p46764
(lp46765
(dp46766
S'description'
p46767
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46768
sS'cpp_type'
p46769
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46770
sS'default'
p46771
g3
sS'name'
p46772
S'block'
p46773
sS'required'
p46774
I00
sS'group_name'
p46775
Nsa(dp46776
S'description'
p46777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46778
sS'cpp_type'
p46779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46780
sS'default'
p46781
g3
sS'name'
p46782
S'control_tags'
p46783
sS'required'
p46784
I00
sS'group_name'
p46785
S'Advanced'
p46786
sa(dp46787
S'description'
p46788
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46789
sS'cpp_type'
p46790
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46791
sS'default'
p46792
g3
sS'name'
p46793
S'diag_save_in'
p46794
sS'required'
p46795
I00
sS'group_name'
p46796
S'Advanced'
p46797
sa(dp46798
S'description'
p46799
S'Whether or not this kernel will be used as an eigen kernel\n'
p46800
sS'cpp_type'
p46801
S'bool'
p46802
sS'default'
p46803
S'0'
p46804
sS'name'
p46805
S'eigen_kernel'
p46806
sS'required'
p46807
I00
sS'group_name'
p46808
Nsa(dp46809
S'description'
p46810
S'Set the enabled status of the MooseObject.\n'
p46811
sS'cpp_type'
p46812
S'bool'
p46813
sS'default'
p46814
S'1'
p46815
sS'name'
p46816
S'enable'
p46817
sS'required'
p46818
I00
sS'group_name'
p46819
S'Advanced'
p46820
sa(dp46821
S'description'
p46822
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46823
sS'cpp_type'
p46824
S'bool'
p46825
sS'default'
p46826
S'1'
p46827
sS'name'
p46828
S'implicit'
p46829
sS'required'
p46830
I00
sS'group_name'
p46831
S'Advanced'
p46832
sa(dp46833
S'description'
p46834
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46835
sS'cpp_type'
p46836
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46837
sS'default'
p46838
g3
sS'name'
p46839
S'save_in'
p46840
sS'required'
p46841
I00
sS'group_name'
p46842
S'Advanced'
p46843
sa(dp46844
S'description'
p46845
S'The seed for the master random number generator\n'
p46846
sS'cpp_type'
p46847
S'unsigned int'
p46848
sS'default'
p46849
S'0'
p46850
sS'name'
p46851
S'seed'
p46852
sS'required'
p46853
I00
sS'group_name'
p46854
S'Advanced'
p46855
sa(dp46856
S'description'
p46857
g3
sS'cpp_type'
p46858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46859
sS'default'
p46860
S'Diffusion'
p46861
sS'name'
p46862
S'type'
p46863
sS'required'
p46864
I00
sS'group_name'
p46865
Nsa(dp46866
S'description'
p46867
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46868
sS'cpp_type'
p46869
S'bool'
p46870
sS'default'
p46871
S'0'
p46872
sS'name'
p46873
S'use_displaced_mesh'
p46874
sS'required'
p46875
I00
sS'group_name'
p46876
S'Advanced'
p46877
sa(dp46878
S'description'
p46879
S'The name of the variable that this Kernel operates on\n'
p46880
sS'cpp_type'
p46881
S'NonlinearVariableName'
p46882
sS'default'
p46883
g3
sS'name'
p46884
S'variable'
p46885
sS'required'
p46886
I01
sS'group_name'
p46887
NsasS'name'
p46888
S'/Kernels/Diffusion'
p46889
sa(dp46890
S'description'
p46891
S'Residual due to stress related Rayleigh damping and HHT time integration terms \n'
p46892
sS'subblocks'
p46893
NsS'parameters'
p46894
(lp46895
(dp46896
S'description'
p46897
S'alpha parameter for HHT time integration\n'
p46898
sS'cpp_type'
p46899
S'double'
p46900
sS'default'
p46901
S'0'
p46902
sS'name'
p46903
S'alpha'
p46904
sS'required'
p46905
I00
sS'group_name'
p46906
Nsa(dp46907
S'description'
p46908
S'Material property base name\n'
p46909
sS'cpp_type'
p46910
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46911
sS'default'
p46912
g3
sS'name'
p46913
S'base_name'
p46914
sS'required'
p46915
I00
sS'group_name'
p46916
Nsa(dp46917
S'description'
p46918
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46919
sS'cpp_type'
p46920
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46921
sS'default'
p46922
g3
sS'name'
p46923
S'block'
p46924
sS'required'
p46925
I00
sS'group_name'
p46926
Nsa(dp46927
S'description'
p46928
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p46929
sS'cpp_type'
p46930
S'unsigned int'
p46931
sS'default'
p46932
g3
sS'name'
p46933
S'component'
p46934
sS'required'
p46935
I01
sS'group_name'
p46936
Nsa(dp46937
S'description'
p46938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46939
sS'cpp_type'
p46940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46941
sS'default'
p46942
g3
sS'name'
p46943
S'control_tags'
p46944
sS'required'
p46945
I00
sS'group_name'
p46946
S'Advanced'
p46947
sa(dp46948
S'description'
p46949
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46950
sS'cpp_type'
p46951
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46952
sS'default'
p46953
g3
sS'name'
p46954
S'diag_save_in'
p46955
sS'required'
p46956
I00
sS'group_name'
p46957
S'Advanced'
p46958
sa(dp46959
S'description'
p46960
S'The string of displacements suitable for the problem statement\n'
p46961
sS'cpp_type'
p46962
S'std::vector<VariableName>'
p46963
sS'default'
p46964
g3
sS'name'
p46965
S'displacements'
p46966
sS'required'
p46967
I01
sS'group_name'
p46968
Nsa(dp46969
S'description'
p46970
S'Whether or not this kernel will be used as an eigen kernel\n'
p46971
sS'cpp_type'
p46972
S'bool'
p46973
sS'default'
p46974
S'0'
p46975
sS'name'
p46976
S'eigen_kernel'
p46977
sS'required'
p46978
I00
sS'group_name'
p46979
Nsa(dp46980
S'description'
p46981
S'Set the enabled status of the MooseObject.\n'
p46982
sS'cpp_type'
p46983
S'bool'
p46984
sS'default'
p46985
S'1'
p46986
sS'name'
p46987
S'enable'
p46988
sS'required'
p46989
I00
sS'group_name'
p46990
S'Advanced'
p46991
sa(dp46992
S'description'
p46993
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46994
sS'cpp_type'
p46995
S'bool'
p46996
sS'default'
p46997
S'1'
p46998
sS'name'
p46999
S'implicit'
p47000
sS'required'
p47001
I00
sS'group_name'
p47002
S'Advanced'
p47003
sa(dp47004
S'description'
p47005
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47006
sS'cpp_type'
p47007
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47008
sS'default'
p47009
g3
sS'name'
p47010
S'save_in'
p47011
sS'required'
p47012
I00
sS'group_name'
p47013
S'Advanced'
p47014
sa(dp47015
S'description'
p47016
S'The seed for the master random number generator\n'
p47017
sS'cpp_type'
p47018
S'unsigned int'
p47019
sS'default'
p47020
S'0'
p47021
sS'name'
p47022
S'seed'
p47023
sS'required'
p47024
I00
sS'group_name'
p47025
S'Advanced'
p47026
sa(dp47027
S'description'
p47028
S'Set to true to get the system to equillibrium under gravity by running a quasi-static analysis (by solving Ku = F) in the first time step\n'
p47029
sS'cpp_type'
p47030
S'bool'
p47031
sS'default'
p47032
S'0'
p47033
sS'name'
p47034
S'static_initialization'
p47035
sS'required'
p47036
I00
sS'group_name'
p47037
Nsa(dp47038
S'description'
p47039
S'The temperature\n'
p47040
sS'cpp_type'
p47041
S'std::vector<VariableName>'
p47042
sS'default'
p47043
g3
sS'name'
p47044
S'temp'
p47045
sS'required'
p47046
I00
sS'group_name'
p47047
Nsa(dp47048
S'description'
p47049
S'The temperature\n'
p47050
sS'cpp_type'
p47051
S'std::vector<VariableName>'
p47052
sS'default'
p47053
g3
sS'name'
p47054
S'temperature'
p47055
sS'required'
p47056
I00
sS'group_name'
p47057
Nsa(dp47058
S'description'
p47059
g3
sS'cpp_type'
p47060
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47061
sS'default'
p47062
S'DynamicStressDivergenceTensors'
p47063
sS'name'
p47064
S'type'
p47065
sS'required'
p47066
I00
sS'group_name'
p47067
Nsa(dp47068
S'description'
p47069
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47070
sS'cpp_type'
p47071
S'bool'
p47072
sS'default'
p47073
S'0'
p47074
sS'name'
p47075
S'use_displaced_mesh'
p47076
sS'required'
p47077
I00
sS'group_name'
p47078
S'Advanced'
p47079
sa(dp47080
S'description'
p47081
S'Jacobian for corotational finite strain\n'
p47082
sS'cpp_type'
p47083
S'bool'
p47084
sS'default'
p47085
S'0'
p47086
sS'name'
p47087
S'use_finite_deform_jacobian'
p47088
sS'required'
p47089
I00
sS'group_name'
p47090
Nsa(dp47091
S'description'
p47092
S'The name of the variable that this Kernel operates on\n'
p47093
sS'cpp_type'
p47094
S'NonlinearVariableName'
p47095
sS'default'
p47096
g3
sS'name'
p47097
S'variable'
p47098
sS'required'
p47099
I01
sS'group_name'
p47100
Nsa(dp47101
S'description'
p47102
S'Set to false to turn off volumetric locking correction\n'
p47103
sS'cpp_type'
p47104
S'bool'
p47105
sS'default'
p47106
S'0'
p47107
sS'name'
p47108
S'volumetric_locking_correction'
p47109
sS'required'
p47110
I00
sS'group_name'
p47111
Nsa(dp47112
S'description'
p47113
S'Name of material property or a constant real number defining the zeta parameter for the Rayleigh damping.\n'
p47114
sS'cpp_type'
p47115
S'MaterialPropertyName'
p47116
sS'default'
p47117
S'0'
p47118
sS'name'
p47119
S'zeta'
p47120
sS'required'
p47121
I00
sS'group_name'
p47122
NsasS'name'
p47123
S'/Kernels/DynamicStressDivergenceTensors'
p47124
sa(dp47125
S'description'
p47126
g3
sS'subblocks'
p47127
NsS'parameters'
p47128
(lp47129
(dp47130
S'description'
p47131
S'Add the displacement variables\n'
p47132
sS'cpp_type'
p47133
S'bool'
p47134
sS'default'
p47135
S'0'
p47136
sS'name'
p47137
S'add_variables'
p47138
sS'required'
p47139
I00
sS'group_name'
p47140
Nsa(dp47141
S'name'
p47142
S'additional_generate_output'
p47143
sS'cpp_type'
p47144
S'MultiMooseEnum'
p47145
sS'default'
p47146
g3
sS'description'
p47147
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p47148
sS'required'
p47149
I00
sS'options'
p47150
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p47151
sS'group_name'
p47152
S'Output'
p47153
sa(dp47154
S'description'
p47155
S'alpha parameter for HHT time integration\n'
p47156
sS'cpp_type'
p47157
S'double'
p47158
sS'default'
p47159
S'0'
p47160
sS'name'
p47161
S'alpha'
p47162
sS'required'
p47163
I00
sS'group_name'
p47164
Nsa(dp47165
S'description'
p47166
S'Material property base name\n'
p47167
sS'cpp_type'
p47168
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47169
sS'default'
p47170
g3
sS'name'
p47171
S'base_name'
p47172
sS'required'
p47173
I00
sS'group_name'
p47174
Nsa(dp47175
S'description'
p47176
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p47177
sS'cpp_type'
p47178
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47179
sS'default'
p47180
g3
sS'name'
p47181
S'block'
p47182
sS'required'
p47183
I00
sS'group_name'
p47184
S'Advanced'
p47185
sa(dp47186
S'name'
p47187
S'decomposition_method'
p47188
sS'cpp_type'
p47189
S'MooseEnum'
p47190
sS'default'
p47191
S'TaylorExpansion'
p47192
sS'description'
p47193
S'Methods to calculate the finite strain and rotation increments\n'
p47194
sS'required'
p47195
I00
sS'options'
p47196
S'TaylorExpansion EigenSolution'
p47197
sS'group_name'
p47198
Nsa(dp47199
S'description'
p47200
S'The displacement diagonal preconditioner terms\n'
p47201
sS'cpp_type'
p47202
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47203
sS'default'
p47204
g3
sS'name'
p47205
S'diag_save_in'
p47206
sS'required'
p47207
I00
sS'group_name'
p47208
S'Advanced'
p47209
sa(dp47210
S'description'
p47211
S'The nonlinear displacement variables for the problem\n'
p47212
sS'cpp_type'
p47213
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p47214
sS'default'
p47215
g3
sS'name'
p47216
S'displacements'
p47217
sS'required'
p47218
I01
sS'group_name'
p47219
Nsa(dp47220
S'description'
p47221
S'List of eigenstrains to be applied in this strain calculation\n'
p47222
sS'cpp_type'
p47223
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p47224
sS'default'
p47225
g3
sS'name'
p47226
S'eigenstrain_names'
p47227
sS'required'
p47228
I00
sS'group_name'
p47229
Nsa(dp47230
S'name'
p47231
S'generate_output'
p47232
sS'cpp_type'
p47233
S'MultiMooseEnum'
p47234
sS'default'
p47235
g3
sS'description'
p47236
S'Add scalar quantity output for stress and/or strain\n'
p47237
sS'required'
p47238
I00
sS'options'
p47239
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p47240
sS'group_name'
p47241
S'Output'
p47242
sa(dp47243
S'description'
p47244
S'Use incremental or total strain\n'
p47245
sS'cpp_type'
p47246
S'bool'
p47247
sS'default'
p47248
g3
sS'name'
p47249
S'incremental'
p47250
sS'required'
p47251
I00
sS'group_name'
p47252
Nsa(dp47253
S'description'
p47254
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p47255
sS'cpp_type'
p47256
S'FunctionName'
p47257
sS'default'
p47258
S'0'
p47259
sS'name'
p47260
S'out_of_plane_pressure'
p47261
sS'required'
p47262
I00
sS'group_name'
p47263
S'Out-of-plane stress/strain'
p47264
sa(dp47265
S'name'
p47266
S'planar_formulation'
p47267
sS'cpp_type'
p47268
S'MooseEnum'
p47269
sS'default'
p47270
S'NONE'
p47271
sS'description'
p47272
S'Out-of-plane stress/strain formulation\n'
p47273
sS'required'
p47274
I00
sS'options'
p47275
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p47276
sS'group_name'
p47277
S'Out-of-plane stress/strain'
p47278
sa(dp47279
S'description'
p47280
S'Scale factor applied to prescribed pressure\n'
p47281
sS'cpp_type'
p47282
S'double'
p47283
sS'default'
p47284
S'1'
p47285
sS'name'
p47286
S'pressure_factor'
p47287
sS'required'
p47288
I00
sS'group_name'
p47289
S'Out-of-plane stress/strain'
p47290
sa(dp47291
S'description'
p47292
S'The displacement residuals\n'
p47293
sS'cpp_type'
p47294
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47295
sS'default'
p47296
g3
sS'name'
p47297
S'save_in'
p47298
sS'required'
p47299
I00
sS'group_name'
p47300
S'Advanced'
p47301
sa(dp47302
S'description'
p47303
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p47304
sS'cpp_type'
p47305
S'NonlinearVariableName'
p47306
sS'default'
p47307
g3
sS'name'
p47308
S'scalar_out_of_plane_strain'
p47309
sS'required'
p47310
I00
sS'group_name'
p47311
S'Out-of-plane stress/strain'
p47312
sa(dp47313
S'description'
p47314
S'Set to true get the system to equillibrium under gravity by running a quasi-static analysis (by solving Ku = F) in the first time step.\n'
p47315
sS'cpp_type'
p47316
S'bool'
p47317
sS'default'
p47318
S'0'
p47319
sS'name'
p47320
S'static_initialization'
p47321
sS'required'
p47322
I00
sS'group_name'
p47323
Nsa(dp47324
S'name'
p47325
S'strain'
p47326
sS'cpp_type'
p47327
S'MooseEnum'
p47328
sS'default'
p47329
S'SMALL'
p47330
sS'description'
p47331
S'Strain formulation\n'
p47332
sS'required'
p47333
I00
sS'options'
p47334
S'SMALL FINITE'
p47335
sS'group_name'
p47336
Nsa(dp47337
S'description'
p47338
S'The temperature\n'
p47339
sS'cpp_type'
p47340
S'NonlinearVariableName'
p47341
sS'default'
p47342
g3
sS'name'
p47343
S'temp'
p47344
sS'required'
p47345
I00
sS'group_name'
p47346
Nsa(dp47347
S'description'
p47348
S'The temperature\n'
p47349
sS'cpp_type'
p47350
S'NonlinearVariableName'
p47351
sS'default'
p47352
g3
sS'name'
p47353
S'temperature'
p47354
sS'required'
p47355
I00
sS'group_name'
p47356
Nsa(dp47357
S'description'
p47358
S'Whether to use displaced mesh in the kernels\n'
p47359
sS'cpp_type'
p47360
S'bool'
p47361
sS'default'
p47362
S'0'
p47363
sS'name'
p47364
S'use_displaced_mesh'
p47365
sS'required'
p47366
I00
sS'group_name'
p47367
Nsa(dp47368
S'description'
p47369
S'Jacobian for corrotational finite strain\n'
p47370
sS'cpp_type'
p47371
S'bool'
p47372
sS'default'
p47373
S'0'
p47374
sS'name'
p47375
S'use_finite_deform_jacobian'
p47376
sS'required'
p47377
I00
sS'group_name'
p47378
Nsa(dp47379
S'description'
p47380
S'Flag to correct volumetric locking\n'
p47381
sS'cpp_type'
p47382
S'bool'
p47383
sS'default'
p47384
S'0'
p47385
sS'name'
p47386
S'volumetric_locking_correction'
p47387
sS'required'
p47388
I00
sS'group_name'
p47389
Nsa(dp47390
S'description'
p47391
S'Name of material property or a constant real number defining the zeta parameter for the Rayleigh damping.\n'
p47392
sS'cpp_type'
p47393
S'MaterialPropertyName'
p47394
sS'default'
p47395
S'0'
p47396
sS'name'
p47397
S'zeta'
p47398
sS'required'
p47399
I00
sS'group_name'
p47400
NsasS'name'
p47401
S'/Kernels/DynamicTensorMechanics'
p47402
sa(dp47403
S'description'
p47404
S'Generalized Plane Strain kernel to provide contribution of the out-of-plane strain to other kernels\n'
p47405
sS'subblocks'
p47406
NsS'parameters'
p47407
(lp47408
(dp47409
S'description'
p47410
S'Material property base name\n'
p47411
sS'cpp_type'
p47412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47413
sS'default'
p47414
g3
sS'name'
p47415
S'base_name'
p47416
sS'required'
p47417
I00
sS'group_name'
p47418
Nsa(dp47419
S'description'
p47420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47421
sS'cpp_type'
p47422
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47423
sS'default'
p47424
g3
sS'name'
p47425
S'block'
p47426
sS'required'
p47427
I00
sS'group_name'
p47428
Nsa(dp47429
S'description'
p47430
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47431
sS'cpp_type'
p47432
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47433
sS'default'
p47434
g3
sS'name'
p47435
S'control_tags'
p47436
sS'required'
p47437
I00
sS'group_name'
p47438
S'Advanced'
p47439
sa(dp47440
S'description'
p47441
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47442
sS'cpp_type'
p47443
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47444
sS'default'
p47445
g3
sS'name'
p47446
S'diag_save_in'
p47447
sS'required'
p47448
I00
sS'group_name'
p47449
S'Advanced'
p47450
sa(dp47451
S'description'
p47452
S'Variable for the displacements\n'
p47453
sS'cpp_type'
p47454
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p47455
sS'default'
p47456
g3
sS'name'
p47457
S'displacements'
p47458
sS'required'
p47459
I01
sS'group_name'
p47460
Nsa(dp47461
S'description'
p47462
S'Whether or not this kernel will be used as an eigen kernel\n'
p47463
sS'cpp_type'
p47464
S'bool'
p47465
sS'default'
p47466
S'0'
p47467
sS'name'
p47468
S'eigen_kernel'
p47469
sS'required'
p47470
I00
sS'group_name'
p47471
Nsa(dp47472
S'description'
p47473
S'List of eigenstrains to be applied in this strain calculation\n'
p47474
sS'cpp_type'
p47475
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p47476
sS'default'
p47477
g3
sS'name'
p47478
S'eigenstrain_names'
p47479
sS'required'
p47480
I00
sS'group_name'
p47481
Nsa(dp47482
S'description'
p47483
S'Set the enabled status of the MooseObject.\n'
p47484
sS'cpp_type'
p47485
S'bool'
p47486
sS'default'
p47487
S'1'
p47488
sS'name'
p47489
S'enable'
p47490
sS'required'
p47491
I00
sS'group_name'
p47492
S'Advanced'
p47493
sa(dp47494
S'description'
p47495
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47496
sS'cpp_type'
p47497
S'bool'
p47498
sS'default'
p47499
S'1'
p47500
sS'name'
p47501
S'implicit'
p47502
sS'required'
p47503
I00
sS'group_name'
p47504
S'Advanced'
p47505
sa(dp47506
S'description'
p47507
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47508
sS'cpp_type'
p47509
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47510
sS'default'
p47511
g3
sS'name'
p47512
S'save_in'
p47513
sS'required'
p47514
I00
sS'group_name'
p47515
S'Advanced'
p47516
sa(dp47517
S'description'
p47518
S'Scalar variable for generalized plane strain\n'
p47519
sS'cpp_type'
p47520
S'std::vector<VariableName>'
p47521
sS'default'
p47522
g3
sS'name'
p47523
S'scalar_out_of_plane_strain'
p47524
sS'required'
p47525
I00
sS'group_name'
p47526
Nsa(dp47527
S'description'
p47528
S'The seed for the master random number generator\n'
p47529
sS'cpp_type'
p47530
S'unsigned int'
p47531
sS'default'
p47532
S'0'
p47533
sS'name'
p47534
S'seed'
p47535
sS'required'
p47536
I00
sS'group_name'
p47537
S'Advanced'
p47538
sa(dp47539
S'description'
p47540
S'Variable for the temperature\n'
p47541
sS'cpp_type'
p47542
S'NonlinearVariableName'
p47543
sS'default'
p47544
g3
sS'name'
p47545
S'temperature'
p47546
sS'required'
p47547
I00
sS'group_name'
p47548
Nsa(dp47549
S'description'
p47550
g3
sS'cpp_type'
p47551
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47552
sS'default'
p47553
S'GeneralizedPlaneStrainOffDiag'
p47554
sS'name'
p47555
S'type'
p47556
sS'required'
p47557
I00
sS'group_name'
p47558
Nsa(dp47559
S'description'
p47560
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47561
sS'cpp_type'
p47562
S'bool'
p47563
sS'default'
p47564
S'0'
p47565
sS'name'
p47566
S'use_displaced_mesh'
p47567
sS'required'
p47568
I00
sS'group_name'
p47569
S'Advanced'
p47570
sa(dp47571
S'description'
p47572
S'The name of the variable that this Kernel operates on\n'
p47573
sS'cpp_type'
p47574
S'NonlinearVariableName'
p47575
sS'default'
p47576
g3
sS'name'
p47577
S'variable'
p47578
sS'required'
p47579
I01
sS'group_name'
p47580
NsasS'name'
p47581
S'/Kernels/GeneralizedPlaneStrainOffDiag'
p47582
sa(dp47583
S'description'
p47584
S'Set the kernel variable to a specified component of the gradient of a coupled variable.\n'
p47585
sS'subblocks'
p47586
NsS'parameters'
p47587
(lp47588
(dp47589
S'description'
p47590
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47591
sS'cpp_type'
p47592
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47593
sS'default'
p47594
g3
sS'name'
p47595
S'block'
p47596
sS'required'
p47597
I00
sS'group_name'
p47598
Nsa(dp47599
S'description'
p47600
S'Component of the gradient of the coupled variable v\n'
p47601
sS'cpp_type'
p47602
S'unsigned int'
p47603
sS'default'
p47604
g3
sS'name'
p47605
S'component'
p47606
sS'required'
p47607
I01
sS'group_name'
p47608
Nsa(dp47609
S'description'
p47610
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47611
sS'cpp_type'
p47612
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47613
sS'default'
p47614
g3
sS'name'
p47615
S'control_tags'
p47616
sS'required'
p47617
I00
sS'group_name'
p47618
S'Advanced'
p47619
sa(dp47620
S'description'
p47621
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47622
sS'cpp_type'
p47623
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47624
sS'default'
p47625
g3
sS'name'
p47626
S'diag_save_in'
p47627
sS'required'
p47628
I00
sS'group_name'
p47629
S'Advanced'
p47630
sa(dp47631
S'description'
p47632
S'Whether or not this kernel will be used as an eigen kernel\n'
p47633
sS'cpp_type'
p47634
S'bool'
p47635
sS'default'
p47636
S'0'
p47637
sS'name'
p47638
S'eigen_kernel'
p47639
sS'required'
p47640
I00
sS'group_name'
p47641
Nsa(dp47642
S'description'
p47643
S'Set the enabled status of the MooseObject.\n'
p47644
sS'cpp_type'
p47645
S'bool'
p47646
sS'default'
p47647
S'1'
p47648
sS'name'
p47649
S'enable'
p47650
sS'required'
p47651
I00
sS'group_name'
p47652
S'Advanced'
p47653
sa(dp47654
S'description'
p47655
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47656
sS'cpp_type'
p47657
S'bool'
p47658
sS'default'
p47659
S'1'
p47660
sS'name'
p47661
S'implicit'
p47662
sS'required'
p47663
I00
sS'group_name'
p47664
S'Advanced'
p47665
sa(dp47666
S'description'
p47667
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47668
sS'cpp_type'
p47669
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47670
sS'default'
p47671
g3
sS'name'
p47672
S'save_in'
p47673
sS'required'
p47674
I00
sS'group_name'
p47675
S'Advanced'
p47676
sa(dp47677
S'description'
p47678
S'The seed for the master random number generator\n'
p47679
sS'cpp_type'
p47680
S'unsigned int'
p47681
sS'default'
p47682
S'0'
p47683
sS'name'
p47684
S'seed'
p47685
sS'required'
p47686
I00
sS'group_name'
p47687
S'Advanced'
p47688
sa(dp47689
S'description'
p47690
g3
sS'cpp_type'
p47691
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47692
sS'default'
p47693
S'GradientComponent'
p47694
sS'name'
p47695
S'type'
p47696
sS'required'
p47697
I00
sS'group_name'
p47698
Nsa(dp47699
S'description'
p47700
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47701
sS'cpp_type'
p47702
S'bool'
p47703
sS'default'
p47704
S'0'
p47705
sS'name'
p47706
S'use_displaced_mesh'
p47707
sS'required'
p47708
I00
sS'group_name'
p47709
S'Advanced'
p47710
sa(dp47711
S'description'
p47712
S'Coupled variable to match gradient component of\n'
p47713
sS'cpp_type'
p47714
S'std::vector<VariableName>'
p47715
sS'default'
p47716
g3
sS'name'
p47717
S'v'
p47718
sS'required'
p47719
I01
sS'group_name'
p47720
Nsa(dp47721
S'description'
p47722
S'The name of the variable that this Kernel operates on\n'
p47723
sS'cpp_type'
p47724
S'NonlinearVariableName'
p47725
sS'default'
p47726
g3
sS'name'
p47727
S'variable'
p47728
sS'required'
p47729
I01
sS'group_name'
p47730
NsasS'name'
p47731
S'/Kernels/GradientComponent'
p47732
sa(dp47733
S'description'
p47734
S'Apply gravity. Value is in units of acceleration.\n'
p47735
sS'subblocks'
p47736
NsS'parameters'
p47737
(lp47738
(dp47739
S'description'
p47740
S'alpha parameter required for HHT time integration scheme\n'
p47741
sS'cpp_type'
p47742
S'double'
p47743
sS'default'
p47744
S'0'
p47745
sS'name'
p47746
S'alpha'
p47747
sS'required'
p47748
I00
sS'group_name'
p47749
Nsa(dp47750
S'description'
p47751
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47752
sS'cpp_type'
p47753
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47754
sS'default'
p47755
g3
sS'name'
p47756
S'block'
p47757
sS'required'
p47758
I00
sS'group_name'
p47759
Nsa(dp47760
S'description'
p47761
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47762
sS'cpp_type'
p47763
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47764
sS'default'
p47765
g3
sS'name'
p47766
S'control_tags'
p47767
sS'required'
p47768
I00
sS'group_name'
p47769
S'Advanced'
p47770
sa(dp47771
S'description'
p47772
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47773
sS'cpp_type'
p47774
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47775
sS'default'
p47776
g3
sS'name'
p47777
S'diag_save_in'
p47778
sS'required'
p47779
I00
sS'group_name'
p47780
S'Advanced'
p47781
sa(dp47782
S'description'
p47783
S'Whether or not this kernel will be used as an eigen kernel\n'
p47784
sS'cpp_type'
p47785
S'bool'
p47786
sS'default'
p47787
S'0'
p47788
sS'name'
p47789
S'eigen_kernel'
p47790
sS'required'
p47791
I00
sS'group_name'
p47792
Nsa(dp47793
S'description'
p47794
S'Set the enabled status of the MooseObject.\n'
p47795
sS'cpp_type'
p47796
S'bool'
p47797
sS'default'
p47798
S'1'
p47799
sS'name'
p47800
S'enable'
p47801
sS'required'
p47802
I00
sS'group_name'
p47803
S'Advanced'
p47804
sa(dp47805
S'description'
p47806
S'A function that describes the gravitational force\n'
p47807
sS'cpp_type'
p47808
S'FunctionName'
p47809
sS'default'
p47810
S'1'
p47811
sS'name'
p47812
S'function'
p47813
sS'required'
p47814
I00
sS'group_name'
p47815
Nsa(dp47816
S'description'
p47817
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47818
sS'cpp_type'
p47819
S'bool'
p47820
sS'default'
p47821
S'1'
p47822
sS'name'
p47823
S'implicit'
p47824
sS'required'
p47825
I00
sS'group_name'
p47826
S'Advanced'
p47827
sa(dp47828
S'description'
p47829
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47830
sS'cpp_type'
p47831
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47832
sS'default'
p47833
g3
sS'name'
p47834
S'save_in'
p47835
sS'required'
p47836
I00
sS'group_name'
p47837
S'Advanced'
p47838
sa(dp47839
S'description'
p47840
S'The seed for the master random number generator\n'
p47841
sS'cpp_type'
p47842
S'unsigned int'
p47843
sS'default'
p47844
S'0'
p47845
sS'name'
p47846
S'seed'
p47847
sS'required'
p47848
I00
sS'group_name'
p47849
S'Advanced'
p47850
sa(dp47851
S'description'
p47852
g3
sS'cpp_type'
p47853
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47854
sS'default'
p47855
S'Gravity'
p47856
sS'name'
p47857
S'type'
p47858
sS'required'
p47859
I00
sS'group_name'
p47860
Nsa(dp47861
S'description'
p47862
S'Displaced mesh defaults to true\n'
p47863
sS'cpp_type'
p47864
S'bool'
p47865
sS'default'
p47866
S'1'
p47867
sS'name'
p47868
S'use_displaced_mesh'
p47869
sS'required'
p47870
I00
sS'group_name'
p47871
S'Advanced'
p47872
sa(dp47873
S'description'
p47874
g3
sS'cpp_type'
p47875
S'double'
p47876
sS'default'
p47877
S'0'
p47878
sS'name'
p47879
S'value'
p47880
sS'required'
p47881
I00
sS'group_name'
p47882
Nsa(dp47883
S'description'
p47884
S'The name of the variable that this Kernel operates on\n'
p47885
sS'cpp_type'
p47886
S'NonlinearVariableName'
p47887
sS'default'
p47888
g3
sS'name'
p47889
S'variable'
p47890
sS'required'
p47891
I01
sS'group_name'
p47892
NsasS'name'
p47893
S'/Kernels/Gravity'
p47894
sa(dp47895
S'description'
p47896
g3
sS'subblocks'
p47897
NsS'parameters'
p47898
(lp47899
(dp47900
S'description'
p47901
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47902
sS'cpp_type'
p47903
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47904
sS'default'
p47905
g3
sS'name'
p47906
S'block'
p47907
sS'required'
p47908
I00
sS'group_name'
p47909
Nsa(dp47910
S'description'
p47911
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47912
sS'cpp_type'
p47913
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47914
sS'default'
p47915
g3
sS'name'
p47916
S'control_tags'
p47917
sS'required'
p47918
I00
sS'group_name'
p47919
S'Advanced'
p47920
sa(dp47921
S'description'
p47922
S'The name of the coupled variable, if one is used in the kernel\n'
p47923
sS'cpp_type'
p47924
S'std::vector<VariableName>'
p47925
sS'default'
p47926
g3
sS'name'
p47927
S'coupled_var'
p47928
sS'required'
p47929
I00
sS'group_name'
p47930
Nsa(dp47931
S'description'
p47932
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47933
sS'cpp_type'
p47934
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47935
sS'default'
p47936
g3
sS'name'
p47937
S'diag_save_in'
p47938
sS'required'
p47939
I00
sS'group_name'
p47940
S'Advanced'
p47941
sa(dp47942
S'description'
p47943
S'Whether or not this kernel will be used as an eigen kernel\n'
p47944
sS'cpp_type'
p47945
S'bool'
p47946
sS'default'
p47947
S'0'
p47948
sS'name'
p47949
S'eigen_kernel'
p47950
sS'required'
p47951
I00
sS'group_name'
p47952
Nsa(dp47953
S'description'
p47954
S'Set the enabled status of the MooseObject.\n'
p47955
sS'cpp_type'
p47956
S'bool'
p47957
sS'default'
p47958
S'1'
p47959
sS'name'
p47960
S'enable'
p47961
sS'required'
p47962
I00
sS'group_name'
p47963
S'Advanced'
p47964
sa(dp47965
S'description'
p47966
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47967
sS'cpp_type'
p47968
S'bool'
p47969
sS'default'
p47970
S'1'
p47971
sS'name'
p47972
S'implicit'
p47973
sS'required'
p47974
I00
sS'group_name'
p47975
S'Advanced'
p47976
sa(dp47977
S'description'
p47978
S'If the kernel is positive, this is true, if negative, it is false\n'
p47979
sS'cpp_type'
p47980
S'bool'
p47981
sS'default'
p47982
g3
sS'name'
p47983
S'positive'
p47984
sS'required'
p47985
I01
sS'group_name'
p47986
Nsa(dp47987
S'description'
p47988
S'Name of material property to be used in the kernel\n'
p47989
sS'cpp_type'
p47990
S'MaterialPropertyName'
p47991
sS'default'
p47992
g3
sS'name'
p47993
S'prop_name'
p47994
sS'required'
p47995
I01
sS'group_name'
p47996
Nsa(dp47997
S'description'
p47998
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47999
sS'cpp_type'
p48000
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48001
sS'default'
p48002
g3
sS'name'
p48003
S'save_in'
p48004
sS'required'
p48005
I00
sS'group_name'
p48006
S'Advanced'
p48007
sa(dp48008
S'description'
p48009
S'The seed for the master random number generator\n'
p48010
sS'cpp_type'
p48011
S'unsigned int'
p48012
sS'default'
p48013
S'0'
p48014
sS'name'
p48015
S'seed'
p48016
sS'required'
p48017
I00
sS'group_name'
p48018
S'Advanced'
p48019
sa(dp48020
S'description'
p48021
g3
sS'cpp_type'
p48022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48023
sS'default'
p48024
S'HHPFCRFF'
p48025
sS'name'
p48026
S'type'
p48027
sS'required'
p48028
I00
sS'group_name'
p48029
Nsa(dp48030
S'description'
p48031
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48032
sS'cpp_type'
p48033
S'bool'
p48034
sS'default'
p48035
S'0'
p48036
sS'name'
p48037
S'use_displaced_mesh'
p48038
sS'required'
p48039
I00
sS'group_name'
p48040
S'Advanced'
p48041
sa(dp48042
S'description'
p48043
S'The name of the variable that this Kernel operates on\n'
p48044
sS'cpp_type'
p48045
S'NonlinearVariableName'
p48046
sS'default'
p48047
g3
sS'name'
p48048
S'variable'
p48049
sS'required'
p48050
I01
sS'group_name'
p48051
NsasS'name'
p48052
S'/Kernels/HHPFCRFF'
p48053
sa(dp48054
S'description'
p48055
g3
sS'subblocks'
p48056
NsS'parameters'
p48057
(lp48058
(dp48059
S'description'
p48060
S'Base name for the complex L variables\n'
p48061
sS'cpp_type'
p48062
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48063
sS'default'
p48064
g3
sS'name'
p48065
S'L_name_base'
p48066
sS'required'
p48067
I01
sS'group_name'
p48068
Nsa(dp48069
S'name'
p48070
S'log_approach'
p48071
sS'cpp_type'
p48072
S'MooseEnum'
p48073
sS'default'
p48074
g3
sS'description'
p48075
S'Which approach will be used to handle the natural log\n'
p48076
sS'required'
p48077
I01
sS'options'
p48078
S'tolerance cancelation expansion'
p48079
sS'group_name'
p48080
Nsa(dp48081
S'description'
p48082
S'The mobility used for n in this model\n'
p48083
sS'cpp_type'
p48084
S'MaterialPropertyName'
p48085
sS'default'
p48086
S'M'
p48087
sS'name'
p48088
S'mob_name'
p48089
sS'required'
p48090
I00
sS'group_name'
p48091
Nsa(dp48092
S'description'
p48093
S'Number of terms used in the Taylor expansion of the natural log term\n'
p48094
sS'cpp_type'
p48095
S'double'
p48096
sS'default'
p48097
S'4'
p48098
sS'name'
p48099
S'n_exp_terms'
p48100
sS'required'
p48101
I00
sS'group_name'
p48102
Nsa(dp48103
S'description'
p48104
S'Variable name used for the n variable\n'
p48105
sS'cpp_type'
p48106
S'VariableName'
p48107
sS'default'
p48108
g3
sS'name'
p48109
S'n_name'
p48110
sS'required'
p48111
I01
sS'group_name'
p48112
Nsa(dp48113
S'description'
p48114
S'specifies the number of complex L variables will be solved for\n'
p48115
sS'cpp_type'
p48116
S'unsigned int'
p48117
sS'default'
p48118
g3
sS'name'
p48119
S'num_L'
p48120
sS'required'
p48121
I01
sS'group_name'
p48122
Nsa(dp48123
S'description'
p48124
S'Tolerance used when the tolerance approach is chosen\n'
p48125
sS'cpp_type'
p48126
S'double'
p48127
sS'default'
p48128
S'1e-09'
p48129
sS'name'
p48130
S'tol'
p48131
sS'required'
p48132
I00
sS'group_name'
p48133
Nsa(dp48134
S'description'
p48135
S'Whether to use displaced mesh in the kernels\n'
p48136
sS'cpp_type'
p48137
S'bool'
p48138
sS'default'
p48139
S'0'
p48140
sS'name'
p48141
S'use_displaced_mesh'
p48142
sS'required'
p48143
I00
sS'group_name'
p48144
NsasS'name'
p48145
S'/Kernels/HHPFCRFFSplitKernel'
p48146
sa(dp48147
S'description'
p48148
S'Calculates the residual for the interial force (M*accel) and the contribution of mass dependent Rayleigh damping and HHT time integration scheme [eta*M*((1+alpha)vel-alpha*vel_old)]\n'
p48149
sS'subblocks'
p48150
NsS'parameters'
p48151
(lp48152
(dp48153
S'description'
p48154
S'acceleration variable\n'
p48155
sS'cpp_type'
p48156
S'std::vector<VariableName>'
p48157
sS'default'
p48158
g3
sS'name'
p48159
S'acceleration'
p48160
sS'required'
p48161
I01
sS'group_name'
p48162
Nsa(dp48163
S'description'
p48164
S'alpha parameter for mass dependent numerical damping induced by HHT time integration scheme\n'
p48165
sS'cpp_type'
p48166
S'double'
p48167
sS'default'
p48168
S'0'
p48169
sS'name'
p48170
S'alpha'
p48171
sS'required'
p48172
I00
sS'group_name'
p48173
Nsa(dp48174
S'description'
p48175
S'beta parameter for Newmark Time integration\n'
p48176
sS'cpp_type'
p48177
S'double'
p48178
sS'default'
p48179
g3
sS'name'
p48180
S'beta'
p48181
sS'required'
p48182
I01
sS'group_name'
p48183
Nsa(dp48184
S'description'
p48185
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48186
sS'cpp_type'
p48187
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48188
sS'default'
p48189
g3
sS'name'
p48190
S'block'
p48191
sS'required'
p48192
I00
sS'group_name'
p48193
Nsa(dp48194
S'description'
p48195
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48196
sS'cpp_type'
p48197
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48198
sS'default'
p48199
g3
sS'name'
p48200
S'control_tags'
p48201
sS'required'
p48202
I00
sS'group_name'
p48203
S'Advanced'
p48204
sa(dp48205
S'description'
p48206
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48207
sS'cpp_type'
p48208
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48209
sS'default'
p48210
g3
sS'name'
p48211
S'diag_save_in'
p48212
sS'required'
p48213
I00
sS'group_name'
p48214
S'Advanced'
p48215
sa(dp48216
S'description'
p48217
S'Whether or not this kernel will be used as an eigen kernel\n'
p48218
sS'cpp_type'
p48219
S'bool'
p48220
sS'default'
p48221
S'0'
p48222
sS'name'
p48223
S'eigen_kernel'
p48224
sS'required'
p48225
I00
sS'group_name'
p48226
Nsa(dp48227
S'description'
p48228
S'Set the enabled status of the MooseObject.\n'
p48229
sS'cpp_type'
p48230
S'bool'
p48231
sS'default'
p48232
S'1'
p48233
sS'name'
p48234
S'enable'
p48235
sS'required'
p48236
I00
sS'group_name'
p48237
S'Advanced'
p48238
sa(dp48239
S'description'
p48240
S'Name of material property or a constant real number defining the eta parameter for the Rayleigh damping.\n'
p48241
sS'cpp_type'
p48242
S'MaterialPropertyName'
p48243
sS'default'
p48244
S'0'
p48245
sS'name'
p48246
S'eta'
p48247
sS'required'
p48248
I00
sS'group_name'
p48249
Nsa(dp48250
S'description'
p48251
S'gamma parameter for Newmark Time integration\n'
p48252
sS'cpp_type'
p48253
S'double'
p48254
sS'default'
p48255
g3
sS'name'
p48256
S'gamma'
p48257
sS'required'
p48258
I01
sS'group_name'
p48259
Nsa(dp48260
S'description'
p48261
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48262
sS'cpp_type'
p48263
S'bool'
p48264
sS'default'
p48265
S'1'
p48266
sS'name'
p48267
S'implicit'
p48268
sS'required'
p48269
I00
sS'group_name'
p48270
S'Advanced'
p48271
sa(dp48272
S'description'
p48273
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48274
sS'cpp_type'
p48275
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48276
sS'default'
p48277
g3
sS'name'
p48278
S'save_in'
p48279
sS'required'
p48280
I00
sS'group_name'
p48281
S'Advanced'
p48282
sa(dp48283
S'description'
p48284
S'The seed for the master random number generator\n'
p48285
sS'cpp_type'
p48286
S'unsigned int'
p48287
sS'default'
p48288
S'0'
p48289
sS'name'
p48290
S'seed'
p48291
sS'required'
p48292
I00
sS'group_name'
p48293
S'Advanced'
p48294
sa(dp48295
S'description'
p48296
g3
sS'cpp_type'
p48297
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48298
sS'default'
p48299
S'InertialForce'
p48300
sS'name'
p48301
S'type'
p48302
sS'required'
p48303
I00
sS'group_name'
p48304
Nsa(dp48305
S'description'
p48306
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48307
sS'cpp_type'
p48308
S'bool'
p48309
sS'default'
p48310
S'1'
p48311
sS'name'
p48312
S'use_displaced_mesh'
p48313
sS'required'
p48314
I00
sS'group_name'
p48315
S'Advanced'
p48316
sa(dp48317
S'description'
p48318
S'The name of the variable that this Kernel operates on\n'
p48319
sS'cpp_type'
p48320
S'NonlinearVariableName'
p48321
sS'default'
p48322
g3
sS'name'
p48323
S'variable'
p48324
sS'required'
p48325
I01
sS'group_name'
p48326
Nsa(dp48327
S'description'
p48328
S'velocity variable\n'
p48329
sS'cpp_type'
p48330
S'std::vector<VariableName>'
p48331
sS'default'
p48332
g3
sS'name'
p48333
S'velocity'
p48334
sS'required'
p48335
I01
sS'group_name'
p48336
NsasS'name'
p48337
S'/Kernels/InertialForce'
p48338
sa(dp48339
S'description'
p48340
S'KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n'
p48341
sS'subblocks'
p48342
NsS'parameters'
p48343
(lp48344
(dp48345
S'description'
p48346
S'Vector of arguments of the mobility\n'
p48347
sS'cpp_type'
p48348
S'std::vector<VariableName>'
p48349
sS'default'
p48350
g3
sS'name'
p48351
S'args'
p48352
sS'required'
p48353
I00
sS'group_name'
p48354
Nsa(dp48355
S'description'
p48356
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48357
sS'cpp_type'
p48358
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48359
sS'default'
p48360
g3
sS'name'
p48361
S'block'
p48362
sS'required'
p48363
I00
sS'group_name'
p48364
Nsa(dp48365
S'description'
p48366
S'a-phase concentration\n'
p48367
sS'cpp_type'
p48368
S'std::vector<VariableName>'
p48369
sS'default'
p48370
g3
sS'name'
p48371
S'ca'
p48372
sS'required'
p48373
I01
sS'group_name'
p48374
Nsa(dp48375
S'description'
p48376
S'b-phase concentration\n'
p48377
sS'cpp_type'
p48378
S'std::vector<VariableName>'
p48379
sS'default'
p48380
g3
sS'name'
p48381
S'cb'
p48382
sS'required'
p48383
I01
sS'group_name'
p48384
Nsa(dp48385
S'description'
p48386
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48387
sS'cpp_type'
p48388
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48389
sS'default'
p48390
g3
sS'name'
p48391
S'control_tags'
p48392
sS'required'
p48393
I00
sS'group_name'
p48394
S'Advanced'
p48395
sa(dp48396
S'description'
p48397
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48398
sS'cpp_type'
p48399
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48400
sS'default'
p48401
g3
sS'name'
p48402
S'diag_save_in'
p48403
sS'required'
p48404
I00
sS'group_name'
p48405
S'Advanced'
p48406
sa(dp48407
S'description'
p48408
S'Whether or not this kernel will be used as an eigen kernel\n'
p48409
sS'cpp_type'
p48410
S'bool'
p48411
sS'default'
p48412
S'0'
p48413
sS'name'
p48414
S'eigen_kernel'
p48415
sS'required'
p48416
I00
sS'group_name'
p48417
Nsa(dp48418
S'description'
p48419
S'Set the enabled status of the MooseObject.\n'
p48420
sS'cpp_type'
p48421
S'bool'
p48422
sS'default'
p48423
S'1'
p48424
sS'name'
p48425
S'enable'
p48426
sS'required'
p48427
I00
sS'group_name'
p48428
S'Advanced'
p48429
sa(dp48430
S'description'
p48431
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p48432
sS'cpp_type'
p48433
S'MaterialPropertyName'
p48434
sS'default'
p48435
g3
sS'name'
p48436
S'fa_name'
p48437
sS'required'
p48438
I01
sS'group_name'
p48439
Nsa(dp48440
S'description'
p48441
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p48442
sS'cpp_type'
p48443
S'MaterialPropertyName'
p48444
sS'default'
p48445
g3
sS'name'
p48446
S'fb_name'
p48447
sS'required'
p48448
I01
sS'group_name'
p48449
Nsa(dp48450
S'description'
p48451
S'Base name for the switching function h(eta)\n'
p48452
sS'cpp_type'
p48453
S'MaterialPropertyName'
p48454
sS'default'
p48455
S'h'
p48456
sS'name'
p48457
S'h_name'
p48458
sS'required'
p48459
I00
sS'group_name'
p48460
Nsa(dp48461
S'description'
p48462
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48463
sS'cpp_type'
p48464
S'bool'
p48465
sS'default'
p48466
S'1'
p48467
sS'name'
p48468
S'implicit'
p48469
sS'required'
p48470
I00
sS'group_name'
p48471
S'Advanced'
p48472
sa(dp48473
S'description'
p48474
S'The mobility used with the kernel\n'
p48475
sS'cpp_type'
p48476
S'MaterialPropertyName'
p48477
sS'default'
p48478
S'L'
p48479
sS'name'
p48480
S'mob_name'
p48481
sS'required'
p48482
I00
sS'group_name'
p48483
Nsa(dp48484
S'description'
p48485
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48486
sS'cpp_type'
p48487
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48488
sS'default'
p48489
g3
sS'name'
p48490
S'save_in'
p48491
sS'required'
p48492
I00
sS'group_name'
p48493
S'Advanced'
p48494
sa(dp48495
S'description'
p48496
S'The seed for the master random number generator\n'
p48497
sS'cpp_type'
p48498
S'unsigned int'
p48499
sS'default'
p48500
S'0'
p48501
sS'name'
p48502
S'seed'
p48503
sS'required'
p48504
I00
sS'group_name'
p48505
S'Advanced'
p48506
sa(dp48507
S'description'
p48508
g3
sS'cpp_type'
p48509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48510
sS'default'
p48511
S'KKSACBulkC'
p48512
sS'name'
p48513
S'type'
p48514
sS'required'
p48515
I00
sS'group_name'
p48516
Nsa(dp48517
S'description'
p48518
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48519
sS'cpp_type'
p48520
S'bool'
p48521
sS'default'
p48522
S'0'
p48523
sS'name'
p48524
S'use_displaced_mesh'
p48525
sS'required'
p48526
I00
sS'group_name'
p48527
S'Advanced'
p48528
sa(dp48529
S'description'
p48530
S'The name of the variable that this Kernel operates on\n'
p48531
sS'cpp_type'
p48532
S'NonlinearVariableName'
p48533
sS'default'
p48534
g3
sS'name'
p48535
S'variable'
p48536
sS'required'
p48537
I01
sS'group_name'
p48538
NsasS'name'
p48539
S'/Kernels/KKSACBulkC'
p48540
sa(dp48541
S'description'
p48542
S'KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n'
p48543
sS'subblocks'
p48544
NsS'parameters'
p48545
(lp48546
(dp48547
S'description'
p48548
S'Vector of arguments of the mobility\n'
p48549
sS'cpp_type'
p48550
S'std::vector<VariableName>'
p48551
sS'default'
p48552
g3
sS'name'
p48553
S'args'
p48554
sS'required'
p48555
I00
sS'group_name'
p48556
Nsa(dp48557
S'description'
p48558
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48559
sS'cpp_type'
p48560
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48561
sS'default'
p48562
g3
sS'name'
p48563
S'block'
p48564
sS'required'
p48565
I00
sS'group_name'
p48566
Nsa(dp48567
S'description'
p48568
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48569
sS'cpp_type'
p48570
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48571
sS'default'
p48572
g3
sS'name'
p48573
S'control_tags'
p48574
sS'required'
p48575
I00
sS'group_name'
p48576
S'Advanced'
p48577
sa(dp48578
S'description'
p48579
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48580
sS'cpp_type'
p48581
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48582
sS'default'
p48583
g3
sS'name'
p48584
S'diag_save_in'
p48585
sS'required'
p48586
I00
sS'group_name'
p48587
S'Advanced'
p48588
sa(dp48589
S'description'
p48590
S'Whether or not this kernel will be used as an eigen kernel\n'
p48591
sS'cpp_type'
p48592
S'bool'
p48593
sS'default'
p48594
S'0'
p48595
sS'name'
p48596
S'eigen_kernel'
p48597
sS'required'
p48598
I00
sS'group_name'
p48599
Nsa(dp48600
S'description'
p48601
S'Set the enabled status of the MooseObject.\n'
p48602
sS'cpp_type'
p48603
S'bool'
p48604
sS'default'
p48605
S'1'
p48606
sS'name'
p48607
S'enable'
p48608
sS'required'
p48609
I00
sS'group_name'
p48610
S'Advanced'
p48611
sa(dp48612
S'description'
p48613
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p48614
sS'cpp_type'
p48615
S'MaterialPropertyName'
p48616
sS'default'
p48617
g3
sS'name'
p48618
S'fa_name'
p48619
sS'required'
p48620
I01
sS'group_name'
p48621
Nsa(dp48622
S'description'
p48623
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p48624
sS'cpp_type'
p48625
S'MaterialPropertyName'
p48626
sS'default'
p48627
g3
sS'name'
p48628
S'fb_name'
p48629
sS'required'
p48630
I01
sS'group_name'
p48631
Nsa(dp48632
S'description'
p48633
S'Base name for the double well function g(eta)\n'
p48634
sS'cpp_type'
p48635
S'MaterialPropertyName'
p48636
sS'default'
p48637
S'g'
p48638
sS'name'
p48639
S'g_name'
p48640
sS'required'
p48641
I00
sS'group_name'
p48642
Nsa(dp48643
S'description'
p48644
S'Base name for the switching function h(eta)\n'
p48645
sS'cpp_type'
p48646
S'MaterialPropertyName'
p48647
sS'default'
p48648
S'h'
p48649
sS'name'
p48650
S'h_name'
p48651
sS'required'
p48652
I00
sS'group_name'
p48653
Nsa(dp48654
S'description'
p48655
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48656
sS'cpp_type'
p48657
S'bool'
p48658
sS'default'
p48659
S'1'
p48660
sS'name'
p48661
S'implicit'
p48662
sS'required'
p48663
I00
sS'group_name'
p48664
S'Advanced'
p48665
sa(dp48666
S'description'
p48667
S'The mobility used with the kernel\n'
p48668
sS'cpp_type'
p48669
S'MaterialPropertyName'
p48670
sS'default'
p48671
S'L'
p48672
sS'name'
p48673
S'mob_name'
p48674
sS'required'
p48675
I00
sS'group_name'
p48676
Nsa(dp48677
S'description'
p48678
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48679
sS'cpp_type'
p48680
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48681
sS'default'
p48682
g3
sS'name'
p48683
S'save_in'
p48684
sS'required'
p48685
I00
sS'group_name'
p48686
S'Advanced'
p48687
sa(dp48688
S'description'
p48689
S'The seed for the master random number generator\n'
p48690
sS'cpp_type'
p48691
S'unsigned int'
p48692
sS'default'
p48693
S'0'
p48694
sS'name'
p48695
S'seed'
p48696
sS'required'
p48697
I00
sS'group_name'
p48698
S'Advanced'
p48699
sa(dp48700
S'description'
p48701
g3
sS'cpp_type'
p48702
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48703
sS'default'
p48704
S'KKSACBulkF'
p48705
sS'name'
p48706
S'type'
p48707
sS'required'
p48708
I00
sS'group_name'
p48709
Nsa(dp48710
S'description'
p48711
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48712
sS'cpp_type'
p48713
S'bool'
p48714
sS'default'
p48715
S'0'
p48716
sS'name'
p48717
S'use_displaced_mesh'
p48718
sS'required'
p48719
I00
sS'group_name'
p48720
S'Advanced'
p48721
sa(dp48722
S'description'
p48723
S'The name of the variable that this Kernel operates on\n'
p48724
sS'cpp_type'
p48725
S'NonlinearVariableName'
p48726
sS'default'
p48727
g3
sS'name'
p48728
S'variable'
p48729
sS'required'
p48730
I01
sS'group_name'
p48731
Nsa(dp48732
S'description'
p48733
S'Double well height parameter\n'
p48734
sS'cpp_type'
p48735
S'double'
p48736
sS'default'
p48737
g3
sS'name'
p48738
S'w'
p48739
sS'required'
p48740
I01
sS'group_name'
p48741
NsasS'name'
p48742
S'/Kernels/KKSACBulkF'
p48743
sa(dp48744
S'description'
p48745
S"KKS model kernel for the Bulk Cahn-Hilliard term. This operates on the concentration 'c' as the non-linear variable\n"
p48746
sS'subblocks'
p48747
NsS'parameters'
p48748
(lp48749
(dp48750
S'description'
p48751
S'Vector of arguments of the mobility\n'
p48752
sS'cpp_type'
p48753
S'std::vector<VariableName>'
p48754
sS'default'
p48755
g3
sS'name'
p48756
S'args'
p48757
sS'required'
p48758
I00
sS'group_name'
p48759
Nsa(dp48760
S'description'
p48761
S'Vector of additional arguments to Fa\n'
p48762
sS'cpp_type'
p48763
S'std::vector<VariableName>'
p48764
sS'default'
p48765
g3
sS'name'
p48766
S'args_a'
p48767
sS'required'
p48768
I00
sS'group_name'
p48769
Nsa(dp48770
S'description'
p48771
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48772
sS'cpp_type'
p48773
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48774
sS'default'
p48775
g3
sS'name'
p48776
S'block'
p48777
sS'required'
p48778
I00
sS'group_name'
p48779
Nsa(dp48780
S'description'
p48781
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p48782
sS'cpp_type'
p48783
S'std::vector<VariableName>'
p48784
sS'default'
p48785
g3
sS'name'
p48786
S'ca'
p48787
sS'required'
p48788
I01
sS'group_name'
p48789
Nsa(dp48790
S'description'
p48791
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p48792
sS'cpp_type'
p48793
S'std::vector<VariableName>'
p48794
sS'default'
p48795
g3
sS'name'
p48796
S'cb'
p48797
sS'required'
p48798
I01
sS'group_name'
p48799
Nsa(dp48800
S'description'
p48801
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48802
sS'cpp_type'
p48803
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48804
sS'default'
p48805
g3
sS'name'
p48806
S'control_tags'
p48807
sS'required'
p48808
I00
sS'group_name'
p48809
S'Advanced'
p48810
sa(dp48811
S'description'
p48812
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48813
sS'cpp_type'
p48814
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48815
sS'default'
p48816
g3
sS'name'
p48817
S'diag_save_in'
p48818
sS'required'
p48819
I00
sS'group_name'
p48820
S'Advanced'
p48821
sa(dp48822
S'description'
p48823
S'Whether or not this kernel will be used as an eigen kernel\n'
p48824
sS'cpp_type'
p48825
S'bool'
p48826
sS'default'
p48827
S'0'
p48828
sS'name'
p48829
S'eigen_kernel'
p48830
sS'required'
p48831
I00
sS'group_name'
p48832
Nsa(dp48833
S'description'
p48834
S'Set the enabled status of the MooseObject.\n'
p48835
sS'cpp_type'
p48836
S'bool'
p48837
sS'default'
p48838
S'1'
p48839
sS'name'
p48840
S'enable'
p48841
sS'required'
p48842
I00
sS'group_name'
p48843
S'Advanced'
p48844
sa(dp48845
S'description'
p48846
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p48847
sS'cpp_type'
p48848
S'MaterialPropertyName'
p48849
sS'default'
p48850
g3
sS'name'
p48851
S'fa_name'
p48852
sS'required'
p48853
I01
sS'group_name'
p48854
Nsa(dp48855
S'description'
p48856
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p48857
sS'cpp_type'
p48858
S'MaterialPropertyName'
p48859
sS'default'
p48860
g3
sS'name'
p48861
S'fb_name'
p48862
sS'required'
p48863
I01
sS'group_name'
p48864
Nsa(dp48865
S'description'
p48866
S'Base name for the switching function h(eta)\n'
p48867
sS'cpp_type'
p48868
S'MaterialPropertyName'
p48869
sS'default'
p48870
S'h'
p48871
sS'name'
p48872
S'h_name'
p48873
sS'required'
p48874
I00
sS'group_name'
p48875
Nsa(dp48876
S'description'
p48877
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48878
sS'cpp_type'
p48879
S'bool'
p48880
sS'default'
p48881
S'1'
p48882
sS'name'
p48883
S'implicit'
p48884
sS'required'
p48885
I00
sS'group_name'
p48886
S'Advanced'
p48887
sa(dp48888
S'description'
p48889
S'The mobility used with the kernel\n'
p48890
sS'cpp_type'
p48891
S'MaterialPropertyName'
p48892
sS'default'
p48893
S'M'
p48894
sS'name'
p48895
S'mob_name'
p48896
sS'required'
p48897
I00
sS'group_name'
p48898
Nsa(dp48899
S'description'
p48900
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48901
sS'cpp_type'
p48902
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48903
sS'default'
p48904
g3
sS'name'
p48905
S'save_in'
p48906
sS'required'
p48907
I00
sS'group_name'
p48908
S'Advanced'
p48909
sa(dp48910
S'description'
p48911
S'The seed for the master random number generator\n'
p48912
sS'cpp_type'
p48913
S'unsigned int'
p48914
sS'default'
p48915
S'0'
p48916
sS'name'
p48917
S'seed'
p48918
sS'required'
p48919
I00
sS'group_name'
p48920
S'Advanced'
p48921
sa(dp48922
S'description'
p48923
g3
sS'cpp_type'
p48924
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48925
sS'default'
p48926
S'KKSCHBulk'
p48927
sS'name'
p48928
S'type'
p48929
sS'required'
p48930
I00
sS'group_name'
p48931
Nsa(dp48932
S'description'
p48933
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48934
sS'cpp_type'
p48935
S'bool'
p48936
sS'default'
p48937
S'0'
p48938
sS'name'
p48939
S'use_displaced_mesh'
p48940
sS'required'
p48941
I00
sS'group_name'
p48942
S'Advanced'
p48943
sa(dp48944
S'description'
p48945
S'The name of the variable that this Kernel operates on\n'
p48946
sS'cpp_type'
p48947
S'NonlinearVariableName'
p48948
sS'default'
p48949
g3
sS'name'
p48950
S'variable'
p48951
sS'required'
p48952
I01
sS'group_name'
p48953
NsasS'name'
p48954
S'/Kernels/KKSCHBulk'
p48955
sa(dp48956
S'description'
p48957
S'Multi-phase KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n'
p48958
sS'subblocks'
p48959
NsS'parameters'
p48960
(lp48961
(dp48962
S'description'
p48963
S'List of free energies for each phase. Place in same order as hj_names!\n'
p48964
sS'cpp_type'
p48965
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p48966
sS'default'
p48967
g3
sS'name'
p48968
S'Fj_names'
p48969
sS'required'
p48970
I01
sS'group_name'
p48971
Nsa(dp48972
S'description'
p48973
S'Vector of arguments of the mobility\n'
p48974
sS'cpp_type'
p48975
S'std::vector<VariableName>'
p48976
sS'default'
p48977
g3
sS'name'
p48978
S'args'
p48979
sS'required'
p48980
I00
sS'group_name'
p48981
Nsa(dp48982
S'description'
p48983
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48984
sS'cpp_type'
p48985
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48986
sS'default'
p48987
g3
sS'name'
p48988
S'block'
p48989
sS'required'
p48990
I00
sS'group_name'
p48991
Nsa(dp48992
S'description'
p48993
S'Array of phase concentrations cj. Place in same order as Fj_names!\n'
p48994
sS'cpp_type'
p48995
S'std::vector<VariableName>'
p48996
sS'default'
p48997
g3
sS'name'
p48998
S'cj_names'
p48999
sS'required'
p49000
I01
sS'group_name'
p49001
Nsa(dp49002
S'description'
p49003
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49004
sS'cpp_type'
p49005
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49006
sS'default'
p49007
g3
sS'name'
p49008
S'control_tags'
p49009
sS'required'
p49010
I00
sS'group_name'
p49011
S'Advanced'
p49012
sa(dp49013
S'description'
p49014
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49015
sS'cpp_type'
p49016
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49017
sS'default'
p49018
g3
sS'name'
p49019
S'diag_save_in'
p49020
sS'required'
p49021
I00
sS'group_name'
p49022
S'Advanced'
p49023
sa(dp49024
S'description'
p49025
S'Whether or not this kernel will be used as an eigen kernel\n'
p49026
sS'cpp_type'
p49027
S'bool'
p49028
sS'default'
p49029
S'0'
p49030
sS'name'
p49031
S'eigen_kernel'
p49032
sS'required'
p49033
I00
sS'group_name'
p49034
Nsa(dp49035
S'description'
p49036
S'Set the enabled status of the MooseObject.\n'
p49037
sS'cpp_type'
p49038
S'bool'
p49039
sS'default'
p49040
S'1'
p49041
sS'name'
p49042
S'enable'
p49043
sS'required'
p49044
I00
sS'group_name'
p49045
S'Advanced'
p49046
sa(dp49047
S'description'
p49048
S'Order parameter that derivatives are taken with respect to\n'
p49049
sS'cpp_type'
p49050
S'std::vector<VariableName>'
p49051
sS'default'
p49052
g3
sS'name'
p49053
S'eta_i'
p49054
sS'required'
p49055
I01
sS'group_name'
p49056
Nsa(dp49057
S'description'
p49058
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p49059
sS'cpp_type'
p49060
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49061
sS'default'
p49062
g3
sS'name'
p49063
S'hj_names'
p49064
sS'required'
p49065
I01
sS'group_name'
p49066
Nsa(dp49067
S'description'
p49068
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49069
sS'cpp_type'
p49070
S'bool'
p49071
sS'default'
p49072
S'1'
p49073
sS'name'
p49074
S'implicit'
p49075
sS'required'
p49076
I00
sS'group_name'
p49077
S'Advanced'
p49078
sa(dp49079
S'description'
p49080
S'The mobility used with the kernel\n'
p49081
sS'cpp_type'
p49082
S'MaterialPropertyName'
p49083
sS'default'
p49084
S'L'
p49085
sS'name'
p49086
S'mob_name'
p49087
sS'required'
p49088
I00
sS'group_name'
p49089
Nsa(dp49090
S'description'
p49091
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49092
sS'cpp_type'
p49093
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49094
sS'default'
p49095
g3
sS'name'
p49096
S'save_in'
p49097
sS'required'
p49098
I00
sS'group_name'
p49099
S'Advanced'
p49100
sa(dp49101
S'description'
p49102
S'The seed for the master random number generator\n'
p49103
sS'cpp_type'
p49104
S'unsigned int'
p49105
sS'default'
p49106
S'0'
p49107
sS'name'
p49108
S'seed'
p49109
sS'required'
p49110
I00
sS'group_name'
p49111
S'Advanced'
p49112
sa(dp49113
S'description'
p49114
g3
sS'cpp_type'
p49115
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49116
sS'default'
p49117
S'KKSMultiACBulkC'
p49118
sS'name'
p49119
S'type'
p49120
sS'required'
p49121
I00
sS'group_name'
p49122
Nsa(dp49123
S'description'
p49124
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49125
sS'cpp_type'
p49126
S'bool'
p49127
sS'default'
p49128
S'0'
p49129
sS'name'
p49130
S'use_displaced_mesh'
p49131
sS'required'
p49132
I00
sS'group_name'
p49133
S'Advanced'
p49134
sa(dp49135
S'description'
p49136
S'The name of the variable that this Kernel operates on\n'
p49137
sS'cpp_type'
p49138
S'NonlinearVariableName'
p49139
sS'default'
p49140
g3
sS'name'
p49141
S'variable'
p49142
sS'required'
p49143
I01
sS'group_name'
p49144
NsasS'name'
p49145
S'/Kernels/KKSMultiACBulkC'
p49146
sa(dp49147
S'description'
p49148
S'KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n'
p49149
sS'subblocks'
p49150
NsS'parameters'
p49151
(lp49152
(dp49153
S'description'
p49154
S'List of free energies for each phase. Place in same order as hj_names!\n'
p49155
sS'cpp_type'
p49156
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49157
sS'default'
p49158
g3
sS'name'
p49159
S'Fj_names'
p49160
sS'required'
p49161
I01
sS'group_name'
p49162
Nsa(dp49163
S'description'
p49164
S'Vector of arguments of the mobility\n'
p49165
sS'cpp_type'
p49166
S'std::vector<VariableName>'
p49167
sS'default'
p49168
g3
sS'name'
p49169
S'args'
p49170
sS'required'
p49171
I00
sS'group_name'
p49172
Nsa(dp49173
S'description'
p49174
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49175
sS'cpp_type'
p49176
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49177
sS'default'
p49178
g3
sS'name'
p49179
S'block'
p49180
sS'required'
p49181
I00
sS'group_name'
p49182
Nsa(dp49183
S'description'
p49184
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49185
sS'cpp_type'
p49186
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49187
sS'default'
p49188
g3
sS'name'
p49189
S'control_tags'
p49190
sS'required'
p49191
I00
sS'group_name'
p49192
S'Advanced'
p49193
sa(dp49194
S'description'
p49195
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49196
sS'cpp_type'
p49197
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49198
sS'default'
p49199
g3
sS'name'
p49200
S'diag_save_in'
p49201
sS'required'
p49202
I00
sS'group_name'
p49203
S'Advanced'
p49204
sa(dp49205
S'description'
p49206
S'Whether or not this kernel will be used as an eigen kernel\n'
p49207
sS'cpp_type'
p49208
S'bool'
p49209
sS'default'
p49210
S'0'
p49211
sS'name'
p49212
S'eigen_kernel'
p49213
sS'required'
p49214
I00
sS'group_name'
p49215
Nsa(dp49216
S'description'
p49217
S'Set the enabled status of the MooseObject.\n'
p49218
sS'cpp_type'
p49219
S'bool'
p49220
sS'default'
p49221
S'1'
p49222
sS'name'
p49223
S'enable'
p49224
sS'required'
p49225
I00
sS'group_name'
p49226
S'Advanced'
p49227
sa(dp49228
S'description'
p49229
S'Order parameter that derivatives are taken with respect to\n'
p49230
sS'cpp_type'
p49231
S'std::vector<VariableName>'
p49232
sS'default'
p49233
g3
sS'name'
p49234
S'eta_i'
p49235
sS'required'
p49236
I01
sS'group_name'
p49237
Nsa(dp49238
S'description'
p49239
S'Base name for the double well function g_i(eta_i)\n'
p49240
sS'cpp_type'
p49241
S'MaterialPropertyName'
p49242
sS'default'
p49243
g3
sS'name'
p49244
S'gi_name'
p49245
sS'required'
p49246
I01
sS'group_name'
p49247
Nsa(dp49248
S'description'
p49249
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p49250
sS'cpp_type'
p49251
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49252
sS'default'
p49253
g3
sS'name'
p49254
S'hj_names'
p49255
sS'required'
p49256
I01
sS'group_name'
p49257
Nsa(dp49258
S'description'
p49259
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49260
sS'cpp_type'
p49261
S'bool'
p49262
sS'default'
p49263
S'1'
p49264
sS'name'
p49265
S'implicit'
p49266
sS'required'
p49267
I00
sS'group_name'
p49268
S'Advanced'
p49269
sa(dp49270
S'description'
p49271
S'The mobility used with the kernel\n'
p49272
sS'cpp_type'
p49273
S'MaterialPropertyName'
p49274
sS'default'
p49275
S'L'
p49276
sS'name'
p49277
S'mob_name'
p49278
sS'required'
p49279
I00
sS'group_name'
p49280
Nsa(dp49281
S'description'
p49282
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49283
sS'cpp_type'
p49284
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49285
sS'default'
p49286
g3
sS'name'
p49287
S'save_in'
p49288
sS'required'
p49289
I00
sS'group_name'
p49290
S'Advanced'
p49291
sa(dp49292
S'description'
p49293
S'The seed for the master random number generator\n'
p49294
sS'cpp_type'
p49295
S'unsigned int'
p49296
sS'default'
p49297
S'0'
p49298
sS'name'
p49299
S'seed'
p49300
sS'required'
p49301
I00
sS'group_name'
p49302
S'Advanced'
p49303
sa(dp49304
S'description'
p49305
g3
sS'cpp_type'
p49306
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49307
sS'default'
p49308
S'KKSMultiACBulkF'
p49309
sS'name'
p49310
S'type'
p49311
sS'required'
p49312
I00
sS'group_name'
p49313
Nsa(dp49314
S'description'
p49315
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49316
sS'cpp_type'
p49317
S'bool'
p49318
sS'default'
p49319
S'0'
p49320
sS'name'
p49321
S'use_displaced_mesh'
p49322
sS'required'
p49323
I00
sS'group_name'
p49324
S'Advanced'
p49325
sa(dp49326
S'description'
p49327
S'The name of the variable that this Kernel operates on\n'
p49328
sS'cpp_type'
p49329
S'NonlinearVariableName'
p49330
sS'default'
p49331
g3
sS'name'
p49332
S'variable'
p49333
sS'required'
p49334
I01
sS'group_name'
p49335
Nsa(dp49336
S'description'
p49337
S'Double well height parameter\n'
p49338
sS'cpp_type'
p49339
S'double'
p49340
sS'default'
p49341
g3
sS'name'
p49342
S'wi'
p49343
sS'required'
p49344
I01
sS'group_name'
p49345
NsasS'name'
p49346
S'/Kernels/KKSMultiACBulkF'
p49347
sa(dp49348
S'description'
p49349
S'KKS multi-phase model kernel to enforce (c = h1*c1 + h2*c2 + h3*c3 +.. The non-linear variable of this kernel is cn, the final phase concenration in the list.\n'
p49350
sS'subblocks'
p49351
NsS'parameters'
p49352
(lp49353
(dp49354
S'description'
p49355
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49356
sS'cpp_type'
p49357
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49358
sS'default'
p49359
g3
sS'name'
p49360
S'block'
p49361
sS'required'
p49362
I00
sS'group_name'
p49363
Nsa(dp49364
S'description'
p49365
S'Physical concentration\n'
p49366
sS'cpp_type'
p49367
S'std::vector<VariableName>'
p49368
sS'default'
p49369
g3
sS'name'
p49370
S'c'
p49371
sS'required'
p49372
I01
sS'group_name'
p49373
Nsa(dp49374
S'description'
p49375
S'Array of phase concentrations cj. Place in same order as hj_names!\n'
p49376
sS'cpp_type'
p49377
S'std::vector<VariableName>'
p49378
sS'default'
p49379
g3
sS'name'
p49380
S'cj'
p49381
sS'required'
p49382
I01
sS'group_name'
p49383
Nsa(dp49384
S'description'
p49385
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49386
sS'cpp_type'
p49387
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49388
sS'default'
p49389
g3
sS'name'
p49390
S'control_tags'
p49391
sS'required'
p49392
I00
sS'group_name'
p49393
S'Advanced'
p49394
sa(dp49395
S'description'
p49396
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49397
sS'cpp_type'
p49398
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49399
sS'default'
p49400
g3
sS'name'
p49401
S'diag_save_in'
p49402
sS'required'
p49403
I00
sS'group_name'
p49404
S'Advanced'
p49405
sa(dp49406
S'description'
p49407
S'Whether or not this kernel will be used as an eigen kernel\n'
p49408
sS'cpp_type'
p49409
S'bool'
p49410
sS'default'
p49411
S'0'
p49412
sS'name'
p49413
S'eigen_kernel'
p49414
sS'required'
p49415
I00
sS'group_name'
p49416
Nsa(dp49417
S'description'
p49418
S'Set the enabled status of the MooseObject.\n'
p49419
sS'cpp_type'
p49420
S'bool'
p49421
sS'default'
p49422
S'1'
p49423
sS'name'
p49424
S'enable'
p49425
sS'required'
p49426
I00
sS'group_name'
p49427
S'Advanced'
p49428
sa(dp49429
S'description'
p49430
S'Order parameters for all phases\n'
p49431
sS'cpp_type'
p49432
S'std::vector<VariableName>'
p49433
sS'default'
p49434
g3
sS'name'
p49435
S'etas'
p49436
sS'required'
p49437
I00
sS'group_name'
p49438
Nsa(dp49439
S'description'
p49440
S'Switching Function Materials that provide h(eta_1, eta_2,...)\n'
p49441
sS'cpp_type'
p49442
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49443
sS'default'
p49444
g3
sS'name'
p49445
S'hj_names'
p49446
sS'required'
p49447
I01
sS'group_name'
p49448
Nsa(dp49449
S'description'
p49450
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49451
sS'cpp_type'
p49452
S'bool'
p49453
sS'default'
p49454
S'1'
p49455
sS'name'
p49456
S'implicit'
p49457
sS'required'
p49458
I00
sS'group_name'
p49459
S'Advanced'
p49460
sa(dp49461
S'description'
p49462
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49463
sS'cpp_type'
p49464
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49465
sS'default'
p49466
g3
sS'name'
p49467
S'save_in'
p49468
sS'required'
p49469
I00
sS'group_name'
p49470
S'Advanced'
p49471
sa(dp49472
S'description'
p49473
S'The seed for the master random number generator\n'
p49474
sS'cpp_type'
p49475
S'unsigned int'
p49476
sS'default'
p49477
S'0'
p49478
sS'name'
p49479
S'seed'
p49480
sS'required'
p49481
I00
sS'group_name'
p49482
S'Advanced'
p49483
sa(dp49484
S'description'
p49485
g3
sS'cpp_type'
p49486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49487
sS'default'
p49488
S'KKSMultiPhaseConcentration'
p49489
sS'name'
p49490
S'type'
p49491
sS'required'
p49492
I00
sS'group_name'
p49493
Nsa(dp49494
S'description'
p49495
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49496
sS'cpp_type'
p49497
S'bool'
p49498
sS'default'
p49499
S'0'
p49500
sS'name'
p49501
S'use_displaced_mesh'
p49502
sS'required'
p49503
I00
sS'group_name'
p49504
S'Advanced'
p49505
sa(dp49506
S'description'
p49507
S'The name of the variable that this Kernel operates on\n'
p49508
sS'cpp_type'
p49509
S'NonlinearVariableName'
p49510
sS'default'
p49511
g3
sS'name'
p49512
S'variable'
p49513
sS'required'
p49514
I01
sS'group_name'
p49515
NsasS'name'
p49516
S'/Kernels/KKSMultiPhaseConcentration'
p49517
sa(dp49518
S'description'
p49519
S'KKS model kernel to enforce the pointwise equality of phase chemical potentials  dFa/dca = dFb/dcb. The non-linear variable of this kernel is ca.\n'
p49520
sS'subblocks'
p49521
NsS'parameters'
p49522
(lp49523
(dp49524
S'description'
p49525
S'Vector of further parameters to Fa (optional, to add in second cross derivatives of Fa)\n'
p49526
sS'cpp_type'
p49527
S'std::vector<VariableName>'
p49528
sS'default'
p49529
g3
sS'name'
p49530
S'args_a'
p49531
sS'required'
p49532
I00
sS'group_name'
p49533
Nsa(dp49534
S'description'
p49535
S'Vector of further parameters to Fb (optional, to add in second cross derivatives of Fb)\n'
p49536
sS'cpp_type'
p49537
S'std::vector<VariableName>'
p49538
sS'default'
p49539
g3
sS'name'
p49540
S'args_b'
p49541
sS'required'
p49542
I00
sS'group_name'
p49543
Nsa(dp49544
S'description'
p49545
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49546
sS'cpp_type'
p49547
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49548
sS'default'
p49549
g3
sS'name'
p49550
S'block'
p49551
sS'required'
p49552
I00
sS'group_name'
p49553
Nsa(dp49554
S'description'
p49555
S'Phase b concentration\n'
p49556
sS'cpp_type'
p49557
S'std::vector<VariableName>'
p49558
sS'default'
p49559
g3
sS'name'
p49560
S'cb'
p49561
sS'required'
p49562
I01
sS'group_name'
p49563
Nsa(dp49564
S'description'
p49565
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49566
sS'cpp_type'
p49567
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49568
sS'default'
p49569
g3
sS'name'
p49570
S'control_tags'
p49571
sS'required'
p49572
I00
sS'group_name'
p49573
S'Advanced'
p49574
sa(dp49575
S'description'
p49576
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49577
sS'cpp_type'
p49578
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49579
sS'default'
p49580
g3
sS'name'
p49581
S'diag_save_in'
p49582
sS'required'
p49583
I00
sS'group_name'
p49584
S'Advanced'
p49585
sa(dp49586
S'description'
p49587
S'Whether or not this kernel will be used as an eigen kernel\n'
p49588
sS'cpp_type'
p49589
S'bool'
p49590
sS'default'
p49591
S'0'
p49592
sS'name'
p49593
S'eigen_kernel'
p49594
sS'required'
p49595
I00
sS'group_name'
p49596
Nsa(dp49597
S'description'
p49598
S'Set the enabled status of the MooseObject.\n'
p49599
sS'cpp_type'
p49600
S'bool'
p49601
sS'default'
p49602
S'1'
p49603
sS'name'
p49604
S'enable'
p49605
sS'required'
p49606
I00
sS'group_name'
p49607
S'Advanced'
p49608
sa(dp49609
S'description'
p49610
S'Base name of the free energy function Fa (f_name in the corresponding derivative function material)\n'
p49611
sS'cpp_type'
p49612
S'MaterialPropertyName'
p49613
sS'default'
p49614
g3
sS'name'
p49615
S'fa_name'
p49616
sS'required'
p49617
I01
sS'group_name'
p49618
Nsa(dp49619
S'description'
p49620
S'Base name of the free energy function Fb (f_name in the corresponding derivative function material)\n'
p49621
sS'cpp_type'
p49622
S'MaterialPropertyName'
p49623
sS'default'
p49624
g3
sS'name'
p49625
S'fb_name'
p49626
sS'required'
p49627
I01
sS'group_name'
p49628
Nsa(dp49629
S'description'
p49630
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49631
sS'cpp_type'
p49632
S'bool'
p49633
sS'default'
p49634
S'1'
p49635
sS'name'
p49636
S'implicit'
p49637
sS'required'
p49638
I00
sS'group_name'
p49639
S'Advanced'
p49640
sa(dp49641
S'description'
p49642
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49643
sS'cpp_type'
p49644
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49645
sS'default'
p49646
g3
sS'name'
p49647
S'save_in'
p49648
sS'required'
p49649
I00
sS'group_name'
p49650
S'Advanced'
p49651
sa(dp49652
S'description'
p49653
S'The seed for the master random number generator\n'
p49654
sS'cpp_type'
p49655
S'unsigned int'
p49656
sS'default'
p49657
S'0'
p49658
sS'name'
p49659
S'seed'
p49660
sS'required'
p49661
I00
sS'group_name'
p49662
S'Advanced'
p49663
sa(dp49664
S'description'
p49665
g3
sS'cpp_type'
p49666
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49667
sS'default'
p49668
S'KKSPhaseChemicalPotential'
p49669
sS'name'
p49670
S'type'
p49671
sS'required'
p49672
I00
sS'group_name'
p49673
Nsa(dp49674
S'description'
p49675
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49676
sS'cpp_type'
p49677
S'bool'
p49678
sS'default'
p49679
S'0'
p49680
sS'name'
p49681
S'use_displaced_mesh'
p49682
sS'required'
p49683
I00
sS'group_name'
p49684
S'Advanced'
p49685
sa(dp49686
S'description'
p49687
S'The name of the variable that this Kernel operates on\n'
p49688
sS'cpp_type'
p49689
S'NonlinearVariableName'
p49690
sS'default'
p49691
g3
sS'name'
p49692
S'variable'
p49693
sS'required'
p49694
I01
sS'group_name'
p49695
NsasS'name'
p49696
S'/Kernels/KKSPhaseChemicalPotential'
p49697
sa(dp49698
S'description'
p49699
S'KKS model kernel to enforce the decomposition of concentration into phase concentration  (1-h(eta))*ca + h(eta)*cb - c = 0. The non-linear variable of this kernel is cb.\n'
p49700
sS'subblocks'
p49701
NsS'parameters'
p49702
(lp49703
(dp49704
S'description'
p49705
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49706
sS'cpp_type'
p49707
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49708
sS'default'
p49709
g3
sS'name'
p49710
S'block'
p49711
sS'required'
p49712
I00
sS'group_name'
p49713
Nsa(dp49714
S'description'
p49715
S'Real concentration\n'
p49716
sS'cpp_type'
p49717
S'std::vector<VariableName>'
p49718
sS'default'
p49719
g3
sS'name'
p49720
S'c'
p49721
sS'required'
p49722
I01
sS'group_name'
p49723
Nsa(dp49724
S'description'
p49725
S'Phase a concentration\n'
p49726
sS'cpp_type'
p49727
S'std::vector<VariableName>'
p49728
sS'default'
p49729
g3
sS'name'
p49730
S'ca'
p49731
sS'required'
p49732
I01
sS'group_name'
p49733
Nsa(dp49734
S'description'
p49735
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49736
sS'cpp_type'
p49737
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49738
sS'default'
p49739
g3
sS'name'
p49740
S'control_tags'
p49741
sS'required'
p49742
I00
sS'group_name'
p49743
S'Advanced'
p49744
sa(dp49745
S'description'
p49746
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49747
sS'cpp_type'
p49748
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49749
sS'default'
p49750
g3
sS'name'
p49751
S'diag_save_in'
p49752
sS'required'
p49753
I00
sS'group_name'
p49754
S'Advanced'
p49755
sa(dp49756
S'description'
p49757
S'Whether or not this kernel will be used as an eigen kernel\n'
p49758
sS'cpp_type'
p49759
S'bool'
p49760
sS'default'
p49761
S'0'
p49762
sS'name'
p49763
S'eigen_kernel'
p49764
sS'required'
p49765
I00
sS'group_name'
p49766
Nsa(dp49767
S'description'
p49768
S'Set the enabled status of the MooseObject.\n'
p49769
sS'cpp_type'
p49770
S'bool'
p49771
sS'default'
p49772
S'1'
p49773
sS'name'
p49774
S'enable'
p49775
sS'required'
p49776
I00
sS'group_name'
p49777
S'Advanced'
p49778
sa(dp49779
S'description'
p49780
S'Phase a/b order parameter\n'
p49781
sS'cpp_type'
p49782
S'std::vector<VariableName>'
p49783
sS'default'
p49784
g3
sS'name'
p49785
S'eta'
p49786
sS'required'
p49787
I01
sS'group_name'
p49788
Nsa(dp49789
S'description'
p49790
S'Base name for the switching function h(eta)\n'
p49791
sS'cpp_type'
p49792
S'MaterialPropertyName'
p49793
sS'default'
p49794
S'h'
p49795
sS'name'
p49796
S'h_name'
p49797
sS'required'
p49798
I00
sS'group_name'
p49799
Nsa(dp49800
S'description'
p49801
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49802
sS'cpp_type'
p49803
S'bool'
p49804
sS'default'
p49805
S'1'
p49806
sS'name'
p49807
S'implicit'
p49808
sS'required'
p49809
I00
sS'group_name'
p49810
S'Advanced'
p49811
sa(dp49812
S'description'
p49813
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49814
sS'cpp_type'
p49815
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49816
sS'default'
p49817
g3
sS'name'
p49818
S'save_in'
p49819
sS'required'
p49820
I00
sS'group_name'
p49821
S'Advanced'
p49822
sa(dp49823
S'description'
p49824
S'The seed for the master random number generator\n'
p49825
sS'cpp_type'
p49826
S'unsigned int'
p49827
sS'default'
p49828
S'0'
p49829
sS'name'
p49830
S'seed'
p49831
sS'required'
p49832
I00
sS'group_name'
p49833
S'Advanced'
p49834
sa(dp49835
S'description'
p49836
g3
sS'cpp_type'
p49837
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49838
sS'default'
p49839
S'KKSPhaseConcentration'
p49840
sS'name'
p49841
S'type'
p49842
sS'required'
p49843
I00
sS'group_name'
p49844
Nsa(dp49845
S'description'
p49846
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49847
sS'cpp_type'
p49848
S'bool'
p49849
sS'default'
p49850
S'0'
p49851
sS'name'
p49852
S'use_displaced_mesh'
p49853
sS'required'
p49854
I00
sS'group_name'
p49855
S'Advanced'
p49856
sa(dp49857
S'description'
p49858
S'The name of the variable that this Kernel operates on\n'
p49859
sS'cpp_type'
p49860
S'NonlinearVariableName'
p49861
sS'default'
p49862
g3
sS'name'
p49863
S'variable'
p49864
sS'required'
p49865
I01
sS'group_name'
p49866
NsasS'name'
p49867
S'/Kernels/KKSPhaseConcentration'
p49868
sa(dp49869
S'description'
p49870
S"KKS model kernel for the split Bulk Cahn-Hilliard term. This operates on the chemical potential 'c' as the non-linear variable\n"
p49871
sS'subblocks'
p49872
NsS'parameters'
p49873
(lp49874
(dp49875
S'description'
p49876
S'Vector of additional arguments to Fa\n'
p49877
sS'cpp_type'
p49878
S'std::vector<VariableName>'
p49879
sS'default'
p49880
g3
sS'name'
p49881
S'args_a'
p49882
sS'required'
p49883
I00
sS'group_name'
p49884
Nsa(dp49885
S'description'
p49886
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49887
sS'cpp_type'
p49888
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49889
sS'default'
p49890
g3
sS'name'
p49891
S'block'
p49892
sS'required'
p49893
I00
sS'group_name'
p49894
Nsa(dp49895
S'description'
p49896
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p49897
sS'cpp_type'
p49898
S'std::vector<VariableName>'
p49899
sS'default'
p49900
g3
sS'name'
p49901
S'ca'
p49902
sS'required'
p49903
I01
sS'group_name'
p49904
Nsa(dp49905
S'description'
p49906
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p49907
sS'cpp_type'
p49908
S'std::vector<VariableName>'
p49909
sS'default'
p49910
g3
sS'name'
p49911
S'cb'
p49912
sS'required'
p49913
I01
sS'group_name'
p49914
Nsa(dp49915
S'description'
p49916
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49917
sS'cpp_type'
p49918
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49919
sS'default'
p49920
g3
sS'name'
p49921
S'control_tags'
p49922
sS'required'
p49923
I00
sS'group_name'
p49924
S'Advanced'
p49925
sa(dp49926
S'description'
p49927
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49928
sS'cpp_type'
p49929
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49930
sS'default'
p49931
g3
sS'name'
p49932
S'diag_save_in'
p49933
sS'required'
p49934
I00
sS'group_name'
p49935
S'Advanced'
p49936
sa(dp49937
S'description'
p49938
S'Whether or not this kernel will be used as an eigen kernel\n'
p49939
sS'cpp_type'
p49940
S'bool'
p49941
sS'default'
p49942
S'0'
p49943
sS'name'
p49944
S'eigen_kernel'
p49945
sS'required'
p49946
I00
sS'group_name'
p49947
Nsa(dp49948
S'description'
p49949
S'Set the enabled status of the MooseObject.\n'
p49950
sS'cpp_type'
p49951
S'bool'
p49952
sS'default'
p49953
S'1'
p49954
sS'name'
p49955
S'enable'
p49956
sS'required'
p49957
I00
sS'group_name'
p49958
S'Advanced'
p49959
sa(dp49960
S'description'
p49961
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p49962
sS'cpp_type'
p49963
S'MaterialPropertyName'
p49964
sS'default'
p49965
g3
sS'name'
p49966
S'fa_name'
p49967
sS'required'
p49968
I01
sS'group_name'
p49969
Nsa(dp49970
S'description'
p49971
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p49972
sS'cpp_type'
p49973
S'MaterialPropertyName'
p49974
sS'default'
p49975
g3
sS'name'
p49976
S'fb_name'
p49977
sS'required'
p49978
I01
sS'group_name'
p49979
Nsa(dp49980
S'description'
p49981
S'Base name for the switching function h(eta)\n'
p49982
sS'cpp_type'
p49983
S'MaterialPropertyName'
p49984
sS'default'
p49985
S'h'
p49986
sS'name'
p49987
S'h_name'
p49988
sS'required'
p49989
I00
sS'group_name'
p49990
Nsa(dp49991
S'description'
p49992
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49993
sS'cpp_type'
p49994
S'bool'
p49995
sS'default'
p49996
S'1'
p49997
sS'name'
p49998
S'implicit'
p49999
sS'required'
p50000
I00
sS'group_name'
p50001
S'Advanced'
p50002
sa(dp50003
S'description'
p50004
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50005
sS'cpp_type'
p50006
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50007
sS'default'
p50008
g3
sS'name'
p50009
S'save_in'
p50010
sS'required'
p50011
I00
sS'group_name'
p50012
S'Advanced'
p50013
sa(dp50014
S'description'
p50015
S'The seed for the master random number generator\n'
p50016
sS'cpp_type'
p50017
S'unsigned int'
p50018
sS'default'
p50019
S'0'
p50020
sS'name'
p50021
S'seed'
p50022
sS'required'
p50023
I00
sS'group_name'
p50024
S'Advanced'
p50025
sa(dp50026
S'description'
p50027
g3
sS'cpp_type'
p50028
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50029
sS'default'
p50030
S'KKSSplitCHCRes'
p50031
sS'name'
p50032
S'type'
p50033
sS'required'
p50034
I00
sS'group_name'
p50035
Nsa(dp50036
S'description'
p50037
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50038
sS'cpp_type'
p50039
S'bool'
p50040
sS'default'
p50041
S'0'
p50042
sS'name'
p50043
S'use_displaced_mesh'
p50044
sS'required'
p50045
I00
sS'group_name'
p50046
S'Advanced'
p50047
sa(dp50048
S'description'
p50049
S'The name of the variable that this Kernel operates on\n'
p50050
sS'cpp_type'
p50051
S'NonlinearVariableName'
p50052
sS'default'
p50053
g3
sS'name'
p50054
S'variable'
p50055
sS'required'
p50056
I01
sS'group_name'
p50057
Nsa(dp50058
S'description'
p50059
S'Chemical potenial non-linear helper variable for the split solve\n'
p50060
sS'cpp_type'
p50061
S'std::vector<VariableName>'
p50062
sS'default'
p50063
g3
sS'name'
p50064
S'w'
p50065
sS'required'
p50066
I01
sS'group_name'
p50067
NsasS'name'
p50068
S'/Kernels/KKSSplitCHCRes'
p50069
sa(dp50070
S'description'
p50071
S'Source term for non-conserved Langevin noise\n'
p50072
sS'subblocks'
p50073
NsS'parameters'
p50074
(lp50075
(dp50076
S'description'
p50077
S'Amplitude\n'
p50078
sS'cpp_type'
p50079
S'double'
p50080
sS'default'
p50081
g3
sS'name'
p50082
S'amplitude'
p50083
sS'required'
p50084
I01
sS'group_name'
p50085
Nsa(dp50086
S'description'
p50087
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50088
sS'cpp_type'
p50089
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50090
sS'default'
p50091
g3
sS'name'
p50092
S'block'
p50093
sS'required'
p50094
I00
sS'group_name'
p50095
Nsa(dp50096
S'description'
p50097
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50098
sS'cpp_type'
p50099
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50100
sS'default'
p50101
g3
sS'name'
p50102
S'control_tags'
p50103
sS'required'
p50104
I00
sS'group_name'
p50105
S'Advanced'
p50106
sa(dp50107
S'description'
p50108
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50109
sS'cpp_type'
p50110
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50111
sS'default'
p50112
g3
sS'name'
p50113
S'diag_save_in'
p50114
sS'required'
p50115
I00
sS'group_name'
p50116
S'Advanced'
p50117
sa(dp50118
S'description'
p50119
S'Whether or not this kernel will be used as an eigen kernel\n'
p50120
sS'cpp_type'
p50121
S'bool'
p50122
sS'default'
p50123
S'0'
p50124
sS'name'
p50125
S'eigen_kernel'
p50126
sS'required'
p50127
I00
sS'group_name'
p50128
Nsa(dp50129
S'description'
p50130
S'Set the enabled status of the MooseObject.\n'
p50131
sS'cpp_type'
p50132
S'bool'
p50133
sS'default'
p50134
S'1'
p50135
sS'name'
p50136
S'enable'
p50137
sS'required'
p50138
I00
sS'group_name'
p50139
S'Advanced'
p50140
sa(dp50141
S'description'
p50142
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50143
sS'cpp_type'
p50144
S'bool'
p50145
sS'default'
p50146
S'1'
p50147
sS'name'
p50148
S'implicit'
p50149
sS'required'
p50150
I00
sS'group_name'
p50151
S'Advanced'
p50152
sa(dp50153
S'description'
p50154
S'Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n'
p50155
sS'cpp_type'
p50156
S'MaterialPropertyName'
p50157
sS'default'
p50158
S'1'
p50159
sS'name'
p50160
S'multiplier'
p50161
sS'required'
p50162
I00
sS'group_name'
p50163
Nsa(dp50164
S'description'
p50165
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50166
sS'cpp_type'
p50167
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50168
sS'default'
p50169
g3
sS'name'
p50170
S'save_in'
p50171
sS'required'
p50172
I00
sS'group_name'
p50173
S'Advanced'
p50174
sa(dp50175
S'description'
p50176
S'The seed for the master random number generator\n'
p50177
sS'cpp_type'
p50178
S'unsigned int'
p50179
sS'default'
p50180
S'0'
p50181
sS'name'
p50182
S'seed'
p50183
sS'required'
p50184
I00
sS'group_name'
p50185
S'Advanced'
p50186
sa(dp50187
S'description'
p50188
g3
sS'cpp_type'
p50189
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50190
sS'default'
p50191
S'LangevinNoise'
p50192
sS'name'
p50193
S'type'
p50194
sS'required'
p50195
I00
sS'group_name'
p50196
Nsa(dp50197
S'description'
p50198
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50199
sS'cpp_type'
p50200
S'bool'
p50201
sS'default'
p50202
S'0'
p50203
sS'name'
p50204
S'use_displaced_mesh'
p50205
sS'required'
p50206
I00
sS'group_name'
p50207
S'Advanced'
p50208
sa(dp50209
S'description'
p50210
S'The name of the variable that this Kernel operates on\n'
p50211
sS'cpp_type'
p50212
S'NonlinearVariableName'
p50213
sS'default'
p50214
g3
sS'name'
p50215
S'variable'
p50216
sS'required'
p50217
I01
sS'group_name'
p50218
NsasS'name'
p50219
S'/Kernels/LangevinNoise'
p50220
sa(dp50221
S'description'
p50222
S'Split with a variable that holds the Laplacian of a phase field variable.\n'
p50223
sS'subblocks'
p50224
NsS'parameters'
p50225
(lp50226
(dp50227
S'description'
p50228
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50229
sS'cpp_type'
p50230
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50231
sS'default'
p50232
g3
sS'name'
p50233
S'block'
p50234
sS'required'
p50235
I00
sS'group_name'
p50236
Nsa(dp50237
S'description'
p50238
S'Field variable to take the Laplacian of\n'
p50239
sS'cpp_type'
p50240
S'std::vector<VariableName>'
p50241
sS'default'
p50242
g3
sS'name'
p50243
S'c'
p50244
sS'required'
p50245
I01
sS'group_name'
p50246
Nsa(dp50247
S'description'
p50248
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50249
sS'cpp_type'
p50250
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50251
sS'default'
p50252
g3
sS'name'
p50253
S'control_tags'
p50254
sS'required'
p50255
I00
sS'group_name'
p50256
S'Advanced'
p50257
sa(dp50258
S'description'
p50259
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50260
sS'cpp_type'
p50261
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50262
sS'default'
p50263
g3
sS'name'
p50264
S'diag_save_in'
p50265
sS'required'
p50266
I00
sS'group_name'
p50267
S'Advanced'
p50268
sa(dp50269
S'description'
p50270
S'Whether or not this kernel will be used as an eigen kernel\n'
p50271
sS'cpp_type'
p50272
S'bool'
p50273
sS'default'
p50274
S'0'
p50275
sS'name'
p50276
S'eigen_kernel'
p50277
sS'required'
p50278
I00
sS'group_name'
p50279
Nsa(dp50280
S'description'
p50281
S'Set the enabled status of the MooseObject.\n'
p50282
sS'cpp_type'
p50283
S'bool'
p50284
sS'default'
p50285
S'1'
p50286
sS'name'
p50287
S'enable'
p50288
sS'required'
p50289
I00
sS'group_name'
p50290
S'Advanced'
p50291
sa(dp50292
S'description'
p50293
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50294
sS'cpp_type'
p50295
S'bool'
p50296
sS'default'
p50297
S'1'
p50298
sS'name'
p50299
S'implicit'
p50300
sS'required'
p50301
I00
sS'group_name'
p50302
S'Advanced'
p50303
sa(dp50304
S'description'
p50305
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50306
sS'cpp_type'
p50307
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50308
sS'default'
p50309
g3
sS'name'
p50310
S'save_in'
p50311
sS'required'
p50312
I00
sS'group_name'
p50313
S'Advanced'
p50314
sa(dp50315
S'description'
p50316
S'The seed for the master random number generator\n'
p50317
sS'cpp_type'
p50318
S'unsigned int'
p50319
sS'default'
p50320
S'0'
p50321
sS'name'
p50322
S'seed'
p50323
sS'required'
p50324
I00
sS'group_name'
p50325
S'Advanced'
p50326
sa(dp50327
S'description'
p50328
g3
sS'cpp_type'
p50329
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50330
sS'default'
p50331
S'LaplacianSplit'
p50332
sS'name'
p50333
S'type'
p50334
sS'required'
p50335
I00
sS'group_name'
p50336
Nsa(dp50337
S'description'
p50338
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50339
sS'cpp_type'
p50340
S'bool'
p50341
sS'default'
p50342
S'0'
p50343
sS'name'
p50344
S'use_displaced_mesh'
p50345
sS'required'
p50346
I00
sS'group_name'
p50347
S'Advanced'
p50348
sa(dp50349
S'description'
p50350
S'The name of the variable that this Kernel operates on\n'
p50351
sS'cpp_type'
p50352
S'NonlinearVariableName'
p50353
sS'default'
p50354
g3
sS'name'
p50355
S'variable'
p50356
sS'required'
p50357
I01
sS'group_name'
p50358
NsasS'name'
p50359
S'/Kernels/LaplacianSplit'
p50360
sa(dp50361
S'description'
p50362
S'Kernel that defines a body force modified by a material mask\n'
p50363
sS'subblocks'
p50364
NsS'parameters'
p50365
(lp50366
(dp50367
S'description'
p50368
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50369
sS'cpp_type'
p50370
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50371
sS'default'
p50372
g3
sS'name'
p50373
S'block'
p50374
sS'required'
p50375
I00
sS'group_name'
p50376
Nsa(dp50377
S'description'
p50378
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50379
sS'cpp_type'
p50380
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50381
sS'default'
p50382
g3
sS'name'
p50383
S'control_tags'
p50384
sS'required'
p50385
I00
sS'group_name'
p50386
S'Advanced'
p50387
sa(dp50388
S'description'
p50389
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50390
sS'cpp_type'
p50391
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50392
sS'default'
p50393
g3
sS'name'
p50394
S'diag_save_in'
p50395
sS'required'
p50396
I00
sS'group_name'
p50397
S'Advanced'
p50398
sa(dp50399
S'description'
p50400
S'Whether or not this kernel will be used as an eigen kernel\n'
p50401
sS'cpp_type'
p50402
S'bool'
p50403
sS'default'
p50404
S'0'
p50405
sS'name'
p50406
S'eigen_kernel'
p50407
sS'required'
p50408
I00
sS'group_name'
p50409
Nsa(dp50410
S'description'
p50411
S'Set the enabled status of the MooseObject.\n'
p50412
sS'cpp_type'
p50413
S'bool'
p50414
sS'default'
p50415
S'1'
p50416
sS'name'
p50417
S'enable'
p50418
sS'required'
p50419
I00
sS'group_name'
p50420
S'Advanced'
p50421
sa(dp50422
S'description'
p50423
S'A function that describes the body force\n'
p50424
sS'cpp_type'
p50425
S'FunctionName'
p50426
sS'default'
p50427
S'1'
p50428
sS'name'
p50429
S'function'
p50430
sS'required'
p50431
I00
sS'group_name'
p50432
Nsa(dp50433
S'description'
p50434
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50435
sS'cpp_type'
p50436
S'bool'
p50437
sS'default'
p50438
S'1'
p50439
sS'name'
p50440
S'implicit'
p50441
sS'required'
p50442
I00
sS'group_name'
p50443
S'Advanced'
p50444
sa(dp50445
S'description'
p50446
S'Material property defining the mask\n'
p50447
sS'cpp_type'
p50448
S'MaterialPropertyName'
p50449
sS'default'
p50450
g3
sS'name'
p50451
S'mask'
p50452
sS'required'
p50453
I00
sS'group_name'
p50454
Nsa(dp50455
S'description'
p50456
S'A postprocessor whose value is multiplied by the body force\n'
p50457
sS'cpp_type'
p50458
S'PostprocessorName'
p50459
sS'default'
p50460
g3
sS'name'
p50461
S'postprocessor'
p50462
sS'required'
p50463
I00
sS'group_name'
p50464
Nsa(dp50465
S'description'
p50466
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50467
sS'cpp_type'
p50468
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50469
sS'default'
p50470
g3
sS'name'
p50471
S'save_in'
p50472
sS'required'
p50473
I00
sS'group_name'
p50474
S'Advanced'
p50475
sa(dp50476
S'description'
p50477
S'The seed for the master random number generator\n'
p50478
sS'cpp_type'
p50479
S'unsigned int'
p50480
sS'default'
p50481
S'0'
p50482
sS'name'
p50483
S'seed'
p50484
sS'required'
p50485
I00
sS'group_name'
p50486
S'Advanced'
p50487
sa(dp50488
S'description'
p50489
g3
sS'cpp_type'
p50490
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50491
sS'default'
p50492
S'MaskedBodyForce'
p50493
sS'name'
p50494
S'type'
p50495
sS'required'
p50496
I00
sS'group_name'
p50497
Nsa(dp50498
S'description'
p50499
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50500
sS'cpp_type'
p50501
S'bool'
p50502
sS'default'
p50503
S'0'
p50504
sS'name'
p50505
S'use_displaced_mesh'
p50506
sS'required'
p50507
I00
sS'group_name'
p50508
S'Advanced'
p50509
sa(dp50510
S'description'
p50511
S'Coefficent to multiply by the body force term\n'
p50512
sS'cpp_type'
p50513
S'double'
p50514
sS'default'
p50515
S'1'
p50516
sS'name'
p50517
S'value'
p50518
sS'required'
p50519
I00
sS'group_name'
p50520
Nsa(dp50521
S'description'
p50522
S'The name of the variable that this Kernel operates on\n'
p50523
sS'cpp_type'
p50524
S'NonlinearVariableName'
p50525
sS'default'
p50526
g3
sS'name'
p50527
S'variable'
p50528
sS'required'
p50529
I01
sS'group_name'
p50530
NsasS'name'
p50531
S'/Kernels/MaskedBodyForce'
p50532
sa(dp50533
S'description'
p50534
g3
sS'subblocks'
p50535
NsS'parameters'
p50536
(lp50537
(dp50538
S'description'
p50539
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50540
sS'cpp_type'
p50541
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50542
sS'default'
p50543
g3
sS'name'
p50544
S'block'
p50545
sS'required'
p50546
I00
sS'group_name'
p50547
Nsa(dp50548
S'description'
p50549
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50550
sS'cpp_type'
p50551
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50552
sS'default'
p50553
g3
sS'name'
p50554
S'control_tags'
p50555
sS'required'
p50556
I00
sS'group_name'
p50557
S'Advanced'
p50558
sa(dp50559
S'description'
p50560
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50561
sS'cpp_type'
p50562
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50563
sS'default'
p50564
g3
sS'name'
p50565
S'diag_save_in'
p50566
sS'required'
p50567
I00
sS'group_name'
p50568
S'Advanced'
p50569
sa(dp50570
S'description'
p50571
S'Use for eigenvalue problem (true) or source problem (false)\n'
p50572
sS'cpp_type'
p50573
S'bool'
p50574
sS'default'
p50575
S'1'
p50576
sS'name'
p50577
S'eigen'
p50578
sS'required'
p50579
I00
sS'group_name'
p50580
Nsa(dp50581
S'description'
p50582
S'Whether or not this kernel will be used as an eigen kernel\n'
p50583
sS'cpp_type'
p50584
S'bool'
p50585
sS'default'
p50586
S'0'
p50587
sS'name'
p50588
S'eigen_kernel'
p50589
sS'required'
p50590
I00
sS'group_name'
p50591
Nsa(dp50592
S'description'
p50593
S'The name of the postprocessor that provides the eigenvalue.\n'
p50594
sS'cpp_type'
p50595
S'PostprocessorName'
p50596
sS'default'
p50597
S'1'
p50598
sS'name'
p50599
S'eigen_postprocessor'
p50600
sS'required'
p50601
I00
sS'group_name'
p50602
Nsa(dp50603
S'description'
p50604
S'Set the enabled status of the MooseObject.\n'
p50605
sS'cpp_type'
p50606
S'bool'
p50607
sS'default'
p50608
S'1'
p50609
sS'name'
p50610
S'enable'
p50611
sS'required'
p50612
I00
sS'group_name'
p50613
S'Advanced'
p50614
sa(dp50615
S'description'
p50616
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50617
sS'cpp_type'
p50618
S'bool'
p50619
sS'default'
p50620
S'1'
p50621
sS'name'
p50622
S'implicit'
p50623
sS'required'
p50624
I00
sS'group_name'
p50625
S'Advanced'
p50626
sa(dp50627
S'description'
p50628
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50629
sS'cpp_type'
p50630
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50631
sS'default'
p50632
g3
sS'name'
p50633
S'save_in'
p50634
sS'required'
p50635
I00
sS'group_name'
p50636
S'Advanced'
p50637
sa(dp50638
S'description'
p50639
S'The seed for the master random number generator\n'
p50640
sS'cpp_type'
p50641
S'unsigned int'
p50642
sS'default'
p50643
S'0'
p50644
sS'name'
p50645
S'seed'
p50646
sS'required'
p50647
I00
sS'group_name'
p50648
S'Advanced'
p50649
sa(dp50650
S'description'
p50651
g3
sS'cpp_type'
p50652
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50653
sS'default'
p50654
S'MassEigenKernel'
p50655
sS'name'
p50656
S'type'
p50657
sS'required'
p50658
I00
sS'group_name'
p50659
Nsa(dp50660
S'description'
p50661
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50662
sS'cpp_type'
p50663
S'bool'
p50664
sS'default'
p50665
S'0'
p50666
sS'name'
p50667
S'use_displaced_mesh'
p50668
sS'required'
p50669
I00
sS'group_name'
p50670
S'Advanced'
p50671
sa(dp50672
S'description'
p50673
S'The name of the variable that this Kernel operates on\n'
p50674
sS'cpp_type'
p50675
S'NonlinearVariableName'
p50676
sS'default'
p50677
g3
sS'name'
p50678
S'variable'
p50679
sS'required'
p50680
I01
sS'group_name'
p50681
NsasS'name'
p50682
S'/Kernels/MassEigenKernel'
p50683
sa(dp50684
S'description'
p50685
g3
sS'subblocks'
p50686
NsS'parameters'
p50687
(lp50688
(dp50689
S'description'
p50690
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50691
sS'cpp_type'
p50692
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50693
sS'default'
p50694
g3
sS'name'
p50695
S'block'
p50696
sS'required'
p50697
I00
sS'group_name'
p50698
Nsa(dp50699
S'description'
p50700
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50701
sS'cpp_type'
p50702
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50703
sS'default'
p50704
g3
sS'name'
p50705
S'control_tags'
p50706
sS'required'
p50707
I00
sS'group_name'
p50708
S'Advanced'
p50709
sa(dp50710
S'description'
p50711
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50712
sS'cpp_type'
p50713
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50714
sS'default'
p50715
g3
sS'name'
p50716
S'diag_save_in'
p50717
sS'required'
p50718
I00
sS'group_name'
p50719
S'Advanced'
p50720
sa(dp50721
S'description'
p50722
S'Whether or not this kernel will be used as an eigen kernel\n'
p50723
sS'cpp_type'
p50724
S'bool'
p50725
sS'default'
p50726
S'0'
p50727
sS'name'
p50728
S'eigen_kernel'
p50729
sS'required'
p50730
I00
sS'group_name'
p50731
Nsa(dp50732
S'description'
p50733
S'Set the enabled status of the MooseObject.\n'
p50734
sS'cpp_type'
p50735
S'bool'
p50736
sS'default'
p50737
S'1'
p50738
sS'name'
p50739
S'enable'
p50740
sS'required'
p50741
I00
sS'group_name'
p50742
S'Advanced'
p50743
sa(dp50744
S'description'
p50745
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50746
sS'cpp_type'
p50747
S'bool'
p50748
sS'default'
p50749
S'1'
p50750
sS'name'
p50751
S'implicit'
p50752
sS'required'
p50753
I00
sS'group_name'
p50754
S'Advanced'
p50755
sa(dp50756
S'description'
p50757
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50758
sS'cpp_type'
p50759
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50760
sS'default'
p50761
g3
sS'name'
p50762
S'save_in'
p50763
sS'required'
p50764
I00
sS'group_name'
p50765
S'Advanced'
p50766
sa(dp50767
S'description'
p50768
S'The seed for the master random number generator\n'
p50769
sS'cpp_type'
p50770
S'unsigned int'
p50771
sS'default'
p50772
S'0'
p50773
sS'name'
p50774
S'seed'
p50775
sS'required'
p50776
I00
sS'group_name'
p50777
S'Advanced'
p50778
sa(dp50779
S'description'
p50780
g3
sS'cpp_type'
p50781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50782
sS'default'
p50783
S'MassLumpedTimeDerivative'
p50784
sS'name'
p50785
S'type'
p50786
sS'required'
p50787
I00
sS'group_name'
p50788
Nsa(dp50789
S'description'
p50790
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50791
sS'cpp_type'
p50792
S'bool'
p50793
sS'default'
p50794
S'0'
p50795
sS'name'
p50796
S'use_displaced_mesh'
p50797
sS'required'
p50798
I00
sS'group_name'
p50799
S'Advanced'
p50800
sa(dp50801
S'description'
p50802
S'The name of the variable that this Kernel operates on\n'
p50803
sS'cpp_type'
p50804
S'NonlinearVariableName'
p50805
sS'default'
p50806
g3
sS'name'
p50807
S'variable'
p50808
sS'required'
p50809
I01
sS'group_name'
p50810
NsasS'name'
p50811
S'/Kernels/MassLumpedTimeDerivative'
p50812
sa(dp50813
S'description'
p50814
S'Diffusion equation Kernel that takes an anisotropic Diffusivity from a material property\n'
p50815
sS'subblocks'
p50816
NsS'parameters'
p50817
(lp50818
(dp50819
S'description'
p50820
S'The name of the diffusivity\n'
p50821
sS'cpp_type'
p50822
S'MaterialPropertyName'
p50823
sS'default'
p50824
S'D'
p50825
sS'name'
p50826
S'D_name'
p50827
sS'required'
p50828
I00
sS'group_name'
p50829
Nsa(dp50830
S'description'
p50831
S'Vector of arguments of the diffusivity\n'
p50832
sS'cpp_type'
p50833
S'std::vector<VariableName>'
p50834
sS'default'
p50835
g3
sS'name'
p50836
S'args'
p50837
sS'required'
p50838
I00
sS'group_name'
p50839
Nsa(dp50840
S'description'
p50841
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50842
sS'cpp_type'
p50843
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50844
sS'default'
p50845
g3
sS'name'
p50846
S'block'
p50847
sS'required'
p50848
I00
sS'group_name'
p50849
Nsa(dp50850
S'description'
p50851
S"Coupled concentration variable for kernel to operate on; if this is not specified, the kernel's nonlinear variable will be used as usual\n"
p50852
sS'cpp_type'
p50853
S'std::vector<VariableName>'
p50854
sS'default'
p50855
g3
sS'name'
p50856
S'conc'
p50857
sS'required'
p50858
I00
sS'group_name'
p50859
Nsa(dp50860
S'description'
p50861
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50862
sS'cpp_type'
p50863
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50864
sS'default'
p50865
g3
sS'name'
p50866
S'control_tags'
p50867
sS'required'
p50868
I00
sS'group_name'
p50869
S'Advanced'
p50870
sa(dp50871
S'description'
p50872
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50873
sS'cpp_type'
p50874
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50875
sS'default'
p50876
g3
sS'name'
p50877
S'diag_save_in'
p50878
sS'required'
p50879
I00
sS'group_name'
p50880
S'Advanced'
p50881
sa(dp50882
S'description'
p50883
S'Whether or not this kernel will be used as an eigen kernel\n'
p50884
sS'cpp_type'
p50885
S'bool'
p50886
sS'default'
p50887
S'0'
p50888
sS'name'
p50889
S'eigen_kernel'
p50890
sS'required'
p50891
I00
sS'group_name'
p50892
Nsa(dp50893
S'description'
p50894
S'Set the enabled status of the MooseObject.\n'
p50895
sS'cpp_type'
p50896
S'bool'
p50897
sS'default'
p50898
S'1'
p50899
sS'name'
p50900
S'enable'
p50901
sS'required'
p50902
I00
sS'group_name'
p50903
S'Advanced'
p50904
sa(dp50905
S'description'
p50906
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50907
sS'cpp_type'
p50908
S'bool'
p50909
sS'default'
p50910
S'1'
p50911
sS'name'
p50912
S'implicit'
p50913
sS'required'
p50914
I00
sS'group_name'
p50915
S'Advanced'
p50916
sa(dp50917
S'description'
p50918
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50919
sS'cpp_type'
p50920
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50921
sS'default'
p50922
g3
sS'name'
p50923
S'save_in'
p50924
sS'required'
p50925
I00
sS'group_name'
p50926
S'Advanced'
p50927
sa(dp50928
S'description'
p50929
S'The seed for the master random number generator\n'
p50930
sS'cpp_type'
p50931
S'unsigned int'
p50932
sS'default'
p50933
S'0'
p50934
sS'name'
p50935
S'seed'
p50936
sS'required'
p50937
I00
sS'group_name'
p50938
S'Advanced'
p50939
sa(dp50940
S'description'
p50941
g3
sS'cpp_type'
p50942
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50943
sS'default'
p50944
S'MatAnisoDiffusion'
p50945
sS'name'
p50946
S'type'
p50947
sS'required'
p50948
I00
sS'group_name'
p50949
Nsa(dp50950
S'description'
p50951
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50952
sS'cpp_type'
p50953
S'bool'
p50954
sS'default'
p50955
S'0'
p50956
sS'name'
p50957
S'use_displaced_mesh'
p50958
sS'required'
p50959
I00
sS'group_name'
p50960
S'Advanced'
p50961
sa(dp50962
S'description'
p50963
S'The name of the variable that this Kernel operates on\n'
p50964
sS'cpp_type'
p50965
S'NonlinearVariableName'
p50966
sS'default'
p50967
g3
sS'name'
p50968
S'variable'
p50969
sS'required'
p50970
I01
sS'group_name'
p50971
NsasS'name'
p50972
S'/Kernels/MatAnisoDiffusion'
p50973
sa(dp50974
S'description'
p50975
S'Diffusion equation Kernel that takes an isotropic Diffusivity from a material property\n'
p50976
sS'subblocks'
p50977
NsS'parameters'
p50978
(lp50979
(dp50980
S'description'
p50981
S'The name of the diffusivity\n'
p50982
sS'cpp_type'
p50983
S'MaterialPropertyName'
p50984
sS'default'
p50985
S'D'
p50986
sS'name'
p50987
S'D_name'
p50988
sS'required'
p50989
I00
sS'group_name'
p50990
Nsa(dp50991
S'description'
p50992
S'Vector of arguments of the diffusivity\n'
p50993
sS'cpp_type'
p50994
S'std::vector<VariableName>'
p50995
sS'default'
p50996
g3
sS'name'
p50997
S'args'
p50998
sS'required'
p50999
I00
sS'group_name'
p51000
Nsa(dp51001
S'description'
p51002
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51003
sS'cpp_type'
p51004
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51005
sS'default'
p51006
g3
sS'name'
p51007
S'block'
p51008
sS'required'
p51009
I00
sS'group_name'
p51010
Nsa(dp51011
S'description'
p51012
S"Coupled concentration variable for kernel to operate on; if this is not specified, the kernel's nonlinear variable will be used as usual\n"
p51013
sS'cpp_type'
p51014
S'std::vector<VariableName>'
p51015
sS'default'
p51016
g3
sS'name'
p51017
S'conc'
p51018
sS'required'
p51019
I00
sS'group_name'
p51020
Nsa(dp51021
S'description'
p51022
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51023
sS'cpp_type'
p51024
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51025
sS'default'
p51026
g3
sS'name'
p51027
S'control_tags'
p51028
sS'required'
p51029
I00
sS'group_name'
p51030
S'Advanced'
p51031
sa(dp51032
S'description'
p51033
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51034
sS'cpp_type'
p51035
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51036
sS'default'
p51037
g3
sS'name'
p51038
S'diag_save_in'
p51039
sS'required'
p51040
I00
sS'group_name'
p51041
S'Advanced'
p51042
sa(dp51043
S'description'
p51044
S'Whether or not this kernel will be used as an eigen kernel\n'
p51045
sS'cpp_type'
p51046
S'bool'
p51047
sS'default'
p51048
S'0'
p51049
sS'name'
p51050
S'eigen_kernel'
p51051
sS'required'
p51052
I00
sS'group_name'
p51053
Nsa(dp51054
S'description'
p51055
S'Set the enabled status of the MooseObject.\n'
p51056
sS'cpp_type'
p51057
S'bool'
p51058
sS'default'
p51059
S'1'
p51060
sS'name'
p51061
S'enable'
p51062
sS'required'
p51063
I00
sS'group_name'
p51064
S'Advanced'
p51065
sa(dp51066
S'description'
p51067
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51068
sS'cpp_type'
p51069
S'bool'
p51070
sS'default'
p51071
S'1'
p51072
sS'name'
p51073
S'implicit'
p51074
sS'required'
p51075
I00
sS'group_name'
p51076
S'Advanced'
p51077
sa(dp51078
S'description'
p51079
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51080
sS'cpp_type'
p51081
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51082
sS'default'
p51083
g3
sS'name'
p51084
S'save_in'
p51085
sS'required'
p51086
I00
sS'group_name'
p51087
S'Advanced'
p51088
sa(dp51089
S'description'
p51090
S'The seed for the master random number generator\n'
p51091
sS'cpp_type'
p51092
S'unsigned int'
p51093
sS'default'
p51094
S'0'
p51095
sS'name'
p51096
S'seed'
p51097
sS'required'
p51098
I00
sS'group_name'
p51099
S'Advanced'
p51100
sa(dp51101
S'description'
p51102
g3
sS'cpp_type'
p51103
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51104
sS'default'
p51105
S'MatDiffusion'
p51106
sS'name'
p51107
S'type'
p51108
sS'required'
p51109
I00
sS'group_name'
p51110
Nsa(dp51111
S'description'
p51112
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51113
sS'cpp_type'
p51114
S'bool'
p51115
sS'default'
p51116
S'0'
p51117
sS'name'
p51118
S'use_displaced_mesh'
p51119
sS'required'
p51120
I00
sS'group_name'
p51121
S'Advanced'
p51122
sa(dp51123
S'description'
p51124
S'The name of the variable that this Kernel operates on\n'
p51125
sS'cpp_type'
p51126
S'NonlinearVariableName'
p51127
sS'default'
p51128
g3
sS'name'
p51129
S'variable'
p51130
sS'required'
p51131
I01
sS'group_name'
p51132
NsasS'name'
p51133
S'/Kernels/MatDiffusion'
p51134
sa(dp51135
S'description'
p51136
S'Kernel to add -L*v, where L=reaction rate, v=variable\n'
p51137
sS'subblocks'
p51138
NsS'parameters'
p51139
(lp51140
(dp51141
S'description'
p51142
S'Vector of nonlinear variable arguments this object depends on\n'
p51143
sS'cpp_type'
p51144
S'std::vector<VariableName>'
p51145
sS'default'
p51146
g3
sS'name'
p51147
S'args'
p51148
sS'required'
p51149
I00
sS'group_name'
p51150
Nsa(dp51151
S'description'
p51152
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51153
sS'cpp_type'
p51154
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51155
sS'default'
p51156
g3
sS'name'
p51157
S'block'
p51158
sS'required'
p51159
I00
sS'group_name'
p51160
Nsa(dp51161
S'description'
p51162
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51163
sS'cpp_type'
p51164
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51165
sS'default'
p51166
g3
sS'name'
p51167
S'control_tags'
p51168
sS'required'
p51169
I00
sS'group_name'
p51170
S'Advanced'
p51171
sa(dp51172
S'description'
p51173
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51174
sS'cpp_type'
p51175
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51176
sS'default'
p51177
g3
sS'name'
p51178
S'diag_save_in'
p51179
sS'required'
p51180
I00
sS'group_name'
p51181
S'Advanced'
p51182
sa(dp51183
S'description'
p51184
S'Whether or not this kernel will be used as an eigen kernel\n'
p51185
sS'cpp_type'
p51186
S'bool'
p51187
sS'default'
p51188
S'0'
p51189
sS'name'
p51190
S'eigen_kernel'
p51191
sS'required'
p51192
I00
sS'group_name'
p51193
Nsa(dp51194
S'description'
p51195
S'Set the enabled status of the MooseObject.\n'
p51196
sS'cpp_type'
p51197
S'bool'
p51198
sS'default'
p51199
S'1'
p51200
sS'name'
p51201
S'enable'
p51202
sS'required'
p51203
I00
sS'group_name'
p51204
S'Advanced'
p51205
sa(dp51206
S'description'
p51207
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51208
sS'cpp_type'
p51209
S'bool'
p51210
sS'default'
p51211
S'1'
p51212
sS'name'
p51213
S'implicit'
p51214
sS'required'
p51215
I00
sS'group_name'
p51216
S'Advanced'
p51217
sa(dp51218
S'description'
p51219
S'The reaction rate used with the kernel\n'
p51220
sS'cpp_type'
p51221
S'MaterialPropertyName'
p51222
sS'default'
p51223
S'L'
p51224
sS'name'
p51225
S'mob_name'
p51226
sS'required'
p51227
I00
sS'group_name'
p51228
Nsa(dp51229
S'description'
p51230
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51231
sS'cpp_type'
p51232
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51233
sS'default'
p51234
g3
sS'name'
p51235
S'save_in'
p51236
sS'required'
p51237
I00
sS'group_name'
p51238
S'Advanced'
p51239
sa(dp51240
S'description'
p51241
S'The seed for the master random number generator\n'
p51242
sS'cpp_type'
p51243
S'unsigned int'
p51244
sS'default'
p51245
S'0'
p51246
sS'name'
p51247
S'seed'
p51248
sS'required'
p51249
I00
sS'group_name'
p51250
S'Advanced'
p51251
sa(dp51252
S'description'
p51253
g3
sS'cpp_type'
p51254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51255
sS'default'
p51256
S'MatReaction'
p51257
sS'name'
p51258
S'type'
p51259
sS'required'
p51260
I00
sS'group_name'
p51261
Nsa(dp51262
S'description'
p51263
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51264
sS'cpp_type'
p51265
S'bool'
p51266
sS'default'
p51267
S'0'
p51268
sS'name'
p51269
S'use_displaced_mesh'
p51270
sS'required'
p51271
I00
sS'group_name'
p51272
S'Advanced'
p51273
sa(dp51274
S'description'
p51275
S"Set this to make v a coupled variable, otherwise it will use the kernel's nonlinear variable for v\n"
p51276
sS'cpp_type'
p51277
S'std::vector<VariableName>'
p51278
sS'default'
p51279
g3
sS'name'
p51280
S'v'
p51281
sS'required'
p51282
I00
sS'group_name'
p51283
Nsa(dp51284
S'description'
p51285
S'The name of the variable that this Kernel operates on\n'
p51286
sS'cpp_type'
p51287
S'NonlinearVariableName'
p51288
sS'default'
p51289
g3
sS'name'
p51290
S'variable'
p51291
sS'required'
p51292
I01
sS'group_name'
p51293
NsasS'name'
p51294
S'/Kernels/MatReaction'
p51295
sa(dp51296
S'description'
p51297
S'Class used for testing derivatives of a material property.\n'
p51298
sS'subblocks'
p51299
NsS'parameters'
p51300
(lp51301
(dp51302
S'description'
p51303
S'List of variables the material property depends on\n'
p51304
sS'cpp_type'
p51305
S'std::vector<VariableName>'
p51306
sS'default'
p51307
g3
sS'name'
p51308
S'args'
p51309
sS'required'
p51310
I01
sS'group_name'
p51311
Nsa(dp51312
S'description'
p51313
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51314
sS'cpp_type'
p51315
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51316
sS'default'
p51317
g3
sS'name'
p51318
S'block'
p51319
sS'required'
p51320
I00
sS'group_name'
p51321
Nsa(dp51322
S'description'
p51323
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51324
sS'cpp_type'
p51325
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51326
sS'default'
p51327
g3
sS'name'
p51328
S'control_tags'
p51329
sS'required'
p51330
I00
sS'group_name'
p51331
S'Advanced'
p51332
sa(dp51333
S'description'
p51334
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51335
sS'cpp_type'
p51336
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51337
sS'default'
p51338
g3
sS'name'
p51339
S'diag_save_in'
p51340
sS'required'
p51341
I00
sS'group_name'
p51342
S'Advanced'
p51343
sa(dp51344
S'description'
p51345
S'Whether or not this kernel will be used as an eigen kernel\n'
p51346
sS'cpp_type'
p51347
S'bool'
p51348
sS'default'
p51349
S'0'
p51350
sS'name'
p51351
S'eigen_kernel'
p51352
sS'required'
p51353
I00
sS'group_name'
p51354
Nsa(dp51355
S'description'
p51356
S'Set the enabled status of the MooseObject.\n'
p51357
sS'cpp_type'
p51358
S'bool'
p51359
sS'default'
p51360
S'1'
p51361
sS'name'
p51362
S'enable'
p51363
sS'required'
p51364
I00
sS'group_name'
p51365
S'Advanced'
p51366
sa(dp51367
S'description'
p51368
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51369
sS'cpp_type'
p51370
S'bool'
p51371
sS'default'
p51372
S'1'
p51373
sS'name'
p51374
S'implicit'
p51375
sS'required'
p51376
I00
sS'group_name'
p51377
S'Advanced'
p51378
sa(dp51379
S'description'
p51380
S'Name of material property for which derivatives are to be tested.\n'
p51381
sS'cpp_type'
p51382
S'MaterialPropertyName'
p51383
sS'default'
p51384
g3
sS'name'
p51385
S'material_property'
p51386
sS'required'
p51387
I01
sS'group_name'
p51388
Nsa(dp51389
S'description'
p51390
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51391
sS'cpp_type'
p51392
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51393
sS'default'
p51394
g3
sS'name'
p51395
S'save_in'
p51396
sS'required'
p51397
I00
sS'group_name'
p51398
S'Advanced'
p51399
sa(dp51400
S'description'
p51401
S'The seed for the master random number generator\n'
p51402
sS'cpp_type'
p51403
S'unsigned int'
p51404
sS'default'
p51405
S'0'
p51406
sS'name'
p51407
S'seed'
p51408
sS'required'
p51409
I00
sS'group_name'
p51410
S'Advanced'
p51411
sa(dp51412
S'description'
p51413
g3
sS'cpp_type'
p51414
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51415
sS'default'
p51416
S'MaterialDerivativeTestKernel'
p51417
sS'name'
p51418
S'type'
p51419
sS'required'
p51420
I00
sS'group_name'
p51421
Nsa(dp51422
S'description'
p51423
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51424
sS'cpp_type'
p51425
S'bool'
p51426
sS'default'
p51427
S'0'
p51428
sS'name'
p51429
S'use_displaced_mesh'
p51430
sS'required'
p51431
I00
sS'group_name'
p51432
S'Advanced'
p51433
sa(dp51434
S'description'
p51435
S'The name of the variable that this Kernel operates on\n'
p51436
sS'cpp_type'
p51437
S'NonlinearVariableName'
p51438
sS'default'
p51439
g3
sS'name'
p51440
S'variable'
p51441
sS'required'
p51442
I01
sS'group_name'
p51443
NsasS'name'
p51444
S'/Kernels/MaterialDerivativeTestKernel'
p51445
sa(dp51446
S'description'
p51447
g3
sS'subblocks'
p51448
NsS'parameters'
p51449
(lp51450
(dp51451
S'description'
p51452
S'The 3 Cosserat rotation variables\n'
p51453
sS'cpp_type'
p51454
S'std::vector<VariableName>'
p51455
sS'default'
p51456
g3
sS'name'
p51457
S'Cosserat_rotations'
p51458
sS'required'
p51459
I01
sS'group_name'
p51460
Nsa(dp51461
S'description'
p51462
S'Name appended to material properties to make them unique\n'
p51463
sS'cpp_type'
p51464
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51465
sS'default'
p51466
g3
sS'name'
p51467
S'appended_property_name'
p51468
sS'required'
p51469
I00
sS'group_name'
p51470
Nsa(dp51471
S'description'
p51472
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51473
sS'cpp_type'
p51474
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51475
sS'default'
p51476
g3
sS'name'
p51477
S'block'
p51478
sS'required'
p51479
I00
sS'group_name'
p51480
Nsa(dp51481
S'description'
p51482
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p51483
sS'cpp_type'
p51484
S'unsigned int'
p51485
sS'default'
p51486
g3
sS'name'
p51487
S'component'
p51488
sS'required'
p51489
I01
sS'group_name'
p51490
Nsa(dp51491
S'description'
p51492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51493
sS'cpp_type'
p51494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51495
sS'default'
p51496
g3
sS'name'
p51497
S'control_tags'
p51498
sS'required'
p51499
I00
sS'group_name'
p51500
S'Advanced'
p51501
sa(dp51502
S'description'
p51503
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51504
sS'cpp_type'
p51505
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51506
sS'default'
p51507
g3
sS'name'
p51508
S'diag_save_in'
p51509
sS'required'
p51510
I00
sS'group_name'
p51511
S'Advanced'
p51512
sa(dp51513
S'description'
p51514
S'The 3 displacement variables\n'
p51515
sS'cpp_type'
p51516
S'std::vector<VariableName>'
p51517
sS'default'
p51518
g3
sS'name'
p51519
S'displacements'
p51520
sS'required'
p51521
I01
sS'group_name'
p51522
Nsa(dp51523
S'description'
p51524
S'Whether or not this kernel will be used as an eigen kernel\n'
p51525
sS'cpp_type'
p51526
S'bool'
p51527
sS'default'
p51528
S'0'
p51529
sS'name'
p51530
S'eigen_kernel'
p51531
sS'required'
p51532
I00
sS'group_name'
p51533
Nsa(dp51534
S'description'
p51535
S'Set the enabled status of the MooseObject.\n'
p51536
sS'cpp_type'
p51537
S'bool'
p51538
sS'default'
p51539
S'1'
p51540
sS'name'
p51541
S'enable'
p51542
sS'required'
p51543
I00
sS'group_name'
p51544
S'Advanced'
p51545
sa(dp51546
S'description'
p51547
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51548
sS'cpp_type'
p51549
S'bool'
p51550
sS'default'
p51551
S'1'
p51552
sS'name'
p51553
S'implicit'
p51554
sS'required'
p51555
I00
sS'group_name'
p51556
S'Advanced'
p51557
sa(dp51558
S'description'
p51559
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51560
sS'cpp_type'
p51561
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51562
sS'default'
p51563
g3
sS'name'
p51564
S'save_in'
p51565
sS'required'
p51566
I00
sS'group_name'
p51567
S'Advanced'
p51568
sa(dp51569
S'description'
p51570
S'The seed for the master random number generator\n'
p51571
sS'cpp_type'
p51572
S'unsigned int'
p51573
sS'default'
p51574
S'0'
p51575
sS'name'
p51576
S'seed'
p51577
sS'required'
p51578
I00
sS'group_name'
p51579
S'Advanced'
p51580
sa(dp51581
S'description'
p51582
g3
sS'cpp_type'
p51583
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51584
sS'default'
p51585
S'MomentBalancing'
p51586
sS'name'
p51587
S'type'
p51588
sS'required'
p51589
I00
sS'group_name'
p51590
Nsa(dp51591
S'description'
p51592
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51593
sS'cpp_type'
p51594
S'bool'
p51595
sS'default'
p51596
S'0'
p51597
sS'name'
p51598
S'use_displaced_mesh'
p51599
sS'required'
p51600
I00
sS'group_name'
p51601
S'Advanced'
p51602
sa(dp51603
S'description'
p51604
S'The name of the variable that this Kernel operates on\n'
p51605
sS'cpp_type'
p51606
S'NonlinearVariableName'
p51607
sS'default'
p51608
g3
sS'name'
p51609
S'variable'
p51610
sS'required'
p51611
I01
sS'group_name'
p51612
NsasS'name'
p51613
S'/Kernels/MomentBalancing'
p51614
sa(dp51615
S'description'
p51616
S'Adds rigid mody motion to grains\n'
p51617
sS'subblocks'
p51618
NsS'parameters'
p51619
(lp51620
(dp51621
S'description'
p51622
S'Optional parameter that allows the user to define type of force density under consideration\n'
p51623
sS'cpp_type'
p51624
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51625
sS'default'
p51626
g3
sS'name'
p51627
S'base_name'
p51628
sS'required'
p51629
I00
sS'group_name'
p51630
Nsa(dp51631
S'description'
p51632
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51633
sS'cpp_type'
p51634
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51635
sS'default'
p51636
g3
sS'name'
p51637
S'block'
p51638
sS'required'
p51639
I00
sS'group_name'
p51640
Nsa(dp51641
S'description'
p51642
S'Concentration\n'
p51643
sS'cpp_type'
p51644
S'std::vector<VariableName>'
p51645
sS'default'
p51646
g3
sS'name'
p51647
S'c'
p51648
sS'required'
p51649
I01
sS'group_name'
p51650
Nsa(dp51651
S'description'
p51652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51653
sS'cpp_type'
p51654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51655
sS'default'
p51656
g3
sS'name'
p51657
S'control_tags'
p51658
sS'required'
p51659
I00
sS'group_name'
p51660
S'Advanced'
p51661
sa(dp51662
S'description'
p51663
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51664
sS'cpp_type'
p51665
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51666
sS'default'
p51667
g3
sS'name'
p51668
S'diag_save_in'
p51669
sS'required'
p51670
I00
sS'group_name'
p51671
S'Advanced'
p51672
sa(dp51673
S'description'
p51674
S'Whether or not this kernel will be used as an eigen kernel\n'
p51675
sS'cpp_type'
p51676
S'bool'
p51677
sS'default'
p51678
S'0'
p51679
sS'name'
p51680
S'eigen_kernel'
p51681
sS'required'
p51682
I00
sS'group_name'
p51683
Nsa(dp51684
S'description'
p51685
S'Set the enabled status of the MooseObject.\n'
p51686
sS'cpp_type'
p51687
S'bool'
p51688
sS'default'
p51689
S'1'
p51690
sS'name'
p51691
S'enable'
p51692
sS'required'
p51693
I00
sS'group_name'
p51694
S'Advanced'
p51695
sa(dp51696
S'description'
p51697
S'UserObject for getting force and torque acting on grains\n'
p51698
sS'cpp_type'
p51699
S'UserObjectName'
p51700
sS'default'
p51701
g3
sS'name'
p51702
S'grain_force'
p51703
sS'required'
p51704
I01
sS'group_name'
p51705
Nsa(dp51706
S'description'
p51707
S'The FeatureFloodCount UserObject to get values from.\n'
p51708
sS'cpp_type'
p51709
S'UserObjectName'
p51710
sS'default'
p51711
g3
sS'name'
p51712
S'grain_tracker_object'
p51713
sS'required'
p51714
I01
sS'group_name'
p51715
Nsa(dp51716
S'description'
p51717
S'The feature volume VectorPostprocessorValue.\n'
p51718
sS'cpp_type'
p51719
S'VectorPostprocessorName'
p51720
sS'default'
p51721
g3
sS'name'
p51722
S'grain_volumes'
p51723
sS'required'
p51724
I01
sS'group_name'
p51725
Nsa(dp51726
S'description'
p51727
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51728
sS'cpp_type'
p51729
S'bool'
p51730
sS'default'
p51731
S'1'
p51732
sS'name'
p51733
S'implicit'
p51734
sS'required'
p51735
I00
sS'group_name'
p51736
S'Advanced'
p51737
sa(dp51738
S'description'
p51739
S'Array of coupled variable names (num_name)\n'
p51740
sS'cpp_type'
p51741
S'unsigned int'
p51742
sS'default'
p51743
g3
sS'name'
p51744
S'op_num'
p51745
sS'required'
p51746
I00
sS'group_name'
p51747
Nsa(dp51748
S'description'
p51749
S'constant value characterizing grain rotation\n'
p51750
sS'cpp_type'
p51751
S'double'
p51752
sS'default'
p51753
S'1'
p51754
sS'name'
p51755
S'rotation_constant'
p51756
sS'required'
p51757
I00
sS'group_name'
p51758
Nsa(dp51759
S'description'
p51760
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51761
sS'cpp_type'
p51762
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51763
sS'default'
p51764
g3
sS'name'
p51765
S'save_in'
p51766
sS'required'
p51767
I00
sS'group_name'
p51768
S'Advanced'
p51769
sa(dp51770
S'description'
p51771
S'The seed for the master random number generator\n'
p51772
sS'cpp_type'
p51773
S'unsigned int'
p51774
sS'default'
p51775
S'0'
p51776
sS'name'
p51777
S'seed'
p51778
sS'required'
p51779
I00
sS'group_name'
p51780
S'Advanced'
p51781
sa(dp51782
S'description'
p51783
S'constant value characterizing grain translation\n'
p51784
sS'cpp_type'
p51785
S'double'
p51786
sS'default'
p51787
S'500'
p51788
sS'name'
p51789
S'translation_constant'
p51790
sS'required'
p51791
I00
sS'group_name'
p51792
Nsa(dp51793
S'description'
p51794
g3
sS'cpp_type'
p51795
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51796
sS'default'
p51797
S'MultiGrainRigidBodyMotion'
p51798
sS'name'
p51799
S'type'
p51800
sS'required'
p51801
I00
sS'group_name'
p51802
Nsa(dp51803
S'description'
p51804
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51805
sS'cpp_type'
p51806
S'bool'
p51807
sS'default'
p51808
S'0'
p51809
sS'name'
p51810
S'use_displaced_mesh'
p51811
sS'required'
p51812
I00
sS'group_name'
p51813
S'Advanced'
p51814
sa(dp51815
S'description'
p51816
S'Array of coupled variable names\n'
p51817
sS'cpp_type'
p51818
S'std::vector<VariableName>'
p51819
sS'default'
p51820
g3
sS'name'
p51821
S'v'
p51822
sS'required'
p51823
I01
sS'group_name'
p51824
Nsa(dp51825
S'description'
p51826
S'Array of coupled variable names (base_name)\n'
p51827
sS'cpp_type'
p51828
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51829
sS'default'
p51830
g3
sS'name'
p51831
S'var_name_base'
p51832
sS'required'
p51833
I00
sS'group_name'
p51834
Nsa(dp51835
S'description'
p51836
S'The name of the variable that this Kernel operates on\n'
p51837
sS'cpp_type'
p51838
S'NonlinearVariableName'
p51839
sS'default'
p51840
g3
sS'name'
p51841
S'variable'
p51842
sS'required'
p51843
I01
sS'group_name'
p51844
NsasS'name'
p51845
S'/Kernels/MultiGrainRigidBodyMotion'
p51846
sa(dp51847
S'description'
p51848
S'Kernel that sets a zero residual.\n'
p51849
sS'subblocks'
p51850
NsS'parameters'
p51851
(lp51852
(dp51853
S'description'
p51854
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51855
sS'cpp_type'
p51856
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51857
sS'default'
p51858
g3
sS'name'
p51859
S'block'
p51860
sS'required'
p51861
I00
sS'group_name'
p51862
Nsa(dp51863
S'description'
p51864
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51865
sS'cpp_type'
p51866
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51867
sS'default'
p51868
g3
sS'name'
p51869
S'control_tags'
p51870
sS'required'
p51871
I00
sS'group_name'
p51872
S'Advanced'
p51873
sa(dp51874
S'description'
p51875
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51876
sS'cpp_type'
p51877
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51878
sS'default'
p51879
g3
sS'name'
p51880
S'diag_save_in'
p51881
sS'required'
p51882
I00
sS'group_name'
p51883
S'Advanced'
p51884
sa(dp51885
S'description'
p51886
S'Whether or not this kernel will be used as an eigen kernel\n'
p51887
sS'cpp_type'
p51888
S'bool'
p51889
sS'default'
p51890
S'0'
p51891
sS'name'
p51892
S'eigen_kernel'
p51893
sS'required'
p51894
I00
sS'group_name'
p51895
Nsa(dp51896
S'description'
p51897
S'Set the enabled status of the MooseObject.\n'
p51898
sS'cpp_type'
p51899
S'bool'
p51900
sS'default'
p51901
S'1'
p51902
sS'name'
p51903
S'enable'
p51904
sS'required'
p51905
I00
sS'group_name'
p51906
S'Advanced'
p51907
sa(dp51908
S'description'
p51909
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51910
sS'cpp_type'
p51911
S'bool'
p51912
sS'default'
p51913
S'1'
p51914
sS'name'
p51915
S'implicit'
p51916
sS'required'
p51917
I00
sS'group_name'
p51918
S'Advanced'
p51919
sa(dp51920
S'description'
p51921
S'On diagonal Jacobian fill term to retain an invertable matrix for the preconditioner\n'
p51922
sS'cpp_type'
p51923
S'double'
p51924
sS'default'
p51925
S'1e-09'
p51926
sS'name'
p51927
S'jacobian_fill'
p51928
sS'required'
p51929
I00
sS'group_name'
p51930
Nsa(dp51931
S'description'
p51932
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51933
sS'cpp_type'
p51934
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51935
sS'default'
p51936
g3
sS'name'
p51937
S'save_in'
p51938
sS'required'
p51939
I00
sS'group_name'
p51940
S'Advanced'
p51941
sa(dp51942
S'description'
p51943
S'The seed for the master random number generator\n'
p51944
sS'cpp_type'
p51945
S'unsigned int'
p51946
sS'default'
p51947
S'0'
p51948
sS'name'
p51949
S'seed'
p51950
sS'required'
p51951
I00
sS'group_name'
p51952
S'Advanced'
p51953
sa(dp51954
S'description'
p51955
g3
sS'cpp_type'
p51956
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51957
sS'default'
p51958
S'NullKernel'
p51959
sS'name'
p51960
S'type'
p51961
sS'required'
p51962
I00
sS'group_name'
p51963
Nsa(dp51964
S'description'
p51965
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51966
sS'cpp_type'
p51967
S'bool'
p51968
sS'default'
p51969
S'0'
p51970
sS'name'
p51971
S'use_displaced_mesh'
p51972
sS'required'
p51973
I00
sS'group_name'
p51974
S'Advanced'
p51975
sa(dp51976
S'description'
p51977
S'The name of the variable that this Kernel operates on\n'
p51978
sS'cpp_type'
p51979
S'NonlinearVariableName'
p51980
sS'default'
p51981
g3
sS'name'
p51982
S'variable'
p51983
sS'required'
p51984
I01
sS'group_name'
p51985
NsasS'name'
p51986
S'/Kernels/NullKernel'
p51987
sa(dp51988
S'description'
p51989
S'Apply pressure in the out-of-plane direction in 2D plane stress or generalized plane strain models \n'
p51990
sS'subblocks'
p51991
NsS'parameters'
p51992
(lp51993
(dp51994
S'description'
p51995
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51996
sS'cpp_type'
p51997
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51998
sS'default'
p51999
g3
sS'name'
p52000
S'block'
p52001
sS'required'
p52002
I00
sS'group_name'
p52003
Nsa(dp52004
S'description'
p52005
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52006
sS'cpp_type'
p52007
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52008
sS'default'
p52009
g3
sS'name'
p52010
S'control_tags'
p52011
sS'required'
p52012
I00
sS'group_name'
p52013
S'Advanced'
p52014
sa(dp52015
S'description'
p52016
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52017
sS'cpp_type'
p52018
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52019
sS'default'
p52020
g3
sS'name'
p52021
S'diag_save_in'
p52022
sS'required'
p52023
I00
sS'group_name'
p52024
S'Advanced'
p52025
sa(dp52026
S'description'
p52027
S'Whether or not this kernel will be used as an eigen kernel\n'
p52028
sS'cpp_type'
p52029
S'bool'
p52030
sS'default'
p52031
S'0'
p52032
sS'name'
p52033
S'eigen_kernel'
p52034
sS'required'
p52035
I00
sS'group_name'
p52036
Nsa(dp52037
S'description'
p52038
S'Set the enabled status of the MooseObject.\n'
p52039
sS'cpp_type'
p52040
S'bool'
p52041
sS'default'
p52042
S'1'
p52043
sS'name'
p52044
S'enable'
p52045
sS'required'
p52046
I00
sS'group_name'
p52047
S'Advanced'
p52048
sa(dp52049
S'description'
p52050
S'Scale factor applied to prescribed pressure\n'
p52051
sS'cpp_type'
p52052
S'double'
p52053
sS'default'
p52054
S'1'
p52055
sS'name'
p52056
S'factor'
p52057
sS'required'
p52058
I00
sS'group_name'
p52059
Nsa(dp52060
S'description'
p52061
S'Function used to prescribe pressure\n'
p52062
sS'cpp_type'
p52063
S'FunctionName'
p52064
sS'default'
p52065
S'1.0'
p52066
sS'name'
p52067
S'function'
p52068
sS'required'
p52069
I00
sS'group_name'
p52070
Nsa(dp52071
S'description'
p52072
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52073
sS'cpp_type'
p52074
S'bool'
p52075
sS'default'
p52076
S'1'
p52077
sS'name'
p52078
S'implicit'
p52079
sS'required'
p52080
I00
sS'group_name'
p52081
S'Advanced'
p52082
sa(dp52083
S'description'
p52084
S'Postprocessor used to prescribe pressure\n'
p52085
sS'cpp_type'
p52086
S'PostprocessorName'
p52087
sS'default'
p52088
g3
sS'name'
p52089
S'postprocessor'
p52090
sS'required'
p52091
I00
sS'group_name'
p52092
Nsa(dp52093
S'description'
p52094
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52095
sS'cpp_type'
p52096
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52097
sS'default'
p52098
g3
sS'name'
p52099
S'save_in'
p52100
sS'required'
p52101
I00
sS'group_name'
p52102
S'Advanced'
p52103
sa(dp52104
S'description'
p52105
S'The seed for the master random number generator\n'
p52106
sS'cpp_type'
p52107
S'unsigned int'
p52108
sS'default'
p52109
S'0'
p52110
sS'name'
p52111
S'seed'
p52112
sS'required'
p52113
I00
sS'group_name'
p52114
S'Advanced'
p52115
sa(dp52116
S'description'
p52117
g3
sS'cpp_type'
p52118
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52119
sS'default'
p52120
S'OutOfPlanePressure'
p52121
sS'name'
p52122
S'type'
p52123
sS'required'
p52124
I00
sS'group_name'
p52125
Nsa(dp52126
S'description'
p52127
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52128
sS'cpp_type'
p52129
S'bool'
p52130
sS'default'
p52131
S'1'
p52132
sS'name'
p52133
S'use_displaced_mesh'
p52134
sS'required'
p52135
I00
sS'group_name'
p52136
S'Advanced'
p52137
sa(dp52138
S'description'
p52139
S'The name of the variable that this Kernel operates on\n'
p52140
sS'cpp_type'
p52141
S'NonlinearVariableName'
p52142
sS'default'
p52143
g3
sS'name'
p52144
S'variable'
p52145
sS'required'
p52146
I01
sS'group_name'
p52147
NsasS'name'
p52148
S'/Kernels/OutOfPlanePressure'
p52149
sa(dp52150
S'description'
p52151
g3
sS'subblocks'
p52152
NsS'parameters'
p52153
(lp52154
(dp52155
S'description'
p52156
S'Base name for the complex L variables\n'
p52157
sS'cpp_type'
p52158
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52159
sS'default'
p52160
g3
sS'name'
p52161
S'L_name_base'
p52162
sS'required'
p52163
I01
sS'group_name'
p52164
Nsa(dp52165
S'description'
p52166
S'Parameter in the Taylor series expansion\n'
p52167
sS'cpp_type'
p52168
S'double'
p52169
sS'default'
p52170
S'1'
p52171
sS'name'
p52172
S'a'
p52173
sS'required'
p52174
I00
sS'group_name'
p52175
Nsa(dp52176
S'description'
p52177
S'Parameter in the Taylor series expansion\n'
p52178
sS'cpp_type'
p52179
S'double'
p52180
sS'default'
p52181
S'1'
p52182
sS'name'
p52183
S'b'
p52184
sS'required'
p52185
I00
sS'group_name'
p52186
Nsa(dp52187
S'description'
p52188
S'Parameter in the Taylor series expansion\n'
p52189
sS'cpp_type'
p52190
S'double'
p52191
sS'default'
p52192
S'1'
p52193
sS'name'
p52194
S'c'
p52195
sS'required'
p52196
I00
sS'group_name'
p52197
Nsa(dp52198
S'name'
p52199
S'log_approach'
p52200
sS'cpp_type'
p52201
S'MooseEnum'
p52202
sS'default'
p52203
g3
sS'description'
p52204
S'Which approach will be used to handle the natural log\n'
p52205
sS'required'
p52206
I01
sS'options'
p52207
S'tolerance cancelation expansion'
p52208
sS'group_name'
p52209
Nsa(dp52210
S'description'
p52211
S'The mobility used for n in this model\n'
p52212
sS'cpp_type'
p52213
S'MaterialPropertyName'
p52214
sS'default'
p52215
S'M'
p52216
sS'name'
p52217
S'mob_name'
p52218
sS'required'
p52219
I00
sS'group_name'
p52220
Nsa(dp52221
S'description'
p52222
S'Number of terms used in the Taylor expansion of the natural log term\n'
p52223
sS'cpp_type'
p52224
S'double'
p52225
sS'default'
p52226
S'4'
p52227
sS'name'
p52228
S'n_exp_terms'
p52229
sS'required'
p52230
I00
sS'group_name'
p52231
Nsa(dp52232
S'description'
p52233
S'Variable name used for the n variable\n'
p52234
sS'cpp_type'
p52235
S'VariableName'
p52236
sS'default'
p52237
g3
sS'name'
p52238
S'n_name'
p52239
sS'required'
p52240
I01
sS'group_name'
p52241
Nsa(dp52242
S'description'
p52243
S'specifies the number of complex L variables will be solved for\n'
p52244
sS'cpp_type'
p52245
S'unsigned int'
p52246
sS'default'
p52247
g3
sS'name'
p52248
S'num_L'
p52249
sS'required'
p52250
I01
sS'group_name'
p52251
Nsa(dp52252
S'description'
p52253
S'Tolerance used when the tolerance approach is chosen\n'
p52254
sS'cpp_type'
p52255
S'double'
p52256
sS'default'
p52257
S'1e-09'
p52258
sS'name'
p52259
S'tol'
p52260
sS'required'
p52261
I00
sS'group_name'
p52262
Nsa(dp52263
S'description'
p52264
S'Whether to use displaced mesh in the kernels\n'
p52265
sS'cpp_type'
p52266
S'bool'
p52267
sS'default'
p52268
S'0'
p52269
sS'name'
p52270
S'use_displaced_mesh'
p52271
sS'required'
p52272
I00
sS'group_name'
p52273
NsasS'name'
p52274
S'/Kernels/PFCRFFKernel'
p52275
sa(dp52276
S'description'
p52277
S'Kernel to compute bulk energy contribution to damage order parameter residual equation\n'
p52278
sS'subblocks'
p52279
NsS'parameters'
p52280
(lp52281
(dp52282
S'description'
p52283
S'Material property name with undamaged strain energy driving damage (G0_pos)\n'
p52284
sS'cpp_type'
p52285
S'MaterialPropertyName'
p52286
sS'default'
p52287
g3
sS'name'
p52288
S'G0_var'
p52289
sS'required'
p52290
I01
sS'group_name'
p52291
Nsa(dp52292
S'description'
p52293
S'Material property base name\n'
p52294
sS'cpp_type'
p52295
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52296
sS'default'
p52297
g3
sS'name'
p52298
S'base_name'
p52299
sS'required'
p52300
I00
sS'group_name'
p52301
Nsa(dp52302
S'description'
p52303
S'Auxiliary variable\n'
p52304
sS'cpp_type'
p52305
S'std::vector<VariableName>'
p52306
sS'default'
p52307
g3
sS'name'
p52308
S'beta'
p52309
sS'required'
p52310
I01
sS'group_name'
p52311
Nsa(dp52312
S'description'
p52313
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52314
sS'cpp_type'
p52315
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52316
sS'default'
p52317
g3
sS'name'
p52318
S'block'
p52319
sS'required'
p52320
I00
sS'group_name'
p52321
Nsa(dp52322
S'description'
p52323
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52324
sS'cpp_type'
p52325
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52326
sS'default'
p52327
g3
sS'name'
p52328
S'control_tags'
p52329
sS'required'
p52330
I00
sS'group_name'
p52331
S'Advanced'
p52332
sa(dp52333
S'description'
p52334
S'Material property name with derivative of G0_pos with strain\n'
p52335
sS'cpp_type'
p52336
S'MaterialPropertyName'
p52337
sS'default'
p52338
g3
sS'name'
p52339
S'dG0_dstrain_var'
p52340
sS'required'
p52341
I00
sS'group_name'
p52342
Nsa(dp52343
S'description'
p52344
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52345
sS'cpp_type'
p52346
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52347
sS'default'
p52348
g3
sS'name'
p52349
S'diag_save_in'
p52350
sS'required'
p52351
I00
sS'group_name'
p52352
S'Advanced'
p52353
sa(dp52354
S'description'
p52355
S'The string of displacements suitable for the problem statement\n'
p52356
sS'cpp_type'
p52357
S'std::vector<VariableName>'
p52358
sS'default'
p52359
g3
sS'name'
p52360
S'displacements'
p52361
sS'required'
p52362
I00
sS'group_name'
p52363
Nsa(dp52364
S'description'
p52365
S'Whether or not this kernel will be used as an eigen kernel\n'
p52366
sS'cpp_type'
p52367
S'bool'
p52368
sS'default'
p52369
S'0'
p52370
sS'name'
p52371
S'eigen_kernel'
p52372
sS'required'
p52373
I00
sS'group_name'
p52374
Nsa(dp52375
S'description'
p52376
S'Set the enabled status of the MooseObject.\n'
p52377
sS'cpp_type'
p52378
S'bool'
p52379
sS'default'
p52380
S'1'
p52381
sS'name'
p52382
S'enable'
p52383
sS'required'
p52384
I00
sS'group_name'
p52385
S'Advanced'
p52386
sa(dp52387
S'description'
p52388
S'Material property name with gc value\n'
p52389
sS'cpp_type'
p52390
S'MaterialPropertyName'
p52391
sS'default'
p52392
g3
sS'name'
p52393
S'gc_prop_var'
p52394
sS'required'
p52395
I01
sS'group_name'
p52396
Nsa(dp52397
S'description'
p52398
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52399
sS'cpp_type'
p52400
S'bool'
p52401
sS'default'
p52402
S'1'
p52403
sS'name'
p52404
S'implicit'
p52405
sS'required'
p52406
I00
sS'group_name'
p52407
S'Advanced'
p52408
sa(dp52409
S'description'
p52410
S'Interface width\n'
p52411
sS'cpp_type'
p52412
S'double'
p52413
sS'default'
p52414
g3
sS'name'
p52415
S'l'
p52416
sS'required'
p52417
I01
sS'group_name'
p52418
Nsa(dp52419
S'description'
p52420
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52421
sS'cpp_type'
p52422
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52423
sS'default'
p52424
g3
sS'name'
p52425
S'save_in'
p52426
sS'required'
p52427
I00
sS'group_name'
p52428
S'Advanced'
p52429
sa(dp52430
S'description'
p52431
S'The seed for the master random number generator\n'
p52432
sS'cpp_type'
p52433
S'unsigned int'
p52434
sS'default'
p52435
S'0'
p52436
sS'name'
p52437
S'seed'
p52438
sS'required'
p52439
I00
sS'group_name'
p52440
S'Advanced'
p52441
sa(dp52442
S'description'
p52443
g3
sS'cpp_type'
p52444
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52445
sS'default'
p52446
S'PFFracBulkRate'
p52447
sS'name'
p52448
S'type'
p52449
sS'required'
p52450
I00
sS'group_name'
p52451
Nsa(dp52452
S'description'
p52453
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52454
sS'cpp_type'
p52455
S'bool'
p52456
sS'default'
p52457
S'0'
p52458
sS'name'
p52459
S'use_displaced_mesh'
p52460
sS'required'
p52461
I00
sS'group_name'
p52462
S'Advanced'
p52463
sa(dp52464
S'description'
p52465
S'The name of the variable that this Kernel operates on\n'
p52466
sS'cpp_type'
p52467
S'NonlinearVariableName'
p52468
sS'default'
p52469
g3
sS'name'
p52470
S'variable'
p52471
sS'required'
p52472
I01
sS'group_name'
p52473
Nsa(dp52474
S'description'
p52475
S'Viscosity parameter\n'
p52476
sS'cpp_type'
p52477
S'double'
p52478
sS'default'
p52479
g3
sS'name'
p52480
S'visco'
p52481
sS'required'
p52482
I01
sS'group_name'
p52483
NsasS'name'
p52484
S'/Kernels/PFFracBulkRate'
p52485
sa(dp52486
S'description'
p52487
S'Phase-field fracture residual for beta variable: Contribution from gradient of damage order parameter\n'
p52488
sS'subblocks'
p52489
NsS'parameters'
p52490
(lp52491
(dp52492
S'description'
p52493
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52494
sS'cpp_type'
p52495
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52496
sS'default'
p52497
g3
sS'name'
p52498
S'block'
p52499
sS'required'
p52500
I00
sS'group_name'
p52501
Nsa(dp52502
S'description'
p52503
S'Order parameter for damage\n'
p52504
sS'cpp_type'
p52505
S'std::vector<VariableName>'
p52506
sS'default'
p52507
g3
sS'name'
p52508
S'c'
p52509
sS'required'
p52510
I01
sS'group_name'
p52511
Nsa(dp52512
S'description'
p52513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52514
sS'cpp_type'
p52515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52516
sS'default'
p52517
g3
sS'name'
p52518
S'control_tags'
p52519
sS'required'
p52520
I00
sS'group_name'
p52521
S'Advanced'
p52522
sa(dp52523
S'description'
p52524
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52525
sS'cpp_type'
p52526
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52527
sS'default'
p52528
g3
sS'name'
p52529
S'diag_save_in'
p52530
sS'required'
p52531
I00
sS'group_name'
p52532
S'Advanced'
p52533
sa(dp52534
S'description'
p52535
S'Whether or not this kernel will be used as an eigen kernel\n'
p52536
sS'cpp_type'
p52537
S'bool'
p52538
sS'default'
p52539
S'0'
p52540
sS'name'
p52541
S'eigen_kernel'
p52542
sS'required'
p52543
I00
sS'group_name'
p52544
Nsa(dp52545
S'description'
p52546
S'Set the enabled status of the MooseObject.\n'
p52547
sS'cpp_type'
p52548
S'bool'
p52549
sS'default'
p52550
S'1'
p52551
sS'name'
p52552
S'enable'
p52553
sS'required'
p52554
I00
sS'group_name'
p52555
S'Advanced'
p52556
sa(dp52557
S'description'
p52558
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52559
sS'cpp_type'
p52560
S'bool'
p52561
sS'default'
p52562
S'1'
p52563
sS'name'
p52564
S'implicit'
p52565
sS'required'
p52566
I00
sS'group_name'
p52567
S'Advanced'
p52568
sa(dp52569
S'description'
p52570
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52571
sS'cpp_type'
p52572
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52573
sS'default'
p52574
g3
sS'name'
p52575
S'save_in'
p52576
sS'required'
p52577
I00
sS'group_name'
p52578
S'Advanced'
p52579
sa(dp52580
S'description'
p52581
S'The seed for the master random number generator\n'
p52582
sS'cpp_type'
p52583
S'unsigned int'
p52584
sS'default'
p52585
S'0'
p52586
sS'name'
p52587
S'seed'
p52588
sS'required'
p52589
I00
sS'group_name'
p52590
S'Advanced'
p52591
sa(dp52592
S'description'
p52593
g3
sS'cpp_type'
p52594
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52595
sS'default'
p52596
S'PFFracCoupledInterface'
p52597
sS'name'
p52598
S'type'
p52599
sS'required'
p52600
I00
sS'group_name'
p52601
Nsa(dp52602
S'description'
p52603
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52604
sS'cpp_type'
p52605
S'bool'
p52606
sS'default'
p52607
S'0'
p52608
sS'name'
p52609
S'use_displaced_mesh'
p52610
sS'required'
p52611
I00
sS'group_name'
p52612
S'Advanced'
p52613
sa(dp52614
S'description'
p52615
S'The name of the variable that this Kernel operates on\n'
p52616
sS'cpp_type'
p52617
S'NonlinearVariableName'
p52618
sS'default'
p52619
g3
sS'name'
p52620
S'variable'
p52621
sS'required'
p52622
I01
sS'group_name'
p52623
NsasS'name'
p52624
S'/Kernels/PFFracCoupledInterface'
p52625
sa(dp52626
S'description'
p52627
S'Stress divergence kernel for phase-field fracture: Computes off diagonal damage dependent Jacobian components. To be used with StressDivergenceTensors or DynamicStressDivergenceTensors.\n'
p52628
sS'subblocks'
p52629
NsS'parameters'
p52630
(lp52631
(dp52632
S'description'
p52633
S'Material property base name\n'
p52634
sS'cpp_type'
p52635
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52636
sS'default'
p52637
g3
sS'name'
p52638
S'base_name'
p52639
sS'required'
p52640
I00
sS'group_name'
p52641
Nsa(dp52642
S'description'
p52643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52644
sS'cpp_type'
p52645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52646
sS'default'
p52647
g3
sS'name'
p52648
S'block'
p52649
sS'required'
p52650
I00
sS'group_name'
p52651
Nsa(dp52652
S'description'
p52653
S'Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n'
p52654
sS'cpp_type'
p52655
S'std::vector<VariableName>'
p52656
sS'default'
p52657
g3
sS'name'
p52658
S'c'
p52659
sS'required'
p52660
I00
sS'group_name'
p52661
Nsa(dp52662
S'description'
p52663
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p52664
sS'cpp_type'
p52665
S'unsigned int'
p52666
sS'default'
p52667
g3
sS'name'
p52668
S'component'
p52669
sS'required'
p52670
I01
sS'group_name'
p52671
Nsa(dp52672
S'description'
p52673
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52674
sS'cpp_type'
p52675
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52676
sS'default'
p52677
g3
sS'name'
p52678
S'control_tags'
p52679
sS'required'
p52680
I00
sS'group_name'
p52681
S'Advanced'
p52682
sa(dp52683
S'description'
p52684
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52685
sS'cpp_type'
p52686
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52687
sS'default'
p52688
g3
sS'name'
p52689
S'diag_save_in'
p52690
sS'required'
p52691
I00
sS'group_name'
p52692
S'Advanced'
p52693
sa(dp52694
S'description'
p52695
S'Whether or not this kernel will be used as an eigen kernel\n'
p52696
sS'cpp_type'
p52697
S'bool'
p52698
sS'default'
p52699
S'0'
p52700
sS'name'
p52701
S'eigen_kernel'
p52702
sS'required'
p52703
I00
sS'group_name'
p52704
Nsa(dp52705
S'description'
p52706
S'Set the enabled status of the MooseObject.\n'
p52707
sS'cpp_type'
p52708
S'bool'
p52709
sS'default'
p52710
S'1'
p52711
sS'name'
p52712
S'enable'
p52713
sS'required'
p52714
I00
sS'group_name'
p52715
S'Advanced'
p52716
sa(dp52717
S'description'
p52718
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52719
sS'cpp_type'
p52720
S'bool'
p52721
sS'default'
p52722
S'1'
p52723
sS'name'
p52724
S'implicit'
p52725
sS'required'
p52726
I00
sS'group_name'
p52727
S'Advanced'
p52728
sa(dp52729
S'description'
p52730
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52731
sS'cpp_type'
p52732
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52733
sS'default'
p52734
g3
sS'name'
p52735
S'save_in'
p52736
sS'required'
p52737
I00
sS'group_name'
p52738
S'Advanced'
p52739
sa(dp52740
S'description'
p52741
S'The seed for the master random number generator\n'
p52742
sS'cpp_type'
p52743
S'unsigned int'
p52744
sS'default'
p52745
S'0'
p52746
sS'name'
p52747
S'seed'
p52748
sS'required'
p52749
I00
sS'group_name'
p52750
S'Advanced'
p52751
sa(dp52752
S'description'
p52753
g3
sS'cpp_type'
p52754
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52755
sS'default'
p52756
S'PhaseFieldFractureMechanicsOffDiag'
p52757
sS'name'
p52758
S'type'
p52759
sS'required'
p52760
I00
sS'group_name'
p52761
Nsa(dp52762
S'description'
p52763
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52764
sS'cpp_type'
p52765
S'bool'
p52766
sS'default'
p52767
S'0'
p52768
sS'name'
p52769
S'use_displaced_mesh'
p52770
sS'required'
p52771
I00
sS'group_name'
p52772
S'Advanced'
p52773
sa(dp52774
S'description'
p52775
S'The name of the variable that this Kernel operates on\n'
p52776
sS'cpp_type'
p52777
S'NonlinearVariableName'
p52778
sS'default'
p52779
g3
sS'name'
p52780
S'variable'
p52781
sS'required'
p52782
I01
sS'group_name'
p52783
NsasS'name'
p52784
S'/Kernels/PhaseFieldFractureMechanicsOffDiag'
p52785
sa(dp52786
S'description'
p52787
S'Plastic heat energy density = coeff * stress * plastic_strain_rate\n'
p52788
sS'subblocks'
p52789
NsS'parameters'
p52790
(lp52791
(dp52792
S'description'
p52793
S'Material property base name\n'
p52794
sS'cpp_type'
p52795
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52796
sS'default'
p52797
g3
sS'name'
p52798
S'base_name'
p52799
sS'required'
p52800
I00
sS'group_name'
p52801
Nsa(dp52802
S'description'
p52803
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52804
sS'cpp_type'
p52805
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52806
sS'default'
p52807
g3
sS'name'
p52808
S'block'
p52809
sS'required'
p52810
I00
sS'group_name'
p52811
Nsa(dp52812
S'description'
p52813
S'Heat energy density = coeff * stress * plastic_strain_rate\n'
p52814
sS'cpp_type'
p52815
S'double'
p52816
sS'default'
p52817
S'1'
p52818
sS'name'
p52819
S'coeff'
p52820
sS'required'
p52821
I00
sS'group_name'
p52822
Nsa(dp52823
S'description'
p52824
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52825
sS'cpp_type'
p52826
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52827
sS'default'
p52828
g3
sS'name'
p52829
S'control_tags'
p52830
sS'required'
p52831
I00
sS'group_name'
p52832
S'Advanced'
p52833
sa(dp52834
S'description'
p52835
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52836
sS'cpp_type'
p52837
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52838
sS'default'
p52839
g3
sS'name'
p52840
S'diag_save_in'
p52841
sS'required'
p52842
I00
sS'group_name'
p52843
S'Advanced'
p52844
sa(dp52845
S'description'
p52846
S'The string of displacements suitable for the problem statement\n'
p52847
sS'cpp_type'
p52848
S'std::vector<VariableName>'
p52849
sS'default'
p52850
g3
sS'name'
p52851
S'displacements'
p52852
sS'required'
p52853
I01
sS'group_name'
p52854
Nsa(dp52855
S'description'
p52856
S'Whether or not this kernel will be used as an eigen kernel\n'
p52857
sS'cpp_type'
p52858
S'bool'
p52859
sS'default'
p52860
S'0'
p52861
sS'name'
p52862
S'eigen_kernel'
p52863
sS'required'
p52864
I00
sS'group_name'
p52865
Nsa(dp52866
S'description'
p52867
S'Set the enabled status of the MooseObject.\n'
p52868
sS'cpp_type'
p52869
S'bool'
p52870
sS'default'
p52871
S'1'
p52872
sS'name'
p52873
S'enable'
p52874
sS'required'
p52875
I00
sS'group_name'
p52876
S'Advanced'
p52877
sa(dp52878
S'description'
p52879
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52880
sS'cpp_type'
p52881
S'bool'
p52882
sS'default'
p52883
S'1'
p52884
sS'name'
p52885
S'implicit'
p52886
sS'required'
p52887
I00
sS'group_name'
p52888
S'Advanced'
p52889
sa(dp52890
S'description'
p52891
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52892
sS'cpp_type'
p52893
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52894
sS'default'
p52895
g3
sS'name'
p52896
S'save_in'
p52897
sS'required'
p52898
I00
sS'group_name'
p52899
S'Advanced'
p52900
sa(dp52901
S'description'
p52902
S'The seed for the master random number generator\n'
p52903
sS'cpp_type'
p52904
S'unsigned int'
p52905
sS'default'
p52906
S'0'
p52907
sS'name'
p52908
S'seed'
p52909
sS'required'
p52910
I00
sS'group_name'
p52911
S'Advanced'
p52912
sa(dp52913
S'description'
p52914
g3
sS'cpp_type'
p52915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52916
sS'default'
p52917
S'PlasticHeatEnergy'
p52918
sS'name'
p52919
S'type'
p52920
sS'required'
p52921
I00
sS'group_name'
p52922
Nsa(dp52923
S'description'
p52924
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52925
sS'cpp_type'
p52926
S'bool'
p52927
sS'default'
p52928
S'0'
p52929
sS'name'
p52930
S'use_displaced_mesh'
p52931
sS'required'
p52932
I00
sS'group_name'
p52933
S'Advanced'
p52934
sa(dp52935
S'description'
p52936
S'The name of the variable that this Kernel operates on\n'
p52937
sS'cpp_type'
p52938
S'NonlinearVariableName'
p52939
sS'default'
p52940
g3
sS'name'
p52941
S'variable'
p52942
sS'required'
p52943
I01
sS'group_name'
p52944
NsasS'name'
p52945
S'/Kernels/PlasticHeatEnergy'
p52946
sa(dp52947
S'description'
p52948
g3
sS'subblocks'
p52949
NsS'parameters'
p52950
(lp52951
(dp52952
S'description'
p52953
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p52954
sS'cpp_type'
p52955
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52956
sS'default'
p52957
g3
sS'name'
p52958
S'base_name'
p52959
sS'required'
p52960
I00
sS'group_name'
p52961
Nsa(dp52962
S'description'
p52963
S'specifies the number of grains to create\n'
p52964
sS'cpp_type'
p52965
S'unsigned int'
p52966
sS'default'
p52967
g3
sS'name'
p52968
S'op_num'
p52969
sS'required'
p52970
I01
sS'group_name'
p52971
Nsa(dp52972
S'description'
p52973
S'Whether to use displaced mesh in the kernels\n'
p52974
sS'cpp_type'
p52975
S'bool'
p52976
sS'default'
p52977
S'0'
p52978
sS'name'
p52979
S'use_displaced_mesh'
p52980
sS'required'
p52981
I00
sS'group_name'
p52982
Nsa(dp52983
S'description'
p52984
S'specifies the base name of the variables\n'
p52985
sS'cpp_type'
p52986
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52987
sS'default'
p52988
g3
sS'name'
p52989
S'var_name_base'
p52990
sS'required'
p52991
I01
sS'group_name'
p52992
NsasS'name'
p52993
S'/Kernels/PolycrystalElasticDrivingForce'
p52994
sa(dp52995
S'description'
p52996
g3
sS'subblocks'
p52997
NsS'parameters'
p52998
(lp52999
(dp53000
S'description'
p53001
S'Name of temperature variable\n'
p53002
sS'cpp_type'
p53003
S'VariableName'
p53004
sS'default'
p53005
g3
sS'name'
p53006
S'T'
p53007
sS'required'
p53008
I00
sS'group_name'
p53009
Nsa(dp53010
S'description'
p53011
S'Name of coupled concentration variable\n'
p53012
sS'cpp_type'
p53013
S'VariableName'
p53014
sS'default'
p53015
g3
sS'name'
p53016
S'c'
p53017
sS'required'
p53018
I00
sS'group_name'
p53019
Nsa(dp53020
S'description'
p53021
S'Ratio of surface to GB energy\n'
p53022
sS'cpp_type'
p53023
S'double'
p53024
sS'default'
p53025
S'1'
p53026
sS'name'
p53027
S'en_ratio'
p53028
sS'required'
p53029
I00
sS'group_name'
p53030
Nsa(dp53031
S'description'
p53032
S'Whether kernels are implicit or not\n'
p53033
sS'cpp_type'
p53034
S'bool'
p53035
sS'default'
p53036
S'1'
p53037
sS'name'
p53038
S'implicit'
p53039
sS'required'
p53040
I00
sS'group_name'
p53041
Nsa(dp53042
S'description'
p53043
S'specifies the number of deformed grains to create\n'
p53044
sS'cpp_type'
p53045
S'unsigned int'
p53046
sS'default'
p53047
S'0'
p53048
sS'name'
p53049
S'ndef'
p53050
sS'required'
p53051
I00
sS'group_name'
p53052
Nsa(dp53053
S'description'
p53054
S'specifies the total number of grains (deformed + recrystallized) to create\n'
p53055
sS'cpp_type'
p53056
S'unsigned int'
p53057
sS'default'
p53058
g3
sS'name'
p53059
S'op_num'
p53060
sS'required'
p53061
I01
sS'group_name'
p53062
Nsa(dp53063
S'description'
p53064
S'Whether to use displaced mesh in the kernels\n'
p53065
sS'cpp_type'
p53066
S'bool'
p53067
sS'default'
p53068
S'0'
p53069
sS'name'
p53070
S'use_displaced_mesh'
p53071
sS'required'
p53072
I00
sS'group_name'
p53073
Nsa(dp53074
S'description'
p53075
S'specifies the base name of the variables\n'
p53076
sS'cpp_type'
p53077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53078
sS'default'
p53079
g3
sS'name'
p53080
S'var_name_base'
p53081
sS'required'
p53082
I01
sS'group_name'
p53083
NsasS'name'
p53084
S'/Kernels/PolycrystalKernel'
p53085
sa(dp53086
S'description'
p53087
g3
sS'subblocks'
p53088
NsS'parameters'
p53089
(lp53090
(dp53091
S'description'
p53092
S'Name of temperature variable\n'
p53093
sS'cpp_type'
p53094
S'VariableName'
p53095
sS'default'
p53096
g3
sS'name'
p53097
S'T'
p53098
sS'required'
p53099
I00
sS'group_name'
p53100
Nsa(dp53101
S'description'
p53102
S'Name of coupled concentration variable\n'
p53103
sS'cpp_type'
p53104
S'VariableName'
p53105
sS'default'
p53106
g3
sS'name'
p53107
S'c'
p53108
sS'required'
p53109
I00
sS'group_name'
p53110
Nsa(dp53111
S'description'
p53112
S'specifies the number of deformed grains to create\n'
p53113
sS'cpp_type'
p53114
S'unsigned int'
p53115
sS'default'
p53116
g3
sS'name'
p53117
S'deformed_grain_num'
p53118
sS'required'
p53119
I01
sS'group_name'
p53120
Nsa(dp53121
S'description'
p53122
S'The GrainTracker UserObject to get values from.\n'
p53123
sS'cpp_type'
p53124
S'UserObjectName'
p53125
sS'default'
p53126
g3
sS'name'
p53127
S'grain_tracker'
p53128
sS'required'
p53129
I01
sS'group_name'
p53130
Nsa(dp53131
S'description'
p53132
S'specifies the total number of OPs representing all grains (deformed + undeformed (recrystallized)) to create\n'
p53133
sS'cpp_type'
p53134
S'unsigned int'
p53135
sS'default'
p53136
g3
sS'name'
p53137
S'op_num'
p53138
sS'required'
p53139
I01
sS'group_name'
p53140
Nsa(dp53141
S'description'
p53142
S'Whether to use displaced mesh in the kernels\n'
p53143
sS'cpp_type'
p53144
S'bool'
p53145
sS'default'
p53146
S'0'
p53147
sS'name'
p53148
S'use_displaced_mesh'
p53149
sS'required'
p53150
I00
sS'group_name'
p53151
Nsa(dp53152
S'description'
p53153
S'specifies the base name of the variables\n'
p53154
sS'cpp_type'
p53155
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53156
sS'default'
p53157
g3
sS'name'
p53158
S'var_name_base'
p53159
sS'required'
p53160
I01
sS'group_name'
p53161
NsasS'name'
p53162
S'/Kernels/PolycrystalStoredEnergy'
p53163
sa(dp53164
S'description'
p53165
g3
sS'subblocks'
p53166
NsS'parameters'
p53167
(lp53168
(dp53169
S'description'
p53170
S'Add the displacement variables\n'
p53171
sS'cpp_type'
p53172
S'bool'
p53173
sS'default'
p53174
S'0'
p53175
sS'name'
p53176
S'add_variables'
p53177
sS'required'
p53178
I00
sS'group_name'
p53179
Nsa(dp53180
S'name'
p53181
S'additional_generate_output'
p53182
sS'cpp_type'
p53183
S'MultiMooseEnum'
p53184
sS'default'
p53185
g3
sS'description'
p53186
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p53187
sS'required'
p53188
I00
sS'options'
p53189
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p53190
sS'group_name'
p53191
S'Output'
p53192
sa(dp53193
S'description'
p53194
S'Material property base name\n'
p53195
sS'cpp_type'
p53196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53197
sS'default'
p53198
g3
sS'name'
p53199
S'base_name'
p53200
sS'required'
p53201
I00
sS'group_name'
p53202
Nsa(dp53203
S'description'
p53204
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p53205
sS'cpp_type'
p53206
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53207
sS'default'
p53208
g3
sS'name'
p53209
S'block'
p53210
sS'required'
p53211
I00
sS'group_name'
p53212
S'Advanced'
p53213
sa(dp53214
S'name'
p53215
S'decomposition_method'
p53216
sS'cpp_type'
p53217
S'MooseEnum'
p53218
sS'default'
p53219
S'TaylorExpansion'
p53220
sS'description'
p53221
S'Methods to calculate the finite strain and rotation increments\n'
p53222
sS'required'
p53223
I00
sS'options'
p53224
S'TaylorExpansion EigenSolution'
p53225
sS'group_name'
p53226
Nsa(dp53227
S'description'
p53228
S'The displacement diagonal preconditioner terms\n'
p53229
sS'cpp_type'
p53230
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53231
sS'default'
p53232
g3
sS'name'
p53233
S'diag_save_in'
p53234
sS'required'
p53235
I00
sS'group_name'
p53236
S'Advanced'
p53237
sa(dp53238
S'description'
p53239
S'The nonlinear displacement variables for the problem\n'
p53240
sS'cpp_type'
p53241
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p53242
sS'default'
p53243
g3
sS'name'
p53244
S'displacements'
p53245
sS'required'
p53246
I01
sS'group_name'
p53247
Nsa(dp53248
S'description'
p53249
S'List of eigenstrains to be applied in this strain calculation\n'
p53250
sS'cpp_type'
p53251
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p53252
sS'default'
p53253
g3
sS'name'
p53254
S'eigenstrain_names'
p53255
sS'required'
p53256
I00
sS'group_name'
p53257
Nsa(dp53258
S'name'
p53259
S'generate_output'
p53260
sS'cpp_type'
p53261
S'MultiMooseEnum'
p53262
sS'default'
p53263
g3
sS'description'
p53264
S'Add scalar quantity output for stress and/or strain\n'
p53265
sS'required'
p53266
I00
sS'options'
p53267
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p53268
sS'group_name'
p53269
S'Output'
p53270
sa(dp53271
S'description'
p53272
S'Use incremental or total strain\n'
p53273
sS'cpp_type'
p53274
S'bool'
p53275
sS'default'
p53276
g3
sS'name'
p53277
S'incremental'
p53278
sS'required'
p53279
I00
sS'group_name'
p53280
Nsa(dp53281
S'description'
p53282
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p53283
sS'cpp_type'
p53284
S'FunctionName'
p53285
sS'default'
p53286
S'0'
p53287
sS'name'
p53288
S'out_of_plane_pressure'
p53289
sS'required'
p53290
I00
sS'group_name'
p53291
S'Out-of-plane stress/strain'
p53292
sa(dp53293
S'name'
p53294
S'planar_formulation'
p53295
sS'cpp_type'
p53296
S'MooseEnum'
p53297
sS'default'
p53298
S'NONE'
p53299
sS'description'
p53300
S'Out-of-plane stress/strain formulation\n'
p53301
sS'required'
p53302
I00
sS'options'
p53303
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p53304
sS'group_name'
p53305
S'Out-of-plane stress/strain'
p53306
sa(dp53307
S'description'
p53308
S'The porepressure variable\n'
p53309
sS'cpp_type'
p53310
S'NonlinearVariableName'
p53311
sS'default'
p53312
g3
sS'name'
p53313
S'porepressure'
p53314
sS'required'
p53315
I01
sS'group_name'
p53316
Nsa(dp53317
S'description'
p53318
S'Scale factor applied to prescribed pressure\n'
p53319
sS'cpp_type'
p53320
S'double'
p53321
sS'default'
p53322
S'1'
p53323
sS'name'
p53324
S'pressure_factor'
p53325
sS'required'
p53326
I00
sS'group_name'
p53327
S'Out-of-plane stress/strain'
p53328
sa(dp53329
S'description'
p53330
S'The displacement residuals\n'
p53331
sS'cpp_type'
p53332
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53333
sS'default'
p53334
g3
sS'name'
p53335
S'save_in'
p53336
sS'required'
p53337
I00
sS'group_name'
p53338
S'Advanced'
p53339
sa(dp53340
S'description'
p53341
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p53342
sS'cpp_type'
p53343
S'NonlinearVariableName'
p53344
sS'default'
p53345
g3
sS'name'
p53346
S'scalar_out_of_plane_strain'
p53347
sS'required'
p53348
I00
sS'group_name'
p53349
S'Out-of-plane stress/strain'
p53350
sa(dp53351
S'name'
p53352
S'strain'
p53353
sS'cpp_type'
p53354
S'MooseEnum'
p53355
sS'default'
p53356
S'SMALL'
p53357
sS'description'
p53358
S'Strain formulation\n'
p53359
sS'required'
p53360
I00
sS'options'
p53361
S'SMALL FINITE'
p53362
sS'group_name'
p53363
Nsa(dp53364
S'description'
p53365
S'The temperature\n'
p53366
sS'cpp_type'
p53367
S'NonlinearVariableName'
p53368
sS'default'
p53369
g3
sS'name'
p53370
S'temp'
p53371
sS'required'
p53372
I00
sS'group_name'
p53373
Nsa(dp53374
S'description'
p53375
S'The temperature\n'
p53376
sS'cpp_type'
p53377
S'NonlinearVariableName'
p53378
sS'default'
p53379
g3
sS'name'
p53380
S'temperature'
p53381
sS'required'
p53382
I00
sS'group_name'
p53383
Nsa(dp53384
S'description'
p53385
S'Whether to use displaced mesh in the kernels\n'
p53386
sS'cpp_type'
p53387
S'bool'
p53388
sS'default'
p53389
S'0'
p53390
sS'name'
p53391
S'use_displaced_mesh'
p53392
sS'required'
p53393
I00
sS'group_name'
p53394
Nsa(dp53395
S'description'
p53396
S'Jacobian for corrotational finite strain\n'
p53397
sS'cpp_type'
p53398
S'bool'
p53399
sS'default'
p53400
S'0'
p53401
sS'name'
p53402
S'use_finite_deform_jacobian'
p53403
sS'required'
p53404
I00
sS'group_name'
p53405
Nsa(dp53406
S'description'
p53407
S'Flag to correct volumetric locking\n'
p53408
sS'cpp_type'
p53409
S'bool'
p53410
sS'default'
p53411
S'0'
p53412
sS'name'
p53413
S'volumetric_locking_correction'
p53414
sS'required'
p53415
I00
sS'group_name'
p53416
NsasS'name'
p53417
S'/Kernels/PoroMechanics'
p53418
sa(dp53419
S'description'
p53420
S'Adds -BiotCoefficient*porepressure*grad_test[component]\n'
p53421
sS'subblocks'
p53422
NsS'parameters'
p53423
(lp53424
(dp53425
S'description'
p53426
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53427
sS'cpp_type'
p53428
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53429
sS'default'
p53430
g3
sS'name'
p53431
S'block'
p53432
sS'required'
p53433
I00
sS'group_name'
p53434
Nsa(dp53435
S'description'
p53436
S'The gradient direction (0 for x, 1 for y and 2 for z)\n'
p53437
sS'cpp_type'
p53438
S'unsigned int'
p53439
sS'default'
p53440
g3
sS'name'
p53441
S'component'
p53442
sS'required'
p53443
I01
sS'group_name'
p53444
Nsa(dp53445
S'description'
p53446
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53447
sS'cpp_type'
p53448
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53449
sS'default'
p53450
g3
sS'name'
p53451
S'control_tags'
p53452
sS'required'
p53453
I00
sS'group_name'
p53454
S'Advanced'
p53455
sa(dp53456
S'description'
p53457
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53458
sS'cpp_type'
p53459
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53460
sS'default'
p53461
g3
sS'name'
p53462
S'diag_save_in'
p53463
sS'required'
p53464
I00
sS'group_name'
p53465
S'Advanced'
p53466
sa(dp53467
S'description'
p53468
S'Whether or not this kernel will be used as an eigen kernel\n'
p53469
sS'cpp_type'
p53470
S'bool'
p53471
sS'default'
p53472
S'0'
p53473
sS'name'
p53474
S'eigen_kernel'
p53475
sS'required'
p53476
I00
sS'group_name'
p53477
Nsa(dp53478
S'description'
p53479
S'Set the enabled status of the MooseObject.\n'
p53480
sS'cpp_type'
p53481
S'bool'
p53482
sS'default'
p53483
S'1'
p53484
sS'name'
p53485
S'enable'
p53486
sS'required'
p53487
I00
sS'group_name'
p53488
S'Advanced'
p53489
sa(dp53490
S'description'
p53491
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53492
sS'cpp_type'
p53493
S'bool'
p53494
sS'default'
p53495
S'1'
p53496
sS'name'
p53497
S'implicit'
p53498
sS'required'
p53499
I00
sS'group_name'
p53500
S'Advanced'
p53501
sa(dp53502
S'description'
p53503
S'Porepressure.  This kernel adds -BiotCoefficient*porepressure*grad_test[component]\n'
p53504
sS'cpp_type'
p53505
S'std::vector<VariableName>'
p53506
sS'default'
p53507
g3
sS'name'
p53508
S'porepressure'
p53509
sS'required'
p53510
I01
sS'group_name'
p53511
Nsa(dp53512
S'description'
p53513
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53514
sS'cpp_type'
p53515
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53516
sS'default'
p53517
g3
sS'name'
p53518
S'save_in'
p53519
sS'required'
p53520
I00
sS'group_name'
p53521
S'Advanced'
p53522
sa(dp53523
S'description'
p53524
S'The seed for the master random number generator\n'
p53525
sS'cpp_type'
p53526
S'unsigned int'
p53527
sS'default'
p53528
S'0'
p53529
sS'name'
p53530
S'seed'
p53531
sS'required'
p53532
I00
sS'group_name'
p53533
S'Advanced'
p53534
sa(dp53535
S'description'
p53536
g3
sS'cpp_type'
p53537
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53538
sS'default'
p53539
S'PoroMechanicsCoupling'
p53540
sS'name'
p53541
S'type'
p53542
sS'required'
p53543
I00
sS'group_name'
p53544
Nsa(dp53545
S'description'
p53546
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53547
sS'cpp_type'
p53548
S'bool'
p53549
sS'default'
p53550
S'0'
p53551
sS'name'
p53552
S'use_displaced_mesh'
p53553
sS'required'
p53554
I00
sS'group_name'
p53555
S'Advanced'
p53556
sa(dp53557
S'description'
p53558
S'The name of the variable that this Kernel operates on\n'
p53559
sS'cpp_type'
p53560
S'NonlinearVariableName'
p53561
sS'default'
p53562
g3
sS'name'
p53563
S'variable'
p53564
sS'required'
p53565
I01
sS'group_name'
p53566
NsasS'name'
p53567
S'/Kernels/PoroMechanicsCoupling'
p53568
sa(dp53569
S'description'
p53570
g3
sS'subblocks'
p53571
NsS'parameters'
p53572
(lp53573
(dp53574
S'description'
p53575
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53576
sS'cpp_type'
p53577
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53578
sS'default'
p53579
g3
sS'name'
p53580
S'block'
p53581
sS'required'
p53582
I00
sS'group_name'
p53583
Nsa(dp53584
S'description'
p53585
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53586
sS'cpp_type'
p53587
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53588
sS'default'
p53589
g3
sS'name'
p53590
S'control_tags'
p53591
sS'required'
p53592
I00
sS'group_name'
p53593
S'Advanced'
p53594
sa(dp53595
S'description'
p53596
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53597
sS'cpp_type'
p53598
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53599
sS'default'
p53600
g3
sS'name'
p53601
S'diag_save_in'
p53602
sS'required'
p53603
I00
sS'group_name'
p53604
S'Advanced'
p53605
sa(dp53606
S'description'
p53607
S'Whether or not this kernel will be used as an eigen kernel\n'
p53608
sS'cpp_type'
p53609
S'bool'
p53610
sS'default'
p53611
S'0'
p53612
sS'name'
p53613
S'eigen_kernel'
p53614
sS'required'
p53615
I00
sS'group_name'
p53616
Nsa(dp53617
S'description'
p53618
S'Set the enabled status of the MooseObject.\n'
p53619
sS'cpp_type'
p53620
S'bool'
p53621
sS'default'
p53622
S'1'
p53623
sS'name'
p53624
S'enable'
p53625
sS'required'
p53626
I00
sS'group_name'
p53627
S'Advanced'
p53628
sa(dp53629
S'description'
p53630
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53631
sS'cpp_type'
p53632
S'bool'
p53633
sS'default'
p53634
S'1'
p53635
sS'name'
p53636
S'implicit'
p53637
sS'required'
p53638
I00
sS'group_name'
p53639
S'Advanced'
p53640
sa(dp53641
S'description'
p53642
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53643
sS'cpp_type'
p53644
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53645
sS'default'
p53646
g3
sS'name'
p53647
S'save_in'
p53648
sS'required'
p53649
I00
sS'group_name'
p53650
S'Advanced'
p53651
sa(dp53652
S'description'
p53653
S'The seed for the master random number generator\n'
p53654
sS'cpp_type'
p53655
S'unsigned int'
p53656
sS'default'
p53657
S'0'
p53658
sS'name'
p53659
S'seed'
p53660
sS'required'
p53661
I00
sS'group_name'
p53662
S'Advanced'
p53663
sa(dp53664
S'description'
p53665
g3
sS'cpp_type'
p53666
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53667
sS'default'
p53668
S'Reaction'
p53669
sS'name'
p53670
S'type'
p53671
sS'required'
p53672
I00
sS'group_name'
p53673
Nsa(dp53674
S'description'
p53675
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53676
sS'cpp_type'
p53677
S'bool'
p53678
sS'default'
p53679
S'0'
p53680
sS'name'
p53681
S'use_displaced_mesh'
p53682
sS'required'
p53683
I00
sS'group_name'
p53684
S'Advanced'
p53685
sa(dp53686
S'description'
p53687
S'The name of the variable that this Kernel operates on\n'
p53688
sS'cpp_type'
p53689
S'NonlinearVariableName'
p53690
sS'default'
p53691
g3
sS'name'
p53692
S'variable'
p53693
sS'required'
p53694
I01
sS'group_name'
p53695
NsasS'name'
p53696
S'/Kernels/Reaction'
p53697
sa(dp53698
S'description'
p53699
g3
sS'subblocks'
p53700
NsS'parameters'
p53701
(lp53702
(dp53703
S'description'
p53704
S'Optional parameter that allows the user to define type of force density under consideration\n'
p53705
sS'cpp_type'
p53706
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53707
sS'default'
p53708
g3
sS'name'
p53709
S'base_name'
p53710
sS'required'
p53711
I00
sS'group_name'
p53712
Nsa(dp53713
S'description'
p53714
S'Name of coupled concentration variable\n'
p53715
sS'cpp_type'
p53716
S'VariableName'
p53717
sS'default'
p53718
g3
sS'name'
p53719
S'c'
p53720
sS'required'
p53721
I00
sS'group_name'
p53722
Nsa(dp53723
S'description'
p53724
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p53725
sS'cpp_type'
p53726
S'MaterialPropertyName'
p53727
sS'default'
p53728
g3
sS'name'
p53729
S'f_name'
p53730
sS'required'
p53731
I00
sS'group_name'
p53732
Nsa(dp53733
S'description'
p53734
S'userobject for getting force and torque acting on grains\n'
p53735
sS'cpp_type'
p53736
S'UserObjectName'
p53737
sS'default'
p53738
g3
sS'name'
p53739
S'grain_force'
p53740
sS'required'
p53741
I01
sS'group_name'
p53742
Nsa(dp53743
S'description'
p53744
S'The FeatureFloodCount UserObject to get values from.\n'
p53745
sS'cpp_type'
p53746
S'UserObjectName'
p53747
sS'default'
p53748
g3
sS'name'
p53749
S'grain_tracker_object'
p53750
sS'required'
p53751
I01
sS'group_name'
p53752
Nsa(dp53753
S'description'
p53754
S'The feature volume VectorPostprocessorValue.\n'
p53755
sS'cpp_type'
p53756
S'VectorPostprocessorName'
p53757
sS'default'
p53758
g3
sS'name'
p53759
S'grain_volumes'
p53760
sS'required'
p53761
I01
sS'group_name'
p53762
Nsa(dp53763
S'description'
p53764
S'Whether kernels are implicit or not\n'
p53765
sS'cpp_type'
p53766
S'bool'
p53767
sS'default'
p53768
S'1'
p53769
sS'name'
p53770
S'implicit'
p53771
sS'required'
p53772
I00
sS'group_name'
p53773
Nsa(dp53774
S'description'
p53775
S'The kappa used with the kernel\n'
p53776
sS'cpp_type'
p53777
S'MaterialPropertyName'
p53778
sS'default'
p53779
S'kappa_op'
p53780
sS'name'
p53781
S'kappa_name'
p53782
sS'required'
p53783
I00
sS'group_name'
p53784
Nsa(dp53785
S'description'
p53786
S'The mobility used with the kernel\n'
p53787
sS'cpp_type'
p53788
S'MaterialPropertyName'
p53789
sS'default'
p53790
S'L'
p53791
sS'name'
p53792
S'mob_name'
p53793
sS'required'
p53794
I00
sS'group_name'
p53795
Nsa(dp53796
S'description'
p53797
S'specifies the number of grains to create\n'
p53798
sS'cpp_type'
p53799
S'unsigned int'
p53800
sS'default'
p53801
g3
sS'name'
p53802
S'op_num'
p53803
sS'required'
p53804
I01
sS'group_name'
p53805
Nsa(dp53806
S'description'
p53807
S'constant value characterizing grain rotation\n'
p53808
sS'cpp_type'
p53809
S'double'
p53810
sS'default'
p53811
S'1'
p53812
sS'name'
p53813
S'rotation_constant'
p53814
sS'required'
p53815
I00
sS'group_name'
p53816
Nsa(dp53817
S'description'
p53818
S'constant value characterizing grain translation\n'
p53819
sS'cpp_type'
p53820
S'double'
p53821
sS'default'
p53822
S'500'
p53823
sS'name'
p53824
S'translation_constant'
p53825
sS'required'
p53826
I00
sS'group_name'
p53827
Nsa(dp53828
S'description'
p53829
S'Whether to use displaced mesh in the kernels\n'
p53830
sS'cpp_type'
p53831
S'bool'
p53832
sS'default'
p53833
S'0'
p53834
sS'name'
p53835
S'use_displaced_mesh'
p53836
sS'required'
p53837
I00
sS'group_name'
p53838
Nsa(dp53839
S'description'
p53840
S'specifies the base name of the variables\n'
p53841
sS'cpp_type'
p53842
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53843
sS'default'
p53844
g3
sS'name'
p53845
S'var_name_base'
p53846
sS'required'
p53847
I01
sS'group_name'
p53848
NsasS'name'
p53849
S'/Kernels/RigidBodyMultiKernel'
p53850
sa(dp53851
S'description'
p53852
S'Gradient energy for Allen-Cahn Kernel with constant Mobility and Interfacial parameter\n'
p53853
sS'subblocks'
p53854
NsS'parameters'
p53855
(lp53856
(dp53857
S'description'
p53858
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53859
sS'cpp_type'
p53860
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53861
sS'default'
p53862
g3
sS'name'
p53863
S'block'
p53864
sS'required'
p53865
I00
sS'group_name'
p53866
Nsa(dp53867
S'description'
p53868
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53869
sS'cpp_type'
p53870
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53871
sS'default'
p53872
g3
sS'name'
p53873
S'control_tags'
p53874
sS'required'
p53875
I00
sS'group_name'
p53876
S'Advanced'
p53877
sa(dp53878
S'description'
p53879
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53880
sS'cpp_type'
p53881
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53882
sS'default'
p53883
g3
sS'name'
p53884
S'diag_save_in'
p53885
sS'required'
p53886
I00
sS'group_name'
p53887
S'Advanced'
p53888
sa(dp53889
S'description'
p53890
S'Whether or not this kernel will be used as an eigen kernel\n'
p53891
sS'cpp_type'
p53892
S'bool'
p53893
sS'default'
p53894
S'0'
p53895
sS'name'
p53896
S'eigen_kernel'
p53897
sS'required'
p53898
I00
sS'group_name'
p53899
Nsa(dp53900
S'description'
p53901
S'Set the enabled status of the MooseObject.\n'
p53902
sS'cpp_type'
p53903
S'bool'
p53904
sS'default'
p53905
S'1'
p53906
sS'name'
p53907
S'enable'
p53908
sS'required'
p53909
I00
sS'group_name'
p53910
S'Advanced'
p53911
sa(dp53912
S'description'
p53913
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53914
sS'cpp_type'
p53915
S'bool'
p53916
sS'default'
p53917
S'1'
p53918
sS'name'
p53919
S'implicit'
p53920
sS'required'
p53921
I00
sS'group_name'
p53922
S'Advanced'
p53923
sa(dp53924
S'description'
p53925
S'The kappa used with the kernel\n'
p53926
sS'cpp_type'
p53927
S'MaterialPropertyName'
p53928
sS'default'
p53929
S'kappa_op'
p53930
sS'name'
p53931
S'kappa_name'
p53932
sS'required'
p53933
I00
sS'group_name'
p53934
Nsa(dp53935
S'description'
p53936
S'The mobility used with the kernel\n'
p53937
sS'cpp_type'
p53938
S'MaterialPropertyName'
p53939
sS'default'
p53940
S'L'
p53941
sS'name'
p53942
S'mob_name'
p53943
sS'required'
p53944
I00
sS'group_name'
p53945
Nsa(dp53946
S'description'
p53947
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53948
sS'cpp_type'
p53949
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53950
sS'default'
p53951
g3
sS'name'
p53952
S'save_in'
p53953
sS'required'
p53954
I00
sS'group_name'
p53955
S'Advanced'
p53956
sa(dp53957
S'description'
p53958
S'The seed for the master random number generator\n'
p53959
sS'cpp_type'
p53960
S'unsigned int'
p53961
sS'default'
p53962
S'0'
p53963
sS'name'
p53964
S'seed'
p53965
sS'required'
p53966
I00
sS'group_name'
p53967
S'Advanced'
p53968
sa(dp53969
S'description'
p53970
g3
sS'cpp_type'
p53971
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53972
sS'default'
p53973
S'SimpleACInterface'
p53974
sS'name'
p53975
S'type'
p53976
sS'required'
p53977
I00
sS'group_name'
p53978
Nsa(dp53979
S'description'
p53980
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53981
sS'cpp_type'
p53982
S'bool'
p53983
sS'default'
p53984
S'0'
p53985
sS'name'
p53986
S'use_displaced_mesh'
p53987
sS'required'
p53988
I00
sS'group_name'
p53989
S'Advanced'
p53990
sa(dp53991
S'description'
p53992
S'The name of the variable that this Kernel operates on\n'
p53993
sS'cpp_type'
p53994
S'NonlinearVariableName'
p53995
sS'default'
p53996
g3
sS'name'
p53997
S'variable'
p53998
sS'required'
p53999
I01
sS'group_name'
p54000
NsasS'name'
p54001
S'/Kernels/SimpleACInterface'
p54002
sa(dp54003
S'description'
p54004
S'Gradient energy for Cahn-Hilliard equation with constant Mobility and Interfacial parameter\n'
p54005
sS'subblocks'
p54006
NsS'parameters'
p54007
(lp54008
(dp54009
S'description'
p54010
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54011
sS'cpp_type'
p54012
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54013
sS'default'
p54014
g3
sS'name'
p54015
S'block'
p54016
sS'required'
p54017
I00
sS'group_name'
p54018
Nsa(dp54019
S'description'
p54020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54021
sS'cpp_type'
p54022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54023
sS'default'
p54024
g3
sS'name'
p54025
S'control_tags'
p54026
sS'required'
p54027
I00
sS'group_name'
p54028
S'Advanced'
p54029
sa(dp54030
S'description'
p54031
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54032
sS'cpp_type'
p54033
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54034
sS'default'
p54035
g3
sS'name'
p54036
S'diag_save_in'
p54037
sS'required'
p54038
I00
sS'group_name'
p54039
S'Advanced'
p54040
sa(dp54041
S'description'
p54042
S'Whether or not this kernel will be used as an eigen kernel\n'
p54043
sS'cpp_type'
p54044
S'bool'
p54045
sS'default'
p54046
S'0'
p54047
sS'name'
p54048
S'eigen_kernel'
p54049
sS'required'
p54050
I00
sS'group_name'
p54051
Nsa(dp54052
S'description'
p54053
S'Set the enabled status of the MooseObject.\n'
p54054
sS'cpp_type'
p54055
S'bool'
p54056
sS'default'
p54057
S'1'
p54058
sS'name'
p54059
S'enable'
p54060
sS'required'
p54061
I00
sS'group_name'
p54062
S'Advanced'
p54063
sa(dp54064
S'description'
p54065
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54066
sS'cpp_type'
p54067
S'bool'
p54068
sS'default'
p54069
S'1'
p54070
sS'name'
p54071
S'implicit'
p54072
sS'required'
p54073
I00
sS'group_name'
p54074
S'Advanced'
p54075
sa(dp54076
S'description'
p54077
S'The kappa used with the kernel, should be constant value\n'
p54078
sS'cpp_type'
p54079
S'MaterialPropertyName'
p54080
sS'default'
p54081
g3
sS'name'
p54082
S'kappa_name'
p54083
sS'required'
p54084
I01
sS'group_name'
p54085
Nsa(dp54086
S'description'
p54087
S'The mobility used with the kernel, should be constant value\n'
p54088
sS'cpp_type'
p54089
S'MaterialPropertyName'
p54090
sS'default'
p54091
g3
sS'name'
p54092
S'mob_name'
p54093
sS'required'
p54094
I01
sS'group_name'
p54095
Nsa(dp54096
S'description'
p54097
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54098
sS'cpp_type'
p54099
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54100
sS'default'
p54101
g3
sS'name'
p54102
S'save_in'
p54103
sS'required'
p54104
I00
sS'group_name'
p54105
S'Advanced'
p54106
sa(dp54107
S'description'
p54108
S'The seed for the master random number generator\n'
p54109
sS'cpp_type'
p54110
S'unsigned int'
p54111
sS'default'
p54112
S'0'
p54113
sS'name'
p54114
S'seed'
p54115
sS'required'
p54116
I00
sS'group_name'
p54117
S'Advanced'
p54118
sa(dp54119
S'description'
p54120
g3
sS'cpp_type'
p54121
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54122
sS'default'
p54123
S'SimpleCHInterface'
p54124
sS'name'
p54125
S'type'
p54126
sS'required'
p54127
I00
sS'group_name'
p54128
Nsa(dp54129
S'description'
p54130
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54131
sS'cpp_type'
p54132
S'bool'
p54133
sS'default'
p54134
S'0'
p54135
sS'name'
p54136
S'use_displaced_mesh'
p54137
sS'required'
p54138
I00
sS'group_name'
p54139
S'Advanced'
p54140
sa(dp54141
S'description'
p54142
S'The name of the variable that this Kernel operates on\n'
p54143
sS'cpp_type'
p54144
S'NonlinearVariableName'
p54145
sS'default'
p54146
g3
sS'name'
p54147
S'variable'
p54148
sS'required'
p54149
I01
sS'group_name'
p54150
NsasS'name'
p54151
S'/Kernels/SimpleCHInterface'
p54152
sa(dp54153
S'description'
p54154
S'Gradient energy for Allen-Cahn Kernel with constant Mobility and Interfacial parameter\n'
p54155
sS'subblocks'
p54156
NsS'parameters'
p54157
(lp54158
(dp54159
S'description'
p54160
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54161
sS'cpp_type'
p54162
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54163
sS'default'
p54164
g3
sS'name'
p54165
S'block'
p54166
sS'required'
p54167
I00
sS'group_name'
p54168
Nsa(dp54169
S'description'
p54170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54171
sS'cpp_type'
p54172
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54173
sS'default'
p54174
g3
sS'name'
p54175
S'control_tags'
p54176
sS'required'
p54177
I00
sS'group_name'
p54178
S'Advanced'
p54179
sa(dp54180
S'description'
p54181
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54182
sS'cpp_type'
p54183
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54184
sS'default'
p54185
g3
sS'name'
p54186
S'diag_save_in'
p54187
sS'required'
p54188
I00
sS'group_name'
p54189
S'Advanced'
p54190
sa(dp54191
S'description'
p54192
S'Whether or not this kernel will be used as an eigen kernel\n'
p54193
sS'cpp_type'
p54194
S'bool'
p54195
sS'default'
p54196
S'0'
p54197
sS'name'
p54198
S'eigen_kernel'
p54199
sS'required'
p54200
I00
sS'group_name'
p54201
Nsa(dp54202
S'description'
p54203
S'Set the enabled status of the MooseObject.\n'
p54204
sS'cpp_type'
p54205
S'bool'
p54206
sS'default'
p54207
S'1'
p54208
sS'name'
p54209
S'enable'
p54210
sS'required'
p54211
I00
sS'group_name'
p54212
S'Advanced'
p54213
sa(dp54214
S'description'
p54215
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54216
sS'cpp_type'
p54217
S'bool'
p54218
sS'default'
p54219
S'1'
p54220
sS'name'
p54221
S'implicit'
p54222
sS'required'
p54223
I00
sS'group_name'
p54224
S'Advanced'
p54225
sa(dp54226
S'description'
p54227
S'The kappa used with the kernel\n'
p54228
sS'cpp_type'
p54229
S'MaterialPropertyName'
p54230
sS'default'
p54231
S'kappa_op'
p54232
sS'name'
p54233
S'kappa_name'
p54234
sS'required'
p54235
I00
sS'group_name'
p54236
Nsa(dp54237
S'description'
p54238
S'The mobility used with the kernel\n'
p54239
sS'cpp_type'
p54240
S'MaterialPropertyName'
p54241
sS'default'
p54242
S'L'
p54243
sS'name'
p54244
S'mob_name'
p54245
sS'required'
p54246
I00
sS'group_name'
p54247
Nsa(dp54248
S'description'
p54249
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54250
sS'cpp_type'
p54251
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54252
sS'default'
p54253
g3
sS'name'
p54254
S'save_in'
p54255
sS'required'
p54256
I00
sS'group_name'
p54257
S'Advanced'
p54258
sa(dp54259
S'description'
p54260
S'The seed for the master random number generator\n'
p54261
sS'cpp_type'
p54262
S'unsigned int'
p54263
sS'default'
p54264
S'0'
p54265
sS'name'
p54266
S'seed'
p54267
sS'required'
p54268
I00
sS'group_name'
p54269
S'Advanced'
p54270
sa(dp54271
S'description'
p54272
g3
sS'cpp_type'
p54273
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54274
sS'default'
p54275
S'SimpleCoupledACInterface'
p54276
sS'name'
p54277
S'type'
p54278
sS'required'
p54279
I00
sS'group_name'
p54280
Nsa(dp54281
S'description'
p54282
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54283
sS'cpp_type'
p54284
S'bool'
p54285
sS'default'
p54286
S'0'
p54287
sS'name'
p54288
S'use_displaced_mesh'
p54289
sS'required'
p54290
I00
sS'group_name'
p54291
S'Advanced'
p54292
sa(dp54293
S'description'
p54294
S'Coupled variable that the Laplacian is taken of\n'
p54295
sS'cpp_type'
p54296
S'std::vector<VariableName>'
p54297
sS'default'
p54298
g3
sS'name'
p54299
S'v'
p54300
sS'required'
p54301
I01
sS'group_name'
p54302
Nsa(dp54303
S'description'
p54304
S'The name of the variable that this Kernel operates on\n'
p54305
sS'cpp_type'
p54306
S'NonlinearVariableName'
p54307
sS'default'
p54308
g3
sS'name'
p54309
S'variable'
p54310
sS'required'
p54311
I01
sS'group_name'
p54312
NsasS'name'
p54313
S'/Kernels/SimpleCoupledACInterface'
p54314
sa(dp54315
S'description'
p54316
S'Gradient energy for split Cahn-Hilliard equation with constant Mobility\n'
p54317
sS'subblocks'
p54318
NsS'parameters'
p54319
(lp54320
(dp54321
S'description'
p54322
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54323
sS'cpp_type'
p54324
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54325
sS'default'
p54326
g3
sS'name'
p54327
S'block'
p54328
sS'required'
p54329
I00
sS'group_name'
p54330
Nsa(dp54331
S'description'
p54332
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54333
sS'cpp_type'
p54334
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54335
sS'default'
p54336
g3
sS'name'
p54337
S'control_tags'
p54338
sS'required'
p54339
I00
sS'group_name'
p54340
S'Advanced'
p54341
sa(dp54342
S'description'
p54343
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54344
sS'cpp_type'
p54345
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54346
sS'default'
p54347
g3
sS'name'
p54348
S'diag_save_in'
p54349
sS'required'
p54350
I00
sS'group_name'
p54351
S'Advanced'
p54352
sa(dp54353
S'description'
p54354
S'Whether or not this kernel will be used as an eigen kernel\n'
p54355
sS'cpp_type'
p54356
S'bool'
p54357
sS'default'
p54358
S'0'
p54359
sS'name'
p54360
S'eigen_kernel'
p54361
sS'required'
p54362
I00
sS'group_name'
p54363
Nsa(dp54364
S'description'
p54365
S'Set the enabled status of the MooseObject.\n'
p54366
sS'cpp_type'
p54367
S'bool'
p54368
sS'default'
p54369
S'1'
p54370
sS'name'
p54371
S'enable'
p54372
sS'required'
p54373
I00
sS'group_name'
p54374
S'Advanced'
p54375
sa(dp54376
S'description'
p54377
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54378
sS'cpp_type'
p54379
S'bool'
p54380
sS'default'
p54381
S'1'
p54382
sS'name'
p54383
S'implicit'
p54384
sS'required'
p54385
I00
sS'group_name'
p54386
S'Advanced'
p54387
sa(dp54388
S'description'
p54389
S'The mobility used with the kernel, should be a constant value\n'
p54390
sS'cpp_type'
p54391
S'MaterialPropertyName'
p54392
sS'default'
p54393
S'M'
p54394
sS'name'
p54395
S'mob_name'
p54396
sS'required'
p54397
I00
sS'group_name'
p54398
Nsa(dp54399
S'description'
p54400
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54401
sS'cpp_type'
p54402
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54403
sS'default'
p54404
g3
sS'name'
p54405
S'save_in'
p54406
sS'required'
p54407
I00
sS'group_name'
p54408
S'Advanced'
p54409
sa(dp54410
S'description'
p54411
S'The seed for the master random number generator\n'
p54412
sS'cpp_type'
p54413
S'unsigned int'
p54414
sS'default'
p54415
S'0'
p54416
sS'name'
p54417
S'seed'
p54418
sS'required'
p54419
I00
sS'group_name'
p54420
S'Advanced'
p54421
sa(dp54422
S'description'
p54423
g3
sS'cpp_type'
p54424
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54425
sS'default'
p54426
S'SimpleSplitCHWRes'
p54427
sS'name'
p54428
S'type'
p54429
sS'required'
p54430
I00
sS'group_name'
p54431
Nsa(dp54432
S'description'
p54433
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54434
sS'cpp_type'
p54435
S'bool'
p54436
sS'default'
p54437
S'0'
p54438
sS'name'
p54439
S'use_displaced_mesh'
p54440
sS'required'
p54441
I00
sS'group_name'
p54442
S'Advanced'
p54443
sa(dp54444
S'description'
p54445
S'The name of the variable that this Kernel operates on\n'
p54446
sS'cpp_type'
p54447
S'NonlinearVariableName'
p54448
sS'default'
p54449
g3
sS'name'
p54450
S'variable'
p54451
sS'required'
p54452
I01
sS'group_name'
p54453
NsasS'name'
p54454
S'/Kernels/SimpleSplitCHWRes'
p54455
sa(dp54456
S'description'
p54457
S'Adds rigid mody motion to a single grain\n'
p54458
sS'subblocks'
p54459
NsS'parameters'
p54460
(lp54461
(dp54462
S'description'
p54463
S'Optional parameter that allows the user to define type of force density under consideration\n'
p54464
sS'cpp_type'
p54465
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54466
sS'default'
p54467
g3
sS'name'
p54468
S'base_name'
p54469
sS'required'
p54470
I00
sS'group_name'
p54471
Nsa(dp54472
S'description'
p54473
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54474
sS'cpp_type'
p54475
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54476
sS'default'
p54477
g3
sS'name'
p54478
S'block'
p54479
sS'required'
p54480
I00
sS'group_name'
p54481
Nsa(dp54482
S'description'
p54483
S'Concentration\n'
p54484
sS'cpp_type'
p54485
S'std::vector<VariableName>'
p54486
sS'default'
p54487
g3
sS'name'
p54488
S'c'
p54489
sS'required'
p54490
I01
sS'group_name'
p54491
Nsa(dp54492
S'description'
p54493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54494
sS'cpp_type'
p54495
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54496
sS'default'
p54497
g3
sS'name'
p54498
S'control_tags'
p54499
sS'required'
p54500
I00
sS'group_name'
p54501
S'Advanced'
p54502
sa(dp54503
S'description'
p54504
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54505
sS'cpp_type'
p54506
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54507
sS'default'
p54508
g3
sS'name'
p54509
S'diag_save_in'
p54510
sS'required'
p54511
I00
sS'group_name'
p54512
S'Advanced'
p54513
sa(dp54514
S'description'
p54515
S'Whether or not this kernel will be used as an eigen kernel\n'
p54516
sS'cpp_type'
p54517
S'bool'
p54518
sS'default'
p54519
S'0'
p54520
sS'name'
p54521
S'eigen_kernel'
p54522
sS'required'
p54523
I00
sS'group_name'
p54524
Nsa(dp54525
S'description'
p54526
S'Set the enabled status of the MooseObject.\n'
p54527
sS'cpp_type'
p54528
S'bool'
p54529
sS'default'
p54530
S'1'
p54531
sS'name'
p54532
S'enable'
p54533
sS'required'
p54534
I00
sS'group_name'
p54535
S'Advanced'
p54536
sa(dp54537
S'description'
p54538
S'UserObject for getting force and torque acting on grains\n'
p54539
sS'cpp_type'
p54540
S'UserObjectName'
p54541
sS'default'
p54542
g3
sS'name'
p54543
S'grain_force'
p54544
sS'required'
p54545
I01
sS'group_name'
p54546
Nsa(dp54547
S'description'
p54548
S'The FeatureFloodCount UserObject to get values from.\n'
p54549
sS'cpp_type'
p54550
S'UserObjectName'
p54551
sS'default'
p54552
g3
sS'name'
p54553
S'grain_tracker_object'
p54554
sS'required'
p54555
I01
sS'group_name'
p54556
Nsa(dp54557
S'description'
p54558
S'The feature volume VectorPostprocessorValue.\n'
p54559
sS'cpp_type'
p54560
S'VectorPostprocessorName'
p54561
sS'default'
p54562
g3
sS'name'
p54563
S'grain_volumes'
p54564
sS'required'
p54565
I01
sS'group_name'
p54566
Nsa(dp54567
S'description'
p54568
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54569
sS'cpp_type'
p54570
S'bool'
p54571
sS'default'
p54572
S'1'
p54573
sS'name'
p54574
S'implicit'
p54575
sS'required'
p54576
I00
sS'group_name'
p54577
S'Advanced'
p54578
sa(dp54579
S'description'
p54580
S'Grain number for the kernel to be applied\n'
p54581
sS'cpp_type'
p54582
S'unsigned int'
p54583
sS'default'
p54584
S'0'
p54585
sS'name'
p54586
S'op_index'
p54587
sS'required'
p54588
I00
sS'group_name'
p54589
Nsa(dp54590
S'description'
p54591
S'Array of coupled variable names (num_name)\n'
p54592
sS'cpp_type'
p54593
S'unsigned int'
p54594
sS'default'
p54595
g3
sS'name'
p54596
S'op_num'
p54597
sS'required'
p54598
I00
sS'group_name'
p54599
Nsa(dp54600
S'description'
p54601
S'constant value characterizing grain rotation\n'
p54602
sS'cpp_type'
p54603
S'double'
p54604
sS'default'
p54605
S'1'
p54606
sS'name'
p54607
S'rotation_constant'
p54608
sS'required'
p54609
I00
sS'group_name'
p54610
Nsa(dp54611
S'description'
p54612
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54613
sS'cpp_type'
p54614
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54615
sS'default'
p54616
g3
sS'name'
p54617
S'save_in'
p54618
sS'required'
p54619
I00
sS'group_name'
p54620
S'Advanced'
p54621
sa(dp54622
S'description'
p54623
S'The seed for the master random number generator\n'
p54624
sS'cpp_type'
p54625
S'unsigned int'
p54626
sS'default'
p54627
S'0'
p54628
sS'name'
p54629
S'seed'
p54630
sS'required'
p54631
I00
sS'group_name'
p54632
S'Advanced'
p54633
sa(dp54634
S'description'
p54635
S'constant value characterizing grain translation\n'
p54636
sS'cpp_type'
p54637
S'double'
p54638
sS'default'
p54639
S'500'
p54640
sS'name'
p54641
S'translation_constant'
p54642
sS'required'
p54643
I00
sS'group_name'
p54644
Nsa(dp54645
S'description'
p54646
g3
sS'cpp_type'
p54647
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54648
sS'default'
p54649
S'SingleGrainRigidBodyMotion'
p54650
sS'name'
p54651
S'type'
p54652
sS'required'
p54653
I00
sS'group_name'
p54654
Nsa(dp54655
S'description'
p54656
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54657
sS'cpp_type'
p54658
S'bool'
p54659
sS'default'
p54660
S'0'
p54661
sS'name'
p54662
S'use_displaced_mesh'
p54663
sS'required'
p54664
I00
sS'group_name'
p54665
S'Advanced'
p54666
sa(dp54667
S'description'
p54668
S'Array of coupled variable names\n'
p54669
sS'cpp_type'
p54670
S'std::vector<VariableName>'
p54671
sS'default'
p54672
g3
sS'name'
p54673
S'v'
p54674
sS'required'
p54675
I01
sS'group_name'
p54676
Nsa(dp54677
S'description'
p54678
S'Array of coupled variable names (base_name)\n'
p54679
sS'cpp_type'
p54680
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54681
sS'default'
p54682
g3
sS'name'
p54683
S'var_name_base'
p54684
sS'required'
p54685
I00
sS'group_name'
p54686
Nsa(dp54687
S'description'
p54688
S'The name of the variable that this Kernel operates on\n'
p54689
sS'cpp_type'
p54690
S'NonlinearVariableName'
p54691
sS'default'
p54692
g3
sS'name'
p54693
S'variable'
p54694
sS'required'
p54695
I01
sS'group_name'
p54696
NsasS'name'
p54697
S'/Kernels/SingleGrainRigidBodyMotion'
p54698
sa(dp54699
S'description'
p54700
S'Add Soret effect to Split formulation Cahn-Hilliard Kernel\n'
p54701
sS'subblocks'
p54702
NsS'parameters'
p54703
(lp54704
(dp54705
S'description'
p54706
S'The material name for the heat of transport\n'
p54707
sS'cpp_type'
p54708
S'MaterialPropertyName'
p54709
sS'default'
p54710
S'Qheat'
p54711
sS'name'
p54712
S'Q_name'
p54713
sS'required'
p54714
I00
sS'group_name'
p54715
Nsa(dp54716
S'description'
p54717
S'Temperature\n'
p54718
sS'cpp_type'
p54719
S'std::vector<VariableName>'
p54720
sS'default'
p54721
g3
sS'name'
p54722
S'T'
p54723
sS'required'
p54724
I01
sS'group_name'
p54725
Nsa(dp54726
S'description'
p54727
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54728
sS'cpp_type'
p54729
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54730
sS'default'
p54731
g3
sS'name'
p54732
S'block'
p54733
sS'required'
p54734
I00
sS'group_name'
p54735
Nsa(dp54736
S'description'
p54737
S'Concentration\n'
p54738
sS'cpp_type'
p54739
S'std::vector<VariableName>'
p54740
sS'default'
p54741
g3
sS'name'
p54742
S'c'
p54743
sS'required'
p54744
I00
sS'group_name'
p54745
Nsa(dp54746
S'description'
p54747
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54748
sS'cpp_type'
p54749
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54750
sS'default'
p54751
g3
sS'name'
p54752
S'control_tags'
p54753
sS'required'
p54754
I00
sS'group_name'
p54755
S'Advanced'
p54756
sa(dp54757
S'description'
p54758
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54759
sS'cpp_type'
p54760
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54761
sS'default'
p54762
g3
sS'name'
p54763
S'diag_save_in'
p54764
sS'required'
p54765
I00
sS'group_name'
p54766
S'Advanced'
p54767
sa(dp54768
S'description'
p54769
S'The diffusivity used with the kernel\n'
p54770
sS'cpp_type'
p54771
S'MaterialPropertyName'
p54772
sS'default'
p54773
g3
sS'name'
p54774
S'diff_name'
p54775
sS'required'
p54776
I01
sS'group_name'
p54777
Nsa(dp54778
S'description'
p54779
S'Whether or not this kernel will be used as an eigen kernel\n'
p54780
sS'cpp_type'
p54781
S'bool'
p54782
sS'default'
p54783
S'0'
p54784
sS'name'
p54785
S'eigen_kernel'
p54786
sS'required'
p54787
I00
sS'group_name'
p54788
Nsa(dp54789
S'description'
p54790
S'Set the enabled status of the MooseObject.\n'
p54791
sS'cpp_type'
p54792
S'bool'
p54793
sS'default'
p54794
S'1'
p54795
sS'name'
p54796
S'enable'
p54797
sS'required'
p54798
I00
sS'group_name'
p54799
S'Advanced'
p54800
sa(dp54801
S'description'
p54802
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54803
sS'cpp_type'
p54804
S'bool'
p54805
sS'default'
p54806
S'1'
p54807
sS'name'
p54808
S'implicit'
p54809
sS'required'
p54810
I00
sS'group_name'
p54811
S'Advanced'
p54812
sa(dp54813
S'description'
p54814
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54815
sS'cpp_type'
p54816
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54817
sS'default'
p54818
g3
sS'name'
p54819
S'save_in'
p54820
sS'required'
p54821
I00
sS'group_name'
p54822
S'Advanced'
p54823
sa(dp54824
S'description'
p54825
S'The seed for the master random number generator\n'
p54826
sS'cpp_type'
p54827
S'unsigned int'
p54828
sS'default'
p54829
S'0'
p54830
sS'name'
p54831
S'seed'
p54832
sS'required'
p54833
I00
sS'group_name'
p54834
S'Advanced'
p54835
sa(dp54836
S'description'
p54837
g3
sS'cpp_type'
p54838
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54839
sS'default'
p54840
S'SoretDiffusion'
p54841
sS'name'
p54842
S'type'
p54843
sS'required'
p54844
I00
sS'group_name'
p54845
Nsa(dp54846
S'description'
p54847
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54848
sS'cpp_type'
p54849
S'bool'
p54850
sS'default'
p54851
S'0'
p54852
sS'name'
p54853
S'use_displaced_mesh'
p54854
sS'required'
p54855
I00
sS'group_name'
p54856
S'Advanced'
p54857
sa(dp54858
S'description'
p54859
S'The name of the variable that this Kernel operates on\n'
p54860
sS'cpp_type'
p54861
S'NonlinearVariableName'
p54862
sS'default'
p54863
g3
sS'name'
p54864
S'variable'
p54865
sS'required'
p54866
I01
sS'group_name'
p54867
NsasS'name'
p54868
S'/Kernels/SoretDiffusion'
p54869
sa(dp54870
S'description'
p54871
S'Simple demonstration split formulation Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p54872
sS'subblocks'
p54873
NsS'parameters'
p54874
(lp54875
(dp54876
S'description'
p54877
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54878
sS'cpp_type'
p54879
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54880
sS'default'
p54881
g3
sS'name'
p54882
S'block'
p54883
sS'required'
p54884
I00
sS'group_name'
p54885
Nsa(dp54886
S'description'
p54887
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54888
sS'cpp_type'
p54889
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54890
sS'default'
p54891
g3
sS'name'
p54892
S'control_tags'
p54893
sS'required'
p54894
I00
sS'group_name'
p54895
S'Advanced'
p54896
sa(dp54897
S'description'
p54898
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54899
sS'cpp_type'
p54900
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54901
sS'default'
p54902
g3
sS'name'
p54903
S'diag_save_in'
p54904
sS'required'
p54905
I00
sS'group_name'
p54906
S'Advanced'
p54907
sa(dp54908
S'description'
p54909
S'Whether or not this kernel will be used as an eigen kernel\n'
p54910
sS'cpp_type'
p54911
S'bool'
p54912
sS'default'
p54913
S'0'
p54914
sS'name'
p54915
S'eigen_kernel'
p54916
sS'required'
p54917
I00
sS'group_name'
p54918
Nsa(dp54919
S'description'
p54920
S'Set the enabled status of the MooseObject.\n'
p54921
sS'cpp_type'
p54922
S'bool'
p54923
sS'default'
p54924
S'1'
p54925
sS'name'
p54926
S'enable'
p54927
sS'required'
p54928
I00
sS'group_name'
p54929
S'Advanced'
p54930
sa(dp54931
S'description'
p54932
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54933
sS'cpp_type'
p54934
S'bool'
p54935
sS'default'
p54936
S'1'
p54937
sS'name'
p54938
S'implicit'
p54939
sS'required'
p54940
I00
sS'group_name'
p54941
S'Advanced'
p54942
sa(dp54943
S'description'
p54944
S'The kappa used with the kernel\n'
p54945
sS'cpp_type'
p54946
S'MaterialPropertyName'
p54947
sS'default'
p54948
g3
sS'name'
p54949
S'kappa_name'
p54950
sS'required'
p54951
I01
sS'group_name'
p54952
Nsa(dp54953
S'description'
p54954
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54955
sS'cpp_type'
p54956
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54957
sS'default'
p54958
g3
sS'name'
p54959
S'save_in'
p54960
sS'required'
p54961
I00
sS'group_name'
p54962
S'Advanced'
p54963
sa(dp54964
S'description'
p54965
S'The seed for the master random number generator\n'
p54966
sS'cpp_type'
p54967
S'unsigned int'
p54968
sS'default'
p54969
S'0'
p54970
sS'name'
p54971
S'seed'
p54972
sS'required'
p54973
I00
sS'group_name'
p54974
S'Advanced'
p54975
sa(dp54976
S'description'
p54977
g3
sS'cpp_type'
p54978
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54979
sS'default'
p54980
S'SplitCHMath'
p54981
sS'name'
p54982
S'type'
p54983
sS'required'
p54984
I00
sS'group_name'
p54985
Nsa(dp54986
S'description'
p54987
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54988
sS'cpp_type'
p54989
S'bool'
p54990
sS'default'
p54991
S'0'
p54992
sS'name'
p54993
S'use_displaced_mesh'
p54994
sS'required'
p54995
I00
sS'group_name'
p54996
S'Advanced'
p54997
sa(dp54998
S'description'
p54999
S'The name of the variable that this Kernel operates on\n'
p55000
sS'cpp_type'
p55001
S'NonlinearVariableName'
p55002
sS'default'
p55003
g3
sS'name'
p55004
S'variable'
p55005
sS'required'
p55006
I01
sS'group_name'
p55007
Nsa(dp55008
S'description'
p55009
S'chem poten\n'
p55010
sS'cpp_type'
p55011
S'std::vector<VariableName>'
p55012
sS'default'
p55013
g3
sS'name'
p55014
S'w'
p55015
sS'required'
p55016
I01
sS'group_name'
p55017
NsasS'name'
p55018
S'/Kernels/SplitCHMath'
p55019
sa(dp55020
S'description'
p55021
S'Split formulation Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy\n'
p55022
sS'subblocks'
p55023
NsS'parameters'
p55024
(lp55025
(dp55026
S'description'
p55027
S'Vector of additional arguments to F\n'
p55028
sS'cpp_type'
p55029
S'std::vector<VariableName>'
p55030
sS'default'
p55031
g3
sS'name'
p55032
S'args'
p55033
sS'required'
p55034
I00
sS'group_name'
p55035
Nsa(dp55036
S'description'
p55037
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55038
sS'cpp_type'
p55039
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55040
sS'default'
p55041
g3
sS'name'
p55042
S'block'
p55043
sS'required'
p55044
I00
sS'group_name'
p55045
Nsa(dp55046
S'description'
p55047
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55048
sS'cpp_type'
p55049
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55050
sS'default'
p55051
g3
sS'name'
p55052
S'control_tags'
p55053
sS'required'
p55054
I00
sS'group_name'
p55055
S'Advanced'
p55056
sa(dp55057
S'description'
p55058
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55059
sS'cpp_type'
p55060
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55061
sS'default'
p55062
g3
sS'name'
p55063
S'diag_save_in'
p55064
sS'required'
p55065
I00
sS'group_name'
p55066
S'Advanced'
p55067
sa(dp55068
S'description'
p55069
S'Whether or not this kernel will be used as an eigen kernel\n'
p55070
sS'cpp_type'
p55071
S'bool'
p55072
sS'default'
p55073
S'0'
p55074
sS'name'
p55075
S'eigen_kernel'
p55076
sS'required'
p55077
I00
sS'group_name'
p55078
Nsa(dp55079
S'description'
p55080
S'Set the enabled status of the MooseObject.\n'
p55081
sS'cpp_type'
p55082
S'bool'
p55083
sS'default'
p55084
S'1'
p55085
sS'name'
p55086
S'enable'
p55087
sS'required'
p55088
I00
sS'group_name'
p55089
S'Advanced'
p55090
sa(dp55091
S'description'
p55092
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p55093
sS'cpp_type'
p55094
S'MaterialPropertyName'
p55095
sS'default'
p55096
g3
sS'name'
p55097
S'f_name'
p55098
sS'required'
p55099
I01
sS'group_name'
p55100
Nsa(dp55101
S'description'
p55102
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55103
sS'cpp_type'
p55104
S'bool'
p55105
sS'default'
p55106
S'1'
p55107
sS'name'
p55108
S'implicit'
p55109
sS'required'
p55110
I00
sS'group_name'
p55111
S'Advanced'
p55112
sa(dp55113
S'description'
p55114
S'The kappa used with the kernel\n'
p55115
sS'cpp_type'
p55116
S'MaterialPropertyName'
p55117
sS'default'
p55118
g3
sS'name'
p55119
S'kappa_name'
p55120
sS'required'
p55121
I01
sS'group_name'
p55122
Nsa(dp55123
S'description'
p55124
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55125
sS'cpp_type'
p55126
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55127
sS'default'
p55128
g3
sS'name'
p55129
S'save_in'
p55130
sS'required'
p55131
I00
sS'group_name'
p55132
S'Advanced'
p55133
sa(dp55134
S'description'
p55135
S'The seed for the master random number generator\n'
p55136
sS'cpp_type'
p55137
S'unsigned int'
p55138
sS'default'
p55139
S'0'
p55140
sS'name'
p55141
S'seed'
p55142
sS'required'
p55143
I00
sS'group_name'
p55144
S'Advanced'
p55145
sa(dp55146
S'description'
p55147
g3
sS'cpp_type'
p55148
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55149
sS'default'
p55150
S'SplitCHParsed'
p55151
sS'name'
p55152
S'type'
p55153
sS'required'
p55154
I00
sS'group_name'
p55155
Nsa(dp55156
S'description'
p55157
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55158
sS'cpp_type'
p55159
S'bool'
p55160
sS'default'
p55161
S'0'
p55162
sS'name'
p55163
S'use_displaced_mesh'
p55164
sS'required'
p55165
I00
sS'group_name'
p55166
S'Advanced'
p55167
sa(dp55168
S'description'
p55169
S'The name of the variable that this Kernel operates on\n'
p55170
sS'cpp_type'
p55171
S'NonlinearVariableName'
p55172
sS'default'
p55173
g3
sS'name'
p55174
S'variable'
p55175
sS'required'
p55176
I01
sS'group_name'
p55177
Nsa(dp55178
S'description'
p55179
S'chem poten\n'
p55180
sS'cpp_type'
p55181
S'std::vector<VariableName>'
p55182
sS'default'
p55183
g3
sS'name'
p55184
S'w'
p55185
sS'required'
p55186
I01
sS'group_name'
p55187
NsasS'name'
p55188
S'/Kernels/SplitCHParsed'
p55189
sa(dp55190
S'description'
p55191
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a scalar (isotropic) mobility\n'
p55192
sS'subblocks'
p55193
NsS'parameters'
p55194
(lp55195
(dp55196
S'description'
p55197
S'Vector of arguments of the mobility\n'
p55198
sS'cpp_type'
p55199
S'std::vector<VariableName>'
p55200
sS'default'
p55201
g3
sS'name'
p55202
S'args'
p55203
sS'required'
p55204
I00
sS'group_name'
p55205
Nsa(dp55206
S'description'
p55207
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55208
sS'cpp_type'
p55209
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55210
sS'default'
p55211
g3
sS'name'
p55212
S'block'
p55213
sS'required'
p55214
I00
sS'group_name'
p55215
Nsa(dp55216
S'description'
p55217
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55218
sS'cpp_type'
p55219
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55220
sS'default'
p55221
g3
sS'name'
p55222
S'control_tags'
p55223
sS'required'
p55224
I00
sS'group_name'
p55225
S'Advanced'
p55226
sa(dp55227
S'description'
p55228
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55229
sS'cpp_type'
p55230
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55231
sS'default'
p55232
g3
sS'name'
p55233
S'diag_save_in'
p55234
sS'required'
p55235
I00
sS'group_name'
p55236
S'Advanced'
p55237
sa(dp55238
S'description'
p55239
S'Whether or not this kernel will be used as an eigen kernel\n'
p55240
sS'cpp_type'
p55241
S'bool'
p55242
sS'default'
p55243
S'0'
p55244
sS'name'
p55245
S'eigen_kernel'
p55246
sS'required'
p55247
I00
sS'group_name'
p55248
Nsa(dp55249
S'description'
p55250
S'Set the enabled status of the MooseObject.\n'
p55251
sS'cpp_type'
p55252
S'bool'
p55253
sS'default'
p55254
S'1'
p55255
sS'name'
p55256
S'enable'
p55257
sS'required'
p55258
I00
sS'group_name'
p55259
S'Advanced'
p55260
sa(dp55261
S'description'
p55262
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55263
sS'cpp_type'
p55264
S'bool'
p55265
sS'default'
p55266
S'1'
p55267
sS'name'
p55268
S'implicit'
p55269
sS'required'
p55270
I00
sS'group_name'
p55271
S'Advanced'
p55272
sa(dp55273
S'description'
p55274
S'The mobility used with the kernel\n'
p55275
sS'cpp_type'
p55276
S'MaterialPropertyName'
p55277
sS'default'
p55278
S'mobtemp'
p55279
sS'name'
p55280
S'mob_name'
p55281
sS'required'
p55282
I00
sS'group_name'
p55283
Nsa(dp55284
S'description'
p55285
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55286
sS'cpp_type'
p55287
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55288
sS'default'
p55289
g3
sS'name'
p55290
S'save_in'
p55291
sS'required'
p55292
I00
sS'group_name'
p55293
S'Advanced'
p55294
sa(dp55295
S'description'
p55296
S'The seed for the master random number generator\n'
p55297
sS'cpp_type'
p55298
S'unsigned int'
p55299
sS'default'
p55300
S'0'
p55301
sS'name'
p55302
S'seed'
p55303
sS'required'
p55304
I00
sS'group_name'
p55305
S'Advanced'
p55306
sa(dp55307
S'description'
p55308
g3
sS'cpp_type'
p55309
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55310
sS'default'
p55311
S'SplitCHWRes'
p55312
sS'name'
p55313
S'type'
p55314
sS'required'
p55315
I00
sS'group_name'
p55316
Nsa(dp55317
S'description'
p55318
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55319
sS'cpp_type'
p55320
S'bool'
p55321
sS'default'
p55322
S'0'
p55323
sS'name'
p55324
S'use_displaced_mesh'
p55325
sS'required'
p55326
I00
sS'group_name'
p55327
S'Advanced'
p55328
sa(dp55329
S'description'
p55330
S'The name of the variable that this Kernel operates on\n'
p55331
sS'cpp_type'
p55332
S'NonlinearVariableName'
p55333
sS'default'
p55334
g3
sS'name'
p55335
S'variable'
p55336
sS'required'
p55337
I01
sS'group_name'
p55338
NsasS'name'
p55339
S'/Kernels/SplitCHWRes'
p55340
sa(dp55341
S'description'
p55342
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a tensor (anisotropic) mobility\n'
p55343
sS'subblocks'
p55344
NsS'parameters'
p55345
(lp55346
(dp55347
S'description'
p55348
S'Vector of arguments of the mobility\n'
p55349
sS'cpp_type'
p55350
S'std::vector<VariableName>'
p55351
sS'default'
p55352
g3
sS'name'
p55353
S'args'
p55354
sS'required'
p55355
I00
sS'group_name'
p55356
Nsa(dp55357
S'description'
p55358
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55359
sS'cpp_type'
p55360
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55361
sS'default'
p55362
g3
sS'name'
p55363
S'block'
p55364
sS'required'
p55365
I00
sS'group_name'
p55366
Nsa(dp55367
S'description'
p55368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55369
sS'cpp_type'
p55370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55371
sS'default'
p55372
g3
sS'name'
p55373
S'control_tags'
p55374
sS'required'
p55375
I00
sS'group_name'
p55376
S'Advanced'
p55377
sa(dp55378
S'description'
p55379
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55380
sS'cpp_type'
p55381
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55382
sS'default'
p55383
g3
sS'name'
p55384
S'diag_save_in'
p55385
sS'required'
p55386
I00
sS'group_name'
p55387
S'Advanced'
p55388
sa(dp55389
S'description'
p55390
S'Whether or not this kernel will be used as an eigen kernel\n'
p55391
sS'cpp_type'
p55392
S'bool'
p55393
sS'default'
p55394
S'0'
p55395
sS'name'
p55396
S'eigen_kernel'
p55397
sS'required'
p55398
I00
sS'group_name'
p55399
Nsa(dp55400
S'description'
p55401
S'Set the enabled status of the MooseObject.\n'
p55402
sS'cpp_type'
p55403
S'bool'
p55404
sS'default'
p55405
S'1'
p55406
sS'name'
p55407
S'enable'
p55408
sS'required'
p55409
I00
sS'group_name'
p55410
S'Advanced'
p55411
sa(dp55412
S'description'
p55413
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55414
sS'cpp_type'
p55415
S'bool'
p55416
sS'default'
p55417
S'1'
p55418
sS'name'
p55419
S'implicit'
p55420
sS'required'
p55421
I00
sS'group_name'
p55422
S'Advanced'
p55423
sa(dp55424
S'description'
p55425
S'The mobility used with the kernel\n'
p55426
sS'cpp_type'
p55427
S'MaterialPropertyName'
p55428
sS'default'
p55429
S'mobtemp'
p55430
sS'name'
p55431
S'mob_name'
p55432
sS'required'
p55433
I00
sS'group_name'
p55434
Nsa(dp55435
S'description'
p55436
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55437
sS'cpp_type'
p55438
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55439
sS'default'
p55440
g3
sS'name'
p55441
S'save_in'
p55442
sS'required'
p55443
I00
sS'group_name'
p55444
S'Advanced'
p55445
sa(dp55446
S'description'
p55447
S'The seed for the master random number generator\n'
p55448
sS'cpp_type'
p55449
S'unsigned int'
p55450
sS'default'
p55451
S'0'
p55452
sS'name'
p55453
S'seed'
p55454
sS'required'
p55455
I00
sS'group_name'
p55456
S'Advanced'
p55457
sa(dp55458
S'description'
p55459
g3
sS'cpp_type'
p55460
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55461
sS'default'
p55462
S'SplitCHWResAniso'
p55463
sS'name'
p55464
S'type'
p55465
sS'required'
p55466
I00
sS'group_name'
p55467
Nsa(dp55468
S'description'
p55469
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55470
sS'cpp_type'
p55471
S'bool'
p55472
sS'default'
p55473
S'0'
p55474
sS'name'
p55475
S'use_displaced_mesh'
p55476
sS'required'
p55477
I00
sS'group_name'
p55478
S'Advanced'
p55479
sa(dp55480
S'description'
p55481
S'The name of the variable that this Kernel operates on\n'
p55482
sS'cpp_type'
p55483
S'NonlinearVariableName'
p55484
sS'default'
p55485
g3
sS'name'
p55486
S'variable'
p55487
sS'required'
p55488
I01
sS'group_name'
p55489
NsasS'name'
p55490
S'/Kernels/SplitCHWResAniso'
p55491
sa(dp55492
S'description'
p55493
S'Stress divergence kernel for phase-field fracture: Additionally computes off diagonal damage dependent Jacobian components\n'
p55494
sS'subblocks'
p55495
NsS'parameters'
p55496
(lp55497
(dp55498
S'description'
p55499
S'Material property base name\n'
p55500
sS'cpp_type'
p55501
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55502
sS'default'
p55503
g3
sS'name'
p55504
S'base_name'
p55505
sS'required'
p55506
I00
sS'group_name'
p55507
Nsa(dp55508
S'description'
p55509
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55510
sS'cpp_type'
p55511
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55512
sS'default'
p55513
g3
sS'name'
p55514
S'block'
p55515
sS'required'
p55516
I00
sS'group_name'
p55517
Nsa(dp55518
S'description'
p55519
S'Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n'
p55520
sS'cpp_type'
p55521
S'std::vector<VariableName>'
p55522
sS'default'
p55523
g3
sS'name'
p55524
S'c'
p55525
sS'required'
p55526
I00
sS'group_name'
p55527
Nsa(dp55528
S'description'
p55529
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p55530
sS'cpp_type'
p55531
S'unsigned int'
p55532
sS'default'
p55533
g3
sS'name'
p55534
S'component'
p55535
sS'required'
p55536
I01
sS'group_name'
p55537
Nsa(dp55538
S'description'
p55539
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55540
sS'cpp_type'
p55541
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55542
sS'default'
p55543
g3
sS'name'
p55544
S'control_tags'
p55545
sS'required'
p55546
I00
sS'group_name'
p55547
S'Advanced'
p55548
sa(dp55549
S'description'
p55550
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55551
sS'cpp_type'
p55552
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55553
sS'default'
p55554
g3
sS'name'
p55555
S'diag_save_in'
p55556
sS'required'
p55557
I00
sS'group_name'
p55558
S'Advanced'
p55559
sa(dp55560
S'description'
p55561
S'The string of displacements suitable for the problem statement\n'
p55562
sS'cpp_type'
p55563
S'std::vector<VariableName>'
p55564
sS'default'
p55565
g3
sS'name'
p55566
S'displacements'
p55567
sS'required'
p55568
I01
sS'group_name'
p55569
Nsa(dp55570
S'description'
p55571
S'Whether or not this kernel will be used as an eigen kernel\n'
p55572
sS'cpp_type'
p55573
S'bool'
p55574
sS'default'
p55575
S'0'
p55576
sS'name'
p55577
S'eigen_kernel'
p55578
sS'required'
p55579
I00
sS'group_name'
p55580
Nsa(dp55581
S'description'
p55582
S'Set the enabled status of the MooseObject.\n'
p55583
sS'cpp_type'
p55584
S'bool'
p55585
sS'default'
p55586
S'1'
p55587
sS'name'
p55588
S'enable'
p55589
sS'required'
p55590
I00
sS'group_name'
p55591
S'Advanced'
p55592
sa(dp55593
S'description'
p55594
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55595
sS'cpp_type'
p55596
S'bool'
p55597
sS'default'
p55598
S'1'
p55599
sS'name'
p55600
S'implicit'
p55601
sS'required'
p55602
I00
sS'group_name'
p55603
S'Advanced'
p55604
sa(dp55605
S'description'
p55606
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55607
sS'cpp_type'
p55608
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55609
sS'default'
p55610
g3
sS'name'
p55611
S'save_in'
p55612
sS'required'
p55613
I00
sS'group_name'
p55614
S'Advanced'
p55615
sa(dp55616
S'description'
p55617
S'The seed for the master random number generator\n'
p55618
sS'cpp_type'
p55619
S'unsigned int'
p55620
sS'default'
p55621
S'0'
p55622
sS'name'
p55623
S'seed'
p55624
sS'required'
p55625
I00
sS'group_name'
p55626
S'Advanced'
p55627
sa(dp55628
S'description'
p55629
S'The temperature\n'
p55630
sS'cpp_type'
p55631
S'std::vector<VariableName>'
p55632
sS'default'
p55633
g3
sS'name'
p55634
S'temp'
p55635
sS'required'
p55636
I00
sS'group_name'
p55637
Nsa(dp55638
S'description'
p55639
S'The temperature\n'
p55640
sS'cpp_type'
p55641
S'std::vector<VariableName>'
p55642
sS'default'
p55643
g3
sS'name'
p55644
S'temperature'
p55645
sS'required'
p55646
I00
sS'group_name'
p55647
Nsa(dp55648
S'description'
p55649
g3
sS'cpp_type'
p55650
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55651
sS'default'
p55652
S'StressDivergencePFFracTensors'
p55653
sS'name'
p55654
S'type'
p55655
sS'required'
p55656
I00
sS'group_name'
p55657
Nsa(dp55658
S'description'
p55659
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55660
sS'cpp_type'
p55661
S'bool'
p55662
sS'default'
p55663
S'0'
p55664
sS'name'
p55665
S'use_displaced_mesh'
p55666
sS'required'
p55667
I00
sS'group_name'
p55668
S'Advanced'
p55669
sa(dp55670
S'description'
p55671
S'Jacobian for corotational finite strain\n'
p55672
sS'cpp_type'
p55673
S'bool'
p55674
sS'default'
p55675
S'0'
p55676
sS'name'
p55677
S'use_finite_deform_jacobian'
p55678
sS'required'
p55679
I00
sS'group_name'
p55680
Nsa(dp55681
S'description'
p55682
S'The name of the variable that this Kernel operates on\n'
p55683
sS'cpp_type'
p55684
S'NonlinearVariableName'
p55685
sS'default'
p55686
g3
sS'name'
p55687
S'variable'
p55688
sS'required'
p55689
I01
sS'group_name'
p55690
Nsa(dp55691
S'description'
p55692
S'Set to false to turn off volumetric locking correction\n'
p55693
sS'cpp_type'
p55694
S'bool'
p55695
sS'default'
p55696
S'0'
p55697
sS'name'
p55698
S'volumetric_locking_correction'
p55699
sS'required'
p55700
I00
sS'group_name'
p55701
NsasS'name'
p55702
S'/Kernels/StressDivergencePFFracTensors'
p55703
sa(dp55704
S'description'
p55705
S'Calculate stress divergence for an spherically symmetric 1D problem in polar coordinates.\n'
p55706
sS'subblocks'
p55707
NsS'parameters'
p55708
(lp55709
(dp55710
S'description'
p55711
S'Material property base name\n'
p55712
sS'cpp_type'
p55713
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55714
sS'default'
p55715
g3
sS'name'
p55716
S'base_name'
p55717
sS'required'
p55718
I00
sS'group_name'
p55719
Nsa(dp55720
S'description'
p55721
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55722
sS'cpp_type'
p55723
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55724
sS'default'
p55725
g3
sS'name'
p55726
S'block'
p55727
sS'required'
p55728
I00
sS'group_name'
p55729
Nsa(dp55730
S'description'
p55731
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n'
p55732
sS'cpp_type'
p55733
S'unsigned int'
p55734
sS'default'
p55735
g3
sS'name'
p55736
S'component'
p55737
sS'required'
p55738
I01
sS'group_name'
p55739
Nsa(dp55740
S'description'
p55741
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55742
sS'cpp_type'
p55743
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55744
sS'default'
p55745
g3
sS'name'
p55746
S'control_tags'
p55747
sS'required'
p55748
I00
sS'group_name'
p55749
S'Advanced'
p55750
sa(dp55751
S'description'
p55752
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55753
sS'cpp_type'
p55754
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55755
sS'default'
p55756
g3
sS'name'
p55757
S'diag_save_in'
p55758
sS'required'
p55759
I00
sS'group_name'
p55760
S'Advanced'
p55761
sa(dp55762
S'description'
p55763
S'The string of displacements suitable for the problem statement\n'
p55764
sS'cpp_type'
p55765
S'std::vector<VariableName>'
p55766
sS'default'
p55767
g3
sS'name'
p55768
S'displacements'
p55769
sS'required'
p55770
I01
sS'group_name'
p55771
Nsa(dp55772
S'description'
p55773
S'Whether or not this kernel will be used as an eigen kernel\n'
p55774
sS'cpp_type'
p55775
S'bool'
p55776
sS'default'
p55777
S'0'
p55778
sS'name'
p55779
S'eigen_kernel'
p55780
sS'required'
p55781
I00
sS'group_name'
p55782
Nsa(dp55783
S'description'
p55784
S'Set the enabled status of the MooseObject.\n'
p55785
sS'cpp_type'
p55786
S'bool'
p55787
sS'default'
p55788
S'1'
p55789
sS'name'
p55790
S'enable'
p55791
sS'required'
p55792
I00
sS'group_name'
p55793
S'Advanced'
p55794
sa(dp55795
S'description'
p55796
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55797
sS'cpp_type'
p55798
S'bool'
p55799
sS'default'
p55800
S'1'
p55801
sS'name'
p55802
S'implicit'
p55803
sS'required'
p55804
I00
sS'group_name'
p55805
S'Advanced'
p55806
sa(dp55807
S'description'
p55808
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55809
sS'cpp_type'
p55810
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55811
sS'default'
p55812
g3
sS'name'
p55813
S'save_in'
p55814
sS'required'
p55815
I00
sS'group_name'
p55816
S'Advanced'
p55817
sa(dp55818
S'description'
p55819
S'The seed for the master random number generator\n'
p55820
sS'cpp_type'
p55821
S'unsigned int'
p55822
sS'default'
p55823
S'0'
p55824
sS'name'
p55825
S'seed'
p55826
sS'required'
p55827
I00
sS'group_name'
p55828
S'Advanced'
p55829
sa(dp55830
S'description'
p55831
S'The temperature\n'
p55832
sS'cpp_type'
p55833
S'std::vector<VariableName>'
p55834
sS'default'
p55835
g3
sS'name'
p55836
S'temp'
p55837
sS'required'
p55838
I00
sS'group_name'
p55839
Nsa(dp55840
S'description'
p55841
S'The temperature\n'
p55842
sS'cpp_type'
p55843
S'std::vector<VariableName>'
p55844
sS'default'
p55845
g3
sS'name'
p55846
S'temperature'
p55847
sS'required'
p55848
I00
sS'group_name'
p55849
Nsa(dp55850
S'description'
p55851
g3
sS'cpp_type'
p55852
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55853
sS'default'
p55854
S'StressDivergenceRSphericalTensors'
p55855
sS'name'
p55856
S'type'
p55857
sS'required'
p55858
I00
sS'group_name'
p55859
Nsa(dp55860
S'description'
p55861
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55862
sS'cpp_type'
p55863
S'bool'
p55864
sS'default'
p55865
S'1'
p55866
sS'name'
p55867
S'use_displaced_mesh'
p55868
sS'required'
p55869
I00
sS'group_name'
p55870
S'Advanced'
p55871
sa(dp55872
S'description'
p55873
S'Jacobian for corotational finite strain\n'
p55874
sS'cpp_type'
p55875
S'bool'
p55876
sS'default'
p55877
S'0'
p55878
sS'name'
p55879
S'use_finite_deform_jacobian'
p55880
sS'required'
p55881
I00
sS'group_name'
p55882
Nsa(dp55883
S'description'
p55884
S'The name of the variable that this Kernel operates on\n'
p55885
sS'cpp_type'
p55886
S'NonlinearVariableName'
p55887
sS'default'
p55888
g3
sS'name'
p55889
S'variable'
p55890
sS'required'
p55891
I01
sS'group_name'
p55892
Nsa(dp55893
S'description'
p55894
S'Set to false to turn off volumetric locking correction\n'
p55895
sS'cpp_type'
p55896
S'bool'
p55897
sS'default'
p55898
S'0'
p55899
sS'name'
p55900
S'volumetric_locking_correction'
p55901
sS'required'
p55902
I00
sS'group_name'
p55903
NsasS'name'
p55904
S'/Kernels/StressDivergenceRSphericalTensors'
p55905
sa(dp55906
S'description'
p55907
S'Calculate stress divergence for an axisymmetric problem in cylinderical coordinates.\n'
p55908
sS'subblocks'
p55909
NsS'parameters'
p55910
(lp55911
(dp55912
S'description'
p55913
S'Material property base name\n'
p55914
sS'cpp_type'
p55915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55916
sS'default'
p55917
g3
sS'name'
p55918
S'base_name'
p55919
sS'required'
p55920
I00
sS'group_name'
p55921
Nsa(dp55922
S'description'
p55923
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55924
sS'cpp_type'
p55925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55926
sS'default'
p55927
g3
sS'name'
p55928
S'block'
p55929
sS'required'
p55930
I00
sS'group_name'
p55931
Nsa(dp55932
S'description'
p55933
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n'
p55934
sS'cpp_type'
p55935
S'unsigned int'
p55936
sS'default'
p55937
g3
sS'name'
p55938
S'component'
p55939
sS'required'
p55940
I01
sS'group_name'
p55941
Nsa(dp55942
S'description'
p55943
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55944
sS'cpp_type'
p55945
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55946
sS'default'
p55947
g3
sS'name'
p55948
S'control_tags'
p55949
sS'required'
p55950
I00
sS'group_name'
p55951
S'Advanced'
p55952
sa(dp55953
S'description'
p55954
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55955
sS'cpp_type'
p55956
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55957
sS'default'
p55958
g3
sS'name'
p55959
S'diag_save_in'
p55960
sS'required'
p55961
I00
sS'group_name'
p55962
S'Advanced'
p55963
sa(dp55964
S'description'
p55965
S'The string of displacements suitable for the problem statement\n'
p55966
sS'cpp_type'
p55967
S'std::vector<VariableName>'
p55968
sS'default'
p55969
g3
sS'name'
p55970
S'displacements'
p55971
sS'required'
p55972
I01
sS'group_name'
p55973
Nsa(dp55974
S'description'
p55975
S'Whether or not this kernel will be used as an eigen kernel\n'
p55976
sS'cpp_type'
p55977
S'bool'
p55978
sS'default'
p55979
S'0'
p55980
sS'name'
p55981
S'eigen_kernel'
p55982
sS'required'
p55983
I00
sS'group_name'
p55984
Nsa(dp55985
S'description'
p55986
S'Set the enabled status of the MooseObject.\n'
p55987
sS'cpp_type'
p55988
S'bool'
p55989
sS'default'
p55990
S'1'
p55991
sS'name'
p55992
S'enable'
p55993
sS'required'
p55994
I00
sS'group_name'
p55995
S'Advanced'
p55996
sa(dp55997
S'description'
p55998
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55999
sS'cpp_type'
p56000
S'bool'
p56001
sS'default'
p56002
S'1'
p56003
sS'name'
p56004
S'implicit'
p56005
sS'required'
p56006
I00
sS'group_name'
p56007
S'Advanced'
p56008
sa(dp56009
S'description'
p56010
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56011
sS'cpp_type'
p56012
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56013
sS'default'
p56014
g3
sS'name'
p56015
S'save_in'
p56016
sS'required'
p56017
I00
sS'group_name'
p56018
S'Advanced'
p56019
sa(dp56020
S'description'
p56021
S'The seed for the master random number generator\n'
p56022
sS'cpp_type'
p56023
S'unsigned int'
p56024
sS'default'
p56025
S'0'
p56026
sS'name'
p56027
S'seed'
p56028
sS'required'
p56029
I00
sS'group_name'
p56030
S'Advanced'
p56031
sa(dp56032
S'description'
p56033
S'The temperature\n'
p56034
sS'cpp_type'
p56035
S'std::vector<VariableName>'
p56036
sS'default'
p56037
g3
sS'name'
p56038
S'temp'
p56039
sS'required'
p56040
I00
sS'group_name'
p56041
Nsa(dp56042
S'description'
p56043
S'The temperature\n'
p56044
sS'cpp_type'
p56045
S'std::vector<VariableName>'
p56046
sS'default'
p56047
g3
sS'name'
p56048
S'temperature'
p56049
sS'required'
p56050
I00
sS'group_name'
p56051
Nsa(dp56052
S'description'
p56053
g3
sS'cpp_type'
p56054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56055
sS'default'
p56056
S'StressDivergenceRZTensors'
p56057
sS'name'
p56058
S'type'
p56059
sS'required'
p56060
I00
sS'group_name'
p56061
Nsa(dp56062
S'description'
p56063
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56064
sS'cpp_type'
p56065
S'bool'
p56066
sS'default'
p56067
S'1'
p56068
sS'name'
p56069
S'use_displaced_mesh'
p56070
sS'required'
p56071
I00
sS'group_name'
p56072
S'Advanced'
p56073
sa(dp56074
S'description'
p56075
S'Jacobian for corotational finite strain\n'
p56076
sS'cpp_type'
p56077
S'bool'
p56078
sS'default'
p56079
S'0'
p56080
sS'name'
p56081
S'use_finite_deform_jacobian'
p56082
sS'required'
p56083
I00
sS'group_name'
p56084
Nsa(dp56085
S'description'
p56086
S'The name of the variable that this Kernel operates on\n'
p56087
sS'cpp_type'
p56088
S'NonlinearVariableName'
p56089
sS'default'
p56090
g3
sS'name'
p56091
S'variable'
p56092
sS'required'
p56093
I01
sS'group_name'
p56094
Nsa(dp56095
S'description'
p56096
S'Set to false to turn off volumetric locking correction\n'
p56097
sS'cpp_type'
p56098
S'bool'
p56099
sS'default'
p56100
S'0'
p56101
sS'name'
p56102
S'volumetric_locking_correction'
p56103
sS'required'
p56104
I00
sS'group_name'
p56105
NsasS'name'
p56106
S'/Kernels/StressDivergenceRZTensors'
p56107
sa(dp56108
S'description'
p56109
S'Stress divergence kernel for the Cartesian coordinate system\n'
p56110
sS'subblocks'
p56111
NsS'parameters'
p56112
(lp56113
(dp56114
S'description'
p56115
S'Material property base name\n'
p56116
sS'cpp_type'
p56117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56118
sS'default'
p56119
g3
sS'name'
p56120
S'base_name'
p56121
sS'required'
p56122
I00
sS'group_name'
p56123
Nsa(dp56124
S'description'
p56125
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56126
sS'cpp_type'
p56127
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56128
sS'default'
p56129
g3
sS'name'
p56130
S'block'
p56131
sS'required'
p56132
I00
sS'group_name'
p56133
Nsa(dp56134
S'description'
p56135
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p56136
sS'cpp_type'
p56137
S'unsigned int'
p56138
sS'default'
p56139
g3
sS'name'
p56140
S'component'
p56141
sS'required'
p56142
I01
sS'group_name'
p56143
Nsa(dp56144
S'description'
p56145
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56146
sS'cpp_type'
p56147
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56148
sS'default'
p56149
g3
sS'name'
p56150
S'control_tags'
p56151
sS'required'
p56152
I00
sS'group_name'
p56153
S'Advanced'
p56154
sa(dp56155
S'description'
p56156
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56157
sS'cpp_type'
p56158
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56159
sS'default'
p56160
g3
sS'name'
p56161
S'diag_save_in'
p56162
sS'required'
p56163
I00
sS'group_name'
p56164
S'Advanced'
p56165
sa(dp56166
S'description'
p56167
S'The string of displacements suitable for the problem statement\n'
p56168
sS'cpp_type'
p56169
S'std::vector<VariableName>'
p56170
sS'default'
p56171
g3
sS'name'
p56172
S'displacements'
p56173
sS'required'
p56174
I01
sS'group_name'
p56175
Nsa(dp56176
S'description'
p56177
S'Whether or not this kernel will be used as an eigen kernel\n'
p56178
sS'cpp_type'
p56179
S'bool'
p56180
sS'default'
p56181
S'0'
p56182
sS'name'
p56183
S'eigen_kernel'
p56184
sS'required'
p56185
I00
sS'group_name'
p56186
Nsa(dp56187
S'description'
p56188
S'Set the enabled status of the MooseObject.\n'
p56189
sS'cpp_type'
p56190
S'bool'
p56191
sS'default'
p56192
S'1'
p56193
sS'name'
p56194
S'enable'
p56195
sS'required'
p56196
I00
sS'group_name'
p56197
S'Advanced'
p56198
sa(dp56199
S'description'
p56200
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56201
sS'cpp_type'
p56202
S'bool'
p56203
sS'default'
p56204
S'1'
p56205
sS'name'
p56206
S'implicit'
p56207
sS'required'
p56208
I00
sS'group_name'
p56209
S'Advanced'
p56210
sa(dp56211
S'description'
p56212
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56213
sS'cpp_type'
p56214
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56215
sS'default'
p56216
g3
sS'name'
p56217
S'save_in'
p56218
sS'required'
p56219
I00
sS'group_name'
p56220
S'Advanced'
p56221
sa(dp56222
S'description'
p56223
S'The seed for the master random number generator\n'
p56224
sS'cpp_type'
p56225
S'unsigned int'
p56226
sS'default'
p56227
S'0'
p56228
sS'name'
p56229
S'seed'
p56230
sS'required'
p56231
I00
sS'group_name'
p56232
S'Advanced'
p56233
sa(dp56234
S'description'
p56235
S'The temperature\n'
p56236
sS'cpp_type'
p56237
S'std::vector<VariableName>'
p56238
sS'default'
p56239
g3
sS'name'
p56240
S'temp'
p56241
sS'required'
p56242
I00
sS'group_name'
p56243
Nsa(dp56244
S'description'
p56245
S'The temperature\n'
p56246
sS'cpp_type'
p56247
S'std::vector<VariableName>'
p56248
sS'default'
p56249
g3
sS'name'
p56250
S'temperature'
p56251
sS'required'
p56252
I00
sS'group_name'
p56253
Nsa(dp56254
S'description'
p56255
g3
sS'cpp_type'
p56256
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56257
sS'default'
p56258
S'StressDivergenceTensors'
p56259
sS'name'
p56260
S'type'
p56261
sS'required'
p56262
I00
sS'group_name'
p56263
Nsa(dp56264
S'description'
p56265
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56266
sS'cpp_type'
p56267
S'bool'
p56268
sS'default'
p56269
S'0'
p56270
sS'name'
p56271
S'use_displaced_mesh'
p56272
sS'required'
p56273
I00
sS'group_name'
p56274
S'Advanced'
p56275
sa(dp56276
S'description'
p56277
S'Jacobian for corotational finite strain\n'
p56278
sS'cpp_type'
p56279
S'bool'
p56280
sS'default'
p56281
S'0'
p56282
sS'name'
p56283
S'use_finite_deform_jacobian'
p56284
sS'required'
p56285
I00
sS'group_name'
p56286
Nsa(dp56287
S'description'
p56288
S'The name of the variable that this Kernel operates on\n'
p56289
sS'cpp_type'
p56290
S'NonlinearVariableName'
p56291
sS'default'
p56292
g3
sS'name'
p56293
S'variable'
p56294
sS'required'
p56295
I01
sS'group_name'
p56296
Nsa(dp56297
S'description'
p56298
S'Set to false to turn off volumetric locking correction\n'
p56299
sS'cpp_type'
p56300
S'bool'
p56301
sS'default'
p56302
S'0'
p56303
sS'name'
p56304
S'volumetric_locking_correction'
p56305
sS'required'
p56306
I00
sS'group_name'
p56307
NsasS'name'
p56308
S'/Kernels/StressDivergenceTensors'
p56309
sa(dp56310
S'description'
p56311
S'Kernel for truss element\n'
p56312
sS'subblocks'
p56313
NsS'parameters'
p56314
(lp56315
(dp56316
S'description'
p56317
S'Cross-sectional area of truss element\n'
p56318
sS'cpp_type'
p56319
S'std::vector<VariableName>'
p56320
sS'default'
p56321
g3
sS'name'
p56322
S'area'
p56323
sS'required'
p56324
I00
sS'group_name'
p56325
Nsa(dp56326
S'description'
p56327
S'Material property base name\n'
p56328
sS'cpp_type'
p56329
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56330
sS'default'
p56331
g3
sS'name'
p56332
S'base_name'
p56333
sS'required'
p56334
I00
sS'group_name'
p56335
Nsa(dp56336
S'description'
p56337
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56338
sS'cpp_type'
p56339
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56340
sS'default'
p56341
g3
sS'name'
p56342
S'block'
p56343
sS'required'
p56344
I00
sS'group_name'
p56345
Nsa(dp56346
S'description'
p56347
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p56348
sS'cpp_type'
p56349
S'unsigned int'
p56350
sS'default'
p56351
g3
sS'name'
p56352
S'component'
p56353
sS'required'
p56354
I01
sS'group_name'
p56355
Nsa(dp56356
S'description'
p56357
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56358
sS'cpp_type'
p56359
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56360
sS'default'
p56361
g3
sS'name'
p56362
S'control_tags'
p56363
sS'required'
p56364
I00
sS'group_name'
p56365
S'Advanced'
p56366
sa(dp56367
S'description'
p56368
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56369
sS'cpp_type'
p56370
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56371
sS'default'
p56372
g3
sS'name'
p56373
S'diag_save_in'
p56374
sS'required'
p56375
I00
sS'group_name'
p56376
S'Advanced'
p56377
sa(dp56378
S'description'
p56379
S'The string of displacements suitable for the problem statement\n'
p56380
sS'cpp_type'
p56381
S'std::vector<VariableName>'
p56382
sS'default'
p56383
g3
sS'name'
p56384
S'displacements'
p56385
sS'required'
p56386
I00
sS'group_name'
p56387
Nsa(dp56388
S'description'
p56389
S'Whether or not this kernel will be used as an eigen kernel\n'
p56390
sS'cpp_type'
p56391
S'bool'
p56392
sS'default'
p56393
S'0'
p56394
sS'name'
p56395
S'eigen_kernel'
p56396
sS'required'
p56397
I00
sS'group_name'
p56398
Nsa(dp56399
S'description'
p56400
S'Set the enabled status of the MooseObject.\n'
p56401
sS'cpp_type'
p56402
S'bool'
p56403
sS'default'
p56404
S'1'
p56405
sS'name'
p56406
S'enable'
p56407
sS'required'
p56408
I00
sS'group_name'
p56409
S'Advanced'
p56410
sa(dp56411
S'description'
p56412
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56413
sS'cpp_type'
p56414
S'bool'
p56415
sS'default'
p56416
S'1'
p56417
sS'name'
p56418
S'implicit'
p56419
sS'required'
p56420
I00
sS'group_name'
p56421
S'Advanced'
p56422
sa(dp56423
S'description'
p56424
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56425
sS'cpp_type'
p56426
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56427
sS'default'
p56428
g3
sS'name'
p56429
S'save_in'
p56430
sS'required'
p56431
I00
sS'group_name'
p56432
S'Advanced'
p56433
sa(dp56434
S'description'
p56435
S'The seed for the master random number generator\n'
p56436
sS'cpp_type'
p56437
S'unsigned int'
p56438
sS'default'
p56439
S'0'
p56440
sS'name'
p56441
S'seed'
p56442
sS'required'
p56443
I00
sS'group_name'
p56444
S'Advanced'
p56445
sa(dp56446
S'description'
p56447
S'The temperature\n'
p56448
sS'cpp_type'
p56449
S'std::vector<VariableName>'
p56450
sS'default'
p56451
g3
sS'name'
p56452
S'temp'
p56453
sS'required'
p56454
I00
sS'group_name'
p56455
Nsa(dp56456
S'description'
p56457
S'The temperature\n'
p56458
sS'cpp_type'
p56459
S'std::vector<VariableName>'
p56460
sS'default'
p56461
g3
sS'name'
p56462
S'temperature'
p56463
sS'required'
p56464
I00
sS'group_name'
p56465
Nsa(dp56466
S'description'
p56467
g3
sS'cpp_type'
p56468
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56469
sS'default'
p56470
S'StressDivergenceTensorsTruss'
p56471
sS'name'
p56472
S'type'
p56473
sS'required'
p56474
I00
sS'group_name'
p56475
Nsa(dp56476
S'description'
p56477
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56478
sS'cpp_type'
p56479
S'bool'
p56480
sS'default'
p56481
S'1'
p56482
sS'name'
p56483
S'use_displaced_mesh'
p56484
sS'required'
p56485
I00
sS'group_name'
p56486
S'Advanced'
p56487
sa(dp56488
S'description'
p56489
S'The name of the variable that this Kernel operates on\n'
p56490
sS'cpp_type'
p56491
S'NonlinearVariableName'
p56492
sS'default'
p56493
g3
sS'name'
p56494
S'variable'
p56495
sS'required'
p56496
I01
sS'group_name'
p56497
NsasS'name'
p56498
S'/Kernels/StressDivergenceTensorsTruss'
p56499
sa(dp56500
S'description'
p56501
S'A modified time derivative Kernel that multiply the time derivative of a variable by a generalized susceptibility\n'
p56502
sS'subblocks'
p56503
NsS'parameters'
p56504
(lp56505
(dp56506
S'description'
p56507
S'Vector of arguments of the susceptibility\n'
p56508
sS'cpp_type'
p56509
S'std::vector<VariableName>'
p56510
sS'default'
p56511
g3
sS'name'
p56512
S'args'
p56513
sS'required'
p56514
I00
sS'group_name'
p56515
Nsa(dp56516
S'description'
p56517
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56518
sS'cpp_type'
p56519
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56520
sS'default'
p56521
g3
sS'name'
p56522
S'block'
p56523
sS'required'
p56524
I00
sS'group_name'
p56525
Nsa(dp56526
S'description'
p56527
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56528
sS'cpp_type'
p56529
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56530
sS'default'
p56531
g3
sS'name'
p56532
S'control_tags'
p56533
sS'required'
p56534
I00
sS'group_name'
p56535
S'Advanced'
p56536
sa(dp56537
S'description'
p56538
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56539
sS'cpp_type'
p56540
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56541
sS'default'
p56542
g3
sS'name'
p56543
S'diag_save_in'
p56544
sS'required'
p56545
I00
sS'group_name'
p56546
S'Advanced'
p56547
sa(dp56548
S'description'
p56549
S'Whether or not this kernel will be used as an eigen kernel\n'
p56550
sS'cpp_type'
p56551
S'bool'
p56552
sS'default'
p56553
S'0'
p56554
sS'name'
p56555
S'eigen_kernel'
p56556
sS'required'
p56557
I00
sS'group_name'
p56558
Nsa(dp56559
S'description'
p56560
S'Set the enabled status of the MooseObject.\n'
p56561
sS'cpp_type'
p56562
S'bool'
p56563
sS'default'
p56564
S'1'
p56565
sS'name'
p56566
S'enable'
p56567
sS'required'
p56568
I00
sS'group_name'
p56569
S'Advanced'
p56570
sa(dp56571
S'description'
p56572
S'Base name of the susceptibility function F defined in a DerivativeParsedMaterial\n'
p56573
sS'cpp_type'
p56574
S'MaterialPropertyName'
p56575
sS'default'
p56576
g3
sS'name'
p56577
S'f_name'
p56578
sS'required'
p56579
I01
sS'group_name'
p56580
Nsa(dp56581
S'description'
p56582
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56583
sS'cpp_type'
p56584
S'bool'
p56585
sS'default'
p56586
S'1'
p56587
sS'name'
p56588
S'implicit'
p56589
sS'required'
p56590
I00
sS'group_name'
p56591
S'Advanced'
p56592
sa(dp56593
S'description'
p56594
S'True for mass matrix lumping, false otherwise\n'
p56595
sS'cpp_type'
p56596
S'bool'
p56597
sS'default'
p56598
S'0'
p56599
sS'name'
p56600
S'lumping'
p56601
sS'required'
p56602
I00
sS'group_name'
p56603
Nsa(dp56604
S'description'
p56605
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56606
sS'cpp_type'
p56607
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56608
sS'default'
p56609
g3
sS'name'
p56610
S'save_in'
p56611
sS'required'
p56612
I00
sS'group_name'
p56613
S'Advanced'
p56614
sa(dp56615
S'description'
p56616
S'The seed for the master random number generator\n'
p56617
sS'cpp_type'
p56618
S'unsigned int'
p56619
sS'default'
p56620
S'0'
p56621
sS'name'
p56622
S'seed'
p56623
sS'required'
p56624
I00
sS'group_name'
p56625
S'Advanced'
p56626
sa(dp56627
S'description'
p56628
g3
sS'cpp_type'
p56629
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56630
sS'default'
p56631
S'SusceptibilityTimeDerivative'
p56632
sS'name'
p56633
S'type'
p56634
sS'required'
p56635
I00
sS'group_name'
p56636
Nsa(dp56637
S'description'
p56638
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56639
sS'cpp_type'
p56640
S'bool'
p56641
sS'default'
p56642
S'0'
p56643
sS'name'
p56644
S'use_displaced_mesh'
p56645
sS'required'
p56646
I00
sS'group_name'
p56647
S'Advanced'
p56648
sa(dp56649
S'description'
p56650
S'The name of the variable that this Kernel operates on\n'
p56651
sS'cpp_type'
p56652
S'NonlinearVariableName'
p56653
sS'default'
p56654
g3
sS'name'
p56655
S'variable'
p56656
sS'required'
p56657
I01
sS'group_name'
p56658
NsasS'name'
p56659
S'/Kernels/SusceptibilityTimeDerivative'
p56660
sa(dp56661
S'description'
p56662
S'Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on a non-conserved order parameter eta_i.\n'
p56663
sS'subblocks'
p56664
NsS'parameters'
p56665
(lp56666
(dp56667
S'description'
p56668
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56669
sS'cpp_type'
p56670
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56671
sS'default'
p56672
g3
sS'name'
p56673
S'block'
p56674
sS'required'
p56675
I00
sS'group_name'
p56676
Nsa(dp56677
S'description'
p56678
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56679
sS'cpp_type'
p56680
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56681
sS'default'
p56682
g3
sS'name'
p56683
S'control_tags'
p56684
sS'required'
p56685
I00
sS'group_name'
p56686
S'Advanced'
p56687
sa(dp56688
S'description'
p56689
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56690
sS'cpp_type'
p56691
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56692
sS'default'
p56693
g3
sS'name'
p56694
S'diag_save_in'
p56695
sS'required'
p56696
I00
sS'group_name'
p56697
S'Advanced'
p56698
sa(dp56699
S'description'
p56700
S'Whether or not this kernel will be used as an eigen kernel\n'
p56701
sS'cpp_type'
p56702
S'bool'
p56703
sS'default'
p56704
S'0'
p56705
sS'name'
p56706
S'eigen_kernel'
p56707
sS'required'
p56708
I00
sS'group_name'
p56709
Nsa(dp56710
S'description'
p56711
S'Set the enabled status of the MooseObject.\n'
p56712
sS'cpp_type'
p56713
S'bool'
p56714
sS'default'
p56715
S'1'
p56716
sS'name'
p56717
S'enable'
p56718
sS'required'
p56719
I00
sS'group_name'
p56720
S'Advanced'
p56721
sa(dp56722
S'description'
p56723
S'Switching Function Materials that provides h(eta_i)\n'
p56724
sS'cpp_type'
p56725
S'MaterialPropertyName'
p56726
sS'default'
p56727
g3
sS'name'
p56728
S'h_name'
p56729
sS'required'
p56730
I00
sS'group_name'
p56731
Nsa(dp56732
S'description'
p56733
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56734
sS'cpp_type'
p56735
S'bool'
p56736
sS'default'
p56737
S'1'
p56738
sS'name'
p56739
S'implicit'
p56740
sS'required'
p56741
I00
sS'group_name'
p56742
S'Advanced'
p56743
sa(dp56744
S'description'
p56745
S'Lagrange multiplier\n'
p56746
sS'cpp_type'
p56747
S'std::vector<VariableName>'
p56748
sS'default'
p56749
g3
sS'name'
p56750
S'lambda'
p56751
sS'required'
p56752
I01
sS'group_name'
p56753
Nsa(dp56754
S'description'
p56755
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56756
sS'cpp_type'
p56757
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56758
sS'default'
p56759
g3
sS'name'
p56760
S'save_in'
p56761
sS'required'
p56762
I00
sS'group_name'
p56763
S'Advanced'
p56764
sa(dp56765
S'description'
p56766
S'The seed for the master random number generator\n'
p56767
sS'cpp_type'
p56768
S'unsigned int'
p56769
sS'default'
p56770
S'0'
p56771
sS'name'
p56772
S'seed'
p56773
sS'required'
p56774
I00
sS'group_name'
p56775
S'Advanced'
p56776
sa(dp56777
S'description'
p56778
g3
sS'cpp_type'
p56779
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56780
sS'default'
p56781
S'SwitchingFunctionConstraintEta'
p56782
sS'name'
p56783
S'type'
p56784
sS'required'
p56785
I00
sS'group_name'
p56786
Nsa(dp56787
S'description'
p56788
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56789
sS'cpp_type'
p56790
S'bool'
p56791
sS'default'
p56792
S'0'
p56793
sS'name'
p56794
S'use_displaced_mesh'
p56795
sS'required'
p56796
I00
sS'group_name'
p56797
S'Advanced'
p56798
sa(dp56799
S'description'
p56800
S'The name of the variable that this Kernel operates on\n'
p56801
sS'cpp_type'
p56802
S'NonlinearVariableName'
p56803
sS'default'
p56804
g3
sS'name'
p56805
S'variable'
p56806
sS'required'
p56807
I01
sS'group_name'
p56808
NsasS'name'
p56809
S'/Kernels/SwitchingFunctionConstraintEta'
p56810
sa(dp56811
S'description'
p56812
S'Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on the lagrange multiplier variable.\n'
p56813
sS'subblocks'
p56814
NsS'parameters'
p56815
(lp56816
(dp56817
S'description'
p56818
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56819
sS'cpp_type'
p56820
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56821
sS'default'
p56822
g3
sS'name'
p56823
S'block'
p56824
sS'required'
p56825
I00
sS'group_name'
p56826
Nsa(dp56827
S'description'
p56828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56829
sS'cpp_type'
p56830
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56831
sS'default'
p56832
g3
sS'name'
p56833
S'control_tags'
p56834
sS'required'
p56835
I00
sS'group_name'
p56836
S'Advanced'
p56837
sa(dp56838
S'description'
p56839
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56840
sS'cpp_type'
p56841
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56842
sS'default'
p56843
g3
sS'name'
p56844
S'diag_save_in'
p56845
sS'required'
p56846
I00
sS'group_name'
p56847
S'Advanced'
p56848
sa(dp56849
S'description'
p56850
S'Whether or not this kernel will be used as an eigen kernel\n'
p56851
sS'cpp_type'
p56852
S'bool'
p56853
sS'default'
p56854
S'0'
p56855
sS'name'
p56856
S'eigen_kernel'
p56857
sS'required'
p56858
I00
sS'group_name'
p56859
Nsa(dp56860
S'description'
p56861
S'Set the enabled status of the MooseObject.\n'
p56862
sS'cpp_type'
p56863
S'bool'
p56864
sS'default'
p56865
S'1'
p56866
sS'name'
p56867
S'enable'
p56868
sS'required'
p56869
I00
sS'group_name'
p56870
S'Advanced'
p56871
sa(dp56872
S'description'
p56873
S'Shift factor to avoid a zero pivot\n'
p56874
sS'cpp_type'
p56875
S'double'
p56876
sS'default'
p56877
S'1e-09'
p56878
sS'name'
p56879
S'epsilon'
p56880
sS'required'
p56881
I00
sS'group_name'
p56882
Nsa(dp56883
S'description'
p56884
S'eta_i order parameters, one for each h\n'
p56885
sS'cpp_type'
p56886
S'std::vector<VariableName>'
p56887
sS'default'
p56888
g3
sS'name'
p56889
S'etas'
p56890
sS'required'
p56891
I01
sS'group_name'
p56892
Nsa(dp56893
S'description'
p56894
S'Switching Function Materials that provide h(eta_i)\n'
p56895
sS'cpp_type'
p56896
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p56897
sS'default'
p56898
g3
sS'name'
p56899
S'h_names'
p56900
sS'required'
p56901
I00
sS'group_name'
p56902
Nsa(dp56903
S'description'
p56904
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56905
sS'cpp_type'
p56906
S'bool'
p56907
sS'default'
p56908
S'1'
p56909
sS'name'
p56910
S'implicit'
p56911
sS'required'
p56912
I00
sS'group_name'
p56913
S'Advanced'
p56914
sa(dp56915
S'description'
p56916
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56917
sS'cpp_type'
p56918
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56919
sS'default'
p56920
g3
sS'name'
p56921
S'save_in'
p56922
sS'required'
p56923
I00
sS'group_name'
p56924
S'Advanced'
p56925
sa(dp56926
S'description'
p56927
S'The seed for the master random number generator\n'
p56928
sS'cpp_type'
p56929
S'unsigned int'
p56930
sS'default'
p56931
S'0'
p56932
sS'name'
p56933
S'seed'
p56934
sS'required'
p56935
I00
sS'group_name'
p56936
S'Advanced'
p56937
sa(dp56938
S'description'
p56939
g3
sS'cpp_type'
p56940
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56941
sS'default'
p56942
S'SwitchingFunctionConstraintLagrange'
p56943
sS'name'
p56944
S'type'
p56945
sS'required'
p56946
I00
sS'group_name'
p56947
Nsa(dp56948
S'description'
p56949
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56950
sS'cpp_type'
p56951
S'bool'
p56952
sS'default'
p56953
S'0'
p56954
sS'name'
p56955
S'use_displaced_mesh'
p56956
sS'required'
p56957
I00
sS'group_name'
p56958
S'Advanced'
p56959
sa(dp56960
S'description'
p56961
S'The name of the variable that this Kernel operates on\n'
p56962
sS'cpp_type'
p56963
S'NonlinearVariableName'
p56964
sS'default'
p56965
g3
sS'name'
p56966
S'variable'
p56967
sS'required'
p56968
I01
sS'group_name'
p56969
NsasS'name'
p56970
S'/Kernels/SwitchingFunctionConstraintLagrange'
p56971
sa(dp56972
S'description'
p56973
S'Penalty kernel to constrain the sum of all switching functions in a multiphase system.\n'
p56974
sS'subblocks'
p56975
NsS'parameters'
p56976
(lp56977
(dp56978
S'description'
p56979
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56980
sS'cpp_type'
p56981
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56982
sS'default'
p56983
g3
sS'name'
p56984
S'block'
p56985
sS'required'
p56986
I00
sS'group_name'
p56987
Nsa(dp56988
S'description'
p56989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56990
sS'cpp_type'
p56991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56992
sS'default'
p56993
g3
sS'name'
p56994
S'control_tags'
p56995
sS'required'
p56996
I00
sS'group_name'
p56997
S'Advanced'
p56998
sa(dp56999
S'description'
p57000
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57001
sS'cpp_type'
p57002
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57003
sS'default'
p57004
g3
sS'name'
p57005
S'diag_save_in'
p57006
sS'required'
p57007
I00
sS'group_name'
p57008
S'Advanced'
p57009
sa(dp57010
S'description'
p57011
S'Whether or not this kernel will be used as an eigen kernel\n'
p57012
sS'cpp_type'
p57013
S'bool'
p57014
sS'default'
p57015
S'0'
p57016
sS'name'
p57017
S'eigen_kernel'
p57018
sS'required'
p57019
I00
sS'group_name'
p57020
Nsa(dp57021
S'description'
p57022
S'Set the enabled status of the MooseObject.\n'
p57023
sS'cpp_type'
p57024
S'bool'
p57025
sS'default'
p57026
S'1'
p57027
sS'name'
p57028
S'enable'
p57029
sS'required'
p57030
I00
sS'group_name'
p57031
S'Advanced'
p57032
sa(dp57033
S'description'
p57034
S'eta_i order parameters, one for each h\n'
p57035
sS'cpp_type'
p57036
S'std::vector<VariableName>'
p57037
sS'default'
p57038
g3
sS'name'
p57039
S'etas'
p57040
sS'required'
p57041
I01
sS'group_name'
p57042
Nsa(dp57043
S'description'
p57044
S'Switching Function Materials that provide h(eta_i)\n'
p57045
sS'cpp_type'
p57046
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p57047
sS'default'
p57048
g3
sS'name'
p57049
S'h_names'
p57050
sS'required'
p57051
I00
sS'group_name'
p57052
Nsa(dp57053
S'description'
p57054
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57055
sS'cpp_type'
p57056
S'bool'
p57057
sS'default'
p57058
S'1'
p57059
sS'name'
p57060
S'implicit'
p57061
sS'required'
p57062
I00
sS'group_name'
p57063
S'Advanced'
p57064
sa(dp57065
S'description'
p57066
S'Penalty scaling factor\n'
p57067
sS'cpp_type'
p57068
S'double'
p57069
sS'default'
p57070
S'1'
p57071
sS'name'
p57072
S'penalty'
p57073
sS'required'
p57074
I00
sS'group_name'
p57075
Nsa(dp57076
S'description'
p57077
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57078
sS'cpp_type'
p57079
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57080
sS'default'
p57081
g3
sS'name'
p57082
S'save_in'
p57083
sS'required'
p57084
I00
sS'group_name'
p57085
S'Advanced'
p57086
sa(dp57087
S'description'
p57088
S'The seed for the master random number generator\n'
p57089
sS'cpp_type'
p57090
S'unsigned int'
p57091
sS'default'
p57092
S'0'
p57093
sS'name'
p57094
S'seed'
p57095
sS'required'
p57096
I00
sS'group_name'
p57097
S'Advanced'
p57098
sa(dp57099
S'description'
p57100
g3
sS'cpp_type'
p57101
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57102
sS'default'
p57103
S'SwitchingFunctionPenalty'
p57104
sS'name'
p57105
S'type'
p57106
sS'required'
p57107
I00
sS'group_name'
p57108
Nsa(dp57109
S'description'
p57110
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57111
sS'cpp_type'
p57112
S'bool'
p57113
sS'default'
p57114
S'0'
p57115
sS'name'
p57116
S'use_displaced_mesh'
p57117
sS'required'
p57118
I00
sS'group_name'
p57119
S'Advanced'
p57120
sa(dp57121
S'description'
p57122
S'The name of the variable that this Kernel operates on\n'
p57123
sS'cpp_type'
p57124
S'NonlinearVariableName'
p57125
sS'default'
p57126
g3
sS'name'
p57127
S'variable'
p57128
sS'required'
p57129
I01
sS'group_name'
p57130
NsasS'name'
p57131
S'/Kernels/SwitchingFunctionPenalty'
p57132
sa(dp57133
S'description'
p57134
g3
sS'subblocks'
p57135
NsS'parameters'
p57136
(lp57137
(dp57138
S'description'
p57139
S'Add the displacement variables\n'
p57140
sS'cpp_type'
p57141
S'bool'
p57142
sS'default'
p57143
S'0'
p57144
sS'name'
p57145
S'add_variables'
p57146
sS'required'
p57147
I00
sS'group_name'
p57148
Nsa(dp57149
S'name'
p57150
S'additional_generate_output'
p57151
sS'cpp_type'
p57152
S'MultiMooseEnum'
p57153
sS'default'
p57154
g3
sS'description'
p57155
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p57156
sS'required'
p57157
I00
sS'options'
p57158
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p57159
sS'group_name'
p57160
S'Output'
p57161
sa(dp57162
S'description'
p57163
S'Material property base name\n'
p57164
sS'cpp_type'
p57165
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57166
sS'default'
p57167
g3
sS'name'
p57168
S'base_name'
p57169
sS'required'
p57170
I00
sS'group_name'
p57171
Nsa(dp57172
S'description'
p57173
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p57174
sS'cpp_type'
p57175
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57176
sS'default'
p57177
g3
sS'name'
p57178
S'block'
p57179
sS'required'
p57180
I00
sS'group_name'
p57181
S'Advanced'
p57182
sa(dp57183
S'name'
p57184
S'decomposition_method'
p57185
sS'cpp_type'
p57186
S'MooseEnum'
p57187
sS'default'
p57188
S'TaylorExpansion'
p57189
sS'description'
p57190
S'Methods to calculate the finite strain and rotation increments\n'
p57191
sS'required'
p57192
I00
sS'options'
p57193
S'TaylorExpansion EigenSolution'
p57194
sS'group_name'
p57195
Nsa(dp57196
S'description'
p57197
S'The displacement diagonal preconditioner terms\n'
p57198
sS'cpp_type'
p57199
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57200
sS'default'
p57201
g3
sS'name'
p57202
S'diag_save_in'
p57203
sS'required'
p57204
I00
sS'group_name'
p57205
S'Advanced'
p57206
sa(dp57207
S'description'
p57208
S'The nonlinear displacement variables for the problem\n'
p57209
sS'cpp_type'
p57210
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p57211
sS'default'
p57212
g3
sS'name'
p57213
S'displacements'
p57214
sS'required'
p57215
I01
sS'group_name'
p57216
Nsa(dp57217
S'description'
p57218
S'List of eigenstrains to be applied in this strain calculation\n'
p57219
sS'cpp_type'
p57220
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p57221
sS'default'
p57222
g3
sS'name'
p57223
S'eigenstrain_names'
p57224
sS'required'
p57225
I00
sS'group_name'
p57226
Nsa(dp57227
S'name'
p57228
S'generate_output'
p57229
sS'cpp_type'
p57230
S'MultiMooseEnum'
p57231
sS'default'
p57232
g3
sS'description'
p57233
S'Add scalar quantity output for stress and/or strain\n'
p57234
sS'required'
p57235
I00
sS'options'
p57236
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p57237
sS'group_name'
p57238
S'Output'
p57239
sa(dp57240
S'description'
p57241
S'Use incremental or total strain\n'
p57242
sS'cpp_type'
p57243
S'bool'
p57244
sS'default'
p57245
g3
sS'name'
p57246
S'incremental'
p57247
sS'required'
p57248
I00
sS'group_name'
p57249
Nsa(dp57250
S'description'
p57251
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p57252
sS'cpp_type'
p57253
S'FunctionName'
p57254
sS'default'
p57255
S'0'
p57256
sS'name'
p57257
S'out_of_plane_pressure'
p57258
sS'required'
p57259
I00
sS'group_name'
p57260
S'Out-of-plane stress/strain'
p57261
sa(dp57262
S'name'
p57263
S'planar_formulation'
p57264
sS'cpp_type'
p57265
S'MooseEnum'
p57266
sS'default'
p57267
S'NONE'
p57268
sS'description'
p57269
S'Out-of-plane stress/strain formulation\n'
p57270
sS'required'
p57271
I00
sS'options'
p57272
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p57273
sS'group_name'
p57274
S'Out-of-plane stress/strain'
p57275
sa(dp57276
S'description'
p57277
S'Scale factor applied to prescribed pressure\n'
p57278
sS'cpp_type'
p57279
S'double'
p57280
sS'default'
p57281
S'1'
p57282
sS'name'
p57283
S'pressure_factor'
p57284
sS'required'
p57285
I00
sS'group_name'
p57286
S'Out-of-plane stress/strain'
p57287
sa(dp57288
S'description'
p57289
S'The displacement residuals\n'
p57290
sS'cpp_type'
p57291
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57292
sS'default'
p57293
g3
sS'name'
p57294
S'save_in'
p57295
sS'required'
p57296
I00
sS'group_name'
p57297
S'Advanced'
p57298
sa(dp57299
S'description'
p57300
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p57301
sS'cpp_type'
p57302
S'NonlinearVariableName'
p57303
sS'default'
p57304
g3
sS'name'
p57305
S'scalar_out_of_plane_strain'
p57306
sS'required'
p57307
I00
sS'group_name'
p57308
S'Out-of-plane stress/strain'
p57309
sa(dp57310
S'name'
p57311
S'strain'
p57312
sS'cpp_type'
p57313
S'MooseEnum'
p57314
sS'default'
p57315
S'SMALL'
p57316
sS'description'
p57317
S'Strain formulation\n'
p57318
sS'required'
p57319
I00
sS'options'
p57320
S'SMALL FINITE'
p57321
sS'group_name'
p57322
Nsa(dp57323
S'description'
p57324
S'The temperature\n'
p57325
sS'cpp_type'
p57326
S'NonlinearVariableName'
p57327
sS'default'
p57328
g3
sS'name'
p57329
S'temp'
p57330
sS'required'
p57331
I00
sS'group_name'
p57332
Nsa(dp57333
S'description'
p57334
S'The temperature\n'
p57335
sS'cpp_type'
p57336
S'NonlinearVariableName'
p57337
sS'default'
p57338
g3
sS'name'
p57339
S'temperature'
p57340
sS'required'
p57341
I00
sS'group_name'
p57342
Nsa(dp57343
S'description'
p57344
S'Whether to use displaced mesh in the kernels\n'
p57345
sS'cpp_type'
p57346
S'bool'
p57347
sS'default'
p57348
S'0'
p57349
sS'name'
p57350
S'use_displaced_mesh'
p57351
sS'required'
p57352
I00
sS'group_name'
p57353
Nsa(dp57354
S'description'
p57355
S'Jacobian for corrotational finite strain\n'
p57356
sS'cpp_type'
p57357
S'bool'
p57358
sS'default'
p57359
S'0'
p57360
sS'name'
p57361
S'use_finite_deform_jacobian'
p57362
sS'required'
p57363
I00
sS'group_name'
p57364
Nsa(dp57365
S'description'
p57366
S'Flag to correct volumetric locking\n'
p57367
sS'cpp_type'
p57368
S'bool'
p57369
sS'default'
p57370
S'0'
p57371
sS'name'
p57372
S'volumetric_locking_correction'
p57373
sS'required'
p57374
I00
sS'group_name'
p57375
NsasS'name'
p57376
S'/Kernels/TensorMechanics'
p57377
sa(dp57378
S'description'
p57379
g3
sS'subblocks'
p57380
NsS'parameters'
p57381
(lp57382
(dp57383
S'description'
p57384
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57385
sS'cpp_type'
p57386
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57387
sS'default'
p57388
g3
sS'name'
p57389
S'block'
p57390
sS'required'
p57391
I00
sS'group_name'
p57392
Nsa(dp57393
S'description'
p57394
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57395
sS'cpp_type'
p57396
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57397
sS'default'
p57398
g3
sS'name'
p57399
S'control_tags'
p57400
sS'required'
p57401
I00
sS'group_name'
p57402
S'Advanced'
p57403
sa(dp57404
S'description'
p57405
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57406
sS'cpp_type'
p57407
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57408
sS'default'
p57409
g3
sS'name'
p57410
S'diag_save_in'
p57411
sS'required'
p57412
I00
sS'group_name'
p57413
S'Advanced'
p57414
sa(dp57415
S'description'
p57416
S'Whether or not this kernel will be used as an eigen kernel\n'
p57417
sS'cpp_type'
p57418
S'bool'
p57419
sS'default'
p57420
S'0'
p57421
sS'name'
p57422
S'eigen_kernel'
p57423
sS'required'
p57424
I00
sS'group_name'
p57425
Nsa(dp57426
S'description'
p57427
S'Set the enabled status of the MooseObject.\n'
p57428
sS'cpp_type'
p57429
S'bool'
p57430
sS'default'
p57431
S'1'
p57432
sS'name'
p57433
S'enable'
p57434
sS'required'
p57435
I00
sS'group_name'
p57436
S'Advanced'
p57437
sa(dp57438
S'description'
p57439
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57440
sS'cpp_type'
p57441
S'bool'
p57442
sS'default'
p57443
S'1'
p57444
sS'name'
p57445
S'implicit'
p57446
sS'required'
p57447
I00
sS'group_name'
p57448
S'Advanced'
p57449
sa(dp57450
S'description'
p57451
S'True for mass matrix lumping, false otherwise\n'
p57452
sS'cpp_type'
p57453
S'bool'
p57454
sS'default'
p57455
S'0'
p57456
sS'name'
p57457
S'lumping'
p57458
sS'required'
p57459
I00
sS'group_name'
p57460
Nsa(dp57461
S'description'
p57462
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57463
sS'cpp_type'
p57464
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57465
sS'default'
p57466
g3
sS'name'
p57467
S'save_in'
p57468
sS'required'
p57469
I00
sS'group_name'
p57470
S'Advanced'
p57471
sa(dp57472
S'description'
p57473
S'The seed for the master random number generator\n'
p57474
sS'cpp_type'
p57475
S'unsigned int'
p57476
sS'default'
p57477
S'0'
p57478
sS'name'
p57479
S'seed'
p57480
sS'required'
p57481
I00
sS'group_name'
p57482
S'Advanced'
p57483
sa(dp57484
S'description'
p57485
g3
sS'cpp_type'
p57486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57487
sS'default'
p57488
S'TimeDerivative'
p57489
sS'name'
p57490
S'type'
p57491
sS'required'
p57492
I00
sS'group_name'
p57493
Nsa(dp57494
S'description'
p57495
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57496
sS'cpp_type'
p57497
S'bool'
p57498
sS'default'
p57499
S'0'
p57500
sS'name'
p57501
S'use_displaced_mesh'
p57502
sS'required'
p57503
I00
sS'group_name'
p57504
S'Advanced'
p57505
sa(dp57506
S'description'
p57507
S'The name of the variable that this Kernel operates on\n'
p57508
sS'cpp_type'
p57509
S'NonlinearVariableName'
p57510
sS'default'
p57511
g3
sS'name'
p57512
S'variable'
p57513
sS'required'
p57514
I01
sS'group_name'
p57515
NsasS'name'
p57516
S'/Kernels/TimeDerivative'
p57517
sa(dp57518
S'description'
p57519
g3
sS'subblocks'
p57520
NsS'parameters'
p57521
(lp57522
(dp57523
S'description'
p57524
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57525
sS'cpp_type'
p57526
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57527
sS'default'
p57528
g3
sS'name'
p57529
S'block'
p57530
sS'required'
p57531
I00
sS'group_name'
p57532
Nsa(dp57533
S'description'
p57534
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57535
sS'cpp_type'
p57536
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57537
sS'default'
p57538
g3
sS'name'
p57539
S'control_tags'
p57540
sS'required'
p57541
I00
sS'group_name'
p57542
S'Advanced'
p57543
sa(dp57544
S'description'
p57545
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57546
sS'cpp_type'
p57547
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57548
sS'default'
p57549
g3
sS'name'
p57550
S'diag_save_in'
p57551
sS'required'
p57552
I00
sS'group_name'
p57553
S'Advanced'
p57554
sa(dp57555
S'description'
p57556
S'Whether or not this kernel will be used as an eigen kernel\n'
p57557
sS'cpp_type'
p57558
S'bool'
p57559
sS'default'
p57560
S'0'
p57561
sS'name'
p57562
S'eigen_kernel'
p57563
sS'required'
p57564
I00
sS'group_name'
p57565
Nsa(dp57566
S'description'
p57567
S'Set the enabled status of the MooseObject.\n'
p57568
sS'cpp_type'
p57569
S'bool'
p57570
sS'default'
p57571
S'1'
p57572
sS'name'
p57573
S'enable'
p57574
sS'required'
p57575
I00
sS'group_name'
p57576
S'Advanced'
p57577
sa(dp57578
S'description'
p57579
S'The forcing function\n'
p57580
sS'cpp_type'
p57581
S'FunctionName'
p57582
sS'default'
p57583
g3
sS'name'
p57584
S'function'
p57585
sS'required'
p57586
I01
sS'group_name'
p57587
Nsa(dp57588
S'description'
p57589
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57590
sS'cpp_type'
p57591
S'bool'
p57592
sS'default'
p57593
S'1'
p57594
sS'name'
p57595
S'implicit'
p57596
sS'required'
p57597
I00
sS'group_name'
p57598
S'Advanced'
p57599
sa(dp57600
S'description'
p57601
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57602
sS'cpp_type'
p57603
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57604
sS'default'
p57605
g3
sS'name'
p57606
S'save_in'
p57607
sS'required'
p57608
I00
sS'group_name'
p57609
S'Advanced'
p57610
sa(dp57611
S'description'
p57612
S'The seed for the master random number generator\n'
p57613
sS'cpp_type'
p57614
S'unsigned int'
p57615
sS'default'
p57616
S'0'
p57617
sS'name'
p57618
S'seed'
p57619
sS'required'
p57620
I00
sS'group_name'
p57621
S'Advanced'
p57622
sa(dp57623
S'description'
p57624
g3
sS'cpp_type'
p57625
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57626
sS'default'
p57627
S'UserForcingFunction'
p57628
sS'name'
p57629
S'type'
p57630
sS'required'
p57631
I00
sS'group_name'
p57632
Nsa(dp57633
S'description'
p57634
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57635
sS'cpp_type'
p57636
S'bool'
p57637
sS'default'
p57638
S'0'
p57639
sS'name'
p57640
S'use_displaced_mesh'
p57641
sS'required'
p57642
I00
sS'group_name'
p57643
S'Advanced'
p57644
sa(dp57645
S'description'
p57646
S'The name of the variable that this Kernel operates on\n'
p57647
sS'cpp_type'
p57648
S'NonlinearVariableName'
p57649
sS'default'
p57650
g3
sS'name'
p57651
S'variable'
p57652
sS'required'
p57653
I01
sS'group_name'
p57654
NsasS'name'
p57655
S'/Kernels/UserForcingFunction'
p57656
sa(dp57657
S'description'
p57658
S'Plane stress kernel to provide out-of-plane strain contribution\n'
p57659
sS'subblocks'
p57660
NsS'parameters'
p57661
(lp57662
(dp57663
S'description'
p57664
S'Material property base name\n'
p57665
sS'cpp_type'
p57666
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57667
sS'default'
p57668
g3
sS'name'
p57669
S'base_name'
p57670
sS'required'
p57671
I00
sS'group_name'
p57672
Nsa(dp57673
S'description'
p57674
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57675
sS'cpp_type'
p57676
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57677
sS'default'
p57678
g3
sS'name'
p57679
S'block'
p57680
sS'required'
p57681
I00
sS'group_name'
p57682
Nsa(dp57683
S'description'
p57684
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57685
sS'cpp_type'
p57686
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57687
sS'default'
p57688
g3
sS'name'
p57689
S'control_tags'
p57690
sS'required'
p57691
I00
sS'group_name'
p57692
S'Advanced'
p57693
sa(dp57694
S'description'
p57695
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57696
sS'cpp_type'
p57697
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57698
sS'default'
p57699
g3
sS'name'
p57700
S'diag_save_in'
p57701
sS'required'
p57702
I00
sS'group_name'
p57703
S'Advanced'
p57704
sa(dp57705
S'name'
p57706
S'direction'
p57707
sS'cpp_type'
p57708
S'MooseEnum'
p57709
sS'default'
p57710
S'z'
p57711
sS'description'
p57712
S'The out of plane direction\n'
p57713
sS'required'
p57714
I00
sS'options'
p57715
S'x y z'
p57716
sS'group_name'
p57717
Nsa(dp57718
S'description'
p57719
S'Whether or not this kernel will be used as an eigen kernel\n'
p57720
sS'cpp_type'
p57721
S'bool'
p57722
sS'default'
p57723
S'0'
p57724
sS'name'
p57725
S'eigen_kernel'
p57726
sS'required'
p57727
I00
sS'group_name'
p57728
Nsa(dp57729
S'description'
p57730
S'Set the enabled status of the MooseObject.\n'
p57731
sS'cpp_type'
p57732
S'bool'
p57733
sS'default'
p57734
S'1'
p57735
sS'name'
p57736
S'enable'
p57737
sS'required'
p57738
I00
sS'group_name'
p57739
S'Advanced'
p57740
sa(dp57741
S'description'
p57742
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57743
sS'cpp_type'
p57744
S'bool'
p57745
sS'default'
p57746
S'1'
p57747
sS'name'
p57748
S'implicit'
p57749
sS'required'
p57750
I00
sS'group_name'
p57751
S'Advanced'
p57752
sa(dp57753
S'description'
p57754
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57755
sS'cpp_type'
p57756
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57757
sS'default'
p57758
g3
sS'name'
p57759
S'save_in'
p57760
sS'required'
p57761
I00
sS'group_name'
p57762
S'Advanced'
p57763
sa(dp57764
S'description'
p57765
S'The seed for the master random number generator\n'
p57766
sS'cpp_type'
p57767
S'unsigned int'
p57768
sS'default'
p57769
S'0'
p57770
sS'name'
p57771
S'seed'
p57772
sS'required'
p57773
I00
sS'group_name'
p57774
S'Advanced'
p57775
sa(dp57776
S'description'
p57777
g3
sS'cpp_type'
p57778
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57779
sS'default'
p57780
S'WeakPlaneStress'
p57781
sS'name'
p57782
S'type'
p57783
sS'required'
p57784
I00
sS'group_name'
p57785
Nsa(dp57786
S'description'
p57787
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57788
sS'cpp_type'
p57789
S'bool'
p57790
sS'default'
p57791
S'0'
p57792
sS'name'
p57793
S'use_displaced_mesh'
p57794
sS'required'
p57795
I00
sS'group_name'
p57796
S'Advanced'
p57797
sa(dp57798
S'description'
p57799
S'The name of the variable that this Kernel operates on\n'
p57800
sS'cpp_type'
p57801
S'NonlinearVariableName'
p57802
sS'default'
p57803
g3
sS'name'
p57804
S'variable'
p57805
sS'required'
p57806
I01
sS'group_name'
p57807
NsasS'name'
p57808
S'/Kernels/WeakPlaneStress'
p57809
sasS'parameters'
p57810
NsS'name'
p57811
S'/Kernels'
p57812
sa(dp57813
S'description'
p57814
g3
sS'subblocks'
p57815
(lp57816
(dp57817
S'description'
p57818
g3
sS'subblocks'
p57819
NsS'parameters'
p57820
(lp57821
(dp57822
S'description'
p57823
S'A string representing the Moose Object that will be built by this Action\n'
p57824
sS'cpp_type'
p57825
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57826
sS'default'
p57827
g3
sS'name'
p57828
S'type'
p57829
sS'required'
p57830
I01
sS'group_name'
p57831
NsasS'name'
p57832
S'/Materials/*'
p57833
sa(dp57834
S'description'
p57835
S'Free energy contribution asymmetric across interfaces between arbitrary pairs of phases.\n'
p57836
sS'subblocks'
p57837
NsS'parameters'
p57838
(lp57839
(dp57840
S'description'
p57841
S'Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n'
p57842
sS'cpp_type'
p57843
S'std::vector<double, std::allocator<double> >'
p57844
sS'default'
p57845
g3
sS'name'
p57846
S'W_ij'
p57847
sS'required'
p57848
I01
sS'group_name'
p57849
Nsa(dp57850
S'description'
p57851
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57852
sS'cpp_type'
p57853
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57854
sS'default'
p57855
g3
sS'name'
p57856
S'block'
p57857
sS'required'
p57858
I00
sS'group_name'
p57859
Nsa(dp57860
S'description'
p57861
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p57862
sS'cpp_type'
p57863
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p57864
sS'default'
p57865
g3
sS'name'
p57866
S'boundary'
p57867
sS'required'
p57868
I00
sS'group_name'
p57869
Nsa(dp57870
S'description'
p57871
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p57872
sS'cpp_type'
p57873
S'bool'
p57874
sS'default'
p57875
S'1'
p57876
sS'name'
p57877
S'compute'
p57878
sS'required'
p57879
I00
sS'group_name'
p57880
Nsa(dp57881
S'description'
p57882
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p57883
sS'cpp_type'
p57884
S'bool'
p57885
sS'default'
p57886
S'0'
p57887
sS'name'
p57888
S'constant_on_elem'
p57889
sS'required'
p57890
I00
sS'group_name'
p57891
S'Advanced'
p57892
sa(dp57893
S'description'
p57894
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57895
sS'cpp_type'
p57896
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57897
sS'default'
p57898
g3
sS'name'
p57899
S'control_tags'
p57900
sS'required'
p57901
I00
sS'group_name'
p57902
S'Advanced'
p57903
sa(dp57904
S'description'
p57905
S'Set the enabled status of the MooseObject.\n'
p57906
sS'cpp_type'
p57907
S'bool'
p57908
sS'default'
p57909
S'1'
p57910
sS'name'
p57911
S'enable'
p57912
sS'required'
p57913
I00
sS'group_name'
p57914
S'Advanced'
p57915
sa(dp57916
S'description'
p57917
S'eta_i order parameters, one for each h\n'
p57918
sS'cpp_type'
p57919
S'std::vector<VariableName>'
p57920
sS'default'
p57921
g3
sS'name'
p57922
S'etas'
p57923
sS'required'
p57924
I01
sS'group_name'
p57925
Nsa(dp57926
S'description'
p57927
S'actual name for g(eta_i)\n'
p57928
sS'cpp_type'
p57929
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57930
sS'default'
p57931
S'g'
p57932
sS'name'
p57933
S'function_name'
p57934
sS'required'
p57935
I00
sS'group_name'
p57936
Nsa(dp57937
S'name'
p57938
S'g_order'
p57939
sS'cpp_type'
p57940
S'MooseEnum'
p57941
sS'default'
p57942
S'SIMPLE'
p57943
sS'description'
p57944
S'Polynomial order of the barrier function g(eta)\n'
p57945
sS'required'
p57946
I00
sS'options'
p57947
S'SIMPLE LOW'
p57948
sS'group_name'
p57949
Nsa(dp57950
S'description'
p57951
S'Switching Function Materials that provide h(eta_i)\n'
p57952
sS'cpp_type'
p57953
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p57954
sS'default'
p57955
g3
sS'name'
p57956
S'hi_names'
p57957
sS'required'
p57958
I00
sS'group_name'
p57959
Nsa(dp57960
S'description'
p57961
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57962
sS'cpp_type'
p57963
S'bool'
p57964
sS'default'
p57965
S'1'
p57966
sS'name'
p57967
S'implicit'
p57968
sS'required'
p57969
I00
sS'group_name'
p57970
S'Advanced'
p57971
sa(dp57972
S'description'
p57973
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p57974
sS'cpp_type'
p57975
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57976
sS'default'
p57977
g3
sS'name'
p57978
S'output_properties'
p57979
sS'required'
p57980
I00
sS'group_name'
p57981
S'Outputs'
p57982
sa(dp57983
S'description'
p57984
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p57985
sS'cpp_type'
p57986
S'std::vector<OutputName, std::allocator<OutputName> >'
p57987
sS'default'
p57988
S'none'
p57989
sS'name'
p57990
S'outputs'
p57991
sS'required'
p57992
I00
sS'group_name'
p57993
S'Outputs'
p57994
sa(dp57995
S'description'
p57996
S'The seed for the master random number generator\n'
p57997
sS'cpp_type'
p57998
S'unsigned int'
p57999
sS'default'
p58000
S'0'
p58001
sS'name'
p58002
S'seed'
p58003
sS'required'
p58004
I00
sS'group_name'
p58005
S'Advanced'
p58006
sa(dp58007
S'description'
p58008
g3
sS'cpp_type'
p58009
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58010
sS'default'
p58011
S'AsymmetricCrossTermBarrierFunctionMaterial'
p58012
sS'name'
p58013
S'type'
p58014
sS'required'
p58015
I00
sS'group_name'
p58016
Nsa(dp58017
S'description'
p58018
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58019
sS'cpp_type'
p58020
S'bool'
p58021
sS'default'
p58022
S'0'
p58023
sS'name'
p58024
S'use_displaced_mesh'
p58025
sS'required'
p58026
I00
sS'group_name'
p58027
S'Advanced'
p58028
sasS'name'
p58029
S'/Materials/AsymmetricCrossTermBarrierFunctionMaterial'
p58030
sa(dp58031
S'description'
p58032
S'Helper material to provide g(eta) and its derivative in a polynomial.\\nSIMPLE: eta^2*(1-eta)^2\\nLOW: eta*(1-eta)\n'
p58033
sS'subblocks'
p58034
NsS'parameters'
p58035
(lp58036
(dp58037
S'description'
p58038
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58039
sS'cpp_type'
p58040
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58041
sS'default'
p58042
g3
sS'name'
p58043
S'block'
p58044
sS'required'
p58045
I00
sS'group_name'
p58046
Nsa(dp58047
S'description'
p58048
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58049
sS'cpp_type'
p58050
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58051
sS'default'
p58052
g3
sS'name'
p58053
S'boundary'
p58054
sS'required'
p58055
I00
sS'group_name'
p58056
Nsa(dp58057
S'description'
p58058
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58059
sS'cpp_type'
p58060
S'bool'
p58061
sS'default'
p58062
S'1'
p58063
sS'name'
p58064
S'compute'
p58065
sS'required'
p58066
I00
sS'group_name'
p58067
Nsa(dp58068
S'description'
p58069
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58070
sS'cpp_type'
p58071
S'bool'
p58072
sS'default'
p58073
S'0'
p58074
sS'name'
p58075
S'constant_on_elem'
p58076
sS'required'
p58077
I00
sS'group_name'
p58078
S'Advanced'
p58079
sa(dp58080
S'description'
p58081
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58082
sS'cpp_type'
p58083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58084
sS'default'
p58085
g3
sS'name'
p58086
S'control_tags'
p58087
sS'required'
p58088
I00
sS'group_name'
p58089
S'Advanced'
p58090
sa(dp58091
S'description'
p58092
S'Set the enabled status of the MooseObject.\n'
p58093
sS'cpp_type'
p58094
S'bool'
p58095
sS'default'
p58096
S'1'
p58097
sS'name'
p58098
S'enable'
p58099
sS'required'
p58100
I00
sS'group_name'
p58101
S'Advanced'
p58102
sa(dp58103
S'description'
p58104
S'Order parameter variable\n'
p58105
sS'cpp_type'
p58106
S'std::vector<VariableName>'
p58107
sS'default'
p58108
g3
sS'name'
p58109
S'eta'
p58110
sS'required'
p58111
I00
sS'group_name'
p58112
Nsa(dp58113
S'description'
p58114
S"actual name for f(eta), i.e. 'h' or 'g'\n"
p58115
sS'cpp_type'
p58116
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58117
sS'default'
p58118
S'g'
p58119
sS'name'
p58120
S'function_name'
p58121
sS'required'
p58122
I00
sS'group_name'
p58123
Nsa(dp58124
S'name'
p58125
S'g_order'
p58126
sS'cpp_type'
p58127
S'MooseEnum'
p58128
sS'default'
p58129
S'SIMPLE'
p58130
sS'description'
p58131
S'Polynomial order of the barrier function g(eta)\n'
p58132
sS'required'
p58133
I00
sS'options'
p58134
S'SIMPLE LOW'
p58135
sS'group_name'
p58136
Nsa(dp58137
S'description'
p58138
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58139
sS'cpp_type'
p58140
S'bool'
p58141
sS'default'
p58142
S'1'
p58143
sS'name'
p58144
S'implicit'
p58145
sS'required'
p58146
I00
sS'group_name'
p58147
S'Advanced'
p58148
sa(dp58149
S'description'
p58150
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58151
sS'cpp_type'
p58152
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58153
sS'default'
p58154
g3
sS'name'
p58155
S'output_properties'
p58156
sS'required'
p58157
I00
sS'group_name'
p58158
S'Outputs'
p58159
sa(dp58160
S'description'
p58161
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58162
sS'cpp_type'
p58163
S'std::vector<OutputName, std::allocator<OutputName> >'
p58164
sS'default'
p58165
S'none'
p58166
sS'name'
p58167
S'outputs'
p58168
sS'required'
p58169
I00
sS'group_name'
p58170
S'Outputs'
p58171
sa(dp58172
S'description'
p58173
S'The seed for the master random number generator\n'
p58174
sS'cpp_type'
p58175
S'unsigned int'
p58176
sS'default'
p58177
S'0'
p58178
sS'name'
p58179
S'seed'
p58180
sS'required'
p58181
I00
sS'group_name'
p58182
S'Advanced'
p58183
sa(dp58184
S'description'
p58185
g3
sS'cpp_type'
p58186
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58187
sS'default'
p58188
S'BarrierFunctionMaterial'
p58189
sS'name'
p58190
S'type'
p58191
sS'required'
p58192
I00
sS'group_name'
p58193
Nsa(dp58194
S'description'
p58195
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58196
sS'cpp_type'
p58197
S'bool'
p58198
sS'default'
p58199
S'0'
p58200
sS'name'
p58201
S'use_displaced_mesh'
p58202
sS'required'
p58203
I00
sS'group_name'
p58204
S'Advanced'
p58205
sa(dp58206
S'description'
p58207
S'Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n'
p58208
sS'cpp_type'
p58209
S'bool'
p58210
sS'default'
p58211
S'0'
p58212
sS'name'
p58213
S'well_only'
p58214
sS'required'
p58215
I00
sS'group_name'
p58216
NsasS'name'
p58217
S'/Materials/BarrierFunctionMaterial'
p58218
sa(dp58219
S'description'
p58220
S'Assemble an Eigenstrain tensor from multiple tensor contributions weighted by material properties\n'
p58221
sS'subblocks'
p58222
NsS'parameters'
p58223
(lp58224
(dp58225
S'description'
p58226
S'variable dependencies for the prefactor\n'
p58227
sS'cpp_type'
p58228
S'std::vector<VariableName>'
p58229
sS'default'
p58230
g3
sS'name'
p58231
S'args'
p58232
sS'required'
p58233
I01
sS'group_name'
p58234
Nsa(dp58235
S'description'
p58236
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p58237
sS'cpp_type'
p58238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58239
sS'default'
p58240
g3
sS'name'
p58241
S'base_name'
p58242
sS'required'
p58243
I00
sS'group_name'
p58244
Nsa(dp58245
S'description'
p58246
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58247
sS'cpp_type'
p58248
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58249
sS'default'
p58250
g3
sS'name'
p58251
S'block'
p58252
sS'required'
p58253
I00
sS'group_name'
p58254
Nsa(dp58255
S'description'
p58256
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58257
sS'cpp_type'
p58258
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58259
sS'default'
p58260
g3
sS'name'
p58261
S'boundary'
p58262
sS'required'
p58263
I00
sS'group_name'
p58264
Nsa(dp58265
S'description'
p58266
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58267
sS'cpp_type'
p58268
S'bool'
p58269
sS'default'
p58270
S'1'
p58271
sS'name'
p58272
S'compute'
p58273
sS'required'
p58274
I00
sS'group_name'
p58275
Nsa(dp58276
S'description'
p58277
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58278
sS'cpp_type'
p58279
S'bool'
p58280
sS'default'
p58281
S'0'
p58282
sS'name'
p58283
S'constant_on_elem'
p58284
sS'required'
p58285
I00
sS'group_name'
p58286
S'Advanced'
p58287
sa(dp58288
S'description'
p58289
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58290
sS'cpp_type'
p58291
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58292
sS'default'
p58293
g3
sS'name'
p58294
S'control_tags'
p58295
sS'required'
p58296
I00
sS'group_name'
p58297
S'Advanced'
p58298
sa(dp58299
S'description'
p58300
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p58301
sS'cpp_type'
p58302
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58303
sS'default'
p58304
g3
sS'name'
p58305
S'eigenstrain_name'
p58306
sS'required'
p58307
I01
sS'group_name'
p58308
Nsa(dp58309
S'description'
p58310
S'Set the enabled status of the MooseObject.\n'
p58311
sS'cpp_type'
p58312
S'bool'
p58313
sS'default'
p58314
S'1'
p58315
sS'name'
p58316
S'enable'
p58317
sS'required'
p58318
I00
sS'group_name'
p58319
S'Advanced'
p58320
sa(dp58321
S'description'
p58322
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58323
sS'cpp_type'
p58324
S'bool'
p58325
sS'default'
p58326
S'1'
p58327
sS'name'
p58328
S'implicit'
p58329
sS'required'
p58330
I00
sS'group_name'
p58331
S'Advanced'
p58332
sa(dp58333
S'description'
p58334
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p58335
sS'cpp_type'
p58336
S'bool'
p58337
sS'default'
p58338
S'0'
p58339
sS'name'
p58340
S'incremental_form'
p58341
sS'required'
p58342
I00
sS'group_name'
p58343
Nsa(dp58344
S'description'
p58345
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58346
sS'cpp_type'
p58347
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58348
sS'default'
p58349
g3
sS'name'
p58350
S'output_properties'
p58351
sS'required'
p58352
I00
sS'group_name'
p58353
S'Outputs'
p58354
sa(dp58355
S'description'
p58356
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58357
sS'cpp_type'
p58358
S'std::vector<OutputName, std::allocator<OutputName> >'
p58359
sS'default'
p58360
S'none'
p58361
sS'name'
p58362
S'outputs'
p58363
sS'required'
p58364
I00
sS'group_name'
p58365
S'Outputs'
p58366
sa(dp58367
S'description'
p58368
S'The seed for the master random number generator\n'
p58369
sS'cpp_type'
p58370
S'unsigned int'
p58371
sS'default'
p58372
S'0'
p58373
sS'name'
p58374
S'seed'
p58375
sS'required'
p58376
I00
sS'group_name'
p58377
S'Advanced'
p58378
sa(dp58379
S'description'
p58380
S'Component tensors\n'
p58381
sS'cpp_type'
p58382
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58383
sS'default'
p58384
g3
sS'name'
p58385
S'tensors'
p58386
sS'required'
p58387
I01
sS'group_name'
p58388
Nsa(dp58389
S'description'
p58390
g3
sS'cpp_type'
p58391
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58392
sS'default'
p58393
S'CompositeEigenstrain'
p58394
sS'name'
p58395
S'type'
p58396
sS'required'
p58397
I00
sS'group_name'
p58398
Nsa(dp58399
S'description'
p58400
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58401
sS'cpp_type'
p58402
S'bool'
p58403
sS'default'
p58404
S'0'
p58405
sS'name'
p58406
S'use_displaced_mesh'
p58407
sS'required'
p58408
I00
sS'group_name'
p58409
S'Advanced'
p58410
sa(dp58411
S'description'
p58412
S'Component weights\n'
p58413
sS'cpp_type'
p58414
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58415
sS'default'
p58416
g3
sS'name'
p58417
S'weights'
p58418
sS'required'
p58419
I01
sS'group_name'
p58420
NsasS'name'
p58421
S'/Materials/CompositeEigenstrain'
p58422
sa(dp58423
S'description'
p58424
S'Assemble an elasticity tensor from multiple tensor contributions weighted by material properties\n'
p58425
sS'subblocks'
p58426
NsS'parameters'
p58427
(lp58428
(dp58429
S'description'
p58430
S'variable dependencies for the prefactor\n'
p58431
sS'cpp_type'
p58432
S'std::vector<VariableName>'
p58433
sS'default'
p58434
g3
sS'name'
p58435
S'args'
p58436
sS'required'
p58437
I01
sS'group_name'
p58438
Nsa(dp58439
S'description'
p58440
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p58441
sS'cpp_type'
p58442
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58443
sS'default'
p58444
g3
sS'name'
p58445
S'base_name'
p58446
sS'required'
p58447
I00
sS'group_name'
p58448
Nsa(dp58449
S'description'
p58450
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58451
sS'cpp_type'
p58452
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58453
sS'default'
p58454
g3
sS'name'
p58455
S'block'
p58456
sS'required'
p58457
I00
sS'group_name'
p58458
Nsa(dp58459
S'description'
p58460
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58461
sS'cpp_type'
p58462
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58463
sS'default'
p58464
g3
sS'name'
p58465
S'boundary'
p58466
sS'required'
p58467
I00
sS'group_name'
p58468
Nsa(dp58469
S'description'
p58470
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58471
sS'cpp_type'
p58472
S'bool'
p58473
sS'default'
p58474
S'1'
p58475
sS'name'
p58476
S'compute'
p58477
sS'required'
p58478
I00
sS'group_name'
p58479
Nsa(dp58480
S'description'
p58481
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58482
sS'cpp_type'
p58483
S'bool'
p58484
sS'default'
p58485
S'0'
p58486
sS'name'
p58487
S'constant_on_elem'
p58488
sS'required'
p58489
I00
sS'group_name'
p58490
S'Advanced'
p58491
sa(dp58492
S'description'
p58493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58494
sS'cpp_type'
p58495
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58496
sS'default'
p58497
g3
sS'name'
p58498
S'control_tags'
p58499
sS'required'
p58500
I00
sS'group_name'
p58501
S'Advanced'
p58502
sa(dp58503
S'description'
p58504
S'Set the enabled status of the MooseObject.\n'
p58505
sS'cpp_type'
p58506
S'bool'
p58507
sS'default'
p58508
S'1'
p58509
sS'name'
p58510
S'enable'
p58511
sS'required'
p58512
I00
sS'group_name'
p58513
S'Advanced'
p58514
sa(dp58515
S'description'
p58516
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58517
sS'cpp_type'
p58518
S'bool'
p58519
sS'default'
p58520
S'1'
p58521
sS'name'
p58522
S'implicit'
p58523
sS'required'
p58524
I00
sS'group_name'
p58525
S'Advanced'
p58526
sa(dp58527
S'description'
p58528
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58529
sS'cpp_type'
p58530
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58531
sS'default'
p58532
g3
sS'name'
p58533
S'output_properties'
p58534
sS'required'
p58535
I00
sS'group_name'
p58536
S'Outputs'
p58537
sa(dp58538
S'description'
p58539
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58540
sS'cpp_type'
p58541
S'std::vector<OutputName, std::allocator<OutputName> >'
p58542
sS'default'
p58543
S'none'
p58544
sS'name'
p58545
S'outputs'
p58546
sS'required'
p58547
I00
sS'group_name'
p58548
S'Outputs'
p58549
sa(dp58550
S'description'
p58551
S'The seed for the master random number generator\n'
p58552
sS'cpp_type'
p58553
S'unsigned int'
p58554
sS'default'
p58555
S'0'
p58556
sS'name'
p58557
S'seed'
p58558
sS'required'
p58559
I00
sS'group_name'
p58560
S'Advanced'
p58561
sa(dp58562
S'description'
p58563
S'Component tensors\n'
p58564
sS'cpp_type'
p58565
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58566
sS'default'
p58567
g3
sS'name'
p58568
S'tensors'
p58569
sS'required'
p58570
I01
sS'group_name'
p58571
Nsa(dp58572
S'description'
p58573
g3
sS'cpp_type'
p58574
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58575
sS'default'
p58576
S'CompositeElasticityTensor'
p58577
sS'name'
p58578
S'type'
p58579
sS'required'
p58580
I00
sS'group_name'
p58581
Nsa(dp58582
S'description'
p58583
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58584
sS'cpp_type'
p58585
S'bool'
p58586
sS'default'
p58587
S'0'
p58588
sS'name'
p58589
S'use_displaced_mesh'
p58590
sS'required'
p58591
I00
sS'group_name'
p58592
S'Advanced'
p58593
sa(dp58594
S'description'
p58595
S'Component weights\n'
p58596
sS'cpp_type'
p58597
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58598
sS'default'
p58599
g3
sS'name'
p58600
S'weights'
p58601
sS'required'
p58602
I01
sS'group_name'
p58603
NsasS'name'
p58604
S'/Materials/CompositeElasticityTensor'
p58605
sa(dp58606
S'description'
p58607
S'Assemble a mobility tensor from multiple tensor contributions weighted by material properties\n'
p58608
sS'subblocks'
p58609
NsS'parameters'
p58610
(lp58611
(dp58612
S'description'
p58613
S'Name of the mobility tensor property to generate\n'
p58614
sS'cpp_type'
p58615
S'MaterialPropertyName'
p58616
sS'default'
p58617
g3
sS'name'
p58618
S'M_name'
p58619
sS'required'
p58620
I01
sS'group_name'
p58621
Nsa(dp58622
S'description'
p58623
S'variable dependencies for the prefactor\n'
p58624
sS'cpp_type'
p58625
S'std::vector<VariableName>'
p58626
sS'default'
p58627
g3
sS'name'
p58628
S'args'
p58629
sS'required'
p58630
I01
sS'group_name'
p58631
Nsa(dp58632
S'description'
p58633
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58634
sS'cpp_type'
p58635
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58636
sS'default'
p58637
g3
sS'name'
p58638
S'block'
p58639
sS'required'
p58640
I00
sS'group_name'
p58641
Nsa(dp58642
S'description'
p58643
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58644
sS'cpp_type'
p58645
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58646
sS'default'
p58647
g3
sS'name'
p58648
S'boundary'
p58649
sS'required'
p58650
I00
sS'group_name'
p58651
Nsa(dp58652
S'description'
p58653
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58654
sS'cpp_type'
p58655
S'bool'
p58656
sS'default'
p58657
S'1'
p58658
sS'name'
p58659
S'compute'
p58660
sS'required'
p58661
I00
sS'group_name'
p58662
Nsa(dp58663
S'description'
p58664
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58665
sS'cpp_type'
p58666
S'bool'
p58667
sS'default'
p58668
S'0'
p58669
sS'name'
p58670
S'constant_on_elem'
p58671
sS'required'
p58672
I00
sS'group_name'
p58673
S'Advanced'
p58674
sa(dp58675
S'description'
p58676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58677
sS'cpp_type'
p58678
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58679
sS'default'
p58680
g3
sS'name'
p58681
S'control_tags'
p58682
sS'required'
p58683
I00
sS'group_name'
p58684
S'Advanced'
p58685
sa(dp58686
S'description'
p58687
S'Set the enabled status of the MooseObject.\n'
p58688
sS'cpp_type'
p58689
S'bool'
p58690
sS'default'
p58691
S'1'
p58692
sS'name'
p58693
S'enable'
p58694
sS'required'
p58695
I00
sS'group_name'
p58696
S'Advanced'
p58697
sa(dp58698
S'description'
p58699
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58700
sS'cpp_type'
p58701
S'bool'
p58702
sS'default'
p58703
S'1'
p58704
sS'name'
p58705
S'implicit'
p58706
sS'required'
p58707
I00
sS'group_name'
p58708
S'Advanced'
p58709
sa(dp58710
S'description'
p58711
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58712
sS'cpp_type'
p58713
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58714
sS'default'
p58715
g3
sS'name'
p58716
S'output_properties'
p58717
sS'required'
p58718
I00
sS'group_name'
p58719
S'Outputs'
p58720
sa(dp58721
S'description'
p58722
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58723
sS'cpp_type'
p58724
S'std::vector<OutputName, std::allocator<OutputName> >'
p58725
sS'default'
p58726
S'none'
p58727
sS'name'
p58728
S'outputs'
p58729
sS'required'
p58730
I00
sS'group_name'
p58731
S'Outputs'
p58732
sa(dp58733
S'description'
p58734
S'The seed for the master random number generator\n'
p58735
sS'cpp_type'
p58736
S'unsigned int'
p58737
sS'default'
p58738
S'0'
p58739
sS'name'
p58740
S'seed'
p58741
sS'required'
p58742
I00
sS'group_name'
p58743
S'Advanced'
p58744
sa(dp58745
S'description'
p58746
S'Component tensors\n'
p58747
sS'cpp_type'
p58748
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58749
sS'default'
p58750
g3
sS'name'
p58751
S'tensors'
p58752
sS'required'
p58753
I01
sS'group_name'
p58754
Nsa(dp58755
S'description'
p58756
g3
sS'cpp_type'
p58757
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58758
sS'default'
p58759
S'CompositeMobilityTensor'
p58760
sS'name'
p58761
S'type'
p58762
sS'required'
p58763
I00
sS'group_name'
p58764
Nsa(dp58765
S'description'
p58766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58767
sS'cpp_type'
p58768
S'bool'
p58769
sS'default'
p58770
S'0'
p58771
sS'name'
p58772
S'use_displaced_mesh'
p58773
sS'required'
p58774
I00
sS'group_name'
p58775
S'Advanced'
p58776
sa(dp58777
S'description'
p58778
S'Component weights\n'
p58779
sS'cpp_type'
p58780
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58781
sS'default'
p58782
g3
sS'name'
p58783
S'weights'
p58784
sS'required'
p58785
I01
sS'group_name'
p58786
NsasS'name'
p58787
S'/Materials/CompositeMobilityTensor'
p58788
sa(dp58789
S'description'
p58790
S'Compute a strain increment and rotation increment for finite strains in an axisymmetric 1D problem\n'
p58791
sS'subblocks'
p58792
NsS'parameters'
p58793
(lp58794
(dp58795
S'description'
p58796
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p58797
sS'cpp_type'
p58798
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58799
sS'default'
p58800
g3
sS'name'
p58801
S'base_name'
p58802
sS'required'
p58803
I00
sS'group_name'
p58804
Nsa(dp58805
S'description'
p58806
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58807
sS'cpp_type'
p58808
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58809
sS'default'
p58810
g3
sS'name'
p58811
S'block'
p58812
sS'required'
p58813
I00
sS'group_name'
p58814
Nsa(dp58815
S'description'
p58816
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58817
sS'cpp_type'
p58818
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58819
sS'default'
p58820
g3
sS'name'
p58821
S'boundary'
p58822
sS'required'
p58823
I00
sS'group_name'
p58824
Nsa(dp58825
S'description'
p58826
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58827
sS'cpp_type'
p58828
S'bool'
p58829
sS'default'
p58830
S'1'
p58831
sS'name'
p58832
S'compute'
p58833
sS'required'
p58834
I00
sS'group_name'
p58835
Nsa(dp58836
S'description'
p58837
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58838
sS'cpp_type'
p58839
S'bool'
p58840
sS'default'
p58841
S'0'
p58842
sS'name'
p58843
S'constant_on_elem'
p58844
sS'required'
p58845
I00
sS'group_name'
p58846
S'Advanced'
p58847
sa(dp58848
S'description'
p58849
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58850
sS'cpp_type'
p58851
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58852
sS'default'
p58853
g3
sS'name'
p58854
S'control_tags'
p58855
sS'required'
p58856
I00
sS'group_name'
p58857
S'Advanced'
p58858
sa(dp58859
S'name'
p58860
S'decomposition_method'
p58861
sS'cpp_type'
p58862
S'MooseEnum'
p58863
sS'default'
p58864
S'TaylorExpansion'
p58865
sS'description'
p58866
S'Methods to calculate the strain and rotation increments\n'
p58867
sS'required'
p58868
I00
sS'options'
p58869
S'TaylorExpansion EigenSolution'
p58870
sS'group_name'
p58871
Nsa(dp58872
S'description'
p58873
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p58874
sS'cpp_type'
p58875
S'std::vector<VariableName>'
p58876
sS'default'
p58877
g3
sS'name'
p58878
S'displacements'
p58879
sS'required'
p58880
I01
sS'group_name'
p58881
Nsa(dp58882
S'description'
p58883
S'List of eigenstrains to be applied in this strain calculation\n'
p58884
sS'cpp_type'
p58885
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58886
sS'default'
p58887
g3
sS'name'
p58888
S'eigenstrain_names'
p58889
sS'required'
p58890
I00
sS'group_name'
p58891
Nsa(dp58892
S'description'
p58893
S'Set the enabled status of the MooseObject.\n'
p58894
sS'cpp_type'
p58895
S'bool'
p58896
sS'default'
p58897
S'1'
p58898
sS'name'
p58899
S'enable'
p58900
sS'required'
p58901
I00
sS'group_name'
p58902
S'Advanced'
p58903
sa(dp58904
S'description'
p58905
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58906
sS'cpp_type'
p58907
S'bool'
p58908
sS'default'
p58909
S'1'
p58910
sS'name'
p58911
S'implicit'
p58912
sS'required'
p58913
I00
sS'group_name'
p58914
S'Advanced'
p58915
sa(dp58916
S'description'
p58917
S'Nonlinear variable for axisymmetric 1D problem\n'
p58918
sS'cpp_type'
p58919
S'std::vector<VariableName>'
p58920
sS'default'
p58921
g3
sS'name'
p58922
S'out_of_plane_strain'
p58923
sS'required'
p58924
I00
sS'group_name'
p58925
Nsa(dp58926
S'description'
p58927
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58928
sS'cpp_type'
p58929
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58930
sS'default'
p58931
g3
sS'name'
p58932
S'output_properties'
p58933
sS'required'
p58934
I00
sS'group_name'
p58935
S'Outputs'
p58936
sa(dp58937
S'description'
p58938
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58939
sS'cpp_type'
p58940
S'std::vector<OutputName, std::allocator<OutputName> >'
p58941
sS'default'
p58942
S'none'
p58943
sS'name'
p58944
S'outputs'
p58945
sS'required'
p58946
I00
sS'group_name'
p58947
S'Outputs'
p58948
sa(dp58949
S'description'
p58950
S'Scalar variable for axisymmetric 1D problem\n'
p58951
sS'cpp_type'
p58952
S'std::vector<VariableName>'
p58953
sS'default'
p58954
g3
sS'name'
p58955
S'scalar_out_of_plane_strain'
p58956
sS'required'
p58957
I00
sS'group_name'
p58958
Nsa(dp58959
S'description'
p58960
S'The seed for the master random number generator\n'
p58961
sS'cpp_type'
p58962
S'unsigned int'
p58963
sS'default'
p58964
S'0'
p58965
sS'name'
p58966
S'seed'
p58967
sS'required'
p58968
I00
sS'group_name'
p58969
S'Advanced'
p58970
sa(dp58971
S'description'
p58972
g3
sS'cpp_type'
p58973
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58974
sS'default'
p58975
S'ComputeAxisymmetric1DFiniteStrain'
p58976
sS'name'
p58977
S'type'
p58978
sS'required'
p58979
I00
sS'group_name'
p58980
Nsa(dp58981
S'description'
p58982
S'Flag to correct volumetric locking\n'
p58983
sS'cpp_type'
p58984
S'bool'
p58985
sS'default'
p58986
S'0'
p58987
sS'name'
p58988
S'volumetric_locking_correction'
p58989
sS'required'
p58990
I00
sS'group_name'
p58991
NsasS'name'
p58992
S'/Materials/ComputeAxisymmetric1DFiniteStrain'
p58993
sa(dp58994
S'description'
p58995
S'Compute strain increment for small strains in an axisymmetric 1D problem\n'
p58996
sS'subblocks'
p58997
NsS'parameters'
p58998
(lp58999
(dp59000
S'description'
p59001
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59002
sS'cpp_type'
p59003
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59004
sS'default'
p59005
g3
sS'name'
p59006
S'base_name'
p59007
sS'required'
p59008
I00
sS'group_name'
p59009
Nsa(dp59010
S'description'
p59011
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59012
sS'cpp_type'
p59013
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59014
sS'default'
p59015
g3
sS'name'
p59016
S'block'
p59017
sS'required'
p59018
I00
sS'group_name'
p59019
Nsa(dp59020
S'description'
p59021
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59022
sS'cpp_type'
p59023
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59024
sS'default'
p59025
g3
sS'name'
p59026
S'boundary'
p59027
sS'required'
p59028
I00
sS'group_name'
p59029
Nsa(dp59030
S'description'
p59031
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59032
sS'cpp_type'
p59033
S'bool'
p59034
sS'default'
p59035
S'1'
p59036
sS'name'
p59037
S'compute'
p59038
sS'required'
p59039
I00
sS'group_name'
p59040
Nsa(dp59041
S'description'
p59042
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59043
sS'cpp_type'
p59044
S'bool'
p59045
sS'default'
p59046
S'0'
p59047
sS'name'
p59048
S'constant_on_elem'
p59049
sS'required'
p59050
I00
sS'group_name'
p59051
S'Advanced'
p59052
sa(dp59053
S'description'
p59054
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59055
sS'cpp_type'
p59056
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59057
sS'default'
p59058
g3
sS'name'
p59059
S'control_tags'
p59060
sS'required'
p59061
I00
sS'group_name'
p59062
S'Advanced'
p59063
sa(dp59064
S'description'
p59065
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59066
sS'cpp_type'
p59067
S'std::vector<VariableName>'
p59068
sS'default'
p59069
g3
sS'name'
p59070
S'displacements'
p59071
sS'required'
p59072
I01
sS'group_name'
p59073
Nsa(dp59074
S'description'
p59075
S'List of eigenstrains to be applied in this strain calculation\n'
p59076
sS'cpp_type'
p59077
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59078
sS'default'
p59079
g3
sS'name'
p59080
S'eigenstrain_names'
p59081
sS'required'
p59082
I00
sS'group_name'
p59083
Nsa(dp59084
S'description'
p59085
S'Set the enabled status of the MooseObject.\n'
p59086
sS'cpp_type'
p59087
S'bool'
p59088
sS'default'
p59089
S'1'
p59090
sS'name'
p59091
S'enable'
p59092
sS'required'
p59093
I00
sS'group_name'
p59094
S'Advanced'
p59095
sa(dp59096
S'description'
p59097
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59098
sS'cpp_type'
p59099
S'bool'
p59100
sS'default'
p59101
S'1'
p59102
sS'name'
p59103
S'implicit'
p59104
sS'required'
p59105
I00
sS'group_name'
p59106
S'Advanced'
p59107
sa(dp59108
S'description'
p59109
S'Nonlinear variable for axisymmetric 1D problem\n'
p59110
sS'cpp_type'
p59111
S'std::vector<VariableName>'
p59112
sS'default'
p59113
g3
sS'name'
p59114
S'out_of_plane_strain'
p59115
sS'required'
p59116
I00
sS'group_name'
p59117
Nsa(dp59118
S'description'
p59119
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59120
sS'cpp_type'
p59121
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59122
sS'default'
p59123
g3
sS'name'
p59124
S'output_properties'
p59125
sS'required'
p59126
I00
sS'group_name'
p59127
S'Outputs'
p59128
sa(dp59129
S'description'
p59130
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59131
sS'cpp_type'
p59132
S'std::vector<OutputName, std::allocator<OutputName> >'
p59133
sS'default'
p59134
S'none'
p59135
sS'name'
p59136
S'outputs'
p59137
sS'required'
p59138
I00
sS'group_name'
p59139
S'Outputs'
p59140
sa(dp59141
S'description'
p59142
S'Scalar variable for axisymmetric 1D problem\n'
p59143
sS'cpp_type'
p59144
S'std::vector<VariableName>'
p59145
sS'default'
p59146
g3
sS'name'
p59147
S'scalar_out_of_plane_strain'
p59148
sS'required'
p59149
I00
sS'group_name'
p59150
Nsa(dp59151
S'description'
p59152
S'The seed for the master random number generator\n'
p59153
sS'cpp_type'
p59154
S'unsigned int'
p59155
sS'default'
p59156
S'0'
p59157
sS'name'
p59158
S'seed'
p59159
sS'required'
p59160
I00
sS'group_name'
p59161
S'Advanced'
p59162
sa(dp59163
S'description'
p59164
g3
sS'cpp_type'
p59165
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59166
sS'default'
p59167
S'ComputeAxisymmetric1DIncrementalStrain'
p59168
sS'name'
p59169
S'type'
p59170
sS'required'
p59171
I00
sS'group_name'
p59172
Nsa(dp59173
S'description'
p59174
S'Flag to correct volumetric locking\n'
p59175
sS'cpp_type'
p59176
S'bool'
p59177
sS'default'
p59178
S'0'
p59179
sS'name'
p59180
S'volumetric_locking_correction'
p59181
sS'required'
p59182
I00
sS'group_name'
p59183
NsasS'name'
p59184
S'/Materials/ComputeAxisymmetric1DIncrementalStrain'
p59185
sa(dp59186
S'description'
p59187
S'Compute a small strain in an Axisymmetric 1D problem\n'
p59188
sS'subblocks'
p59189
NsS'parameters'
p59190
(lp59191
(dp59192
S'description'
p59193
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59194
sS'cpp_type'
p59195
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59196
sS'default'
p59197
g3
sS'name'
p59198
S'base_name'
p59199
sS'required'
p59200
I00
sS'group_name'
p59201
Nsa(dp59202
S'description'
p59203
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59204
sS'cpp_type'
p59205
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59206
sS'default'
p59207
g3
sS'name'
p59208
S'block'
p59209
sS'required'
p59210
I00
sS'group_name'
p59211
Nsa(dp59212
S'description'
p59213
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59214
sS'cpp_type'
p59215
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59216
sS'default'
p59217
g3
sS'name'
p59218
S'boundary'
p59219
sS'required'
p59220
I00
sS'group_name'
p59221
Nsa(dp59222
S'description'
p59223
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59224
sS'cpp_type'
p59225
S'bool'
p59226
sS'default'
p59227
S'1'
p59228
sS'name'
p59229
S'compute'
p59230
sS'required'
p59231
I00
sS'group_name'
p59232
Nsa(dp59233
S'description'
p59234
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59235
sS'cpp_type'
p59236
S'bool'
p59237
sS'default'
p59238
S'0'
p59239
sS'name'
p59240
S'constant_on_elem'
p59241
sS'required'
p59242
I00
sS'group_name'
p59243
S'Advanced'
p59244
sa(dp59245
S'description'
p59246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59247
sS'cpp_type'
p59248
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59249
sS'default'
p59250
g3
sS'name'
p59251
S'control_tags'
p59252
sS'required'
p59253
I00
sS'group_name'
p59254
S'Advanced'
p59255
sa(dp59256
S'description'
p59257
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59258
sS'cpp_type'
p59259
S'std::vector<VariableName>'
p59260
sS'default'
p59261
g3
sS'name'
p59262
S'displacements'
p59263
sS'required'
p59264
I01
sS'group_name'
p59265
Nsa(dp59266
S'description'
p59267
S'List of eigenstrains to be applied in this strain calculation\n'
p59268
sS'cpp_type'
p59269
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59270
sS'default'
p59271
g3
sS'name'
p59272
S'eigenstrain_names'
p59273
sS'required'
p59274
I00
sS'group_name'
p59275
Nsa(dp59276
S'description'
p59277
S'Set the enabled status of the MooseObject.\n'
p59278
sS'cpp_type'
p59279
S'bool'
p59280
sS'default'
p59281
S'1'
p59282
sS'name'
p59283
S'enable'
p59284
sS'required'
p59285
I00
sS'group_name'
p59286
S'Advanced'
p59287
sa(dp59288
S'description'
p59289
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59290
sS'cpp_type'
p59291
S'bool'
p59292
sS'default'
p59293
S'1'
p59294
sS'name'
p59295
S'implicit'
p59296
sS'required'
p59297
I00
sS'group_name'
p59298
S'Advanced'
p59299
sa(dp59300
S'description'
p59301
S'Nonlinear variable for axisymmetric 1D problem\n'
p59302
sS'cpp_type'
p59303
S'std::vector<VariableName>'
p59304
sS'default'
p59305
g3
sS'name'
p59306
S'out_of_plane_strain'
p59307
sS'required'
p59308
I00
sS'group_name'
p59309
Nsa(dp59310
S'description'
p59311
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59312
sS'cpp_type'
p59313
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59314
sS'default'
p59315
g3
sS'name'
p59316
S'output_properties'
p59317
sS'required'
p59318
I00
sS'group_name'
p59319
S'Outputs'
p59320
sa(dp59321
S'description'
p59322
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59323
sS'cpp_type'
p59324
S'std::vector<OutputName, std::allocator<OutputName> >'
p59325
sS'default'
p59326
S'none'
p59327
sS'name'
p59328
S'outputs'
p59329
sS'required'
p59330
I00
sS'group_name'
p59331
S'Outputs'
p59332
sa(dp59333
S'description'
p59334
S'Scalar variable for axisymmetric 1D problem\n'
p59335
sS'cpp_type'
p59336
S'std::vector<VariableName>'
p59337
sS'default'
p59338
g3
sS'name'
p59339
S'scalar_out_of_plane_strain'
p59340
sS'required'
p59341
I00
sS'group_name'
p59342
Nsa(dp59343
S'description'
p59344
S'The seed for the master random number generator\n'
p59345
sS'cpp_type'
p59346
S'unsigned int'
p59347
sS'default'
p59348
S'0'
p59349
sS'name'
p59350
S'seed'
p59351
sS'required'
p59352
I00
sS'group_name'
p59353
S'Advanced'
p59354
sa(dp59355
S'description'
p59356
g3
sS'cpp_type'
p59357
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59358
sS'default'
p59359
S'ComputeAxisymmetric1DSmallStrain'
p59360
sS'name'
p59361
S'type'
p59362
sS'required'
p59363
I00
sS'group_name'
p59364
Nsa(dp59365
S'description'
p59366
S'Flag to correct volumetric locking\n'
p59367
sS'cpp_type'
p59368
S'bool'
p59369
sS'default'
p59370
S'0'
p59371
sS'name'
p59372
S'volumetric_locking_correction'
p59373
sS'required'
p59374
I00
sS'group_name'
p59375
NsasS'name'
p59376
S'/Materials/ComputeAxisymmetric1DSmallStrain'
p59377
sa(dp59378
S'description'
p59379
S'Compute a strain increment for finite strains under axisymmetric assumptions.\n'
p59380
sS'subblocks'
p59381
NsS'parameters'
p59382
(lp59383
(dp59384
S'description'
p59385
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59386
sS'cpp_type'
p59387
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59388
sS'default'
p59389
g3
sS'name'
p59390
S'base_name'
p59391
sS'required'
p59392
I00
sS'group_name'
p59393
Nsa(dp59394
S'description'
p59395
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59396
sS'cpp_type'
p59397
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59398
sS'default'
p59399
g3
sS'name'
p59400
S'block'
p59401
sS'required'
p59402
I00
sS'group_name'
p59403
Nsa(dp59404
S'description'
p59405
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59406
sS'cpp_type'
p59407
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59408
sS'default'
p59409
g3
sS'name'
p59410
S'boundary'
p59411
sS'required'
p59412
I00
sS'group_name'
p59413
Nsa(dp59414
S'description'
p59415
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59416
sS'cpp_type'
p59417
S'bool'
p59418
sS'default'
p59419
S'1'
p59420
sS'name'
p59421
S'compute'
p59422
sS'required'
p59423
I00
sS'group_name'
p59424
Nsa(dp59425
S'description'
p59426
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59427
sS'cpp_type'
p59428
S'bool'
p59429
sS'default'
p59430
S'0'
p59431
sS'name'
p59432
S'constant_on_elem'
p59433
sS'required'
p59434
I00
sS'group_name'
p59435
S'Advanced'
p59436
sa(dp59437
S'description'
p59438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59439
sS'cpp_type'
p59440
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59441
sS'default'
p59442
g3
sS'name'
p59443
S'control_tags'
p59444
sS'required'
p59445
I00
sS'group_name'
p59446
S'Advanced'
p59447
sa(dp59448
S'name'
p59449
S'decomposition_method'
p59450
sS'cpp_type'
p59451
S'MooseEnum'
p59452
sS'default'
p59453
S'TaylorExpansion'
p59454
sS'description'
p59455
S'Methods to calculate the strain and rotation increments\n'
p59456
sS'required'
p59457
I00
sS'options'
p59458
S'TaylorExpansion EigenSolution'
p59459
sS'group_name'
p59460
Nsa(dp59461
S'description'
p59462
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59463
sS'cpp_type'
p59464
S'std::vector<VariableName>'
p59465
sS'default'
p59466
g3
sS'name'
p59467
S'displacements'
p59468
sS'required'
p59469
I01
sS'group_name'
p59470
Nsa(dp59471
S'description'
p59472
S'List of eigenstrains to be applied in this strain calculation\n'
p59473
sS'cpp_type'
p59474
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59475
sS'default'
p59476
g3
sS'name'
p59477
S'eigenstrain_names'
p59478
sS'required'
p59479
I00
sS'group_name'
p59480
Nsa(dp59481
S'description'
p59482
S'Set the enabled status of the MooseObject.\n'
p59483
sS'cpp_type'
p59484
S'bool'
p59485
sS'default'
p59486
S'1'
p59487
sS'name'
p59488
S'enable'
p59489
sS'required'
p59490
I00
sS'group_name'
p59491
S'Advanced'
p59492
sa(dp59493
S'description'
p59494
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59495
sS'cpp_type'
p59496
S'bool'
p59497
sS'default'
p59498
S'1'
p59499
sS'name'
p59500
S'implicit'
p59501
sS'required'
p59502
I00
sS'group_name'
p59503
S'Advanced'
p59504
sa(dp59505
S'description'
p59506
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59507
sS'cpp_type'
p59508
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59509
sS'default'
p59510
g3
sS'name'
p59511
S'output_properties'
p59512
sS'required'
p59513
I00
sS'group_name'
p59514
S'Outputs'
p59515
sa(dp59516
S'description'
p59517
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59518
sS'cpp_type'
p59519
S'std::vector<OutputName, std::allocator<OutputName> >'
p59520
sS'default'
p59521
S'none'
p59522
sS'name'
p59523
S'outputs'
p59524
sS'required'
p59525
I00
sS'group_name'
p59526
S'Outputs'
p59527
sa(dp59528
S'description'
p59529
S'The seed for the master random number generator\n'
p59530
sS'cpp_type'
p59531
S'unsigned int'
p59532
sS'default'
p59533
S'0'
p59534
sS'name'
p59535
S'seed'
p59536
sS'required'
p59537
I00
sS'group_name'
p59538
S'Advanced'
p59539
sa(dp59540
S'description'
p59541
g3
sS'cpp_type'
p59542
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59543
sS'default'
p59544
S'ComputeAxisymmetricRZFiniteStrain'
p59545
sS'name'
p59546
S'type'
p59547
sS'required'
p59548
I00
sS'group_name'
p59549
Nsa(dp59550
S'description'
p59551
S'Flag to correct volumetric locking\n'
p59552
sS'cpp_type'
p59553
S'bool'
p59554
sS'default'
p59555
S'0'
p59556
sS'name'
p59557
S'volumetric_locking_correction'
p59558
sS'required'
p59559
I00
sS'group_name'
p59560
NsasS'name'
p59561
S'/Materials/ComputeAxisymmetricRZFiniteStrain'
p59562
sa(dp59563
S'description'
p59564
S'Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n'
p59565
sS'subblocks'
p59566
NsS'parameters'
p59567
(lp59568
(dp59569
S'description'
p59570
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59571
sS'cpp_type'
p59572
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59573
sS'default'
p59574
g3
sS'name'
p59575
S'base_name'
p59576
sS'required'
p59577
I00
sS'group_name'
p59578
Nsa(dp59579
S'description'
p59580
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59581
sS'cpp_type'
p59582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59583
sS'default'
p59584
g3
sS'name'
p59585
S'block'
p59586
sS'required'
p59587
I00
sS'group_name'
p59588
Nsa(dp59589
S'description'
p59590
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59591
sS'cpp_type'
p59592
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59593
sS'default'
p59594
g3
sS'name'
p59595
S'boundary'
p59596
sS'required'
p59597
I00
sS'group_name'
p59598
Nsa(dp59599
S'description'
p59600
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59601
sS'cpp_type'
p59602
S'bool'
p59603
sS'default'
p59604
S'1'
p59605
sS'name'
p59606
S'compute'
p59607
sS'required'
p59608
I00
sS'group_name'
p59609
Nsa(dp59610
S'description'
p59611
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59612
sS'cpp_type'
p59613
S'bool'
p59614
sS'default'
p59615
S'0'
p59616
sS'name'
p59617
S'constant_on_elem'
p59618
sS'required'
p59619
I00
sS'group_name'
p59620
S'Advanced'
p59621
sa(dp59622
S'description'
p59623
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59624
sS'cpp_type'
p59625
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59626
sS'default'
p59627
g3
sS'name'
p59628
S'control_tags'
p59629
sS'required'
p59630
I00
sS'group_name'
p59631
S'Advanced'
p59632
sa(dp59633
S'description'
p59634
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59635
sS'cpp_type'
p59636
S'std::vector<VariableName>'
p59637
sS'default'
p59638
g3
sS'name'
p59639
S'displacements'
p59640
sS'required'
p59641
I01
sS'group_name'
p59642
Nsa(dp59643
S'description'
p59644
S'List of eigenstrains to be applied in this strain calculation\n'
p59645
sS'cpp_type'
p59646
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59647
sS'default'
p59648
g3
sS'name'
p59649
S'eigenstrain_names'
p59650
sS'required'
p59651
I00
sS'group_name'
p59652
Nsa(dp59653
S'description'
p59654
S'Set the enabled status of the MooseObject.\n'
p59655
sS'cpp_type'
p59656
S'bool'
p59657
sS'default'
p59658
S'1'
p59659
sS'name'
p59660
S'enable'
p59661
sS'required'
p59662
I00
sS'group_name'
p59663
S'Advanced'
p59664
sa(dp59665
S'description'
p59666
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59667
sS'cpp_type'
p59668
S'bool'
p59669
sS'default'
p59670
S'1'
p59671
sS'name'
p59672
S'implicit'
p59673
sS'required'
p59674
I00
sS'group_name'
p59675
S'Advanced'
p59676
sa(dp59677
S'description'
p59678
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59679
sS'cpp_type'
p59680
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59681
sS'default'
p59682
g3
sS'name'
p59683
S'output_properties'
p59684
sS'required'
p59685
I00
sS'group_name'
p59686
S'Outputs'
p59687
sa(dp59688
S'description'
p59689
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59690
sS'cpp_type'
p59691
S'std::vector<OutputName, std::allocator<OutputName> >'
p59692
sS'default'
p59693
S'none'
p59694
sS'name'
p59695
S'outputs'
p59696
sS'required'
p59697
I00
sS'group_name'
p59698
S'Outputs'
p59699
sa(dp59700
S'description'
p59701
S'The seed for the master random number generator\n'
p59702
sS'cpp_type'
p59703
S'unsigned int'
p59704
sS'default'
p59705
S'0'
p59706
sS'name'
p59707
S'seed'
p59708
sS'required'
p59709
I00
sS'group_name'
p59710
S'Advanced'
p59711
sa(dp59712
S'description'
p59713
g3
sS'cpp_type'
p59714
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59715
sS'default'
p59716
S'ComputeAxisymmetricRZIncrementalStrain'
p59717
sS'name'
p59718
S'type'
p59719
sS'required'
p59720
I00
sS'group_name'
p59721
Nsa(dp59722
S'description'
p59723
S'Flag to correct volumetric locking\n'
p59724
sS'cpp_type'
p59725
S'bool'
p59726
sS'default'
p59727
S'0'
p59728
sS'name'
p59729
S'volumetric_locking_correction'
p59730
sS'required'
p59731
I00
sS'group_name'
p59732
NsasS'name'
p59733
S'/Materials/ComputeAxisymmetricRZIncrementalStrain'
p59734
sa(dp59735
S'description'
p59736
S'Compute a small strain in an Axisymmetric geometry\n'
p59737
sS'subblocks'
p59738
NsS'parameters'
p59739
(lp59740
(dp59741
S'description'
p59742
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59743
sS'cpp_type'
p59744
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59745
sS'default'
p59746
g3
sS'name'
p59747
S'base_name'
p59748
sS'required'
p59749
I00
sS'group_name'
p59750
Nsa(dp59751
S'description'
p59752
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59753
sS'cpp_type'
p59754
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59755
sS'default'
p59756
g3
sS'name'
p59757
S'block'
p59758
sS'required'
p59759
I00
sS'group_name'
p59760
Nsa(dp59761
S'description'
p59762
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59763
sS'cpp_type'
p59764
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59765
sS'default'
p59766
g3
sS'name'
p59767
S'boundary'
p59768
sS'required'
p59769
I00
sS'group_name'
p59770
Nsa(dp59771
S'description'
p59772
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59773
sS'cpp_type'
p59774
S'bool'
p59775
sS'default'
p59776
S'1'
p59777
sS'name'
p59778
S'compute'
p59779
sS'required'
p59780
I00
sS'group_name'
p59781
Nsa(dp59782
S'description'
p59783
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59784
sS'cpp_type'
p59785
S'bool'
p59786
sS'default'
p59787
S'0'
p59788
sS'name'
p59789
S'constant_on_elem'
p59790
sS'required'
p59791
I00
sS'group_name'
p59792
S'Advanced'
p59793
sa(dp59794
S'description'
p59795
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59796
sS'cpp_type'
p59797
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59798
sS'default'
p59799
g3
sS'name'
p59800
S'control_tags'
p59801
sS'required'
p59802
I00
sS'group_name'
p59803
S'Advanced'
p59804
sa(dp59805
S'description'
p59806
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59807
sS'cpp_type'
p59808
S'std::vector<VariableName>'
p59809
sS'default'
p59810
g3
sS'name'
p59811
S'displacements'
p59812
sS'required'
p59813
I01
sS'group_name'
p59814
Nsa(dp59815
S'description'
p59816
S'List of eigenstrains to be applied in this strain calculation\n'
p59817
sS'cpp_type'
p59818
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59819
sS'default'
p59820
g3
sS'name'
p59821
S'eigenstrain_names'
p59822
sS'required'
p59823
I00
sS'group_name'
p59824
Nsa(dp59825
S'description'
p59826
S'Set the enabled status of the MooseObject.\n'
p59827
sS'cpp_type'
p59828
S'bool'
p59829
sS'default'
p59830
S'1'
p59831
sS'name'
p59832
S'enable'
p59833
sS'required'
p59834
I00
sS'group_name'
p59835
S'Advanced'
p59836
sa(dp59837
S'description'
p59838
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59839
sS'cpp_type'
p59840
S'bool'
p59841
sS'default'
p59842
S'1'
p59843
sS'name'
p59844
S'implicit'
p59845
sS'required'
p59846
I00
sS'group_name'
p59847
S'Advanced'
p59848
sa(dp59849
S'description'
p59850
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59851
sS'cpp_type'
p59852
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59853
sS'default'
p59854
g3
sS'name'
p59855
S'output_properties'
p59856
sS'required'
p59857
I00
sS'group_name'
p59858
S'Outputs'
p59859
sa(dp59860
S'description'
p59861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59862
sS'cpp_type'
p59863
S'std::vector<OutputName, std::allocator<OutputName> >'
p59864
sS'default'
p59865
S'none'
p59866
sS'name'
p59867
S'outputs'
p59868
sS'required'
p59869
I00
sS'group_name'
p59870
S'Outputs'
p59871
sa(dp59872
S'description'
p59873
S'The seed for the master random number generator\n'
p59874
sS'cpp_type'
p59875
S'unsigned int'
p59876
sS'default'
p59877
S'0'
p59878
sS'name'
p59879
S'seed'
p59880
sS'required'
p59881
I00
sS'group_name'
p59882
S'Advanced'
p59883
sa(dp59884
S'description'
p59885
g3
sS'cpp_type'
p59886
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59887
sS'default'
p59888
S'ComputeAxisymmetricRZSmallStrain'
p59889
sS'name'
p59890
S'type'
p59891
sS'required'
p59892
I00
sS'group_name'
p59893
Nsa(dp59894
S'description'
p59895
S'Flag to correct volumetric locking\n'
p59896
sS'cpp_type'
p59897
S'bool'
p59898
sS'default'
p59899
S'0'
p59900
sS'name'
p59901
S'volumetric_locking_correction'
p59902
sS'required'
p59903
I00
sS'group_name'
p59904
NsasS'name'
p59905
S'/Materials/ComputeAxisymmetricRZSmallStrain'
p59906
sa(dp59907
S'description'
p59908
S'Capped Drucker-Prager plasticity stress calculator\n'
p59909
sS'subblocks'
p59910
NsS'parameters'
p59911
(lp59912
(dp59913
S'description'
p59914
S'A TensorMechanicsPlasticDruckerPrager UserObject that defines the Drucker-Prager parameters (cohesion, friction angle and dilation angle)\n'
p59915
sS'cpp_type'
p59916
S'UserObjectName'
p59917
sS'default'
p59918
g3
sS'name'
p59919
S'DP_model'
p59920
sS'required'
p59921
I01
sS'group_name'
p59922
Nsa(dp59923
S'description'
p59924
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59925
sS'cpp_type'
p59926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59927
sS'default'
p59928
g3
sS'name'
p59929
S'base_name'
p59930
sS'required'
p59931
I00
sS'group_name'
p59932
Nsa(dp59933
S'description'
p59934
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59935
sS'cpp_type'
p59936
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59937
sS'default'
p59938
g3
sS'name'
p59939
S'block'
p59940
sS'required'
p59941
I00
sS'group_name'
p59942
Nsa(dp59943
S'description'
p59944
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59945
sS'cpp_type'
p59946
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59947
sS'default'
p59948
g3
sS'name'
p59949
S'boundary'
p59950
sS'required'
p59951
I00
sS'group_name'
p59952
Nsa(dp59953
S'description'
p59954
S'A TensorMechanicsHardening UserObject that defines hardening of the compressive strength.  In physical situations this is positive.\n'
p59955
sS'cpp_type'
p59956
S'UserObjectName'
p59957
sS'default'
p59958
g3
sS'name'
p59959
S'compressive_strength'
p59960
sS'required'
p59961
I01
sS'group_name'
p59962
Nsa(dp59963
S'description'
p59964
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59965
sS'cpp_type'
p59966
S'bool'
p59967
sS'default'
p59968
S'1'
p59969
sS'name'
p59970
S'compute'
p59971
sS'required'
p59972
I00
sS'group_name'
p59973
Nsa(dp59974
S'description'
p59975
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59976
sS'cpp_type'
p59977
S'bool'
p59978
sS'default'
p59979
S'0'
p59980
sS'name'
p59981
S'constant_on_elem'
p59982
sS'required'
p59983
I00
sS'group_name'
p59984
S'Advanced'
p59985
sa(dp59986
S'description'
p59987
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59988
sS'cpp_type'
p59989
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59990
sS'default'
p59991
g3
sS'name'
p59992
S'control_tags'
p59993
sS'required'
p59994
I00
sS'group_name'
p59995
S'Advanced'
p59996
sa(dp59997
S'description'
p59998
S'Set the enabled status of the MooseObject.\n'
p59999
sS'cpp_type'
p60000
S'bool'
p60001
sS'default'
p60002
S'1'
p60003
sS'name'
p60004
S'enable'
p60005
sS'required'
p60006
I00
sS'group_name'
p60007
S'Advanced'
p60008
sa(dp60009
S'description'
p60010
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60011
sS'cpp_type'
p60012
S'bool'
p60013
sS'default'
p60014
S'1'
p60015
sS'name'
p60016
S'implicit'
p60017
sS'required'
p60018
I00
sS'group_name'
p60019
S'Advanced'
p60020
sa(dp60021
S'description'
p60022
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p60023
sS'cpp_type'
p60024
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p60025
sS'default'
p60026
g3
sS'name'
p60027
S'initial_stress'
p60028
sS'required'
p60029
I00
sS'group_name'
p60030
Nsa(dp60031
S'description'
p60032
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p60033
sS'cpp_type'
p60034
S'unsigned int'
p60035
sS'default'
p60036
S'20'
p60037
sS'name'
p60038
S'max_NR_iterations'
p60039
sS'required'
p60040
I00
sS'group_name'
p60041
Nsa(dp60042
S'description'
p60043
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p60044
sS'cpp_type'
p60045
S'double'
p60046
sS'default'
p60047
S'1'
p60048
sS'name'
p60049
S'min_step_size'
p60050
sS'required'
p60051
I00
sS'group_name'
p60052
Nsa(dp60053
S'description'
p60054
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60055
sS'cpp_type'
p60056
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60057
sS'default'
p60058
g3
sS'name'
p60059
S'output_properties'
p60060
sS'required'
p60061
I00
sS'group_name'
p60062
S'Outputs'
p60063
sa(dp60064
S'description'
p60065
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60066
sS'cpp_type'
p60067
S'std::vector<OutputName, std::allocator<OutputName> >'
p60068
sS'default'
p60069
S'none'
p60070
sS'name'
p60071
S'outputs'
p60072
sS'required'
p60073
I00
sS'group_name'
p60074
S'Outputs'
p60075
sa(dp60076
S'description'
p60077
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p60078
sS'cpp_type'
p60079
S'bool'
p60080
sS'default'
p60081
S'1'
p60082
sS'name'
p60083
S'perfect_guess'
p60084
sS'required'
p60085
I00
sS'group_name'
p60086
Nsa(dp60087
S'description'
p60088
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p60089
sS'cpp_type'
p60090
S'bool'
p60091
sS'default'
p60092
S'0'
p60093
sS'name'
p60094
S'perform_finite_strain_rotations'
p60095
sS'required'
p60096
I00
sS'group_name'
p60097
Nsa(dp60098
S'description'
p60099
S'The seed for the master random number generator\n'
p60100
sS'cpp_type'
p60101
S'unsigned int'
p60102
sS'default'
p60103
S'0'
p60104
sS'name'
p60105
S'seed'
p60106
sS'required'
p60107
I00
sS'group_name'
p60108
S'Advanced'
p60109
sa(dp60110
S'description'
p60111
S'If true, and if the trial stress exceeds the tensile strength, then the user gaurantees that the returned stress will be independent of the compressive strength.\n'
p60112
sS'cpp_type'
p60113
S'bool'
p60114
sS'default'
p60115
S'1'
p60116
sS'name'
p60117
S'small_dilation'
p60118
sS'required'
p60119
I00
sS'group_name'
p60120
Nsa(dp60121
S'description'
p60122
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p60123
sS'cpp_type'
p60124
S'double'
p60125
sS'default'
p60126
g3
sS'name'
p60127
S'smoothing_tol'
p60128
sS'required'
p60129
I01
sS'group_name'
p60130
Nsa(dp60131
S'description'
p60132
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p60133
sS'cpp_type'
p60134
S'bool'
p60135
sS'default'
p60136
S'0'
p60137
sS'name'
p60138
S'store_stress_old'
p60139
sS'required'
p60140
I00
sS'group_name'
p60141
Nsa(dp60142
S'name'
p60143
S'tangent_operator'
p60144
sS'cpp_type'
p60145
S'MooseEnum'
p60146
sS'default'
p60147
S'nonlinear'
p60148
sS'description'
p60149
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p60150
sS'required'
p60151
I00
sS'options'
p60152
S'elastic nonlinear'
p60153
sS'group_name'
p60154
Nsa(dp60155
S'description'
p60156
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p60157
sS'cpp_type'
p60158
S'UserObjectName'
p60159
sS'default'
p60160
g3
sS'name'
p60161
S'tensile_strength'
p60162
sS'required'
p60163
I01
sS'group_name'
p60164
Nsa(dp60165
S'description'
p60166
S'The cone vertex at J2 = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p60167
sS'cpp_type'
p60168
S'double'
p60169
sS'default'
p60170
g3
sS'name'
p60171
S'tip_smoother'
p60172
sS'required'
p60173
I01
sS'group_name'
p60174
Nsa(dp60175
S'description'
p60176
g3
sS'cpp_type'
p60177
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60178
sS'default'
p60179
S'ComputeCappedDruckerPragerStress'
p60180
sS'name'
p60181
S'type'
p60182
sS'required'
p60183
I00
sS'group_name'
p60184
Nsa(dp60185
S'description'
p60186
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p60187
sS'cpp_type'
p60188
S'bool'
p60189
sS'default'
p60190
S'0'
p60191
sS'name'
p60192
S'warn_about_precision_loss'
p60193
sS'required'
p60194
I00
sS'group_name'
p60195
Nsa(dp60196
S'description'
p60197
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p60198
sS'cpp_type'
p60199
S'double'
p60200
sS'default'
p60201
g3
sS'name'
p60202
S'yield_function_tol'
p60203
sS'required'
p60204
I01
sS'group_name'
p60205
NsasS'name'
p60206
S'/Materials/ComputeCappedDruckerPragerStress'
p60207
sa(dp60208
S'description'
p60209
S'Capped weak inclined plane plasticity stress calculator\n'
p60210
sS'subblocks'
p60211
NsS'parameters'
p60212
(lp60213
(dp60214
S'description'
p60215
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60216
sS'cpp_type'
p60217
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60218
sS'default'
p60219
g3
sS'name'
p60220
S'base_name'
p60221
sS'required'
p60222
I00
sS'group_name'
p60223
Nsa(dp60224
S'description'
p60225
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60226
sS'cpp_type'
p60227
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60228
sS'default'
p60229
g3
sS'name'
p60230
S'block'
p60231
sS'required'
p60232
I00
sS'group_name'
p60233
Nsa(dp60234
S'description'
p60235
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60236
sS'cpp_type'
p60237
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60238
sS'default'
p60239
g3
sS'name'
p60240
S'boundary'
p60241
sS'required'
p60242
I00
sS'group_name'
p60243
Nsa(dp60244
S'description'
p60245
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p60246
sS'cpp_type'
p60247
S'UserObjectName'
p60248
sS'default'
p60249
g3
sS'name'
p60250
S'cohesion'
p60251
sS'required'
p60252
I01
sS'group_name'
p60253
Nsa(dp60254
S'description'
p60255
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n'
p60256
sS'cpp_type'
p60257
S'UserObjectName'
p60258
sS'default'
p60259
g3
sS'name'
p60260
S'compressive_strength'
p60261
sS'required'
p60262
I01
sS'group_name'
p60263
Nsa(dp60264
S'description'
p60265
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60266
sS'cpp_type'
p60267
S'bool'
p60268
sS'default'
p60269
S'1'
p60270
sS'name'
p60271
S'compute'
p60272
sS'required'
p60273
I00
sS'group_name'
p60274
Nsa(dp60275
S'description'
p60276
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60277
sS'cpp_type'
p60278
S'bool'
p60279
sS'default'
p60280
S'0'
p60281
sS'name'
p60282
S'constant_on_elem'
p60283
sS'required'
p60284
I00
sS'group_name'
p60285
S'Advanced'
p60286
sa(dp60287
S'description'
p60288
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60289
sS'cpp_type'
p60290
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60291
sS'default'
p60292
g3
sS'name'
p60293
S'control_tags'
p60294
sS'required'
p60295
I00
sS'group_name'
p60296
S'Advanced'
p60297
sa(dp60298
S'description'
p60299
S'Set the enabled status of the MooseObject.\n'
p60300
sS'cpp_type'
p60301
S'bool'
p60302
sS'default'
p60303
S'1'
p60304
sS'name'
p60305
S'enable'
p60306
sS'required'
p60307
I00
sS'group_name'
p60308
S'Advanced'
p60309
sa(dp60310
S'description'
p60311
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60312
sS'cpp_type'
p60313
S'bool'
p60314
sS'default'
p60315
S'1'
p60316
sS'name'
p60317
S'implicit'
p60318
sS'required'
p60319
I00
sS'group_name'
p60320
S'Advanced'
p60321
sa(dp60322
S'description'
p60323
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p60324
sS'cpp_type'
p60325
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p60326
sS'default'
p60327
g3
sS'name'
p60328
S'initial_stress'
p60329
sS'required'
p60330
I00
sS'group_name'
p60331
Nsa(dp60332
S'description'
p60333
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p60334
sS'cpp_type'
p60335
S'unsigned int'
p60336
sS'default'
p60337
S'20'
p60338
sS'name'
p60339
S'max_NR_iterations'
p60340
sS'required'
p60341
I00
sS'group_name'
p60342
Nsa(dp60343
S'description'
p60344
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p60345
sS'cpp_type'
p60346
S'double'
p60347
sS'default'
p60348
S'1'
p60349
sS'name'
p60350
S'min_step_size'
p60351
sS'required'
p60352
I00
sS'group_name'
p60353
Nsa(dp60354
S'description'
p60355
S'The normal vector to the weak plane\n'
p60356
sS'cpp_type'
p60357
S'libMesh::VectorValue<double>'
p60358
sS'default'
p60359
g3
sS'name'
p60360
S'normal_vector'
p60361
sS'required'
p60362
I01
sS'group_name'
p60363
Nsa(dp60364
S'description'
p60365
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60366
sS'cpp_type'
p60367
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60368
sS'default'
p60369
g3
sS'name'
p60370
S'output_properties'
p60371
sS'required'
p60372
I00
sS'group_name'
p60373
S'Outputs'
p60374
sa(dp60375
S'description'
p60376
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60377
sS'cpp_type'
p60378
S'std::vector<OutputName, std::allocator<OutputName> >'
p60379
sS'default'
p60380
S'none'
p60381
sS'name'
p60382
S'outputs'
p60383
sS'required'
p60384
I00
sS'group_name'
p60385
S'Outputs'
p60386
sa(dp60387
S'description'
p60388
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p60389
sS'cpp_type'
p60390
S'bool'
p60391
sS'default'
p60392
S'1'
p60393
sS'name'
p60394
S'perfect_guess'
p60395
sS'required'
p60396
I00
sS'group_name'
p60397
Nsa(dp60398
S'description'
p60399
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p60400
sS'cpp_type'
p60401
S'bool'
p60402
sS'default'
p60403
S'0'
p60404
sS'name'
p60405
S'perform_finite_strain_rotations'
p60406
sS'required'
p60407
I00
sS'group_name'
p60408
Nsa(dp60409
S'description'
p60410
S'The seed for the master random number generator\n'
p60411
sS'cpp_type'
p60412
S'unsigned int'
p60413
sS'default'
p60414
S'0'
p60415
sS'name'
p60416
S'seed'
p60417
sS'required'
p60418
I00
sS'group_name'
p60419
S'Advanced'
p60420
sa(dp60421
S'description'
p60422
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p60423
sS'cpp_type'
p60424
S'double'
p60425
sS'default'
p60426
g3
sS'name'
p60427
S'smoothing_tol'
p60428
sS'required'
p60429
I01
sS'group_name'
p60430
Nsa(dp60431
S'description'
p60432
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p60433
sS'cpp_type'
p60434
S'bool'
p60435
sS'default'
p60436
S'0'
p60437
sS'name'
p60438
S'store_stress_old'
p60439
sS'required'
p60440
I00
sS'group_name'
p60441
Nsa(dp60442
S'description'
p60443
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p60444
sS'cpp_type'
p60445
S'UserObjectName'
p60446
sS'default'
p60447
g3
sS'name'
p60448
S'tan_dilation_angle'
p60449
sS'required'
p60450
I01
sS'group_name'
p60451
Nsa(dp60452
S'description'
p60453
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p60454
sS'cpp_type'
p60455
S'UserObjectName'
p60456
sS'default'
p60457
g3
sS'name'
p60458
S'tan_friction_angle'
p60459
sS'required'
p60460
I01
sS'group_name'
p60461
Nsa(dp60462
S'name'
p60463
S'tangent_operator'
p60464
sS'cpp_type'
p60465
S'MooseEnum'
p60466
sS'default'
p60467
S'nonlinear'
p60468
sS'description'
p60469
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p60470
sS'required'
p60471
I00
sS'options'
p60472
S'elastic nonlinear'
p60473
sS'group_name'
p60474
Nsa(dp60475
S'description'
p60476
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p60477
sS'cpp_type'
p60478
S'UserObjectName'
p60479
sS'default'
p60480
g3
sS'name'
p60481
S'tensile_strength'
p60482
sS'required'
p60483
I01
sS'group_name'
p60484
Nsa(dp60485
S'description'
p60486
S'The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p60487
sS'cpp_type'
p60488
S'double'
p60489
sS'default'
p60490
g3
sS'name'
p60491
S'tip_smoother'
p60492
sS'required'
p60493
I01
sS'group_name'
p60494
Nsa(dp60495
S'description'
p60496
g3
sS'cpp_type'
p60497
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60498
sS'default'
p60499
S'ComputeCappedWeakInclinedPlaneStress'
p60500
sS'name'
p60501
S'type'
p60502
sS'required'
p60503
I00
sS'group_name'
p60504
Nsa(dp60505
S'description'
p60506
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p60507
sS'cpp_type'
p60508
S'bool'
p60509
sS'default'
p60510
S'0'
p60511
sS'name'
p60512
S'warn_about_precision_loss'
p60513
sS'required'
p60514
I00
sS'group_name'
p60515
Nsa(dp60516
S'description'
p60517
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p60518
sS'cpp_type'
p60519
S'double'
p60520
sS'default'
p60521
g3
sS'name'
p60522
S'yield_function_tol'
p60523
sS'required'
p60524
I01
sS'group_name'
p60525
NsasS'name'
p60526
S'/Materials/ComputeCappedWeakInclinedPlaneStress'
p60527
sa(dp60528
S'description'
p60529
S'Capped weak-plane plasticity Cosserat stress calculator\n'
p60530
sS'subblocks'
p60531
NsS'parameters'
p60532
(lp60533
(dp60534
S'description'
p60535
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60536
sS'cpp_type'
p60537
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60538
sS'default'
p60539
g3
sS'name'
p60540
S'base_name'
p60541
sS'required'
p60542
I00
sS'group_name'
p60543
Nsa(dp60544
S'description'
p60545
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60546
sS'cpp_type'
p60547
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60548
sS'default'
p60549
g3
sS'name'
p60550
S'block'
p60551
sS'required'
p60552
I00
sS'group_name'
p60553
Nsa(dp60554
S'description'
p60555
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60556
sS'cpp_type'
p60557
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60558
sS'default'
p60559
g3
sS'name'
p60560
S'boundary'
p60561
sS'required'
p60562
I00
sS'group_name'
p60563
Nsa(dp60564
S'description'
p60565
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p60566
sS'cpp_type'
p60567
S'UserObjectName'
p60568
sS'default'
p60569
g3
sS'name'
p60570
S'cohesion'
p60571
sS'required'
p60572
I01
sS'group_name'
p60573
Nsa(dp60574
S'description'
p60575
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n'
p60576
sS'cpp_type'
p60577
S'UserObjectName'
p60578
sS'default'
p60579
g3
sS'name'
p60580
S'compressive_strength'
p60581
sS'required'
p60582
I01
sS'group_name'
p60583
Nsa(dp60584
S'description'
p60585
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60586
sS'cpp_type'
p60587
S'bool'
p60588
sS'default'
p60589
S'1'
p60590
sS'name'
p60591
S'compute'
p60592
sS'required'
p60593
I00
sS'group_name'
p60594
Nsa(dp60595
S'description'
p60596
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60597
sS'cpp_type'
p60598
S'bool'
p60599
sS'default'
p60600
S'0'
p60601
sS'name'
p60602
S'constant_on_elem'
p60603
sS'required'
p60604
I00
sS'group_name'
p60605
S'Advanced'
p60606
sa(dp60607
S'description'
p60608
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60609
sS'cpp_type'
p60610
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60611
sS'default'
p60612
g3
sS'name'
p60613
S'control_tags'
p60614
sS'required'
p60615
I00
sS'group_name'
p60616
S'Advanced'
p60617
sa(dp60618
S'description'
p60619
S'Set the enabled status of the MooseObject.\n'
p60620
sS'cpp_type'
p60621
S'bool'
p60622
sS'default'
p60623
S'1'
p60624
sS'name'
p60625
S'enable'
p60626
sS'required'
p60627
I00
sS'group_name'
p60628
S'Advanced'
p60629
sa(dp60630
S'description'
p60631
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60632
sS'cpp_type'
p60633
S'bool'
p60634
sS'default'
p60635
S'1'
p60636
sS'name'
p60637
S'implicit'
p60638
sS'required'
p60639
I00
sS'group_name'
p60640
S'Advanced'
p60641
sa(dp60642
S'description'
p60643
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p60644
sS'cpp_type'
p60645
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p60646
sS'default'
p60647
g3
sS'name'
p60648
S'initial_stress'
p60649
sS'required'
p60650
I00
sS'group_name'
p60651
Nsa(dp60652
S'description'
p60653
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p60654
sS'cpp_type'
p60655
S'unsigned int'
p60656
sS'default'
p60657
S'20'
p60658
sS'name'
p60659
S'max_NR_iterations'
p60660
sS'required'
p60661
I00
sS'group_name'
p60662
Nsa(dp60663
S'description'
p60664
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p60665
sS'cpp_type'
p60666
S'double'
p60667
sS'default'
p60668
S'1'
p60669
sS'name'
p60670
S'min_step_size'
p60671
sS'required'
p60672
I00
sS'group_name'
p60673
Nsa(dp60674
S'description'
p60675
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60676
sS'cpp_type'
p60677
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60678
sS'default'
p60679
g3
sS'name'
p60680
S'output_properties'
p60681
sS'required'
p60682
I00
sS'group_name'
p60683
S'Outputs'
p60684
sa(dp60685
S'description'
p60686
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60687
sS'cpp_type'
p60688
S'std::vector<OutputName, std::allocator<OutputName> >'
p60689
sS'default'
p60690
S'none'
p60691
sS'name'
p60692
S'outputs'
p60693
sS'required'
p60694
I00
sS'group_name'
p60695
S'Outputs'
p60696
sa(dp60697
S'description'
p60698
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p60699
sS'cpp_type'
p60700
S'bool'
p60701
sS'default'
p60702
S'1'
p60703
sS'name'
p60704
S'perfect_guess'
p60705
sS'required'
p60706
I00
sS'group_name'
p60707
Nsa(dp60708
S'description'
p60709
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p60710
sS'cpp_type'
p60711
S'bool'
p60712
sS'default'
p60713
S'0'
p60714
sS'name'
p60715
S'perform_finite_strain_rotations'
p60716
sS'required'
p60717
I00
sS'group_name'
p60718
Nsa(dp60719
S'description'
p60720
S'The seed for the master random number generator\n'
p60721
sS'cpp_type'
p60722
S'unsigned int'
p60723
sS'default'
p60724
S'0'
p60725
sS'name'
p60726
S'seed'
p60727
sS'required'
p60728
I00
sS'group_name'
p60729
S'Advanced'
p60730
sa(dp60731
S'description'
p60732
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p60733
sS'cpp_type'
p60734
S'double'
p60735
sS'default'
p60736
g3
sS'name'
p60737
S'smoothing_tol'
p60738
sS'required'
p60739
I01
sS'group_name'
p60740
Nsa(dp60741
S'description'
p60742
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p60743
sS'cpp_type'
p60744
S'bool'
p60745
sS'default'
p60746
S'0'
p60747
sS'name'
p60748
S'store_stress_old'
p60749
sS'required'
p60750
I00
sS'group_name'
p60751
Nsa(dp60752
S'description'
p60753
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p60754
sS'cpp_type'
p60755
S'UserObjectName'
p60756
sS'default'
p60757
g3
sS'name'
p60758
S'tan_dilation_angle'
p60759
sS'required'
p60760
I01
sS'group_name'
p60761
Nsa(dp60762
S'description'
p60763
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p60764
sS'cpp_type'
p60765
S'UserObjectName'
p60766
sS'default'
p60767
g3
sS'name'
p60768
S'tan_friction_angle'
p60769
sS'required'
p60770
I01
sS'group_name'
p60771
Nsa(dp60772
S'name'
p60773
S'tangent_operator'
p60774
sS'cpp_type'
p60775
S'MooseEnum'
p60776
sS'default'
p60777
S'nonlinear'
p60778
sS'description'
p60779
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p60780
sS'required'
p60781
I00
sS'options'
p60782
S'elastic nonlinear'
p60783
sS'group_name'
p60784
Nsa(dp60785
S'description'
p60786
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p60787
sS'cpp_type'
p60788
S'UserObjectName'
p60789
sS'default'
p60790
g3
sS'name'
p60791
S'tensile_strength'
p60792
sS'required'
p60793
I01
sS'group_name'
p60794
Nsa(dp60795
S'description'
p60796
S'The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p60797
sS'cpp_type'
p60798
S'double'
p60799
sS'default'
p60800
g3
sS'name'
p60801
S'tip_smoother'
p60802
sS'required'
p60803
I01
sS'group_name'
p60804
Nsa(dp60805
S'description'
p60806
g3
sS'cpp_type'
p60807
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60808
sS'default'
p60809
S'ComputeCappedWeakPlaneCosseratStress'
p60810
sS'name'
p60811
S'type'
p60812
sS'required'
p60813
I00
sS'group_name'
p60814
Nsa(dp60815
S'description'
p60816
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p60817
sS'cpp_type'
p60818
S'bool'
p60819
sS'default'
p60820
S'0'
p60821
sS'name'
p60822
S'warn_about_precision_loss'
p60823
sS'required'
p60824
I00
sS'group_name'
p60825
Nsa(dp60826
S'description'
p60827
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p60828
sS'cpp_type'
p60829
S'double'
p60830
sS'default'
p60831
g3
sS'name'
p60832
S'yield_function_tol'
p60833
sS'required'
p60834
I01
sS'group_name'
p60835
NsasS'name'
p60836
S'/Materials/ComputeCappedWeakPlaneCosseratStress'
p60837
sa(dp60838
S'description'
p60839
S'Capped weak-plane plasticity stress calculator\n'
p60840
sS'subblocks'
p60841
NsS'parameters'
p60842
(lp60843
(dp60844
S'description'
p60845
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60846
sS'cpp_type'
p60847
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60848
sS'default'
p60849
g3
sS'name'
p60850
S'base_name'
p60851
sS'required'
p60852
I00
sS'group_name'
p60853
Nsa(dp60854
S'description'
p60855
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60856
sS'cpp_type'
p60857
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60858
sS'default'
p60859
g3
sS'name'
p60860
S'block'
p60861
sS'required'
p60862
I00
sS'group_name'
p60863
Nsa(dp60864
S'description'
p60865
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60866
sS'cpp_type'
p60867
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60868
sS'default'
p60869
g3
sS'name'
p60870
S'boundary'
p60871
sS'required'
p60872
I00
sS'group_name'
p60873
Nsa(dp60874
S'description'
p60875
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p60876
sS'cpp_type'
p60877
S'UserObjectName'
p60878
sS'default'
p60879
g3
sS'name'
p60880
S'cohesion'
p60881
sS'required'
p60882
I01
sS'group_name'
p60883
Nsa(dp60884
S'description'
p60885
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n'
p60886
sS'cpp_type'
p60887
S'UserObjectName'
p60888
sS'default'
p60889
g3
sS'name'
p60890
S'compressive_strength'
p60891
sS'required'
p60892
I01
sS'group_name'
p60893
Nsa(dp60894
S'description'
p60895
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60896
sS'cpp_type'
p60897
S'bool'
p60898
sS'default'
p60899
S'1'
p60900
sS'name'
p60901
S'compute'
p60902
sS'required'
p60903
I00
sS'group_name'
p60904
Nsa(dp60905
S'description'
p60906
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60907
sS'cpp_type'
p60908
S'bool'
p60909
sS'default'
p60910
S'0'
p60911
sS'name'
p60912
S'constant_on_elem'
p60913
sS'required'
p60914
I00
sS'group_name'
p60915
S'Advanced'
p60916
sa(dp60917
S'description'
p60918
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60919
sS'cpp_type'
p60920
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60921
sS'default'
p60922
g3
sS'name'
p60923
S'control_tags'
p60924
sS'required'
p60925
I00
sS'group_name'
p60926
S'Advanced'
p60927
sa(dp60928
S'description'
p60929
S'Set the enabled status of the MooseObject.\n'
p60930
sS'cpp_type'
p60931
S'bool'
p60932
sS'default'
p60933
S'1'
p60934
sS'name'
p60935
S'enable'
p60936
sS'required'
p60937
I00
sS'group_name'
p60938
S'Advanced'
p60939
sa(dp60940
S'description'
p60941
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60942
sS'cpp_type'
p60943
S'bool'
p60944
sS'default'
p60945
S'1'
p60946
sS'name'
p60947
S'implicit'
p60948
sS'required'
p60949
I00
sS'group_name'
p60950
S'Advanced'
p60951
sa(dp60952
S'description'
p60953
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p60954
sS'cpp_type'
p60955
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p60956
sS'default'
p60957
g3
sS'name'
p60958
S'initial_stress'
p60959
sS'required'
p60960
I00
sS'group_name'
p60961
Nsa(dp60962
S'description'
p60963
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p60964
sS'cpp_type'
p60965
S'unsigned int'
p60966
sS'default'
p60967
S'20'
p60968
sS'name'
p60969
S'max_NR_iterations'
p60970
sS'required'
p60971
I00
sS'group_name'
p60972
Nsa(dp60973
S'description'
p60974
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p60975
sS'cpp_type'
p60976
S'double'
p60977
sS'default'
p60978
S'1'
p60979
sS'name'
p60980
S'min_step_size'
p60981
sS'required'
p60982
I00
sS'group_name'
p60983
Nsa(dp60984
S'description'
p60985
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60986
sS'cpp_type'
p60987
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60988
sS'default'
p60989
g3
sS'name'
p60990
S'output_properties'
p60991
sS'required'
p60992
I00
sS'group_name'
p60993
S'Outputs'
p60994
sa(dp60995
S'description'
p60996
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60997
sS'cpp_type'
p60998
S'std::vector<OutputName, std::allocator<OutputName> >'
p60999
sS'default'
p61000
S'none'
p61001
sS'name'
p61002
S'outputs'
p61003
sS'required'
p61004
I00
sS'group_name'
p61005
S'Outputs'
p61006
sa(dp61007
S'description'
p61008
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p61009
sS'cpp_type'
p61010
S'bool'
p61011
sS'default'
p61012
S'1'
p61013
sS'name'
p61014
S'perfect_guess'
p61015
sS'required'
p61016
I00
sS'group_name'
p61017
Nsa(dp61018
S'description'
p61019
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p61020
sS'cpp_type'
p61021
S'bool'
p61022
sS'default'
p61023
S'0'
p61024
sS'name'
p61025
S'perform_finite_strain_rotations'
p61026
sS'required'
p61027
I00
sS'group_name'
p61028
Nsa(dp61029
S'description'
p61030
S'The seed for the master random number generator\n'
p61031
sS'cpp_type'
p61032
S'unsigned int'
p61033
sS'default'
p61034
S'0'
p61035
sS'name'
p61036
S'seed'
p61037
sS'required'
p61038
I00
sS'group_name'
p61039
S'Advanced'
p61040
sa(dp61041
S'description'
p61042
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p61043
sS'cpp_type'
p61044
S'double'
p61045
sS'default'
p61046
g3
sS'name'
p61047
S'smoothing_tol'
p61048
sS'required'
p61049
I01
sS'group_name'
p61050
Nsa(dp61051
S'description'
p61052
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p61053
sS'cpp_type'
p61054
S'bool'
p61055
sS'default'
p61056
S'0'
p61057
sS'name'
p61058
S'store_stress_old'
p61059
sS'required'
p61060
I00
sS'group_name'
p61061
Nsa(dp61062
S'description'
p61063
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p61064
sS'cpp_type'
p61065
S'UserObjectName'
p61066
sS'default'
p61067
g3
sS'name'
p61068
S'tan_dilation_angle'
p61069
sS'required'
p61070
I01
sS'group_name'
p61071
Nsa(dp61072
S'description'
p61073
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p61074
sS'cpp_type'
p61075
S'UserObjectName'
p61076
sS'default'
p61077
g3
sS'name'
p61078
S'tan_friction_angle'
p61079
sS'required'
p61080
I01
sS'group_name'
p61081
Nsa(dp61082
S'name'
p61083
S'tangent_operator'
p61084
sS'cpp_type'
p61085
S'MooseEnum'
p61086
sS'default'
p61087
S'nonlinear'
p61088
sS'description'
p61089
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p61090
sS'required'
p61091
I00
sS'options'
p61092
S'elastic nonlinear'
p61093
sS'group_name'
p61094
Nsa(dp61095
S'description'
p61096
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p61097
sS'cpp_type'
p61098
S'UserObjectName'
p61099
sS'default'
p61100
g3
sS'name'
p61101
S'tensile_strength'
p61102
sS'required'
p61103
I01
sS'group_name'
p61104
Nsa(dp61105
S'description'
p61106
S'The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p61107
sS'cpp_type'
p61108
S'double'
p61109
sS'default'
p61110
g3
sS'name'
p61111
S'tip_smoother'
p61112
sS'required'
p61113
I01
sS'group_name'
p61114
Nsa(dp61115
S'description'
p61116
g3
sS'cpp_type'
p61117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61118
sS'default'
p61119
S'ComputeCappedWeakPlaneStress'
p61120
sS'name'
p61121
S'type'
p61122
sS'required'
p61123
I00
sS'group_name'
p61124
Nsa(dp61125
S'description'
p61126
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p61127
sS'cpp_type'
p61128
S'bool'
p61129
sS'default'
p61130
S'0'
p61131
sS'name'
p61132
S'warn_about_precision_loss'
p61133
sS'required'
p61134
I00
sS'group_name'
p61135
Nsa(dp61136
S'description'
p61137
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p61138
sS'cpp_type'
p61139
S'double'
p61140
sS'default'
p61141
g3
sS'name'
p61142
S'yield_function_tol'
p61143
sS'required'
p61144
I01
sS'group_name'
p61145
NsasS'name'
p61146
S'/Materials/ComputeCappedWeakPlaneStress'
p61147
sa(dp61148
S'description'
p61149
S'Compute concentration dependent elasticity tensor.\n'
p61150
sS'subblocks'
p61151
NsS'parameters'
p61152
(lp61153
(dp61154
S'description'
p61155
S'Stiffness tensor for zero concentration phase\n'
p61156
sS'cpp_type'
p61157
S'std::vector<double, std::allocator<double> >'
p61158
sS'default'
p61159
g3
sS'name'
p61160
S'C0_ijkl'
p61161
sS'required'
p61162
I01
sS'group_name'
p61163
Nsa(dp61164
S'description'
p61165
S'Stiffness tensor for phase having concentration 1.0\n'
p61166
sS'cpp_type'
p61167
S'std::vector<double, std::allocator<double> >'
p61168
sS'default'
p61169
g3
sS'name'
p61170
S'C1_ijkl'
p61171
sS'required'
p61172
I01
sS'group_name'
p61173
Nsa(dp61174
S'description'
p61175
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61176
sS'cpp_type'
p61177
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61178
sS'default'
p61179
g3
sS'name'
p61180
S'base_name'
p61181
sS'required'
p61182
I00
sS'group_name'
p61183
Nsa(dp61184
S'description'
p61185
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61186
sS'cpp_type'
p61187
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61188
sS'default'
p61189
g3
sS'name'
p61190
S'block'
p61191
sS'required'
p61192
I00
sS'group_name'
p61193
Nsa(dp61194
S'description'
p61195
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61196
sS'cpp_type'
p61197
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61198
sS'default'
p61199
g3
sS'name'
p61200
S'boundary'
p61201
sS'required'
p61202
I00
sS'group_name'
p61203
Nsa(dp61204
S'description'
p61205
S'Concentration\n'
p61206
sS'cpp_type'
p61207
S'std::vector<VariableName>'
p61208
sS'default'
p61209
g3
sS'name'
p61210
S'c'
p61211
sS'required'
p61212
I01
sS'group_name'
p61213
Nsa(dp61214
S'description'
p61215
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61216
sS'cpp_type'
p61217
S'bool'
p61218
sS'default'
p61219
S'1'
p61220
sS'name'
p61221
S'compute'
p61222
sS'required'
p61223
I00
sS'group_name'
p61224
Nsa(dp61225
S'description'
p61226
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61227
sS'cpp_type'
p61228
S'bool'
p61229
sS'default'
p61230
S'0'
p61231
sS'name'
p61232
S'constant_on_elem'
p61233
sS'required'
p61234
I00
sS'group_name'
p61235
S'Advanced'
p61236
sa(dp61237
S'description'
p61238
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61239
sS'cpp_type'
p61240
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61241
sS'default'
p61242
g3
sS'name'
p61243
S'control_tags'
p61244
sS'required'
p61245
I00
sS'group_name'
p61246
S'Advanced'
p61247
sa(dp61248
S'description'
p61249
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p61250
sS'cpp_type'
p61251
S'FunctionName'
p61252
sS'default'
p61253
g3
sS'name'
p61254
S'elasticity_tensor_prefactor'
p61255
sS'required'
p61256
I00
sS'group_name'
p61257
Nsa(dp61258
S'description'
p61259
S'Set the enabled status of the MooseObject.\n'
p61260
sS'cpp_type'
p61261
S'bool'
p61262
sS'default'
p61263
S'1'
p61264
sS'name'
p61265
S'enable'
p61266
sS'required'
p61267
I00
sS'group_name'
p61268
S'Advanced'
p61269
sa(dp61270
S'description'
p61271
S'Euler angle in direction 1\n'
p61272
sS'cpp_type'
p61273
S'double'
p61274
sS'default'
p61275
S'0'
p61276
sS'name'
p61277
S'euler_angle_1'
p61278
sS'required'
p61279
I00
sS'group_name'
p61280
Nsa(dp61281
S'description'
p61282
S'Euler angle in direction 2\n'
p61283
sS'cpp_type'
p61284
S'double'
p61285
sS'default'
p61286
S'0'
p61287
sS'name'
p61288
S'euler_angle_2'
p61289
sS'required'
p61290
I00
sS'group_name'
p61291
Nsa(dp61292
S'description'
p61293
S'Euler angle in direction 3\n'
p61294
sS'cpp_type'
p61295
S'double'
p61296
sS'default'
p61297
S'0'
p61298
sS'name'
p61299
S'euler_angle_3'
p61300
sS'required'
p61301
I00
sS'group_name'
p61302
Nsa(dp61303
S'name'
p61304
S'fill_method0'
p61305
sS'cpp_type'
p61306
S'MooseEnum'
p61307
sS'default'
p61308
S'symmetric9'
p61309
sS'description'
p61310
S'The fill method\n'
p61311
sS'required'
p61312
I00
sS'options'
p61313
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p61314
sS'group_name'
p61315
Nsa(dp61316
S'name'
p61317
S'fill_method1'
p61318
sS'cpp_type'
p61319
S'MooseEnum'
p61320
sS'default'
p61321
S'symmetric9'
p61322
sS'description'
p61323
S'The fill method\n'
p61324
sS'required'
p61325
I00
sS'options'
p61326
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p61327
sS'group_name'
p61328
Nsa(dp61329
S'description'
p61330
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61331
sS'cpp_type'
p61332
S'bool'
p61333
sS'default'
p61334
S'1'
p61335
sS'name'
p61336
S'implicit'
p61337
sS'required'
p61338
I00
sS'group_name'
p61339
S'Advanced'
p61340
sa(dp61341
S'description'
p61342
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61343
sS'cpp_type'
p61344
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61345
sS'default'
p61346
g3
sS'name'
p61347
S'output_properties'
p61348
sS'required'
p61349
I00
sS'group_name'
p61350
S'Outputs'
p61351
sa(dp61352
S'description'
p61353
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61354
sS'cpp_type'
p61355
S'std::vector<OutputName, std::allocator<OutputName> >'
p61356
sS'default'
p61357
S'none'
p61358
sS'name'
p61359
S'outputs'
p61360
sS'required'
p61361
I00
sS'group_name'
p61362
S'Outputs'
p61363
sa(dp61364
S'description'
p61365
S'The seed for the master random number generator\n'
p61366
sS'cpp_type'
p61367
S'unsigned int'
p61368
sS'default'
p61369
S'0'
p61370
sS'name'
p61371
S'seed'
p61372
sS'required'
p61373
I00
sS'group_name'
p61374
S'Advanced'
p61375
sa(dp61376
S'description'
p61377
g3
sS'cpp_type'
p61378
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61379
sS'default'
p61380
S'ComputeConcentrationDependentElasticityTensor'
p61381
sS'name'
p61382
S'type'
p61383
sS'required'
p61384
I00
sS'group_name'
p61385
Nsa(dp61386
S'description'
p61387
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61388
sS'cpp_type'
p61389
S'bool'
p61390
sS'default'
p61391
S'0'
p61392
sS'name'
p61393
S'use_displaced_mesh'
p61394
sS'required'
p61395
I00
sS'group_name'
p61396
S'Advanced'
p61397
sasS'name'
p61398
S'/Materials/ComputeConcentrationDependentElasticityTensor'
p61399
sa(dp61400
S'description'
p61401
S'Compute Cosserat elasticity and flexural bending rigidity tensors\n'
p61402
sS'subblocks'
p61403
NsS'parameters'
p61404
(lp61405
(dp61406
S'description'
p61407
S'Flexural bending rigidity tensor.\n'
p61408
sS'cpp_type'
p61409
S'std::vector<double, std::allocator<double> >'
p61410
sS'default'
p61411
g3
sS'name'
p61412
S'B_ijkl'
p61413
sS'required'
p61414
I01
sS'group_name'
p61415
Nsa(dp61416
S'description'
p61417
S'Elastic stiffness tensor for material\n'
p61418
sS'cpp_type'
p61419
S'std::vector<double, std::allocator<double> >'
p61420
sS'default'
p61421
g3
sS'name'
p61422
S'E_ijkl'
p61423
sS'required'
p61424
I01
sS'group_name'
p61425
Nsa(dp61426
S'description'
p61427
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61428
sS'cpp_type'
p61429
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61430
sS'default'
p61431
g3
sS'name'
p61432
S'base_name'
p61433
sS'required'
p61434
I00
sS'group_name'
p61435
Nsa(dp61436
S'description'
p61437
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61438
sS'cpp_type'
p61439
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61440
sS'default'
p61441
g3
sS'name'
p61442
S'block'
p61443
sS'required'
p61444
I00
sS'group_name'
p61445
Nsa(dp61446
S'description'
p61447
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61448
sS'cpp_type'
p61449
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61450
sS'default'
p61451
g3
sS'name'
p61452
S'boundary'
p61453
sS'required'
p61454
I00
sS'group_name'
p61455
Nsa(dp61456
S'description'
p61457
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61458
sS'cpp_type'
p61459
S'bool'
p61460
sS'default'
p61461
S'1'
p61462
sS'name'
p61463
S'compute'
p61464
sS'required'
p61465
I00
sS'group_name'
p61466
Nsa(dp61467
S'description'
p61468
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61469
sS'cpp_type'
p61470
S'bool'
p61471
sS'default'
p61472
S'0'
p61473
sS'name'
p61474
S'constant_on_elem'
p61475
sS'required'
p61476
I00
sS'group_name'
p61477
S'Advanced'
p61478
sa(dp61479
S'description'
p61480
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61481
sS'cpp_type'
p61482
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61483
sS'default'
p61484
g3
sS'name'
p61485
S'control_tags'
p61486
sS'required'
p61487
I00
sS'group_name'
p61488
S'Advanced'
p61489
sa(dp61490
S'description'
p61491
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p61492
sS'cpp_type'
p61493
S'FunctionName'
p61494
sS'default'
p61495
g3
sS'name'
p61496
S'elasticity_tensor_prefactor'
p61497
sS'required'
p61498
I00
sS'group_name'
p61499
Nsa(dp61500
S'description'
p61501
S'Set the enabled status of the MooseObject.\n'
p61502
sS'cpp_type'
p61503
S'bool'
p61504
sS'default'
p61505
S'1'
p61506
sS'name'
p61507
S'enable'
p61508
sS'required'
p61509
I00
sS'group_name'
p61510
S'Advanced'
p61511
sa(dp61512
S'name'
p61513
S'fill_method'
p61514
sS'cpp_type'
p61515
S'MooseEnum'
p61516
sS'default'
p61517
S'symmetric9'
p61518
sS'description'
p61519
S'The fill method\n'
p61520
sS'required'
p61521
I00
sS'options'
p61522
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p61523
sS'group_name'
p61524
Nsa(dp61525
S'name'
p61526
S'fill_method_bending'
p61527
sS'cpp_type'
p61528
S'MooseEnum'
p61529
sS'default'
p61530
S'antisymmetric_isotropic'
p61531
sS'description'
p61532
S"The fill method for the 'bending' tensor.\n"
p61533
sS'required'
p61534
I00
sS'options'
p61535
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p61536
sS'group_name'
p61537
Nsa(dp61538
S'description'
p61539
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61540
sS'cpp_type'
p61541
S'bool'
p61542
sS'default'
p61543
S'1'
p61544
sS'name'
p61545
S'implicit'
p61546
sS'required'
p61547
I00
sS'group_name'
p61548
S'Advanced'
p61549
sa(dp61550
S'description'
p61551
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61552
sS'cpp_type'
p61553
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61554
sS'default'
p61555
g3
sS'name'
p61556
S'output_properties'
p61557
sS'required'
p61558
I00
sS'group_name'
p61559
S'Outputs'
p61560
sa(dp61561
S'description'
p61562
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61563
sS'cpp_type'
p61564
S'std::vector<OutputName, std::allocator<OutputName> >'
p61565
sS'default'
p61566
S'none'
p61567
sS'name'
p61568
S'outputs'
p61569
sS'required'
p61570
I00
sS'group_name'
p61571
S'Outputs'
p61572
sa(dp61573
S'description'
p61574
S'The seed for the master random number generator\n'
p61575
sS'cpp_type'
p61576
S'unsigned int'
p61577
sS'default'
p61578
S'0'
p61579
sS'name'
p61580
S'seed'
p61581
sS'required'
p61582
I00
sS'group_name'
p61583
S'Advanced'
p61584
sa(dp61585
S'description'
p61586
g3
sS'cpp_type'
p61587
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61588
sS'default'
p61589
S'ComputeCosseratElasticityTensor'
p61590
sS'name'
p61591
S'type'
p61592
sS'required'
p61593
I00
sS'group_name'
p61594
Nsa(dp61595
S'description'
p61596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61597
sS'cpp_type'
p61598
S'bool'
p61599
sS'default'
p61600
S'0'
p61601
sS'name'
p61602
S'use_displaced_mesh'
p61603
sS'required'
p61604
I00
sS'group_name'
p61605
S'Advanced'
p61606
sasS'name'
p61607
S'/Materials/ComputeCosseratElasticityTensor'
p61608
sa(dp61609
S'description'
p61610
S'Compute incremental small Cosserat strains\n'
p61611
sS'subblocks'
p61612
NsS'parameters'
p61613
(lp61614
(dp61615
S'description'
p61616
S'The 3 Cosserat rotation variables\n'
p61617
sS'cpp_type'
p61618
S'std::vector<VariableName>'
p61619
sS'default'
p61620
g3
sS'name'
p61621
S'Cosserat_rotations'
p61622
sS'required'
p61623
I01
sS'group_name'
p61624
Nsa(dp61625
S'description'
p61626
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61627
sS'cpp_type'
p61628
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61629
sS'default'
p61630
g3
sS'name'
p61631
S'base_name'
p61632
sS'required'
p61633
I00
sS'group_name'
p61634
Nsa(dp61635
S'description'
p61636
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61637
sS'cpp_type'
p61638
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61639
sS'default'
p61640
g3
sS'name'
p61641
S'block'
p61642
sS'required'
p61643
I00
sS'group_name'
p61644
Nsa(dp61645
S'description'
p61646
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61647
sS'cpp_type'
p61648
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61649
sS'default'
p61650
g3
sS'name'
p61651
S'boundary'
p61652
sS'required'
p61653
I00
sS'group_name'
p61654
Nsa(dp61655
S'description'
p61656
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61657
sS'cpp_type'
p61658
S'bool'
p61659
sS'default'
p61660
S'1'
p61661
sS'name'
p61662
S'compute'
p61663
sS'required'
p61664
I00
sS'group_name'
p61665
Nsa(dp61666
S'description'
p61667
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61668
sS'cpp_type'
p61669
S'bool'
p61670
sS'default'
p61671
S'0'
p61672
sS'name'
p61673
S'constant_on_elem'
p61674
sS'required'
p61675
I00
sS'group_name'
p61676
S'Advanced'
p61677
sa(dp61678
S'description'
p61679
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61680
sS'cpp_type'
p61681
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61682
sS'default'
p61683
g3
sS'name'
p61684
S'control_tags'
p61685
sS'required'
p61686
I00
sS'group_name'
p61687
S'Advanced'
p61688
sa(dp61689
S'description'
p61690
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p61691
sS'cpp_type'
p61692
S'std::vector<VariableName>'
p61693
sS'default'
p61694
g3
sS'name'
p61695
S'displacements'
p61696
sS'required'
p61697
I01
sS'group_name'
p61698
Nsa(dp61699
S'description'
p61700
S'List of eigenstrains to be applied in this strain calculation\n'
p61701
sS'cpp_type'
p61702
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p61703
sS'default'
p61704
g3
sS'name'
p61705
S'eigenstrain_names'
p61706
sS'required'
p61707
I00
sS'group_name'
p61708
Nsa(dp61709
S'description'
p61710
S'Set the enabled status of the MooseObject.\n'
p61711
sS'cpp_type'
p61712
S'bool'
p61713
sS'default'
p61714
S'1'
p61715
sS'name'
p61716
S'enable'
p61717
sS'required'
p61718
I00
sS'group_name'
p61719
S'Advanced'
p61720
sa(dp61721
S'description'
p61722
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61723
sS'cpp_type'
p61724
S'bool'
p61725
sS'default'
p61726
S'1'
p61727
sS'name'
p61728
S'implicit'
p61729
sS'required'
p61730
I00
sS'group_name'
p61731
S'Advanced'
p61732
sa(dp61733
S'description'
p61734
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61735
sS'cpp_type'
p61736
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61737
sS'default'
p61738
g3
sS'name'
p61739
S'output_properties'
p61740
sS'required'
p61741
I00
sS'group_name'
p61742
S'Outputs'
p61743
sa(dp61744
S'description'
p61745
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61746
sS'cpp_type'
p61747
S'std::vector<OutputName, std::allocator<OutputName> >'
p61748
sS'default'
p61749
S'none'
p61750
sS'name'
p61751
S'outputs'
p61752
sS'required'
p61753
I00
sS'group_name'
p61754
S'Outputs'
p61755
sa(dp61756
S'description'
p61757
S'The seed for the master random number generator\n'
p61758
sS'cpp_type'
p61759
S'unsigned int'
p61760
sS'default'
p61761
S'0'
p61762
sS'name'
p61763
S'seed'
p61764
sS'required'
p61765
I00
sS'group_name'
p61766
S'Advanced'
p61767
sa(dp61768
S'description'
p61769
g3
sS'cpp_type'
p61770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61771
sS'default'
p61772
S'ComputeCosseratIncrementalSmallStrain'
p61773
sS'name'
p61774
S'type'
p61775
sS'required'
p61776
I00
sS'group_name'
p61777
Nsa(dp61778
S'description'
p61779
S'Flag to correct volumetric locking\n'
p61780
sS'cpp_type'
p61781
S'bool'
p61782
sS'default'
p61783
S'0'
p61784
sS'name'
p61785
S'volumetric_locking_correction'
p61786
sS'required'
p61787
I00
sS'group_name'
p61788
NsasS'name'
p61789
S'/Materials/ComputeCosseratIncrementalSmallStrain'
p61790
sa(dp61791
S'description'
p61792
S'Compute Cosserat stress and couple-stress elasticity for small strains\n'
p61793
sS'subblocks'
p61794
NsS'parameters'
p61795
(lp61796
(dp61797
S'description'
p61798
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61799
sS'cpp_type'
p61800
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61801
sS'default'
p61802
g3
sS'name'
p61803
S'base_name'
p61804
sS'required'
p61805
I00
sS'group_name'
p61806
Nsa(dp61807
S'description'
p61808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61809
sS'cpp_type'
p61810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61811
sS'default'
p61812
g3
sS'name'
p61813
S'block'
p61814
sS'required'
p61815
I00
sS'group_name'
p61816
Nsa(dp61817
S'description'
p61818
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61819
sS'cpp_type'
p61820
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61821
sS'default'
p61822
g3
sS'name'
p61823
S'boundary'
p61824
sS'required'
p61825
I00
sS'group_name'
p61826
Nsa(dp61827
S'description'
p61828
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61829
sS'cpp_type'
p61830
S'bool'
p61831
sS'default'
p61832
S'1'
p61833
sS'name'
p61834
S'compute'
p61835
sS'required'
p61836
I00
sS'group_name'
p61837
Nsa(dp61838
S'description'
p61839
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61840
sS'cpp_type'
p61841
S'bool'
p61842
sS'default'
p61843
S'0'
p61844
sS'name'
p61845
S'constant_on_elem'
p61846
sS'required'
p61847
I00
sS'group_name'
p61848
S'Advanced'
p61849
sa(dp61850
S'description'
p61851
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61852
sS'cpp_type'
p61853
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61854
sS'default'
p61855
g3
sS'name'
p61856
S'control_tags'
p61857
sS'required'
p61858
I00
sS'group_name'
p61859
S'Advanced'
p61860
sa(dp61861
S'description'
p61862
S'Set the enabled status of the MooseObject.\n'
p61863
sS'cpp_type'
p61864
S'bool'
p61865
sS'default'
p61866
S'1'
p61867
sS'name'
p61868
S'enable'
p61869
sS'required'
p61870
I00
sS'group_name'
p61871
S'Advanced'
p61872
sa(dp61873
S'description'
p61874
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61875
sS'cpp_type'
p61876
S'bool'
p61877
sS'default'
p61878
S'1'
p61879
sS'name'
p61880
S'implicit'
p61881
sS'required'
p61882
I00
sS'group_name'
p61883
S'Advanced'
p61884
sa(dp61885
S'description'
p61886
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p61887
sS'cpp_type'
p61888
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p61889
sS'default'
p61890
g3
sS'name'
p61891
S'initial_stress'
p61892
sS'required'
p61893
I00
sS'group_name'
p61894
Nsa(dp61895
S'description'
p61896
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61897
sS'cpp_type'
p61898
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61899
sS'default'
p61900
g3
sS'name'
p61901
S'output_properties'
p61902
sS'required'
p61903
I00
sS'group_name'
p61904
S'Outputs'
p61905
sa(dp61906
S'description'
p61907
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61908
sS'cpp_type'
p61909
S'std::vector<OutputName, std::allocator<OutputName> >'
p61910
sS'default'
p61911
S'none'
p61912
sS'name'
p61913
S'outputs'
p61914
sS'required'
p61915
I00
sS'group_name'
p61916
S'Outputs'
p61917
sa(dp61918
S'description'
p61919
S'The seed for the master random number generator\n'
p61920
sS'cpp_type'
p61921
S'unsigned int'
p61922
sS'default'
p61923
S'0'
p61924
sS'name'
p61925
S'seed'
p61926
sS'required'
p61927
I00
sS'group_name'
p61928
S'Advanced'
p61929
sa(dp61930
S'description'
p61931
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p61932
sS'cpp_type'
p61933
S'bool'
p61934
sS'default'
p61935
S'0'
p61936
sS'name'
p61937
S'store_stress_old'
p61938
sS'required'
p61939
I00
sS'group_name'
p61940
Nsa(dp61941
S'description'
p61942
g3
sS'cpp_type'
p61943
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61944
sS'default'
p61945
S'ComputeCosseratLinearElasticStress'
p61946
sS'name'
p61947
S'type'
p61948
sS'required'
p61949
I00
sS'group_name'
p61950
NsasS'name'
p61951
S'/Materials/ComputeCosseratLinearElasticStress'
p61952
sa(dp61953
S'description'
p61954
S'Compute small Cosserat strains\n'
p61955
sS'subblocks'
p61956
NsS'parameters'
p61957
(lp61958
(dp61959
S'description'
p61960
S'The 3 Cosserat rotation variables\n'
p61961
sS'cpp_type'
p61962
S'std::vector<VariableName>'
p61963
sS'default'
p61964
g3
sS'name'
p61965
S'Cosserat_rotations'
p61966
sS'required'
p61967
I01
sS'group_name'
p61968
Nsa(dp61969
S'description'
p61970
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61971
sS'cpp_type'
p61972
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61973
sS'default'
p61974
g3
sS'name'
p61975
S'base_name'
p61976
sS'required'
p61977
I00
sS'group_name'
p61978
Nsa(dp61979
S'description'
p61980
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61981
sS'cpp_type'
p61982
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61983
sS'default'
p61984
g3
sS'name'
p61985
S'block'
p61986
sS'required'
p61987
I00
sS'group_name'
p61988
Nsa(dp61989
S'description'
p61990
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61991
sS'cpp_type'
p61992
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61993
sS'default'
p61994
g3
sS'name'
p61995
S'boundary'
p61996
sS'required'
p61997
I00
sS'group_name'
p61998
Nsa(dp61999
S'description'
p62000
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62001
sS'cpp_type'
p62002
S'bool'
p62003
sS'default'
p62004
S'1'
p62005
sS'name'
p62006
S'compute'
p62007
sS'required'
p62008
I00
sS'group_name'
p62009
Nsa(dp62010
S'description'
p62011
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62012
sS'cpp_type'
p62013
S'bool'
p62014
sS'default'
p62015
S'0'
p62016
sS'name'
p62017
S'constant_on_elem'
p62018
sS'required'
p62019
I00
sS'group_name'
p62020
S'Advanced'
p62021
sa(dp62022
S'description'
p62023
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62024
sS'cpp_type'
p62025
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62026
sS'default'
p62027
g3
sS'name'
p62028
S'control_tags'
p62029
sS'required'
p62030
I00
sS'group_name'
p62031
S'Advanced'
p62032
sa(dp62033
S'description'
p62034
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p62035
sS'cpp_type'
p62036
S'std::vector<VariableName>'
p62037
sS'default'
p62038
g3
sS'name'
p62039
S'displacements'
p62040
sS'required'
p62041
I01
sS'group_name'
p62042
Nsa(dp62043
S'description'
p62044
S'List of eigenstrains to be applied in this strain calculation\n'
p62045
sS'cpp_type'
p62046
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p62047
sS'default'
p62048
g3
sS'name'
p62049
S'eigenstrain_names'
p62050
sS'required'
p62051
I00
sS'group_name'
p62052
Nsa(dp62053
S'description'
p62054
S'Set the enabled status of the MooseObject.\n'
p62055
sS'cpp_type'
p62056
S'bool'
p62057
sS'default'
p62058
S'1'
p62059
sS'name'
p62060
S'enable'
p62061
sS'required'
p62062
I00
sS'group_name'
p62063
S'Advanced'
p62064
sa(dp62065
S'description'
p62066
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62067
sS'cpp_type'
p62068
S'bool'
p62069
sS'default'
p62070
S'1'
p62071
sS'name'
p62072
S'implicit'
p62073
sS'required'
p62074
I00
sS'group_name'
p62075
S'Advanced'
p62076
sa(dp62077
S'description'
p62078
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62079
sS'cpp_type'
p62080
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62081
sS'default'
p62082
g3
sS'name'
p62083
S'output_properties'
p62084
sS'required'
p62085
I00
sS'group_name'
p62086
S'Outputs'
p62087
sa(dp62088
S'description'
p62089
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62090
sS'cpp_type'
p62091
S'std::vector<OutputName, std::allocator<OutputName> >'
p62092
sS'default'
p62093
S'none'
p62094
sS'name'
p62095
S'outputs'
p62096
sS'required'
p62097
I00
sS'group_name'
p62098
S'Outputs'
p62099
sa(dp62100
S'description'
p62101
S'The seed for the master random number generator\n'
p62102
sS'cpp_type'
p62103
S'unsigned int'
p62104
sS'default'
p62105
S'0'
p62106
sS'name'
p62107
S'seed'
p62108
sS'required'
p62109
I00
sS'group_name'
p62110
S'Advanced'
p62111
sa(dp62112
S'description'
p62113
g3
sS'cpp_type'
p62114
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62115
sS'default'
p62116
S'ComputeCosseratSmallStrain'
p62117
sS'name'
p62118
S'type'
p62119
sS'required'
p62120
I00
sS'group_name'
p62121
Nsa(dp62122
S'description'
p62123
S'Flag to correct volumetric locking\n'
p62124
sS'cpp_type'
p62125
S'bool'
p62126
sS'default'
p62127
S'0'
p62128
sS'name'
p62129
S'volumetric_locking_correction'
p62130
sS'required'
p62131
I00
sS'group_name'
p62132
NsasS'name'
p62133
S'/Materials/ComputeCosseratSmallStrain'
p62134
sa(dp62135
S'description'
p62136
S'Computes stress based on lagrangian strain\n'
p62137
sS'subblocks'
p62138
NsS'parameters'
p62139
(lp62140
(dp62141
S'description'
p62142
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62143
sS'cpp_type'
p62144
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62145
sS'default'
p62146
g3
sS'name'
p62147
S'block'
p62148
sS'required'
p62149
I00
sS'group_name'
p62150
Nsa(dp62151
S'description'
p62152
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62153
sS'cpp_type'
p62154
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62155
sS'default'
p62156
g3
sS'name'
p62157
S'boundary'
p62158
sS'required'
p62159
I00
sS'group_name'
p62160
Nsa(dp62161
S'description'
p62162
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62163
sS'cpp_type'
p62164
S'bool'
p62165
sS'default'
p62166
S'1'
p62167
sS'name'
p62168
S'compute'
p62169
sS'required'
p62170
I00
sS'group_name'
p62171
Nsa(dp62172
S'description'
p62173
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62174
sS'cpp_type'
p62175
S'bool'
p62176
sS'default'
p62177
S'0'
p62178
sS'name'
p62179
S'constant_on_elem'
p62180
sS'required'
p62181
I00
sS'group_name'
p62182
S'Advanced'
p62183
sa(dp62184
S'description'
p62185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62186
sS'cpp_type'
p62187
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62188
sS'default'
p62189
g3
sS'name'
p62190
S'control_tags'
p62191
sS'required'
p62192
I00
sS'group_name'
p62193
S'Advanced'
p62194
sa(dp62195
S'description'
p62196
S'Name of deformation gradient variable\n'
p62197
sS'cpp_type'
p62198
S'MaterialPropertyName'
p62199
sS'default'
p62200
g3
sS'name'
p62201
S'deform_grad_name'
p62202
sS'required'
p62203
I01
sS'group_name'
p62204
Nsa(dp62205
S'description'
p62206
S'Name of elasticity tensor variable\n'
p62207
sS'cpp_type'
p62208
S'MaterialPropertyName'
p62209
sS'default'
p62210
g3
sS'name'
p62211
S'elasticity_tensor_name'
p62212
sS'required'
p62213
I01
sS'group_name'
p62214
Nsa(dp62215
S'description'
p62216
S'Set the enabled status of the MooseObject.\n'
p62217
sS'cpp_type'
p62218
S'bool'
p62219
sS'default'
p62220
S'1'
p62221
sS'name'
p62222
S'enable'
p62223
sS'required'
p62224
I00
sS'group_name'
p62225
S'Advanced'
p62226
sa(dp62227
S'description'
p62228
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62229
sS'cpp_type'
p62230
S'bool'
p62231
sS'default'
p62232
S'1'
p62233
sS'name'
p62234
S'implicit'
p62235
sS'required'
p62236
I00
sS'group_name'
p62237
S'Advanced'
p62238
sa(dp62239
S'description'
p62240
S'Name of jacobian variable\n'
p62241
sS'cpp_type'
p62242
S'MaterialPropertyName'
p62243
sS'default'
p62244
g3
sS'name'
p62245
S'jacobian_name'
p62246
sS'required'
p62247
I01
sS'group_name'
p62248
Nsa(dp62249
S'description'
p62250
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62251
sS'cpp_type'
p62252
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62253
sS'default'
p62254
g3
sS'name'
p62255
S'output_properties'
p62256
sS'required'
p62257
I00
sS'group_name'
p62258
S'Outputs'
p62259
sa(dp62260
S'description'
p62261
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62262
sS'cpp_type'
p62263
S'std::vector<OutputName, std::allocator<OutputName> >'
p62264
sS'default'
p62265
S'none'
p62266
sS'name'
p62267
S'outputs'
p62268
sS'required'
p62269
I00
sS'group_name'
p62270
S'Outputs'
p62271
sa(dp62272
S'description'
p62273
S'The seed for the master random number generator\n'
p62274
sS'cpp_type'
p62275
S'unsigned int'
p62276
sS'default'
p62277
S'0'
p62278
sS'name'
p62279
S'seed'
p62280
sS'required'
p62281
I00
sS'group_name'
p62282
S'Advanced'
p62283
sa(dp62284
S'description'
p62285
S'Name of stress variable\n'
p62286
sS'cpp_type'
p62287
S'MaterialPropertyName'
p62288
sS'default'
p62289
g3
sS'name'
p62290
S'stress_name'
p62291
sS'required'
p62292
I01
sS'group_name'
p62293
Nsa(dp62294
S'description'
p62295
g3
sS'cpp_type'
p62296
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62297
sS'default'
p62298
S'ComputeDeformGradBasedStress'
p62299
sS'name'
p62300
S'type'
p62301
sS'required'
p62302
I00
sS'group_name'
p62303
Nsa(dp62304
S'description'
p62305
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62306
sS'cpp_type'
p62307
S'bool'
p62308
sS'default'
p62309
S'0'
p62310
sS'name'
p62311
S'use_displaced_mesh'
p62312
sS'required'
p62313
I00
sS'group_name'
p62314
S'Advanced'
p62315
sasS'name'
p62316
S'/Materials/ComputeDeformGradBasedStress'
p62317
sa(dp62318
S'description'
p62319
S'Computes a constant Eigenstrain\n'
p62320
sS'subblocks'
p62321
NsS'parameters'
p62322
(lp62323
(dp62324
S'description'
p62325
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62326
sS'cpp_type'
p62327
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62328
sS'default'
p62329
g3
sS'name'
p62330
S'base_name'
p62331
sS'required'
p62332
I00
sS'group_name'
p62333
Nsa(dp62334
S'description'
p62335
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62336
sS'cpp_type'
p62337
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62338
sS'default'
p62339
g3
sS'name'
p62340
S'block'
p62341
sS'required'
p62342
I00
sS'group_name'
p62343
Nsa(dp62344
S'description'
p62345
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62346
sS'cpp_type'
p62347
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62348
sS'default'
p62349
g3
sS'name'
p62350
S'boundary'
p62351
sS'required'
p62352
I00
sS'group_name'
p62353
Nsa(dp62354
S'description'
p62355
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62356
sS'cpp_type'
p62357
S'bool'
p62358
sS'default'
p62359
S'1'
p62360
sS'name'
p62361
S'compute'
p62362
sS'required'
p62363
I00
sS'group_name'
p62364
Nsa(dp62365
S'description'
p62366
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62367
sS'cpp_type'
p62368
S'bool'
p62369
sS'default'
p62370
S'0'
p62371
sS'name'
p62372
S'constant_on_elem'
p62373
sS'required'
p62374
I00
sS'group_name'
p62375
S'Advanced'
p62376
sa(dp62377
S'description'
p62378
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62379
sS'cpp_type'
p62380
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62381
sS'default'
p62382
g3
sS'name'
p62383
S'control_tags'
p62384
sS'required'
p62385
I00
sS'group_name'
p62386
S'Advanced'
p62387
sa(dp62388
S'description'
p62389
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p62390
sS'cpp_type'
p62391
S'std::vector<double, std::allocator<double> >'
p62392
sS'default'
p62393
g3
sS'name'
p62394
S'eigen_base'
p62395
sS'required'
p62396
I01
sS'group_name'
p62397
Nsa(dp62398
S'description'
p62399
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p62400
sS'cpp_type'
p62401
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62402
sS'default'
p62403
g3
sS'name'
p62404
S'eigenstrain_name'
p62405
sS'required'
p62406
I01
sS'group_name'
p62407
Nsa(dp62408
S'description'
p62409
S'Set the enabled status of the MooseObject.\n'
p62410
sS'cpp_type'
p62411
S'bool'
p62412
sS'default'
p62413
S'1'
p62414
sS'name'
p62415
S'enable'
p62416
sS'required'
p62417
I00
sS'group_name'
p62418
S'Advanced'
p62419
sa(dp62420
S'description'
p62421
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62422
sS'cpp_type'
p62423
S'bool'
p62424
sS'default'
p62425
S'1'
p62426
sS'name'
p62427
S'implicit'
p62428
sS'required'
p62429
I00
sS'group_name'
p62430
S'Advanced'
p62431
sa(dp62432
S'description'
p62433
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p62434
sS'cpp_type'
p62435
S'bool'
p62436
sS'default'
p62437
S'0'
p62438
sS'name'
p62439
S'incremental_form'
p62440
sS'required'
p62441
I00
sS'group_name'
p62442
Nsa(dp62443
S'description'
p62444
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62445
sS'cpp_type'
p62446
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62447
sS'default'
p62448
g3
sS'name'
p62449
S'output_properties'
p62450
sS'required'
p62451
I00
sS'group_name'
p62452
S'Outputs'
p62453
sa(dp62454
S'description'
p62455
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62456
sS'cpp_type'
p62457
S'std::vector<OutputName, std::allocator<OutputName> >'
p62458
sS'default'
p62459
S'none'
p62460
sS'name'
p62461
S'outputs'
p62462
sS'required'
p62463
I00
sS'group_name'
p62464
S'Outputs'
p62465
sa(dp62466
S'description'
p62467
S'Name of material defining the variable dependence\n'
p62468
sS'cpp_type'
p62469
S'MaterialPropertyName'
p62470
sS'default'
p62471
S'1'
p62472
sS'name'
p62473
S'prefactor'
p62474
sS'required'
p62475
I00
sS'group_name'
p62476
Nsa(dp62477
S'description'
p62478
S'The seed for the master random number generator\n'
p62479
sS'cpp_type'
p62480
S'unsigned int'
p62481
sS'default'
p62482
S'0'
p62483
sS'name'
p62484
S'seed'
p62485
sS'required'
p62486
I00
sS'group_name'
p62487
S'Advanced'
p62488
sa(dp62489
S'description'
p62490
g3
sS'cpp_type'
p62491
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62492
sS'default'
p62493
S'ComputeEigenstrain'
p62494
sS'name'
p62495
S'type'
p62496
sS'required'
p62497
I00
sS'group_name'
p62498
Nsa(dp62499
S'description'
p62500
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62501
sS'cpp_type'
p62502
S'bool'
p62503
sS'default'
p62504
S'0'
p62505
sS'name'
p62506
S'use_displaced_mesh'
p62507
sS'required'
p62508
I00
sS'group_name'
p62509
S'Advanced'
p62510
sasS'name'
p62511
S'/Materials/ComputeEigenstrain'
p62512
sa(dp62513
S'description'
p62514
S'Compute stress using elasticity for finite strains\n'
p62515
sS'subblocks'
p62516
NsS'parameters'
p62517
(lp62518
(dp62519
S'description'
p62520
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p62521
sS'cpp_type'
p62522
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p62523
sS'default'
p62524
g3
sS'name'
p62525
S'active_crack_planes'
p62526
sS'required'
p62527
I00
sS'group_name'
p62528
Nsa(dp62529
S'description'
p62530
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62531
sS'cpp_type'
p62532
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62533
sS'default'
p62534
g3
sS'name'
p62535
S'base_name'
p62536
sS'required'
p62537
I00
sS'group_name'
p62538
Nsa(dp62539
S'description'
p62540
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62541
sS'cpp_type'
p62542
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62543
sS'default'
p62544
g3
sS'name'
p62545
S'block'
p62546
sS'required'
p62547
I00
sS'group_name'
p62548
Nsa(dp62549
S'description'
p62550
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62551
sS'cpp_type'
p62552
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62553
sS'default'
p62554
g3
sS'name'
p62555
S'boundary'
p62556
sS'required'
p62557
I00
sS'group_name'
p62558
Nsa(dp62559
S'description'
p62560
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62561
sS'cpp_type'
p62562
S'bool'
p62563
sS'default'
p62564
S'1'
p62565
sS'name'
p62566
S'compute'
p62567
sS'required'
p62568
I00
sS'group_name'
p62569
Nsa(dp62570
S'description'
p62571
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62572
sS'cpp_type'
p62573
S'bool'
p62574
sS'default'
p62575
S'0'
p62576
sS'name'
p62577
S'constant_on_elem'
p62578
sS'required'
p62579
I00
sS'group_name'
p62580
S'Advanced'
p62581
sa(dp62582
S'description'
p62583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62584
sS'cpp_type'
p62585
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62586
sS'default'
p62587
g3
sS'name'
p62588
S'control_tags'
p62589
sS'required'
p62590
I00
sS'group_name'
p62591
S'Advanced'
p62592
sa(dp62593
S'description'
p62594
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p62595
sS'cpp_type'
p62596
S'double'
p62597
sS'default'
p62598
S'0'
p62599
sS'name'
p62600
S'cracking_neg_fraction'
p62601
sS'required'
p62602
I00
sS'group_name'
p62603
Nsa(dp62604
S'description'
p62605
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p62606
sS'cpp_type'
p62607
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62608
sS'default'
p62609
S'abrupt'
p62610
sS'name'
p62611
S'cracking_release'
p62612
sS'required'
p62613
I00
sS'group_name'
p62614
Nsa(dp62615
S'description'
p62616
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p62617
sS'cpp_type'
p62618
S'double'
p62619
sS'default'
p62620
S'0'
p62621
sS'name'
p62622
S'cracking_residual_stress'
p62623
sS'required'
p62624
I00
sS'group_name'
p62625
Nsa(dp62626
S'description'
p62627
S'The stress threshold beyond which cracking occurs. Negative values prevent cracking.\n'
p62628
sS'cpp_type'
p62629
S'FunctionName'
p62630
sS'default'
p62631
g3
sS'name'
p62632
S'cracking_stress'
p62633
sS'required'
p62634
I01
sS'group_name'
p62635
Nsa(dp62636
S'description'
p62637
S'Set the enabled status of the MooseObject.\n'
p62638
sS'cpp_type'
p62639
S'bool'
p62640
sS'default'
p62641
S'1'
p62642
sS'name'
p62643
S'enable'
p62644
sS'required'
p62645
I00
sS'group_name'
p62646
S'Advanced'
p62647
sa(dp62648
S'description'
p62649
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62650
sS'cpp_type'
p62651
S'bool'
p62652
sS'default'
p62653
S'1'
p62654
sS'name'
p62655
S'implicit'
p62656
sS'required'
p62657
I00
sS'group_name'
p62658
S'Advanced'
p62659
sa(dp62660
S'description'
p62661
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p62662
sS'cpp_type'
p62663
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p62664
sS'default'
p62665
g3
sS'name'
p62666
S'initial_stress'
p62667
sS'required'
p62668
I00
sS'group_name'
p62669
Nsa(dp62670
S'description'
p62671
S'The maximum number of cracks allowed at a material point.\n'
p62672
sS'cpp_type'
p62673
S'unsigned int'
p62674
sS'default'
p62675
S'3'
p62676
sS'name'
p62677
S'max_cracks'
p62678
sS'required'
p62679
I00
sS'group_name'
p62680
Nsa(dp62681
S'description'
p62682
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62683
sS'cpp_type'
p62684
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62685
sS'default'
p62686
g3
sS'name'
p62687
S'output_properties'
p62688
sS'required'
p62689
I00
sS'group_name'
p62690
S'Outputs'
p62691
sa(dp62692
S'description'
p62693
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62694
sS'cpp_type'
p62695
S'std::vector<OutputName, std::allocator<OutputName> >'
p62696
sS'default'
p62697
S'none'
p62698
sS'name'
p62699
S'outputs'
p62700
sS'required'
p62701
I00
sS'group_name'
p62702
S'Outputs'
p62703
sa(dp62704
S'description'
p62705
S'The seed for the master random number generator\n'
p62706
sS'cpp_type'
p62707
S'unsigned int'
p62708
sS'default'
p62709
S'0'
p62710
sS'name'
p62711
S'seed'
p62712
sS'required'
p62713
I00
sS'group_name'
p62714
S'Advanced'
p62715
sa(dp62716
S'description'
p62717
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p62718
sS'cpp_type'
p62719
S'bool'
p62720
sS'default'
p62721
S'0'
p62722
sS'name'
p62723
S'store_stress_old'
p62724
sS'required'
p62725
I00
sS'group_name'
p62726
Nsa(dp62727
S'description'
p62728
g3
sS'cpp_type'
p62729
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62730
sS'default'
p62731
S'ComputeElasticSmearedCrackingStress'
p62732
sS'name'
p62733
S'type'
p62734
sS'required'
p62735
I00
sS'group_name'
p62736
NsasS'name'
p62737
S'/Materials/ComputeElasticSmearedCrackingStress'
p62738
sa(dp62739
S'description'
p62740
S'Compute an elasticity tensor.\n'
p62741
sS'subblocks'
p62742
NsS'parameters'
p62743
(lp62744
(dp62745
S'description'
p62746
S'Stiffness tensor for material\n'
p62747
sS'cpp_type'
p62748
S'std::vector<double, std::allocator<double> >'
p62749
sS'default'
p62750
g3
sS'name'
p62751
S'C_ijkl'
p62752
sS'required'
p62753
I01
sS'group_name'
p62754
Nsa(dp62755
S'description'
p62756
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62757
sS'cpp_type'
p62758
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62759
sS'default'
p62760
g3
sS'name'
p62761
S'base_name'
p62762
sS'required'
p62763
I00
sS'group_name'
p62764
Nsa(dp62765
S'description'
p62766
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62767
sS'cpp_type'
p62768
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62769
sS'default'
p62770
g3
sS'name'
p62771
S'block'
p62772
sS'required'
p62773
I00
sS'group_name'
p62774
Nsa(dp62775
S'description'
p62776
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62777
sS'cpp_type'
p62778
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62779
sS'default'
p62780
g3
sS'name'
p62781
S'boundary'
p62782
sS'required'
p62783
I00
sS'group_name'
p62784
Nsa(dp62785
S'description'
p62786
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62787
sS'cpp_type'
p62788
S'bool'
p62789
sS'default'
p62790
S'1'
p62791
sS'name'
p62792
S'compute'
p62793
sS'required'
p62794
I00
sS'group_name'
p62795
Nsa(dp62796
S'description'
p62797
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62798
sS'cpp_type'
p62799
S'bool'
p62800
sS'default'
p62801
S'0'
p62802
sS'name'
p62803
S'constant_on_elem'
p62804
sS'required'
p62805
I00
sS'group_name'
p62806
S'Advanced'
p62807
sa(dp62808
S'description'
p62809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62810
sS'cpp_type'
p62811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62812
sS'default'
p62813
g3
sS'name'
p62814
S'control_tags'
p62815
sS'required'
p62816
I00
sS'group_name'
p62817
S'Advanced'
p62818
sa(dp62819
S'description'
p62820
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p62821
sS'cpp_type'
p62822
S'FunctionName'
p62823
sS'default'
p62824
g3
sS'name'
p62825
S'elasticity_tensor_prefactor'
p62826
sS'required'
p62827
I00
sS'group_name'
p62828
Nsa(dp62829
S'description'
p62830
S'Set the enabled status of the MooseObject.\n'
p62831
sS'cpp_type'
p62832
S'bool'
p62833
sS'default'
p62834
S'1'
p62835
sS'name'
p62836
S'enable'
p62837
sS'required'
p62838
I00
sS'group_name'
p62839
S'Advanced'
p62840
sa(dp62841
S'description'
p62842
S'Euler angle in direction 1\n'
p62843
sS'cpp_type'
p62844
S'double'
p62845
sS'default'
p62846
S'0'
p62847
sS'name'
p62848
S'euler_angle_1'
p62849
sS'required'
p62850
I00
sS'group_name'
p62851
Nsa(dp62852
S'description'
p62853
S'Euler angle in direction 2\n'
p62854
sS'cpp_type'
p62855
S'double'
p62856
sS'default'
p62857
S'0'
p62858
sS'name'
p62859
S'euler_angle_2'
p62860
sS'required'
p62861
I00
sS'group_name'
p62862
Nsa(dp62863
S'description'
p62864
S'Euler angle in direction 3\n'
p62865
sS'cpp_type'
p62866
S'double'
p62867
sS'default'
p62868
S'0'
p62869
sS'name'
p62870
S'euler_angle_3'
p62871
sS'required'
p62872
I00
sS'group_name'
p62873
Nsa(dp62874
S'name'
p62875
S'fill_method'
p62876
sS'cpp_type'
p62877
S'MooseEnum'
p62878
sS'default'
p62879
S'symmetric9'
p62880
sS'description'
p62881
S'The fill method\n'
p62882
sS'required'
p62883
I00
sS'options'
p62884
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p62885
sS'group_name'
p62886
Nsa(dp62887
S'description'
p62888
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62889
sS'cpp_type'
p62890
S'bool'
p62891
sS'default'
p62892
S'1'
p62893
sS'name'
p62894
S'implicit'
p62895
sS'required'
p62896
I00
sS'group_name'
p62897
S'Advanced'
p62898
sa(dp62899
S'description'
p62900
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62901
sS'cpp_type'
p62902
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62903
sS'default'
p62904
g3
sS'name'
p62905
S'output_properties'
p62906
sS'required'
p62907
I00
sS'group_name'
p62908
S'Outputs'
p62909
sa(dp62910
S'description'
p62911
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62912
sS'cpp_type'
p62913
S'std::vector<OutputName, std::allocator<OutputName> >'
p62914
sS'default'
p62915
S'none'
p62916
sS'name'
p62917
S'outputs'
p62918
sS'required'
p62919
I00
sS'group_name'
p62920
S'Outputs'
p62921
sa(dp62922
S'description'
p62923
S'The seed for the master random number generator\n'
p62924
sS'cpp_type'
p62925
S'unsigned int'
p62926
sS'default'
p62927
S'0'
p62928
sS'name'
p62929
S'seed'
p62930
sS'required'
p62931
I00
sS'group_name'
p62932
S'Advanced'
p62933
sa(dp62934
S'description'
p62935
g3
sS'cpp_type'
p62936
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62937
sS'default'
p62938
S'ComputeElasticityTensor'
p62939
sS'name'
p62940
S'type'
p62941
sS'required'
p62942
I00
sS'group_name'
p62943
Nsa(dp62944
S'description'
p62945
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62946
sS'cpp_type'
p62947
S'bool'
p62948
sS'default'
p62949
S'0'
p62950
sS'name'
p62951
S'use_displaced_mesh'
p62952
sS'required'
p62953
I00
sS'group_name'
p62954
S'Advanced'
p62955
sasS'name'
p62956
S'/Materials/ComputeElasticityTensor'
p62957
sa(dp62958
S'description'
p62959
S'Compute an elasticity tensor for crystal plasticity.\n'
p62960
sS'subblocks'
p62961
NsS'parameters'
p62962
(lp62963
(dp62964
S'description'
p62965
S'Stiffness tensor for material\n'
p62966
sS'cpp_type'
p62967
S'std::vector<double, std::allocator<double> >'
p62968
sS'default'
p62969
g3
sS'name'
p62970
S'C_ijkl'
p62971
sS'required'
p62972
I01
sS'group_name'
p62973
Nsa(dp62974
S'description'
p62975
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62976
sS'cpp_type'
p62977
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62978
sS'default'
p62979
g3
sS'name'
p62980
S'base_name'
p62981
sS'required'
p62982
I00
sS'group_name'
p62983
Nsa(dp62984
S'description'
p62985
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62986
sS'cpp_type'
p62987
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62988
sS'default'
p62989
g3
sS'name'
p62990
S'block'
p62991
sS'required'
p62992
I00
sS'group_name'
p62993
Nsa(dp62994
S'description'
p62995
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62996
sS'cpp_type'
p62997
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62998
sS'default'
p62999
g3
sS'name'
p63000
S'boundary'
p63001
sS'required'
p63002
I00
sS'group_name'
p63003
Nsa(dp63004
S'description'
p63005
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63006
sS'cpp_type'
p63007
S'bool'
p63008
sS'default'
p63009
S'1'
p63010
sS'name'
p63011
S'compute'
p63012
sS'required'
p63013
I00
sS'group_name'
p63014
Nsa(dp63015
S'description'
p63016
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63017
sS'cpp_type'
p63018
S'bool'
p63019
sS'default'
p63020
S'0'
p63021
sS'name'
p63022
S'constant_on_elem'
p63023
sS'required'
p63024
I00
sS'group_name'
p63025
S'Advanced'
p63026
sa(dp63027
S'description'
p63028
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63029
sS'cpp_type'
p63030
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63031
sS'default'
p63032
g3
sS'name'
p63033
S'control_tags'
p63034
sS'required'
p63035
I00
sS'group_name'
p63036
S'Advanced'
p63037
sa(dp63038
S'description'
p63039
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p63040
sS'cpp_type'
p63041
S'FunctionName'
p63042
sS'default'
p63043
g3
sS'name'
p63044
S'elasticity_tensor_prefactor'
p63045
sS'required'
p63046
I00
sS'group_name'
p63047
Nsa(dp63048
S'description'
p63049
S'Set the enabled status of the MooseObject.\n'
p63050
sS'cpp_type'
p63051
S'bool'
p63052
sS'default'
p63053
S'1'
p63054
sS'name'
p63055
S'enable'
p63056
sS'required'
p63057
I00
sS'group_name'
p63058
S'Advanced'
p63059
sa(dp63060
S'description'
p63061
S'Euler angle in direction 1\n'
p63062
sS'cpp_type'
p63063
S'double'
p63064
sS'default'
p63065
S'0'
p63066
sS'name'
p63067
S'euler_angle_1'
p63068
sS'required'
p63069
I00
sS'group_name'
p63070
Nsa(dp63071
S'description'
p63072
S'Euler angle in direction 2\n'
p63073
sS'cpp_type'
p63074
S'double'
p63075
sS'default'
p63076
S'0'
p63077
sS'name'
p63078
S'euler_angle_2'
p63079
sS'required'
p63080
I00
sS'group_name'
p63081
Nsa(dp63082
S'description'
p63083
S'Euler angle in direction 3\n'
p63084
sS'cpp_type'
p63085
S'double'
p63086
sS'default'
p63087
S'0'
p63088
sS'name'
p63089
S'euler_angle_3'
p63090
sS'required'
p63091
I00
sS'group_name'
p63092
Nsa(dp63093
S'name'
p63094
S'fill_method'
p63095
sS'cpp_type'
p63096
S'MooseEnum'
p63097
sS'default'
p63098
S'symmetric9'
p63099
sS'description'
p63100
S'The fill method\n'
p63101
sS'required'
p63102
I00
sS'options'
p63103
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p63104
sS'group_name'
p63105
Nsa(dp63106
S'description'
p63107
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63108
sS'cpp_type'
p63109
S'bool'
p63110
sS'default'
p63111
S'1'
p63112
sS'name'
p63113
S'implicit'
p63114
sS'required'
p63115
I00
sS'group_name'
p63116
S'Advanced'
p63117
sa(dp63118
S'description'
p63119
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63120
sS'cpp_type'
p63121
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63122
sS'default'
p63123
g3
sS'name'
p63124
S'output_properties'
p63125
sS'required'
p63126
I00
sS'group_name'
p63127
S'Outputs'
p63128
sa(dp63129
S'description'
p63130
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63131
sS'cpp_type'
p63132
S'std::vector<OutputName, std::allocator<OutputName> >'
p63133
sS'default'
p63134
S'none'
p63135
sS'name'
p63136
S'outputs'
p63137
sS'required'
p63138
I00
sS'group_name'
p63139
S'Outputs'
p63140
sa(dp63141
S'description'
p63142
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p63143
sS'cpp_type'
p63144
S'UserObjectName'
p63145
sS'default'
p63146
g3
sS'name'
p63147
S'read_prop_user_object'
p63148
sS'required'
p63149
I00
sS'group_name'
p63150
Nsa(dp63151
S'description'
p63152
S'The seed for the master random number generator\n'
p63153
sS'cpp_type'
p63154
S'unsigned int'
p63155
sS'default'
p63156
S'0'
p63157
sS'name'
p63158
S'seed'
p63159
sS'required'
p63160
I00
sS'group_name'
p63161
S'Advanced'
p63162
sa(dp63163
S'description'
p63164
g3
sS'cpp_type'
p63165
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63166
sS'default'
p63167
S'ComputeElasticityTensorCP'
p63168
sS'name'
p63169
S'type'
p63170
sS'required'
p63171
I00
sS'group_name'
p63172
Nsa(dp63173
S'description'
p63174
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63175
sS'cpp_type'
p63176
S'bool'
p63177
sS'default'
p63178
S'0'
p63179
sS'name'
p63180
S'use_displaced_mesh'
p63181
sS'required'
p63182
I00
sS'group_name'
p63183
S'Advanced'
p63184
sasS'name'
p63185
S'/Materials/ComputeElasticityTensorCP'
p63186
sa(dp63187
S'description'
p63188
S'Computes a constant extra stress that is added to the stress calculated by the constitutive model\n'
p63189
sS'subblocks'
p63190
NsS'parameters'
p63191
(lp63192
(dp63193
S'description'
p63194
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63195
sS'cpp_type'
p63196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63197
sS'default'
p63198
g3
sS'name'
p63199
S'base_name'
p63200
sS'required'
p63201
I00
sS'group_name'
p63202
Nsa(dp63203
S'description'
p63204
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63205
sS'cpp_type'
p63206
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63207
sS'default'
p63208
g3
sS'name'
p63209
S'block'
p63210
sS'required'
p63211
I00
sS'group_name'
p63212
Nsa(dp63213
S'description'
p63214
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63215
sS'cpp_type'
p63216
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63217
sS'default'
p63218
g3
sS'name'
p63219
S'boundary'
p63220
sS'required'
p63221
I00
sS'group_name'
p63222
Nsa(dp63223
S'description'
p63224
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63225
sS'cpp_type'
p63226
S'bool'
p63227
sS'default'
p63228
S'1'
p63229
sS'name'
p63230
S'compute'
p63231
sS'required'
p63232
I00
sS'group_name'
p63233
Nsa(dp63234
S'description'
p63235
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63236
sS'cpp_type'
p63237
S'bool'
p63238
sS'default'
p63239
S'0'
p63240
sS'name'
p63241
S'constant_on_elem'
p63242
sS'required'
p63243
I00
sS'group_name'
p63244
S'Advanced'
p63245
sa(dp63246
S'description'
p63247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63248
sS'cpp_type'
p63249
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63250
sS'default'
p63251
g3
sS'name'
p63252
S'control_tags'
p63253
sS'required'
p63254
I00
sS'group_name'
p63255
S'Advanced'
p63256
sa(dp63257
S'description'
p63258
S'Set the enabled status of the MooseObject.\n'
p63259
sS'cpp_type'
p63260
S'bool'
p63261
sS'default'
p63262
S'1'
p63263
sS'name'
p63264
S'enable'
p63265
sS'required'
p63266
I00
sS'group_name'
p63267
S'Advanced'
p63268
sa(dp63269
S'description'
p63270
S'Vector of values defining the constant extra stress to add, in order 11, 22, 33, 23, 13, 12\n'
p63271
sS'cpp_type'
p63272
S'std::vector<double, std::allocator<double> >'
p63273
sS'default'
p63274
g3
sS'name'
p63275
S'extra_stress_tensor'
p63276
sS'required'
p63277
I01
sS'group_name'
p63278
Nsa(dp63279
S'description'
p63280
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63281
sS'cpp_type'
p63282
S'bool'
p63283
sS'default'
p63284
S'1'
p63285
sS'name'
p63286
S'implicit'
p63287
sS'required'
p63288
I00
sS'group_name'
p63289
S'Advanced'
p63290
sa(dp63291
S'description'
p63292
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63293
sS'cpp_type'
p63294
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63295
sS'default'
p63296
g3
sS'name'
p63297
S'output_properties'
p63298
sS'required'
p63299
I00
sS'group_name'
p63300
S'Outputs'
p63301
sa(dp63302
S'description'
p63303
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63304
sS'cpp_type'
p63305
S'std::vector<OutputName, std::allocator<OutputName> >'
p63306
sS'default'
p63307
S'none'
p63308
sS'name'
p63309
S'outputs'
p63310
sS'required'
p63311
I00
sS'group_name'
p63312
S'Outputs'
p63313
sa(dp63314
S'description'
p63315
S'Name of material defining additional constant prefactor\n'
p63316
sS'cpp_type'
p63317
S'MaterialPropertyName'
p63318
sS'default'
p63319
S'1'
p63320
sS'name'
p63321
S'prefactor'
p63322
sS'required'
p63323
I00
sS'group_name'
p63324
Nsa(dp63325
S'description'
p63326
S'The seed for the master random number generator\n'
p63327
sS'cpp_type'
p63328
S'unsigned int'
p63329
sS'default'
p63330
S'0'
p63331
sS'name'
p63332
S'seed'
p63333
sS'required'
p63334
I00
sS'group_name'
p63335
S'Advanced'
p63336
sa(dp63337
S'description'
p63338
g3
sS'cpp_type'
p63339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63340
sS'default'
p63341
S'ComputeExtraStressConstant'
p63342
sS'name'
p63343
S'type'
p63344
sS'required'
p63345
I00
sS'group_name'
p63346
Nsa(dp63347
S'description'
p63348
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63349
sS'cpp_type'
p63350
S'bool'
p63351
sS'default'
p63352
S'0'
p63353
sS'name'
p63354
S'use_displaced_mesh'
p63355
sS'required'
p63356
I00
sS'group_name'
p63357
S'Advanced'
p63358
sasS'name'
p63359
S'/Materials/ComputeExtraStressConstant'
p63360
sa(dp63361
S'description'
p63362
S'Compute a strain increment and rotation increment for finite strains.\n'
p63363
sS'subblocks'
p63364
NsS'parameters'
p63365
(lp63366
(dp63367
S'description'
p63368
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63369
sS'cpp_type'
p63370
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63371
sS'default'
p63372
g3
sS'name'
p63373
S'base_name'
p63374
sS'required'
p63375
I00
sS'group_name'
p63376
Nsa(dp63377
S'description'
p63378
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63379
sS'cpp_type'
p63380
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63381
sS'default'
p63382
g3
sS'name'
p63383
S'block'
p63384
sS'required'
p63385
I00
sS'group_name'
p63386
Nsa(dp63387
S'description'
p63388
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63389
sS'cpp_type'
p63390
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63391
sS'default'
p63392
g3
sS'name'
p63393
S'boundary'
p63394
sS'required'
p63395
I00
sS'group_name'
p63396
Nsa(dp63397
S'description'
p63398
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63399
sS'cpp_type'
p63400
S'bool'
p63401
sS'default'
p63402
S'1'
p63403
sS'name'
p63404
S'compute'
p63405
sS'required'
p63406
I00
sS'group_name'
p63407
Nsa(dp63408
S'description'
p63409
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63410
sS'cpp_type'
p63411
S'bool'
p63412
sS'default'
p63413
S'0'
p63414
sS'name'
p63415
S'constant_on_elem'
p63416
sS'required'
p63417
I00
sS'group_name'
p63418
S'Advanced'
p63419
sa(dp63420
S'description'
p63421
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63422
sS'cpp_type'
p63423
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63424
sS'default'
p63425
g3
sS'name'
p63426
S'control_tags'
p63427
sS'required'
p63428
I00
sS'group_name'
p63429
S'Advanced'
p63430
sa(dp63431
S'name'
p63432
S'decomposition_method'
p63433
sS'cpp_type'
p63434
S'MooseEnum'
p63435
sS'default'
p63436
S'TaylorExpansion'
p63437
sS'description'
p63438
S'Methods to calculate the strain and rotation increments\n'
p63439
sS'required'
p63440
I00
sS'options'
p63441
S'TaylorExpansion EigenSolution'
p63442
sS'group_name'
p63443
Nsa(dp63444
S'description'
p63445
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p63446
sS'cpp_type'
p63447
S'std::vector<VariableName>'
p63448
sS'default'
p63449
g3
sS'name'
p63450
S'displacements'
p63451
sS'required'
p63452
I01
sS'group_name'
p63453
Nsa(dp63454
S'description'
p63455
S'List of eigenstrains to be applied in this strain calculation\n'
p63456
sS'cpp_type'
p63457
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p63458
sS'default'
p63459
g3
sS'name'
p63460
S'eigenstrain_names'
p63461
sS'required'
p63462
I00
sS'group_name'
p63463
Nsa(dp63464
S'description'
p63465
S'Set the enabled status of the MooseObject.\n'
p63466
sS'cpp_type'
p63467
S'bool'
p63468
sS'default'
p63469
S'1'
p63470
sS'name'
p63471
S'enable'
p63472
sS'required'
p63473
I00
sS'group_name'
p63474
S'Advanced'
p63475
sa(dp63476
S'description'
p63477
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63478
sS'cpp_type'
p63479
S'bool'
p63480
sS'default'
p63481
S'1'
p63482
sS'name'
p63483
S'implicit'
p63484
sS'required'
p63485
I00
sS'group_name'
p63486
S'Advanced'
p63487
sa(dp63488
S'description'
p63489
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63490
sS'cpp_type'
p63491
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63492
sS'default'
p63493
g3
sS'name'
p63494
S'output_properties'
p63495
sS'required'
p63496
I00
sS'group_name'
p63497
S'Outputs'
p63498
sa(dp63499
S'description'
p63500
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63501
sS'cpp_type'
p63502
S'std::vector<OutputName, std::allocator<OutputName> >'
p63503
sS'default'
p63504
S'none'
p63505
sS'name'
p63506
S'outputs'
p63507
sS'required'
p63508
I00
sS'group_name'
p63509
S'Outputs'
p63510
sa(dp63511
S'description'
p63512
S'The seed for the master random number generator\n'
p63513
sS'cpp_type'
p63514
S'unsigned int'
p63515
sS'default'
p63516
S'0'
p63517
sS'name'
p63518
S'seed'
p63519
sS'required'
p63520
I00
sS'group_name'
p63521
S'Advanced'
p63522
sa(dp63523
S'description'
p63524
g3
sS'cpp_type'
p63525
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63526
sS'default'
p63527
S'ComputeFiniteStrain'
p63528
sS'name'
p63529
S'type'
p63530
sS'required'
p63531
I00
sS'group_name'
p63532
Nsa(dp63533
S'description'
p63534
S'Flag to correct volumetric locking\n'
p63535
sS'cpp_type'
p63536
S'bool'
p63537
sS'default'
p63538
S'0'
p63539
sS'name'
p63540
S'volumetric_locking_correction'
p63541
sS'required'
p63542
I00
sS'group_name'
p63543
NsasS'name'
p63544
S'/Materials/ComputeFiniteStrain'
p63545
sa(dp63546
S'description'
p63547
S'Compute stress using elasticity for finite strains\n'
p63548
sS'subblocks'
p63549
NsS'parameters'
p63550
(lp63551
(dp63552
S'description'
p63553
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63554
sS'cpp_type'
p63555
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63556
sS'default'
p63557
g3
sS'name'
p63558
S'base_name'
p63559
sS'required'
p63560
I00
sS'group_name'
p63561
Nsa(dp63562
S'description'
p63563
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63564
sS'cpp_type'
p63565
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63566
sS'default'
p63567
g3
sS'name'
p63568
S'block'
p63569
sS'required'
p63570
I00
sS'group_name'
p63571
Nsa(dp63572
S'description'
p63573
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63574
sS'cpp_type'
p63575
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63576
sS'default'
p63577
g3
sS'name'
p63578
S'boundary'
p63579
sS'required'
p63580
I00
sS'group_name'
p63581
Nsa(dp63582
S'description'
p63583
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63584
sS'cpp_type'
p63585
S'bool'
p63586
sS'default'
p63587
S'1'
p63588
sS'name'
p63589
S'compute'
p63590
sS'required'
p63591
I00
sS'group_name'
p63592
Nsa(dp63593
S'description'
p63594
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63595
sS'cpp_type'
p63596
S'bool'
p63597
sS'default'
p63598
S'0'
p63599
sS'name'
p63600
S'constant_on_elem'
p63601
sS'required'
p63602
I00
sS'group_name'
p63603
S'Advanced'
p63604
sa(dp63605
S'description'
p63606
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63607
sS'cpp_type'
p63608
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63609
sS'default'
p63610
g3
sS'name'
p63611
S'control_tags'
p63612
sS'required'
p63613
I00
sS'group_name'
p63614
S'Advanced'
p63615
sa(dp63616
S'description'
p63617
S'Set the enabled status of the MooseObject.\n'
p63618
sS'cpp_type'
p63619
S'bool'
p63620
sS'default'
p63621
S'1'
p63622
sS'name'
p63623
S'enable'
p63624
sS'required'
p63625
I00
sS'group_name'
p63626
S'Advanced'
p63627
sa(dp63628
S'description'
p63629
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63630
sS'cpp_type'
p63631
S'bool'
p63632
sS'default'
p63633
S'1'
p63634
sS'name'
p63635
S'implicit'
p63636
sS'required'
p63637
I00
sS'group_name'
p63638
S'Advanced'
p63639
sa(dp63640
S'description'
p63641
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p63642
sS'cpp_type'
p63643
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p63644
sS'default'
p63645
g3
sS'name'
p63646
S'initial_stress'
p63647
sS'required'
p63648
I00
sS'group_name'
p63649
Nsa(dp63650
S'description'
p63651
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63652
sS'cpp_type'
p63653
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63654
sS'default'
p63655
g3
sS'name'
p63656
S'output_properties'
p63657
sS'required'
p63658
I00
sS'group_name'
p63659
S'Outputs'
p63660
sa(dp63661
S'description'
p63662
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63663
sS'cpp_type'
p63664
S'std::vector<OutputName, std::allocator<OutputName> >'
p63665
sS'default'
p63666
S'none'
p63667
sS'name'
p63668
S'outputs'
p63669
sS'required'
p63670
I00
sS'group_name'
p63671
S'Outputs'
p63672
sa(dp63673
S'description'
p63674
S'The seed for the master random number generator\n'
p63675
sS'cpp_type'
p63676
S'unsigned int'
p63677
sS'default'
p63678
S'0'
p63679
sS'name'
p63680
S'seed'
p63681
sS'required'
p63682
I00
sS'group_name'
p63683
S'Advanced'
p63684
sa(dp63685
S'description'
p63686
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p63687
sS'cpp_type'
p63688
S'bool'
p63689
sS'default'
p63690
S'0'
p63691
sS'name'
p63692
S'store_stress_old'
p63693
sS'required'
p63694
I00
sS'group_name'
p63695
Nsa(dp63696
S'description'
p63697
g3
sS'cpp_type'
p63698
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63699
sS'default'
p63700
S'ComputeFiniteStrainElasticStress'
p63701
sS'name'
p63702
S'type'
p63703
sS'required'
p63704
I00
sS'group_name'
p63705
NsasS'name'
p63706
S'/Materials/ComputeFiniteStrainElasticStress'
p63707
sa(dp63708
S'description'
p63709
S'Compute a strain increment and rotation increment for small strains.\n'
p63710
sS'subblocks'
p63711
NsS'parameters'
p63712
(lp63713
(dp63714
S'description'
p63715
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63716
sS'cpp_type'
p63717
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63718
sS'default'
p63719
g3
sS'name'
p63720
S'base_name'
p63721
sS'required'
p63722
I00
sS'group_name'
p63723
Nsa(dp63724
S'description'
p63725
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63726
sS'cpp_type'
p63727
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63728
sS'default'
p63729
g3
sS'name'
p63730
S'block'
p63731
sS'required'
p63732
I00
sS'group_name'
p63733
Nsa(dp63734
S'description'
p63735
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63736
sS'cpp_type'
p63737
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63738
sS'default'
p63739
g3
sS'name'
p63740
S'boundary'
p63741
sS'required'
p63742
I00
sS'group_name'
p63743
Nsa(dp63744
S'description'
p63745
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63746
sS'cpp_type'
p63747
S'bool'
p63748
sS'default'
p63749
S'1'
p63750
sS'name'
p63751
S'compute'
p63752
sS'required'
p63753
I00
sS'group_name'
p63754
Nsa(dp63755
S'description'
p63756
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63757
sS'cpp_type'
p63758
S'bool'
p63759
sS'default'
p63760
S'0'
p63761
sS'name'
p63762
S'constant_on_elem'
p63763
sS'required'
p63764
I00
sS'group_name'
p63765
S'Advanced'
p63766
sa(dp63767
S'description'
p63768
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63769
sS'cpp_type'
p63770
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63771
sS'default'
p63772
g3
sS'name'
p63773
S'control_tags'
p63774
sS'required'
p63775
I00
sS'group_name'
p63776
S'Advanced'
p63777
sa(dp63778
S'description'
p63779
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p63780
sS'cpp_type'
p63781
S'std::vector<VariableName>'
p63782
sS'default'
p63783
g3
sS'name'
p63784
S'displacements'
p63785
sS'required'
p63786
I01
sS'group_name'
p63787
Nsa(dp63788
S'description'
p63789
S'List of eigenstrains to be applied in this strain calculation\n'
p63790
sS'cpp_type'
p63791
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p63792
sS'default'
p63793
g3
sS'name'
p63794
S'eigenstrain_names'
p63795
sS'required'
p63796
I00
sS'group_name'
p63797
Nsa(dp63798
S'description'
p63799
S'Set the enabled status of the MooseObject.\n'
p63800
sS'cpp_type'
p63801
S'bool'
p63802
sS'default'
p63803
S'1'
p63804
sS'name'
p63805
S'enable'
p63806
sS'required'
p63807
I00
sS'group_name'
p63808
S'Advanced'
p63809
sa(dp63810
S'description'
p63811
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63812
sS'cpp_type'
p63813
S'bool'
p63814
sS'default'
p63815
S'1'
p63816
sS'name'
p63817
S'implicit'
p63818
sS'required'
p63819
I00
sS'group_name'
p63820
S'Advanced'
p63821
sa(dp63822
S'description'
p63823
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63824
sS'cpp_type'
p63825
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63826
sS'default'
p63827
g3
sS'name'
p63828
S'output_properties'
p63829
sS'required'
p63830
I00
sS'group_name'
p63831
S'Outputs'
p63832
sa(dp63833
S'description'
p63834
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63835
sS'cpp_type'
p63836
S'std::vector<OutputName, std::allocator<OutputName> >'
p63837
sS'default'
p63838
S'none'
p63839
sS'name'
p63840
S'outputs'
p63841
sS'required'
p63842
I00
sS'group_name'
p63843
S'Outputs'
p63844
sa(dp63845
S'description'
p63846
S'The seed for the master random number generator\n'
p63847
sS'cpp_type'
p63848
S'unsigned int'
p63849
sS'default'
p63850
S'0'
p63851
sS'name'
p63852
S'seed'
p63853
sS'required'
p63854
I00
sS'group_name'
p63855
S'Advanced'
p63856
sa(dp63857
S'description'
p63858
g3
sS'cpp_type'
p63859
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63860
sS'default'
p63861
S'ComputeIncrementalSmallStrain'
p63862
sS'name'
p63863
S'type'
p63864
sS'required'
p63865
I00
sS'group_name'
p63866
Nsa(dp63867
S'description'
p63868
S'Flag to correct volumetric locking\n'
p63869
sS'cpp_type'
p63870
S'bool'
p63871
sS'default'
p63872
S'0'
p63873
sS'name'
p63874
S'volumetric_locking_correction'
p63875
sS'required'
p63876
I00
sS'group_name'
p63877
NsasS'name'
p63878
S'/Materials/ComputeIncrementalSmallStrain'
p63879
sa(dp63880
S'description'
p63881
S'Computes eigenstrain due to thermal expansion using a function that describes the instantaneous thermal expansion as a function of temperature\n'
p63882
sS'subblocks'
p63883
NsS'parameters'
p63884
(lp63885
(dp63886
S'description'
p63887
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63888
sS'cpp_type'
p63889
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63890
sS'default'
p63891
g3
sS'name'
p63892
S'base_name'
p63893
sS'required'
p63894
I00
sS'group_name'
p63895
Nsa(dp63896
S'description'
p63897
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63898
sS'cpp_type'
p63899
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63900
sS'default'
p63901
g3
sS'name'
p63902
S'block'
p63903
sS'required'
p63904
I00
sS'group_name'
p63905
Nsa(dp63906
S'description'
p63907
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63908
sS'cpp_type'
p63909
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63910
sS'default'
p63911
g3
sS'name'
p63912
S'boundary'
p63913
sS'required'
p63914
I00
sS'group_name'
p63915
Nsa(dp63916
S'description'
p63917
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63918
sS'cpp_type'
p63919
S'bool'
p63920
sS'default'
p63921
S'1'
p63922
sS'name'
p63923
S'compute'
p63924
sS'required'
p63925
I00
sS'group_name'
p63926
Nsa(dp63927
S'description'
p63928
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63929
sS'cpp_type'
p63930
S'bool'
p63931
sS'default'
p63932
S'0'
p63933
sS'name'
p63934
S'constant_on_elem'
p63935
sS'required'
p63936
I00
sS'group_name'
p63937
S'Advanced'
p63938
sa(dp63939
S'description'
p63940
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63941
sS'cpp_type'
p63942
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63943
sS'default'
p63944
g3
sS'name'
p63945
S'control_tags'
p63946
sS'required'
p63947
I00
sS'group_name'
p63948
S'Advanced'
p63949
sa(dp63950
S'description'
p63951
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p63952
sS'cpp_type'
p63953
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63954
sS'default'
p63955
g3
sS'name'
p63956
S'eigenstrain_name'
p63957
sS'required'
p63958
I01
sS'group_name'
p63959
Nsa(dp63960
S'description'
p63961
S'Set the enabled status of the MooseObject.\n'
p63962
sS'cpp_type'
p63963
S'bool'
p63964
sS'default'
p63965
S'1'
p63966
sS'name'
p63967
S'enable'
p63968
sS'required'
p63969
I00
sS'group_name'
p63970
S'Advanced'
p63971
sa(dp63972
S'description'
p63973
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63974
sS'cpp_type'
p63975
S'bool'
p63976
sS'default'
p63977
S'1'
p63978
sS'name'
p63979
S'implicit'
p63980
sS'required'
p63981
I00
sS'group_name'
p63982
S'Advanced'
p63983
sa(dp63984
S'description'
p63985
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p63986
sS'cpp_type'
p63987
S'bool'
p63988
sS'default'
p63989
S'1'
p63990
sS'name'
p63991
S'incremental_form'
p63992
sS'required'
p63993
I00
sS'group_name'
p63994
Nsa(dp63995
S'description'
p63996
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63997
sS'cpp_type'
p63998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63999
sS'default'
p64000
g3
sS'name'
p64001
S'output_properties'
p64002
sS'required'
p64003
I00
sS'group_name'
p64004
S'Outputs'
p64005
sa(dp64006
S'description'
p64007
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64008
sS'cpp_type'
p64009
S'std::vector<OutputName, std::allocator<OutputName> >'
p64010
sS'default'
p64011
S'none'
p64012
sS'name'
p64013
S'outputs'
p64014
sS'required'
p64015
I00
sS'group_name'
p64016
S'Outputs'
p64017
sa(dp64018
S'description'
p64019
S'The seed for the master random number generator\n'
p64020
sS'cpp_type'
p64021
S'unsigned int'
p64022
sS'default'
p64023
S'0'
p64024
sS'name'
p64025
S'seed'
p64026
sS'required'
p64027
I00
sS'group_name'
p64028
S'Advanced'
p64029
sa(dp64030
S'description'
p64031
S'Reference temperature for thermal eigenstrain calculation\n'
p64032
sS'cpp_type'
p64033
S'double'
p64034
sS'default'
p64035
g3
sS'name'
p64036
S'stress_free_reference_temperature'
p64037
sS'required'
p64038
I00
sS'group_name'
p64039
Nsa(dp64040
S'description'
p64041
S'Reference temperature for thermal eigenstrain calculation\n'
p64042
sS'cpp_type'
p64043
S'double'
p64044
sS'default'
p64045
g3
sS'name'
p64046
S'stress_free_temperature'
p64047
sS'required'
p64048
I00
sS'group_name'
p64049
Nsa(dp64050
S'description'
p64051
S'Coupled temperature\n'
p64052
sS'cpp_type'
p64053
S'std::vector<VariableName>'
p64054
sS'default'
p64055
g3
sS'name'
p64056
S'temperature'
p64057
sS'required'
p64058
I00
sS'group_name'
p64059
Nsa(dp64060
S'description'
p64061
S'Function describing the instantaneous thermal expansion coefficient as a function of temperature\n'
p64062
sS'cpp_type'
p64063
S'FunctionName'
p64064
sS'default'
p64065
g3
sS'name'
p64066
S'thermal_expansion_function'
p64067
sS'required'
p64068
I01
sS'group_name'
p64069
Nsa(dp64070
S'description'
p64071
g3
sS'cpp_type'
p64072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64073
sS'default'
p64074
S'ComputeInstantaneousThermalExpansionFunctionEigenstrain'
p64075
sS'name'
p64076
S'type'
p64077
sS'required'
p64078
I00
sS'group_name'
p64079
Nsa(dp64080
S'description'
p64081
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64082
sS'cpp_type'
p64083
S'bool'
p64084
sS'default'
p64085
S'0'
p64086
sS'name'
p64087
S'use_displaced_mesh'
p64088
sS'required'
p64089
I00
sS'group_name'
p64090
S'Advanced'
p64091
sasS'name'
p64092
S'/Materials/ComputeInstantaneousThermalExpansionFunctionEigenstrain'
p64093
sa(dp64094
S'description'
p64095
S'Compute an isotropic elasticity tensor.\n'
p64096
sS'subblocks'
p64097
NsS'parameters'
p64098
(lp64099
(dp64100
S'description'
p64101
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64102
sS'cpp_type'
p64103
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64104
sS'default'
p64105
g3
sS'name'
p64106
S'base_name'
p64107
sS'required'
p64108
I00
sS'group_name'
p64109
Nsa(dp64110
S'description'
p64111
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64112
sS'cpp_type'
p64113
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64114
sS'default'
p64115
g3
sS'name'
p64116
S'block'
p64117
sS'required'
p64118
I00
sS'group_name'
p64119
Nsa(dp64120
S'description'
p64121
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64122
sS'cpp_type'
p64123
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64124
sS'default'
p64125
g3
sS'name'
p64126
S'boundary'
p64127
sS'required'
p64128
I00
sS'group_name'
p64129
Nsa(dp64130
S'description'
p64131
S'The bulk modulus for the material.\n'
p64132
sS'cpp_type'
p64133
S'double'
p64134
sS'default'
p64135
g3
sS'name'
p64136
S'bulk_modulus'
p64137
sS'required'
p64138
I00
sS'group_name'
p64139
Nsa(dp64140
S'description'
p64141
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64142
sS'cpp_type'
p64143
S'bool'
p64144
sS'default'
p64145
S'1'
p64146
sS'name'
p64147
S'compute'
p64148
sS'required'
p64149
I00
sS'group_name'
p64150
Nsa(dp64151
S'description'
p64152
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64153
sS'cpp_type'
p64154
S'bool'
p64155
sS'default'
p64156
S'0'
p64157
sS'name'
p64158
S'constant_on_elem'
p64159
sS'required'
p64160
I00
sS'group_name'
p64161
S'Advanced'
p64162
sa(dp64163
S'description'
p64164
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64165
sS'cpp_type'
p64166
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64167
sS'default'
p64168
g3
sS'name'
p64169
S'control_tags'
p64170
sS'required'
p64171
I00
sS'group_name'
p64172
S'Advanced'
p64173
sa(dp64174
S'description'
p64175
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p64176
sS'cpp_type'
p64177
S'FunctionName'
p64178
sS'default'
p64179
g3
sS'name'
p64180
S'elasticity_tensor_prefactor'
p64181
sS'required'
p64182
I00
sS'group_name'
p64183
Nsa(dp64184
S'description'
p64185
S'Set the enabled status of the MooseObject.\n'
p64186
sS'cpp_type'
p64187
S'bool'
p64188
sS'default'
p64189
S'1'
p64190
sS'name'
p64191
S'enable'
p64192
sS'required'
p64193
I00
sS'group_name'
p64194
S'Advanced'
p64195
sa(dp64196
S'description'
p64197
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64198
sS'cpp_type'
p64199
S'bool'
p64200
sS'default'
p64201
S'1'
p64202
sS'name'
p64203
S'implicit'
p64204
sS'required'
p64205
I00
sS'group_name'
p64206
S'Advanced'
p64207
sa(dp64208
S'description'
p64209
S"Lame's first constant for the material.\n"
p64210
sS'cpp_type'
p64211
S'double'
p64212
sS'default'
p64213
g3
sS'name'
p64214
S'lambda'
p64215
sS'required'
p64216
I00
sS'group_name'
p64217
Nsa(dp64218
S'description'
p64219
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64220
sS'cpp_type'
p64221
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64222
sS'default'
p64223
g3
sS'name'
p64224
S'output_properties'
p64225
sS'required'
p64226
I00
sS'group_name'
p64227
S'Outputs'
p64228
sa(dp64229
S'description'
p64230
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64231
sS'cpp_type'
p64232
S'std::vector<OutputName, std::allocator<OutputName> >'
p64233
sS'default'
p64234
S'none'
p64235
sS'name'
p64236
S'outputs'
p64237
sS'required'
p64238
I00
sS'group_name'
p64239
S'Outputs'
p64240
sa(dp64241
S'description'
p64242
S"Poisson's ratio for the material.\n"
p64243
sS'cpp_type'
p64244
S'double'
p64245
sS'default'
p64246
g3
sS'name'
p64247
S'poissons_ratio'
p64248
sS'required'
p64249
I00
sS'group_name'
p64250
Nsa(dp64251
S'description'
p64252
S'The seed for the master random number generator\n'
p64253
sS'cpp_type'
p64254
S'unsigned int'
p64255
sS'default'
p64256
S'0'
p64257
sS'name'
p64258
S'seed'
p64259
sS'required'
p64260
I00
sS'group_name'
p64261
S'Advanced'
p64262
sa(dp64263
S'description'
p64264
S'The shear modulus of the material.\n'
p64265
sS'cpp_type'
p64266
S'double'
p64267
sS'default'
p64268
g3
sS'name'
p64269
S'shear_modulus'
p64270
sS'required'
p64271
I00
sS'group_name'
p64272
Nsa(dp64273
S'description'
p64274
g3
sS'cpp_type'
p64275
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64276
sS'default'
p64277
S'ComputeIsotropicElasticityTensor'
p64278
sS'name'
p64279
S'type'
p64280
sS'required'
p64281
I00
sS'group_name'
p64282
Nsa(dp64283
S'description'
p64284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64285
sS'cpp_type'
p64286
S'bool'
p64287
sS'default'
p64288
S'0'
p64289
sS'name'
p64290
S'use_displaced_mesh'
p64291
sS'required'
p64292
I00
sS'group_name'
p64293
S'Advanced'
p64294
sa(dp64295
S'description'
p64296
S"Young's modulus of the material.\n"
p64297
sS'cpp_type'
p64298
S'double'
p64299
sS'default'
p64300
g3
sS'name'
p64301
S'youngs_modulus'
p64302
sS'required'
p64303
I00
sS'group_name'
p64304
NsasS'name'
p64305
S'/Materials/ComputeIsotropicElasticityTensor'
p64306
sa(dp64307
S'description'
p64308
S"Computes Cosserat elasticity and flexural bending rigidity tensors relevant for simulations with layered materials.  The layering direction is assumed to be perpendicular to the 'z' direction.\n"
p64309
sS'subblocks'
p64310
NsS'parameters'
p64311
(lp64312
(dp64313
S'description'
p64314
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64315
sS'cpp_type'
p64316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64317
sS'default'
p64318
g3
sS'name'
p64319
S'base_name'
p64320
sS'required'
p64321
I00
sS'group_name'
p64322
Nsa(dp64323
S'description'
p64324
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64325
sS'cpp_type'
p64326
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64327
sS'default'
p64328
g3
sS'name'
p64329
S'block'
p64330
sS'required'
p64331
I00
sS'group_name'
p64332
Nsa(dp64333
S'description'
p64334
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64335
sS'cpp_type'
p64336
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64337
sS'default'
p64338
g3
sS'name'
p64339
S'boundary'
p64340
sS'required'
p64341
I00
sS'group_name'
p64342
Nsa(dp64343
S'description'
p64344
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64345
sS'cpp_type'
p64346
S'bool'
p64347
sS'default'
p64348
S'1'
p64349
sS'name'
p64350
S'compute'
p64351
sS'required'
p64352
I00
sS'group_name'
p64353
Nsa(dp64354
S'description'
p64355
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64356
sS'cpp_type'
p64357
S'bool'
p64358
sS'default'
p64359
S'0'
p64360
sS'name'
p64361
S'constant_on_elem'
p64362
sS'required'
p64363
I00
sS'group_name'
p64364
S'Advanced'
p64365
sa(dp64366
S'description'
p64367
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64368
sS'cpp_type'
p64369
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64370
sS'default'
p64371
g3
sS'name'
p64372
S'control_tags'
p64373
sS'required'
p64374
I00
sS'group_name'
p64375
S'Advanced'
p64376
sa(dp64377
S'description'
p64378
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p64379
sS'cpp_type'
p64380
S'FunctionName'
p64381
sS'default'
p64382
g3
sS'name'
p64383
S'elasticity_tensor_prefactor'
p64384
sS'required'
p64385
I00
sS'group_name'
p64386
Nsa(dp64387
S'description'
p64388
S'Set the enabled status of the MooseObject.\n'
p64389
sS'cpp_type'
p64390
S'bool'
p64391
sS'default'
p64392
S'1'
p64393
sS'name'
p64394
S'enable'
p64395
sS'required'
p64396
I00
sS'group_name'
p64397
S'Advanced'
p64398
sa(dp64399
S'description'
p64400
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64401
sS'cpp_type'
p64402
S'bool'
p64403
sS'default'
p64404
S'1'
p64405
sS'name'
p64406
S'implicit'
p64407
sS'required'
p64408
I00
sS'group_name'
p64409
S'Advanced'
p64410
sa(dp64411
S'description'
p64412
S'The joint normal stiffness\n'
p64413
sS'cpp_type'
p64414
S'double'
p64415
sS'default'
p64416
g3
sS'name'
p64417
S'joint_normal_stiffness'
p64418
sS'required'
p64419
I01
sS'group_name'
p64420
Nsa(dp64421
S'description'
p64422
S'The joint shear stiffness\n'
p64423
sS'cpp_type'
p64424
S'double'
p64425
sS'default'
p64426
g3
sS'name'
p64427
S'joint_shear_stiffness'
p64428
sS'required'
p64429
I01
sS'group_name'
p64430
Nsa(dp64431
S'description'
p64432
S'The layer thickness\n'
p64433
sS'cpp_type'
p64434
S'double'
p64435
sS'default'
p64436
g3
sS'name'
p64437
S'layer_thickness'
p64438
sS'required'
p64439
I01
sS'group_name'
p64440
Nsa(dp64441
S'description'
p64442
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64443
sS'cpp_type'
p64444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64445
sS'default'
p64446
g3
sS'name'
p64447
S'output_properties'
p64448
sS'required'
p64449
I00
sS'group_name'
p64450
S'Outputs'
p64451
sa(dp64452
S'description'
p64453
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64454
sS'cpp_type'
p64455
S'std::vector<OutputName, std::allocator<OutputName> >'
p64456
sS'default'
p64457
S'none'
p64458
sS'name'
p64459
S'outputs'
p64460
sS'required'
p64461
I00
sS'group_name'
p64462
S'Outputs'
p64463
sa(dp64464
S'description'
p64465
S"The Poisson's ratio\n"
p64466
sS'cpp_type'
p64467
S'double'
p64468
sS'default'
p64469
g3
sS'name'
p64470
S'poisson'
p64471
sS'required'
p64472
I01
sS'group_name'
p64473
Nsa(dp64474
S'description'
p64475
S'The seed for the master random number generator\n'
p64476
sS'cpp_type'
p64477
S'unsigned int'
p64478
sS'default'
p64479
S'0'
p64480
sS'name'
p64481
S'seed'
p64482
sS'required'
p64483
I00
sS'group_name'
p64484
S'Advanced'
p64485
sa(dp64486
S'description'
p64487
g3
sS'cpp_type'
p64488
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64489
sS'default'
p64490
S'ComputeLayeredCosseratElasticityTensor'
p64491
sS'name'
p64492
S'type'
p64493
sS'required'
p64494
I00
sS'group_name'
p64495
Nsa(dp64496
S'description'
p64497
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64498
sS'cpp_type'
p64499
S'bool'
p64500
sS'default'
p64501
S'0'
p64502
sS'name'
p64503
S'use_displaced_mesh'
p64504
sS'required'
p64505
I00
sS'group_name'
p64506
S'Advanced'
p64507
sa(dp64508
S'description'
p64509
S"The Young's modulus\n"
p64510
sS'cpp_type'
p64511
S'double'
p64512
sS'default'
p64513
g3
sS'name'
p64514
S'young'
p64515
sS'required'
p64516
I01
sS'group_name'
p64517
NsasS'name'
p64518
S'/Materials/ComputeLayeredCosseratElasticityTensor'
p64519
sa(dp64520
S'description'
p64521
S'Phase-field fracture model energy contribution to fracture for elasticity and undamaged stress under compressive strain\n'
p64522
sS'subblocks'
p64523
NsS'parameters'
p64524
(lp64525
(dp64526
S'description'
p64527
S'Name of material property storing the elastic energy\n'
p64528
sS'cpp_type'
p64529
S'MaterialPropertyName'
p64530
sS'default'
p64531
S'E_el'
p64532
sS'name'
p64533
S'F_name'
p64534
sS'required'
p64535
I00
sS'group_name'
p64536
Nsa(dp64537
S'description'
p64538
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64539
sS'cpp_type'
p64540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64541
sS'default'
p64542
g3
sS'name'
p64543
S'base_name'
p64544
sS'required'
p64545
I00
sS'group_name'
p64546
Nsa(dp64547
S'description'
p64548
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64549
sS'cpp_type'
p64550
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64551
sS'default'
p64552
g3
sS'name'
p64553
S'block'
p64554
sS'required'
p64555
I00
sS'group_name'
p64556
Nsa(dp64557
S'description'
p64558
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64559
sS'cpp_type'
p64560
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64561
sS'default'
p64562
g3
sS'name'
p64563
S'boundary'
p64564
sS'required'
p64565
I00
sS'group_name'
p64566
Nsa(dp64567
S'description'
p64568
S'Order parameter for damage\n'
p64569
sS'cpp_type'
p64570
S'std::vector<VariableName>'
p64571
sS'default'
p64572
g3
sS'name'
p64573
S'c'
p64574
sS'required'
p64575
I01
sS'group_name'
p64576
Nsa(dp64577
S'description'
p64578
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64579
sS'cpp_type'
p64580
S'bool'
p64581
sS'default'
p64582
S'1'
p64583
sS'name'
p64584
S'compute'
p64585
sS'required'
p64586
I00
sS'group_name'
p64587
Nsa(dp64588
S'description'
p64589
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64590
sS'cpp_type'
p64591
S'bool'
p64592
sS'default'
p64593
S'0'
p64594
sS'name'
p64595
S'constant_on_elem'
p64596
sS'required'
p64597
I00
sS'group_name'
p64598
S'Advanced'
p64599
sa(dp64600
S'description'
p64601
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64602
sS'cpp_type'
p64603
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64604
sS'default'
p64605
g3
sS'name'
p64606
S'control_tags'
p64607
sS'required'
p64608
I00
sS'group_name'
p64609
S'Advanced'
p64610
sa(dp64611
S'description'
p64612
S'Set the enabled status of the MooseObject.\n'
p64613
sS'cpp_type'
p64614
S'bool'
p64615
sS'default'
p64616
S'1'
p64617
sS'name'
p64618
S'enable'
p64619
sS'required'
p64620
I00
sS'group_name'
p64621
S'Advanced'
p64622
sa(dp64623
S'description'
p64624
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64625
sS'cpp_type'
p64626
S'bool'
p64627
sS'default'
p64628
S'1'
p64629
sS'name'
p64630
S'implicit'
p64631
sS'required'
p64632
I00
sS'group_name'
p64633
S'Advanced'
p64634
sa(dp64635
S'description'
p64636
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p64637
sS'cpp_type'
p64638
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p64639
sS'default'
p64640
g3
sS'name'
p64641
S'initial_stress'
p64642
sS'required'
p64643
I00
sS'group_name'
p64644
Nsa(dp64645
S'description'
p64646
S'Stiffness of damaged matrix\n'
p64647
sS'cpp_type'
p64648
S'double'
p64649
sS'default'
p64650
S'1e-06'
p64651
sS'name'
p64652
S'kdamage'
p64653
sS'required'
p64654
I00
sS'group_name'
p64655
Nsa(dp64656
S'description'
p64657
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64658
sS'cpp_type'
p64659
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64660
sS'default'
p64661
g3
sS'name'
p64662
S'output_properties'
p64663
sS'required'
p64664
I00
sS'group_name'
p64665
S'Outputs'
p64666
sa(dp64667
S'description'
p64668
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64669
sS'cpp_type'
p64670
S'std::vector<OutputName, std::allocator<OutputName> >'
p64671
sS'default'
p64672
S'none'
p64673
sS'name'
p64674
S'outputs'
p64675
sS'required'
p64676
I00
sS'group_name'
p64677
S'Outputs'
p64678
sa(dp64679
S'description'
p64680
S'The seed for the master random number generator\n'
p64681
sS'cpp_type'
p64682
S'unsigned int'
p64683
sS'default'
p64684
S'0'
p64685
sS'name'
p64686
S'seed'
p64687
sS'required'
p64688
I00
sS'group_name'
p64689
S'Advanced'
p64690
sa(dp64691
S'description'
p64692
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p64693
sS'cpp_type'
p64694
S'bool'
p64695
sS'default'
p64696
S'0'
p64697
sS'name'
p64698
S'store_stress_old'
p64699
sS'required'
p64700
I00
sS'group_name'
p64701
Nsa(dp64702
S'description'
p64703
g3
sS'cpp_type'
p64704
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64705
sS'default'
p64706
S'ComputeLinearElasticPFFractureStress'
p64707
sS'name'
p64708
S'type'
p64709
sS'required'
p64710
I00
sS'group_name'
p64711
NsasS'name'
p64712
S'/Materials/ComputeLinearElasticPFFractureStress'
p64713
sa(dp64714
S'description'
p64715
S'Compute stress using elasticity for small strains\n'
p64716
sS'subblocks'
p64717
NsS'parameters'
p64718
(lp64719
(dp64720
S'description'
p64721
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64722
sS'cpp_type'
p64723
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64724
sS'default'
p64725
g3
sS'name'
p64726
S'base_name'
p64727
sS'required'
p64728
I00
sS'group_name'
p64729
Nsa(dp64730
S'description'
p64731
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64732
sS'cpp_type'
p64733
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64734
sS'default'
p64735
g3
sS'name'
p64736
S'block'
p64737
sS'required'
p64738
I00
sS'group_name'
p64739
Nsa(dp64740
S'description'
p64741
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64742
sS'cpp_type'
p64743
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64744
sS'default'
p64745
g3
sS'name'
p64746
S'boundary'
p64747
sS'required'
p64748
I00
sS'group_name'
p64749
Nsa(dp64750
S'description'
p64751
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64752
sS'cpp_type'
p64753
S'bool'
p64754
sS'default'
p64755
S'1'
p64756
sS'name'
p64757
S'compute'
p64758
sS'required'
p64759
I00
sS'group_name'
p64760
Nsa(dp64761
S'description'
p64762
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64763
sS'cpp_type'
p64764
S'bool'
p64765
sS'default'
p64766
S'0'
p64767
sS'name'
p64768
S'constant_on_elem'
p64769
sS'required'
p64770
I00
sS'group_name'
p64771
S'Advanced'
p64772
sa(dp64773
S'description'
p64774
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64775
sS'cpp_type'
p64776
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64777
sS'default'
p64778
g3
sS'name'
p64779
S'control_tags'
p64780
sS'required'
p64781
I00
sS'group_name'
p64782
S'Advanced'
p64783
sa(dp64784
S'description'
p64785
S'Set the enabled status of the MooseObject.\n'
p64786
sS'cpp_type'
p64787
S'bool'
p64788
sS'default'
p64789
S'1'
p64790
sS'name'
p64791
S'enable'
p64792
sS'required'
p64793
I00
sS'group_name'
p64794
S'Advanced'
p64795
sa(dp64796
S'description'
p64797
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64798
sS'cpp_type'
p64799
S'bool'
p64800
sS'default'
p64801
S'1'
p64802
sS'name'
p64803
S'implicit'
p64804
sS'required'
p64805
I00
sS'group_name'
p64806
S'Advanced'
p64807
sa(dp64808
S'description'
p64809
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p64810
sS'cpp_type'
p64811
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p64812
sS'default'
p64813
g3
sS'name'
p64814
S'initial_stress'
p64815
sS'required'
p64816
I00
sS'group_name'
p64817
Nsa(dp64818
S'description'
p64819
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64820
sS'cpp_type'
p64821
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64822
sS'default'
p64823
g3
sS'name'
p64824
S'output_properties'
p64825
sS'required'
p64826
I00
sS'group_name'
p64827
S'Outputs'
p64828
sa(dp64829
S'description'
p64830
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64831
sS'cpp_type'
p64832
S'std::vector<OutputName, std::allocator<OutputName> >'
p64833
sS'default'
p64834
S'none'
p64835
sS'name'
p64836
S'outputs'
p64837
sS'required'
p64838
I00
sS'group_name'
p64839
S'Outputs'
p64840
sa(dp64841
S'description'
p64842
S'The seed for the master random number generator\n'
p64843
sS'cpp_type'
p64844
S'unsigned int'
p64845
sS'default'
p64846
S'0'
p64847
sS'name'
p64848
S'seed'
p64849
sS'required'
p64850
I00
sS'group_name'
p64851
S'Advanced'
p64852
sa(dp64853
S'description'
p64854
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p64855
sS'cpp_type'
p64856
S'bool'
p64857
sS'default'
p64858
S'0'
p64859
sS'name'
p64860
S'store_stress_old'
p64861
sS'required'
p64862
I00
sS'group_name'
p64863
Nsa(dp64864
S'description'
p64865
g3
sS'cpp_type'
p64866
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64867
sS'default'
p64868
S'ComputeLinearElasticStress'
p64869
sS'name'
p64870
S'type'
p64871
sS'required'
p64872
I00
sS'group_name'
p64873
NsasS'name'
p64874
S'/Materials/ComputeLinearElasticStress'
p64875
sa(dp64876
S'description'
p64877
S'Computes eigenstrain due to thermal expansion using a function that describes the mean thermal expansion as a function of temperature\n'
p64878
sS'subblocks'
p64879
NsS'parameters'
p64880
(lp64881
(dp64882
S'description'
p64883
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64884
sS'cpp_type'
p64885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64886
sS'default'
p64887
g3
sS'name'
p64888
S'base_name'
p64889
sS'required'
p64890
I00
sS'group_name'
p64891
Nsa(dp64892
S'description'
p64893
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64894
sS'cpp_type'
p64895
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64896
sS'default'
p64897
g3
sS'name'
p64898
S'block'
p64899
sS'required'
p64900
I00
sS'group_name'
p64901
Nsa(dp64902
S'description'
p64903
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64904
sS'cpp_type'
p64905
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64906
sS'default'
p64907
g3
sS'name'
p64908
S'boundary'
p64909
sS'required'
p64910
I00
sS'group_name'
p64911
Nsa(dp64912
S'description'
p64913
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64914
sS'cpp_type'
p64915
S'bool'
p64916
sS'default'
p64917
S'1'
p64918
sS'name'
p64919
S'compute'
p64920
sS'required'
p64921
I00
sS'group_name'
p64922
Nsa(dp64923
S'description'
p64924
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64925
sS'cpp_type'
p64926
S'bool'
p64927
sS'default'
p64928
S'0'
p64929
sS'name'
p64930
S'constant_on_elem'
p64931
sS'required'
p64932
I00
sS'group_name'
p64933
S'Advanced'
p64934
sa(dp64935
S'description'
p64936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64937
sS'cpp_type'
p64938
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64939
sS'default'
p64940
g3
sS'name'
p64941
S'control_tags'
p64942
sS'required'
p64943
I00
sS'group_name'
p64944
S'Advanced'
p64945
sa(dp64946
S'description'
p64947
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p64948
sS'cpp_type'
p64949
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64950
sS'default'
p64951
g3
sS'name'
p64952
S'eigenstrain_name'
p64953
sS'required'
p64954
I01
sS'group_name'
p64955
Nsa(dp64956
S'description'
p64957
S'Set the enabled status of the MooseObject.\n'
p64958
sS'cpp_type'
p64959
S'bool'
p64960
sS'default'
p64961
S'1'
p64962
sS'name'
p64963
S'enable'
p64964
sS'required'
p64965
I00
sS'group_name'
p64966
S'Advanced'
p64967
sa(dp64968
S'description'
p64969
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64970
sS'cpp_type'
p64971
S'bool'
p64972
sS'default'
p64973
S'1'
p64974
sS'name'
p64975
S'implicit'
p64976
sS'required'
p64977
I00
sS'group_name'
p64978
S'Advanced'
p64979
sa(dp64980
S'description'
p64981
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p64982
sS'cpp_type'
p64983
S'bool'
p64984
sS'default'
p64985
S'0'
p64986
sS'name'
p64987
S'incremental_form'
p64988
sS'required'
p64989
I00
sS'group_name'
p64990
Nsa(dp64991
S'description'
p64992
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64993
sS'cpp_type'
p64994
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64995
sS'default'
p64996
g3
sS'name'
p64997
S'output_properties'
p64998
sS'required'
p64999
I00
sS'group_name'
p65000
S'Outputs'
p65001
sa(dp65002
S'description'
p65003
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65004
sS'cpp_type'
p65005
S'std::vector<OutputName, std::allocator<OutputName> >'
p65006
sS'default'
p65007
S'none'
p65008
sS'name'
p65009
S'outputs'
p65010
sS'required'
p65011
I00
sS'group_name'
p65012
S'Outputs'
p65013
sa(dp65014
S'description'
p65015
S'The seed for the master random number generator\n'
p65016
sS'cpp_type'
p65017
S'unsigned int'
p65018
sS'default'
p65019
S'0'
p65020
sS'name'
p65021
S'seed'
p65022
sS'required'
p65023
I00
sS'group_name'
p65024
S'Advanced'
p65025
sa(dp65026
S'description'
p65027
S'Reference temperature for thermal eigenstrain calculation\n'
p65028
sS'cpp_type'
p65029
S'double'
p65030
sS'default'
p65031
g3
sS'name'
p65032
S'stress_free_reference_temperature'
p65033
sS'required'
p65034
I00
sS'group_name'
p65035
Nsa(dp65036
S'description'
p65037
S'Reference temperature for thermal eigenstrain calculation\n'
p65038
sS'cpp_type'
p65039
S'double'
p65040
sS'default'
p65041
g3
sS'name'
p65042
S'stress_free_temperature'
p65043
sS'required'
p65044
I00
sS'group_name'
p65045
Nsa(dp65046
S'description'
p65047
S'Coupled temperature\n'
p65048
sS'cpp_type'
p65049
S'std::vector<VariableName>'
p65050
sS'default'
p65051
g3
sS'name'
p65052
S'temperature'
p65053
sS'required'
p65054
I00
sS'group_name'
p65055
Nsa(dp65056
S'description'
p65057
S'Function describing the mean thermal expansion as a function of temperature\n'
p65058
sS'cpp_type'
p65059
S'FunctionName'
p65060
sS'default'
p65061
g3
sS'name'
p65062
S'thermal_expansion_function'
p65063
sS'required'
p65064
I01
sS'group_name'
p65065
Nsa(dp65066
S'description'
p65067
S'Reference temperature for thermal_exansion_function (IMPORTANT: this is different in general from the stress_free_temperature)\n'
p65068
sS'cpp_type'
p65069
S'double'
p65070
sS'default'
p65071
g3
sS'name'
p65072
S'thermal_expansion_function_reference_temperature'
p65073
sS'required'
p65074
I01
sS'group_name'
p65075
Nsa(dp65076
S'description'
p65077
g3
sS'cpp_type'
p65078
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65079
sS'default'
p65080
S'ComputeMeanThermalExpansionFunctionEigenstrain'
p65081
sS'name'
p65082
S'type'
p65083
sS'required'
p65084
I00
sS'group_name'
p65085
Nsa(dp65086
S'description'
p65087
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65088
sS'cpp_type'
p65089
S'bool'
p65090
sS'default'
p65091
S'0'
p65092
sS'name'
p65093
S'use_displaced_mesh'
p65094
sS'required'
p65095
I00
sS'group_name'
p65096
S'Advanced'
p65097
sasS'name'
p65098
S'/Materials/ComputeMeanThermalExpansionFunctionEigenstrain'
p65099
sa(dp65100
S'description'
p65101
S'Material for multi-surface finite-strain plasticity\n'
p65102
sS'subblocks'
p65103
NsS'parameters'
p65104
(lp65105
(dp65106
S'description'
p65107
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65108
sS'cpp_type'
p65109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65110
sS'default'
p65111
g3
sS'name'
p65112
S'base_name'
p65113
sS'required'
p65114
I00
sS'group_name'
p65115
Nsa(dp65116
S'description'
p65117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65118
sS'cpp_type'
p65119
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65120
sS'default'
p65121
g3
sS'name'
p65122
S'block'
p65123
sS'required'
p65124
I00
sS'group_name'
p65125
Nsa(dp65126
S'description'
p65127
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65128
sS'cpp_type'
p65129
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65130
sS'default'
p65131
g3
sS'name'
p65132
S'boundary'
p65133
sS'required'
p65134
I00
sS'group_name'
p65135
Nsa(dp65136
S'description'
p65137
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65138
sS'cpp_type'
p65139
S'bool'
p65140
sS'default'
p65141
S'1'
p65142
sS'name'
p65143
S'compute'
p65144
sS'required'
p65145
I00
sS'group_name'
p65146
Nsa(dp65147
S'description'
p65148
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65149
sS'cpp_type'
p65150
S'bool'
p65151
sS'default'
p65152
S'0'
p65153
sS'name'
p65154
S'constant_on_elem'
p65155
sS'required'
p65156
I00
sS'group_name'
p65157
S'Advanced'
p65158
sa(dp65159
S'description'
p65160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65161
sS'cpp_type'
p65162
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65163
sS'default'
p65164
g3
sS'name'
p65165
S'control_tags'
p65166
sS'required'
p65167
I00
sS'group_name'
p65168
S'Advanced'
p65169
sa(dp65170
S'name'
p65171
S'deactivation_scheme'
p65172
sS'cpp_type'
p65173
S'MooseEnum'
p65174
sS'default'
p65175
S'optimized'
p65176
sS'description'
p65177
S"Scheme by which constraints are deactivated.  (NOTE: This is irrelevant if there is only one yield surface.)  safe: return to the yield surface and then deactivate constraints with negative plasticity multipliers.  optimized: deactivate a constraint as soon as its plasticity multiplier becomes negative.  dumb: iteratively try all combinations of active constraints until the solution is found.  You may specify fall-back options.  Eg optimized_to_safe: first use 'optimized', and if that fails, try the return with 'safe'.\n"
p65178
sS'required'
p65179
I00
sS'options'
p65180
S'optimized safe dumb optimized_to_safe safe_to_dumb optimized_to_safe_to_dumb optimized_to_dumb'
p65181
sS'group_name'
p65182
Nsa(dp65183
S'name'
p65184
S'debug_fspb'
p65185
sS'cpp_type'
p65186
S'MooseEnum'
p65187
sS'default'
p65188
S'none'
p65189
sS'description'
p65190
S'Debug types for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian, and check Ax=b\n'
p65191
sS'required'
p65192
I00
sS'options'
p65193
S'none crash jacobian jacobian_and_linear_system'
p65194
sS'group_name'
p65195
Nsa(dp65196
S'description'
p65197
S'Debug finite differencing parameters for the internal parameters\n'
p65198
sS'cpp_type'
p65199
S'std::vector<double, std::allocator<double> >'
p65200
sS'default'
p65201
g3
sS'name'
p65202
S'debug_intnl_change'
p65203
sS'required'
p65204
I00
sS'group_name'
p65205
Nsa(dp65206
S'description'
p65207
S'Debug Jacobian entries at these internal parameters\n'
p65208
sS'cpp_type'
p65209
S'std::vector<double, std::allocator<double> >'
p65210
sS'default'
p65211
g3
sS'name'
p65212
S'debug_jac_at_intnl'
p65213
sS'required'
p65214
I00
sS'group_name'
p65215
Nsa(dp65216
S'description'
p65217
S'Debug Jacobian entries at these plastic multipliers\n'
p65218
sS'cpp_type'
p65219
S'std::vector<double, std::allocator<double> >'
p65220
sS'default'
p65221
g3
sS'name'
p65222
S'debug_jac_at_pm'
p65223
sS'required'
p65224
I00
sS'group_name'
p65225
Nsa(dp65226
S'description'
p65227
S'Debug Jacobian entries at this stress.  For use by developers\n'
p65228
sS'cpp_type'
p65229
S'libMesh::TensorValue<double>'
p65230
sS'default'
p65231
S'(xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0)'
p65232
sS'name'
p65233
S'debug_jac_at_stress'
p65234
sS'required'
p65235
I00
sS'group_name'
p65236
Nsa(dp65237
S'description'
p65238
S'Debug finite differencing parameters for the plastic multipliers\n'
p65239
sS'cpp_type'
p65240
S'std::vector<double, std::allocator<double> >'
p65241
sS'default'
p65242
g3
sS'name'
p65243
S'debug_pm_change'
p65244
sS'required'
p65245
I00
sS'group_name'
p65246
Nsa(dp65247
S'description'
p65248
S'Debug finite differencing parameter for the stress\n'
p65249
sS'cpp_type'
p65250
S'double'
p65251
sS'default'
p65252
S'1'
p65253
sS'name'
p65254
S'debug_stress_change'
p65255
sS'required'
p65256
I00
sS'group_name'
p65257
Nsa(dp65258
S'description'
p65259
S'Set the enabled status of the MooseObject.\n'
p65260
sS'cpp_type'
p65261
S'bool'
p65262
sS'default'
p65263
S'1'
p65264
sS'name'
p65265
S'enable'
p65266
sS'required'
p65267
I00
sS'group_name'
p65268
S'Advanced'
p65269
sa(dp65270
S'description'
p65271
S'The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n'
p65272
sS'cpp_type'
p65273
S'double'
p65274
sS'default'
p65275
g3
sS'name'
p65276
S'ep_plastic_tolerance'
p65277
sS'required'
p65278
I01
sS'group_name'
p65279
Nsa(dp65280
S'description'
p65281
S"The return-map algorithm will return with the best admissible stresses and internal parameters that it can, even if they don't fully correspond to the applied strain increment.  To speed computations, this flag can be set to true, the max_NR_iterations set small, and the min_stepsize large.\n"
p65282
sS'cpp_type'
p65283
S'bool'
p65284
sS'default'
p65285
S'0'
p65286
sS'name'
p65287
S'ignore_failures'
p65288
sS'required'
p65289
I00
sS'group_name'
p65290
Nsa(dp65291
S'description'
p65292
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65293
sS'cpp_type'
p65294
S'bool'
p65295
sS'default'
p65296
S'1'
p65297
sS'name'
p65298
S'implicit'
p65299
sS'required'
p65300
I00
sS'group_name'
p65301
S'Advanced'
p65302
sa(dp65303
S'description'
p65304
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p65305
sS'cpp_type'
p65306
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p65307
sS'default'
p65308
g3
sS'name'
p65309
S'initial_stress'
p65310
sS'required'
p65311
I00
sS'group_name'
p65312
Nsa(dp65313
S'description'
p65314
S'Flow directions are considered linearly dependent if the smallest singular value is less than linear_dependent times the largest singular value\n'
p65315
sS'cpp_type'
p65316
S'double'
p65317
sS'default'
p65318
S'0.0001'
p65319
sS'name'
p65320
S'linear_dependent'
p65321
sS'required'
p65322
I00
sS'group_name'
p65323
Nsa(dp65324
S'description'
p65325
S'Maximum number of Newton-Raphson iterations allowed\n'
p65326
sS'cpp_type'
p65327
S'unsigned int'
p65328
sS'default'
p65329
S'20'
p65330
sS'name'
p65331
S'max_NR_iterations'
p65332
sS'required'
p65333
I00
sS'group_name'
p65334
Nsa(dp65335
S'description'
p65336
S"If your deactivation_scheme is 'something_to_dumb', then 'dumb' will only be used if the stepsize falls below this value.  This parameter is useful because the 'dumb' scheme is computationally expensive\n"
p65337
sS'cpp_type'
p65338
S'double'
p65339
sS'default'
p65340
S'0.01'
p65341
sS'name'
p65342
S'max_stepsize_for_dumb'
p65343
sS'required'
p65344
I00
sS'group_name'
p65345
Nsa(dp65346
S'description'
p65347
S'If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the minimum fraction of applied strain increment that may be applied before the algorithm gives up entirely\n'
p65348
sS'cpp_type'
p65349
S'double'
p65350
sS'default'
p65351
S'0.01'
p65352
sS'name'
p65353
S'min_stepsize'
p65354
sS'required'
p65355
I00
sS'group_name'
p65356
Nsa(dp65357
S'description'
p65358
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65359
sS'cpp_type'
p65360
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65361
sS'default'
p65362
g3
sS'name'
p65363
S'output_properties'
p65364
sS'required'
p65365
I00
sS'group_name'
p65366
S'Outputs'
p65367
sa(dp65368
S'description'
p65369
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65370
sS'cpp_type'
p65371
S'std::vector<OutputName, std::allocator<OutputName> >'
p65372
sS'default'
p65373
S'none'
p65374
sS'name'
p65375
S'outputs'
p65376
sS'required'
p65377
I00
sS'group_name'
p65378
S'Outputs'
p65379
sa(dp65380
S'description'
p65381
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p65382
sS'cpp_type'
p65383
S'bool'
p65384
sS'default'
p65385
S'1'
p65386
sS'name'
p65387
S'perform_finite_strain_rotations'
p65388
sS'required'
p65389
I00
sS'group_name'
p65390
Nsa(dp65391
S'description'
p65392
S'List of names of user objects that define the plastic models that could be active for this material.  If no plastic_models are provided, only elasticity will be used.\n'
p65393
sS'cpp_type'
p65394
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p65395
sS'default'
p65396
g3
sS'name'
p65397
S'plastic_models'
p65398
sS'required'
p65399
I00
sS'group_name'
p65400
Nsa(dp65401
S'description'
p65402
S'The seed for the master random number generator\n'
p65403
sS'cpp_type'
p65404
S'unsigned int'
p65405
sS'default'
p65406
S'0'
p65407
sS'name'
p65408
S'seed'
p65409
sS'required'
p65410
I00
sS'group_name'
p65411
S'Advanced'
p65412
sa(dp65413
S'name'
p65414
S'specialIC'
p65415
sS'cpp_type'
p65416
S'MooseEnum'
p65417
sS'default'
p65418
S'none'
p65419
sS'description'
p65420
S"For certain combinations of plastic models, the set of active constraints can be initialized optimally.  'none': no special initialization is performed.  For all other choices, the plastic_models must be chosen to have the following types.  'rock': 'TensileMulti MohrCoulombMulti'.  'joint': 'WeakPlaneTensile WeakPlaneShear'.\n"
p65421
sS'required'
p65422
I00
sS'options'
p65423
S'none rock joint'
p65424
sS'group_name'
p65425
Nsa(dp65426
S'description'
p65427
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p65428
sS'cpp_type'
p65429
S'bool'
p65430
sS'default'
p65431
S'0'
p65432
sS'name'
p65433
S'store_stress_old'
p65434
sS'required'
p65435
I00
sS'group_name'
p65436
Nsa(dp65437
S'name'
p65438
S'tangent_operator'
p65439
sS'cpp_type'
p65440
S'MooseEnum'
p65441
sS'default'
p65442
S'nonlinear'
p65443
sS'description'
p65444
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'linear': return the consistent tangent operator that is correct for plasticity with yield functions linear in stress.  'nonlinear': return the full, general consistent tangent operator.  The calculations assume the hardening potentials are independent of stress and hardening parameters.\n"
p65445
sS'required'
p65446
I00
sS'options'
p65447
S'elastic linear nonlinear'
p65448
sS'group_name'
p65449
Nsa(dp65450
S'description'
p65451
S"If this parameter is provided, before the return-map algorithm is called a rotation is performed so that the 'z' axis in the new frame lies along the transverse_direction in the original frame.  After returning, the inverse rotation is performed.  The transverse_direction will itself rotate with large strains.  This is so that transversely-isotropic plasticity models may be easily defined in the frame where the isotropy holds in the x-y plane.\n"
p65452
sS'cpp_type'
p65453
S'libMesh::VectorValue<double>'
p65454
sS'default'
p65455
g3
sS'name'
p65456
S'transverse_direction'
p65457
sS'required'
p65458
I00
sS'group_name'
p65459
Nsa(dp65460
S'description'
p65461
g3
sS'cpp_type'
p65462
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65463
sS'default'
p65464
S'ComputeMultiPlasticityStress'
p65465
sS'name'
p65466
S'type'
p65467
sS'required'
p65468
I00
sS'group_name'
p65469
NsasS'name'
p65470
S'/Materials/ComputeMultiPlasticityStress'
p65471
sa(dp65472
S'description'
p65473
S'Compute strain increment and rotation increment for finite strain under 2D planar assumptions.\n'
p65474
sS'subblocks'
p65475
NsS'parameters'
p65476
(lp65477
(dp65478
S'description'
p65479
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65480
sS'cpp_type'
p65481
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65482
sS'default'
p65483
g3
sS'name'
p65484
S'base_name'
p65485
sS'required'
p65486
I00
sS'group_name'
p65487
Nsa(dp65488
S'description'
p65489
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65490
sS'cpp_type'
p65491
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65492
sS'default'
p65493
g3
sS'name'
p65494
S'block'
p65495
sS'required'
p65496
I00
sS'group_name'
p65497
Nsa(dp65498
S'description'
p65499
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65500
sS'cpp_type'
p65501
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65502
sS'default'
p65503
g3
sS'name'
p65504
S'boundary'
p65505
sS'required'
p65506
I00
sS'group_name'
p65507
Nsa(dp65508
S'description'
p65509
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65510
sS'cpp_type'
p65511
S'bool'
p65512
sS'default'
p65513
S'1'
p65514
sS'name'
p65515
S'compute'
p65516
sS'required'
p65517
I00
sS'group_name'
p65518
Nsa(dp65519
S'description'
p65520
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65521
sS'cpp_type'
p65522
S'bool'
p65523
sS'default'
p65524
S'0'
p65525
sS'name'
p65526
S'constant_on_elem'
p65527
sS'required'
p65528
I00
sS'group_name'
p65529
S'Advanced'
p65530
sa(dp65531
S'description'
p65532
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65533
sS'cpp_type'
p65534
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65535
sS'default'
p65536
g3
sS'name'
p65537
S'control_tags'
p65538
sS'required'
p65539
I00
sS'group_name'
p65540
S'Advanced'
p65541
sa(dp65542
S'name'
p65543
S'decomposition_method'
p65544
sS'cpp_type'
p65545
S'MooseEnum'
p65546
sS'default'
p65547
S'TaylorExpansion'
p65548
sS'description'
p65549
S'Methods to calculate the strain and rotation increments\n'
p65550
sS'required'
p65551
I00
sS'options'
p65552
S'TaylorExpansion EigenSolution'
p65553
sS'group_name'
p65554
Nsa(dp65555
S'description'
p65556
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p65557
sS'cpp_type'
p65558
S'std::vector<VariableName>'
p65559
sS'default'
p65560
g3
sS'name'
p65561
S'displacements'
p65562
sS'required'
p65563
I01
sS'group_name'
p65564
Nsa(dp65565
S'description'
p65566
S'List of eigenstrains to be applied in this strain calculation\n'
p65567
sS'cpp_type'
p65568
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p65569
sS'default'
p65570
g3
sS'name'
p65571
S'eigenstrain_names'
p65572
sS'required'
p65573
I00
sS'group_name'
p65574
Nsa(dp65575
S'description'
p65576
S'Set the enabled status of the MooseObject.\n'
p65577
sS'cpp_type'
p65578
S'bool'
p65579
sS'default'
p65580
S'1'
p65581
sS'name'
p65582
S'enable'
p65583
sS'required'
p65584
I00
sS'group_name'
p65585
S'Advanced'
p65586
sa(dp65587
S'description'
p65588
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65589
sS'cpp_type'
p65590
S'bool'
p65591
sS'default'
p65592
S'1'
p65593
sS'name'
p65594
S'implicit'
p65595
sS'required'
p65596
I00
sS'group_name'
p65597
S'Advanced'
p65598
sa(dp65599
S'description'
p65600
S'Nonlinear variable for plane stress condition\n'
p65601
sS'cpp_type'
p65602
S'std::vector<VariableName>'
p65603
sS'default'
p65604
g3
sS'name'
p65605
S'out_of_plane_strain'
p65606
sS'required'
p65607
I00
sS'group_name'
p65608
Nsa(dp65609
S'description'
p65610
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65611
sS'cpp_type'
p65612
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65613
sS'default'
p65614
g3
sS'name'
p65615
S'output_properties'
p65616
sS'required'
p65617
I00
sS'group_name'
p65618
S'Outputs'
p65619
sa(dp65620
S'description'
p65621
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65622
sS'cpp_type'
p65623
S'std::vector<OutputName, std::allocator<OutputName> >'
p65624
sS'default'
p65625
S'none'
p65626
sS'name'
p65627
S'outputs'
p65628
sS'required'
p65629
I00
sS'group_name'
p65630
S'Outputs'
p65631
sa(dp65632
S'description'
p65633
S'Scalar variable for generalized plane strain\n'
p65634
sS'cpp_type'
p65635
S'std::vector<VariableName>'
p65636
sS'default'
p65637
g3
sS'name'
p65638
S'scalar_out_of_plane_strain'
p65639
sS'required'
p65640
I00
sS'group_name'
p65641
Nsa(dp65642
S'description'
p65643
S'The seed for the master random number generator\n'
p65644
sS'cpp_type'
p65645
S'unsigned int'
p65646
sS'default'
p65647
S'0'
p65648
sS'name'
p65649
S'seed'
p65650
sS'required'
p65651
I00
sS'group_name'
p65652
S'Advanced'
p65653
sa(dp65654
S'description'
p65655
g3
sS'cpp_type'
p65656
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65657
sS'default'
p65658
S'ComputePlaneFiniteStrain'
p65659
sS'name'
p65660
S'type'
p65661
sS'required'
p65662
I00
sS'group_name'
p65663
Nsa(dp65664
S'description'
p65665
S'Flag to correct volumetric locking\n'
p65666
sS'cpp_type'
p65667
S'bool'
p65668
sS'default'
p65669
S'0'
p65670
sS'name'
p65671
S'volumetric_locking_correction'
p65672
sS'required'
p65673
I00
sS'group_name'
p65674
NsasS'name'
p65675
S'/Materials/ComputePlaneFiniteStrain'
p65676
sa(dp65677
S'description'
p65678
S'Compute strain increment for small strain under 2D planar assumptions.\n'
p65679
sS'subblocks'
p65680
NsS'parameters'
p65681
(lp65682
(dp65683
S'description'
p65684
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65685
sS'cpp_type'
p65686
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65687
sS'default'
p65688
g3
sS'name'
p65689
S'base_name'
p65690
sS'required'
p65691
I00
sS'group_name'
p65692
Nsa(dp65693
S'description'
p65694
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65695
sS'cpp_type'
p65696
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65697
sS'default'
p65698
g3
sS'name'
p65699
S'block'
p65700
sS'required'
p65701
I00
sS'group_name'
p65702
Nsa(dp65703
S'description'
p65704
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65705
sS'cpp_type'
p65706
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65707
sS'default'
p65708
g3
sS'name'
p65709
S'boundary'
p65710
sS'required'
p65711
I00
sS'group_name'
p65712
Nsa(dp65713
S'description'
p65714
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65715
sS'cpp_type'
p65716
S'bool'
p65717
sS'default'
p65718
S'1'
p65719
sS'name'
p65720
S'compute'
p65721
sS'required'
p65722
I00
sS'group_name'
p65723
Nsa(dp65724
S'description'
p65725
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65726
sS'cpp_type'
p65727
S'bool'
p65728
sS'default'
p65729
S'0'
p65730
sS'name'
p65731
S'constant_on_elem'
p65732
sS'required'
p65733
I00
sS'group_name'
p65734
S'Advanced'
p65735
sa(dp65736
S'description'
p65737
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65738
sS'cpp_type'
p65739
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65740
sS'default'
p65741
g3
sS'name'
p65742
S'control_tags'
p65743
sS'required'
p65744
I00
sS'group_name'
p65745
S'Advanced'
p65746
sa(dp65747
S'description'
p65748
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p65749
sS'cpp_type'
p65750
S'std::vector<VariableName>'
p65751
sS'default'
p65752
g3
sS'name'
p65753
S'displacements'
p65754
sS'required'
p65755
I01
sS'group_name'
p65756
Nsa(dp65757
S'description'
p65758
S'List of eigenstrains to be applied in this strain calculation\n'
p65759
sS'cpp_type'
p65760
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p65761
sS'default'
p65762
g3
sS'name'
p65763
S'eigenstrain_names'
p65764
sS'required'
p65765
I00
sS'group_name'
p65766
Nsa(dp65767
S'description'
p65768
S'Set the enabled status of the MooseObject.\n'
p65769
sS'cpp_type'
p65770
S'bool'
p65771
sS'default'
p65772
S'1'
p65773
sS'name'
p65774
S'enable'
p65775
sS'required'
p65776
I00
sS'group_name'
p65777
S'Advanced'
p65778
sa(dp65779
S'description'
p65780
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65781
sS'cpp_type'
p65782
S'bool'
p65783
sS'default'
p65784
S'1'
p65785
sS'name'
p65786
S'implicit'
p65787
sS'required'
p65788
I00
sS'group_name'
p65789
S'Advanced'
p65790
sa(dp65791
S'description'
p65792
S'Nonlinear variable for plane stress condition\n'
p65793
sS'cpp_type'
p65794
S'std::vector<VariableName>'
p65795
sS'default'
p65796
g3
sS'name'
p65797
S'out_of_plane_strain'
p65798
sS'required'
p65799
I00
sS'group_name'
p65800
Nsa(dp65801
S'description'
p65802
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65803
sS'cpp_type'
p65804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65805
sS'default'
p65806
g3
sS'name'
p65807
S'output_properties'
p65808
sS'required'
p65809
I00
sS'group_name'
p65810
S'Outputs'
p65811
sa(dp65812
S'description'
p65813
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65814
sS'cpp_type'
p65815
S'std::vector<OutputName, std::allocator<OutputName> >'
p65816
sS'default'
p65817
S'none'
p65818
sS'name'
p65819
S'outputs'
p65820
sS'required'
p65821
I00
sS'group_name'
p65822
S'Outputs'
p65823
sa(dp65824
S'description'
p65825
S'Scalar variable for generalized plane strain\n'
p65826
sS'cpp_type'
p65827
S'std::vector<VariableName>'
p65828
sS'default'
p65829
g3
sS'name'
p65830
S'scalar_out_of_plane_strain'
p65831
sS'required'
p65832
I00
sS'group_name'
p65833
Nsa(dp65834
S'description'
p65835
S'The seed for the master random number generator\n'
p65836
sS'cpp_type'
p65837
S'unsigned int'
p65838
sS'default'
p65839
S'0'
p65840
sS'name'
p65841
S'seed'
p65842
sS'required'
p65843
I00
sS'group_name'
p65844
S'Advanced'
p65845
sa(dp65846
S'description'
p65847
g3
sS'cpp_type'
p65848
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65849
sS'default'
p65850
S'ComputePlaneIncrementalStrain'
p65851
sS'name'
p65852
S'type'
p65853
sS'required'
p65854
I00
sS'group_name'
p65855
Nsa(dp65856
S'description'
p65857
S'Flag to correct volumetric locking\n'
p65858
sS'cpp_type'
p65859
S'bool'
p65860
sS'default'
p65861
S'0'
p65862
sS'name'
p65863
S'volumetric_locking_correction'
p65864
sS'required'
p65865
I00
sS'group_name'
p65866
NsasS'name'
p65867
S'/Materials/ComputePlaneIncrementalStrain'
p65868
sa(dp65869
S'description'
p65870
S'Compute a small strain under generalized plane strain assumptions where the out of plane strain is generally nonzero.\n'
p65871
sS'subblocks'
p65872
NsS'parameters'
p65873
(lp65874
(dp65875
S'description'
p65876
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65877
sS'cpp_type'
p65878
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65879
sS'default'
p65880
g3
sS'name'
p65881
S'base_name'
p65882
sS'required'
p65883
I00
sS'group_name'
p65884
Nsa(dp65885
S'description'
p65886
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65887
sS'cpp_type'
p65888
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65889
sS'default'
p65890
g3
sS'name'
p65891
S'block'
p65892
sS'required'
p65893
I00
sS'group_name'
p65894
Nsa(dp65895
S'description'
p65896
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65897
sS'cpp_type'
p65898
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65899
sS'default'
p65900
g3
sS'name'
p65901
S'boundary'
p65902
sS'required'
p65903
I00
sS'group_name'
p65904
Nsa(dp65905
S'description'
p65906
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65907
sS'cpp_type'
p65908
S'bool'
p65909
sS'default'
p65910
S'1'
p65911
sS'name'
p65912
S'compute'
p65913
sS'required'
p65914
I00
sS'group_name'
p65915
Nsa(dp65916
S'description'
p65917
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65918
sS'cpp_type'
p65919
S'bool'
p65920
sS'default'
p65921
S'0'
p65922
sS'name'
p65923
S'constant_on_elem'
p65924
sS'required'
p65925
I00
sS'group_name'
p65926
S'Advanced'
p65927
sa(dp65928
S'description'
p65929
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65930
sS'cpp_type'
p65931
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65932
sS'default'
p65933
g3
sS'name'
p65934
S'control_tags'
p65935
sS'required'
p65936
I00
sS'group_name'
p65937
S'Advanced'
p65938
sa(dp65939
S'description'
p65940
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p65941
sS'cpp_type'
p65942
S'std::vector<VariableName>'
p65943
sS'default'
p65944
g3
sS'name'
p65945
S'displacements'
p65946
sS'required'
p65947
I01
sS'group_name'
p65948
Nsa(dp65949
S'description'
p65950
S'List of eigenstrains to be applied in this strain calculation\n'
p65951
sS'cpp_type'
p65952
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p65953
sS'default'
p65954
g3
sS'name'
p65955
S'eigenstrain_names'
p65956
sS'required'
p65957
I00
sS'group_name'
p65958
Nsa(dp65959
S'description'
p65960
S'Set the enabled status of the MooseObject.\n'
p65961
sS'cpp_type'
p65962
S'bool'
p65963
sS'default'
p65964
S'1'
p65965
sS'name'
p65966
S'enable'
p65967
sS'required'
p65968
I00
sS'group_name'
p65969
S'Advanced'
p65970
sa(dp65971
S'description'
p65972
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65973
sS'cpp_type'
p65974
S'bool'
p65975
sS'default'
p65976
S'1'
p65977
sS'name'
p65978
S'implicit'
p65979
sS'required'
p65980
I00
sS'group_name'
p65981
S'Advanced'
p65982
sa(dp65983
S'description'
p65984
S'Nonlinear variable for plane stress condition\n'
p65985
sS'cpp_type'
p65986
S'std::vector<VariableName>'
p65987
sS'default'
p65988
g3
sS'name'
p65989
S'out_of_plane_strain'
p65990
sS'required'
p65991
I00
sS'group_name'
p65992
Nsa(dp65993
S'description'
p65994
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65995
sS'cpp_type'
p65996
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65997
sS'default'
p65998
g3
sS'name'
p65999
S'output_properties'
p66000
sS'required'
p66001
I00
sS'group_name'
p66002
S'Outputs'
p66003
sa(dp66004
S'description'
p66005
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66006
sS'cpp_type'
p66007
S'std::vector<OutputName, std::allocator<OutputName> >'
p66008
sS'default'
p66009
S'none'
p66010
sS'name'
p66011
S'outputs'
p66012
sS'required'
p66013
I00
sS'group_name'
p66014
S'Outputs'
p66015
sa(dp66016
S'description'
p66017
S'Scalar variable for generalized plane strain\n'
p66018
sS'cpp_type'
p66019
S'std::vector<VariableName>'
p66020
sS'default'
p66021
g3
sS'name'
p66022
S'scalar_out_of_plane_strain'
p66023
sS'required'
p66024
I00
sS'group_name'
p66025
Nsa(dp66026
S'description'
p66027
S'The seed for the master random number generator\n'
p66028
sS'cpp_type'
p66029
S'unsigned int'
p66030
sS'default'
p66031
S'0'
p66032
sS'name'
p66033
S'seed'
p66034
sS'required'
p66035
I00
sS'group_name'
p66036
S'Advanced'
p66037
sa(dp66038
S'description'
p66039
g3
sS'cpp_type'
p66040
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66041
sS'default'
p66042
S'ComputePlaneSmallStrain'
p66043
sS'name'
p66044
S'type'
p66045
sS'required'
p66046
I00
sS'group_name'
p66047
Nsa(dp66048
S'description'
p66049
S'Flag to correct volumetric locking\n'
p66050
sS'cpp_type'
p66051
S'bool'
p66052
sS'default'
p66053
S'0'
p66054
sS'name'
p66055
S'volumetric_locking_correction'
p66056
sS'required'
p66057
I00
sS'group_name'
p66058
NsasS'name'
p66059
S'/Materials/ComputePlaneSmallStrain'
p66060
sa(dp66061
S'description'
p66062
S'Plastic heat energy density = stress * plastic_strain_rate\n'
p66063
sS'subblocks'
p66064
NsS'parameters'
p66065
(lp66066
(dp66067
S'description'
p66068
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66069
sS'cpp_type'
p66070
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66071
sS'default'
p66072
g3
sS'name'
p66073
S'base_name'
p66074
sS'required'
p66075
I00
sS'group_name'
p66076
Nsa(dp66077
S'description'
p66078
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66079
sS'cpp_type'
p66080
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66081
sS'default'
p66082
g3
sS'name'
p66083
S'block'
p66084
sS'required'
p66085
I00
sS'group_name'
p66086
Nsa(dp66087
S'description'
p66088
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66089
sS'cpp_type'
p66090
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66091
sS'default'
p66092
g3
sS'name'
p66093
S'boundary'
p66094
sS'required'
p66095
I00
sS'group_name'
p66096
Nsa(dp66097
S'description'
p66098
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66099
sS'cpp_type'
p66100
S'bool'
p66101
sS'default'
p66102
S'1'
p66103
sS'name'
p66104
S'compute'
p66105
sS'required'
p66106
I00
sS'group_name'
p66107
Nsa(dp66108
S'description'
p66109
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66110
sS'cpp_type'
p66111
S'bool'
p66112
sS'default'
p66113
S'0'
p66114
sS'name'
p66115
S'constant_on_elem'
p66116
sS'required'
p66117
I00
sS'group_name'
p66118
S'Advanced'
p66119
sa(dp66120
S'description'
p66121
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66122
sS'cpp_type'
p66123
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66124
sS'default'
p66125
g3
sS'name'
p66126
S'control_tags'
p66127
sS'required'
p66128
I00
sS'group_name'
p66129
S'Advanced'
p66130
sa(dp66131
S'description'
p66132
S'Set the enabled status of the MooseObject.\n'
p66133
sS'cpp_type'
p66134
S'bool'
p66135
sS'default'
p66136
S'1'
p66137
sS'name'
p66138
S'enable'
p66139
sS'required'
p66140
I00
sS'group_name'
p66141
S'Advanced'
p66142
sa(dp66143
S'description'
p66144
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66145
sS'cpp_type'
p66146
S'bool'
p66147
sS'default'
p66148
S'1'
p66149
sS'name'
p66150
S'implicit'
p66151
sS'required'
p66152
I00
sS'group_name'
p66153
S'Advanced'
p66154
sa(dp66155
S'description'
p66156
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66157
sS'cpp_type'
p66158
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66159
sS'default'
p66160
g3
sS'name'
p66161
S'output_properties'
p66162
sS'required'
p66163
I00
sS'group_name'
p66164
S'Outputs'
p66165
sa(dp66166
S'description'
p66167
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66168
sS'cpp_type'
p66169
S'std::vector<OutputName, std::allocator<OutputName> >'
p66170
sS'default'
p66171
S'none'
p66172
sS'name'
p66173
S'outputs'
p66174
sS'required'
p66175
I00
sS'group_name'
p66176
S'Outputs'
p66177
sa(dp66178
S'description'
p66179
S'The seed for the master random number generator\n'
p66180
sS'cpp_type'
p66181
S'unsigned int'
p66182
sS'default'
p66183
S'0'
p66184
sS'name'
p66185
S'seed'
p66186
sS'required'
p66187
I00
sS'group_name'
p66188
S'Advanced'
p66189
sa(dp66190
S'description'
p66191
g3
sS'cpp_type'
p66192
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66193
sS'default'
p66194
S'ComputePlasticHeatEnergy'
p66195
sS'name'
p66196
S'type'
p66197
sS'required'
p66198
I00
sS'group_name'
p66199
Nsa(dp66200
S'description'
p66201
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66202
sS'cpp_type'
p66203
S'bool'
p66204
sS'default'
p66205
S'0'
p66206
sS'name'
p66207
S'use_displaced_mesh'
p66208
sS'required'
p66209
I00
sS'group_name'
p66210
S'Advanced'
p66211
sasS'name'
p66212
S'/Materials/ComputePlasticHeatEnergy'
p66213
sa(dp66214
S'description'
p66215
S'Compute an evolving elasticity tensor coupled to a grain growth phase field model.\n'
p66216
sS'subblocks'
p66217
NsS'parameters'
p66218
(lp66219
(dp66220
S'description'
p66221
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66222
sS'cpp_type'
p66223
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66224
sS'default'
p66225
g3
sS'name'
p66226
S'base_name'
p66227
sS'required'
p66228
I00
sS'group_name'
p66229
Nsa(dp66230
S'description'
p66231
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66232
sS'cpp_type'
p66233
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66234
sS'default'
p66235
g3
sS'name'
p66236
S'block'
p66237
sS'required'
p66238
I00
sS'group_name'
p66239
Nsa(dp66240
S'description'
p66241
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66242
sS'cpp_type'
p66243
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66244
sS'default'
p66245
g3
sS'name'
p66246
S'boundary'
p66247
sS'required'
p66248
I00
sS'group_name'
p66249
Nsa(dp66250
S'description'
p66251
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66252
sS'cpp_type'
p66253
S'bool'
p66254
sS'default'
p66255
S'1'
p66256
sS'name'
p66257
S'compute'
p66258
sS'required'
p66259
I00
sS'group_name'
p66260
Nsa(dp66261
S'description'
p66262
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66263
sS'cpp_type'
p66264
S'bool'
p66265
sS'default'
p66266
S'0'
p66267
sS'name'
p66268
S'constant_on_elem'
p66269
sS'required'
p66270
I00
sS'group_name'
p66271
S'Advanced'
p66272
sa(dp66273
S'description'
p66274
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66275
sS'cpp_type'
p66276
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66277
sS'default'
p66278
g3
sS'name'
p66279
S'control_tags'
p66280
sS'required'
p66281
I00
sS'group_name'
p66282
S'Advanced'
p66283
sa(dp66284
S'description'
p66285
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p66286
sS'cpp_type'
p66287
S'FunctionName'
p66288
sS'default'
p66289
g3
sS'name'
p66290
S'elasticity_tensor_prefactor'
p66291
sS'required'
p66292
I00
sS'group_name'
p66293
Nsa(dp66294
S'description'
p66295
S'Set the enabled status of the MooseObject.\n'
p66296
sS'cpp_type'
p66297
S'bool'
p66298
sS'default'
p66299
S'1'
p66300
sS'name'
p66301
S'enable'
p66302
sS'required'
p66303
I00
sS'group_name'
p66304
S'Advanced'
p66305
sa(dp66306
S'description'
p66307
S'Name of GrainTracker user object that provides RankFourTensors\n'
p66308
sS'cpp_type'
p66309
S'UserObjectName'
p66310
sS'default'
p66311
g3
sS'name'
p66312
S'grain_tracker'
p66313
sS'required'
p66314
I01
sS'group_name'
p66315
Nsa(dp66316
S'description'
p66317
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66318
sS'cpp_type'
p66319
S'bool'
p66320
sS'default'
p66321
S'1'
p66322
sS'name'
p66323
S'implicit'
p66324
sS'required'
p66325
I00
sS'group_name'
p66326
S'Advanced'
p66327
sa(dp66328
S'description'
p66329
S'Lengthscale of the problem, in meters\n'
p66330
sS'cpp_type'
p66331
S'double'
p66332
sS'default'
p66333
S'1e-09'
p66334
sS'name'
p66335
S'length_scale'
p66336
sS'required'
p66337
I00
sS'group_name'
p66338
Nsa(dp66339
S'description'
p66340
S'Array of coupled variables (num_name)\n'
p66341
sS'cpp_type'
p66342
S'unsigned int'
p66343
sS'default'
p66344
g3
sS'name'
p66345
S'op_num'
p66346
sS'required'
p66347
I00
sS'group_name'
p66348
Nsa(dp66349
S'description'
p66350
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66351
sS'cpp_type'
p66352
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66353
sS'default'
p66354
g3
sS'name'
p66355
S'output_properties'
p66356
sS'required'
p66357
I00
sS'group_name'
p66358
S'Outputs'
p66359
sa(dp66360
S'description'
p66361
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66362
sS'cpp_type'
p66363
S'std::vector<OutputName, std::allocator<OutputName> >'
p66364
sS'default'
p66365
S'none'
p66366
sS'name'
p66367
S'outputs'
p66368
sS'required'
p66369
I00
sS'group_name'
p66370
S'Outputs'
p66371
sa(dp66372
S'description'
p66373
S'Pressure scale of the problem, in pa\n'
p66374
sS'cpp_type'
p66375
S'double'
p66376
sS'default'
p66377
S'1e+06'
p66378
sS'name'
p66379
S'pressure_scale'
p66380
sS'required'
p66381
I00
sS'group_name'
p66382
Nsa(dp66383
S'description'
p66384
S'The seed for the master random number generator\n'
p66385
sS'cpp_type'
p66386
S'unsigned int'
p66387
sS'default'
p66388
S'0'
p66389
sS'name'
p66390
S'seed'
p66391
sS'required'
p66392
I00
sS'group_name'
p66393
S'Advanced'
p66394
sa(dp66395
S'description'
p66396
g3
sS'cpp_type'
p66397
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66398
sS'default'
p66399
S'ComputePolycrystalElasticityTensor'
p66400
sS'name'
p66401
S'type'
p66402
sS'required'
p66403
I00
sS'group_name'
p66404
Nsa(dp66405
S'description'
p66406
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66407
sS'cpp_type'
p66408
S'bool'
p66409
sS'default'
p66410
S'0'
p66411
sS'name'
p66412
S'use_displaced_mesh'
p66413
sS'required'
p66414
I00
sS'group_name'
p66415
S'Advanced'
p66416
sa(dp66417
S'description'
p66418
S'Array of coupled variables\n'
p66419
sS'cpp_type'
p66420
S'std::vector<VariableName>'
p66421
sS'default'
p66422
g3
sS'name'
p66423
S'v'
p66424
sS'required'
p66425
I01
sS'group_name'
p66426
Nsa(dp66427
S'description'
p66428
S'Array of coupled variables (base_name)\n'
p66429
sS'cpp_type'
p66430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66431
sS'default'
p66432
g3
sS'name'
p66433
S'var_name_base'
p66434
sS'required'
p66435
I00
sS'group_name'
p66436
NsasS'name'
p66437
S'/Materials/ComputePolycrystalElasticityTensor'
p66438
sa(dp66439
S'description'
p66440
S'Compute a strain increment and rotation increment for finite strains in 1D spherical symmetry problems.\n'
p66441
sS'subblocks'
p66442
NsS'parameters'
p66443
(lp66444
(dp66445
S'description'
p66446
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66447
sS'cpp_type'
p66448
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66449
sS'default'
p66450
g3
sS'name'
p66451
S'base_name'
p66452
sS'required'
p66453
I00
sS'group_name'
p66454
Nsa(dp66455
S'description'
p66456
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66457
sS'cpp_type'
p66458
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66459
sS'default'
p66460
g3
sS'name'
p66461
S'block'
p66462
sS'required'
p66463
I00
sS'group_name'
p66464
Nsa(dp66465
S'description'
p66466
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66467
sS'cpp_type'
p66468
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66469
sS'default'
p66470
g3
sS'name'
p66471
S'boundary'
p66472
sS'required'
p66473
I00
sS'group_name'
p66474
Nsa(dp66475
S'description'
p66476
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66477
sS'cpp_type'
p66478
S'bool'
p66479
sS'default'
p66480
S'1'
p66481
sS'name'
p66482
S'compute'
p66483
sS'required'
p66484
I00
sS'group_name'
p66485
Nsa(dp66486
S'description'
p66487
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66488
sS'cpp_type'
p66489
S'bool'
p66490
sS'default'
p66491
S'0'
p66492
sS'name'
p66493
S'constant_on_elem'
p66494
sS'required'
p66495
I00
sS'group_name'
p66496
S'Advanced'
p66497
sa(dp66498
S'description'
p66499
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66500
sS'cpp_type'
p66501
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66502
sS'default'
p66503
g3
sS'name'
p66504
S'control_tags'
p66505
sS'required'
p66506
I00
sS'group_name'
p66507
S'Advanced'
p66508
sa(dp66509
S'name'
p66510
S'decomposition_method'
p66511
sS'cpp_type'
p66512
S'MooseEnum'
p66513
sS'default'
p66514
S'TaylorExpansion'
p66515
sS'description'
p66516
S'Methods to calculate the strain and rotation increments\n'
p66517
sS'required'
p66518
I00
sS'options'
p66519
S'TaylorExpansion EigenSolution'
p66520
sS'group_name'
p66521
Nsa(dp66522
S'description'
p66523
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p66524
sS'cpp_type'
p66525
S'std::vector<VariableName>'
p66526
sS'default'
p66527
g3
sS'name'
p66528
S'displacements'
p66529
sS'required'
p66530
I01
sS'group_name'
p66531
Nsa(dp66532
S'description'
p66533
S'List of eigenstrains to be applied in this strain calculation\n'
p66534
sS'cpp_type'
p66535
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p66536
sS'default'
p66537
g3
sS'name'
p66538
S'eigenstrain_names'
p66539
sS'required'
p66540
I00
sS'group_name'
p66541
Nsa(dp66542
S'description'
p66543
S'Set the enabled status of the MooseObject.\n'
p66544
sS'cpp_type'
p66545
S'bool'
p66546
sS'default'
p66547
S'1'
p66548
sS'name'
p66549
S'enable'
p66550
sS'required'
p66551
I00
sS'group_name'
p66552
S'Advanced'
p66553
sa(dp66554
S'description'
p66555
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66556
sS'cpp_type'
p66557
S'bool'
p66558
sS'default'
p66559
S'1'
p66560
sS'name'
p66561
S'implicit'
p66562
sS'required'
p66563
I00
sS'group_name'
p66564
S'Advanced'
p66565
sa(dp66566
S'description'
p66567
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66568
sS'cpp_type'
p66569
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66570
sS'default'
p66571
g3
sS'name'
p66572
S'output_properties'
p66573
sS'required'
p66574
I00
sS'group_name'
p66575
S'Outputs'
p66576
sa(dp66577
S'description'
p66578
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66579
sS'cpp_type'
p66580
S'std::vector<OutputName, std::allocator<OutputName> >'
p66581
sS'default'
p66582
S'none'
p66583
sS'name'
p66584
S'outputs'
p66585
sS'required'
p66586
I00
sS'group_name'
p66587
S'Outputs'
p66588
sa(dp66589
S'description'
p66590
S'The seed for the master random number generator\n'
p66591
sS'cpp_type'
p66592
S'unsigned int'
p66593
sS'default'
p66594
S'0'
p66595
sS'name'
p66596
S'seed'
p66597
sS'required'
p66598
I00
sS'group_name'
p66599
S'Advanced'
p66600
sa(dp66601
S'description'
p66602
g3
sS'cpp_type'
p66603
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66604
sS'default'
p66605
S'ComputeRSphericalFiniteStrain'
p66606
sS'name'
p66607
S'type'
p66608
sS'required'
p66609
I00
sS'group_name'
p66610
Nsa(dp66611
S'description'
p66612
S'Flag to correct volumetric locking\n'
p66613
sS'cpp_type'
p66614
S'bool'
p66615
sS'default'
p66616
S'0'
p66617
sS'name'
p66618
S'volumetric_locking_correction'
p66619
sS'required'
p66620
I00
sS'group_name'
p66621
NsasS'name'
p66622
S'/Materials/ComputeRSphericalFiniteStrain'
p66623
sa(dp66624
S'description'
p66625
S'Compute a strain increment for incremental strains in 1D spherical symmetry problems.\n'
p66626
sS'subblocks'
p66627
NsS'parameters'
p66628
(lp66629
(dp66630
S'description'
p66631
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66632
sS'cpp_type'
p66633
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66634
sS'default'
p66635
g3
sS'name'
p66636
S'base_name'
p66637
sS'required'
p66638
I00
sS'group_name'
p66639
Nsa(dp66640
S'description'
p66641
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66642
sS'cpp_type'
p66643
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66644
sS'default'
p66645
g3
sS'name'
p66646
S'block'
p66647
sS'required'
p66648
I00
sS'group_name'
p66649
Nsa(dp66650
S'description'
p66651
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66652
sS'cpp_type'
p66653
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66654
sS'default'
p66655
g3
sS'name'
p66656
S'boundary'
p66657
sS'required'
p66658
I00
sS'group_name'
p66659
Nsa(dp66660
S'description'
p66661
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66662
sS'cpp_type'
p66663
S'bool'
p66664
sS'default'
p66665
S'1'
p66666
sS'name'
p66667
S'compute'
p66668
sS'required'
p66669
I00
sS'group_name'
p66670
Nsa(dp66671
S'description'
p66672
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66673
sS'cpp_type'
p66674
S'bool'
p66675
sS'default'
p66676
S'0'
p66677
sS'name'
p66678
S'constant_on_elem'
p66679
sS'required'
p66680
I00
sS'group_name'
p66681
S'Advanced'
p66682
sa(dp66683
S'description'
p66684
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66685
sS'cpp_type'
p66686
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66687
sS'default'
p66688
g3
sS'name'
p66689
S'control_tags'
p66690
sS'required'
p66691
I00
sS'group_name'
p66692
S'Advanced'
p66693
sa(dp66694
S'description'
p66695
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p66696
sS'cpp_type'
p66697
S'std::vector<VariableName>'
p66698
sS'default'
p66699
g3
sS'name'
p66700
S'displacements'
p66701
sS'required'
p66702
I01
sS'group_name'
p66703
Nsa(dp66704
S'description'
p66705
S'List of eigenstrains to be applied in this strain calculation\n'
p66706
sS'cpp_type'
p66707
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p66708
sS'default'
p66709
g3
sS'name'
p66710
S'eigenstrain_names'
p66711
sS'required'
p66712
I00
sS'group_name'
p66713
Nsa(dp66714
S'description'
p66715
S'Set the enabled status of the MooseObject.\n'
p66716
sS'cpp_type'
p66717
S'bool'
p66718
sS'default'
p66719
S'1'
p66720
sS'name'
p66721
S'enable'
p66722
sS'required'
p66723
I00
sS'group_name'
p66724
S'Advanced'
p66725
sa(dp66726
S'description'
p66727
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66728
sS'cpp_type'
p66729
S'bool'
p66730
sS'default'
p66731
S'1'
p66732
sS'name'
p66733
S'implicit'
p66734
sS'required'
p66735
I00
sS'group_name'
p66736
S'Advanced'
p66737
sa(dp66738
S'description'
p66739
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66740
sS'cpp_type'
p66741
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66742
sS'default'
p66743
g3
sS'name'
p66744
S'output_properties'
p66745
sS'required'
p66746
I00
sS'group_name'
p66747
S'Outputs'
p66748
sa(dp66749
S'description'
p66750
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66751
sS'cpp_type'
p66752
S'std::vector<OutputName, std::allocator<OutputName> >'
p66753
sS'default'
p66754
S'none'
p66755
sS'name'
p66756
S'outputs'
p66757
sS'required'
p66758
I00
sS'group_name'
p66759
S'Outputs'
p66760
sa(dp66761
S'description'
p66762
S'The seed for the master random number generator\n'
p66763
sS'cpp_type'
p66764
S'unsigned int'
p66765
sS'default'
p66766
S'0'
p66767
sS'name'
p66768
S'seed'
p66769
sS'required'
p66770
I00
sS'group_name'
p66771
S'Advanced'
p66772
sa(dp66773
S'description'
p66774
g3
sS'cpp_type'
p66775
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66776
sS'default'
p66777
S'ComputeRSphericalIncrementalStrain'
p66778
sS'name'
p66779
S'type'
p66780
sS'required'
p66781
I00
sS'group_name'
p66782
Nsa(dp66783
S'description'
p66784
S'Flag to correct volumetric locking\n'
p66785
sS'cpp_type'
p66786
S'bool'
p66787
sS'default'
p66788
S'0'
p66789
sS'name'
p66790
S'volumetric_locking_correction'
p66791
sS'required'
p66792
I00
sS'group_name'
p66793
NsasS'name'
p66794
S'/Materials/ComputeRSphericalIncrementalStrain'
p66795
sa(dp66796
S'description'
p66797
S'Compute a small strain 1D spherical symmetry case.\n'
p66798
sS'subblocks'
p66799
NsS'parameters'
p66800
(lp66801
(dp66802
S'description'
p66803
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66804
sS'cpp_type'
p66805
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66806
sS'default'
p66807
g3
sS'name'
p66808
S'base_name'
p66809
sS'required'
p66810
I00
sS'group_name'
p66811
Nsa(dp66812
S'description'
p66813
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66814
sS'cpp_type'
p66815
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66816
sS'default'
p66817
g3
sS'name'
p66818
S'block'
p66819
sS'required'
p66820
I00
sS'group_name'
p66821
Nsa(dp66822
S'description'
p66823
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66824
sS'cpp_type'
p66825
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66826
sS'default'
p66827
g3
sS'name'
p66828
S'boundary'
p66829
sS'required'
p66830
I00
sS'group_name'
p66831
Nsa(dp66832
S'description'
p66833
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66834
sS'cpp_type'
p66835
S'bool'
p66836
sS'default'
p66837
S'1'
p66838
sS'name'
p66839
S'compute'
p66840
sS'required'
p66841
I00
sS'group_name'
p66842
Nsa(dp66843
S'description'
p66844
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66845
sS'cpp_type'
p66846
S'bool'
p66847
sS'default'
p66848
S'0'
p66849
sS'name'
p66850
S'constant_on_elem'
p66851
sS'required'
p66852
I00
sS'group_name'
p66853
S'Advanced'
p66854
sa(dp66855
S'description'
p66856
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66857
sS'cpp_type'
p66858
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66859
sS'default'
p66860
g3
sS'name'
p66861
S'control_tags'
p66862
sS'required'
p66863
I00
sS'group_name'
p66864
S'Advanced'
p66865
sa(dp66866
S'description'
p66867
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p66868
sS'cpp_type'
p66869
S'std::vector<VariableName>'
p66870
sS'default'
p66871
g3
sS'name'
p66872
S'displacements'
p66873
sS'required'
p66874
I01
sS'group_name'
p66875
Nsa(dp66876
S'description'
p66877
S'List of eigenstrains to be applied in this strain calculation\n'
p66878
sS'cpp_type'
p66879
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p66880
sS'default'
p66881
g3
sS'name'
p66882
S'eigenstrain_names'
p66883
sS'required'
p66884
I00
sS'group_name'
p66885
Nsa(dp66886
S'description'
p66887
S'Set the enabled status of the MooseObject.\n'
p66888
sS'cpp_type'
p66889
S'bool'
p66890
sS'default'
p66891
S'1'
p66892
sS'name'
p66893
S'enable'
p66894
sS'required'
p66895
I00
sS'group_name'
p66896
S'Advanced'
p66897
sa(dp66898
S'description'
p66899
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66900
sS'cpp_type'
p66901
S'bool'
p66902
sS'default'
p66903
S'1'
p66904
sS'name'
p66905
S'implicit'
p66906
sS'required'
p66907
I00
sS'group_name'
p66908
S'Advanced'
p66909
sa(dp66910
S'description'
p66911
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66912
sS'cpp_type'
p66913
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66914
sS'default'
p66915
g3
sS'name'
p66916
S'output_properties'
p66917
sS'required'
p66918
I00
sS'group_name'
p66919
S'Outputs'
p66920
sa(dp66921
S'description'
p66922
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66923
sS'cpp_type'
p66924
S'std::vector<OutputName, std::allocator<OutputName> >'
p66925
sS'default'
p66926
S'none'
p66927
sS'name'
p66928
S'outputs'
p66929
sS'required'
p66930
I00
sS'group_name'
p66931
S'Outputs'
p66932
sa(dp66933
S'description'
p66934
S'The seed for the master random number generator\n'
p66935
sS'cpp_type'
p66936
S'unsigned int'
p66937
sS'default'
p66938
S'0'
p66939
sS'name'
p66940
S'seed'
p66941
sS'required'
p66942
I00
sS'group_name'
p66943
S'Advanced'
p66944
sa(dp66945
S'description'
p66946
g3
sS'cpp_type'
p66947
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66948
sS'default'
p66949
S'ComputeRSphericalSmallStrain'
p66950
sS'name'
p66951
S'type'
p66952
sS'required'
p66953
I00
sS'group_name'
p66954
Nsa(dp66955
S'description'
p66956
S'Flag to correct volumetric locking\n'
p66957
sS'cpp_type'
p66958
S'bool'
p66959
sS'default'
p66960
S'0'
p66961
sS'name'
p66962
S'volumetric_locking_correction'
p66963
sS'required'
p66964
I00
sS'group_name'
p66965
NsasS'name'
p66966
S'/Materials/ComputeRSphericalSmallStrain'
p66967
sa(dp66968
S'description'
p66969
S'Compute stress using a radial return mapping implementation for creep or creep combined with plasticity\n'
p66970
sS'subblocks'
p66971
NsS'parameters'
p66972
(lp66973
(dp66974
S'description'
p66975
S'Absolute convergence tolerance for the stress update iterations over the stress change after all update materials are called\n'
p66976
sS'cpp_type'
p66977
S'double'
p66978
sS'default'
p66979
S'1e-05'
p66980
sS'name'
p66981
S'absolute_tolerance'
p66982
sS'required'
p66983
I00
sS'group_name'
p66984
Nsa(dp66985
S'description'
p66986
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66987
sS'cpp_type'
p66988
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66989
sS'default'
p66990
g3
sS'name'
p66991
S'base_name'
p66992
sS'required'
p66993
I00
sS'group_name'
p66994
Nsa(dp66995
S'description'
p66996
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66997
sS'cpp_type'
p66998
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66999
sS'default'
p67000
g3
sS'name'
p67001
S'block'
p67002
sS'required'
p67003
I00
sS'group_name'
p67004
Nsa(dp67005
S'description'
p67006
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67007
sS'cpp_type'
p67008
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67009
sS'default'
p67010
g3
sS'name'
p67011
S'boundary'
p67012
sS'required'
p67013
I00
sS'group_name'
p67014
Nsa(dp67015
S'description'
p67016
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67017
sS'cpp_type'
p67018
S'bool'
p67019
sS'default'
p67020
S'1'
p67021
sS'name'
p67022
S'compute'
p67023
sS'required'
p67024
I00
sS'group_name'
p67025
Nsa(dp67026
S'description'
p67027
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67028
sS'cpp_type'
p67029
S'bool'
p67030
sS'default'
p67031
S'0'
p67032
sS'name'
p67033
S'constant_on_elem'
p67034
sS'required'
p67035
I00
sS'group_name'
p67036
S'Advanced'
p67037
sa(dp67038
S'description'
p67039
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67040
sS'cpp_type'
p67041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67042
sS'default'
p67043
g3
sS'name'
p67044
S'control_tags'
p67045
sS'required'
p67046
I00
sS'group_name'
p67047
S'Advanced'
p67048
sa(dp67049
S'description'
p67050
S'Set the enabled status of the MooseObject.\n'
p67051
sS'cpp_type'
p67052
S'bool'
p67053
sS'default'
p67054
S'1'
p67055
sS'name'
p67056
S'enable'
p67057
sS'required'
p67058
I00
sS'group_name'
p67059
S'Advanced'
p67060
sa(dp67061
S'description'
p67062
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67063
sS'cpp_type'
p67064
S'bool'
p67065
sS'default'
p67066
S'1'
p67067
sS'name'
p67068
S'implicit'
p67069
sS'required'
p67070
I00
sS'group_name'
p67071
S'Advanced'
p67072
sa(dp67073
S'description'
p67074
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p67075
sS'cpp_type'
p67076
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p67077
sS'default'
p67078
g3
sS'name'
p67079
S'initial_stress'
p67080
sS'required'
p67081
I00
sS'group_name'
p67082
Nsa(dp67083
S'description'
p67084
S'Maximum number of the stress update iterations over the stress change after all update materials are called\n'
p67085
sS'cpp_type'
p67086
S'unsigned int'
p67087
sS'default'
p67088
S'30'
p67089
sS'name'
p67090
S'max_iterations'
p67091
sS'required'
p67092
I00
sS'group_name'
p67093
Nsa(dp67094
S'description'
p67095
S'Set to true to output stress update iteration information over the stress change\n'
p67096
sS'cpp_type'
p67097
S'bool'
p67098
sS'default'
p67099
S'0'
p67100
sS'name'
p67101
S'output_iteration_info'
p67102
sS'required'
p67103
I00
sS'group_name'
p67104
Nsa(dp67105
S'description'
p67106
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67107
sS'cpp_type'
p67108
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67109
sS'default'
p67110
g3
sS'name'
p67111
S'output_properties'
p67112
sS'required'
p67113
I00
sS'group_name'
p67114
S'Outputs'
p67115
sa(dp67116
S'description'
p67117
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67118
sS'cpp_type'
p67119
S'std::vector<OutputName, std::allocator<OutputName> >'
p67120
sS'default'
p67121
S'none'
p67122
sS'name'
p67123
S'outputs'
p67124
sS'required'
p67125
I00
sS'group_name'
p67126
S'Outputs'
p67127
sa(dp67128
S'description'
p67129
S'Relative convergence tolerance for the stress update iterations over the stress change after all update materials are called\n'
p67130
sS'cpp_type'
p67131
S'double'
p67132
sS'default'
p67133
S'1e-05'
p67134
sS'name'
p67135
S'relative_tolerance'
p67136
sS'required'
p67137
I00
sS'group_name'
p67138
Nsa(dp67139
S'description'
p67140
S'The material objects to use to calculate stress. Note: specify creep models first and plasticity models second.\n'
p67141
sS'cpp_type'
p67142
S'std::vector<MaterialName, std::allocator<MaterialName> >'
p67143
sS'default'
p67144
g3
sS'name'
p67145
S'return_mapping_models'
p67146
sS'required'
p67147
I01
sS'group_name'
p67148
Nsa(dp67149
S'description'
p67150
S'The seed for the master random number generator\n'
p67151
sS'cpp_type'
p67152
S'unsigned int'
p67153
sS'default'
p67154
S'0'
p67155
sS'name'
p67156
S'seed'
p67157
sS'required'
p67158
I00
sS'group_name'
p67159
S'Advanced'
p67160
sa(dp67161
S'description'
p67162
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p67163
sS'cpp_type'
p67164
S'bool'
p67165
sS'default'
p67166
S'0'
p67167
sS'name'
p67168
S'store_stress_old'
p67169
sS'required'
p67170
I00
sS'group_name'
p67171
Nsa(dp67172
S'description'
p67173
g3
sS'cpp_type'
p67174
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67175
sS'default'
p67176
S'ComputeReturnMappingStress'
p67177
sS'name'
p67178
S'type'
p67179
sS'required'
p67180
I00
sS'group_name'
p67181
NsasS'name'
p67182
S'/Materials/ComputeReturnMappingStress'
p67183
sa(dp67184
S'description'
p67185
S'Compute a small strain.\n'
p67186
sS'subblocks'
p67187
NsS'parameters'
p67188
(lp67189
(dp67190
S'description'
p67191
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67192
sS'cpp_type'
p67193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67194
sS'default'
p67195
g3
sS'name'
p67196
S'base_name'
p67197
sS'required'
p67198
I00
sS'group_name'
p67199
Nsa(dp67200
S'description'
p67201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67202
sS'cpp_type'
p67203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67204
sS'default'
p67205
g3
sS'name'
p67206
S'block'
p67207
sS'required'
p67208
I00
sS'group_name'
p67209
Nsa(dp67210
S'description'
p67211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67212
sS'cpp_type'
p67213
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67214
sS'default'
p67215
g3
sS'name'
p67216
S'boundary'
p67217
sS'required'
p67218
I00
sS'group_name'
p67219
Nsa(dp67220
S'description'
p67221
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67222
sS'cpp_type'
p67223
S'bool'
p67224
sS'default'
p67225
S'1'
p67226
sS'name'
p67227
S'compute'
p67228
sS'required'
p67229
I00
sS'group_name'
p67230
Nsa(dp67231
S'description'
p67232
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67233
sS'cpp_type'
p67234
S'bool'
p67235
sS'default'
p67236
S'0'
p67237
sS'name'
p67238
S'constant_on_elem'
p67239
sS'required'
p67240
I00
sS'group_name'
p67241
S'Advanced'
p67242
sa(dp67243
S'description'
p67244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67245
sS'cpp_type'
p67246
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67247
sS'default'
p67248
g3
sS'name'
p67249
S'control_tags'
p67250
sS'required'
p67251
I00
sS'group_name'
p67252
S'Advanced'
p67253
sa(dp67254
S'description'
p67255
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p67256
sS'cpp_type'
p67257
S'std::vector<VariableName>'
p67258
sS'default'
p67259
g3
sS'name'
p67260
S'displacements'
p67261
sS'required'
p67262
I01
sS'group_name'
p67263
Nsa(dp67264
S'description'
p67265
S'List of eigenstrains to be applied in this strain calculation\n'
p67266
sS'cpp_type'
p67267
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67268
sS'default'
p67269
g3
sS'name'
p67270
S'eigenstrain_names'
p67271
sS'required'
p67272
I00
sS'group_name'
p67273
Nsa(dp67274
S'description'
p67275
S'Set the enabled status of the MooseObject.\n'
p67276
sS'cpp_type'
p67277
S'bool'
p67278
sS'default'
p67279
S'1'
p67280
sS'name'
p67281
S'enable'
p67282
sS'required'
p67283
I00
sS'group_name'
p67284
S'Advanced'
p67285
sa(dp67286
S'description'
p67287
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67288
sS'cpp_type'
p67289
S'bool'
p67290
sS'default'
p67291
S'1'
p67292
sS'name'
p67293
S'implicit'
p67294
sS'required'
p67295
I00
sS'group_name'
p67296
S'Advanced'
p67297
sa(dp67298
S'description'
p67299
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67300
sS'cpp_type'
p67301
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67302
sS'default'
p67303
g3
sS'name'
p67304
S'output_properties'
p67305
sS'required'
p67306
I00
sS'group_name'
p67307
S'Outputs'
p67308
sa(dp67309
S'description'
p67310
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67311
sS'cpp_type'
p67312
S'std::vector<OutputName, std::allocator<OutputName> >'
p67313
sS'default'
p67314
S'none'
p67315
sS'name'
p67316
S'outputs'
p67317
sS'required'
p67318
I00
sS'group_name'
p67319
S'Outputs'
p67320
sa(dp67321
S'description'
p67322
S'The seed for the master random number generator\n'
p67323
sS'cpp_type'
p67324
S'unsigned int'
p67325
sS'default'
p67326
S'0'
p67327
sS'name'
p67328
S'seed'
p67329
sS'required'
p67330
I00
sS'group_name'
p67331
S'Advanced'
p67332
sa(dp67333
S'description'
p67334
g3
sS'cpp_type'
p67335
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67336
sS'default'
p67337
S'ComputeSmallStrain'
p67338
sS'name'
p67339
S'type'
p67340
sS'required'
p67341
I00
sS'group_name'
p67342
Nsa(dp67343
S'description'
p67344
S'Flag to correct volumetric locking\n'
p67345
sS'cpp_type'
p67346
S'bool'
p67347
sS'default'
p67348
S'0'
p67349
sS'name'
p67350
S'volumetric_locking_correction'
p67351
sS'required'
p67352
I00
sS'group_name'
p67353
NsasS'name'
p67354
S'/Materials/ComputeSmallStrain'
p67355
sa(dp67356
S'description'
p67357
S'Compute stress after subtracting inelastic strain increments\n'
p67358
sS'subblocks'
p67359
NsS'parameters'
p67360
(lp67361
(dp67362
S'description'
p67363
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67364
sS'cpp_type'
p67365
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67366
sS'default'
p67367
g3
sS'name'
p67368
S'base_name'
p67369
sS'required'
p67370
I00
sS'group_name'
p67371
Nsa(dp67372
S'description'
p67373
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67374
sS'cpp_type'
p67375
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67376
sS'default'
p67377
g3
sS'name'
p67378
S'block'
p67379
sS'required'
p67380
I00
sS'group_name'
p67381
Nsa(dp67382
S'description'
p67383
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67384
sS'cpp_type'
p67385
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67386
sS'default'
p67387
g3
sS'name'
p67388
S'boundary'
p67389
sS'required'
p67390
I00
sS'group_name'
p67391
Nsa(dp67392
S'description'
p67393
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67394
sS'cpp_type'
p67395
S'bool'
p67396
sS'default'
p67397
S'1'
p67398
sS'name'
p67399
S'compute'
p67400
sS'required'
p67401
I00
sS'group_name'
p67402
Nsa(dp67403
S'description'
p67404
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67405
sS'cpp_type'
p67406
S'bool'
p67407
sS'default'
p67408
S'0'
p67409
sS'name'
p67410
S'constant_on_elem'
p67411
sS'required'
p67412
I00
sS'group_name'
p67413
S'Advanced'
p67414
sa(dp67415
S'description'
p67416
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67417
sS'cpp_type'
p67418
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67419
sS'default'
p67420
g3
sS'name'
p67421
S'control_tags'
p67422
sS'required'
p67423
I00
sS'group_name'
p67424
S'Advanced'
p67425
sa(dp67426
S'description'
p67427
S'Set the enabled status of the MooseObject.\n'
p67428
sS'cpp_type'
p67429
S'bool'
p67430
sS'default'
p67431
S'1'
p67432
sS'name'
p67433
S'enable'
p67434
sS'required'
p67435
I00
sS'group_name'
p67436
S'Advanced'
p67437
sa(dp67438
S'description'
p67439
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67440
sS'cpp_type'
p67441
S'bool'
p67442
sS'default'
p67443
S'1'
p67444
sS'name'
p67445
S'implicit'
p67446
sS'required'
p67447
I00
sS'group_name'
p67448
S'Advanced'
p67449
sa(dp67450
S'description'
p67451
S'Names of inelastic strain properties\n'
p67452
sS'cpp_type'
p67453
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67454
sS'default'
p67455
g3
sS'name'
p67456
S'inelastic_strain_names'
p67457
sS'required'
p67458
I00
sS'group_name'
p67459
Nsa(dp67460
S'description'
p67461
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p67462
sS'cpp_type'
p67463
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p67464
sS'default'
p67465
g3
sS'name'
p67466
S'initial_stress'
p67467
sS'required'
p67468
I00
sS'group_name'
p67469
Nsa(dp67470
S'description'
p67471
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67472
sS'cpp_type'
p67473
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67474
sS'default'
p67475
g3
sS'name'
p67476
S'output_properties'
p67477
sS'required'
p67478
I00
sS'group_name'
p67479
S'Outputs'
p67480
sa(dp67481
S'description'
p67482
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67483
sS'cpp_type'
p67484
S'std::vector<OutputName, std::allocator<OutputName> >'
p67485
sS'default'
p67486
S'none'
p67487
sS'name'
p67488
S'outputs'
p67489
sS'required'
p67490
I00
sS'group_name'
p67491
S'Outputs'
p67492
sa(dp67493
S'description'
p67494
S'The seed for the master random number generator\n'
p67495
sS'cpp_type'
p67496
S'unsigned int'
p67497
sS'default'
p67498
S'0'
p67499
sS'name'
p67500
S'seed'
p67501
sS'required'
p67502
I00
sS'group_name'
p67503
S'Advanced'
p67504
sa(dp67505
S'description'
p67506
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p67507
sS'cpp_type'
p67508
S'bool'
p67509
sS'default'
p67510
S'0'
p67511
sS'name'
p67512
S'store_stress_old'
p67513
sS'required'
p67514
I00
sS'group_name'
p67515
Nsa(dp67516
S'description'
p67517
g3
sS'cpp_type'
p67518
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67519
sS'default'
p67520
S'ComputeStrainIncrementBasedStress'
p67521
sS'name'
p67522
S'type'
p67523
sS'required'
p67524
I00
sS'group_name'
p67525
NsasS'name'
p67526
S'/Materials/ComputeStrainIncrementBasedStress'
p67527
sa(dp67528
S'description'
p67529
S'Computes eigenstrain due to thermal expansion with a constant coefficient\n'
p67530
sS'subblocks'
p67531
NsS'parameters'
p67532
(lp67533
(dp67534
S'description'
p67535
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67536
sS'cpp_type'
p67537
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67538
sS'default'
p67539
g3
sS'name'
p67540
S'base_name'
p67541
sS'required'
p67542
I00
sS'group_name'
p67543
Nsa(dp67544
S'description'
p67545
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67546
sS'cpp_type'
p67547
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67548
sS'default'
p67549
g3
sS'name'
p67550
S'block'
p67551
sS'required'
p67552
I00
sS'group_name'
p67553
Nsa(dp67554
S'description'
p67555
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67556
sS'cpp_type'
p67557
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67558
sS'default'
p67559
g3
sS'name'
p67560
S'boundary'
p67561
sS'required'
p67562
I00
sS'group_name'
p67563
Nsa(dp67564
S'description'
p67565
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67566
sS'cpp_type'
p67567
S'bool'
p67568
sS'default'
p67569
S'1'
p67570
sS'name'
p67571
S'compute'
p67572
sS'required'
p67573
I00
sS'group_name'
p67574
Nsa(dp67575
S'description'
p67576
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67577
sS'cpp_type'
p67578
S'bool'
p67579
sS'default'
p67580
S'0'
p67581
sS'name'
p67582
S'constant_on_elem'
p67583
sS'required'
p67584
I00
sS'group_name'
p67585
S'Advanced'
p67586
sa(dp67587
S'description'
p67588
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67589
sS'cpp_type'
p67590
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67591
sS'default'
p67592
g3
sS'name'
p67593
S'control_tags'
p67594
sS'required'
p67595
I00
sS'group_name'
p67596
S'Advanced'
p67597
sa(dp67598
S'description'
p67599
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p67600
sS'cpp_type'
p67601
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67602
sS'default'
p67603
g3
sS'name'
p67604
S'eigenstrain_name'
p67605
sS'required'
p67606
I01
sS'group_name'
p67607
Nsa(dp67608
S'description'
p67609
S'Set the enabled status of the MooseObject.\n'
p67610
sS'cpp_type'
p67611
S'bool'
p67612
sS'default'
p67613
S'1'
p67614
sS'name'
p67615
S'enable'
p67616
sS'required'
p67617
I00
sS'group_name'
p67618
S'Advanced'
p67619
sa(dp67620
S'description'
p67621
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67622
sS'cpp_type'
p67623
S'bool'
p67624
sS'default'
p67625
S'1'
p67626
sS'name'
p67627
S'implicit'
p67628
sS'required'
p67629
I00
sS'group_name'
p67630
S'Advanced'
p67631
sa(dp67632
S'description'
p67633
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p67634
sS'cpp_type'
p67635
S'bool'
p67636
sS'default'
p67637
S'0'
p67638
sS'name'
p67639
S'incremental_form'
p67640
sS'required'
p67641
I00
sS'group_name'
p67642
Nsa(dp67643
S'description'
p67644
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67645
sS'cpp_type'
p67646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67647
sS'default'
p67648
g3
sS'name'
p67649
S'output_properties'
p67650
sS'required'
p67651
I00
sS'group_name'
p67652
S'Outputs'
p67653
sa(dp67654
S'description'
p67655
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67656
sS'cpp_type'
p67657
S'std::vector<OutputName, std::allocator<OutputName> >'
p67658
sS'default'
p67659
S'none'
p67660
sS'name'
p67661
S'outputs'
p67662
sS'required'
p67663
I00
sS'group_name'
p67664
S'Outputs'
p67665
sa(dp67666
S'description'
p67667
S'The seed for the master random number generator\n'
p67668
sS'cpp_type'
p67669
S'unsigned int'
p67670
sS'default'
p67671
S'0'
p67672
sS'name'
p67673
S'seed'
p67674
sS'required'
p67675
I00
sS'group_name'
p67676
S'Advanced'
p67677
sa(dp67678
S'description'
p67679
S'Reference temperature for thermal eigenstrain calculation\n'
p67680
sS'cpp_type'
p67681
S'double'
p67682
sS'default'
p67683
g3
sS'name'
p67684
S'stress_free_reference_temperature'
p67685
sS'required'
p67686
I00
sS'group_name'
p67687
Nsa(dp67688
S'description'
p67689
S'Reference temperature for thermal eigenstrain calculation\n'
p67690
sS'cpp_type'
p67691
S'double'
p67692
sS'default'
p67693
g3
sS'name'
p67694
S'stress_free_temperature'
p67695
sS'required'
p67696
I00
sS'group_name'
p67697
Nsa(dp67698
S'description'
p67699
S'Coupled temperature\n'
p67700
sS'cpp_type'
p67701
S'std::vector<VariableName>'
p67702
sS'default'
p67703
g3
sS'name'
p67704
S'temperature'
p67705
sS'required'
p67706
I00
sS'group_name'
p67707
Nsa(dp67708
S'description'
p67709
S'Thermal expansion coefficient\n'
p67710
sS'cpp_type'
p67711
S'double'
p67712
sS'default'
p67713
g3
sS'name'
p67714
S'thermal_expansion_coeff'
p67715
sS'required'
p67716
I00
sS'group_name'
p67717
Nsa(dp67718
S'description'
p67719
g3
sS'cpp_type'
p67720
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67721
sS'default'
p67722
S'ComputeThermalExpansionEigenStrain'
p67723
sS'name'
p67724
S'type'
p67725
sS'required'
p67726
I00
sS'group_name'
p67727
Nsa(dp67728
S'description'
p67729
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p67730
sS'cpp_type'
p67731
S'bool'
p67732
sS'default'
p67733
S'0'
p67734
sS'name'
p67735
S'use_displaced_mesh'
p67736
sS'required'
p67737
I00
sS'group_name'
p67738
S'Advanced'
p67739
sasS'name'
p67740
S'/Materials/ComputeThermalExpansionEigenStrain'
p67741
sa(dp67742
S'description'
p67743
S'Computes eigenstrain due to thermal expansion with a constant coefficient\n'
p67744
sS'subblocks'
p67745
NsS'parameters'
p67746
(lp67747
(dp67748
S'description'
p67749
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67750
sS'cpp_type'
p67751
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67752
sS'default'
p67753
g3
sS'name'
p67754
S'base_name'
p67755
sS'required'
p67756
I00
sS'group_name'
p67757
Nsa(dp67758
S'description'
p67759
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67760
sS'cpp_type'
p67761
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67762
sS'default'
p67763
g3
sS'name'
p67764
S'block'
p67765
sS'required'
p67766
I00
sS'group_name'
p67767
Nsa(dp67768
S'description'
p67769
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67770
sS'cpp_type'
p67771
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67772
sS'default'
p67773
g3
sS'name'
p67774
S'boundary'
p67775
sS'required'
p67776
I00
sS'group_name'
p67777
Nsa(dp67778
S'description'
p67779
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67780
sS'cpp_type'
p67781
S'bool'
p67782
sS'default'
p67783
S'1'
p67784
sS'name'
p67785
S'compute'
p67786
sS'required'
p67787
I00
sS'group_name'
p67788
Nsa(dp67789
S'description'
p67790
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67791
sS'cpp_type'
p67792
S'bool'
p67793
sS'default'
p67794
S'0'
p67795
sS'name'
p67796
S'constant_on_elem'
p67797
sS'required'
p67798
I00
sS'group_name'
p67799
S'Advanced'
p67800
sa(dp67801
S'description'
p67802
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67803
sS'cpp_type'
p67804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67805
sS'default'
p67806
g3
sS'name'
p67807
S'control_tags'
p67808
sS'required'
p67809
I00
sS'group_name'
p67810
S'Advanced'
p67811
sa(dp67812
S'description'
p67813
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p67814
sS'cpp_type'
p67815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67816
sS'default'
p67817
g3
sS'name'
p67818
S'eigenstrain_name'
p67819
sS'required'
p67820
I01
sS'group_name'
p67821
Nsa(dp67822
S'description'
p67823
S'Set the enabled status of the MooseObject.\n'
p67824
sS'cpp_type'
p67825
S'bool'
p67826
sS'default'
p67827
S'1'
p67828
sS'name'
p67829
S'enable'
p67830
sS'required'
p67831
I00
sS'group_name'
p67832
S'Advanced'
p67833
sa(dp67834
S'description'
p67835
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67836
sS'cpp_type'
p67837
S'bool'
p67838
sS'default'
p67839
S'1'
p67840
sS'name'
p67841
S'implicit'
p67842
sS'required'
p67843
I00
sS'group_name'
p67844
S'Advanced'
p67845
sa(dp67846
S'description'
p67847
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p67848
sS'cpp_type'
p67849
S'bool'
p67850
sS'default'
p67851
S'0'
p67852
sS'name'
p67853
S'incremental_form'
p67854
sS'required'
p67855
I00
sS'group_name'
p67856
Nsa(dp67857
S'description'
p67858
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67859
sS'cpp_type'
p67860
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67861
sS'default'
p67862
g3
sS'name'
p67863
S'output_properties'
p67864
sS'required'
p67865
I00
sS'group_name'
p67866
S'Outputs'
p67867
sa(dp67868
S'description'
p67869
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67870
sS'cpp_type'
p67871
S'std::vector<OutputName, std::allocator<OutputName> >'
p67872
sS'default'
p67873
S'none'
p67874
sS'name'
p67875
S'outputs'
p67876
sS'required'
p67877
I00
sS'group_name'
p67878
S'Outputs'
p67879
sa(dp67880
S'description'
p67881
S'The seed for the master random number generator\n'
p67882
sS'cpp_type'
p67883
S'unsigned int'
p67884
sS'default'
p67885
S'0'
p67886
sS'name'
p67887
S'seed'
p67888
sS'required'
p67889
I00
sS'group_name'
p67890
S'Advanced'
p67891
sa(dp67892
S'description'
p67893
S'Reference temperature for thermal eigenstrain calculation\n'
p67894
sS'cpp_type'
p67895
S'double'
p67896
sS'default'
p67897
g3
sS'name'
p67898
S'stress_free_reference_temperature'
p67899
sS'required'
p67900
I00
sS'group_name'
p67901
Nsa(dp67902
S'description'
p67903
S'Reference temperature for thermal eigenstrain calculation\n'
p67904
sS'cpp_type'
p67905
S'double'
p67906
sS'default'
p67907
g3
sS'name'
p67908
S'stress_free_temperature'
p67909
sS'required'
p67910
I00
sS'group_name'
p67911
Nsa(dp67912
S'description'
p67913
S'Coupled temperature\n'
p67914
sS'cpp_type'
p67915
S'std::vector<VariableName>'
p67916
sS'default'
p67917
g3
sS'name'
p67918
S'temperature'
p67919
sS'required'
p67920
I00
sS'group_name'
p67921
Nsa(dp67922
S'description'
p67923
S'Thermal expansion coefficient\n'
p67924
sS'cpp_type'
p67925
S'double'
p67926
sS'default'
p67927
g3
sS'name'
p67928
S'thermal_expansion_coeff'
p67929
sS'required'
p67930
I00
sS'group_name'
p67931
Nsa(dp67932
S'description'
p67933
g3
sS'cpp_type'
p67934
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67935
sS'default'
p67936
S'ComputeThermalExpansionEigenstrain'
p67937
sS'name'
p67938
S'type'
p67939
sS'required'
p67940
I00
sS'group_name'
p67941
Nsa(dp67942
S'description'
p67943
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p67944
sS'cpp_type'
p67945
S'bool'
p67946
sS'default'
p67947
S'0'
p67948
sS'name'
p67949
S'use_displaced_mesh'
p67950
sS'required'
p67951
I00
sS'group_name'
p67952
S'Advanced'
p67953
sasS'name'
p67954
S'/Materials/ComputeThermalExpansionEigenstrain'
p67955
sa(dp67956
S'description'
p67957
S'Computes Eigenstrain based on material property tensor base\n'
p67958
sS'subblocks'
p67959
NsS'parameters'
p67960
(lp67961
(dp67962
S'description'
p67963
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67964
sS'cpp_type'
p67965
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67966
sS'default'
p67967
g3
sS'name'
p67968
S'base_name'
p67969
sS'required'
p67970
I00
sS'group_name'
p67971
Nsa(dp67972
S'description'
p67973
S'Name of base tensor property\n'
p67974
sS'cpp_type'
p67975
S'MaterialPropertyName'
p67976
sS'default'
p67977
g3
sS'name'
p67978
S'base_tensor_property_name'
p67979
sS'required'
p67980
I01
sS'group_name'
p67981
Nsa(dp67982
S'description'
p67983
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67984
sS'cpp_type'
p67985
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67986
sS'default'
p67987
g3
sS'name'
p67988
S'block'
p67989
sS'required'
p67990
I00
sS'group_name'
p67991
Nsa(dp67992
S'description'
p67993
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67994
sS'cpp_type'
p67995
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67996
sS'default'
p67997
g3
sS'name'
p67998
S'boundary'
p67999
sS'required'
p68000
I00
sS'group_name'
p68001
Nsa(dp68002
S'description'
p68003
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68004
sS'cpp_type'
p68005
S'bool'
p68006
sS'default'
p68007
S'1'
p68008
sS'name'
p68009
S'compute'
p68010
sS'required'
p68011
I00
sS'group_name'
p68012
Nsa(dp68013
S'description'
p68014
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68015
sS'cpp_type'
p68016
S'bool'
p68017
sS'default'
p68018
S'0'
p68019
sS'name'
p68020
S'constant_on_elem'
p68021
sS'required'
p68022
I00
sS'group_name'
p68023
S'Advanced'
p68024
sa(dp68025
S'description'
p68026
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68027
sS'cpp_type'
p68028
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68029
sS'default'
p68030
g3
sS'name'
p68031
S'control_tags'
p68032
sS'required'
p68033
I00
sS'group_name'
p68034
S'Advanced'
p68035
sa(dp68036
S'description'
p68037
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68038
sS'cpp_type'
p68039
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68040
sS'default'
p68041
g3
sS'name'
p68042
S'eigenstrain_name'
p68043
sS'required'
p68044
I01
sS'group_name'
p68045
Nsa(dp68046
S'description'
p68047
S'Set the enabled status of the MooseObject.\n'
p68048
sS'cpp_type'
p68049
S'bool'
p68050
sS'default'
p68051
S'1'
p68052
sS'name'
p68053
S'enable'
p68054
sS'required'
p68055
I00
sS'group_name'
p68056
S'Advanced'
p68057
sa(dp68058
S'description'
p68059
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68060
sS'cpp_type'
p68061
S'bool'
p68062
sS'default'
p68063
S'1'
p68064
sS'name'
p68065
S'implicit'
p68066
sS'required'
p68067
I00
sS'group_name'
p68068
S'Advanced'
p68069
sa(dp68070
S'description'
p68071
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p68072
sS'cpp_type'
p68073
S'bool'
p68074
sS'default'
p68075
S'0'
p68076
sS'name'
p68077
S'incremental_form'
p68078
sS'required'
p68079
I00
sS'group_name'
p68080
Nsa(dp68081
S'description'
p68082
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p68083
sS'cpp_type'
p68084
S'std::vector<double, std::allocator<double> >'
p68085
sS'default'
p68086
g3
sS'name'
p68087
S'offset_tensor'
p68088
sS'required'
p68089
I00
sS'group_name'
p68090
Nsa(dp68091
S'description'
p68092
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68093
sS'cpp_type'
p68094
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68095
sS'default'
p68096
g3
sS'name'
p68097
S'output_properties'
p68098
sS'required'
p68099
I00
sS'group_name'
p68100
S'Outputs'
p68101
sa(dp68102
S'description'
p68103
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68104
sS'cpp_type'
p68105
S'std::vector<OutputName, std::allocator<OutputName> >'
p68106
sS'default'
p68107
S'none'
p68108
sS'name'
p68109
S'outputs'
p68110
sS'required'
p68111
I00
sS'group_name'
p68112
S'Outputs'
p68113
sa(dp68114
S'description'
p68115
S'Name of material defining the variable dependence\n'
p68116
sS'cpp_type'
p68117
S'MaterialPropertyName'
p68118
sS'default'
p68119
S'1'
p68120
sS'name'
p68121
S'prefactor'
p68122
sS'required'
p68123
I00
sS'group_name'
p68124
Nsa(dp68125
S'description'
p68126
S'The seed for the master random number generator\n'
p68127
sS'cpp_type'
p68128
S'unsigned int'
p68129
sS'default'
p68130
S'0'
p68131
sS'name'
p68132
S'seed'
p68133
sS'required'
p68134
I00
sS'group_name'
p68135
S'Advanced'
p68136
sa(dp68137
S'description'
p68138
g3
sS'cpp_type'
p68139
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68140
sS'default'
p68141
S'ComputeVariableBaseEigenStrain'
p68142
sS'name'
p68143
S'type'
p68144
sS'required'
p68145
I00
sS'group_name'
p68146
Nsa(dp68147
S'description'
p68148
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68149
sS'cpp_type'
p68150
S'bool'
p68151
sS'default'
p68152
S'0'
p68153
sS'name'
p68154
S'use_displaced_mesh'
p68155
sS'required'
p68156
I00
sS'group_name'
p68157
S'Advanced'
p68158
sasS'name'
p68159
S'/Materials/ComputeVariableBaseEigenStrain'
p68160
sa(dp68161
S'description'
p68162
S'Computes an Eigenstrain and its derivatives that is a function of multiple variables, where the prefactor is defined in a derivative material\n'
p68163
sS'subblocks'
p68164
NsS'parameters'
p68165
(lp68166
(dp68167
S'description'
p68168
S'variable dependencies for the prefactor\n'
p68169
sS'cpp_type'
p68170
S'std::vector<VariableName>'
p68171
sS'default'
p68172
g3
sS'name'
p68173
S'args'
p68174
sS'required'
p68175
I01
sS'group_name'
p68176
Nsa(dp68177
S'description'
p68178
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68179
sS'cpp_type'
p68180
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68181
sS'default'
p68182
g3
sS'name'
p68183
S'base_name'
p68184
sS'required'
p68185
I00
sS'group_name'
p68186
Nsa(dp68187
S'description'
p68188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68189
sS'cpp_type'
p68190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68191
sS'default'
p68192
g3
sS'name'
p68193
S'block'
p68194
sS'required'
p68195
I00
sS'group_name'
p68196
Nsa(dp68197
S'description'
p68198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68199
sS'cpp_type'
p68200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68201
sS'default'
p68202
g3
sS'name'
p68203
S'boundary'
p68204
sS'required'
p68205
I00
sS'group_name'
p68206
Nsa(dp68207
S'description'
p68208
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68209
sS'cpp_type'
p68210
S'bool'
p68211
sS'default'
p68212
S'1'
p68213
sS'name'
p68214
S'compute'
p68215
sS'required'
p68216
I00
sS'group_name'
p68217
Nsa(dp68218
S'description'
p68219
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68220
sS'cpp_type'
p68221
S'bool'
p68222
sS'default'
p68223
S'0'
p68224
sS'name'
p68225
S'constant_on_elem'
p68226
sS'required'
p68227
I00
sS'group_name'
p68228
S'Advanced'
p68229
sa(dp68230
S'description'
p68231
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68232
sS'cpp_type'
p68233
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68234
sS'default'
p68235
g3
sS'name'
p68236
S'control_tags'
p68237
sS'required'
p68238
I00
sS'group_name'
p68239
S'Advanced'
p68240
sa(dp68241
S'description'
p68242
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p68243
sS'cpp_type'
p68244
S'std::vector<double, std::allocator<double> >'
p68245
sS'default'
p68246
g3
sS'name'
p68247
S'eigen_base'
p68248
sS'required'
p68249
I01
sS'group_name'
p68250
Nsa(dp68251
S'description'
p68252
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68253
sS'cpp_type'
p68254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68255
sS'default'
p68256
g3
sS'name'
p68257
S'eigenstrain_name'
p68258
sS'required'
p68259
I01
sS'group_name'
p68260
Nsa(dp68261
S'description'
p68262
S'Set the enabled status of the MooseObject.\n'
p68263
sS'cpp_type'
p68264
S'bool'
p68265
sS'default'
p68266
S'1'
p68267
sS'name'
p68268
S'enable'
p68269
sS'required'
p68270
I00
sS'group_name'
p68271
S'Advanced'
p68272
sa(dp68273
S'description'
p68274
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68275
sS'cpp_type'
p68276
S'bool'
p68277
sS'default'
p68278
S'1'
p68279
sS'name'
p68280
S'implicit'
p68281
sS'required'
p68282
I00
sS'group_name'
p68283
S'Advanced'
p68284
sa(dp68285
S'description'
p68286
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p68287
sS'cpp_type'
p68288
S'bool'
p68289
sS'default'
p68290
S'0'
p68291
sS'name'
p68292
S'incremental_form'
p68293
sS'required'
p68294
I00
sS'group_name'
p68295
Nsa(dp68296
S'description'
p68297
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68298
sS'cpp_type'
p68299
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68300
sS'default'
p68301
g3
sS'name'
p68302
S'output_properties'
p68303
sS'required'
p68304
I00
sS'group_name'
p68305
S'Outputs'
p68306
sa(dp68307
S'description'
p68308
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68309
sS'cpp_type'
p68310
S'std::vector<OutputName, std::allocator<OutputName> >'
p68311
sS'default'
p68312
S'none'
p68313
sS'name'
p68314
S'outputs'
p68315
sS'required'
p68316
I00
sS'group_name'
p68317
S'Outputs'
p68318
sa(dp68319
S'description'
p68320
S'Name of material defining the variable dependence\n'
p68321
sS'cpp_type'
p68322
S'MaterialPropertyName'
p68323
sS'default'
p68324
S'1'
p68325
sS'name'
p68326
S'prefactor'
p68327
sS'required'
p68328
I00
sS'group_name'
p68329
Nsa(dp68330
S'description'
p68331
S'The seed for the master random number generator\n'
p68332
sS'cpp_type'
p68333
S'unsigned int'
p68334
sS'default'
p68335
S'0'
p68336
sS'name'
p68337
S'seed'
p68338
sS'required'
p68339
I00
sS'group_name'
p68340
S'Advanced'
p68341
sa(dp68342
S'description'
p68343
g3
sS'cpp_type'
p68344
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68345
sS'default'
p68346
S'ComputeVariableEigenstrain'
p68347
sS'name'
p68348
S'type'
p68349
sS'required'
p68350
I00
sS'group_name'
p68351
Nsa(dp68352
S'description'
p68353
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68354
sS'cpp_type'
p68355
S'bool'
p68356
sS'default'
p68357
S'0'
p68358
sS'name'
p68359
S'use_displaced_mesh'
p68360
sS'required'
p68361
I00
sS'group_name'
p68362
S'Advanced'
p68363
sasS'name'
p68364
S'/Materials/ComputeVariableEigenstrain'
p68365
sa(dp68366
S'description'
p68367
S'Compute elastic stress for finite strains when the elasticity tensor components change, e.g. the elastic constants are a function of temperature\n'
p68368
sS'subblocks'
p68369
NsS'parameters'
p68370
(lp68371
(dp68372
S'description'
p68373
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68374
sS'cpp_type'
p68375
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68376
sS'default'
p68377
g3
sS'name'
p68378
S'base_name'
p68379
sS'required'
p68380
I00
sS'group_name'
p68381
Nsa(dp68382
S'description'
p68383
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68384
sS'cpp_type'
p68385
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68386
sS'default'
p68387
g3
sS'name'
p68388
S'block'
p68389
sS'required'
p68390
I00
sS'group_name'
p68391
Nsa(dp68392
S'description'
p68393
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68394
sS'cpp_type'
p68395
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68396
sS'default'
p68397
g3
sS'name'
p68398
S'boundary'
p68399
sS'required'
p68400
I00
sS'group_name'
p68401
Nsa(dp68402
S'description'
p68403
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68404
sS'cpp_type'
p68405
S'bool'
p68406
sS'default'
p68407
S'1'
p68408
sS'name'
p68409
S'compute'
p68410
sS'required'
p68411
I00
sS'group_name'
p68412
Nsa(dp68413
S'description'
p68414
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68415
sS'cpp_type'
p68416
S'bool'
p68417
sS'default'
p68418
S'0'
p68419
sS'name'
p68420
S'constant_on_elem'
p68421
sS'required'
p68422
I00
sS'group_name'
p68423
S'Advanced'
p68424
sa(dp68425
S'description'
p68426
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68427
sS'cpp_type'
p68428
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68429
sS'default'
p68430
g3
sS'name'
p68431
S'control_tags'
p68432
sS'required'
p68433
I00
sS'group_name'
p68434
S'Advanced'
p68435
sa(dp68436
S'description'
p68437
S'Set the enabled status of the MooseObject.\n'
p68438
sS'cpp_type'
p68439
S'bool'
p68440
sS'default'
p68441
S'1'
p68442
sS'name'
p68443
S'enable'
p68444
sS'required'
p68445
I00
sS'group_name'
p68446
S'Advanced'
p68447
sa(dp68448
S'description'
p68449
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68450
sS'cpp_type'
p68451
S'bool'
p68452
sS'default'
p68453
S'1'
p68454
sS'name'
p68455
S'implicit'
p68456
sS'required'
p68457
I00
sS'group_name'
p68458
S'Advanced'
p68459
sa(dp68460
S'description'
p68461
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p68462
sS'cpp_type'
p68463
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p68464
sS'default'
p68465
g3
sS'name'
p68466
S'initial_stress'
p68467
sS'required'
p68468
I00
sS'group_name'
p68469
Nsa(dp68470
S'description'
p68471
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68472
sS'cpp_type'
p68473
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68474
sS'default'
p68475
g3
sS'name'
p68476
S'output_properties'
p68477
sS'required'
p68478
I00
sS'group_name'
p68479
S'Outputs'
p68480
sa(dp68481
S'description'
p68482
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68483
sS'cpp_type'
p68484
S'std::vector<OutputName, std::allocator<OutputName> >'
p68485
sS'default'
p68486
S'none'
p68487
sS'name'
p68488
S'outputs'
p68489
sS'required'
p68490
I00
sS'group_name'
p68491
S'Outputs'
p68492
sa(dp68493
S'description'
p68494
S'The seed for the master random number generator\n'
p68495
sS'cpp_type'
p68496
S'unsigned int'
p68497
sS'default'
p68498
S'0'
p68499
sS'name'
p68500
S'seed'
p68501
sS'required'
p68502
I00
sS'group_name'
p68503
S'Advanced'
p68504
sa(dp68505
S'description'
p68506
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p68507
sS'cpp_type'
p68508
S'bool'
p68509
sS'default'
p68510
S'0'
p68511
sS'name'
p68512
S'store_stress_old'
p68513
sS'required'
p68514
I00
sS'group_name'
p68515
Nsa(dp68516
S'description'
p68517
g3
sS'cpp_type'
p68518
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68519
sS'default'
p68520
S'ComputeVariableElasticConstantStress'
p68521
sS'name'
p68522
S'type'
p68523
sS'required'
p68524
I00
sS'group_name'
p68525
NsasS'name'
p68526
S'/Materials/ComputeVariableElasticConstantStress'
p68527
sa(dp68528
S'description'
p68529
S'Compute an isotropic elasticity tensor for elastic constants that change as a function of material properties\n'
p68530
sS'subblocks'
p68531
NsS'parameters'
p68532
(lp68533
(dp68534
S'description'
p68535
S"Variable dependence for the Young's Modulus and Poisson's Ratio materials\n"
p68536
sS'cpp_type'
p68537
S'std::vector<VariableName>'
p68538
sS'default'
p68539
g3
sS'name'
p68540
S'args'
p68541
sS'required'
p68542
I01
sS'group_name'
p68543
Nsa(dp68544
S'description'
p68545
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68546
sS'cpp_type'
p68547
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68548
sS'default'
p68549
g3
sS'name'
p68550
S'base_name'
p68551
sS'required'
p68552
I00
sS'group_name'
p68553
Nsa(dp68554
S'description'
p68555
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68556
sS'cpp_type'
p68557
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68558
sS'default'
p68559
g3
sS'name'
p68560
S'block'
p68561
sS'required'
p68562
I00
sS'group_name'
p68563
Nsa(dp68564
S'description'
p68565
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68566
sS'cpp_type'
p68567
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68568
sS'default'
p68569
g3
sS'name'
p68570
S'boundary'
p68571
sS'required'
p68572
I00
sS'group_name'
p68573
Nsa(dp68574
S'description'
p68575
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68576
sS'cpp_type'
p68577
S'bool'
p68578
sS'default'
p68579
S'1'
p68580
sS'name'
p68581
S'compute'
p68582
sS'required'
p68583
I00
sS'group_name'
p68584
Nsa(dp68585
S'description'
p68586
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68587
sS'cpp_type'
p68588
S'bool'
p68589
sS'default'
p68590
S'0'
p68591
sS'name'
p68592
S'constant_on_elem'
p68593
sS'required'
p68594
I00
sS'group_name'
p68595
S'Advanced'
p68596
sa(dp68597
S'description'
p68598
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68599
sS'cpp_type'
p68600
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68601
sS'default'
p68602
g3
sS'name'
p68603
S'control_tags'
p68604
sS'required'
p68605
I00
sS'group_name'
p68606
S'Advanced'
p68607
sa(dp68608
S'description'
p68609
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p68610
sS'cpp_type'
p68611
S'FunctionName'
p68612
sS'default'
p68613
g3
sS'name'
p68614
S'elasticity_tensor_prefactor'
p68615
sS'required'
p68616
I00
sS'group_name'
p68617
Nsa(dp68618
S'description'
p68619
S'Set the enabled status of the MooseObject.\n'
p68620
sS'cpp_type'
p68621
S'bool'
p68622
sS'default'
p68623
S'1'
p68624
sS'name'
p68625
S'enable'
p68626
sS'required'
p68627
I00
sS'group_name'
p68628
S'Advanced'
p68629
sa(dp68630
S'description'
p68631
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68632
sS'cpp_type'
p68633
S'bool'
p68634
sS'default'
p68635
S'1'
p68636
sS'name'
p68637
S'implicit'
p68638
sS'required'
p68639
I00
sS'group_name'
p68640
S'Advanced'
p68641
sa(dp68642
S'description'
p68643
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68644
sS'cpp_type'
p68645
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68646
sS'default'
p68647
g3
sS'name'
p68648
S'output_properties'
p68649
sS'required'
p68650
I00
sS'group_name'
p68651
S'Outputs'
p68652
sa(dp68653
S'description'
p68654
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68655
sS'cpp_type'
p68656
S'std::vector<OutputName, std::allocator<OutputName> >'
p68657
sS'default'
p68658
S'none'
p68659
sS'name'
p68660
S'outputs'
p68661
sS'required'
p68662
I00
sS'group_name'
p68663
S'Outputs'
p68664
sa(dp68665
S'description'
p68666
S"Name of material defining the Poisson's Ratio\n"
p68667
sS'cpp_type'
p68668
S'MaterialPropertyName'
p68669
sS'default'
p68670
g3
sS'name'
p68671
S'poissons_ratio'
p68672
sS'required'
p68673
I01
sS'group_name'
p68674
Nsa(dp68675
S'description'
p68676
S'The seed for the master random number generator\n'
p68677
sS'cpp_type'
p68678
S'unsigned int'
p68679
sS'default'
p68680
S'0'
p68681
sS'name'
p68682
S'seed'
p68683
sS'required'
p68684
I00
sS'group_name'
p68685
S'Advanced'
p68686
sa(dp68687
S'description'
p68688
g3
sS'cpp_type'
p68689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68690
sS'default'
p68691
S'ComputeVariableIsotropicElasticityTensor'
p68692
sS'name'
p68693
S'type'
p68694
sS'required'
p68695
I00
sS'group_name'
p68696
Nsa(dp68697
S'description'
p68698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68699
sS'cpp_type'
p68700
S'bool'
p68701
sS'default'
p68702
S'0'
p68703
sS'name'
p68704
S'use_displaced_mesh'
p68705
sS'required'
p68706
I00
sS'group_name'
p68707
S'Advanced'
p68708
sa(dp68709
S'description'
p68710
S"Name of material defining the Young's Modulus\n"
p68711
sS'cpp_type'
p68712
S'MaterialPropertyName'
p68713
sS'default'
p68714
g3
sS'name'
p68715
S'youngs_modulus'
p68716
sS'required'
p68717
I01
sS'group_name'
p68718
NsasS'name'
p68719
S'/Materials/ComputeVariableIsotropicElasticityTensor'
p68720
sa(dp68721
S'description'
p68722
S'Computes volumetric deformation gradient and adjusts the total deformation gradient\n'
p68723
sS'subblocks'
p68724
NsS'parameters'
p68725
(lp68726
(dp68727
S'description'
p68728
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68729
sS'cpp_type'
p68730
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68731
sS'default'
p68732
g3
sS'name'
p68733
S'block'
p68734
sS'required'
p68735
I00
sS'group_name'
p68736
Nsa(dp68737
S'description'
p68738
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68739
sS'cpp_type'
p68740
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68741
sS'default'
p68742
g3
sS'name'
p68743
S'boundary'
p68744
sS'required'
p68745
I00
sS'group_name'
p68746
Nsa(dp68747
S'description'
p68748
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68749
sS'cpp_type'
p68750
S'bool'
p68751
sS'default'
p68752
S'1'
p68753
sS'name'
p68754
S'compute'
p68755
sS'required'
p68756
I00
sS'group_name'
p68757
Nsa(dp68758
S'description'
p68759
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68760
sS'cpp_type'
p68761
S'bool'
p68762
sS'default'
p68763
S'0'
p68764
sS'name'
p68765
S'constant_on_elem'
p68766
sS'required'
p68767
I00
sS'group_name'
p68768
S'Advanced'
p68769
sa(dp68770
S'description'
p68771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68772
sS'cpp_type'
p68773
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68774
sS'default'
p68775
g3
sS'name'
p68776
S'control_tags'
p68777
sS'required'
p68778
I00
sS'group_name'
p68779
S'Advanced'
p68780
sa(dp68781
S'description'
p68782
S'Set the enabled status of the MooseObject.\n'
p68783
sS'cpp_type'
p68784
S'bool'
p68785
sS'default'
p68786
S'1'
p68787
sS'name'
p68788
S'enable'
p68789
sS'required'
p68790
I00
sS'group_name'
p68791
S'Advanced'
p68792
sa(dp68793
S'description'
p68794
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68795
sS'cpp_type'
p68796
S'bool'
p68797
sS'default'
p68798
S'1'
p68799
sS'name'
p68800
S'implicit'
p68801
sS'required'
p68802
I00
sS'group_name'
p68803
S'Advanced'
p68804
sa(dp68805
S'description'
p68806
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68807
sS'cpp_type'
p68808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68809
sS'default'
p68810
g3
sS'name'
p68811
S'output_properties'
p68812
sS'required'
p68813
I00
sS'group_name'
p68814
S'Outputs'
p68815
sa(dp68816
S'description'
p68817
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68818
sS'cpp_type'
p68819
S'std::vector<OutputName, std::allocator<OutputName> >'
p68820
sS'default'
p68821
S'none'
p68822
sS'name'
p68823
S'outputs'
p68824
sS'required'
p68825
I00
sS'group_name'
p68826
S'Outputs'
p68827
sa(dp68828
S'description'
p68829
S'Name of adjusted deformation gradient variable\n'
p68830
sS'cpp_type'
p68831
S'MaterialPropertyName'
p68832
sS'default'
p68833
g3
sS'name'
p68834
S'post_deform_grad_name'
p68835
sS'required'
p68836
I01
sS'group_name'
p68837
Nsa(dp68838
S'description'
p68839
S'Name of pre-adjusted deformation gradient variable\n'
p68840
sS'cpp_type'
p68841
S'MaterialPropertyName'
p68842
sS'default'
p68843
g3
sS'name'
p68844
S'pre_deform_grad_name'
p68845
sS'required'
p68846
I01
sS'group_name'
p68847
Nsa(dp68848
S'description'
p68849
S'The seed for the master random number generator\n'
p68850
sS'cpp_type'
p68851
S'unsigned int'
p68852
sS'default'
p68853
S'0'
p68854
sS'name'
p68855
S'seed'
p68856
sS'required'
p68857
I00
sS'group_name'
p68858
S'Advanced'
p68859
sa(dp68860
S'description'
p68861
g3
sS'cpp_type'
p68862
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68863
sS'default'
p68864
S'ComputeVolumetricDeformGrad'
p68865
sS'name'
p68866
S'type'
p68867
sS'required'
p68868
I00
sS'group_name'
p68869
Nsa(dp68870
S'description'
p68871
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68872
sS'cpp_type'
p68873
S'bool'
p68874
sS'default'
p68875
S'0'
p68876
sS'name'
p68877
S'use_displaced_mesh'
p68878
sS'required'
p68879
I00
sS'group_name'
p68880
S'Advanced'
p68881
sa(dp68882
S'description'
p68883
S'Name of volumetric deformation gradient variable\n'
p68884
sS'cpp_type'
p68885
S'MaterialPropertyName'
p68886
sS'default'
p68887
g3
sS'name'
p68888
S'volumetric_deform_grad_name'
p68889
sS'required'
p68890
I01
sS'group_name'
p68891
NsasS'name'
p68892
S'/Materials/ComputeVolumetricDeformGrad'
p68893
sa(dp68894
S'description'
p68895
S'Computes an eigenstrain that is defined by a set of scalar material properties that summed together define the volumetric change.  This also computes the derivatives of that eigenstrain with respect to a supplied set of variable dependencies.\n'
p68896
sS'subblocks'
p68897
NsS'parameters'
p68898
(lp68899
(dp68900
S'description'
p68901
S'variable dependencies for the volumetric_expansion\n'
p68902
sS'cpp_type'
p68903
S'std::vector<VariableName>'
p68904
sS'default'
p68905
g3
sS'name'
p68906
S'args'
p68907
sS'required'
p68908
I01
sS'group_name'
p68909
Nsa(dp68910
S'description'
p68911
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68912
sS'cpp_type'
p68913
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68914
sS'default'
p68915
g3
sS'name'
p68916
S'base_name'
p68917
sS'required'
p68918
I00
sS'group_name'
p68919
Nsa(dp68920
S'description'
p68921
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68922
sS'cpp_type'
p68923
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68924
sS'default'
p68925
g3
sS'name'
p68926
S'block'
p68927
sS'required'
p68928
I00
sS'group_name'
p68929
Nsa(dp68930
S'description'
p68931
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68932
sS'cpp_type'
p68933
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68934
sS'default'
p68935
g3
sS'name'
p68936
S'boundary'
p68937
sS'required'
p68938
I00
sS'group_name'
p68939
Nsa(dp68940
S'description'
p68941
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68942
sS'cpp_type'
p68943
S'bool'
p68944
sS'default'
p68945
S'1'
p68946
sS'name'
p68947
S'compute'
p68948
sS'required'
p68949
I00
sS'group_name'
p68950
Nsa(dp68951
S'description'
p68952
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68953
sS'cpp_type'
p68954
S'bool'
p68955
sS'default'
p68956
S'0'
p68957
sS'name'
p68958
S'constant_on_elem'
p68959
sS'required'
p68960
I00
sS'group_name'
p68961
S'Advanced'
p68962
sa(dp68963
S'description'
p68964
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68965
sS'cpp_type'
p68966
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68967
sS'default'
p68968
g3
sS'name'
p68969
S'control_tags'
p68970
sS'required'
p68971
I00
sS'group_name'
p68972
S'Advanced'
p68973
sa(dp68974
S'description'
p68975
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68976
sS'cpp_type'
p68977
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68978
sS'default'
p68979
g3
sS'name'
p68980
S'eigenstrain_name'
p68981
sS'required'
p68982
I01
sS'group_name'
p68983
Nsa(dp68984
S'description'
p68985
S'Set the enabled status of the MooseObject.\n'
p68986
sS'cpp_type'
p68987
S'bool'
p68988
sS'default'
p68989
S'1'
p68990
sS'name'
p68991
S'enable'
p68992
sS'required'
p68993
I00
sS'group_name'
p68994
S'Advanced'
p68995
sa(dp68996
S'description'
p68997
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68998
sS'cpp_type'
p68999
S'bool'
p69000
sS'default'
p69001
S'1'
p69002
sS'name'
p69003
S'implicit'
p69004
sS'required'
p69005
I00
sS'group_name'
p69006
S'Advanced'
p69007
sa(dp69008
S'description'
p69009
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p69010
sS'cpp_type'
p69011
S'bool'
p69012
sS'default'
p69013
S'0'
p69014
sS'name'
p69015
S'incremental_form'
p69016
sS'required'
p69017
I00
sS'group_name'
p69018
Nsa(dp69019
S'description'
p69020
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69021
sS'cpp_type'
p69022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69023
sS'default'
p69024
g3
sS'name'
p69025
S'output_properties'
p69026
sS'required'
p69027
I00
sS'group_name'
p69028
S'Outputs'
p69029
sa(dp69030
S'description'
p69031
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69032
sS'cpp_type'
p69033
S'std::vector<OutputName, std::allocator<OutputName> >'
p69034
sS'default'
p69035
S'none'
p69036
sS'name'
p69037
S'outputs'
p69038
sS'required'
p69039
I00
sS'group_name'
p69040
S'Outputs'
p69041
sa(dp69042
S'description'
p69043
S'The seed for the master random number generator\n'
p69044
sS'cpp_type'
p69045
S'unsigned int'
p69046
sS'default'
p69047
S'0'
p69048
sS'name'
p69049
S'seed'
p69050
sS'required'
p69051
I00
sS'group_name'
p69052
S'Advanced'
p69053
sa(dp69054
S'description'
p69055
g3
sS'cpp_type'
p69056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69057
sS'default'
p69058
S'ComputeVolumetricEigenstrain'
p69059
sS'name'
p69060
S'type'
p69061
sS'required'
p69062
I00
sS'group_name'
p69063
Nsa(dp69064
S'description'
p69065
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69066
sS'cpp_type'
p69067
S'bool'
p69068
sS'default'
p69069
S'0'
p69070
sS'name'
p69071
S'use_displaced_mesh'
p69072
sS'required'
p69073
I00
sS'group_name'
p69074
S'Advanced'
p69075
sa(dp69076
S'description'
p69077
S'List of scalar materials defining the volumetric change\n'
p69078
sS'cpp_type'
p69079
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p69080
sS'default'
p69081
g3
sS'name'
p69082
S'volumetric_materials'
p69083
sS'required'
p69084
I01
sS'group_name'
p69085
NsasS'name'
p69086
S'/Materials/ComputeVolumetricEigenstrain'
p69087
sa(dp69088
S'description'
p69089
S'Provide a constant mobility tensor value\n'
p69090
sS'subblocks'
p69091
NsS'parameters'
p69092
(lp69093
(dp69094
S'description'
p69095
S'Name of the mobility tensor porperty to generate\n'
p69096
sS'cpp_type'
p69097
S'MaterialPropertyName'
p69098
sS'default'
p69099
g3
sS'name'
p69100
S'M_name'
p69101
sS'required'
p69102
I01
sS'group_name'
p69103
Nsa(dp69104
S'description'
p69105
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69106
sS'cpp_type'
p69107
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69108
sS'default'
p69109
g3
sS'name'
p69110
S'block'
p69111
sS'required'
p69112
I00
sS'group_name'
p69113
Nsa(dp69114
S'description'
p69115
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69116
sS'cpp_type'
p69117
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69118
sS'default'
p69119
g3
sS'name'
p69120
S'boundary'
p69121
sS'required'
p69122
I00
sS'group_name'
p69123
Nsa(dp69124
S'description'
p69125
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69126
sS'cpp_type'
p69127
S'bool'
p69128
sS'default'
p69129
S'1'
p69130
sS'name'
p69131
S'compute'
p69132
sS'required'
p69133
I00
sS'group_name'
p69134
Nsa(dp69135
S'description'
p69136
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69137
sS'cpp_type'
p69138
S'bool'
p69139
sS'default'
p69140
S'0'
p69141
sS'name'
p69142
S'constant_on_elem'
p69143
sS'required'
p69144
I00
sS'group_name'
p69145
S'Advanced'
p69146
sa(dp69147
S'description'
p69148
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69149
sS'cpp_type'
p69150
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69151
sS'default'
p69152
g3
sS'name'
p69153
S'control_tags'
p69154
sS'required'
p69155
I00
sS'group_name'
p69156
S'Advanced'
p69157
sa(dp69158
S'description'
p69159
S'Set the enabled status of the MooseObject.\n'
p69160
sS'cpp_type'
p69161
S'bool'
p69162
sS'default'
p69163
S'1'
p69164
sS'name'
p69165
S'enable'
p69166
sS'required'
p69167
I00
sS'group_name'
p69168
S'Advanced'
p69169
sa(dp69170
S'description'
p69171
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69172
sS'cpp_type'
p69173
S'bool'
p69174
sS'default'
p69175
S'1'
p69176
sS'name'
p69177
S'implicit'
p69178
sS'required'
p69179
I00
sS'group_name'
p69180
S'Advanced'
p69181
sa(dp69182
S'description'
p69183
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69184
sS'cpp_type'
p69185
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69186
sS'default'
p69187
g3
sS'name'
p69188
S'output_properties'
p69189
sS'required'
p69190
I00
sS'group_name'
p69191
S'Outputs'
p69192
sa(dp69193
S'description'
p69194
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69195
sS'cpp_type'
p69196
S'std::vector<OutputName, std::allocator<OutputName> >'
p69197
sS'default'
p69198
S'none'
p69199
sS'name'
p69200
S'outputs'
p69201
sS'required'
p69202
I00
sS'group_name'
p69203
S'Outputs'
p69204
sa(dp69205
S'description'
p69206
S'The seed for the master random number generator\n'
p69207
sS'cpp_type'
p69208
S'unsigned int'
p69209
sS'default'
p69210
S'0'
p69211
sS'name'
p69212
S'seed'
p69213
sS'required'
p69214
I00
sS'group_name'
p69215
S'Advanced'
p69216
sa(dp69217
S'description'
p69218
S'Tensor values\n'
p69219
sS'cpp_type'
p69220
S'std::vector<double, std::allocator<double> >'
p69221
sS'default'
p69222
g3
sS'name'
p69223
S'tensor'
p69224
sS'required'
p69225
I01
sS'group_name'
p69226
Nsa(dp69227
S'description'
p69228
g3
sS'cpp_type'
p69229
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69230
sS'default'
p69231
S'ConstantAnisotropicMobility'
p69232
sS'name'
p69233
S'type'
p69234
sS'required'
p69235
I00
sS'group_name'
p69236
Nsa(dp69237
S'description'
p69238
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69239
sS'cpp_type'
p69240
S'bool'
p69241
sS'default'
p69242
S'0'
p69243
sS'name'
p69244
S'use_displaced_mesh'
p69245
sS'required'
p69246
I00
sS'group_name'
p69247
S'Advanced'
p69248
sasS'name'
p69249
S'/Materials/ConstantAnisotropicMobility'
p69250
sa(dp69251
S'description'
p69252
S'Free energy contribution symmetric across interfaces between arbitrary pairs of phases.\n'
p69253
sS'subblocks'
p69254
NsS'parameters'
p69255
(lp69256
(dp69257
S'description'
p69258
S'Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n'
p69259
sS'cpp_type'
p69260
S'std::vector<double, std::allocator<double> >'
p69261
sS'default'
p69262
g3
sS'name'
p69263
S'W_ij'
p69264
sS'required'
p69265
I01
sS'group_name'
p69266
Nsa(dp69267
S'description'
p69268
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69269
sS'cpp_type'
p69270
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69271
sS'default'
p69272
g3
sS'name'
p69273
S'block'
p69274
sS'required'
p69275
I00
sS'group_name'
p69276
Nsa(dp69277
S'description'
p69278
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69279
sS'cpp_type'
p69280
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69281
sS'default'
p69282
g3
sS'name'
p69283
S'boundary'
p69284
sS'required'
p69285
I00
sS'group_name'
p69286
Nsa(dp69287
S'description'
p69288
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69289
sS'cpp_type'
p69290
S'bool'
p69291
sS'default'
p69292
S'1'
p69293
sS'name'
p69294
S'compute'
p69295
sS'required'
p69296
I00
sS'group_name'
p69297
Nsa(dp69298
S'description'
p69299
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69300
sS'cpp_type'
p69301
S'bool'
p69302
sS'default'
p69303
S'0'
p69304
sS'name'
p69305
S'constant_on_elem'
p69306
sS'required'
p69307
I00
sS'group_name'
p69308
S'Advanced'
p69309
sa(dp69310
S'description'
p69311
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69312
sS'cpp_type'
p69313
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69314
sS'default'
p69315
g3
sS'name'
p69316
S'control_tags'
p69317
sS'required'
p69318
I00
sS'group_name'
p69319
S'Advanced'
p69320
sa(dp69321
S'description'
p69322
S'Set the enabled status of the MooseObject.\n'
p69323
sS'cpp_type'
p69324
S'bool'
p69325
sS'default'
p69326
S'1'
p69327
sS'name'
p69328
S'enable'
p69329
sS'required'
p69330
I00
sS'group_name'
p69331
S'Advanced'
p69332
sa(dp69333
S'description'
p69334
S'eta_i order parameters, one for each h\n'
p69335
sS'cpp_type'
p69336
S'std::vector<VariableName>'
p69337
sS'default'
p69338
g3
sS'name'
p69339
S'etas'
p69340
sS'required'
p69341
I01
sS'group_name'
p69342
Nsa(dp69343
S'description'
p69344
S'actual name for g(eta_i)\n'
p69345
sS'cpp_type'
p69346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69347
sS'default'
p69348
S'g'
p69349
sS'name'
p69350
S'function_name'
p69351
sS'required'
p69352
I00
sS'group_name'
p69353
Nsa(dp69354
S'name'
p69355
S'g_order'
p69356
sS'cpp_type'
p69357
S'MooseEnum'
p69358
sS'default'
p69359
S'SIMPLE'
p69360
sS'description'
p69361
S'Polynomial order of the barrier function g(eta)\n'
p69362
sS'required'
p69363
I00
sS'options'
p69364
S'SIMPLE LOW'
p69365
sS'group_name'
p69366
Nsa(dp69367
S'description'
p69368
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69369
sS'cpp_type'
p69370
S'bool'
p69371
sS'default'
p69372
S'1'
p69373
sS'name'
p69374
S'implicit'
p69375
sS'required'
p69376
I00
sS'group_name'
p69377
S'Advanced'
p69378
sa(dp69379
S'description'
p69380
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69381
sS'cpp_type'
p69382
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69383
sS'default'
p69384
g3
sS'name'
p69385
S'output_properties'
p69386
sS'required'
p69387
I00
sS'group_name'
p69388
S'Outputs'
p69389
sa(dp69390
S'description'
p69391
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69392
sS'cpp_type'
p69393
S'std::vector<OutputName, std::allocator<OutputName> >'
p69394
sS'default'
p69395
S'none'
p69396
sS'name'
p69397
S'outputs'
p69398
sS'required'
p69399
I00
sS'group_name'
p69400
S'Outputs'
p69401
sa(dp69402
S'description'
p69403
S'The seed for the master random number generator\n'
p69404
sS'cpp_type'
p69405
S'unsigned int'
p69406
sS'default'
p69407
S'0'
p69408
sS'name'
p69409
S'seed'
p69410
sS'required'
p69411
I00
sS'group_name'
p69412
S'Advanced'
p69413
sa(dp69414
S'description'
p69415
g3
sS'cpp_type'
p69416
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69417
sS'default'
p69418
S'CrossTermBarrierFunctionMaterial'
p69419
sS'name'
p69420
S'type'
p69421
sS'required'
p69422
I00
sS'group_name'
p69423
Nsa(dp69424
S'description'
p69425
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69426
sS'cpp_type'
p69427
S'bool'
p69428
sS'default'
p69429
S'0'
p69430
sS'name'
p69431
S'use_displaced_mesh'
p69432
sS'required'
p69433
I00
sS'group_name'
p69434
S'Advanced'
p69435
sasS'name'
p69436
S'/Materials/CrossTermBarrierFunctionMaterial'
p69437
sa(dp69438
S'description'
p69439
g3
sS'subblocks'
p69440
NsS'parameters'
p69441
(lp69442
(dp69443
S'description'
p69444
S'Length of Burger Vector in m\n'
p69445
sS'cpp_type'
p69446
S'double'
p69447
sS'default'
p69448
S'3e-10'
p69449
sS'name'
p69450
S'Burg_vec'
p69451
sS'required'
p69452
I00
sS'group_name'
p69453
Nsa(dp69454
S'description'
p69455
S'Dislocation Density in m^-2\n'
p69456
sS'cpp_type'
p69457
S'double'
p69458
sS'default'
p69459
S'9e+15'
p69460
sS'name'
p69461
S'Disloc_Den'
p69462
sS'required'
p69463
I00
sS'group_name'
p69464
Nsa(dp69465
S'description'
p69466
S'Elastic Modulus in J/m^3\n'
p69467
sS'cpp_type'
p69468
S'double'
p69469
sS'default'
p69470
S'2.5e+10'
p69471
sS'name'
p69472
S'Elas_Mod'
p69473
sS'required'
p69474
I00
sS'group_name'
p69475
Nsa(dp69476
S'description'
p69477
S'Grain boundary energy in J/m^2\n'
p69478
sS'cpp_type'
p69479
S'double'
p69480
sS'default'
p69481
S'1'
p69482
sS'name'
p69483
S'GBE'
p69484
sS'required'
p69485
I00
sS'group_name'
p69486
Nsa(dp69487
S'description'
p69488
S'GB mobility input in m^4/(J*s)\n'
p69489
sS'cpp_type'
p69490
S'double'
p69491
sS'default'
p69492
S'2e-13'
p69493
sS'name'
p69494
S'GBMobility'
p69495
sS'required'
p69496
I00
sS'group_name'
p69497
Nsa(dp69498
S'description'
p69499
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69500
sS'cpp_type'
p69501
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69502
sS'default'
p69503
g3
sS'name'
p69504
S'block'
p69505
sS'required'
p69506
I00
sS'group_name'
p69507
Nsa(dp69508
S'description'
p69509
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69510
sS'cpp_type'
p69511
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69512
sS'default'
p69513
g3
sS'name'
p69514
S'boundary'
p69515
sS'required'
p69516
I00
sS'group_name'
p69517
Nsa(dp69518
S'description'
p69519
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69520
sS'cpp_type'
p69521
S'bool'
p69522
sS'default'
p69523
S'1'
p69524
sS'name'
p69525
S'compute'
p69526
sS'required'
p69527
I00
sS'group_name'
p69528
Nsa(dp69529
S'description'
p69530
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69531
sS'cpp_type'
p69532
S'bool'
p69533
sS'default'
p69534
S'0'
p69535
sS'name'
p69536
S'constant_on_elem'
p69537
sS'required'
p69538
I00
sS'group_name'
p69539
S'Advanced'
p69540
sa(dp69541
S'description'
p69542
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69543
sS'cpp_type'
p69544
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69545
sS'default'
p69546
g3
sS'name'
p69547
S'control_tags'
p69548
sS'required'
p69549
I00
sS'group_name'
p69550
S'Advanced'
p69551
sa(dp69552
S'description'
p69553
S'Number of OP representing deformed grains\n'
p69554
sS'cpp_type'
p69555
S'unsigned int'
p69556
sS'default'
p69557
g3
sS'name'
p69558
S'deformed_grain_num'
p69559
sS'required'
p69560
I01
sS'group_name'
p69561
Nsa(dp69562
S'description'
p69563
S'Set the enabled status of the MooseObject.\n'
p69564
sS'cpp_type'
p69565
S'bool'
p69566
sS'default'
p69567
S'1'
p69568
sS'name'
p69569
S'enable'
p69570
sS'required'
p69571
I00
sS'group_name'
p69572
S'Advanced'
p69573
sa(dp69574
S'description'
p69575
S'The GrainTracker UserObject to get values from.\n'
p69576
sS'cpp_type'
p69577
S'UserObjectName'
p69578
sS'default'
p69579
g3
sS'name'
p69580
S'grain_tracker'
p69581
sS'required'
p69582
I01
sS'group_name'
p69583
Nsa(dp69584
S'description'
p69585
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69586
sS'cpp_type'
p69587
S'bool'
p69588
sS'default'
p69589
S'1'
p69590
sS'name'
p69591
S'implicit'
p69592
sS'required'
p69593
I00
sS'group_name'
p69594
S'Advanced'
p69595
sa(dp69596
S'description'
p69597
S'Diffuse Interface width in length_scale unit\n'
p69598
sS'cpp_type'
p69599
S'double'
p69600
sS'default'
p69601
S'4'
p69602
sS'name'
p69603
S'int_width'
p69604
sS'required'
p69605
I00
sS'group_name'
p69606
Nsa(dp69607
S'description'
p69608
S'Length scale in m, where default is nm\n'
p69609
sS'cpp_type'
p69610
S'double'
p69611
sS'default'
p69612
S'1e-09'
p69613
sS'name'
p69614
S'length_scale'
p69615
sS'required'
p69616
I00
sS'group_name'
p69617
Nsa(dp69618
S'description'
p69619
S'Array of coupled variables (num_name)\n'
p69620
sS'cpp_type'
p69621
S'unsigned int'
p69622
sS'default'
p69623
g3
sS'name'
p69624
S'op_num'
p69625
sS'required'
p69626
I00
sS'group_name'
p69627
Nsa(dp69628
S'description'
p69629
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69630
sS'cpp_type'
p69631
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69632
sS'default'
p69633
g3
sS'name'
p69634
S'output_properties'
p69635
sS'required'
p69636
I00
sS'group_name'
p69637
S'Outputs'
p69638
sa(dp69639
S'description'
p69640
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69641
sS'cpp_type'
p69642
S'std::vector<OutputName, std::allocator<OutputName> >'
p69643
sS'default'
p69644
S'none'
p69645
sS'name'
p69646
S'outputs'
p69647
sS'required'
p69648
I00
sS'group_name'
p69649
S'Outputs'
p69650
sa(dp69651
S'description'
p69652
S'The seed for the master random number generator\n'
p69653
sS'cpp_type'
p69654
S'unsigned int'
p69655
sS'default'
p69656
S'0'
p69657
sS'name'
p69658
S'seed'
p69659
sS'required'
p69660
I00
sS'group_name'
p69661
S'Advanced'
p69662
sa(dp69663
S'description'
p69664
S'Time scale in sec, where default is micro sec\n'
p69665
sS'cpp_type'
p69666
S'double'
p69667
sS'default'
p69668
S'1e-06'
p69669
sS'name'
p69670
S'time_scale'
p69671
sS'required'
p69672
I00
sS'group_name'
p69673
Nsa(dp69674
S'description'
p69675
g3
sS'cpp_type'
p69676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69677
sS'default'
p69678
S'DeformedGrainMaterial'
p69679
sS'name'
p69680
S'type'
p69681
sS'required'
p69682
I00
sS'group_name'
p69683
Nsa(dp69684
S'description'
p69685
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69686
sS'cpp_type'
p69687
S'bool'
p69688
sS'default'
p69689
S'0'
p69690
sS'name'
p69691
S'use_displaced_mesh'
p69692
sS'required'
p69693
I00
sS'group_name'
p69694
S'Advanced'
p69695
sa(dp69696
S'description'
p69697
S'Array of coupled variables\n'
p69698
sS'cpp_type'
p69699
S'std::vector<VariableName>'
p69700
sS'default'
p69701
g3
sS'name'
p69702
S'v'
p69703
sS'required'
p69704
I01
sS'group_name'
p69705
Nsa(dp69706
S'description'
p69707
S'Array of coupled variables (base_name)\n'
p69708
sS'cpp_type'
p69709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69710
sS'default'
p69711
g3
sS'name'
p69712
S'var_name_base'
p69713
sS'required'
p69714
I00
sS'group_name'
p69715
NsasS'name'
p69716
S'/Materials/DeformedGrainMaterial'
p69717
sa(dp69718
S'description'
p69719
S'Two phase material that combines n phase materials using a switching function with and n nonconserved order parameters (to be used with SwitchingFunctionConstraint*).\n'
p69720
sS'subblocks'
p69721
NsS'parameters'
p69722
(lp69723
(dp69724
S'description'
p69725
S'Energy barrier for the phase transformation from A to B\n'
p69726
sS'cpp_type'
p69727
S'double'
p69728
sS'default'
p69729
S'0'
p69730
sS'name'
p69731
S'W'
p69732
sS'required'
p69733
I00
sS'group_name'
p69734
Nsa(dp69735
S'description'
p69736
S'Arguments of the fi free energies - use vector coupling\n'
p69737
sS'cpp_type'
p69738
S'std::vector<VariableName>'
p69739
sS'default'
p69740
g3
sS'name'
p69741
S'args'
p69742
sS'required'
p69743
I00
sS'group_name'
p69744
Nsa(dp69745
S'description'
p69746
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69747
sS'cpp_type'
p69748
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69749
sS'default'
p69750
g3
sS'name'
p69751
S'block'
p69752
sS'required'
p69753
I00
sS'group_name'
p69754
Nsa(dp69755
S'description'
p69756
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69757
sS'cpp_type'
p69758
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69759
sS'default'
p69760
g3
sS'name'
p69761
S'boundary'
p69762
sS'required'
p69763
I00
sS'group_name'
p69764
Nsa(dp69765
S'description'
p69766
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69767
sS'cpp_type'
p69768
S'bool'
p69769
sS'default'
p69770
S'1'
p69771
sS'name'
p69772
S'compute'
p69773
sS'required'
p69774
I00
sS'group_name'
p69775
Nsa(dp69776
S'description'
p69777
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69778
sS'cpp_type'
p69779
S'bool'
p69780
sS'default'
p69781
S'0'
p69782
sS'name'
p69783
S'constant_on_elem'
p69784
sS'required'
p69785
I00
sS'group_name'
p69786
S'Advanced'
p69787
sa(dp69788
S'description'
p69789
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69790
sS'cpp_type'
p69791
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69792
sS'default'
p69793
g3
sS'name'
p69794
S'control_tags'
p69795
sS'required'
p69796
I00
sS'group_name'
p69797
S'Advanced'
p69798
sa(dp69799
S'description'
p69800
S'Maximum order of derivatives taken (2 or 3)\n'
p69801
sS'cpp_type'
p69802
S'unsigned int'
p69803
sS'default'
p69804
S'3'
p69805
sS'name'
p69806
S'derivative_order'
p69807
sS'required'
p69808
I00
sS'group_name'
p69809
Nsa(dp69810
S'description'
p69811
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p69812
sS'cpp_type'
p69813
S'std::vector<VariableName>'
p69814
sS'default'
p69815
g3
sS'name'
p69816
S'displacement_gradients'
p69817
sS'required'
p69818
I00
sS'group_name'
p69819
Nsa(dp69820
S'description'
p69821
S'Set the enabled status of the MooseObject.\n'
p69822
sS'cpp_type'
p69823
S'bool'
p69824
sS'default'
p69825
S'1'
p69826
sS'name'
p69827
S'enable'
p69828
sS'required'
p69829
I00
sS'group_name'
p69830
S'Advanced'
p69831
sa(dp69832
S'description'
p69833
S'Order parameters for all phases.\n'
p69834
sS'cpp_type'
p69835
S'std::vector<VariableName>'
p69836
sS'default'
p69837
g3
sS'name'
p69838
S'etas'
p69839
sS'required'
p69840
I00
sS'group_name'
p69841
Nsa(dp69842
S'description'
p69843
S'Base name of the free energy function (used to name the material properties)\n'
p69844
sS'cpp_type'
p69845
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69846
sS'default'
p69847
S'F'
p69848
sS'name'
p69849
S'f_name'
p69850
sS'required'
p69851
I00
sS'group_name'
p69852
Nsa(dp69853
S'description'
p69854
S'List of free energies for the n phases\n'
p69855
sS'cpp_type'
p69856
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p69857
sS'default'
p69858
g3
sS'name'
p69859
S'fi_names'
p69860
sS'required'
p69861
I01
sS'group_name'
p69862
Nsa(dp69863
S'description'
p69864
S'Barrier Function Material that provides g(eta_i)\n'
p69865
sS'cpp_type'
p69866
S'MaterialPropertyName'
p69867
sS'default'
p69868
S'g'
p69869
sS'name'
p69870
S'g'
p69871
sS'required'
p69872
I00
sS'group_name'
p69873
Nsa(dp69874
S'description'
p69875
S'Switching Function Materials that provide h(eta_i)\n'
p69876
sS'cpp_type'
p69877
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p69878
sS'default'
p69879
g3
sS'name'
p69880
S'hi_names'
p69881
sS'required'
p69882
I00
sS'group_name'
p69883
Nsa(dp69884
S'description'
p69885
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69886
sS'cpp_type'
p69887
S'bool'
p69888
sS'default'
p69889
S'1'
p69890
sS'name'
p69891
S'implicit'
p69892
sS'required'
p69893
I00
sS'group_name'
p69894
S'Advanced'
p69895
sa(dp69896
S'description'
p69897
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69898
sS'cpp_type'
p69899
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69900
sS'default'
p69901
g3
sS'name'
p69902
S'output_properties'
p69903
sS'required'
p69904
I00
sS'group_name'
p69905
S'Outputs'
p69906
sa(dp69907
S'description'
p69908
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69909
sS'cpp_type'
p69910
S'std::vector<OutputName, std::allocator<OutputName> >'
p69911
sS'default'
p69912
S'none'
p69913
sS'name'
p69914
S'outputs'
p69915
sS'required'
p69916
I00
sS'group_name'
p69917
S'Outputs'
p69918
sa(dp69919
S'description'
p69920
S'The seed for the master random number generator\n'
p69921
sS'cpp_type'
p69922
S'unsigned int'
p69923
sS'default'
p69924
S'0'
p69925
sS'name'
p69926
S'seed'
p69927
sS'required'
p69928
I00
sS'group_name'
p69929
S'Advanced'
p69930
sa(dp69931
S'description'
p69932
S'Flag to indicate if third derivatives are needed\n'
p69933
sS'cpp_type'
p69934
S'bool'
p69935
sS'default'
p69936
g3
sS'name'
p69937
S'third_derivatives'
p69938
sS'required'
p69939
I00
sS'group_name'
p69940
Nsa(dp69941
S'description'
p69942
g3
sS'cpp_type'
p69943
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69944
sS'default'
p69945
S'DerivativeMultiPhaseMaterial'
p69946
sS'name'
p69947
S'type'
p69948
sS'required'
p69949
I00
sS'group_name'
p69950
Nsa(dp69951
S'description'
p69952
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69953
sS'cpp_type'
p69954
S'bool'
p69955
sS'default'
p69956
S'0'
p69957
sS'name'
p69958
S'use_displaced_mesh'
p69959
sS'required'
p69960
I00
sS'group_name'
p69961
S'Advanced'
p69962
sasS'name'
p69963
S'/Materials/DerivativeMultiPhaseMaterial'
p69964
sa(dp69965
S'description'
p69966
S'Parsed Function Material with automatic derivatives.\n'
p69967
sS'subblocks'
p69968
NsS'parameters'
p69969
(lp69970
(dp69971
S'description'
p69972
S'Arguments of F() - use vector coupling\n'
p69973
sS'cpp_type'
p69974
S'std::vector<VariableName>'
p69975
sS'default'
p69976
g3
sS'name'
p69977
S'args'
p69978
sS'required'
p69979
I00
sS'group_name'
p69980
Nsa(dp69981
S'description'
p69982
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69983
sS'cpp_type'
p69984
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69985
sS'default'
p69986
g3
sS'name'
p69987
S'block'
p69988
sS'required'
p69989
I00
sS'group_name'
p69990
Nsa(dp69991
S'description'
p69992
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69993
sS'cpp_type'
p69994
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69995
sS'default'
p69996
g3
sS'name'
p69997
S'boundary'
p69998
sS'required'
p69999
I00
sS'group_name'
p70000
Nsa(dp70001
S'description'
p70002
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70003
sS'cpp_type'
p70004
S'bool'
p70005
sS'default'
p70006
S'1'
p70007
sS'name'
p70008
S'compute'
p70009
sS'required'
p70010
I00
sS'group_name'
p70011
Nsa(dp70012
S'description'
p70013
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p70014
sS'cpp_type'
p70015
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70016
sS'default'
p70017
g3
sS'name'
p70018
S'constant_expressions'
p70019
sS'required'
p70020
I00
sS'group_name'
p70021
Nsa(dp70022
S'description'
p70023
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p70024
sS'cpp_type'
p70025
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70026
sS'default'
p70027
g3
sS'name'
p70028
S'constant_names'
p70029
sS'required'
p70030
I00
sS'group_name'
p70031
Nsa(dp70032
S'description'
p70033
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70034
sS'cpp_type'
p70035
S'bool'
p70036
sS'default'
p70037
S'0'
p70038
sS'name'
p70039
S'constant_on_elem'
p70040
sS'required'
p70041
I00
sS'group_name'
p70042
S'Advanced'
p70043
sa(dp70044
S'description'
p70045
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70046
sS'cpp_type'
p70047
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70048
sS'default'
p70049
g3
sS'name'
p70050
S'control_tags'
p70051
sS'required'
p70052
I00
sS'group_name'
p70053
S'Advanced'
p70054
sa(dp70055
S'description'
p70056
S'Maximum order of derivatives taken\n'
p70057
sS'cpp_type'
p70058
S'unsigned int'
p70059
sS'default'
p70060
S'3'
p70061
sS'name'
p70062
S'derivative_order'
p70063
sS'required'
p70064
I00
sS'group_name'
p70065
Nsa(dp70066
S'description'
p70067
S'Disable the function parser algebraic optimizer\n'
p70068
sS'cpp_type'
p70069
S'bool'
p70070
sS'default'
p70071
S'0'
p70072
sS'name'
p70073
S'disable_fpoptimizer'
p70074
sS'required'
p70075
I00
sS'group_name'
p70076
S'Advanced'
p70077
sa(dp70078
S'description'
p70079
S'Set the enabled status of the MooseObject.\n'
p70080
sS'cpp_type'
p70081
S'bool'
p70082
sS'default'
p70083
S'1'
p70084
sS'name'
p70085
S'enable'
p70086
sS'required'
p70087
I00
sS'group_name'
p70088
S'Advanced'
p70089
sa(dp70090
S'description'
p70091
S'Enable cacheing of function derivatives for faster startup time\n'
p70092
sS'cpp_type'
p70093
S'bool'
p70094
sS'default'
p70095
S'1'
p70096
sS'name'
p70097
S'enable_ad_cache'
p70098
sS'required'
p70099
I00
sS'group_name'
p70100
S'Advanced'
p70101
sa(dp70102
S'description'
p70103
S'Enable automatic immediate optimization of derivatives\n'
p70104
sS'cpp_type'
p70105
S'bool'
p70106
sS'default'
p70107
S'1'
p70108
sS'name'
p70109
S'enable_auto_optimize'
p70110
sS'required'
p70111
I00
sS'group_name'
p70112
S'Advanced'
p70113
sa(dp70114
S'description'
p70115
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p70116
sS'cpp_type'
p70117
S'bool'
p70118
sS'default'
p70119
S'1'
p70120
sS'name'
p70121
S'enable_jit'
p70122
sS'required'
p70123
I00
sS'group_name'
p70124
S'Advanced'
p70125
sa(dp70126
S'description'
p70127
S'Base name of the free energy function (used to name the material properties)\n'
p70128
sS'cpp_type'
p70129
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70130
sS'default'
p70131
S'F'
p70132
sS'name'
p70133
S'f_name'
p70134
sS'required'
p70135
I00
sS'group_name'
p70136
Nsa(dp70137
S'description'
p70138
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p70139
sS'cpp_type'
p70140
S'bool'
p70141
sS'default'
p70142
S'0'
p70143
sS'name'
p70144
S'fail_on_evalerror'
p70145
sS'required'
p70146
I00
sS'group_name'
p70147
S'Advanced'
p70148
sa(dp70149
S'description'
p70150
S'FParser function expression for the phase free energy\n'
p70151
sS'cpp_type'
p70152
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70153
sS'default'
p70154
g3
sS'name'
p70155
S'function'
p70156
sS'required'
p70157
I01
sS'group_name'
p70158
Nsa(dp70159
S'description'
p70160
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70161
sS'cpp_type'
p70162
S'bool'
p70163
sS'default'
p70164
S'1'
p70165
sS'name'
p70166
S'implicit'
p70167
sS'required'
p70168
I00
sS'group_name'
p70169
S'Advanced'
p70170
sa(dp70171
S'description'
p70172
S'Vector of material properties used in the parsed function\n'
p70173
sS'cpp_type'
p70174
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70175
sS'default'
p70176
g3
sS'name'
p70177
S'material_property_names'
p70178
sS'required'
p70179
I00
sS'group_name'
p70180
Nsa(dp70181
S'description'
p70182
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70183
sS'cpp_type'
p70184
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70185
sS'default'
p70186
g3
sS'name'
p70187
S'output_properties'
p70188
sS'required'
p70189
I00
sS'group_name'
p70190
S'Outputs'
p70191
sa(dp70192
S'description'
p70193
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70194
sS'cpp_type'
p70195
S'std::vector<OutputName, std::allocator<OutputName> >'
p70196
sS'default'
p70197
S'none'
p70198
sS'name'
p70199
S'outputs'
p70200
sS'required'
p70201
I00
sS'group_name'
p70202
S'Outputs'
p70203
sa(dp70204
S'description'
p70205
S'The seed for the master random number generator\n'
p70206
sS'cpp_type'
p70207
S'unsigned int'
p70208
sS'default'
p70209
S'0'
p70210
sS'name'
p70211
S'seed'
p70212
sS'required'
p70213
I00
sS'group_name'
p70214
S'Advanced'
p70215
sa(dp70216
S'description'
p70217
S'Flag to indicate if third derivatives are needed\n'
p70218
sS'cpp_type'
p70219
S'bool'
p70220
sS'default'
p70221
g3
sS'name'
p70222
S'third_derivatives'
p70223
sS'required'
p70224
I00
sS'group_name'
p70225
Nsa(dp70226
S'description'
p70227
S'Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n'
p70228
sS'cpp_type'
p70229
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70230
sS'default'
p70231
g3
sS'name'
p70232
S'tol_names'
p70233
sS'required'
p70234
I00
sS'group_name'
p70235
Nsa(dp70236
S'description'
p70237
S'Vector of tolerance values for the variables in tol_names\n'
p70238
sS'cpp_type'
p70239
S'std::vector<double, std::allocator<double> >'
p70240
sS'default'
p70241
g3
sS'name'
p70242
S'tol_values'
p70243
sS'required'
p70244
I00
sS'group_name'
p70245
Nsa(dp70246
S'description'
p70247
g3
sS'cpp_type'
p70248
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70249
sS'default'
p70250
S'DerivativeParsedMaterial'
p70251
sS'name'
p70252
S'type'
p70253
sS'required'
p70254
I00
sS'group_name'
p70255
Nsa(dp70256
S'description'
p70257
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70258
sS'cpp_type'
p70259
S'bool'
p70260
sS'default'
p70261
S'0'
p70262
sS'name'
p70263
S'use_displaced_mesh'
p70264
sS'required'
p70265
I00
sS'group_name'
p70266
S'Advanced'
p70267
sasS'name'
p70268
S'/Materials/DerivativeParsedMaterial'
p70269
sa(dp70270
S'description'
p70271
S'Meta-material to sum up multiple derivative materials\n'
p70272
sS'subblocks'
p70273
NsS'parameters'
p70274
(lp70275
(dp70276
S'description'
p70277
S'Arguments of the free energy functions being summed - use vector coupling\n'
p70278
sS'cpp_type'
p70279
S'std::vector<VariableName>'
p70280
sS'default'
p70281
g3
sS'name'
p70282
S'args'
p70283
sS'required'
p70284
I01
sS'group_name'
p70285
Nsa(dp70286
S'description'
p70287
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70288
sS'cpp_type'
p70289
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70290
sS'default'
p70291
g3
sS'name'
p70292
S'block'
p70293
sS'required'
p70294
I00
sS'group_name'
p70295
Nsa(dp70296
S'description'
p70297
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70298
sS'cpp_type'
p70299
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70300
sS'default'
p70301
g3
sS'name'
p70302
S'boundary'
p70303
sS'required'
p70304
I00
sS'group_name'
p70305
Nsa(dp70306
S'description'
p70307
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70308
sS'cpp_type'
p70309
S'bool'
p70310
sS'default'
p70311
S'1'
p70312
sS'name'
p70313
S'compute'
p70314
sS'required'
p70315
I00
sS'group_name'
p70316
Nsa(dp70317
S'description'
p70318
S'Constant to be added to the prefactor multiplied sum.\n'
p70319
sS'cpp_type'
p70320
S'double'
p70321
sS'default'
p70322
S'0'
p70323
sS'name'
p70324
S'constant'
p70325
sS'required'
p70326
I00
sS'group_name'
p70327
S'Advanced'
p70328
sa(dp70329
S'description'
p70330
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70331
sS'cpp_type'
p70332
S'bool'
p70333
sS'default'
p70334
S'0'
p70335
sS'name'
p70336
S'constant_on_elem'
p70337
sS'required'
p70338
I00
sS'group_name'
p70339
S'Advanced'
p70340
sa(dp70341
S'description'
p70342
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70343
sS'cpp_type'
p70344
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70345
sS'default'
p70346
g3
sS'name'
p70347
S'control_tags'
p70348
sS'required'
p70349
I00
sS'group_name'
p70350
S'Advanced'
p70351
sa(dp70352
S'description'
p70353
S'Maximum order of derivatives taken (2 or 3)\n'
p70354
sS'cpp_type'
p70355
S'unsigned int'
p70356
sS'default'
p70357
S'3'
p70358
sS'name'
p70359
S'derivative_order'
p70360
sS'required'
p70361
I00
sS'group_name'
p70362
Nsa(dp70363
S'description'
p70364
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p70365
sS'cpp_type'
p70366
S'std::vector<VariableName>'
p70367
sS'default'
p70368
g3
sS'name'
p70369
S'displacement_gradients'
p70370
sS'required'
p70371
I00
sS'group_name'
p70372
Nsa(dp70373
S'description'
p70374
S'Set the enabled status of the MooseObject.\n'
p70375
sS'cpp_type'
p70376
S'bool'
p70377
sS'default'
p70378
S'1'
p70379
sS'name'
p70380
S'enable'
p70381
sS'required'
p70382
I00
sS'group_name'
p70383
S'Advanced'
p70384
sa(dp70385
S'description'
p70386
S'Base name of the free energy function (used to name the material properties)\n'
p70387
sS'cpp_type'
p70388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70389
sS'default'
p70390
S'F'
p70391
sS'name'
p70392
S'f_name'
p70393
sS'required'
p70394
I00
sS'group_name'
p70395
Nsa(dp70396
S'description'
p70397
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70398
sS'cpp_type'
p70399
S'bool'
p70400
sS'default'
p70401
S'1'
p70402
sS'name'
p70403
S'implicit'
p70404
sS'required'
p70405
I00
sS'group_name'
p70406
S'Advanced'
p70407
sa(dp70408
S'description'
p70409
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70410
sS'cpp_type'
p70411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70412
sS'default'
p70413
g3
sS'name'
p70414
S'output_properties'
p70415
sS'required'
p70416
I00
sS'group_name'
p70417
S'Outputs'
p70418
sa(dp70419
S'description'
p70420
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70421
sS'cpp_type'
p70422
S'std::vector<OutputName, std::allocator<OutputName> >'
p70423
sS'default'
p70424
S'none'
p70425
sS'name'
p70426
S'outputs'
p70427
sS'required'
p70428
I00
sS'group_name'
p70429
S'Outputs'
p70430
sa(dp70431
S'description'
p70432
S'Prefactor to multiply the sum term with.\n'
p70433
sS'cpp_type'
p70434
S'std::vector<double, std::allocator<double> >'
p70435
sS'default'
p70436
g3
sS'name'
p70437
S'prefactor'
p70438
sS'required'
p70439
I00
sS'group_name'
p70440
S'Advanced'
p70441
sa(dp70442
S'description'
p70443
S'The seed for the master random number generator\n'
p70444
sS'cpp_type'
p70445
S'unsigned int'
p70446
sS'default'
p70447
S'0'
p70448
sS'name'
p70449
S'seed'
p70450
sS'required'
p70451
I00
sS'group_name'
p70452
S'Advanced'
p70453
sa(dp70454
S'description'
p70455
S'Base name of the free energy function (used to name the material properties)\n'
p70456
sS'cpp_type'
p70457
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70458
sS'default'
p70459
g3
sS'name'
p70460
S'sum_materials'
p70461
sS'required'
p70462
I00
sS'group_name'
p70463
Nsa(dp70464
S'description'
p70465
S'Flag to indicate if third derivatives are needed\n'
p70466
sS'cpp_type'
p70467
S'bool'
p70468
sS'default'
p70469
g3
sS'name'
p70470
S'third_derivatives'
p70471
sS'required'
p70472
I00
sS'group_name'
p70473
Nsa(dp70474
S'description'
p70475
g3
sS'cpp_type'
p70476
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70477
sS'default'
p70478
S'DerivativeSumMaterial'
p70479
sS'name'
p70480
S'type'
p70481
sS'required'
p70482
I00
sS'group_name'
p70483
Nsa(dp70484
S'description'
p70485
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70486
sS'cpp_type'
p70487
S'bool'
p70488
sS'default'
p70489
S'0'
p70490
sS'name'
p70491
S'use_displaced_mesh'
p70492
sS'required'
p70493
I00
sS'group_name'
p70494
S'Advanced'
p70495
sasS'name'
p70496
S'/Materials/DerivativeSumMaterial'
p70497
sa(dp70498
S'description'
p70499
S'Two phase material that combines two single phase materials using a switching function.\n'
p70500
sS'subblocks'
p70501
NsS'parameters'
p70502
(lp70503
(dp70504
S'description'
p70505
S'Energy barrier for the phase transformation from A to B\n'
p70506
sS'cpp_type'
p70507
S'double'
p70508
sS'default'
p70509
S'0'
p70510
sS'name'
p70511
S'W'
p70512
sS'required'
p70513
I00
sS'group_name'
p70514
Nsa(dp70515
S'description'
p70516
S'Arguments of fa and fb - use vector coupling\n'
p70517
sS'cpp_type'
p70518
S'std::vector<VariableName>'
p70519
sS'default'
p70520
g3
sS'name'
p70521
S'args'
p70522
sS'required'
p70523
I00
sS'group_name'
p70524
Nsa(dp70525
S'description'
p70526
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70527
sS'cpp_type'
p70528
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70529
sS'default'
p70530
g3
sS'name'
p70531
S'block'
p70532
sS'required'
p70533
I00
sS'group_name'
p70534
Nsa(dp70535
S'description'
p70536
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70537
sS'cpp_type'
p70538
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70539
sS'default'
p70540
g3
sS'name'
p70541
S'boundary'
p70542
sS'required'
p70543
I00
sS'group_name'
p70544
Nsa(dp70545
S'description'
p70546
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70547
sS'cpp_type'
p70548
S'bool'
p70549
sS'default'
p70550
S'1'
p70551
sS'name'
p70552
S'compute'
p70553
sS'required'
p70554
I00
sS'group_name'
p70555
Nsa(dp70556
S'description'
p70557
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70558
sS'cpp_type'
p70559
S'bool'
p70560
sS'default'
p70561
S'0'
p70562
sS'name'
p70563
S'constant_on_elem'
p70564
sS'required'
p70565
I00
sS'group_name'
p70566
S'Advanced'
p70567
sa(dp70568
S'description'
p70569
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70570
sS'cpp_type'
p70571
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70572
sS'default'
p70573
g3
sS'name'
p70574
S'control_tags'
p70575
sS'required'
p70576
I00
sS'group_name'
p70577
S'Advanced'
p70578
sa(dp70579
S'description'
p70580
S'Maximum order of derivatives taken (2 or 3)\n'
p70581
sS'cpp_type'
p70582
S'unsigned int'
p70583
sS'default'
p70584
S'3'
p70585
sS'name'
p70586
S'derivative_order'
p70587
sS'required'
p70588
I00
sS'group_name'
p70589
Nsa(dp70590
S'description'
p70591
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p70592
sS'cpp_type'
p70593
S'std::vector<VariableName>'
p70594
sS'default'
p70595
g3
sS'name'
p70596
S'displacement_gradients'
p70597
sS'required'
p70598
I00
sS'group_name'
p70599
Nsa(dp70600
S'description'
p70601
S'Set the enabled status of the MooseObject.\n'
p70602
sS'cpp_type'
p70603
S'bool'
p70604
sS'default'
p70605
S'1'
p70606
sS'name'
p70607
S'enable'
p70608
sS'required'
p70609
I00
sS'group_name'
p70610
S'Advanced'
p70611
sa(dp70612
S'description'
p70613
S'Order parameter\n'
p70614
sS'cpp_type'
p70615
S'std::vector<VariableName>'
p70616
sS'default'
p70617
g3
sS'name'
p70618
S'eta'
p70619
sS'required'
p70620
I01
sS'group_name'
p70621
Nsa(dp70622
S'description'
p70623
S'Base name of the free energy function (used to name the material properties)\n'
p70624
sS'cpp_type'
p70625
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70626
sS'default'
p70627
S'F'
p70628
sS'name'
p70629
S'f_name'
p70630
sS'required'
p70631
I00
sS'group_name'
p70632
Nsa(dp70633
S'description'
p70634
S'Phase A material (at eta=0)\n'
p70635
sS'cpp_type'
p70636
S'MaterialPropertyName'
p70637
sS'default'
p70638
g3
sS'name'
p70639
S'fa_name'
p70640
sS'required'
p70641
I01
sS'group_name'
p70642
Nsa(dp70643
S'description'
p70644
S'Phase A material (at eta=1)\n'
p70645
sS'cpp_type'
p70646
S'MaterialPropertyName'
p70647
sS'default'
p70648
g3
sS'name'
p70649
S'fb_name'
p70650
sS'required'
p70651
I01
sS'group_name'
p70652
Nsa(dp70653
S'description'
p70654
S'Barrier Function Material that provides g(eta)\n'
p70655
sS'cpp_type'
p70656
S'MaterialPropertyName'
p70657
sS'default'
p70658
S'g'
p70659
sS'name'
p70660
S'g'
p70661
sS'required'
p70662
I00
sS'group_name'
p70663
Nsa(dp70664
S'description'
p70665
S'Switching Function Material that provides h(eta)\n'
p70666
sS'cpp_type'
p70667
S'MaterialPropertyName'
p70668
sS'default'
p70669
S'h'
p70670
sS'name'
p70671
S'h'
p70672
sS'required'
p70673
I00
sS'group_name'
p70674
Nsa(dp70675
S'description'
p70676
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70677
sS'cpp_type'
p70678
S'bool'
p70679
sS'default'
p70680
S'1'
p70681
sS'name'
p70682
S'implicit'
p70683
sS'required'
p70684
I00
sS'group_name'
p70685
S'Advanced'
p70686
sa(dp70687
S'description'
p70688
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70689
sS'cpp_type'
p70690
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70691
sS'default'
p70692
g3
sS'name'
p70693
S'output_properties'
p70694
sS'required'
p70695
I00
sS'group_name'
p70696
S'Outputs'
p70697
sa(dp70698
S'description'
p70699
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70700
sS'cpp_type'
p70701
S'std::vector<OutputName, std::allocator<OutputName> >'
p70702
sS'default'
p70703
S'none'
p70704
sS'name'
p70705
S'outputs'
p70706
sS'required'
p70707
I00
sS'group_name'
p70708
S'Outputs'
p70709
sa(dp70710
S'description'
p70711
S'The seed for the master random number generator\n'
p70712
sS'cpp_type'
p70713
S'unsigned int'
p70714
sS'default'
p70715
S'0'
p70716
sS'name'
p70717
S'seed'
p70718
sS'required'
p70719
I00
sS'group_name'
p70720
S'Advanced'
p70721
sa(dp70722
S'description'
p70723
S'Flag to indicate if third derivatives are needed\n'
p70724
sS'cpp_type'
p70725
S'bool'
p70726
sS'default'
p70727
g3
sS'name'
p70728
S'third_derivatives'
p70729
sS'required'
p70730
I00
sS'group_name'
p70731
Nsa(dp70732
S'description'
p70733
g3
sS'cpp_type'
p70734
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70735
sS'default'
p70736
S'DerivativeTwoPhaseMaterial'
p70737
sS'name'
p70738
S'type'
p70739
sS'required'
p70740
I00
sS'group_name'
p70741
Nsa(dp70742
S'description'
p70743
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70744
sS'cpp_type'
p70745
S'bool'
p70746
sS'default'
p70747
S'0'
p70748
sS'name'
p70749
S'use_displaced_mesh'
p70750
sS'required'
p70751
I00
sS'group_name'
p70752
S'Advanced'
p70753
sasS'name'
p70754
S'/Materials/DerivativeTwoPhaseMaterial'
p70755
sa(dp70756
S'description'
p70757
S'Free energy contribution for nucleating discrete particles\n'
p70758
sS'subblocks'
p70759
NsS'parameters'
p70760
(lp70761
(dp70762
S'description'
p70763
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70764
sS'cpp_type'
p70765
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70766
sS'default'
p70767
g3
sS'name'
p70768
S'block'
p70769
sS'required'
p70770
I00
sS'group_name'
p70771
Nsa(dp70772
S'description'
p70773
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70774
sS'cpp_type'
p70775
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70776
sS'default'
p70777
g3
sS'name'
p70778
S'boundary'
p70779
sS'required'
p70780
I00
sS'group_name'
p70781
Nsa(dp70782
S'description'
p70783
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70784
sS'cpp_type'
p70785
S'bool'
p70786
sS'default'
p70787
S'1'
p70788
sS'name'
p70789
S'compute'
p70790
sS'required'
p70791
I00
sS'group_name'
p70792
Nsa(dp70793
S'description'
p70794
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70795
sS'cpp_type'
p70796
S'bool'
p70797
sS'default'
p70798
S'0'
p70799
sS'name'
p70800
S'constant_on_elem'
p70801
sS'required'
p70802
I00
sS'group_name'
p70803
S'Advanced'
p70804
sa(dp70805
S'description'
p70806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70807
sS'cpp_type'
p70808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70809
sS'default'
p70810
g3
sS'name'
p70811
S'control_tags'
p70812
sS'required'
p70813
I00
sS'group_name'
p70814
S'Advanced'
p70815
sa(dp70816
S'description'
p70817
S'Maximum order of derivatives taken (2 or 3)\n'
p70818
sS'cpp_type'
p70819
S'unsigned int'
p70820
sS'default'
p70821
S'3'
p70822
sS'name'
p70823
S'derivative_order'
p70824
sS'required'
p70825
I00
sS'group_name'
p70826
Nsa(dp70827
S'description'
p70828
S'Set the enabled status of the MooseObject.\n'
p70829
sS'cpp_type'
p70830
S'bool'
p70831
sS'default'
p70832
S'1'
p70833
sS'name'
p70834
S'enable'
p70835
sS'required'
p70836
I00
sS'group_name'
p70837
S'Advanced'
p70838
sa(dp70839
S'description'
p70840
S'Base name of the free energy function (used to name the material properties)\n'
p70841
sS'cpp_type'
p70842
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70843
sS'default'
p70844
S'F'
p70845
sS'name'
p70846
S'f_name'
p70847
sS'required'
p70848
I00
sS'group_name'
p70849
Nsa(dp70850
S'description'
p70851
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70852
sS'cpp_type'
p70853
S'bool'
p70854
sS'default'
p70855
S'1'
p70856
sS'name'
p70857
S'implicit'
p70858
sS'required'
p70859
I00
sS'group_name'
p70860
S'Advanced'
p70861
sa(dp70862
S'description'
p70863
S'DiscreteNucleationMap user object\n'
p70864
sS'cpp_type'
p70865
S'UserObjectName'
p70866
sS'default'
p70867
g3
sS'name'
p70868
S'map'
p70869
sS'required'
p70870
I01
sS'group_name'
p70871
Nsa(dp70872
S'description'
p70873
S'List of variables to force to a target concentration value\n'
p70874
sS'cpp_type'
p70875
S'std::vector<VariableName>'
p70876
sS'default'
p70877
g3
sS'name'
p70878
S'op_names'
p70879
sS'required'
p70880
I01
sS'group_name'
p70881
Nsa(dp70882
S'description'
p70883
S'List of target concentration values\n'
p70884
sS'cpp_type'
p70885
S'std::vector<double, std::allocator<double> >'
p70886
sS'default'
p70887
g3
sS'name'
p70888
S'op_values'
p70889
sS'required'
p70890
I01
sS'group_name'
p70891
Nsa(dp70892
S'description'
p70893
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70894
sS'cpp_type'
p70895
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70896
sS'default'
p70897
g3
sS'name'
p70898
S'output_properties'
p70899
sS'required'
p70900
I00
sS'group_name'
p70901
S'Outputs'
p70902
sa(dp70903
S'description'
p70904
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70905
sS'cpp_type'
p70906
S'std::vector<OutputName, std::allocator<OutputName> >'
p70907
sS'default'
p70908
S'none'
p70909
sS'name'
p70910
S'outputs'
p70911
sS'required'
p70912
I00
sS'group_name'
p70913
S'Outputs'
p70914
sa(dp70915
S'description'
p70916
S'Penalty factor for enforcing the target concentrations\n'
p70917
sS'cpp_type'
p70918
S'double'
p70919
sS'default'
p70920
S'20'
p70921
sS'name'
p70922
S'penalty'
p70923
sS'required'
p70924
I00
sS'group_name'
p70925
Nsa(dp70926
S'name'
p70927
S'penalty_mode'
p70928
sS'cpp_type'
p70929
S'MooseEnum'
p70930
sS'default'
p70931
S'MATCH'
p70932
sS'description'
p70933
S'Match the target concentration or take it as a minimum or maximum concentration target\n'
p70934
sS'required'
p70935
I00
sS'options'
p70936
S'MATCH MIN MAX'
p70937
sS'group_name'
p70938
Nsa(dp70939
S'description'
p70940
S'The seed for the master random number generator\n'
p70941
sS'cpp_type'
p70942
S'unsigned int'
p70943
sS'default'
p70944
S'0'
p70945
sS'name'
p70946
S'seed'
p70947
sS'required'
p70948
I00
sS'group_name'
p70949
S'Advanced'
p70950
sa(dp70951
S'description'
p70952
S'Flag to indicate if third derivatives are needed\n'
p70953
sS'cpp_type'
p70954
S'bool'
p70955
sS'default'
p70956
g3
sS'name'
p70957
S'third_derivatives'
p70958
sS'required'
p70959
I00
sS'group_name'
p70960
Nsa(dp70961
S'description'
p70962
g3
sS'cpp_type'
p70963
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70964
sS'default'
p70965
S'DiscreteNucleation'
p70966
sS'name'
p70967
S'type'
p70968
sS'required'
p70969
I00
sS'group_name'
p70970
Nsa(dp70971
S'description'
p70972
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70973
sS'cpp_type'
p70974
S'bool'
p70975
sS'default'
p70976
S'0'
p70977
sS'name'
p70978
S'use_displaced_mesh'
p70979
sS'required'
p70980
I00
sS'group_name'
p70981
S'Advanced'
p70982
sasS'name'
p70983
S'/Materials/DiscreteNucleation'
p70984
sa(dp70985
S'description'
p70986
S'Free energy material for the elastic energy contributions.\n'
p70987
sS'subblocks'
p70988
NsS'parameters'
p70989
(lp70990
(dp70991
S'description'
p70992
S'Arguments of F() - use vector coupling\n'
p70993
sS'cpp_type'
p70994
S'std::vector<VariableName>'
p70995
sS'default'
p70996
g3
sS'name'
p70997
S'args'
p70998
sS'required'
p70999
I01
sS'group_name'
p71000
Nsa(dp71001
S'description'
p71002
S'Material property base name\n'
p71003
sS'cpp_type'
p71004
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71005
sS'default'
p71006
g3
sS'name'
p71007
S'base_name'
p71008
sS'required'
p71009
I00
sS'group_name'
p71010
Nsa(dp71011
S'description'
p71012
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71013
sS'cpp_type'
p71014
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71015
sS'default'
p71016
g3
sS'name'
p71017
S'block'
p71018
sS'required'
p71019
I00
sS'group_name'
p71020
Nsa(dp71021
S'description'
p71022
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71023
sS'cpp_type'
p71024
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71025
sS'default'
p71026
g3
sS'name'
p71027
S'boundary'
p71028
sS'required'
p71029
I00
sS'group_name'
p71030
Nsa(dp71031
S'description'
p71032
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71033
sS'cpp_type'
p71034
S'bool'
p71035
sS'default'
p71036
S'1'
p71037
sS'name'
p71038
S'compute'
p71039
sS'required'
p71040
I00
sS'group_name'
p71041
Nsa(dp71042
S'description'
p71043
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71044
sS'cpp_type'
p71045
S'bool'
p71046
sS'default'
p71047
S'0'
p71048
sS'name'
p71049
S'constant_on_elem'
p71050
sS'required'
p71051
I00
sS'group_name'
p71052
S'Advanced'
p71053
sa(dp71054
S'description'
p71055
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71056
sS'cpp_type'
p71057
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71058
sS'default'
p71059
g3
sS'name'
p71060
S'control_tags'
p71061
sS'required'
p71062
I00
sS'group_name'
p71063
S'Advanced'
p71064
sa(dp71065
S'description'
p71066
S'Maximum order of derivatives taken (2 or 3)\n'
p71067
sS'cpp_type'
p71068
S'unsigned int'
p71069
sS'default'
p71070
S'3'
p71071
sS'name'
p71072
S'derivative_order'
p71073
sS'required'
p71074
I00
sS'group_name'
p71075
Nsa(dp71076
S'description'
p71077
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p71078
sS'cpp_type'
p71079
S'std::vector<VariableName>'
p71080
sS'default'
p71081
g3
sS'name'
p71082
S'displacement_gradients'
p71083
sS'required'
p71084
I00
sS'group_name'
p71085
Nsa(dp71086
S'description'
p71087
S'Set the enabled status of the MooseObject.\n'
p71088
sS'cpp_type'
p71089
S'bool'
p71090
sS'default'
p71091
S'1'
p71092
sS'name'
p71093
S'enable'
p71094
sS'required'
p71095
I00
sS'group_name'
p71096
S'Advanced'
p71097
sa(dp71098
S'description'
p71099
S'Base name of the free energy function (used to name the material properties)\n'
p71100
sS'cpp_type'
p71101
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71102
sS'default'
p71103
S'F'
p71104
sS'name'
p71105
S'f_name'
p71106
sS'required'
p71107
I00
sS'group_name'
p71108
Nsa(dp71109
S'description'
p71110
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71111
sS'cpp_type'
p71112
S'bool'
p71113
sS'default'
p71114
S'1'
p71115
sS'name'
p71116
S'implicit'
p71117
sS'required'
p71118
I00
sS'group_name'
p71119
S'Advanced'
p71120
sa(dp71121
S'description'
p71122
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71123
sS'cpp_type'
p71124
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71125
sS'default'
p71126
g3
sS'name'
p71127
S'output_properties'
p71128
sS'required'
p71129
I00
sS'group_name'
p71130
S'Outputs'
p71131
sa(dp71132
S'description'
p71133
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71134
sS'cpp_type'
p71135
S'std::vector<OutputName, std::allocator<OutputName> >'
p71136
sS'default'
p71137
S'none'
p71138
sS'name'
p71139
S'outputs'
p71140
sS'required'
p71141
I00
sS'group_name'
p71142
S'Outputs'
p71143
sa(dp71144
S'description'
p71145
S'The seed for the master random number generator\n'
p71146
sS'cpp_type'
p71147
S'unsigned int'
p71148
sS'default'
p71149
S'0'
p71150
sS'name'
p71151
S'seed'
p71152
sS'required'
p71153
I00
sS'group_name'
p71154
S'Advanced'
p71155
sa(dp71156
S'description'
p71157
S'Flag to indicate if third derivatives are needed\n'
p71158
sS'cpp_type'
p71159
S'bool'
p71160
sS'default'
p71161
g3
sS'name'
p71162
S'third_derivatives'
p71163
sS'required'
p71164
I00
sS'group_name'
p71165
Nsa(dp71166
S'description'
p71167
g3
sS'cpp_type'
p71168
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71169
sS'default'
p71170
S'ElasticEnergyMaterial'
p71171
sS'name'
p71172
S'type'
p71173
sS'required'
p71174
I00
sS'group_name'
p71175
Nsa(dp71176
S'description'
p71177
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71178
sS'cpp_type'
p71179
S'bool'
p71180
sS'default'
p71181
S'0'
p71182
sS'name'
p71183
S'use_displaced_mesh'
p71184
sS'required'
p71185
I00
sS'group_name'
p71186
S'Advanced'
p71187
sasS'name'
p71188
S'/Materials/ElasticEnergyMaterial'
p71189
sa(dp71190
S'description'
p71191
S'Providing external applied force density to grains\n'
p71192
sS'subblocks'
p71193
NsS'parameters'
p71194
(lp71195
(dp71196
S'description'
p71197
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71198
sS'cpp_type'
p71199
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71200
sS'default'
p71201
g3
sS'name'
p71202
S'block'
p71203
sS'required'
p71204
I00
sS'group_name'
p71205
Nsa(dp71206
S'description'
p71207
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71208
sS'cpp_type'
p71209
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71210
sS'default'
p71211
g3
sS'name'
p71212
S'boundary'
p71213
sS'required'
p71214
I00
sS'group_name'
p71215
Nsa(dp71216
S'description'
p71217
S'Concentration field\n'
p71218
sS'cpp_type'
p71219
S'std::vector<VariableName>'
p71220
sS'default'
p71221
g3
sS'name'
p71222
S'c'
p71223
sS'required'
p71224
I00
sS'group_name'
p71225
Nsa(dp71226
S'description'
p71227
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71228
sS'cpp_type'
p71229
S'bool'
p71230
sS'default'
p71231
S'1'
p71232
sS'name'
p71233
S'compute'
p71234
sS'required'
p71235
I00
sS'group_name'
p71236
Nsa(dp71237
S'description'
p71238
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71239
sS'cpp_type'
p71240
S'bool'
p71241
sS'default'
p71242
S'0'
p71243
sS'name'
p71244
S'constant_on_elem'
p71245
sS'required'
p71246
I00
sS'group_name'
p71247
S'Advanced'
p71248
sa(dp71249
S'description'
p71250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71251
sS'cpp_type'
p71252
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71253
sS'default'
p71254
g3
sS'name'
p71255
S'control_tags'
p71256
sS'required'
p71257
I00
sS'group_name'
p71258
S'Advanced'
p71259
sa(dp71260
S'description'
p71261
S'Set the enabled status of the MooseObject.\n'
p71262
sS'cpp_type'
p71263
S'bool'
p71264
sS'default'
p71265
S'1'
p71266
sS'name'
p71267
S'enable'
p71268
sS'required'
p71269
I00
sS'group_name'
p71270
S'Advanced'
p71271
sa(dp71272
S'description'
p71273
S'Array of coupled order parameters\n'
p71274
sS'cpp_type'
p71275
S'std::vector<VariableName>'
p71276
sS'default'
p71277
g3
sS'name'
p71278
S'etas'
p71279
sS'required'
p71280
I01
sS'group_name'
p71281
Nsa(dp71282
S'description'
p71283
S'The forcing function in x direction.\n'
p71284
sS'cpp_type'
p71285
S'FunctionName'
p71286
sS'default'
p71287
S'0'
p71288
sS'name'
p71289
S'force_x'
p71290
sS'required'
p71291
I00
sS'group_name'
p71292
Nsa(dp71293
S'description'
p71294
S'The forcing function in y direction.\n'
p71295
sS'cpp_type'
p71296
S'FunctionName'
p71297
sS'default'
p71298
S'0'
p71299
sS'name'
p71300
S'force_y'
p71301
sS'required'
p71302
I00
sS'group_name'
p71303
Nsa(dp71304
S'description'
p71305
S'The forcing function in z direction.\n'
p71306
sS'cpp_type'
p71307
S'FunctionName'
p71308
sS'default'
p71309
S'0'
p71310
sS'name'
p71311
S'force_z'
p71312
sS'required'
p71313
I00
sS'group_name'
p71314
Nsa(dp71315
S'description'
p71316
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71317
sS'cpp_type'
p71318
S'bool'
p71319
sS'default'
p71320
S'1'
p71321
sS'name'
p71322
S'implicit'
p71323
sS'required'
p71324
I00
sS'group_name'
p71325
S'Advanced'
p71326
sa(dp71327
S'description'
p71328
S'stiffness constant multiplier\n'
p71329
sS'cpp_type'
p71330
S'double'
p71331
sS'default'
p71332
S'1'
p71333
sS'name'
p71334
S'k'
p71335
sS'required'
p71336
I00
sS'group_name'
p71337
Nsa(dp71338
S'description'
p71339
S'Array of coupled order parameters (num_name)\n'
p71340
sS'cpp_type'
p71341
S'unsigned int'
p71342
sS'default'
p71343
g3
sS'name'
p71344
S'op_num'
p71345
sS'required'
p71346
I00
sS'group_name'
p71347
Nsa(dp71348
S'description'
p71349
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71350
sS'cpp_type'
p71351
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71352
sS'default'
p71353
g3
sS'name'
p71354
S'output_properties'
p71355
sS'required'
p71356
I00
sS'group_name'
p71357
S'Outputs'
p71358
sa(dp71359
S'description'
p71360
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71361
sS'cpp_type'
p71362
S'std::vector<OutputName, std::allocator<OutputName> >'
p71363
sS'default'
p71364
S'none'
p71365
sS'name'
p71366
S'outputs'
p71367
sS'required'
p71368
I00
sS'group_name'
p71369
S'Outputs'
p71370
sa(dp71371
S'description'
p71372
S'The seed for the master random number generator\n'
p71373
sS'cpp_type'
p71374
S'unsigned int'
p71375
sS'default'
p71376
S'0'
p71377
sS'name'
p71378
S'seed'
p71379
sS'required'
p71380
I00
sS'group_name'
p71381
S'Advanced'
p71382
sa(dp71383
S'description'
p71384
g3
sS'cpp_type'
p71385
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71386
sS'default'
p71387
S'ExternalForceDensityMaterial'
p71388
sS'name'
p71389
S'type'
p71390
sS'required'
p71391
I00
sS'group_name'
p71392
Nsa(dp71393
S'description'
p71394
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71395
sS'cpp_type'
p71396
S'bool'
p71397
sS'default'
p71398
S'0'
p71399
sS'name'
p71400
S'use_displaced_mesh'
p71401
sS'required'
p71402
I00
sS'group_name'
p71403
S'Advanced'
p71404
sa(dp71405
S'description'
p71406
S'Array of coupled order parameters (base_name)\n'
p71407
sS'cpp_type'
p71408
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71409
sS'default'
p71410
g3
sS'name'
p71411
S'var_name_base'
p71412
sS'required'
p71413
I00
sS'group_name'
p71414
NsasS'name'
p71415
S'/Materials/ExternalForceDensityMaterial'
p71416
sa(dp71417
S'description'
p71418
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p71419
sS'subblocks'
p71420
NsS'parameters'
p71421
(lp71422
(dp71423
S'description'
p71424
S'Constitutive stress residue absolute tolerance\n'
p71425
sS'cpp_type'
p71426
S'double'
p71427
sS'default'
p71428
S'1e-06'
p71429
sS'name'
p71430
S'abs_tol'
p71431
sS'required'
p71432
I00
sS'group_name'
p71433
Nsa(dp71434
S'description'
p71435
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p71436
sS'cpp_type'
p71437
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71438
sS'default'
p71439
g3
sS'name'
p71440
S'base_name'
p71441
sS'required'
p71442
I00
sS'group_name'
p71443
Nsa(dp71444
S'description'
p71445
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71446
sS'cpp_type'
p71447
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71448
sS'default'
p71449
g3
sS'name'
p71450
S'block'
p71451
sS'required'
p71452
I00
sS'group_name'
p71453
Nsa(dp71454
S'description'
p71455
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71456
sS'cpp_type'
p71457
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71458
sS'default'
p71459
g3
sS'name'
p71460
S'boundary'
p71461
sS'required'
p71462
I00
sS'group_name'
p71463
Nsa(dp71464
S'description'
p71465
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71466
sS'cpp_type'
p71467
S'bool'
p71468
sS'default'
p71469
S'1'
p71470
sS'name'
p71471
S'compute'
p71472
sS'required'
p71473
I00
sS'group_name'
p71474
Nsa(dp71475
S'description'
p71476
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71477
sS'cpp_type'
p71478
S'bool'
p71479
sS'default'
p71480
S'0'
p71481
sS'name'
p71482
S'constant_on_elem'
p71483
sS'required'
p71484
I00
sS'group_name'
p71485
S'Advanced'
p71486
sa(dp71487
S'description'
p71488
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71489
sS'cpp_type'
p71490
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71491
sS'default'
p71492
g3
sS'name'
p71493
S'control_tags'
p71494
sS'required'
p71495
I00
sS'group_name'
p71496
S'Advanced'
p71497
sa(dp71498
S'description'
p71499
S'Set the enabled status of the MooseObject.\n'
p71500
sS'cpp_type'
p71501
S'bool'
p71502
sS'default'
p71503
S'1'
p71504
sS'name'
p71505
S'enable'
p71506
sS'required'
p71507
I00
sS'group_name'
p71508
S'Advanced'
p71509
sa(dp71510
S'description'
p71511
S'Parameters used in slip rate equations\n'
p71512
sS'cpp_type'
p71513
S'std::vector<double, std::allocator<double> >'
p71514
sS'default'
p71515
g3
sS'name'
p71516
S'flowprops'
p71517
sS'required'
p71518
I00
sS'group_name'
p71519
Nsa(dp71520
S'description'
p71521
S'Flag to generate random stress to perform time cutback on constitutive failure\n'
p71522
sS'cpp_type'
p71523
S'bool'
p71524
sS'default'
p71525
S'0'
p71526
sS'name'
p71527
S'gen_random_stress_flag'
p71528
sS'required'
p71529
I00
sS'group_name'
p71530
Nsa(dp71531
S'description'
p71532
S'Initial values of slip system resistances\n'
p71533
sS'cpp_type'
p71534
S'std::vector<double, std::allocator<double> >'
p71535
sS'default'
p71536
g3
sS'name'
p71537
S'gprops'
p71538
sS'required'
p71539
I00
sS'group_name'
p71540
Nsa(dp71541
S'description'
p71542
S'Constitutive slip system resistance residual tolerance\n'
p71543
sS'cpp_type'
p71544
S'double'
p71545
sS'default'
p71546
S'100'
p71547
sS'name'
p71548
S'gtol'
p71549
sS'required'
p71550
I00
sS'group_name'
p71551
Nsa(dp71552
S'description'
p71553
S'Hardening properties\n'
p71554
sS'cpp_type'
p71555
S'std::vector<double, std::allocator<double> >'
p71556
sS'default'
p71557
g3
sS'name'
p71558
S'hprops'
p71559
sS'required'
p71560
I00
sS'group_name'
p71561
Nsa(dp71562
S'description'
p71563
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71564
sS'cpp_type'
p71565
S'bool'
p71566
sS'default'
p71567
S'1'
p71568
sS'name'
p71569
S'implicit'
p71570
sS'required'
p71571
I00
sS'group_name'
p71572
S'Advanced'
p71573
sa(dp71574
S'description'
p71575
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p71576
sS'cpp_type'
p71577
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p71578
sS'default'
p71579
g3
sS'name'
p71580
S'initial_stress'
p71581
sS'required'
p71582
I00
sS'group_name'
p71583
Nsa(dp71584
S'description'
p71585
S'Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n'
p71586
sS'cpp_type'
p71587
S'bool'
p71588
sS'default'
p71589
S'0'
p71590
sS'name'
p71591
S'input_random_scaling_var'
p71592
sS'required'
p71593
I00
sS'group_name'
p71594
Nsa(dp71595
S'name'
p71596
S'intvar_read_type'
p71597
sS'cpp_type'
p71598
S'MooseEnum'
p71599
sS'default'
p71600
S'none'
p71601
sS'description'
p71602
S'Read from options for initial value of internal variables: Default from .i file\n'
p71603
sS'required'
p71604
I00
sS'options'
p71605
S'slip_sys_file slip_sys_res_file none'
p71606
sS'group_name'
p71607
Nsa(dp71608
S'description'
p71609
S'Line search bisection method maximum number of iteration\n'
p71610
sS'cpp_type'
p71611
S'unsigned int'
p71612
sS'default'
p71613
S'20'
p71614
sS'name'
p71615
S'line_search_maxiter'
p71616
sS'required'
p71617
I00
sS'group_name'
p71618
Nsa(dp71619
S'name'
p71620
S'line_search_method'
p71621
sS'cpp_type'
p71622
S'MooseEnum'
p71623
sS'default'
p71624
S'CUT_HALF'
p71625
sS'description'
p71626
S'The method used in line search\n'
p71627
sS'required'
p71628
I00
sS'options'
p71629
S'CUT_HALF BISECTION'
p71630
sS'group_name'
p71631
Nsa(dp71632
S'description'
p71633
S'Line search bisection method tolerance\n'
p71634
sS'cpp_type'
p71635
S'double'
p71636
sS'default'
p71637
S'0.5'
p71638
sS'name'
p71639
S'line_search_tol'
p71640
sS'required'
p71641
I00
sS'group_name'
p71642
Nsa(dp71643
S'description'
p71644
S'Maximum number of substep iteration\n'
p71645
sS'cpp_type'
p71646
S'unsigned int'
p71647
sS'default'
p71648
S'1'
p71649
sS'name'
p71650
S'maximum_substep_iteration'
p71651
sS'required'
p71652
I00
sS'group_name'
p71653
Nsa(dp71654
S'description'
p71655
S'Maximum number of iterations for stress update\n'
p71656
sS'cpp_type'
p71657
S'unsigned int'
p71658
sS'default'
p71659
S'100'
p71660
sS'name'
p71661
S'maxiter'
p71662
sS'required'
p71663
I00
sS'group_name'
p71664
Nsa(dp71665
S'description'
p71666
S'Maximum number of iterations for slip system resistance update\n'
p71667
sS'cpp_type'
p71668
S'unsigned int'
p71669
sS'default'
p71670
S'100'
p71671
sS'name'
p71672
S'maxitergss'
p71673
sS'required'
p71674
I00
sS'group_name'
p71675
Nsa(dp71676
S'description'
p71677
S'Minimum line search step size\n'
p71678
sS'cpp_type'
p71679
S'double'
p71680
sS'default'
p71681
S'0.01'
p71682
sS'name'
p71683
S'min_line_search_step_size'
p71684
sS'required'
p71685
I00
sS'group_name'
p71686
Nsa(dp71687
S'description'
p71688
S'Number of slip systems\n'
p71689
sS'cpp_type'
p71690
S'int'
p71691
sS'default'
p71692
g3
sS'name'
p71693
S'nss'
p71694
sS'required'
p71695
I01
sS'group_name'
p71696
Nsa(dp71697
S'description'
p71698
S'Number of flow rate properties for a slip system\n'
p71699
sS'cpp_type'
p71700
S'unsigned int'
p71701
sS'default'
p71702
S'2'
p71703
sS'name'
p71704
S'num_slip_sys_flowrate_props'
p71705
sS'required'
p71706
I00
sS'group_name'
p71707
Nsa(dp71708
S'description'
p71709
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p71710
sS'cpp_type'
p71711
S'unsigned int'
p71712
sS'default'
p71713
S'0'
p71714
sS'name'
p71715
S'num_slip_sys_props'
p71716
sS'required'
p71717
I00
sS'group_name'
p71718
Nsa(dp71719
S'description'
p71720
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71721
sS'cpp_type'
p71722
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71723
sS'default'
p71724
g3
sS'name'
p71725
S'output_properties'
p71726
sS'required'
p71727
I00
sS'group_name'
p71728
S'Outputs'
p71729
sa(dp71730
S'description'
p71731
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71732
sS'cpp_type'
p71733
S'std::vector<OutputName, std::allocator<OutputName> >'
p71734
sS'default'
p71735
S'none'
p71736
sS'name'
p71737
S'outputs'
p71738
sS'required'
p71739
I00
sS'group_name'
p71740
S'Outputs'
p71741
sa(dp71742
S'description'
p71743
S'Random scaling variable: Large value can cause non-positive definiteness\n'
p71744
sS'cpp_type'
p71745
S'double'
p71746
sS'default'
p71747
S'1e+09'
p71748
sS'name'
p71749
S'random_scaling_var'
p71750
sS'required'
p71751
I00
sS'group_name'
p71752
Nsa(dp71753
S'description'
p71754
S'Random integer used to generate random stress when constitutive failure occurs\n'
p71755
sS'cpp_type'
p71756
S'unsigned int'
p71757
sS'default'
p71758
S'2000'
p71759
sS'name'
p71760
S'random_seed'
p71761
sS'required'
p71762
I00
sS'group_name'
p71763
Nsa(dp71764
S'description'
p71765
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p71766
sS'cpp_type'
p71767
S'UserObjectName'
p71768
sS'default'
p71769
g3
sS'name'
p71770
S'read_prop_user_object'
p71771
sS'required'
p71772
I00
sS'group_name'
p71773
Nsa(dp71774
S'description'
p71775
S'Constitutive stress residue relative tolerance\n'
p71776
sS'cpp_type'
p71777
S'double'
p71778
sS'default'
p71779
S'1e-06'
p71780
sS'name'
p71781
S'rtol'
p71782
sS'required'
p71783
I00
sS'group_name'
p71784
Nsa(dp71785
S'description'
p71786
S'The seed for the master random number generator\n'
p71787
sS'cpp_type'
p71788
S'unsigned int'
p71789
sS'default'
p71790
S'0'
p71791
sS'name'
p71792
S'seed'
p71793
sS'required'
p71794
I00
sS'group_name'
p71795
S'Advanced'
p71796
sa(dp71797
S'description'
p71798
S'Maximum allowable slip in an increment\n'
p71799
sS'cpp_type'
p71800
S'double'
p71801
sS'default'
p71802
S'0.02'
p71803
sS'name'
p71804
S'slip_incr_tol'
p71805
sS'required'
p71806
I00
sS'group_name'
p71807
Nsa(dp71808
S'description'
p71809
S'Name of the file containing the slip system\n'
p71810
sS'cpp_type'
p71811
S'FileName'
p71812
sS'default'
p71813
g3
sS'name'
p71814
S'slip_sys_file_name'
p71815
sS'required'
p71816
I01
sS'group_name'
p71817
Nsa(dp71818
S'description'
p71819
S'Name of the file containing the values of slip rate equation parameters\n'
p71820
sS'cpp_type'
p71821
S'FileName'
p71822
sS'default'
p71823
g3
sS'name'
p71824
S'slip_sys_flow_prop_file_name'
p71825
sS'required'
p71826
I00
sS'group_name'
p71827
Nsa(dp71828
S'description'
p71829
S'Name of the file containing the values of hardness evolution parameters\n'
p71830
sS'cpp_type'
p71831
S'FileName'
p71832
sS'default'
p71833
g3
sS'name'
p71834
S'slip_sys_hard_prop_file_name'
p71835
sS'required'
p71836
I00
sS'group_name'
p71837
Nsa(dp71838
S'description'
p71839
S'Name of the file containing the initial values of slip system resistances\n'
p71840
sS'cpp_type'
p71841
S'FileName'
p71842
sS'default'
p71843
g3
sS'name'
p71844
S'slip_sys_res_prop_file_name'
p71845
sS'required'
p71846
I00
sS'group_name'
p71847
Nsa(dp71848
S'description'
p71849
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p71850
sS'cpp_type'
p71851
S'bool'
p71852
sS'default'
p71853
S'0'
p71854
sS'name'
p71855
S'store_stress_old'
p71856
sS'required'
p71857
I00
sS'group_name'
p71858
Nsa(dp71859
S'name'
p71860
S'tan_mod_type'
p71861
sS'cpp_type'
p71862
S'MooseEnum'
p71863
sS'default'
p71864
S'none'
p71865
sS'description'
p71866
S'Type of tangent moduli for preconditioner: default elastic\n'
p71867
sS'required'
p71868
I00
sS'options'
p71869
S'exact none'
p71870
sS'group_name'
p71871
Nsa(dp71872
S'description'
p71873
g3
sS'cpp_type'
p71874
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71875
sS'default'
p71876
S'FiniteStrainCPSlipRateRes'
p71877
sS'name'
p71878
S'type'
p71879
sS'required'
p71880
I00
sS'group_name'
p71881
Nsa(dp71882
S'description'
p71883
S'Use line search in constitutive update\n'
p71884
sS'cpp_type'
p71885
S'bool'
p71886
sS'default'
p71887
S'0'
p71888
sS'name'
p71889
S'use_line_search'
p71890
sS'required'
p71891
I00
sS'group_name'
p71892
NsasS'name'
p71893
S'/Materials/FiniteStrainCPSlipRateRes'
p71894
sa(dp71895
S'description'
p71896
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p71897
sS'subblocks'
p71898
NsS'parameters'
p71899
(lp71900
(dp71901
S'description'
p71902
S'Constitutive stress residue absolute tolerance\n'
p71903
sS'cpp_type'
p71904
S'double'
p71905
sS'default'
p71906
S'1e-06'
p71907
sS'name'
p71908
S'abs_tol'
p71909
sS'required'
p71910
I00
sS'group_name'
p71911
Nsa(dp71912
S'description'
p71913
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p71914
sS'cpp_type'
p71915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71916
sS'default'
p71917
g3
sS'name'
p71918
S'base_name'
p71919
sS'required'
p71920
I00
sS'group_name'
p71921
Nsa(dp71922
S'description'
p71923
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71924
sS'cpp_type'
p71925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71926
sS'default'
p71927
g3
sS'name'
p71928
S'block'
p71929
sS'required'
p71930
I00
sS'group_name'
p71931
Nsa(dp71932
S'description'
p71933
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71934
sS'cpp_type'
p71935
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71936
sS'default'
p71937
g3
sS'name'
p71938
S'boundary'
p71939
sS'required'
p71940
I00
sS'group_name'
p71941
Nsa(dp71942
S'description'
p71943
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71944
sS'cpp_type'
p71945
S'bool'
p71946
sS'default'
p71947
S'1'
p71948
sS'name'
p71949
S'compute'
p71950
sS'required'
p71951
I00
sS'group_name'
p71952
Nsa(dp71953
S'description'
p71954
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71955
sS'cpp_type'
p71956
S'bool'
p71957
sS'default'
p71958
S'0'
p71959
sS'name'
p71960
S'constant_on_elem'
p71961
sS'required'
p71962
I00
sS'group_name'
p71963
S'Advanced'
p71964
sa(dp71965
S'description'
p71966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71967
sS'cpp_type'
p71968
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71969
sS'default'
p71970
g3
sS'name'
p71971
S'control_tags'
p71972
sS'required'
p71973
I00
sS'group_name'
p71974
S'Advanced'
p71975
sa(dp71976
S'description'
p71977
S'Set the enabled status of the MooseObject.\n'
p71978
sS'cpp_type'
p71979
S'bool'
p71980
sS'default'
p71981
S'1'
p71982
sS'name'
p71983
S'enable'
p71984
sS'required'
p71985
I00
sS'group_name'
p71986
S'Advanced'
p71987
sa(dp71988
S'description'
p71989
S'Parameters used in slip rate equations\n'
p71990
sS'cpp_type'
p71991
S'std::vector<double, std::allocator<double> >'
p71992
sS'default'
p71993
g3
sS'name'
p71994
S'flowprops'
p71995
sS'required'
p71996
I00
sS'group_name'
p71997
Nsa(dp71998
S'description'
p71999
S'Flag to generate random stress to perform time cutback on constitutive failure\n'
p72000
sS'cpp_type'
p72001
S'bool'
p72002
sS'default'
p72003
S'0'
p72004
sS'name'
p72005
S'gen_random_stress_flag'
p72006
sS'required'
p72007
I00
sS'group_name'
p72008
Nsa(dp72009
S'description'
p72010
S'Initial values of slip system resistances\n'
p72011
sS'cpp_type'
p72012
S'std::vector<double, std::allocator<double> >'
p72013
sS'default'
p72014
g3
sS'name'
p72015
S'gprops'
p72016
sS'required'
p72017
I00
sS'group_name'
p72018
Nsa(dp72019
S'description'
p72020
S'Constitutive slip system resistance residual tolerance\n'
p72021
sS'cpp_type'
p72022
S'double'
p72023
sS'default'
p72024
S'100'
p72025
sS'name'
p72026
S'gtol'
p72027
sS'required'
p72028
I00
sS'group_name'
p72029
Nsa(dp72030
S'description'
p72031
S'Hardening properties\n'
p72032
sS'cpp_type'
p72033
S'std::vector<double, std::allocator<double> >'
p72034
sS'default'
p72035
g3
sS'name'
p72036
S'hprops'
p72037
sS'required'
p72038
I00
sS'group_name'
p72039
Nsa(dp72040
S'description'
p72041
S'Determines whether this object is calculated using an implicit or explicit form\n'
p72042
sS'cpp_type'
p72043
S'bool'
p72044
sS'default'
p72045
S'1'
p72046
sS'name'
p72047
S'implicit'
p72048
sS'required'
p72049
I00
sS'group_name'
p72050
S'Advanced'
p72051
sa(dp72052
S'description'
p72053
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p72054
sS'cpp_type'
p72055
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p72056
sS'default'
p72057
g3
sS'name'
p72058
S'initial_stress'
p72059
sS'required'
p72060
I00
sS'group_name'
p72061
Nsa(dp72062
S'description'
p72063
S'Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n'
p72064
sS'cpp_type'
p72065
S'bool'
p72066
sS'default'
p72067
S'0'
p72068
sS'name'
p72069
S'input_random_scaling_var'
p72070
sS'required'
p72071
I00
sS'group_name'
p72072
Nsa(dp72073
S'name'
p72074
S'intvar_read_type'
p72075
sS'cpp_type'
p72076
S'MooseEnum'
p72077
sS'default'
p72078
S'none'
p72079
sS'description'
p72080
S'Read from options for initial value of internal variables: Default from .i file\n'
p72081
sS'required'
p72082
I00
sS'options'
p72083
S'slip_sys_file slip_sys_res_file none'
p72084
sS'group_name'
p72085
Nsa(dp72086
S'description'
p72087
S'Line search bisection method maximum number of iteration\n'
p72088
sS'cpp_type'
p72089
S'unsigned int'
p72090
sS'default'
p72091
S'20'
p72092
sS'name'
p72093
S'line_search_maxiter'
p72094
sS'required'
p72095
I00
sS'group_name'
p72096
Nsa(dp72097
S'name'
p72098
S'line_search_method'
p72099
sS'cpp_type'
p72100
S'MooseEnum'
p72101
sS'default'
p72102
S'CUT_HALF'
p72103
sS'description'
p72104
S'The method used in line search\n'
p72105
sS'required'
p72106
I00
sS'options'
p72107
S'CUT_HALF BISECTION'
p72108
sS'group_name'
p72109
Nsa(dp72110
S'description'
p72111
S'Line search bisection method tolerance\n'
p72112
sS'cpp_type'
p72113
S'double'
p72114
sS'default'
p72115
S'0.5'
p72116
sS'name'
p72117
S'line_search_tol'
p72118
sS'required'
p72119
I00
sS'group_name'
p72120
Nsa(dp72121
S'description'
p72122
S'Maximum number of substep iteration\n'
p72123
sS'cpp_type'
p72124
S'unsigned int'
p72125
sS'default'
p72126
S'1'
p72127
sS'name'
p72128
S'maximum_substep_iteration'
p72129
sS'required'
p72130
I00
sS'group_name'
p72131
Nsa(dp72132
S'description'
p72133
S'Maximum number of iterations for stress update\n'
p72134
sS'cpp_type'
p72135
S'unsigned int'
p72136
sS'default'
p72137
S'100'
p72138
sS'name'
p72139
S'maxiter'
p72140
sS'required'
p72141
I00
sS'group_name'
p72142
Nsa(dp72143
S'description'
p72144
S'Maximum number of iterations for slip system resistance update\n'
p72145
sS'cpp_type'
p72146
S'unsigned int'
p72147
sS'default'
p72148
S'100'
p72149
sS'name'
p72150
S'maxitergss'
p72151
sS'required'
p72152
I00
sS'group_name'
p72153
Nsa(dp72154
S'description'
p72155
S'Minimum line search step size\n'
p72156
sS'cpp_type'
p72157
S'double'
p72158
sS'default'
p72159
S'0.01'
p72160
sS'name'
p72161
S'min_line_search_step_size'
p72162
sS'required'
p72163
I00
sS'group_name'
p72164
Nsa(dp72165
S'description'
p72166
S'Number of slip systems\n'
p72167
sS'cpp_type'
p72168
S'int'
p72169
sS'default'
p72170
g3
sS'name'
p72171
S'nss'
p72172
sS'required'
p72173
I01
sS'group_name'
p72174
Nsa(dp72175
S'description'
p72176
S'Number of flow rate properties for a slip system\n'
p72177
sS'cpp_type'
p72178
S'unsigned int'
p72179
sS'default'
p72180
S'2'
p72181
sS'name'
p72182
S'num_slip_sys_flowrate_props'
p72183
sS'required'
p72184
I00
sS'group_name'
p72185
Nsa(dp72186
S'description'
p72187
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p72188
sS'cpp_type'
p72189
S'unsigned int'
p72190
sS'default'
p72191
S'0'
p72192
sS'name'
p72193
S'num_slip_sys_props'
p72194
sS'required'
p72195
I00
sS'group_name'
p72196
Nsa(dp72197
S'description'
p72198
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72199
sS'cpp_type'
p72200
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72201
sS'default'
p72202
g3
sS'name'
p72203
S'output_properties'
p72204
sS'required'
p72205
I00
sS'group_name'
p72206
S'Outputs'
p72207
sa(dp72208
S'description'
p72209
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72210
sS'cpp_type'
p72211
S'std::vector<OutputName, std::allocator<OutputName> >'
p72212
sS'default'
p72213
S'none'
p72214
sS'name'
p72215
S'outputs'
p72216
sS'required'
p72217
I00
sS'group_name'
p72218
S'Outputs'
p72219
sa(dp72220
S'description'
p72221
S'Random scaling variable: Large value can cause non-positive definiteness\n'
p72222
sS'cpp_type'
p72223
S'double'
p72224
sS'default'
p72225
S'1e+09'
p72226
sS'name'
p72227
S'random_scaling_var'
p72228
sS'required'
p72229
I00
sS'group_name'
p72230
Nsa(dp72231
S'description'
p72232
S'Random integer used to generate random stress when constitutive failure occurs\n'
p72233
sS'cpp_type'
p72234
S'unsigned int'
p72235
sS'default'
p72236
S'2000'
p72237
sS'name'
p72238
S'random_seed'
p72239
sS'required'
p72240
I00
sS'group_name'
p72241
Nsa(dp72242
S'description'
p72243
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p72244
sS'cpp_type'
p72245
S'UserObjectName'
p72246
sS'default'
p72247
g3
sS'name'
p72248
S'read_prop_user_object'
p72249
sS'required'
p72250
I00
sS'group_name'
p72251
Nsa(dp72252
S'description'
p72253
S'Constitutive stress residue relative tolerance\n'
p72254
sS'cpp_type'
p72255
S'double'
p72256
sS'default'
p72257
S'1e-06'
p72258
sS'name'
p72259
S'rtol'
p72260
sS'required'
p72261
I00
sS'group_name'
p72262
Nsa(dp72263
S'description'
p72264
S'The seed for the master random number generator\n'
p72265
sS'cpp_type'
p72266
S'unsigned int'
p72267
sS'default'
p72268
S'0'
p72269
sS'name'
p72270
S'seed'
p72271
sS'required'
p72272
I00
sS'group_name'
p72273
S'Advanced'
p72274
sa(dp72275
S'description'
p72276
S'Maximum allowable slip in an increment\n'
p72277
sS'cpp_type'
p72278
S'double'
p72279
sS'default'
p72280
S'0.02'
p72281
sS'name'
p72282
S'slip_incr_tol'
p72283
sS'required'
p72284
I00
sS'group_name'
p72285
Nsa(dp72286
S'description'
p72287
S'Name of the file containing the slip system\n'
p72288
sS'cpp_type'
p72289
S'FileName'
p72290
sS'default'
p72291
g3
sS'name'
p72292
S'slip_sys_file_name'
p72293
sS'required'
p72294
I01
sS'group_name'
p72295
Nsa(dp72296
S'description'
p72297
S'Name of the file containing the values of slip rate equation parameters\n'
p72298
sS'cpp_type'
p72299
S'FileName'
p72300
sS'default'
p72301
g3
sS'name'
p72302
S'slip_sys_flow_prop_file_name'
p72303
sS'required'
p72304
I00
sS'group_name'
p72305
Nsa(dp72306
S'description'
p72307
S'Name of the file containing the values of hardness evolution parameters\n'
p72308
sS'cpp_type'
p72309
S'FileName'
p72310
sS'default'
p72311
g3
sS'name'
p72312
S'slip_sys_hard_prop_file_name'
p72313
sS'required'
p72314
I00
sS'group_name'
p72315
Nsa(dp72316
S'description'
p72317
S'Name of the file containing the initial values of slip system resistances\n'
p72318
sS'cpp_type'
p72319
S'FileName'
p72320
sS'default'
p72321
g3
sS'name'
p72322
S'slip_sys_res_prop_file_name'
p72323
sS'required'
p72324
I00
sS'group_name'
p72325
Nsa(dp72326
S'description'
p72327
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p72328
sS'cpp_type'
p72329
S'bool'
p72330
sS'default'
p72331
S'0'
p72332
sS'name'
p72333
S'store_stress_old'
p72334
sS'required'
p72335
I00
sS'group_name'
p72336
Nsa(dp72337
S'name'
p72338
S'tan_mod_type'
p72339
sS'cpp_type'
p72340
S'MooseEnum'
p72341
sS'default'
p72342
S'none'
p72343
sS'description'
p72344
S'Type of tangent moduli for preconditioner: default elastic\n'
p72345
sS'required'
p72346
I00
sS'options'
p72347
S'exact none'
p72348
sS'group_name'
p72349
Nsa(dp72350
S'description'
p72351
g3
sS'cpp_type'
p72352
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72353
sS'default'
p72354
S'FiniteStrainCrystalPlasticity'
p72355
sS'name'
p72356
S'type'
p72357
sS'required'
p72358
I00
sS'group_name'
p72359
Nsa(dp72360
S'description'
p72361
S'Use line search in constitutive update\n'
p72362
sS'cpp_type'
p72363
S'bool'
p72364
sS'default'
p72365
S'0'
p72366
sS'name'
p72367
S'use_line_search'
p72368
sS'required'
p72369
I00
sS'group_name'
p72370
NsasS'name'
p72371
S'/Materials/FiniteStrainCrystalPlasticity'
p72372
sa(dp72373
S'description'
p72374
S'Material class for hyper-elastic visco-platic flow: Can handle multiple flow models defined by flowratemodel type user objects\n'
p72375
sS'subblocks'
p72376
NsS'parameters'
p72377
(lp72378
(dp72379
S'description'
p72380
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p72381
sS'cpp_type'
p72382
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72383
sS'default'
p72384
g3
sS'name'
p72385
S'base_name'
p72386
sS'required'
p72387
I00
sS'group_name'
p72388
Nsa(dp72389
S'description'
p72390
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72391
sS'cpp_type'
p72392
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72393
sS'default'
p72394
g3
sS'name'
p72395
S'block'
p72396
sS'required'
p72397
I00
sS'group_name'
p72398
Nsa(dp72399
S'description'
p72400
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72401
sS'cpp_type'
p72402
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72403
sS'default'
p72404
g3
sS'name'
p72405
S'boundary'
p72406
sS'required'
p72407
I00
sS'group_name'
p72408
Nsa(dp72409
S'description'
p72410
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p72411
sS'cpp_type'
p72412
S'bool'
p72413
sS'default'
p72414
S'1'
p72415
sS'name'
p72416
S'compute'
p72417
sS'required'
p72418
I00
sS'group_name'
p72419
Nsa(dp72420
S'description'
p72421
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p72422
sS'cpp_type'
p72423
S'bool'
p72424
sS'default'
p72425
S'0'
p72426
sS'name'
p72427
S'constant_on_elem'
p72428
sS'required'
p72429
I00
sS'group_name'
p72430
S'Advanced'
p72431
sa(dp72432
S'description'
p72433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72434
sS'cpp_type'
p72435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72436
sS'default'
p72437
g3
sS'name'
p72438
S'control_tags'
p72439
sS'required'
p72440
I00
sS'group_name'
p72441
S'Advanced'
p72442
sa(dp72443
S'description'
p72444
S'Set the enabled status of the MooseObject.\n'
p72445
sS'cpp_type'
p72446
S'bool'
p72447
sS'default'
p72448
S'1'
p72449
sS'name'
p72450
S'enable'
p72451
sS'required'
p72452
I00
sS'group_name'
p72453
S'Advanced'
p72454
sa(dp72455
S'description'
p72456
S'List of User object names that computes flow rate and derivatives\n'
p72457
sS'cpp_type'
p72458
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p72459
sS'default'
p72460
g3
sS'name'
p72461
S'flow_rate_user_objects'
p72462
sS'required'
p72463
I00
sS'group_name'
p72464
Nsa(dp72465
S'description'
p72466
S'Determines whether this object is calculated using an implicit or explicit form\n'
p72467
sS'cpp_type'
p72468
S'bool'
p72469
sS'default'
p72470
S'1'
p72471
sS'name'
p72472
S'implicit'
p72473
sS'required'
p72474
I00
sS'group_name'
p72475
S'Advanced'
p72476
sa(dp72477
S'description'
p72478
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p72479
sS'cpp_type'
p72480
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p72481
sS'default'
p72482
g3
sS'name'
p72483
S'initial_stress'
p72484
sS'required'
p72485
I00
sS'group_name'
p72486
Nsa(dp72487
S'description'
p72488
S'List of User object names that computes internal variable rates and derivatives\n'
p72489
sS'cpp_type'
p72490
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p72491
sS'default'
p72492
g3
sS'name'
p72493
S'internal_var_rate_user_objects'
p72494
sS'required'
p72495
I00
sS'group_name'
p72496
Nsa(dp72497
S'description'
p72498
S'List of User object names that integrates internal variables and computes derivatives\n'
p72499
sS'cpp_type'
p72500
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p72501
sS'default'
p72502
g3
sS'name'
p72503
S'internal_var_user_objects'
p72504
sS'required'
p72505
I00
sS'group_name'
p72506
Nsa(dp72507
S'description'
p72508
S'Maximum number of substep iteration\n'
p72509
sS'cpp_type'
p72510
S'unsigned int'
p72511
sS'default'
p72512
S'1'
p72513
sS'name'
p72514
S'max_substep_iteration'
p72515
sS'required'
p72516
I00
sS'group_name'
p72517
Nsa(dp72518
S'description'
p72519
S'Maximum iteration for flow rate update\n'
p72520
sS'cpp_type'
p72521
S'unsigned int'
p72522
sS'default'
p72523
S'50'
p72524
sS'name'
p72525
S'maxiters'
p72526
sS'required'
p72527
I00
sS'group_name'
p72528
Nsa(dp72529
S'description'
p72530
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72531
sS'cpp_type'
p72532
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72533
sS'default'
p72534
g3
sS'name'
p72535
S'output_properties'
p72536
sS'required'
p72537
I00
sS'group_name'
p72538
S'Outputs'
p72539
sa(dp72540
S'description'
p72541
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72542
sS'cpp_type'
p72543
S'std::vector<OutputName, std::allocator<OutputName> >'
p72544
sS'default'
p72545
S'none'
p72546
sS'name'
p72547
S'outputs'
p72548
sS'required'
p72549
I00
sS'group_name'
p72550
S'Outputs'
p72551
sa(dp72552
S'description'
p72553
S'Absolute Tolerance for flow rate residual equation\n'
p72554
sS'cpp_type'
p72555
S'double'
p72556
sS'default'
p72557
S'1e-10'
p72558
sS'name'
p72559
S'resid_abs_tol'
p72560
sS'required'
p72561
I00
sS'group_name'
p72562
Nsa(dp72563
S'description'
p72564
S'Relative Tolerance for flow rate residual equation\n'
p72565
sS'cpp_type'
p72566
S'double'
p72567
sS'default'
p72568
S'1e-06'
p72569
sS'name'
p72570
S'resid_rel_tol'
p72571
sS'required'
p72572
I00
sS'group_name'
p72573
Nsa(dp72574
S'description'
p72575
S'The seed for the master random number generator\n'
p72576
sS'cpp_type'
p72577
S'unsigned int'
p72578
sS'default'
p72579
S'0'
p72580
sS'name'
p72581
S'seed'
p72582
sS'required'
p72583
I00
sS'group_name'
p72584
S'Advanced'
p72585
sa(dp72586
S'description'
p72587
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p72588
sS'cpp_type'
p72589
S'bool'
p72590
sS'default'
p72591
S'0'
p72592
sS'name'
p72593
S'store_stress_old'
p72594
sS'required'
p72595
I00
sS'group_name'
p72596
Nsa(dp72597
S'description'
p72598
S'List of User object names that computes strength variables and derivatives\n'
p72599
sS'cpp_type'
p72600
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p72601
sS'default'
p72602
g3
sS'name'
p72603
S'strength_user_objects'
p72604
sS'required'
p72605
I00
sS'group_name'
p72606
Nsa(dp72607
S'description'
p72608
g3
sS'cpp_type'
p72609
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72610
sS'default'
p72611
S'FiniteStrainHyperElasticViscoPlastic'
p72612
sS'name'
p72613
S'type'
p72614
sS'required'
p72615
I00
sS'group_name'
p72616
NsasS'name'
p72617
S'/Materials/FiniteStrainHyperElasticViscoPlastic'
p72618
sa(dp72619
S'description'
p72620
S'Associative J2 plasticity with isotropic hardening.\n'
p72621
sS'subblocks'
p72622
NsS'parameters'
p72623
(lp72624
(dp72625
S'description'
p72626
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p72627
sS'cpp_type'
p72628
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72629
sS'default'
p72630
g3
sS'name'
p72631
S'base_name'
p72632
sS'required'
p72633
I00
sS'group_name'
p72634
Nsa(dp72635
S'description'
p72636
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72637
sS'cpp_type'
p72638
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72639
sS'default'
p72640
g3
sS'name'
p72641
S'block'
p72642
sS'required'
p72643
I00
sS'group_name'
p72644
Nsa(dp72645
S'description'
p72646
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72647
sS'cpp_type'
p72648
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72649
sS'default'
p72650
g3
sS'name'
p72651
S'boundary'
p72652
sS'required'
p72653
I00
sS'group_name'
p72654
Nsa(dp72655
S'description'
p72656
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p72657
sS'cpp_type'
p72658
S'bool'
p72659
sS'default'
p72660
S'1'
p72661
sS'name'
p72662
S'compute'
p72663
sS'required'
p72664
I00
sS'group_name'
p72665
Nsa(dp72666
S'description'
p72667
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p72668
sS'cpp_type'
p72669
S'bool'
p72670
sS'default'
p72671
S'0'
p72672
sS'name'
p72673
S'constant_on_elem'
p72674
sS'required'
p72675
I00
sS'group_name'
p72676
S'Advanced'
p72677
sa(dp72678
S'description'
p72679
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72680
sS'cpp_type'
p72681
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72682
sS'default'
p72683
g3
sS'name'
p72684
S'control_tags'
p72685
sS'required'
p72686
I00
sS'group_name'
p72687
S'Advanced'
p72688
sa(dp72689
S'description'
p72690
S'Set the enabled status of the MooseObject.\n'
p72691
sS'cpp_type'
p72692
S'bool'
p72693
sS'default'
p72694
S'1'
p72695
sS'name'
p72696
S'enable'
p72697
sS'required'
p72698
I00
sS'group_name'
p72699
S'Advanced'
p72700
sa(dp72701
S'description'
p72702
S'Equivalent plastic strain NR tolerance\n'
p72703
sS'cpp_type'
p72704
S'double'
p72705
sS'default'
p72706
S'1e-07'
p72707
sS'name'
p72708
S'eptol'
p72709
sS'required'
p72710
I00
sS'group_name'
p72711
Nsa(dp72712
S'description'
p72713
S'Consistency condition NR tolerance\n'
p72714
sS'cpp_type'
p72715
S'double'
p72716
sS'default'
p72717
S'0.0001'
p72718
sS'name'
p72719
S'ftol'
p72720
sS'required'
p72721
I00
sS'group_name'
p72722
Nsa(dp72723
S'description'
p72724
S'Determines whether this object is calculated using an implicit or explicit form\n'
p72725
sS'cpp_type'
p72726
S'bool'
p72727
sS'default'
p72728
S'1'
p72729
sS'name'
p72730
S'implicit'
p72731
sS'required'
p72732
I00
sS'group_name'
p72733
S'Advanced'
p72734
sa(dp72735
S'description'
p72736
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p72737
sS'cpp_type'
p72738
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p72739
sS'default'
p72740
g3
sS'name'
p72741
S'initial_stress'
p72742
sS'required'
p72743
I00
sS'group_name'
p72744
Nsa(dp72745
S'description'
p72746
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72747
sS'cpp_type'
p72748
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72749
sS'default'
p72750
g3
sS'name'
p72751
S'output_properties'
p72752
sS'required'
p72753
I00
sS'group_name'
p72754
S'Outputs'
p72755
sa(dp72756
S'description'
p72757
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72758
sS'cpp_type'
p72759
S'std::vector<OutputName, std::allocator<OutputName> >'
p72760
sS'default'
p72761
S'none'
p72762
sS'name'
p72763
S'outputs'
p72764
sS'required'
p72765
I00
sS'group_name'
p72766
S'Outputs'
p72767
sa(dp72768
S'description'
p72769
S'Plastic strain NR tolerance\n'
p72770
sS'cpp_type'
p72771
S'double'
p72772
sS'default'
p72773
S'1e-08'
p72774
sS'name'
p72775
S'rtol'
p72776
sS'required'
p72777
I00
sS'group_name'
p72778
Nsa(dp72779
S'description'
p72780
S'The seed for the master random number generator\n'
p72781
sS'cpp_type'
p72782
S'unsigned int'
p72783
sS'default'
p72784
S'0'
p72785
sS'name'
p72786
S'seed'
p72787
sS'required'
p72788
I00
sS'group_name'
p72789
S'Advanced'
p72790
sa(dp72791
S'description'
p72792
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p72793
sS'cpp_type'
p72794
S'bool'
p72795
sS'default'
p72796
S'0'
p72797
sS'name'
p72798
S'store_stress_old'
p72799
sS'required'
p72800
I00
sS'group_name'
p72801
Nsa(dp72802
S'description'
p72803
g3
sS'cpp_type'
p72804
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72805
sS'default'
p72806
S'FiniteStrainPlasticMaterial'
p72807
sS'name'
p72808
S'type'
p72809
sS'required'
p72810
I00
sS'group_name'
p72811
Nsa(dp72812
S'description'
p72813
S'Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n'
p72814
sS'cpp_type'
p72815
S'std::vector<double, std::allocator<double> >'
p72816
sS'default'
p72817
g3
sS'name'
p72818
S'yield_stress'
p72819
sS'required'
p72820
I01
sS'group_name'
p72821
NsasS'name'
p72822
S'/Materials/FiniteStrainPlasticMaterial'
p72823
sa(dp72824
S'description'
p72825
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p72826
sS'subblocks'
p72827
NsS'parameters'
p72828
(lp72829
(dp72830
S'description'
p72831
S'Constitutive stress residue absolute tolerance\n'
p72832
sS'cpp_type'
p72833
S'double'
p72834
sS'default'
p72835
S'1e-06'
p72836
sS'name'
p72837
S'abs_tol'
p72838
sS'required'
p72839
I00
sS'group_name'
p72840
Nsa(dp72841
S'description'
p72842
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p72843
sS'cpp_type'
p72844
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72845
sS'default'
p72846
g3
sS'name'
p72847
S'base_name'
p72848
sS'required'
p72849
I00
sS'group_name'
p72850
Nsa(dp72851
S'description'
p72852
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72853
sS'cpp_type'
p72854
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72855
sS'default'
p72856
g3
sS'name'
p72857
S'block'
p72858
sS'required'
p72859
I00
sS'group_name'
p72860
Nsa(dp72861
S'description'
p72862
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72863
sS'cpp_type'
p72864
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72865
sS'default'
p72866
g3
sS'name'
p72867
S'boundary'
p72868
sS'required'
p72869
I00
sS'group_name'
p72870
Nsa(dp72871
S'description'
p72872
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p72873
sS'cpp_type'
p72874
S'bool'
p72875
sS'default'
p72876
S'1'
p72877
sS'name'
p72878
S'compute'
p72879
sS'required'
p72880
I00
sS'group_name'
p72881
Nsa(dp72882
S'description'
p72883
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p72884
sS'cpp_type'
p72885
S'bool'
p72886
sS'default'
p72887
S'0'
p72888
sS'name'
p72889
S'constant_on_elem'
p72890
sS'required'
p72891
I00
sS'group_name'
p72892
S'Advanced'
p72893
sa(dp72894
S'description'
p72895
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72896
sS'cpp_type'
p72897
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72898
sS'default'
p72899
g3
sS'name'
p72900
S'control_tags'
p72901
sS'required'
p72902
I00
sS'group_name'
p72903
S'Advanced'
p72904
sa(dp72905
S'description'
p72906
S'Set the enabled status of the MooseObject.\n'
p72907
sS'cpp_type'
p72908
S'bool'
p72909
sS'default'
p72910
S'1'
p72911
sS'name'
p72912
S'enable'
p72913
sS'required'
p72914
I00
sS'group_name'
p72915
S'Advanced'
p72916
sa(dp72917
S'description'
p72918
S'Determines whether this object is calculated using an implicit or explicit form\n'
p72919
sS'cpp_type'
p72920
S'bool'
p72921
sS'default'
p72922
S'1'
p72923
sS'name'
p72924
S'implicit'
p72925
sS'required'
p72926
I00
sS'group_name'
p72927
S'Advanced'
p72928
sa(dp72929
S'description'
p72930
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p72931
sS'cpp_type'
p72932
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p72933
sS'default'
p72934
g3
sS'name'
p72935
S'initial_stress'
p72936
sS'required'
p72937
I00
sS'group_name'
p72938
Nsa(dp72939
S'description'
p72940
S'Line search bisection method maximum number of iteration\n'
p72941
sS'cpp_type'
p72942
S'unsigned int'
p72943
sS'default'
p72944
S'20'
p72945
sS'name'
p72946
S'line_search_maxiter'
p72947
sS'required'
p72948
I00
sS'group_name'
p72949
Nsa(dp72950
S'name'
p72951
S'line_search_method'
p72952
sS'cpp_type'
p72953
S'MooseEnum'
p72954
sS'default'
p72955
S'CUT_HALF'
p72956
sS'description'
p72957
S'The method used in line search\n'
p72958
sS'required'
p72959
I00
sS'options'
p72960
S'CUT_HALF BISECTION'
p72961
sS'group_name'
p72962
Nsa(dp72963
S'description'
p72964
S'Line search bisection method tolerance\n'
p72965
sS'cpp_type'
p72966
S'double'
p72967
sS'default'
p72968
S'0.5'
p72969
sS'name'
p72970
S'line_search_tol'
p72971
sS'required'
p72972
I00
sS'group_name'
p72973
Nsa(dp72974
S'description'
p72975
S'Maximum number of substep iteration\n'
p72976
sS'cpp_type'
p72977
S'unsigned int'
p72978
sS'default'
p72979
S'1'
p72980
sS'name'
p72981
S'maximum_substep_iteration'
p72982
sS'required'
p72983
I00
sS'group_name'
p72984
Nsa(dp72985
S'description'
p72986
S'Maximum number of iterations for stress update\n'
p72987
sS'cpp_type'
p72988
S'unsigned int'
p72989
sS'default'
p72990
S'100'
p72991
sS'name'
p72992
S'maxiter'
p72993
sS'required'
p72994
I00
sS'group_name'
p72995
Nsa(dp72996
S'description'
p72997
S'Maximum number of iterations for state variable update\n'
p72998
sS'cpp_type'
p72999
S'unsigned int'
p73000
sS'default'
p73001
S'100'
p73002
sS'name'
p73003
S'maxiter_state_variable'
p73004
sS'required'
p73005
I00
sS'group_name'
p73006
Nsa(dp73007
S'description'
p73008
S'Minimum line search step size\n'
p73009
sS'cpp_type'
p73010
S'double'
p73011
sS'default'
p73012
S'0.01'
p73013
sS'name'
p73014
S'min_line_search_step_size'
p73015
sS'required'
p73016
I00
sS'group_name'
p73017
Nsa(dp73018
S'description'
p73019
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73020
sS'cpp_type'
p73021
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73022
sS'default'
p73023
g3
sS'name'
p73024
S'output_properties'
p73025
sS'required'
p73026
I00
sS'group_name'
p73027
S'Outputs'
p73028
sa(dp73029
S'description'
p73030
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73031
sS'cpp_type'
p73032
S'std::vector<OutputName, std::allocator<OutputName> >'
p73033
sS'default'
p73034
S'none'
p73035
sS'name'
p73036
S'outputs'
p73037
sS'required'
p73038
I00
sS'group_name'
p73039
S'Outputs'
p73040
sa(dp73041
S'description'
p73042
S'Constitutive stress residue relative tolerance\n'
p73043
sS'cpp_type'
p73044
S'double'
p73045
sS'default'
p73046
S'1e-06'
p73047
sS'name'
p73048
S'rtol'
p73049
sS'required'
p73050
I00
sS'group_name'
p73051
Nsa(dp73052
S'description'
p73053
S'The seed for the master random number generator\n'
p73054
sS'cpp_type'
p73055
S'unsigned int'
p73056
sS'default'
p73057
S'0'
p73058
sS'name'
p73059
S'seed'
p73060
sS'required'
p73061
I00
sS'group_name'
p73062
S'Advanced'
p73063
sa(dp73064
S'description'
p73065
S'Constitutive slip system resistance relative residual tolerance\n'
p73066
sS'cpp_type'
p73067
S'double'
p73068
sS'default'
p73069
S'0.01'
p73070
sS'name'
p73071
S'stol'
p73072
sS'required'
p73073
I00
sS'group_name'
p73074
Nsa(dp73075
S'description'
p73076
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p73077
sS'cpp_type'
p73078
S'bool'
p73079
sS'default'
p73080
S'0'
p73081
sS'name'
p73082
S'store_stress_old'
p73083
sS'required'
p73084
I00
sS'group_name'
p73085
Nsa(dp73086
S'name'
p73087
S'tan_mod_type'
p73088
sS'cpp_type'
p73089
S'MooseEnum'
p73090
sS'default'
p73091
S'none'
p73092
sS'description'
p73093
S'Type of tangent moduli for preconditioner: default elastic\n'
p73094
sS'required'
p73095
I00
sS'options'
p73096
S'exact none'
p73097
sS'group_name'
p73098
Nsa(dp73099
S'description'
p73100
g3
sS'cpp_type'
p73101
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73102
sS'default'
p73103
S'FiniteStrainUObasedCP'
p73104
sS'name'
p73105
S'type'
p73106
sS'required'
p73107
I00
sS'group_name'
p73108
Nsa(dp73109
S'description'
p73110
S'List of names of user objects that define the slip rates for this material.\n'
p73111
sS'cpp_type'
p73112
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73113
sS'default'
p73114
g3
sS'name'
p73115
S'uo_slip_rates'
p73116
sS'required'
p73117
I01
sS'group_name'
p73118
Nsa(dp73119
S'description'
p73120
S'List of names of user objects that define the slip resistances for this material.\n'
p73121
sS'cpp_type'
p73122
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73123
sS'default'
p73124
g3
sS'name'
p73125
S'uo_slip_resistances'
p73126
sS'required'
p73127
I01
sS'group_name'
p73128
Nsa(dp73129
S'description'
p73130
S'List of names of user objects that define the state variable evolution rate components for this material.\n'
p73131
sS'cpp_type'
p73132
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73133
sS'default'
p73134
g3
sS'name'
p73135
S'uo_state_var_evol_rate_comps'
p73136
sS'required'
p73137
I01
sS'group_name'
p73138
Nsa(dp73139
S'description'
p73140
S'List of names of user objects that define the state variable for this material.\n'
p73141
sS'cpp_type'
p73142
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73143
sS'default'
p73144
g3
sS'name'
p73145
S'uo_state_vars'
p73146
sS'required'
p73147
I01
sS'group_name'
p73148
Nsa(dp73149
S'description'
p73150
S'Use line search in constitutive update\n'
p73151
sS'cpp_type'
p73152
S'bool'
p73153
sS'default'
p73154
S'0'
p73155
sS'name'
p73156
S'use_line_search'
p73157
sS'required'
p73158
I00
sS'group_name'
p73159
Nsa(dp73160
S'description'
p73161
S'Tolerance for residual check when variable value is zero\n'
p73162
sS'cpp_type'
p73163
S'double'
p73164
sS'default'
p73165
S'1e-12'
p73166
sS'name'
p73167
S'zero_tol'
p73168
sS'required'
p73169
I00
sS'group_name'
p73170
NsasS'name'
p73171
S'/Materials/FiniteStrainUObasedCP'
p73172
sa(dp73173
S'description'
p73174
S'Compute strain increment based on flux\n'
p73175
sS'subblocks'
p73176
NsS'parameters'
p73177
(lp73178
(dp73179
S'description'
p73180
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73181
sS'cpp_type'
p73182
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73183
sS'default'
p73184
g3
sS'name'
p73185
S'block'
p73186
sS'required'
p73187
I00
sS'group_name'
p73188
Nsa(dp73189
S'description'
p73190
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73191
sS'cpp_type'
p73192
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73193
sS'default'
p73194
g3
sS'name'
p73195
S'boundary'
p73196
sS'required'
p73197
I00
sS'group_name'
p73198
Nsa(dp73199
S'description'
p73200
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73201
sS'cpp_type'
p73202
S'bool'
p73203
sS'default'
p73204
S'1'
p73205
sS'name'
p73206
S'compute'
p73207
sS'required'
p73208
I00
sS'group_name'
p73209
Nsa(dp73210
S'description'
p73211
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73212
sS'cpp_type'
p73213
S'bool'
p73214
sS'default'
p73215
S'0'
p73216
sS'name'
p73217
S'constant_on_elem'
p73218
sS'required'
p73219
I00
sS'group_name'
p73220
S'Advanced'
p73221
sa(dp73222
S'description'
p73223
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73224
sS'cpp_type'
p73225
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73226
sS'default'
p73227
g3
sS'name'
p73228
S'control_tags'
p73229
sS'required'
p73230
I00
sS'group_name'
p73231
S'Advanced'
p73232
sa(dp73233
S'description'
p73234
S'Set the enabled status of the MooseObject.\n'
p73235
sS'cpp_type'
p73236
S'bool'
p73237
sS'default'
p73238
S'1'
p73239
sS'name'
p73240
S'enable'
p73241
sS'required'
p73242
I00
sS'group_name'
p73243
S'Advanced'
p73244
sa(dp73245
S'description'
p73246
S'Grain boundary order parameter\n'
p73247
sS'cpp_type'
p73248
S'std::vector<VariableName>'
p73249
sS'default'
p73250
g3
sS'name'
p73251
S'gb'
p73252
sS'required'
p73253
I00
sS'group_name'
p73254
Nsa(dp73255
S'description'
p73256
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73257
sS'cpp_type'
p73258
S'bool'
p73259
sS'default'
p73260
S'1'
p73261
sS'name'
p73262
S'implicit'
p73263
sS'required'
p73264
I00
sS'group_name'
p73265
S'Advanced'
p73266
sa(dp73267
S'description'
p73268
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73269
sS'cpp_type'
p73270
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73271
sS'default'
p73272
g3
sS'name'
p73273
S'output_properties'
p73274
sS'required'
p73275
I00
sS'group_name'
p73276
S'Outputs'
p73277
sa(dp73278
S'description'
p73279
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73280
sS'cpp_type'
p73281
S'std::vector<OutputName, std::allocator<OutputName> >'
p73282
sS'default'
p73283
S'none'
p73284
sS'name'
p73285
S'outputs'
p73286
sS'required'
p73287
I00
sS'group_name'
p73288
S'Outputs'
p73289
sa(dp73290
S'description'
p73291
S'Name of diffusive strain increment property\n'
p73292
sS'cpp_type'
p73293
S'MaterialPropertyName'
p73294
sS'default'
p73295
g3
sS'name'
p73296
S'property_name'
p73297
sS'required'
p73298
I01
sS'group_name'
p73299
Nsa(dp73300
S'description'
p73301
S'The seed for the master random number generator\n'
p73302
sS'cpp_type'
p73303
S'unsigned int'
p73304
sS'default'
p73305
S'0'
p73306
sS'name'
p73307
S'seed'
p73308
sS'required'
p73309
I00
sS'group_name'
p73310
S'Advanced'
p73311
sa(dp73312
S'description'
p73313
g3
sS'cpp_type'
p73314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73315
sS'default'
p73316
S'FluxBasedStrainIncrement'
p73317
sS'name'
p73318
S'type'
p73319
sS'required'
p73320
I00
sS'group_name'
p73321
Nsa(dp73322
S'description'
p73323
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73324
sS'cpp_type'
p73325
S'bool'
p73326
sS'default'
p73327
S'0'
p73328
sS'name'
p73329
S'use_displaced_mesh'
p73330
sS'required'
p73331
I00
sS'group_name'
p73332
S'Advanced'
p73333
sa(dp73334
S'description'
p73335
S'x or 0-direction component of flux\n'
p73336
sS'cpp_type'
p73337
S'std::vector<VariableName>'
p73338
sS'default'
p73339
g3
sS'name'
p73340
S'xflux'
p73341
sS'required'
p73342
I01
sS'group_name'
p73343
Nsa(dp73344
S'description'
p73345
S'y or 1-direction component of flux\n'
p73346
sS'cpp_type'
p73347
S'std::vector<VariableName>'
p73348
sS'default'
p73349
g3
sS'name'
p73350
S'yflux'
p73351
sS'required'
p73352
I00
sS'group_name'
p73353
Nsa(dp73354
S'description'
p73355
S'z or 2-direction component of flux\n'
p73356
sS'cpp_type'
p73357
S'std::vector<VariableName>'
p73358
sS'default'
p73359
g3
sS'name'
p73360
S'zflux'
p73361
sS'required'
p73362
I00
sS'group_name'
p73363
NsasS'name'
p73364
S'/Materials/FluxBasedStrainIncrement'
p73365
sa(dp73366
S'description'
p73367
S'Calculating the force density acting on a grain\n'
p73368
sS'subblocks'
p73369
NsS'parameters'
p73370
(lp73371
(dp73372
S'description'
p73373
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73374
sS'cpp_type'
p73375
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73376
sS'default'
p73377
g3
sS'name'
p73378
S'block'
p73379
sS'required'
p73380
I00
sS'group_name'
p73381
Nsa(dp73382
S'description'
p73383
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73384
sS'cpp_type'
p73385
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73386
sS'default'
p73387
g3
sS'name'
p73388
S'boundary'
p73389
sS'required'
p73390
I00
sS'group_name'
p73391
Nsa(dp73392
S'description'
p73393
S'Concentration field\n'
p73394
sS'cpp_type'
p73395
S'std::vector<VariableName>'
p73396
sS'default'
p73397
g3
sS'name'
p73398
S'c'
p73399
sS'required'
p73400
I00
sS'group_name'
p73401
Nsa(dp73402
S'description'
p73403
S'Equilibrium density\n'
p73404
sS'cpp_type'
p73405
S'double'
p73406
sS'default'
p73407
S'0.9816'
p73408
sS'name'
p73409
S'ceq'
p73410
sS'required'
p73411
I00
sS'group_name'
p73412
Nsa(dp73413
S'description'
p73414
S'Thresold Concentration for GB\n'
p73415
sS'cpp_type'
p73416
S'double'
p73417
sS'default'
p73418
S'0.25'
p73419
sS'name'
p73420
S'cgb'
p73421
sS'required'
p73422
I00
sS'group_name'
p73423
Nsa(dp73424
S'description'
p73425
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73426
sS'cpp_type'
p73427
S'bool'
p73428
sS'default'
p73429
S'1'
p73430
sS'name'
p73431
S'compute'
p73432
sS'required'
p73433
I00
sS'group_name'
p73434
Nsa(dp73435
S'description'
p73436
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73437
sS'cpp_type'
p73438
S'bool'
p73439
sS'default'
p73440
S'0'
p73441
sS'name'
p73442
S'constant_on_elem'
p73443
sS'required'
p73444
I00
sS'group_name'
p73445
S'Advanced'
p73446
sa(dp73447
S'description'
p73448
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73449
sS'cpp_type'
p73450
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73451
sS'default'
p73452
g3
sS'name'
p73453
S'control_tags'
p73454
sS'required'
p73455
I00
sS'group_name'
p73456
S'Advanced'
p73457
sa(dp73458
S'description'
p73459
S'Set the enabled status of the MooseObject.\n'
p73460
sS'cpp_type'
p73461
S'bool'
p73462
sS'default'
p73463
S'1'
p73464
sS'name'
p73465
S'enable'
p73466
sS'required'
p73467
I00
sS'group_name'
p73468
S'Advanced'
p73469
sa(dp73470
S'description'
p73471
S'Array of coupled order parameters\n'
p73472
sS'cpp_type'
p73473
S'std::vector<VariableName>'
p73474
sS'default'
p73475
g3
sS'name'
p73476
S'etas'
p73477
sS'required'
p73478
I00
sS'group_name'
p73479
Nsa(dp73480
S'description'
p73481
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73482
sS'cpp_type'
p73483
S'bool'
p73484
sS'default'
p73485
S'1'
p73486
sS'name'
p73487
S'implicit'
p73488
sS'required'
p73489
I00
sS'group_name'
p73490
S'Advanced'
p73491
sa(dp73492
S'description'
p73493
S'stiffness constant\n'
p73494
sS'cpp_type'
p73495
S'double'
p73496
sS'default'
p73497
S'100'
p73498
sS'name'
p73499
S'k'
p73500
sS'required'
p73501
I00
sS'group_name'
p73502
Nsa(dp73503
S'description'
p73504
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73505
sS'cpp_type'
p73506
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73507
sS'default'
p73508
g3
sS'name'
p73509
S'output_properties'
p73510
sS'required'
p73511
I00
sS'group_name'
p73512
S'Outputs'
p73513
sa(dp73514
S'description'
p73515
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73516
sS'cpp_type'
p73517
S'std::vector<OutputName, std::allocator<OutputName> >'
p73518
sS'default'
p73519
S'none'
p73520
sS'name'
p73521
S'outputs'
p73522
sS'required'
p73523
I00
sS'group_name'
p73524
S'Outputs'
p73525
sa(dp73526
S'description'
p73527
S'The seed for the master random number generator\n'
p73528
sS'cpp_type'
p73529
S'unsigned int'
p73530
sS'default'
p73531
S'0'
p73532
sS'name'
p73533
S'seed'
p73534
sS'required'
p73535
I00
sS'group_name'
p73536
S'Advanced'
p73537
sa(dp73538
S'description'
p73539
g3
sS'cpp_type'
p73540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73541
sS'default'
p73542
S'ForceDensityMaterial'
p73543
sS'name'
p73544
S'type'
p73545
sS'required'
p73546
I00
sS'group_name'
p73547
Nsa(dp73548
S'description'
p73549
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73550
sS'cpp_type'
p73551
S'bool'
p73552
sS'default'
p73553
S'0'
p73554
sS'name'
p73555
S'use_displaced_mesh'
p73556
sS'required'
p73557
I00
sS'group_name'
p73558
S'Advanced'
p73559
sasS'name'
p73560
S'/Materials/ForceDensityMaterial'
p73561
sa(dp73562
S'description'
p73563
g3
sS'subblocks'
p73564
NsS'parameters'
p73565
(lp73566
(dp73567
S'description'
p73568
S'Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n'
p73569
sS'cpp_type'
p73570
S'FileName'
p73571
sS'default'
p73572
g3
sS'name'
p73573
S'Anisotropic_GB_file_name'
p73574
sS'required'
p73575
I01
sS'group_name'
p73576
Nsa(dp73577
S'description'
p73578
S'Temperature in Kelvin\n'
p73579
sS'cpp_type'
p73580
S'std::vector<VariableName>'
p73581
sS'default'
p73582
S'300'
p73583
sS'name'
p73584
S'T'
p73585
sS'required'
p73586
I00
sS'group_name'
p73587
Nsa(dp73588
S'description'
p73589
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73590
sS'cpp_type'
p73591
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73592
sS'default'
p73593
g3
sS'name'
p73594
S'block'
p73595
sS'required'
p73596
I00
sS'group_name'
p73597
Nsa(dp73598
S'description'
p73599
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73600
sS'cpp_type'
p73601
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73602
sS'default'
p73603
g3
sS'name'
p73604
S'boundary'
p73605
sS'required'
p73606
I00
sS'group_name'
p73607
Nsa(dp73608
S'description'
p73609
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73610
sS'cpp_type'
p73611
S'bool'
p73612
sS'default'
p73613
S'1'
p73614
sS'name'
p73615
S'compute'
p73616
sS'required'
p73617
I00
sS'group_name'
p73618
Nsa(dp73619
S'description'
p73620
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73621
sS'cpp_type'
p73622
S'bool'
p73623
sS'default'
p73624
S'0'
p73625
sS'name'
p73626
S'constant_on_elem'
p73627
sS'required'
p73628
I00
sS'group_name'
p73629
S'Advanced'
p73630
sa(dp73631
S'description'
p73632
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73633
sS'cpp_type'
p73634
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73635
sS'default'
p73636
g3
sS'name'
p73637
S'control_tags'
p73638
sS'required'
p73639
I00
sS'group_name'
p73640
S'Advanced'
p73641
sa(dp73642
S'description'
p73643
S'factor determining inclination dependence of GB mobility\n'
p73644
sS'cpp_type'
p73645
S'double'
p73646
sS'default'
p73647
S'0.1'
p73648
sS'name'
p73649
S'delta_mob'
p73650
sS'required'
p73651
I00
sS'group_name'
p73652
Nsa(dp73653
S'description'
p73654
S'factor determining inclination dependence of GB energy\n'
p73655
sS'cpp_type'
p73656
S'double'
p73657
sS'default'
p73658
S'0.1'
p73659
sS'name'
p73660
S'delta_sigma'
p73661
sS'required'
p73662
I00
sS'group_name'
p73663
Nsa(dp73664
S'description'
p73665
S'Set the enabled status of the MooseObject.\n'
p73666
sS'cpp_type'
p73667
S'bool'
p73668
sS'default'
p73669
S'1'
p73670
sS'name'
p73671
S'enable'
p73672
sS'required'
p73673
I00
sS'group_name'
p73674
S'Advanced'
p73675
sa(dp73676
S'description'
p73677
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73678
sS'cpp_type'
p73679
S'bool'
p73680
sS'default'
p73681
S'1'
p73682
sS'name'
p73683
S'implicit'
p73684
sS'required'
p73685
I00
sS'group_name'
p73686
S'Advanced'
p73687
sa(dp73688
S'description'
p73689
S'The GB anisotropy ininclination would be considered if true\n'
p73690
sS'cpp_type'
p73691
S'bool'
p73692
sS'default'
p73693
g3
sS'name'
p73694
S'inclination_anisotropy'
p73695
sS'required'
p73696
I01
sS'group_name'
p73697
Nsa(dp73698
S'description'
p73699
S'Length scale in m, where default is nm\n'
p73700
sS'cpp_type'
p73701
S'double'
p73702
sS'default'
p73703
S'1e-09'
p73704
sS'name'
p73705
S'length_scale'
p73706
sS'required'
p73707
I00
sS'group_name'
p73708
Nsa(dp73709
S'description'
p73710
S"molar volume of material in m^3/mol, by default it's the value of copper\n"
p73711
sS'cpp_type'
p73712
S'double'
p73713
sS'default'
p73714
S'7.11e-06'
p73715
sS'name'
p73716
S'molar_volume_value'
p73717
sS'required'
p73718
I00
sS'group_name'
p73719
Nsa(dp73720
S'description'
p73721
S'Array of coupled variables (num_name)\n'
p73722
sS'cpp_type'
p73723
S'unsigned int'
p73724
sS'default'
p73725
g3
sS'name'
p73726
S'op_num'
p73727
sS'required'
p73728
I00
sS'group_name'
p73729
Nsa(dp73730
S'description'
p73731
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73732
sS'cpp_type'
p73733
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73734
sS'default'
p73735
g3
sS'name'
p73736
S'output_properties'
p73737
sS'required'
p73738
I00
sS'group_name'
p73739
S'Outputs'
p73740
sa(dp73741
S'description'
p73742
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73743
sS'cpp_type'
p73744
S'std::vector<OutputName, std::allocator<OutputName> >'
p73745
sS'default'
p73746
S'none'
p73747
sS'name'
p73748
S'outputs'
p73749
sS'required'
p73750
I00
sS'group_name'
p73751
S'Outputs'
p73752
sa(dp73753
S'description'
p73754
S'The seed for the master random number generator\n'
p73755
sS'cpp_type'
p73756
S'unsigned int'
p73757
sS'default'
p73758
S'0'
p73759
sS'name'
p73760
S'seed'
p73761
sS'required'
p73762
I00
sS'group_name'
p73763
S'Advanced'
p73764
sa(dp73765
S'description'
p73766
S'Time scale in s, where default is ns\n'
p73767
sS'cpp_type'
p73768
S'double'
p73769
sS'default'
p73770
S'1e-09'
p73771
sS'name'
p73772
S'time_scale'
p73773
sS'required'
p73774
I00
sS'group_name'
p73775
Nsa(dp73776
S'description'
p73777
g3
sS'cpp_type'
p73778
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73779
sS'default'
p73780
S'GBAnisotropy'
p73781
sS'name'
p73782
S'type'
p73783
sS'required'
p73784
I00
sS'group_name'
p73785
Nsa(dp73786
S'description'
p73787
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73788
sS'cpp_type'
p73789
S'bool'
p73790
sS'default'
p73791
S'0'
p73792
sS'name'
p73793
S'use_displaced_mesh'
p73794
sS'required'
p73795
I00
sS'group_name'
p73796
S'Advanced'
p73797
sa(dp73798
S'description'
p73799
S'Array of coupled variables\n'
p73800
sS'cpp_type'
p73801
S'std::vector<VariableName>'
p73802
sS'default'
p73803
g3
sS'name'
p73804
S'v'
p73805
sS'required'
p73806
I01
sS'group_name'
p73807
Nsa(dp73808
S'description'
p73809
S'Array of coupled variables (base_name)\n'
p73810
sS'cpp_type'
p73811
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73812
sS'default'
p73813
g3
sS'name'
p73814
S'var_name_base'
p73815
sS'required'
p73816
I00
sS'group_name'
p73817
Nsa(dp73818
S'description'
p73819
S'Diffuse GB width in nm \n'
p73820
sS'cpp_type'
p73821
S'double'
p73822
sS'default'
p73823
g3
sS'name'
p73824
S'wGB'
p73825
sS'required'
p73826
I01
sS'group_name'
p73827
NsasS'name'
p73828
S'/Materials/GBAnisotropy'
p73829
sa(dp73830
S'description'
p73831
S'Compute anisotropic rank two tensor based on GB phase variable\n'
p73832
sS'subblocks'
p73833
NsS'parameters'
p73834
(lp73835
(dp73836
S'description'
p73837
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73838
sS'cpp_type'
p73839
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73840
sS'default'
p73841
g3
sS'name'
p73842
S'block'
p73843
sS'required'
p73844
I00
sS'group_name'
p73845
Nsa(dp73846
S'description'
p73847
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73848
sS'cpp_type'
p73849
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73850
sS'default'
p73851
g3
sS'name'
p73852
S'boundary'
p73853
sS'required'
p73854
I00
sS'group_name'
p73855
Nsa(dp73856
S'description'
p73857
S'Parameter value of bulk material\n'
p73858
sS'cpp_type'
p73859
S'double'
p73860
sS'default'
p73861
S'0'
p73862
sS'name'
p73863
S'bulk_parameter'
p73864
sS'required'
p73865
I00
sS'group_name'
p73866
Nsa(dp73867
S'description'
p73868
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73869
sS'cpp_type'
p73870
S'bool'
p73871
sS'default'
p73872
S'1'
p73873
sS'name'
p73874
S'compute'
p73875
sS'required'
p73876
I00
sS'group_name'
p73877
Nsa(dp73878
S'description'
p73879
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73880
sS'cpp_type'
p73881
S'bool'
p73882
sS'default'
p73883
S'0'
p73884
sS'name'
p73885
S'constant_on_elem'
p73886
sS'required'
p73887
I00
sS'group_name'
p73888
S'Advanced'
p73889
sa(dp73890
S'description'
p73891
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73892
sS'cpp_type'
p73893
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73894
sS'default'
p73895
g3
sS'name'
p73896
S'control_tags'
p73897
sS'required'
p73898
I00
sS'group_name'
p73899
S'Advanced'
p73900
sa(dp73901
S'description'
p73902
S'Set the enabled status of the MooseObject.\n'
p73903
sS'cpp_type'
p73904
S'bool'
p73905
sS'default'
p73906
S'1'
p73907
sS'name'
p73908
S'enable'
p73909
sS'required'
p73910
I00
sS'group_name'
p73911
S'Advanced'
p73912
sa(dp73913
S'description'
p73914
S'GB variable\n'
p73915
sS'cpp_type'
p73916
S'std::vector<VariableName>'
p73917
sS'default'
p73918
g3
sS'name'
p73919
S'gb'
p73920
sS'required'
p73921
I01
sS'group_name'
p73922
Nsa(dp73923
S'description'
p73924
S'Name of GB normal tensor property\n'
p73925
sS'cpp_type'
p73926
S'MaterialPropertyName'
p73927
sS'default'
p73928
g3
sS'name'
p73929
S'gb_normal_tensor_name'
p73930
sS'required'
p73931
I00
sS'group_name'
p73932
Nsa(dp73933
S'description'
p73934
S'Parameter value at GB\n'
p73935
sS'cpp_type'
p73936
S'double'
p73937
sS'default'
p73938
S'0'
p73939
sS'name'
p73940
S'gb_parameter'
p73941
sS'required'
p73942
I00
sS'group_name'
p73943
Nsa(dp73944
S'description'
p73945
S'Name of GB tensor property\n'
p73946
sS'cpp_type'
p73947
S'MaterialPropertyName'
p73948
sS'default'
p73949
g3
sS'name'
p73950
S'gb_tensor_prop_name'
p73951
sS'required'
p73952
I00
sS'group_name'
p73953
Nsa(dp73954
S'description'
p73955
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73956
sS'cpp_type'
p73957
S'bool'
p73958
sS'default'
p73959
S'1'
p73960
sS'name'
p73961
S'implicit'
p73962
sS'required'
p73963
I00
sS'group_name'
p73964
S'Advanced'
p73965
sa(dp73966
S'description'
p73967
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73968
sS'cpp_type'
p73969
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73970
sS'default'
p73971
g3
sS'name'
p73972
S'output_properties'
p73973
sS'required'
p73974
I00
sS'group_name'
p73975
S'Outputs'
p73976
sa(dp73977
S'description'
p73978
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73979
sS'cpp_type'
p73980
S'std::vector<OutputName, std::allocator<OutputName> >'
p73981
sS'default'
p73982
S'none'
p73983
sS'name'
p73984
S'outputs'
p73985
sS'required'
p73986
I00
sS'group_name'
p73987
S'Outputs'
p73988
sa(dp73989
S'description'
p73990
S'The seed for the master random number generator\n'
p73991
sS'cpp_type'
p73992
S'unsigned int'
p73993
sS'default'
p73994
S'0'
p73995
sS'name'
p73996
S'seed'
p73997
sS'required'
p73998
I00
sS'group_name'
p73999
S'Advanced'
p74000
sa(dp74001
S'description'
p74002
g3
sS'cpp_type'
p74003
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74004
sS'default'
p74005
S'GBDependentAnisotropicTensor'
p74006
sS'name'
p74007
S'type'
p74008
sS'required'
p74009
I00
sS'group_name'
p74010
Nsa(dp74011
S'description'
p74012
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74013
sS'cpp_type'
p74014
S'bool'
p74015
sS'default'
p74016
S'0'
p74017
sS'name'
p74018
S'use_displaced_mesh'
p74019
sS'required'
p74020
I00
sS'group_name'
p74021
S'Advanced'
p74022
sasS'name'
p74023
S'/Materials/GBDependentAnisotropicTensor'
p74024
sa(dp74025
S'description'
p74026
S'Compute diffusivity rank two tensor based on GB phase variable\n'
p74027
sS'subblocks'
p74028
NsS'parameters'
p74029
(lp74030
(dp74031
S'description'
p74032
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74033
sS'cpp_type'
p74034
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74035
sS'default'
p74036
g3
sS'name'
p74037
S'block'
p74038
sS'required'
p74039
I00
sS'group_name'
p74040
Nsa(dp74041
S'description'
p74042
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74043
sS'cpp_type'
p74044
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74045
sS'default'
p74046
g3
sS'name'
p74047
S'boundary'
p74048
sS'required'
p74049
I00
sS'group_name'
p74050
Nsa(dp74051
S'description'
p74052
S'Parameter value of bulk material\n'
p74053
sS'cpp_type'
p74054
S'double'
p74055
sS'default'
p74056
S'0'
p74057
sS'name'
p74058
S'bulk_parameter'
p74059
sS'required'
p74060
I00
sS'group_name'
p74061
Nsa(dp74062
S'description'
p74063
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74064
sS'cpp_type'
p74065
S'bool'
p74066
sS'default'
p74067
S'1'
p74068
sS'name'
p74069
S'compute'
p74070
sS'required'
p74071
I00
sS'group_name'
p74072
Nsa(dp74073
S'description'
p74074
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74075
sS'cpp_type'
p74076
S'bool'
p74077
sS'default'
p74078
S'0'
p74079
sS'name'
p74080
S'constant_on_elem'
p74081
sS'required'
p74082
I00
sS'group_name'
p74083
S'Advanced'
p74084
sa(dp74085
S'description'
p74086
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74087
sS'cpp_type'
p74088
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74089
sS'default'
p74090
g3
sS'name'
p74091
S'control_tags'
p74092
sS'required'
p74093
I00
sS'group_name'
p74094
S'Advanced'
p74095
sa(dp74096
S'description'
p74097
S'Set the enabled status of the MooseObject.\n'
p74098
sS'cpp_type'
p74099
S'bool'
p74100
sS'default'
p74101
S'1'
p74102
sS'name'
p74103
S'enable'
p74104
sS'required'
p74105
I00
sS'group_name'
p74106
S'Advanced'
p74107
sa(dp74108
S'description'
p74109
S'GB variable\n'
p74110
sS'cpp_type'
p74111
S'std::vector<VariableName>'
p74112
sS'default'
p74113
g3
sS'name'
p74114
S'gb'
p74115
sS'required'
p74116
I01
sS'group_name'
p74117
Nsa(dp74118
S'description'
p74119
S'Name of GB normal tensor property\n'
p74120
sS'cpp_type'
p74121
S'MaterialPropertyName'
p74122
sS'default'
p74123
g3
sS'name'
p74124
S'gb_normal_tensor_name'
p74125
sS'required'
p74126
I00
sS'group_name'
p74127
Nsa(dp74128
S'description'
p74129
S'Parameter value at GB\n'
p74130
sS'cpp_type'
p74131
S'double'
p74132
sS'default'
p74133
S'0'
p74134
sS'name'
p74135
S'gb_parameter'
p74136
sS'required'
p74137
I00
sS'group_name'
p74138
Nsa(dp74139
S'description'
p74140
S'Name of GB tensor property\n'
p74141
sS'cpp_type'
p74142
S'MaterialPropertyName'
p74143
sS'default'
p74144
g3
sS'name'
p74145
S'gb_tensor_prop_name'
p74146
sS'required'
p74147
I00
sS'group_name'
p74148
Nsa(dp74149
S'description'
p74150
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74151
sS'cpp_type'
p74152
S'bool'
p74153
sS'default'
p74154
S'1'
p74155
sS'name'
p74156
S'implicit'
p74157
sS'required'
p74158
I00
sS'group_name'
p74159
S'Advanced'
p74160
sa(dp74161
S'description'
p74162
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74163
sS'cpp_type'
p74164
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74165
sS'default'
p74166
g3
sS'name'
p74167
S'output_properties'
p74168
sS'required'
p74169
I00
sS'group_name'
p74170
S'Outputs'
p74171
sa(dp74172
S'description'
p74173
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74174
sS'cpp_type'
p74175
S'std::vector<OutputName, std::allocator<OutputName> >'
p74176
sS'default'
p74177
S'none'
p74178
sS'name'
p74179
S'outputs'
p74180
sS'required'
p74181
I00
sS'group_name'
p74182
S'Outputs'
p74183
sa(dp74184
S'description'
p74185
S'The seed for the master random number generator\n'
p74186
sS'cpp_type'
p74187
S'unsigned int'
p74188
sS'default'
p74189
S'0'
p74190
sS'name'
p74191
S'seed'
p74192
sS'required'
p74193
I00
sS'group_name'
p74194
S'Advanced'
p74195
sa(dp74196
S'description'
p74197
g3
sS'cpp_type'
p74198
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74199
sS'default'
p74200
S'GBDependentDiffusivity'
p74201
sS'name'
p74202
S'type'
p74203
sS'required'
p74204
I00
sS'group_name'
p74205
Nsa(dp74206
S'description'
p74207
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74208
sS'cpp_type'
p74209
S'bool'
p74210
sS'default'
p74211
S'0'
p74212
sS'name'
p74213
S'use_displaced_mesh'
p74214
sS'required'
p74215
I00
sS'group_name'
p74216
S'Advanced'
p74217
sasS'name'
p74218
S'/Materials/GBDependentDiffusivity'
p74219
sa(dp74220
S'description'
p74221
g3
sS'subblocks'
p74222
NsS'parameters'
p74223
(lp74224
(dp74225
S'description'
p74226
S'GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n'
p74227
sS'cpp_type'
p74228
S'double'
p74229
sS'default'
p74230
S'-1'
p74231
sS'name'
p74232
S'GBMobility'
p74233
sS'required'
p74234
I00
sS'group_name'
p74235
Nsa(dp74236
S'description'
p74237
S'Grain boundary energy in J/m^2\n'
p74238
sS'cpp_type'
p74239
S'double'
p74240
sS'default'
p74241
g3
sS'name'
p74242
S'GBenergy'
p74243
sS'required'
p74244
I01
sS'group_name'
p74245
Nsa(dp74246
S'description'
p74247
S'Grain boundary mobility prefactor in m^4/(J*s)\n'
p74248
sS'cpp_type'
p74249
S'double'
p74250
sS'default'
p74251
S'0'
p74252
sS'name'
p74253
S'GBmob0'
p74254
sS'required'
p74255
I00
sS'group_name'
p74256
Nsa(dp74257
S'description'
p74258
S'Grain boundary migration activation energy in eV\n'
p74259
sS'cpp_type'
p74260
S'double'
p74261
sS'default'
p74262
S'0'
p74263
sS'name'
p74264
S'Q'
p74265
sS'required'
p74266
I00
sS'group_name'
p74267
Nsa(dp74268
S'description'
p74269
S'Temperature in Kelvin\n'
p74270
sS'cpp_type'
p74271
S'std::vector<VariableName>'
p74272
sS'default'
p74273
g3
sS'name'
p74274
S'T'
p74275
sS'required'
p74276
I01
sS'group_name'
p74277
Nsa(dp74278
S'description'
p74279
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74280
sS'cpp_type'
p74281
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74282
sS'default'
p74283
g3
sS'name'
p74284
S'block'
p74285
sS'required'
p74286
I00
sS'group_name'
p74287
Nsa(dp74288
S'description'
p74289
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74290
sS'cpp_type'
p74291
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74292
sS'default'
p74293
g3
sS'name'
p74294
S'boundary'
p74295
sS'required'
p74296
I00
sS'group_name'
p74297
Nsa(dp74298
S'description'
p74299
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74300
sS'cpp_type'
p74301
S'bool'
p74302
sS'default'
p74303
S'1'
p74304
sS'name'
p74305
S'compute'
p74306
sS'required'
p74307
I00
sS'group_name'
p74308
Nsa(dp74309
S'description'
p74310
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74311
sS'cpp_type'
p74312
S'bool'
p74313
sS'default'
p74314
S'0'
p74315
sS'name'
p74316
S'constant_on_elem'
p74317
sS'required'
p74318
I00
sS'group_name'
p74319
S'Advanced'
p74320
sa(dp74321
S'description'
p74322
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74323
sS'cpp_type'
p74324
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74325
sS'default'
p74326
g3
sS'name'
p74327
S'control_tags'
p74328
sS'required'
p74329
I00
sS'group_name'
p74330
S'Advanced'
p74331
sa(dp74332
S'description'
p74333
S'Set the enabled status of the MooseObject.\n'
p74334
sS'cpp_type'
p74335
S'bool'
p74336
sS'default'
p74337
S'1'
p74338
sS'name'
p74339
S'enable'
p74340
sS'required'
p74341
I00
sS'group_name'
p74342
S'Advanced'
p74343
sa(dp74344
S'description'
p74345
S'The GB energy constant \n'
p74346
sS'cpp_type'
p74347
S'double'
p74348
sS'default'
p74349
S'0.125'
p74350
sS'name'
p74351
S'f0s'
p74352
sS'required'
p74353
I00
sS'group_name'
p74354
Nsa(dp74355
S'description'
p74356
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74357
sS'cpp_type'
p74358
S'bool'
p74359
sS'default'
p74360
S'1'
p74361
sS'name'
p74362
S'implicit'
p74363
sS'required'
p74364
I00
sS'group_name'
p74365
S'Advanced'
p74366
sa(dp74367
S'description'
p74368
S'Length scale in m, where default is nm\n'
p74369
sS'cpp_type'
p74370
S'double'
p74371
sS'default'
p74372
S'1e-09'
p74373
sS'name'
p74374
S'length_scale'
p74375
sS'required'
p74376
I00
sS'group_name'
p74377
Nsa(dp74378
S'description'
p74379
S'Molar volume in m^3/mol, needed for temperature gradient driving force\n'
p74380
sS'cpp_type'
p74381
S'double'
p74382
sS'default'
p74383
S'2.462e-05'
p74384
sS'name'
p74385
S'molar_volume'
p74386
sS'required'
p74387
I00
sS'group_name'
p74388
Nsa(dp74389
S'description'
p74390
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74391
sS'cpp_type'
p74392
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74393
sS'default'
p74394
g3
sS'name'
p74395
S'output_properties'
p74396
sS'required'
p74397
I00
sS'group_name'
p74398
S'Outputs'
p74399
sa(dp74400
S'description'
p74401
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74402
sS'cpp_type'
p74403
S'std::vector<OutputName, std::allocator<OutputName> >'
p74404
sS'default'
p74405
S'none'
p74406
sS'name'
p74407
S'outputs'
p74408
sS'required'
p74409
I00
sS'group_name'
p74410
S'Outputs'
p74411
sa(dp74412
S'description'
p74413
S'The seed for the master random number generator\n'
p74414
sS'cpp_type'
p74415
S'unsigned int'
p74416
sS'default'
p74417
S'0'
p74418
sS'name'
p74419
S'seed'
p74420
sS'required'
p74421
I00
sS'group_name'
p74422
S'Advanced'
p74423
sa(dp74424
S'description'
p74425
S'Time scale in s, where default is ns\n'
p74426
sS'cpp_type'
p74427
S'double'
p74428
sS'default'
p74429
S'1e-09'
p74430
sS'name'
p74431
S'time_scale'
p74432
sS'required'
p74433
I00
sS'group_name'
p74434
Nsa(dp74435
S'description'
p74436
g3
sS'cpp_type'
p74437
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74438
sS'default'
p74439
S'GBEvolution'
p74440
sS'name'
p74441
S'type'
p74442
sS'required'
p74443
I00
sS'group_name'
p74444
Nsa(dp74445
S'description'
p74446
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74447
sS'cpp_type'
p74448
S'bool'
p74449
sS'default'
p74450
S'0'
p74451
sS'name'
p74452
S'use_displaced_mesh'
p74453
sS'required'
p74454
I00
sS'group_name'
p74455
S'Advanced'
p74456
sa(dp74457
S'description'
p74458
S'Diffuse GB width in nm \n'
p74459
sS'cpp_type'
p74460
S'double'
p74461
sS'default'
p74462
g3
sS'name'
p74463
S'wGB'
p74464
sS'required'
p74465
I01
sS'group_name'
p74466
NsasS'name'
p74467
S'/Materials/GBEvolution'
p74468
sa(dp74469
S'description'
p74470
S'Compute strain increment based on lattice relaxation at GB\n'
p74471
sS'subblocks'
p74472
NsS'parameters'
p74473
(lp74474
(dp74475
S'description'
p74476
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74477
sS'cpp_type'
p74478
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74479
sS'default'
p74480
g3
sS'name'
p74481
S'block'
p74482
sS'required'
p74483
I00
sS'group_name'
p74484
Nsa(dp74485
S'description'
p74486
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74487
sS'cpp_type'
p74488
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74489
sS'default'
p74490
g3
sS'name'
p74491
S'boundary'
p74492
sS'required'
p74493
I00
sS'group_name'
p74494
Nsa(dp74495
S'description'
p74496
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74497
sS'cpp_type'
p74498
S'bool'
p74499
sS'default'
p74500
S'1'
p74501
sS'name'
p74502
S'compute'
p74503
sS'required'
p74504
I00
sS'group_name'
p74505
Nsa(dp74506
S'description'
p74507
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74508
sS'cpp_type'
p74509
S'bool'
p74510
sS'default'
p74511
S'0'
p74512
sS'name'
p74513
S'constant_on_elem'
p74514
sS'required'
p74515
I00
sS'group_name'
p74516
S'Advanced'
p74517
sa(dp74518
S'description'
p74519
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74520
sS'cpp_type'
p74521
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74522
sS'default'
p74523
g3
sS'name'
p74524
S'control_tags'
p74525
sS'required'
p74526
I00
sS'group_name'
p74527
S'Advanced'
p74528
sa(dp74529
S'description'
p74530
S'Set the enabled status of the MooseObject.\n'
p74531
sS'cpp_type'
p74532
S'bool'
p74533
sS'default'
p74534
S'1'
p74535
sS'name'
p74536
S'enable'
p74537
sS'required'
p74538
I00
sS'group_name'
p74539
S'Advanced'
p74540
sa(dp74541
S'description'
p74542
S'Name of GB normal property\n'
p74543
sS'cpp_type'
p74544
S'MaterialPropertyName'
p74545
sS'default'
p74546
g3
sS'name'
p74547
S'gb_normal_name'
p74548
sS'required'
p74549
I00
sS'group_name'
p74550
Nsa(dp74551
S'description'
p74552
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74553
sS'cpp_type'
p74554
S'bool'
p74555
sS'default'
p74556
S'1'
p74557
sS'name'
p74558
S'implicit'
p74559
sS'required'
p74560
I00
sS'group_name'
p74561
S'Advanced'
p74562
sa(dp74563
S'description'
p74564
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74565
sS'cpp_type'
p74566
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74567
sS'default'
p74568
g3
sS'name'
p74569
S'output_properties'
p74570
sS'required'
p74571
I00
sS'group_name'
p74572
S'Outputs'
p74573
sa(dp74574
S'description'
p74575
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74576
sS'cpp_type'
p74577
S'std::vector<OutputName, std::allocator<OutputName> >'
p74578
sS'default'
p74579
S'none'
p74580
sS'name'
p74581
S'outputs'
p74582
sS'required'
p74583
I00
sS'group_name'
p74584
S'Outputs'
p74585
sa(dp74586
S'description'
p74587
S'Name of perfactor property\n'
p74588
sS'cpp_type'
p74589
S'MaterialPropertyName'
p74590
sS'default'
p74591
g3
sS'name'
p74592
S'prefactor_name'
p74593
sS'required'
p74594
I00
sS'group_name'
p74595
Nsa(dp74596
S'description'
p74597
S'Name of GB relaxation strain increment property\n'
p74598
sS'cpp_type'
p74599
S'MaterialPropertyName'
p74600
sS'default'
p74601
g3
sS'name'
p74602
S'property_name'
p74603
sS'required'
p74604
I00
sS'group_name'
p74605
Nsa(dp74606
S'description'
p74607
S'The seed for the master random number generator\n'
p74608
sS'cpp_type'
p74609
S'unsigned int'
p74610
sS'default'
p74611
S'0'
p74612
sS'name'
p74613
S'seed'
p74614
sS'required'
p74615
I00
sS'group_name'
p74616
S'Advanced'
p74617
sa(dp74618
S'description'
p74619
g3
sS'cpp_type'
p74620
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74621
sS'default'
p74622
S'GBRelaxationStrainIncrement'
p74623
sS'name'
p74624
S'type'
p74625
sS'required'
p74626
I00
sS'group_name'
p74627
Nsa(dp74628
S'description'
p74629
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74630
sS'cpp_type'
p74631
S'bool'
p74632
sS'default'
p74633
S'0'
p74634
sS'name'
p74635
S'use_displaced_mesh'
p74636
sS'required'
p74637
I00
sS'group_name'
p74638
S'Advanced'
p74639
sasS'name'
p74640
S'/Materials/GBRelaxationStrainIncrement'
p74641
sa(dp74642
S'description'
p74643
g3
sS'subblocks'
p74644
NsS'parameters'
p74645
(lp74646
(dp74647
S'description'
p74648
S'Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n'
p74649
sS'cpp_type'
p74650
S'FileName'
p74651
sS'default'
p74652
g3
sS'name'
p74653
S'Anisotropic_GB_file_name'
p74654
sS'required'
p74655
I01
sS'group_name'
p74656
Nsa(dp74657
S'description'
p74658
S'Temperature in Kelvin\n'
p74659
sS'cpp_type'
p74660
S'std::vector<VariableName>'
p74661
sS'default'
p74662
S'300'
p74663
sS'name'
p74664
S'T'
p74665
sS'required'
p74666
I00
sS'group_name'
p74667
Nsa(dp74668
S'description'
p74669
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74670
sS'cpp_type'
p74671
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74672
sS'default'
p74673
g3
sS'name'
p74674
S'block'
p74675
sS'required'
p74676
I00
sS'group_name'
p74677
Nsa(dp74678
S'description'
p74679
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74680
sS'cpp_type'
p74681
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74682
sS'default'
p74683
g3
sS'name'
p74684
S'boundary'
p74685
sS'required'
p74686
I00
sS'group_name'
p74687
Nsa(dp74688
S'description'
p74689
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74690
sS'cpp_type'
p74691
S'bool'
p74692
sS'default'
p74693
S'1'
p74694
sS'name'
p74695
S'compute'
p74696
sS'required'
p74697
I00
sS'group_name'
p74698
Nsa(dp74699
S'description'
p74700
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74701
sS'cpp_type'
p74702
S'bool'
p74703
sS'default'
p74704
S'0'
p74705
sS'name'
p74706
S'constant_on_elem'
p74707
sS'required'
p74708
I00
sS'group_name'
p74709
S'Advanced'
p74710
sa(dp74711
S'description'
p74712
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74713
sS'cpp_type'
p74714
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74715
sS'default'
p74716
g3
sS'name'
p74717
S'control_tags'
p74718
sS'required'
p74719
I00
sS'group_name'
p74720
S'Advanced'
p74721
sa(dp74722
S'description'
p74723
S'factor determining inclination dependence of GB mobility\n'
p74724
sS'cpp_type'
p74725
S'double'
p74726
sS'default'
p74727
S'0.1'
p74728
sS'name'
p74729
S'delta_mob'
p74730
sS'required'
p74731
I00
sS'group_name'
p74732
Nsa(dp74733
S'description'
p74734
S'factor determining inclination dependence of GB energy\n'
p74735
sS'cpp_type'
p74736
S'double'
p74737
sS'default'
p74738
S'0.1'
p74739
sS'name'
p74740
S'delta_sigma'
p74741
sS'required'
p74742
I00
sS'group_name'
p74743
Nsa(dp74744
S'description'
p74745
S'Set the enabled status of the MooseObject.\n'
p74746
sS'cpp_type'
p74747
S'bool'
p74748
sS'default'
p74749
S'1'
p74750
sS'name'
p74751
S'enable'
p74752
sS'required'
p74753
I00
sS'group_name'
p74754
S'Advanced'
p74755
sa(dp74756
S'description'
p74757
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74758
sS'cpp_type'
p74759
S'bool'
p74760
sS'default'
p74761
S'1'
p74762
sS'name'
p74763
S'implicit'
p74764
sS'required'
p74765
I00
sS'group_name'
p74766
S'Advanced'
p74767
sa(dp74768
S'description'
p74769
S'The GB anisotropy ininclination would be considered if true\n'
p74770
sS'cpp_type'
p74771
S'bool'
p74772
sS'default'
p74773
g3
sS'name'
p74774
S'inclination_anisotropy'
p74775
sS'required'
p74776
I01
sS'group_name'
p74777
Nsa(dp74778
S'description'
p74779
S'Prefactor of gradient free energies for all i-j interfaces\n'
p74780
sS'cpp_type'
p74781
S'double'
p74782
sS'default'
p74783
g3
sS'name'
p74784
S'kappa'
p74785
sS'required'
p74786
I01
sS'group_name'
p74787
Nsa(dp74788
S'description'
p74789
S'Length scale in m, where default is nm\n'
p74790
sS'cpp_type'
p74791
S'double'
p74792
sS'default'
p74793
S'1e-09'
p74794
sS'name'
p74795
S'length_scale'
p74796
sS'required'
p74797
I00
sS'group_name'
p74798
Nsa(dp74799
S'description'
p74800
S"molar volume of material in m^3/mol, by default it's the value of copper\n"
p74801
sS'cpp_type'
p74802
S'double'
p74803
sS'default'
p74804
S'7.11e-06'
p74805
sS'name'
p74806
S'molar_volume_value'
p74807
sS'required'
p74808
I00
sS'group_name'
p74809
Nsa(dp74810
S'description'
p74811
S'Prefactor of bulk free energy\n'
p74812
sS'cpp_type'
p74813
S'double'
p74814
sS'default'
p74815
g3
sS'name'
p74816
S'mu'
p74817
sS'required'
p74818
I01
sS'group_name'
p74819
Nsa(dp74820
S'description'
p74821
S'Array of coupled variables (num_name)\n'
p74822
sS'cpp_type'
p74823
S'unsigned int'
p74824
sS'default'
p74825
g3
sS'name'
p74826
S'op_num'
p74827
sS'required'
p74828
I00
sS'group_name'
p74829
Nsa(dp74830
S'description'
p74831
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74832
sS'cpp_type'
p74833
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74834
sS'default'
p74835
g3
sS'name'
p74836
S'output_properties'
p74837
sS'required'
p74838
I00
sS'group_name'
p74839
S'Outputs'
p74840
sa(dp74841
S'description'
p74842
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74843
sS'cpp_type'
p74844
S'std::vector<OutputName, std::allocator<OutputName> >'
p74845
sS'default'
p74846
S'none'
p74847
sS'name'
p74848
S'outputs'
p74849
sS'required'
p74850
I00
sS'group_name'
p74851
S'Outputs'
p74852
sa(dp74853
S'description'
p74854
S'The seed for the master random number generator\n'
p74855
sS'cpp_type'
p74856
S'unsigned int'
p74857
sS'default'
p74858
S'0'
p74859
sS'name'
p74860
S'seed'
p74861
sS'required'
p74862
I00
sS'group_name'
p74863
S'Advanced'
p74864
sa(dp74865
S'description'
p74866
S'Time scale in s, where default is ns\n'
p74867
sS'cpp_type'
p74868
S'double'
p74869
sS'default'
p74870
S'1e-09'
p74871
sS'name'
p74872
S'time_scale'
p74873
sS'required'
p74874
I00
sS'group_name'
p74875
Nsa(dp74876
S'description'
p74877
g3
sS'cpp_type'
p74878
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74879
sS'default'
p74880
S'GBWidthAnisotropy'
p74881
sS'name'
p74882
S'type'
p74883
sS'required'
p74884
I00
sS'group_name'
p74885
Nsa(dp74886
S'description'
p74887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74888
sS'cpp_type'
p74889
S'bool'
p74890
sS'default'
p74891
S'0'
p74892
sS'name'
p74893
S'use_displaced_mesh'
p74894
sS'required'
p74895
I00
sS'group_name'
p74896
S'Advanced'
p74897
sa(dp74898
S'description'
p74899
S'Array of coupled variables\n'
p74900
sS'cpp_type'
p74901
S'std::vector<VariableName>'
p74902
sS'default'
p74903
g3
sS'name'
p74904
S'v'
p74905
sS'required'
p74906
I01
sS'group_name'
p74907
Nsa(dp74908
S'description'
p74909
S'Array of coupled variables (base_name)\n'
p74910
sS'cpp_type'
p74911
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74912
sS'default'
p74913
g3
sS'name'
p74914
S'var_name_base'
p74915
sS'required'
p74916
I00
sS'group_name'
p74917
NsasS'name'
p74918
S'/Materials/GBWidthAnisotropy'
p74919
sa(dp74920
S'description'
p74921
g3
sS'subblocks'
p74922
NsS'parameters'
p74923
(lp74924
(dp74925
S'description'
p74926
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74927
sS'cpp_type'
p74928
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74929
sS'default'
p74930
g3
sS'name'
p74931
S'block'
p74932
sS'required'
p74933
I00
sS'group_name'
p74934
Nsa(dp74935
S'description'
p74936
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74937
sS'cpp_type'
p74938
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74939
sS'default'
p74940
g3
sS'name'
p74941
S'boundary'
p74942
sS'required'
p74943
I00
sS'group_name'
p74944
Nsa(dp74945
S'description'
p74946
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74947
sS'cpp_type'
p74948
S'bool'
p74949
sS'default'
p74950
S'1'
p74951
sS'name'
p74952
S'compute'
p74953
sS'required'
p74954
I00
sS'group_name'
p74955
Nsa(dp74956
S'description'
p74957
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74958
sS'cpp_type'
p74959
S'bool'
p74960
sS'default'
p74961
S'0'
p74962
sS'name'
p74963
S'constant_on_elem'
p74964
sS'required'
p74965
I00
sS'group_name'
p74966
S'Advanced'
p74967
sa(dp74968
S'description'
p74969
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74970
sS'cpp_type'
p74971
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74972
sS'default'
p74973
g3
sS'name'
p74974
S'control_tags'
p74975
sS'required'
p74976
I00
sS'group_name'
p74977
S'Advanced'
p74978
sa(dp74979
S'description'
p74980
S'Set the enabled status of the MooseObject.\n'
p74981
sS'cpp_type'
p74982
S'bool'
p74983
sS'default'
p74984
S'1'
p74985
sS'name'
p74986
S'enable'
p74987
sS'required'
p74988
I00
sS'group_name'
p74989
S'Advanced'
p74990
sa(dp74991
S'description'
p74992
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74993
sS'cpp_type'
p74994
S'bool'
p74995
sS'default'
p74996
S'1'
p74997
sS'name'
p74998
S'implicit'
p74999
sS'required'
p75000
I00
sS'group_name'
p75001
S'Advanced'
p75002
sa(dp75003
S'description'
p75004
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75005
sS'cpp_type'
p75006
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75007
sS'default'
p75008
g3
sS'name'
p75009
S'output_properties'
p75010
sS'required'
p75011
I00
sS'group_name'
p75012
S'Outputs'
p75013
sa(dp75014
S'description'
p75015
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75016
sS'cpp_type'
p75017
S'std::vector<OutputName, std::allocator<OutputName> >'
p75018
sS'default'
p75019
S'none'
p75020
sS'name'
p75021
S'outputs'
p75022
sS'required'
p75023
I00
sS'group_name'
p75024
S'Outputs'
p75025
sa(dp75026
S'description'
p75027
S'The names of the properties this material will have\n'
p75028
sS'cpp_type'
p75029
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75030
sS'default'
p75031
g3
sS'name'
p75032
S'prop_names'
p75033
sS'required'
p75034
I00
sS'group_name'
p75035
Nsa(dp75036
S'description'
p75037
S'The values associated with the named properties\n'
p75038
sS'cpp_type'
p75039
S'std::vector<double, std::allocator<double> >'
p75040
sS'default'
p75041
g3
sS'name'
p75042
S'prop_values'
p75043
sS'required'
p75044
I00
sS'group_name'
p75045
Nsa(dp75046
S'description'
p75047
S'The seed for the master random number generator\n'
p75048
sS'cpp_type'
p75049
S'unsigned int'
p75050
sS'default'
p75051
S'0'
p75052
sS'name'
p75053
S'seed'
p75054
sS'required'
p75055
I00
sS'group_name'
p75056
S'Advanced'
p75057
sa(dp75058
S'description'
p75059
g3
sS'cpp_type'
p75060
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75061
sS'default'
p75062
S'GenericConstantMaterial'
p75063
sS'name'
p75064
S'type'
p75065
sS'required'
p75066
I00
sS'group_name'
p75067
Nsa(dp75068
S'description'
p75069
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75070
sS'cpp_type'
p75071
S'bool'
p75072
sS'default'
p75073
S'0'
p75074
sS'name'
p75075
S'use_displaced_mesh'
p75076
sS'required'
p75077
I00
sS'group_name'
p75078
S'Advanced'
p75079
sasS'name'
p75080
S'/Materials/GenericConstantMaterial'
p75081
sa(dp75082
S'description'
p75083
g3
sS'subblocks'
p75084
NsS'parameters'
p75085
(lp75086
(dp75087
S'description'
p75088
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75089
sS'cpp_type'
p75090
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75091
sS'default'
p75092
g3
sS'name'
p75093
S'block'
p75094
sS'required'
p75095
I00
sS'group_name'
p75096
Nsa(dp75097
S'description'
p75098
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75099
sS'cpp_type'
p75100
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75101
sS'default'
p75102
g3
sS'name'
p75103
S'boundary'
p75104
sS'required'
p75105
I00
sS'group_name'
p75106
Nsa(dp75107
S'description'
p75108
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75109
sS'cpp_type'
p75110
S'bool'
p75111
sS'default'
p75112
S'1'
p75113
sS'name'
p75114
S'compute'
p75115
sS'required'
p75116
I00
sS'group_name'
p75117
Nsa(dp75118
S'description'
p75119
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75120
sS'cpp_type'
p75121
S'bool'
p75122
sS'default'
p75123
S'0'
p75124
sS'name'
p75125
S'constant_on_elem'
p75126
sS'required'
p75127
I00
sS'group_name'
p75128
S'Advanced'
p75129
sa(dp75130
S'description'
p75131
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75132
sS'cpp_type'
p75133
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75134
sS'default'
p75135
g3
sS'name'
p75136
S'control_tags'
p75137
sS'required'
p75138
I00
sS'group_name'
p75139
S'Advanced'
p75140
sa(dp75141
S'description'
p75142
S'Set the enabled status of the MooseObject.\n'
p75143
sS'cpp_type'
p75144
S'bool'
p75145
sS'default'
p75146
S'1'
p75147
sS'name'
p75148
S'enable'
p75149
sS'required'
p75150
I00
sS'group_name'
p75151
S'Advanced'
p75152
sa(dp75153
S'description'
p75154
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75155
sS'cpp_type'
p75156
S'bool'
p75157
sS'default'
p75158
S'1'
p75159
sS'name'
p75160
S'implicit'
p75161
sS'required'
p75162
I00
sS'group_name'
p75163
S'Advanced'
p75164
sa(dp75165
S'description'
p75166
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75167
sS'cpp_type'
p75168
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75169
sS'default'
p75170
g3
sS'name'
p75171
S'output_properties'
p75172
sS'required'
p75173
I00
sS'group_name'
p75174
S'Outputs'
p75175
sa(dp75176
S'description'
p75177
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75178
sS'cpp_type'
p75179
S'std::vector<OutputName, std::allocator<OutputName> >'
p75180
sS'default'
p75181
S'none'
p75182
sS'name'
p75183
S'outputs'
p75184
sS'required'
p75185
I00
sS'group_name'
p75186
S'Outputs'
p75187
sa(dp75188
S'description'
p75189
S'The seed for the master random number generator\n'
p75190
sS'cpp_type'
p75191
S'unsigned int'
p75192
sS'default'
p75193
S'0'
p75194
sS'name'
p75195
S'seed'
p75196
sS'required'
p75197
I00
sS'group_name'
p75198
S'Advanced'
p75199
sa(dp75200
S'description'
p75201
S'Name of the tensor material property to be created\n'
p75202
sS'cpp_type'
p75203
S'MaterialPropertyName'
p75204
sS'default'
p75205
g3
sS'name'
p75206
S'tensor_name'
p75207
sS'required'
p75208
I01
sS'group_name'
p75209
Nsa(dp75210
S'description'
p75211
S'Vector of values defining the constant rank two tensor\n'
p75212
sS'cpp_type'
p75213
S'std::vector<double, std::allocator<double> >'
p75214
sS'default'
p75215
g3
sS'name'
p75216
S'tensor_values'
p75217
sS'required'
p75218
I01
sS'group_name'
p75219
Nsa(dp75220
S'description'
p75221
g3
sS'cpp_type'
p75222
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75223
sS'default'
p75224
S'GenericConstantRankTwoTensor'
p75225
sS'name'
p75226
S'type'
p75227
sS'required'
p75228
I00
sS'group_name'
p75229
Nsa(dp75230
S'description'
p75231
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75232
sS'cpp_type'
p75233
S'bool'
p75234
sS'default'
p75235
S'0'
p75236
sS'name'
p75237
S'use_displaced_mesh'
p75238
sS'required'
p75239
I00
sS'group_name'
p75240
S'Advanced'
p75241
sasS'name'
p75242
S'/Materials/GenericConstantRankTwoTensor'
p75243
sa(dp75244
S'description'
p75245
g3
sS'subblocks'
p75246
NsS'parameters'
p75247
(lp75248
(dp75249
S'description'
p75250
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75251
sS'cpp_type'
p75252
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75253
sS'default'
p75254
g3
sS'name'
p75255
S'block'
p75256
sS'required'
p75257
I00
sS'group_name'
p75258
Nsa(dp75259
S'description'
p75260
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75261
sS'cpp_type'
p75262
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75263
sS'default'
p75264
g3
sS'name'
p75265
S'boundary'
p75266
sS'required'
p75267
I00
sS'group_name'
p75268
Nsa(dp75269
S'description'
p75270
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75271
sS'cpp_type'
p75272
S'bool'
p75273
sS'default'
p75274
S'1'
p75275
sS'name'
p75276
S'compute'
p75277
sS'required'
p75278
I00
sS'group_name'
p75279
Nsa(dp75280
S'description'
p75281
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75282
sS'cpp_type'
p75283
S'bool'
p75284
sS'default'
p75285
S'0'
p75286
sS'name'
p75287
S'constant_on_elem'
p75288
sS'required'
p75289
I00
sS'group_name'
p75290
S'Advanced'
p75291
sa(dp75292
S'description'
p75293
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75294
sS'cpp_type'
p75295
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75296
sS'default'
p75297
g3
sS'name'
p75298
S'control_tags'
p75299
sS'required'
p75300
I00
sS'group_name'
p75301
S'Advanced'
p75302
sa(dp75303
S'description'
p75304
S'Set the enabled status of the MooseObject.\n'
p75305
sS'cpp_type'
p75306
S'bool'
p75307
sS'default'
p75308
S'1'
p75309
sS'name'
p75310
S'enable'
p75311
sS'required'
p75312
I00
sS'group_name'
p75313
S'Advanced'
p75314
sa(dp75315
S'description'
p75316
S'Enable the declaration of old and older values\n'
p75317
sS'cpp_type'
p75318
S'bool'
p75319
sS'default'
p75320
S'0'
p75321
sS'name'
p75322
S'enable_stateful'
p75323
sS'required'
p75324
I00
sS'group_name'
p75325
Nsa(dp75326
S'description'
p75327
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75328
sS'cpp_type'
p75329
S'bool'
p75330
sS'default'
p75331
S'1'
p75332
sS'name'
p75333
S'implicit'
p75334
sS'required'
p75335
I00
sS'group_name'
p75336
S'Advanced'
p75337
sa(dp75338
S'description'
p75339
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75340
sS'cpp_type'
p75341
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75342
sS'default'
p75343
g3
sS'name'
p75344
S'output_properties'
p75345
sS'required'
p75346
I00
sS'group_name'
p75347
S'Outputs'
p75348
sa(dp75349
S'description'
p75350
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75351
sS'cpp_type'
p75352
S'std::vector<OutputName, std::allocator<OutputName> >'
p75353
sS'default'
p75354
S'none'
p75355
sS'name'
p75356
S'outputs'
p75357
sS'required'
p75358
I00
sS'group_name'
p75359
S'Outputs'
p75360
sa(dp75361
S'description'
p75362
S'The names of the properties this material will have\n'
p75363
sS'cpp_type'
p75364
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75365
sS'default'
p75366
g3
sS'name'
p75367
S'prop_names'
p75368
sS'required'
p75369
I00
sS'group_name'
p75370
Nsa(dp75371
S'description'
p75372
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p75373
sS'cpp_type'
p75374
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75375
sS'default'
p75376
g3
sS'name'
p75377
S'prop_values'
p75378
sS'required'
p75379
I00
sS'group_name'
p75380
Nsa(dp75381
S'description'
p75382
S'The seed for the master random number generator\n'
p75383
sS'cpp_type'
p75384
S'unsigned int'
p75385
sS'default'
p75386
S'0'
p75387
sS'name'
p75388
S'seed'
p75389
sS'required'
p75390
I00
sS'group_name'
p75391
S'Advanced'
p75392
sa(dp75393
S'description'
p75394
g3
sS'cpp_type'
p75395
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75396
sS'default'
p75397
S'GenericFunctionMaterial'
p75398
sS'name'
p75399
S'type'
p75400
sS'required'
p75401
I00
sS'group_name'
p75402
Nsa(dp75403
S'description'
p75404
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75405
sS'cpp_type'
p75406
S'bool'
p75407
sS'default'
p75408
S'0'
p75409
sS'name'
p75410
S'use_displaced_mesh'
p75411
sS'required'
p75412
I00
sS'group_name'
p75413
S'Advanced'
p75414
sasS'name'
p75415
S'/Materials/GenericFunctionMaterial'
p75416
sa(dp75417
S'description'
p75418
S'Calculation the advection velocity of grain due to rigid vody translation and rotation\n'
p75419
sS'subblocks'
p75420
NsS'parameters'
p75421
(lp75422
(dp75423
S'description'
p75424
S'Optional parameter that allows the user to define type of force density under consideration\n'
p75425
sS'cpp_type'
p75426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75427
sS'default'
p75428
g3
sS'name'
p75429
S'base_name'
p75430
sS'required'
p75431
I00
sS'group_name'
p75432
Nsa(dp75433
S'description'
p75434
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75435
sS'cpp_type'
p75436
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75437
sS'default'
p75438
g3
sS'name'
p75439
S'block'
p75440
sS'required'
p75441
I00
sS'group_name'
p75442
Nsa(dp75443
S'description'
p75444
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75445
sS'cpp_type'
p75446
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75447
sS'default'
p75448
g3
sS'name'
p75449
S'boundary'
p75450
sS'required'
p75451
I00
sS'group_name'
p75452
Nsa(dp75453
S'description'
p75454
S'Concentration field\n'
p75455
sS'cpp_type'
p75456
S'std::vector<VariableName>'
p75457
sS'default'
p75458
g3
sS'name'
p75459
S'c'
p75460
sS'required'
p75461
I00
sS'group_name'
p75462
Nsa(dp75463
S'description'
p75464
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75465
sS'cpp_type'
p75466
S'bool'
p75467
sS'default'
p75468
S'1'
p75469
sS'name'
p75470
S'compute'
p75471
sS'required'
p75472
I00
sS'group_name'
p75473
Nsa(dp75474
S'description'
p75475
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75476
sS'cpp_type'
p75477
S'bool'
p75478
sS'default'
p75479
S'0'
p75480
sS'name'
p75481
S'constant_on_elem'
p75482
sS'required'
p75483
I00
sS'group_name'
p75484
S'Advanced'
p75485
sa(dp75486
S'description'
p75487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75488
sS'cpp_type'
p75489
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75490
sS'default'
p75491
g3
sS'name'
p75492
S'control_tags'
p75493
sS'required'
p75494
I00
sS'group_name'
p75495
S'Advanced'
p75496
sa(dp75497
S'description'
p75498
S'Set the enabled status of the MooseObject.\n'
p75499
sS'cpp_type'
p75500
S'bool'
p75501
sS'default'
p75502
S'1'
p75503
sS'name'
p75504
S'enable'
p75505
sS'required'
p75506
I00
sS'group_name'
p75507
S'Advanced'
p75508
sa(dp75509
S'description'
p75510
S'Array of other coupled order parameters\n'
p75511
sS'cpp_type'
p75512
S'std::vector<VariableName>'
p75513
sS'default'
p75514
g3
sS'name'
p75515
S'etas'
p75516
sS'required'
p75517
I01
sS'group_name'
p75518
Nsa(dp75519
S'description'
p75520
S'UserObject for getting the center of mass of grains\n'
p75521
sS'cpp_type'
p75522
S'UserObjectName'
p75523
sS'default'
p75524
g3
sS'name'
p75525
S'grain_data'
p75526
sS'required'
p75527
I00
sS'group_name'
p75528
Nsa(dp75529
S'description'
p75530
S'userobject for getting force and torque acting on grains\n'
p75531
sS'cpp_type'
p75532
S'UserObjectName'
p75533
sS'default'
p75534
g3
sS'name'
p75535
S'grain_force'
p75536
sS'required'
p75537
I00
sS'group_name'
p75538
Nsa(dp75539
S'description'
p75540
S'The feature volume VectorPostprocessorValue.\n'
p75541
sS'cpp_type'
p75542
S'VectorPostprocessorName'
p75543
sS'default'
p75544
g3
sS'name'
p75545
S'grain_volumes'
p75546
sS'required'
p75547
I00
sS'group_name'
p75548
Nsa(dp75549
S'description'
p75550
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75551
sS'cpp_type'
p75552
S'bool'
p75553
sS'default'
p75554
S'1'
p75555
sS'name'
p75556
S'implicit'
p75557
sS'required'
p75558
I00
sS'group_name'
p75559
S'Advanced'
p75560
sa(dp75561
S'description'
p75562
S'Array of other coupled order parameters (num_name)\n'
p75563
sS'cpp_type'
p75564
S'unsigned int'
p75565
sS'default'
p75566
g3
sS'name'
p75567
S'op_num'
p75568
sS'required'
p75569
I00
sS'group_name'
p75570
Nsa(dp75571
S'description'
p75572
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75573
sS'cpp_type'
p75574
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75575
sS'default'
p75576
g3
sS'name'
p75577
S'output_properties'
p75578
sS'required'
p75579
I00
sS'group_name'
p75580
S'Outputs'
p75581
sa(dp75582
S'description'
p75583
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75584
sS'cpp_type'
p75585
S'std::vector<OutputName, std::allocator<OutputName> >'
p75586
sS'default'
p75587
S'none'
p75588
sS'name'
p75589
S'outputs'
p75590
sS'required'
p75591
I00
sS'group_name'
p75592
S'Outputs'
p75593
sa(dp75594
S'description'
p75595
S'constant value characterizing grain rotation\n'
p75596
sS'cpp_type'
p75597
S'double'
p75598
sS'default'
p75599
S'1'
p75600
sS'name'
p75601
S'rotation_constant'
p75602
sS'required'
p75603
I00
sS'group_name'
p75604
Nsa(dp75605
S'description'
p75606
S'The seed for the master random number generator\n'
p75607
sS'cpp_type'
p75608
S'unsigned int'
p75609
sS'default'
p75610
S'0'
p75611
sS'name'
p75612
S'seed'
p75613
sS'required'
p75614
I00
sS'group_name'
p75615
S'Advanced'
p75616
sa(dp75617
S'description'
p75618
S'constant value characterizing grain translation\n'
p75619
sS'cpp_type'
p75620
S'double'
p75621
sS'default'
p75622
S'500'
p75623
sS'name'
p75624
S'translation_constant'
p75625
sS'required'
p75626
I00
sS'group_name'
p75627
Nsa(dp75628
S'description'
p75629
g3
sS'cpp_type'
p75630
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75631
sS'default'
p75632
S'GrainAdvectionVelocity'
p75633
sS'name'
p75634
S'type'
p75635
sS'required'
p75636
I00
sS'group_name'
p75637
Nsa(dp75638
S'description'
p75639
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75640
sS'cpp_type'
p75641
S'bool'
p75642
sS'default'
p75643
S'0'
p75644
sS'name'
p75645
S'use_displaced_mesh'
p75646
sS'required'
p75647
I00
sS'group_name'
p75648
S'Advanced'
p75649
sa(dp75650
S'description'
p75651
S'Array of other coupled order parameters (base_name)\n'
p75652
sS'cpp_type'
p75653
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75654
sS'default'
p75655
g3
sS'name'
p75656
S'var_name_base'
p75657
sS'required'
p75658
I00
sS'group_name'
p75659
NsasS'name'
p75660
S'/Materials/GrainAdvectionVelocity'
p75661
sa(dp75662
S'description'
p75663
S'Computes damaged stress and energy in the intermediate configuration assuming isotropy\n'
p75664
sS'subblocks'
p75665
NsS'parameters'
p75666
(lp75667
(dp75668
S'description'
p75669
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p75670
sS'cpp_type'
p75671
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75672
sS'default'
p75673
g3
sS'name'
p75674
S'base_name'
p75675
sS'required'
p75676
I00
sS'group_name'
p75677
Nsa(dp75678
S'description'
p75679
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75680
sS'cpp_type'
p75681
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75682
sS'default'
p75683
g3
sS'name'
p75684
S'block'
p75685
sS'required'
p75686
I00
sS'group_name'
p75687
Nsa(dp75688
S'description'
p75689
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75690
sS'cpp_type'
p75691
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75692
sS'default'
p75693
g3
sS'name'
p75694
S'boundary'
p75695
sS'required'
p75696
I00
sS'group_name'
p75697
Nsa(dp75698
S'description'
p75699
S'Damage variable\n'
p75700
sS'cpp_type'
p75701
S'std::vector<VariableName>'
p75702
sS'default'
p75703
g3
sS'name'
p75704
S'c'
p75705
sS'required'
p75706
I01
sS'group_name'
p75707
Nsa(dp75708
S'description'
p75709
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75710
sS'cpp_type'
p75711
S'bool'
p75712
sS'default'
p75713
S'1'
p75714
sS'name'
p75715
S'compute'
p75716
sS'required'
p75717
I00
sS'group_name'
p75718
Nsa(dp75719
S'description'
p75720
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75721
sS'cpp_type'
p75722
S'bool'
p75723
sS'default'
p75724
S'0'
p75725
sS'name'
p75726
S'constant_on_elem'
p75727
sS'required'
p75728
I00
sS'group_name'
p75729
S'Advanced'
p75730
sa(dp75731
S'description'
p75732
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75733
sS'cpp_type'
p75734
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75735
sS'default'
p75736
g3
sS'name'
p75737
S'control_tags'
p75738
sS'required'
p75739
I00
sS'group_name'
p75740
S'Advanced'
p75741
sa(dp75742
S'description'
p75743
S'Avoid zero after complete damage\n'
p75744
sS'cpp_type'
p75745
S'double'
p75746
sS'default'
p75747
S'1e-08'
p75748
sS'name'
p75749
S'damage_stiffness'
p75750
sS'required'
p75751
I00
sS'group_name'
p75752
Nsa(dp75753
S'description'
p75754
S'Set the enabled status of the MooseObject.\n'
p75755
sS'cpp_type'
p75756
S'bool'
p75757
sS'default'
p75758
S'1'
p75759
sS'name'
p75760
S'enable'
p75761
sS'required'
p75762
I00
sS'group_name'
p75763
S'Advanced'
p75764
sa(dp75765
S'description'
p75766
S'List of User object names that computes flow rate and derivatives\n'
p75767
sS'cpp_type'
p75768
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75769
sS'default'
p75770
g3
sS'name'
p75771
S'flow_rate_user_objects'
p75772
sS'required'
p75773
I00
sS'group_name'
p75774
Nsa(dp75775
S'description'
p75776
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75777
sS'cpp_type'
p75778
S'bool'
p75779
sS'default'
p75780
S'1'
p75781
sS'name'
p75782
S'implicit'
p75783
sS'required'
p75784
I00
sS'group_name'
p75785
S'Advanced'
p75786
sa(dp75787
S'description'
p75788
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p75789
sS'cpp_type'
p75790
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75791
sS'default'
p75792
g3
sS'name'
p75793
S'initial_stress'
p75794
sS'required'
p75795
I00
sS'group_name'
p75796
Nsa(dp75797
S'description'
p75798
S'List of User object names that computes internal variable rates and derivatives\n'
p75799
sS'cpp_type'
p75800
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75801
sS'default'
p75802
g3
sS'name'
p75803
S'internal_var_rate_user_objects'
p75804
sS'required'
p75805
I00
sS'group_name'
p75806
Nsa(dp75807
S'description'
p75808
S'List of User object names that integrates internal variables and computes derivatives\n'
p75809
sS'cpp_type'
p75810
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75811
sS'default'
p75812
g3
sS'name'
p75813
S'internal_var_user_objects'
p75814
sS'required'
p75815
I00
sS'group_name'
p75816
Nsa(dp75817
S'description'
p75818
S'Maximum number of substep iteration\n'
p75819
sS'cpp_type'
p75820
S'unsigned int'
p75821
sS'default'
p75822
S'1'
p75823
sS'name'
p75824
S'max_substep_iteration'
p75825
sS'required'
p75826
I00
sS'group_name'
p75827
Nsa(dp75828
S'description'
p75829
S'Maximum iteration for flow rate update\n'
p75830
sS'cpp_type'
p75831
S'unsigned int'
p75832
sS'default'
p75833
S'50'
p75834
sS'name'
p75835
S'maxiters'
p75836
sS'required'
p75837
I00
sS'group_name'
p75838
Nsa(dp75839
S'description'
p75840
S'Flag for numerical stiffness\n'
p75841
sS'cpp_type'
p75842
S'bool'
p75843
sS'default'
p75844
S'0'
p75845
sS'name'
p75846
S'numerical_stiffness'
p75847
sS'required'
p75848
I00
sS'group_name'
p75849
Nsa(dp75850
S'description'
p75851
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75852
sS'cpp_type'
p75853
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75854
sS'default'
p75855
g3
sS'name'
p75856
S'output_properties'
p75857
sS'required'
p75858
I00
sS'group_name'
p75859
S'Outputs'
p75860
sa(dp75861
S'description'
p75862
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75863
sS'cpp_type'
p75864
S'std::vector<OutputName, std::allocator<OutputName> >'
p75865
sS'default'
p75866
S'none'
p75867
sS'name'
p75868
S'outputs'
p75869
sS'required'
p75870
I00
sS'group_name'
p75871
S'Outputs'
p75872
sa(dp75873
S'description'
p75874
S'Perturbation scale factor\n'
p75875
sS'cpp_type'
p75876
S'double'
p75877
sS'default'
p75878
S'1e-05'
p75879
sS'name'
p75880
S'perturbation_scale_factor'
p75881
sS'required'
p75882
I00
sS'group_name'
p75883
Nsa(dp75884
S'description'
p75885
S'Absolute Tolerance for flow rate residual equation\n'
p75886
sS'cpp_type'
p75887
S'double'
p75888
sS'default'
p75889
S'1e-10'
p75890
sS'name'
p75891
S'resid_abs_tol'
p75892
sS'required'
p75893
I00
sS'group_name'
p75894
Nsa(dp75895
S'description'
p75896
S'Relative Tolerance for flow rate residual equation\n'
p75897
sS'cpp_type'
p75898
S'double'
p75899
sS'default'
p75900
S'1e-06'
p75901
sS'name'
p75902
S'resid_rel_tol'
p75903
sS'required'
p75904
I00
sS'group_name'
p75905
Nsa(dp75906
S'description'
p75907
S'The seed for the master random number generator\n'
p75908
sS'cpp_type'
p75909
S'unsigned int'
p75910
sS'default'
p75911
S'0'
p75912
sS'name'
p75913
S'seed'
p75914
sS'required'
p75915
I00
sS'group_name'
p75916
S'Advanced'
p75917
sa(dp75918
S'description'
p75919
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p75920
sS'cpp_type'
p75921
S'bool'
p75922
sS'default'
p75923
S'0'
p75924
sS'name'
p75925
S'store_stress_old'
p75926
sS'required'
p75927
I00
sS'group_name'
p75928
Nsa(dp75929
S'description'
p75930
S'List of User object names that computes strength variables and derivatives\n'
p75931
sS'cpp_type'
p75932
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75933
sS'default'
p75934
g3
sS'name'
p75935
S'strength_user_objects'
p75936
sS'required'
p75937
I00
sS'group_name'
p75938
Nsa(dp75939
S'description'
p75940
g3
sS'cpp_type'
p75941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75942
sS'default'
p75943
S'HyperElasticPhaseFieldIsoDamage'
p75944
sS'name'
p75945
S'type'
p75946
sS'required'
p75947
I00
sS'group_name'
p75948
Nsa(dp75949
S'description'
p75950
S'Perturbation value when strain value less than numerical zero\n'
p75951
sS'cpp_type'
p75952
S'double'
p75953
sS'default'
p75954
S'1e-08'
p75955
sS'name'
p75956
S'zero_perturb'
p75957
sS'required'
p75958
I00
sS'group_name'
p75959
Nsa(dp75960
S'description'
p75961
S'Tolerance for numerical zero\n'
p75962
sS'cpp_type'
p75963
S'double'
p75964
sS'default'
p75965
S'1e-12'
p75966
sS'name'
p75967
S'zero_tol'
p75968
sS'required'
p75969
I00
sS'group_name'
p75970
NsasS'name'
p75971
S'/Materials/HyperElasticPhaseFieldIsoDamage'
p75972
sa(dp75973
S'description'
p75974
S'This class uses the discrete material for a hyperbolic sine viscoplasticity model in which the effective plastic strain is solved for using a creep approach.\n'
p75975
sS'subblocks'
p75976
NsS'parameters'
p75977
(lp75978
(dp75979
S'description'
p75980
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p75981
sS'cpp_type'
p75982
S'double'
p75983
sS'default'
p75984
S'1e-20'
p75985
sS'name'
p75986
S'absolute_tolerance'
p75987
sS'required'
p75988
I00
sS'group_name'
p75989
Nsa(dp75990
S'description'
p75991
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p75992
sS'cpp_type'
p75993
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75994
sS'default'
p75995
g3
sS'name'
p75996
S'base_name'
p75997
sS'required'
p75998
I00
sS'group_name'
p75999
Nsa(dp76000
S'description'
p76001
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76002
sS'cpp_type'
p76003
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76004
sS'default'
p76005
g3
sS'name'
p76006
S'block'
p76007
sS'required'
p76008
I00
sS'group_name'
p76009
Nsa(dp76010
S'description'
p76011
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76012
sS'cpp_type'
p76013
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76014
sS'default'
p76015
g3
sS'name'
p76016
S'boundary'
p76017
sS'required'
p76018
I00
sS'group_name'
p76019
Nsa(dp76020
S'description'
p76021
S'Viscoplasticity coefficient, scales the hyperbolic function\n'
p76022
sS'cpp_type'
p76023
S'double'
p76024
sS'default'
p76025
g3
sS'name'
p76026
S'c_alpha'
p76027
sS'required'
p76028
I01
sS'group_name'
p76029
Nsa(dp76030
S'description'
p76031
S'Viscoplasticity coefficient inside the hyperbolic sin function\n'
p76032
sS'cpp_type'
p76033
S'double'
p76034
sS'default'
p76035
g3
sS'name'
p76036
S'c_beta'
p76037
sS'required'
p76038
I01
sS'group_name'
p76039
Nsa(dp76040
S'description'
p76041
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76042
sS'cpp_type'
p76043
S'bool'
p76044
sS'default'
p76045
S'0'
p76046
sS'name'
p76047
S'constant_on_elem'
p76048
sS'required'
p76049
I00
sS'group_name'
p76050
S'Advanced'
p76051
sa(dp76052
S'description'
p76053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76054
sS'cpp_type'
p76055
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76056
sS'default'
p76057
g3
sS'name'
p76058
S'control_tags'
p76059
sS'required'
p76060
I00
sS'group_name'
p76061
S'Advanced'
p76062
sa(dp76063
S'description'
p76064
S'Set the enabled status of the MooseObject.\n'
p76065
sS'cpp_type'
p76066
S'bool'
p76067
sS'default'
p76068
S'1'
p76069
sS'name'
p76070
S'enable'
p76071
sS'required'
p76072
I00
sS'group_name'
p76073
S'Advanced'
p76074
sa(dp76075
S'description'
p76076
S'Hardening slope\n'
p76077
sS'cpp_type'
p76078
S'double'
p76079
sS'default'
p76080
g3
sS'name'
p76081
S'hardening_constant'
p76082
sS'required'
p76083
I01
sS'group_name'
p76084
Nsa(dp76085
S'description'
p76086
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76087
sS'cpp_type'
p76088
S'bool'
p76089
sS'default'
p76090
S'1'
p76091
sS'name'
p76092
S'implicit'
p76093
sS'required'
p76094
I00
sS'group_name'
p76095
S'Advanced'
p76096
sa(dp76097
S'description'
p76098
S'Maximum number of newton iterations in the radial return material\n'
p76099
sS'cpp_type'
p76100
S'unsigned int'
p76101
sS'default'
p76102
S'30'
p76103
sS'name'
p76104
S'max_iterations'
p76105
sS'required'
p76106
I00
sS'group_name'
p76107
Nsa(dp76108
S'description'
p76109
S'Set true to output newton iteration information from the radial return material\n'
p76110
sS'cpp_type'
p76111
S'bool'
p76112
sS'default'
p76113
S'0'
p76114
sS'name'
p76115
S'output_iteration_info'
p76116
sS'required'
p76117
I00
sS'group_name'
p76118
Nsa(dp76119
S'description'
p76120
S'Set true to output the recompute material iteration information when a step fails\n'
p76121
sS'cpp_type'
p76122
S'bool'
p76123
sS'default'
p76124
S'0'
p76125
sS'name'
p76126
S'output_iteration_info_on_error'
p76127
sS'required'
p76128
I00
sS'group_name'
p76129
Nsa(dp76130
S'description'
p76131
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76132
sS'cpp_type'
p76133
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76134
sS'default'
p76135
g3
sS'name'
p76136
S'output_properties'
p76137
sS'required'
p76138
I00
sS'group_name'
p76139
S'Outputs'
p76140
sa(dp76141
S'description'
p76142
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76143
sS'cpp_type'
p76144
S'std::vector<OutputName, std::allocator<OutputName> >'
p76145
sS'default'
p76146
S'none'
p76147
sS'name'
p76148
S'outputs'
p76149
sS'required'
p76150
I00
sS'group_name'
p76151
S'Outputs'
p76152
sa(dp76153
S'description'
p76154
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p76155
sS'cpp_type'
p76156
S'double'
p76157
sS'default'
p76158
S'1e-08'
p76159
sS'name'
p76160
S'relative_tolerance'
p76161
sS'required'
p76162
I00
sS'group_name'
p76163
Nsa(dp76164
S'description'
p76165
S'The seed for the master random number generator\n'
p76166
sS'cpp_type'
p76167
S'unsigned int'
p76168
sS'default'
p76169
S'0'
p76170
sS'name'
p76171
S'seed'
p76172
sS'required'
p76173
I00
sS'group_name'
p76174
S'Advanced'
p76175
sa(dp76176
S'description'
p76177
g3
sS'cpp_type'
p76178
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76179
sS'default'
p76180
S'HyperbolicViscoplasticityStressUpdate'
p76181
sS'name'
p76182
S'type'
p76183
sS'required'
p76184
I00
sS'group_name'
p76185
Nsa(dp76186
S'description'
p76187
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76188
sS'cpp_type'
p76189
S'bool'
p76190
sS'default'
p76191
S'0'
p76192
sS'name'
p76193
S'use_displaced_mesh'
p76194
sS'required'
p76195
I00
sS'group_name'
p76196
S'Advanced'
p76197
sa(dp76198
S'description'
p76199
S'The point at which plastic strain begins accumulating\n'
p76200
sS'cpp_type'
p76201
S'double'
p76202
sS'default'
p76203
g3
sS'name'
p76204
S'yield_stress'
p76205
sS'required'
p76206
I01
sS'group_name'
p76207
NsasS'name'
p76208
S'/Materials/HyperbolicViscoplasticityStressUpdate'
p76209
sa(dp76210
S'description'
p76211
g3
sS'subblocks'
p76212
NsS'parameters'
p76213
(lp76214
(dp76215
S'description'
p76216
S'Ellipse semiaxis\n'
p76217
sS'cpp_type'
p76218
S'double'
p76219
sS'default'
p76220
g3
sS'name'
p76221
S'a'
p76222
sS'required'
p76223
I01
sS'group_name'
p76224
Nsa(dp76225
S'description'
p76226
S'Ellipse semiaxis\n'
p76227
sS'cpp_type'
p76228
S'double'
p76229
sS'default'
p76230
g3
sS'name'
p76231
S'b'
p76232
sS'required'
p76233
I01
sS'group_name'
p76234
Nsa(dp76235
S'description'
p76236
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76237
sS'cpp_type'
p76238
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76239
sS'default'
p76240
g3
sS'name'
p76241
S'block'
p76242
sS'required'
p76243
I00
sS'group_name'
p76244
Nsa(dp76245
S'description'
p76246
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76247
sS'cpp_type'
p76248
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76249
sS'default'
p76250
g3
sS'name'
p76251
S'boundary'
p76252
sS'required'
p76253
I00
sS'group_name'
p76254
Nsa(dp76255
S'description'
p76256
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p76257
sS'cpp_type'
p76258
S'bool'
p76259
sS'default'
p76260
S'1'
p76261
sS'name'
p76262
S'compute'
p76263
sS'required'
p76264
I00
sS'group_name'
p76265
Nsa(dp76266
S'description'
p76267
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76268
sS'cpp_type'
p76269
S'bool'
p76270
sS'default'
p76271
S'0'
p76272
sS'name'
p76273
S'constant_on_elem'
p76274
sS'required'
p76275
I00
sS'group_name'
p76276
S'Advanced'
p76277
sa(dp76278
S'description'
p76279
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76280
sS'cpp_type'
p76281
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76282
sS'default'
p76283
g3
sS'name'
p76284
S'control_tags'
p76285
sS'required'
p76286
I00
sS'group_name'
p76287
S'Advanced'
p76288
sa(dp76289
S'description'
p76290
S'Set the enabled status of the MooseObject.\n'
p76291
sS'cpp_type'
p76292
S'bool'
p76293
sS'default'
p76294
S'1'
p76295
sS'name'
p76296
S'enable'
p76297
sS'required'
p76298
I00
sS'group_name'
p76299
S'Advanced'
p76300
sa(dp76301
S'description'
p76302
S'Name of the material property where analytical elastic energies will be stored\n'
p76303
sS'cpp_type'
p76304
S'MaterialPropertyName'
p76305
sS'default'
p76306
g3
sS'name'
p76307
S'energy_name'
p76308
sS'required'
p76309
I01
sS'group_name'
p76310
Nsa(dp76311
S'description'
p76312
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76313
sS'cpp_type'
p76314
S'bool'
p76315
sS'default'
p76316
S'1'
p76317
sS'name'
p76318
S'implicit'
p76319
sS'required'
p76320
I00
sS'group_name'
p76321
S'Advanced'
p76322
sa(dp76323
S'description'
p76324
S"Lame's first parameter\n"
p76325
sS'cpp_type'
p76326
S'double'
p76327
sS'default'
p76328
g3
sS'name'
p76329
S'lambda'
p76330
sS'required'
p76331
I01
sS'group_name'
p76332
Nsa(dp76333
S'description'
p76334
S'Vector of misfit strains in order eps_11, eps_22\n'
p76335
sS'cpp_type'
p76336
S'std::vector<double, std::allocator<double> >'
p76337
sS'default'
p76338
g3
sS'name'
p76339
S'misfit_strains'
p76340
sS'required'
p76341
I01
sS'group_name'
p76342
Nsa(dp76343
S'description'
p76344
S"Shear modulus (aka Lame's second parameter)\n"
p76345
sS'cpp_type'
p76346
S'double'
p76347
sS'default'
p76348
g3
sS'name'
p76349
S'mu'
p76350
sS'required'
p76351
I01
sS'group_name'
p76352
Nsa(dp76353
S'description'
p76354
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76355
sS'cpp_type'
p76356
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76357
sS'default'
p76358
g3
sS'name'
p76359
S'output_properties'
p76360
sS'required'
p76361
I00
sS'group_name'
p76362
S'Outputs'
p76363
sa(dp76364
S'description'
p76365
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76366
sS'cpp_type'
p76367
S'std::vector<OutputName, std::allocator<OutputName> >'
p76368
sS'default'
p76369
S'none'
p76370
sS'name'
p76371
S'outputs'
p76372
sS'required'
p76373
I00
sS'group_name'
p76374
S'Outputs'
p76375
sa(dp76376
S'description'
p76377
S'The seed for the master random number generator\n'
p76378
sS'cpp_type'
p76379
S'unsigned int'
p76380
sS'default'
p76381
S'0'
p76382
sS'name'
p76383
S'seed'
p76384
sS'required'
p76385
I00
sS'group_name'
p76386
S'Advanced'
p76387
sa(dp76388
S'description'
p76389
S'Name of the material property where analytical total strains will be stored\n'
p76390
sS'cpp_type'
p76391
S'MaterialPropertyName'
p76392
sS'default'
p76393
g3
sS'name'
p76394
S'strain_name'
p76395
sS'required'
p76396
I01
sS'group_name'
p76397
Nsa(dp76398
S'description'
p76399
S'Name of the material property where analytical stresses will be stored\n'
p76400
sS'cpp_type'
p76401
S'MaterialPropertyName'
p76402
sS'default'
p76403
g3
sS'name'
p76404
S'stress_name'
p76405
sS'required'
p76406
I01
sS'group_name'
p76407
Nsa(dp76408
S'description'
p76409
g3
sS'cpp_type'
p76410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76411
sS'default'
p76412
S'InclusionProperties'
p76413
sS'name'
p76414
S'type'
p76415
sS'required'
p76416
I00
sS'group_name'
p76417
Nsa(dp76418
S'description'
p76419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76420
sS'cpp_type'
p76421
S'bool'
p76422
sS'default'
p76423
S'0'
p76424
sS'name'
p76425
S'use_displaced_mesh'
p76426
sS'required'
p76427
I00
sS'group_name'
p76428
S'Advanced'
p76429
sasS'name'
p76430
S'/Materials/InclusionProperties'
p76431
sa(dp76432
S'description'
p76433
g3
sS'subblocks'
p76434
NsS'parameters'
p76435
(lp76436
(dp76437
S'description'
p76438
S'Strength of the anisotropy (typically < 0.05)\n'
p76439
sS'cpp_type'
p76440
S'double'
p76441
sS'default'
p76442
S'0.04'
p76443
sS'name'
p76444
S'anisotropy_strength'
p76445
sS'required'
p76446
I00
sS'group_name'
p76447
Nsa(dp76448
S'description'
p76449
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76450
sS'cpp_type'
p76451
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76452
sS'default'
p76453
g3
sS'name'
p76454
S'block'
p76455
sS'required'
p76456
I00
sS'group_name'
p76457
Nsa(dp76458
S'description'
p76459
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76460
sS'cpp_type'
p76461
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76462
sS'default'
p76463
g3
sS'name'
p76464
S'boundary'
p76465
sS'required'
p76466
I00
sS'group_name'
p76467
Nsa(dp76468
S'description'
p76469
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p76470
sS'cpp_type'
p76471
S'bool'
p76472
sS'default'
p76473
S'1'
p76474
sS'name'
p76475
S'compute'
p76476
sS'required'
p76477
I00
sS'group_name'
p76478
Nsa(dp76479
S'description'
p76480
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76481
sS'cpp_type'
p76482
S'bool'
p76483
sS'default'
p76484
S'0'
p76485
sS'name'
p76486
S'constant_on_elem'
p76487
sS'required'
p76488
I00
sS'group_name'
p76489
S'Advanced'
p76490
sa(dp76491
S'description'
p76492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76493
sS'cpp_type'
p76494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76495
sS'default'
p76496
g3
sS'name'
p76497
S'control_tags'
p76498
sS'required'
p76499
I00
sS'group_name'
p76500
S'Advanced'
p76501
sa(dp76502
S'description'
p76503
S'Set the enabled status of the MooseObject.\n'
p76504
sS'cpp_type'
p76505
S'bool'
p76506
sS'default'
p76507
S'1'
p76508
sS'name'
p76509
S'enable'
p76510
sS'required'
p76511
I00
sS'group_name'
p76512
S'Advanced'
p76513
sa(dp76514
S'description'
p76515
S'Average value of the interface parameter epsilon\n'
p76516
sS'cpp_type'
p76517
S'double'
p76518
sS'default'
p76519
S'0.01'
p76520
sS'name'
p76521
S'eps_bar'
p76522
sS'required'
p76523
I00
sS'group_name'
p76524
Nsa(dp76525
S'description'
p76526
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76527
sS'cpp_type'
p76528
S'bool'
p76529
sS'default'
p76530
S'1'
p76531
sS'name'
p76532
S'implicit'
p76533
sS'required'
p76534
I00
sS'group_name'
p76535
S'Advanced'
p76536
sa(dp76537
S'description'
p76538
S'Mode number for anisotropy\n'
p76539
sS'cpp_type'
p76540
S'unsigned int'
p76541
sS'default'
p76542
S'6'
p76543
sS'name'
p76544
S'mode_number'
p76545
sS'required'
p76546
I00
sS'group_name'
p76547
Nsa(dp76548
S'description'
p76549
S'Order parameter defining the solid phase\n'
p76550
sS'cpp_type'
p76551
S'std::vector<VariableName>'
p76552
sS'default'
p76553
g3
sS'name'
p76554
S'op'
p76555
sS'required'
p76556
I01
sS'group_name'
p76557
Nsa(dp76558
S'description'
p76559
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76560
sS'cpp_type'
p76561
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76562
sS'default'
p76563
g3
sS'name'
p76564
S'output_properties'
p76565
sS'required'
p76566
I00
sS'group_name'
p76567
S'Outputs'
p76568
sa(dp76569
S'description'
p76570
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76571
sS'cpp_type'
p76572
S'std::vector<OutputName, std::allocator<OutputName> >'
p76573
sS'default'
p76574
S'none'
p76575
sS'name'
p76576
S'outputs'
p76577
sS'required'
p76578
I00
sS'group_name'
p76579
S'Outputs'
p76580
sa(dp76581
S'description'
p76582
S'Reference angle for defining anistropy in degrees\n'
p76583
sS'cpp_type'
p76584
S'double'
p76585
sS'default'
p76586
S'90'
p76587
sS'name'
p76588
S'reference_angle'
p76589
sS'required'
p76590
I00
sS'group_name'
p76591
Nsa(dp76592
S'description'
p76593
S'The seed for the master random number generator\n'
p76594
sS'cpp_type'
p76595
S'unsigned int'
p76596
sS'default'
p76597
S'0'
p76598
sS'name'
p76599
S'seed'
p76600
sS'required'
p76601
I00
sS'group_name'
p76602
S'Advanced'
p76603
sa(dp76604
S'description'
p76605
g3
sS'cpp_type'
p76606
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76607
sS'default'
p76608
S'InterfaceOrientationMaterial'
p76609
sS'name'
p76610
S'type'
p76611
sS'required'
p76612
I00
sS'group_name'
p76613
Nsa(dp76614
S'description'
p76615
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76616
sS'cpp_type'
p76617
S'bool'
p76618
sS'default'
p76619
S'0'
p76620
sS'name'
p76621
S'use_displaced_mesh'
p76622
sS'required'
p76623
I00
sS'group_name'
p76624
S'Advanced'
p76625
sasS'name'
p76626
S'/Materials/InterfaceOrientationMaterial'
p76627
sa(dp76628
S'description'
p76629
S'This class uses the discrete material in a radial return isotropic plasticity model.  This class is one of the basic radial return constitutive models, yet it can be used in conjunction with other creep and plasticity materials for more complex simulations.\n'
p76630
sS'subblocks'
p76631
NsS'parameters'
p76632
(lp76633
(dp76634
S'description'
p76635
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p76636
sS'cpp_type'
p76637
S'double'
p76638
sS'default'
p76639
S'1e-20'
p76640
sS'name'
p76641
S'absolute_tolerance'
p76642
sS'required'
p76643
I00
sS'group_name'
p76644
Nsa(dp76645
S'description'
p76646
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p76647
sS'cpp_type'
p76648
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76649
sS'default'
p76650
g3
sS'name'
p76651
S'base_name'
p76652
sS'required'
p76653
I00
sS'group_name'
p76654
Nsa(dp76655
S'description'
p76656
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76657
sS'cpp_type'
p76658
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76659
sS'default'
p76660
g3
sS'name'
p76661
S'block'
p76662
sS'required'
p76663
I00
sS'group_name'
p76664
Nsa(dp76665
S'description'
p76666
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76667
sS'cpp_type'
p76668
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76669
sS'default'
p76670
g3
sS'name'
p76671
S'boundary'
p76672
sS'required'
p76673
I00
sS'group_name'
p76674
Nsa(dp76675
S'description'
p76676
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76677
sS'cpp_type'
p76678
S'bool'
p76679
sS'default'
p76680
S'0'
p76681
sS'name'
p76682
S'constant_on_elem'
p76683
sS'required'
p76684
I00
sS'group_name'
p76685
S'Advanced'
p76686
sa(dp76687
S'description'
p76688
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76689
sS'cpp_type'
p76690
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76691
sS'default'
p76692
g3
sS'name'
p76693
S'control_tags'
p76694
sS'required'
p76695
I00
sS'group_name'
p76696
S'Advanced'
p76697
sa(dp76698
S'description'
p76699
S'Set the enabled status of the MooseObject.\n'
p76700
sS'cpp_type'
p76701
S'bool'
p76702
sS'default'
p76703
S'1'
p76704
sS'name'
p76705
S'enable'
p76706
sS'required'
p76707
I00
sS'group_name'
p76708
S'Advanced'
p76709
sa(dp76710
S'description'
p76711
S'Hardening slope\n'
p76712
sS'cpp_type'
p76713
S'double'
p76714
sS'default'
p76715
S'0'
p76716
sS'name'
p76717
S'hardening_constant'
p76718
sS'required'
p76719
I00
sS'group_name'
p76720
Nsa(dp76721
S'description'
p76722
S'True stress as a function of plastic strain\n'
p76723
sS'cpp_type'
p76724
S'FunctionName'
p76725
sS'default'
p76726
g3
sS'name'
p76727
S'hardening_function'
p76728
sS'required'
p76729
I00
sS'group_name'
p76730
Nsa(dp76731
S'description'
p76732
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76733
sS'cpp_type'
p76734
S'bool'
p76735
sS'default'
p76736
S'1'
p76737
sS'name'
p76738
S'implicit'
p76739
sS'required'
p76740
I00
sS'group_name'
p76741
S'Advanced'
p76742
sa(dp76743
S'description'
p76744
S'Maximum number of newton iterations in the radial return material\n'
p76745
sS'cpp_type'
p76746
S'unsigned int'
p76747
sS'default'
p76748
S'30'
p76749
sS'name'
p76750
S'max_iterations'
p76751
sS'required'
p76752
I00
sS'group_name'
p76753
Nsa(dp76754
S'description'
p76755
S'Set true to output newton iteration information from the radial return material\n'
p76756
sS'cpp_type'
p76757
S'bool'
p76758
sS'default'
p76759
S'0'
p76760
sS'name'
p76761
S'output_iteration_info'
p76762
sS'required'
p76763
I00
sS'group_name'
p76764
Nsa(dp76765
S'description'
p76766
S'Set true to output the recompute material iteration information when a step fails\n'
p76767
sS'cpp_type'
p76768
S'bool'
p76769
sS'default'
p76770
S'0'
p76771
sS'name'
p76772
S'output_iteration_info_on_error'
p76773
sS'required'
p76774
I00
sS'group_name'
p76775
Nsa(dp76776
S'description'
p76777
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76778
sS'cpp_type'
p76779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76780
sS'default'
p76781
g3
sS'name'
p76782
S'output_properties'
p76783
sS'required'
p76784
I00
sS'group_name'
p76785
S'Outputs'
p76786
sa(dp76787
S'description'
p76788
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76789
sS'cpp_type'
p76790
S'std::vector<OutputName, std::allocator<OutputName> >'
p76791
sS'default'
p76792
S'none'
p76793
sS'name'
p76794
S'outputs'
p76795
sS'required'
p76796
I00
sS'group_name'
p76797
S'Outputs'
p76798
sa(dp76799
S'description'
p76800
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p76801
sS'cpp_type'
p76802
S'double'
p76803
sS'default'
p76804
S'1e-08'
p76805
sS'name'
p76806
S'relative_tolerance'
p76807
sS'required'
p76808
I00
sS'group_name'
p76809
Nsa(dp76810
S'description'
p76811
S'The seed for the master random number generator\n'
p76812
sS'cpp_type'
p76813
S'unsigned int'
p76814
sS'default'
p76815
S'0'
p76816
sS'name'
p76817
S'seed'
p76818
sS'required'
p76819
I00
sS'group_name'
p76820
S'Advanced'
p76821
sa(dp76822
S'description'
p76823
S'Coupled Temperature\n'
p76824
sS'cpp_type'
p76825
S'std::vector<VariableName>'
p76826
sS'default'
p76827
S'0'
p76828
sS'name'
p76829
S'temperature'
p76830
sS'required'
p76831
I00
sS'group_name'
p76832
Nsa(dp76833
S'description'
p76834
g3
sS'cpp_type'
p76835
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76836
sS'default'
p76837
S'IsotropicPlasticityStressUpdate'
p76838
sS'name'
p76839
S'type'
p76840
sS'required'
p76841
I00
sS'group_name'
p76842
Nsa(dp76843
S'description'
p76844
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76845
sS'cpp_type'
p76846
S'bool'
p76847
sS'default'
p76848
S'0'
p76849
sS'name'
p76850
S'use_displaced_mesh'
p76851
sS'required'
p76852
I00
sS'group_name'
p76853
S'Advanced'
p76854
sa(dp76855
S'description'
p76856
S'The point at which plastic strain begins accumulating\n'
p76857
sS'cpp_type'
p76858
S'double'
p76859
sS'default'
p76860
S'0'
p76861
sS'name'
p76862
S'yield_stress'
p76863
sS'required'
p76864
I00
sS'group_name'
p76865
Nsa(dp76866
S'description'
p76867
S'Yield stress as a function of temperature\n'
p76868
sS'cpp_type'
p76869
S'FunctionName'
p76870
sS'default'
p76871
g3
sS'name'
p76872
S'yield_stress_function'
p76873
sS'required'
p76874
I00
sS'group_name'
p76875
NsasS'name'
p76876
S'/Materials/IsotropicPlasticityStressUpdate'
p76877
sa(dp76878
S'description'
p76879
S"This class uses the discrete material in a radial return isotropic plasticity power law hardening model, solving for the yield stress as the intersection of the power law relation curve and Hooke's law.  This class can be used in conjunction with other creep and plasticity materials for more complex simulations.\n"
p76880
sS'subblocks'
p76881
NsS'parameters'
p76882
(lp76883
(dp76884
S'description'
p76885
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p76886
sS'cpp_type'
p76887
S'double'
p76888
sS'default'
p76889
S'1e-20'
p76890
sS'name'
p76891
S'absolute_tolerance'
p76892
sS'required'
p76893
I00
sS'group_name'
p76894
Nsa(dp76895
S'description'
p76896
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p76897
sS'cpp_type'
p76898
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76899
sS'default'
p76900
g3
sS'name'
p76901
S'base_name'
p76902
sS'required'
p76903
I00
sS'group_name'
p76904
Nsa(dp76905
S'description'
p76906
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76907
sS'cpp_type'
p76908
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76909
sS'default'
p76910
g3
sS'name'
p76911
S'block'
p76912
sS'required'
p76913
I00
sS'group_name'
p76914
Nsa(dp76915
S'description'
p76916
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76917
sS'cpp_type'
p76918
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76919
sS'default'
p76920
g3
sS'name'
p76921
S'boundary'
p76922
sS'required'
p76923
I00
sS'group_name'
p76924
Nsa(dp76925
S'description'
p76926
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76927
sS'cpp_type'
p76928
S'bool'
p76929
sS'default'
p76930
S'0'
p76931
sS'name'
p76932
S'constant_on_elem'
p76933
sS'required'
p76934
I00
sS'group_name'
p76935
S'Advanced'
p76936
sa(dp76937
S'description'
p76938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76939
sS'cpp_type'
p76940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76941
sS'default'
p76942
g3
sS'name'
p76943
S'control_tags'
p76944
sS'required'
p76945
I00
sS'group_name'
p76946
S'Advanced'
p76947
sa(dp76948
S'description'
p76949
S'Set the enabled status of the MooseObject.\n'
p76950
sS'cpp_type'
p76951
S'bool'
p76952
sS'default'
p76953
S'1'
p76954
sS'name'
p76955
S'enable'
p76956
sS'required'
p76957
I00
sS'group_name'
p76958
S'Advanced'
p76959
sa(dp76960
S'description'
p76961
S'True stress as a function of plastic strain\n'
p76962
sS'cpp_type'
p76963
S'FunctionName'
p76964
sS'default'
p76965
g3
sS'name'
p76966
S'hardening_function'
p76967
sS'required'
p76968
I00
sS'group_name'
p76969
Nsa(dp76970
S'description'
p76971
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76972
sS'cpp_type'
p76973
S'bool'
p76974
sS'default'
p76975
S'1'
p76976
sS'name'
p76977
S'implicit'
p76978
sS'required'
p76979
I00
sS'group_name'
p76980
S'Advanced'
p76981
sa(dp76982
S'description'
p76983
S'Maximum number of newton iterations in the radial return material\n'
p76984
sS'cpp_type'
p76985
S'unsigned int'
p76986
sS'default'
p76987
S'30'
p76988
sS'name'
p76989
S'max_iterations'
p76990
sS'required'
p76991
I00
sS'group_name'
p76992
Nsa(dp76993
S'description'
p76994
S'Set true to output newton iteration information from the radial return material\n'
p76995
sS'cpp_type'
p76996
S'bool'
p76997
sS'default'
p76998
S'0'
p76999
sS'name'
p77000
S'output_iteration_info'
p77001
sS'required'
p77002
I00
sS'group_name'
p77003
Nsa(dp77004
S'description'
p77005
S'Set true to output the recompute material iteration information when a step fails\n'
p77006
sS'cpp_type'
p77007
S'bool'
p77008
sS'default'
p77009
S'0'
p77010
sS'name'
p77011
S'output_iteration_info_on_error'
p77012
sS'required'
p77013
I00
sS'group_name'
p77014
Nsa(dp77015
S'description'
p77016
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77017
sS'cpp_type'
p77018
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77019
sS'default'
p77020
g3
sS'name'
p77021
S'output_properties'
p77022
sS'required'
p77023
I00
sS'group_name'
p77024
S'Outputs'
p77025
sa(dp77026
S'description'
p77027
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77028
sS'cpp_type'
p77029
S'std::vector<OutputName, std::allocator<OutputName> >'
p77030
sS'default'
p77031
S'none'
p77032
sS'name'
p77033
S'outputs'
p77034
sS'required'
p77035
I00
sS'group_name'
p77036
S'Outputs'
p77037
sa(dp77038
S'description'
p77039
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p77040
sS'cpp_type'
p77041
S'double'
p77042
sS'default'
p77043
S'1e-08'
p77044
sS'name'
p77045
S'relative_tolerance'
p77046
sS'required'
p77047
I00
sS'group_name'
p77048
Nsa(dp77049
S'description'
p77050
S'The seed for the master random number generator\n'
p77051
sS'cpp_type'
p77052
S'unsigned int'
p77053
sS'default'
p77054
S'0'
p77055
sS'name'
p77056
S'seed'
p77057
sS'required'
p77058
I00
sS'group_name'
p77059
S'Advanced'
p77060
sa(dp77061
S'description'
p77062
S'The strain hardening exponent (n) for power law hardening\n'
p77063
sS'cpp_type'
p77064
S'double'
p77065
sS'default'
p77066
g3
sS'name'
p77067
S'strain_hardening_exponent'
p77068
sS'required'
p77069
I01
sS'group_name'
p77070
Nsa(dp77071
S'description'
p77072
S'The strength coefficient (K) for power law hardening\n'
p77073
sS'cpp_type'
p77074
S'double'
p77075
sS'default'
p77076
g3
sS'name'
p77077
S'strength_coefficient'
p77078
sS'required'
p77079
I01
sS'group_name'
p77080
Nsa(dp77081
S'description'
p77082
S'Coupled Temperature\n'
p77083
sS'cpp_type'
p77084
S'std::vector<VariableName>'
p77085
sS'default'
p77086
S'0'
p77087
sS'name'
p77088
S'temperature'
p77089
sS'required'
p77090
I00
sS'group_name'
p77091
Nsa(dp77092
S'description'
p77093
g3
sS'cpp_type'
p77094
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77095
sS'default'
p77096
S'IsotropicPowerLawHardeningStressUpdate'
p77097
sS'name'
p77098
S'type'
p77099
sS'required'
p77100
I00
sS'group_name'
p77101
Nsa(dp77102
S'description'
p77103
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77104
sS'cpp_type'
p77105
S'bool'
p77106
sS'default'
p77107
S'0'
p77108
sS'name'
p77109
S'use_displaced_mesh'
p77110
sS'required'
p77111
I00
sS'group_name'
p77112
S'Advanced'
p77113
sa(dp77114
S'description'
p77115
S'Yield stress as a function of temperature\n'
p77116
sS'cpp_type'
p77117
S'FunctionName'
p77118
sS'default'
p77119
g3
sS'name'
p77120
S'yield_stress_function'
p77121
sS'required'
p77122
I00
sS'group_name'
p77123
NsasS'name'
p77124
S'/Materials/IsotropicPowerLawHardeningStressUpdate'
p77125
sa(dp77126
S'description'
p77127
S'KKS Solid phase free energy for Xe,Vac in UO2.  Fm(cmg,cmv)\n'
p77128
sS'subblocks'
p77129
NsS'parameters'
p77130
(lp77131
(dp77132
S'description'
p77133
S'Temperature in [K]\n'
p77134
sS'cpp_type'
p77135
S'double'
p77136
sS'default'
p77137
g3
sS'name'
p77138
S'T'
p77139
sS'required'
p77140
I01
sS'group_name'
p77141
Nsa(dp77142
S'description'
p77143
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77144
sS'cpp_type'
p77145
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77146
sS'default'
p77147
g3
sS'name'
p77148
S'block'
p77149
sS'required'
p77150
I00
sS'group_name'
p77151
Nsa(dp77152
S'description'
p77153
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77154
sS'cpp_type'
p77155
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77156
sS'default'
p77157
g3
sS'name'
p77158
S'boundary'
p77159
sS'required'
p77160
I00
sS'group_name'
p77161
Nsa(dp77162
S'description'
p77163
S'Gas concnetration\n'
p77164
sS'cpp_type'
p77165
S'std::vector<VariableName>'
p77166
sS'default'
p77167
g3
sS'name'
p77168
S'cmg'
p77169
sS'required'
p77170
I01
sS'group_name'
p77171
Nsa(dp77172
S'description'
p77173
S'Vacancy concnetration\n'
p77174
sS'cpp_type'
p77175
S'std::vector<VariableName>'
p77176
sS'default'
p77177
g3
sS'name'
p77178
S'cmv'
p77179
sS'required'
p77180
I01
sS'group_name'
p77181
Nsa(dp77182
S'description'
p77183
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77184
sS'cpp_type'
p77185
S'bool'
p77186
sS'default'
p77187
S'1'
p77188
sS'name'
p77189
S'compute'
p77190
sS'required'
p77191
I00
sS'group_name'
p77192
Nsa(dp77193
S'description'
p77194
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77195
sS'cpp_type'
p77196
S'bool'
p77197
sS'default'
p77198
S'0'
p77199
sS'name'
p77200
S'constant_on_elem'
p77201
sS'required'
p77202
I00
sS'group_name'
p77203
S'Advanced'
p77204
sa(dp77205
S'description'
p77206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77207
sS'cpp_type'
p77208
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77209
sS'default'
p77210
g3
sS'name'
p77211
S'control_tags'
p77212
sS'required'
p77213
I00
sS'group_name'
p77214
S'Advanced'
p77215
sa(dp77216
S'description'
p77217
S'Maximum order of derivatives taken (2 or 3)\n'
p77218
sS'cpp_type'
p77219
S'unsigned int'
p77220
sS'default'
p77221
S'3'
p77222
sS'name'
p77223
S'derivative_order'
p77224
sS'required'
p77225
I00
sS'group_name'
p77226
Nsa(dp77227
S'description'
p77228
S'Set the enabled status of the MooseObject.\n'
p77229
sS'cpp_type'
p77230
S'bool'
p77231
sS'default'
p77232
S'1'
p77233
sS'name'
p77234
S'enable'
p77235
sS'required'
p77236
I00
sS'group_name'
p77237
S'Advanced'
p77238
sa(dp77239
S'description'
p77240
S'Base name of the free energy function (used to name the material properties)\n'
p77241
sS'cpp_type'
p77242
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77243
sS'default'
p77244
S'F'
p77245
sS'name'
p77246
S'f_name'
p77247
sS'required'
p77248
I00
sS'group_name'
p77249
Nsa(dp77250
S'description'
p77251
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77252
sS'cpp_type'
p77253
S'bool'
p77254
sS'default'
p77255
S'1'
p77256
sS'name'
p77257
S'implicit'
p77258
sS'required'
p77259
I00
sS'group_name'
p77260
S'Advanced'
p77261
sa(dp77262
S'description'
p77263
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77264
sS'cpp_type'
p77265
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77266
sS'default'
p77267
g3
sS'name'
p77268
S'output_properties'
p77269
sS'required'
p77270
I00
sS'group_name'
p77271
S'Outputs'
p77272
sa(dp77273
S'description'
p77274
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77275
sS'cpp_type'
p77276
S'std::vector<OutputName, std::allocator<OutputName> >'
p77277
sS'default'
p77278
S'none'
p77279
sS'name'
p77280
S'outputs'
p77281
sS'required'
p77282
I00
sS'group_name'
p77283
S'Outputs'
p77284
sa(dp77285
S'description'
p77286
S'The seed for the master random number generator\n'
p77287
sS'cpp_type'
p77288
S'unsigned int'
p77289
sS'default'
p77290
S'0'
p77291
sS'name'
p77292
S'seed'
p77293
sS'required'
p77294
I00
sS'group_name'
p77295
S'Advanced'
p77296
sa(dp77297
S'description'
p77298
S'Flag to indicate if third derivatives are needed\n'
p77299
sS'cpp_type'
p77300
S'bool'
p77301
sS'default'
p77302
g3
sS'name'
p77303
S'third_derivatives'
p77304
sS'required'
p77305
I00
sS'group_name'
p77306
Nsa(dp77307
S'description'
p77308
g3
sS'cpp_type'
p77309
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77310
sS'default'
p77311
S'KKSXeVacSolidMaterial'
p77312
sS'name'
p77313
S'type'
p77314
sS'required'
p77315
I00
sS'group_name'
p77316
Nsa(dp77317
S'description'
p77318
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77319
sS'cpp_type'
p77320
S'bool'
p77321
sS'default'
p77322
S'0'
p77323
sS'name'
p77324
S'use_displaced_mesh'
p77325
sS'required'
p77326
I00
sS'group_name'
p77327
S'Advanced'
p77328
sasS'name'
p77329
S'/Materials/KKSXeVacSolidMaterial'
p77330
sa(dp77331
S'description'
p77332
g3
sS'subblocks'
p77333
NsS'parameters'
p77334
(lp77335
(dp77336
S'description'
p77337
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p77338
sS'cpp_type'
p77339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77340
sS'default'
p77341
g3
sS'name'
p77342
S'base_name'
p77343
sS'required'
p77344
I00
sS'group_name'
p77345
Nsa(dp77346
S'description'
p77347
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77348
sS'cpp_type'
p77349
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77350
sS'default'
p77351
g3
sS'name'
p77352
S'block'
p77353
sS'required'
p77354
I00
sS'group_name'
p77355
Nsa(dp77356
S'description'
p77357
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77358
sS'cpp_type'
p77359
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77360
sS'default'
p77361
g3
sS'name'
p77362
S'boundary'
p77363
sS'required'
p77364
I00
sS'group_name'
p77365
Nsa(dp77366
S'description'
p77367
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77368
sS'cpp_type'
p77369
S'bool'
p77370
sS'default'
p77371
S'1'
p77372
sS'name'
p77373
S'compute'
p77374
sS'required'
p77375
I00
sS'group_name'
p77376
Nsa(dp77377
S'description'
p77378
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77379
sS'cpp_type'
p77380
S'bool'
p77381
sS'default'
p77382
S'0'
p77383
sS'name'
p77384
S'constant_on_elem'
p77385
sS'required'
p77386
I00
sS'group_name'
p77387
S'Advanced'
p77388
sa(dp77389
S'description'
p77390
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77391
sS'cpp_type'
p77392
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77393
sS'default'
p77394
g3
sS'name'
p77395
S'control_tags'
p77396
sS'required'
p77397
I00
sS'group_name'
p77398
S'Advanced'
p77399
sa(dp77400
S'description'
p77401
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p77402
sS'cpp_type'
p77403
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p77404
sS'default'
p77405
g3
sS'name'
p77406
S'displacements'
p77407
sS'required'
p77408
I01
sS'group_name'
p77409
Nsa(dp77410
S'description'
p77411
S'Set the enabled status of the MooseObject.\n'
p77412
sS'cpp_type'
p77413
S'bool'
p77414
sS'default'
p77415
S'1'
p77416
sS'name'
p77417
S'enable'
p77418
sS'required'
p77419
I00
sS'group_name'
p77420
S'Advanced'
p77421
sa(dp77422
S'description'
p77423
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77424
sS'cpp_type'
p77425
S'bool'
p77426
sS'default'
p77427
S'1'
p77428
sS'name'
p77429
S'implicit'
p77430
sS'required'
p77431
I00
sS'group_name'
p77432
S'Advanced'
p77433
sa(dp77434
S'description'
p77435
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77436
sS'cpp_type'
p77437
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77438
sS'default'
p77439
g3
sS'name'
p77440
S'output_properties'
p77441
sS'required'
p77442
I00
sS'group_name'
p77443
S'Outputs'
p77444
sa(dp77445
S'description'
p77446
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77447
sS'cpp_type'
p77448
S'std::vector<OutputName, std::allocator<OutputName> >'
p77449
sS'default'
p77450
S'none'
p77451
sS'name'
p77452
S'outputs'
p77453
sS'required'
p77454
I00
sS'group_name'
p77455
S'Outputs'
p77456
sa(dp77457
S'description'
p77458
S'The seed for the master random number generator\n'
p77459
sS'cpp_type'
p77460
S'unsigned int'
p77461
sS'default'
p77462
S'0'
p77463
sS'name'
p77464
S'seed'
p77465
sS'required'
p77466
I00
sS'group_name'
p77467
S'Advanced'
p77468
sa(dp77469
S'description'
p77470
S'Temperature in Kelvin\n'
p77471
sS'cpp_type'
p77472
S'std::vector<VariableName>'
p77473
sS'default'
p77474
S'273'
p77475
sS'name'
p77476
S'temperature'
p77477
sS'required'
p77478
I00
sS'group_name'
p77479
Nsa(dp77480
S'description'
p77481
S'Reference temperature for thermal expansion in K\n'
p77482
sS'cpp_type'
p77483
S'double'
p77484
sS'default'
p77485
S'273'
p77486
sS'name'
p77487
S'temperature_ref'
p77488
sS'required'
p77489
I00
sS'group_name'
p77490
Nsa(dp77491
S'description'
p77492
S'Thermal expansion coefficient in 1/K\n'
p77493
sS'cpp_type'
p77494
S'double'
p77495
sS'default'
p77496
S'0'
p77497
sS'name'
p77498
S'thermal_expansion_coeff'
p77499
sS'required'
p77500
I00
sS'group_name'
p77501
Nsa(dp77502
S'description'
p77503
g3
sS'cpp_type'
p77504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77505
sS'default'
p77506
S'LinearElasticTruss'
p77507
sS'name'
p77508
S'type'
p77509
sS'required'
p77510
I00
sS'group_name'
p77511
Nsa(dp77512
S'description'
p77513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77514
sS'cpp_type'
p77515
S'bool'
p77516
sS'default'
p77517
S'0'
p77518
sS'name'
p77519
S'use_displaced_mesh'
p77520
sS'required'
p77521
I00
sS'group_name'
p77522
S'Advanced'
p77523
sa(dp77524
S'description'
p77525
S"Variable containing Young's modulus\n"
p77526
sS'cpp_type'
p77527
S'std::vector<VariableName>'
p77528
sS'default'
p77529
g3
sS'name'
p77530
S'youngs_modulus'
p77531
sS'required'
p77532
I00
sS'group_name'
p77533
NsasS'name'
p77534
S'/Materials/LinearElasticTruss'
p77535
sa(dp77536
S'description'
p77537
S'Phase-field fracture model energy contribution to damage growth-isotropic elasticity and undamaged stress under compressive strain\n'
p77538
sS'subblocks'
p77539
NsS'parameters'
p77540
(lp77541
(dp77542
S'description'
p77543
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p77544
sS'cpp_type'
p77545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77546
sS'default'
p77547
g3
sS'name'
p77548
S'base_name'
p77549
sS'required'
p77550
I00
sS'group_name'
p77551
Nsa(dp77552
S'description'
p77553
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77554
sS'cpp_type'
p77555
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77556
sS'default'
p77557
g3
sS'name'
p77558
S'block'
p77559
sS'required'
p77560
I00
sS'group_name'
p77561
Nsa(dp77562
S'description'
p77563
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77564
sS'cpp_type'
p77565
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77566
sS'default'
p77567
g3
sS'name'
p77568
S'boundary'
p77569
sS'required'
p77570
I00
sS'group_name'
p77571
Nsa(dp77572
S'description'
p77573
S'Order parameter for damage\n'
p77574
sS'cpp_type'
p77575
S'std::vector<VariableName>'
p77576
sS'default'
p77577
g3
sS'name'
p77578
S'c'
p77579
sS'required'
p77580
I01
sS'group_name'
p77581
Nsa(dp77582
S'description'
p77583
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77584
sS'cpp_type'
p77585
S'bool'
p77586
sS'default'
p77587
S'1'
p77588
sS'name'
p77589
S'compute'
p77590
sS'required'
p77591
I00
sS'group_name'
p77592
Nsa(dp77593
S'description'
p77594
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77595
sS'cpp_type'
p77596
S'bool'
p77597
sS'default'
p77598
S'0'
p77599
sS'name'
p77600
S'constant_on_elem'
p77601
sS'required'
p77602
I00
sS'group_name'
p77603
S'Advanced'
p77604
sa(dp77605
S'description'
p77606
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77607
sS'cpp_type'
p77608
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77609
sS'default'
p77610
g3
sS'name'
p77611
S'control_tags'
p77612
sS'required'
p77613
I00
sS'group_name'
p77614
S'Advanced'
p77615
sa(dp77616
S'description'
p77617
S'Set the enabled status of the MooseObject.\n'
p77618
sS'cpp_type'
p77619
S'bool'
p77620
sS'default'
p77621
S'1'
p77622
sS'name'
p77623
S'enable'
p77624
sS'required'
p77625
I00
sS'group_name'
p77626
S'Advanced'
p77627
sa(dp77628
S'description'
p77629
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77630
sS'cpp_type'
p77631
S'bool'
p77632
sS'default'
p77633
S'1'
p77634
sS'name'
p77635
S'implicit'
p77636
sS'required'
p77637
I00
sS'group_name'
p77638
S'Advanced'
p77639
sa(dp77640
S'description'
p77641
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p77642
sS'cpp_type'
p77643
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p77644
sS'default'
p77645
g3
sS'name'
p77646
S'initial_stress'
p77647
sS'required'
p77648
I00
sS'group_name'
p77649
Nsa(dp77650
S'description'
p77651
S'Stiffness of damaged matrix\n'
p77652
sS'cpp_type'
p77653
S'double'
p77654
sS'default'
p77655
S'1e-06'
p77656
sS'name'
p77657
S'kdamage'
p77658
sS'required'
p77659
I00
sS'group_name'
p77660
Nsa(dp77661
S'description'
p77662
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77663
sS'cpp_type'
p77664
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77665
sS'default'
p77666
g3
sS'name'
p77667
S'output_properties'
p77668
sS'required'
p77669
I00
sS'group_name'
p77670
S'Outputs'
p77671
sa(dp77672
S'description'
p77673
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77674
sS'cpp_type'
p77675
S'std::vector<OutputName, std::allocator<OutputName> >'
p77676
sS'default'
p77677
S'none'
p77678
sS'name'
p77679
S'outputs'
p77680
sS'required'
p77681
I00
sS'group_name'
p77682
S'Outputs'
p77683
sa(dp77684
S'description'
p77685
S'The seed for the master random number generator\n'
p77686
sS'cpp_type'
p77687
S'unsigned int'
p77688
sS'default'
p77689
S'0'
p77690
sS'name'
p77691
S'seed'
p77692
sS'required'
p77693
I00
sS'group_name'
p77694
S'Advanced'
p77695
sa(dp77696
S'description'
p77697
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p77698
sS'cpp_type'
p77699
S'bool'
p77700
sS'default'
p77701
S'0'
p77702
sS'name'
p77703
S'store_stress_old'
p77704
sS'required'
p77705
I00
sS'group_name'
p77706
Nsa(dp77707
S'description'
p77708
g3
sS'cpp_type'
p77709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77710
sS'default'
p77711
S'LinearIsoElasticPFDamage'
p77712
sS'name'
p77713
S'type'
p77714
sS'required'
p77715
I00
sS'group_name'
p77716
NsasS'name'
p77717
S'/Materials/LinearIsoElasticPFDamage'
p77718
sa(dp77719
S'description'
p77720
S'Material that implements the math free energy using the expression builder and automatric differentiation\n'
p77721
sS'subblocks'
p77722
NsS'parameters'
p77723
(lp77724
(dp77725
S'description'
p77726
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77727
sS'cpp_type'
p77728
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77729
sS'default'
p77730
g3
sS'name'
p77731
S'block'
p77732
sS'required'
p77733
I00
sS'group_name'
p77734
Nsa(dp77735
S'description'
p77736
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77737
sS'cpp_type'
p77738
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77739
sS'default'
p77740
g3
sS'name'
p77741
S'boundary'
p77742
sS'required'
p77743
I00
sS'group_name'
p77744
Nsa(dp77745
S'description'
p77746
S'Concentration variable\n'
p77747
sS'cpp_type'
p77748
S'std::vector<VariableName>'
p77749
sS'default'
p77750
g3
sS'name'
p77751
S'c'
p77752
sS'required'
p77753
I01
sS'group_name'
p77754
Nsa(dp77755
S'description'
p77756
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77757
sS'cpp_type'
p77758
S'bool'
p77759
sS'default'
p77760
S'1'
p77761
sS'name'
p77762
S'compute'
p77763
sS'required'
p77764
I00
sS'group_name'
p77765
Nsa(dp77766
S'description'
p77767
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77768
sS'cpp_type'
p77769
S'bool'
p77770
sS'default'
p77771
S'0'
p77772
sS'name'
p77773
S'constant_on_elem'
p77774
sS'required'
p77775
I00
sS'group_name'
p77776
S'Advanced'
p77777
sa(dp77778
S'description'
p77779
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77780
sS'cpp_type'
p77781
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77782
sS'default'
p77783
g3
sS'name'
p77784
S'control_tags'
p77785
sS'required'
p77786
I00
sS'group_name'
p77787
S'Advanced'
p77788
sa(dp77789
S'description'
p77790
S'Maximum order of derivatives taken\n'
p77791
sS'cpp_type'
p77792
S'unsigned int'
p77793
sS'default'
p77794
S'3'
p77795
sS'name'
p77796
S'derivative_order'
p77797
sS'required'
p77798
I00
sS'group_name'
p77799
Nsa(dp77800
S'description'
p77801
S'Disable the function parser algebraic optimizer\n'
p77802
sS'cpp_type'
p77803
S'bool'
p77804
sS'default'
p77805
S'0'
p77806
sS'name'
p77807
S'disable_fpoptimizer'
p77808
sS'required'
p77809
I00
sS'group_name'
p77810
S'Advanced'
p77811
sa(dp77812
S'description'
p77813
S'Set the enabled status of the MooseObject.\n'
p77814
sS'cpp_type'
p77815
S'bool'
p77816
sS'default'
p77817
S'1'
p77818
sS'name'
p77819
S'enable'
p77820
sS'required'
p77821
I00
sS'group_name'
p77822
S'Advanced'
p77823
sa(dp77824
S'description'
p77825
S'Enable cacheing of function derivatives for faster startup time\n'
p77826
sS'cpp_type'
p77827
S'bool'
p77828
sS'default'
p77829
S'1'
p77830
sS'name'
p77831
S'enable_ad_cache'
p77832
sS'required'
p77833
I00
sS'group_name'
p77834
S'Advanced'
p77835
sa(dp77836
S'description'
p77837
S'Enable automatic immediate optimization of derivatives\n'
p77838
sS'cpp_type'
p77839
S'bool'
p77840
sS'default'
p77841
S'1'
p77842
sS'name'
p77843
S'enable_auto_optimize'
p77844
sS'required'
p77845
I00
sS'group_name'
p77846
S'Advanced'
p77847
sa(dp77848
S'description'
p77849
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p77850
sS'cpp_type'
p77851
S'bool'
p77852
sS'default'
p77853
S'1'
p77854
sS'name'
p77855
S'enable_jit'
p77856
sS'required'
p77857
I00
sS'group_name'
p77858
S'Advanced'
p77859
sa(dp77860
S'description'
p77861
S'Base name of the free energy function (used to name the material properties)\n'
p77862
sS'cpp_type'
p77863
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77864
sS'default'
p77865
S'F'
p77866
sS'name'
p77867
S'f_name'
p77868
sS'required'
p77869
I00
sS'group_name'
p77870
Nsa(dp77871
S'description'
p77872
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p77873
sS'cpp_type'
p77874
S'bool'
p77875
sS'default'
p77876
S'0'
p77877
sS'name'
p77878
S'fail_on_evalerror'
p77879
sS'required'
p77880
I00
sS'group_name'
p77881
S'Advanced'
p77882
sa(dp77883
S'description'
p77884
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77885
sS'cpp_type'
p77886
S'bool'
p77887
sS'default'
p77888
S'1'
p77889
sS'name'
p77890
S'implicit'
p77891
sS'required'
p77892
I00
sS'group_name'
p77893
S'Advanced'
p77894
sa(dp77895
S'description'
p77896
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77897
sS'cpp_type'
p77898
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77899
sS'default'
p77900
g3
sS'name'
p77901
S'output_properties'
p77902
sS'required'
p77903
I00
sS'group_name'
p77904
S'Outputs'
p77905
sa(dp77906
S'description'
p77907
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77908
sS'cpp_type'
p77909
S'std::vector<OutputName, std::allocator<OutputName> >'
p77910
sS'default'
p77911
S'none'
p77912
sS'name'
p77913
S'outputs'
p77914
sS'required'
p77915
I00
sS'group_name'
p77916
S'Outputs'
p77917
sa(dp77918
S'description'
p77919
S'The seed for the master random number generator\n'
p77920
sS'cpp_type'
p77921
S'unsigned int'
p77922
sS'default'
p77923
S'0'
p77924
sS'name'
p77925
S'seed'
p77926
sS'required'
p77927
I00
sS'group_name'
p77928
S'Advanced'
p77929
sa(dp77930
S'description'
p77931
S'Flag to indicate if third derivatives are needed\n'
p77932
sS'cpp_type'
p77933
S'bool'
p77934
sS'default'
p77935
g3
sS'name'
p77936
S'third_derivatives'
p77937
sS'required'
p77938
I00
sS'group_name'
p77939
Nsa(dp77940
S'description'
p77941
g3
sS'cpp_type'
p77942
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77943
sS'default'
p77944
S'MathEBFreeEnergy'
p77945
sS'name'
p77946
S'type'
p77947
sS'required'
p77948
I00
sS'group_name'
p77949
Nsa(dp77950
S'description'
p77951
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77952
sS'cpp_type'
p77953
S'bool'
p77954
sS'default'
p77955
S'0'
p77956
sS'name'
p77957
S'use_displaced_mesh'
p77958
sS'required'
p77959
I00
sS'group_name'
p77960
S'Advanced'
p77961
sasS'name'
p77962
S'/Materials/MathEBFreeEnergy'
p77963
sa(dp77964
S'description'
p77965
S'Material that implements the math free energy and its derivatives: \\nF = 1/4(1 + c)^2*(1 - c)^2\n'
p77966
sS'subblocks'
p77967
NsS'parameters'
p77968
(lp77969
(dp77970
S'description'
p77971
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77972
sS'cpp_type'
p77973
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77974
sS'default'
p77975
g3
sS'name'
p77976
S'block'
p77977
sS'required'
p77978
I00
sS'group_name'
p77979
Nsa(dp77980
S'description'
p77981
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77982
sS'cpp_type'
p77983
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77984
sS'default'
p77985
g3
sS'name'
p77986
S'boundary'
p77987
sS'required'
p77988
I00
sS'group_name'
p77989
Nsa(dp77990
S'description'
p77991
S'Concentration variable\n'
p77992
sS'cpp_type'
p77993
S'std::vector<VariableName>'
p77994
sS'default'
p77995
g3
sS'name'
p77996
S'c'
p77997
sS'required'
p77998
I01
sS'group_name'
p77999
Nsa(dp78000
S'description'
p78001
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78002
sS'cpp_type'
p78003
S'bool'
p78004
sS'default'
p78005
S'1'
p78006
sS'name'
p78007
S'compute'
p78008
sS'required'
p78009
I00
sS'group_name'
p78010
Nsa(dp78011
S'description'
p78012
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78013
sS'cpp_type'
p78014
S'bool'
p78015
sS'default'
p78016
S'0'
p78017
sS'name'
p78018
S'constant_on_elem'
p78019
sS'required'
p78020
I00
sS'group_name'
p78021
S'Advanced'
p78022
sa(dp78023
S'description'
p78024
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78025
sS'cpp_type'
p78026
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78027
sS'default'
p78028
g3
sS'name'
p78029
S'control_tags'
p78030
sS'required'
p78031
I00
sS'group_name'
p78032
S'Advanced'
p78033
sa(dp78034
S'description'
p78035
S'Maximum order of derivatives taken (2 or 3)\n'
p78036
sS'cpp_type'
p78037
S'unsigned int'
p78038
sS'default'
p78039
S'3'
p78040
sS'name'
p78041
S'derivative_order'
p78042
sS'required'
p78043
I00
sS'group_name'
p78044
Nsa(dp78045
S'description'
p78046
S'Set the enabled status of the MooseObject.\n'
p78047
sS'cpp_type'
p78048
S'bool'
p78049
sS'default'
p78050
S'1'
p78051
sS'name'
p78052
S'enable'
p78053
sS'required'
p78054
I00
sS'group_name'
p78055
S'Advanced'
p78056
sa(dp78057
S'description'
p78058
S'Base name of the free energy function (used to name the material properties)\n'
p78059
sS'cpp_type'
p78060
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78061
sS'default'
p78062
S'F'
p78063
sS'name'
p78064
S'f_name'
p78065
sS'required'
p78066
I00
sS'group_name'
p78067
Nsa(dp78068
S'description'
p78069
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78070
sS'cpp_type'
p78071
S'bool'
p78072
sS'default'
p78073
S'1'
p78074
sS'name'
p78075
S'implicit'
p78076
sS'required'
p78077
I00
sS'group_name'
p78078
S'Advanced'
p78079
sa(dp78080
S'description'
p78081
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78082
sS'cpp_type'
p78083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78084
sS'default'
p78085
g3
sS'name'
p78086
S'output_properties'
p78087
sS'required'
p78088
I00
sS'group_name'
p78089
S'Outputs'
p78090
sa(dp78091
S'description'
p78092
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78093
sS'cpp_type'
p78094
S'std::vector<OutputName, std::allocator<OutputName> >'
p78095
sS'default'
p78096
S'none'
p78097
sS'name'
p78098
S'outputs'
p78099
sS'required'
p78100
I00
sS'group_name'
p78101
S'Outputs'
p78102
sa(dp78103
S'description'
p78104
S'The seed for the master random number generator\n'
p78105
sS'cpp_type'
p78106
S'unsigned int'
p78107
sS'default'
p78108
S'0'
p78109
sS'name'
p78110
S'seed'
p78111
sS'required'
p78112
I00
sS'group_name'
p78113
S'Advanced'
p78114
sa(dp78115
S'description'
p78116
S'Flag to indicate if third derivatives are needed\n'
p78117
sS'cpp_type'
p78118
S'bool'
p78119
sS'default'
p78120
g3
sS'name'
p78121
S'third_derivatives'
p78122
sS'required'
p78123
I00
sS'group_name'
p78124
Nsa(dp78125
S'description'
p78126
g3
sS'cpp_type'
p78127
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78128
sS'default'
p78129
S'MathFreeEnergy'
p78130
sS'name'
p78131
S'type'
p78132
sS'required'
p78133
I00
sS'group_name'
p78134
Nsa(dp78135
S'description'
p78136
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78137
sS'cpp_type'
p78138
S'bool'
p78139
sS'default'
p78140
S'0'
p78141
sS'name'
p78142
S'use_displaced_mesh'
p78143
sS'required'
p78144
I00
sS'group_name'
p78145
S'Advanced'
p78146
sasS'name'
p78147
S'/Materials/MathFreeEnergy'
p78148
sa(dp78149
S'description'
p78150
S'Double well phase transformation barrier free energy contribution.\n'
p78151
sS'subblocks'
p78152
NsS'parameters'
p78153
(lp78154
(dp78155
S'description'
p78156
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78157
sS'cpp_type'
p78158
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78159
sS'default'
p78160
g3
sS'name'
p78161
S'block'
p78162
sS'required'
p78163
I00
sS'group_name'
p78164
Nsa(dp78165
S'description'
p78166
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78167
sS'cpp_type'
p78168
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78169
sS'default'
p78170
g3
sS'name'
p78171
S'boundary'
p78172
sS'required'
p78173
I00
sS'group_name'
p78174
Nsa(dp78175
S'description'
p78176
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78177
sS'cpp_type'
p78178
S'bool'
p78179
sS'default'
p78180
S'1'
p78181
sS'name'
p78182
S'compute'
p78183
sS'required'
p78184
I00
sS'group_name'
p78185
Nsa(dp78186
S'description'
p78187
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78188
sS'cpp_type'
p78189
S'bool'
p78190
sS'default'
p78191
S'0'
p78192
sS'name'
p78193
S'constant_on_elem'
p78194
sS'required'
p78195
I00
sS'group_name'
p78196
S'Advanced'
p78197
sa(dp78198
S'description'
p78199
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78200
sS'cpp_type'
p78201
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78202
sS'default'
p78203
g3
sS'name'
p78204
S'control_tags'
p78205
sS'required'
p78206
I00
sS'group_name'
p78207
S'Advanced'
p78208
sa(dp78209
S'description'
p78210
S'Set the enabled status of the MooseObject.\n'
p78211
sS'cpp_type'
p78212
S'bool'
p78213
sS'default'
p78214
S'1'
p78215
sS'name'
p78216
S'enable'
p78217
sS'required'
p78218
I00
sS'group_name'
p78219
S'Advanced'
p78220
sa(dp78221
S'description'
p78222
S'eta_i order parameters, one for each h\n'
p78223
sS'cpp_type'
p78224
S'std::vector<VariableName>'
p78225
sS'default'
p78226
g3
sS'name'
p78227
S'etas'
p78228
sS'required'
p78229
I01
sS'group_name'
p78230
Nsa(dp78231
S'description'
p78232
S'actual name for g(eta_i)\n'
p78233
sS'cpp_type'
p78234
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78235
sS'default'
p78236
S'g'
p78237
sS'name'
p78238
S'function_name'
p78239
sS'required'
p78240
I00
sS'group_name'
p78241
Nsa(dp78242
S'name'
p78243
S'g_order'
p78244
sS'cpp_type'
p78245
S'MooseEnum'
p78246
sS'default'
p78247
S'SIMPLE'
p78248
sS'description'
p78249
S'Polynomial order of the switching function h(eta)\n'
p78250
sS'required'
p78251
I00
sS'options'
p78252
S'SIMPLE'
p78253
sS'group_name'
p78254
Nsa(dp78255
S'description'
p78256
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78257
sS'cpp_type'
p78258
S'bool'
p78259
sS'default'
p78260
S'1'
p78261
sS'name'
p78262
S'implicit'
p78263
sS'required'
p78264
I00
sS'group_name'
p78265
S'Advanced'
p78266
sa(dp78267
S'description'
p78268
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78269
sS'cpp_type'
p78270
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78271
sS'default'
p78272
g3
sS'name'
p78273
S'output_properties'
p78274
sS'required'
p78275
I00
sS'group_name'
p78276
S'Outputs'
p78277
sa(dp78278
S'description'
p78279
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78280
sS'cpp_type'
p78281
S'std::vector<OutputName, std::allocator<OutputName> >'
p78282
sS'default'
p78283
S'none'
p78284
sS'name'
p78285
S'outputs'
p78286
sS'required'
p78287
I00
sS'group_name'
p78288
S'Outputs'
p78289
sa(dp78290
S'description'
p78291
S'The seed for the master random number generator\n'
p78292
sS'cpp_type'
p78293
S'unsigned int'
p78294
sS'default'
p78295
S'0'
p78296
sS'name'
p78297
S'seed'
p78298
sS'required'
p78299
I00
sS'group_name'
p78300
S'Advanced'
p78301
sa(dp78302
S'description'
p78303
g3
sS'cpp_type'
p78304
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78305
sS'default'
p78306
S'MultiBarrierFunctionMaterial'
p78307
sS'name'
p78308
S'type'
p78309
sS'required'
p78310
I00
sS'group_name'
p78311
Nsa(dp78312
S'description'
p78313
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78314
sS'cpp_type'
p78315
S'bool'
p78316
sS'default'
p78317
S'0'
p78318
sS'name'
p78319
S'use_displaced_mesh'
p78320
sS'required'
p78321
I00
sS'group_name'
p78322
S'Advanced'
p78323
sa(dp78324
S'description'
p78325
S'Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n'
p78326
sS'cpp_type'
p78327
S'bool'
p78328
sS'default'
p78329
S'0'
p78330
sS'name'
p78331
S'well_only'
p78332
sS'required'
p78333
I00
sS'group_name'
p78334
NsasS'name'
p78335
S'/Materials/MultiBarrierFunctionMaterial'
p78336
sa(dp78337
S'description'
p78338
S'Compute a global stress form multiple phase stresses\n'
p78339
sS'subblocks'
p78340
NsS'parameters'
p78341
(lp78342
(dp78343
S'description'
p78344
S'Base name for the computed global stress (optional)\n'
p78345
sS'cpp_type'
p78346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78347
sS'default'
p78348
g3
sS'name'
p78349
S'base_name'
p78350
sS'required'
p78351
I00
sS'group_name'
p78352
Nsa(dp78353
S'description'
p78354
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78355
sS'cpp_type'
p78356
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78357
sS'default'
p78358
g3
sS'name'
p78359
S'block'
p78360
sS'required'
p78361
I00
sS'group_name'
p78362
Nsa(dp78363
S'description'
p78364
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78365
sS'cpp_type'
p78366
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78367
sS'default'
p78368
g3
sS'name'
p78369
S'boundary'
p78370
sS'required'
p78371
I00
sS'group_name'
p78372
Nsa(dp78373
S'description'
p78374
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78375
sS'cpp_type'
p78376
S'bool'
p78377
sS'default'
p78378
S'1'
p78379
sS'name'
p78380
S'compute'
p78381
sS'required'
p78382
I00
sS'group_name'
p78383
Nsa(dp78384
S'description'
p78385
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78386
sS'cpp_type'
p78387
S'bool'
p78388
sS'default'
p78389
S'0'
p78390
sS'name'
p78391
S'constant_on_elem'
p78392
sS'required'
p78393
I00
sS'group_name'
p78394
S'Advanced'
p78395
sa(dp78396
S'description'
p78397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78398
sS'cpp_type'
p78399
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78400
sS'default'
p78401
g3
sS'name'
p78402
S'control_tags'
p78403
sS'required'
p78404
I00
sS'group_name'
p78405
S'Advanced'
p78406
sa(dp78407
S'description'
p78408
S'Set the enabled status of the MooseObject.\n'
p78409
sS'cpp_type'
p78410
S'bool'
p78411
sS'default'
p78412
S'1'
p78413
sS'name'
p78414
S'enable'
p78415
sS'required'
p78416
I00
sS'group_name'
p78417
S'Advanced'
p78418
sa(dp78419
S'description'
p78420
S'Switching Function Materials that provide h(eta_i)\n'
p78421
sS'cpp_type'
p78422
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p78423
sS'default'
p78424
g3
sS'name'
p78425
S'h'
p78426
sS'required'
p78427
I00
sS'group_name'
p78428
Nsa(dp78429
S'description'
p78430
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78431
sS'cpp_type'
p78432
S'bool'
p78433
sS'default'
p78434
S'1'
p78435
sS'name'
p78436
S'implicit'
p78437
sS'required'
p78438
I00
sS'group_name'
p78439
S'Advanced'
p78440
sa(dp78441
S'description'
p78442
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78443
sS'cpp_type'
p78444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78445
sS'default'
p78446
g3
sS'name'
p78447
S'output_properties'
p78448
sS'required'
p78449
I00
sS'group_name'
p78450
S'Outputs'
p78451
sa(dp78452
S'description'
p78453
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78454
sS'cpp_type'
p78455
S'std::vector<OutputName, std::allocator<OutputName> >'
p78456
sS'default'
p78457
S'none'
p78458
sS'name'
p78459
S'outputs'
p78460
sS'required'
p78461
I00
sS'group_name'
p78462
S'Outputs'
p78463
sa(dp78464
S'description'
p78465
S'Base names for the Phase strains\n'
p78466
sS'cpp_type'
p78467
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78468
sS'default'
p78469
g3
sS'name'
p78470
S'phase_base'
p78471
sS'required'
p78472
I01
sS'group_name'
p78473
Nsa(dp78474
S'description'
p78475
S'The seed for the master random number generator\n'
p78476
sS'cpp_type'
p78477
S'unsigned int'
p78478
sS'default'
p78479
S'0'
p78480
sS'name'
p78481
S'seed'
p78482
sS'required'
p78483
I00
sS'group_name'
p78484
S'Advanced'
p78485
sa(dp78486
S'description'
p78487
g3
sS'cpp_type'
p78488
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78489
sS'default'
p78490
S'MultiPhaseStressMaterial'
p78491
sS'name'
p78492
S'type'
p78493
sS'required'
p78494
I00
sS'group_name'
p78495
Nsa(dp78496
S'description'
p78497
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78498
sS'cpp_type'
p78499
S'bool'
p78500
sS'default'
p78501
S'0'
p78502
sS'name'
p78503
S'use_displaced_mesh'
p78504
sS'required'
p78505
I00
sS'group_name'
p78506
S'Advanced'
p78507
sasS'name'
p78508
S'/Materials/MultiPhaseStressMaterial'
p78509
sa(dp78510
S'description'
p78511
g3
sS'subblocks'
p78512
NsS'parameters'
p78513
(lp78514
(dp78515
S'description'
p78516
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78517
sS'cpp_type'
p78518
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78519
sS'default'
p78520
g3
sS'name'
p78521
S'block'
p78522
sS'required'
p78523
I00
sS'group_name'
p78524
Nsa(dp78525
S'description'
p78526
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78527
sS'cpp_type'
p78528
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78529
sS'default'
p78530
g3
sS'name'
p78531
S'boundary'
p78532
sS'required'
p78533
I00
sS'group_name'
p78534
Nsa(dp78535
S'description'
p78536
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78537
sS'cpp_type'
p78538
S'bool'
p78539
sS'default'
p78540
S'1'
p78541
sS'name'
p78542
S'compute'
p78543
sS'required'
p78544
I00
sS'group_name'
p78545
Nsa(dp78546
S'description'
p78547
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78548
sS'cpp_type'
p78549
S'bool'
p78550
sS'default'
p78551
S'0'
p78552
sS'name'
p78553
S'constant_on_elem'
p78554
sS'required'
p78555
I00
sS'group_name'
p78556
S'Advanced'
p78557
sa(dp78558
S'description'
p78559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78560
sS'cpp_type'
p78561
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78562
sS'default'
p78563
g3
sS'name'
p78564
S'control_tags'
p78565
sS'required'
p78566
I00
sS'group_name'
p78567
S'Advanced'
p78568
sa(dp78569
S'description'
p78570
S'Set the enabled status of the MooseObject.\n'
p78571
sS'cpp_type'
p78572
S'bool'
p78573
sS'default'
p78574
S'1'
p78575
sS'name'
p78576
S'enable'
p78577
sS'required'
p78578
I00
sS'group_name'
p78579
S'Advanced'
p78580
sa(dp78581
S'description'
p78582
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78583
sS'cpp_type'
p78584
S'bool'
p78585
sS'default'
p78586
S'1'
p78587
sS'name'
p78588
S'implicit'
p78589
sS'required'
p78590
I00
sS'group_name'
p78591
S'Advanced'
p78592
sa(dp78593
S'description'
p78594
S'specifies the number of complex L variables will be solved for\n'
p78595
sS'cpp_type'
p78596
S'unsigned int'
p78597
sS'default'
p78598
g3
sS'name'
p78599
S'num_L'
p78600
sS'required'
p78601
I01
sS'group_name'
p78602
Nsa(dp78603
S'description'
p78604
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78605
sS'cpp_type'
p78606
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78607
sS'default'
p78608
g3
sS'name'
p78609
S'output_properties'
p78610
sS'required'
p78611
I00
sS'group_name'
p78612
S'Outputs'
p78613
sa(dp78614
S'description'
p78615
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78616
sS'cpp_type'
p78617
S'std::vector<OutputName, std::allocator<OutputName> >'
p78618
sS'default'
p78619
S'none'
p78620
sS'name'
p78621
S'outputs'
p78622
sS'required'
p78623
I00
sS'group_name'
p78624
S'Outputs'
p78625
sa(dp78626
S'description'
p78627
S'The seed for the master random number generator\n'
p78628
sS'cpp_type'
p78629
S'unsigned int'
p78630
sS'default'
p78631
S'0'
p78632
sS'name'
p78633
S'seed'
p78634
sS'required'
p78635
I00
sS'group_name'
p78636
S'Advanced'
p78637
sa(dp78638
S'description'
p78639
g3
sS'cpp_type'
p78640
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78641
sS'default'
p78642
S'PFCRFFMaterial'
p78643
sS'name'
p78644
S'type'
p78645
sS'required'
p78646
I00
sS'group_name'
p78647
Nsa(dp78648
S'description'
p78649
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78650
sS'cpp_type'
p78651
S'bool'
p78652
sS'default'
p78653
S'0'
p78654
sS'name'
p78655
S'use_displaced_mesh'
p78656
sS'required'
p78657
I00
sS'group_name'
p78658
S'Advanced'
p78659
sasS'name'
p78660
S'/Materials/PFCRFFMaterial'
p78661
sa(dp78662
S'description'
p78663
g3
sS'subblocks'
p78664
NsS'parameters'
p78665
(lp78666
(dp78667
S'description'
p78668
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78669
sS'cpp_type'
p78670
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78671
sS'default'
p78672
g3
sS'name'
p78673
S'block'
p78674
sS'required'
p78675
I00
sS'group_name'
p78676
Nsa(dp78677
S'description'
p78678
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78679
sS'cpp_type'
p78680
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78681
sS'default'
p78682
g3
sS'name'
p78683
S'boundary'
p78684
sS'required'
p78685
I00
sS'group_name'
p78686
Nsa(dp78687
S'description'
p78688
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78689
sS'cpp_type'
p78690
S'bool'
p78691
sS'default'
p78692
S'1'
p78693
sS'name'
p78694
S'compute'
p78695
sS'required'
p78696
I00
sS'group_name'
p78697
Nsa(dp78698
S'description'
p78699
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78700
sS'cpp_type'
p78701
S'bool'
p78702
sS'default'
p78703
S'0'
p78704
sS'name'
p78705
S'constant_on_elem'
p78706
sS'required'
p78707
I00
sS'group_name'
p78708
S'Advanced'
p78709
sa(dp78710
S'description'
p78711
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78712
sS'cpp_type'
p78713
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78714
sS'default'
p78715
g3
sS'name'
p78716
S'control_tags'
p78717
sS'required'
p78718
I00
sS'group_name'
p78719
S'Advanced'
p78720
sa(dp78721
S'description'
p78722
S'Set the enabled status of the MooseObject.\n'
p78723
sS'cpp_type'
p78724
S'bool'
p78725
sS'default'
p78726
S'1'
p78727
sS'name'
p78728
S'enable'
p78729
sS'required'
p78730
I00
sS'group_name'
p78731
S'Advanced'
p78732
sa(dp78733
S'description'
p78734
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78735
sS'cpp_type'
p78736
S'bool'
p78737
sS'default'
p78738
S'1'
p78739
sS'name'
p78740
S'implicit'
p78741
sS'required'
p78742
I00
sS'group_name'
p78743
S'Advanced'
p78744
sa(dp78745
S'name'
p78746
S'order'
p78747
sS'cpp_type'
p78748
S'MooseEnum'
p78749
sS'default'
p78750
g3
sS'description'
p78751
S'This is the order of the polynomial used for correlation function\n'
p78752
sS'required'
p78753
I01
sS'options'
p78754
S'FOURTH EIGHTH'
p78755
sS'group_name'
p78756
Nsa(dp78757
S'description'
p78758
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78759
sS'cpp_type'
p78760
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78761
sS'default'
p78762
g3
sS'name'
p78763
S'output_properties'
p78764
sS'required'
p78765
I00
sS'group_name'
p78766
S'Outputs'
p78767
sa(dp78768
S'description'
p78769
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78770
sS'cpp_type'
p78771
S'std::vector<OutputName, std::allocator<OutputName> >'
p78772
sS'default'
p78773
S'none'
p78774
sS'name'
p78775
S'outputs'
p78776
sS'required'
p78777
I00
sS'group_name'
p78778
S'Outputs'
p78779
sa(dp78780
S'description'
p78781
S'The seed for the master random number generator\n'
p78782
sS'cpp_type'
p78783
S'unsigned int'
p78784
sS'default'
p78785
S'0'
p78786
sS'name'
p78787
S'seed'
p78788
sS'required'
p78789
I00
sS'group_name'
p78790
S'Advanced'
p78791
sa(dp78792
S'description'
p78793
g3
sS'cpp_type'
p78794
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78795
sS'default'
p78796
S'PFCTradMaterial'
p78797
sS'name'
p78798
S'type'
p78799
sS'required'
p78800
I00
sS'group_name'
p78801
Nsa(dp78802
S'description'
p78803
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78804
sS'cpp_type'
p78805
S'bool'
p78806
sS'default'
p78807
S'0'
p78808
sS'name'
p78809
S'use_displaced_mesh'
p78810
sS'required'
p78811
I00
sS'group_name'
p78812
S'Advanced'
p78813
sasS'name'
p78814
S'/Materials/PFCTradMaterial'
p78815
sa(dp78816
S'description'
p78817
S'Material properties used in phase-field fracture damage evolution kernel\n'
p78818
sS'subblocks'
p78819
NsS'parameters'
p78820
(lp78821
(dp78822
S'description'
p78823
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78824
sS'cpp_type'
p78825
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78826
sS'default'
p78827
g3
sS'name'
p78828
S'block'
p78829
sS'required'
p78830
I00
sS'group_name'
p78831
Nsa(dp78832
S'description'
p78833
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78834
sS'cpp_type'
p78835
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78836
sS'default'
p78837
g3
sS'name'
p78838
S'boundary'
p78839
sS'required'
p78840
I00
sS'group_name'
p78841
Nsa(dp78842
S'description'
p78843
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78844
sS'cpp_type'
p78845
S'bool'
p78846
sS'default'
p78847
S'1'
p78848
sS'name'
p78849
S'compute'
p78850
sS'required'
p78851
I00
sS'group_name'
p78852
Nsa(dp78853
S'description'
p78854
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78855
sS'cpp_type'
p78856
S'bool'
p78857
sS'default'
p78858
S'0'
p78859
sS'name'
p78860
S'constant_on_elem'
p78861
sS'required'
p78862
I00
sS'group_name'
p78863
S'Advanced'
p78864
sa(dp78865
S'description'
p78866
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78867
sS'cpp_type'
p78868
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78869
sS'default'
p78870
g3
sS'name'
p78871
S'control_tags'
p78872
sS'required'
p78873
I00
sS'group_name'
p78874
S'Advanced'
p78875
sa(dp78876
S'description'
p78877
S'Set the enabled status of the MooseObject.\n'
p78878
sS'cpp_type'
p78879
S'bool'
p78880
sS'default'
p78881
S'1'
p78882
sS'name'
p78883
S'enable'
p78884
sS'required'
p78885
I00
sS'group_name'
p78886
S'Advanced'
p78887
sa(dp78888
S'description'
p78889
S'Function describing energy release rate type parameter distribution\n'
p78890
sS'cpp_type'
p78891
S'FunctionName'
p78892
sS'default'
p78893
g3
sS'name'
p78894
S'function'
p78895
sS'required'
p78896
I00
sS'group_name'
p78897
Nsa(dp78898
S'description'
p78899
S'Energy release rate type parameter\n'
p78900
sS'cpp_type'
p78901
S'double'
p78902
sS'default'
p78903
S'1'
p78904
sS'name'
p78905
S'gc'
p78906
sS'required'
p78907
I00
sS'group_name'
p78908
Nsa(dp78909
S'description'
p78910
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78911
sS'cpp_type'
p78912
S'bool'
p78913
sS'default'
p78914
S'1'
p78915
sS'name'
p78916
S'implicit'
p78917
sS'required'
p78918
I00
sS'group_name'
p78919
S'Advanced'
p78920
sa(dp78921
S'description'
p78922
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78923
sS'cpp_type'
p78924
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78925
sS'default'
p78926
g3
sS'name'
p78927
S'output_properties'
p78928
sS'required'
p78929
I00
sS'group_name'
p78930
S'Outputs'
p78931
sa(dp78932
S'description'
p78933
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78934
sS'cpp_type'
p78935
S'std::vector<OutputName, std::allocator<OutputName> >'
p78936
sS'default'
p78937
S'none'
p78938
sS'name'
p78939
S'outputs'
p78940
sS'required'
p78941
I00
sS'group_name'
p78942
S'Outputs'
p78943
sa(dp78944
S'description'
p78945
S'The seed for the master random number generator\n'
p78946
sS'cpp_type'
p78947
S'unsigned int'
p78948
sS'default'
p78949
S'0'
p78950
sS'name'
p78951
S'seed'
p78952
sS'required'
p78953
I00
sS'group_name'
p78954
S'Advanced'
p78955
sa(dp78956
S'description'
p78957
g3
sS'cpp_type'
p78958
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78959
sS'default'
p78960
S'PFFracBulkRateMaterial'
p78961
sS'name'
p78962
S'type'
p78963
sS'required'
p78964
I00
sS'group_name'
p78965
Nsa(dp78966
S'description'
p78967
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78968
sS'cpp_type'
p78969
S'bool'
p78970
sS'default'
p78971
S'0'
p78972
sS'name'
p78973
S'use_displaced_mesh'
p78974
sS'required'
p78975
I00
sS'group_name'
p78976
S'Advanced'
p78977
sasS'name'
p78978
S'/Materials/PFFracBulkRateMaterial'
p78979
sa(dp78980
S'description'
p78981
S'Phase field parameters for polynomial free energy for single component systems\n'
p78982
sS'subblocks'
p78983
NsS'parameters'
p78984
(lp78985
(dp78986
S'description'
p78987
S'Diffusivity prefactor for vacancies in m^2/s\n'
p78988
sS'cpp_type'
p78989
S'double'
p78990
sS'default'
p78991
g3
sS'name'
p78992
S'D0'
p78993
sS'required'
p78994
I01
sS'group_name'
p78995
Nsa(dp78996
S'description'
p78997
S'Formation energy in eV\n'
p78998
sS'cpp_type'
p78999
S'double'
p79000
sS'default'
p79001
g3
sS'name'
p79002
S'Ef'
p79003
sS'required'
p79004
I01
sS'group_name'
p79005
Nsa(dp79006
S'description'
p79007
S'Migration energy in eV\n'
p79008
sS'cpp_type'
p79009
S'double'
p79010
sS'default'
p79011
g3
sS'name'
p79012
S'Em'
p79013
sS'required'
p79014
I01
sS'group_name'
p79015
Nsa(dp79016
S'description'
p79017
S'Temperature variable in Kelvin\n'
p79018
sS'cpp_type'
p79019
S'std::vector<VariableName>'
p79020
sS'default'
p79021
g3
sS'name'
p79022
S'T'
p79023
sS'required'
p79024
I00
sS'group_name'
p79025
Nsa(dp79026
S'description'
p79027
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79028
sS'cpp_type'
p79029
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79030
sS'default'
p79031
g3
sS'name'
p79032
S'block'
p79033
sS'required'
p79034
I00
sS'group_name'
p79035
Nsa(dp79036
S'description'
p79037
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79038
sS'cpp_type'
p79039
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79040
sS'default'
p79041
g3
sS'name'
p79042
S'boundary'
p79043
sS'required'
p79044
I00
sS'group_name'
p79045
Nsa(dp79046
S'description'
p79047
S'Concentration\n'
p79048
sS'cpp_type'
p79049
S'std::vector<VariableName>'
p79050
sS'default'
p79051
g3
sS'name'
p79052
S'c'
p79053
sS'required'
p79054
I01
sS'group_name'
p79055
Nsa(dp79056
S'description'
p79057
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79058
sS'cpp_type'
p79059
S'bool'
p79060
sS'default'
p79061
S'1'
p79062
sS'name'
p79063
S'compute'
p79064
sS'required'
p79065
I00
sS'group_name'
p79066
Nsa(dp79067
S'description'
p79068
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79069
sS'cpp_type'
p79070
S'bool'
p79071
sS'default'
p79072
S'0'
p79073
sS'name'
p79074
S'constant_on_elem'
p79075
sS'required'
p79076
I00
sS'group_name'
p79077
S'Advanced'
p79078
sa(dp79079
S'description'
p79080
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79081
sS'cpp_type'
p79082
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79083
sS'default'
p79084
g3
sS'name'
p79085
S'control_tags'
p79086
sS'required'
p79087
I00
sS'group_name'
p79088
S'Advanced'
p79089
sa(dp79090
S'description'
p79091
S'Set the enabled status of the MooseObject.\n'
p79092
sS'cpp_type'
p79093
S'bool'
p79094
sS'default'
p79095
S'1'
p79096
sS'name'
p79097
S'enable'
p79098
sS'required'
p79099
I00
sS'group_name'
p79100
S'Advanced'
p79101
sa(dp79102
S'description'
p79103
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79104
sS'cpp_type'
p79105
S'bool'
p79106
sS'default'
p79107
S'1'
p79108
sS'name'
p79109
S'implicit'
p79110
sS'required'
p79111
I00
sS'group_name'
p79112
S'Advanced'
p79113
sa(dp79114
S'description'
p79115
S'The interfacial width of void surface in the lengthscale of the problem\n'
p79116
sS'cpp_type'
p79117
S'double'
p79118
sS'default'
p79119
g3
sS'name'
p79120
S'int_width'
p79121
sS'required'
p79122
I01
sS'group_name'
p79123
Nsa(dp79124
S'description'
p79125
S'defines the base length scale of the problem in m\n'
p79126
sS'cpp_type'
p79127
S'double'
p79128
sS'default'
p79129
S'1e-09'
p79130
sS'name'
p79131
S'length_scale'
p79132
sS'required'
p79133
I00
sS'group_name'
p79134
Nsa(dp79135
S'description'
p79136
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79137
sS'cpp_type'
p79138
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79139
sS'default'
p79140
g3
sS'name'
p79141
S'output_properties'
p79142
sS'required'
p79143
I00
sS'group_name'
p79144
S'Outputs'
p79145
sa(dp79146
S'description'
p79147
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79148
sS'cpp_type'
p79149
S'std::vector<OutputName, std::allocator<OutputName> >'
p79150
sS'default'
p79151
S'none'
p79152
sS'name'
p79153
S'outputs'
p79154
sS'required'
p79155
I00
sS'group_name'
p79156
S'Outputs'
p79157
sa(dp79158
S'name'
p79159
S'polynomial_order'
p79160
sS'cpp_type'
p79161
S'MooseEnum'
p79162
sS'default'
p79163
g3
sS'description'
p79164
S'Order of polynomial free energy\n'
p79165
sS'required'
p79166
I01
sS'options'
p79167
S'4 6 8'
p79168
sS'group_name'
p79169
Nsa(dp79170
S'description'
p79171
S'The seed for the master random number generator\n'
p79172
sS'cpp_type'
p79173
S'unsigned int'
p79174
sS'default'
p79175
S'0'
p79176
sS'name'
p79177
S'seed'
p79178
sS'required'
p79179
I00
sS'group_name'
p79180
S'Advanced'
p79181
sa(dp79182
S'description'
p79183
S'Surface energy in J/m2\n'
p79184
sS'cpp_type'
p79185
S'double'
p79186
sS'default'
p79187
g3
sS'name'
p79188
S'surface_energy'
p79189
sS'required'
p79190
I01
sS'group_name'
p79191
Nsa(dp79192
S'description'
p79193
S'defines the base time scale of the problem\n'
p79194
sS'cpp_type'
p79195
S'double'
p79196
sS'default'
p79197
S'1e-09'
p79198
sS'name'
p79199
S'time_scale'
p79200
sS'required'
p79201
I00
sS'group_name'
p79202
Nsa(dp79203
S'description'
p79204
g3
sS'cpp_type'
p79205
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79206
sS'default'
p79207
S'PFParamsPolyFreeEnergy'
p79208
sS'name'
p79209
S'type'
p79210
sS'required'
p79211
I00
sS'group_name'
p79212
Nsa(dp79213
S'description'
p79214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79215
sS'cpp_type'
p79216
S'bool'
p79217
sS'default'
p79218
S'0'
p79219
sS'name'
p79220
S'use_displaced_mesh'
p79221
sS'required'
p79222
I00
sS'group_name'
p79223
S'Advanced'
p79224
sasS'name'
p79225
S'/Materials/PFParamsPolyFreeEnergy'
p79226
sa(dp79227
S'description'
p79228
S'Parsed Function Material.\n'
p79229
sS'subblocks'
p79230
NsS'parameters'
p79231
(lp79232
(dp79233
S'description'
p79234
S'Arguments of F() - use vector coupling\n'
p79235
sS'cpp_type'
p79236
S'std::vector<VariableName>'
p79237
sS'default'
p79238
g3
sS'name'
p79239
S'args'
p79240
sS'required'
p79241
I00
sS'group_name'
p79242
Nsa(dp79243
S'description'
p79244
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79245
sS'cpp_type'
p79246
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79247
sS'default'
p79248
g3
sS'name'
p79249
S'block'
p79250
sS'required'
p79251
I00
sS'group_name'
p79252
Nsa(dp79253
S'description'
p79254
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79255
sS'cpp_type'
p79256
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79257
sS'default'
p79258
g3
sS'name'
p79259
S'boundary'
p79260
sS'required'
p79261
I00
sS'group_name'
p79262
Nsa(dp79263
S'description'
p79264
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79265
sS'cpp_type'
p79266
S'bool'
p79267
sS'default'
p79268
S'1'
p79269
sS'name'
p79270
S'compute'
p79271
sS'required'
p79272
I00
sS'group_name'
p79273
Nsa(dp79274
S'description'
p79275
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p79276
sS'cpp_type'
p79277
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79278
sS'default'
p79279
g3
sS'name'
p79280
S'constant_expressions'
p79281
sS'required'
p79282
I00
sS'group_name'
p79283
Nsa(dp79284
S'description'
p79285
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p79286
sS'cpp_type'
p79287
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79288
sS'default'
p79289
g3
sS'name'
p79290
S'constant_names'
p79291
sS'required'
p79292
I00
sS'group_name'
p79293
Nsa(dp79294
S'description'
p79295
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79296
sS'cpp_type'
p79297
S'bool'
p79298
sS'default'
p79299
S'0'
p79300
sS'name'
p79301
S'constant_on_elem'
p79302
sS'required'
p79303
I00
sS'group_name'
p79304
S'Advanced'
p79305
sa(dp79306
S'description'
p79307
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79308
sS'cpp_type'
p79309
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79310
sS'default'
p79311
g3
sS'name'
p79312
S'control_tags'
p79313
sS'required'
p79314
I00
sS'group_name'
p79315
S'Advanced'
p79316
sa(dp79317
S'description'
p79318
S'Disable the function parser algebraic optimizer\n'
p79319
sS'cpp_type'
p79320
S'bool'
p79321
sS'default'
p79322
S'0'
p79323
sS'name'
p79324
S'disable_fpoptimizer'
p79325
sS'required'
p79326
I00
sS'group_name'
p79327
S'Advanced'
p79328
sa(dp79329
S'description'
p79330
S'Set the enabled status of the MooseObject.\n'
p79331
sS'cpp_type'
p79332
S'bool'
p79333
sS'default'
p79334
S'1'
p79335
sS'name'
p79336
S'enable'
p79337
sS'required'
p79338
I00
sS'group_name'
p79339
S'Advanced'
p79340
sa(dp79341
S'description'
p79342
S'Enable cacheing of function derivatives for faster startup time\n'
p79343
sS'cpp_type'
p79344
S'bool'
p79345
sS'default'
p79346
S'1'
p79347
sS'name'
p79348
S'enable_ad_cache'
p79349
sS'required'
p79350
I00
sS'group_name'
p79351
S'Advanced'
p79352
sa(dp79353
S'description'
p79354
S'Enable automatic immediate optimization of derivatives\n'
p79355
sS'cpp_type'
p79356
S'bool'
p79357
sS'default'
p79358
S'1'
p79359
sS'name'
p79360
S'enable_auto_optimize'
p79361
sS'required'
p79362
I00
sS'group_name'
p79363
S'Advanced'
p79364
sa(dp79365
S'description'
p79366
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p79367
sS'cpp_type'
p79368
S'bool'
p79369
sS'default'
p79370
S'1'
p79371
sS'name'
p79372
S'enable_jit'
p79373
sS'required'
p79374
I00
sS'group_name'
p79375
S'Advanced'
p79376
sa(dp79377
S'description'
p79378
S'Base name of the free energy function (used to name the material properties)\n'
p79379
sS'cpp_type'
p79380
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79381
sS'default'
p79382
S'F'
p79383
sS'name'
p79384
S'f_name'
p79385
sS'required'
p79386
I00
sS'group_name'
p79387
Nsa(dp79388
S'description'
p79389
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p79390
sS'cpp_type'
p79391
S'bool'
p79392
sS'default'
p79393
S'0'
p79394
sS'name'
p79395
S'fail_on_evalerror'
p79396
sS'required'
p79397
I00
sS'group_name'
p79398
S'Advanced'
p79399
sa(dp79400
S'description'
p79401
S'FParser function expression for the phase free energy\n'
p79402
sS'cpp_type'
p79403
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79404
sS'default'
p79405
g3
sS'name'
p79406
S'function'
p79407
sS'required'
p79408
I01
sS'group_name'
p79409
Nsa(dp79410
S'description'
p79411
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79412
sS'cpp_type'
p79413
S'bool'
p79414
sS'default'
p79415
S'1'
p79416
sS'name'
p79417
S'implicit'
p79418
sS'required'
p79419
I00
sS'group_name'
p79420
S'Advanced'
p79421
sa(dp79422
S'description'
p79423
S'Vector of material properties used in the parsed function\n'
p79424
sS'cpp_type'
p79425
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79426
sS'default'
p79427
g3
sS'name'
p79428
S'material_property_names'
p79429
sS'required'
p79430
I00
sS'group_name'
p79431
Nsa(dp79432
S'description'
p79433
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79434
sS'cpp_type'
p79435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79436
sS'default'
p79437
g3
sS'name'
p79438
S'output_properties'
p79439
sS'required'
p79440
I00
sS'group_name'
p79441
S'Outputs'
p79442
sa(dp79443
S'description'
p79444
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79445
sS'cpp_type'
p79446
S'std::vector<OutputName, std::allocator<OutputName> >'
p79447
sS'default'
p79448
S'none'
p79449
sS'name'
p79450
S'outputs'
p79451
sS'required'
p79452
I00
sS'group_name'
p79453
S'Outputs'
p79454
sa(dp79455
S'description'
p79456
S'The seed for the master random number generator\n'
p79457
sS'cpp_type'
p79458
S'unsigned int'
p79459
sS'default'
p79460
S'0'
p79461
sS'name'
p79462
S'seed'
p79463
sS'required'
p79464
I00
sS'group_name'
p79465
S'Advanced'
p79466
sa(dp79467
S'description'
p79468
S'Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n'
p79469
sS'cpp_type'
p79470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79471
sS'default'
p79472
g3
sS'name'
p79473
S'tol_names'
p79474
sS'required'
p79475
I00
sS'group_name'
p79476
Nsa(dp79477
S'description'
p79478
S'Vector of tolerance values for the variables in tol_names\n'
p79479
sS'cpp_type'
p79480
S'std::vector<double, std::allocator<double> >'
p79481
sS'default'
p79482
g3
sS'name'
p79483
S'tol_values'
p79484
sS'required'
p79485
I00
sS'group_name'
p79486
Nsa(dp79487
S'description'
p79488
g3
sS'cpp_type'
p79489
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79490
sS'default'
p79491
S'ParsedMaterial'
p79492
sS'name'
p79493
S'type'
p79494
sS'required'
p79495
I00
sS'group_name'
p79496
Nsa(dp79497
S'description'
p79498
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79499
sS'cpp_type'
p79500
S'bool'
p79501
sS'default'
p79502
S'0'
p79503
sS'name'
p79504
S'use_displaced_mesh'
p79505
sS'required'
p79506
I00
sS'group_name'
p79507
S'Advanced'
p79508
sasS'name'
p79509
S'/Materials/ParsedMaterial'
p79510
sa(dp79511
S'description'
p79512
S'Calculate normal tensor of a phase based on gradient\n'
p79513
sS'subblocks'
p79514
NsS'parameters'
p79515
(lp79516
(dp79517
S'description'
p79518
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79519
sS'cpp_type'
p79520
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79521
sS'default'
p79522
g3
sS'name'
p79523
S'block'
p79524
sS'required'
p79525
I00
sS'group_name'
p79526
Nsa(dp79527
S'description'
p79528
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79529
sS'cpp_type'
p79530
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79531
sS'default'
p79532
g3
sS'name'
p79533
S'boundary'
p79534
sS'required'
p79535
I00
sS'group_name'
p79536
Nsa(dp79537
S'description'
p79538
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79539
sS'cpp_type'
p79540
S'bool'
p79541
sS'default'
p79542
S'1'
p79543
sS'name'
p79544
S'compute'
p79545
sS'required'
p79546
I00
sS'group_name'
p79547
Nsa(dp79548
S'description'
p79549
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79550
sS'cpp_type'
p79551
S'bool'
p79552
sS'default'
p79553
S'0'
p79554
sS'name'
p79555
S'constant_on_elem'
p79556
sS'required'
p79557
I00
sS'group_name'
p79558
S'Advanced'
p79559
sa(dp79560
S'description'
p79561
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79562
sS'cpp_type'
p79563
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79564
sS'default'
p79565
g3
sS'name'
p79566
S'control_tags'
p79567
sS'required'
p79568
I00
sS'group_name'
p79569
S'Advanced'
p79570
sa(dp79571
S'description'
p79572
S'Set the enabled status of the MooseObject.\n'
p79573
sS'cpp_type'
p79574
S'bool'
p79575
sS'default'
p79576
S'1'
p79577
sS'name'
p79578
S'enable'
p79579
sS'required'
p79580
I00
sS'group_name'
p79581
S'Advanced'
p79582
sa(dp79583
S'description'
p79584
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79585
sS'cpp_type'
p79586
S'bool'
p79587
sS'default'
p79588
S'1'
p79589
sS'name'
p79590
S'implicit'
p79591
sS'required'
p79592
I00
sS'group_name'
p79593
S'Advanced'
p79594
sa(dp79595
S'description'
p79596
S'Name of normal tensor\n'
p79597
sS'cpp_type'
p79598
S'MaterialPropertyName'
p79599
sS'default'
p79600
g3
sS'name'
p79601
S'normal_tensor_name'
p79602
sS'required'
p79603
I01
sS'group_name'
p79604
Nsa(dp79605
S'description'
p79606
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79607
sS'cpp_type'
p79608
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79609
sS'default'
p79610
g3
sS'name'
p79611
S'output_properties'
p79612
sS'required'
p79613
I00
sS'group_name'
p79614
S'Outputs'
p79615
sa(dp79616
S'description'
p79617
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79618
sS'cpp_type'
p79619
S'std::vector<OutputName, std::allocator<OutputName> >'
p79620
sS'default'
p79621
S'none'
p79622
sS'name'
p79623
S'outputs'
p79624
sS'required'
p79625
I00
sS'group_name'
p79626
S'Outputs'
p79627
sa(dp79628
S'description'
p79629
S'Phase variable\n'
p79630
sS'cpp_type'
p79631
S'std::vector<VariableName>'
p79632
sS'default'
p79633
g3
sS'name'
p79634
S'phase'
p79635
sS'required'
p79636
I01
sS'group_name'
p79637
Nsa(dp79638
S'description'
p79639
S'The seed for the master random number generator\n'
p79640
sS'cpp_type'
p79641
S'unsigned int'
p79642
sS'default'
p79643
S'0'
p79644
sS'name'
p79645
S'seed'
p79646
sS'required'
p79647
I00
sS'group_name'
p79648
S'Advanced'
p79649
sa(dp79650
S'description'
p79651
g3
sS'cpp_type'
p79652
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79653
sS'default'
p79654
S'PhaseNormalTensor'
p79655
sS'name'
p79656
S'type'
p79657
sS'required'
p79658
I00
sS'group_name'
p79659
Nsa(dp79660
S'description'
p79661
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79662
sS'cpp_type'
p79663
S'bool'
p79664
sS'default'
p79665
S'0'
p79666
sS'name'
p79667
S'use_displaced_mesh'
p79668
sS'required'
p79669
I00
sS'group_name'
p79670
S'Advanced'
p79671
sasS'name'
p79672
S'/Materials/PhaseNormalTensor'
p79673
sa(dp79674
S'description'
p79675
S'Compute a property using a piecewise linear interpolation to define its dependence on a variable\n'
p79676
sS'subblocks'
p79677
NsS'parameters'
p79678
(lp79679
(dp79680
S'description'
p79681
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79682
sS'cpp_type'
p79683
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79684
sS'default'
p79685
g3
sS'name'
p79686
S'block'
p79687
sS'required'
p79688
I00
sS'group_name'
p79689
Nsa(dp79690
S'description'
p79691
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79692
sS'cpp_type'
p79693
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79694
sS'default'
p79695
g3
sS'name'
p79696
S'boundary'
p79697
sS'required'
p79698
I00
sS'group_name'
p79699
Nsa(dp79700
S'description'
p79701
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79702
sS'cpp_type'
p79703
S'bool'
p79704
sS'default'
p79705
S'1'
p79706
sS'name'
p79707
S'compute'
p79708
sS'required'
p79709
I00
sS'group_name'
p79710
Nsa(dp79711
S'description'
p79712
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79713
sS'cpp_type'
p79714
S'bool'
p79715
sS'default'
p79716
S'0'
p79717
sS'name'
p79718
S'constant_on_elem'
p79719
sS'required'
p79720
I00
sS'group_name'
p79721
S'Advanced'
p79722
sa(dp79723
S'description'
p79724
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79725
sS'cpp_type'
p79726
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79727
sS'default'
p79728
g3
sS'name'
p79729
S'control_tags'
p79730
sS'required'
p79731
I00
sS'group_name'
p79732
S'Advanced'
p79733
sa(dp79734
S'description'
p79735
S'Set the enabled status of the MooseObject.\n'
p79736
sS'cpp_type'
p79737
S'bool'
p79738
sS'default'
p79739
S'1'
p79740
sS'name'
p79741
S'enable'
p79742
sS'required'
p79743
I00
sS'group_name'
p79744
S'Advanced'
p79745
sa(dp79746
S'description'
p79747
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79748
sS'cpp_type'
p79749
S'bool'
p79750
sS'default'
p79751
S'1'
p79752
sS'name'
p79753
S'implicit'
p79754
sS'required'
p79755
I00
sS'group_name'
p79756
S'Advanced'
p79757
sa(dp79758
S'description'
p79759
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79760
sS'cpp_type'
p79761
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79762
sS'default'
p79763
g3
sS'name'
p79764
S'output_properties'
p79765
sS'required'
p79766
I00
sS'group_name'
p79767
S'Outputs'
p79768
sa(dp79769
S'description'
p79770
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79771
sS'cpp_type'
p79772
S'std::vector<OutputName, std::allocator<OutputName> >'
p79773
sS'default'
p79774
S'none'
p79775
sS'name'
p79776
S'outputs'
p79777
sS'required'
p79778
I00
sS'group_name'
p79779
S'Outputs'
p79780
sa(dp79781
S'description'
p79782
S'The name of the property this material will compute\n'
p79783
sS'cpp_type'
p79784
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79785
sS'default'
p79786
g3
sS'name'
p79787
S'property'
p79788
sS'required'
p79789
I01
sS'group_name'
p79790
Nsa(dp79791
S'description'
p79792
S'Scale factor to be applied to the ordinate values\n'
p79793
sS'cpp_type'
p79794
S'double'
p79795
sS'default'
p79796
S'1'
p79797
sS'name'
p79798
S'scale_factor'
p79799
sS'required'
p79800
I00
sS'group_name'
p79801
Nsa(dp79802
S'description'
p79803
S'The seed for the master random number generator\n'
p79804
sS'cpp_type'
p79805
S'unsigned int'
p79806
sS'default'
p79807
S'0'
p79808
sS'name'
p79809
S'seed'
p79810
sS'required'
p79811
I00
sS'group_name'
p79812
S'Advanced'
p79813
sa(dp79814
S'description'
p79815
g3
sS'cpp_type'
p79816
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79817
sS'default'
p79818
S'PiecewiseLinearInterpolationMaterial'
p79819
sS'name'
p79820
S'type'
p79821
sS'required'
p79822
I00
sS'group_name'
p79823
Nsa(dp79824
S'description'
p79825
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79826
sS'cpp_type'
p79827
S'bool'
p79828
sS'default'
p79829
S'0'
p79830
sS'name'
p79831
S'use_displaced_mesh'
p79832
sS'required'
p79833
I00
sS'group_name'
p79834
S'Advanced'
p79835
sa(dp79836
S'description'
p79837
S'The name of the variable whose value is used as the abscissa in the interpolation\n'
p79838
sS'cpp_type'
p79839
S'std::vector<VariableName>'
p79840
sS'default'
p79841
g3
sS'name'
p79842
S'variable'
p79843
sS'required'
p79844
I01
sS'group_name'
p79845
Nsa(dp79846
S'description'
p79847
S'The abscissa values\n'
p79848
sS'cpp_type'
p79849
S'std::vector<double, std::allocator<double> >'
p79850
sS'default'
p79851
g3
sS'name'
p79852
S'x'
p79853
sS'required'
p79854
I00
sS'group_name'
p79855
Nsa(dp79856
S'description'
p79857
S'All function data, supplied in abscissa, ordinate pairs\n'
p79858
sS'cpp_type'
p79859
S'std::vector<double, std::allocator<double> >'
p79860
sS'default'
p79861
g3
sS'name'
p79862
S'xy_data'
p79863
sS'required'
p79864
I00
sS'group_name'
p79865
Nsa(dp79866
S'description'
p79867
S'The ordinate values\n'
p79868
sS'cpp_type'
p79869
S'std::vector<double, std::allocator<double> >'
p79870
sS'default'
p79871
g3
sS'name'
p79872
S'y'
p79873
sS'required'
p79874
I00
sS'group_name'
p79875
NsasS'name'
p79876
S'/Materials/PiecewiseLinearInterpolationMaterial'
p79877
sa(dp79878
S'description'
p79879
S'Polynomial free energy for single component systems\n'
p79880
sS'subblocks'
p79881
NsS'parameters'
p79882
(lp79883
(dp79884
S'description'
p79885
S'Name of the material property storing the barrier height\n'
p79886
sS'cpp_type'
p79887
S'MaterialPropertyName'
p79888
sS'default'
p79889
S'barr_height'
p79890
sS'name'
p79891
S'W_name'
p79892
sS'required'
p79893
I00
sS'group_name'
p79894
Nsa(dp79895
S'description'
p79896
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79897
sS'cpp_type'
p79898
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79899
sS'default'
p79900
g3
sS'name'
p79901
S'block'
p79902
sS'required'
p79903
I00
sS'group_name'
p79904
Nsa(dp79905
S'description'
p79906
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79907
sS'cpp_type'
p79908
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79909
sS'default'
p79910
g3
sS'name'
p79911
S'boundary'
p79912
sS'required'
p79913
I00
sS'group_name'
p79914
Nsa(dp79915
S'description'
p79916
S'Concentration\n'
p79917
sS'cpp_type'
p79918
S'std::vector<VariableName>'
p79919
sS'default'
p79920
g3
sS'name'
p79921
S'c'
p79922
sS'required'
p79923
I01
sS'group_name'
p79924
Nsa(dp79925
S'description'
p79926
S'Name of material property storing the equilibrium concentration\n'
p79927
sS'cpp_type'
p79928
S'MaterialPropertyName'
p79929
sS'default'
p79930
S'c_eq'
p79931
sS'name'
p79932
S'c_eq_name'
p79933
sS'required'
p79934
I00
sS'group_name'
p79935
Nsa(dp79936
S'description'
p79937
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79938
sS'cpp_type'
p79939
S'bool'
p79940
sS'default'
p79941
S'1'
p79942
sS'name'
p79943
S'compute'
p79944
sS'required'
p79945
I00
sS'group_name'
p79946
Nsa(dp79947
S'description'
p79948
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79949
sS'cpp_type'
p79950
S'bool'
p79951
sS'default'
p79952
S'0'
p79953
sS'name'
p79954
S'constant_on_elem'
p79955
sS'required'
p79956
I00
sS'group_name'
p79957
S'Advanced'
p79958
sa(dp79959
S'description'
p79960
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79961
sS'cpp_type'
p79962
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79963
sS'default'
p79964
g3
sS'name'
p79965
S'control_tags'
p79966
sS'required'
p79967
I00
sS'group_name'
p79968
S'Advanced'
p79969
sa(dp79970
S'description'
p79971
S'Maximum order of derivatives taken\n'
p79972
sS'cpp_type'
p79973
S'unsigned int'
p79974
sS'default'
p79975
S'3'
p79976
sS'name'
p79977
S'derivative_order'
p79978
sS'required'
p79979
I00
sS'group_name'
p79980
Nsa(dp79981
S'description'
p79982
S'Disable the function parser algebraic optimizer\n'
p79983
sS'cpp_type'
p79984
S'bool'
p79985
sS'default'
p79986
S'0'
p79987
sS'name'
p79988
S'disable_fpoptimizer'
p79989
sS'required'
p79990
I00
sS'group_name'
p79991
S'Advanced'
p79992
sa(dp79993
S'description'
p79994
S'Set the enabled status of the MooseObject.\n'
p79995
sS'cpp_type'
p79996
S'bool'
p79997
sS'default'
p79998
S'1'
p79999
sS'name'
p80000
S'enable'
p80001
sS'required'
p80002
I00
sS'group_name'
p80003
S'Advanced'
p80004
sa(dp80005
S'description'
p80006
S'Enable cacheing of function derivatives for faster startup time\n'
p80007
sS'cpp_type'
p80008
S'bool'
p80009
sS'default'
p80010
S'1'
p80011
sS'name'
p80012
S'enable_ad_cache'
p80013
sS'required'
p80014
I00
sS'group_name'
p80015
S'Advanced'
p80016
sa(dp80017
S'description'
p80018
S'Enable automatic immediate optimization of derivatives\n'
p80019
sS'cpp_type'
p80020
S'bool'
p80021
sS'default'
p80022
S'1'
p80023
sS'name'
p80024
S'enable_auto_optimize'
p80025
sS'required'
p80026
I00
sS'group_name'
p80027
S'Advanced'
p80028
sa(dp80029
S'description'
p80030
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p80031
sS'cpp_type'
p80032
S'bool'
p80033
sS'default'
p80034
S'1'
p80035
sS'name'
p80036
S'enable_jit'
p80037
sS'required'
p80038
I00
sS'group_name'
p80039
S'Advanced'
p80040
sa(dp80041
S'description'
p80042
S'Base name of the free energy function (used to name the material properties)\n'
p80043
sS'cpp_type'
p80044
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80045
sS'default'
p80046
S'F'
p80047
sS'name'
p80048
S'f_name'
p80049
sS'required'
p80050
I00
sS'group_name'
p80051
Nsa(dp80052
S'description'
p80053
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p80054
sS'cpp_type'
p80055
S'bool'
p80056
sS'default'
p80057
S'0'
p80058
sS'name'
p80059
S'fail_on_evalerror'
p80060
sS'required'
p80061
I00
sS'group_name'
p80062
S'Advanced'
p80063
sa(dp80064
S'description'
p80065
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80066
sS'cpp_type'
p80067
S'bool'
p80068
sS'default'
p80069
S'1'
p80070
sS'name'
p80071
S'implicit'
p80072
sS'required'
p80073
I00
sS'group_name'
p80074
S'Advanced'
p80075
sa(dp80076
S'description'
p80077
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80078
sS'cpp_type'
p80079
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80080
sS'default'
p80081
g3
sS'name'
p80082
S'output_properties'
p80083
sS'required'
p80084
I00
sS'group_name'
p80085
S'Outputs'
p80086
sa(dp80087
S'description'
p80088
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80089
sS'cpp_type'
p80090
S'std::vector<OutputName, std::allocator<OutputName> >'
p80091
sS'default'
p80092
S'none'
p80093
sS'name'
p80094
S'outputs'
p80095
sS'required'
p80096
I00
sS'group_name'
p80097
S'Outputs'
p80098
sa(dp80099
S'name'
p80100
S'polynomial_order'
p80101
sS'cpp_type'
p80102
S'MooseEnum'
p80103
sS'default'
p80104
g3
sS'description'
p80105
S'Order of polynomial free energy\n'
p80106
sS'required'
p80107
I01
sS'options'
p80108
S'4 6 8'
p80109
sS'group_name'
p80110
Nsa(dp80111
S'description'
p80112
S'The seed for the master random number generator\n'
p80113
sS'cpp_type'
p80114
S'unsigned int'
p80115
sS'default'
p80116
S'0'
p80117
sS'name'
p80118
S'seed'
p80119
sS'required'
p80120
I00
sS'group_name'
p80121
S'Advanced'
p80122
sa(dp80123
S'description'
p80124
S'Flag to indicate if third derivatives are needed\n'
p80125
sS'cpp_type'
p80126
S'bool'
p80127
sS'default'
p80128
g3
sS'name'
p80129
S'third_derivatives'
p80130
sS'required'
p80131
I00
sS'group_name'
p80132
Nsa(dp80133
S'description'
p80134
g3
sS'cpp_type'
p80135
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80136
sS'default'
p80137
S'PolynomialFreeEnergy'
p80138
sS'name'
p80139
S'type'
p80140
sS'required'
p80141
I00
sS'group_name'
p80142
Nsa(dp80143
S'description'
p80144
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80145
sS'cpp_type'
p80146
S'bool'
p80147
sS'default'
p80148
S'0'
p80149
sS'name'
p80150
S'use_displaced_mesh'
p80151
sS'required'
p80152
I00
sS'group_name'
p80153
S'Advanced'
p80154
sasS'name'
p80155
S'/Materials/PolynomialFreeEnergy'
p80156
sa(dp80157
S'description'
p80158
S'This class uses the discrete material in a radial return isotropic power law creep model.  This class can be used in conjunction with other creep and plasticity materials for more complex simulations.\n'
p80159
sS'subblocks'
p80160
NsS'parameters'
p80161
(lp80162
(dp80163
S'description'
p80164
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p80165
sS'cpp_type'
p80166
S'double'
p80167
sS'default'
p80168
S'1e-20'
p80169
sS'name'
p80170
S'absolute_tolerance'
p80171
sS'required'
p80172
I00
sS'group_name'
p80173
Nsa(dp80174
S'description'
p80175
S'Activation energy\n'
p80176
sS'cpp_type'
p80177
S'double'
p80178
sS'default'
p80179
g3
sS'name'
p80180
S'activation_energy'
p80181
sS'required'
p80182
I01
sS'group_name'
p80183
Nsa(dp80184
S'description'
p80185
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p80186
sS'cpp_type'
p80187
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80188
sS'default'
p80189
g3
sS'name'
p80190
S'base_name'
p80191
sS'required'
p80192
I00
sS'group_name'
p80193
Nsa(dp80194
S'description'
p80195
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80196
sS'cpp_type'
p80197
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80198
sS'default'
p80199
g3
sS'name'
p80200
S'block'
p80201
sS'required'
p80202
I00
sS'group_name'
p80203
Nsa(dp80204
S'description'
p80205
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80206
sS'cpp_type'
p80207
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80208
sS'default'
p80209
g3
sS'name'
p80210
S'boundary'
p80211
sS'required'
p80212
I00
sS'group_name'
p80213
Nsa(dp80214
S'description'
p80215
S'Leading coefficent in power-law equation\n'
p80216
sS'cpp_type'
p80217
S'double'
p80218
sS'default'
p80219
g3
sS'name'
p80220
S'coefficient'
p80221
sS'required'
p80222
I01
sS'group_name'
p80223
Nsa(dp80224
S'description'
p80225
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80226
sS'cpp_type'
p80227
S'bool'
p80228
sS'default'
p80229
S'0'
p80230
sS'name'
p80231
S'constant_on_elem'
p80232
sS'required'
p80233
I00
sS'group_name'
p80234
S'Advanced'
p80235
sa(dp80236
S'description'
p80237
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80238
sS'cpp_type'
p80239
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80240
sS'default'
p80241
g3
sS'name'
p80242
S'control_tags'
p80243
sS'required'
p80244
I00
sS'group_name'
p80245
S'Advanced'
p80246
sa(dp80247
S'description'
p80248
S'Set the enabled status of the MooseObject.\n'
p80249
sS'cpp_type'
p80250
S'bool'
p80251
sS'default'
p80252
S'1'
p80253
sS'name'
p80254
S'enable'
p80255
sS'required'
p80256
I00
sS'group_name'
p80257
S'Advanced'
p80258
sa(dp80259
S'description'
p80260
S'Universal gas constant\n'
p80261
sS'cpp_type'
p80262
S'double'
p80263
sS'default'
p80264
S'8.3143'
p80265
sS'name'
p80266
S'gas_constant'
p80267
sS'required'
p80268
I00
sS'group_name'
p80269
Nsa(dp80270
S'description'
p80271
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80272
sS'cpp_type'
p80273
S'bool'
p80274
sS'default'
p80275
S'1'
p80276
sS'name'
p80277
S'implicit'
p80278
sS'required'
p80279
I00
sS'group_name'
p80280
S'Advanced'
p80281
sa(dp80282
S'description'
p80283
S'Exponent on time in power-law equation\n'
p80284
sS'cpp_type'
p80285
S'double'
p80286
sS'default'
p80287
S'0'
p80288
sS'name'
p80289
S'm_exponent'
p80290
sS'required'
p80291
I00
sS'group_name'
p80292
Nsa(dp80293
S'description'
p80294
S'Maximum number of newton iterations in the radial return material\n'
p80295
sS'cpp_type'
p80296
S'unsigned int'
p80297
sS'default'
p80298
S'30'
p80299
sS'name'
p80300
S'max_iterations'
p80301
sS'required'
p80302
I00
sS'group_name'
p80303
Nsa(dp80304
S'description'
p80305
S'Exponent on effective stress in power-law equation\n'
p80306
sS'cpp_type'
p80307
S'double'
p80308
sS'default'
p80309
g3
sS'name'
p80310
S'n_exponent'
p80311
sS'required'
p80312
I01
sS'group_name'
p80313
Nsa(dp80314
S'description'
p80315
S'Set true to output newton iteration information from the radial return material\n'
p80316
sS'cpp_type'
p80317
S'bool'
p80318
sS'default'
p80319
S'0'
p80320
sS'name'
p80321
S'output_iteration_info'
p80322
sS'required'
p80323
I00
sS'group_name'
p80324
Nsa(dp80325
S'description'
p80326
S'Set true to output the recompute material iteration information when a step fails\n'
p80327
sS'cpp_type'
p80328
S'bool'
p80329
sS'default'
p80330
S'0'
p80331
sS'name'
p80332
S'output_iteration_info_on_error'
p80333
sS'required'
p80334
I00
sS'group_name'
p80335
Nsa(dp80336
S'description'
p80337
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80338
sS'cpp_type'
p80339
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80340
sS'default'
p80341
g3
sS'name'
p80342
S'output_properties'
p80343
sS'required'
p80344
I00
sS'group_name'
p80345
S'Outputs'
p80346
sa(dp80347
S'description'
p80348
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80349
sS'cpp_type'
p80350
S'std::vector<OutputName, std::allocator<OutputName> >'
p80351
sS'default'
p80352
S'none'
p80353
sS'name'
p80354
S'outputs'
p80355
sS'required'
p80356
I00
sS'group_name'
p80357
S'Outputs'
p80358
sa(dp80359
S'description'
p80360
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p80361
sS'cpp_type'
p80362
S'double'
p80363
sS'default'
p80364
S'1e-08'
p80365
sS'name'
p80366
S'relative_tolerance'
p80367
sS'required'
p80368
I00
sS'group_name'
p80369
Nsa(dp80370
S'description'
p80371
S'The seed for the master random number generator\n'
p80372
sS'cpp_type'
p80373
S'unsigned int'
p80374
sS'default'
p80375
S'0'
p80376
sS'name'
p80377
S'seed'
p80378
sS'required'
p80379
I00
sS'group_name'
p80380
S'Advanced'
p80381
sa(dp80382
S'description'
p80383
S'Start time (if not zero)\n'
p80384
sS'cpp_type'
p80385
S'double'
p80386
sS'default'
p80387
S'0'
p80388
sS'name'
p80389
S'start_time'
p80390
sS'required'
p80391
I00
sS'group_name'
p80392
Nsa(dp80393
S'description'
p80394
S'Coupled temperature\n'
p80395
sS'cpp_type'
p80396
S'std::vector<VariableName>'
p80397
sS'default'
p80398
S'0'
p80399
sS'name'
p80400
S'temperature'
p80401
sS'required'
p80402
I00
sS'group_name'
p80403
Nsa(dp80404
S'description'
p80405
g3
sS'cpp_type'
p80406
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80407
sS'default'
p80408
S'PowerLawCreepStressUpdate'
p80409
sS'name'
p80410
S'type'
p80411
sS'required'
p80412
I00
sS'group_name'
p80413
Nsa(dp80414
S'description'
p80415
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80416
sS'cpp_type'
p80417
S'bool'
p80418
sS'default'
p80419
S'0'
p80420
sS'name'
p80421
S'use_displaced_mesh'
p80422
sS'required'
p80423
I00
sS'group_name'
p80424
S'Advanced'
p80425
sasS'name'
p80426
S'/Materials/PowerLawCreepStressUpdate'
p80427
sa(dp80428
S'description'
p80429
S'Calculates the effective inelastic strain increment required to return the isotropic stress state to a J2 yield surface.  This class is intended to be a parent class for classes with specific constitutive models.\n'
p80430
sS'subblocks'
p80431
NsS'parameters'
p80432
(lp80433
(dp80434
S'description'
p80435
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p80436
sS'cpp_type'
p80437
S'double'
p80438
sS'default'
p80439
S'1e-20'
p80440
sS'name'
p80441
S'absolute_tolerance'
p80442
sS'required'
p80443
I00
sS'group_name'
p80444
Nsa(dp80445
S'description'
p80446
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p80447
sS'cpp_type'
p80448
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80449
sS'default'
p80450
g3
sS'name'
p80451
S'base_name'
p80452
sS'required'
p80453
I00
sS'group_name'
p80454
Nsa(dp80455
S'description'
p80456
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80457
sS'cpp_type'
p80458
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80459
sS'default'
p80460
g3
sS'name'
p80461
S'block'
p80462
sS'required'
p80463
I00
sS'group_name'
p80464
Nsa(dp80465
S'description'
p80466
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80467
sS'cpp_type'
p80468
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80469
sS'default'
p80470
g3
sS'name'
p80471
S'boundary'
p80472
sS'required'
p80473
I00
sS'group_name'
p80474
Nsa(dp80475
S'description'
p80476
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80477
sS'cpp_type'
p80478
S'bool'
p80479
sS'default'
p80480
S'0'
p80481
sS'name'
p80482
S'constant_on_elem'
p80483
sS'required'
p80484
I00
sS'group_name'
p80485
S'Advanced'
p80486
sa(dp80487
S'description'
p80488
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80489
sS'cpp_type'
p80490
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80491
sS'default'
p80492
g3
sS'name'
p80493
S'control_tags'
p80494
sS'required'
p80495
I00
sS'group_name'
p80496
S'Advanced'
p80497
sa(dp80498
S'description'
p80499
S'Set the enabled status of the MooseObject.\n'
p80500
sS'cpp_type'
p80501
S'bool'
p80502
sS'default'
p80503
S'1'
p80504
sS'name'
p80505
S'enable'
p80506
sS'required'
p80507
I00
sS'group_name'
p80508
S'Advanced'
p80509
sa(dp80510
S'description'
p80511
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80512
sS'cpp_type'
p80513
S'bool'
p80514
sS'default'
p80515
S'1'
p80516
sS'name'
p80517
S'implicit'
p80518
sS'required'
p80519
I00
sS'group_name'
p80520
S'Advanced'
p80521
sa(dp80522
S'description'
p80523
S'Maximum number of newton iterations in the radial return material\n'
p80524
sS'cpp_type'
p80525
S'unsigned int'
p80526
sS'default'
p80527
S'30'
p80528
sS'name'
p80529
S'max_iterations'
p80530
sS'required'
p80531
I00
sS'group_name'
p80532
Nsa(dp80533
S'description'
p80534
S'Set true to output newton iteration information from the radial return material\n'
p80535
sS'cpp_type'
p80536
S'bool'
p80537
sS'default'
p80538
S'0'
p80539
sS'name'
p80540
S'output_iteration_info'
p80541
sS'required'
p80542
I00
sS'group_name'
p80543
Nsa(dp80544
S'description'
p80545
S'Set true to output the recompute material iteration information when a step fails\n'
p80546
sS'cpp_type'
p80547
S'bool'
p80548
sS'default'
p80549
S'0'
p80550
sS'name'
p80551
S'output_iteration_info_on_error'
p80552
sS'required'
p80553
I00
sS'group_name'
p80554
Nsa(dp80555
S'description'
p80556
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80557
sS'cpp_type'
p80558
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80559
sS'default'
p80560
g3
sS'name'
p80561
S'output_properties'
p80562
sS'required'
p80563
I00
sS'group_name'
p80564
S'Outputs'
p80565
sa(dp80566
S'description'
p80567
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80568
sS'cpp_type'
p80569
S'std::vector<OutputName, std::allocator<OutputName> >'
p80570
sS'default'
p80571
S'none'
p80572
sS'name'
p80573
S'outputs'
p80574
sS'required'
p80575
I00
sS'group_name'
p80576
S'Outputs'
p80577
sa(dp80578
S'description'
p80579
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p80580
sS'cpp_type'
p80581
S'double'
p80582
sS'default'
p80583
S'1e-08'
p80584
sS'name'
p80585
S'relative_tolerance'
p80586
sS'required'
p80587
I00
sS'group_name'
p80588
Nsa(dp80589
S'description'
p80590
S'The seed for the master random number generator\n'
p80591
sS'cpp_type'
p80592
S'unsigned int'
p80593
sS'default'
p80594
S'0'
p80595
sS'name'
p80596
S'seed'
p80597
sS'required'
p80598
I00
sS'group_name'
p80599
S'Advanced'
p80600
sa(dp80601
S'description'
p80602
g3
sS'cpp_type'
p80603
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80604
sS'default'
p80605
S'RadialReturnStressUpdate'
p80606
sS'name'
p80607
S'type'
p80608
sS'required'
p80609
I00
sS'group_name'
p80610
Nsa(dp80611
S'description'
p80612
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80613
sS'cpp_type'
p80614
S'bool'
p80615
sS'default'
p80616
S'0'
p80617
sS'name'
p80618
S'use_displaced_mesh'
p80619
sS'required'
p80620
I00
sS'group_name'
p80621
S'Advanced'
p80622
sasS'name'
p80623
S'/Materials/RadialReturnStressUpdate'
p80624
sa(dp80625
S'description'
p80626
S'Material that implements the free energy of a regular solution\n'
p80627
sS'subblocks'
p80628
NsS'parameters'
p80629
(lp80630
(dp80631
S'description'
p80632
S'Temperature variable\n'
p80633
sS'cpp_type'
p80634
S'std::vector<VariableName>'
p80635
sS'default'
p80636
S'300'
p80637
sS'name'
p80638
S'T'
p80639
sS'required'
p80640
I00
sS'group_name'
p80641
Nsa(dp80642
S'description'
p80643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80644
sS'cpp_type'
p80645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80646
sS'default'
p80647
g3
sS'name'
p80648
S'block'
p80649
sS'required'
p80650
I00
sS'group_name'
p80651
Nsa(dp80652
S'description'
p80653
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80654
sS'cpp_type'
p80655
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80656
sS'default'
p80657
g3
sS'name'
p80658
S'boundary'
p80659
sS'required'
p80660
I00
sS'group_name'
p80661
Nsa(dp80662
S'description'
p80663
S'Concentration variable\n'
p80664
sS'cpp_type'
p80665
S'std::vector<VariableName>'
p80666
sS'default'
p80667
g3
sS'name'
p80668
S'c'
p80669
sS'required'
p80670
I01
sS'group_name'
p80671
Nsa(dp80672
S'description'
p80673
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p80674
sS'cpp_type'
p80675
S'bool'
p80676
sS'default'
p80677
S'1'
p80678
sS'name'
p80679
S'compute'
p80680
sS'required'
p80681
I00
sS'group_name'
p80682
Nsa(dp80683
S'description'
p80684
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80685
sS'cpp_type'
p80686
S'bool'
p80687
sS'default'
p80688
S'0'
p80689
sS'name'
p80690
S'constant_on_elem'
p80691
sS'required'
p80692
I00
sS'group_name'
p80693
S'Advanced'
p80694
sa(dp80695
S'description'
p80696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80697
sS'cpp_type'
p80698
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80699
sS'default'
p80700
g3
sS'name'
p80701
S'control_tags'
p80702
sS'required'
p80703
I00
sS'group_name'
p80704
S'Advanced'
p80705
sa(dp80706
S'description'
p80707
S'Maximum order of derivatives taken\n'
p80708
sS'cpp_type'
p80709
S'unsigned int'
p80710
sS'default'
p80711
S'3'
p80712
sS'name'
p80713
S'derivative_order'
p80714
sS'required'
p80715
I00
sS'group_name'
p80716
Nsa(dp80717
S'description'
p80718
S'Disable the function parser algebraic optimizer\n'
p80719
sS'cpp_type'
p80720
S'bool'
p80721
sS'default'
p80722
S'0'
p80723
sS'name'
p80724
S'disable_fpoptimizer'
p80725
sS'required'
p80726
I00
sS'group_name'
p80727
S'Advanced'
p80728
sa(dp80729
S'description'
p80730
S'Set the enabled status of the MooseObject.\n'
p80731
sS'cpp_type'
p80732
S'bool'
p80733
sS'default'
p80734
S'1'
p80735
sS'name'
p80736
S'enable'
p80737
sS'required'
p80738
I00
sS'group_name'
p80739
S'Advanced'
p80740
sa(dp80741
S'description'
p80742
S'Enable cacheing of function derivatives for faster startup time\n'
p80743
sS'cpp_type'
p80744
S'bool'
p80745
sS'default'
p80746
S'1'
p80747
sS'name'
p80748
S'enable_ad_cache'
p80749
sS'required'
p80750
I00
sS'group_name'
p80751
S'Advanced'
p80752
sa(dp80753
S'description'
p80754
S'Enable automatic immediate optimization of derivatives\n'
p80755
sS'cpp_type'
p80756
S'bool'
p80757
sS'default'
p80758
S'1'
p80759
sS'name'
p80760
S'enable_auto_optimize'
p80761
sS'required'
p80762
I00
sS'group_name'
p80763
S'Advanced'
p80764
sa(dp80765
S'description'
p80766
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p80767
sS'cpp_type'
p80768
S'bool'
p80769
sS'default'
p80770
S'1'
p80771
sS'name'
p80772
S'enable_jit'
p80773
sS'required'
p80774
I00
sS'group_name'
p80775
S'Advanced'
p80776
sa(dp80777
S'description'
p80778
S'Base name of the free energy function (used to name the material properties)\n'
p80779
sS'cpp_type'
p80780
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80781
sS'default'
p80782
S'F'
p80783
sS'name'
p80784
S'f_name'
p80785
sS'required'
p80786
I00
sS'group_name'
p80787
Nsa(dp80788
S'description'
p80789
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p80790
sS'cpp_type'
p80791
S'bool'
p80792
sS'default'
p80793
S'0'
p80794
sS'name'
p80795
S'fail_on_evalerror'
p80796
sS'required'
p80797
I00
sS'group_name'
p80798
S'Advanced'
p80799
sa(dp80800
S'description'
p80801
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80802
sS'cpp_type'
p80803
S'bool'
p80804
sS'default'
p80805
S'1'
p80806
sS'name'
p80807
S'implicit'
p80808
sS'required'
p80809
I00
sS'group_name'
p80810
S'Advanced'
p80811
sa(dp80812
S'description'
p80813
S'Boltzmann constant\n'
p80814
sS'cpp_type'
p80815
S'double'
p80816
sS'default'
p80817
S'8.61733e-05'
p80818
sS'name'
p80819
S'kB'
p80820
sS'required'
p80821
I00
sS'group_name'
p80822
Nsa(dp80823
S'description'
p80824
S'If specified logarithms are evaluated using a Taylor expansion below this value\n'
p80825
sS'cpp_type'
p80826
S'double'
p80827
sS'default'
p80828
g3
sS'name'
p80829
S'log_tol'
p80830
sS'required'
p80831
I00
sS'group_name'
p80832
Nsa(dp80833
S'description'
p80834
S'Regular solution parameter\n'
p80835
sS'cpp_type'
p80836
S'double'
p80837
sS'default'
p80838
S'0.1'
p80839
sS'name'
p80840
S'omega'
p80841
sS'required'
p80842
I00
sS'group_name'
p80843
Nsa(dp80844
S'description'
p80845
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80846
sS'cpp_type'
p80847
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80848
sS'default'
p80849
g3
sS'name'
p80850
S'output_properties'
p80851
sS'required'
p80852
I00
sS'group_name'
p80853
S'Outputs'
p80854
sa(dp80855
S'description'
p80856
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80857
sS'cpp_type'
p80858
S'std::vector<OutputName, std::allocator<OutputName> >'
p80859
sS'default'
p80860
S'none'
p80861
sS'name'
p80862
S'outputs'
p80863
sS'required'
p80864
I00
sS'group_name'
p80865
S'Outputs'
p80866
sa(dp80867
S'description'
p80868
S'The seed for the master random number generator\n'
p80869
sS'cpp_type'
p80870
S'unsigned int'
p80871
sS'default'
p80872
S'0'
p80873
sS'name'
p80874
S'seed'
p80875
sS'required'
p80876
I00
sS'group_name'
p80877
S'Advanced'
p80878
sa(dp80879
S'description'
p80880
S'Flag to indicate if third derivatives are needed\n'
p80881
sS'cpp_type'
p80882
S'bool'
p80883
sS'default'
p80884
g3
sS'name'
p80885
S'third_derivatives'
p80886
sS'required'
p80887
I00
sS'group_name'
p80888
Nsa(dp80889
S'description'
p80890
g3
sS'cpp_type'
p80891
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80892
sS'default'
p80893
S'RegularSolutionFreeEnergy'
p80894
sS'name'
p80895
S'type'
p80896
sS'required'
p80897
I00
sS'group_name'
p80898
Nsa(dp80899
S'description'
p80900
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80901
sS'cpp_type'
p80902
S'bool'
p80903
sS'default'
p80904
S'0'
p80905
sS'name'
p80906
S'use_displaced_mesh'
p80907
sS'required'
p80908
I00
sS'group_name'
p80909
S'Advanced'
p80910
sasS'name'
p80911
S'/Materials/RegularSolutionFreeEnergy'
p80912
sa(dp80913
S'description'
p80914
S'Provide the constant derivatives of strain w.r.t. the displacement gradient components.\n'
p80915
sS'subblocks'
p80916
NsS'parameters'
p80917
(lp80918
(dp80919
S'description'
p80920
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80921
sS'cpp_type'
p80922
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80923
sS'default'
p80924
g3
sS'name'
p80925
S'block'
p80926
sS'required'
p80927
I00
sS'group_name'
p80928
Nsa(dp80929
S'description'
p80930
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80931
sS'cpp_type'
p80932
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80933
sS'default'
p80934
g3
sS'name'
p80935
S'boundary'
p80936
sS'required'
p80937
I00
sS'group_name'
p80938
Nsa(dp80939
S'description'
p80940
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p80941
sS'cpp_type'
p80942
S'bool'
p80943
sS'default'
p80944
S'1'
p80945
sS'name'
p80946
S'compute'
p80947
sS'required'
p80948
I00
sS'group_name'
p80949
Nsa(dp80950
S'description'
p80951
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80952
sS'cpp_type'
p80953
S'bool'
p80954
sS'default'
p80955
S'0'
p80956
sS'name'
p80957
S'constant_on_elem'
p80958
sS'required'
p80959
I00
sS'group_name'
p80960
S'Advanced'
p80961
sa(dp80962
S'description'
p80963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80964
sS'cpp_type'
p80965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80966
sS'default'
p80967
g3
sS'name'
p80968
S'control_tags'
p80969
sS'required'
p80970
I00
sS'group_name'
p80971
S'Advanced'
p80972
sa(dp80973
S'description'
p80974
S'List of displacement gradient component variables\n'
p80975
sS'cpp_type'
p80976
S'std::vector<VariableName>'
p80977
sS'default'
p80978
g3
sS'name'
p80979
S'displacement_gradients'
p80980
sS'required'
p80981
I00
sS'group_name'
p80982
Nsa(dp80983
S'description'
p80984
S'Set the enabled status of the MooseObject.\n'
p80985
sS'cpp_type'
p80986
S'bool'
p80987
sS'default'
p80988
S'1'
p80989
sS'name'
p80990
S'enable'
p80991
sS'required'
p80992
I00
sS'group_name'
p80993
S'Advanced'
p80994
sa(dp80995
S'description'
p80996
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80997
sS'cpp_type'
p80998
S'bool'
p80999
sS'default'
p81000
S'1'
p81001
sS'name'
p81002
S'implicit'
p81003
sS'required'
p81004
I00
sS'group_name'
p81005
S'Advanced'
p81006
sa(dp81007
S'description'
p81008
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81009
sS'cpp_type'
p81010
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81011
sS'default'
p81012
g3
sS'name'
p81013
S'output_properties'
p81014
sS'required'
p81015
I00
sS'group_name'
p81016
S'Outputs'
p81017
sa(dp81018
S'description'
p81019
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81020
sS'cpp_type'
p81021
S'std::vector<OutputName, std::allocator<OutputName> >'
p81022
sS'default'
p81023
S'none'
p81024
sS'name'
p81025
S'outputs'
p81026
sS'required'
p81027
I00
sS'group_name'
p81028
S'Outputs'
p81029
sa(dp81030
S'description'
p81031
S'The seed for the master random number generator\n'
p81032
sS'cpp_type'
p81033
S'unsigned int'
p81034
sS'default'
p81035
S'0'
p81036
sS'name'
p81037
S'seed'
p81038
sS'required'
p81039
I00
sS'group_name'
p81040
S'Advanced'
p81041
sa(dp81042
S'description'
p81043
g3
sS'cpp_type'
p81044
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81045
sS'default'
p81046
S'StrainGradDispDerivatives'
p81047
sS'name'
p81048
S'type'
p81049
sS'required'
p81050
I00
sS'group_name'
p81051
Nsa(dp81052
S'description'
p81053
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81054
sS'cpp_type'
p81055
S'bool'
p81056
sS'default'
p81057
S'0'
p81058
sS'name'
p81059
S'use_displaced_mesh'
p81060
sS'required'
p81061
I00
sS'group_name'
p81062
S'Advanced'
p81063
sasS'name'
p81064
S'/Materials/StrainGradDispDerivatives'
p81065
sa(dp81066
S'description'
p81067
S'Chemical potential from stress\n'
p81068
sS'subblocks'
p81069
NsS'parameters'
p81070
(lp81071
(dp81072
S'description'
p81073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81074
sS'cpp_type'
p81075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81076
sS'default'
p81077
g3
sS'name'
p81078
S'block'
p81079
sS'required'
p81080
I00
sS'group_name'
p81081
Nsa(dp81082
S'description'
p81083
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81084
sS'cpp_type'
p81085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81086
sS'default'
p81087
g3
sS'name'
p81088
S'boundary'
p81089
sS'required'
p81090
I00
sS'group_name'
p81091
Nsa(dp81092
S'description'
p81093
S'Concentration variable\n'
p81094
sS'cpp_type'
p81095
S'std::vector<VariableName>'
p81096
sS'default'
p81097
g3
sS'name'
p81098
S'c'
p81099
sS'required'
p81100
I00
sS'group_name'
p81101
Nsa(dp81102
S'description'
p81103
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81104
sS'cpp_type'
p81105
S'bool'
p81106
sS'default'
p81107
S'1'
p81108
sS'name'
p81109
S'compute'
p81110
sS'required'
p81111
I00
sS'group_name'
p81112
Nsa(dp81113
S'description'
p81114
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81115
sS'cpp_type'
p81116
S'bool'
p81117
sS'default'
p81118
S'0'
p81119
sS'name'
p81120
S'constant_on_elem'
p81121
sS'required'
p81122
I00
sS'group_name'
p81123
S'Advanced'
p81124
sa(dp81125
S'description'
p81126
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81127
sS'cpp_type'
p81128
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81129
sS'default'
p81130
g3
sS'name'
p81131
S'control_tags'
p81132
sS'required'
p81133
I00
sS'group_name'
p81134
S'Advanced'
p81135
sa(dp81136
S'description'
p81137
S'Name of direction tensor variable\n'
p81138
sS'cpp_type'
p81139
S'MaterialPropertyName'
p81140
sS'default'
p81141
g3
sS'name'
p81142
S'direction_tensor_name'
p81143
sS'required'
p81144
I01
sS'group_name'
p81145
Nsa(dp81146
S'description'
p81147
S'Set the enabled status of the MooseObject.\n'
p81148
sS'cpp_type'
p81149
S'bool'
p81150
sS'default'
p81151
S'1'
p81152
sS'name'
p81153
S'enable'
p81154
sS'required'
p81155
I00
sS'group_name'
p81156
S'Advanced'
p81157
sa(dp81158
S'description'
p81159
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81160
sS'cpp_type'
p81161
S'bool'
p81162
sS'default'
p81163
S'1'
p81164
sS'name'
p81165
S'implicit'
p81166
sS'required'
p81167
I00
sS'group_name'
p81168
S'Advanced'
p81169
sa(dp81170
S'description'
p81171
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81172
sS'cpp_type'
p81173
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81174
sS'default'
p81175
g3
sS'name'
p81176
S'output_properties'
p81177
sS'required'
p81178
I00
sS'group_name'
p81179
S'Outputs'
p81180
sa(dp81181
S'description'
p81182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81183
sS'cpp_type'
p81184
S'std::vector<OutputName, std::allocator<OutputName> >'
p81185
sS'default'
p81186
S'none'
p81187
sS'name'
p81188
S'outputs'
p81189
sS'required'
p81190
I00
sS'group_name'
p81191
S'Outputs'
p81192
sa(dp81193
S'description'
p81194
S'Name of prefactor variable\n'
p81195
sS'cpp_type'
p81196
S'MaterialPropertyName'
p81197
sS'default'
p81198
g3
sS'name'
p81199
S'prefactor_name'
p81200
sS'required'
p81201
I01
sS'group_name'
p81202
Nsa(dp81203
S'description'
p81204
S'Name of stress based chemical potential\n'
p81205
sS'cpp_type'
p81206
S'MaterialPropertyName'
p81207
sS'default'
p81208
g3
sS'name'
p81209
S'property_name'
p81210
sS'required'
p81211
I01
sS'group_name'
p81212
Nsa(dp81213
S'description'
p81214
S'The seed for the master random number generator\n'
p81215
sS'cpp_type'
p81216
S'unsigned int'
p81217
sS'default'
p81218
S'0'
p81219
sS'name'
p81220
S'seed'
p81221
sS'required'
p81222
I00
sS'group_name'
p81223
S'Advanced'
p81224
sa(dp81225
S'description'
p81226
S'Name of stress property variable\n'
p81227
sS'cpp_type'
p81228
S'MaterialPropertyName'
p81229
sS'default'
p81230
g3
sS'name'
p81231
S'stress_name'
p81232
sS'required'
p81233
I01
sS'group_name'
p81234
Nsa(dp81235
S'description'
p81236
g3
sS'cpp_type'
p81237
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81238
sS'default'
p81239
S'StressBasedChemicalPotential'
p81240
sS'name'
p81241
S'type'
p81242
sS'required'
p81243
I00
sS'group_name'
p81244
Nsa(dp81245
S'description'
p81246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81247
sS'cpp_type'
p81248
S'bool'
p81249
sS'default'
p81250
S'0'
p81251
sS'name'
p81252
S'use_displaced_mesh'
p81253
sS'required'
p81254
I00
sS'group_name'
p81255
S'Advanced'
p81256
sasS'name'
p81257
S'/Materials/StressBasedChemicalPotential'
p81258
sa(dp81259
S'description'
p81260
S'Compute tensor property by summing tensor increments\n'
p81261
sS'subblocks'
p81262
NsS'parameters'
p81263
(lp81264
(dp81265
S'description'
p81266
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81267
sS'cpp_type'
p81268
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81269
sS'default'
p81270
g3
sS'name'
p81271
S'block'
p81272
sS'required'
p81273
I00
sS'group_name'
p81274
Nsa(dp81275
S'description'
p81276
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81277
sS'cpp_type'
p81278
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81279
sS'default'
p81280
g3
sS'name'
p81281
S'boundary'
p81282
sS'required'
p81283
I00
sS'group_name'
p81284
Nsa(dp81285
S'description'
p81286
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81287
sS'cpp_type'
p81288
S'bool'
p81289
sS'default'
p81290
S'1'
p81291
sS'name'
p81292
S'compute'
p81293
sS'required'
p81294
I00
sS'group_name'
p81295
Nsa(dp81296
S'description'
p81297
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81298
sS'cpp_type'
p81299
S'bool'
p81300
sS'default'
p81301
S'0'
p81302
sS'name'
p81303
S'constant_on_elem'
p81304
sS'required'
p81305
I00
sS'group_name'
p81306
S'Advanced'
p81307
sa(dp81308
S'description'
p81309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81310
sS'cpp_type'
p81311
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81312
sS'default'
p81313
g3
sS'name'
p81314
S'control_tags'
p81315
sS'required'
p81316
I00
sS'group_name'
p81317
S'Advanced'
p81318
sa(dp81319
S'description'
p81320
S'Name of strain increment properties\n'
p81321
sS'cpp_type'
p81322
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p81323
sS'default'
p81324
g3
sS'name'
p81325
S'coupled_tensor_increment_names'
p81326
sS'required'
p81327
I00
sS'group_name'
p81328
Nsa(dp81329
S'description'
p81330
S'Set the enabled status of the MooseObject.\n'
p81331
sS'cpp_type'
p81332
S'bool'
p81333
sS'default'
p81334
S'1'
p81335
sS'name'
p81336
S'enable'
p81337
sS'required'
p81338
I00
sS'group_name'
p81339
S'Advanced'
p81340
sa(dp81341
S'description'
p81342
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81343
sS'cpp_type'
p81344
S'bool'
p81345
sS'default'
p81346
S'1'
p81347
sS'name'
p81348
S'implicit'
p81349
sS'required'
p81350
I00
sS'group_name'
p81351
S'Advanced'
p81352
sa(dp81353
S'description'
p81354
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81355
sS'cpp_type'
p81356
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81357
sS'default'
p81358
g3
sS'name'
p81359
S'output_properties'
p81360
sS'required'
p81361
I00
sS'group_name'
p81362
S'Outputs'
p81363
sa(dp81364
S'description'
p81365
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81366
sS'cpp_type'
p81367
S'std::vector<OutputName, std::allocator<OutputName> >'
p81368
sS'default'
p81369
S'none'
p81370
sS'name'
p81371
S'outputs'
p81372
sS'required'
p81373
I00
sS'group_name'
p81374
S'Outputs'
p81375
sa(dp81376
S'description'
p81377
S'The seed for the master random number generator\n'
p81378
sS'cpp_type'
p81379
S'unsigned int'
p81380
sS'default'
p81381
S'0'
p81382
sS'name'
p81383
S'seed'
p81384
sS'required'
p81385
I00
sS'group_name'
p81386
S'Advanced'
p81387
sa(dp81388
S'description'
p81389
S'Name of strain property\n'
p81390
sS'cpp_type'
p81391
S'MaterialPropertyName'
p81392
sS'default'
p81393
g3
sS'name'
p81394
S'tensor_name'
p81395
sS'required'
p81396
I01
sS'group_name'
p81397
Nsa(dp81398
S'description'
p81399
g3
sS'cpp_type'
p81400
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81401
sS'default'
p81402
S'SumTensorIncrements'
p81403
sS'name'
p81404
S'type'
p81405
sS'required'
p81406
I00
sS'group_name'
p81407
Nsa(dp81408
S'description'
p81409
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81410
sS'cpp_type'
p81411
S'bool'
p81412
sS'default'
p81413
S'0'
p81414
sS'name'
p81415
S'use_displaced_mesh'
p81416
sS'required'
p81417
I00
sS'group_name'
p81418
S'Advanced'
p81419
sasS'name'
p81420
S'/Materials/SumTensorIncrements'
p81421
sa(dp81422
S'description'
p81423
S'Material for switching function that prevents formation of a third phase at a two-phase interface: h_i = eta_i^2/4 * [15 (1-eta_i) [1 + eta_i - (eta_k - eta_j)^2] + eta_i * (9eta_i^2 - 5)]\n'
p81424
sS'subblocks'
p81425
NsS'parameters'
p81426
(lp81427
(dp81428
S'description'
p81429
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81430
sS'cpp_type'
p81431
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81432
sS'default'
p81433
g3
sS'name'
p81434
S'block'
p81435
sS'required'
p81436
I00
sS'group_name'
p81437
Nsa(dp81438
S'description'
p81439
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81440
sS'cpp_type'
p81441
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81442
sS'default'
p81443
g3
sS'name'
p81444
S'boundary'
p81445
sS'required'
p81446
I00
sS'group_name'
p81447
Nsa(dp81448
S'description'
p81449
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81450
sS'cpp_type'
p81451
S'bool'
p81452
sS'default'
p81453
S'1'
p81454
sS'name'
p81455
S'compute'
p81456
sS'required'
p81457
I00
sS'group_name'
p81458
Nsa(dp81459
S'description'
p81460
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81461
sS'cpp_type'
p81462
S'bool'
p81463
sS'default'
p81464
S'0'
p81465
sS'name'
p81466
S'constant_on_elem'
p81467
sS'required'
p81468
I00
sS'group_name'
p81469
S'Advanced'
p81470
sa(dp81471
S'description'
p81472
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81473
sS'cpp_type'
p81474
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81475
sS'default'
p81476
g3
sS'name'
p81477
S'control_tags'
p81478
sS'required'
p81479
I00
sS'group_name'
p81480
S'Advanced'
p81481
sa(dp81482
S'description'
p81483
S'Maximum order of derivatives taken\n'
p81484
sS'cpp_type'
p81485
S'unsigned int'
p81486
sS'default'
p81487
S'3'
p81488
sS'name'
p81489
S'derivative_order'
p81490
sS'required'
p81491
I00
sS'group_name'
p81492
Nsa(dp81493
S'description'
p81494
S'Disable the function parser algebraic optimizer\n'
p81495
sS'cpp_type'
p81496
S'bool'
p81497
sS'default'
p81498
S'0'
p81499
sS'name'
p81500
S'disable_fpoptimizer'
p81501
sS'required'
p81502
I00
sS'group_name'
p81503
S'Advanced'
p81504
sa(dp81505
S'description'
p81506
S'Set the enabled status of the MooseObject.\n'
p81507
sS'cpp_type'
p81508
S'bool'
p81509
sS'default'
p81510
S'1'
p81511
sS'name'
p81512
S'enable'
p81513
sS'required'
p81514
I00
sS'group_name'
p81515
S'Advanced'
p81516
sa(dp81517
S'description'
p81518
S'Enable cacheing of function derivatives for faster startup time\n'
p81519
sS'cpp_type'
p81520
S'bool'
p81521
sS'default'
p81522
S'1'
p81523
sS'name'
p81524
S'enable_ad_cache'
p81525
sS'required'
p81526
I00
sS'group_name'
p81527
S'Advanced'
p81528
sa(dp81529
S'description'
p81530
S'Enable automatic immediate optimization of derivatives\n'
p81531
sS'cpp_type'
p81532
S'bool'
p81533
sS'default'
p81534
S'1'
p81535
sS'name'
p81536
S'enable_auto_optimize'
p81537
sS'required'
p81538
I00
sS'group_name'
p81539
S'Advanced'
p81540
sa(dp81541
S'description'
p81542
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p81543
sS'cpp_type'
p81544
S'bool'
p81545
sS'default'
p81546
S'1'
p81547
sS'name'
p81548
S'enable_jit'
p81549
sS'required'
p81550
I00
sS'group_name'
p81551
S'Advanced'
p81552
sa(dp81553
S'description'
p81554
S'Order parameter i\n'
p81555
sS'cpp_type'
p81556
S'std::vector<VariableName>'
p81557
sS'default'
p81558
g3
sS'name'
p81559
S'eta_i'
p81560
sS'required'
p81561
I01
sS'group_name'
p81562
Nsa(dp81563
S'description'
p81564
S'Order parameter j\n'
p81565
sS'cpp_type'
p81566
S'std::vector<VariableName>'
p81567
sS'default'
p81568
g3
sS'name'
p81569
S'eta_j'
p81570
sS'required'
p81571
I01
sS'group_name'
p81572
Nsa(dp81573
S'description'
p81574
S'Order parameter k\n'
p81575
sS'cpp_type'
p81576
S'std::vector<VariableName>'
p81577
sS'default'
p81578
g3
sS'name'
p81579
S'eta_k'
p81580
sS'required'
p81581
I01
sS'group_name'
p81582
Nsa(dp81583
S'description'
p81584
S'Base name of the free energy function (used to name the material properties)\n'
p81585
sS'cpp_type'
p81586
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81587
sS'default'
p81588
S'F'
p81589
sS'name'
p81590
S'f_name'
p81591
sS'required'
p81592
I00
sS'group_name'
p81593
Nsa(dp81594
S'description'
p81595
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p81596
sS'cpp_type'
p81597
S'bool'
p81598
sS'default'
p81599
S'0'
p81600
sS'name'
p81601
S'fail_on_evalerror'
p81602
sS'required'
p81603
I00
sS'group_name'
p81604
S'Advanced'
p81605
sa(dp81606
S'description'
p81607
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81608
sS'cpp_type'
p81609
S'bool'
p81610
sS'default'
p81611
S'1'
p81612
sS'name'
p81613
S'implicit'
p81614
sS'required'
p81615
I00
sS'group_name'
p81616
S'Advanced'
p81617
sa(dp81618
S'description'
p81619
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81620
sS'cpp_type'
p81621
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81622
sS'default'
p81623
g3
sS'name'
p81624
S'output_properties'
p81625
sS'required'
p81626
I00
sS'group_name'
p81627
S'Outputs'
p81628
sa(dp81629
S'description'
p81630
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81631
sS'cpp_type'
p81632
S'std::vector<OutputName, std::allocator<OutputName> >'
p81633
sS'default'
p81634
S'none'
p81635
sS'name'
p81636
S'outputs'
p81637
sS'required'
p81638
I00
sS'group_name'
p81639
S'Outputs'
p81640
sa(dp81641
S'description'
p81642
S'The seed for the master random number generator\n'
p81643
sS'cpp_type'
p81644
S'unsigned int'
p81645
sS'default'
p81646
S'0'
p81647
sS'name'
p81648
S'seed'
p81649
sS'required'
p81650
I00
sS'group_name'
p81651
S'Advanced'
p81652
sa(dp81653
S'description'
p81654
S'Flag to indicate if third derivatives are needed\n'
p81655
sS'cpp_type'
p81656
S'bool'
p81657
sS'default'
p81658
g3
sS'name'
p81659
S'third_derivatives'
p81660
sS'required'
p81661
I00
sS'group_name'
p81662
Nsa(dp81663
S'description'
p81664
g3
sS'cpp_type'
p81665
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81666
sS'default'
p81667
S'SwitchingFunction3PhaseMaterial'
p81668
sS'name'
p81669
S'type'
p81670
sS'required'
p81671
I00
sS'group_name'
p81672
Nsa(dp81673
S'description'
p81674
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81675
sS'cpp_type'
p81676
S'bool'
p81677
sS'default'
p81678
S'0'
p81679
sS'name'
p81680
S'use_displaced_mesh'
p81681
sS'required'
p81682
I00
sS'group_name'
p81683
S'Advanced'
p81684
sasS'name'
p81685
S'/Materials/SwitchingFunction3PhaseMaterial'
p81686
sa(dp81687
S'description'
p81688
S'Helper material to provide h(eta) and its derivative in one of two polynomial forms.\\nSIMPLE: 3*eta^2-2*eta^3\\nHIGH: eta^3*(6*eta^2-15*eta+10)\n'
p81689
sS'subblocks'
p81690
NsS'parameters'
p81691
(lp81692
(dp81693
S'description'
p81694
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81695
sS'cpp_type'
p81696
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81697
sS'default'
p81698
g3
sS'name'
p81699
S'block'
p81700
sS'required'
p81701
I00
sS'group_name'
p81702
Nsa(dp81703
S'description'
p81704
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81705
sS'cpp_type'
p81706
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81707
sS'default'
p81708
g3
sS'name'
p81709
S'boundary'
p81710
sS'required'
p81711
I00
sS'group_name'
p81712
Nsa(dp81713
S'description'
p81714
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81715
sS'cpp_type'
p81716
S'bool'
p81717
sS'default'
p81718
S'1'
p81719
sS'name'
p81720
S'compute'
p81721
sS'required'
p81722
I00
sS'group_name'
p81723
Nsa(dp81724
S'description'
p81725
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81726
sS'cpp_type'
p81727
S'bool'
p81728
sS'default'
p81729
S'0'
p81730
sS'name'
p81731
S'constant_on_elem'
p81732
sS'required'
p81733
I00
sS'group_name'
p81734
S'Advanced'
p81735
sa(dp81736
S'description'
p81737
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81738
sS'cpp_type'
p81739
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81740
sS'default'
p81741
g3
sS'name'
p81742
S'control_tags'
p81743
sS'required'
p81744
I00
sS'group_name'
p81745
S'Advanced'
p81746
sa(dp81747
S'description'
p81748
S'Set the enabled status of the MooseObject.\n'
p81749
sS'cpp_type'
p81750
S'bool'
p81751
sS'default'
p81752
S'1'
p81753
sS'name'
p81754
S'enable'
p81755
sS'required'
p81756
I00
sS'group_name'
p81757
S'Advanced'
p81758
sa(dp81759
S'description'
p81760
S'Order parameter variable\n'
p81761
sS'cpp_type'
p81762
S'std::vector<VariableName>'
p81763
sS'default'
p81764
g3
sS'name'
p81765
S'eta'
p81766
sS'required'
p81767
I00
sS'group_name'
p81768
Nsa(dp81769
S'description'
p81770
S"actual name for f(eta), i.e. 'h' or 'g'\n"
p81771
sS'cpp_type'
p81772
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81773
sS'default'
p81774
S'h'
p81775
sS'name'
p81776
S'function_name'
p81777
sS'required'
p81778
I00
sS'group_name'
p81779
Nsa(dp81780
S'name'
p81781
S'h_order'
p81782
sS'cpp_type'
p81783
S'MooseEnum'
p81784
sS'default'
p81785
S'SIMPLE'
p81786
sS'description'
p81787
S'Polynomial order of the switching function h(eta)\n'
p81788
sS'required'
p81789
I00
sS'options'
p81790
S'SIMPLE HIGH'
p81791
sS'group_name'
p81792
Nsa(dp81793
S'description'
p81794
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81795
sS'cpp_type'
p81796
S'bool'
p81797
sS'default'
p81798
S'1'
p81799
sS'name'
p81800
S'implicit'
p81801
sS'required'
p81802
I00
sS'group_name'
p81803
S'Advanced'
p81804
sa(dp81805
S'description'
p81806
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81807
sS'cpp_type'
p81808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81809
sS'default'
p81810
g3
sS'name'
p81811
S'output_properties'
p81812
sS'required'
p81813
I00
sS'group_name'
p81814
S'Outputs'
p81815
sa(dp81816
S'description'
p81817
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81818
sS'cpp_type'
p81819
S'std::vector<OutputName, std::allocator<OutputName> >'
p81820
sS'default'
p81821
S'none'
p81822
sS'name'
p81823
S'outputs'
p81824
sS'required'
p81825
I00
sS'group_name'
p81826
S'Outputs'
p81827
sa(dp81828
S'description'
p81829
S'The seed for the master random number generator\n'
p81830
sS'cpp_type'
p81831
S'unsigned int'
p81832
sS'default'
p81833
S'0'
p81834
sS'name'
p81835
S'seed'
p81836
sS'required'
p81837
I00
sS'group_name'
p81838
S'Advanced'
p81839
sa(dp81840
S'description'
p81841
g3
sS'cpp_type'
p81842
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81843
sS'default'
p81844
S'SwitchingFunctionMaterial'
p81845
sS'name'
p81846
S'type'
p81847
sS'required'
p81848
I00
sS'group_name'
p81849
Nsa(dp81850
S'description'
p81851
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81852
sS'cpp_type'
p81853
S'bool'
p81854
sS'default'
p81855
S'0'
p81856
sS'name'
p81857
S'use_displaced_mesh'
p81858
sS'required'
p81859
I00
sS'group_name'
p81860
S'Advanced'
p81861
sasS'name'
p81862
S'/Materials/SwitchingFunctionMaterial'
p81863
sa(dp81864
S'description'
p81865
S'Calculates the switching function for a given phase for a multi-phase, multi-order parameter model\n'
p81866
sS'subblocks'
p81867
NsS'parameters'
p81868
(lp81869
(dp81870
S'description'
p81871
S'Vector of all order parameters for all phases\n'
p81872
sS'cpp_type'
p81873
S'std::vector<VariableName>'
p81874
sS'default'
p81875
g3
sS'name'
p81876
S'all_etas'
p81877
sS'required'
p81878
I01
sS'group_name'
p81879
Nsa(dp81880
S'description'
p81881
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81882
sS'cpp_type'
p81883
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81884
sS'default'
p81885
g3
sS'name'
p81886
S'block'
p81887
sS'required'
p81888
I00
sS'group_name'
p81889
Nsa(dp81890
S'description'
p81891
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81892
sS'cpp_type'
p81893
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81894
sS'default'
p81895
g3
sS'name'
p81896
S'boundary'
p81897
sS'required'
p81898
I00
sS'group_name'
p81899
Nsa(dp81900
S'description'
p81901
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81902
sS'cpp_type'
p81903
S'bool'
p81904
sS'default'
p81905
S'1'
p81906
sS'name'
p81907
S'compute'
p81908
sS'required'
p81909
I00
sS'group_name'
p81910
Nsa(dp81911
S'description'
p81912
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81913
sS'cpp_type'
p81914
S'bool'
p81915
sS'default'
p81916
S'0'
p81917
sS'name'
p81918
S'constant_on_elem'
p81919
sS'required'
p81920
I00
sS'group_name'
p81921
S'Advanced'
p81922
sa(dp81923
S'description'
p81924
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81925
sS'cpp_type'
p81926
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81927
sS'default'
p81928
g3
sS'name'
p81929
S'control_tags'
p81930
sS'required'
p81931
I00
sS'group_name'
p81932
S'Advanced'
p81933
sa(dp81934
S'description'
p81935
S'Set the enabled status of the MooseObject.\n'
p81936
sS'cpp_type'
p81937
S'bool'
p81938
sS'default'
p81939
S'1'
p81940
sS'name'
p81941
S'enable'
p81942
sS'required'
p81943
I00
sS'group_name'
p81944
S'Advanced'
p81945
sa(dp81946
S'description'
p81947
S'Name of the switching function material property for the given phase\n'
p81948
sS'cpp_type'
p81949
S'MaterialPropertyName'
p81950
sS'default'
p81951
g3
sS'name'
p81952
S'h_name'
p81953
sS'required'
p81954
I01
sS'group_name'
p81955
Nsa(dp81956
S'description'
p81957
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81958
sS'cpp_type'
p81959
S'bool'
p81960
sS'default'
p81961
S'1'
p81962
sS'name'
p81963
S'implicit'
p81964
sS'required'
p81965
I00
sS'group_name'
p81966
S'Advanced'
p81967
sa(dp81968
S'description'
p81969
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81970
sS'cpp_type'
p81971
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81972
sS'default'
p81973
g3
sS'name'
p81974
S'output_properties'
p81975
sS'required'
p81976
I00
sS'group_name'
p81977
S'Outputs'
p81978
sa(dp81979
S'description'
p81980
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81981
sS'cpp_type'
p81982
S'std::vector<OutputName, std::allocator<OutputName> >'
p81983
sS'default'
p81984
S'none'
p81985
sS'name'
p81986
S'outputs'
p81987
sS'required'
p81988
I00
sS'group_name'
p81989
S'Outputs'
p81990
sa(dp81991
S'description'
p81992
S'Vector of order parameters for the given phase\n'
p81993
sS'cpp_type'
p81994
S'std::vector<VariableName>'
p81995
sS'default'
p81996
g3
sS'name'
p81997
S'phase_etas'
p81998
sS'required'
p81999
I01
sS'group_name'
p82000
Nsa(dp82001
S'description'
p82002
S'The seed for the master random number generator\n'
p82003
sS'cpp_type'
p82004
S'unsigned int'
p82005
sS'default'
p82006
S'0'
p82007
sS'name'
p82008
S'seed'
p82009
sS'required'
p82010
I00
sS'group_name'
p82011
S'Advanced'
p82012
sa(dp82013
S'description'
p82014
g3
sS'cpp_type'
p82015
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82016
sS'default'
p82017
S'SwitchingFunctionMultiPhaseMaterial'
p82018
sS'name'
p82019
S'type'
p82020
sS'required'
p82021
I00
sS'group_name'
p82022
Nsa(dp82023
S'description'
p82024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82025
sS'cpp_type'
p82026
S'bool'
p82027
sS'default'
p82028
S'0'
p82029
sS'name'
p82030
S'use_displaced_mesh'
p82031
sS'required'
p82032
I00
sS'group_name'
p82033
S'Advanced'
p82034
sasS'name'
p82035
S'/Materials/SwitchingFunctionMultiPhaseMaterial'
p82036
sa(dp82037
S'description'
p82038
S'This class uses the discrete material in a radial return isotropic plasticity model.  This class is one of the basic radial return constitutive models, yet it can be used in conjunction with other creep and plasticity materials for more complex simulations.\n'
p82039
sS'subblocks'
p82040
NsS'parameters'
p82041
(lp82042
(dp82043
S'description'
p82044
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p82045
sS'cpp_type'
p82046
S'double'
p82047
sS'default'
p82048
S'1e-20'
p82049
sS'name'
p82050
S'absolute_tolerance'
p82051
sS'required'
p82052
I00
sS'group_name'
p82053
Nsa(dp82054
S'description'
p82055
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p82056
sS'cpp_type'
p82057
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82058
sS'default'
p82059
g3
sS'name'
p82060
S'base_name'
p82061
sS'required'
p82062
I00
sS'group_name'
p82063
Nsa(dp82064
S'description'
p82065
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82066
sS'cpp_type'
p82067
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82068
sS'default'
p82069
g3
sS'name'
p82070
S'block'
p82071
sS'required'
p82072
I00
sS'group_name'
p82073
Nsa(dp82074
S'description'
p82075
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82076
sS'cpp_type'
p82077
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82078
sS'default'
p82079
g3
sS'name'
p82080
S'boundary'
p82081
sS'required'
p82082
I00
sS'group_name'
p82083
Nsa(dp82084
S'description'
p82085
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82086
sS'cpp_type'
p82087
S'bool'
p82088
sS'default'
p82089
S'0'
p82090
sS'name'
p82091
S'constant_on_elem'
p82092
sS'required'
p82093
I00
sS'group_name'
p82094
S'Advanced'
p82095
sa(dp82096
S'description'
p82097
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82098
sS'cpp_type'
p82099
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82100
sS'default'
p82101
g3
sS'name'
p82102
S'control_tags'
p82103
sS'required'
p82104
I00
sS'group_name'
p82105
S'Advanced'
p82106
sa(dp82107
S'description'
p82108
S'Set the enabled status of the MooseObject.\n'
p82109
sS'cpp_type'
p82110
S'bool'
p82111
sS'default'
p82112
S'1'
p82113
sS'name'
p82114
S'enable'
p82115
sS'required'
p82116
I00
sS'group_name'
p82117
S'Advanced'
p82118
sa(dp82119
S'description'
p82120
S'List of functions of true stress as function of plastic strain at different temperatures\n'
p82121
sS'cpp_type'
p82122
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p82123
sS'default'
p82124
g3
sS'name'
p82125
S'hardening_functions'
p82126
sS'required'
p82127
I01
sS'group_name'
p82128
Nsa(dp82129
S'description'
p82130
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82131
sS'cpp_type'
p82132
S'bool'
p82133
sS'default'
p82134
S'1'
p82135
sS'name'
p82136
S'implicit'
p82137
sS'required'
p82138
I00
sS'group_name'
p82139
S'Advanced'
p82140
sa(dp82141
S'description'
p82142
S'Maximum number of newton iterations in the radial return material\n'
p82143
sS'cpp_type'
p82144
S'unsigned int'
p82145
sS'default'
p82146
S'30'
p82147
sS'name'
p82148
S'max_iterations'
p82149
sS'required'
p82150
I00
sS'group_name'
p82151
Nsa(dp82152
S'description'
p82153
S'Set true to output newton iteration information from the radial return material\n'
p82154
sS'cpp_type'
p82155
S'bool'
p82156
sS'default'
p82157
S'0'
p82158
sS'name'
p82159
S'output_iteration_info'
p82160
sS'required'
p82161
I00
sS'group_name'
p82162
Nsa(dp82163
S'description'
p82164
S'Set true to output the recompute material iteration information when a step fails\n'
p82165
sS'cpp_type'
p82166
S'bool'
p82167
sS'default'
p82168
S'0'
p82169
sS'name'
p82170
S'output_iteration_info_on_error'
p82171
sS'required'
p82172
I00
sS'group_name'
p82173
Nsa(dp82174
S'description'
p82175
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82176
sS'cpp_type'
p82177
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82178
sS'default'
p82179
g3
sS'name'
p82180
S'output_properties'
p82181
sS'required'
p82182
I00
sS'group_name'
p82183
S'Outputs'
p82184
sa(dp82185
S'description'
p82186
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82187
sS'cpp_type'
p82188
S'std::vector<OutputName, std::allocator<OutputName> >'
p82189
sS'default'
p82190
S'none'
p82191
sS'name'
p82192
S'outputs'
p82193
sS'required'
p82194
I00
sS'group_name'
p82195
S'Outputs'
p82196
sa(dp82197
S'description'
p82198
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p82199
sS'cpp_type'
p82200
S'double'
p82201
sS'default'
p82202
S'1e-08'
p82203
sS'name'
p82204
S'relative_tolerance'
p82205
sS'required'
p82206
I00
sS'group_name'
p82207
Nsa(dp82208
S'description'
p82209
S'The seed for the master random number generator\n'
p82210
sS'cpp_type'
p82211
S'unsigned int'
p82212
sS'default'
p82213
S'0'
p82214
sS'name'
p82215
S'seed'
p82216
sS'required'
p82217
I00
sS'group_name'
p82218
S'Advanced'
p82219
sa(dp82220
S'description'
p82221
S'Coupled Temperature\n'
p82222
sS'cpp_type'
p82223
S'std::vector<VariableName>'
p82224
sS'default'
p82225
S'0'
p82226
sS'name'
p82227
S'temperature'
p82228
sS'required'
p82229
I00
sS'group_name'
p82230
Nsa(dp82231
S'description'
p82232
S"List of temperatures corresponding to the functions listed in 'hardening_functions'\n"
p82233
sS'cpp_type'
p82234
S'std::vector<double, std::allocator<double> >'
p82235
sS'default'
p82236
g3
sS'name'
p82237
S'temperatures'
p82238
sS'required'
p82239
I01
sS'group_name'
p82240
Nsa(dp82241
S'description'
p82242
g3
sS'cpp_type'
p82243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82244
sS'default'
p82245
S'TemperatureDependentHardeningStressUpdate'
p82246
sS'name'
p82247
S'type'
p82248
sS'required'
p82249
I00
sS'group_name'
p82250
Nsa(dp82251
S'description'
p82252
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82253
sS'cpp_type'
p82254
S'bool'
p82255
sS'default'
p82256
S'0'
p82257
sS'name'
p82258
S'use_displaced_mesh'
p82259
sS'required'
p82260
I00
sS'group_name'
p82261
S'Advanced'
p82262
sasS'name'
p82263
S'/Materials/TemperatureDependentHardeningStressUpdate'
p82264
sa(dp82265
S'description'
p82266
S'Free Energy contribution that penalizes more than two order parameters being non-zero\n'
p82267
sS'subblocks'
p82268
NsS'parameters'
p82269
(lp82270
(dp82271
S'description'
p82272
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82273
sS'cpp_type'
p82274
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82275
sS'default'
p82276
g3
sS'name'
p82277
S'block'
p82278
sS'required'
p82279
I00
sS'group_name'
p82280
Nsa(dp82281
S'description'
p82282
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82283
sS'cpp_type'
p82284
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82285
sS'default'
p82286
g3
sS'name'
p82287
S'boundary'
p82288
sS'required'
p82289
I00
sS'group_name'
p82290
Nsa(dp82291
S'description'
p82292
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82293
sS'cpp_type'
p82294
S'bool'
p82295
sS'default'
p82296
S'1'
p82297
sS'name'
p82298
S'compute'
p82299
sS'required'
p82300
I00
sS'group_name'
p82301
Nsa(dp82302
S'description'
p82303
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82304
sS'cpp_type'
p82305
S'bool'
p82306
sS'default'
p82307
S'0'
p82308
sS'name'
p82309
S'constant_on_elem'
p82310
sS'required'
p82311
I00
sS'group_name'
p82312
S'Advanced'
p82313
sa(dp82314
S'description'
p82315
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82316
sS'cpp_type'
p82317
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82318
sS'default'
p82319
g3
sS'name'
p82320
S'control_tags'
p82321
sS'required'
p82322
I00
sS'group_name'
p82323
S'Advanced'
p82324
sa(dp82325
S'description'
p82326
S'Set the enabled status of the MooseObject.\n'
p82327
sS'cpp_type'
p82328
S'bool'
p82329
sS'default'
p82330
S'1'
p82331
sS'name'
p82332
S'enable'
p82333
sS'required'
p82334
I00
sS'group_name'
p82335
S'Advanced'
p82336
sa(dp82337
S'description'
p82338
S'eta_i order parameters, one for each h\n'
p82339
sS'cpp_type'
p82340
S'std::vector<VariableName>'
p82341
sS'default'
p82342
g3
sS'name'
p82343
S'etas'
p82344
sS'required'
p82345
I01
sS'group_name'
p82346
Nsa(dp82347
S'description'
p82348
S'actual name for g(eta_i)\n'
p82349
sS'cpp_type'
p82350
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82351
sS'default'
p82352
S'g'
p82353
sS'name'
p82354
S'function_name'
p82355
sS'required'
p82356
I00
sS'group_name'
p82357
Nsa(dp82358
S'description'
p82359
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82360
sS'cpp_type'
p82361
S'bool'
p82362
sS'default'
p82363
S'1'
p82364
sS'name'
p82365
S'implicit'
p82366
sS'required'
p82367
I00
sS'group_name'
p82368
S'Advanced'
p82369
sa(dp82370
S'description'
p82371
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82372
sS'cpp_type'
p82373
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82374
sS'default'
p82375
g3
sS'name'
p82376
S'output_properties'
p82377
sS'required'
p82378
I00
sS'group_name'
p82379
S'Outputs'
p82380
sa(dp82381
S'description'
p82382
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82383
sS'cpp_type'
p82384
S'std::vector<OutputName, std::allocator<OutputName> >'
p82385
sS'default'
p82386
S'none'
p82387
sS'name'
p82388
S'outputs'
p82389
sS'required'
p82390
I00
sS'group_name'
p82391
S'Outputs'
p82392
sa(dp82393
S'description'
p82394
S'The seed for the master random number generator\n'
p82395
sS'cpp_type'
p82396
S'unsigned int'
p82397
sS'default'
p82398
S'0'
p82399
sS'name'
p82400
S'seed'
p82401
sS'required'
p82402
I00
sS'group_name'
p82403
S'Advanced'
p82404
sa(dp82405
S'description'
p82406
g3
sS'cpp_type'
p82407
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82408
sS'default'
p82409
S'ThirdPhaseSuppressionMaterial'
p82410
sS'name'
p82411
S'type'
p82412
sS'required'
p82413
I00
sS'group_name'
p82414
Nsa(dp82415
S'description'
p82416
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82417
sS'cpp_type'
p82418
S'bool'
p82419
sS'default'
p82420
S'0'
p82421
sS'name'
p82422
S'use_displaced_mesh'
p82423
sS'required'
p82424
I00
sS'group_name'
p82425
S'Advanced'
p82426
sasS'name'
p82427
S'/Materials/ThirdPhaseSuppressionMaterial'
p82428
sa(dp82429
S'description'
p82430
g3
sS'subblocks'
p82431
NsS'parameters'
p82432
(lp82433
(dp82434
S'description'
p82435
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82436
sS'cpp_type'
p82437
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82438
sS'default'
p82439
g3
sS'name'
p82440
S'block'
p82441
sS'required'
p82442
I00
sS'group_name'
p82443
Nsa(dp82444
S'description'
p82445
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82446
sS'cpp_type'
p82447
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82448
sS'default'
p82449
g3
sS'name'
p82450
S'boundary'
p82451
sS'required'
p82452
I00
sS'group_name'
p82453
Nsa(dp82454
S'description'
p82455
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82456
sS'cpp_type'
p82457
S'bool'
p82458
sS'default'
p82459
S'1'
p82460
sS'name'
p82461
S'compute'
p82462
sS'required'
p82463
I00
sS'group_name'
p82464
Nsa(dp82465
S'description'
p82466
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82467
sS'cpp_type'
p82468
S'bool'
p82469
sS'default'
p82470
S'0'
p82471
sS'name'
p82472
S'constant_on_elem'
p82473
sS'required'
p82474
I00
sS'group_name'
p82475
S'Advanced'
p82476
sa(dp82477
S'description'
p82478
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82479
sS'cpp_type'
p82480
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82481
sS'default'
p82482
g3
sS'name'
p82483
S'control_tags'
p82484
sS'required'
p82485
I00
sS'group_name'
p82486
S'Advanced'
p82487
sa(dp82488
S'description'
p82489
S'Set the enabled status of the MooseObject.\n'
p82490
sS'cpp_type'
p82491
S'bool'
p82492
sS'default'
p82493
S'1'
p82494
sS'name'
p82495
S'enable'
p82496
sS'required'
p82497
I00
sS'group_name'
p82498
S'Advanced'
p82499
sa(dp82500
S'description'
p82501
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82502
sS'cpp_type'
p82503
S'bool'
p82504
sS'default'
p82505
S'1'
p82506
sS'name'
p82507
S'implicit'
p82508
sS'required'
p82509
I00
sS'group_name'
p82510
S'Advanced'
p82511
sa(dp82512
S'description'
p82513
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82514
sS'cpp_type'
p82515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82516
sS'default'
p82517
g3
sS'name'
p82518
S'output_properties'
p82519
sS'required'
p82520
I00
sS'group_name'
p82521
S'Outputs'
p82522
sa(dp82523
S'description'
p82524
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82525
sS'cpp_type'
p82526
S'std::vector<OutputName, std::allocator<OutputName> >'
p82527
sS'default'
p82528
S'none'
p82529
sS'name'
p82530
S'outputs'
p82531
sS'required'
p82532
I00
sS'group_name'
p82533
S'Outputs'
p82534
sa(dp82535
S'description'
p82536
S'Material property to store the current dt\n'
p82537
sS'cpp_type'
p82538
S'MaterialPropertyName'
p82539
sS'default'
p82540
S'dt'
p82541
sS'name'
p82542
S'prop_dt'
p82543
sS'required'
p82544
I00
sS'group_name'
p82545
Nsa(dp82546
S'description'
p82547
S'Material property to store the current time\n'
p82548
sS'cpp_type'
p82549
S'MaterialPropertyName'
p82550
sS'default'
p82551
S'time'
p82552
sS'name'
p82553
S'prop_time'
p82554
sS'required'
p82555
I00
sS'group_name'
p82556
Nsa(dp82557
S'description'
p82558
S'Material property to store the current time step number\n'
p82559
sS'cpp_type'
p82560
S'MaterialPropertyName'
p82561
sS'default'
p82562
S'time_step'
p82563
sS'name'
p82564
S'prop_time_step'
p82565
sS'required'
p82566
I00
sS'group_name'
p82567
Nsa(dp82568
S'description'
p82569
S'The seed for the master random number generator\n'
p82570
sS'cpp_type'
p82571
S'unsigned int'
p82572
sS'default'
p82573
S'0'
p82574
sS'name'
p82575
S'seed'
p82576
sS'required'
p82577
I00
sS'group_name'
p82578
S'Advanced'
p82579
sa(dp82580
S'description'
p82581
g3
sS'cpp_type'
p82582
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82583
sS'default'
p82584
S'TimeStepMaterial'
p82585
sS'name'
p82586
S'type'
p82587
sS'required'
p82588
I00
sS'group_name'
p82589
Nsa(dp82590
S'description'
p82591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82592
sS'cpp_type'
p82593
S'bool'
p82594
sS'default'
p82595
S'0'
p82596
sS'name'
p82597
S'use_displaced_mesh'
p82598
sS'required'
p82599
I00
sS'group_name'
p82600
S'Advanced'
p82601
sasS'name'
p82602
S'/Materials/TimeStepMaterial'
p82603
sa(dp82604
S'description'
p82605
S'Compute a global stress in a two phase model\n'
p82606
sS'subblocks'
p82607
NsS'parameters'
p82608
(lp82609
(dp82610
S'description'
p82611
S'Base name for the Phase A strain.\n'
p82612
sS'cpp_type'
p82613
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82614
sS'default'
p82615
g3
sS'name'
p82616
S'base_A'
p82617
sS'required'
p82618
I01
sS'group_name'
p82619
Nsa(dp82620
S'description'
p82621
S'Base name for the Phase B strain.\n'
p82622
sS'cpp_type'
p82623
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82624
sS'default'
p82625
g3
sS'name'
p82626
S'base_B'
p82627
sS'required'
p82628
I01
sS'group_name'
p82629
Nsa(dp82630
S'description'
p82631
S'Base name for the computed global stress (optional).\n'
p82632
sS'cpp_type'
p82633
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82634
sS'default'
p82635
g3
sS'name'
p82636
S'base_name'
p82637
sS'required'
p82638
I00
sS'group_name'
p82639
Nsa(dp82640
S'description'
p82641
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82642
sS'cpp_type'
p82643
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82644
sS'default'
p82645
g3
sS'name'
p82646
S'block'
p82647
sS'required'
p82648
I00
sS'group_name'
p82649
Nsa(dp82650
S'description'
p82651
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82652
sS'cpp_type'
p82653
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82654
sS'default'
p82655
g3
sS'name'
p82656
S'boundary'
p82657
sS'required'
p82658
I00
sS'group_name'
p82659
Nsa(dp82660
S'description'
p82661
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82662
sS'cpp_type'
p82663
S'bool'
p82664
sS'default'
p82665
S'1'
p82666
sS'name'
p82667
S'compute'
p82668
sS'required'
p82669
I00
sS'group_name'
p82670
Nsa(dp82671
S'description'
p82672
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82673
sS'cpp_type'
p82674
S'bool'
p82675
sS'default'
p82676
S'0'
p82677
sS'name'
p82678
S'constant_on_elem'
p82679
sS'required'
p82680
I00
sS'group_name'
p82681
S'Advanced'
p82682
sa(dp82683
S'description'
p82684
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82685
sS'cpp_type'
p82686
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82687
sS'default'
p82688
g3
sS'name'
p82689
S'control_tags'
p82690
sS'required'
p82691
I00
sS'group_name'
p82692
S'Advanced'
p82693
sa(dp82694
S'description'
p82695
S'Set the enabled status of the MooseObject.\n'
p82696
sS'cpp_type'
p82697
S'bool'
p82698
sS'default'
p82699
S'1'
p82700
sS'name'
p82701
S'enable'
p82702
sS'required'
p82703
I00
sS'group_name'
p82704
S'Advanced'
p82705
sa(dp82706
S'description'
p82707
S'Switching Function Material that provides h(eta)\n'
p82708
sS'cpp_type'
p82709
S'MaterialPropertyName'
p82710
sS'default'
p82711
S'h'
p82712
sS'name'
p82713
S'h'
p82714
sS'required'
p82715
I00
sS'group_name'
p82716
Nsa(dp82717
S'description'
p82718
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82719
sS'cpp_type'
p82720
S'bool'
p82721
sS'default'
p82722
S'1'
p82723
sS'name'
p82724
S'implicit'
p82725
sS'required'
p82726
I00
sS'group_name'
p82727
S'Advanced'
p82728
sa(dp82729
S'description'
p82730
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82731
sS'cpp_type'
p82732
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82733
sS'default'
p82734
g3
sS'name'
p82735
S'output_properties'
p82736
sS'required'
p82737
I00
sS'group_name'
p82738
S'Outputs'
p82739
sa(dp82740
S'description'
p82741
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82742
sS'cpp_type'
p82743
S'std::vector<OutputName, std::allocator<OutputName> >'
p82744
sS'default'
p82745
S'none'
p82746
sS'name'
p82747
S'outputs'
p82748
sS'required'
p82749
I00
sS'group_name'
p82750
S'Outputs'
p82751
sa(dp82752
S'description'
p82753
S'The seed for the master random number generator\n'
p82754
sS'cpp_type'
p82755
S'unsigned int'
p82756
sS'default'
p82757
S'0'
p82758
sS'name'
p82759
S'seed'
p82760
sS'required'
p82761
I00
sS'group_name'
p82762
S'Advanced'
p82763
sa(dp82764
S'description'
p82765
g3
sS'cpp_type'
p82766
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82767
sS'default'
p82768
S'TwoPhaseStressMaterial'
p82769
sS'name'
p82770
S'type'
p82771
sS'required'
p82772
I00
sS'group_name'
p82773
Nsa(dp82774
S'description'
p82775
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82776
sS'cpp_type'
p82777
S'bool'
p82778
sS'default'
p82779
S'0'
p82780
sS'name'
p82781
S'use_displaced_mesh'
p82782
sS'required'
p82783
I00
sS'group_name'
p82784
S'Advanced'
p82785
sasS'name'
p82786
S'/Materials/TwoPhaseStressMaterial'
p82787
sa(dp82788
S'description'
p82789
g3
sS'subblocks'
p82790
NsS'parameters'
p82791
(lp82792
(dp82793
S'description'
p82794
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82795
sS'cpp_type'
p82796
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82797
sS'default'
p82798
g3
sS'name'
p82799
S'block'
p82800
sS'required'
p82801
I00
sS'group_name'
p82802
Nsa(dp82803
S'description'
p82804
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82805
sS'cpp_type'
p82806
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82807
sS'default'
p82808
g3
sS'name'
p82809
S'boundary'
p82810
sS'required'
p82811
I00
sS'group_name'
p82812
Nsa(dp82813
S'description'
p82814
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82815
sS'cpp_type'
p82816
S'bool'
p82817
sS'default'
p82818
S'1'
p82819
sS'name'
p82820
S'compute'
p82821
sS'required'
p82822
I00
sS'group_name'
p82823
Nsa(dp82824
S'description'
p82825
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82826
sS'cpp_type'
p82827
S'bool'
p82828
sS'default'
p82829
S'0'
p82830
sS'name'
p82831
S'constant_on_elem'
p82832
sS'required'
p82833
I00
sS'group_name'
p82834
S'Advanced'
p82835
sa(dp82836
S'description'
p82837
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82838
sS'cpp_type'
p82839
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82840
sS'default'
p82841
g3
sS'name'
p82842
S'control_tags'
p82843
sS'required'
p82844
I00
sS'group_name'
p82845
S'Advanced'
p82846
sa(dp82847
S'description'
p82848
S'Set the enabled status of the MooseObject.\n'
p82849
sS'cpp_type'
p82850
S'bool'
p82851
sS'default'
p82852
S'1'
p82853
sS'name'
p82854
S'enable'
p82855
sS'required'
p82856
I00
sS'group_name'
p82857
S'Advanced'
p82858
sa(dp82859
S'description'
p82860
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82861
sS'cpp_type'
p82862
S'bool'
p82863
sS'default'
p82864
S'1'
p82865
sS'name'
p82866
S'implicit'
p82867
sS'required'
p82868
I00
sS'group_name'
p82869
S'Advanced'
p82870
sa(dp82871
S'description'
p82872
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82873
sS'cpp_type'
p82874
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82875
sS'default'
p82876
g3
sS'name'
p82877
S'output_properties'
p82878
sS'required'
p82879
I00
sS'group_name'
p82880
S'Outputs'
p82881
sa(dp82882
S'description'
p82883
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82884
sS'cpp_type'
p82885
S'std::vector<OutputName, std::allocator<OutputName> >'
p82886
sS'default'
p82887
S'none'
p82888
sS'name'
p82889
S'outputs'
p82890
sS'required'
p82891
I00
sS'group_name'
p82892
S'Outputs'
p82893
sa(dp82894
S'description'
p82895
S'Material property to store the gradient magnitude in\n'
p82896
sS'cpp_type'
p82897
S'MaterialPropertyName'
p82898
sS'default'
p82899
g3
sS'name'
p82900
S'prop'
p82901
sS'required'
p82902
I01
sS'group_name'
p82903
Nsa(dp82904
S'description'
p82905
S'The seed for the master random number generator\n'
p82906
sS'cpp_type'
p82907
S'unsigned int'
p82908
sS'default'
p82909
S'0'
p82910
sS'name'
p82911
S'seed'
p82912
sS'required'
p82913
I00
sS'group_name'
p82914
S'Advanced'
p82915
sa(dp82916
S'description'
p82917
g3
sS'cpp_type'
p82918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82919
sS'default'
p82920
S'VariableGradientMaterial'
p82921
sS'name'
p82922
S'type'
p82923
sS'required'
p82924
I00
sS'group_name'
p82925
Nsa(dp82926
S'description'
p82927
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82928
sS'cpp_type'
p82929
S'bool'
p82930
sS'default'
p82931
S'0'
p82932
sS'name'
p82933
S'use_displaced_mesh'
p82934
sS'required'
p82935
I00
sS'group_name'
p82936
S'Advanced'
p82937
sa(dp82938
S'description'
p82939
S'Variable to compute the gradient magnitude of\n'
p82940
sS'cpp_type'
p82941
S'std::vector<VariableName>'
p82942
sS'default'
p82943
g3
sS'name'
p82944
S'variable'
p82945
sS'required'
p82946
I00
sS'group_name'
p82947
NsasS'name'
p82948
S'/Materials/VariableGradientMaterial'
p82949
sa(dp82950
S'description'
p82951
S'Transforms stress with volumetric term from previous configuration to this configuration\n'
p82952
sS'subblocks'
p82953
NsS'parameters'
p82954
(lp82955
(dp82956
S'description'
p82957
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82958
sS'cpp_type'
p82959
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82960
sS'default'
p82961
g3
sS'name'
p82962
S'block'
p82963
sS'required'
p82964
I00
sS'group_name'
p82965
Nsa(dp82966
S'description'
p82967
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82968
sS'cpp_type'
p82969
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82970
sS'default'
p82971
g3
sS'name'
p82972
S'boundary'
p82973
sS'required'
p82974
I00
sS'group_name'
p82975
Nsa(dp82976
S'description'
p82977
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82978
sS'cpp_type'
p82979
S'bool'
p82980
sS'default'
p82981
S'1'
p82982
sS'name'
p82983
S'compute'
p82984
sS'required'
p82985
I00
sS'group_name'
p82986
Nsa(dp82987
S'description'
p82988
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82989
sS'cpp_type'
p82990
S'bool'
p82991
sS'default'
p82992
S'0'
p82993
sS'name'
p82994
S'constant_on_elem'
p82995
sS'required'
p82996
I00
sS'group_name'
p82997
S'Advanced'
p82998
sa(dp82999
S'description'
p83000
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83001
sS'cpp_type'
p83002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83003
sS'default'
p83004
g3
sS'name'
p83005
S'control_tags'
p83006
sS'required'
p83007
I00
sS'group_name'
p83008
S'Advanced'
p83009
sa(dp83010
S'description'
p83011
S'Name of deformation gradient variable\n'
p83012
sS'cpp_type'
p83013
S'MaterialPropertyName'
p83014
sS'default'
p83015
g3
sS'name'
p83016
S'deform_grad_name'
p83017
sS'required'
p83018
I01
sS'group_name'
p83019
Nsa(dp83020
S'description'
p83021
S'Set the enabled status of the MooseObject.\n'
p83022
sS'cpp_type'
p83023
S'bool'
p83024
sS'default'
p83025
S'1'
p83026
sS'name'
p83027
S'enable'
p83028
sS'required'
p83029
I00
sS'group_name'
p83030
S'Advanced'
p83031
sa(dp83032
S'description'
p83033
S'Determines whether this object is calculated using an implicit or explicit form\n'
p83034
sS'cpp_type'
p83035
S'bool'
p83036
sS'default'
p83037
S'1'
p83038
sS'name'
p83039
S'implicit'
p83040
sS'required'
p83041
I00
sS'group_name'
p83042
S'Advanced'
p83043
sa(dp83044
S'description'
p83045
S'Name of jacobian variable\n'
p83046
sS'cpp_type'
p83047
S'MaterialPropertyName'
p83048
sS'default'
p83049
g3
sS'name'
p83050
S'jacobian_name'
p83051
sS'required'
p83052
I00
sS'group_name'
p83053
Nsa(dp83054
S'description'
p83055
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83056
sS'cpp_type'
p83057
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83058
sS'default'
p83059
g3
sS'name'
p83060
S'output_properties'
p83061
sS'required'
p83062
I00
sS'group_name'
p83063
S'Outputs'
p83064
sa(dp83065
S'description'
p83066
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83067
sS'cpp_type'
p83068
S'std::vector<OutputName, std::allocator<OutputName> >'
p83069
sS'default'
p83070
S'none'
p83071
sS'name'
p83072
S'outputs'
p83073
sS'required'
p83074
I00
sS'group_name'
p83075
S'Outputs'
p83076
sa(dp83077
S'description'
p83078
S'Name of jacobian variable from previous config.\n'
p83079
sS'cpp_type'
p83080
S'MaterialPropertyName'
p83081
sS'default'
p83082
g3
sS'name'
p83083
S'pre_jacobian_name'
p83084
sS'required'
p83085
I00
sS'group_name'
p83086
Nsa(dp83087
S'description'
p83088
S'Name of stress variable from previous config.\n'
p83089
sS'cpp_type'
p83090
S'MaterialPropertyName'
p83091
sS'default'
p83092
g3
sS'name'
p83093
S'pre_stress_name'
p83094
sS'required'
p83095
I01
sS'group_name'
p83096
Nsa(dp83097
S'description'
p83098
S'The seed for the master random number generator\n'
p83099
sS'cpp_type'
p83100
S'unsigned int'
p83101
sS'default'
p83102
S'0'
p83103
sS'name'
p83104
S'seed'
p83105
sS'required'
p83106
I00
sS'group_name'
p83107
S'Advanced'
p83108
sa(dp83109
S'description'
p83110
S'Name of stress variable\n'
p83111
sS'cpp_type'
p83112
S'MaterialPropertyName'
p83113
sS'default'
p83114
g3
sS'name'
p83115
S'stress_name'
p83116
sS'required'
p83117
I01
sS'group_name'
p83118
Nsa(dp83119
S'description'
p83120
g3
sS'cpp_type'
p83121
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83122
sS'default'
p83123
S'VolumeDeformGradCorrectedStress'
p83124
sS'name'
p83125
S'type'
p83126
sS'required'
p83127
I00
sS'group_name'
p83128
Nsa(dp83129
S'description'
p83130
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83131
sS'cpp_type'
p83132
S'bool'
p83133
sS'default'
p83134
S'0'
p83135
sS'name'
p83136
S'use_displaced_mesh'
p83137
sS'required'
p83138
I00
sS'group_name'
p83139
S'Advanced'
p83140
sasS'name'
p83141
S'/Materials/VolumeDeformGradCorrectedStress'
p83142
sasS'parameters'
p83143
NsS'name'
p83144
S'/Materials'
p83145
sa(dp83146
S'description'
p83147
g3
sS'subblocks'
p83148
(lp83149
(dp83150
S'description'
p83151
g3
sS'subblocks'
p83152
(lp83153
(dp83154
S'description'
p83155
S'Mesh generated from a specified DREAM.3D EBSD data file.\n'
p83156
sS'subblocks'
p83157
NsS'parameters'
p83158
(lp83159
(dp83160
S'description'
p83161
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p83162
sS'cpp_type'
p83163
S'bool'
p83164
sS'default'
p83165
S'1'
p83166
sS'name'
p83167
S'allow_renumbering'
p83168
sS'required'
p83169
I00
sS'group_name'
p83170
Nsa(dp83171
S'description'
p83172
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p83173
sS'cpp_type'
p83174
S'double'
p83175
sS'default'
p83176
S'1'
p83177
sS'name'
p83178
S'bias_x'
p83179
sS'required'
p83180
I00
sS'group_name'
p83181
Nsa(dp83182
S'description'
p83183
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p83184
sS'cpp_type'
p83185
S'double'
p83186
sS'default'
p83187
S'1'
p83188
sS'name'
p83189
S'bias_y'
p83190
sS'required'
p83191
I00
sS'group_name'
p83192
Nsa(dp83193
S'description'
p83194
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p83195
sS'cpp_type'
p83196
S'double'
p83197
sS'default'
p83198
S'1'
p83199
sS'name'
p83200
S'bias_z'
p83201
sS'required'
p83202
I00
sS'group_name'
p83203
Nsa(dp83204
S'name'
p83205
S'centroid_partitioner_direction'
p83206
sS'cpp_type'
p83207
S'MooseEnum'
p83208
sS'default'
p83209
g3
sS'description'
p83210
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p83211
sS'required'
p83212
I00
sS'options'
p83213
S'x y z radial'
p83214
sS'group_name'
p83215
S'Partitioning'
p83216
sa(dp83217
S'description'
p83218
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p83219
sS'cpp_type'
p83220
S'bool'
p83221
sS'default'
p83222
S'1'
p83223
sS'name'
p83224
S'construct_node_list_from_side_list'
p83225
sS'required'
p83226
I00
sS'group_name'
p83227
S'Advanced'
p83228
sa(dp83229
S'description'
p83230
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83231
sS'cpp_type'
p83232
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83233
sS'default'
p83234
g3
sS'name'
p83235
S'control_tags'
p83236
sS'required'
p83237
I00
sS'group_name'
p83238
S'Advanced'
p83239
sa(dp83240
S'name'
p83241
S'distribution'
p83242
sS'cpp_type'
p83243
S'MooseEnum'
p83244
sS'default'
p83245
S'DEFAULT'
p83246
sS'description'
p83247
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p83248
sS'required'
p83249
I00
sS'options'
p83250
S'PARALLEL SERIAL DEFAULT'
p83251
sS'group_name'
p83252
Nsa(dp83253
S'name'
p83254
S'elem_type'
p83255
sS'cpp_type'
p83256
S'MooseEnum'
p83257
sS'default'
p83258
g3
sS'description'
p83259
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p83260
sS'required'
p83261
I00
sS'options'
p83262
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p83263
sS'group_name'
p83264
Nsa(dp83265
S'description'
p83266
S'Set the enabled status of the MooseObject.\n'
p83267
sS'cpp_type'
p83268
S'bool'
p83269
sS'default'
p83270
S'1'
p83271
sS'name'
p83272
S'enable'
p83273
sS'required'
p83274
I00
sS'group_name'
p83275
S'Advanced'
p83276
sa(dp83277
S'description'
p83278
S'The name of the file containing the EBSD data\n'
p83279
sS'cpp_type'
p83280
S'FileName'
p83281
sS'default'
p83282
g3
sS'name'
p83283
S'filename'
p83284
sS'required'
p83285
I01
sS'group_name'
p83286
Nsa(dp83287
S'description'
p83288
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p83289
sS'cpp_type'
p83290
S'bool'
p83291
sS'default'
p83292
S'0'
p83293
sS'name'
p83294
S'gauss_lobatto_grid'
p83295
sS'required'
p83296
I00
sS'group_name'
p83297
Nsa(dp83298
S'description'
p83299
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83300
sS'cpp_type'
p83301
S'bool'
p83302
sS'default'
p83303
S'0'
p83304
sS'name'
p83305
S'ghost_point_neighbors'
p83306
sS'required'
p83307
I00
sS'group_name'
p83308
S'Advanced'
p83309
sa(dp83310
S'description'
p83311
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p83312
sS'cpp_type'
p83313
S'bool'
p83314
sS'default'
p83315
S'0'
p83316
sS'name'
p83317
S'nemesis'
p83318
sS'required'
p83319
I00
sS'group_name'
p83320
S'Advanced'
p83321
sa(dp83322
S'description'
p83323
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83324
sS'cpp_type'
p83325
S'unsigned short'
p83326
sS'default'
p83327
S'1'
p83328
sS'name'
p83329
S'num_ghosted_layers'
p83330
sS'required'
p83331
I00
sS'group_name'
p83332
S'Advanced'
p83333
sa(dp83334
S'name'
p83335
S'parallel_type'
p83336
sS'cpp_type'
p83337
S'MooseEnum'
p83338
sS'default'
p83339
S'DEFAULT'
p83340
sS'description'
p83341
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p83342
sS'required'
p83343
I00
sS'options'
p83344
S'DISTRIBUTED REPLICATED DEFAULT'
p83345
sS'group_name'
p83346
Nsa(dp83347
S'name'
p83348
S'partitioner'
p83349
sS'cpp_type'
p83350
S'MooseEnum'
p83351
sS'default'
p83352
S'default'
p83353
sS'description'
p83354
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p83355
sS'required'
p83356
I00
sS'options'
p83357
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p83358
sS'group_name'
p83359
S'Partitioning'
p83360
sa(dp83361
S'name'
p83362
S'patch_update_strategy'
p83363
sS'cpp_type'
p83364
S'MooseEnum'
p83365
sS'default'
p83366
S'never'
p83367
sS'description'
p83368
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p83369
sS'required'
p83370
I00
sS'options'
p83371
S'never always auto'
p83372
sS'group_name'
p83373
S'Advanced'
p83374
sa(dp83375
S'description'
p83376
g3
sS'cpp_type'
p83377
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83378
sS'default'
p83379
S'EBSDMesh'
p83380
sS'name'
p83381
S'type'
p83382
sS'required'
p83383
I00
sS'group_name'
p83384
Nsa(dp83385
S'description'
p83386
S'Number of coarsening levels available in adaptive mesh refinement.\n'
p83387
sS'cpp_type'
p83388
S'unsigned int'
p83389
sS'default'
p83390
S'0'
p83391
sS'name'
p83392
S'uniform_refine'
p83393
sS'required'
p83394
I00
sS'group_name'
p83395
NsasS'name'
p83396
S'/Mesh/<type>/EBSDMesh'
p83397
sa(dp83398
S'description'
p83399
S'Read a mesh from a file.\n'
p83400
sS'subblocks'
p83401
NsS'parameters'
p83402
(lp83403
(dp83404
S'description'
p83405
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p83406
sS'cpp_type'
p83407
S'bool'
p83408
sS'default'
p83409
S'1'
p83410
sS'name'
p83411
S'allow_renumbering'
p83412
sS'required'
p83413
I00
sS'group_name'
p83414
Nsa(dp83415
S'name'
p83416
S'centroid_partitioner_direction'
p83417
sS'cpp_type'
p83418
S'MooseEnum'
p83419
sS'default'
p83420
g3
sS'description'
p83421
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p83422
sS'required'
p83423
I00
sS'options'
p83424
S'x y z radial'
p83425
sS'group_name'
p83426
S'Partitioning'
p83427
sa(dp83428
S'description'
p83429
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p83430
sS'cpp_type'
p83431
S'bool'
p83432
sS'default'
p83433
S'1'
p83434
sS'name'
p83435
S'construct_node_list_from_side_list'
p83436
sS'required'
p83437
I00
sS'group_name'
p83438
S'Advanced'
p83439
sa(dp83440
S'description'
p83441
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83442
sS'cpp_type'
p83443
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83444
sS'default'
p83445
g3
sS'name'
p83446
S'control_tags'
p83447
sS'required'
p83448
I00
sS'group_name'
p83449
S'Advanced'
p83450
sa(dp83451
S'name'
p83452
S'dim'
p83453
sS'cpp_type'
p83454
S'MooseEnum'
p83455
sS'default'
p83456
S'1'
p83457
sS'description'
p83458
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p83459
sS'required'
p83460
I00
sS'options'
p83461
S'1 2 3'
p83462
sS'group_name'
p83463
S'Advanced'
p83464
sa(dp83465
S'name'
p83466
S'distribution'
p83467
sS'cpp_type'
p83468
S'MooseEnum'
p83469
sS'default'
p83470
S'DEFAULT'
p83471
sS'description'
p83472
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p83473
sS'required'
p83474
I00
sS'options'
p83475
S'PARALLEL SERIAL DEFAULT'
p83476
sS'group_name'
p83477
Nsa(dp83478
S'description'
p83479
S'Set the enabled status of the MooseObject.\n'
p83480
sS'cpp_type'
p83481
S'bool'
p83482
sS'default'
p83483
S'1'
p83484
sS'name'
p83485
S'enable'
p83486
sS'required'
p83487
I00
sS'group_name'
p83488
S'Advanced'
p83489
sa(dp83490
S'description'
p83491
S'The name of the mesh file to read\n'
p83492
sS'cpp_type'
p83493
S'MeshFileName'
p83494
sS'default'
p83495
g3
sS'name'
p83496
S'file'
p83497
sS'required'
p83498
I01
sS'group_name'
p83499
Nsa(dp83500
S'description'
p83501
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83502
sS'cpp_type'
p83503
S'bool'
p83504
sS'default'
p83505
S'0'
p83506
sS'name'
p83507
S'ghost_point_neighbors'
p83508
sS'required'
p83509
I00
sS'group_name'
p83510
S'Advanced'
p83511
sa(dp83512
S'description'
p83513
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p83514
sS'cpp_type'
p83515
S'bool'
p83516
sS'default'
p83517
S'0'
p83518
sS'name'
p83519
S'nemesis'
p83520
sS'required'
p83521
I00
sS'group_name'
p83522
S'Advanced'
p83523
sa(dp83524
S'description'
p83525
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83526
sS'cpp_type'
p83527
S'unsigned short'
p83528
sS'default'
p83529
S'1'
p83530
sS'name'
p83531
S'num_ghosted_layers'
p83532
sS'required'
p83533
I00
sS'group_name'
p83534
S'Advanced'
p83535
sa(dp83536
S'name'
p83537
S'parallel_type'
p83538
sS'cpp_type'
p83539
S'MooseEnum'
p83540
sS'default'
p83541
S'DEFAULT'
p83542
sS'description'
p83543
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p83544
sS'required'
p83545
I00
sS'options'
p83546
S'DISTRIBUTED REPLICATED DEFAULT'
p83547
sS'group_name'
p83548
Nsa(dp83549
S'name'
p83550
S'partitioner'
p83551
sS'cpp_type'
p83552
S'MooseEnum'
p83553
sS'default'
p83554
S'default'
p83555
sS'description'
p83556
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p83557
sS'required'
p83558
I00
sS'options'
p83559
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p83560
sS'group_name'
p83561
S'Partitioning'
p83562
sa(dp83563
S'name'
p83564
S'patch_update_strategy'
p83565
sS'cpp_type'
p83566
S'MooseEnum'
p83567
sS'default'
p83568
S'never'
p83569
sS'description'
p83570
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p83571
sS'required'
p83572
I00
sS'options'
p83573
S'never always auto'
p83574
sS'group_name'
p83575
S'Advanced'
p83576
sa(dp83577
S'description'
p83578
g3
sS'cpp_type'
p83579
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83580
sS'default'
p83581
S'FileMesh'
p83582
sS'name'
p83583
S'type'
p83584
sS'required'
p83585
I00
sS'group_name'
p83586
NsasS'name'
p83587
S'/Mesh/<type>/FileMesh'
p83588
sa(dp83589
S'description'
p83590
S'Create a line, square, or cube mesh with uniformly spaced or biased elements.\n'
p83591
sS'subblocks'
p83592
NsS'parameters'
p83593
(lp83594
(dp83595
S'description'
p83596
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p83597
sS'cpp_type'
p83598
S'bool'
p83599
sS'default'
p83600
S'1'
p83601
sS'name'
p83602
S'allow_renumbering'
p83603
sS'required'
p83604
I00
sS'group_name'
p83605
Nsa(dp83606
S'description'
p83607
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p83608
sS'cpp_type'
p83609
S'double'
p83610
sS'default'
p83611
S'1'
p83612
sS'name'
p83613
S'bias_x'
p83614
sS'required'
p83615
I00
sS'group_name'
p83616
Nsa(dp83617
S'description'
p83618
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p83619
sS'cpp_type'
p83620
S'double'
p83621
sS'default'
p83622
S'1'
p83623
sS'name'
p83624
S'bias_y'
p83625
sS'required'
p83626
I00
sS'group_name'
p83627
Nsa(dp83628
S'description'
p83629
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p83630
sS'cpp_type'
p83631
S'double'
p83632
sS'default'
p83633
S'1'
p83634
sS'name'
p83635
S'bias_z'
p83636
sS'required'
p83637
I00
sS'group_name'
p83638
Nsa(dp83639
S'name'
p83640
S'centroid_partitioner_direction'
p83641
sS'cpp_type'
p83642
S'MooseEnum'
p83643
sS'default'
p83644
g3
sS'description'
p83645
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p83646
sS'required'
p83647
I00
sS'options'
p83648
S'x y z radial'
p83649
sS'group_name'
p83650
S'Partitioning'
p83651
sa(dp83652
S'description'
p83653
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p83654
sS'cpp_type'
p83655
S'bool'
p83656
sS'default'
p83657
S'1'
p83658
sS'name'
p83659
S'construct_node_list_from_side_list'
p83660
sS'required'
p83661
I00
sS'group_name'
p83662
S'Advanced'
p83663
sa(dp83664
S'description'
p83665
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83666
sS'cpp_type'
p83667
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83668
sS'default'
p83669
g3
sS'name'
p83670
S'control_tags'
p83671
sS'required'
p83672
I00
sS'group_name'
p83673
S'Advanced'
p83674
sa(dp83675
S'name'
p83676
S'dim'
p83677
sS'cpp_type'
p83678
S'MooseEnum'
p83679
sS'default'
p83680
g3
sS'description'
p83681
S'The dimension of the mesh to be generated\n'
p83682
sS'required'
p83683
I01
sS'options'
p83684
S'1 2 3'
p83685
sS'group_name'
p83686
S'Main'
p83687
sa(dp83688
S'name'
p83689
S'distribution'
p83690
sS'cpp_type'
p83691
S'MooseEnum'
p83692
sS'default'
p83693
S'DEFAULT'
p83694
sS'description'
p83695
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p83696
sS'required'
p83697
I00
sS'options'
p83698
S'PARALLEL SERIAL DEFAULT'
p83699
sS'group_name'
p83700
Nsa(dp83701
S'name'
p83702
S'elem_type'
p83703
sS'cpp_type'
p83704
S'MooseEnum'
p83705
sS'default'
p83706
g3
sS'description'
p83707
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p83708
sS'required'
p83709
I00
sS'options'
p83710
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p83711
sS'group_name'
p83712
Nsa(dp83713
S'description'
p83714
S'Set the enabled status of the MooseObject.\n'
p83715
sS'cpp_type'
p83716
S'bool'
p83717
sS'default'
p83718
S'1'
p83719
sS'name'
p83720
S'enable'
p83721
sS'required'
p83722
I00
sS'group_name'
p83723
S'Advanced'
p83724
sa(dp83725
S'description'
p83726
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p83727
sS'cpp_type'
p83728
S'bool'
p83729
sS'default'
p83730
S'0'
p83731
sS'name'
p83732
S'gauss_lobatto_grid'
p83733
sS'required'
p83734
I00
sS'group_name'
p83735
Nsa(dp83736
S'description'
p83737
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83738
sS'cpp_type'
p83739
S'bool'
p83740
sS'default'
p83741
S'0'
p83742
sS'name'
p83743
S'ghost_point_neighbors'
p83744
sS'required'
p83745
I00
sS'group_name'
p83746
S'Advanced'
p83747
sa(dp83748
S'description'
p83749
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p83750
sS'cpp_type'
p83751
S'bool'
p83752
sS'default'
p83753
S'0'
p83754
sS'name'
p83755
S'nemesis'
p83756
sS'required'
p83757
I00
sS'group_name'
p83758
S'Advanced'
p83759
sa(dp83760
S'description'
p83761
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83762
sS'cpp_type'
p83763
S'unsigned short'
p83764
sS'default'
p83765
S'1'
p83766
sS'name'
p83767
S'num_ghosted_layers'
p83768
sS'required'
p83769
I00
sS'group_name'
p83770
S'Advanced'
p83771
sa(dp83772
S'description'
p83773
S'Number of elements in the X direction\n'
p83774
sS'cpp_type'
p83775
S'unsigned int'
p83776
sS'default'
p83777
S'1'
p83778
sS'name'
p83779
S'nx'
p83780
sS'required'
p83781
I00
sS'group_name'
p83782
Nsa(dp83783
S'description'
p83784
S'Number of elements in the Y direction\n'
p83785
sS'cpp_type'
p83786
S'unsigned int'
p83787
sS'default'
p83788
S'1'
p83789
sS'name'
p83790
S'ny'
p83791
sS'required'
p83792
I00
sS'group_name'
p83793
Nsa(dp83794
S'description'
p83795
S'Number of elements in the Z direction\n'
p83796
sS'cpp_type'
p83797
S'unsigned int'
p83798
sS'default'
p83799
S'1'
p83800
sS'name'
p83801
S'nz'
p83802
sS'required'
p83803
I00
sS'group_name'
p83804
Nsa(dp83805
S'name'
p83806
S'parallel_type'
p83807
sS'cpp_type'
p83808
S'MooseEnum'
p83809
sS'default'
p83810
S'DEFAULT'
p83811
sS'description'
p83812
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p83813
sS'required'
p83814
I00
sS'options'
p83815
S'DISTRIBUTED REPLICATED DEFAULT'
p83816
sS'group_name'
p83817
Nsa(dp83818
S'name'
p83819
S'partitioner'
p83820
sS'cpp_type'
p83821
S'MooseEnum'
p83822
sS'default'
p83823
S'default'
p83824
sS'description'
p83825
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p83826
sS'required'
p83827
I00
sS'options'
p83828
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p83829
sS'group_name'
p83830
S'Partitioning'
p83831
sa(dp83832
S'name'
p83833
S'patch_update_strategy'
p83834
sS'cpp_type'
p83835
S'MooseEnum'
p83836
sS'default'
p83837
S'never'
p83838
sS'description'
p83839
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p83840
sS'required'
p83841
I00
sS'options'
p83842
S'never always auto'
p83843
sS'group_name'
p83844
S'Advanced'
p83845
sa(dp83846
S'description'
p83847
g3
sS'cpp_type'
p83848
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83849
sS'default'
p83850
S'GeneratedMesh'
p83851
sS'name'
p83852
S'type'
p83853
sS'required'
p83854
I00
sS'group_name'
p83855
Nsa(dp83856
S'description'
p83857
S'Upper X Coordinate of the generated mesh\n'
p83858
sS'cpp_type'
p83859
S'double'
p83860
sS'default'
p83861
S'1'
p83862
sS'name'
p83863
S'xmax'
p83864
sS'required'
p83865
I00
sS'group_name'
p83866
Nsa(dp83867
S'description'
p83868
S'Lower X Coordinate of the generated mesh\n'
p83869
sS'cpp_type'
p83870
S'double'
p83871
sS'default'
p83872
S'0'
p83873
sS'name'
p83874
S'xmin'
p83875
sS'required'
p83876
I00
sS'group_name'
p83877
Nsa(dp83878
S'description'
p83879
S'Upper Y Coordinate of the generated mesh\n'
p83880
sS'cpp_type'
p83881
S'double'
p83882
sS'default'
p83883
S'1'
p83884
sS'name'
p83885
S'ymax'
p83886
sS'required'
p83887
I00
sS'group_name'
p83888
Nsa(dp83889
S'description'
p83890
S'Lower Y Coordinate of the generated mesh\n'
p83891
sS'cpp_type'
p83892
S'double'
p83893
sS'default'
p83894
S'0'
p83895
sS'name'
p83896
S'ymin'
p83897
sS'required'
p83898
I00
sS'group_name'
p83899
Nsa(dp83900
S'description'
p83901
S'Upper Z Coordinate of the generated mesh\n'
p83902
sS'cpp_type'
p83903
S'double'
p83904
sS'default'
p83905
S'1'
p83906
sS'name'
p83907
S'zmax'
p83908
sS'required'
p83909
I00
sS'group_name'
p83910
Nsa(dp83911
S'description'
p83912
S'Lower Z Coordinate of the generated mesh\n'
p83913
sS'cpp_type'
p83914
S'double'
p83915
sS'default'
p83916
S'0'
p83917
sS'name'
p83918
S'zmin'
p83919
sS'required'
p83920
I00
sS'group_name'
p83921
NsasS'name'
p83922
S'/Mesh/<type>/GeneratedMesh'
p83923
sa(dp83924
S'description'
p83925
S'Generated mesh with the aspect ratio of a given image stack.\n'
p83926
sS'subblocks'
p83927
NsS'parameters'
p83928
(lp83929
(dp83930
S'description'
p83931
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p83932
sS'cpp_type'
p83933
S'bool'
p83934
sS'default'
p83935
S'1'
p83936
sS'name'
p83937
S'allow_renumbering'
p83938
sS'required'
p83939
I00
sS'group_name'
p83940
Nsa(dp83941
S'description'
p83942
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p83943
sS'cpp_type'
p83944
S'double'
p83945
sS'default'
p83946
S'1'
p83947
sS'name'
p83948
S'bias_x'
p83949
sS'required'
p83950
I00
sS'group_name'
p83951
Nsa(dp83952
S'description'
p83953
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p83954
sS'cpp_type'
p83955
S'double'
p83956
sS'default'
p83957
S'1'
p83958
sS'name'
p83959
S'bias_y'
p83960
sS'required'
p83961
I00
sS'group_name'
p83962
Nsa(dp83963
S'description'
p83964
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p83965
sS'cpp_type'
p83966
S'double'
p83967
sS'default'
p83968
S'1'
p83969
sS'name'
p83970
S'bias_z'
p83971
sS'required'
p83972
I00
sS'group_name'
p83973
Nsa(dp83974
S'description'
p83975
S'The number of mesh cells per pixel, must be <=1 \n'
p83976
sS'cpp_type'
p83977
S'double'
p83978
sS'default'
p83979
S'1'
p83980
sS'name'
p83981
S'cells_per_pixel'
p83982
sS'required'
p83983
I00
sS'group_name'
p83984
Nsa(dp83985
S'name'
p83986
S'centroid_partitioner_direction'
p83987
sS'cpp_type'
p83988
S'MooseEnum'
p83989
sS'default'
p83990
g3
sS'description'
p83991
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p83992
sS'required'
p83993
I00
sS'options'
p83994
S'x y z radial'
p83995
sS'group_name'
p83996
S'Partitioning'
p83997
sa(dp83998
S'description'
p83999
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84000
sS'cpp_type'
p84001
S'bool'
p84002
sS'default'
p84003
S'1'
p84004
sS'name'
p84005
S'construct_node_list_from_side_list'
p84006
sS'required'
p84007
I00
sS'group_name'
p84008
S'Advanced'
p84009
sa(dp84010
S'description'
p84011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84012
sS'cpp_type'
p84013
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84014
sS'default'
p84015
g3
sS'name'
p84016
S'control_tags'
p84017
sS'required'
p84018
I00
sS'group_name'
p84019
S'Advanced'
p84020
sa(dp84021
S'name'
p84022
S'dim'
p84023
sS'cpp_type'
p84024
S'MooseEnum'
p84025
sS'default'
p84026
g3
sS'description'
p84027
S'The dimension of the mesh to be generated\n'
p84028
sS'required'
p84029
I01
sS'options'
p84030
S'1 2 3'
p84031
sS'group_name'
p84032
S'Main'
p84033
sa(dp84034
S'name'
p84035
S'distribution'
p84036
sS'cpp_type'
p84037
S'MooseEnum'
p84038
sS'default'
p84039
S'DEFAULT'
p84040
sS'description'
p84041
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84042
sS'required'
p84043
I00
sS'options'
p84044
S'PARALLEL SERIAL DEFAULT'
p84045
sS'group_name'
p84046
Nsa(dp84047
S'name'
p84048
S'elem_type'
p84049
sS'cpp_type'
p84050
S'MooseEnum'
p84051
sS'default'
p84052
g3
sS'description'
p84053
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p84054
sS'required'
p84055
I00
sS'options'
p84056
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p84057
sS'group_name'
p84058
Nsa(dp84059
S'description'
p84060
S'Set the enabled status of the MooseObject.\n'
p84061
sS'cpp_type'
p84062
S'bool'
p84063
sS'default'
p84064
S'1'
p84065
sS'name'
p84066
S'enable'
p84067
sS'required'
p84068
I00
sS'group_name'
p84069
S'Advanced'
p84070
sa(dp84071
S'description'
p84072
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p84073
sS'cpp_type'
p84074
S'FileName'
p84075
sS'default'
p84076
g3
sS'name'
p84077
S'file'
p84078
sS'required'
p84079
I00
sS'group_name'
p84080
Nsa(dp84081
S'description'
p84082
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p84083
sS'cpp_type'
p84084
S'FileNameNoExtension'
p84085
sS'default'
p84086
g3
sS'name'
p84087
S'file_base'
p84088
sS'required'
p84089
I00
sS'group_name'
p84090
Nsa(dp84091
S'description'
p84092
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p84093
sS'cpp_type'
p84094
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p84095
sS'default'
p84096
g3
sS'name'
p84097
S'file_range'
p84098
sS'required'
p84099
I00
sS'group_name'
p84100
Nsa(dp84101
S'description'
p84102
S"Suffix of the file to open, e.g. 'png'\n"
p84103
sS'cpp_type'
p84104
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84105
sS'default'
p84106
g3
sS'name'
p84107
S'file_suffix'
p84108
sS'required'
p84109
I00
sS'group_name'
p84110
Nsa(dp84111
S'description'
p84112
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p84113
sS'cpp_type'
p84114
S'bool'
p84115
sS'default'
p84116
S'0'
p84117
sS'name'
p84118
S'gauss_lobatto_grid'
p84119
sS'required'
p84120
I00
sS'group_name'
p84121
Nsa(dp84122
S'description'
p84123
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84124
sS'cpp_type'
p84125
S'bool'
p84126
sS'default'
p84127
S'0'
p84128
sS'name'
p84129
S'ghost_point_neighbors'
p84130
sS'required'
p84131
I00
sS'group_name'
p84132
S'Advanced'
p84133
sa(dp84134
S'description'
p84135
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p84136
sS'cpp_type'
p84137
S'bool'
p84138
sS'default'
p84139
S'0'
p84140
sS'name'
p84141
S'nemesis'
p84142
sS'required'
p84143
I00
sS'group_name'
p84144
S'Advanced'
p84145
sa(dp84146
S'description'
p84147
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84148
sS'cpp_type'
p84149
S'unsigned short'
p84150
sS'default'
p84151
S'1'
p84152
sS'name'
p84153
S'num_ghosted_layers'
p84154
sS'required'
p84155
I00
sS'group_name'
p84156
S'Advanced'
p84157
sa(dp84158
S'description'
p84159
S'Number of elements in the X direction\n'
p84160
sS'cpp_type'
p84161
S'unsigned int'
p84162
sS'default'
p84163
S'1'
p84164
sS'name'
p84165
S'nx'
p84166
sS'required'
p84167
I00
sS'group_name'
p84168
Nsa(dp84169
S'description'
p84170
S'Number of elements in the Y direction\n'
p84171
sS'cpp_type'
p84172
S'unsigned int'
p84173
sS'default'
p84174
S'1'
p84175
sS'name'
p84176
S'ny'
p84177
sS'required'
p84178
I00
sS'group_name'
p84179
Nsa(dp84180
S'description'
p84181
S'Number of elements in the Z direction\n'
p84182
sS'cpp_type'
p84183
S'unsigned int'
p84184
sS'default'
p84185
S'1'
p84186
sS'name'
p84187
S'nz'
p84188
sS'required'
p84189
I00
sS'group_name'
p84190
Nsa(dp84191
S'name'
p84192
S'parallel_type'
p84193
sS'cpp_type'
p84194
S'MooseEnum'
p84195
sS'default'
p84196
S'DEFAULT'
p84197
sS'description'
p84198
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p84199
sS'required'
p84200
I00
sS'options'
p84201
S'DISTRIBUTED REPLICATED DEFAULT'
p84202
sS'group_name'
p84203
Nsa(dp84204
S'name'
p84205
S'partitioner'
p84206
sS'cpp_type'
p84207
S'MooseEnum'
p84208
sS'default'
p84209
S'default'
p84210
sS'description'
p84211
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p84212
sS'required'
p84213
I00
sS'options'
p84214
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p84215
sS'group_name'
p84216
S'Partitioning'
p84217
sa(dp84218
S'name'
p84219
S'patch_update_strategy'
p84220
sS'cpp_type'
p84221
S'MooseEnum'
p84222
sS'default'
p84223
S'never'
p84224
sS'description'
p84225
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p84226
sS'required'
p84227
I00
sS'options'
p84228
S'never always auto'
p84229
sS'group_name'
p84230
S'Advanced'
p84231
sa(dp84232
S'description'
p84233
S'Whether or not to scale the image so its max dimension is 1\n'
p84234
sS'cpp_type'
p84235
S'bool'
p84236
sS'default'
p84237
S'1'
p84238
sS'name'
p84239
S'scale_to_one'
p84240
sS'required'
p84241
I00
sS'group_name'
p84242
Nsa(dp84243
S'description'
p84244
g3
sS'cpp_type'
p84245
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84246
sS'default'
p84247
S'ImageMesh'
p84248
sS'name'
p84249
S'type'
p84250
sS'required'
p84251
I00
sS'group_name'
p84252
Nsa(dp84253
S'description'
p84254
S'Upper X Coordinate of the generated mesh\n'
p84255
sS'cpp_type'
p84256
S'double'
p84257
sS'default'
p84258
S'1'
p84259
sS'name'
p84260
S'xmax'
p84261
sS'required'
p84262
I00
sS'group_name'
p84263
Nsa(dp84264
S'description'
p84265
S'Lower X Coordinate of the generated mesh\n'
p84266
sS'cpp_type'
p84267
S'double'
p84268
sS'default'
p84269
S'0'
p84270
sS'name'
p84271
S'xmin'
p84272
sS'required'
p84273
I00
sS'group_name'
p84274
Nsa(dp84275
S'description'
p84276
S'Upper Y Coordinate of the generated mesh\n'
p84277
sS'cpp_type'
p84278
S'double'
p84279
sS'default'
p84280
S'1'
p84281
sS'name'
p84282
S'ymax'
p84283
sS'required'
p84284
I00
sS'group_name'
p84285
Nsa(dp84286
S'description'
p84287
S'Lower Y Coordinate of the generated mesh\n'
p84288
sS'cpp_type'
p84289
S'double'
p84290
sS'default'
p84291
S'0'
p84292
sS'name'
p84293
S'ymin'
p84294
sS'required'
p84295
I00
sS'group_name'
p84296
Nsa(dp84297
S'description'
p84298
S'Upper Z Coordinate of the generated mesh\n'
p84299
sS'cpp_type'
p84300
S'double'
p84301
sS'default'
p84302
S'1'
p84303
sS'name'
p84304
S'zmax'
p84305
sS'required'
p84306
I00
sS'group_name'
p84307
Nsa(dp84308
S'description'
p84309
S'Lower Z Coordinate of the generated mesh\n'
p84310
sS'cpp_type'
p84311
S'double'
p84312
sS'default'
p84313
S'0'
p84314
sS'name'
p84315
S'zmin'
p84316
sS'required'
p84317
I00
sS'group_name'
p84318
NsasS'name'
p84319
S'/Mesh/<type>/ImageMesh'
p84320
sa(dp84321
S'description'
p84322
S'Set up an orthogonal mesh with additional dim-1 dimensional side domains for use with the Mortar method.\n'
p84323
sS'subblocks'
p84324
NsS'parameters'
p84325
(lp84326
(dp84327
S'description'
p84328
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p84329
sS'cpp_type'
p84330
S'bool'
p84331
sS'default'
p84332
S'1'
p84333
sS'name'
p84334
S'allow_renumbering'
p84335
sS'required'
p84336
I00
sS'group_name'
p84337
Nsa(dp84338
S'description'
p84339
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p84340
sS'cpp_type'
p84341
S'double'
p84342
sS'default'
p84343
S'1'
p84344
sS'name'
p84345
S'bias_x'
p84346
sS'required'
p84347
I00
sS'group_name'
p84348
Nsa(dp84349
S'description'
p84350
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p84351
sS'cpp_type'
p84352
S'double'
p84353
sS'default'
p84354
S'1'
p84355
sS'name'
p84356
S'bias_y'
p84357
sS'required'
p84358
I00
sS'group_name'
p84359
Nsa(dp84360
S'description'
p84361
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p84362
sS'cpp_type'
p84363
S'double'
p84364
sS'default'
p84365
S'1'
p84366
sS'name'
p84367
S'bias_z'
p84368
sS'required'
p84369
I00
sS'group_name'
p84370
Nsa(dp84371
S'name'
p84372
S'centroid_partitioner_direction'
p84373
sS'cpp_type'
p84374
S'MooseEnum'
p84375
sS'default'
p84376
g3
sS'description'
p84377
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p84378
sS'required'
p84379
I00
sS'options'
p84380
S'x y z radial'
p84381
sS'group_name'
p84382
S'Partitioning'
p84383
sa(dp84384
S'description'
p84385
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84386
sS'cpp_type'
p84387
S'bool'
p84388
sS'default'
p84389
S'1'
p84390
sS'name'
p84391
S'construct_node_list_from_side_list'
p84392
sS'required'
p84393
I00
sS'group_name'
p84394
S'Advanced'
p84395
sa(dp84396
S'description'
p84397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84398
sS'cpp_type'
p84399
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84400
sS'default'
p84401
g3
sS'name'
p84402
S'control_tags'
p84403
sS'required'
p84404
I00
sS'group_name'
p84405
S'Advanced'
p84406
sa(dp84407
S'name'
p84408
S'dim'
p84409
sS'cpp_type'
p84410
S'MooseEnum'
p84411
sS'default'
p84412
g3
sS'description'
p84413
S'The dimension of the mesh to be generated\n'
p84414
sS'required'
p84415
I01
sS'options'
p84416
S'1 2 3'
p84417
sS'group_name'
p84418
S'Main'
p84419
sa(dp84420
S'name'
p84421
S'distribution'
p84422
sS'cpp_type'
p84423
S'MooseEnum'
p84424
sS'default'
p84425
S'DEFAULT'
p84426
sS'description'
p84427
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84428
sS'required'
p84429
I00
sS'options'
p84430
S'PARALLEL SERIAL DEFAULT'
p84431
sS'group_name'
p84432
Nsa(dp84433
S'name'
p84434
S'elem_type'
p84435
sS'cpp_type'
p84436
S'MooseEnum'
p84437
sS'default'
p84438
g3
sS'description'
p84439
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p84440
sS'required'
p84441
I00
sS'options'
p84442
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p84443
sS'group_name'
p84444
Nsa(dp84445
S'description'
p84446
S'Set the enabled status of the MooseObject.\n'
p84447
sS'cpp_type'
p84448
S'bool'
p84449
sS'default'
p84450
S'1'
p84451
sS'name'
p84452
S'enable'
p84453
sS'required'
p84454
I00
sS'group_name'
p84455
S'Advanced'
p84456
sa(dp84457
S'description'
p84458
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p84459
sS'cpp_type'
p84460
S'bool'
p84461
sS'default'
p84462
S'0'
p84463
sS'name'
p84464
S'gauss_lobatto_grid'
p84465
sS'required'
p84466
I00
sS'group_name'
p84467
Nsa(dp84468
S'description'
p84469
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84470
sS'cpp_type'
p84471
S'bool'
p84472
sS'default'
p84473
S'0'
p84474
sS'name'
p84475
S'ghost_point_neighbors'
p84476
sS'required'
p84477
I00
sS'group_name'
p84478
S'Advanced'
p84479
sa(dp84480
S'description'
p84481
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p84482
sS'cpp_type'
p84483
S'bool'
p84484
sS'default'
p84485
S'0'
p84486
sS'name'
p84487
S'nemesis'
p84488
sS'required'
p84489
I00
sS'group_name'
p84490
S'Advanced'
p84491
sa(dp84492
S'description'
p84493
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84494
sS'cpp_type'
p84495
S'unsigned short'
p84496
sS'default'
p84497
S'1'
p84498
sS'name'
p84499
S'num_ghosted_layers'
p84500
sS'required'
p84501
I00
sS'group_name'
p84502
S'Advanced'
p84503
sa(dp84504
S'description'
p84505
S'Number of elements in the X direction\n'
p84506
sS'cpp_type'
p84507
S'unsigned int'
p84508
sS'default'
p84509
S'1'
p84510
sS'name'
p84511
S'nx'
p84512
sS'required'
p84513
I00
sS'group_name'
p84514
Nsa(dp84515
S'description'
p84516
S'Number of elements in the Y direction\n'
p84517
sS'cpp_type'
p84518
S'unsigned int'
p84519
sS'default'
p84520
S'1'
p84521
sS'name'
p84522
S'ny'
p84523
sS'required'
p84524
I00
sS'group_name'
p84525
Nsa(dp84526
S'description'
p84527
S'Number of elements in the Z direction\n'
p84528
sS'cpp_type'
p84529
S'unsigned int'
p84530
sS'default'
p84531
S'1'
p84532
sS'name'
p84533
S'nz'
p84534
sS'required'
p84535
I00
sS'group_name'
p84536
Nsa(dp84537
S'name'
p84538
S'parallel_type'
p84539
sS'cpp_type'
p84540
S'MooseEnum'
p84541
sS'default'
p84542
S'DEFAULT'
p84543
sS'description'
p84544
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p84545
sS'required'
p84546
I00
sS'options'
p84547
S'DISTRIBUTED REPLICATED DEFAULT'
p84548
sS'group_name'
p84549
Nsa(dp84550
S'name'
p84551
S'partitioner'
p84552
sS'cpp_type'
p84553
S'MooseEnum'
p84554
sS'default'
p84555
S'default'
p84556
sS'description'
p84557
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p84558
sS'required'
p84559
I00
sS'options'
p84560
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p84561
sS'group_name'
p84562
S'Partitioning'
p84563
sa(dp84564
S'name'
p84565
S'patch_update_strategy'
p84566
sS'cpp_type'
p84567
S'MooseEnum'
p84568
sS'default'
p84569
S'never'
p84570
sS'description'
p84571
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p84572
sS'required'
p84573
I00
sS'options'
p84574
S'never always auto'
p84575
sS'group_name'
p84576
S'Advanced'
p84577
sa(dp84578
S'name'
p84579
S'periodic_directions'
p84580
sS'cpp_type'
p84581
S'MultiMooseEnum'
p84582
sS'default'
p84583
g3
sS'description'
p84584
S'Directions along which additional Mortar meshes are generated\n'
p84585
sS'required'
p84586
I01
sS'options'
p84587
S'x y z'
p84588
sS'group_name'
p84589
Nsa(dp84590
S'description'
p84591
g3
sS'cpp_type'
p84592
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84593
sS'default'
p84594
S'MortarPeriodicMesh'
p84595
sS'name'
p84596
S'type'
p84597
sS'required'
p84598
I00
sS'group_name'
p84599
Nsa(dp84600
S'description'
p84601
S'Upper X Coordinate of the generated mesh\n'
p84602
sS'cpp_type'
p84603
S'double'
p84604
sS'default'
p84605
S'1'
p84606
sS'name'
p84607
S'xmax'
p84608
sS'required'
p84609
I00
sS'group_name'
p84610
Nsa(dp84611
S'description'
p84612
S'Lower X Coordinate of the generated mesh\n'
p84613
sS'cpp_type'
p84614
S'double'
p84615
sS'default'
p84616
S'0'
p84617
sS'name'
p84618
S'xmin'
p84619
sS'required'
p84620
I00
sS'group_name'
p84621
Nsa(dp84622
S'description'
p84623
S'Upper Y Coordinate of the generated mesh\n'
p84624
sS'cpp_type'
p84625
S'double'
p84626
sS'default'
p84627
S'1'
p84628
sS'name'
p84629
S'ymax'
p84630
sS'required'
p84631
I00
sS'group_name'
p84632
Nsa(dp84633
S'description'
p84634
S'Lower Y Coordinate of the generated mesh\n'
p84635
sS'cpp_type'
p84636
S'double'
p84637
sS'default'
p84638
S'0'
p84639
sS'name'
p84640
S'ymin'
p84641
sS'required'
p84642
I00
sS'group_name'
p84643
Nsa(dp84644
S'description'
p84645
S'Upper Z Coordinate of the generated mesh\n'
p84646
sS'cpp_type'
p84647
S'double'
p84648
sS'default'
p84649
S'1'
p84650
sS'name'
p84651
S'zmax'
p84652
sS'required'
p84653
I00
sS'group_name'
p84654
Nsa(dp84655
S'description'
p84656
S'Lower Z Coordinate of the generated mesh\n'
p84657
sS'cpp_type'
p84658
S'double'
p84659
sS'default'
p84660
S'0'
p84661
sS'name'
p84662
S'zmin'
p84663
sS'required'
p84664
I00
sS'group_name'
p84665
NsasS'name'
p84666
S'/Mesh/<type>/MortarPeriodicMesh'
p84667
sa(dp84668
S'description'
p84669
S"Creates a 2D mesh from a specified set of unique 'tiles' meshes and a two-dimensional pattern.\n"
p84670
sS'subblocks'
p84671
NsS'parameters'
p84672
(lp84673
(dp84674
S'description'
p84675
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p84676
sS'cpp_type'
p84677
S'bool'
p84678
sS'default'
p84679
S'1'
p84680
sS'name'
p84681
S'allow_renumbering'
p84682
sS'required'
p84683
I00
sS'group_name'
p84684
Nsa(dp84685
S'description'
p84686
S'name of the bottom (y) boundary\n'
p84687
sS'cpp_type'
p84688
S'BoundaryName'
p84689
sS'default'
p84690
S'bottom_boundary'
p84691
sS'name'
p84692
S'bottom_boundary'
p84693
sS'required'
p84694
I00
sS'group_name'
p84695
Nsa(dp84696
S'name'
p84697
S'centroid_partitioner_direction'
p84698
sS'cpp_type'
p84699
S'MooseEnum'
p84700
sS'default'
p84701
g3
sS'description'
p84702
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p84703
sS'required'
p84704
I00
sS'options'
p84705
S'x y z radial'
p84706
sS'group_name'
p84707
S'Partitioning'
p84708
sa(dp84709
S'description'
p84710
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84711
sS'cpp_type'
p84712
S'bool'
p84713
sS'default'
p84714
S'1'
p84715
sS'name'
p84716
S'construct_node_list_from_side_list'
p84717
sS'required'
p84718
I00
sS'group_name'
p84719
S'Advanced'
p84720
sa(dp84721
S'description'
p84722
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84723
sS'cpp_type'
p84724
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84725
sS'default'
p84726
g3
sS'name'
p84727
S'control_tags'
p84728
sS'required'
p84729
I00
sS'group_name'
p84730
S'Advanced'
p84731
sa(dp84732
S'name'
p84733
S'dim'
p84734
sS'cpp_type'
p84735
S'MooseEnum'
p84736
sS'default'
p84737
S'1'
p84738
sS'description'
p84739
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p84740
sS'required'
p84741
I00
sS'options'
p84742
S'1 2 3'
p84743
sS'group_name'
p84744
S'Advanced'
p84745
sa(dp84746
S'name'
p84747
S'distribution'
p84748
sS'cpp_type'
p84749
S'MooseEnum'
p84750
sS'default'
p84751
S'DEFAULT'
p84752
sS'description'
p84753
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84754
sS'required'
p84755
I00
sS'options'
p84756
S'PARALLEL SERIAL DEFAULT'
p84757
sS'group_name'
p84758
Nsa(dp84759
S'description'
p84760
S'Set the enabled status of the MooseObject.\n'
p84761
sS'cpp_type'
p84762
S'bool'
p84763
sS'default'
p84764
S'1'
p84765
sS'name'
p84766
S'enable'
p84767
sS'required'
p84768
I00
sS'group_name'
p84769
S'Advanced'
p84770
sa(dp84771
S'description'
p84772
S'The name of the mesh files to read.  They are automatically assigned ids starting with zero.\n'
p84773
sS'cpp_type'
p84774
S'std::vector<MeshFileName, std::allocator<MeshFileName> >'
p84775
sS'default'
p84776
g3
sS'name'
p84777
S'files'
p84778
sS'required'
p84779
I01
sS'group_name'
p84780
Nsa(dp84781
S'description'
p84782
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84783
sS'cpp_type'
p84784
S'bool'
p84785
sS'default'
p84786
S'0'
p84787
sS'name'
p84788
S'ghost_point_neighbors'
p84789
sS'required'
p84790
I00
sS'group_name'
p84791
S'Advanced'
p84792
sa(dp84793
S'description'
p84794
S'name of the left (x) boundary\n'
p84795
sS'cpp_type'
p84796
S'BoundaryName'
p84797
sS'default'
p84798
S'left_boundary'
p84799
sS'name'
p84800
S'left_boundary'
p84801
sS'required'
p84802
I00
sS'group_name'
p84803
Nsa(dp84804
S'description'
p84805
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p84806
sS'cpp_type'
p84807
S'bool'
p84808
sS'default'
p84809
S'0'
p84810
sS'name'
p84811
S'nemesis'
p84812
sS'required'
p84813
I00
sS'group_name'
p84814
S'Advanced'
p84815
sa(dp84816
S'description'
p84817
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84818
sS'cpp_type'
p84819
S'unsigned short'
p84820
sS'default'
p84821
S'1'
p84822
sS'name'
p84823
S'num_ghosted_layers'
p84824
sS'required'
p84825
I00
sS'group_name'
p84826
S'Advanced'
p84827
sa(dp84828
S'name'
p84829
S'parallel_type'
p84830
sS'cpp_type'
p84831
S'MooseEnum'
p84832
sS'default'
p84833
S'DEFAULT'
p84834
sS'description'
p84835
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p84836
sS'required'
p84837
I00
sS'options'
p84838
S'DISTRIBUTED REPLICATED DEFAULT'
p84839
sS'group_name'
p84840
Nsa(dp84841
S'name'
p84842
S'partitioner'
p84843
sS'cpp_type'
p84844
S'MooseEnum'
p84845
sS'default'
p84846
S'default'
p84847
sS'description'
p84848
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p84849
sS'required'
p84850
I00
sS'options'
p84851
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p84852
sS'group_name'
p84853
S'Partitioning'
p84854
sa(dp84855
S'name'
p84856
S'patch_update_strategy'
p84857
sS'cpp_type'
p84858
S'MooseEnum'
p84859
sS'default'
p84860
S'never'
p84861
sS'description'
p84862
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p84863
sS'required'
p84864
I00
sS'options'
p84865
S'never always auto'
p84866
sS'group_name'
p84867
S'Advanced'
p84868
sa(dp84869
S'description'
p84870
S'A double-indexed array starting with the upper-left corner\n'
p84871
sS'cpp_type'
p84872
S'std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >'
p84873
sS'default'
p84874
g3
sS'name'
p84875
S'pattern'
p84876
sS'required'
p84877
I01
sS'group_name'
p84878
Nsa(dp84879
S'description'
p84880
S'name of the right (x) boundary\n'
p84881
sS'cpp_type'
p84882
S'BoundaryName'
p84883
sS'default'
p84884
S'right_boundary'
p84885
sS'name'
p84886
S'right_boundary'
p84887
sS'required'
p84888
I00
sS'group_name'
p84889
Nsa(dp84890
S'description'
p84891
S'name of the top (y) boundary\n'
p84892
sS'cpp_type'
p84893
S'BoundaryName'
p84894
sS'default'
p84895
S'top_boundary'
p84896
sS'name'
p84897
S'top_boundary'
p84898
sS'required'
p84899
I00
sS'group_name'
p84900
Nsa(dp84901
S'description'
p84902
g3
sS'cpp_type'
p84903
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84904
sS'default'
p84905
S'PatternedMesh'
p84906
sS'name'
p84907
S'type'
p84908
sS'required'
p84909
I00
sS'group_name'
p84910
Nsa(dp84911
S'description'
p84912
S'The tile width in the x direction\n'
p84913
sS'cpp_type'
p84914
S'double'
p84915
sS'default'
p84916
S'0'
p84917
sS'name'
p84918
S'x_width'
p84919
sS'required'
p84920
I00
sS'group_name'
p84921
Nsa(dp84922
S'description'
p84923
S'The tile width in the y direction\n'
p84924
sS'cpp_type'
p84925
S'double'
p84926
sS'default'
p84927
S'0'
p84928
sS'name'
p84929
S'y_width'
p84930
sS'required'
p84931
I00
sS'group_name'
p84932
Nsa(dp84933
S'description'
p84934
S'The tile width in the z direction\n'
p84935
sS'cpp_type'
p84936
S'double'
p84937
sS'default'
p84938
S'0'
p84939
sS'name'
p84940
S'z_width'
p84941
sS'required'
p84942
I00
sS'group_name'
p84943
NsasS'name'
p84944
S'/Mesh/<type>/PatternedMesh'
p84945
sa(dp84946
S'description'
p84947
S'Reads in all of the given meshes and stitches them all together into one mesh.\n'
p84948
sS'subblocks'
p84949
NsS'parameters'
p84950
(lp84951
(dp84952
S'description'
p84953
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p84954
sS'cpp_type'
p84955
S'bool'
p84956
sS'default'
p84957
S'1'
p84958
sS'name'
p84959
S'allow_renumbering'
p84960
sS'required'
p84961
I00
sS'group_name'
p84962
Nsa(dp84963
S'name'
p84964
S'centroid_partitioner_direction'
p84965
sS'cpp_type'
p84966
S'MooseEnum'
p84967
sS'default'
p84968
g3
sS'description'
p84969
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p84970
sS'required'
p84971
I00
sS'options'
p84972
S'x y z radial'
p84973
sS'group_name'
p84974
S'Partitioning'
p84975
sa(dp84976
S'description'
p84977
S"Whether or not to erase the boundary IDs after they've been used for stitching.\n"
p84978
sS'cpp_type'
p84979
S'bool'
p84980
sS'default'
p84981
S'1'
p84982
sS'name'
p84983
S'clear_stitched_boundary_ids'
p84984
sS'required'
p84985
I00
sS'group_name'
p84986
Nsa(dp84987
S'description'
p84988
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84989
sS'cpp_type'
p84990
S'bool'
p84991
sS'default'
p84992
S'1'
p84993
sS'name'
p84994
S'construct_node_list_from_side_list'
p84995
sS'required'
p84996
I00
sS'group_name'
p84997
S'Advanced'
p84998
sa(dp84999
S'description'
p85000
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85001
sS'cpp_type'
p85002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85003
sS'default'
p85004
g3
sS'name'
p85005
S'control_tags'
p85006
sS'required'
p85007
I00
sS'group_name'
p85008
S'Advanced'
p85009
sa(dp85010
S'name'
p85011
S'dim'
p85012
sS'cpp_type'
p85013
S'MooseEnum'
p85014
sS'default'
p85015
S'1'
p85016
sS'description'
p85017
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p85018
sS'required'
p85019
I00
sS'options'
p85020
S'1 2 3'
p85021
sS'group_name'
p85022
S'Advanced'
p85023
sa(dp85024
S'name'
p85025
S'distribution'
p85026
sS'cpp_type'
p85027
S'MooseEnum'
p85028
sS'default'
p85029
S'DEFAULT'
p85030
sS'description'
p85031
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p85032
sS'required'
p85033
I00
sS'options'
p85034
S'PARALLEL SERIAL DEFAULT'
p85035
sS'group_name'
p85036
Nsa(dp85037
S'description'
p85038
S'Set the enabled status of the MooseObject.\n'
p85039
sS'cpp_type'
p85040
S'bool'
p85041
sS'default'
p85042
S'1'
p85043
sS'name'
p85044
S'enable'
p85045
sS'required'
p85046
I00
sS'group_name'
p85047
S'Advanced'
p85048
sa(dp85049
S'description'
p85050
S"The name of the mesh files to read.  These mesh files will be 'stitched' into the current mesh in this order.\n"
p85051
sS'cpp_type'
p85052
S'std::vector<MeshFileName, std::allocator<MeshFileName> >'
p85053
sS'default'
p85054
g3
sS'name'
p85055
S'files'
p85056
sS'required'
p85057
I01
sS'group_name'
p85058
Nsa(dp85059
S'description'
p85060
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85061
sS'cpp_type'
p85062
S'bool'
p85063
sS'default'
p85064
S'0'
p85065
sS'name'
p85066
S'ghost_point_neighbors'
p85067
sS'required'
p85068
I00
sS'group_name'
p85069
S'Advanced'
p85070
sa(dp85071
S'description'
p85072
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p85073
sS'cpp_type'
p85074
S'bool'
p85075
sS'default'
p85076
S'0'
p85077
sS'name'
p85078
S'nemesis'
p85079
sS'required'
p85080
I00
sS'group_name'
p85081
S'Advanced'
p85082
sa(dp85083
S'description'
p85084
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85085
sS'cpp_type'
p85086
S'unsigned short'
p85087
sS'default'
p85088
S'1'
p85089
sS'name'
p85090
S'num_ghosted_layers'
p85091
sS'required'
p85092
I00
sS'group_name'
p85093
S'Advanced'
p85094
sa(dp85095
S'name'
p85096
S'parallel_type'
p85097
sS'cpp_type'
p85098
S'MooseEnum'
p85099
sS'default'
p85100
S'DEFAULT'
p85101
sS'description'
p85102
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p85103
sS'required'
p85104
I00
sS'options'
p85105
S'DISTRIBUTED REPLICATED DEFAULT'
p85106
sS'group_name'
p85107
Nsa(dp85108
S'name'
p85109
S'partitioner'
p85110
sS'cpp_type'
p85111
S'MooseEnum'
p85112
sS'default'
p85113
S'default'
p85114
sS'description'
p85115
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85116
sS'required'
p85117
I00
sS'options'
p85118
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p85119
sS'group_name'
p85120
S'Partitioning'
p85121
sa(dp85122
S'name'
p85123
S'patch_update_strategy'
p85124
sS'cpp_type'
p85125
S'MooseEnum'
p85126
sS'default'
p85127
S'never'
p85128
sS'description'
p85129
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p85130
sS'required'
p85131
I00
sS'options'
p85132
S'never always auto'
p85133
sS'group_name'
p85134
S'Advanced'
p85135
sa(dp85136
S'description'
p85137
S'Pairs of boundary names (one after the other) to stitch together for each step.\n'
p85138
sS'cpp_type'
p85139
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85140
sS'default'
p85141
g3
sS'name'
p85142
S'stitch_boundaries'
p85143
sS'required'
p85144
I01
sS'group_name'
p85145
Nsa(dp85146
S'description'
p85147
g3
sS'cpp_type'
p85148
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85149
sS'default'
p85150
S'StitchedMesh'
p85151
sS'name'
p85152
S'type'
p85153
sS'required'
p85154
I00
sS'group_name'
p85155
NsasS'name'
p85156
S'/Mesh/<type>/StitchedMesh'
p85157
sa(dp85158
S'description'
p85159
S'Use the supplied mesh and create a tiled grid by repeating this mesh in the x,y, and z directions.\n'
p85160
sS'subblocks'
p85161
NsS'parameters'
p85162
(lp85163
(dp85164
S'description'
p85165
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p85166
sS'cpp_type'
p85167
S'bool'
p85168
sS'default'
p85169
S'1'
p85170
sS'name'
p85171
S'allow_renumbering'
p85172
sS'required'
p85173
I00
sS'group_name'
p85174
Nsa(dp85175
S'description'
p85176
S'name of the back (z) boundary\n'
p85177
sS'cpp_type'
p85178
S'BoundaryName'
p85179
sS'default'
p85180
S'back_boundary'
p85181
sS'name'
p85182
S'back_boundary'
p85183
sS'required'
p85184
I00
sS'group_name'
p85185
Nsa(dp85186
S'description'
p85187
S'name of the bottom (y) boundary\n'
p85188
sS'cpp_type'
p85189
S'BoundaryName'
p85190
sS'default'
p85191
S'bottom_boundary'
p85192
sS'name'
p85193
S'bottom_boundary'
p85194
sS'required'
p85195
I00
sS'group_name'
p85196
Nsa(dp85197
S'name'
p85198
S'centroid_partitioner_direction'
p85199
sS'cpp_type'
p85200
S'MooseEnum'
p85201
sS'default'
p85202
g3
sS'description'
p85203
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p85204
sS'required'
p85205
I00
sS'options'
p85206
S'x y z radial'
p85207
sS'group_name'
p85208
S'Partitioning'
p85209
sa(dp85210
S'description'
p85211
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p85212
sS'cpp_type'
p85213
S'bool'
p85214
sS'default'
p85215
S'1'
p85216
sS'name'
p85217
S'construct_node_list_from_side_list'
p85218
sS'required'
p85219
I00
sS'group_name'
p85220
S'Advanced'
p85221
sa(dp85222
S'description'
p85223
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85224
sS'cpp_type'
p85225
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85226
sS'default'
p85227
g3
sS'name'
p85228
S'control_tags'
p85229
sS'required'
p85230
I00
sS'group_name'
p85231
S'Advanced'
p85232
sa(dp85233
S'name'
p85234
S'dim'
p85235
sS'cpp_type'
p85236
S'MooseEnum'
p85237
sS'default'
p85238
S'1'
p85239
sS'description'
p85240
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p85241
sS'required'
p85242
I00
sS'options'
p85243
S'1 2 3'
p85244
sS'group_name'
p85245
S'Advanced'
p85246
sa(dp85247
S'name'
p85248
S'distribution'
p85249
sS'cpp_type'
p85250
S'MooseEnum'
p85251
sS'default'
p85252
S'DEFAULT'
p85253
sS'description'
p85254
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p85255
sS'required'
p85256
I00
sS'options'
p85257
S'PARALLEL SERIAL DEFAULT'
p85258
sS'group_name'
p85259
Nsa(dp85260
S'description'
p85261
S'Set the enabled status of the MooseObject.\n'
p85262
sS'cpp_type'
p85263
S'bool'
p85264
sS'default'
p85265
S'1'
p85266
sS'name'
p85267
S'enable'
p85268
sS'required'
p85269
I00
sS'group_name'
p85270
S'Advanced'
p85271
sa(dp85272
S'description'
p85273
S'The name of the mesh file to read\n'
p85274
sS'cpp_type'
p85275
S'MeshFileName'
p85276
sS'default'
p85277
g3
sS'name'
p85278
S'file'
p85279
sS'required'
p85280
I01
sS'group_name'
p85281
Nsa(dp85282
S'description'
p85283
S'name of the front (z) boundary\n'
p85284
sS'cpp_type'
p85285
S'BoundaryName'
p85286
sS'default'
p85287
S'front_boundary'
p85288
sS'name'
p85289
S'front_boundary'
p85290
sS'required'
p85291
I00
sS'group_name'
p85292
Nsa(dp85293
S'description'
p85294
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85295
sS'cpp_type'
p85296
S'bool'
p85297
sS'default'
p85298
S'0'
p85299
sS'name'
p85300
S'ghost_point_neighbors'
p85301
sS'required'
p85302
I00
sS'group_name'
p85303
S'Advanced'
p85304
sa(dp85305
S'description'
p85306
S'name of the left (x) boundary\n'
p85307
sS'cpp_type'
p85308
S'BoundaryName'
p85309
sS'default'
p85310
S'left_boundary'
p85311
sS'name'
p85312
S'left_boundary'
p85313
sS'required'
p85314
I00
sS'group_name'
p85315
Nsa(dp85316
S'description'
p85317
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p85318
sS'cpp_type'
p85319
S'bool'
p85320
sS'default'
p85321
S'0'
p85322
sS'name'
p85323
S'nemesis'
p85324
sS'required'
p85325
I00
sS'group_name'
p85326
S'Advanced'
p85327
sa(dp85328
S'description'
p85329
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85330
sS'cpp_type'
p85331
S'unsigned short'
p85332
sS'default'
p85333
S'1'
p85334
sS'name'
p85335
S'num_ghosted_layers'
p85336
sS'required'
p85337
I00
sS'group_name'
p85338
S'Advanced'
p85339
sa(dp85340
S'name'
p85341
S'parallel_type'
p85342
sS'cpp_type'
p85343
S'MooseEnum'
p85344
sS'default'
p85345
S'DEFAULT'
p85346
sS'description'
p85347
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p85348
sS'required'
p85349
I00
sS'options'
p85350
S'DISTRIBUTED REPLICATED DEFAULT'
p85351
sS'group_name'
p85352
Nsa(dp85353
S'name'
p85354
S'partitioner'
p85355
sS'cpp_type'
p85356
S'MooseEnum'
p85357
sS'default'
p85358
S'default'
p85359
sS'description'
p85360
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85361
sS'required'
p85362
I00
sS'options'
p85363
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p85364
sS'group_name'
p85365
S'Partitioning'
p85366
sa(dp85367
S'name'
p85368
S'patch_update_strategy'
p85369
sS'cpp_type'
p85370
S'MooseEnum'
p85371
sS'default'
p85372
S'never'
p85373
sS'description'
p85374
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p85375
sS'required'
p85376
I00
sS'options'
p85377
S'never always auto'
p85378
sS'group_name'
p85379
S'Advanced'
p85380
sa(dp85381
S'description'
p85382
S'name of the right (x) boundary\n'
p85383
sS'cpp_type'
p85384
S'BoundaryName'
p85385
sS'default'
p85386
S'right_boundary'
p85387
sS'name'
p85388
S'right_boundary'
p85389
sS'required'
p85390
I00
sS'group_name'
p85391
Nsa(dp85392
S'description'
p85393
S'name of the top (y) boundary\n'
p85394
sS'cpp_type'
p85395
S'BoundaryName'
p85396
sS'default'
p85397
S'top_boundary'
p85398
sS'name'
p85399
S'top_boundary'
p85400
sS'required'
p85401
I00
sS'group_name'
p85402
Nsa(dp85403
S'description'
p85404
g3
sS'cpp_type'
p85405
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85406
sS'default'
p85407
S'TiledMesh'
p85408
sS'name'
p85409
S'type'
p85410
sS'required'
p85411
I00
sS'group_name'
p85412
Nsa(dp85413
S'description'
p85414
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p85415
sS'cpp_type'
p85416
S'unsigned int'
p85417
sS'default'
p85418
S'1'
p85419
sS'name'
p85420
S'x_tiles'
p85421
sS'required'
p85422
I00
sS'group_name'
p85423
Nsa(dp85424
S'description'
p85425
S'The tile width in the x direction\n'
p85426
sS'cpp_type'
p85427
S'double'
p85428
sS'default'
p85429
S'0'
p85430
sS'name'
p85431
S'x_width'
p85432
sS'required'
p85433
I00
sS'group_name'
p85434
Nsa(dp85435
S'description'
p85436
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p85437
sS'cpp_type'
p85438
S'unsigned int'
p85439
sS'default'
p85440
S'1'
p85441
sS'name'
p85442
S'y_tiles'
p85443
sS'required'
p85444
I00
sS'group_name'
p85445
Nsa(dp85446
S'description'
p85447
S'The tile width in the y direction\n'
p85448
sS'cpp_type'
p85449
S'double'
p85450
sS'default'
p85451
S'0'
p85452
sS'name'
p85453
S'y_width'
p85454
sS'required'
p85455
I00
sS'group_name'
p85456
Nsa(dp85457
S'description'
p85458
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p85459
sS'cpp_type'
p85460
S'unsigned int'
p85461
sS'default'
p85462
S'1'
p85463
sS'name'
p85464
S'z_tiles'
p85465
sS'required'
p85466
I00
sS'group_name'
p85467
Nsa(dp85468
S'description'
p85469
S'The tile width in the z direction\n'
p85470
sS'cpp_type'
p85471
S'double'
p85472
sS'default'
p85473
S'0'
p85474
sS'name'
p85475
S'z_width'
p85476
sS'required'
p85477
I00
sS'group_name'
p85478
NsasS'name'
p85479
S'/Mesh/<type>/TiledMesh'
p85480
sasS'parameters'
p85481
NsS'name'
p85482
S'/Mesh/<type>'
p85483
sa(dp85484
S'description'
p85485
g3
sS'subblocks'
p85486
(lp85487
(dp85488
S'description'
p85489
g3
sS'subblocks'
p85490
NsS'parameters'
p85491
(lp85492
(dp85493
S'description'
p85494
S'Master side ID\n'
p85495
sS'cpp_type'
p85496
S'BoundaryName'
p85497
sS'default'
p85498
g3
sS'name'
p85499
S'master'
p85500
sS'required'
p85501
I01
sS'group_name'
p85502
Nsa(dp85503
S'description'
p85504
S'Slave side ID\n'
p85505
sS'cpp_type'
p85506
S'BoundaryName'
p85507
sS'default'
p85508
g3
sS'name'
p85509
S'slave'
p85510
sS'required'
p85511
I01
sS'group_name'
p85512
Nsa(dp85513
S'description'
p85514
S'Subdomain name that is the mortar interface\n'
p85515
sS'cpp_type'
p85516
S'SubdomainName'
p85517
sS'default'
p85518
g3
sS'name'
p85519
S'subdomain'
p85520
sS'required'
p85521
I01
sS'group_name'
p85522
NsasS'name'
p85523
S'/Mesh/MortarInterfaces/*'
p85524
sasS'parameters'
p85525
NsS'name'
p85526
S'/Mesh/MortarInterfaces'
p85527
sa(dp85528
S'description'
p85529
g3
sS'subblocks'
p85530
(lp85531
(dp85532
S'description'
p85533
g3
sS'subblocks'
p85534
(lp85535
(dp85536
S'description'
p85537
g3
sS'subblocks'
p85538
NsS'parameters'
p85539
(lp85540
(dp85541
S'description'
p85542
S'Block is seperated by ;, and partition mesh block by block. \n'
p85543
sS'cpp_type'
p85544
S'std::vector<std::vector<SubdomainName, std::allocator<SubdomainName> >, std::allocator<std::vector<SubdomainName, std::allocator<SubdomainName> > > >'
p85545
sS'default'
p85546
g3
sS'name'
p85547
S'blocks'
p85548
sS'required'
p85549
I00
sS'group_name'
p85550
Nsa(dp85551
S'name'
p85552
S'centroid_partitioner_direction'
p85553
sS'cpp_type'
p85554
S'MooseEnum'
p85555
sS'default'
p85556
g3
sS'description'
p85557
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p85558
sS'required'
p85559
I00
sS'options'
p85560
S'x y z radial'
p85561
sS'group_name'
p85562
Nsa(dp85563
S'description'
p85564
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85565
sS'cpp_type'
p85566
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85567
sS'default'
p85568
g3
sS'name'
p85569
S'control_tags'
p85570
sS'required'
p85571
I00
sS'group_name'
p85572
S'Advanced'
p85573
sa(dp85574
S'description'
p85575
S'Set the enabled status of the MooseObject.\n'
p85576
sS'cpp_type'
p85577
S'bool'
p85578
sS'default'
p85579
S'1'
p85580
sS'name'
p85581
S'enable'
p85582
sS'required'
p85583
I00
sS'group_name'
p85584
S'Advanced'
p85585
sa(dp85586
S'name'
p85587
S'partitioner'
p85588
sS'cpp_type'
p85589
S'MooseEnum'
p85590
sS'default'
p85591
g3
sS'description'
p85592
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85593
sS'required'
p85594
I01
sS'options'
p85595
S'metis parmetis linear centroid hilbert_sfc morton_sfc subdomain_partitioner'
p85596
sS'group_name'
p85597
Nsa(dp85598
S'description'
p85599
g3
sS'cpp_type'
p85600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85601
sS'default'
p85602
S'LibmeshPartitioner'
p85603
sS'name'
p85604
S'type'
p85605
sS'required'
p85606
I00
sS'group_name'
p85607
NsasS'name'
p85608
S'/Mesh/Partitioner/<type>/LibmeshPartitioner'
p85609
sasS'parameters'
p85610
NsS'name'
p85611
S'/Mesh/Partitioner/<type>'
p85612
sasS'parameters'
p85613
(lp85614
(dp85615
S'description'
p85616
S'A string representing the Moose Object that will be built by this Action\n'
p85617
sS'cpp_type'
p85618
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85619
sS'default'
p85620
g3
sS'name'
p85621
S'type'
p85622
sS'required'
p85623
I01
sS'group_name'
p85624
NsasS'name'
p85625
S'/Mesh/Partitioner'
p85626
sasS'parameters'
p85627
(lp85628
(dp85629
S'description'
p85630
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p85631
sS'cpp_type'
p85632
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85633
sS'default'
p85634
g3
sS'name'
p85635
S'displacements'
p85636
sS'required'
p85637
I00
sS'group_name'
p85638
Nsa(dp85639
S'description'
p85640
S'IDs of the block id/name pairs\n'
p85641
sS'cpp_type'
p85642
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p85643
sS'default'
p85644
g3
sS'name'
p85645
S'block_id'
p85646
sS'required'
p85647
I00
sS'group_name'
p85648
S'Add Names'
p85649
sa(dp85650
S'description'
p85651
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p85652
sS'cpp_type'
p85653
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p85654
sS'default'
p85655
g3
sS'name'
p85656
S'block_name'
p85657
sS'required'
p85658
I00
sS'group_name'
p85659
S'Add Names'
p85660
sa(dp85661
S'description'
p85662
S'IDs of the boundary id/name pairs\n'
p85663
sS'cpp_type'
p85664
S'std::vector<short, std::allocator<short> >'
p85665
sS'default'
p85666
g3
sS'name'
p85667
S'boundary_id'
p85668
sS'required'
p85669
I00
sS'group_name'
p85670
S'Add Names'
p85671
sa(dp85672
S'description'
p85673
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p85674
sS'cpp_type'
p85675
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85676
sS'default'
p85677
g3
sS'name'
p85678
S'boundary_name'
p85679
sS'required'
p85680
I00
sS'group_name'
p85681
S'Add Names'
p85682
sa(dp85683
S'description'
p85684
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p85685
sS'cpp_type'
p85686
S'bool'
p85687
sS'default'
p85688
S'0'
p85689
sS'name'
p85690
S'construct_side_list_from_node_list'
p85691
sS'required'
p85692
I00
sS'group_name'
p85693
S'Advanced'
p85694
sa(dp85695
S'description'
p85696
S'Boundaries to be ghosted if using Nemesis\n'
p85697
sS'cpp_type'
p85698
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85699
sS'default'
p85700
g3
sS'name'
p85701
S'ghosted_boundaries'
p85702
sS'required'
p85703
I00
sS'group_name'
p85704
S'Advanced'
p85705
sa(dp85706
S'description'
p85707
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p85708
sS'cpp_type'
p85709
S'std::vector<double, std::allocator<double> >'
p85710
sS'default'
p85711
g3
sS'name'
p85712
S'ghosted_boundaries_inflation'
p85713
sS'required'
p85714
I00
sS'group_name'
p85715
S'Advanced'
p85716
sa(dp85717
S'description'
p85718
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p85719
sS'cpp_type'
p85720
S'unsigned int'
p85721
sS'default'
p85722
S'40'
p85723
sS'name'
p85724
S'patch_size'
p85725
sS'required'
p85726
I00
sS'group_name'
p85727
S'Advanced'
p85728
sa(dp85729
S'description'
p85730
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p85731
sS'cpp_type'
p85732
S'bool'
p85733
sS'default'
p85734
S'0'
p85735
sS'name'
p85736
S'second_order'
p85737
sS'required'
p85738
I00
sS'group_name'
p85739
S'Advanced'
p85740
sa(dp85741
S'description'
p85742
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p85743
sS'cpp_type'
p85744
S'bool'
p85745
sS'default'
p85746
S'0'
p85747
sS'name'
p85748
S'skip_partitioning'
p85749
sS'required'
p85750
I00
sS'group_name'
p85751
S'Advanced'
p85752
sa(dp85753
S'description'
p85754
S'A string representing the Moose Object that will be built by this Action\n'
p85755
sS'cpp_type'
p85756
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85757
sS'default'
p85758
S'FileMesh'
p85759
sS'name'
p85760
S'type'
p85761
sS'required'
p85762
I01
sS'group_name'
p85763
Nsa(dp85764
S'description'
p85765
S'Specify the level of uniform refinement applied to the initial mesh\n'
p85766
sS'cpp_type'
p85767
S'unsigned int'
p85768
sS'default'
p85769
S'0'
p85770
sS'name'
p85771
S'uniform_refine'
p85772
sS'required'
p85773
I00
sS'group_name'
p85774
NsasS'name'
p85775
S'/Mesh'
p85776
sa(dp85777
S'description'
p85778
g3
sS'subblocks'
p85779
(lp85780
(dp85781
S'description'
p85782
g3
sS'subblocks'
p85783
NsS'parameters'
p85784
(lp85785
(dp85786
S'description'
p85787
S'A string representing the Moose Object that will be built by this Action\n'
p85788
sS'cpp_type'
p85789
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85790
sS'default'
p85791
g3
sS'name'
p85792
S'type'
p85793
sS'required'
p85794
I01
sS'group_name'
p85795
NsasS'name'
p85796
S'/MeshModifiers/*'
p85797
sa(dp85798
S'description'
p85799
g3
sS'subblocks'
p85800
NsS'parameters'
p85801
(lp85802
(dp85803
S'description'
p85804
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85805
sS'cpp_type'
p85806
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85807
sS'default'
p85808
g3
sS'name'
p85809
S'control_tags'
p85810
sS'required'
p85811
I00
sS'group_name'
p85812
S'Advanced'
p85813
sa(dp85814
S'description'
p85815
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p85816
sS'cpp_type'
p85817
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85818
sS'default'
p85819
g3
sS'name'
p85820
S'depends_on'
p85821
sS'required'
p85822
I00
sS'group_name'
p85823
Nsa(dp85824
S'description'
p85825
S'Set the enabled status of the MooseObject.\n'
p85826
sS'cpp_type'
p85827
S'bool'
p85828
sS'default'
p85829
S'1'
p85830
sS'name'
p85831
S'enable'
p85832
sS'required'
p85833
I00
sS'group_name'
p85834
S'Advanced'
p85835
sa(dp85836
S'description'
p85837
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p85838
sS'cpp_type'
p85839
S'bool'
p85840
sS'default'
p85841
S'0'
p85842
sS'name'
p85843
S'fixed_normal'
p85844
sS'required'
p85845
I00
sS'group_name'
p85846
Nsa(dp85847
S'description'
p85848
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p85849
sS'cpp_type'
p85850
S'bool'
p85851
sS'default'
p85852
S'0'
p85853
sS'name'
p85854
S'force_prepare'
p85855
sS'required'
p85856
I00
sS'group_name'
p85857
Nsa(dp85858
S'description'
p85859
g3
sS'cpp_type'
p85860
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85861
sS'default'
p85862
S'AddAllSideSetsByNormals'
p85863
sS'name'
p85864
S'type'
p85865
sS'required'
p85866
I00
sS'group_name'
p85867
Nsa(dp85868
S'description'
p85869
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p85870
sS'cpp_type'
p85871
S'double'
p85872
sS'default'
p85873
S'0.1'
p85874
sS'name'
p85875
S'variance'
p85876
sS'required'
p85877
I00
sS'group_name'
p85878
NsasS'name'
p85879
S'/MeshModifiers/AddAllSideSetsByNormals'
p85880
sa(dp85881
S'description'
p85882
g3
sS'subblocks'
p85883
NsS'parameters'
p85884
(lp85885
(dp85886
S'description'
p85887
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85888
sS'cpp_type'
p85889
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85890
sS'default'
p85891
g3
sS'name'
p85892
S'control_tags'
p85893
sS'required'
p85894
I00
sS'group_name'
p85895
S'Advanced'
p85896
sa(dp85897
S'description'
p85898
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p85899
sS'cpp_type'
p85900
S'std::vector<double, std::allocator<double> >'
p85901
sS'default'
p85902
g3
sS'name'
p85903
S'coord'
p85904
sS'required'
p85905
I00
sS'group_name'
p85906
Nsa(dp85907
S'description'
p85908
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p85909
sS'cpp_type'
p85910
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85911
sS'default'
p85912
g3
sS'name'
p85913
S'depends_on'
p85914
sS'required'
p85915
I00
sS'group_name'
p85916
Nsa(dp85917
S'description'
p85918
S'Set the enabled status of the MooseObject.\n'
p85919
sS'cpp_type'
p85920
S'bool'
p85921
sS'default'
p85922
S'1'
p85923
sS'name'
p85924
S'enable'
p85925
sS'required'
p85926
I00
sS'group_name'
p85927
S'Advanced'
p85928
sa(dp85929
S'description'
p85930
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p85931
sS'cpp_type'
p85932
S'bool'
p85933
sS'default'
p85934
S'0'
p85935
sS'name'
p85936
S'force_prepare'
p85937
sS'required'
p85938
I00
sS'group_name'
p85939
Nsa(dp85940
S'description'
p85941
S'The name of the boundary to create\n'
p85942
sS'cpp_type'
p85943
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85944
sS'default'
p85945
g3
sS'name'
p85946
S'new_boundary'
p85947
sS'required'
p85948
I01
sS'group_name'
p85949
Nsa(dp85950
S'description'
p85951
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p85952
sS'cpp_type'
p85953
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p85954
sS'default'
p85955
g3
sS'name'
p85956
S'nodes'
p85957
sS'required'
p85958
I00
sS'group_name'
p85959
Nsa(dp85960
S'description'
p85961
S'The tolerance in which two nodes are considered identical\n'
p85962
sS'cpp_type'
p85963
S'double'
p85964
sS'default'
p85965
S'1e-06'
p85966
sS'name'
p85967
S'tolerance'
p85968
sS'required'
p85969
I00
sS'group_name'
p85970
Nsa(dp85971
S'description'
p85972
g3
sS'cpp_type'
p85973
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85974
sS'default'
p85975
S'AddExtraNodeset'
p85976
sS'name'
p85977
S'type'
p85978
sS'required'
p85979
I00
sS'group_name'
p85980
NsasS'name'
p85981
S'/MeshModifiers/AddExtraNodeset'
p85982
sa(dp85983
S'description'
p85984
g3
sS'subblocks'
p85985
NsS'parameters'
p85986
(lp85987
(dp85988
S'description'
p85989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85990
sS'cpp_type'
p85991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85992
sS'default'
p85993
g3
sS'name'
p85994
S'control_tags'
p85995
sS'required'
p85996
I00
sS'group_name'
p85997
S'Advanced'
p85998
sa(dp85999
S'description'
p86000
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86001
sS'cpp_type'
p86002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86003
sS'default'
p86004
g3
sS'name'
p86005
S'depends_on'
p86006
sS'required'
p86007
I00
sS'group_name'
p86008
Nsa(dp86009
S'description'
p86010
S'New subdomain IDs of all elements\n'
p86011
sS'cpp_type'
p86012
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p86013
sS'default'
p86014
g3
sS'name'
p86015
S'element_ids'
p86016
sS'required'
p86017
I00
sS'group_name'
p86018
Nsa(dp86019
S'description'
p86020
S'Set the enabled status of the MooseObject.\n'
p86021
sS'cpp_type'
p86022
S'bool'
p86023
sS'default'
p86024
S'1'
p86025
sS'name'
p86026
S'enable'
p86027
sS'required'
p86028
I00
sS'group_name'
p86029
S'Advanced'
p86030
sa(dp86031
S'description'
p86032
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86033
sS'cpp_type'
p86034
S'bool'
p86035
sS'default'
p86036
S'0'
p86037
sS'name'
p86038
S'force_prepare'
p86039
sS'required'
p86040
I00
sS'group_name'
p86041
Nsa(dp86042
S'description'
p86043
S'New subdomain IDs of all elements\n'
p86044
sS'cpp_type'
p86045
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p86046
sS'default'
p86047
g3
sS'name'
p86048
S'subdomain_ids'
p86049
sS'required'
p86050
I01
sS'group_name'
p86051
Nsa(dp86052
S'description'
p86053
g3
sS'cpp_type'
p86054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86055
sS'default'
p86056
S'AssignElementSubdomainID'
p86057
sS'name'
p86058
S'type'
p86059
sS'required'
p86060
I00
sS'group_name'
p86061
NsasS'name'
p86062
S'/MeshModifiers/AssignElementSubdomainID'
p86063
sa(dp86064
S'description'
p86065
g3
sS'subblocks'
p86066
NsS'parameters'
p86067
(lp86068
(dp86069
S'description'
p86070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86071
sS'cpp_type'
p86072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86073
sS'default'
p86074
g3
sS'name'
p86075
S'control_tags'
p86076
sS'required'
p86077
I00
sS'group_name'
p86078
S'Advanced'
p86079
sa(dp86080
S'description'
p86081
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86082
sS'cpp_type'
p86083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86084
sS'default'
p86085
g3
sS'name'
p86086
S'depends_on'
p86087
sS'required'
p86088
I00
sS'group_name'
p86089
Nsa(dp86090
S'description'
p86091
S'Set the enabled status of the MooseObject.\n'
p86092
sS'cpp_type'
p86093
S'bool'
p86094
sS'default'
p86095
S'1'
p86096
sS'name'
p86097
S'enable'
p86098
sS'required'
p86099
I00
sS'group_name'
p86100
S'Advanced'
p86101
sa(dp86102
S'description'
p86103
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86104
sS'cpp_type'
p86105
S'bool'
p86106
sS'default'
p86107
S'0'
p86108
sS'name'
p86109
S'force_prepare'
p86110
sS'required'
p86111
I00
sS'group_name'
p86112
Nsa(dp86113
S'description'
p86114
S'New subdomain IDs of all elements\n'
p86115
sS'cpp_type'
p86116
S'unsigned short'
p86117
sS'default'
p86118
g3
sS'name'
p86119
S'subdomain_id'
p86120
sS'required'
p86121
I01
sS'group_name'
p86122
Nsa(dp86123
S'description'
p86124
g3
sS'cpp_type'
p86125
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86126
sS'default'
p86127
S'AssignSubdomainID'
p86128
sS'name'
p86129
S'type'
p86130
sS'required'
p86131
I00
sS'group_name'
p86132
NsasS'name'
p86133
S'/MeshModifiers/AssignSubdomainID'
p86134
sa(dp86135
S'description'
p86136
g3
sS'subblocks'
p86137
NsS'parameters'
p86138
(lp86139
(dp86140
S'description'
p86141
S'The block to be deleted\n'
p86142
sS'cpp_type'
p86143
S'unsigned short'
p86144
sS'default'
p86145
g3
sS'name'
p86146
S'block_id'
p86147
sS'required'
p86148
I01
sS'group_name'
p86149
Nsa(dp86150
S'description'
p86151
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86152
sS'cpp_type'
p86153
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86154
sS'default'
p86155
g3
sS'name'
p86156
S'control_tags'
p86157
sS'required'
p86158
I00
sS'group_name'
p86159
S'Advanced'
p86160
sa(dp86161
S'description'
p86162
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86163
sS'cpp_type'
p86164
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86165
sS'default'
p86166
g3
sS'name'
p86167
S'depends_on'
p86168
sS'required'
p86169
I00
sS'group_name'
p86170
Nsa(dp86171
S'description'
p86172
S'Set the enabled status of the MooseObject.\n'
p86173
sS'cpp_type'
p86174
S'bool'
p86175
sS'default'
p86176
S'1'
p86177
sS'name'
p86178
S'enable'
p86179
sS'required'
p86180
I00
sS'group_name'
p86181
S'Advanced'
p86182
sa(dp86183
S'description'
p86184
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86185
sS'cpp_type'
p86186
S'bool'
p86187
sS'default'
p86188
S'0'
p86189
sS'name'
p86190
S'force_prepare'
p86191
sS'required'
p86192
I00
sS'group_name'
p86193
Nsa(dp86194
S'description'
p86195
g3
sS'cpp_type'
p86196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86197
sS'default'
p86198
S'BlockDeleter'
p86199
sS'name'
p86200
S'type'
p86201
sS'required'
p86202
I00
sS'group_name'
p86203
NsasS'name'
p86204
S'/MeshModifiers/BlockDeleter'
p86205
sa(dp86206
S'description'
p86207
g3
sS'subblocks'
p86208
NsS'parameters'
p86209
(lp86210
(dp86211
S'description'
p86212
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p86213
sS'cpp_type'
p86214
S'libMesh::VectorValue<double>'
p86215
sS'default'
p86216
g3
sS'name'
p86217
S'bottom_left'
p86218
sS'required'
p86219
I01
sS'group_name'
p86220
Nsa(dp86221
S'description'
p86222
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86223
sS'cpp_type'
p86224
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86225
sS'default'
p86226
g3
sS'name'
p86227
S'control_tags'
p86228
sS'required'
p86229
I00
sS'group_name'
p86230
S'Advanced'
p86231
sa(dp86232
S'description'
p86233
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86234
sS'cpp_type'
p86235
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86236
sS'default'
p86237
g3
sS'name'
p86238
S'depends_on'
p86239
sS'required'
p86240
I00
sS'group_name'
p86241
Nsa(dp86242
S'description'
p86243
S'Set the enabled status of the MooseObject.\n'
p86244
sS'cpp_type'
p86245
S'bool'
p86246
sS'default'
p86247
S'1'
p86248
sS'name'
p86249
S'enable'
p86250
sS'required'
p86251
I00
sS'group_name'
p86252
S'Advanced'
p86253
sa(dp86254
S'description'
p86255
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86256
sS'cpp_type'
p86257
S'bool'
p86258
sS'default'
p86259
S'0'
p86260
sS'name'
p86261
S'force_prepare'
p86262
sS'required'
p86263
I00
sS'group_name'
p86264
Nsa(dp86265
S'name'
p86266
S'location'
p86267
sS'cpp_type'
p86268
S'MooseEnum'
p86269
sS'default'
p86270
S'INSIDE'
p86271
sS'description'
p86272
S'Control of where the nodeset is to be set\n'
p86273
sS'required'
p86274
I00
sS'options'
p86275
S'INSIDE OUTSIDE'
p86276
sS'group_name'
p86277
Nsa(dp86278
S'description'
p86279
S'The name of the nodeset to create\n'
p86280
sS'cpp_type'
p86281
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86282
sS'default'
p86283
g3
sS'name'
p86284
S'new_boundary'
p86285
sS'required'
p86286
I01
sS'group_name'
p86287
Nsa(dp86288
S'description'
p86289
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p86290
sS'cpp_type'
p86291
S'libMesh::VectorValue<double>'
p86292
sS'default'
p86293
g3
sS'name'
p86294
S'top_right'
p86295
sS'required'
p86296
I01
sS'group_name'
p86297
Nsa(dp86298
S'description'
p86299
g3
sS'cpp_type'
p86300
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86301
sS'default'
p86302
S'BoundingBoxNodeSet'
p86303
sS'name'
p86304
S'type'
p86305
sS'required'
p86306
I00
sS'group_name'
p86307
NsasS'name'
p86308
S'/MeshModifiers/BoundingBoxNodeSet'
p86309
sa(dp86310
S'description'
p86311
S'Break boundaries based on the subdomains to which their sides are attached. Naming convention for the new boundaries will be the old boundary name plus "_to_" plus the subdomain name\n'
p86312
sS'subblocks'
p86313
NsS'parameters'
p86314
(lp86315
(dp86316
S'description'
p86317
S'Boundaries to be broken. Default means to break all boundaries\n'
p86318
sS'cpp_type'
p86319
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86320
sS'default'
p86321
g3
sS'name'
p86322
S'boundaries'
p86323
sS'required'
p86324
I00
sS'group_name'
p86325
Nsa(dp86326
S'description'
p86327
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86328
sS'cpp_type'
p86329
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86330
sS'default'
p86331
g3
sS'name'
p86332
S'control_tags'
p86333
sS'required'
p86334
I00
sS'group_name'
p86335
S'Advanced'
p86336
sa(dp86337
S'description'
p86338
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86339
sS'cpp_type'
p86340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86341
sS'default'
p86342
g3
sS'name'
p86343
S'depends_on'
p86344
sS'required'
p86345
I00
sS'group_name'
p86346
Nsa(dp86347
S'description'
p86348
S'Set the enabled status of the MooseObject.\n'
p86349
sS'cpp_type'
p86350
S'bool'
p86351
sS'default'
p86352
S'1'
p86353
sS'name'
p86354
S'enable'
p86355
sS'required'
p86356
I00
sS'group_name'
p86357
S'Advanced'
p86358
sa(dp86359
S'description'
p86360
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86361
sS'cpp_type'
p86362
S'bool'
p86363
sS'default'
p86364
S'0'
p86365
sS'name'
p86366
S'force_prepare'
p86367
sS'required'
p86368
I00
sS'group_name'
p86369
Nsa(dp86370
S'description'
p86371
g3
sS'cpp_type'
p86372
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86373
sS'default'
p86374
S'BreakBoundaryOnSubdomain'
p86375
sS'name'
p86376
S'type'
p86377
sS'required'
p86378
I00
sS'group_name'
p86379
NsasS'name'
p86380
S'/MeshModifiers/BreakBoundaryOnSubdomain'
p86381
sa(dp86382
S'description'
p86383
g3
sS'subblocks'
p86384
NsS'parameters'
p86385
(lp86386
(dp86387
S'description'
p86388
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p86389
sS'cpp_type'
p86390
S'unsigned int'
p86391
sS'default'
p86392
g3
sS'name'
p86393
S'component'
p86394
sS'required'
p86395
I00
sS'group_name'
p86396
Nsa(dp86397
S'description'
p86398
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86399
sS'cpp_type'
p86400
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86401
sS'default'
p86402
g3
sS'name'
p86403
S'control_tags'
p86404
sS'required'
p86405
I00
sS'group_name'
p86406
S'Advanced'
p86407
sa(dp86408
S'description'
p86409
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86410
sS'cpp_type'
p86411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86412
sS'default'
p86413
g3
sS'name'
p86414
S'depends_on'
p86415
sS'required'
p86416
I00
sS'group_name'
p86417
Nsa(dp86418
S'description'
p86419
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p86420
sS'cpp_type'
p86421
S'libMesh::Point'
p86422
sS'default'
p86423
g3
sS'name'
p86424
S'dimensions'
p86425
sS'required'
p86426
I00
sS'group_name'
p86427
Nsa(dp86428
S'description'
p86429
S'Set the enabled status of the MooseObject.\n'
p86430
sS'cpp_type'
p86431
S'bool'
p86432
sS'default'
p86433
S'1'
p86434
sS'name'
p86435
S'enable'
p86436
sS'required'
p86437
I00
sS'group_name'
p86438
S'Advanced'
p86439
sa(dp86440
S'description'
p86441
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p86442
sS'cpp_type'
p86443
S'FileName'
p86444
sS'default'
p86445
g3
sS'name'
p86446
S'file'
p86447
sS'required'
p86448
I00
sS'group_name'
p86449
Nsa(dp86450
S'description'
p86451
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p86452
sS'cpp_type'
p86453
S'FileNameNoExtension'
p86454
sS'default'
p86455
g3
sS'name'
p86456
S'file_base'
p86457
sS'required'
p86458
I00
sS'group_name'
p86459
Nsa(dp86460
S'description'
p86461
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p86462
sS'cpp_type'
p86463
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p86464
sS'default'
p86465
g3
sS'name'
p86466
S'file_range'
p86467
sS'required'
p86468
I00
sS'group_name'
p86469
Nsa(dp86470
S'description'
p86471
S"Suffix of the file to open, e.g. 'png'\n"
p86472
sS'cpp_type'
p86473
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86474
sS'default'
p86475
g3
sS'name'
p86476
S'file_suffix'
p86477
sS'required'
p86478
I00
sS'group_name'
p86479
Nsa(dp86480
S'description'
p86481
S'Flip the image along the x-axis\n'
p86482
sS'cpp_type'
p86483
S'bool'
p86484
sS'default'
p86485
S'0'
p86486
sS'name'
p86487
S'flip_x'
p86488
sS'required'
p86489
I00
sS'group_name'
p86490
S'Flip'
p86491
sa(dp86492
S'description'
p86493
S'Flip the image along the y-axis\n'
p86494
sS'cpp_type'
p86495
S'bool'
p86496
sS'default'
p86497
S'0'
p86498
sS'name'
p86499
S'flip_y'
p86500
sS'required'
p86501
I00
sS'group_name'
p86502
S'Flip'
p86503
sa(dp86504
S'description'
p86505
S'Flip the image along the z-axis\n'
p86506
sS'cpp_type'
p86507
S'bool'
p86508
sS'default'
p86509
S'0'
p86510
sS'name'
p86511
S'flip_z'
p86512
sS'required'
p86513
I00
sS'group_name'
p86514
S'Flip'
p86515
sa(dp86516
S'description'
p86517
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86518
sS'cpp_type'
p86519
S'bool'
p86520
sS'default'
p86521
S'0'
p86522
sS'name'
p86523
S'force_prepare'
p86524
sS'required'
p86525
I00
sS'group_name'
p86526
Nsa(dp86527
S'description'
p86528
S'The value to set for data less than the threshold value\n'
p86529
sS'cpp_type'
p86530
S'double'
p86531
sS'default'
p86532
S'0'
p86533
sS'name'
p86534
S'lower_value'
p86535
sS'required'
p86536
I00
sS'group_name'
p86537
S'Threshold'
p86538
sa(dp86539
S'description'
p86540
S'Origin of the image (defaults to mesh origin)\n'
p86541
sS'cpp_type'
p86542
S'libMesh::Point'
p86543
sS'default'
p86544
g3
sS'name'
p86545
S'origin'
p86546
sS'required'
p86547
I00
sS'group_name'
p86548
Nsa(dp86549
S'description'
p86550
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p86551
sS'cpp_type'
p86552
S'double'
p86553
sS'default'
p86554
S'1'
p86555
sS'name'
p86556
S'scale'
p86557
sS'required'
p86558
I00
sS'group_name'
p86559
S'Rescale'
p86560
sa(dp86561
S'description'
p86562
S'Value to add to all pixels; occurs prior to scaling\n'
p86563
sS'cpp_type'
p86564
S'double'
p86565
sS'default'
p86566
S'0'
p86567
sS'name'
p86568
S'shift'
p86569
sS'required'
p86570
I00
sS'group_name'
p86571
S'Rescale'
p86572
sa(dp86573
S'description'
p86574
S'The threshold value\n'
p86575
sS'cpp_type'
p86576
S'double'
p86577
sS'default'
p86578
g3
sS'name'
p86579
S'threshold'
p86580
sS'required'
p86581
I00
sS'group_name'
p86582
S'Threshold'
p86583
sa(dp86584
S'description'
p86585
g3
sS'cpp_type'
p86586
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86587
sS'default'
p86588
S'ImageSubdomain'
p86589
sS'name'
p86590
S'type'
p86591
sS'required'
p86592
I00
sS'group_name'
p86593
Nsa(dp86594
S'description'
p86595
S'The value to set for data greater than the threshold value\n'
p86596
sS'cpp_type'
p86597
S'double'
p86598
sS'default'
p86599
S'1'
p86600
sS'name'
p86601
S'upper_value'
p86602
sS'required'
p86603
I00
sS'group_name'
p86604
S'Threshold'
p86605
sasS'name'
p86606
S'/MeshModifiers/ImageSubdomain'
p86607
sa(dp86608
S'description'
p86609
g3
sS'subblocks'
p86610
NsS'parameters'
p86611
(lp86612
(dp86613
S'description'
p86614
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p86615
sS'cpp_type'
p86616
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86617
sS'default'
p86618
g3
sS'name'
p86619
S'bottom_sideset'
p86620
sS'required'
p86621
I00
sS'group_name'
p86622
Nsa(dp86623
S'description'
p86624
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86625
sS'cpp_type'
p86626
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86627
sS'default'
p86628
g3
sS'name'
p86629
S'control_tags'
p86630
sS'required'
p86631
I00
sS'group_name'
p86632
S'Advanced'
p86633
sa(dp86634
S'description'
p86635
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86636
sS'cpp_type'
p86637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86638
sS'default'
p86639
g3
sS'name'
p86640
S'depends_on'
p86641
sS'required'
p86642
I00
sS'group_name'
p86643
Nsa(dp86644
S'description'
p86645
S'Set the enabled status of the MooseObject.\n'
p86646
sS'cpp_type'
p86647
S'bool'
p86648
sS'default'
p86649
S'1'
p86650
sS'name'
p86651
S'enable'
p86652
sS'required'
p86653
I00
sS'group_name'
p86654
S'Advanced'
p86655
sa(dp86656
S'description'
p86657
S'The subdomains that will be remapped for specific layers\n'
p86658
sS'cpp_type'
p86659
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p86660
sS'default'
p86661
g3
sS'name'
p86662
S'existing_subdomains'
p86663
sS'required'
p86664
I00
sS'group_name'
p86665
Nsa(dp86666
S'description'
p86667
S'The direction and length of the extrusion\n'
p86668
sS'cpp_type'
p86669
S'libMesh::VectorValue<double>'
p86670
sS'default'
p86671
g3
sS'name'
p86672
S'extrusion_vector'
p86673
sS'required'
p86674
I01
sS'group_name'
p86675
Nsa(dp86676
S'description'
p86677
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86678
sS'cpp_type'
p86679
S'bool'
p86680
sS'default'
p86681
S'0'
p86682
sS'name'
p86683
S'force_prepare'
p86684
sS'required'
p86685
I00
sS'group_name'
p86686
Nsa(dp86687
S'description'
p86688
S'The layers where the "existing_subdomain" will be remapped to new ids\n'
p86689
sS'cpp_type'
p86690
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p86691
sS'default'
p86692
g3
sS'name'
p86693
S'layers'
p86694
sS'required'
p86695
I00
sS'group_name'
p86696
Nsa(dp86697
S'description'
p86698
S'The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n'
p86699
sS'cpp_type'
p86700
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p86701
sS'default'
p86702
g3
sS'name'
p86703
S'new_ids'
p86704
sS'required'
p86705
I00
sS'group_name'
p86706
Nsa(dp86707
S'description'
p86708
S'The number of layers in the extruded mesh\n'
p86709
sS'cpp_type'
p86710
S'unsigned int'
p86711
sS'default'
p86712
S'1'
p86713
sS'name'
p86714
S'num_layers'
p86715
sS'required'
p86716
I00
sS'group_name'
p86717
Nsa(dp86718
S'description'
p86719
S'The boundary that will be to the top of the extruded mesh\n'
p86720
sS'cpp_type'
p86721
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86722
sS'default'
p86723
g3
sS'name'
p86724
S'top_sideset'
p86725
sS'required'
p86726
I00
sS'group_name'
p86727
Nsa(dp86728
S'description'
p86729
g3
sS'cpp_type'
p86730
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86731
sS'default'
p86732
S'MeshExtruder'
p86733
sS'name'
p86734
S'type'
p86735
sS'required'
p86736
I00
sS'group_name'
p86737
NsasS'name'
p86738
S'/MeshModifiers/MeshExtruder'
p86739
sa(dp86740
S'description'
p86741
g3
sS'subblocks'
p86742
NsS'parameters'
p86743
(lp86744
(dp86745
S'description'
p86746
S'Subdomain id to set for inside/outside the bounding box\n'
p86747
sS'cpp_type'
p86748
S'unsigned short'
p86749
sS'default'
p86750
g3
sS'name'
p86751
S'block_id'
p86752
sS'required'
p86753
I01
sS'group_name'
p86754
Nsa(dp86755
S'description'
p86756
S"The center (many people spell this 'center') of the box.\n"
p86757
sS'cpp_type'
p86758
S'libMesh::Point'
p86759
sS'default'
p86760
g3
sS'name'
p86761
S'center'
p86762
sS'required'
p86763
I01
sS'group_name'
p86764
Nsa(dp86765
S'description'
p86766
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86767
sS'cpp_type'
p86768
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86769
sS'default'
p86770
g3
sS'name'
p86771
S'control_tags'
p86772
sS'required'
p86773
I00
sS'group_name'
p86774
S'Advanced'
p86775
sa(dp86776
S'description'
p86777
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86778
sS'cpp_type'
p86779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86780
sS'default'
p86781
g3
sS'name'
p86782
S'depends_on'
p86783
sS'required'
p86784
I00
sS'group_name'
p86785
Nsa(dp86786
S'description'
p86787
S'Set the enabled status of the MooseObject.\n'
p86788
sS'cpp_type'
p86789
S'bool'
p86790
sS'default'
p86791
S'1'
p86792
sS'name'
p86793
S'enable'
p86794
sS'required'
p86795
I00
sS'group_name'
p86796
S'Advanced'
p86797
sa(dp86798
S'description'
p86799
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86800
sS'cpp_type'
p86801
S'bool'
p86802
sS'default'
p86803
S'0'
p86804
sS'name'
p86805
S'force_prepare'
p86806
sS'required'
p86807
I00
sS'group_name'
p86808
Nsa(dp86809
S'description'
p86810
S'The height of the box\n'
p86811
sS'cpp_type'
p86812
S'double'
p86813
sS'default'
p86814
g3
sS'name'
p86815
S'height'
p86816
sS'required'
p86817
I01
sS'group_name'
p86818
Nsa(dp86819
S'description'
p86820
S'The length of the box\n'
p86821
sS'cpp_type'
p86822
S'double'
p86823
sS'default'
p86824
g3
sS'name'
p86825
S'length'
p86826
sS'required'
p86827
I01
sS'group_name'
p86828
Nsa(dp86829
S'description'
p86830
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p86831
sS'cpp_type'
p86832
S'libMesh::VectorValue<double>'
p86833
sS'default'
p86834
g3
sS'name'
p86835
S'length_direction'
p86836
sS'required'
p86837
I01
sS'group_name'
p86838
Nsa(dp86839
S'name'
p86840
S'location'
p86841
sS'cpp_type'
p86842
S'MooseEnum'
p86843
sS'default'
p86844
S'INSIDE'
p86845
sS'description'
p86846
S'Control of where the subdomain id is to be set\n'
p86847
sS'required'
p86848
I00
sS'options'
p86849
S'INSIDE OUTSIDE'
p86850
sS'group_name'
p86851
Nsa(dp86852
S'description'
p86853
g3
sS'cpp_type'
p86854
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86855
sS'default'
p86856
S'OrientedSubdomainBoundingBox'
p86857
sS'name'
p86858
S'type'
p86859
sS'required'
p86860
I00
sS'group_name'
p86861
Nsa(dp86862
S'description'
p86863
S'The width of the box\n'
p86864
sS'cpp_type'
p86865
S'double'
p86866
sS'default'
p86867
g3
sS'name'
p86868
S'width'
p86869
sS'required'
p86870
I01
sS'group_name'
p86871
Nsa(dp86872
S'description'
p86873
S'The direction along which the width is oriented.\n'
p86874
sS'cpp_type'
p86875
S'libMesh::VectorValue<double>'
p86876
sS'default'
p86877
g3
sS'name'
p86878
S'width_direction'
p86879
sS'required'
p86880
I01
sS'group_name'
p86881
NsasS'name'
p86882
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p86883
sa(dp86884
S'description'
p86885
S"A MeshModifier that adds element's sides to a sideset if the centroid satisfies the combinatorial_geometry expression, (and optionally) if one of the side's elements is in included_subdomain_ids and if it features the correct normal.\n"
p86886
sS'subblocks'
p86887
NsS'parameters'
p86888
(lp86889
(dp86890
S'description'
p86891
S'Function expression encoding a combinatorial geometry\n'
p86892
sS'cpp_type'
p86893
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86894
sS'default'
p86895
g3
sS'name'
p86896
S'combinatorial_geometry'
p86897
sS'required'
p86898
I01
sS'group_name'
p86899
Nsa(dp86900
S'description'
p86901
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p86902
sS'cpp_type'
p86903
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86904
sS'default'
p86905
g3
sS'name'
p86906
S'constant_expressions'
p86907
sS'required'
p86908
I00
sS'group_name'
p86909
Nsa(dp86910
S'description'
p86911
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p86912
sS'cpp_type'
p86913
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86914
sS'default'
p86915
g3
sS'name'
p86916
S'constant_names'
p86917
sS'required'
p86918
I00
sS'group_name'
p86919
Nsa(dp86920
S'description'
p86921
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86922
sS'cpp_type'
p86923
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86924
sS'default'
p86925
g3
sS'name'
p86926
S'control_tags'
p86927
sS'required'
p86928
I00
sS'group_name'
p86929
S'Advanced'
p86930
sa(dp86931
S'description'
p86932
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86933
sS'cpp_type'
p86934
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86935
sS'default'
p86936
g3
sS'name'
p86937
S'depends_on'
p86938
sS'required'
p86939
I00
sS'group_name'
p86940
Nsa(dp86941
S'description'
p86942
S'Disable the function parser algebraic optimizer\n'
p86943
sS'cpp_type'
p86944
S'bool'
p86945
sS'default'
p86946
S'0'
p86947
sS'name'
p86948
S'disable_fpoptimizer'
p86949
sS'required'
p86950
I00
sS'group_name'
p86951
S'Advanced'
p86952
sa(dp86953
S'description'
p86954
S'Set the enabled status of the MooseObject.\n'
p86955
sS'cpp_type'
p86956
S'bool'
p86957
sS'default'
p86958
S'1'
p86959
sS'name'
p86960
S'enable'
p86961
sS'required'
p86962
I00
sS'group_name'
p86963
S'Advanced'
p86964
sa(dp86965
S'description'
p86966
S'Enable cacheing of function derivatives for faster startup time\n'
p86967
sS'cpp_type'
p86968
S'bool'
p86969
sS'default'
p86970
S'1'
p86971
sS'name'
p86972
S'enable_ad_cache'
p86973
sS'required'
p86974
I00
sS'group_name'
p86975
S'Advanced'
p86976
sa(dp86977
S'description'
p86978
S'Enable automatic immediate optimization of derivatives\n'
p86979
sS'cpp_type'
p86980
S'bool'
p86981
sS'default'
p86982
S'1'
p86983
sS'name'
p86984
S'enable_auto_optimize'
p86985
sS'required'
p86986
I00
sS'group_name'
p86987
S'Advanced'
p86988
sa(dp86989
S'description'
p86990
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p86991
sS'cpp_type'
p86992
S'bool'
p86993
sS'default'
p86994
S'1'
p86995
sS'name'
p86996
S'enable_jit'
p86997
sS'required'
p86998
I00
sS'group_name'
p86999
S'Advanced'
p87000
sa(dp87001
S'description'
p87002
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p87003
sS'cpp_type'
p87004
S'bool'
p87005
sS'default'
p87006
S'0'
p87007
sS'name'
p87008
S'fail_on_evalerror'
p87009
sS'required'
p87010
I00
sS'group_name'
p87011
S'Advanced'
p87012
sa(dp87013
S'description'
p87014
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87015
sS'cpp_type'
p87016
S'bool'
p87017
sS'default'
p87018
S'0'
p87019
sS'name'
p87020
S'fixed_normal'
p87021
sS'required'
p87022
I00
sS'group_name'
p87023
Nsa(dp87024
S'description'
p87025
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87026
sS'cpp_type'
p87027
S'bool'
p87028
sS'default'
p87029
S'0'
p87030
sS'name'
p87031
S'force_prepare'
p87032
sS'required'
p87033
I00
sS'group_name'
p87034
Nsa(dp87035
S'description'
p87036
S'A set of subdomain ids whose sides will be included in the new sidesets\n'
p87037
sS'cpp_type'
p87038
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87039
sS'default'
p87040
g3
sS'name'
p87041
S'included_subdomain_ids'
p87042
sS'required'
p87043
I00
sS'group_name'
p87044
Nsa(dp87045
S'description'
p87046
S'The name of the new sideset\n'
p87047
sS'cpp_type'
p87048
S'BoundaryName'
p87049
sS'default'
p87050
g3
sS'name'
p87051
S'new_sideset_name'
p87052
sS'required'
p87053
I01
sS'group_name'
p87054
Nsa(dp87055
S'description'
p87056
S'If provided specifies the normal vector on sides that are added to the new \n'
p87057
sS'cpp_type'
p87058
S'libMesh::Point'
p87059
sS'default'
p87060
S'0 0 0'
p87061
sS'name'
p87062
S'normal'
p87063
sS'required'
p87064
I00
sS'group_name'
p87065
Nsa(dp87066
S'description'
p87067
g3
sS'cpp_type'
p87068
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87069
sS'default'
p87070
S'ParsedAddSideset'
p87071
sS'name'
p87072
S'type'
p87073
sS'required'
p87074
I00
sS'group_name'
p87075
Nsa(dp87076
S'description'
p87077
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p87078
sS'cpp_type'
p87079
S'double'
p87080
sS'default'
p87081
S'0.1'
p87082
sS'name'
p87083
S'variance'
p87084
sS'required'
p87085
I00
sS'group_name'
p87086
NsasS'name'
p87087
S'/MeshModifiers/ParsedAddSideset'
p87088
sa(dp87089
S'description'
p87090
S'MeshModifier that uses a parsed expression (combinatorial_geometry) to determine if an element (aka its centroid) is inside the combinatorial geometry and assigns a new block id.\n'
p87091
sS'subblocks'
p87092
NsS'parameters'
p87093
(lp87094
(dp87095
S'description'
p87096
S'Subdomain id to set for inside of the combinatorial\n'
p87097
sS'cpp_type'
p87098
S'unsigned short'
p87099
sS'default'
p87100
g3
sS'name'
p87101
S'block_id'
p87102
sS'required'
p87103
I01
sS'group_name'
p87104
Nsa(dp87105
S'description'
p87106
S'Subdomain name to set for inside of the combinatorial\n'
p87107
sS'cpp_type'
p87108
S'SubdomainName'
p87109
sS'default'
p87110
g3
sS'name'
p87111
S'block_name'
p87112
sS'required'
p87113
I00
sS'group_name'
p87114
Nsa(dp87115
S'description'
p87116
S'Function expression encoding a combinatorial geometry\n'
p87117
sS'cpp_type'
p87118
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87119
sS'default'
p87120
g3
sS'name'
p87121
S'combinatorial_geometry'
p87122
sS'required'
p87123
I01
sS'group_name'
p87124
Nsa(dp87125
S'description'
p87126
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p87127
sS'cpp_type'
p87128
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87129
sS'default'
p87130
g3
sS'name'
p87131
S'constant_expressions'
p87132
sS'required'
p87133
I00
sS'group_name'
p87134
Nsa(dp87135
S'description'
p87136
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p87137
sS'cpp_type'
p87138
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87139
sS'default'
p87140
g3
sS'name'
p87141
S'constant_names'
p87142
sS'required'
p87143
I00
sS'group_name'
p87144
Nsa(dp87145
S'description'
p87146
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87147
sS'cpp_type'
p87148
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87149
sS'default'
p87150
g3
sS'name'
p87151
S'control_tags'
p87152
sS'required'
p87153
I00
sS'group_name'
p87154
S'Advanced'
p87155
sa(dp87156
S'description'
p87157
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87158
sS'cpp_type'
p87159
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87160
sS'default'
p87161
g3
sS'name'
p87162
S'depends_on'
p87163
sS'required'
p87164
I00
sS'group_name'
p87165
Nsa(dp87166
S'description'
p87167
S'Disable the function parser algebraic optimizer\n'
p87168
sS'cpp_type'
p87169
S'bool'
p87170
sS'default'
p87171
S'0'
p87172
sS'name'
p87173
S'disable_fpoptimizer'
p87174
sS'required'
p87175
I00
sS'group_name'
p87176
S'Advanced'
p87177
sa(dp87178
S'description'
p87179
S'Set the enabled status of the MooseObject.\n'
p87180
sS'cpp_type'
p87181
S'bool'
p87182
sS'default'
p87183
S'1'
p87184
sS'name'
p87185
S'enable'
p87186
sS'required'
p87187
I00
sS'group_name'
p87188
S'Advanced'
p87189
sa(dp87190
S'description'
p87191
S'Enable cacheing of function derivatives for faster startup time\n'
p87192
sS'cpp_type'
p87193
S'bool'
p87194
sS'default'
p87195
S'1'
p87196
sS'name'
p87197
S'enable_ad_cache'
p87198
sS'required'
p87199
I00
sS'group_name'
p87200
S'Advanced'
p87201
sa(dp87202
S'description'
p87203
S'Enable automatic immediate optimization of derivatives\n'
p87204
sS'cpp_type'
p87205
S'bool'
p87206
sS'default'
p87207
S'1'
p87208
sS'name'
p87209
S'enable_auto_optimize'
p87210
sS'required'
p87211
I00
sS'group_name'
p87212
S'Advanced'
p87213
sa(dp87214
S'description'
p87215
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p87216
sS'cpp_type'
p87217
S'bool'
p87218
sS'default'
p87219
S'1'
p87220
sS'name'
p87221
S'enable_jit'
p87222
sS'required'
p87223
I00
sS'group_name'
p87224
S'Advanced'
p87225
sa(dp87226
S'description'
p87227
S'A set of subdomain ids that will not changed even if they are inside/outside the combinatorial geometry\n'
p87228
sS'cpp_type'
p87229
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87230
sS'default'
p87231
g3
sS'name'
p87232
S'excluded_subdomain_ids'
p87233
sS'required'
p87234
I00
sS'group_name'
p87235
Nsa(dp87236
S'description'
p87237
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p87238
sS'cpp_type'
p87239
S'bool'
p87240
sS'default'
p87241
S'0'
p87242
sS'name'
p87243
S'fail_on_evalerror'
p87244
sS'required'
p87245
I00
sS'group_name'
p87246
S'Advanced'
p87247
sa(dp87248
S'description'
p87249
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87250
sS'cpp_type'
p87251
S'bool'
p87252
sS'default'
p87253
S'0'
p87254
sS'name'
p87255
S'force_prepare'
p87256
sS'required'
p87257
I00
sS'group_name'
p87258
Nsa(dp87259
S'description'
p87260
g3
sS'cpp_type'
p87261
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87262
sS'default'
p87263
S'ParsedSubdomainMeshModifier'
p87264
sS'name'
p87265
S'type'
p87266
sS'required'
p87267
I00
sS'group_name'
p87268
NsasS'name'
p87269
S'/MeshModifiers/ParsedSubdomainMeshModifier'
p87270
sa(dp87271
S'description'
p87272
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p87273
sS'subblocks'
p87274
NsS'parameters'
p87275
(lp87276
(dp87277
S'description'
p87278
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87279
sS'cpp_type'
p87280
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87281
sS'default'
p87282
g3
sS'name'
p87283
S'control_tags'
p87284
sS'required'
p87285
I00
sS'group_name'
p87286
S'Advanced'
p87287
sa(dp87288
S'description'
p87289
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87290
sS'cpp_type'
p87291
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87292
sS'default'
p87293
g3
sS'name'
p87294
S'depends_on'
p87295
sS'required'
p87296
I00
sS'group_name'
p87297
Nsa(dp87298
S'description'
p87299
S'Set the enabled status of the MooseObject.\n'
p87300
sS'cpp_type'
p87301
S'bool'
p87302
sS'default'
p87303
S'1'
p87304
sS'name'
p87305
S'enable'
p87306
sS'required'
p87307
I00
sS'group_name'
p87308
S'Advanced'
p87309
sa(dp87310
S'description'
p87311
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87312
sS'cpp_type'
p87313
S'bool'
p87314
sS'default'
p87315
S'0'
p87316
sS'name'
p87317
S'force_prepare'
p87318
sS'required'
p87319
I00
sS'group_name'
p87320
Nsa(dp87321
S'description'
p87322
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p87323
sS'cpp_type'
p87324
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87325
sS'default'
p87326
g3
sS'name'
p87327
S'new_block_id'
p87328
sS'required'
p87329
I00
sS'group_name'
p87330
Nsa(dp87331
S'description'
p87332
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p87333
sS'cpp_type'
p87334
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87335
sS'default'
p87336
g3
sS'name'
p87337
S'new_block_name'
p87338
sS'required'
p87339
I00
sS'group_name'
p87340
Nsa(dp87341
S'description'
p87342
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p87343
sS'cpp_type'
p87344
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87345
sS'default'
p87346
g3
sS'name'
p87347
S'old_block_id'
p87348
sS'required'
p87349
I00
sS'group_name'
p87350
Nsa(dp87351
S'description'
p87352
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p87353
sS'cpp_type'
p87354
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87355
sS'default'
p87356
g3
sS'name'
p87357
S'old_block_name'
p87358
sS'required'
p87359
I00
sS'group_name'
p87360
Nsa(dp87361
S'description'
p87362
g3
sS'cpp_type'
p87363
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87364
sS'default'
p87365
S'RenameBlock'
p87366
sS'name'
p87367
S'type'
p87368
sS'required'
p87369
I00
sS'group_name'
p87370
NsasS'name'
p87371
S'/MeshModifiers/RenameBlock'
p87372
sa(dp87373
S'description'
p87374
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p87375
sS'subblocks'
p87376
NsS'parameters'
p87377
(lp87378
(dp87379
S'description'
p87380
S'The list of block ids (SubdomainID) that this object will be applied\n'
p87381
sS'cpp_type'
p87382
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87383
sS'default'
p87384
g3
sS'name'
p87385
S'block'
p87386
sS'required'
p87387
I00
sS'group_name'
p87388
Nsa(dp87389
S'description'
p87390
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87391
sS'cpp_type'
p87392
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87393
sS'default'
p87394
g3
sS'name'
p87395
S'control_tags'
p87396
sS'required'
p87397
I00
sS'group_name'
p87398
S'Advanced'
p87399
sa(dp87400
S'description'
p87401
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87402
sS'cpp_type'
p87403
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87404
sS'default'
p87405
g3
sS'name'
p87406
S'depends_on'
p87407
sS'required'
p87408
I00
sS'group_name'
p87409
Nsa(dp87410
S'description'
p87411
S'Set the enabled status of the MooseObject.\n'
p87412
sS'cpp_type'
p87413
S'bool'
p87414
sS'default'
p87415
S'1'
p87416
sS'name'
p87417
S'enable'
p87418
sS'required'
p87419
I00
sS'group_name'
p87420
S'Advanced'
p87421
sa(dp87422
S'description'
p87423
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87424
sS'cpp_type'
p87425
S'bool'
p87426
sS'default'
p87427
S'0'
p87428
sS'name'
p87429
S'fixed_normal'
p87430
sS'required'
p87431
I00
sS'group_name'
p87432
Nsa(dp87433
S'description'
p87434
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87435
sS'cpp_type'
p87436
S'bool'
p87437
sS'default'
p87438
S'0'
p87439
sS'name'
p87440
S'force_prepare'
p87441
sS'required'
p87442
I00
sS'group_name'
p87443
Nsa(dp87444
S'description'
p87445
S'The list of boundary IDs to create on the supplied subdomain\n'
p87446
sS'cpp_type'
p87447
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87448
sS'default'
p87449
g3
sS'name'
p87450
S'new_boundary'
p87451
sS'required'
p87452
I01
sS'group_name'
p87453
Nsa(dp87454
S'description'
p87455
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p87456
sS'cpp_type'
p87457
S'libMesh::Point'
p87458
sS'default'
p87459
g3
sS'name'
p87460
S'normal'
p87461
sS'required'
p87462
I00
sS'group_name'
p87463
Nsa(dp87464
S'description'
p87465
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p87466
sS'cpp_type'
p87467
S'double'
p87468
sS'default'
p87469
S'0.1'
p87470
sS'name'
p87471
S'normal_tol'
p87472
sS'required'
p87473
I00
sS'group_name'
p87474
Nsa(dp87475
S'description'
p87476
g3
sS'cpp_type'
p87477
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87478
sS'default'
p87479
S'SideSetsAroundSubdomain'
p87480
sS'name'
p87481
S'type'
p87482
sS'required'
p87483
I00
sS'group_name'
p87484
Nsa(dp87485
S'description'
p87486
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p87487
sS'cpp_type'
p87488
S'double'
p87489
sS'default'
p87490
S'0.1'
p87491
sS'name'
p87492
S'variance'
p87493
sS'required'
p87494
I00
sS'group_name'
p87495
NsasS'name'
p87496
S'/MeshModifiers/SideSetsAroundSubdomain'
p87497
sa(dp87498
S'description'
p87499
g3
sS'subblocks'
p87500
NsS'parameters'
p87501
(lp87502
(dp87503
S'description'
p87504
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87505
sS'cpp_type'
p87506
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87507
sS'default'
p87508
g3
sS'name'
p87509
S'control_tags'
p87510
sS'required'
p87511
I00
sS'group_name'
p87512
S'Advanced'
p87513
sa(dp87514
S'description'
p87515
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87516
sS'cpp_type'
p87517
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87518
sS'default'
p87519
g3
sS'name'
p87520
S'depends_on'
p87521
sS'required'
p87522
I00
sS'group_name'
p87523
Nsa(dp87524
S'description'
p87525
S'Set the enabled status of the MooseObject.\n'
p87526
sS'cpp_type'
p87527
S'bool'
p87528
sS'default'
p87529
S'1'
p87530
sS'name'
p87531
S'enable'
p87532
sS'required'
p87533
I00
sS'group_name'
p87534
S'Advanced'
p87535
sa(dp87536
S'description'
p87537
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87538
sS'cpp_type'
p87539
S'bool'
p87540
sS'default'
p87541
S'0'
p87542
sS'name'
p87543
S'force_prepare'
p87544
sS'required'
p87545
I00
sS'group_name'
p87546
Nsa(dp87547
S'description'
p87548
S'The master set of blocks for which to draw a sideset between\n'
p87549
sS'cpp_type'
p87550
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87551
sS'default'
p87552
g3
sS'name'
p87553
S'master_block'
p87554
sS'required'
p87555
I01
sS'group_name'
p87556
Nsa(dp87557
S'description'
p87558
S'The name of the boundary to create\n'
p87559
sS'cpp_type'
p87560
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87561
sS'default'
p87562
g3
sS'name'
p87563
S'new_boundary'
p87564
sS'required'
p87565
I01
sS'group_name'
p87566
Nsa(dp87567
S'description'
p87568
S'The paired set of blocks for which to draw a sideset between\n'
p87569
sS'cpp_type'
p87570
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87571
sS'default'
p87572
g3
sS'name'
p87573
S'paired_block'
p87574
sS'required'
p87575
I01
sS'group_name'
p87576
Nsa(dp87577
S'description'
p87578
g3
sS'cpp_type'
p87579
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87580
sS'default'
p87581
S'SideSetsBetweenSubdomains'
p87582
sS'name'
p87583
S'type'
p87584
sS'required'
p87585
I00
sS'group_name'
p87586
NsasS'name'
p87587
S'/MeshModifiers/SideSetsBetweenSubdomains'
p87588
sa(dp87589
S'description'
p87590
g3
sS'subblocks'
p87591
NsS'parameters'
p87592
(lp87593
(dp87594
S'description'
p87595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87596
sS'cpp_type'
p87597
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87598
sS'default'
p87599
g3
sS'name'
p87600
S'control_tags'
p87601
sS'required'
p87602
I00
sS'group_name'
p87603
S'Advanced'
p87604
sa(dp87605
S'description'
p87606
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87607
sS'cpp_type'
p87608
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87609
sS'default'
p87610
g3
sS'name'
p87611
S'depends_on'
p87612
sS'required'
p87613
I00
sS'group_name'
p87614
Nsa(dp87615
S'description'
p87616
S'Set the enabled status of the MooseObject.\n'
p87617
sS'cpp_type'
p87618
S'bool'
p87619
sS'default'
p87620
S'1'
p87621
sS'name'
p87622
S'enable'
p87623
sS'required'
p87624
I00
sS'group_name'
p87625
S'Advanced'
p87626
sa(dp87627
S'description'
p87628
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87629
sS'cpp_type'
p87630
S'bool'
p87631
sS'default'
p87632
S'0'
p87633
sS'name'
p87634
S'fixed_normal'
p87635
sS'required'
p87636
I00
sS'group_name'
p87637
Nsa(dp87638
S'description'
p87639
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87640
sS'cpp_type'
p87641
S'bool'
p87642
sS'default'
p87643
S'0'
p87644
sS'name'
p87645
S'force_prepare'
p87646
sS'required'
p87647
I00
sS'group_name'
p87648
Nsa(dp87649
S'description'
p87650
S'The name of the boundary to create\n'
p87651
sS'cpp_type'
p87652
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87653
sS'default'
p87654
g3
sS'name'
p87655
S'new_boundary'
p87656
sS'required'
p87657
I01
sS'group_name'
p87658
Nsa(dp87659
S'description'
p87660
S'A list of normals for which to start painting sidesets\n'
p87661
sS'cpp_type'
p87662
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p87663
sS'default'
p87664
g3
sS'name'
p87665
S'normals'
p87666
sS'required'
p87667
I01
sS'group_name'
p87668
Nsa(dp87669
S'description'
p87670
g3
sS'cpp_type'
p87671
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87672
sS'default'
p87673
S'SideSetsFromNormals'
p87674
sS'name'
p87675
S'type'
p87676
sS'required'
p87677
I00
sS'group_name'
p87678
Nsa(dp87679
S'description'
p87680
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p87681
sS'cpp_type'
p87682
S'double'
p87683
sS'default'
p87684
S'0.1'
p87685
sS'name'
p87686
S'variance'
p87687
sS'required'
p87688
I00
sS'group_name'
p87689
NsasS'name'
p87690
S'/MeshModifiers/SideSetsFromNormals'
p87691
sa(dp87692
S'description'
p87693
g3
sS'subblocks'
p87694
NsS'parameters'
p87695
(lp87696
(dp87697
S'description'
p87698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87699
sS'cpp_type'
p87700
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87701
sS'default'
p87702
g3
sS'name'
p87703
S'control_tags'
p87704
sS'required'
p87705
I00
sS'group_name'
p87706
S'Advanced'
p87707
sa(dp87708
S'description'
p87709
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87710
sS'cpp_type'
p87711
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87712
sS'default'
p87713
g3
sS'name'
p87714
S'depends_on'
p87715
sS'required'
p87716
I00
sS'group_name'
p87717
Nsa(dp87718
S'description'
p87719
S'Set the enabled status of the MooseObject.\n'
p87720
sS'cpp_type'
p87721
S'bool'
p87722
sS'default'
p87723
S'1'
p87724
sS'name'
p87725
S'enable'
p87726
sS'required'
p87727
I00
sS'group_name'
p87728
S'Advanced'
p87729
sa(dp87730
S'description'
p87731
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87732
sS'cpp_type'
p87733
S'bool'
p87734
sS'default'
p87735
S'0'
p87736
sS'name'
p87737
S'fixed_normal'
p87738
sS'required'
p87739
I00
sS'group_name'
p87740
Nsa(dp87741
S'description'
p87742
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87743
sS'cpp_type'
p87744
S'bool'
p87745
sS'default'
p87746
S'0'
p87747
sS'name'
p87748
S'force_prepare'
p87749
sS'required'
p87750
I00
sS'group_name'
p87751
Nsa(dp87752
S'description'
p87753
S'The name of the boundary to create\n'
p87754
sS'cpp_type'
p87755
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87756
sS'default'
p87757
g3
sS'name'
p87758
S'new_boundary'
p87759
sS'required'
p87760
I01
sS'group_name'
p87761
Nsa(dp87762
S'description'
p87763
S'A list of points from which to start painting sidesets\n'
p87764
sS'cpp_type'
p87765
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p87766
sS'default'
p87767
g3
sS'name'
p87768
S'points'
p87769
sS'required'
p87770
I01
sS'group_name'
p87771
Nsa(dp87772
S'description'
p87773
g3
sS'cpp_type'
p87774
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87775
sS'default'
p87776
S'SideSetsFromPoints'
p87777
sS'name'
p87778
S'type'
p87779
sS'required'
p87780
I00
sS'group_name'
p87781
Nsa(dp87782
S'description'
p87783
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p87784
sS'cpp_type'
p87785
S'double'
p87786
sS'default'
p87787
S'0.1'
p87788
sS'name'
p87789
S'variance'
p87790
sS'required'
p87791
I00
sS'group_name'
p87792
NsasS'name'
p87793
S'/MeshModifiers/SideSetsFromPoints'
p87794
sa(dp87795
S'description'
p87796
g3
sS'subblocks'
p87797
NsS'parameters'
p87798
(lp87799
(dp87800
S'description'
p87801
S'Subdomain id to set for inside/outside the bounding box\n'
p87802
sS'cpp_type'
p87803
S'unsigned short'
p87804
sS'default'
p87805
g3
sS'name'
p87806
S'block_id'
p87807
sS'required'
p87808
I01
sS'group_name'
p87809
Nsa(dp87810
S'description'
p87811
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p87812
sS'cpp_type'
p87813
S'SubdomainName'
p87814
sS'default'
p87815
g3
sS'name'
p87816
S'block_name'
p87817
sS'required'
p87818
I00
sS'group_name'
p87819
Nsa(dp87820
S'description'
p87821
S'The bottom left point (in x,y,z with spaces in-between).\n'
p87822
sS'cpp_type'
p87823
S'libMesh::VectorValue<double>'
p87824
sS'default'
p87825
g3
sS'name'
p87826
S'bottom_left'
p87827
sS'required'
p87828
I01
sS'group_name'
p87829
Nsa(dp87830
S'description'
p87831
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87832
sS'cpp_type'
p87833
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87834
sS'default'
p87835
g3
sS'name'
p87836
S'control_tags'
p87837
sS'required'
p87838
I00
sS'group_name'
p87839
S'Advanced'
p87840
sa(dp87841
S'description'
p87842
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87843
sS'cpp_type'
p87844
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87845
sS'default'
p87846
g3
sS'name'
p87847
S'depends_on'
p87848
sS'required'
p87849
I00
sS'group_name'
p87850
Nsa(dp87851
S'description'
p87852
S'Set the enabled status of the MooseObject.\n'
p87853
sS'cpp_type'
p87854
S'bool'
p87855
sS'default'
p87856
S'1'
p87857
sS'name'
p87858
S'enable'
p87859
sS'required'
p87860
I00
sS'group_name'
p87861
S'Advanced'
p87862
sa(dp87863
S'description'
p87864
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87865
sS'cpp_type'
p87866
S'bool'
p87867
sS'default'
p87868
S'0'
p87869
sS'name'
p87870
S'force_prepare'
p87871
sS'required'
p87872
I00
sS'group_name'
p87873
Nsa(dp87874
S'name'
p87875
S'location'
p87876
sS'cpp_type'
p87877
S'MooseEnum'
p87878
sS'default'
p87879
S'INSIDE'
p87880
sS'description'
p87881
S'Control of where the subdomain id is to be set\n'
p87882
sS'required'
p87883
I00
sS'options'
p87884
S'INSIDE OUTSIDE'
p87885
sS'group_name'
p87886
Nsa(dp87887
S'description'
p87888
S'The bottom left point (in x,y,z with spaces in-between).\n'
p87889
sS'cpp_type'
p87890
S'libMesh::VectorValue<double>'
p87891
sS'default'
p87892
g3
sS'name'
p87893
S'top_right'
p87894
sS'required'
p87895
I01
sS'group_name'
p87896
Nsa(dp87897
S'description'
p87898
g3
sS'cpp_type'
p87899
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87900
sS'default'
p87901
S'SubdomainBoundingBox'
p87902
sS'name'
p87903
S'type'
p87904
sS'required'
p87905
I00
sS'group_name'
p87906
NsasS'name'
p87907
S'/MeshModifiers/SubdomainBoundingBox'
p87908
sa(dp87909
S'description'
p87910
g3
sS'subblocks'
p87911
NsS'parameters'
p87912
(lp87913
(dp87914
S'description'
p87915
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87916
sS'cpp_type'
p87917
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87918
sS'default'
p87919
g3
sS'name'
p87920
S'control_tags'
p87921
sS'required'
p87922
I00
sS'group_name'
p87923
S'Advanced'
p87924
sa(dp87925
S'description'
p87926
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87927
sS'cpp_type'
p87928
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87929
sS'default'
p87930
g3
sS'name'
p87931
S'depends_on'
p87932
sS'required'
p87933
I00
sS'group_name'
p87934
Nsa(dp87935
S'description'
p87936
S'Set the enabled status of the MooseObject.\n'
p87937
sS'cpp_type'
p87938
S'bool'
p87939
sS'default'
p87940
S'1'
p87941
sS'name'
p87942
S'enable'
p87943
sS'required'
p87944
I00
sS'group_name'
p87945
S'Advanced'
p87946
sa(dp87947
S'description'
p87948
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87949
sS'cpp_type'
p87950
S'bool'
p87951
sS'default'
p87952
S'0'
p87953
sS'name'
p87954
S'force_prepare'
p87955
sS'required'
p87956
I00
sS'group_name'
p87957
Nsa(dp87958
S'name'
p87959
S'transform'
p87960
sS'cpp_type'
p87961
S'MooseEnum'
p87962
sS'default'
p87963
g3
sS'description'
p87964
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p87965
sS'required'
p87966
I01
sS'options'
p87967
S'TRANSLATE ROTATE SCALE'
p87968
sS'group_name'
p87969
Nsa(dp87970
S'description'
p87971
g3
sS'cpp_type'
p87972
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87973
sS'default'
p87974
S'Transform'
p87975
sS'name'
p87976
S'type'
p87977
sS'required'
p87978
I00
sS'group_name'
p87979
Nsa(dp87980
S'description'
p87981
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p87982
sS'cpp_type'
p87983
S'libMesh::VectorValue<double>'
p87984
sS'default'
p87985
g3
sS'name'
p87986
S'vector_value'
p87987
sS'required'
p87988
I01
sS'group_name'
p87989
NsasS'name'
p87990
S'/MeshModifiers/Transform'
p87991
sasS'parameters'
p87992
NsS'name'
p87993
S'/MeshModifiers'
p87994
sa(dp87995
S'description'
p87996
g3
sS'subblocks'
p87997
(lp87998
(dp87999
S'description'
p88000
g3
sS'subblocks'
p88001
(lp88002
(dp88003
S'description'
p88004
g3
sS'subblocks'
p88005
NsS'parameters'
p88006
(lp88007
(dp88008
S'description'
p88009
S'Vector of displacement gradient variables\n'
p88010
sS'cpp_type'
p88011
S'std::vector<VariableName, std::allocator<VariableName> >'
p88012
sS'default'
p88013
g3
sS'name'
p88014
S'displacement_gradients'
p88015
sS'required'
p88016
I01
sS'group_name'
p88017
Nsa(dp88018
S'description'
p88019
S'Vector of displacement variables\n'
p88020
sS'cpp_type'
p88021
S'std::vector<VariableName, std::allocator<VariableName> >'
p88022
sS'default'
p88023
g3
sS'name'
p88024
S'displacements'
p88025
sS'required'
p88026
I01
sS'group_name'
p88027
Nsa(dp88028
S'description'
p88029
S'Specifies a scaling factor to apply to the displacement gradient variables\n'
p88030
sS'cpp_type'
p88031
S'double'
p88032
sS'default'
p88033
S'1'
p88034
sS'name'
p88035
S'scaling'
p88036
sS'required'
p88037
I00
sS'group_name'
p88038
NsasS'name'
p88039
S'/Modules/PhaseField/DisplacementGradients'
p88040
sa(dp88041
S'description'
p88042
g3
sS'subblocks'
p88043
NsS'parameters'
p88044
(lp88045
(dp88046
S'description'
p88047
S'Base name of the auxvariables\n'
p88048
sS'cpp_type'
p88049
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88050
sS'default'
p88051
S'RGB'
p88052
sS'name'
p88053
S'auxvariable_name_base'
p88054
sS'required'
p88055
I00
sS'group_name'
p88056
Nsa(dp88057
S'name'
p88058
S'crystal_structure'
p88059
sS'cpp_type'
p88060
S'MooseEnum'
p88061
sS'default'
p88062
g3
sS'description'
p88063
S'Crystal structure of the material\n'
p88064
sS'required'
p88065
I01
sS'options'
p88066
S'cubic hexagonal tetragonal trigonal orthorhombic monoclinic triclinic'
p88067
sS'group_name'
p88068
Nsa(dp88069
S'description'
p88070
S'Name of Euler angle provider user object\n'
p88071
sS'cpp_type'
p88072
S'UserObjectName'
p88073
sS'default'
p88074
g3
sS'name'
p88075
S'euler_angle_provider'
p88076
sS'required'
p88077
I01
sS'group_name'
p88078
Nsa(dp88079
S'description'
p88080
S'The GrainTracker UserObject to get values from.\n'
p88081
sS'cpp_type'
p88082
S'UserObjectName'
p88083
sS'default'
p88084
g3
sS'name'
p88085
S'grain_tracker'
p88086
sS'required'
p88087
I01
sS'group_name'
p88088
Nsa(dp88089
S'description'
p88090
S'RGB value of color used to represent area with no grains, defaults to black\n'
p88091
sS'cpp_type'
p88092
S'libMesh::Point'
p88093
sS'default'
p88094
S'0 0 0'
p88095
sS'name'
p88096
S'no_grain_color'
p88097
sS'required'
p88098
I00
sS'group_name'
p88099
Nsa(dp88100
S'name'
p88101
S'sd'
p88102
sS'cpp_type'
p88103
S'MooseEnum'
p88104
sS'default'
p88105
S'001'
p88106
sS'description'
p88107
S'Reference sample direction\n'
p88108
sS'required'
p88109
I00
sS'options'
p88110
S'100 010 001'
p88111
sS'group_name'
p88112
NsasS'name'
p88113
S'/Modules/PhaseField/EulerAngles2RGB'
p88114
sa(dp88115
S'description'
p88116
g3
sS'subblocks'
p88117
(lp88118
(dp88119
S'description'
p88120
g3
sS'subblocks'
p88121
NsS'parameters'
p88122
(lp88123
(dp88124
S'name'
p88125
S'periodicity'
p88126
sS'cpp_type'
p88127
S'MooseEnum'
p88128
sS'default'
p88129
S'gradient'
p88130
sS'description'
p88131
S'Periodicity type\n'
p88132
sS'required'
p88133
I00
sS'options'
p88134
S'gradient value'
p88135
sS'group_name'
p88136
Nsa(dp88137
S'description'
p88138
S'Periodic variables\n'
p88139
sS'cpp_type'
p88140
S'std::vector<VariableName, std::allocator<VariableName> >'
p88141
sS'default'
p88142
g3
sS'name'
p88143
S'variable'
p88144
sS'required'
p88145
I00
sS'group_name'
p88146
NsasS'name'
p88147
S'/Modules/PhaseField/MortarPeriodicity/*'
p88148
sasS'parameters'
p88149
NsS'name'
p88150
S'/Modules/PhaseField/MortarPeriodicity'
p88151
sasS'parameters'
p88152
NsS'name'
p88153
S'/Modules/PhaseField'
p88154
sa(dp88155
S'description'
p88156
g3
sS'subblocks'
p88157
(lp88158
(dp88159
S'description'
p88160
g3
sS'subblocks'
p88161
(lp88162
(dp88163
S'description'
p88164
g3
sS'subblocks'
p88165
NsS'parameters'
p88166
(lp88167
(dp88168
S'description'
p88169
S'Material property base name\n'
p88170
sS'cpp_type'
p88171
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88172
sS'default'
p88173
g3
sS'name'
p88174
S'base_name'
p88175
sS'required'
p88176
I00
sS'group_name'
p88177
Nsa(dp88178
S'description'
p88179
S'The list of ids of the blocks (subdomain) that the GeneralizedPlaneStrain kernels will be applied to\n'
p88180
sS'cpp_type'
p88181
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88182
sS'default'
p88183
g3
sS'name'
p88184
S'block'
p88185
sS'required'
p88186
I00
sS'group_name'
p88187
Nsa(dp88188
S'description'
p88189
S'The displacement variables\n'
p88190
sS'cpp_type'
p88191
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p88192
sS'default'
p88193
g3
sS'name'
p88194
S'displacements'
p88195
sS'required'
p88196
I01
sS'group_name'
p88197
Nsa(dp88198
S'description'
p88199
S'Scale factor applied to prescribed pressure\n'
p88200
sS'cpp_type'
p88201
S'double'
p88202
sS'default'
p88203
S'1'
p88204
sS'name'
p88205
S'factor'
p88206
sS'required'
p88207
I00
sS'group_name'
p88208
Nsa(dp88209
S'description'
p88210
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p88211
sS'cpp_type'
p88212
S'FunctionName'
p88213
sS'default'
p88214
S'0'
p88215
sS'name'
p88216
S'out_of_plane_pressure'
p88217
sS'required'
p88218
I00
sS'group_name'
p88219
Nsa(dp88220
S'description'
p88221
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p88222
sS'cpp_type'
p88223
S'NonlinearVariableName'
p88224
sS'default'
p88225
g3
sS'name'
p88226
S'scalar_out_of_plane_strain'
p88227
sS'required'
p88228
I01
sS'group_name'
p88229
Nsa(dp88230
S'description'
p88231
S'The temperature variable\n'
p88232
sS'cpp_type'
p88233
S'NonlinearVariableName'
p88234
sS'default'
p88235
g3
sS'name'
p88236
S'temperature'
p88237
sS'required'
p88238
I00
sS'group_name'
p88239
Nsa(dp88240
S'description'
p88241
S'Whether to use displaced mesh\n'
p88242
sS'cpp_type'
p88243
S'bool'
p88244
sS'default'
p88245
S'0'
p88246
sS'name'
p88247
S'use_displaced_mesh'
p88248
sS'required'
p88249
I00
sS'group_name'
p88250
NsasS'name'
p88251
S'/Modules/TensorMechanics/GeneralizedPlaneStrain/*'
p88252
sasS'parameters'
p88253
NsS'name'
p88254
S'/Modules/TensorMechanics/GeneralizedPlaneStrain'
p88255
sa(dp88256
S'description'
p88257
g3
sS'subblocks'
p88258
(lp88259
(dp88260
S'description'
p88261
g3
sS'subblocks'
p88262
NsS'parameters'
p88263
(lp88264
(dp88265
S'description'
p88266
S'Add the displacement variables\n'
p88267
sS'cpp_type'
p88268
S'bool'
p88269
sS'default'
p88270
S'0'
p88271
sS'name'
p88272
S'add_variables'
p88273
sS'required'
p88274
I00
sS'group_name'
p88275
Nsa(dp88276
S'name'
p88277
S'additional_generate_output'
p88278
sS'cpp_type'
p88279
S'MultiMooseEnum'
p88280
sS'default'
p88281
g3
sS'description'
p88282
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p88283
sS'required'
p88284
I00
sS'options'
p88285
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p88286
sS'group_name'
p88287
S'Output'
p88288
sa(dp88289
S'description'
p88290
S'Material property base name\n'
p88291
sS'cpp_type'
p88292
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88293
sS'default'
p88294
g3
sS'name'
p88295
S'base_name'
p88296
sS'required'
p88297
I00
sS'group_name'
p88298
Nsa(dp88299
S'description'
p88300
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p88301
sS'cpp_type'
p88302
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88303
sS'default'
p88304
g3
sS'name'
p88305
S'block'
p88306
sS'required'
p88307
I00
sS'group_name'
p88308
S'Advanced'
p88309
sa(dp88310
S'name'
p88311
S'decomposition_method'
p88312
sS'cpp_type'
p88313
S'MooseEnum'
p88314
sS'default'
p88315
S'TaylorExpansion'
p88316
sS'description'
p88317
S'Methods to calculate the finite strain and rotation increments\n'
p88318
sS'required'
p88319
I00
sS'options'
p88320
S'TaylorExpansion EigenSolution'
p88321
sS'group_name'
p88322
Nsa(dp88323
S'description'
p88324
S'The displacement diagonal preconditioner terms\n'
p88325
sS'cpp_type'
p88326
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p88327
sS'default'
p88328
g3
sS'name'
p88329
S'diag_save_in'
p88330
sS'required'
p88331
I00
sS'group_name'
p88332
S'Advanced'
p88333
sa(dp88334
S'description'
p88335
S'The nonlinear displacement variables for the problem\n'
p88336
sS'cpp_type'
p88337
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p88338
sS'default'
p88339
g3
sS'name'
p88340
S'displacements'
p88341
sS'required'
p88342
I01
sS'group_name'
p88343
Nsa(dp88344
S'description'
p88345
S'List of eigenstrains to be applied in this strain calculation\n'
p88346
sS'cpp_type'
p88347
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p88348
sS'default'
p88349
g3
sS'name'
p88350
S'eigenstrain_names'
p88351
sS'required'
p88352
I00
sS'group_name'
p88353
Nsa(dp88354
S'name'
p88355
S'generate_output'
p88356
sS'cpp_type'
p88357
S'MultiMooseEnum'
p88358
sS'default'
p88359
g3
sS'description'
p88360
S'Add scalar quantity output for stress and/or strain\n'
p88361
sS'required'
p88362
I00
sS'options'
p88363
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p88364
sS'group_name'
p88365
S'Output'
p88366
sa(dp88367
S'description'
p88368
S'Use incremental or total strain\n'
p88369
sS'cpp_type'
p88370
S'bool'
p88371
sS'default'
p88372
g3
sS'name'
p88373
S'incremental'
p88374
sS'required'
p88375
I00
sS'group_name'
p88376
Nsa(dp88377
S'description'
p88378
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p88379
sS'cpp_type'
p88380
S'FunctionName'
p88381
sS'default'
p88382
S'0'
p88383
sS'name'
p88384
S'out_of_plane_pressure'
p88385
sS'required'
p88386
I00
sS'group_name'
p88387
S'Out-of-plane stress/strain'
p88388
sa(dp88389
S'name'
p88390
S'planar_formulation'
p88391
sS'cpp_type'
p88392
S'MooseEnum'
p88393
sS'default'
p88394
S'NONE'
p88395
sS'description'
p88396
S'Out-of-plane stress/strain formulation\n'
p88397
sS'required'
p88398
I00
sS'options'
p88399
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p88400
sS'group_name'
p88401
S'Out-of-plane stress/strain'
p88402
sa(dp88403
S'description'
p88404
S'Scale factor applied to prescribed pressure\n'
p88405
sS'cpp_type'
p88406
S'double'
p88407
sS'default'
p88408
S'1'
p88409
sS'name'
p88410
S'pressure_factor'
p88411
sS'required'
p88412
I00
sS'group_name'
p88413
S'Out-of-plane stress/strain'
p88414
sa(dp88415
S'description'
p88416
S'The displacement residuals\n'
p88417
sS'cpp_type'
p88418
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p88419
sS'default'
p88420
g3
sS'name'
p88421
S'save_in'
p88422
sS'required'
p88423
I00
sS'group_name'
p88424
S'Advanced'
p88425
sa(dp88426
S'description'
p88427
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p88428
sS'cpp_type'
p88429
S'NonlinearVariableName'
p88430
sS'default'
p88431
g3
sS'name'
p88432
S'scalar_out_of_plane_strain'
p88433
sS'required'
p88434
I00
sS'group_name'
p88435
S'Out-of-plane stress/strain'
p88436
sa(dp88437
S'name'
p88438
S'strain'
p88439
sS'cpp_type'
p88440
S'MooseEnum'
p88441
sS'default'
p88442
S'SMALL'
p88443
sS'description'
p88444
S'Strain formulation\n'
p88445
sS'required'
p88446
I00
sS'options'
p88447
S'SMALL FINITE'
p88448
sS'group_name'
p88449
Nsa(dp88450
S'description'
p88451
S'The temperature\n'
p88452
sS'cpp_type'
p88453
S'NonlinearVariableName'
p88454
sS'default'
p88455
g3
sS'name'
p88456
S'temp'
p88457
sS'required'
p88458
I00
sS'group_name'
p88459
Nsa(dp88460
S'description'
p88461
S'The temperature\n'
p88462
sS'cpp_type'
p88463
S'NonlinearVariableName'
p88464
sS'default'
p88465
g3
sS'name'
p88466
S'temperature'
p88467
sS'required'
p88468
I00
sS'group_name'
p88469
Nsa(dp88470
S'description'
p88471
S'Whether to use displaced mesh in the kernels\n'
p88472
sS'cpp_type'
p88473
S'bool'
p88474
sS'default'
p88475
S'0'
p88476
sS'name'
p88477
S'use_displaced_mesh'
p88478
sS'required'
p88479
I00
sS'group_name'
p88480
Nsa(dp88481
S'description'
p88482
S'Jacobian for corrotational finite strain\n'
p88483
sS'cpp_type'
p88484
S'bool'
p88485
sS'default'
p88486
S'0'
p88487
sS'name'
p88488
S'use_finite_deform_jacobian'
p88489
sS'required'
p88490
I00
sS'group_name'
p88491
Nsa(dp88492
S'description'
p88493
S'Flag to correct volumetric locking\n'
p88494
sS'cpp_type'
p88495
S'bool'
p88496
sS'default'
p88497
S'0'
p88498
sS'name'
p88499
S'volumetric_locking_correction'
p88500
sS'required'
p88501
I00
sS'group_name'
p88502
NsasS'name'
p88503
S'/Modules/TensorMechanics/Master/*'
p88504
sasS'parameters'
p88505
(lp88506
(dp88507
S'description'
p88508
S'Add the displacement variables\n'
p88509
sS'cpp_type'
p88510
S'bool'
p88511
sS'default'
p88512
S'0'
p88513
sS'name'
p88514
S'add_variables'
p88515
sS'required'
p88516
I00
sS'group_name'
p88517
Nsa(dp88518
S'description'
p88519
S'Material property base name\n'
p88520
sS'cpp_type'
p88521
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88522
sS'default'
p88523
g3
sS'name'
p88524
S'base_name'
p88525
sS'required'
p88526
I00
sS'group_name'
p88527
Nsa(dp88528
S'name'
p88529
S'decomposition_method'
p88530
sS'cpp_type'
p88531
S'MooseEnum'
p88532
sS'default'
p88533
S'TaylorExpansion'
p88534
sS'description'
p88535
S'Methods to calculate the finite strain and rotation increments\n'
p88536
sS'required'
p88537
I00
sS'options'
p88538
S'TaylorExpansion EigenSolution'
p88539
sS'group_name'
p88540
Nsa(dp88541
S'description'
p88542
S'The displacement diagonal preconditioner terms\n'
p88543
sS'cpp_type'
p88544
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p88545
sS'default'
p88546
g3
sS'name'
p88547
S'diag_save_in'
p88548
sS'required'
p88549
I00
sS'group_name'
p88550
S'Advanced'
p88551
sa(dp88552
S'description'
p88553
S'The nonlinear displacement variables for the problem\n'
p88554
sS'cpp_type'
p88555
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p88556
sS'default'
p88557
g3
sS'name'
p88558
S'displacements'
p88559
sS'required'
p88560
I01
sS'group_name'
p88561
Nsa(dp88562
S'description'
p88563
S'List of eigenstrains to be applied in this strain calculation\n'
p88564
sS'cpp_type'
p88565
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p88566
sS'default'
p88567
g3
sS'name'
p88568
S'eigenstrain_names'
p88569
sS'required'
p88570
I00
sS'group_name'
p88571
Nsa(dp88572
S'name'
p88573
S'generate_output'
p88574
sS'cpp_type'
p88575
S'MultiMooseEnum'
p88576
sS'default'
p88577
g3
sS'description'
p88578
S'Add scalar quantity output for stress and/or strain\n'
p88579
sS'required'
p88580
I00
sS'options'
p88581
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p88582
sS'group_name'
p88583
S'Output'
p88584
sa(dp88585
S'description'
p88586
S'Use incremental or total strain\n'
p88587
sS'cpp_type'
p88588
S'bool'
p88589
sS'default'
p88590
g3
sS'name'
p88591
S'incremental'
p88592
sS'required'
p88593
I00
sS'group_name'
p88594
Nsa(dp88595
S'description'
p88596
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p88597
sS'cpp_type'
p88598
S'FunctionName'
p88599
sS'default'
p88600
S'0'
p88601
sS'name'
p88602
S'out_of_plane_pressure'
p88603
sS'required'
p88604
I00
sS'group_name'
p88605
S'Out-of-plane stress/strain'
p88606
sa(dp88607
S'name'
p88608
S'planar_formulation'
p88609
sS'cpp_type'
p88610
S'MooseEnum'
p88611
sS'default'
p88612
S'NONE'
p88613
sS'description'
p88614
S'Out-of-plane stress/strain formulation\n'
p88615
sS'required'
p88616
I00
sS'options'
p88617
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p88618
sS'group_name'
p88619
S'Out-of-plane stress/strain'
p88620
sa(dp88621
S'description'
p88622
S'Scale factor applied to prescribed pressure\n'
p88623
sS'cpp_type'
p88624
S'double'
p88625
sS'default'
p88626
S'1'
p88627
sS'name'
p88628
S'pressure_factor'
p88629
sS'required'
p88630
I00
sS'group_name'
p88631
S'Out-of-plane stress/strain'
p88632
sa(dp88633
S'description'
p88634
S'The displacement residuals\n'
p88635
sS'cpp_type'
p88636
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p88637
sS'default'
p88638
g3
sS'name'
p88639
S'save_in'
p88640
sS'required'
p88641
I00
sS'group_name'
p88642
S'Advanced'
p88643
sa(dp88644
S'description'
p88645
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p88646
sS'cpp_type'
p88647
S'NonlinearVariableName'
p88648
sS'default'
p88649
g3
sS'name'
p88650
S'scalar_out_of_plane_strain'
p88651
sS'required'
p88652
I00
sS'group_name'
p88653
S'Out-of-plane stress/strain'
p88654
sa(dp88655
S'name'
p88656
S'strain'
p88657
sS'cpp_type'
p88658
S'MooseEnum'
p88659
sS'default'
p88660
S'SMALL'
p88661
sS'description'
p88662
S'Strain formulation\n'
p88663
sS'required'
p88664
I00
sS'options'
p88665
S'SMALL FINITE'
p88666
sS'group_name'
p88667
Nsa(dp88668
S'description'
p88669
S'The temperature\n'
p88670
sS'cpp_type'
p88671
S'NonlinearVariableName'
p88672
sS'default'
p88673
g3
sS'name'
p88674
S'temp'
p88675
sS'required'
p88676
I00
sS'group_name'
p88677
Nsa(dp88678
S'description'
p88679
S'The temperature\n'
p88680
sS'cpp_type'
p88681
S'NonlinearVariableName'
p88682
sS'default'
p88683
g3
sS'name'
p88684
S'temperature'
p88685
sS'required'
p88686
I00
sS'group_name'
p88687
Nsa(dp88688
S'description'
p88689
S'Whether to use displaced mesh in the kernels\n'
p88690
sS'cpp_type'
p88691
S'bool'
p88692
sS'default'
p88693
S'0'
p88694
sS'name'
p88695
S'use_displaced_mesh'
p88696
sS'required'
p88697
I00
sS'group_name'
p88698
Nsa(dp88699
S'description'
p88700
S'Jacobian for corrotational finite strain\n'
p88701
sS'cpp_type'
p88702
S'bool'
p88703
sS'default'
p88704
S'0'
p88705
sS'name'
p88706
S'use_finite_deform_jacobian'
p88707
sS'required'
p88708
I00
sS'group_name'
p88709
Nsa(dp88710
S'description'
p88711
S'Flag to correct volumetric locking\n'
p88712
sS'cpp_type'
p88713
S'bool'
p88714
sS'default'
p88715
S'0'
p88716
sS'name'
p88717
S'volumetric_locking_correction'
p88718
sS'required'
p88719
I00
sS'group_name'
p88720
NsasS'name'
p88721
S'/Modules/TensorMechanics/Master'
p88722
sasS'parameters'
p88723
NsS'name'
p88724
S'/Modules/TensorMechanics'
p88725
sasS'parameters'
p88726
NsS'name'
p88727
S'/Modules'
p88728
sa(dp88729
S'description'
p88730
g3
sS'subblocks'
p88731
(lp88732
(dp88733
S'description'
p88734
g3
sS'subblocks'
p88735
NsS'parameters'
p88736
(lp88737
(dp88738
S'description'
p88739
S'A string representing the Moose Object that will be built by this Action\n'
p88740
sS'cpp_type'
p88741
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88742
sS'default'
p88743
g3
sS'name'
p88744
S'type'
p88745
sS'required'
p88746
I01
sS'group_name'
p88747
NsasS'name'
p88748
S'/MultiApps/*'
p88749
sa(dp88750
S'description'
p88751
g3
sS'subblocks'
p88752
NsS'parameters'
p88753
(lp88754
(dp88755
S'name'
p88756
S'app_type'
p88757
sS'cpp_type'
p88758
S'MooseEnum'
p88759
sS'default'
p88760
g3
sS'description'
p88761
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p88762
sS'required'
p88763
I00
sS'options'
p88764
S'PuffinApp'
p88765
sS'group_name'
p88766
Nsa(dp88767
S'description'
p88768
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p88769
sS'cpp_type'
p88770
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88771
sS'default'
p88772
g3
sS'name'
p88773
S'boundary'
p88774
sS'required'
p88775
I00
sS'group_name'
p88776
Nsa(dp88777
S'description'
p88778
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p88779
sS'cpp_type'
p88780
S'double'
p88781
sS'default'
p88782
S'0.01'
p88783
sS'name'
p88784
S'bounding_box_inflation'
p88785
sS'required'
p88786
I00
sS'group_name'
p88787
Nsa(dp88788
S'description'
p88789
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p88790
sS'cpp_type'
p88791
S'bool'
p88792
sS'default'
p88793
S'0'
p88794
sS'name'
p88795
S'catch_up'
p88796
sS'required'
p88797
I00
sS'group_name'
p88798
Nsa(dp88799
S'description'
p88800
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88801
sS'cpp_type'
p88802
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88803
sS'default'
p88804
g3
sS'name'
p88805
S'control_tags'
p88806
sS'required'
p88807
I00
sS'group_name'
p88808
S'Advanced'
p88809
sa(dp88810
S'description'
p88811
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p88812
sS'cpp_type'
p88813
S'bool'
p88814
sS'default'
p88815
S'0'
p88816
sS'name'
p88817
S'detect_steady_state'
p88818
sS'required'
p88819
I00
sS'group_name'
p88820
Nsa(dp88821
S'description'
p88822
S'Set the enabled status of the MooseObject.\n'
p88823
sS'cpp_type'
p88824
S'bool'
p88825
sS'default'
p88826
S'1'
p88827
sS'name'
p88828
S'enable'
p88829
sS'required'
p88830
I00
sS'group_name'
p88831
S'Advanced'
p88832
sa(dp88833
S'name'
p88834
S'execute_on'
p88835
sS'cpp_type'
p88836
S'MultiMooseEnum'
p88837
sS'default'
p88838
S'TIMESTEP_BEGIN'
p88839
sS'description'
p88840
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p88841
sS'required'
p88842
I00
sS'options'
p88843
S'none initial linear nonlinear timestep_end timestep_begin custom'
p88844
sS'group_name'
p88845
Nsa(dp88846
S'description'
p88847
S'Determines whether this object is calculated using an implicit or explicit form\n'
p88848
sS'cpp_type'
p88849
S'bool'
p88850
sS'default'
p88851
S'1'
p88852
sS'name'
p88853
S'implicit'
p88854
sS'required'
p88855
I00
sS'group_name'
p88856
S'Advanced'
p88857
sa(dp88858
S'description'
p88859
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p88860
sS'cpp_type'
p88861
S'std::vector<FileName, std::allocator<FileName> >'
p88862
sS'default'
p88863
g3
sS'name'
p88864
S'input_files'
p88865
sS'required'
p88866
I01
sS'group_name'
p88867
Nsa(dp88868
S'description'
p88869
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p88870
sS'cpp_type'
p88871
S'bool'
p88872
sS'default'
p88873
S'0'
p88874
sS'name'
p88875
S'interpolate_transfers'
p88876
sS'required'
p88877
I00
sS'group_name'
p88878
Nsa(dp88879
S'description'
p88880
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p88881
sS'cpp_type'
p88882
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88883
sS'default'
p88884
g3
sS'name'
p88885
S'library_path'
p88886
sS'required'
p88887
I00
sS'group_name'
p88888
Nsa(dp88889
S'description'
p88890
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p88891
sS'cpp_type'
p88892
S'double'
p88893
sS'default'
p88894
S'2'
p88895
sS'name'
p88896
S'max_catch_up_steps'
p88897
sS'required'
p88898
I00
sS'group_name'
p88899
Nsa(dp88900
S'description'
p88901
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p88902
sS'cpp_type'
p88903
S'unsigned int'
p88904
sS'default'
p88905
S'0'
p88906
sS'name'
p88907
S'max_failures'
p88908
sS'required'
p88909
I00
sS'group_name'
p88910
Nsa(dp88911
S'description'
p88912
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p88913
sS'cpp_type'
p88914
S'unsigned int'
p88915
sS'default'
p88916
S'4294967295'
p88917
sS'name'
p88918
S'max_procs_per_app'
p88919
sS'required'
p88920
I00
sS'group_name'
p88921
Nsa(dp88922
S'description'
p88923
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p88924
sS'cpp_type'
p88925
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p88926
sS'default'
p88927
g3
sS'name'
p88928
S'move_apps'
p88929
sS'required'
p88930
I00
sS'group_name'
p88931
Nsa(dp88932
S'description'
p88933
S'The positions corresponding to each move_app.\n'
p88934
sS'cpp_type'
p88935
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p88936
sS'default'
p88937
g3
sS'name'
p88938
S'move_positions'
p88939
sS'required'
p88940
I00
sS'group_name'
p88941
Nsa(dp88942
S'description'
p88943
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p88944
sS'cpp_type'
p88945
S'double'
p88946
sS'default'
p88947
S'1.79769e+308'
p88948
sS'name'
p88949
S'move_time'
p88950
sS'required'
p88951
I00
sS'group_name'
p88952
Nsa(dp88953
S'description'
p88954
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p88955
sS'cpp_type'
p88956
S'bool'
p88957
sS'default'
p88958
S'0'
p88959
sS'name'
p88960
S'output_in_position'
p88961
sS'required'
p88962
I00
sS'group_name'
p88963
Nsa(dp88964
S'description'
p88965
S'If true then every sub-cycle will be output.\n'
p88966
sS'cpp_type'
p88967
S'bool'
p88968
sS'default'
p88969
S'0'
p88970
sS'name'
p88971
S'output_sub_cycles'
p88972
sS'required'
p88973
I00
sS'group_name'
p88974
Nsa(dp88975
S'description'
p88976
S'Toggle the display of sub-cycles on the screen.\n'
p88977
sS'cpp_type'
p88978
S'bool'
p88979
sS'default'
p88980
S'1'
p88981
sS'name'
p88982
S'print_sub_cycles'
p88983
sS'required'
p88984
I00
sS'group_name'
p88985
Nsa(dp88986
S'description'
p88987
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p88988
sS'cpp_type'
p88989
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p88990
sS'default'
p88991
g3
sS'name'
p88992
S'reset_apps'
p88993
sS'required'
p88994
I00
sS'group_name'
p88995
Nsa(dp88996
S'description'
p88997
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p88998
sS'cpp_type'
p88999
S'double'
p89000
sS'default'
p89001
S'1.79769e+308'
p89002
sS'name'
p89003
S'reset_time'
p89004
sS'required'
p89005
I00
sS'group_name'
p89006
Nsa(dp89007
S'description'
p89008
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p89009
sS'cpp_type'
p89010
S'double'
p89011
sS'default'
p89012
S'1e-08'
p89013
sS'name'
p89014
S'steady_state_tol'
p89015
sS'required'
p89016
I00
sS'group_name'
p89017
Nsa(dp89018
S'description'
p89019
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p89020
sS'cpp_type'
p89021
S'bool'
p89022
sS'default'
p89023
S'0'
p89024
sS'name'
p89025
S'sub_cycling'
p89026
sS'required'
p89027
I00
sS'group_name'
p89028
Nsa(dp89029
S'description'
p89030
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p89031
sS'cpp_type'
p89032
S'bool'
p89033
sS'default'
p89034
S'0'
p89035
sS'name'
p89036
S'tolerate_failure'
p89037
sS'required'
p89038
I00
sS'group_name'
p89039
Nsa(dp89040
S'description'
p89041
g3
sS'cpp_type'
p89042
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89043
sS'default'
p89044
S'AutoPositionsMultiApp'
p89045
sS'name'
p89046
S'type'
p89047
sS'required'
p89048
I00
sS'group_name'
p89049
Nsa(dp89050
S'description'
p89051
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89052
sS'cpp_type'
p89053
S'bool'
p89054
sS'default'
p89055
S'0'
p89056
sS'name'
p89057
S'use_displaced_mesh'
p89058
sS'required'
p89059
I00
sS'group_name'
p89060
S'Advanced'
p89061
sasS'name'
p89062
S'/MultiApps/AutoPositionsMultiApp'
p89063
sa(dp89064
S'description'
p89065
g3
sS'subblocks'
p89066
NsS'parameters'
p89067
(lp89068
(dp89069
S'name'
p89070
S'app_type'
p89071
sS'cpp_type'
p89072
S'MooseEnum'
p89073
sS'default'
p89074
g3
sS'description'
p89075
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p89076
sS'required'
p89077
I00
sS'options'
p89078
S'PuffinApp'
p89079
sS'group_name'
p89080
Nsa(dp89081
S'description'
p89082
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89083
sS'cpp_type'
p89084
S'double'
p89085
sS'default'
p89086
S'0.01'
p89087
sS'name'
p89088
S'bounding_box_inflation'
p89089
sS'required'
p89090
I00
sS'group_name'
p89091
Nsa(dp89092
S'description'
p89093
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89094
sS'cpp_type'
p89095
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89096
sS'default'
p89097
g3
sS'name'
p89098
S'control_tags'
p89099
sS'required'
p89100
I00
sS'group_name'
p89101
S'Advanced'
p89102
sa(dp89103
S'description'
p89104
S'Set the enabled status of the MooseObject.\n'
p89105
sS'cpp_type'
p89106
S'bool'
p89107
sS'default'
p89108
S'1'
p89109
sS'name'
p89110
S'enable'
p89111
sS'required'
p89112
I00
sS'group_name'
p89113
S'Advanced'
p89114
sa(dp89115
S'name'
p89116
S'execute_on'
p89117
sS'cpp_type'
p89118
S'MultiMooseEnum'
p89119
sS'default'
p89120
S'TIMESTEP_BEGIN'
p89121
sS'description'
p89122
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89123
sS'required'
p89124
I00
sS'options'
p89125
S'none initial linear nonlinear timestep_end timestep_begin custom'
p89126
sS'group_name'
p89127
Nsa(dp89128
S'description'
p89129
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89130
sS'cpp_type'
p89131
S'std::vector<FileName, std::allocator<FileName> >'
p89132
sS'default'
p89133
g3
sS'name'
p89134
S'input_files'
p89135
sS'required'
p89136
I01
sS'group_name'
p89137
Nsa(dp89138
S'description'
p89139
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89140
sS'cpp_type'
p89141
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89142
sS'default'
p89143
g3
sS'name'
p89144
S'library_path'
p89145
sS'required'
p89146
I00
sS'group_name'
p89147
Nsa(dp89148
S'description'
p89149
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89150
sS'cpp_type'
p89151
S'unsigned int'
p89152
sS'default'
p89153
S'4294967295'
p89154
sS'name'
p89155
S'max_procs_per_app'
p89156
sS'required'
p89157
I00
sS'group_name'
p89158
Nsa(dp89159
S'description'
p89160
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89161
sS'cpp_type'
p89162
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89163
sS'default'
p89164
g3
sS'name'
p89165
S'move_apps'
p89166
sS'required'
p89167
I00
sS'group_name'
p89168
Nsa(dp89169
S'description'
p89170
S'The positions corresponding to each move_app.\n'
p89171
sS'cpp_type'
p89172
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89173
sS'default'
p89174
g3
sS'name'
p89175
S'move_positions'
p89176
sS'required'
p89177
I00
sS'group_name'
p89178
Nsa(dp89179
S'description'
p89180
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89181
sS'cpp_type'
p89182
S'double'
p89183
sS'default'
p89184
S'1.79769e+308'
p89185
sS'name'
p89186
S'move_time'
p89187
sS'required'
p89188
I00
sS'group_name'
p89189
Nsa(dp89190
S'description'
p89191
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89192
sS'cpp_type'
p89193
S'bool'
p89194
sS'default'
p89195
S'0'
p89196
sS'name'
p89197
S'output_in_position'
p89198
sS'required'
p89199
I00
sS'group_name'
p89200
Nsa(dp89201
S'description'
p89202
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p89203
sS'cpp_type'
p89204
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89205
sS'default'
p89206
g3
sS'name'
p89207
S'positions'
p89208
sS'required'
p89209
I00
sS'group_name'
p89210
Nsa(dp89211
S'description'
p89212
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p89213
sS'cpp_type'
p89214
S'std::vector<FileName, std::allocator<FileName> >'
p89215
sS'default'
p89216
g3
sS'name'
p89217
S'positions_file'
p89218
sS'required'
p89219
I00
sS'group_name'
p89220
Nsa(dp89221
S'description'
p89222
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89223
sS'cpp_type'
p89224
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89225
sS'default'
p89226
g3
sS'name'
p89227
S'reset_apps'
p89228
sS'required'
p89229
I00
sS'group_name'
p89230
Nsa(dp89231
S'description'
p89232
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89233
sS'cpp_type'
p89234
S'double'
p89235
sS'default'
p89236
S'1.79769e+308'
p89237
sS'name'
p89238
S'reset_time'
p89239
sS'required'
p89240
I00
sS'group_name'
p89241
Nsa(dp89242
S'description'
p89243
g3
sS'cpp_type'
p89244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89245
sS'default'
p89246
S'FullSolveMultiApp'
p89247
sS'name'
p89248
S'type'
p89249
sS'required'
p89250
I00
sS'group_name'
p89251
Nsa(dp89252
S'description'
p89253
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89254
sS'cpp_type'
p89255
S'bool'
p89256
sS'default'
p89257
S'0'
p89258
sS'name'
p89259
S'use_displaced_mesh'
p89260
sS'required'
p89261
I00
sS'group_name'
p89262
S'Advanced'
p89263
sasS'name'
p89264
S'/MultiApps/FullSolveMultiApp'
p89265
sa(dp89266
S'description'
p89267
g3
sS'subblocks'
p89268
NsS'parameters'
p89269
(lp89270
(dp89271
S'name'
p89272
S'app_type'
p89273
sS'cpp_type'
p89274
S'MooseEnum'
p89275
sS'default'
p89276
g3
sS'description'
p89277
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p89278
sS'required'
p89279
I00
sS'options'
p89280
S'PuffinApp'
p89281
sS'group_name'
p89282
Nsa(dp89283
S'description'
p89284
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89285
sS'cpp_type'
p89286
S'double'
p89287
sS'default'
p89288
S'0.01'
p89289
sS'name'
p89290
S'bounding_box_inflation'
p89291
sS'required'
p89292
I00
sS'group_name'
p89293
Nsa(dp89294
S'description'
p89295
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p89296
sS'cpp_type'
p89297
S'bool'
p89298
sS'default'
p89299
S'0'
p89300
sS'name'
p89301
S'catch_up'
p89302
sS'required'
p89303
I00
sS'group_name'
p89304
Nsa(dp89305
S'description'
p89306
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89307
sS'cpp_type'
p89308
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89309
sS'default'
p89310
g3
sS'name'
p89311
S'control_tags'
p89312
sS'required'
p89313
I00
sS'group_name'
p89314
S'Advanced'
p89315
sa(dp89316
S'description'
p89317
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p89318
sS'cpp_type'
p89319
S'bool'
p89320
sS'default'
p89321
S'0'
p89322
sS'name'
p89323
S'detect_steady_state'
p89324
sS'required'
p89325
I00
sS'group_name'
p89326
Nsa(dp89327
S'description'
p89328
S'Set the enabled status of the MooseObject.\n'
p89329
sS'cpp_type'
p89330
S'bool'
p89331
sS'default'
p89332
S'1'
p89333
sS'name'
p89334
S'enable'
p89335
sS'required'
p89336
I00
sS'group_name'
p89337
S'Advanced'
p89338
sa(dp89339
S'name'
p89340
S'execute_on'
p89341
sS'cpp_type'
p89342
S'MultiMooseEnum'
p89343
sS'default'
p89344
S'TIMESTEP_BEGIN'
p89345
sS'description'
p89346
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89347
sS'required'
p89348
I00
sS'options'
p89349
S'none initial linear nonlinear timestep_end timestep_begin custom'
p89350
sS'group_name'
p89351
Nsa(dp89352
S'description'
p89353
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89354
sS'cpp_type'
p89355
S'bool'
p89356
sS'default'
p89357
S'1'
p89358
sS'name'
p89359
S'implicit'
p89360
sS'required'
p89361
I00
sS'group_name'
p89362
S'Advanced'
p89363
sa(dp89364
S'description'
p89365
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89366
sS'cpp_type'
p89367
S'std::vector<FileName, std::allocator<FileName> >'
p89368
sS'default'
p89369
g3
sS'name'
p89370
S'input_files'
p89371
sS'required'
p89372
I01
sS'group_name'
p89373
Nsa(dp89374
S'description'
p89375
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p89376
sS'cpp_type'
p89377
S'bool'
p89378
sS'default'
p89379
S'0'
p89380
sS'name'
p89381
S'interpolate_transfers'
p89382
sS'required'
p89383
I00
sS'group_name'
p89384
Nsa(dp89385
S'description'
p89386
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89387
sS'cpp_type'
p89388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89389
sS'default'
p89390
g3
sS'name'
p89391
S'library_path'
p89392
sS'required'
p89393
I00
sS'group_name'
p89394
Nsa(dp89395
S'description'
p89396
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p89397
sS'cpp_type'
p89398
S'double'
p89399
sS'default'
p89400
S'2'
p89401
sS'name'
p89402
S'max_catch_up_steps'
p89403
sS'required'
p89404
I00
sS'group_name'
p89405
Nsa(dp89406
S'description'
p89407
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p89408
sS'cpp_type'
p89409
S'unsigned int'
p89410
sS'default'
p89411
S'0'
p89412
sS'name'
p89413
S'max_failures'
p89414
sS'required'
p89415
I00
sS'group_name'
p89416
Nsa(dp89417
S'description'
p89418
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89419
sS'cpp_type'
p89420
S'unsigned int'
p89421
sS'default'
p89422
S'4294967295'
p89423
sS'name'
p89424
S'max_procs_per_app'
p89425
sS'required'
p89426
I00
sS'group_name'
p89427
Nsa(dp89428
S'description'
p89429
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89430
sS'cpp_type'
p89431
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89432
sS'default'
p89433
g3
sS'name'
p89434
S'move_apps'
p89435
sS'required'
p89436
I00
sS'group_name'
p89437
Nsa(dp89438
S'description'
p89439
S'The positions corresponding to each move_app.\n'
p89440
sS'cpp_type'
p89441
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89442
sS'default'
p89443
g3
sS'name'
p89444
S'move_positions'
p89445
sS'required'
p89446
I00
sS'group_name'
p89447
Nsa(dp89448
S'description'
p89449
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89450
sS'cpp_type'
p89451
S'double'
p89452
sS'default'
p89453
S'1.79769e+308'
p89454
sS'name'
p89455
S'move_time'
p89456
sS'required'
p89457
I00
sS'group_name'
p89458
Nsa(dp89459
S'description'
p89460
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89461
sS'cpp_type'
p89462
S'bool'
p89463
sS'default'
p89464
S'0'
p89465
sS'name'
p89466
S'output_in_position'
p89467
sS'required'
p89468
I00
sS'group_name'
p89469
Nsa(dp89470
S'description'
p89471
S'If true then every sub-cycle will be output.\n'
p89472
sS'cpp_type'
p89473
S'bool'
p89474
sS'default'
p89475
S'0'
p89476
sS'name'
p89477
S'output_sub_cycles'
p89478
sS'required'
p89479
I00
sS'group_name'
p89480
Nsa(dp89481
S'description'
p89482
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p89483
sS'cpp_type'
p89484
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89485
sS'default'
p89486
g3
sS'name'
p89487
S'positions'
p89488
sS'required'
p89489
I00
sS'group_name'
p89490
Nsa(dp89491
S'description'
p89492
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p89493
sS'cpp_type'
p89494
S'std::vector<FileName, std::allocator<FileName> >'
p89495
sS'default'
p89496
g3
sS'name'
p89497
S'positions_file'
p89498
sS'required'
p89499
I00
sS'group_name'
p89500
Nsa(dp89501
S'description'
p89502
S'Toggle the display of sub-cycles on the screen.\n'
p89503
sS'cpp_type'
p89504
S'bool'
p89505
sS'default'
p89506
S'1'
p89507
sS'name'
p89508
S'print_sub_cycles'
p89509
sS'required'
p89510
I00
sS'group_name'
p89511
Nsa(dp89512
S'description'
p89513
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89514
sS'cpp_type'
p89515
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89516
sS'default'
p89517
g3
sS'name'
p89518
S'reset_apps'
p89519
sS'required'
p89520
I00
sS'group_name'
p89521
Nsa(dp89522
S'description'
p89523
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89524
sS'cpp_type'
p89525
S'double'
p89526
sS'default'
p89527
S'1.79769e+308'
p89528
sS'name'
p89529
S'reset_time'
p89530
sS'required'
p89531
I00
sS'group_name'
p89532
Nsa(dp89533
S'description'
p89534
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p89535
sS'cpp_type'
p89536
S'double'
p89537
sS'default'
p89538
S'1e-08'
p89539
sS'name'
p89540
S'steady_state_tol'
p89541
sS'required'
p89542
I00
sS'group_name'
p89543
Nsa(dp89544
S'description'
p89545
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p89546
sS'cpp_type'
p89547
S'bool'
p89548
sS'default'
p89549
S'0'
p89550
sS'name'
p89551
S'sub_cycling'
p89552
sS'required'
p89553
I00
sS'group_name'
p89554
Nsa(dp89555
S'description'
p89556
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p89557
sS'cpp_type'
p89558
S'bool'
p89559
sS'default'
p89560
S'0'
p89561
sS'name'
p89562
S'tolerate_failure'
p89563
sS'required'
p89564
I00
sS'group_name'
p89565
Nsa(dp89566
S'description'
p89567
g3
sS'cpp_type'
p89568
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89569
sS'default'
p89570
S'TransientMultiApp'
p89571
sS'name'
p89572
S'type'
p89573
sS'required'
p89574
I00
sS'group_name'
p89575
Nsa(dp89576
S'description'
p89577
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89578
sS'cpp_type'
p89579
S'bool'
p89580
sS'default'
p89581
S'0'
p89582
sS'name'
p89583
S'use_displaced_mesh'
p89584
sS'required'
p89585
I00
sS'group_name'
p89586
S'Advanced'
p89587
sasS'name'
p89588
S'/MultiApps/TransientMultiApp'
p89589
sasS'parameters'
p89590
NsS'name'
p89591
S'/MultiApps'
p89592
sa(dp89593
S'description'
p89594
g3
sS'subblocks'
p89595
(lp89596
(dp89597
S'description'
p89598
g3
sS'subblocks'
p89599
NsS'parameters'
p89600
(lp89601
(dp89602
S'description'
p89603
S'A string representing the Moose Object that will be built by this Action\n'
p89604
sS'cpp_type'
p89605
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89606
sS'default'
p89607
g3
sS'name'
p89608
S'type'
p89609
sS'required'
p89610
I01
sS'group_name'
p89611
NsasS'name'
p89612
S'/NodalKernels/*'
p89613
sa(dp89614
S'description'
p89615
g3
sS'subblocks'
p89616
NsS'parameters'
p89617
(lp89618
(dp89619
S'description'
p89620
S'The list of block ids (SubdomainID) that this object will be applied\n'
p89621
sS'cpp_type'
p89622
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p89623
sS'default'
p89624
g3
sS'name'
p89625
S'block'
p89626
sS'required'
p89627
I00
sS'group_name'
p89628
Nsa(dp89629
S'description'
p89630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p89631
sS'cpp_type'
p89632
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p89633
sS'default'
p89634
g3
sS'name'
p89635
S'boundary'
p89636
sS'required'
p89637
I00
sS'group_name'
p89638
Nsa(dp89639
S'description'
p89640
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89641
sS'cpp_type'
p89642
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89643
sS'default'
p89644
g3
sS'name'
p89645
S'control_tags'
p89646
sS'required'
p89647
I00
sS'group_name'
p89648
S'Advanced'
p89649
sa(dp89650
S'description'
p89651
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89652
sS'cpp_type'
p89653
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89654
sS'default'
p89655
g3
sS'name'
p89656
S'diag_save_in'
p89657
sS'required'
p89658
I00
sS'group_name'
p89659
Nsa(dp89660
S'description'
p89661
S'Set the enabled status of the MooseObject.\n'
p89662
sS'cpp_type'
p89663
S'bool'
p89664
sS'default'
p89665
S'1'
p89666
sS'name'
p89667
S'enable'
p89668
sS'required'
p89669
I00
sS'group_name'
p89670
S'Advanced'
p89671
sa(dp89672
S'description'
p89673
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89674
sS'cpp_type'
p89675
S'bool'
p89676
sS'default'
p89677
S'1'
p89678
sS'name'
p89679
S'implicit'
p89680
sS'required'
p89681
I00
sS'group_name'
p89682
S'Advanced'
p89683
sa(dp89684
S'description'
p89685
S"The constant rate in 'du/dt = rate'\n"
p89686
sS'cpp_type'
p89687
S'double'
p89688
sS'default'
p89689
g3
sS'name'
p89690
S'rate'
p89691
sS'required'
p89692
I01
sS'group_name'
p89693
Nsa(dp89694
S'description'
p89695
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89696
sS'cpp_type'
p89697
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89698
sS'default'
p89699
g3
sS'name'
p89700
S'save_in'
p89701
sS'required'
p89702
I00
sS'group_name'
p89703
Nsa(dp89704
S'description'
p89705
S'The seed for the master random number generator\n'
p89706
sS'cpp_type'
p89707
S'unsigned int'
p89708
sS'default'
p89709
S'0'
p89710
sS'name'
p89711
S'seed'
p89712
sS'required'
p89713
I00
sS'group_name'
p89714
S'Advanced'
p89715
sa(dp89716
S'description'
p89717
g3
sS'cpp_type'
p89718
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89719
sS'default'
p89720
S'ConstantRate'
p89721
sS'name'
p89722
S'type'
p89723
sS'required'
p89724
I00
sS'group_name'
p89725
Nsa(dp89726
S'description'
p89727
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89728
sS'cpp_type'
p89729
S'bool'
p89730
sS'default'
p89731
S'0'
p89732
sS'name'
p89733
S'use_displaced_mesh'
p89734
sS'required'
p89735
I00
sS'group_name'
p89736
S'Advanced'
p89737
sa(dp89738
S'description'
p89739
S'The name of the variable that this boundary condition applies to\n'
p89740
sS'cpp_type'
p89741
S'NonlinearVariableName'
p89742
sS'default'
p89743
g3
sS'name'
p89744
S'variable'
p89745
sS'required'
p89746
I01
sS'group_name'
p89747
NsasS'name'
p89748
S'/NodalKernels/ConstantRate'
p89749
sa(dp89750
S'description'
p89751
g3
sS'subblocks'
p89752
NsS'parameters'
p89753
(lp89754
(dp89755
S'description'
p89756
S'The list of block ids (SubdomainID) that this object will be applied\n'
p89757
sS'cpp_type'
p89758
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p89759
sS'default'
p89760
g3
sS'name'
p89761
S'block'
p89762
sS'required'
p89763
I00
sS'group_name'
p89764
Nsa(dp89765
S'description'
p89766
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p89767
sS'cpp_type'
p89768
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p89769
sS'default'
p89770
g3
sS'name'
p89771
S'boundary'
p89772
sS'required'
p89773
I00
sS'group_name'
p89774
Nsa(dp89775
S'description'
p89776
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89777
sS'cpp_type'
p89778
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89779
sS'default'
p89780
g3
sS'name'
p89781
S'control_tags'
p89782
sS'required'
p89783
I00
sS'group_name'
p89784
S'Advanced'
p89785
sa(dp89786
S'description'
p89787
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89788
sS'cpp_type'
p89789
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89790
sS'default'
p89791
g3
sS'name'
p89792
S'diag_save_in'
p89793
sS'required'
p89794
I00
sS'group_name'
p89795
Nsa(dp89796
S'description'
p89797
S'Set the enabled status of the MooseObject.\n'
p89798
sS'cpp_type'
p89799
S'bool'
p89800
sS'default'
p89801
S'1'
p89802
sS'name'
p89803
S'enable'
p89804
sS'required'
p89805
I00
sS'group_name'
p89806
S'Advanced'
p89807
sa(dp89808
S'description'
p89809
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89810
sS'cpp_type'
p89811
S'bool'
p89812
sS'default'
p89813
S'1'
p89814
sS'name'
p89815
S'implicit'
p89816
sS'required'
p89817
I00
sS'group_name'
p89818
S'Advanced'
p89819
sa(dp89820
S'description'
p89821
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89822
sS'cpp_type'
p89823
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89824
sS'default'
p89825
g3
sS'name'
p89826
S'save_in'
p89827
sS'required'
p89828
I00
sS'group_name'
p89829
Nsa(dp89830
S'description'
p89831
S'The seed for the master random number generator\n'
p89832
sS'cpp_type'
p89833
S'unsigned int'
p89834
sS'default'
p89835
S'0'
p89836
sS'name'
p89837
S'seed'
p89838
sS'required'
p89839
I00
sS'group_name'
p89840
S'Advanced'
p89841
sa(dp89842
S'description'
p89843
g3
sS'cpp_type'
p89844
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89845
sS'default'
p89846
S'TimeDerivativeNodalKernel'
p89847
sS'name'
p89848
S'type'
p89849
sS'required'
p89850
I00
sS'group_name'
p89851
Nsa(dp89852
S'description'
p89853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89854
sS'cpp_type'
p89855
S'bool'
p89856
sS'default'
p89857
S'0'
p89858
sS'name'
p89859
S'use_displaced_mesh'
p89860
sS'required'
p89861
I00
sS'group_name'
p89862
S'Advanced'
p89863
sa(dp89864
S'description'
p89865
S'The name of the variable that this boundary condition applies to\n'
p89866
sS'cpp_type'
p89867
S'NonlinearVariableName'
p89868
sS'default'
p89869
g3
sS'name'
p89870
S'variable'
p89871
sS'required'
p89872
I01
sS'group_name'
p89873
NsasS'name'
p89874
S'/NodalKernels/TimeDerivativeNodalKernel'
p89875
sa(dp89876
S'description'
p89877
g3
sS'subblocks'
p89878
NsS'parameters'
p89879
(lp89880
(dp89881
S'description'
p89882
S'The list of block ids (SubdomainID) that this object will be applied\n'
p89883
sS'cpp_type'
p89884
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p89885
sS'default'
p89886
g3
sS'name'
p89887
S'block'
p89888
sS'required'
p89889
I00
sS'group_name'
p89890
Nsa(dp89891
S'description'
p89892
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p89893
sS'cpp_type'
p89894
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p89895
sS'default'
p89896
g3
sS'name'
p89897
S'boundary'
p89898
sS'required'
p89899
I00
sS'group_name'
p89900
Nsa(dp89901
S'description'
p89902
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89903
sS'cpp_type'
p89904
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89905
sS'default'
p89906
g3
sS'name'
p89907
S'control_tags'
p89908
sS'required'
p89909
I00
sS'group_name'
p89910
S'Advanced'
p89911
sa(dp89912
S'description'
p89913
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89914
sS'cpp_type'
p89915
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89916
sS'default'
p89917
g3
sS'name'
p89918
S'diag_save_in'
p89919
sS'required'
p89920
I00
sS'group_name'
p89921
Nsa(dp89922
S'description'
p89923
S'Set the enabled status of the MooseObject.\n'
p89924
sS'cpp_type'
p89925
S'bool'
p89926
sS'default'
p89927
S'1'
p89928
sS'name'
p89929
S'enable'
p89930
sS'required'
p89931
I00
sS'group_name'
p89932
S'Advanced'
p89933
sa(dp89934
S'description'
p89935
S'The forcing function\n'
p89936
sS'cpp_type'
p89937
S'FunctionName'
p89938
sS'default'
p89939
g3
sS'name'
p89940
S'function'
p89941
sS'required'
p89942
I01
sS'group_name'
p89943
Nsa(dp89944
S'description'
p89945
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89946
sS'cpp_type'
p89947
S'bool'
p89948
sS'default'
p89949
S'1'
p89950
sS'name'
p89951
S'implicit'
p89952
sS'required'
p89953
I00
sS'group_name'
p89954
S'Advanced'
p89955
sa(dp89956
S'description'
p89957
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89958
sS'cpp_type'
p89959
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89960
sS'default'
p89961
g3
sS'name'
p89962
S'save_in'
p89963
sS'required'
p89964
I00
sS'group_name'
p89965
Nsa(dp89966
S'description'
p89967
S'The seed for the master random number generator\n'
p89968
sS'cpp_type'
p89969
S'unsigned int'
p89970
sS'default'
p89971
S'0'
p89972
sS'name'
p89973
S'seed'
p89974
sS'required'
p89975
I00
sS'group_name'
p89976
S'Advanced'
p89977
sa(dp89978
S'description'
p89979
g3
sS'cpp_type'
p89980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89981
sS'default'
p89982
S'UserForcingFunctionNodalKernel'
p89983
sS'name'
p89984
S'type'
p89985
sS'required'
p89986
I00
sS'group_name'
p89987
Nsa(dp89988
S'description'
p89989
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89990
sS'cpp_type'
p89991
S'bool'
p89992
sS'default'
p89993
S'0'
p89994
sS'name'
p89995
S'use_displaced_mesh'
p89996
sS'required'
p89997
I00
sS'group_name'
p89998
S'Advanced'
p89999
sa(dp90000
S'description'
p90001
S'The name of the variable that this boundary condition applies to\n'
p90002
sS'cpp_type'
p90003
S'NonlinearVariableName'
p90004
sS'default'
p90005
g3
sS'name'
p90006
S'variable'
p90007
sS'required'
p90008
I01
sS'group_name'
p90009
NsasS'name'
p90010
S'/NodalKernels/UserForcingFunctionNodalKernel'
p90011
sasS'parameters'
p90012
NsS'name'
p90013
S'/NodalKernels'
p90014
sa(dp90015
S'description'
p90016
g3
sS'subblocks'
p90017
NsS'parameters'
p90018
(lp90019
(dp90020
S'description'
p90021
S'The boundary ID or name where the normals will be computed\n'
p90022
sS'cpp_type'
p90023
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p90024
sS'default'
p90025
S'ANY_BOUNDARY_ID'
p90026
sS'name'
p90027
S'boundary'
p90028
sS'required'
p90029
I00
sS'group_name'
p90030
Nsa(dp90031
S'description'
p90032
S"boundary ID or name with nodes at 'corners'\n"
p90033
sS'cpp_type'
p90034
S'BoundaryName'
p90035
sS'default'
p90036
g3
sS'name'
p90037
S'corner_boundary'
p90038
sS'required'
p90039
I00
sS'group_name'
p90040
Nsa(dp90041
S'name'
p90042
S'order'
p90043
sS'cpp_type'
p90044
S'MooseEnum'
p90045
sS'default'
p90046
S'FIRST'
p90047
sS'description'
p90048
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p90049
sS'required'
p90050
I00
sS'options'
p90051
S'FIRST SECOND'
p90052
sS'group_name'
p90053
NsasS'name'
p90054
S'/NodalNormals'
p90055
sa(dp90056
S'description'
p90057
g3
sS'subblocks'
p90058
(lp90059
(dp90060
S'description'
p90061
g3
sS'subblocks'
p90062
NsS'parameters'
p90063
(lp90064
(dp90065
S'description'
p90066
S'A string representing the Moose Object that will be built by this Action\n'
p90067
sS'cpp_type'
p90068
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90069
sS'default'
p90070
g3
sS'name'
p90071
S'type'
p90072
sS'required'
p90073
I01
sS'group_name'
p90074
NsasS'name'
p90075
S'/Outputs/*'
p90076
sa(dp90077
S'description'
p90078
g3
sS'subblocks'
p90079
NsS'parameters'
p90080
(lp90081
(dp90082
S'name'
p90083
S'additional_execute_on'
p90084
sS'cpp_type'
p90085
S'MultiMooseEnum'
p90086
sS'default'
p90087
g3
sS'description'
p90088
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90089
sS'required'
p90090
I00
sS'options'
p90091
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90092
sS'group_name'
p90093
Nsa(dp90094
S'description'
p90095
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p90096
sS'cpp_type'
p90097
S'bool'
p90098
sS'default'
p90099
S'0'
p90100
sS'name'
p90101
S'align'
p90102
sS'required'
p90103
I00
sS'group_name'
p90104
Nsa(dp90105
S'description'
p90106
S'When true the date and time are appended to the output filename.\n'
p90107
sS'cpp_type'
p90108
S'bool'
p90109
sS'default'
p90110
S'0'
p90111
sS'name'
p90112
S'append_date'
p90113
sS'required'
p90114
I00
sS'group_name'
p90115
Nsa(dp90116
S'description'
p90117
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p90118
sS'cpp_type'
p90119
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90120
sS'default'
p90121
g3
sS'name'
p90122
S'append_date_format'
p90123
sS'required'
p90124
I00
sS'group_name'
p90125
Nsa(dp90126
S'description'
p90127
S'Append existing file on restart\n'
p90128
sS'cpp_type'
p90129
S'bool'
p90130
sS'default'
p90131
S'0'
p90132
sS'name'
p90133
S'append_restart'
p90134
sS'required'
p90135
I00
sS'group_name'
p90136
Nsa(dp90137
S'description'
p90138
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90139
sS'cpp_type'
p90140
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90141
sS'default'
p90142
g3
sS'name'
p90143
S'control_tags'
p90144
sS'required'
p90145
I00
sS'group_name'
p90146
S'Advanced'
p90147
sa(dp90148
S'description'
p90149
S"Assign the delimiter (default is ','\n"
p90150
sS'cpp_type'
p90151
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90152
sS'default'
p90153
g3
sS'name'
p90154
S'delimiter'
p90155
sS'required'
p90156
I00
sS'group_name'
p90157
Nsa(dp90158
S'description'
p90159
S'Set the enabled status of the MooseObject.\n'
p90160
sS'cpp_type'
p90161
S'bool'
p90162
sS'default'
p90163
S'1'
p90164
sS'name'
p90165
S'enable'
p90166
sS'required'
p90167
I00
sS'group_name'
p90168
S'Advanced'
p90169
sa(dp90170
S'description'
p90171
S'Time at which this output object stop operating\n'
p90172
sS'cpp_type'
p90173
S'double'
p90174
sS'default'
p90175
g3
sS'name'
p90176
S'end_time'
p90177
sS'required'
p90178
I00
sS'group_name'
p90179
S'Timing'
p90180
sa(dp90181
S'description'
p90182
S'Enable/disable the output of elemental variables\n'
p90183
sS'cpp_type'
p90184
S'bool'
p90185
sS'default'
p90186
S'1'
p90187
sS'name'
p90188
S'execute_elemental_variables'
p90189
sS'required'
p90190
I00
sS'group_name'
p90191
Nsa(dp90192
S'description'
p90193
S'Enable/disable the output of input file information\n'
p90194
sS'cpp_type'
p90195
S'bool'
p90196
sS'default'
p90197
S'1'
p90198
sS'name'
p90199
S'execute_input'
p90200
sS'required'
p90201
I00
sS'group_name'
p90202
Nsa(dp90203
S'description'
p90204
S'Enable/disable the output of nodal variables\n'
p90205
sS'cpp_type'
p90206
S'bool'
p90207
sS'default'
p90208
S'1'
p90209
sS'name'
p90210
S'execute_nodal_variables'
p90211
sS'required'
p90212
I00
sS'group_name'
p90213
Nsa(dp90214
S'name'
p90215
S'execute_on'
p90216
sS'cpp_type'
p90217
S'MultiMooseEnum'
p90218
sS'default'
p90219
S'INITIAL TIMESTEP_END'
p90220
sS'description'
p90221
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90222
sS'required'
p90223
I00
sS'options'
p90224
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90225
sS'group_name'
p90226
Nsa(dp90227
S'name'
p90228
S'execute_postprocessors_on'
p90229
sS'cpp_type'
p90230
S'MultiMooseEnum'
p90231
sS'default'
p90232
g3
sS'description'
p90233
S'Control of when postprocessors are output\n'
p90234
sS'required'
p90235
I00
sS'options'
p90236
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90237
sS'group_name'
p90238
S'Variables'
p90239
sa(dp90240
S'description'
p90241
S'Enable/disable the output of aux scalar variables\n'
p90242
sS'cpp_type'
p90243
S'bool'
p90244
sS'default'
p90245
S'1'
p90246
sS'name'
p90247
S'execute_scalar_variables'
p90248
sS'required'
p90249
I00
sS'group_name'
p90250
Nsa(dp90251
S'name'
p90252
S'execute_scalars_on'
p90253
sS'cpp_type'
p90254
S'MultiMooseEnum'
p90255
sS'default'
p90256
g3
sS'description'
p90257
S'Control the output of scalar variables\n'
p90258
sS'required'
p90259
I00
sS'options'
p90260
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90261
sS'group_name'
p90262
S'Variables'
p90263
sa(dp90264
S'description'
p90265
S'Enable/disable the output of the simulation information\n'
p90266
sS'cpp_type'
p90267
S'bool'
p90268
sS'default'
p90269
S'1'
p90270
sS'name'
p90271
S'execute_system_information'
p90272
sS'required'
p90273
I00
sS'group_name'
p90274
Nsa(dp90275
S'description'
p90276
S'Enable/disable the output of vector postprocessors\n'
p90277
sS'cpp_type'
p90278
S'bool'
p90279
sS'default'
p90280
S'1'
p90281
sS'name'
p90282
S'execute_vector_postprocessors'
p90283
sS'required'
p90284
I00
sS'group_name'
p90285
Nsa(dp90286
S'name'
p90287
S'execute_vector_postprocessors_on'
p90288
sS'cpp_type'
p90289
S'MultiMooseEnum'
p90290
sS'default'
p90291
g3
sS'description'
p90292
S'Enable/disable the output of VectorPostprocessors\n'
p90293
sS'required'
p90294
I00
sS'options'
p90295
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90296
sS'group_name'
p90297
S'Variables'
p90298
sa(dp90299
S'description'
p90300
S'The desired solution output name without an extension\n'
p90301
sS'cpp_type'
p90302
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90303
sS'default'
p90304
g3
sS'name'
p90305
S'file_base'
p90306
sS'required'
p90307
I00
sS'group_name'
p90308
Nsa(dp90309
S'description'
p90310
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p90311
sS'cpp_type'
p90312
S'std::vector<VariableName, std::allocator<VariableName> >'
p90313
sS'default'
p90314
g3
sS'name'
p90315
S'hide'
p90316
sS'required'
p90317
I00
sS'group_name'
p90318
S'Variables'
p90319
sa(dp90320
S'description'
p90321
S'The interval at which time steps are output to the solution file\n'
p90322
sS'cpp_type'
p90323
S'unsigned int'
p90324
sS'default'
p90325
S'1'
p90326
sS'name'
p90327
S'interval'
p90328
sS'required'
p90329
I00
sS'group_name'
p90330
S'Timing'
p90331
sa(dp90332
S'description'
p90333
S'Number of divisions applied to time step when outputting linear residuals\n'
p90334
sS'cpp_type'
p90335
S'double'
p90336
sS'default'
p90337
S'1000'
p90338
sS'name'
p90339
S'linear_residual_dt_divisor'
p90340
sS'required'
p90341
I00
sS'group_name'
p90342
S'PETSc'
p90343
sa(dp90344
S'description'
p90345
S'Specifies an end time to begin output on each linear residual evaluation\n'
p90346
sS'cpp_type'
p90347
S'double'
p90348
sS'default'
p90349
g3
sS'name'
p90350
S'linear_residual_end_time'
p90351
sS'required'
p90352
I00
sS'group_name'
p90353
S'PETSc'
p90354
sa(dp90355
S'description'
p90356
S'Specifies a start time to begin output on each linear residual evaluation\n'
p90357
sS'cpp_type'
p90358
S'double'
p90359
sS'default'
p90360
g3
sS'name'
p90361
S'linear_residual_start_time'
p90362
sS'required'
p90363
I00
sS'group_name'
p90364
S'PETSc'
p90365
sa(dp90366
S'description'
p90367
S'Specifies whether output occurs on each linear residual evaluation\n'
p90368
sS'cpp_type'
p90369
S'bool'
p90370
sS'default'
p90371
S'0'
p90372
sS'name'
p90373
S'linear_residuals'
p90374
sS'required'
p90375
I00
sS'group_name'
p90376
S'PETSc'
p90377
sa(dp90378
S'description'
p90379
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p90380
sS'cpp_type'
p90381
S'double'
p90382
sS'default'
p90383
S'1000'
p90384
sS'name'
p90385
S'nonlinear_residual_dt_divisor'
p90386
sS'required'
p90387
I00
sS'group_name'
p90388
S'PETSc'
p90389
sa(dp90390
S'description'
p90391
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p90392
sS'cpp_type'
p90393
S'double'
p90394
sS'default'
p90395
g3
sS'name'
p90396
S'nonlinear_residual_end_time'
p90397
sS'required'
p90398
I00
sS'group_name'
p90399
S'PETSc'
p90400
sa(dp90401
S'description'
p90402
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p90403
sS'cpp_type'
p90404
S'double'
p90405
sS'default'
p90406
g3
sS'name'
p90407
S'nonlinear_residual_start_time'
p90408
sS'required'
p90409
I00
sS'group_name'
p90410
S'PETSc'
p90411
sa(dp90412
S'description'
p90413
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90414
sS'cpp_type'
p90415
S'bool'
p90416
sS'default'
p90417
S'0'
p90418
sS'name'
p90419
S'nonlinear_residuals'
p90420
sS'required'
p90421
I00
sS'group_name'
p90422
S'PETSc'
p90423
sa(dp90424
S'description'
p90425
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p90426
sS'cpp_type'
p90427
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90428
sS'default'
p90429
g3
sS'name'
p90430
S'output_if_base_contains'
p90431
sS'required'
p90432
I00
sS'group_name'
p90433
S'Advanced'
p90434
sa(dp90435
S'description'
p90436
S'Specifies whether output occurs on each linear residual evaluation\n'
p90437
sS'cpp_type'
p90438
S'bool'
p90439
sS'default'
p90440
S'0'
p90441
sS'name'
p90442
S'output_linear'
p90443
sS'required'
p90444
I00
sS'group_name'
p90445
Nsa(dp90446
S'description'
p90447
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90448
sS'cpp_type'
p90449
S'bool'
p90450
sS'default'
p90451
S'0'
p90452
sS'name'
p90453
S'output_nonlinear'
p90454
sS'required'
p90455
I00
sS'group_name'
p90456
Nsa(dp90457
S'description'
p90458
S'Enable/disable the output of postprocessors\n'
p90459
sS'cpp_type'
p90460
S'bool'
p90461
sS'default'
p90462
S'1'
p90463
sS'name'
p90464
S'output_postprocessors'
p90465
sS'required'
p90466
I00
sS'group_name'
p90467
Nsa(dp90468
S'description'
p90469
S'Set the output precision\n'
p90470
sS'cpp_type'
p90471
S'unsigned int'
p90472
sS'default'
p90473
S'14'
p90474
sS'name'
p90475
S'precision'
p90476
sS'required'
p90477
I00
sS'group_name'
p90478
Nsa(dp90479
S'description'
p90480
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p90481
sS'cpp_type'
p90482
S'std::vector<VariableName, std::allocator<VariableName> >'
p90483
sS'default'
p90484
g3
sS'name'
p90485
S'show'
p90486
sS'required'
p90487
I00
sS'group_name'
p90488
S'Variables'
p90489
sa(dp90490
S'description'
p90491
S'Toggle the sorting of columns alphabetically.\n'
p90492
sS'cpp_type'
p90493
S'bool'
p90494
sS'default'
p90495
S'0'
p90496
sS'name'
p90497
S'sort_columns'
p90498
sS'required'
p90499
I00
sS'group_name'
p90500
Nsa(dp90501
S'description'
p90502
S'Time at which this output object begins to operate\n'
p90503
sS'cpp_type'
p90504
S'double'
p90505
sS'default'
p90506
g3
sS'name'
p90507
S'start_time'
p90508
sS'required'
p90509
I00
sS'group_name'
p90510
S'Timing'
p90511
sa(dp90512
S'description'
p90513
S'Only export results at sync times\n'
p90514
sS'cpp_type'
p90515
S'bool'
p90516
sS'default'
p90517
S'0'
p90518
sS'name'
p90519
S'sync_only'
p90520
sS'required'
p90521
I00
sS'group_name'
p90522
S'Timing'
p90523
sa(dp90524
S'description'
p90525
S'Times at which the output and solution is forced to occur\n'
p90526
sS'cpp_type'
p90527
S'std::vector<double, std::allocator<double> >'
p90528
sS'default'
p90529
g3
sS'name'
p90530
S'sync_times'
p90531
sS'required'
p90532
I00
sS'group_name'
p90533
S'Timing'
p90534
sa(dp90535
S'description'
p90536
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p90537
sS'cpp_type'
p90538
S'bool'
p90539
sS'default'
p90540
S'1'
p90541
sS'name'
p90542
S'time_column'
p90543
sS'required'
p90544
I00
sS'group_name'
p90545
Nsa(dp90546
S'description'
p90547
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p90548
sS'cpp_type'
p90549
S'bool'
p90550
sS'default'
p90551
S'0'
p90552
sS'name'
p90553
S'time_data'
p90554
sS'required'
p90555
I00
sS'group_name'
p90556
Nsa(dp90557
S'description'
p90558
S'Time tolerance utilized checking start and end times\n'
p90559
sS'cpp_type'
p90560
S'double'
p90561
sS'default'
p90562
S'1e-14'
p90563
sS'name'
p90564
S'time_tolerance'
p90565
sS'required'
p90566
I00
sS'group_name'
p90567
S'Timing'
p90568
sa(dp90569
S'description'
p90570
g3
sS'cpp_type'
p90571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90572
sS'default'
p90573
S'CSV'
p90574
sS'name'
p90575
S'type'
p90576
sS'required'
p90577
I00
sS'group_name'
p90578
Nsa(dp90579
S'description'
p90580
S'Enable/disable the use of the displaced mesh for outputting\n'
p90581
sS'cpp_type'
p90582
S'bool'
p90583
sS'default'
p90584
S'0'
p90585
sS'name'
p90586
S'use_displaced'
p90587
sS'required'
p90588
I00
sS'group_name'
p90589
NsasS'name'
p90590
S'/Outputs/CSV'
p90591
sa(dp90592
S'description'
p90593
g3
sS'subblocks'
p90594
NsS'parameters'
p90595
(lp90596
(dp90597
S'name'
p90598
S'additional_execute_on'
p90599
sS'cpp_type'
p90600
S'MultiMooseEnum'
p90601
sS'default'
p90602
g3
sS'description'
p90603
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90604
sS'required'
p90605
I00
sS'options'
p90606
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90607
sS'group_name'
p90608
Nsa(dp90609
S'description'
p90610
S'When true the date and time are appended to the output filename.\n'
p90611
sS'cpp_type'
p90612
S'bool'
p90613
sS'default'
p90614
S'0'
p90615
sS'name'
p90616
S'append_date'
p90617
sS'required'
p90618
I00
sS'group_name'
p90619
Nsa(dp90620
S'description'
p90621
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p90622
sS'cpp_type'
p90623
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90624
sS'default'
p90625
g3
sS'name'
p90626
S'append_date_format'
p90627
sS'required'
p90628
I00
sS'group_name'
p90629
Nsa(dp90630
S'description'
p90631
S'Toggle the output of binary files\n'
p90632
sS'cpp_type'
p90633
S'bool'
p90634
sS'default'
p90635
S'1'
p90636
sS'name'
p90637
S'binary'
p90638
sS'required'
p90639
I00
sS'group_name'
p90640
S'Advanced'
p90641
sa(dp90642
S'description'
p90643
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90644
sS'cpp_type'
p90645
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90646
sS'default'
p90647
g3
sS'name'
p90648
S'control_tags'
p90649
sS'required'
p90650
I00
sS'group_name'
p90651
S'Advanced'
p90652
sa(dp90653
S'description'
p90654
S'Set the enabled status of the MooseObject.\n'
p90655
sS'cpp_type'
p90656
S'bool'
p90657
sS'default'
p90658
S'1'
p90659
sS'name'
p90660
S'enable'
p90661
sS'required'
p90662
I00
sS'group_name'
p90663
S'Advanced'
p90664
sa(dp90665
S'description'
p90666
S'Time at which this output object stop operating\n'
p90667
sS'cpp_type'
p90668
S'double'
p90669
sS'default'
p90670
g3
sS'name'
p90671
S'end_time'
p90672
sS'required'
p90673
I00
sS'group_name'
p90674
S'Timing'
p90675
sa(dp90676
S'name'
p90677
S'execute_on'
p90678
sS'cpp_type'
p90679
S'MultiMooseEnum'
p90680
sS'default'
p90681
S'INITIAL TIMESTEP_END'
p90682
sS'description'
p90683
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90684
sS'required'
p90685
I00
sS'options'
p90686
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90687
sS'group_name'
p90688
Nsa(dp90689
S'description'
p90690
S'The desired solution output name without an extension\n'
p90691
sS'cpp_type'
p90692
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90693
sS'default'
p90694
g3
sS'name'
p90695
S'file_base'
p90696
sS'required'
p90697
I00
sS'group_name'
p90698
Nsa(dp90699
S'description'
p90700
S'The interval at which time steps are output to the solution file\n'
p90701
sS'cpp_type'
p90702
S'unsigned int'
p90703
sS'default'
p90704
S'1'
p90705
sS'name'
p90706
S'interval'
p90707
sS'required'
p90708
I00
sS'group_name'
p90709
S'Timing'
p90710
sa(dp90711
S'description'
p90712
S'Number of divisions applied to time step when outputting linear residuals\n'
p90713
sS'cpp_type'
p90714
S'double'
p90715
sS'default'
p90716
S'1000'
p90717
sS'name'
p90718
S'linear_residual_dt_divisor'
p90719
sS'required'
p90720
I00
sS'group_name'
p90721
S'PETSc'
p90722
sa(dp90723
S'description'
p90724
S'Specifies an end time to begin output on each linear residual evaluation\n'
p90725
sS'cpp_type'
p90726
S'double'
p90727
sS'default'
p90728
g3
sS'name'
p90729
S'linear_residual_end_time'
p90730
sS'required'
p90731
I00
sS'group_name'
p90732
S'PETSc'
p90733
sa(dp90734
S'description'
p90735
S'Specifies a start time to begin output on each linear residual evaluation\n'
p90736
sS'cpp_type'
p90737
S'double'
p90738
sS'default'
p90739
g3
sS'name'
p90740
S'linear_residual_start_time'
p90741
sS'required'
p90742
I00
sS'group_name'
p90743
S'PETSc'
p90744
sa(dp90745
S'description'
p90746
S'Specifies whether output occurs on each linear residual evaluation\n'
p90747
sS'cpp_type'
p90748
S'bool'
p90749
sS'default'
p90750
S'0'
p90751
sS'name'
p90752
S'linear_residuals'
p90753
sS'required'
p90754
I00
sS'group_name'
p90755
S'PETSc'
p90756
sa(dp90757
S'description'
p90758
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p90759
sS'cpp_type'
p90760
S'double'
p90761
sS'default'
p90762
S'1000'
p90763
sS'name'
p90764
S'nonlinear_residual_dt_divisor'
p90765
sS'required'
p90766
I00
sS'group_name'
p90767
S'PETSc'
p90768
sa(dp90769
S'description'
p90770
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p90771
sS'cpp_type'
p90772
S'double'
p90773
sS'default'
p90774
g3
sS'name'
p90775
S'nonlinear_residual_end_time'
p90776
sS'required'
p90777
I00
sS'group_name'
p90778
S'PETSc'
p90779
sa(dp90780
S'description'
p90781
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p90782
sS'cpp_type'
p90783
S'double'
p90784
sS'default'
p90785
g3
sS'name'
p90786
S'nonlinear_residual_start_time'
p90787
sS'required'
p90788
I00
sS'group_name'
p90789
S'PETSc'
p90790
sa(dp90791
S'description'
p90792
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90793
sS'cpp_type'
p90794
S'bool'
p90795
sS'default'
p90796
S'0'
p90797
sS'name'
p90798
S'nonlinear_residuals'
p90799
sS'required'
p90800
I00
sS'group_name'
p90801
S'PETSc'
p90802
sa(dp90803
S'description'
p90804
S'Number of the restart files to save\n'
p90805
sS'cpp_type'
p90806
S'unsigned int'
p90807
sS'default'
p90808
S'2'
p90809
sS'name'
p90810
S'num_files'
p90811
sS'required'
p90812
I00
sS'group_name'
p90813
Nsa(dp90814
S'description'
p90815
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p90816
sS'cpp_type'
p90817
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90818
sS'default'
p90819
g3
sS'name'
p90820
S'output_if_base_contains'
p90821
sS'required'
p90822
I00
sS'group_name'
p90823
S'Advanced'
p90824
sa(dp90825
S'description'
p90826
S'Specifies whether output occurs on each linear residual evaluation\n'
p90827
sS'cpp_type'
p90828
S'bool'
p90829
sS'default'
p90830
S'0'
p90831
sS'name'
p90832
S'output_linear'
p90833
sS'required'
p90834
I00
sS'group_name'
p90835
Nsa(dp90836
S'description'
p90837
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90838
sS'cpp_type'
p90839
S'bool'
p90840
sS'default'
p90841
S'0'
p90842
sS'name'
p90843
S'output_nonlinear'
p90844
sS'required'
p90845
I00
sS'group_name'
p90846
Nsa(dp90847
S'description'
p90848
S'The number of for extension suffix (e.g., out.e-s002)\n'
p90849
sS'cpp_type'
p90850
S'unsigned int'
p90851
sS'default'
p90852
S'4'
p90853
sS'name'
p90854
S'padding'
p90855
sS'required'
p90856
I00
sS'group_name'
p90857
S'Advanced'
p90858
sa(dp90859
S'description'
p90860
S'Time at which this output object begins to operate\n'
p90861
sS'cpp_type'
p90862
S'double'
p90863
sS'default'
p90864
g3
sS'name'
p90865
S'start_time'
p90866
sS'required'
p90867
I00
sS'group_name'
p90868
S'Timing'
p90869
sa(dp90870
S'description'
p90871
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p90872
sS'cpp_type'
p90873
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90874
sS'default'
p90875
S'cp'
p90876
sS'name'
p90877
S'suffix'
p90878
sS'required'
p90879
I00
sS'group_name'
p90880
Nsa(dp90881
S'description'
p90882
S'Only export results at sync times\n'
p90883
sS'cpp_type'
p90884
S'bool'
p90885
sS'default'
p90886
S'0'
p90887
sS'name'
p90888
S'sync_only'
p90889
sS'required'
p90890
I00
sS'group_name'
p90891
S'Timing'
p90892
sa(dp90893
S'description'
p90894
S'Times at which the output and solution is forced to occur\n'
p90895
sS'cpp_type'
p90896
S'std::vector<double, std::allocator<double> >'
p90897
sS'default'
p90898
g3
sS'name'
p90899
S'sync_times'
p90900
sS'required'
p90901
I00
sS'group_name'
p90902
S'Timing'
p90903
sa(dp90904
S'description'
p90905
S'Time tolerance utilized checking start and end times\n'
p90906
sS'cpp_type'
p90907
S'double'
p90908
sS'default'
p90909
S'1e-14'
p90910
sS'name'
p90911
S'time_tolerance'
p90912
sS'required'
p90913
I00
sS'group_name'
p90914
S'Timing'
p90915
sa(dp90916
S'description'
p90917
g3
sS'cpp_type'
p90918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90919
sS'default'
p90920
S'Checkpoint'
p90921
sS'name'
p90922
S'type'
p90923
sS'required'
p90924
I00
sS'group_name'
p90925
Nsa(dp90926
S'description'
p90927
S'Enable/disable the use of the displaced mesh for outputting\n'
p90928
sS'cpp_type'
p90929
S'bool'
p90930
sS'default'
p90931
S'0'
p90932
sS'name'
p90933
S'use_displaced'
p90934
sS'required'
p90935
I00
sS'group_name'
p90936
NsasS'name'
p90937
S'/Outputs/Checkpoint'
p90938
sa(dp90939
S'description'
p90940
g3
sS'subblocks'
p90941
NsS'parameters'
p90942
(lp90943
(dp90944
S'name'
p90945
S'additional_execute_on'
p90946
sS'cpp_type'
p90947
S'MultiMooseEnum'
p90948
sS'default'
p90949
g3
sS'description'
p90950
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90951
sS'required'
p90952
I00
sS'options'
p90953
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90954
sS'group_name'
p90955
Nsa(dp90956
S'description'
p90957
S'If true, all variable norms will be printed after each solve\n'
p90958
sS'cpp_type'
p90959
S'bool'
p90960
sS'default'
p90961
S'0'
p90962
sS'name'
p90963
S'all_variable_norms'
p90964
sS'required'
p90965
I00
sS'group_name'
p90966
S'Norms'
p90967
sa(dp90968
S'description'
p90969
S'When true the date and time are appended to the output filename.\n'
p90970
sS'cpp_type'
p90971
S'bool'
p90972
sS'default'
p90973
S'0'
p90974
sS'name'
p90975
S'append_date'
p90976
sS'required'
p90977
I00
sS'group_name'
p90978
Nsa(dp90979
S'description'
p90980
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p90981
sS'cpp_type'
p90982
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90983
sS'default'
p90984
g3
sS'name'
p90985
S'append_date_format'
p90986
sS'required'
p90987
I00
sS'group_name'
p90988
Nsa(dp90989
S'description'
p90990
S'Append existing file on restart\n'
p90991
sS'cpp_type'
p90992
S'bool'
p90993
sS'default'
p90994
S'0'
p90995
sS'name'
p90996
S'append_restart'
p90997
sS'required'
p90998
I00
sS'group_name'
p90999
Nsa(dp91000
S'description'
p91001
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91002
sS'cpp_type'
p91003
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91004
sS'default'
p91005
g3
sS'name'
p91006
S'control_tags'
p91007
sS'required'
p91008
I00
sS'group_name'
p91009
S'Advanced'
p91010
sa(dp91011
S'description'
p91012
S'Set the enabled status of the MooseObject.\n'
p91013
sS'cpp_type'
p91014
S'bool'
p91015
sS'default'
p91016
S'1'
p91017
sS'name'
p91018
S'enable'
p91019
sS'required'
p91020
I00
sS'group_name'
p91021
S'Advanced'
p91022
sa(dp91023
S'description'
p91024
S'Time at which this output object stop operating\n'
p91025
sS'cpp_type'
p91026
S'double'
p91027
sS'default'
p91028
g3
sS'name'
p91029
S'end_time'
p91030
sS'required'
p91031
I00
sS'group_name'
p91032
S'Timing'
p91033
sa(dp91034
S'description'
p91035
S'Enable/disable the output of elemental variables\n'
p91036
sS'cpp_type'
p91037
S'bool'
p91038
sS'default'
p91039
S'1'
p91040
sS'name'
p91041
S'execute_elemental_variables'
p91042
sS'required'
p91043
I00
sS'group_name'
p91044
Nsa(dp91045
S'description'
p91046
S'Enable/disable the output of input file information\n'
p91047
sS'cpp_type'
p91048
S'bool'
p91049
sS'default'
p91050
S'1'
p91051
sS'name'
p91052
S'execute_input'
p91053
sS'required'
p91054
I00
sS'group_name'
p91055
Nsa(dp91056
S'name'
p91057
S'execute_input_on'
p91058
sS'cpp_type'
p91059
S'MultiMooseEnum'
p91060
sS'default'
p91061
g3
sS'description'
p91062
S'Enable/disable the output of the input file\n'
p91063
sS'required'
p91064
I00
sS'options'
p91065
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91066
sS'group_name'
p91067
S'Variables'
p91068
sa(dp91069
S'description'
p91070
S'Enable/disable the output of nodal variables\n'
p91071
sS'cpp_type'
p91072
S'bool'
p91073
sS'default'
p91074
S'1'
p91075
sS'name'
p91076
S'execute_nodal_variables'
p91077
sS'required'
p91078
I00
sS'group_name'
p91079
Nsa(dp91080
S'name'
p91081
S'execute_on'
p91082
sS'cpp_type'
p91083
S'MultiMooseEnum'
p91084
sS'default'
p91085
S'FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p91086
sS'description'
p91087
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91088
sS'required'
p91089
I00
sS'options'
p91090
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91091
sS'group_name'
p91092
Nsa(dp91093
S'name'
p91094
S'execute_postprocessors_on'
p91095
sS'cpp_type'
p91096
S'MultiMooseEnum'
p91097
sS'default'
p91098
S'INITIAL TIMESTEP_END'
p91099
sS'description'
p91100
S'Control of when postprocessors are output\n'
p91101
sS'required'
p91102
I00
sS'options'
p91103
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91104
sS'group_name'
p91105
S'Variables'
p91106
sa(dp91107
S'description'
p91108
S'Enable/disable the output of aux scalar variables\n'
p91109
sS'cpp_type'
p91110
S'bool'
p91111
sS'default'
p91112
S'1'
p91113
sS'name'
p91114
S'execute_scalar_variables'
p91115
sS'required'
p91116
I00
sS'group_name'
p91117
Nsa(dp91118
S'name'
p91119
S'execute_scalars_on'
p91120
sS'cpp_type'
p91121
S'MultiMooseEnum'
p91122
sS'default'
p91123
S'INITIAL TIMESTEP_END'
p91124
sS'description'
p91125
S'Control the output of scalar variables\n'
p91126
sS'required'
p91127
I00
sS'options'
p91128
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91129
sS'group_name'
p91130
S'Variables'
p91131
sa(dp91132
S'description'
p91133
S'Enable/disable the output of the simulation information\n'
p91134
sS'cpp_type'
p91135
S'bool'
p91136
sS'default'
p91137
S'1'
p91138
sS'name'
p91139
S'execute_system_information'
p91140
sS'required'
p91141
I00
sS'group_name'
p91142
Nsa(dp91143
S'name'
p91144
S'execute_system_information_on'
p91145
sS'cpp_type'
p91146
S'MultiMooseEnum'
p91147
sS'default'
p91148
S'INITIAL'
p91149
sS'description'
p91150
S'Control when the output of the simulation information occurs\n'
p91151
sS'required'
p91152
I00
sS'options'
p91153
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91154
sS'group_name'
p91155
S'Variables'
p91156
sa(dp91157
S'description'
p91158
S'Enable/disable the output of vector postprocessors\n'
p91159
sS'cpp_type'
p91160
S'bool'
p91161
sS'default'
p91162
S'1'
p91163
sS'name'
p91164
S'execute_vector_postprocessors'
p91165
sS'required'
p91166
I00
sS'group_name'
p91167
Nsa(dp91168
S'name'
p91169
S'execute_vector_postprocessors_on'
p91170
sS'cpp_type'
p91171
S'MultiMooseEnum'
p91172
sS'default'
p91173
S'INITIAL TIMESTEP_END'
p91174
sS'description'
p91175
S'Enable/disable the output of VectorPostprocessors\n'
p91176
sS'required'
p91177
I00
sS'options'
p91178
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91179
sS'group_name'
p91180
S'Variables'
p91181
sa(dp91182
S'description'
p91183
S'The desired solution output name without an extension\n'
p91184
sS'cpp_type'
p91185
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91186
sS'default'
p91187
g3
sS'name'
p91188
S'file_base'
p91189
sS'required'
p91190
I00
sS'group_name'
p91191
Nsa(dp91192
S'name'
p91193
S'fit_mode'
p91194
sS'cpp_type'
p91195
S'MooseEnum'
p91196
sS'default'
p91197
S'ENVIRONMENT'
p91198
sS'description'
p91199
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p91200
sS'required'
p91201
I00
sS'options'
p91202
S'ENVIRONMENT AUTO 80 120 160'
p91203
sS'group_name'
p91204
Nsa(dp91205
S'description'
p91206
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p91207
sS'cpp_type'
p91208
S'std::vector<VariableName, std::allocator<VariableName> >'
p91209
sS'default'
p91210
g3
sS'name'
p91211
S'hide'
p91212
sS'required'
p91213
I00
sS'group_name'
p91214
S'Variables'
p91215
sa(dp91216
S'description'
p91217
S'The interval at which time steps are output to the solution file\n'
p91218
sS'cpp_type'
p91219
S'unsigned int'
p91220
sS'default'
p91221
S'1'
p91222
sS'name'
p91223
S'interval'
p91224
sS'required'
p91225
I00
sS'group_name'
p91226
S'Timing'
p91227
sa(dp91228
S'description'
p91229
S'Print the libMesh performance log, requires libMesh to be configured with --enable-perflog\n'
p91230
sS'cpp_type'
p91231
S'bool'
p91232
sS'default'
p91233
S'1'
p91234
sS'name'
p91235
S'libmesh_log'
p91236
sS'required'
p91237
I00
sS'group_name'
p91238
S'Performance Log'
p91239
sa(dp91240
S'description'
p91241
S'Number of divisions applied to time step when outputting linear residuals\n'
p91242
sS'cpp_type'
p91243
S'double'
p91244
sS'default'
p91245
S'1000'
p91246
sS'name'
p91247
S'linear_residual_dt_divisor'
p91248
sS'required'
p91249
I00
sS'group_name'
p91250
S'PETSc'
p91251
sa(dp91252
S'description'
p91253
S'Specifies an end time to begin output on each linear residual evaluation\n'
p91254
sS'cpp_type'
p91255
S'double'
p91256
sS'default'
p91257
g3
sS'name'
p91258
S'linear_residual_end_time'
p91259
sS'required'
p91260
I00
sS'group_name'
p91261
S'PETSc'
p91262
sa(dp91263
S'description'
p91264
S'Specifies a start time to begin output on each linear residual evaluation\n'
p91265
sS'cpp_type'
p91266
S'double'
p91267
sS'default'
p91268
g3
sS'name'
p91269
S'linear_residual_start_time'
p91270
sS'required'
p91271
I00
sS'group_name'
p91272
S'PETSc'
p91273
sa(dp91274
S'description'
p91275
S'Specifies whether output occurs on each linear residual evaluation\n'
p91276
sS'cpp_type'
p91277
S'bool'
p91278
sS'default'
p91279
S'0'
p91280
sS'name'
p91281
S'linear_residuals'
p91282
sS'required'
p91283
I00
sS'group_name'
p91284
S'PETSc'
p91285
sa(dp91286
S'description'
p91287
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p91288
sS'cpp_type'
p91289
S'unsigned int'
p91290
sS'default'
p91291
S'15'
p91292
sS'name'
p91293
S'max_rows'
p91294
sS'required'
p91295
I00
sS'group_name'
p91296
S'Advanced'
p91297
sa(dp91298
S'description'
p91299
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p91300
sS'cpp_type'
p91301
S'double'
p91302
sS'default'
p91303
S'1000'
p91304
sS'name'
p91305
S'nonlinear_residual_dt_divisor'
p91306
sS'required'
p91307
I00
sS'group_name'
p91308
S'PETSc'
p91309
sa(dp91310
S'description'
p91311
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p91312
sS'cpp_type'
p91313
S'double'
p91314
sS'default'
p91315
g3
sS'name'
p91316
S'nonlinear_residual_end_time'
p91317
sS'required'
p91318
I00
sS'group_name'
p91319
S'PETSc'
p91320
sa(dp91321
S'description'
p91322
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p91323
sS'cpp_type'
p91324
S'double'
p91325
sS'default'
p91326
g3
sS'name'
p91327
S'nonlinear_residual_start_time'
p91328
sS'required'
p91329
I00
sS'group_name'
p91330
S'PETSc'
p91331
sa(dp91332
S'description'
p91333
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91334
sS'cpp_type'
p91335
S'bool'
p91336
sS'default'
p91337
S'0'
p91338
sS'name'
p91339
S'nonlinear_residuals'
p91340
sS'required'
p91341
I00
sS'group_name'
p91342
S'PETSc'
p91343
sa(dp91344
S'description'
p91345
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p91346
sS'cpp_type'
p91347
S'std::vector<double, std::allocator<double> >'
p91348
sS'default'
p91349
S'0.8 2'
p91350
sS'name'
p91351
S'outlier_multiplier'
p91352
sS'required'
p91353
I00
sS'group_name'
p91354
S'Norms'
p91355
sa(dp91356
S'description'
p91357
S'If true, outlier variable norms will be printed after each solve\n'
p91358
sS'cpp_type'
p91359
S'bool'
p91360
sS'default'
p91361
S'1'
p91362
sS'name'
p91363
S'outlier_variable_norms'
p91364
sS'required'
p91365
I00
sS'group_name'
p91366
S'Norms'
p91367
sa(dp91368
S'description'
p91369
S'Output to the file\n'
p91370
sS'cpp_type'
p91371
S'bool'
p91372
sS'default'
p91373
S'0'
p91374
sS'name'
p91375
S'output_file'
p91376
sS'required'
p91377
I00
sS'group_name'
p91378
Nsa(dp91379
S'description'
p91380
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p91381
sS'cpp_type'
p91382
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91383
sS'default'
p91384
g3
sS'name'
p91385
S'output_if_base_contains'
p91386
sS'required'
p91387
I00
sS'group_name'
p91388
S'Advanced'
p91389
sa(dp91390
S'description'
p91391
S'Specifies whether output occurs on each linear residual evaluation\n'
p91392
sS'cpp_type'
p91393
S'bool'
p91394
sS'default'
p91395
S'0'
p91396
sS'name'
p91397
S'output_linear'
p91398
sS'required'
p91399
I00
sS'group_name'
p91400
Nsa(dp91401
S'description'
p91402
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91403
sS'cpp_type'
p91404
S'bool'
p91405
sS'default'
p91406
S'0'
p91407
sS'name'
p91408
S'output_nonlinear'
p91409
sS'required'
p91410
I00
sS'group_name'
p91411
Nsa(dp91412
S'description'
p91413
S'Enable/disable the output of postprocessors\n'
p91414
sS'cpp_type'
p91415
S'bool'
p91416
sS'default'
p91417
S'1'
p91418
sS'name'
p91419
S'output_postprocessors'
p91420
sS'required'
p91421
I00
sS'group_name'
p91422
Nsa(dp91423
S'description'
p91424
S'Output to the screen\n'
p91425
sS'cpp_type'
p91426
S'bool'
p91427
sS'default'
p91428
S'1'
p91429
sS'name'
p91430
S'output_screen'
p91431
sS'required'
p91432
I00
sS'group_name'
p91433
Nsa(dp91434
S'description'
p91435
S'The number of for extension suffix (e.g., out.e-s002)\n'
p91436
sS'cpp_type'
p91437
S'unsigned int'
p91438
sS'default'
p91439
S'4'
p91440
sS'name'
p91441
S'padding'
p91442
sS'required'
p91443
I00
sS'group_name'
p91444
S'Advanced'
p91445
sa(dp91446
S'description'
p91447
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p91448
sS'cpp_type'
p91449
S'bool'
p91450
sS'default'
p91451
g3
sS'name'
p91452
S'perf_header'
p91453
sS'required'
p91454
I00
sS'group_name'
p91455
S'Perf Log'
p91456
sa(dp91457
S'description'
p91458
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p91459
sS'cpp_type'
p91460
S'bool'
p91461
sS'default'
p91462
S'0'
p91463
sS'name'
p91464
S'perf_log'
p91465
sS'required'
p91466
I00
sS'group_name'
p91467
S'Perf Log'
p91468
sa(dp91469
S'description'
p91470
S'If set, the performance log will be printed every n time steps\n'
p91471
sS'cpp_type'
p91472
S'unsigned int'
p91473
sS'default'
p91474
S'0'
p91475
sS'name'
p91476
S'perf_log_interval'
p91477
sS'required'
p91478
I00
sS'group_name'
p91479
Nsa(dp91480
S'description'
p91481
S'When true, each time the mesh is changed the mesh information is printed\n'
p91482
sS'cpp_type'
p91483
S'bool'
p91484
sS'default'
p91485
S'0'
p91486
sS'name'
p91487
S'print_mesh_changed_info'
p91488
sS'required'
p91489
I00
sS'group_name'
p91490
Nsa(dp91491
S'description'
p91492
S'Control the printing of time and dt in scientific notation\n'
p91493
sS'cpp_type'
p91494
S'bool'
p91495
sS'default'
p91496
S'0'
p91497
sS'name'
p91498
S'scientific_time'
p91499
sS'required'
p91500
I00
sS'group_name'
p91501
Nsa(dp91502
S'description'
p91503
S"Toggles the printing of the 'Setup Performance' log\n"
p91504
sS'cpp_type'
p91505
S'bool'
p91506
sS'default'
p91507
g3
sS'name'
p91508
S'setup_log'
p91509
sS'required'
p91510
I00
sS'group_name'
p91511
S'Perf Log'
p91512
sa(dp91513
S'description'
p91514
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p91515
sS'cpp_type'
p91516
S'bool'
p91517
sS'default'
p91518
S'0'
p91519
sS'name'
p91520
S'setup_log_early'
p91521
sS'required'
p91522
I00
sS'group_name'
p91523
S'Perf Log'
p91524
sa(dp91525
S'description'
p91526
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p91527
sS'cpp_type'
p91528
S'std::vector<VariableName, std::allocator<VariableName> >'
p91529
sS'default'
p91530
g3
sS'name'
p91531
S'show'
p91532
sS'required'
p91533
I00
sS'group_name'
p91534
S'Variables'
p91535
sa(dp91536
S'description'
p91537
S'Indent multiapp output using the multiapp name\n'
p91538
sS'cpp_type'
p91539
S'bool'
p91540
sS'default'
p91541
S'0'
p91542
sS'name'
p91543
S'show_multiapp_name'
p91544
sS'required'
p91545
I00
sS'group_name'
p91546
S'Advanced'
p91547
sa(dp91548
S'description'
p91549
S"Toggles the printing of the 'Moose Test Performance' log\n"
p91550
sS'cpp_type'
p91551
S'bool'
p91552
sS'default'
p91553
g3
sS'name'
p91554
S'solve_log'
p91555
sS'required'
p91556
I00
sS'group_name'
p91557
S'Perf Log'
p91558
sa(dp91559
S'description'
p91560
S'Time at which this output object begins to operate\n'
p91561
sS'cpp_type'
p91562
S'double'
p91563
sS'default'
p91564
g3
sS'name'
p91565
S'start_time'
p91566
sS'required'
p91567
I00
sS'group_name'
p91568
S'Timing'
p91569
sa(dp91570
S'description'
p91571
S'Only export results at sync times\n'
p91572
sS'cpp_type'
p91573
S'bool'
p91574
sS'default'
p91575
S'0'
p91576
sS'name'
p91577
S'sync_only'
p91578
sS'required'
p91579
I00
sS'group_name'
p91580
S'Timing'
p91581
sa(dp91582
S'description'
p91583
S'Times at which the output and solution is forced to occur\n'
p91584
sS'cpp_type'
p91585
S'std::vector<double, std::allocator<double> >'
p91586
sS'default'
p91587
g3
sS'name'
p91588
S'sync_times'
p91589
sS'required'
p91590
I00
sS'group_name'
p91591
S'Timing'
p91592
sa(dp91593
S'name'
p91594
S'system_info'
p91595
sS'cpp_type'
p91596
S'MultiMooseEnum'
p91597
sS'default'
p91598
S'AUX EXECUTION FRAMEWORK MESH NONLINEAR'
p91599
sS'description'
p91600
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output')\n"
p91601
sS'required'
p91602
I00
sS'options'
p91603
S'framework mesh aux nonlinear execution output'
p91604
sS'group_name'
p91605
S'Advanced'
p91606
sa(dp91607
S'description'
p91608
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p91609
sS'cpp_type'
p91610
S'bool'
p91611
sS'default'
p91612
S'1'
p91613
sS'name'
p91614
S'time_column'
p91615
sS'required'
p91616
I00
sS'group_name'
p91617
Nsa(dp91618
S'description'
p91619
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p91620
sS'cpp_type'
p91621
S'bool'
p91622
sS'default'
p91623
S'0'
p91624
sS'name'
p91625
S'time_data'
p91626
sS'required'
p91627
I00
sS'group_name'
p91628
Nsa(dp91629
S'description'
p91630
S'The number of significant digits that are printed on time related outputs\n'
p91631
sS'cpp_type'
p91632
S'unsigned int'
p91633
sS'default'
p91634
g3
sS'name'
p91635
S'time_precision'
p91636
sS'required'
p91637
I00
sS'group_name'
p91638
Nsa(dp91639
S'description'
p91640
S'Time tolerance utilized checking start and end times\n'
p91641
sS'cpp_type'
p91642
S'double'
p91643
sS'default'
p91644
S'1e-14'
p91645
sS'name'
p91646
S'time_tolerance'
p91647
sS'required'
p91648
I00
sS'group_name'
p91649
S'Timing'
p91650
sa(dp91651
S'description'
p91652
g3
sS'cpp_type'
p91653
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91654
sS'default'
p91655
S'Console'
p91656
sS'name'
p91657
S'type'
p91658
sS'required'
p91659
I00
sS'group_name'
p91660
Nsa(dp91661
S'description'
p91662
S'Enable/disable the use of the displaced mesh for outputting\n'
p91663
sS'cpp_type'
p91664
S'bool'
p91665
sS'default'
p91666
S'0'
p91667
sS'name'
p91668
S'use_displaced'
p91669
sS'required'
p91670
I00
sS'group_name'
p91671
Nsa(dp91672
S'description'
p91673
S'Print detailed diagnostics on timestep calculation\n'
p91674
sS'cpp_type'
p91675
S'bool'
p91676
sS'default'
p91677
S'0'
p91678
sS'name'
p91679
S'verbose'
p91680
sS'required'
p91681
I00
sS'group_name'
p91682
S'Advanced'
p91683
sasS'name'
p91684
S'/Outputs/Console'
p91685
sa(dp91686
S'description'
p91687
g3
sS'subblocks'
p91688
NsS'parameters'
p91689
(lp91690
(dp91691
S'name'
p91692
S'additional_execute_on'
p91693
sS'cpp_type'
p91694
S'MultiMooseEnum'
p91695
sS'default'
p91696
g3
sS'description'
p91697
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91698
sS'required'
p91699
I00
sS'options'
p91700
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91701
sS'group_name'
p91702
Nsa(dp91703
S'description'
p91704
S'Clear the active control display after each output.\n'
p91705
sS'cpp_type'
p91706
S'bool'
p91707
sS'default'
p91708
S'1'
p91709
sS'name'
p91710
S'clear_after_output'
p91711
sS'required'
p91712
I00
sS'group_name'
p91713
Nsa(dp91714
S'description'
p91715
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91716
sS'cpp_type'
p91717
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91718
sS'default'
p91719
g3
sS'name'
p91720
S'control_tags'
p91721
sS'required'
p91722
I00
sS'group_name'
p91723
S'Advanced'
p91724
sa(dp91725
S'description'
p91726
S'Set the enabled status of the MooseObject.\n'
p91727
sS'cpp_type'
p91728
S'bool'
p91729
sS'default'
p91730
S'1'
p91731
sS'name'
p91732
S'enable'
p91733
sS'required'
p91734
I00
sS'group_name'
p91735
S'Advanced'
p91736
sa(dp91737
S'description'
p91738
S'Time at which this output object stop operating\n'
p91739
sS'cpp_type'
p91740
S'double'
p91741
sS'default'
p91742
g3
sS'name'
p91743
S'end_time'
p91744
sS'required'
p91745
I00
sS'group_name'
p91746
S'Timing'
p91747
sa(dp91748
S'name'
p91749
S'execute_on'
p91750
sS'cpp_type'
p91751
S'MultiMooseEnum'
p91752
sS'default'
p91753
S'INITIAL TIMESTEP_BEGIN'
p91754
sS'description'
p91755
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91756
sS'required'
p91757
I00
sS'options'
p91758
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91759
sS'group_name'
p91760
Nsa(dp91761
S'description'
p91762
S'The interval at which time steps are output to the solution file\n'
p91763
sS'cpp_type'
p91764
S'unsigned int'
p91765
sS'default'
p91766
S'1'
p91767
sS'name'
p91768
S'interval'
p91769
sS'required'
p91770
I00
sS'group_name'
p91771
S'Timing'
p91772
sa(dp91773
S'description'
p91774
S'List active MooseObjects.\n'
p91775
sS'cpp_type'
p91776
S'bool'
p91777
sS'default'
p91778
S'1'
p91779
sS'name'
p91780
S'show_active_objects'
p91781
sS'required'
p91782
I00
sS'group_name'
p91783
Nsa(dp91784
S'description'
p91785
S'Time at which this output object begins to operate\n'
p91786
sS'cpp_type'
p91787
S'double'
p91788
sS'default'
p91789
g3
sS'name'
p91790
S'start_time'
p91791
sS'required'
p91792
I00
sS'group_name'
p91793
S'Timing'
p91794
sa(dp91795
S'description'
p91796
S'Only export results at sync times\n'
p91797
sS'cpp_type'
p91798
S'bool'
p91799
sS'default'
p91800
S'0'
p91801
sS'name'
p91802
S'sync_only'
p91803
sS'required'
p91804
I00
sS'group_name'
p91805
S'Timing'
p91806
sa(dp91807
S'description'
p91808
S'Times at which the output and solution is forced to occur\n'
p91809
sS'cpp_type'
p91810
S'std::vector<double, std::allocator<double> >'
p91811
sS'default'
p91812
g3
sS'name'
p91813
S'sync_times'
p91814
sS'required'
p91815
I00
sS'group_name'
p91816
S'Timing'
p91817
sa(dp91818
S'description'
p91819
S'Time tolerance utilized checking start and end times\n'
p91820
sS'cpp_type'
p91821
S'double'
p91822
sS'default'
p91823
S'1e-14'
p91824
sS'name'
p91825
S'time_tolerance'
p91826
sS'required'
p91827
I00
sS'group_name'
p91828
S'Timing'
p91829
sa(dp91830
S'description'
p91831
g3
sS'cpp_type'
p91832
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91833
sS'default'
p91834
S'ControlOutput'
p91835
sS'name'
p91836
S'type'
p91837
sS'required'
p91838
I00
sS'group_name'
p91839
Nsa(dp91840
S'description'
p91841
S'Enable/disable the use of the displaced mesh for outputting\n'
p91842
sS'cpp_type'
p91843
S'bool'
p91844
sS'default'
p91845
S'0'
p91846
sS'name'
p91847
S'use_displaced'
p91848
sS'required'
p91849
I00
sS'group_name'
p91850
NsasS'name'
p91851
S'/Outputs/ControlOutput'
p91852
sa(dp91853
S'description'
p91854
g3
sS'subblocks'
p91855
NsS'parameters'
p91856
(lp91857
(dp91858
S'name'
p91859
S'additional_execute_on'
p91860
sS'cpp_type'
p91861
S'MultiMooseEnum'
p91862
sS'default'
p91863
g3
sS'description'
p91864
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91865
sS'required'
p91866
I00
sS'options'
p91867
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91868
sS'group_name'
p91869
Nsa(dp91870
S'description'
p91871
S'When true the date and time are appended to the output filename.\n'
p91872
sS'cpp_type'
p91873
S'bool'
p91874
sS'default'
p91875
S'0'
p91876
sS'name'
p91877
S'append_date'
p91878
sS'required'
p91879
I00
sS'group_name'
p91880
Nsa(dp91881
S'description'
p91882
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p91883
sS'cpp_type'
p91884
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91885
sS'default'
p91886
g3
sS'name'
p91887
S'append_date_format'
p91888
sS'required'
p91889
I00
sS'group_name'
p91890
Nsa(dp91891
S'description'
p91892
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91893
sS'cpp_type'
p91894
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91895
sS'default'
p91896
g3
sS'name'
p91897
S'control_tags'
p91898
sS'required'
p91899
I00
sS'group_name'
p91900
S'Advanced'
p91901
sa(dp91902
S'description'
p91903
S'Set the enabled status of the MooseObject.\n'
p91904
sS'cpp_type'
p91905
S'bool'
p91906
sS'default'
p91907
S'1'
p91908
sS'name'
p91909
S'enable'
p91910
sS'required'
p91911
I00
sS'group_name'
p91912
S'Advanced'
p91913
sa(dp91914
S'description'
p91915
S'Time at which this output object stop operating\n'
p91916
sS'cpp_type'
p91917
S'double'
p91918
sS'default'
p91919
g3
sS'name'
p91920
S'end_time'
p91921
sS'required'
p91922
I00
sS'group_name'
p91923
S'Timing'
p91924
sa(dp91925
S'name'
p91926
S'execute_on'
p91927
sS'cpp_type'
p91928
S'MultiMooseEnum'
p91929
sS'default'
p91930
S'INITIAL'
p91931
sS'description'
p91932
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91933
sS'required'
p91934
I00
sS'options'
p91935
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91936
sS'group_name'
p91937
Nsa(dp91938
S'description'
p91939
S'The desired solution output name without an extension\n'
p91940
sS'cpp_type'
p91941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91942
sS'default'
p91943
g3
sS'name'
p91944
S'file_base'
p91945
sS'required'
p91946
I00
sS'group_name'
p91947
Nsa(dp91948
S'description'
p91949
S'The interval at which time steps are output to the solution file\n'
p91950
sS'cpp_type'
p91951
S'unsigned int'
p91952
sS'default'
p91953
S'1'
p91954
sS'name'
p91955
S'interval'
p91956
sS'required'
p91957
I00
sS'group_name'
p91958
S'Timing'
p91959
sa(dp91960
S'description'
p91961
S'Number of divisions applied to time step when outputting linear residuals\n'
p91962
sS'cpp_type'
p91963
S'double'
p91964
sS'default'
p91965
S'1000'
p91966
sS'name'
p91967
S'linear_residual_dt_divisor'
p91968
sS'required'
p91969
I00
sS'group_name'
p91970
S'PETSc'
p91971
sa(dp91972
S'description'
p91973
S'Specifies an end time to begin output on each linear residual evaluation\n'
p91974
sS'cpp_type'
p91975
S'double'
p91976
sS'default'
p91977
g3
sS'name'
p91978
S'linear_residual_end_time'
p91979
sS'required'
p91980
I00
sS'group_name'
p91981
S'PETSc'
p91982
sa(dp91983
S'description'
p91984
S'Specifies a start time to begin output on each linear residual evaluation\n'
p91985
sS'cpp_type'
p91986
S'double'
p91987
sS'default'
p91988
g3
sS'name'
p91989
S'linear_residual_start_time'
p91990
sS'required'
p91991
I00
sS'group_name'
p91992
S'PETSc'
p91993
sa(dp91994
S'description'
p91995
S'Specifies whether output occurs on each linear residual evaluation\n'
p91996
sS'cpp_type'
p91997
S'bool'
p91998
sS'default'
p91999
S'0'
p92000
sS'name'
p92001
S'linear_residuals'
p92002
sS'required'
p92003
I00
sS'group_name'
p92004
S'PETSc'
p92005
sa(dp92006
S'description'
p92007
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p92008
sS'cpp_type'
p92009
S'double'
p92010
sS'default'
p92011
S'1000'
p92012
sS'name'
p92013
S'nonlinear_residual_dt_divisor'
p92014
sS'required'
p92015
I00
sS'group_name'
p92016
S'PETSc'
p92017
sa(dp92018
S'description'
p92019
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p92020
sS'cpp_type'
p92021
S'double'
p92022
sS'default'
p92023
g3
sS'name'
p92024
S'nonlinear_residual_end_time'
p92025
sS'required'
p92026
I00
sS'group_name'
p92027
S'PETSc'
p92028
sa(dp92029
S'description'
p92030
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p92031
sS'cpp_type'
p92032
S'double'
p92033
sS'default'
p92034
g3
sS'name'
p92035
S'nonlinear_residual_start_time'
p92036
sS'required'
p92037
I00
sS'group_name'
p92038
S'PETSc'
p92039
sa(dp92040
S'description'
p92041
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92042
sS'cpp_type'
p92043
S'bool'
p92044
sS'default'
p92045
S'0'
p92046
sS'name'
p92047
S'nonlinear_residuals'
p92048
sS'required'
p92049
I00
sS'group_name'
p92050
S'PETSc'
p92051
sa(dp92052
S'description'
p92053
S'Output to the file\n'
p92054
sS'cpp_type'
p92055
S'bool'
p92056
sS'default'
p92057
S'1'
p92058
sS'name'
p92059
S'output_file'
p92060
sS'required'
p92061
I00
sS'group_name'
p92062
Nsa(dp92063
S'description'
p92064
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p92065
sS'cpp_type'
p92066
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92067
sS'default'
p92068
g3
sS'name'
p92069
S'output_if_base_contains'
p92070
sS'required'
p92071
I00
sS'group_name'
p92072
S'Advanced'
p92073
sa(dp92074
S'description'
p92075
S'Specifies whether output occurs on each linear residual evaluation\n'
p92076
sS'cpp_type'
p92077
S'bool'
p92078
sS'default'
p92079
S'0'
p92080
sS'name'
p92081
S'output_linear'
p92082
sS'required'
p92083
I00
sS'group_name'
p92084
Nsa(dp92085
S'description'
p92086
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92087
sS'cpp_type'
p92088
S'bool'
p92089
sS'default'
p92090
S'0'
p92091
sS'name'
p92092
S'output_nonlinear'
p92093
sS'required'
p92094
I00
sS'group_name'
p92095
Nsa(dp92096
S'description'
p92097
S'Output to the screen\n'
p92098
sS'cpp_type'
p92099
S'bool'
p92100
sS'default'
p92101
S'0'
p92102
sS'name'
p92103
S'output_screen'
p92104
sS'required'
p92105
I00
sS'group_name'
p92106
Nsa(dp92107
S'description'
p92108
S'The number of for extension suffix (e.g., out.e-s002)\n'
p92109
sS'cpp_type'
p92110
S'unsigned int'
p92111
sS'default'
p92112
S'4'
p92113
sS'name'
p92114
S'padding'
p92115
sS'required'
p92116
I00
sS'group_name'
p92117
S'Advanced'
p92118
sa(dp92119
S'description'
p92120
S'Time at which this output object begins to operate\n'
p92121
sS'cpp_type'
p92122
S'double'
p92123
sS'default'
p92124
g3
sS'name'
p92125
S'start_time'
p92126
sS'required'
p92127
I00
sS'group_name'
p92128
S'Timing'
p92129
sa(dp92130
S'description'
p92131
S'Only export results at sync times\n'
p92132
sS'cpp_type'
p92133
S'bool'
p92134
sS'default'
p92135
S'0'
p92136
sS'name'
p92137
S'sync_only'
p92138
sS'required'
p92139
I00
sS'group_name'
p92140
S'Timing'
p92141
sa(dp92142
S'description'
p92143
S'Times at which the output and solution is forced to occur\n'
p92144
sS'cpp_type'
p92145
S'std::vector<double, std::allocator<double> >'
p92146
sS'default'
p92147
g3
sS'name'
p92148
S'sync_times'
p92149
sS'required'
p92150
I00
sS'group_name'
p92151
S'Timing'
p92152
sa(dp92153
S'description'
p92154
S'System to output\n'
p92155
sS'cpp_type'
p92156
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92157
sS'default'
p92158
S'nl0'
p92159
sS'name'
p92160
S'system_name'
p92161
sS'required'
p92162
I00
sS'group_name'
p92163
Nsa(dp92164
S'description'
p92165
S'Time tolerance utilized checking start and end times\n'
p92166
sS'cpp_type'
p92167
S'double'
p92168
sS'default'
p92169
S'1e-14'
p92170
sS'name'
p92171
S'time_tolerance'
p92172
sS'required'
p92173
I00
sS'group_name'
p92174
S'Timing'
p92175
sa(dp92176
S'description'
p92177
g3
sS'cpp_type'
p92178
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92179
sS'default'
p92180
S'DOFMap'
p92181
sS'name'
p92182
S'type'
p92183
sS'required'
p92184
I00
sS'group_name'
p92185
Nsa(dp92186
S'description'
p92187
S'Enable/disable the use of the displaced mesh for outputting\n'
p92188
sS'cpp_type'
p92189
S'bool'
p92190
sS'default'
p92191
S'0'
p92192
sS'name'
p92193
S'use_displaced'
p92194
sS'required'
p92195
I00
sS'group_name'
p92196
NsasS'name'
p92197
S'/Outputs/DOFMap'
p92198
sa(dp92199
S'description'
p92200
S'Object for output data in the Exodus II format\n'
p92201
sS'subblocks'
p92202
NsS'parameters'
p92203
(lp92204
(dp92205
S'name'
p92206
S'additional_execute_on'
p92207
sS'cpp_type'
p92208
S'MultiMooseEnum'
p92209
sS'default'
p92210
g3
sS'description'
p92211
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92212
sS'required'
p92213
I00
sS'options'
p92214
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92215
sS'group_name'
p92216
Nsa(dp92217
S'description'
p92218
S'When true the date and time are appended to the output filename.\n'
p92219
sS'cpp_type'
p92220
S'bool'
p92221
sS'default'
p92222
S'0'
p92223
sS'name'
p92224
S'append_date'
p92225
sS'required'
p92226
I00
sS'group_name'
p92227
Nsa(dp92228
S'description'
p92229
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p92230
sS'cpp_type'
p92231
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92232
sS'default'
p92233
g3
sS'name'
p92234
S'append_date_format'
p92235
sS'required'
p92236
I00
sS'group_name'
p92237
Nsa(dp92238
S'description'
p92239
S"Append '_oversample' to the output file base\n"
p92240
sS'cpp_type'
p92241
S'bool'
p92242
sS'default'
p92243
S'0'
p92244
sS'name'
p92245
S'append_oversample'
p92246
sS'required'
p92247
I00
sS'group_name'
p92248
Nsa(dp92249
S'description'
p92250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92251
sS'cpp_type'
p92252
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92253
sS'default'
p92254
g3
sS'name'
p92255
S'control_tags'
p92256
sS'required'
p92257
I00
sS'group_name'
p92258
S'Advanced'
p92259
sa(dp92260
S'description'
p92261
S'Output elemental nonlinear variables as nodal\n'
p92262
sS'cpp_type'
p92263
S'bool'
p92264
sS'default'
p92265
S'0'
p92266
sS'name'
p92267
S'elemental_as_nodal'
p92268
sS'required'
p92269
I00
sS'group_name'
p92270
S'Variables'
p92271
sa(dp92272
S'description'
p92273
S'Set the enabled status of the MooseObject.\n'
p92274
sS'cpp_type'
p92275
S'bool'
p92276
sS'default'
p92277
S'1'
p92278
sS'name'
p92279
S'enable'
p92280
sS'required'
p92281
I00
sS'group_name'
p92282
S'Advanced'
p92283
sa(dp92284
S'description'
p92285
S'Time at which this output object stop operating\n'
p92286
sS'cpp_type'
p92287
S'double'
p92288
sS'default'
p92289
g3
sS'name'
p92290
S'end_time'
p92291
sS'required'
p92292
I00
sS'group_name'
p92293
S'Timing'
p92294
sa(dp92295
S'name'
p92296
S'execute_elemental_on'
p92297
sS'cpp_type'
p92298
S'MultiMooseEnum'
p92299
sS'default'
p92300
g3
sS'description'
p92301
S'Control the output of elemental variables\n'
p92302
sS'required'
p92303
I00
sS'options'
p92304
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92305
sS'group_name'
p92306
S'Variables'
p92307
sa(dp92308
S'description'
p92309
S'Enable/disable the output of elemental variables\n'
p92310
sS'cpp_type'
p92311
S'bool'
p92312
sS'default'
p92313
S'1'
p92314
sS'name'
p92315
S'execute_elemental_variables'
p92316
sS'required'
p92317
I00
sS'group_name'
p92318
Nsa(dp92319
S'description'
p92320
S'Enable/disable the output of input file information\n'
p92321
sS'cpp_type'
p92322
S'bool'
p92323
sS'default'
p92324
S'1'
p92325
sS'name'
p92326
S'execute_input'
p92327
sS'required'
p92328
I00
sS'group_name'
p92329
Nsa(dp92330
S'name'
p92331
S'execute_input_on'
p92332
sS'cpp_type'
p92333
S'MultiMooseEnum'
p92334
sS'default'
p92335
S'INITIAL'
p92336
sS'description'
p92337
S'Enable/disable the output of the input file\n'
p92338
sS'required'
p92339
I00
sS'options'
p92340
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92341
sS'group_name'
p92342
S'Variables'
p92343
sa(dp92344
S'name'
p92345
S'execute_nodal_on'
p92346
sS'cpp_type'
p92347
S'MultiMooseEnum'
p92348
sS'default'
p92349
g3
sS'description'
p92350
S'Control the output of nodal variables\n'
p92351
sS'required'
p92352
I00
sS'options'
p92353
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92354
sS'group_name'
p92355
S'Variables'
p92356
sa(dp92357
S'description'
p92358
S'Enable/disable the output of nodal variables\n'
p92359
sS'cpp_type'
p92360
S'bool'
p92361
sS'default'
p92362
S'1'
p92363
sS'name'
p92364
S'execute_nodal_variables'
p92365
sS'required'
p92366
I00
sS'group_name'
p92367
Nsa(dp92368
S'name'
p92369
S'execute_on'
p92370
sS'cpp_type'
p92371
S'MultiMooseEnum'
p92372
sS'default'
p92373
S'INITIAL TIMESTEP_END'
p92374
sS'description'
p92375
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92376
sS'required'
p92377
I00
sS'options'
p92378
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92379
sS'group_name'
p92380
Nsa(dp92381
S'name'
p92382
S'execute_postprocessors_on'
p92383
sS'cpp_type'
p92384
S'MultiMooseEnum'
p92385
sS'default'
p92386
g3
sS'description'
p92387
S'Control of when postprocessors are output\n'
p92388
sS'required'
p92389
I00
sS'options'
p92390
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92391
sS'group_name'
p92392
S'Variables'
p92393
sa(dp92394
S'description'
p92395
S'Enable/disable the output of aux scalar variables\n'
p92396
sS'cpp_type'
p92397
S'bool'
p92398
sS'default'
p92399
S'1'
p92400
sS'name'
p92401
S'execute_scalar_variables'
p92402
sS'required'
p92403
I00
sS'group_name'
p92404
Nsa(dp92405
S'name'
p92406
S'execute_scalars_on'
p92407
sS'cpp_type'
p92408
S'MultiMooseEnum'
p92409
sS'default'
p92410
g3
sS'description'
p92411
S'Control the output of scalar variables\n'
p92412
sS'required'
p92413
I00
sS'options'
p92414
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92415
sS'group_name'
p92416
S'Variables'
p92417
sa(dp92418
S'description'
p92419
S'Enable/disable the output of the simulation information\n'
p92420
sS'cpp_type'
p92421
S'bool'
p92422
sS'default'
p92423
S'1'
p92424
sS'name'
p92425
S'execute_system_information'
p92426
sS'required'
p92427
I00
sS'group_name'
p92428
Nsa(dp92429
S'description'
p92430
S'Enable/disable the output of vector postprocessors\n'
p92431
sS'cpp_type'
p92432
S'bool'
p92433
sS'default'
p92434
S'1'
p92435
sS'name'
p92436
S'execute_vector_postprocessors'
p92437
sS'required'
p92438
I00
sS'group_name'
p92439
Nsa(dp92440
S'description'
p92441
S'The name of the mesh file to read, for oversampling\n'
p92442
sS'cpp_type'
p92443
S'MeshFileName'
p92444
sS'default'
p92445
g3
sS'name'
p92446
S'file'
p92447
sS'required'
p92448
I00
sS'group_name'
p92449
S'Oversampling'
p92450
sa(dp92451
S'description'
p92452
S'The desired solution output name without an extension\n'
p92453
sS'cpp_type'
p92454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92455
sS'default'
p92456
g3
sS'name'
p92457
S'file_base'
p92458
sS'required'
p92459
I00
sS'group_name'
p92460
Nsa(dp92461
S'description'
p92462
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p92463
sS'cpp_type'
p92464
S'std::vector<VariableName, std::allocator<VariableName> >'
p92465
sS'default'
p92466
g3
sS'name'
p92467
S'hide'
p92468
sS'required'
p92469
I00
sS'group_name'
p92470
S'Variables'
p92471
sa(dp92472
S'description'
p92473
S'The interval at which time steps are output to the solution file\n'
p92474
sS'cpp_type'
p92475
S'unsigned int'
p92476
sS'default'
p92477
S'1'
p92478
sS'name'
p92479
S'interval'
p92480
sS'required'
p92481
I00
sS'group_name'
p92482
S'Timing'
p92483
sa(dp92484
S'description'
p92485
S'Number of divisions applied to time step when outputting linear residuals\n'
p92486
sS'cpp_type'
p92487
S'double'
p92488
sS'default'
p92489
S'1000'
p92490
sS'name'
p92491
S'linear_residual_dt_divisor'
p92492
sS'required'
p92493
I00
sS'group_name'
p92494
S'PETSc'
p92495
sa(dp92496
S'description'
p92497
S'Specifies an end time to begin output on each linear residual evaluation\n'
p92498
sS'cpp_type'
p92499
S'double'
p92500
sS'default'
p92501
g3
sS'name'
p92502
S'linear_residual_end_time'
p92503
sS'required'
p92504
I00
sS'group_name'
p92505
S'PETSc'
p92506
sa(dp92507
S'description'
p92508
S'Specifies a start time to begin output on each linear residual evaluation\n'
p92509
sS'cpp_type'
p92510
S'double'
p92511
sS'default'
p92512
g3
sS'name'
p92513
S'linear_residual_start_time'
p92514
sS'required'
p92515
I00
sS'group_name'
p92516
S'PETSc'
p92517
sa(dp92518
S'description'
p92519
S'Specifies whether output occurs on each linear residual evaluation\n'
p92520
sS'cpp_type'
p92521
S'bool'
p92522
sS'default'
p92523
S'0'
p92524
sS'name'
p92525
S'linear_residuals'
p92526
sS'required'
p92527
I00
sS'group_name'
p92528
S'PETSc'
p92529
sa(dp92530
S'description'
p92531
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p92532
sS'cpp_type'
p92533
S'double'
p92534
sS'default'
p92535
S'1000'
p92536
sS'name'
p92537
S'nonlinear_residual_dt_divisor'
p92538
sS'required'
p92539
I00
sS'group_name'
p92540
S'PETSc'
p92541
sa(dp92542
S'description'
p92543
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p92544
sS'cpp_type'
p92545
S'double'
p92546
sS'default'
p92547
g3
sS'name'
p92548
S'nonlinear_residual_end_time'
p92549
sS'required'
p92550
I00
sS'group_name'
p92551
S'PETSc'
p92552
sa(dp92553
S'description'
p92554
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p92555
sS'cpp_type'
p92556
S'double'
p92557
sS'default'
p92558
g3
sS'name'
p92559
S'nonlinear_residual_start_time'
p92560
sS'required'
p92561
I00
sS'group_name'
p92562
S'PETSc'
p92563
sa(dp92564
S'description'
p92565
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92566
sS'cpp_type'
p92567
S'bool'
p92568
sS'default'
p92569
S'0'
p92570
sS'name'
p92571
S'nonlinear_residuals'
p92572
sS'required'
p92573
I00
sS'group_name'
p92574
S'PETSc'
p92575
sa(dp92576
S'description'
p92577
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p92578
sS'cpp_type'
p92579
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92580
sS'default'
p92581
g3
sS'name'
p92582
S'output_if_base_contains'
p92583
sS'required'
p92584
I00
sS'group_name'
p92585
S'Advanced'
p92586
sa(dp92587
S'description'
p92588
S'Specifies whether output occurs on each linear residual evaluation\n'
p92589
sS'cpp_type'
p92590
S'bool'
p92591
sS'default'
p92592
S'0'
p92593
sS'name'
p92594
S'output_linear'
p92595
sS'required'
p92596
I00
sS'group_name'
p92597
Nsa(dp92598
S'description'
p92599
S'Flag indicating if material properties should be output\n'
p92600
sS'cpp_type'
p92601
S'bool'
p92602
sS'default'
p92603
S'0'
p92604
sS'name'
p92605
S'output_material_properties'
p92606
sS'required'
p92607
I00
sS'group_name'
p92608
S'Materials'
p92609
sa(dp92610
S'description'
p92611
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92612
sS'cpp_type'
p92613
S'bool'
p92614
sS'default'
p92615
S'0'
p92616
sS'name'
p92617
S'output_nonlinear'
p92618
sS'required'
p92619
I00
sS'group_name'
p92620
Nsa(dp92621
S'description'
p92622
S'Enable/disable the output of postprocessors\n'
p92623
sS'cpp_type'
p92624
S'bool'
p92625
sS'default'
p92626
S'1'
p92627
sS'name'
p92628
S'output_postprocessors'
p92629
sS'required'
p92630
I00
sS'group_name'
p92631
Nsa(dp92632
S'description'
p92633
S'Set to true to enable oversampling\n'
p92634
sS'cpp_type'
p92635
S'bool'
p92636
sS'default'
p92637
S'0'
p92638
sS'name'
p92639
S'oversample'
p92640
sS'required'
p92641
I00
sS'group_name'
p92642
Nsa(dp92643
S'description'
p92644
S'When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n'
p92645
sS'cpp_type'
p92646
S'bool'
p92647
sS'default'
p92648
S'0'
p92649
sS'name'
p92650
S'overwrite'
p92651
sS'required'
p92652
I00
sS'group_name'
p92653
Nsa(dp92654
S'description'
p92655
S'The number of for extension suffix (e.g., out.e-s002)\n'
p92656
sS'cpp_type'
p92657
S'unsigned int'
p92658
sS'default'
p92659
S'3'
p92660
sS'name'
p92661
S'padding'
p92662
sS'required'
p92663
I00
sS'group_name'
p92664
S'Advanced'
p92665
sa(dp92666
S'description'
p92667
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p92668
sS'cpp_type'
p92669
S'libMesh::Point'
p92670
sS'default'
p92671
g3
sS'name'
p92672
S'position'
p92673
sS'required'
p92674
I00
sS'group_name'
p92675
S'Oversampling'
p92676
sa(dp92677
S'description'
p92678
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p92679
sS'cpp_type'
p92680
S'unsigned int'
p92681
sS'default'
p92682
S'0'
p92683
sS'name'
p92684
S'refinements'
p92685
sS'required'
p92686
I00
sS'group_name'
p92687
S'Oversampling'
p92688
sa(dp92689
S'description'
p92690
S'Output scalar variables as nodal\n'
p92691
sS'cpp_type'
p92692
S'bool'
p92693
sS'default'
p92694
S'0'
p92695
sS'name'
p92696
S'scalar_as_nodal'
p92697
sS'required'
p92698
I00
sS'group_name'
p92699
S'Variables'
p92700
sa(dp92701
S'description'
p92702
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p92703
sS'cpp_type'
p92704
S'bool'
p92705
sS'default'
p92706
g3
sS'name'
p92707
S'sequence'
p92708
sS'required'
p92709
I00
sS'group_name'
p92710
Nsa(dp92711
S'description'
p92712
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p92713
sS'cpp_type'
p92714
S'std::vector<VariableName, std::allocator<VariableName> >'
p92715
sS'default'
p92716
g3
sS'name'
p92717
S'show'
p92718
sS'required'
p92719
I00
sS'group_name'
p92720
S'Variables'
p92721
sa(dp92722
S'description'
p92723
S'List of materialproperties that should be written to the output\n'
p92724
sS'cpp_type'
p92725
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92726
sS'default'
p92727
g3
sS'name'
p92728
S'show_material_properties'
p92729
sS'required'
p92730
I00
sS'group_name'
p92731
S'Materials'
p92732
sa(dp92733
S'description'
p92734
S'Time at which this output object begins to operate\n'
p92735
sS'cpp_type'
p92736
S'double'
p92737
sS'default'
p92738
g3
sS'name'
p92739
S'start_time'
p92740
sS'required'
p92741
I00
sS'group_name'
p92742
S'Timing'
p92743
sa(dp92744
S'description'
p92745
S'Only export results at sync times\n'
p92746
sS'cpp_type'
p92747
S'bool'
p92748
sS'default'
p92749
S'0'
p92750
sS'name'
p92751
S'sync_only'
p92752
sS'required'
p92753
I00
sS'group_name'
p92754
S'Timing'
p92755
sa(dp92756
S'description'
p92757
S'Times at which the output and solution is forced to occur\n'
p92758
sS'cpp_type'
p92759
S'std::vector<double, std::allocator<double> >'
p92760
sS'default'
p92761
g3
sS'name'
p92762
S'sync_times'
p92763
sS'required'
p92764
I00
sS'group_name'
p92765
S'Timing'
p92766
sa(dp92767
S'description'
p92768
S'Time tolerance utilized checking start and end times\n'
p92769
sS'cpp_type'
p92770
S'double'
p92771
sS'default'
p92772
S'1e-14'
p92773
sS'name'
p92774
S'time_tolerance'
p92775
sS'required'
p92776
I00
sS'group_name'
p92777
S'Timing'
p92778
sa(dp92779
S'description'
p92780
g3
sS'cpp_type'
p92781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92782
sS'default'
p92783
S'Exodus'
p92784
sS'name'
p92785
S'type'
p92786
sS'required'
p92787
I00
sS'group_name'
p92788
Nsa(dp92789
S'description'
p92790
S'Enable/disable the use of the displaced mesh for outputting\n'
p92791
sS'cpp_type'
p92792
S'bool'
p92793
sS'default'
p92794
S'0'
p92795
sS'name'
p92796
S'use_displaced'
p92797
sS'required'
p92798
I00
sS'group_name'
p92799
Nsa(dp92800
S'description'
p92801
S'Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n'
p92802
sS'cpp_type'
p92803
S'bool'
p92804
sS'default'
p92805
g3
sS'name'
p92806
S'use_problem_dimension'
p92807
sS'required'
p92808
I00
sS'group_name'
p92809
NsasS'name'
p92810
S'/Outputs/Exodus'
p92811
sa(dp92812
S'description'
p92813
S'Object for outputting data in the GMV format\n'
p92814
sS'subblocks'
p92815
NsS'parameters'
p92816
(lp92817
(dp92818
S'name'
p92819
S'additional_execute_on'
p92820
sS'cpp_type'
p92821
S'MultiMooseEnum'
p92822
sS'default'
p92823
g3
sS'description'
p92824
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92825
sS'required'
p92826
I00
sS'options'
p92827
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92828
sS'group_name'
p92829
Nsa(dp92830
S'description'
p92831
S'When true the date and time are appended to the output filename.\n'
p92832
sS'cpp_type'
p92833
S'bool'
p92834
sS'default'
p92835
S'0'
p92836
sS'name'
p92837
S'append_date'
p92838
sS'required'
p92839
I00
sS'group_name'
p92840
Nsa(dp92841
S'description'
p92842
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p92843
sS'cpp_type'
p92844
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92845
sS'default'
p92846
g3
sS'name'
p92847
S'append_date_format'
p92848
sS'required'
p92849
I00
sS'group_name'
p92850
Nsa(dp92851
S'description'
p92852
S"Append '_oversample' to the output file base\n"
p92853
sS'cpp_type'
p92854
S'bool'
p92855
sS'default'
p92856
S'0'
p92857
sS'name'
p92858
S'append_oversample'
p92859
sS'required'
p92860
I00
sS'group_name'
p92861
Nsa(dp92862
S'description'
p92863
S'Output the file in binary format\n'
p92864
sS'cpp_type'
p92865
S'bool'
p92866
sS'default'
p92867
S'1'
p92868
sS'name'
p92869
S'binary'
p92870
sS'required'
p92871
I00
sS'group_name'
p92872
S'Advanced'
p92873
sa(dp92874
S'description'
p92875
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92876
sS'cpp_type'
p92877
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92878
sS'default'
p92879
g3
sS'name'
p92880
S'control_tags'
p92881
sS'required'
p92882
I00
sS'group_name'
p92883
S'Advanced'
p92884
sa(dp92885
S'description'
p92886
S'Set the enabled status of the MooseObject.\n'
p92887
sS'cpp_type'
p92888
S'bool'
p92889
sS'default'
p92890
S'1'
p92891
sS'name'
p92892
S'enable'
p92893
sS'required'
p92894
I00
sS'group_name'
p92895
S'Advanced'
p92896
sa(dp92897
S'description'
p92898
S'Time at which this output object stop operating\n'
p92899
sS'cpp_type'
p92900
S'double'
p92901
sS'default'
p92902
g3
sS'name'
p92903
S'end_time'
p92904
sS'required'
p92905
I00
sS'group_name'
p92906
S'Timing'
p92907
sa(dp92908
S'name'
p92909
S'execute_on'
p92910
sS'cpp_type'
p92911
S'MultiMooseEnum'
p92912
sS'default'
p92913
S'INITIAL TIMESTEP_END'
p92914
sS'description'
p92915
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92916
sS'required'
p92917
I00
sS'options'
p92918
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92919
sS'group_name'
p92920
Nsa(dp92921
S'description'
p92922
S'The name of the mesh file to read, for oversampling\n'
p92923
sS'cpp_type'
p92924
S'MeshFileName'
p92925
sS'default'
p92926
g3
sS'name'
p92927
S'file'
p92928
sS'required'
p92929
I00
sS'group_name'
p92930
S'Oversampling'
p92931
sa(dp92932
S'description'
p92933
S'The desired solution output name without an extension\n'
p92934
sS'cpp_type'
p92935
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92936
sS'default'
p92937
g3
sS'name'
p92938
S'file_base'
p92939
sS'required'
p92940
I00
sS'group_name'
p92941
Nsa(dp92942
S'description'
p92943
S'The interval at which time steps are output to the solution file\n'
p92944
sS'cpp_type'
p92945
S'unsigned int'
p92946
sS'default'
p92947
S'1'
p92948
sS'name'
p92949
S'interval'
p92950
sS'required'
p92951
I00
sS'group_name'
p92952
S'Timing'
p92953
sa(dp92954
S'description'
p92955
S'Number of divisions applied to time step when outputting linear residuals\n'
p92956
sS'cpp_type'
p92957
S'double'
p92958
sS'default'
p92959
S'1000'
p92960
sS'name'
p92961
S'linear_residual_dt_divisor'
p92962
sS'required'
p92963
I00
sS'group_name'
p92964
S'PETSc'
p92965
sa(dp92966
S'description'
p92967
S'Specifies an end time to begin output on each linear residual evaluation\n'
p92968
sS'cpp_type'
p92969
S'double'
p92970
sS'default'
p92971
g3
sS'name'
p92972
S'linear_residual_end_time'
p92973
sS'required'
p92974
I00
sS'group_name'
p92975
S'PETSc'
p92976
sa(dp92977
S'description'
p92978
S'Specifies a start time to begin output on each linear residual evaluation\n'
p92979
sS'cpp_type'
p92980
S'double'
p92981
sS'default'
p92982
g3
sS'name'
p92983
S'linear_residual_start_time'
p92984
sS'required'
p92985
I00
sS'group_name'
p92986
S'PETSc'
p92987
sa(dp92988
S'description'
p92989
S'Specifies whether output occurs on each linear residual evaluation\n'
p92990
sS'cpp_type'
p92991
S'bool'
p92992
sS'default'
p92993
S'0'
p92994
sS'name'
p92995
S'linear_residuals'
p92996
sS'required'
p92997
I00
sS'group_name'
p92998
S'PETSc'
p92999
sa(dp93000
S'description'
p93001
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p93002
sS'cpp_type'
p93003
S'double'
p93004
sS'default'
p93005
S'1000'
p93006
sS'name'
p93007
S'nonlinear_residual_dt_divisor'
p93008
sS'required'
p93009
I00
sS'group_name'
p93010
S'PETSc'
p93011
sa(dp93012
S'description'
p93013
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p93014
sS'cpp_type'
p93015
S'double'
p93016
sS'default'
p93017
g3
sS'name'
p93018
S'nonlinear_residual_end_time'
p93019
sS'required'
p93020
I00
sS'group_name'
p93021
S'PETSc'
p93022
sa(dp93023
S'description'
p93024
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p93025
sS'cpp_type'
p93026
S'double'
p93027
sS'default'
p93028
g3
sS'name'
p93029
S'nonlinear_residual_start_time'
p93030
sS'required'
p93031
I00
sS'group_name'
p93032
S'PETSc'
p93033
sa(dp93034
S'description'
p93035
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93036
sS'cpp_type'
p93037
S'bool'
p93038
sS'default'
p93039
S'0'
p93040
sS'name'
p93041
S'nonlinear_residuals'
p93042
sS'required'
p93043
I00
sS'group_name'
p93044
S'PETSc'
p93045
sa(dp93046
S'description'
p93047
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p93048
sS'cpp_type'
p93049
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93050
sS'default'
p93051
g3
sS'name'
p93052
S'output_if_base_contains'
p93053
sS'required'
p93054
I00
sS'group_name'
p93055
S'Advanced'
p93056
sa(dp93057
S'description'
p93058
S'Specifies whether output occurs on each linear residual evaluation\n'
p93059
sS'cpp_type'
p93060
S'bool'
p93061
sS'default'
p93062
S'0'
p93063
sS'name'
p93064
S'output_linear'
p93065
sS'required'
p93066
I00
sS'group_name'
p93067
Nsa(dp93068
S'description'
p93069
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93070
sS'cpp_type'
p93071
S'bool'
p93072
sS'default'
p93073
S'0'
p93074
sS'name'
p93075
S'output_nonlinear'
p93076
sS'required'
p93077
I00
sS'group_name'
p93078
Nsa(dp93079
S'description'
p93080
S'Set to true to enable oversampling\n'
p93081
sS'cpp_type'
p93082
S'bool'
p93083
sS'default'
p93084
S'0'
p93085
sS'name'
p93086
S'oversample'
p93087
sS'required'
p93088
I00
sS'group_name'
p93089
Nsa(dp93090
S'description'
p93091
S'The number of for extension suffix (e.g., out.e-s002)\n'
p93092
sS'cpp_type'
p93093
S'unsigned int'
p93094
sS'default'
p93095
S'4'
p93096
sS'name'
p93097
S'padding'
p93098
sS'required'
p93099
I00
sS'group_name'
p93100
S'Advanced'
p93101
sa(dp93102
S'description'
p93103
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p93104
sS'cpp_type'
p93105
S'libMesh::Point'
p93106
sS'default'
p93107
g3
sS'name'
p93108
S'position'
p93109
sS'required'
p93110
I00
sS'group_name'
p93111
S'Oversampling'
p93112
sa(dp93113
S'description'
p93114
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p93115
sS'cpp_type'
p93116
S'unsigned int'
p93117
sS'default'
p93118
S'0'
p93119
sS'name'
p93120
S'refinements'
p93121
sS'required'
p93122
I00
sS'group_name'
p93123
S'Oversampling'
p93124
sa(dp93125
S'description'
p93126
S'Time at which this output object begins to operate\n'
p93127
sS'cpp_type'
p93128
S'double'
p93129
sS'default'
p93130
g3
sS'name'
p93131
S'start_time'
p93132
sS'required'
p93133
I00
sS'group_name'
p93134
S'Timing'
p93135
sa(dp93136
S'description'
p93137
S'Only export results at sync times\n'
p93138
sS'cpp_type'
p93139
S'bool'
p93140
sS'default'
p93141
S'0'
p93142
sS'name'
p93143
S'sync_only'
p93144
sS'required'
p93145
I00
sS'group_name'
p93146
S'Timing'
p93147
sa(dp93148
S'description'
p93149
S'Times at which the output and solution is forced to occur\n'
p93150
sS'cpp_type'
p93151
S'std::vector<double, std::allocator<double> >'
p93152
sS'default'
p93153
g3
sS'name'
p93154
S'sync_times'
p93155
sS'required'
p93156
I00
sS'group_name'
p93157
S'Timing'
p93158
sa(dp93159
S'description'
p93160
S'Time tolerance utilized checking start and end times\n'
p93161
sS'cpp_type'
p93162
S'double'
p93163
sS'default'
p93164
S'1e-14'
p93165
sS'name'
p93166
S'time_tolerance'
p93167
sS'required'
p93168
I00
sS'group_name'
p93169
S'Timing'
p93170
sa(dp93171
S'description'
p93172
g3
sS'cpp_type'
p93173
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93174
sS'default'
p93175
S'GMV'
p93176
sS'name'
p93177
S'type'
p93178
sS'required'
p93179
I00
sS'group_name'
p93180
Nsa(dp93181
S'description'
p93182
S'Enable/disable the use of the displaced mesh for outputting\n'
p93183
sS'cpp_type'
p93184
S'bool'
p93185
sS'default'
p93186
S'0'
p93187
sS'name'
p93188
S'use_displaced'
p93189
sS'required'
p93190
I00
sS'group_name'
p93191
NsasS'name'
p93192
S'/Outputs/GMV'
p93193
sa(dp93194
S'description'
p93195
g3
sS'subblocks'
p93196
NsS'parameters'
p93197
(lp93198
(dp93199
S'name'
p93200
S'additional_execute_on'
p93201
sS'cpp_type'
p93202
S'MultiMooseEnum'
p93203
sS'default'
p93204
g3
sS'description'
p93205
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93206
sS'required'
p93207
I00
sS'options'
p93208
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93209
sS'group_name'
p93210
Nsa(dp93211
S'description'
p93212
S'When true the date and time are appended to the output filename.\n'
p93213
sS'cpp_type'
p93214
S'bool'
p93215
sS'default'
p93216
S'0'
p93217
sS'name'
p93218
S'append_date'
p93219
sS'required'
p93220
I00
sS'group_name'
p93221
Nsa(dp93222
S'description'
p93223
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p93224
sS'cpp_type'
p93225
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93226
sS'default'
p93227
g3
sS'name'
p93228
S'append_date_format'
p93229
sS'required'
p93230
I00
sS'group_name'
p93231
Nsa(dp93232
S'description'
p93233
S'Append existing file on restart\n'
p93234
sS'cpp_type'
p93235
S'bool'
p93236
sS'default'
p93237
S'0'
p93238
sS'name'
p93239
S'append_restart'
p93240
sS'required'
p93241
I00
sS'group_name'
p93242
Nsa(dp93243
S'description'
p93244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93245
sS'cpp_type'
p93246
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93247
sS'default'
p93248
g3
sS'name'
p93249
S'control_tags'
p93250
sS'required'
p93251
I00
sS'group_name'
p93252
S'Advanced'
p93253
sa(dp93254
S'description'
p93255
S'Set the enabled status of the MooseObject.\n'
p93256
sS'cpp_type'
p93257
S'bool'
p93258
sS'default'
p93259
S'1'
p93260
sS'name'
p93261
S'enable'
p93262
sS'required'
p93263
I00
sS'group_name'
p93264
S'Advanced'
p93265
sa(dp93266
S'description'
p93267
S'Time at which this output object stop operating\n'
p93268
sS'cpp_type'
p93269
S'double'
p93270
sS'default'
p93271
g3
sS'name'
p93272
S'end_time'
p93273
sS'required'
p93274
I00
sS'group_name'
p93275
S'Timing'
p93276
sa(dp93277
S'description'
p93278
S'Enable/disable the output of elemental variables\n'
p93279
sS'cpp_type'
p93280
S'bool'
p93281
sS'default'
p93282
S'1'
p93283
sS'name'
p93284
S'execute_elemental_variables'
p93285
sS'required'
p93286
I00
sS'group_name'
p93287
Nsa(dp93288
S'description'
p93289
S'Enable/disable the output of input file information\n'
p93290
sS'cpp_type'
p93291
S'bool'
p93292
sS'default'
p93293
S'1'
p93294
sS'name'
p93295
S'execute_input'
p93296
sS'required'
p93297
I00
sS'group_name'
p93298
Nsa(dp93299
S'description'
p93300
S'Enable/disable the output of nodal variables\n'
p93301
sS'cpp_type'
p93302
S'bool'
p93303
sS'default'
p93304
S'1'
p93305
sS'name'
p93306
S'execute_nodal_variables'
p93307
sS'required'
p93308
I00
sS'group_name'
p93309
Nsa(dp93310
S'name'
p93311
S'execute_on'
p93312
sS'cpp_type'
p93313
S'MultiMooseEnum'
p93314
sS'default'
p93315
S'INITIAL TIMESTEP_END'
p93316
sS'description'
p93317
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93318
sS'required'
p93319
I00
sS'options'
p93320
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93321
sS'group_name'
p93322
Nsa(dp93323
S'name'
p93324
S'execute_postprocessors_on'
p93325
sS'cpp_type'
p93326
S'MultiMooseEnum'
p93327
sS'default'
p93328
g3
sS'description'
p93329
S'Control of when postprocessors are output\n'
p93330
sS'required'
p93331
I00
sS'options'
p93332
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93333
sS'group_name'
p93334
S'Variables'
p93335
sa(dp93336
S'description'
p93337
S'Enable/disable the output of aux scalar variables\n'
p93338
sS'cpp_type'
p93339
S'bool'
p93340
sS'default'
p93341
S'1'
p93342
sS'name'
p93343
S'execute_scalar_variables'
p93344
sS'required'
p93345
I00
sS'group_name'
p93346
Nsa(dp93347
S'name'
p93348
S'execute_scalars_on'
p93349
sS'cpp_type'
p93350
S'MultiMooseEnum'
p93351
sS'default'
p93352
g3
sS'description'
p93353
S'Control the output of scalar variables\n'
p93354
sS'required'
p93355
I00
sS'options'
p93356
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93357
sS'group_name'
p93358
S'Variables'
p93359
sa(dp93360
S'description'
p93361
S'Enable/disable the output of the simulation information\n'
p93362
sS'cpp_type'
p93363
S'bool'
p93364
sS'default'
p93365
S'1'
p93366
sS'name'
p93367
S'execute_system_information'
p93368
sS'required'
p93369
I00
sS'group_name'
p93370
Nsa(dp93371
S'description'
p93372
S'Enable/disable the output of vector postprocessors\n'
p93373
sS'cpp_type'
p93374
S'bool'
p93375
sS'default'
p93376
S'1'
p93377
sS'name'
p93378
S'execute_vector_postprocessors'
p93379
sS'required'
p93380
I00
sS'group_name'
p93381
Nsa(dp93382
S'name'
p93383
S'execute_vector_postprocessors_on'
p93384
sS'cpp_type'
p93385
S'MultiMooseEnum'
p93386
sS'default'
p93387
g3
sS'description'
p93388
S'Enable/disable the output of VectorPostprocessors\n'
p93389
sS'required'
p93390
I00
sS'options'
p93391
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93392
sS'group_name'
p93393
S'Variables'
p93394
sa(dp93395
S'name'
p93396
S'extension'
p93397
sS'cpp_type'
p93398
S'MooseEnum'
p93399
sS'default'
p93400
S'png'
p93401
sS'description'
p93402
S'GNU plot file extension\n'
p93403
sS'required'
p93404
I00
sS'options'
p93405
S'png ps gif'
p93406
sS'group_name'
p93407
Nsa(dp93408
S'description'
p93409
S'The desired solution output name without an extension\n'
p93410
sS'cpp_type'
p93411
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93412
sS'default'
p93413
g3
sS'name'
p93414
S'file_base'
p93415
sS'required'
p93416
I00
sS'group_name'
p93417
Nsa(dp93418
S'description'
p93419
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93420
sS'cpp_type'
p93421
S'std::vector<VariableName, std::allocator<VariableName> >'
p93422
sS'default'
p93423
g3
sS'name'
p93424
S'hide'
p93425
sS'required'
p93426
I00
sS'group_name'
p93427
S'Variables'
p93428
sa(dp93429
S'description'
p93430
S'The interval at which time steps are output to the solution file\n'
p93431
sS'cpp_type'
p93432
S'unsigned int'
p93433
sS'default'
p93434
S'1'
p93435
sS'name'
p93436
S'interval'
p93437
sS'required'
p93438
I00
sS'group_name'
p93439
S'Timing'
p93440
sa(dp93441
S'description'
p93442
S'Number of divisions applied to time step when outputting linear residuals\n'
p93443
sS'cpp_type'
p93444
S'double'
p93445
sS'default'
p93446
S'1000'
p93447
sS'name'
p93448
S'linear_residual_dt_divisor'
p93449
sS'required'
p93450
I00
sS'group_name'
p93451
S'PETSc'
p93452
sa(dp93453
S'description'
p93454
S'Specifies an end time to begin output on each linear residual evaluation\n'
p93455
sS'cpp_type'
p93456
S'double'
p93457
sS'default'
p93458
g3
sS'name'
p93459
S'linear_residual_end_time'
p93460
sS'required'
p93461
I00
sS'group_name'
p93462
S'PETSc'
p93463
sa(dp93464
S'description'
p93465
S'Specifies a start time to begin output on each linear residual evaluation\n'
p93466
sS'cpp_type'
p93467
S'double'
p93468
sS'default'
p93469
g3
sS'name'
p93470
S'linear_residual_start_time'
p93471
sS'required'
p93472
I00
sS'group_name'
p93473
S'PETSc'
p93474
sa(dp93475
S'description'
p93476
S'Specifies whether output occurs on each linear residual evaluation\n'
p93477
sS'cpp_type'
p93478
S'bool'
p93479
sS'default'
p93480
S'0'
p93481
sS'name'
p93482
S'linear_residuals'
p93483
sS'required'
p93484
I00
sS'group_name'
p93485
S'PETSc'
p93486
sa(dp93487
S'description'
p93488
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p93489
sS'cpp_type'
p93490
S'double'
p93491
sS'default'
p93492
S'1000'
p93493
sS'name'
p93494
S'nonlinear_residual_dt_divisor'
p93495
sS'required'
p93496
I00
sS'group_name'
p93497
S'PETSc'
p93498
sa(dp93499
S'description'
p93500
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p93501
sS'cpp_type'
p93502
S'double'
p93503
sS'default'
p93504
g3
sS'name'
p93505
S'nonlinear_residual_end_time'
p93506
sS'required'
p93507
I00
sS'group_name'
p93508
S'PETSc'
p93509
sa(dp93510
S'description'
p93511
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p93512
sS'cpp_type'
p93513
S'double'
p93514
sS'default'
p93515
g3
sS'name'
p93516
S'nonlinear_residual_start_time'
p93517
sS'required'
p93518
I00
sS'group_name'
p93519
S'PETSc'
p93520
sa(dp93521
S'description'
p93522
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93523
sS'cpp_type'
p93524
S'bool'
p93525
sS'default'
p93526
S'0'
p93527
sS'name'
p93528
S'nonlinear_residuals'
p93529
sS'required'
p93530
I00
sS'group_name'
p93531
S'PETSc'
p93532
sa(dp93533
S'description'
p93534
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p93535
sS'cpp_type'
p93536
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93537
sS'default'
p93538
g3
sS'name'
p93539
S'output_if_base_contains'
p93540
sS'required'
p93541
I00
sS'group_name'
p93542
S'Advanced'
p93543
sa(dp93544
S'description'
p93545
S'Specifies whether output occurs on each linear residual evaluation\n'
p93546
sS'cpp_type'
p93547
S'bool'
p93548
sS'default'
p93549
S'0'
p93550
sS'name'
p93551
S'output_linear'
p93552
sS'required'
p93553
I00
sS'group_name'
p93554
Nsa(dp93555
S'description'
p93556
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93557
sS'cpp_type'
p93558
S'bool'
p93559
sS'default'
p93560
S'0'
p93561
sS'name'
p93562
S'output_nonlinear'
p93563
sS'required'
p93564
I00
sS'group_name'
p93565
Nsa(dp93566
S'description'
p93567
S'Enable/disable the output of postprocessors\n'
p93568
sS'cpp_type'
p93569
S'bool'
p93570
sS'default'
p93571
S'1'
p93572
sS'name'
p93573
S'output_postprocessors'
p93574
sS'required'
p93575
I00
sS'group_name'
p93576
Nsa(dp93577
S'description'
p93578
S'The number of for extension suffix (e.g., out.e-s002)\n'
p93579
sS'cpp_type'
p93580
S'unsigned int'
p93581
sS'default'
p93582
S'4'
p93583
sS'name'
p93584
S'padding'
p93585
sS'required'
p93586
I00
sS'group_name'
p93587
S'Advanced'
p93588
sa(dp93589
S'description'
p93590
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93591
sS'cpp_type'
p93592
S'std::vector<VariableName, std::allocator<VariableName> >'
p93593
sS'default'
p93594
g3
sS'name'
p93595
S'show'
p93596
sS'required'
p93597
I00
sS'group_name'
p93598
S'Variables'
p93599
sa(dp93600
S'description'
p93601
S'Time at which this output object begins to operate\n'
p93602
sS'cpp_type'
p93603
S'double'
p93604
sS'default'
p93605
g3
sS'name'
p93606
S'start_time'
p93607
sS'required'
p93608
I00
sS'group_name'
p93609
S'Timing'
p93610
sa(dp93611
S'description'
p93612
S'Only export results at sync times\n'
p93613
sS'cpp_type'
p93614
S'bool'
p93615
sS'default'
p93616
S'0'
p93617
sS'name'
p93618
S'sync_only'
p93619
sS'required'
p93620
I00
sS'group_name'
p93621
S'Timing'
p93622
sa(dp93623
S'description'
p93624
S'Times at which the output and solution is forced to occur\n'
p93625
sS'cpp_type'
p93626
S'std::vector<double, std::allocator<double> >'
p93627
sS'default'
p93628
g3
sS'name'
p93629
S'sync_times'
p93630
sS'required'
p93631
I00
sS'group_name'
p93632
S'Timing'
p93633
sa(dp93634
S'description'
p93635
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p93636
sS'cpp_type'
p93637
S'bool'
p93638
sS'default'
p93639
S'1'
p93640
sS'name'
p93641
S'time_column'
p93642
sS'required'
p93643
I00
sS'group_name'
p93644
Nsa(dp93645
S'description'
p93646
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p93647
sS'cpp_type'
p93648
S'bool'
p93649
sS'default'
p93650
S'0'
p93651
sS'name'
p93652
S'time_data'
p93653
sS'required'
p93654
I00
sS'group_name'
p93655
Nsa(dp93656
S'description'
p93657
S'Time tolerance utilized checking start and end times\n'
p93658
sS'cpp_type'
p93659
S'double'
p93660
sS'default'
p93661
S'1e-14'
p93662
sS'name'
p93663
S'time_tolerance'
p93664
sS'required'
p93665
I00
sS'group_name'
p93666
S'Timing'
p93667
sa(dp93668
S'description'
p93669
g3
sS'cpp_type'
p93670
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93671
sS'default'
p93672
S'Gnuplot'
p93673
sS'name'
p93674
S'type'
p93675
sS'required'
p93676
I00
sS'group_name'
p93677
Nsa(dp93678
S'description'
p93679
S'Enable/disable the use of the displaced mesh for outputting\n'
p93680
sS'cpp_type'
p93681
S'bool'
p93682
sS'default'
p93683
S'0'
p93684
sS'name'
p93685
S'use_displaced'
p93686
sS'required'
p93687
I00
sS'group_name'
p93688
NsasS'name'
p93689
S'/Outputs/Gnuplot'
p93690
sa(dp93691
S'description'
p93692
g3
sS'subblocks'
p93693
NsS'parameters'
p93694
(lp93695
(dp93696
S'name'
p93697
S'additional_execute_on'
p93698
sS'cpp_type'
p93699
S'MultiMooseEnum'
p93700
sS'default'
p93701
g3
sS'description'
p93702
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93703
sS'required'
p93704
I00
sS'options'
p93705
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93706
sS'group_name'
p93707
Nsa(dp93708
S'description'
p93709
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93710
sS'cpp_type'
p93711
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93712
sS'default'
p93713
g3
sS'name'
p93714
S'control_tags'
p93715
sS'required'
p93716
I00
sS'group_name'
p93717
S'Advanced'
p93718
sa(dp93719
S'description'
p93720
S'Set the enabled status of the MooseObject.\n'
p93721
sS'cpp_type'
p93722
S'bool'
p93723
sS'default'
p93724
S'1'
p93725
sS'name'
p93726
S'enable'
p93727
sS'required'
p93728
I00
sS'group_name'
p93729
S'Advanced'
p93730
sa(dp93731
S'description'
p93732
S'Time at which this output object stop operating\n'
p93733
sS'cpp_type'
p93734
S'double'
p93735
sS'default'
p93736
g3
sS'name'
p93737
S'end_time'
p93738
sS'required'
p93739
I00
sS'group_name'
p93740
S'Timing'
p93741
sa(dp93742
S'description'
p93743
S'The interval at which time steps are output to the solution file\n'
p93744
sS'cpp_type'
p93745
S'unsigned int'
p93746
sS'default'
p93747
S'1'
p93748
sS'name'
p93749
S'interval'
p93750
sS'required'
p93751
I00
sS'group_name'
p93752
S'Timing'
p93753
sa(dp93754
S'description'
p93755
S'Time at which this output object begins to operate\n'
p93756
sS'cpp_type'
p93757
S'double'
p93758
sS'default'
p93759
g3
sS'name'
p93760
S'start_time'
p93761
sS'required'
p93762
I00
sS'group_name'
p93763
S'Timing'
p93764
sa(dp93765
S'description'
p93766
S'Only export results at sync times\n'
p93767
sS'cpp_type'
p93768
S'bool'
p93769
sS'default'
p93770
S'0'
p93771
sS'name'
p93772
S'sync_only'
p93773
sS'required'
p93774
I00
sS'group_name'
p93775
S'Timing'
p93776
sa(dp93777
S'description'
p93778
S'Times at which the output and solution is forced to occur\n'
p93779
sS'cpp_type'
p93780
S'std::vector<double, std::allocator<double> >'
p93781
sS'default'
p93782
g3
sS'name'
p93783
S'sync_times'
p93784
sS'required'
p93785
I00
sS'group_name'
p93786
S'Timing'
p93787
sa(dp93788
S'description'
p93789
S'Time tolerance utilized checking start and end times\n'
p93790
sS'cpp_type'
p93791
S'double'
p93792
sS'default'
p93793
S'1e-14'
p93794
sS'name'
p93795
S'time_tolerance'
p93796
sS'required'
p93797
I00
sS'group_name'
p93798
S'Timing'
p93799
sa(dp93800
S'description'
p93801
g3
sS'cpp_type'
p93802
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93803
sS'default'
p93804
S'MaterialPropertyDebugOutput'
p93805
sS'name'
p93806
S'type'
p93807
sS'required'
p93808
I00
sS'group_name'
p93809
Nsa(dp93810
S'description'
p93811
S'Enable/disable the use of the displaced mesh for outputting\n'
p93812
sS'cpp_type'
p93813
S'bool'
p93814
sS'default'
p93815
S'0'
p93816
sS'name'
p93817
S'use_displaced'
p93818
sS'required'
p93819
I00
sS'group_name'
p93820
NsasS'name'
p93821
S'/Outputs/MaterialPropertyDebugOutput'
p93822
sa(dp93823
S'description'
p93824
S'Object for output data in the Nemesis format\n'
p93825
sS'subblocks'
p93826
NsS'parameters'
p93827
(lp93828
(dp93829
S'name'
p93830
S'additional_execute_on'
p93831
sS'cpp_type'
p93832
S'MultiMooseEnum'
p93833
sS'default'
p93834
g3
sS'description'
p93835
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93836
sS'required'
p93837
I00
sS'options'
p93838
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93839
sS'group_name'
p93840
Nsa(dp93841
S'description'
p93842
S'When true the date and time are appended to the output filename.\n'
p93843
sS'cpp_type'
p93844
S'bool'
p93845
sS'default'
p93846
S'0'
p93847
sS'name'
p93848
S'append_date'
p93849
sS'required'
p93850
I00
sS'group_name'
p93851
Nsa(dp93852
S'description'
p93853
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p93854
sS'cpp_type'
p93855
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93856
sS'default'
p93857
g3
sS'name'
p93858
S'append_date_format'
p93859
sS'required'
p93860
I00
sS'group_name'
p93861
Nsa(dp93862
S'description'
p93863
S"Append '_oversample' to the output file base\n"
p93864
sS'cpp_type'
p93865
S'bool'
p93866
sS'default'
p93867
S'0'
p93868
sS'name'
p93869
S'append_oversample'
p93870
sS'required'
p93871
I00
sS'group_name'
p93872
Nsa(dp93873
S'description'
p93874
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93875
sS'cpp_type'
p93876
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93877
sS'default'
p93878
g3
sS'name'
p93879
S'control_tags'
p93880
sS'required'
p93881
I00
sS'group_name'
p93882
S'Advanced'
p93883
sa(dp93884
S'description'
p93885
S'Set the enabled status of the MooseObject.\n'
p93886
sS'cpp_type'
p93887
S'bool'
p93888
sS'default'
p93889
S'1'
p93890
sS'name'
p93891
S'enable'
p93892
sS'required'
p93893
I00
sS'group_name'
p93894
S'Advanced'
p93895
sa(dp93896
S'description'
p93897
S'Time at which this output object stop operating\n'
p93898
sS'cpp_type'
p93899
S'double'
p93900
sS'default'
p93901
g3
sS'name'
p93902
S'end_time'
p93903
sS'required'
p93904
I00
sS'group_name'
p93905
S'Timing'
p93906
sa(dp93907
S'description'
p93908
S'Enable/disable the output of elemental variables\n'
p93909
sS'cpp_type'
p93910
S'bool'
p93911
sS'default'
p93912
S'1'
p93913
sS'name'
p93914
S'execute_elemental_variables'
p93915
sS'required'
p93916
I00
sS'group_name'
p93917
Nsa(dp93918
S'description'
p93919
S'Enable/disable the output of input file information\n'
p93920
sS'cpp_type'
p93921
S'bool'
p93922
sS'default'
p93923
S'1'
p93924
sS'name'
p93925
S'execute_input'
p93926
sS'required'
p93927
I00
sS'group_name'
p93928
Nsa(dp93929
S'name'
p93930
S'execute_input_on'
p93931
sS'cpp_type'
p93932
S'MultiMooseEnum'
p93933
sS'default'
p93934
g3
sS'description'
p93935
S'Enable/disable the output of the input file\n'
p93936
sS'required'
p93937
I00
sS'options'
p93938
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93939
sS'group_name'
p93940
S'Variables'
p93941
sa(dp93942
S'description'
p93943
S'Enable/disable the output of nodal variables\n'
p93944
sS'cpp_type'
p93945
S'bool'
p93946
sS'default'
p93947
S'1'
p93948
sS'name'
p93949
S'execute_nodal_variables'
p93950
sS'required'
p93951
I00
sS'group_name'
p93952
Nsa(dp93953
S'name'
p93954
S'execute_on'
p93955
sS'cpp_type'
p93956
S'MultiMooseEnum'
p93957
sS'default'
p93958
S'INITIAL TIMESTEP_END'
p93959
sS'description'
p93960
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93961
sS'required'
p93962
I00
sS'options'
p93963
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93964
sS'group_name'
p93965
Nsa(dp93966
S'name'
p93967
S'execute_postprocessors_on'
p93968
sS'cpp_type'
p93969
S'MultiMooseEnum'
p93970
sS'default'
p93971
g3
sS'description'
p93972
S'Control of when postprocessors are output\n'
p93973
sS'required'
p93974
I00
sS'options'
p93975
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93976
sS'group_name'
p93977
S'Variables'
p93978
sa(dp93979
S'description'
p93980
S'Enable/disable the output of aux scalar variables\n'
p93981
sS'cpp_type'
p93982
S'bool'
p93983
sS'default'
p93984
S'1'
p93985
sS'name'
p93986
S'execute_scalar_variables'
p93987
sS'required'
p93988
I00
sS'group_name'
p93989
Nsa(dp93990
S'name'
p93991
S'execute_scalars_on'
p93992
sS'cpp_type'
p93993
S'MultiMooseEnum'
p93994
sS'default'
p93995
g3
sS'description'
p93996
S'Control the output of scalar variables\n'
p93997
sS'required'
p93998
I00
sS'options'
p93999
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94000
sS'group_name'
p94001
S'Variables'
p94002
sa(dp94003
S'description'
p94004
S'Enable/disable the output of the simulation information\n'
p94005
sS'cpp_type'
p94006
S'bool'
p94007
sS'default'
p94008
S'1'
p94009
sS'name'
p94010
S'execute_system_information'
p94011
sS'required'
p94012
I00
sS'group_name'
p94013
Nsa(dp94014
S'description'
p94015
S'Enable/disable the output of vector postprocessors\n'
p94016
sS'cpp_type'
p94017
S'bool'
p94018
sS'default'
p94019
S'1'
p94020
sS'name'
p94021
S'execute_vector_postprocessors'
p94022
sS'required'
p94023
I00
sS'group_name'
p94024
Nsa(dp94025
S'description'
p94026
S'The name of the mesh file to read, for oversampling\n'
p94027
sS'cpp_type'
p94028
S'MeshFileName'
p94029
sS'default'
p94030
g3
sS'name'
p94031
S'file'
p94032
sS'required'
p94033
I00
sS'group_name'
p94034
S'Oversampling'
p94035
sa(dp94036
S'description'
p94037
S'The desired solution output name without an extension\n'
p94038
sS'cpp_type'
p94039
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94040
sS'default'
p94041
g3
sS'name'
p94042
S'file_base'
p94043
sS'required'
p94044
I00
sS'group_name'
p94045
Nsa(dp94046
S'description'
p94047
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94048
sS'cpp_type'
p94049
S'std::vector<VariableName, std::allocator<VariableName> >'
p94050
sS'default'
p94051
g3
sS'name'
p94052
S'hide'
p94053
sS'required'
p94054
I00
sS'group_name'
p94055
S'Variables'
p94056
sa(dp94057
S'description'
p94058
S'The interval at which time steps are output to the solution file\n'
p94059
sS'cpp_type'
p94060
S'unsigned int'
p94061
sS'default'
p94062
S'1'
p94063
sS'name'
p94064
S'interval'
p94065
sS'required'
p94066
I00
sS'group_name'
p94067
S'Timing'
p94068
sa(dp94069
S'description'
p94070
S'Number of divisions applied to time step when outputting linear residuals\n'
p94071
sS'cpp_type'
p94072
S'double'
p94073
sS'default'
p94074
S'1000'
p94075
sS'name'
p94076
S'linear_residual_dt_divisor'
p94077
sS'required'
p94078
I00
sS'group_name'
p94079
S'PETSc'
p94080
sa(dp94081
S'description'
p94082
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94083
sS'cpp_type'
p94084
S'double'
p94085
sS'default'
p94086
g3
sS'name'
p94087
S'linear_residual_end_time'
p94088
sS'required'
p94089
I00
sS'group_name'
p94090
S'PETSc'
p94091
sa(dp94092
S'description'
p94093
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94094
sS'cpp_type'
p94095
S'double'
p94096
sS'default'
p94097
g3
sS'name'
p94098
S'linear_residual_start_time'
p94099
sS'required'
p94100
I00
sS'group_name'
p94101
S'PETSc'
p94102
sa(dp94103
S'description'
p94104
S'Specifies whether output occurs on each linear residual evaluation\n'
p94105
sS'cpp_type'
p94106
S'bool'
p94107
sS'default'
p94108
S'0'
p94109
sS'name'
p94110
S'linear_residuals'
p94111
sS'required'
p94112
I00
sS'group_name'
p94113
S'PETSc'
p94114
sa(dp94115
S'description'
p94116
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94117
sS'cpp_type'
p94118
S'double'
p94119
sS'default'
p94120
S'1000'
p94121
sS'name'
p94122
S'nonlinear_residual_dt_divisor'
p94123
sS'required'
p94124
I00
sS'group_name'
p94125
S'PETSc'
p94126
sa(dp94127
S'description'
p94128
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94129
sS'cpp_type'
p94130
S'double'
p94131
sS'default'
p94132
g3
sS'name'
p94133
S'nonlinear_residual_end_time'
p94134
sS'required'
p94135
I00
sS'group_name'
p94136
S'PETSc'
p94137
sa(dp94138
S'description'
p94139
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94140
sS'cpp_type'
p94141
S'double'
p94142
sS'default'
p94143
g3
sS'name'
p94144
S'nonlinear_residual_start_time'
p94145
sS'required'
p94146
I00
sS'group_name'
p94147
S'PETSc'
p94148
sa(dp94149
S'description'
p94150
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94151
sS'cpp_type'
p94152
S'bool'
p94153
sS'default'
p94154
S'0'
p94155
sS'name'
p94156
S'nonlinear_residuals'
p94157
sS'required'
p94158
I00
sS'group_name'
p94159
S'PETSc'
p94160
sa(dp94161
S'description'
p94162
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94163
sS'cpp_type'
p94164
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94165
sS'default'
p94166
g3
sS'name'
p94167
S'output_if_base_contains'
p94168
sS'required'
p94169
I00
sS'group_name'
p94170
S'Advanced'
p94171
sa(dp94172
S'description'
p94173
S'Specifies whether output occurs on each linear residual evaluation\n'
p94174
sS'cpp_type'
p94175
S'bool'
p94176
sS'default'
p94177
S'0'
p94178
sS'name'
p94179
S'output_linear'
p94180
sS'required'
p94181
I00
sS'group_name'
p94182
Nsa(dp94183
S'description'
p94184
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94185
sS'cpp_type'
p94186
S'bool'
p94187
sS'default'
p94188
S'0'
p94189
sS'name'
p94190
S'output_nonlinear'
p94191
sS'required'
p94192
I00
sS'group_name'
p94193
Nsa(dp94194
S'description'
p94195
S'Enable/disable the output of postprocessors\n'
p94196
sS'cpp_type'
p94197
S'bool'
p94198
sS'default'
p94199
S'1'
p94200
sS'name'
p94201
S'output_postprocessors'
p94202
sS'required'
p94203
I00
sS'group_name'
p94204
Nsa(dp94205
S'description'
p94206
S'Set to true to enable oversampling\n'
p94207
sS'cpp_type'
p94208
S'bool'
p94209
sS'default'
p94210
S'0'
p94211
sS'name'
p94212
S'oversample'
p94213
sS'required'
p94214
I00
sS'group_name'
p94215
Nsa(dp94216
S'description'
p94217
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94218
sS'cpp_type'
p94219
S'unsigned int'
p94220
sS'default'
p94221
S'4'
p94222
sS'name'
p94223
S'padding'
p94224
sS'required'
p94225
I00
sS'group_name'
p94226
S'Advanced'
p94227
sa(dp94228
S'description'
p94229
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p94230
sS'cpp_type'
p94231
S'libMesh::Point'
p94232
sS'default'
p94233
g3
sS'name'
p94234
S'position'
p94235
sS'required'
p94236
I00
sS'group_name'
p94237
S'Oversampling'
p94238
sa(dp94239
S'description'
p94240
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p94241
sS'cpp_type'
p94242
S'unsigned int'
p94243
sS'default'
p94244
S'0'
p94245
sS'name'
p94246
S'refinements'
p94247
sS'required'
p94248
I00
sS'group_name'
p94249
S'Oversampling'
p94250
sa(dp94251
S'description'
p94252
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94253
sS'cpp_type'
p94254
S'std::vector<VariableName, std::allocator<VariableName> >'
p94255
sS'default'
p94256
g3
sS'name'
p94257
S'show'
p94258
sS'required'
p94259
I00
sS'group_name'
p94260
S'Variables'
p94261
sa(dp94262
S'description'
p94263
S'Time at which this output object begins to operate\n'
p94264
sS'cpp_type'
p94265
S'double'
p94266
sS'default'
p94267
g3
sS'name'
p94268
S'start_time'
p94269
sS'required'
p94270
I00
sS'group_name'
p94271
S'Timing'
p94272
sa(dp94273
S'description'
p94274
S'Only export results at sync times\n'
p94275
sS'cpp_type'
p94276
S'bool'
p94277
sS'default'
p94278
S'0'
p94279
sS'name'
p94280
S'sync_only'
p94281
sS'required'
p94282
I00
sS'group_name'
p94283
S'Timing'
p94284
sa(dp94285
S'description'
p94286
S'Times at which the output and solution is forced to occur\n'
p94287
sS'cpp_type'
p94288
S'std::vector<double, std::allocator<double> >'
p94289
sS'default'
p94290
g3
sS'name'
p94291
S'sync_times'
p94292
sS'required'
p94293
I00
sS'group_name'
p94294
S'Timing'
p94295
sa(dp94296
S'description'
p94297
S'Time tolerance utilized checking start and end times\n'
p94298
sS'cpp_type'
p94299
S'double'
p94300
sS'default'
p94301
S'1e-14'
p94302
sS'name'
p94303
S'time_tolerance'
p94304
sS'required'
p94305
I00
sS'group_name'
p94306
S'Timing'
p94307
sa(dp94308
S'description'
p94309
g3
sS'cpp_type'
p94310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94311
sS'default'
p94312
S'Nemesis'
p94313
sS'name'
p94314
S'type'
p94315
sS'required'
p94316
I00
sS'group_name'
p94317
Nsa(dp94318
S'description'
p94319
S'Enable/disable the use of the displaced mesh for outputting\n'
p94320
sS'cpp_type'
p94321
S'bool'
p94322
sS'default'
p94323
S'0'
p94324
sS'name'
p94325
S'use_displaced'
p94326
sS'required'
p94327
I00
sS'group_name'
p94328
NsasS'name'
p94329
S'/Outputs/Nemesis'
p94330
sa(dp94331
S'description'
p94332
g3
sS'subblocks'
p94333
NsS'parameters'
p94334
(lp94335
(dp94336
S'name'
p94337
S'additional_execute_on'
p94338
sS'cpp_type'
p94339
S'MultiMooseEnum'
p94340
sS'default'
p94341
g3
sS'description'
p94342
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94343
sS'required'
p94344
I00
sS'options'
p94345
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94346
sS'group_name'
p94347
Nsa(dp94348
S'description'
p94349
S'When true the date and time are appended to the output filename.\n'
p94350
sS'cpp_type'
p94351
S'bool'
p94352
sS'default'
p94353
S'0'
p94354
sS'name'
p94355
S'append_date'
p94356
sS'required'
p94357
I00
sS'group_name'
p94358
Nsa(dp94359
S'description'
p94360
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94361
sS'cpp_type'
p94362
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94363
sS'default'
p94364
g3
sS'name'
p94365
S'append_date_format'
p94366
sS'required'
p94367
I00
sS'group_name'
p94368
Nsa(dp94369
S'description'
p94370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94371
sS'cpp_type'
p94372
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94373
sS'default'
p94374
g3
sS'name'
p94375
S'control_tags'
p94376
sS'required'
p94377
I00
sS'group_name'
p94378
S'Advanced'
p94379
sa(dp94380
S'description'
p94381
S'Set the enabled status of the MooseObject.\n'
p94382
sS'cpp_type'
p94383
S'bool'
p94384
sS'default'
p94385
S'1'
p94386
sS'name'
p94387
S'enable'
p94388
sS'required'
p94389
I00
sS'group_name'
p94390
S'Advanced'
p94391
sa(dp94392
S'description'
p94393
S'Time at which this output object stop operating\n'
p94394
sS'cpp_type'
p94395
S'double'
p94396
sS'default'
p94397
g3
sS'name'
p94398
S'end_time'
p94399
sS'required'
p94400
I00
sS'group_name'
p94401
S'Timing'
p94402
sa(dp94403
S'name'
p94404
S'execute_on'
p94405
sS'cpp_type'
p94406
S'MultiMooseEnum'
p94407
sS'default'
p94408
S'INITIAL TIMESTEP_END'
p94409
sS'description'
p94410
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94411
sS'required'
p94412
I00
sS'options'
p94413
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94414
sS'group_name'
p94415
Nsa(dp94416
S'description'
p94417
S'The desired solution output name without an extension\n'
p94418
sS'cpp_type'
p94419
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94420
sS'default'
p94421
g3
sS'name'
p94422
S'file_base'
p94423
sS'required'
p94424
I00
sS'group_name'
p94425
Nsa(dp94426
S'description'
p94427
S'The interval at which time steps are output to the solution file\n'
p94428
sS'cpp_type'
p94429
S'unsigned int'
p94430
sS'default'
p94431
S'1'
p94432
sS'name'
p94433
S'interval'
p94434
sS'required'
p94435
I00
sS'group_name'
p94436
S'Timing'
p94437
sa(dp94438
S'description'
p94439
S'Number of divisions applied to time step when outputting linear residuals\n'
p94440
sS'cpp_type'
p94441
S'double'
p94442
sS'default'
p94443
S'1000'
p94444
sS'name'
p94445
S'linear_residual_dt_divisor'
p94446
sS'required'
p94447
I00
sS'group_name'
p94448
S'PETSc'
p94449
sa(dp94450
S'description'
p94451
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94452
sS'cpp_type'
p94453
S'double'
p94454
sS'default'
p94455
g3
sS'name'
p94456
S'linear_residual_end_time'
p94457
sS'required'
p94458
I00
sS'group_name'
p94459
S'PETSc'
p94460
sa(dp94461
S'description'
p94462
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94463
sS'cpp_type'
p94464
S'double'
p94465
sS'default'
p94466
g3
sS'name'
p94467
S'linear_residual_start_time'
p94468
sS'required'
p94469
I00
sS'group_name'
p94470
S'PETSc'
p94471
sa(dp94472
S'description'
p94473
S'Specifies whether output occurs on each linear residual evaluation\n'
p94474
sS'cpp_type'
p94475
S'bool'
p94476
sS'default'
p94477
S'0'
p94478
sS'name'
p94479
S'linear_residuals'
p94480
sS'required'
p94481
I00
sS'group_name'
p94482
S'PETSc'
p94483
sa(dp94484
S'description'
p94485
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94486
sS'cpp_type'
p94487
S'double'
p94488
sS'default'
p94489
S'1000'
p94490
sS'name'
p94491
S'nonlinear_residual_dt_divisor'
p94492
sS'required'
p94493
I00
sS'group_name'
p94494
S'PETSc'
p94495
sa(dp94496
S'description'
p94497
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94498
sS'cpp_type'
p94499
S'double'
p94500
sS'default'
p94501
g3
sS'name'
p94502
S'nonlinear_residual_end_time'
p94503
sS'required'
p94504
I00
sS'group_name'
p94505
S'PETSc'
p94506
sa(dp94507
S'description'
p94508
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94509
sS'cpp_type'
p94510
S'double'
p94511
sS'default'
p94512
g3
sS'name'
p94513
S'nonlinear_residual_start_time'
p94514
sS'required'
p94515
I00
sS'group_name'
p94516
S'PETSc'
p94517
sa(dp94518
S'description'
p94519
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94520
sS'cpp_type'
p94521
S'bool'
p94522
sS'default'
p94523
S'0'
p94524
sS'name'
p94525
S'nonlinear_residuals'
p94526
sS'required'
p94527
I00
sS'group_name'
p94528
S'PETSc'
p94529
sa(dp94530
S'description'
p94531
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94532
sS'cpp_type'
p94533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94534
sS'default'
p94535
g3
sS'name'
p94536
S'output_if_base_contains'
p94537
sS'required'
p94538
I00
sS'group_name'
p94539
S'Advanced'
p94540
sa(dp94541
S'description'
p94542
S'Specifies whether output occurs on each linear residual evaluation\n'
p94543
sS'cpp_type'
p94544
S'bool'
p94545
sS'default'
p94546
S'0'
p94547
sS'name'
p94548
S'output_linear'
p94549
sS'required'
p94550
I00
sS'group_name'
p94551
Nsa(dp94552
S'description'
p94553
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94554
sS'cpp_type'
p94555
S'bool'
p94556
sS'default'
p94557
S'0'
p94558
sS'name'
p94559
S'output_nonlinear'
p94560
sS'required'
p94561
I00
sS'group_name'
p94562
Nsa(dp94563
S'description'
p94564
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94565
sS'cpp_type'
p94566
S'unsigned int'
p94567
sS'default'
p94568
S'4'
p94569
sS'name'
p94570
S'padding'
p94571
sS'required'
p94572
I00
sS'group_name'
p94573
S'Advanced'
p94574
sa(dp94575
S'description'
p94576
S'Time at which this output object begins to operate\n'
p94577
sS'cpp_type'
p94578
S'double'
p94579
sS'default'
p94580
g3
sS'name'
p94581
S'start_time'
p94582
sS'required'
p94583
I00
sS'group_name'
p94584
S'Timing'
p94585
sa(dp94586
S'description'
p94587
S'Only export results at sync times\n'
p94588
sS'cpp_type'
p94589
S'bool'
p94590
sS'default'
p94591
S'0'
p94592
sS'name'
p94593
S'sync_only'
p94594
sS'required'
p94595
I00
sS'group_name'
p94596
S'Timing'
p94597
sa(dp94598
S'description'
p94599
S'Times at which the output and solution is forced to occur\n'
p94600
sS'cpp_type'
p94601
S'std::vector<double, std::allocator<double> >'
p94602
sS'default'
p94603
g3
sS'name'
p94604
S'sync_times'
p94605
sS'required'
p94606
I00
sS'group_name'
p94607
S'Timing'
p94608
sa(dp94609
S'description'
p94610
S'Time tolerance utilized checking start and end times\n'
p94611
sS'cpp_type'
p94612
S'double'
p94613
sS'default'
p94614
S'1e-14'
p94615
sS'name'
p94616
S'time_tolerance'
p94617
sS'required'
p94618
I00
sS'group_name'
p94619
S'Timing'
p94620
sa(dp94621
S'description'
p94622
g3
sS'cpp_type'
p94623
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94624
sS'default'
p94625
S'SolutionHistory'
p94626
sS'name'
p94627
S'type'
p94628
sS'required'
p94629
I00
sS'group_name'
p94630
Nsa(dp94631
S'description'
p94632
S'Enable/disable the use of the displaced mesh for outputting\n'
p94633
sS'cpp_type'
p94634
S'bool'
p94635
sS'default'
p94636
S'0'
p94637
sS'name'
p94638
S'use_displaced'
p94639
sS'required'
p94640
I00
sS'group_name'
p94641
NsasS'name'
p94642
S'/Outputs/SolutionHistory'
p94643
sa(dp94644
S'description'
p94645
S'Object for outputting data in the Tecplot format\n'
p94646
sS'subblocks'
p94647
NsS'parameters'
p94648
(lp94649
(dp94650
S'name'
p94651
S'additional_execute_on'
p94652
sS'cpp_type'
p94653
S'MultiMooseEnum'
p94654
sS'default'
p94655
g3
sS'description'
p94656
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94657
sS'required'
p94658
I00
sS'options'
p94659
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94660
sS'group_name'
p94661
Nsa(dp94662
S'description'
p94663
S'When true the date and time are appended to the output filename.\n'
p94664
sS'cpp_type'
p94665
S'bool'
p94666
sS'default'
p94667
S'0'
p94668
sS'name'
p94669
S'append_date'
p94670
sS'required'
p94671
I00
sS'group_name'
p94672
Nsa(dp94673
S'description'
p94674
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94675
sS'cpp_type'
p94676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94677
sS'default'
p94678
g3
sS'name'
p94679
S'append_date_format'
p94680
sS'required'
p94681
I00
sS'group_name'
p94682
Nsa(dp94683
S'description'
p94684
S"Append '_oversample' to the output file base\n"
p94685
sS'cpp_type'
p94686
S'bool'
p94687
sS'default'
p94688
S'0'
p94689
sS'name'
p94690
S'append_oversample'
p94691
sS'required'
p94692
I00
sS'group_name'
p94693
Nsa(dp94694
S'description'
p94695
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p94696
sS'cpp_type'
p94697
S'bool'
p94698
sS'default'
p94699
S'0'
p94700
sS'name'
p94701
S'ascii_append'
p94702
sS'required'
p94703
I00
sS'group_name'
p94704
Nsa(dp94705
S'description'
p94706
S'Set Tecplot files to output in binary format\n'
p94707
sS'cpp_type'
p94708
S'bool'
p94709
sS'default'
p94710
S'0'
p94711
sS'name'
p94712
S'binary'
p94713
sS'required'
p94714
I00
sS'group_name'
p94715
S'Advanced'
p94716
sa(dp94717
S'description'
p94718
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94719
sS'cpp_type'
p94720
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94721
sS'default'
p94722
g3
sS'name'
p94723
S'control_tags'
p94724
sS'required'
p94725
I00
sS'group_name'
p94726
S'Advanced'
p94727
sa(dp94728
S'description'
p94729
S'Set the enabled status of the MooseObject.\n'
p94730
sS'cpp_type'
p94731
S'bool'
p94732
sS'default'
p94733
S'1'
p94734
sS'name'
p94735
S'enable'
p94736
sS'required'
p94737
I00
sS'group_name'
p94738
S'Advanced'
p94739
sa(dp94740
S'description'
p94741
S'Time at which this output object stop operating\n'
p94742
sS'cpp_type'
p94743
S'double'
p94744
sS'default'
p94745
g3
sS'name'
p94746
S'end_time'
p94747
sS'required'
p94748
I00
sS'group_name'
p94749
S'Timing'
p94750
sa(dp94751
S'name'
p94752
S'execute_on'
p94753
sS'cpp_type'
p94754
S'MultiMooseEnum'
p94755
sS'default'
p94756
S'INITIAL TIMESTEP_END'
p94757
sS'description'
p94758
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94759
sS'required'
p94760
I00
sS'options'
p94761
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94762
sS'group_name'
p94763
Nsa(dp94764
S'description'
p94765
S'The name of the mesh file to read, for oversampling\n'
p94766
sS'cpp_type'
p94767
S'MeshFileName'
p94768
sS'default'
p94769
g3
sS'name'
p94770
S'file'
p94771
sS'required'
p94772
I00
sS'group_name'
p94773
S'Oversampling'
p94774
sa(dp94775
S'description'
p94776
S'The desired solution output name without an extension\n'
p94777
sS'cpp_type'
p94778
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94779
sS'default'
p94780
g3
sS'name'
p94781
S'file_base'
p94782
sS'required'
p94783
I00
sS'group_name'
p94784
Nsa(dp94785
S'description'
p94786
S'The interval at which time steps are output to the solution file\n'
p94787
sS'cpp_type'
p94788
S'unsigned int'
p94789
sS'default'
p94790
S'1'
p94791
sS'name'
p94792
S'interval'
p94793
sS'required'
p94794
I00
sS'group_name'
p94795
S'Timing'
p94796
sa(dp94797
S'description'
p94798
S'Number of divisions applied to time step when outputting linear residuals\n'
p94799
sS'cpp_type'
p94800
S'double'
p94801
sS'default'
p94802
S'1000'
p94803
sS'name'
p94804
S'linear_residual_dt_divisor'
p94805
sS'required'
p94806
I00
sS'group_name'
p94807
S'PETSc'
p94808
sa(dp94809
S'description'
p94810
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94811
sS'cpp_type'
p94812
S'double'
p94813
sS'default'
p94814
g3
sS'name'
p94815
S'linear_residual_end_time'
p94816
sS'required'
p94817
I00
sS'group_name'
p94818
S'PETSc'
p94819
sa(dp94820
S'description'
p94821
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94822
sS'cpp_type'
p94823
S'double'
p94824
sS'default'
p94825
g3
sS'name'
p94826
S'linear_residual_start_time'
p94827
sS'required'
p94828
I00
sS'group_name'
p94829
S'PETSc'
p94830
sa(dp94831
S'description'
p94832
S'Specifies whether output occurs on each linear residual evaluation\n'
p94833
sS'cpp_type'
p94834
S'bool'
p94835
sS'default'
p94836
S'0'
p94837
sS'name'
p94838
S'linear_residuals'
p94839
sS'required'
p94840
I00
sS'group_name'
p94841
S'PETSc'
p94842
sa(dp94843
S'description'
p94844
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94845
sS'cpp_type'
p94846
S'double'
p94847
sS'default'
p94848
S'1000'
p94849
sS'name'
p94850
S'nonlinear_residual_dt_divisor'
p94851
sS'required'
p94852
I00
sS'group_name'
p94853
S'PETSc'
p94854
sa(dp94855
S'description'
p94856
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94857
sS'cpp_type'
p94858
S'double'
p94859
sS'default'
p94860
g3
sS'name'
p94861
S'nonlinear_residual_end_time'
p94862
sS'required'
p94863
I00
sS'group_name'
p94864
S'PETSc'
p94865
sa(dp94866
S'description'
p94867
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94868
sS'cpp_type'
p94869
S'double'
p94870
sS'default'
p94871
g3
sS'name'
p94872
S'nonlinear_residual_start_time'
p94873
sS'required'
p94874
I00
sS'group_name'
p94875
S'PETSc'
p94876
sa(dp94877
S'description'
p94878
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94879
sS'cpp_type'
p94880
S'bool'
p94881
sS'default'
p94882
S'0'
p94883
sS'name'
p94884
S'nonlinear_residuals'
p94885
sS'required'
p94886
I00
sS'group_name'
p94887
S'PETSc'
p94888
sa(dp94889
S'description'
p94890
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94891
sS'cpp_type'
p94892
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94893
sS'default'
p94894
g3
sS'name'
p94895
S'output_if_base_contains'
p94896
sS'required'
p94897
I00
sS'group_name'
p94898
S'Advanced'
p94899
sa(dp94900
S'description'
p94901
S'Specifies whether output occurs on each linear residual evaluation\n'
p94902
sS'cpp_type'
p94903
S'bool'
p94904
sS'default'
p94905
S'0'
p94906
sS'name'
p94907
S'output_linear'
p94908
sS'required'
p94909
I00
sS'group_name'
p94910
Nsa(dp94911
S'description'
p94912
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94913
sS'cpp_type'
p94914
S'bool'
p94915
sS'default'
p94916
S'0'
p94917
sS'name'
p94918
S'output_nonlinear'
p94919
sS'required'
p94920
I00
sS'group_name'
p94921
Nsa(dp94922
S'description'
p94923
S'Set to true to enable oversampling\n'
p94924
sS'cpp_type'
p94925
S'bool'
p94926
sS'default'
p94927
S'0'
p94928
sS'name'
p94929
S'oversample'
p94930
sS'required'
p94931
I00
sS'group_name'
p94932
Nsa(dp94933
S'description'
p94934
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94935
sS'cpp_type'
p94936
S'unsigned int'
p94937
sS'default'
p94938
S'4'
p94939
sS'name'
p94940
S'padding'
p94941
sS'required'
p94942
I00
sS'group_name'
p94943
S'Advanced'
p94944
sa(dp94945
S'description'
p94946
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p94947
sS'cpp_type'
p94948
S'libMesh::Point'
p94949
sS'default'
p94950
g3
sS'name'
p94951
S'position'
p94952
sS'required'
p94953
I00
sS'group_name'
p94954
S'Oversampling'
p94955
sa(dp94956
S'description'
p94957
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p94958
sS'cpp_type'
p94959
S'unsigned int'
p94960
sS'default'
p94961
S'0'
p94962
sS'name'
p94963
S'refinements'
p94964
sS'required'
p94965
I00
sS'group_name'
p94966
S'Oversampling'
p94967
sa(dp94968
S'description'
p94969
S'Time at which this output object begins to operate\n'
p94970
sS'cpp_type'
p94971
S'double'
p94972
sS'default'
p94973
g3
sS'name'
p94974
S'start_time'
p94975
sS'required'
p94976
I00
sS'group_name'
p94977
S'Timing'
p94978
sa(dp94979
S'description'
p94980
S'Only export results at sync times\n'
p94981
sS'cpp_type'
p94982
S'bool'
p94983
sS'default'
p94984
S'0'
p94985
sS'name'
p94986
S'sync_only'
p94987
sS'required'
p94988
I00
sS'group_name'
p94989
S'Timing'
p94990
sa(dp94991
S'description'
p94992
S'Times at which the output and solution is forced to occur\n'
p94993
sS'cpp_type'
p94994
S'std::vector<double, std::allocator<double> >'
p94995
sS'default'
p94996
g3
sS'name'
p94997
S'sync_times'
p94998
sS'required'
p94999
I00
sS'group_name'
p95000
S'Timing'
p95001
sa(dp95002
S'description'
p95003
S'Time tolerance utilized checking start and end times\n'
p95004
sS'cpp_type'
p95005
S'double'
p95006
sS'default'
p95007
S'1e-14'
p95008
sS'name'
p95009
S'time_tolerance'
p95010
sS'required'
p95011
I00
sS'group_name'
p95012
S'Timing'
p95013
sa(dp95014
S'description'
p95015
g3
sS'cpp_type'
p95016
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95017
sS'default'
p95018
S'Tecplot'
p95019
sS'name'
p95020
S'type'
p95021
sS'required'
p95022
I00
sS'group_name'
p95023
Nsa(dp95024
S'description'
p95025
S'Enable/disable the use of the displaced mesh for outputting\n'
p95026
sS'cpp_type'
p95027
S'bool'
p95028
sS'default'
p95029
S'0'
p95030
sS'name'
p95031
S'use_displaced'
p95032
sS'required'
p95033
I00
sS'group_name'
p95034
NsasS'name'
p95035
S'/Outputs/Tecplot'
p95036
sa(dp95037
S'description'
p95038
g3
sS'subblocks'
p95039
NsS'parameters'
p95040
(lp95041
(dp95042
S'name'
p95043
S'additional_execute_on'
p95044
sS'cpp_type'
p95045
S'MultiMooseEnum'
p95046
sS'default'
p95047
g3
sS'description'
p95048
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95049
sS'required'
p95050
I00
sS'options'
p95051
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95052
sS'group_name'
p95053
Nsa(dp95054
S'description'
p95055
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95056
sS'cpp_type'
p95057
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95058
sS'default'
p95059
g3
sS'name'
p95060
S'control_tags'
p95061
sS'required'
p95062
I00
sS'group_name'
p95063
S'Advanced'
p95064
sa(dp95065
S'description'
p95066
S'Set the enabled status of the MooseObject.\n'
p95067
sS'cpp_type'
p95068
S'bool'
p95069
sS'default'
p95070
S'1'
p95071
sS'name'
p95072
S'enable'
p95073
sS'required'
p95074
I00
sS'group_name'
p95075
S'Advanced'
p95076
sa(dp95077
S'description'
p95078
S'Time at which this output object stop operating\n'
p95079
sS'cpp_type'
p95080
S'double'
p95081
sS'default'
p95082
g3
sS'name'
p95083
S'end_time'
p95084
sS'required'
p95085
I00
sS'group_name'
p95086
S'Timing'
p95087
sa(dp95088
S'name'
p95089
S'execute_on'
p95090
sS'cpp_type'
p95091
S'MultiMooseEnum'
p95092
sS'default'
p95093
S'LINEAR NONLINEAR TIMESTEP_END'
p95094
sS'description'
p95095
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95096
sS'required'
p95097
I00
sS'options'
p95098
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95099
sS'group_name'
p95100
Nsa(dp95101
S'description'
p95102
S'The interval at which time steps are output to the solution file\n'
p95103
sS'cpp_type'
p95104
S'unsigned int'
p95105
sS'default'
p95106
S'1'
p95107
sS'name'
p95108
S'interval'
p95109
sS'required'
p95110
I00
sS'group_name'
p95111
S'Timing'
p95112
sa(dp95113
S'description'
p95114
S'Number of divisions applied to time step when outputting linear residuals\n'
p95115
sS'cpp_type'
p95116
S'double'
p95117
sS'default'
p95118
S'1000'
p95119
sS'name'
p95120
S'linear_residual_dt_divisor'
p95121
sS'required'
p95122
I00
sS'group_name'
p95123
S'PETSc'
p95124
sa(dp95125
S'description'
p95126
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95127
sS'cpp_type'
p95128
S'double'
p95129
sS'default'
p95130
g3
sS'name'
p95131
S'linear_residual_end_time'
p95132
sS'required'
p95133
I00
sS'group_name'
p95134
S'PETSc'
p95135
sa(dp95136
S'description'
p95137
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95138
sS'cpp_type'
p95139
S'double'
p95140
sS'default'
p95141
g3
sS'name'
p95142
S'linear_residual_start_time'
p95143
sS'required'
p95144
I00
sS'group_name'
p95145
S'PETSc'
p95146
sa(dp95147
S'description'
p95148
S'Specifies whether output occurs on each linear residual evaluation\n'
p95149
sS'cpp_type'
p95150
S'bool'
p95151
sS'default'
p95152
S'0'
p95153
sS'name'
p95154
S'linear_residuals'
p95155
sS'required'
p95156
I00
sS'group_name'
p95157
S'PETSc'
p95158
sa(dp95159
S'description'
p95160
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95161
sS'cpp_type'
p95162
S'double'
p95163
sS'default'
p95164
S'1000'
p95165
sS'name'
p95166
S'nonlinear_residual_dt_divisor'
p95167
sS'required'
p95168
I00
sS'group_name'
p95169
S'PETSc'
p95170
sa(dp95171
S'description'
p95172
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95173
sS'cpp_type'
p95174
S'double'
p95175
sS'default'
p95176
g3
sS'name'
p95177
S'nonlinear_residual_end_time'
p95178
sS'required'
p95179
I00
sS'group_name'
p95180
S'PETSc'
p95181
sa(dp95182
S'description'
p95183
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95184
sS'cpp_type'
p95185
S'double'
p95186
sS'default'
p95187
g3
sS'name'
p95188
S'nonlinear_residual_start_time'
p95189
sS'required'
p95190
I00
sS'group_name'
p95191
S'PETSc'
p95192
sa(dp95193
S'description'
p95194
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95195
sS'cpp_type'
p95196
S'bool'
p95197
sS'default'
p95198
S'0'
p95199
sS'name'
p95200
S'nonlinear_residuals'
p95201
sS'required'
p95202
I00
sS'group_name'
p95203
S'PETSc'
p95204
sa(dp95205
S'description'
p95206
S'The number of top residuals to print out (0 = no output)\n'
p95207
sS'cpp_type'
p95208
S'unsigned int'
p95209
sS'default'
p95210
S'0'
p95211
sS'name'
p95212
S'num_residuals'
p95213
sS'required'
p95214
I00
sS'group_name'
p95215
Nsa(dp95216
S'description'
p95217
S'Specifies whether output occurs on each linear residual evaluation\n'
p95218
sS'cpp_type'
p95219
S'bool'
p95220
sS'default'
p95221
S'0'
p95222
sS'name'
p95223
S'output_linear'
p95224
sS'required'
p95225
I00
sS'group_name'
p95226
Nsa(dp95227
S'description'
p95228
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95229
sS'cpp_type'
p95230
S'bool'
p95231
sS'default'
p95232
S'0'
p95233
sS'name'
p95234
S'output_nonlinear'
p95235
sS'required'
p95236
I00
sS'group_name'
p95237
Nsa(dp95238
S'description'
p95239
S'Time at which this output object begins to operate\n'
p95240
sS'cpp_type'
p95241
S'double'
p95242
sS'default'
p95243
g3
sS'name'
p95244
S'start_time'
p95245
sS'required'
p95246
I00
sS'group_name'
p95247
S'Timing'
p95248
sa(dp95249
S'description'
p95250
S'Only export results at sync times\n'
p95251
sS'cpp_type'
p95252
S'bool'
p95253
sS'default'
p95254
S'0'
p95255
sS'name'
p95256
S'sync_only'
p95257
sS'required'
p95258
I00
sS'group_name'
p95259
S'Timing'
p95260
sa(dp95261
S'description'
p95262
S'Times at which the output and solution is forced to occur\n'
p95263
sS'cpp_type'
p95264
S'std::vector<double, std::allocator<double> >'
p95265
sS'default'
p95266
g3
sS'name'
p95267
S'sync_times'
p95268
sS'required'
p95269
I00
sS'group_name'
p95270
S'Timing'
p95271
sa(dp95272
S'description'
p95273
S'Time tolerance utilized checking start and end times\n'
p95274
sS'cpp_type'
p95275
S'double'
p95276
sS'default'
p95277
S'1e-14'
p95278
sS'name'
p95279
S'time_tolerance'
p95280
sS'required'
p95281
I00
sS'group_name'
p95282
S'Timing'
p95283
sa(dp95284
S'description'
p95285
g3
sS'cpp_type'
p95286
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95287
sS'default'
p95288
S'TopResidualDebugOutput'
p95289
sS'name'
p95290
S'type'
p95291
sS'required'
p95292
I00
sS'group_name'
p95293
Nsa(dp95294
S'description'
p95295
S'Enable/disable the use of the displaced mesh for outputting\n'
p95296
sS'cpp_type'
p95297
S'bool'
p95298
sS'default'
p95299
S'0'
p95300
sS'name'
p95301
S'use_displaced'
p95302
sS'required'
p95303
I00
sS'group_name'
p95304
NsasS'name'
p95305
S'/Outputs/TopResidualDebugOutput'
p95306
sa(dp95307
S'description'
p95308
g3
sS'subblocks'
p95309
NsS'parameters'
p95310
(lp95311
(dp95312
S'name'
p95313
S'additional_execute_on'
p95314
sS'cpp_type'
p95315
S'MultiMooseEnum'
p95316
sS'default'
p95317
g3
sS'description'
p95318
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95319
sS'required'
p95320
I00
sS'options'
p95321
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95322
sS'group_name'
p95323
Nsa(dp95324
S'description'
p95325
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95326
sS'cpp_type'
p95327
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95328
sS'default'
p95329
g3
sS'name'
p95330
S'control_tags'
p95331
sS'required'
p95332
I00
sS'group_name'
p95333
S'Advanced'
p95334
sa(dp95335
S'description'
p95336
S'Set the enabled status of the MooseObject.\n'
p95337
sS'cpp_type'
p95338
S'bool'
p95339
sS'default'
p95340
S'1'
p95341
sS'name'
p95342
S'enable'
p95343
sS'required'
p95344
I00
sS'group_name'
p95345
S'Advanced'
p95346
sa(dp95347
S'description'
p95348
S'Time at which this output object stop operating\n'
p95349
sS'cpp_type'
p95350
S'double'
p95351
sS'default'
p95352
g3
sS'name'
p95353
S'end_time'
p95354
sS'required'
p95355
I00
sS'group_name'
p95356
S'Timing'
p95357
sa(dp95358
S'name'
p95359
S'execute_on'
p95360
sS'cpp_type'
p95361
S'MultiMooseEnum'
p95362
sS'default'
p95363
S'NONLINEAR'
p95364
sS'description'
p95365
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95366
sS'required'
p95367
I00
sS'options'
p95368
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95369
sS'group_name'
p95370
Nsa(dp95371
S'description'
p95372
S'The interval at which time steps are output to the solution file\n'
p95373
sS'cpp_type'
p95374
S'unsigned int'
p95375
sS'default'
p95376
S'1'
p95377
sS'name'
p95378
S'interval'
p95379
sS'required'
p95380
I00
sS'group_name'
p95381
S'Timing'
p95382
sa(dp95383
S'description'
p95384
S'Number of divisions applied to time step when outputting linear residuals\n'
p95385
sS'cpp_type'
p95386
S'double'
p95387
sS'default'
p95388
S'1000'
p95389
sS'name'
p95390
S'linear_residual_dt_divisor'
p95391
sS'required'
p95392
I00
sS'group_name'
p95393
S'PETSc'
p95394
sa(dp95395
S'description'
p95396
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95397
sS'cpp_type'
p95398
S'double'
p95399
sS'default'
p95400
g3
sS'name'
p95401
S'linear_residual_end_time'
p95402
sS'required'
p95403
I00
sS'group_name'
p95404
S'PETSc'
p95405
sa(dp95406
S'description'
p95407
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95408
sS'cpp_type'
p95409
S'double'
p95410
sS'default'
p95411
g3
sS'name'
p95412
S'linear_residual_start_time'
p95413
sS'required'
p95414
I00
sS'group_name'
p95415
S'PETSc'
p95416
sa(dp95417
S'description'
p95418
S'Specifies whether output occurs on each linear residual evaluation\n'
p95419
sS'cpp_type'
p95420
S'bool'
p95421
sS'default'
p95422
S'0'
p95423
sS'name'
p95424
S'linear_residuals'
p95425
sS'required'
p95426
I00
sS'group_name'
p95427
S'PETSc'
p95428
sa(dp95429
S'description'
p95430
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95431
sS'cpp_type'
p95432
S'double'
p95433
sS'default'
p95434
S'1000'
p95435
sS'name'
p95436
S'nonlinear_residual_dt_divisor'
p95437
sS'required'
p95438
I00
sS'group_name'
p95439
S'PETSc'
p95440
sa(dp95441
S'description'
p95442
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95443
sS'cpp_type'
p95444
S'double'
p95445
sS'default'
p95446
g3
sS'name'
p95447
S'nonlinear_residual_end_time'
p95448
sS'required'
p95449
I00
sS'group_name'
p95450
S'PETSc'
p95451
sa(dp95452
S'description'
p95453
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95454
sS'cpp_type'
p95455
S'double'
p95456
sS'default'
p95457
g3
sS'name'
p95458
S'nonlinear_residual_start_time'
p95459
sS'required'
p95460
I00
sS'group_name'
p95461
S'PETSc'
p95462
sa(dp95463
S'description'
p95464
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95465
sS'cpp_type'
p95466
S'bool'
p95467
sS'default'
p95468
S'0'
p95469
sS'name'
p95470
S'nonlinear_residuals'
p95471
sS'required'
p95472
I00
sS'group_name'
p95473
S'PETSc'
p95474
sa(dp95475
S'description'
p95476
S'Specifies whether output occurs on each linear residual evaluation\n'
p95477
sS'cpp_type'
p95478
S'bool'
p95479
sS'default'
p95480
S'0'
p95481
sS'name'
p95482
S'output_linear'
p95483
sS'required'
p95484
I00
sS'group_name'
p95485
Nsa(dp95486
S'description'
p95487
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95488
sS'cpp_type'
p95489
S'bool'
p95490
sS'default'
p95491
S'0'
p95492
sS'name'
p95493
S'output_nonlinear'
p95494
sS'required'
p95495
I00
sS'group_name'
p95496
Nsa(dp95497
S'description'
p95498
S'Time at which this output object begins to operate\n'
p95499
sS'cpp_type'
p95500
S'double'
p95501
sS'default'
p95502
g3
sS'name'
p95503
S'start_time'
p95504
sS'required'
p95505
I00
sS'group_name'
p95506
S'Timing'
p95507
sa(dp95508
S'description'
p95509
S'Only export results at sync times\n'
p95510
sS'cpp_type'
p95511
S'bool'
p95512
sS'default'
p95513
S'0'
p95514
sS'name'
p95515
S'sync_only'
p95516
sS'required'
p95517
I00
sS'group_name'
p95518
S'Timing'
p95519
sa(dp95520
S'description'
p95521
S'Times at which the output and solution is forced to occur\n'
p95522
sS'cpp_type'
p95523
S'std::vector<double, std::allocator<double> >'
p95524
sS'default'
p95525
g3
sS'name'
p95526
S'sync_times'
p95527
sS'required'
p95528
I00
sS'group_name'
p95529
S'Timing'
p95530
sa(dp95531
S'description'
p95532
S'Time tolerance utilized checking start and end times\n'
p95533
sS'cpp_type'
p95534
S'double'
p95535
sS'default'
p95536
S'1e-14'
p95537
sS'name'
p95538
S'time_tolerance'
p95539
sS'required'
p95540
I00
sS'group_name'
p95541
S'Timing'
p95542
sa(dp95543
S'description'
p95544
g3
sS'cpp_type'
p95545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95546
sS'default'
p95547
S'VariableResidualNormsDebugOutput'
p95548
sS'name'
p95549
S'type'
p95550
sS'required'
p95551
I00
sS'group_name'
p95552
Nsa(dp95553
S'description'
p95554
S'Enable/disable the use of the displaced mesh for outputting\n'
p95555
sS'cpp_type'
p95556
S'bool'
p95557
sS'default'
p95558
S'0'
p95559
sS'name'
p95560
S'use_displaced'
p95561
sS'required'
p95562
I00
sS'group_name'
p95563
NsasS'name'
p95564
S'/Outputs/VariableResidualNormsDebugOutput'
p95565
sa(dp95566
S'description'
p95567
S'Object for outputting data in the XDA/XDR format\n'
p95568
sS'subblocks'
p95569
NsS'parameters'
p95570
(lp95571
(dp95572
S'name'
p95573
S'additional_execute_on'
p95574
sS'cpp_type'
p95575
S'MultiMooseEnum'
p95576
sS'default'
p95577
g3
sS'description'
p95578
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95579
sS'required'
p95580
I00
sS'options'
p95581
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95582
sS'group_name'
p95583
Nsa(dp95584
S'description'
p95585
S'When true the date and time are appended to the output filename.\n'
p95586
sS'cpp_type'
p95587
S'bool'
p95588
sS'default'
p95589
S'0'
p95590
sS'name'
p95591
S'append_date'
p95592
sS'required'
p95593
I00
sS'group_name'
p95594
Nsa(dp95595
S'description'
p95596
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p95597
sS'cpp_type'
p95598
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95599
sS'default'
p95600
g3
sS'name'
p95601
S'append_date_format'
p95602
sS'required'
p95603
I00
sS'group_name'
p95604
Nsa(dp95605
S'description'
p95606
S"Append '_oversample' to the output file base\n"
p95607
sS'cpp_type'
p95608
S'bool'
p95609
sS'default'
p95610
S'0'
p95611
sS'name'
p95612
S'append_oversample'
p95613
sS'required'
p95614
I00
sS'group_name'
p95615
Nsa(dp95616
S'description'
p95617
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95618
sS'cpp_type'
p95619
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95620
sS'default'
p95621
g3
sS'name'
p95622
S'control_tags'
p95623
sS'required'
p95624
I00
sS'group_name'
p95625
S'Advanced'
p95626
sa(dp95627
S'description'
p95628
S'Set the enabled status of the MooseObject.\n'
p95629
sS'cpp_type'
p95630
S'bool'
p95631
sS'default'
p95632
S'1'
p95633
sS'name'
p95634
S'enable'
p95635
sS'required'
p95636
I00
sS'group_name'
p95637
S'Advanced'
p95638
sa(dp95639
S'description'
p95640
S'Time at which this output object stop operating\n'
p95641
sS'cpp_type'
p95642
S'double'
p95643
sS'default'
p95644
g3
sS'name'
p95645
S'end_time'
p95646
sS'required'
p95647
I00
sS'group_name'
p95648
S'Timing'
p95649
sa(dp95650
S'name'
p95651
S'execute_on'
p95652
sS'cpp_type'
p95653
S'MultiMooseEnum'
p95654
sS'default'
p95655
S'INITIAL TIMESTEP_END'
p95656
sS'description'
p95657
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95658
sS'required'
p95659
I00
sS'options'
p95660
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95661
sS'group_name'
p95662
Nsa(dp95663
S'description'
p95664
S'The name of the mesh file to read, for oversampling\n'
p95665
sS'cpp_type'
p95666
S'MeshFileName'
p95667
sS'default'
p95668
g3
sS'name'
p95669
S'file'
p95670
sS'required'
p95671
I00
sS'group_name'
p95672
S'Oversampling'
p95673
sa(dp95674
S'description'
p95675
S'The desired solution output name without an extension\n'
p95676
sS'cpp_type'
p95677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95678
sS'default'
p95679
g3
sS'name'
p95680
S'file_base'
p95681
sS'required'
p95682
I00
sS'group_name'
p95683
Nsa(dp95684
S'description'
p95685
S'The interval at which time steps are output to the solution file\n'
p95686
sS'cpp_type'
p95687
S'unsigned int'
p95688
sS'default'
p95689
S'1'
p95690
sS'name'
p95691
S'interval'
p95692
sS'required'
p95693
I00
sS'group_name'
p95694
S'Timing'
p95695
sa(dp95696
S'description'
p95697
S'Number of divisions applied to time step when outputting linear residuals\n'
p95698
sS'cpp_type'
p95699
S'double'
p95700
sS'default'
p95701
S'1000'
p95702
sS'name'
p95703
S'linear_residual_dt_divisor'
p95704
sS'required'
p95705
I00
sS'group_name'
p95706
S'PETSc'
p95707
sa(dp95708
S'description'
p95709
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95710
sS'cpp_type'
p95711
S'double'
p95712
sS'default'
p95713
g3
sS'name'
p95714
S'linear_residual_end_time'
p95715
sS'required'
p95716
I00
sS'group_name'
p95717
S'PETSc'
p95718
sa(dp95719
S'description'
p95720
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95721
sS'cpp_type'
p95722
S'double'
p95723
sS'default'
p95724
g3
sS'name'
p95725
S'linear_residual_start_time'
p95726
sS'required'
p95727
I00
sS'group_name'
p95728
S'PETSc'
p95729
sa(dp95730
S'description'
p95731
S'Specifies whether output occurs on each linear residual evaluation\n'
p95732
sS'cpp_type'
p95733
S'bool'
p95734
sS'default'
p95735
S'0'
p95736
sS'name'
p95737
S'linear_residuals'
p95738
sS'required'
p95739
I00
sS'group_name'
p95740
S'PETSc'
p95741
sa(dp95742
S'description'
p95743
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95744
sS'cpp_type'
p95745
S'double'
p95746
sS'default'
p95747
S'1000'
p95748
sS'name'
p95749
S'nonlinear_residual_dt_divisor'
p95750
sS'required'
p95751
I00
sS'group_name'
p95752
S'PETSc'
p95753
sa(dp95754
S'description'
p95755
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95756
sS'cpp_type'
p95757
S'double'
p95758
sS'default'
p95759
g3
sS'name'
p95760
S'nonlinear_residual_end_time'
p95761
sS'required'
p95762
I00
sS'group_name'
p95763
S'PETSc'
p95764
sa(dp95765
S'description'
p95766
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95767
sS'cpp_type'
p95768
S'double'
p95769
sS'default'
p95770
g3
sS'name'
p95771
S'nonlinear_residual_start_time'
p95772
sS'required'
p95773
I00
sS'group_name'
p95774
S'PETSc'
p95775
sa(dp95776
S'description'
p95777
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95778
sS'cpp_type'
p95779
S'bool'
p95780
sS'default'
p95781
S'0'
p95782
sS'name'
p95783
S'nonlinear_residuals'
p95784
sS'required'
p95785
I00
sS'group_name'
p95786
S'PETSc'
p95787
sa(dp95788
S'description'
p95789
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p95790
sS'cpp_type'
p95791
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95792
sS'default'
p95793
g3
sS'name'
p95794
S'output_if_base_contains'
p95795
sS'required'
p95796
I00
sS'group_name'
p95797
S'Advanced'
p95798
sa(dp95799
S'description'
p95800
S'Specifies whether output occurs on each linear residual evaluation\n'
p95801
sS'cpp_type'
p95802
S'bool'
p95803
sS'default'
p95804
S'0'
p95805
sS'name'
p95806
S'output_linear'
p95807
sS'required'
p95808
I00
sS'group_name'
p95809
Nsa(dp95810
S'description'
p95811
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95812
sS'cpp_type'
p95813
S'bool'
p95814
sS'default'
p95815
S'0'
p95816
sS'name'
p95817
S'output_nonlinear'
p95818
sS'required'
p95819
I00
sS'group_name'
p95820
Nsa(dp95821
S'description'
p95822
S'Set to true to enable oversampling\n'
p95823
sS'cpp_type'
p95824
S'bool'
p95825
sS'default'
p95826
S'0'
p95827
sS'name'
p95828
S'oversample'
p95829
sS'required'
p95830
I00
sS'group_name'
p95831
Nsa(dp95832
S'description'
p95833
S'The number of for extension suffix (e.g., out.e-s002)\n'
p95834
sS'cpp_type'
p95835
S'unsigned int'
p95836
sS'default'
p95837
S'4'
p95838
sS'name'
p95839
S'padding'
p95840
sS'required'
p95841
I00
sS'group_name'
p95842
S'Advanced'
p95843
sa(dp95844
S'description'
p95845
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p95846
sS'cpp_type'
p95847
S'libMesh::Point'
p95848
sS'default'
p95849
g3
sS'name'
p95850
S'position'
p95851
sS'required'
p95852
I00
sS'group_name'
p95853
S'Oversampling'
p95854
sa(dp95855
S'description'
p95856
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p95857
sS'cpp_type'
p95858
S'unsigned int'
p95859
sS'default'
p95860
S'0'
p95861
sS'name'
p95862
S'refinements'
p95863
sS'required'
p95864
I00
sS'group_name'
p95865
S'Oversampling'
p95866
sa(dp95867
S'description'
p95868
S'Time at which this output object begins to operate\n'
p95869
sS'cpp_type'
p95870
S'double'
p95871
sS'default'
p95872
g3
sS'name'
p95873
S'start_time'
p95874
sS'required'
p95875
I00
sS'group_name'
p95876
S'Timing'
p95877
sa(dp95878
S'description'
p95879
S'Only export results at sync times\n'
p95880
sS'cpp_type'
p95881
S'bool'
p95882
sS'default'
p95883
S'0'
p95884
sS'name'
p95885
S'sync_only'
p95886
sS'required'
p95887
I00
sS'group_name'
p95888
S'Timing'
p95889
sa(dp95890
S'description'
p95891
S'Times at which the output and solution is forced to occur\n'
p95892
sS'cpp_type'
p95893
S'std::vector<double, std::allocator<double> >'
p95894
sS'default'
p95895
g3
sS'name'
p95896
S'sync_times'
p95897
sS'required'
p95898
I00
sS'group_name'
p95899
S'Timing'
p95900
sa(dp95901
S'description'
p95902
S'Time tolerance utilized checking start and end times\n'
p95903
sS'cpp_type'
p95904
S'double'
p95905
sS'default'
p95906
S'1e-14'
p95907
sS'name'
p95908
S'time_tolerance'
p95909
sS'required'
p95910
I00
sS'group_name'
p95911
S'Timing'
p95912
sa(dp95913
S'description'
p95914
g3
sS'cpp_type'
p95915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95916
sS'default'
p95917
S'XDA'
p95918
sS'name'
p95919
S'type'
p95920
sS'required'
p95921
I00
sS'group_name'
p95922
Nsa(dp95923
S'description'
p95924
S'Enable/disable the use of the displaced mesh for outputting\n'
p95925
sS'cpp_type'
p95926
S'bool'
p95927
sS'default'
p95928
S'0'
p95929
sS'name'
p95930
S'use_displaced'
p95931
sS'required'
p95932
I00
sS'group_name'
p95933
NsasS'name'
p95934
S'/Outputs/XDA'
p95935
sa(dp95936
S'description'
p95937
S'Object for outputting data in the XDA/XDR format\n'
p95938
sS'subblocks'
p95939
NsS'parameters'
p95940
(lp95941
(dp95942
S'name'
p95943
S'additional_execute_on'
p95944
sS'cpp_type'
p95945
S'MultiMooseEnum'
p95946
sS'default'
p95947
g3
sS'description'
p95948
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95949
sS'required'
p95950
I00
sS'options'
p95951
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95952
sS'group_name'
p95953
Nsa(dp95954
S'description'
p95955
S'When true the date and time are appended to the output filename.\n'
p95956
sS'cpp_type'
p95957
S'bool'
p95958
sS'default'
p95959
S'0'
p95960
sS'name'
p95961
S'append_date'
p95962
sS'required'
p95963
I00
sS'group_name'
p95964
Nsa(dp95965
S'description'
p95966
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p95967
sS'cpp_type'
p95968
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95969
sS'default'
p95970
g3
sS'name'
p95971
S'append_date_format'
p95972
sS'required'
p95973
I00
sS'group_name'
p95974
Nsa(dp95975
S'description'
p95976
S"Append '_oversample' to the output file base\n"
p95977
sS'cpp_type'
p95978
S'bool'
p95979
sS'default'
p95980
S'0'
p95981
sS'name'
p95982
S'append_oversample'
p95983
sS'required'
p95984
I00
sS'group_name'
p95985
Nsa(dp95986
S'description'
p95987
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95988
sS'cpp_type'
p95989
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95990
sS'default'
p95991
g3
sS'name'
p95992
S'control_tags'
p95993
sS'required'
p95994
I00
sS'group_name'
p95995
S'Advanced'
p95996
sa(dp95997
S'description'
p95998
S'Set the enabled status of the MooseObject.\n'
p95999
sS'cpp_type'
p96000
S'bool'
p96001
sS'default'
p96002
S'1'
p96003
sS'name'
p96004
S'enable'
p96005
sS'required'
p96006
I00
sS'group_name'
p96007
S'Advanced'
p96008
sa(dp96009
S'description'
p96010
S'Time at which this output object stop operating\n'
p96011
sS'cpp_type'
p96012
S'double'
p96013
sS'default'
p96014
g3
sS'name'
p96015
S'end_time'
p96016
sS'required'
p96017
I00
sS'group_name'
p96018
S'Timing'
p96019
sa(dp96020
S'name'
p96021
S'execute_on'
p96022
sS'cpp_type'
p96023
S'MultiMooseEnum'
p96024
sS'default'
p96025
S'INITIAL TIMESTEP_END'
p96026
sS'description'
p96027
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96028
sS'required'
p96029
I00
sS'options'
p96030
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96031
sS'group_name'
p96032
Nsa(dp96033
S'description'
p96034
S'The name of the mesh file to read, for oversampling\n'
p96035
sS'cpp_type'
p96036
S'MeshFileName'
p96037
sS'default'
p96038
g3
sS'name'
p96039
S'file'
p96040
sS'required'
p96041
I00
sS'group_name'
p96042
S'Oversampling'
p96043
sa(dp96044
S'description'
p96045
S'The desired solution output name without an extension\n'
p96046
sS'cpp_type'
p96047
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96048
sS'default'
p96049
g3
sS'name'
p96050
S'file_base'
p96051
sS'required'
p96052
I00
sS'group_name'
p96053
Nsa(dp96054
S'description'
p96055
S'The interval at which time steps are output to the solution file\n'
p96056
sS'cpp_type'
p96057
S'unsigned int'
p96058
sS'default'
p96059
S'1'
p96060
sS'name'
p96061
S'interval'
p96062
sS'required'
p96063
I00
sS'group_name'
p96064
S'Timing'
p96065
sa(dp96066
S'description'
p96067
S'Number of divisions applied to time step when outputting linear residuals\n'
p96068
sS'cpp_type'
p96069
S'double'
p96070
sS'default'
p96071
S'1000'
p96072
sS'name'
p96073
S'linear_residual_dt_divisor'
p96074
sS'required'
p96075
I00
sS'group_name'
p96076
S'PETSc'
p96077
sa(dp96078
S'description'
p96079
S'Specifies an end time to begin output on each linear residual evaluation\n'
p96080
sS'cpp_type'
p96081
S'double'
p96082
sS'default'
p96083
g3
sS'name'
p96084
S'linear_residual_end_time'
p96085
sS'required'
p96086
I00
sS'group_name'
p96087
S'PETSc'
p96088
sa(dp96089
S'description'
p96090
S'Specifies a start time to begin output on each linear residual evaluation\n'
p96091
sS'cpp_type'
p96092
S'double'
p96093
sS'default'
p96094
g3
sS'name'
p96095
S'linear_residual_start_time'
p96096
sS'required'
p96097
I00
sS'group_name'
p96098
S'PETSc'
p96099
sa(dp96100
S'description'
p96101
S'Specifies whether output occurs on each linear residual evaluation\n'
p96102
sS'cpp_type'
p96103
S'bool'
p96104
sS'default'
p96105
S'0'
p96106
sS'name'
p96107
S'linear_residuals'
p96108
sS'required'
p96109
I00
sS'group_name'
p96110
S'PETSc'
p96111
sa(dp96112
S'description'
p96113
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p96114
sS'cpp_type'
p96115
S'double'
p96116
sS'default'
p96117
S'1000'
p96118
sS'name'
p96119
S'nonlinear_residual_dt_divisor'
p96120
sS'required'
p96121
I00
sS'group_name'
p96122
S'PETSc'
p96123
sa(dp96124
S'description'
p96125
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p96126
sS'cpp_type'
p96127
S'double'
p96128
sS'default'
p96129
g3
sS'name'
p96130
S'nonlinear_residual_end_time'
p96131
sS'required'
p96132
I00
sS'group_name'
p96133
S'PETSc'
p96134
sa(dp96135
S'description'
p96136
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p96137
sS'cpp_type'
p96138
S'double'
p96139
sS'default'
p96140
g3
sS'name'
p96141
S'nonlinear_residual_start_time'
p96142
sS'required'
p96143
I00
sS'group_name'
p96144
S'PETSc'
p96145
sa(dp96146
S'description'
p96147
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96148
sS'cpp_type'
p96149
S'bool'
p96150
sS'default'
p96151
S'0'
p96152
sS'name'
p96153
S'nonlinear_residuals'
p96154
sS'required'
p96155
I00
sS'group_name'
p96156
S'PETSc'
p96157
sa(dp96158
S'description'
p96159
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96160
sS'cpp_type'
p96161
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96162
sS'default'
p96163
g3
sS'name'
p96164
S'output_if_base_contains'
p96165
sS'required'
p96166
I00
sS'group_name'
p96167
S'Advanced'
p96168
sa(dp96169
S'description'
p96170
S'Specifies whether output occurs on each linear residual evaluation\n'
p96171
sS'cpp_type'
p96172
S'bool'
p96173
sS'default'
p96174
S'0'
p96175
sS'name'
p96176
S'output_linear'
p96177
sS'required'
p96178
I00
sS'group_name'
p96179
Nsa(dp96180
S'description'
p96181
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96182
sS'cpp_type'
p96183
S'bool'
p96184
sS'default'
p96185
S'0'
p96186
sS'name'
p96187
S'output_nonlinear'
p96188
sS'required'
p96189
I00
sS'group_name'
p96190
Nsa(dp96191
S'description'
p96192
S'Set to true to enable oversampling\n'
p96193
sS'cpp_type'
p96194
S'bool'
p96195
sS'default'
p96196
S'0'
p96197
sS'name'
p96198
S'oversample'
p96199
sS'required'
p96200
I00
sS'group_name'
p96201
Nsa(dp96202
S'description'
p96203
S'The number of for extension suffix (e.g., out.e-s002)\n'
p96204
sS'cpp_type'
p96205
S'unsigned int'
p96206
sS'default'
p96207
S'4'
p96208
sS'name'
p96209
S'padding'
p96210
sS'required'
p96211
I00
sS'group_name'
p96212
S'Advanced'
p96213
sa(dp96214
S'description'
p96215
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p96216
sS'cpp_type'
p96217
S'libMesh::Point'
p96218
sS'default'
p96219
g3
sS'name'
p96220
S'position'
p96221
sS'required'
p96222
I00
sS'group_name'
p96223
S'Oversampling'
p96224
sa(dp96225
S'description'
p96226
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p96227
sS'cpp_type'
p96228
S'unsigned int'
p96229
sS'default'
p96230
S'0'
p96231
sS'name'
p96232
S'refinements'
p96233
sS'required'
p96234
I00
sS'group_name'
p96235
S'Oversampling'
p96236
sa(dp96237
S'description'
p96238
S'Time at which this output object begins to operate\n'
p96239
sS'cpp_type'
p96240
S'double'
p96241
sS'default'
p96242
g3
sS'name'
p96243
S'start_time'
p96244
sS'required'
p96245
I00
sS'group_name'
p96246
S'Timing'
p96247
sa(dp96248
S'description'
p96249
S'Only export results at sync times\n'
p96250
sS'cpp_type'
p96251
S'bool'
p96252
sS'default'
p96253
S'0'
p96254
sS'name'
p96255
S'sync_only'
p96256
sS'required'
p96257
I00
sS'group_name'
p96258
S'Timing'
p96259
sa(dp96260
S'description'
p96261
S'Times at which the output and solution is forced to occur\n'
p96262
sS'cpp_type'
p96263
S'std::vector<double, std::allocator<double> >'
p96264
sS'default'
p96265
g3
sS'name'
p96266
S'sync_times'
p96267
sS'required'
p96268
I00
sS'group_name'
p96269
S'Timing'
p96270
sa(dp96271
S'description'
p96272
S'Time tolerance utilized checking start and end times\n'
p96273
sS'cpp_type'
p96274
S'double'
p96275
sS'default'
p96276
S'1e-14'
p96277
sS'name'
p96278
S'time_tolerance'
p96279
sS'required'
p96280
I00
sS'group_name'
p96281
S'Timing'
p96282
sa(dp96283
S'description'
p96284
g3
sS'cpp_type'
p96285
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96286
sS'default'
p96287
S'XDR'
p96288
sS'name'
p96289
S'type'
p96290
sS'required'
p96291
I00
sS'group_name'
p96292
Nsa(dp96293
S'description'
p96294
S'Enable/disable the use of the displaced mesh for outputting\n'
p96295
sS'cpp_type'
p96296
S'bool'
p96297
sS'default'
p96298
S'0'
p96299
sS'name'
p96300
S'use_displaced'
p96301
sS'required'
p96302
I00
sS'group_name'
p96303
NsasS'name'
p96304
S'/Outputs/XDR'
p96305
sasS'parameters'
p96306
(lp96307
(dp96308
S'description'
p96309
S'When true the date and time are appended to the output filename.\n'
p96310
sS'cpp_type'
p96311
S'bool'
p96312
sS'default'
p96313
S'0'
p96314
sS'name'
p96315
S'append_date'
p96316
sS'required'
p96317
I00
sS'group_name'
p96318
Nsa(dp96319
S'description'
p96320
S'The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96321
sS'cpp_type'
p96322
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96323
sS'default'
p96324
g3
sS'name'
p96325
S'append_date_format'
p96326
sS'required'
p96327
I00
sS'group_name'
p96328
Nsa(dp96329
S'description'
p96330
S'Create checkpoint files using the default options.\n'
p96331
sS'cpp_type'
p96332
S'bool'
p96333
sS'default'
p96334
S'0'
p96335
sS'name'
p96336
S'checkpoint'
p96337
sS'required'
p96338
I00
sS'group_name'
p96339
Nsa(dp96340
S'description'
p96341
S'Set to false to turn off all coloring in all outputs\n'
p96342
sS'cpp_type'
p96343
S'bool'
p96344
sS'default'
p96345
S'1'
p96346
sS'name'
p96347
S'color'
p96348
sS'required'
p96349
I00
sS'group_name'
p96350
Nsa(dp96351
S'description'
p96352
S'Output the results using the default settings for Console output\n'
p96353
sS'cpp_type'
p96354
S'bool'
p96355
sS'default'
p96356
S'1'
p96357
sS'name'
p96358
S'console'
p96359
sS'required'
p96360
I00
sS'group_name'
p96361
Nsa(dp96362
S'description'
p96363
S'Enable the screen output of Control systems.\n'
p96364
sS'cpp_type'
p96365
S'bool'
p96366
sS'default'
p96367
S'0'
p96368
sS'name'
p96369
S'controls'
p96370
sS'required'
p96371
I00
sS'group_name'
p96372
Nsa(dp96373
S'description'
p96374
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p96375
sS'cpp_type'
p96376
S'bool'
p96377
sS'default'
p96378
S'0'
p96379
sS'name'
p96380
S'csv'
p96381
sS'required'
p96382
I00
sS'group_name'
p96383
Nsa(dp96384
S'description'
p96385
S'Create the dof map .json output file\n'
p96386
sS'cpp_type'
p96387
S'bool'
p96388
sS'default'
p96389
S'0'
p96390
sS'name'
p96391
S'dofmap'
p96392
sS'required'
p96393
I00
sS'group_name'
p96394
Nsa(dp96395
S'name'
p96396
S'execute_on'
p96397
sS'cpp_type'
p96398
S'MultiMooseEnum'
p96399
sS'default'
p96400
S'INITIAL TIMESTEP_END'
p96401
sS'description'
p96402
S"Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: 'initial timestep_end')\n"
p96403
sS'required'
p96404
I00
sS'options'
p96405
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96406
sS'group_name'
p96407
Nsa(dp96408
S'description'
p96409
S'Output the results using the default settings for Exodus output\n'
p96410
sS'cpp_type'
p96411
S'bool'
p96412
sS'default'
p96413
S'0'
p96414
sS'name'
p96415
S'exodus'
p96416
sS'required'
p96417
I00
sS'group_name'
p96418
Nsa(dp96419
S'description'
p96420
S'Common file base name to be utilized with all output objects\n'
p96421
sS'cpp_type'
p96422
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96423
sS'default'
p96424
g3
sS'name'
p96425
S'file_base'
p96426
sS'required'
p96427
I00
sS'group_name'
p96428
Nsa(dp96429
S'description'
p96430
S'Output the results using the default settings for GMV output\n'
p96431
sS'cpp_type'
p96432
S'bool'
p96433
sS'default'
p96434
S'0'
p96435
sS'name'
p96436
S'gmv'
p96437
sS'required'
p96438
I00
sS'group_name'
p96439
Nsa(dp96440
S'description'
p96441
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p96442
sS'cpp_type'
p96443
S'bool'
p96444
sS'default'
p96445
S'0'
p96446
sS'name'
p96447
S'gnuplot'
p96448
sS'required'
p96449
I00
sS'group_name'
p96450
Nsa(dp96451
S'description'
p96452
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p96453
sS'cpp_type'
p96454
S'std::vector<VariableName, std::allocator<VariableName> >'
p96455
sS'default'
p96456
g3
sS'name'
p96457
S'hide'
p96458
sS'required'
p96459
I00
sS'group_name'
p96460
Nsa(dp96461
S'description'
p96462
S'The interval at which timesteps are output to the solution file\n'
p96463
sS'cpp_type'
p96464
S'unsigned int'
p96465
sS'default'
p96466
S'1'
p96467
sS'name'
p96468
S'interval'
p96469
sS'required'
p96470
I00
sS'group_name'
p96471
Nsa(dp96472
S'description'
p96473
S'Output the results using the default settings for Nemesis output\n'
p96474
sS'cpp_type'
p96475
S'bool'
p96476
sS'default'
p96477
S'0'
p96478
sS'name'
p96479
S'nemesis'
p96480
sS'required'
p96481
I00
sS'group_name'
p96482
Nsa(dp96483
S'description'
p96484
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96485
sS'cpp_type'
p96486
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96487
sS'default'
p96488
g3
sS'name'
p96489
S'output_if_base_contains'
p96490
sS'required'
p96491
I00
sS'group_name'
p96492
Nsa(dp96493
S'description'
p96494
S'Enable printing of linear residuals to the screen (Console)\n'
p96495
sS'cpp_type'
p96496
S'bool'
p96497
sS'default'
p96498
S'1'
p96499
sS'name'
p96500
S'print_linear_residuals'
p96501
sS'required'
p96502
I00
sS'group_name'
p96503
Nsa(dp96504
S'description'
p96505
S'When true, each time the mesh is changed the mesh information is printed\n'
p96506
sS'cpp_type'
p96507
S'bool'
p96508
sS'default'
p96509
S'0'
p96510
sS'name'
p96511
S'print_mesh_changed_info'
p96512
sS'required'
p96513
I00
sS'group_name'
p96514
Nsa(dp96515
S'description'
p96516
S'Enable printing of the performance log to the screen (Console)\n'
p96517
sS'cpp_type'
p96518
S'bool'
p96519
sS'default'
p96520
S'0'
p96521
sS'name'
p96522
S'print_perf_log'
p96523
sS'required'
p96524
I00
sS'group_name'
p96525
Nsa(dp96526
S'description'
p96527
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p96528
sS'cpp_type'
p96529
S'std::vector<VariableName, std::allocator<VariableName> >'
p96530
sS'default'
p96531
g3
sS'name'
p96532
S'show'
p96533
sS'required'
p96534
I00
sS'group_name'
p96535
Nsa(dp96536
S'description'
p96537
S'Print a solution history file (.slh) using the default settings\n'
p96538
sS'cpp_type'
p96539
S'bool'
p96540
sS'default'
p96541
S'0'
p96542
sS'name'
p96543
S'solution_history'
p96544
sS'required'
p96545
I00
sS'group_name'
p96546
Nsa(dp96547
S'description'
p96548
S'Times at which the output and solution is forced to occur\n'
p96549
sS'cpp_type'
p96550
S'std::vector<double, std::allocator<double> >'
p96551
sS'default'
p96552
g3
sS'name'
p96553
S'sync_times'
p96554
sS'required'
p96555
I00
sS'group_name'
p96556
Nsa(dp96557
S'description'
p96558
S'Output the results using the default settings for Tecplot output\n'
p96559
sS'cpp_type'
p96560
S'bool'
p96561
sS'default'
p96562
S'0'
p96563
sS'name'
p96564
S'tecplot'
p96565
sS'required'
p96566
I00
sS'group_name'
p96567
Nsa(dp96568
S'description'
p96569
S'Output the results using the default settings for VTKOutput output\n'
p96570
sS'cpp_type'
p96571
S'bool'
p96572
sS'default'
p96573
S'0'
p96574
sS'name'
p96575
S'vtk'
p96576
sS'required'
p96577
I00
sS'group_name'
p96578
Nsa(dp96579
S'description'
p96580
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p96581
sS'cpp_type'
p96582
S'bool'
p96583
sS'default'
p96584
S'0'
p96585
sS'name'
p96586
S'xda'
p96587
sS'required'
p96588
I00
sS'group_name'
p96589
Nsa(dp96590
S'description'
p96591
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p96592
sS'cpp_type'
p96593
S'bool'
p96594
sS'default'
p96595
S'0'
p96596
sS'name'
p96597
S'xdr'
p96598
sS'required'
p96599
I00
sS'group_name'
p96600
NsasS'name'
p96601
S'/Outputs'
p96602
sa(dp96603
S'description'
p96604
g3
sS'subblocks'
p96605
(lp96606
(dp96607
S'description'
p96608
g3
sS'subblocks'
p96609
NsS'parameters'
p96610
(lp96611
(dp96612
S'description'
p96613
S'A string representing the Moose Object that will be built by this Action\n'
p96614
sS'cpp_type'
p96615
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96616
sS'default'
p96617
g3
sS'name'
p96618
S'type'
p96619
sS'required'
p96620
I01
sS'group_name'
p96621
NsasS'name'
p96622
S'/Postprocessors/*'
p96623
sa(dp96624
S'description'
p96625
g3
sS'subblocks'
p96626
NsS'parameters'
p96627
(lp96628
(dp96629
S'description'
p96630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p96631
sS'cpp_type'
p96632
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p96633
sS'default'
p96634
g3
sS'name'
p96635
S'boundary'
p96636
sS'required'
p96637
I01
sS'group_name'
p96638
Nsa(dp96639
S'description'
p96640
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96641
sS'cpp_type'
p96642
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96643
sS'default'
p96644
g3
sS'name'
p96645
S'control_tags'
p96646
sS'required'
p96647
I00
sS'group_name'
p96648
S'Advanced'
p96649
sa(dp96650
S'description'
p96651
S'Set the enabled status of the MooseObject.\n'
p96652
sS'cpp_type'
p96653
S'bool'
p96654
sS'default'
p96655
S'1'
p96656
sS'name'
p96657
S'enable'
p96658
sS'required'
p96659
I00
sS'group_name'
p96660
S'Advanced'
p96661
sa(dp96662
S'name'
p96663
S'execute_on'
p96664
sS'cpp_type'
p96665
S'MultiMooseEnum'
p96666
sS'default'
p96667
S'TIMESTEP_END'
p96668
sS'description'
p96669
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p96670
sS'required'
p96671
I00
sS'options'
p96672
S'none initial linear nonlinear timestep_end timestep_begin custom'
p96673
sS'group_name'
p96674
Nsa(dp96675
S'description'
p96676
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p96677
sS'cpp_type'
p96678
S'std::vector<OutputName, std::allocator<OutputName> >'
p96679
sS'default'
p96680
g3
sS'name'
p96681
S'outputs'
p96682
sS'required'
p96683
I00
sS'group_name'
p96684
S'Advanced'
p96685
sa(dp96686
S'description'
p96687
g3
sS'cpp_type'
p96688
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96689
sS'default'
p96690
S'AreaPostprocessor'
p96691
sS'name'
p96692
S'type'
p96693
sS'required'
p96694
I00
sS'group_name'
p96695
Nsa(dp96696
S'description'
p96697
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p96698
sS'cpp_type'
p96699
S'bool'
p96700
sS'default'
p96701
S'0'
p96702
sS'name'
p96703
S'use_displaced_mesh'
p96704
sS'required'
p96705
I00
sS'group_name'
p96706
S'Advanced'
p96707
sasS'name'
p96708
S'/Postprocessors/AreaPostprocessor'
p96709
sa(dp96710
S'description'
p96711
g3
sS'subblocks'
p96712
NsS'parameters'
p96713
(lp96714
(dp96715
S'description'
p96716
S'The list of block ids (SubdomainID) that this object will be applied\n'
p96717
sS'cpp_type'
p96718
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p96719
sS'default'
p96720
g3
sS'name'
p96721
S'block'
p96722
sS'required'
p96723
I00
sS'group_name'
p96724
Nsa(dp96725
S'description'
p96726
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96727
sS'cpp_type'
p96728
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96729
sS'default'
p96730
g3
sS'name'
p96731
S'control_tags'
p96732
sS'required'
p96733
I00
sS'group_name'
p96734
S'Advanced'
p96735
sa(dp96736
S'description'
p96737
S'Set the enabled status of the MooseObject.\n'
p96738
sS'cpp_type'
p96739
S'bool'
p96740
sS'default'
p96741
S'1'
p96742
sS'name'
p96743
S'enable'
p96744
sS'required'
p96745
I00
sS'group_name'
p96746
S'Advanced'
p96747
sa(dp96748
S'name'
p96749
S'execute_on'
p96750
sS'cpp_type'
p96751
S'MultiMooseEnum'
p96752
sS'default'
p96753
S'TIMESTEP_END'
p96754
sS'description'
p96755
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p96756
sS'required'
p96757
I00
sS'options'
p96758
S'none initial linear nonlinear timestep_end timestep_begin custom'
p96759
sS'group_name'
p96760
Nsa(dp96761
S'description'
p96762
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p96763
sS'cpp_type'
p96764
S'std::vector<OutputName, std::allocator<OutputName> >'
p96765
sS'default'
p96766
g3
sS'name'
p96767
S'outputs'
p96768
sS'required'
p96769
I00
sS'group_name'
p96770
S'Advanced'
p96771
sa(dp96772
S'description'
p96773
S'The seed for the master random number generator\n'
p96774
sS'cpp_type'
p96775
S'unsigned int'
p96776
sS'default'
p96777
S'0'
p96778
sS'name'
p96779
S'seed'
p96780
sS'required'
p96781
I00
sS'group_name'
p96782
S'Advanced'
p96783
sa(dp96784
S'description'
p96785
g3
sS'cpp_type'
p96786
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96787
sS'default'
p96788
S'AverageElementSize'
p96789
sS'name'
p96790
S'type'
p96791
sS'required'
p96792
I00
sS'group_name'
p96793
Nsa(dp96794
S'description'
p96795
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p96796
sS'cpp_type'
p96797
S'bool'
p96798
sS'default'
p96799
S'0'
p96800
sS'name'
p96801
S'use_displaced_mesh'
p96802
sS'required'
p96803
I00
sS'group_name'
p96804
S'Advanced'
p96805
sa(dp96806
S'description'
p96807
S'The name of the variable that this object operates on\n'
p96808
sS'cpp_type'
p96809
S'std::vector<VariableName>'
p96810
sS'default'
p96811
g3
sS'name'
p96812
S'variable'
p96813
sS'required'
p96814
I01
sS'group_name'
p96815
NsasS'name'
p96816
S'/Postprocessors/AverageElementSize'
p96817
sa(dp96818
S'description'
p96819
g3
sS'subblocks'
p96820
NsS'parameters'
p96821
(lp96822
(dp96823
S'description'
p96824
S'The list of block ids (SubdomainID) that this object will be applied\n'
p96825
sS'cpp_type'
p96826
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p96827
sS'default'
p96828
g3
sS'name'
p96829
S'block'
p96830
sS'required'
p96831
I00
sS'group_name'
p96832
Nsa(dp96833
S'description'
p96834
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p96835
sS'cpp_type'
p96836
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p96837
sS'default'
p96838
g3
sS'name'
p96839
S'boundary'
p96840
sS'required'
p96841
I00
sS'group_name'
p96842
Nsa(dp96843
S'description'
p96844
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96845
sS'cpp_type'
p96846
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96847
sS'default'
p96848
g3
sS'name'
p96849
S'control_tags'
p96850
sS'required'
p96851
I00
sS'group_name'
p96852
S'Advanced'
p96853
sa(dp96854
S'description'
p96855
S'Set the enabled status of the MooseObject.\n'
p96856
sS'cpp_type'
p96857
S'bool'
p96858
sS'default'
p96859
S'1'
p96860
sS'name'
p96861
S'enable'
p96862
sS'required'
p96863
I00
sS'group_name'
p96864
S'Advanced'
p96865
sa(dp96866
S'name'
p96867
S'execute_on'
p96868
sS'cpp_type'
p96869
S'MultiMooseEnum'
p96870
sS'default'
p96871
S'TIMESTEP_END'
p96872
sS'description'
p96873
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p96874
sS'required'
p96875
I00
sS'options'
p96876
S'none initial linear nonlinear timestep_end timestep_begin custom'
p96877
sS'group_name'
p96878
Nsa(dp96879
S'description'
p96880
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p96881
sS'cpp_type'
p96882
S'std::vector<OutputName, std::allocator<OutputName> >'
p96883
sS'default'
p96884
g3
sS'name'
p96885
S'outputs'
p96886
sS'required'
p96887
I00
sS'group_name'
p96888
S'Advanced'
p96889
sa(dp96890
S'description'
p96891
S'The seed for the master random number generator\n'
p96892
sS'cpp_type'
p96893
S'unsigned int'
p96894
sS'default'
p96895
S'0'
p96896
sS'name'
p96897
S'seed'
p96898
sS'required'
p96899
I00
sS'group_name'
p96900
S'Advanced'
p96901
sa(dp96902
S'description'
p96903
g3
sS'cpp_type'
p96904
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96905
sS'default'
p96906
S'AverageNodalVariableValue'
p96907
sS'name'
p96908
S'type'
p96909
sS'required'
p96910
I00
sS'group_name'
p96911
Nsa(dp96912
S'description'
p96913
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p96914
sS'cpp_type'
p96915
S'bool'
p96916
sS'default'
p96917
S'0'
p96918
sS'name'
p96919
S'unique_node_execute'
p96920
sS'required'
p96921
I00
sS'group_name'
p96922
Nsa(dp96923
S'description'
p96924
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p96925
sS'cpp_type'
p96926
S'bool'
p96927
sS'default'
p96928
S'0'
p96929
sS'name'
p96930
S'use_displaced_mesh'
p96931
sS'required'
p96932
I00
sS'group_name'
p96933
S'Advanced'
p96934
sa(dp96935
S'description'
p96936
S'The name of the variable that this postprocessor operates on\n'
p96937
sS'cpp_type'
p96938
S'std::vector<VariableName>'
p96939
sS'default'
p96940
g3
sS'name'
p96941
S'variable'
p96942
sS'required'
p96943
I01
sS'group_name'
p96944
NsasS'name'
p96945
S'/Postprocessors/AverageNodalVariableValue'
p96946
sa(dp96947
S'description'
p96948
g3
sS'subblocks'
p96949
NsS'parameters'
p96950
(lp96951
(dp96952
S'description'
p96953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p96954
sS'cpp_type'
p96955
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p96956
sS'default'
p96957
g3
sS'name'
p96958
S'boundary'
p96959
sS'required'
p96960
I01
sS'group_name'
p96961
Nsa(dp96962
S'description'
p96963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96964
sS'cpp_type'
p96965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96966
sS'default'
p96967
g3
sS'name'
p96968
S'control_tags'
p96969
sS'required'
p96970
I00
sS'group_name'
p96971
S'Advanced'
p96972
sa(dp96973
S'description'
p96974
S'Set the enabled status of the MooseObject.\n'
p96975
sS'cpp_type'
p96976
S'bool'
p96977
sS'default'
p96978
S'1'
p96979
sS'name'
p96980
S'enable'
p96981
sS'required'
p96982
I00
sS'group_name'
p96983
S'Advanced'
p96984
sa(dp96985
S'name'
p96986
S'execute_on'
p96987
sS'cpp_type'
p96988
S'MultiMooseEnum'
p96989
sS'default'
p96990
S'TIMESTEP_END'
p96991
sS'description'
p96992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p96993
sS'required'
p96994
I00
sS'options'
p96995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p96996
sS'group_name'
p96997
Nsa(dp96998
S'description'
p96999
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97000
sS'cpp_type'
p97001
S'std::vector<OutputName, std::allocator<OutputName> >'
p97002
sS'default'
p97003
g3
sS'name'
p97004
S'outputs'
p97005
sS'required'
p97006
I00
sS'group_name'
p97007
S'Advanced'
p97008
sa(dp97009
S'description'
p97010
g3
sS'cpp_type'
p97011
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97012
sS'default'
p97013
S'AxisymmetricCenterlineAverageValue'
p97014
sS'name'
p97015
S'type'
p97016
sS'required'
p97017
I00
sS'group_name'
p97018
Nsa(dp97019
S'description'
p97020
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97021
sS'cpp_type'
p97022
S'bool'
p97023
sS'default'
p97024
S'0'
p97025
sS'name'
p97026
S'use_displaced_mesh'
p97027
sS'required'
p97028
I00
sS'group_name'
p97029
S'Advanced'
p97030
sa(dp97031
S'description'
p97032
S'The name of the variable that this boundary condition applies to\n'
p97033
sS'cpp_type'
p97034
S'std::vector<VariableName>'
p97035
sS'default'
p97036
g3
sS'name'
p97037
S'variable'
p97038
sS'required'
p97039
I01
sS'group_name'
p97040
NsasS'name'
p97041
S'/Postprocessors/AxisymmetricCenterlineAverageValue'
p97042
sa(dp97043
S'description'
p97044
g3
sS'subblocks'
p97045
NsS'parameters'
p97046
(lp97047
(dp97048
S'description'
p97049
S'The CavityPressureUserObject that computes the initial moles\n'
p97050
sS'cpp_type'
p97051
S'UserObjectName'
p97052
sS'default'
p97053
g3
sS'name'
p97054
S'cavity_pressure_uo'
p97055
sS'required'
p97056
I01
sS'group_name'
p97057
Nsa(dp97058
S'description'
p97059
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97060
sS'cpp_type'
p97061
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97062
sS'default'
p97063
g3
sS'name'
p97064
S'control_tags'
p97065
sS'required'
p97066
I00
sS'group_name'
p97067
S'Advanced'
p97068
sa(dp97069
S'description'
p97070
S'Set the enabled status of the MooseObject.\n'
p97071
sS'cpp_type'
p97072
S'bool'
p97073
sS'default'
p97074
S'1'
p97075
sS'name'
p97076
S'enable'
p97077
sS'required'
p97078
I00
sS'group_name'
p97079
S'Advanced'
p97080
sa(dp97081
S'name'
p97082
S'execute_on'
p97083
sS'cpp_type'
p97084
S'MultiMooseEnum'
p97085
sS'default'
p97086
S'TIMESTEP_END'
p97087
sS'description'
p97088
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97089
sS'required'
p97090
I00
sS'options'
p97091
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97092
sS'group_name'
p97093
Nsa(dp97094
S'description'
p97095
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97096
sS'cpp_type'
p97097
S'std::vector<OutputName, std::allocator<OutputName> >'
p97098
sS'default'
p97099
g3
sS'name'
p97100
S'outputs'
p97101
sS'required'
p97102
I00
sS'group_name'
p97103
S'Advanced'
p97104
sa(dp97105
S'description'
p97106
S'The quantity to report\n'
p97107
sS'cpp_type'
p97108
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97109
sS'default'
p97110
g3
sS'name'
p97111
S'quantity'
p97112
sS'required'
p97113
I01
sS'group_name'
p97114
Nsa(dp97115
S'description'
p97116
g3
sS'cpp_type'
p97117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97118
sS'default'
p97119
S'CavityPressurePostprocessor'
p97120
sS'name'
p97121
S'type'
p97122
sS'required'
p97123
I00
sS'group_name'
p97124
Nsa(dp97125
S'description'
p97126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97127
sS'cpp_type'
p97128
S'bool'
p97129
sS'default'
p97130
S'1'
p97131
sS'name'
p97132
S'use_displaced_mesh'
p97133
sS'required'
p97134
I00
sS'group_name'
p97135
S'Advanced'
p97136
sasS'name'
p97137
S'/Postprocessors/CavityPressurePostprocessor'
p97138
sa(dp97139
S'description'
p97140
g3
sS'subblocks'
p97141
NsS'parameters'
p97142
(lp97143
(dp97144
S'description'
p97145
S'Compute magnitude of relative change instead of change\n'
p97146
sS'cpp_type'
p97147
S'bool'
p97148
sS'default'
p97149
S'0'
p97150
sS'name'
p97151
S'compute_relative_change'
p97152
sS'required'
p97153
I00
sS'group_name'
p97154
Nsa(dp97155
S'description'
p97156
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97157
sS'cpp_type'
p97158
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97159
sS'default'
p97160
g3
sS'name'
p97161
S'control_tags'
p97162
sS'required'
p97163
I00
sS'group_name'
p97164
S'Advanced'
p97165
sa(dp97166
S'description'
p97167
S'Set the enabled status of the MooseObject.\n'
p97168
sS'cpp_type'
p97169
S'bool'
p97170
sS'default'
p97171
S'1'
p97172
sS'name'
p97173
S'enable'
p97174
sS'required'
p97175
I00
sS'group_name'
p97176
S'Advanced'
p97177
sa(dp97178
S'name'
p97179
S'execute_on'
p97180
sS'cpp_type'
p97181
S'MultiMooseEnum'
p97182
sS'default'
p97183
S'TIMESTEP_END'
p97184
sS'description'
p97185
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97186
sS'required'
p97187
I00
sS'options'
p97188
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97189
sS'group_name'
p97190
Nsa(dp97191
S'description'
p97192
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97193
sS'cpp_type'
p97194
S'std::vector<OutputName, std::allocator<OutputName> >'
p97195
sS'default'
p97196
g3
sS'name'
p97197
S'outputs'
p97198
sS'required'
p97199
I00
sS'group_name'
p97200
S'Advanced'
p97201
sa(dp97202
S'description'
p97203
S'The name of the postprocessor\n'
p97204
sS'cpp_type'
p97205
S'PostprocessorName'
p97206
sS'default'
p97207
g3
sS'name'
p97208
S'postprocessor'
p97209
sS'required'
p97210
I01
sS'group_name'
p97211
Nsa(dp97212
S'description'
p97213
g3
sS'cpp_type'
p97214
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97215
sS'default'
p97216
S'ChangeOverTimestepPostprocessor'
p97217
sS'name'
p97218
S'type'
p97219
sS'required'
p97220
I00
sS'group_name'
p97221
Nsa(dp97222
S'description'
p97223
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97224
sS'cpp_type'
p97225
S'bool'
p97226
sS'default'
p97227
S'0'
p97228
sS'name'
p97229
S'use_displaced_mesh'
p97230
sS'required'
p97231
I00
sS'group_name'
p97232
S'Advanced'
p97233
sasS'name'
p97234
S'/Postprocessors/ChangeOverTimestepPostprocessor'
p97235
sa(dp97236
S'description'
p97237
g3
sS'subblocks'
p97238
NsS'parameters'
p97239
(lp97240
(dp97241
S'description'
p97242
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97243
sS'cpp_type'
p97244
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97245
sS'default'
p97246
g3
sS'name'
p97247
S'control_tags'
p97248
sS'required'
p97249
I00
sS'group_name'
p97250
S'Advanced'
p97251
sa(dp97252
S'description'
p97253
S'Set the enabled status of the MooseObject.\n'
p97254
sS'cpp_type'
p97255
S'bool'
p97256
sS'default'
p97257
S'1'
p97258
sS'name'
p97259
S'enable'
p97260
sS'required'
p97261
I00
sS'group_name'
p97262
S'Advanced'
p97263
sa(dp97264
S'name'
p97265
S'execute_on'
p97266
sS'cpp_type'
p97267
S'MultiMooseEnum'
p97268
sS'default'
p97269
S'TIMESTEP_END'
p97270
sS'description'
p97271
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97272
sS'required'
p97273
I00
sS'options'
p97274
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97275
sS'group_name'
p97276
Nsa(dp97277
S'description'
p97278
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97279
sS'cpp_type'
p97280
S'std::vector<OutputName, std::allocator<OutputName> >'
p97281
sS'default'
p97282
g3
sS'name'
p97283
S'outputs'
p97284
sS'required'
p97285
I00
sS'group_name'
p97286
S'Advanced'
p97287
sa(dp97288
S'description'
p97289
S'The name of the postprocessor\n'
p97290
sS'cpp_type'
p97291
S'PostprocessorName'
p97292
sS'default'
p97293
g3
sS'name'
p97294
S'postprocessor'
p97295
sS'required'
p97296
I01
sS'group_name'
p97297
Nsa(dp97298
S'description'
p97299
g3
sS'cpp_type'
p97300
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97301
sS'default'
p97302
S'CumulativeValuePostprocessor'
p97303
sS'name'
p97304
S'type'
p97305
sS'required'
p97306
I00
sS'group_name'
p97307
Nsa(dp97308
S'description'
p97309
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97310
sS'cpp_type'
p97311
S'bool'
p97312
sS'default'
p97313
S'0'
p97314
sS'name'
p97315
S'use_displaced_mesh'
p97316
sS'required'
p97317
I00
sS'group_name'
p97318
S'Advanced'
p97319
sasS'name'
p97320
S'/Postprocessors/CumulativeValuePostprocessor'
p97321
sa(dp97322
S'description'
p97323
g3
sS'subblocks'
p97324
NsS'parameters'
p97325
(lp97326
(dp97327
S'description'
p97328
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97329
sS'cpp_type'
p97330
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97331
sS'default'
p97332
g3
sS'name'
p97333
S'control_tags'
p97334
sS'required'
p97335
I00
sS'group_name'
p97336
S'Advanced'
p97337
sa(dp97338
S'description'
p97339
S'Set the enabled status of the MooseObject.\n'
p97340
sS'cpp_type'
p97341
S'bool'
p97342
sS'default'
p97343
S'1'
p97344
sS'name'
p97345
S'enable'
p97346
sS'required'
p97347
I00
sS'group_name'
p97348
S'Advanced'
p97349
sa(dp97350
S'name'
p97351
S'execute_on'
p97352
sS'cpp_type'
p97353
S'MultiMooseEnum'
p97354
sS'default'
p97355
S'TIMESTEP_END'
p97356
sS'description'
p97357
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97358
sS'required'
p97359
I00
sS'options'
p97360
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97361
sS'group_name'
p97362
Nsa(dp97363
S'description'
p97364
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97365
sS'cpp_type'
p97366
S'std::vector<OutputName, std::allocator<OutputName> >'
p97367
sS'default'
p97368
g3
sS'name'
p97369
S'outputs'
p97370
sS'required'
p97371
I00
sS'group_name'
p97372
S'Advanced'
p97373
sa(dp97374
S'description'
p97375
g3
sS'cpp_type'
p97376
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97377
sS'default'
p97378
S'DifferencePostprocessor'
p97379
sS'name'
p97380
S'type'
p97381
sS'required'
p97382
I00
sS'group_name'
p97383
Nsa(dp97384
S'description'
p97385
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97386
sS'cpp_type'
p97387
S'bool'
p97388
sS'default'
p97389
S'0'
p97390
sS'name'
p97391
S'use_displaced_mesh'
p97392
sS'required'
p97393
I00
sS'group_name'
p97394
S'Advanced'
p97395
sa(dp97396
S'description'
p97397
S'First value\n'
p97398
sS'cpp_type'
p97399
S'PostprocessorName'
p97400
sS'default'
p97401
g3
sS'name'
p97402
S'value1'
p97403
sS'required'
p97404
I01
sS'group_name'
p97405
Nsa(dp97406
S'description'
p97407
S'Second value\n'
p97408
sS'cpp_type'
p97409
S'PostprocessorName'
p97410
sS'default'
p97411
g3
sS'name'
p97412
S'value2'
p97413
sS'required'
p97414
I01
sS'group_name'
p97415
NsasS'name'
p97416
S'/Postprocessors/DifferencePostprocessor'
p97417
sa(dp97418
S'description'
p97419
g3
sS'subblocks'
p97420
NsS'parameters'
p97421
(lp97422
(dp97423
S'description'
p97424
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97425
sS'cpp_type'
p97426
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97427
sS'default'
p97428
g3
sS'name'
p97429
S'block'
p97430
sS'required'
p97431
I00
sS'group_name'
p97432
Nsa(dp97433
S'description'
p97434
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97435
sS'cpp_type'
p97436
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97437
sS'default'
p97438
g3
sS'name'
p97439
S'control_tags'
p97440
sS'required'
p97441
I00
sS'group_name'
p97442
S'Advanced'
p97443
sa(dp97444
S'description'
p97445
S'Set the enabled status of the MooseObject.\n'
p97446
sS'cpp_type'
p97447
S'bool'
p97448
sS'default'
p97449
S'1'
p97450
sS'name'
p97451
S'enable'
p97452
sS'required'
p97453
I00
sS'group_name'
p97454
S'Advanced'
p97455
sa(dp97456
S'name'
p97457
S'execute_on'
p97458
sS'cpp_type'
p97459
S'MultiMooseEnum'
p97460
sS'default'
p97461
S'TIMESTEP_END'
p97462
sS'description'
p97463
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97464
sS'required'
p97465
I00
sS'options'
p97466
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97467
sS'group_name'
p97468
Nsa(dp97469
S'description'
p97470
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97471
sS'cpp_type'
p97472
S'std::vector<OutputName, std::allocator<OutputName> >'
p97473
sS'default'
p97474
g3
sS'name'
p97475
S'outputs'
p97476
sS'required'
p97477
I00
sS'group_name'
p97478
S'Advanced'
p97479
sa(dp97480
S'description'
p97481
S'The seed for the master random number generator\n'
p97482
sS'cpp_type'
p97483
S'unsigned int'
p97484
sS'default'
p97485
S'0'
p97486
sS'name'
p97487
S'seed'
p97488
sS'required'
p97489
I00
sS'group_name'
p97490
S'Advanced'
p97491
sa(dp97492
S'description'
p97493
g3
sS'cpp_type'
p97494
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97495
sS'default'
p97496
S'ElementAverageTimeDerivative'
p97497
sS'name'
p97498
S'type'
p97499
sS'required'
p97500
I00
sS'group_name'
p97501
Nsa(dp97502
S'description'
p97503
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97504
sS'cpp_type'
p97505
S'bool'
p97506
sS'default'
p97507
S'0'
p97508
sS'name'
p97509
S'use_displaced_mesh'
p97510
sS'required'
p97511
I00
sS'group_name'
p97512
S'Advanced'
p97513
sa(dp97514
S'description'
p97515
S'The name of the variable that this object operates on\n'
p97516
sS'cpp_type'
p97517
S'std::vector<VariableName>'
p97518
sS'default'
p97519
g3
sS'name'
p97520
S'variable'
p97521
sS'required'
p97522
I01
sS'group_name'
p97523
NsasS'name'
p97524
S'/Postprocessors/ElementAverageTimeDerivative'
p97525
sa(dp97526
S'description'
p97527
g3
sS'subblocks'
p97528
NsS'parameters'
p97529
(lp97530
(dp97531
S'description'
p97532
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97533
sS'cpp_type'
p97534
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97535
sS'default'
p97536
g3
sS'name'
p97537
S'block'
p97538
sS'required'
p97539
I00
sS'group_name'
p97540
Nsa(dp97541
S'description'
p97542
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97543
sS'cpp_type'
p97544
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97545
sS'default'
p97546
g3
sS'name'
p97547
S'control_tags'
p97548
sS'required'
p97549
I00
sS'group_name'
p97550
S'Advanced'
p97551
sa(dp97552
S'description'
p97553
S'Set the enabled status of the MooseObject.\n'
p97554
sS'cpp_type'
p97555
S'bool'
p97556
sS'default'
p97557
S'1'
p97558
sS'name'
p97559
S'enable'
p97560
sS'required'
p97561
I00
sS'group_name'
p97562
S'Advanced'
p97563
sa(dp97564
S'name'
p97565
S'execute_on'
p97566
sS'cpp_type'
p97567
S'MultiMooseEnum'
p97568
sS'default'
p97569
S'TIMESTEP_END'
p97570
sS'description'
p97571
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97572
sS'required'
p97573
I00
sS'options'
p97574
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97575
sS'group_name'
p97576
Nsa(dp97577
S'description'
p97578
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97579
sS'cpp_type'
p97580
S'std::vector<OutputName, std::allocator<OutputName> >'
p97581
sS'default'
p97582
g3
sS'name'
p97583
S'outputs'
p97584
sS'required'
p97585
I00
sS'group_name'
p97586
S'Advanced'
p97587
sa(dp97588
S'description'
p97589
S'The seed for the master random number generator\n'
p97590
sS'cpp_type'
p97591
S'unsigned int'
p97592
sS'default'
p97593
S'0'
p97594
sS'name'
p97595
S'seed'
p97596
sS'required'
p97597
I00
sS'group_name'
p97598
S'Advanced'
p97599
sa(dp97600
S'description'
p97601
g3
sS'cpp_type'
p97602
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97603
sS'default'
p97604
S'ElementAverageValue'
p97605
sS'name'
p97606
S'type'
p97607
sS'required'
p97608
I00
sS'group_name'
p97609
Nsa(dp97610
S'description'
p97611
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97612
sS'cpp_type'
p97613
S'bool'
p97614
sS'default'
p97615
S'0'
p97616
sS'name'
p97617
S'use_displaced_mesh'
p97618
sS'required'
p97619
I00
sS'group_name'
p97620
S'Advanced'
p97621
sa(dp97622
S'description'
p97623
S'The name of the variable that this object operates on\n'
p97624
sS'cpp_type'
p97625
S'std::vector<VariableName>'
p97626
sS'default'
p97627
g3
sS'name'
p97628
S'variable'
p97629
sS'required'
p97630
I01
sS'group_name'
p97631
NsasS'name'
p97632
S'/Postprocessors/ElementAverageValue'
p97633
sa(dp97634
S'description'
p97635
g3
sS'subblocks'
p97636
NsS'parameters'
p97637
(lp97638
(dp97639
S'description'
p97640
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97641
sS'cpp_type'
p97642
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97643
sS'default'
p97644
g3
sS'name'
p97645
S'block'
p97646
sS'required'
p97647
I00
sS'group_name'
p97648
Nsa(dp97649
S'description'
p97650
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97651
sS'cpp_type'
p97652
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97653
sS'default'
p97654
g3
sS'name'
p97655
S'control_tags'
p97656
sS'required'
p97657
I00
sS'group_name'
p97658
S'Advanced'
p97659
sa(dp97660
S'description'
p97661
S'Set the enabled status of the MooseObject.\n'
p97662
sS'cpp_type'
p97663
S'bool'
p97664
sS'default'
p97665
S'1'
p97666
sS'name'
p97667
S'enable'
p97668
sS'required'
p97669
I00
sS'group_name'
p97670
S'Advanced'
p97671
sa(dp97672
S'name'
p97673
S'execute_on'
p97674
sS'cpp_type'
p97675
S'MultiMooseEnum'
p97676
sS'default'
p97677
S'TIMESTEP_END'
p97678
sS'description'
p97679
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97680
sS'required'
p97681
I00
sS'options'
p97682
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97683
sS'group_name'
p97684
Nsa(dp97685
S'description'
p97686
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97687
sS'cpp_type'
p97688
S'std::vector<OutputName, std::allocator<OutputName> >'
p97689
sS'default'
p97690
g3
sS'name'
p97691
S'outputs'
p97692
sS'required'
p97693
I00
sS'group_name'
p97694
S'Advanced'
p97695
sa(dp97696
S'description'
p97697
S'The seed for the master random number generator\n'
p97698
sS'cpp_type'
p97699
S'unsigned int'
p97700
sS'default'
p97701
S'0'
p97702
sS'name'
p97703
S'seed'
p97704
sS'required'
p97705
I00
sS'group_name'
p97706
S'Advanced'
p97707
sa(dp97708
S'description'
p97709
g3
sS'cpp_type'
p97710
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97711
sS'default'
p97712
S'ElementExtremeValue'
p97713
sS'name'
p97714
S'type'
p97715
sS'required'
p97716
I00
sS'group_name'
p97717
Nsa(dp97718
S'description'
p97719
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97720
sS'cpp_type'
p97721
S'bool'
p97722
sS'default'
p97723
S'0'
p97724
sS'name'
p97725
S'use_displaced_mesh'
p97726
sS'required'
p97727
I00
sS'group_name'
p97728
S'Advanced'
p97729
sa(dp97730
S'name'
p97731
S'value_type'
p97732
sS'cpp_type'
p97733
S'MooseEnum'
p97734
sS'default'
p97735
S'max'
p97736
sS'description'
p97737
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p97738
sS'required'
p97739
I00
sS'options'
p97740
S'max min'
p97741
sS'group_name'
p97742
Nsa(dp97743
S'description'
p97744
S'The name of the variable that this postprocessor operates on\n'
p97745
sS'cpp_type'
p97746
S'std::vector<VariableName>'
p97747
sS'default'
p97748
g3
sS'name'
p97749
S'variable'
p97750
sS'required'
p97751
I01
sS'group_name'
p97752
NsasS'name'
p97753
S'/Postprocessors/ElementExtremeValue'
p97754
sa(dp97755
S'description'
p97756
g3
sS'subblocks'
p97757
NsS'parameters'
p97758
(lp97759
(dp97760
S'description'
p97761
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97762
sS'cpp_type'
p97763
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97764
sS'default'
p97765
g3
sS'name'
p97766
S'block'
p97767
sS'required'
p97768
I00
sS'group_name'
p97769
Nsa(dp97770
S'description'
p97771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97772
sS'cpp_type'
p97773
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97774
sS'default'
p97775
g3
sS'name'
p97776
S'control_tags'
p97777
sS'required'
p97778
I00
sS'group_name'
p97779
S'Advanced'
p97780
sa(dp97781
S'description'
p97782
S'Set the enabled status of the MooseObject.\n'
p97783
sS'cpp_type'
p97784
S'bool'
p97785
sS'default'
p97786
S'1'
p97787
sS'name'
p97788
S'enable'
p97789
sS'required'
p97790
I00
sS'group_name'
p97791
S'Advanced'
p97792
sa(dp97793
S'name'
p97794
S'execute_on'
p97795
sS'cpp_type'
p97796
S'MultiMooseEnum'
p97797
sS'default'
p97798
S'TIMESTEP_END'
p97799
sS'description'
p97800
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97801
sS'required'
p97802
I00
sS'options'
p97803
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97804
sS'group_name'
p97805
Nsa(dp97806
S'description'
p97807
S'The analytic solution to compare against\n'
p97808
sS'cpp_type'
p97809
S'FunctionName'
p97810
sS'default'
p97811
g3
sS'name'
p97812
S'function'
p97813
sS'required'
p97814
I01
sS'group_name'
p97815
Nsa(dp97816
S'description'
p97817
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97818
sS'cpp_type'
p97819
S'std::vector<OutputName, std::allocator<OutputName> >'
p97820
sS'default'
p97821
g3
sS'name'
p97822
S'outputs'
p97823
sS'required'
p97824
I00
sS'group_name'
p97825
S'Advanced'
p97826
sa(dp97827
S'description'
p97828
S'The exponent used in the norm.\n'
p97829
sS'cpp_type'
p97830
S'double'
p97831
sS'default'
p97832
S'2'
p97833
sS'name'
p97834
S'p'
p97835
sS'required'
p97836
I00
sS'group_name'
p97837
Nsa(dp97838
S'description'
p97839
S'The seed for the master random number generator\n'
p97840
sS'cpp_type'
p97841
S'unsigned int'
p97842
sS'default'
p97843
S'0'
p97844
sS'name'
p97845
S'seed'
p97846
sS'required'
p97847
I00
sS'group_name'
p97848
S'Advanced'
p97849
sa(dp97850
S'description'
p97851
g3
sS'cpp_type'
p97852
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97853
sS'default'
p97854
S'ElementH1Error'
p97855
sS'name'
p97856
S'type'
p97857
sS'required'
p97858
I00
sS'group_name'
p97859
Nsa(dp97860
S'description'
p97861
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97862
sS'cpp_type'
p97863
S'bool'
p97864
sS'default'
p97865
S'0'
p97866
sS'name'
p97867
S'use_displaced_mesh'
p97868
sS'required'
p97869
I00
sS'group_name'
p97870
S'Advanced'
p97871
sa(dp97872
S'description'
p97873
S'The name of the variable that this object operates on\n'
p97874
sS'cpp_type'
p97875
S'std::vector<VariableName>'
p97876
sS'default'
p97877
g3
sS'name'
p97878
S'variable'
p97879
sS'required'
p97880
I01
sS'group_name'
p97881
NsasS'name'
p97882
S'/Postprocessors/ElementH1Error'
p97883
sa(dp97884
S'description'
p97885
g3
sS'subblocks'
p97886
NsS'parameters'
p97887
(lp97888
(dp97889
S'description'
p97890
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97891
sS'cpp_type'
p97892
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97893
sS'default'
p97894
g3
sS'name'
p97895
S'block'
p97896
sS'required'
p97897
I00
sS'group_name'
p97898
Nsa(dp97899
S'description'
p97900
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97901
sS'cpp_type'
p97902
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97903
sS'default'
p97904
g3
sS'name'
p97905
S'control_tags'
p97906
sS'required'
p97907
I00
sS'group_name'
p97908
S'Advanced'
p97909
sa(dp97910
S'description'
p97911
S'Set the enabled status of the MooseObject.\n'
p97912
sS'cpp_type'
p97913
S'bool'
p97914
sS'default'
p97915
S'1'
p97916
sS'name'
p97917
S'enable'
p97918
sS'required'
p97919
I00
sS'group_name'
p97920
S'Advanced'
p97921
sa(dp97922
S'name'
p97923
S'execute_on'
p97924
sS'cpp_type'
p97925
S'MultiMooseEnum'
p97926
sS'default'
p97927
S'TIMESTEP_END'
p97928
sS'description'
p97929
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97930
sS'required'
p97931
I00
sS'options'
p97932
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97933
sS'group_name'
p97934
Nsa(dp97935
S'description'
p97936
S'The analytic solution to compare against\n'
p97937
sS'cpp_type'
p97938
S'FunctionName'
p97939
sS'default'
p97940
g3
sS'name'
p97941
S'function'
p97942
sS'required'
p97943
I01
sS'group_name'
p97944
Nsa(dp97945
S'description'
p97946
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97947
sS'cpp_type'
p97948
S'std::vector<OutputName, std::allocator<OutputName> >'
p97949
sS'default'
p97950
g3
sS'name'
p97951
S'outputs'
p97952
sS'required'
p97953
I00
sS'group_name'
p97954
S'Advanced'
p97955
sa(dp97956
S'description'
p97957
S'The seed for the master random number generator\n'
p97958
sS'cpp_type'
p97959
S'unsigned int'
p97960
sS'default'
p97961
S'0'
p97962
sS'name'
p97963
S'seed'
p97964
sS'required'
p97965
I00
sS'group_name'
p97966
S'Advanced'
p97967
sa(dp97968
S'description'
p97969
g3
sS'cpp_type'
p97970
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97971
sS'default'
p97972
S'ElementH1SemiError'
p97973
sS'name'
p97974
S'type'
p97975
sS'required'
p97976
I00
sS'group_name'
p97977
Nsa(dp97978
S'description'
p97979
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97980
sS'cpp_type'
p97981
S'bool'
p97982
sS'default'
p97983
S'0'
p97984
sS'name'
p97985
S'use_displaced_mesh'
p97986
sS'required'
p97987
I00
sS'group_name'
p97988
S'Advanced'
p97989
sa(dp97990
S'description'
p97991
S'The name of the variable that this object operates on\n'
p97992
sS'cpp_type'
p97993
S'std::vector<VariableName>'
p97994
sS'default'
p97995
g3
sS'name'
p97996
S'variable'
p97997
sS'required'
p97998
I01
sS'group_name'
p97999
NsasS'name'
p98000
S'/Postprocessors/ElementH1SemiError'
p98001
sa(dp98002
S'description'
p98003
g3
sS'subblocks'
p98004
NsS'parameters'
p98005
(lp98006
(dp98007
S'description'
p98008
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98009
sS'cpp_type'
p98010
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98011
sS'default'
p98012
g3
sS'name'
p98013
S'block'
p98014
sS'required'
p98015
I00
sS'group_name'
p98016
Nsa(dp98017
S'description'
p98018
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98019
sS'cpp_type'
p98020
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98021
sS'default'
p98022
g3
sS'name'
p98023
S'control_tags'
p98024
sS'required'
p98025
I00
sS'group_name'
p98026
S'Advanced'
p98027
sa(dp98028
S'description'
p98029
S'Set the enabled status of the MooseObject.\n'
p98030
sS'cpp_type'
p98031
S'bool'
p98032
sS'default'
p98033
S'1'
p98034
sS'name'
p98035
S'enable'
p98036
sS'required'
p98037
I00
sS'group_name'
p98038
S'Advanced'
p98039
sa(dp98040
S'name'
p98041
S'execute_on'
p98042
sS'cpp_type'
p98043
S'MultiMooseEnum'
p98044
sS'default'
p98045
S'TIMESTEP_END'
p98046
sS'description'
p98047
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98048
sS'required'
p98049
I00
sS'options'
p98050
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98051
sS'group_name'
p98052
Nsa(dp98053
S'description'
p98054
S'The name of the material property\n'
p98055
sS'cpp_type'
p98056
S'MaterialPropertyName'
p98057
sS'default'
p98058
g3
sS'name'
p98059
S'mat_prop'
p98060
sS'required'
p98061
I01
sS'group_name'
p98062
Nsa(dp98063
S'description'
p98064
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98065
sS'cpp_type'
p98066
S'std::vector<OutputName, std::allocator<OutputName> >'
p98067
sS'default'
p98068
g3
sS'name'
p98069
S'outputs'
p98070
sS'required'
p98071
I00
sS'group_name'
p98072
S'Advanced'
p98073
sa(dp98074
S'description'
p98075
S'The seed for the master random number generator\n'
p98076
sS'cpp_type'
p98077
S'unsigned int'
p98078
sS'default'
p98079
S'0'
p98080
sS'name'
p98081
S'seed'
p98082
sS'required'
p98083
I00
sS'group_name'
p98084
S'Advanced'
p98085
sa(dp98086
S'description'
p98087
g3
sS'cpp_type'
p98088
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98089
sS'default'
p98090
S'ElementIntegralMaterialProperty'
p98091
sS'name'
p98092
S'type'
p98093
sS'required'
p98094
I00
sS'group_name'
p98095
Nsa(dp98096
S'description'
p98097
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98098
sS'cpp_type'
p98099
S'bool'
p98100
sS'default'
p98101
S'0'
p98102
sS'name'
p98103
S'use_displaced_mesh'
p98104
sS'required'
p98105
I00
sS'group_name'
p98106
S'Advanced'
p98107
sasS'name'
p98108
S'/Postprocessors/ElementIntegralMaterialProperty'
p98109
sa(dp98110
S'description'
p98111
g3
sS'subblocks'
p98112
NsS'parameters'
p98113
(lp98114
(dp98115
S'description'
p98116
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98117
sS'cpp_type'
p98118
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98119
sS'default'
p98120
g3
sS'name'
p98121
S'block'
p98122
sS'required'
p98123
I00
sS'group_name'
p98124
Nsa(dp98125
S'description'
p98126
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98127
sS'cpp_type'
p98128
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98129
sS'default'
p98130
g3
sS'name'
p98131
S'control_tags'
p98132
sS'required'
p98133
I00
sS'group_name'
p98134
S'Advanced'
p98135
sa(dp98136
S'description'
p98137
S'Set the enabled status of the MooseObject.\n'
p98138
sS'cpp_type'
p98139
S'bool'
p98140
sS'default'
p98141
S'1'
p98142
sS'name'
p98143
S'enable'
p98144
sS'required'
p98145
I00
sS'group_name'
p98146
S'Advanced'
p98147
sa(dp98148
S'name'
p98149
S'execute_on'
p98150
sS'cpp_type'
p98151
S'MultiMooseEnum'
p98152
sS'default'
p98153
S'TIMESTEP_END'
p98154
sS'description'
p98155
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98156
sS'required'
p98157
I00
sS'options'
p98158
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98159
sS'group_name'
p98160
Nsa(dp98161
S'description'
p98162
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98163
sS'cpp_type'
p98164
S'std::vector<OutputName, std::allocator<OutputName> >'
p98165
sS'default'
p98166
g3
sS'name'
p98167
S'outputs'
p98168
sS'required'
p98169
I00
sS'group_name'
p98170
S'Advanced'
p98171
sa(dp98172
S'description'
p98173
S'The seed for the master random number generator\n'
p98174
sS'cpp_type'
p98175
S'unsigned int'
p98176
sS'default'
p98177
S'0'
p98178
sS'name'
p98179
S'seed'
p98180
sS'required'
p98181
I00
sS'group_name'
p98182
S'Advanced'
p98183
sa(dp98184
S'description'
p98185
g3
sS'cpp_type'
p98186
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98187
sS'default'
p98188
S'ElementIntegralVariablePostprocessor'
p98189
sS'name'
p98190
S'type'
p98191
sS'required'
p98192
I00
sS'group_name'
p98193
Nsa(dp98194
S'description'
p98195
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98196
sS'cpp_type'
p98197
S'bool'
p98198
sS'default'
p98199
S'0'
p98200
sS'name'
p98201
S'use_displaced_mesh'
p98202
sS'required'
p98203
I00
sS'group_name'
p98204
S'Advanced'
p98205
sa(dp98206
S'description'
p98207
S'The name of the variable that this object operates on\n'
p98208
sS'cpp_type'
p98209
S'std::vector<VariableName>'
p98210
sS'default'
p98211
g3
sS'name'
p98212
S'variable'
p98213
sS'required'
p98214
I01
sS'group_name'
p98215
NsasS'name'
p98216
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p98217
sa(dp98218
S'description'
p98219
g3
sS'subblocks'
p98220
NsS'parameters'
p98221
(lp98222
(dp98223
S'description'
p98224
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98225
sS'cpp_type'
p98226
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98227
sS'default'
p98228
g3
sS'name'
p98229
S'block'
p98230
sS'required'
p98231
I00
sS'group_name'
p98232
Nsa(dp98233
S'description'
p98234
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98235
sS'cpp_type'
p98236
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98237
sS'default'
p98238
g3
sS'name'
p98239
S'control_tags'
p98240
sS'required'
p98241
I00
sS'group_name'
p98242
S'Advanced'
p98243
sa(dp98244
S'description'
p98245
S'Set the enabled status of the MooseObject.\n'
p98246
sS'cpp_type'
p98247
S'bool'
p98248
sS'default'
p98249
S'1'
p98250
sS'name'
p98251
S'enable'
p98252
sS'required'
p98253
I00
sS'group_name'
p98254
S'Advanced'
p98255
sa(dp98256
S'name'
p98257
S'execute_on'
p98258
sS'cpp_type'
p98259
S'MultiMooseEnum'
p98260
sS'default'
p98261
S'TIMESTEP_END'
p98262
sS'description'
p98263
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98264
sS'required'
p98265
I00
sS'options'
p98266
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98267
sS'group_name'
p98268
Nsa(dp98269
S'description'
p98270
S'The variable to compare to\n'
p98271
sS'cpp_type'
p98272
S'std::vector<VariableName>'
p98273
sS'default'
p98274
g3
sS'name'
p98275
S'other_variable'
p98276
sS'required'
p98277
I01
sS'group_name'
p98278
Nsa(dp98279
S'description'
p98280
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98281
sS'cpp_type'
p98282
S'std::vector<OutputName, std::allocator<OutputName> >'
p98283
sS'default'
p98284
g3
sS'name'
p98285
S'outputs'
p98286
sS'required'
p98287
I00
sS'group_name'
p98288
S'Advanced'
p98289
sa(dp98290
S'description'
p98291
S'The seed for the master random number generator\n'
p98292
sS'cpp_type'
p98293
S'unsigned int'
p98294
sS'default'
p98295
S'0'
p98296
sS'name'
p98297
S'seed'
p98298
sS'required'
p98299
I00
sS'group_name'
p98300
S'Advanced'
p98301
sa(dp98302
S'description'
p98303
g3
sS'cpp_type'
p98304
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98305
sS'default'
p98306
S'ElementL2Difference'
p98307
sS'name'
p98308
S'type'
p98309
sS'required'
p98310
I00
sS'group_name'
p98311
Nsa(dp98312
S'description'
p98313
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98314
sS'cpp_type'
p98315
S'bool'
p98316
sS'default'
p98317
S'0'
p98318
sS'name'
p98319
S'use_displaced_mesh'
p98320
sS'required'
p98321
I00
sS'group_name'
p98322
S'Advanced'
p98323
sa(dp98324
S'description'
p98325
S'The name of the variable that this object operates on\n'
p98326
sS'cpp_type'
p98327
S'std::vector<VariableName>'
p98328
sS'default'
p98329
g3
sS'name'
p98330
S'variable'
p98331
sS'required'
p98332
I01
sS'group_name'
p98333
NsasS'name'
p98334
S'/Postprocessors/ElementL2Difference'
p98335
sa(dp98336
S'description'
p98337
g3
sS'subblocks'
p98338
NsS'parameters'
p98339
(lp98340
(dp98341
S'description'
p98342
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98343
sS'cpp_type'
p98344
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98345
sS'default'
p98346
g3
sS'name'
p98347
S'block'
p98348
sS'required'
p98349
I00
sS'group_name'
p98350
Nsa(dp98351
S'description'
p98352
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98353
sS'cpp_type'
p98354
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98355
sS'default'
p98356
g3
sS'name'
p98357
S'control_tags'
p98358
sS'required'
p98359
I00
sS'group_name'
p98360
S'Advanced'
p98361
sa(dp98362
S'description'
p98363
S'Set the enabled status of the MooseObject.\n'
p98364
sS'cpp_type'
p98365
S'bool'
p98366
sS'default'
p98367
S'1'
p98368
sS'name'
p98369
S'enable'
p98370
sS'required'
p98371
I00
sS'group_name'
p98372
S'Advanced'
p98373
sa(dp98374
S'name'
p98375
S'execute_on'
p98376
sS'cpp_type'
p98377
S'MultiMooseEnum'
p98378
sS'default'
p98379
S'TIMESTEP_END'
p98380
sS'description'
p98381
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98382
sS'required'
p98383
I00
sS'options'
p98384
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98385
sS'group_name'
p98386
Nsa(dp98387
S'description'
p98388
S'The analytic solution to compare against\n'
p98389
sS'cpp_type'
p98390
S'FunctionName'
p98391
sS'default'
p98392
g3
sS'name'
p98393
S'function'
p98394
sS'required'
p98395
I01
sS'group_name'
p98396
Nsa(dp98397
S'description'
p98398
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98399
sS'cpp_type'
p98400
S'std::vector<OutputName, std::allocator<OutputName> >'
p98401
sS'default'
p98402
g3
sS'name'
p98403
S'outputs'
p98404
sS'required'
p98405
I00
sS'group_name'
p98406
S'Advanced'
p98407
sa(dp98408
S'description'
p98409
S'The seed for the master random number generator\n'
p98410
sS'cpp_type'
p98411
S'unsigned int'
p98412
sS'default'
p98413
S'0'
p98414
sS'name'
p98415
S'seed'
p98416
sS'required'
p98417
I00
sS'group_name'
p98418
S'Advanced'
p98419
sa(dp98420
S'description'
p98421
g3
sS'cpp_type'
p98422
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98423
sS'default'
p98424
S'ElementL2Error'
p98425
sS'name'
p98426
S'type'
p98427
sS'required'
p98428
I00
sS'group_name'
p98429
Nsa(dp98430
S'description'
p98431
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98432
sS'cpp_type'
p98433
S'bool'
p98434
sS'default'
p98435
S'0'
p98436
sS'name'
p98437
S'use_displaced_mesh'
p98438
sS'required'
p98439
I00
sS'group_name'
p98440
S'Advanced'
p98441
sa(dp98442
S'description'
p98443
S'The name of the variable that this object operates on\n'
p98444
sS'cpp_type'
p98445
S'std::vector<VariableName>'
p98446
sS'default'
p98447
g3
sS'name'
p98448
S'variable'
p98449
sS'required'
p98450
I01
sS'group_name'
p98451
NsasS'name'
p98452
S'/Postprocessors/ElementL2Error'
p98453
sa(dp98454
S'description'
p98455
g3
sS'subblocks'
p98456
NsS'parameters'
p98457
(lp98458
(dp98459
S'description'
p98460
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98461
sS'cpp_type'
p98462
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98463
sS'default'
p98464
g3
sS'name'
p98465
S'block'
p98466
sS'required'
p98467
I00
sS'group_name'
p98468
Nsa(dp98469
S'description'
p98470
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98471
sS'cpp_type'
p98472
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98473
sS'default'
p98474
g3
sS'name'
p98475
S'control_tags'
p98476
sS'required'
p98477
I00
sS'group_name'
p98478
S'Advanced'
p98479
sa(dp98480
S'description'
p98481
S'Set the enabled status of the MooseObject.\n'
p98482
sS'cpp_type'
p98483
S'bool'
p98484
sS'default'
p98485
S'1'
p98486
sS'name'
p98487
S'enable'
p98488
sS'required'
p98489
I00
sS'group_name'
p98490
S'Advanced'
p98491
sa(dp98492
S'name'
p98493
S'execute_on'
p98494
sS'cpp_type'
p98495
S'MultiMooseEnum'
p98496
sS'default'
p98497
S'TIMESTEP_END'
p98498
sS'description'
p98499
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98500
sS'required'
p98501
I00
sS'options'
p98502
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98503
sS'group_name'
p98504
Nsa(dp98505
S'description'
p98506
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98507
sS'cpp_type'
p98508
S'std::vector<OutputName, std::allocator<OutputName> >'
p98509
sS'default'
p98510
g3
sS'name'
p98511
S'outputs'
p98512
sS'required'
p98513
I00
sS'group_name'
p98514
S'Advanced'
p98515
sa(dp98516
S'description'
p98517
S'The seed for the master random number generator\n'
p98518
sS'cpp_type'
p98519
S'unsigned int'
p98520
sS'default'
p98521
S'0'
p98522
sS'name'
p98523
S'seed'
p98524
sS'required'
p98525
I00
sS'group_name'
p98526
S'Advanced'
p98527
sa(dp98528
S'description'
p98529
g3
sS'cpp_type'
p98530
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98531
sS'default'
p98532
S'ElementL2Norm'
p98533
sS'name'
p98534
S'type'
p98535
sS'required'
p98536
I00
sS'group_name'
p98537
Nsa(dp98538
S'description'
p98539
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98540
sS'cpp_type'
p98541
S'bool'
p98542
sS'default'
p98543
S'0'
p98544
sS'name'
p98545
S'use_displaced_mesh'
p98546
sS'required'
p98547
I00
sS'group_name'
p98548
S'Advanced'
p98549
sa(dp98550
S'description'
p98551
S'The name of the variable that this object operates on\n'
p98552
sS'cpp_type'
p98553
S'std::vector<VariableName>'
p98554
sS'default'
p98555
g3
sS'name'
p98556
S'variable'
p98557
sS'required'
p98558
I01
sS'group_name'
p98559
NsasS'name'
p98560
S'/Postprocessors/ElementL2Norm'
p98561
sa(dp98562
S'description'
p98563
g3
sS'subblocks'
p98564
NsS'parameters'
p98565
(lp98566
(dp98567
S'description'
p98568
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98569
sS'cpp_type'
p98570
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98571
sS'default'
p98572
g3
sS'name'
p98573
S'block'
p98574
sS'required'
p98575
I00
sS'group_name'
p98576
Nsa(dp98577
S'description'
p98578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98579
sS'cpp_type'
p98580
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98581
sS'default'
p98582
g3
sS'name'
p98583
S'control_tags'
p98584
sS'required'
p98585
I00
sS'group_name'
p98586
S'Advanced'
p98587
sa(dp98588
S'description'
p98589
S'Set the enabled status of the MooseObject.\n'
p98590
sS'cpp_type'
p98591
S'bool'
p98592
sS'default'
p98593
S'1'
p98594
sS'name'
p98595
S'enable'
p98596
sS'required'
p98597
I00
sS'group_name'
p98598
S'Advanced'
p98599
sa(dp98600
S'name'
p98601
S'execute_on'
p98602
sS'cpp_type'
p98603
S'MultiMooseEnum'
p98604
sS'default'
p98605
S'TIMESTEP_END'
p98606
sS'description'
p98607
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98608
sS'required'
p98609
I00
sS'options'
p98610
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98611
sS'group_name'
p98612
Nsa(dp98613
S'description'
p98614
S'The analytic solution to compare against\n'
p98615
sS'cpp_type'
p98616
S'FunctionName'
p98617
sS'default'
p98618
g3
sS'name'
p98619
S'function_x'
p98620
sS'required'
p98621
I01
sS'group_name'
p98622
Nsa(dp98623
S'description'
p98624
S'The analytic solution to compare against\n'
p98625
sS'cpp_type'
p98626
S'FunctionName'
p98627
sS'default'
p98628
S'0'
p98629
sS'name'
p98630
S'function_y'
p98631
sS'required'
p98632
I00
sS'group_name'
p98633
Nsa(dp98634
S'description'
p98635
S'The analytic solution to compare against\n'
p98636
sS'cpp_type'
p98637
S'FunctionName'
p98638
sS'default'
p98639
S'0'
p98640
sS'name'
p98641
S'function_z'
p98642
sS'required'
p98643
I00
sS'group_name'
p98644
Nsa(dp98645
S'description'
p98646
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98647
sS'cpp_type'
p98648
S'std::vector<OutputName, std::allocator<OutputName> >'
p98649
sS'default'
p98650
g3
sS'name'
p98651
S'outputs'
p98652
sS'required'
p98653
I00
sS'group_name'
p98654
S'Advanced'
p98655
sa(dp98656
S'description'
p98657
S'The seed for the master random number generator\n'
p98658
sS'cpp_type'
p98659
S'unsigned int'
p98660
sS'default'
p98661
S'0'
p98662
sS'name'
p98663
S'seed'
p98664
sS'required'
p98665
I00
sS'group_name'
p98666
S'Advanced'
p98667
sa(dp98668
S'description'
p98669
g3
sS'cpp_type'
p98670
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98671
sS'default'
p98672
S'ElementVectorL2Error'
p98673
sS'name'
p98674
S'type'
p98675
sS'required'
p98676
I00
sS'group_name'
p98677
Nsa(dp98678
S'description'
p98679
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98680
sS'cpp_type'
p98681
S'bool'
p98682
sS'default'
p98683
S'0'
p98684
sS'name'
p98685
S'use_displaced_mesh'
p98686
sS'required'
p98687
I00
sS'group_name'
p98688
S'Advanced'
p98689
sa(dp98690
S'description'
p98691
S'The FE solution in x direction\n'
p98692
sS'cpp_type'
p98693
S'std::vector<VariableName>'
p98694
sS'default'
p98695
g3
sS'name'
p98696
S'var_x'
p98697
sS'required'
p98698
I01
sS'group_name'
p98699
Nsa(dp98700
S'description'
p98701
S'The FE solution in y direction\n'
p98702
sS'cpp_type'
p98703
S'std::vector<VariableName>'
p98704
sS'default'
p98705
S'0'
p98706
sS'name'
p98707
S'var_y'
p98708
sS'required'
p98709
I00
sS'group_name'
p98710
Nsa(dp98711
S'description'
p98712
S'The FE solution in z direction\n'
p98713
sS'cpp_type'
p98714
S'std::vector<VariableName>'
p98715
sS'default'
p98716
S'0'
p98717
sS'name'
p98718
S'var_z'
p98719
sS'required'
p98720
I00
sS'group_name'
p98721
NsasS'name'
p98722
S'/Postprocessors/ElementVectorL2Error'
p98723
sa(dp98724
S'description'
p98725
g3
sS'subblocks'
p98726
NsS'parameters'
p98727
(lp98728
(dp98729
S'description'
p98730
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98731
sS'cpp_type'
p98732
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98733
sS'default'
p98734
g3
sS'name'
p98735
S'block'
p98736
sS'required'
p98737
I00
sS'group_name'
p98738
Nsa(dp98739
S'description'
p98740
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98741
sS'cpp_type'
p98742
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98743
sS'default'
p98744
g3
sS'name'
p98745
S'control_tags'
p98746
sS'required'
p98747
I00
sS'group_name'
p98748
S'Advanced'
p98749
sa(dp98750
S'description'
p98751
S'Set the enabled status of the MooseObject.\n'
p98752
sS'cpp_type'
p98753
S'bool'
p98754
sS'default'
p98755
S'1'
p98756
sS'name'
p98757
S'enable'
p98758
sS'required'
p98759
I00
sS'group_name'
p98760
S'Advanced'
p98761
sa(dp98762
S'name'
p98763
S'execute_on'
p98764
sS'cpp_type'
p98765
S'MultiMooseEnum'
p98766
sS'default'
p98767
S'TIMESTEP_END'
p98768
sS'description'
p98769
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98770
sS'required'
p98771
I00
sS'options'
p98772
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98773
sS'group_name'
p98774
Nsa(dp98775
S'description'
p98776
S'The analytic solution to compare against\n'
p98777
sS'cpp_type'
p98778
S'FunctionName'
p98779
sS'default'
p98780
g3
sS'name'
p98781
S'function'
p98782
sS'required'
p98783
I01
sS'group_name'
p98784
Nsa(dp98785
S'description'
p98786
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98787
sS'cpp_type'
p98788
S'std::vector<OutputName, std::allocator<OutputName> >'
p98789
sS'default'
p98790
g3
sS'name'
p98791
S'outputs'
p98792
sS'required'
p98793
I00
sS'group_name'
p98794
S'Advanced'
p98795
sa(dp98796
S'description'
p98797
S'The exponent used in the norm.\n'
p98798
sS'cpp_type'
p98799
S'double'
p98800
sS'default'
p98801
S'2'
p98802
sS'name'
p98803
S'p'
p98804
sS'required'
p98805
I00
sS'group_name'
p98806
Nsa(dp98807
S'description'
p98808
S'The seed for the master random number generator\n'
p98809
sS'cpp_type'
p98810
S'unsigned int'
p98811
sS'default'
p98812
S'0'
p98813
sS'name'
p98814
S'seed'
p98815
sS'required'
p98816
I00
sS'group_name'
p98817
S'Advanced'
p98818
sa(dp98819
S'description'
p98820
g3
sS'cpp_type'
p98821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98822
sS'default'
p98823
S'ElementW1pError'
p98824
sS'name'
p98825
S'type'
p98826
sS'required'
p98827
I00
sS'group_name'
p98828
Nsa(dp98829
S'description'
p98830
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98831
sS'cpp_type'
p98832
S'bool'
p98833
sS'default'
p98834
S'0'
p98835
sS'name'
p98836
S'use_displaced_mesh'
p98837
sS'required'
p98838
I00
sS'group_name'
p98839
S'Advanced'
p98840
sa(dp98841
S'description'
p98842
S'The name of the variable that this object operates on\n'
p98843
sS'cpp_type'
p98844
S'std::vector<VariableName>'
p98845
sS'default'
p98846
g3
sS'name'
p98847
S'variable'
p98848
sS'required'
p98849
I01
sS'group_name'
p98850
NsasS'name'
p98851
S'/Postprocessors/ElementW1pError'
p98852
sa(dp98853
S'description'
p98854
g3
sS'subblocks'
p98855
NsS'parameters'
p98856
(lp98857
(dp98858
S'description'
p98859
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98860
sS'cpp_type'
p98861
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98862
sS'default'
p98863
g3
sS'name'
p98864
S'control_tags'
p98865
sS'required'
p98866
I00
sS'group_name'
p98867
S'Advanced'
p98868
sa(dp98869
S'description'
p98870
S'The ID of the element where we monitor\n'
p98871
sS'cpp_type'
p98872
S'unsigned int'
p98873
sS'default'
p98874
g3
sS'name'
p98875
S'elementid'
p98876
sS'required'
p98877
I01
sS'group_name'
p98878
Nsa(dp98879
S'description'
p98880
S'Set the enabled status of the MooseObject.\n'
p98881
sS'cpp_type'
p98882
S'bool'
p98883
sS'default'
p98884
S'1'
p98885
sS'name'
p98886
S'enable'
p98887
sS'required'
p98888
I00
sS'group_name'
p98889
S'Advanced'
p98890
sa(dp98891
S'name'
p98892
S'execute_on'
p98893
sS'cpp_type'
p98894
S'MultiMooseEnum'
p98895
sS'default'
p98896
S'TIMESTEP_END'
p98897
sS'description'
p98898
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98899
sS'required'
p98900
I00
sS'options'
p98901
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98902
sS'group_name'
p98903
Nsa(dp98904
S'description'
p98905
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98906
sS'cpp_type'
p98907
S'std::vector<OutputName, std::allocator<OutputName> >'
p98908
sS'default'
p98909
g3
sS'name'
p98910
S'outputs'
p98911
sS'required'
p98912
I00
sS'group_name'
p98913
S'Advanced'
p98914
sa(dp98915
S'description'
p98916
g3
sS'cpp_type'
p98917
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98918
sS'default'
p98919
S'ElementalVariableValue'
p98920
sS'name'
p98921
S'type'
p98922
sS'required'
p98923
I00
sS'group_name'
p98924
Nsa(dp98925
S'description'
p98926
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98927
sS'cpp_type'
p98928
S'bool'
p98929
sS'default'
p98930
S'0'
p98931
sS'name'
p98932
S'use_displaced_mesh'
p98933
sS'required'
p98934
I00
sS'group_name'
p98935
S'Advanced'
p98936
sa(dp98937
S'description'
p98938
S'The variable to be monitored\n'
p98939
sS'cpp_type'
p98940
S'VariableName'
p98941
sS'default'
p98942
g3
sS'name'
p98943
S'variable'
p98944
sS'required'
p98945
I01
sS'group_name'
p98946
NsasS'name'
p98947
S'/Postprocessors/ElementalVariableValue'
p98948
sa(dp98949
S'description'
p98950
g3
sS'subblocks'
p98951
NsS'parameters'
p98952
(lp98953
(dp98954
S'description'
p98955
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98956
sS'cpp_type'
p98957
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98958
sS'default'
p98959
g3
sS'name'
p98960
S'control_tags'
p98961
sS'required'
p98962
I00
sS'group_name'
p98963
S'Advanced'
p98964
sa(dp98965
S'description'
p98966
S'Set the enabled status of the MooseObject.\n'
p98967
sS'cpp_type'
p98968
S'bool'
p98969
sS'default'
p98970
S'1'
p98971
sS'name'
p98972
S'enable'
p98973
sS'required'
p98974
I00
sS'group_name'
p98975
S'Advanced'
p98976
sa(dp98977
S'name'
p98978
S'execute_on'
p98979
sS'cpp_type'
p98980
S'MultiMooseEnum'
p98981
sS'default'
p98982
S'TIMESTEP_END'
p98983
sS'description'
p98984
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98985
sS'required'
p98986
I00
sS'options'
p98987
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98988
sS'group_name'
p98989
Nsa(dp98990
S'description'
p98991
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98992
sS'cpp_type'
p98993
S'std::vector<OutputName, std::allocator<OutputName> >'
p98994
sS'default'
p98995
g3
sS'name'
p98996
S'outputs'
p98997
sS'required'
p98998
I00
sS'group_name'
p98999
S'Advanced'
p99000
sa(dp99001
S'description'
p99002
g3
sS'cpp_type'
p99003
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99004
sS'default'
p99005
S'EmptyPostprocessor'
p99006
sS'name'
p99007
S'type'
p99008
sS'required'
p99009
I00
sS'group_name'
p99010
Nsa(dp99011
S'description'
p99012
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99013
sS'cpp_type'
p99014
S'bool'
p99015
sS'default'
p99016
S'0'
p99017
sS'name'
p99018
S'use_displaced_mesh'
p99019
sS'required'
p99020
I00
sS'group_name'
p99021
S'Advanced'
p99022
sasS'name'
p99023
S'/Postprocessors/EmptyPostprocessor'
p99024
sa(dp99025
S'description'
p99026
g3
sS'subblocks'
p99027
NsS'parameters'
p99028
(lp99029
(dp99030
S'description'
p99031
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99032
sS'cpp_type'
p99033
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99034
sS'default'
p99035
g3
sS'name'
p99036
S'control_tags'
p99037
sS'required'
p99038
I00
sS'group_name'
p99039
S'Advanced'
p99040
sa(dp99041
S'description'
p99042
S'Set the enabled status of the MooseObject.\n'
p99043
sS'cpp_type'
p99044
S'bool'
p99045
sS'default'
p99046
S'1'
p99047
sS'name'
p99048
S'enable'
p99049
sS'required'
p99050
I00
sS'group_name'
p99051
S'Advanced'
p99052
sa(dp99053
S'name'
p99054
S'execute_on'
p99055
sS'cpp_type'
p99056
S'MultiMooseEnum'
p99057
sS'default'
p99058
S'TIMESTEP_END'
p99059
sS'description'
p99060
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99061
sS'required'
p99062
I00
sS'options'
p99063
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99064
sS'group_name'
p99065
Nsa(dp99066
S'description'
p99067
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99068
sS'cpp_type'
p99069
S'std::vector<OutputName, std::allocator<OutputName> >'
p99070
sS'default'
p99071
g3
sS'name'
p99072
S'outputs'
p99073
sS'required'
p99074
I00
sS'group_name'
p99075
S'Advanced'
p99076
sa(dp99077
S'description'
p99078
g3
sS'cpp_type'
p99079
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99080
sS'default'
p99081
S'ExecutionerAttributeReporter'
p99082
sS'name'
p99083
S'type'
p99084
sS'required'
p99085
I00
sS'group_name'
p99086
Nsa(dp99087
S'description'
p99088
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99089
sS'cpp_type'
p99090
S'bool'
p99091
sS'default'
p99092
S'0'
p99093
sS'name'
p99094
S'use_displaced_mesh'
p99095
sS'required'
p99096
I00
sS'group_name'
p99097
S'Advanced'
p99098
sasS'name'
p99099
S'/Postprocessors/ExecutionerAttributeReporter'
p99100
sa(dp99101
S'description'
p99102
S'Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n'
p99103
sS'subblocks'
p99104
NsS'parameters'
p99105
(lp99106
(dp99107
S'description'
p99108
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p99109
sS'cpp_type'
p99110
S'bool'
p99111
sS'default'
p99112
S'0'
p99113
sS'name'
p99114
S'compute_halo_maps'
p99115
sS'required'
p99116
I00
sS'group_name'
p99117
Nsa(dp99118
S'description'
p99119
S'Instruct the Postprocessor to compute the active vars to features map\n'
p99120
sS'cpp_type'
p99121
S'bool'
p99122
sS'default'
p99123
S'0'
p99124
sS'name'
p99125
S'compute_var_to_feature_map'
p99126
sS'required'
p99127
I00
sS'group_name'
p99128
Nsa(dp99129
S'description'
p99130
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p99131
sS'cpp_type'
p99132
S'bool'
p99133
sS'default'
p99134
S'1'
p99135
sS'name'
p99136
S'condense_map_info'
p99137
sS'required'
p99138
I00
sS'group_name'
p99139
S'Advanced'
p99140
sa(dp99141
S'description'
p99142
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p99143
sS'cpp_type'
p99144
S'double'
p99145
sS'default'
p99146
S'0.09'
p99147
sS'name'
p99148
S'connecting_threshold'
p99149
sS'required'
p99150
I00
sS'group_name'
p99151
Nsa(dp99152
S'description'
p99153
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99154
sS'cpp_type'
p99155
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99156
sS'default'
p99157
g3
sS'name'
p99158
S'control_tags'
p99159
sS'required'
p99160
I00
sS'group_name'
p99161
S'Advanced'
p99162
sa(dp99163
S'description'
p99164
S'Optional: EBSD Reader for initial condition\n'
p99165
sS'cpp_type'
p99166
S'UserObjectName'
p99167
sS'default'
p99168
g3
sS'name'
p99169
S'ebsd_reader'
p99170
sS'required'
p99171
I00
sS'group_name'
p99172
Nsa(dp99173
S'description'
p99174
S'Set the enabled status of the MooseObject.\n'
p99175
sS'cpp_type'
p99176
S'bool'
p99177
sS'default'
p99178
S'1'
p99179
sS'name'
p99180
S'enable'
p99181
sS'required'
p99182
I00
sS'group_name'
p99183
S'Advanced'
p99184
sa(dp99185
S'description'
p99186
S'Instruct the Postprocessor to populate the variable index map.\n'
p99187
sS'cpp_type'
p99188
S'bool'
p99189
sS'default'
p99190
S'1'
p99191
sS'name'
p99192
S'enable_var_coloring'
p99193
sS'required'
p99194
I00
sS'group_name'
p99195
Nsa(dp99196
S'description'
p99197
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p99198
sS'cpp_type'
p99199
S'bool'
p99200
sS'default'
p99201
S'0'
p99202
sS'name'
p99203
S'error_on_grain_creation'
p99204
sS'required'
p99205
I00
sS'group_name'
p99206
Nsa(dp99207
S'name'
p99208
S'execute_on'
p99209
sS'cpp_type'
p99210
S'MultiMooseEnum'
p99211
sS'default'
p99212
S'INITIAL TIMESTEP_END'
p99213
sS'description'
p99214
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99215
sS'required'
p99216
I00
sS'options'
p99217
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99218
sS'group_name'
p99219
Nsa(dp99220
S'name'
p99221
S'flood_entity_type'
p99222
sS'cpp_type'
p99223
S'MooseEnum'
p99224
sS'default'
p99225
S'ELEMENTAL'
p99226
sS'description'
p99227
S'Determines whether the flood algorithm runs on nodes or elements\n'
p99228
sS'required'
p99229
I00
sS'options'
p99230
S'NODAL ELEMENTAL'
p99231
sS'group_name'
p99232
Nsa(dp99233
S'description'
p99234
S'The thickness of the halo surrounding each feature.\n'
p99235
sS'cpp_type'
p99236
S'unsigned int'
p99237
sS'default'
p99238
S'2'
p99239
sS'name'
p99240
S'halo_level'
p99241
sS'required'
p99242
I00
sS'group_name'
p99243
Nsa(dp99244
S'description'
p99245
S'Array of coupled variables (num_name)\n'
p99246
sS'cpp_type'
p99247
S'unsigned int'
p99248
sS'default'
p99249
g3
sS'name'
p99250
S'op_num'
p99251
sS'required'
p99252
I00
sS'group_name'
p99253
Nsa(dp99254
S'description'
p99255
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99256
sS'cpp_type'
p99257
S'std::vector<OutputName, std::allocator<OutputName> >'
p99258
sS'default'
p99259
g3
sS'name'
p99260
S'outputs'
p99261
sS'required'
p99262
I00
sS'group_name'
p99263
S'Advanced'
p99264
sa(dp99265
S'description'
p99266
S'EBSD phase number from which to retrieve information\n'
p99267
sS'cpp_type'
p99268
S'unsigned int'
p99269
sS'default'
p99270
g3
sS'name'
p99271
S'phase'
p99272
sS'required'
p99273
I00
sS'group_name'
p99274
Nsa(dp99275
S'description'
p99276
S'Indicates whether remapping should be done or not (default: true)\n'
p99277
sS'cpp_type'
p99278
S'bool'
p99279
sS'default'
p99280
S'1'
p99281
sS'name'
p99282
S'remap_grains'
p99283
sS'required'
p99284
I00
sS'group_name'
p99285
Nsa(dp99286
S'description'
p99287
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p99288
sS'cpp_type'
p99289
S'unsigned short'
p99290
sS'default'
p99291
S'0'
p99292
sS'name'
p99293
S'reserve_op'
p99294
sS'required'
p99295
I00
sS'group_name'
p99296
Nsa(dp99297
S'description'
p99298
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p99299
sS'cpp_type'
p99300
S'double'
p99301
sS'default'
p99302
S'0.95'
p99303
sS'name'
p99304
S'reserve_op_threshold'
p99305
sS'required'
p99306
I00
sS'group_name'
p99307
Nsa(dp99308
S'description'
p99309
S'The threshold value for which a new feature may be started\n'
p99310
sS'cpp_type'
p99311
S'double'
p99312
sS'default'
p99313
S'0.1'
p99314
sS'name'
p99315
S'threshold'
p99316
sS'required'
p99317
I00
sS'group_name'
p99318
Nsa(dp99319
S'description'
p99320
S'The timestep for when we should start tracking grains\n'
p99321
sS'cpp_type'
p99322
S'int'
p99323
sS'default'
p99324
S'0'
p99325
sS'name'
p99326
S'tracking_step'
p99327
sS'required'
p99328
I00
sS'group_name'
p99329
Nsa(dp99330
S'description'
p99331
g3
sS'cpp_type'
p99332
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99333
sS'default'
p99334
S'FauxGrainTracker'
p99335
sS'name'
p99336
S'type'
p99337
sS'required'
p99338
I00
sS'group_name'
p99339
Nsa(dp99340
S'description'
p99341
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99342
sS'cpp_type'
p99343
S'bool'
p99344
sS'default'
p99345
S'0'
p99346
sS'name'
p99347
S'use_displaced_mesh'
p99348
sS'required'
p99349
I00
sS'group_name'
p99350
S'Advanced'
p99351
sa(dp99352
S'description'
p99353
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p99354
sS'cpp_type'
p99355
S'bool'
p99356
sS'default'
p99357
S'1'
p99358
sS'name'
p99359
S'use_global_numbering'
p99360
sS'required'
p99361
I00
sS'group_name'
p99362
S'Advanced'
p99363
sa(dp99364
S'description'
p99365
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p99366
sS'cpp_type'
p99367
S'bool'
p99368
sS'default'
p99369
S'1'
p99370
sS'name'
p99371
S'use_less_than_threshold_comparison'
p99372
sS'required'
p99373
I00
sS'group_name'
p99374
Nsa(dp99375
S'description'
p99376
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p99377
sS'cpp_type'
p99378
S'bool'
p99379
sS'default'
p99380
S'0'
p99381
sS'name'
p99382
S'use_single_map'
p99383
sS'required'
p99384
I00
sS'group_name'
p99385
S'Advanced'
p99386
sa(dp99387
S'description'
p99388
S'Array of coupled variables (base_name)\n'
p99389
sS'cpp_type'
p99390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99391
sS'default'
p99392
g3
sS'name'
p99393
S'var_name_base'
p99394
sS'required'
p99395
I00
sS'group_name'
p99396
Nsa(dp99397
S'description'
p99398
S'Array of coupled variables\n'
p99399
sS'cpp_type'
p99400
S'std::vector<VariableName>'
p99401
sS'default'
p99402
g3
sS'name'
p99403
S'variable'
p99404
sS'required'
p99405
I01
sS'group_name'
p99406
NsasS'name'
p99407
S'/Postprocessors/FauxGrainTracker'
p99408
sa(dp99409
S'description'
p99410
g3
sS'subblocks'
p99411
NsS'parameters'
p99412
(lp99413
(dp99414
S'description'
p99415
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p99416
sS'cpp_type'
p99417
S'bool'
p99418
sS'default'
p99419
S'0'
p99420
sS'name'
p99421
S'compute_halo_maps'
p99422
sS'required'
p99423
I00
sS'group_name'
p99424
Nsa(dp99425
S'description'
p99426
S'Instruct the Postprocessor to compute the active vars to features map\n'
p99427
sS'cpp_type'
p99428
S'bool'
p99429
sS'default'
p99430
S'0'
p99431
sS'name'
p99432
S'compute_var_to_feature_map'
p99433
sS'required'
p99434
I00
sS'group_name'
p99435
Nsa(dp99436
S'description'
p99437
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p99438
sS'cpp_type'
p99439
S'bool'
p99440
sS'default'
p99441
S'0'
p99442
sS'name'
p99443
S'condense_map_info'
p99444
sS'required'
p99445
I00
sS'group_name'
p99446
S'Advanced'
p99447
sa(dp99448
S'description'
p99449
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p99450
sS'cpp_type'
p99451
S'double'
p99452
sS'default'
p99453
g3
sS'name'
p99454
S'connecting_threshold'
p99455
sS'required'
p99456
I00
sS'group_name'
p99457
Nsa(dp99458
S'description'
p99459
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99460
sS'cpp_type'
p99461
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99462
sS'default'
p99463
g3
sS'name'
p99464
S'control_tags'
p99465
sS'required'
p99466
I00
sS'group_name'
p99467
S'Advanced'
p99468
sa(dp99469
S'description'
p99470
S'Set the enabled status of the MooseObject.\n'
p99471
sS'cpp_type'
p99472
S'bool'
p99473
sS'default'
p99474
S'1'
p99475
sS'name'
p99476
S'enable'
p99477
sS'required'
p99478
I00
sS'group_name'
p99479
S'Advanced'
p99480
sa(dp99481
S'description'
p99482
S'Instruct the Postprocessor to populate the variable index map.\n'
p99483
sS'cpp_type'
p99484
S'bool'
p99485
sS'default'
p99486
S'0'
p99487
sS'name'
p99488
S'enable_var_coloring'
p99489
sS'required'
p99490
I00
sS'group_name'
p99491
Nsa(dp99492
S'name'
p99493
S'execute_on'
p99494
sS'cpp_type'
p99495
S'MultiMooseEnum'
p99496
sS'default'
p99497
S'TIMESTEP_END'
p99498
sS'description'
p99499
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99500
sS'required'
p99501
I00
sS'options'
p99502
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99503
sS'group_name'
p99504
Nsa(dp99505
S'name'
p99506
S'flood_entity_type'
p99507
sS'cpp_type'
p99508
S'MooseEnum'
p99509
sS'default'
p99510
S'ELEMENTAL'
p99511
sS'description'
p99512
S'Determines whether the flood algorithm runs on nodes or elements\n'
p99513
sS'required'
p99514
I00
sS'options'
p99515
S'NODAL ELEMENTAL'
p99516
sS'group_name'
p99517
Nsa(dp99518
S'description'
p99519
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99520
sS'cpp_type'
p99521
S'std::vector<OutputName, std::allocator<OutputName> >'
p99522
sS'default'
p99523
g3
sS'name'
p99524
S'outputs'
p99525
sS'required'
p99526
I00
sS'group_name'
p99527
S'Advanced'
p99528
sa(dp99529
S'description'
p99530
S'The threshold value for which a new feature may be started\n'
p99531
sS'cpp_type'
p99532
S'double'
p99533
sS'default'
p99534
S'0.5'
p99535
sS'name'
p99536
S'threshold'
p99537
sS'required'
p99538
I00
sS'group_name'
p99539
Nsa(dp99540
S'description'
p99541
g3
sS'cpp_type'
p99542
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99543
sS'default'
p99544
S'FeatureFloodCount'
p99545
sS'name'
p99546
S'type'
p99547
sS'required'
p99548
I00
sS'group_name'
p99549
Nsa(dp99550
S'description'
p99551
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99552
sS'cpp_type'
p99553
S'bool'
p99554
sS'default'
p99555
S'0'
p99556
sS'name'
p99557
S'use_displaced_mesh'
p99558
sS'required'
p99559
I00
sS'group_name'
p99560
S'Advanced'
p99561
sa(dp99562
S'description'
p99563
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p99564
sS'cpp_type'
p99565
S'bool'
p99566
sS'default'
p99567
S'1'
p99568
sS'name'
p99569
S'use_global_numbering'
p99570
sS'required'
p99571
I00
sS'group_name'
p99572
S'Advanced'
p99573
sa(dp99574
S'description'
p99575
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p99576
sS'cpp_type'
p99577
S'bool'
p99578
sS'default'
p99579
S'1'
p99580
sS'name'
p99581
S'use_less_than_threshold_comparison'
p99582
sS'required'
p99583
I00
sS'group_name'
p99584
Nsa(dp99585
S'description'
p99586
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p99587
sS'cpp_type'
p99588
S'bool'
p99589
sS'default'
p99590
S'1'
p99591
sS'name'
p99592
S'use_single_map'
p99593
sS'required'
p99594
I00
sS'group_name'
p99595
S'Advanced'
p99596
sa(dp99597
S'description'
p99598
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p99599
sS'cpp_type'
p99600
S'std::vector<VariableName>'
p99601
sS'default'
p99602
g3
sS'name'
p99603
S'variable'
p99604
sS'required'
p99605
I01
sS'group_name'
p99606
NsasS'name'
p99607
S'/Postprocessors/FeatureFloodCount'
p99608
sa(dp99609
S'description'
p99610
g3
sS'subblocks'
p99611
NsS'parameters'
p99612
(lp99613
(dp99614
S'description'
p99615
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99616
sS'cpp_type'
p99617
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99618
sS'default'
p99619
g3
sS'name'
p99620
S'control_tags'
p99621
sS'required'
p99622
I00
sS'group_name'
p99623
S'Advanced'
p99624
sa(dp99625
S'description'
p99626
S'Set the enabled status of the MooseObject.\n'
p99627
sS'cpp_type'
p99628
S'bool'
p99629
sS'default'
p99630
S'1'
p99631
sS'name'
p99632
S'enable'
p99633
sS'required'
p99634
I00
sS'group_name'
p99635
S'Advanced'
p99636
sa(dp99637
S'description'
p99638
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p99639
sS'cpp_type'
p99640
S'double'
p99641
sS'default'
p99642
S'-1'
p99643
sS'name'
p99644
S'equil_fraction'
p99645
sS'required'
p99646
I00
sS'group_name'
p99647
Nsa(dp99648
S'name'
p99649
S'execute_on'
p99650
sS'cpp_type'
p99651
S'MultiMooseEnum'
p99652
sS'default'
p99653
S'TIMESTEP_END'
p99654
sS'description'
p99655
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99656
sS'required'
p99657
I00
sS'options'
p99658
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99659
sS'group_name'
p99660
Nsa(dp99661
S'description'
p99662
S'The feature volume VectorPostprocessorValue.\n'
p99663
sS'cpp_type'
p99664
S'VectorPostprocessorName'
p99665
sS'default'
p99666
g3
sS'name'
p99667
S'feature_volumes'
p99668
sS'required'
p99669
I01
sS'group_name'
p99670
Nsa(dp99671
S'description'
p99672
S'Postprocessor from which to get mesh volume\n'
p99673
sS'cpp_type'
p99674
S'PostprocessorName'
p99675
sS'default'
p99676
g3
sS'name'
p99677
S'mesh_volume'
p99678
sS'required'
p99679
I01
sS'group_name'
p99680
Nsa(dp99681
S'description'
p99682
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99683
sS'cpp_type'
p99684
S'std::vector<OutputName, std::allocator<OutputName> >'
p99685
sS'default'
p99686
g3
sS'name'
p99687
S'outputs'
p99688
sS'required'
p99689
I00
sS'group_name'
p99690
S'Advanced'
p99691
sa(dp99692
S'description'
p99693
g3
sS'cpp_type'
p99694
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99695
sS'default'
p99696
S'FeatureVolumeFraction'
p99697
sS'name'
p99698
S'type'
p99699
sS'required'
p99700
I00
sS'group_name'
p99701
Nsa(dp99702
S'description'
p99703
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99704
sS'cpp_type'
p99705
S'bool'
p99706
sS'default'
p99707
S'0'
p99708
sS'name'
p99709
S'use_displaced_mesh'
p99710
sS'required'
p99711
I00
sS'group_name'
p99712
S'Advanced'
p99713
sa(dp99714
S'name'
p99715
S'value_type'
p99716
sS'cpp_type'
p99717
S'MooseEnum'
p99718
sS'default'
p99719
S'VOLUME_FRACTION'
p99720
sS'description'
p99721
S'The value to output (VOLUME_FRACTION or AVRAMI value)\n'
p99722
sS'required'
p99723
I00
sS'options'
p99724
S'VOLUME_FRACTION AVRAMI'
p99725
sS'group_name'
p99726
NsasS'name'
p99727
S'/Postprocessors/FeatureVolumeFraction'
p99728
sa(dp99729
S'description'
p99730
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p99731
sS'subblocks'
p99732
NsS'parameters'
p99733
(lp99734
(dp99735
S'description'
p99736
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99737
sS'cpp_type'
p99738
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99739
sS'default'
p99740
g3
sS'name'
p99741
S'control_tags'
p99742
sS'required'
p99743
I00
sS'group_name'
p99744
S'Advanced'
p99745
sa(dp99746
S'description'
p99747
S'Maximum number of bisections to perform.\n'
p99748
sS'cpp_type'
p99749
S'unsigned int'
p99750
sS'default'
p99751
S'36'
p99752
sS'name'
p99753
S'depth'
p99754
sS'required'
p99755
I00
sS'group_name'
p99756
Nsa(dp99757
S'description'
p99758
S'Set the enabled status of the MooseObject.\n'
p99759
sS'cpp_type'
p99760
S'bool'
p99761
sS'default'
p99762
S'1'
p99763
sS'name'
p99764
S'enable'
p99765
sS'required'
p99766
I00
sS'group_name'
p99767
S'Advanced'
p99768
sa(dp99769
S'description'
p99770
S'End point of the sampling line.\n'
p99771
sS'cpp_type'
p99772
S'libMesh::Point'
p99773
sS'default'
p99774
g3
sS'name'
p99775
S'end_point'
p99776
sS'required'
p99777
I00
sS'group_name'
p99778
Nsa(dp99779
S'name'
p99780
S'execute_on'
p99781
sS'cpp_type'
p99782
S'MultiMooseEnum'
p99783
sS'default'
p99784
S'TIMESTEP_END'
p99785
sS'description'
p99786
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99787
sS'required'
p99788
I00
sS'options'
p99789
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99790
sS'group_name'
p99791
Nsa(dp99792
S'description'
p99793
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99794
sS'cpp_type'
p99795
S'std::vector<OutputName, std::allocator<OutputName> >'
p99796
sS'default'
p99797
g3
sS'name'
p99798
S'outputs'
p99799
sS'required'
p99800
I00
sS'group_name'
p99801
S'Advanced'
p99802
sa(dp99803
S'description'
p99804
S'Start point of the sampling line.\n'
p99805
sS'cpp_type'
p99806
S'libMesh::Point'
p99807
sS'default'
p99808
g3
sS'name'
p99809
S'start_point'
p99810
sS'required'
p99811
I00
sS'group_name'
p99812
Nsa(dp99813
S'description'
p99814
S'Target value to locate.\n'
p99815
sS'cpp_type'
p99816
S'double'
p99817
sS'default'
p99818
g3
sS'name'
p99819
S'target'
p99820
sS'required'
p99821
I00
sS'group_name'
p99822
Nsa(dp99823
S'description'
p99824
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p99825
sS'cpp_type'
p99826
S'double'
p99827
sS'default'
p99828
S'1e-10'
p99829
sS'name'
p99830
S'tol'
p99831
sS'required'
p99832
I00
sS'group_name'
p99833
Nsa(dp99834
S'description'
p99835
g3
sS'cpp_type'
p99836
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99837
sS'default'
p99838
S'FindValueOnLine'
p99839
sS'name'
p99840
S'type'
p99841
sS'required'
p99842
I00
sS'group_name'
p99843
Nsa(dp99844
S'description'
p99845
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99846
sS'cpp_type'
p99847
S'bool'
p99848
sS'default'
p99849
S'0'
p99850
sS'name'
p99851
S'use_displaced_mesh'
p99852
sS'required'
p99853
I00
sS'group_name'
p99854
S'Advanced'
p99855
sa(dp99856
S'description'
p99857
S'Variable to inspect\n'
p99858
sS'cpp_type'
p99859
S'std::vector<VariableName>'
p99860
sS'default'
p99861
g3
sS'name'
p99862
S'v'
p99863
sS'required'
p99864
I00
sS'group_name'
p99865
NsasS'name'
p99866
S'/Postprocessors/FindValueOnLine'
p99867
sa(dp99868
S'description'
p99869
g3
sS'subblocks'
p99870
NsS'parameters'
p99871
(lp99872
(dp99873
S'description'
p99874
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p99875
sS'cpp_type'
p99876
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p99877
sS'default'
p99878
g3
sS'name'
p99879
S'boundary'
p99880
sS'required'
p99881
I01
sS'group_name'
p99882
Nsa(dp99883
S'description'
p99884
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99885
sS'cpp_type'
p99886
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99887
sS'default'
p99888
g3
sS'name'
p99889
S'control_tags'
p99890
sS'required'
p99891
I00
sS'group_name'
p99892
S'Advanced'
p99893
sa(dp99894
S'description'
p99895
S'Set the enabled status of the MooseObject.\n'
p99896
sS'cpp_type'
p99897
S'bool'
p99898
sS'default'
p99899
S'1'
p99900
sS'name'
p99901
S'enable'
p99902
sS'required'
p99903
I00
sS'group_name'
p99904
S'Advanced'
p99905
sa(dp99906
S'name'
p99907
S'execute_on'
p99908
sS'cpp_type'
p99909
S'MultiMooseEnum'
p99910
sS'default'
p99911
S'TIMESTEP_END'
p99912
sS'description'
p99913
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99914
sS'required'
p99915
I00
sS'options'
p99916
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99917
sS'group_name'
p99918
Nsa(dp99919
S'description'
p99920
S'This postprocessor will return the integral of this function over the boundary\n'
p99921
sS'cpp_type'
p99922
S'FunctionName'
p99923
sS'default'
p99924
S'1'
p99925
sS'name'
p99926
S'function'
p99927
sS'required'
p99928
I00
sS'group_name'
p99929
Nsa(dp99930
S'description'
p99931
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99932
sS'cpp_type'
p99933
S'std::vector<OutputName, std::allocator<OutputName> >'
p99934
sS'default'
p99935
g3
sS'name'
p99936
S'outputs'
p99937
sS'required'
p99938
I00
sS'group_name'
p99939
S'Advanced'
p99940
sa(dp99941
S'description'
p99942
g3
sS'cpp_type'
p99943
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99944
sS'default'
p99945
S'FunctionSideIntegral'
p99946
sS'name'
p99947
S'type'
p99948
sS'required'
p99949
I00
sS'group_name'
p99950
Nsa(dp99951
S'description'
p99952
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99953
sS'cpp_type'
p99954
S'bool'
p99955
sS'default'
p99956
S'0'
p99957
sS'name'
p99958
S'use_displaced_mesh'
p99959
sS'required'
p99960
I00
sS'group_name'
p99961
S'Advanced'
p99962
sasS'name'
p99963
S'/Postprocessors/FunctionSideIntegral'
p99964
sa(dp99965
S'description'
p99966
g3
sS'subblocks'
p99967
NsS'parameters'
p99968
(lp99969
(dp99970
S'description'
p99971
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99972
sS'cpp_type'
p99973
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99974
sS'default'
p99975
g3
sS'name'
p99976
S'control_tags'
p99977
sS'required'
p99978
I00
sS'group_name'
p99979
S'Advanced'
p99980
sa(dp99981
S'description'
p99982
S'Set the enabled status of the MooseObject.\n'
p99983
sS'cpp_type'
p99984
S'bool'
p99985
sS'default'
p99986
S'1'
p99987
sS'name'
p99988
S'enable'
p99989
sS'required'
p99990
I00
sS'group_name'
p99991
S'Advanced'
p99992
sa(dp99993
S'name'
p99994
S'execute_on'
p99995
sS'cpp_type'
p99996
S'MultiMooseEnum'
p99997
sS'default'
p99998
S'TIMESTEP_END'
p99999
sS'description'
p100000
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100001
sS'required'
p100002
I00
sS'options'
p100003
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100004
sS'group_name'
p100005
Nsa(dp100006
S'description'
p100007
S'The function which supplies the postprocessor value.\n'
p100008
sS'cpp_type'
p100009
S'FunctionName'
p100010
sS'default'
p100011
g3
sS'name'
p100012
S'function'
p100013
sS'required'
p100014
I01
sS'group_name'
p100015
Nsa(dp100016
S'description'
p100017
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100018
sS'cpp_type'
p100019
S'std::vector<OutputName, std::allocator<OutputName> >'
p100020
sS'default'
p100021
g3
sS'name'
p100022
S'outputs'
p100023
sS'required'
p100024
I00
sS'group_name'
p100025
S'Advanced'
p100026
sa(dp100027
S'description'
p100028
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p100029
sS'cpp_type'
p100030
S'libMesh::Point'
p100031
sS'default'
p100032
S'0 0 0'
p100033
sS'name'
p100034
S'point'
p100035
sS'required'
p100036
I00
sS'group_name'
p100037
Nsa(dp100038
S'description'
p100039
S'A scale factor to be applied to the function\n'
p100040
sS'cpp_type'
p100041
S'double'
p100042
sS'default'
p100043
S'1'
p100044
sS'name'
p100045
S'scale_factor'
p100046
sS'required'
p100047
I00
sS'group_name'
p100048
Nsa(dp100049
S'description'
p100050
g3
sS'cpp_type'
p100051
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100052
sS'default'
p100053
S'FunctionValuePostprocessor'
p100054
sS'name'
p100055
S'type'
p100056
sS'required'
p100057
I00
sS'group_name'
p100058
Nsa(dp100059
S'description'
p100060
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100061
sS'cpp_type'
p100062
S'bool'
p100063
sS'default'
p100064
S'0'
p100065
sS'name'
p100066
S'use_displaced_mesh'
p100067
sS'required'
p100068
I00
sS'group_name'
p100069
S'Advanced'
p100070
sasS'name'
p100071
S'/Postprocessors/FunctionValuePostprocessor'
p100072
sa(dp100073
S'description'
p100074
S'Calculate total grain boundary length in 2D and area in 3D\n'
p100075
sS'subblocks'
p100076
NsS'parameters'
p100077
(lp100078
(dp100079
S'description'
p100080
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100081
sS'cpp_type'
p100082
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100083
sS'default'
p100084
g3
sS'name'
p100085
S'block'
p100086
sS'required'
p100087
I00
sS'group_name'
p100088
Nsa(dp100089
S'description'
p100090
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100091
sS'cpp_type'
p100092
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100093
sS'default'
p100094
g3
sS'name'
p100095
S'control_tags'
p100096
sS'required'
p100097
I00
sS'group_name'
p100098
S'Advanced'
p100099
sa(dp100100
S'description'
p100101
S'Set the enabled status of the MooseObject.\n'
p100102
sS'cpp_type'
p100103
S'bool'
p100104
sS'default'
p100105
S'1'
p100106
sS'name'
p100107
S'enable'
p100108
sS'required'
p100109
I00
sS'group_name'
p100110
S'Advanced'
p100111
sa(dp100112
S'name'
p100113
S'execute_on'
p100114
sS'cpp_type'
p100115
S'MultiMooseEnum'
p100116
sS'default'
p100117
S'TIMESTEP_END'
p100118
sS'description'
p100119
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100120
sS'required'
p100121
I00
sS'options'
p100122
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100123
sS'group_name'
p100124
Nsa(dp100125
S'description'
p100126
S'Number of order parameters contacting a boundary (should be 2.0 in polycrystals and 1.0 for dispersed particles)\n'
p100127
sS'cpp_type'
p100128
S'double'
p100129
sS'default'
p100130
S'2'
p100131
sS'name'
p100132
S'grains_per_side'
p100133
sS'required'
p100134
I00
sS'group_name'
p100135
Nsa(dp100136
S'description'
p100137
S'Array of coupled variables (num_name)\n'
p100138
sS'cpp_type'
p100139
S'unsigned int'
p100140
sS'default'
p100141
g3
sS'name'
p100142
S'op_num'
p100143
sS'required'
p100144
I00
sS'group_name'
p100145
Nsa(dp100146
S'description'
p100147
S'Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n'
p100148
sS'cpp_type'
p100149
S'double'
p100150
sS'default'
p100151
S'1'
p100152
sS'name'
p100153
S'op_range'
p100154
sS'required'
p100155
I00
sS'group_name'
p100156
Nsa(dp100157
S'description'
p100158
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100159
sS'cpp_type'
p100160
S'std::vector<OutputName, std::allocator<OutputName> >'
p100161
sS'default'
p100162
g3
sS'name'
p100163
S'outputs'
p100164
sS'required'
p100165
I00
sS'group_name'
p100166
S'Advanced'
p100167
sa(dp100168
S'description'
p100169
S'The seed for the master random number generator\n'
p100170
sS'cpp_type'
p100171
S'unsigned int'
p100172
sS'default'
p100173
S'0'
p100174
sS'name'
p100175
S'seed'
p100176
sS'required'
p100177
I00
sS'group_name'
p100178
S'Advanced'
p100179
sa(dp100180
S'description'
p100181
g3
sS'cpp_type'
p100182
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100183
sS'default'
p100184
S'GrainBoundaryArea'
p100185
sS'name'
p100186
S'type'
p100187
sS'required'
p100188
I00
sS'group_name'
p100189
Nsa(dp100190
S'description'
p100191
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100192
sS'cpp_type'
p100193
S'bool'
p100194
sS'default'
p100195
S'0'
p100196
sS'name'
p100197
S'use_displaced_mesh'
p100198
sS'required'
p100199
I00
sS'group_name'
p100200
S'Advanced'
p100201
sa(dp100202
S'description'
p100203
S'Array of coupled variables\n'
p100204
sS'cpp_type'
p100205
S'std::vector<VariableName>'
p100206
sS'default'
p100207
g3
sS'name'
p100208
S'v'
p100209
sS'required'
p100210
I01
sS'group_name'
p100211
Nsa(dp100212
S'description'
p100213
S'Array of coupled variables (base_name)\n'
p100214
sS'cpp_type'
p100215
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100216
sS'default'
p100217
g3
sS'name'
p100218
S'var_name_base'
p100219
sS'required'
p100220
I00
sS'group_name'
p100221
NsasS'name'
p100222
S'/Postprocessors/GrainBoundaryArea'
p100223
sa(dp100224
S'description'
p100225
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p100226
sS'subblocks'
p100227
NsS'parameters'
p100228
(lp100229
(dp100230
S'description'
p100231
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p100232
sS'cpp_type'
p100233
S'bool'
p100234
sS'default'
p100235
S'0'
p100236
sS'name'
p100237
S'compute_halo_maps'
p100238
sS'required'
p100239
I00
sS'group_name'
p100240
Nsa(dp100241
S'description'
p100242
S'Instruct the Postprocessor to compute the active vars to features map\n'
p100243
sS'cpp_type'
p100244
S'bool'
p100245
sS'default'
p100246
S'0'
p100247
sS'name'
p100248
S'compute_var_to_feature_map'
p100249
sS'required'
p100250
I00
sS'group_name'
p100251
Nsa(dp100252
S'description'
p100253
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p100254
sS'cpp_type'
p100255
S'bool'
p100256
sS'default'
p100257
S'1'
p100258
sS'name'
p100259
S'condense_map_info'
p100260
sS'required'
p100261
I00
sS'group_name'
p100262
S'Advanced'
p100263
sa(dp100264
S'description'
p100265
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p100266
sS'cpp_type'
p100267
S'double'
p100268
sS'default'
p100269
S'0.09'
p100270
sS'name'
p100271
S'connecting_threshold'
p100272
sS'required'
p100273
I00
sS'group_name'
p100274
Nsa(dp100275
S'description'
p100276
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100277
sS'cpp_type'
p100278
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100279
sS'default'
p100280
g3
sS'name'
p100281
S'control_tags'
p100282
sS'required'
p100283
I00
sS'group_name'
p100284
S'Advanced'
p100285
sa(dp100286
S'description'
p100287
S'Optional: EBSD Reader for initial condition\n'
p100288
sS'cpp_type'
p100289
S'UserObjectName'
p100290
sS'default'
p100291
g3
sS'name'
p100292
S'ebsd_reader'
p100293
sS'required'
p100294
I00
sS'group_name'
p100295
Nsa(dp100296
S'description'
p100297
S'Set the enabled status of the MooseObject.\n'
p100298
sS'cpp_type'
p100299
S'bool'
p100300
sS'default'
p100301
S'1'
p100302
sS'name'
p100303
S'enable'
p100304
sS'required'
p100305
I00
sS'group_name'
p100306
S'Advanced'
p100307
sa(dp100308
S'description'
p100309
S'Instruct the Postprocessor to populate the variable index map.\n'
p100310
sS'cpp_type'
p100311
S'bool'
p100312
sS'default'
p100313
S'1'
p100314
sS'name'
p100315
S'enable_var_coloring'
p100316
sS'required'
p100317
I00
sS'group_name'
p100318
Nsa(dp100319
S'description'
p100320
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p100321
sS'cpp_type'
p100322
S'bool'
p100323
sS'default'
p100324
S'0'
p100325
sS'name'
p100326
S'error_on_grain_creation'
p100327
sS'required'
p100328
I00
sS'group_name'
p100329
Nsa(dp100330
S'name'
p100331
S'execute_on'
p100332
sS'cpp_type'
p100333
S'MultiMooseEnum'
p100334
sS'default'
p100335
S'INITIAL TIMESTEP_END'
p100336
sS'description'
p100337
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100338
sS'required'
p100339
I00
sS'options'
p100340
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100341
sS'group_name'
p100342
Nsa(dp100343
S'name'
p100344
S'flood_entity_type'
p100345
sS'cpp_type'
p100346
S'MooseEnum'
p100347
sS'default'
p100348
S'ELEMENTAL'
p100349
sS'description'
p100350
S'Determines whether the flood algorithm runs on nodes or elements\n'
p100351
sS'required'
p100352
I00
sS'options'
p100353
S'NODAL ELEMENTAL'
p100354
sS'group_name'
p100355
Nsa(dp100356
S'description'
p100357
S'The thickness of the halo surrounding each feature.\n'
p100358
sS'cpp_type'
p100359
S'unsigned int'
p100360
sS'default'
p100361
S'2'
p100362
sS'name'
p100363
S'halo_level'
p100364
sS'required'
p100365
I00
sS'group_name'
p100366
Nsa(dp100367
S'description'
p100368
S'Array of coupled variables (num_name)\n'
p100369
sS'cpp_type'
p100370
S'unsigned int'
p100371
sS'default'
p100372
g3
sS'name'
p100373
S'op_num'
p100374
sS'required'
p100375
I00
sS'group_name'
p100376
Nsa(dp100377
S'description'
p100378
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100379
sS'cpp_type'
p100380
S'std::vector<OutputName, std::allocator<OutputName> >'
p100381
sS'default'
p100382
g3
sS'name'
p100383
S'outputs'
p100384
sS'required'
p100385
I00
sS'group_name'
p100386
S'Advanced'
p100387
sa(dp100388
S'description'
p100389
S'EBSD phase number from which to retrieve information\n'
p100390
sS'cpp_type'
p100391
S'unsigned int'
p100392
sS'default'
p100393
g3
sS'name'
p100394
S'phase'
p100395
sS'required'
p100396
I00
sS'group_name'
p100397
Nsa(dp100398
S'description'
p100399
S'Indicates whether remapping should be done or not (default: true)\n'
p100400
sS'cpp_type'
p100401
S'bool'
p100402
sS'default'
p100403
S'1'
p100404
sS'name'
p100405
S'remap_grains'
p100406
sS'required'
p100407
I00
sS'group_name'
p100408
Nsa(dp100409
S'description'
p100410
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p100411
sS'cpp_type'
p100412
S'unsigned short'
p100413
sS'default'
p100414
S'0'
p100415
sS'name'
p100416
S'reserve_op'
p100417
sS'required'
p100418
I00
sS'group_name'
p100419
Nsa(dp100420
S'description'
p100421
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p100422
sS'cpp_type'
p100423
S'double'
p100424
sS'default'
p100425
S'0.95'
p100426
sS'name'
p100427
S'reserve_op_threshold'
p100428
sS'required'
p100429
I00
sS'group_name'
p100430
Nsa(dp100431
S'description'
p100432
S'The threshold value for which a new feature may be started\n'
p100433
sS'cpp_type'
p100434
S'double'
p100435
sS'default'
p100436
S'0.1'
p100437
sS'name'
p100438
S'threshold'
p100439
sS'required'
p100440
I00
sS'group_name'
p100441
Nsa(dp100442
S'description'
p100443
S'The timestep for when we should start tracking grains\n'
p100444
sS'cpp_type'
p100445
S'int'
p100446
sS'default'
p100447
S'0'
p100448
sS'name'
p100449
S'tracking_step'
p100450
sS'required'
p100451
I00
sS'group_name'
p100452
Nsa(dp100453
S'description'
p100454
g3
sS'cpp_type'
p100455
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100456
sS'default'
p100457
S'GrainTracker'
p100458
sS'name'
p100459
S'type'
p100460
sS'required'
p100461
I00
sS'group_name'
p100462
Nsa(dp100463
S'description'
p100464
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100465
sS'cpp_type'
p100466
S'bool'
p100467
sS'default'
p100468
S'0'
p100469
sS'name'
p100470
S'use_displaced_mesh'
p100471
sS'required'
p100472
I00
sS'group_name'
p100473
S'Advanced'
p100474
sa(dp100475
S'description'
p100476
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p100477
sS'cpp_type'
p100478
S'bool'
p100479
sS'default'
p100480
S'1'
p100481
sS'name'
p100482
S'use_global_numbering'
p100483
sS'required'
p100484
I00
sS'group_name'
p100485
S'Advanced'
p100486
sa(dp100487
S'description'
p100488
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p100489
sS'cpp_type'
p100490
S'bool'
p100491
sS'default'
p100492
S'1'
p100493
sS'name'
p100494
S'use_less_than_threshold_comparison'
p100495
sS'required'
p100496
I00
sS'group_name'
p100497
Nsa(dp100498
S'description'
p100499
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p100500
sS'cpp_type'
p100501
S'bool'
p100502
sS'default'
p100503
S'0'
p100504
sS'name'
p100505
S'use_single_map'
p100506
sS'required'
p100507
I00
sS'group_name'
p100508
S'Advanced'
p100509
sa(dp100510
S'description'
p100511
S'Array of coupled variables (base_name)\n'
p100512
sS'cpp_type'
p100513
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100514
sS'default'
p100515
g3
sS'name'
p100516
S'var_name_base'
p100517
sS'required'
p100518
I00
sS'group_name'
p100519
Nsa(dp100520
S'description'
p100521
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p100522
sS'cpp_type'
p100523
S'std::vector<VariableName>'
p100524
sS'default'
p100525
g3
sS'name'
p100526
S'variable'
p100527
sS'required'
p100528
I01
sS'group_name'
p100529
NsasS'name'
p100530
S'/Postprocessors/GrainTracker'
p100531
sa(dp100532
S'description'
p100533
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p100534
sS'subblocks'
p100535
NsS'parameters'
p100536
(lp100537
(dp100538
S'description'
p100539
S'Unrotated stiffness tensor\n'
p100540
sS'cpp_type'
p100541
S'std::vector<double, std::allocator<double> >'
p100542
sS'default'
p100543
g3
sS'name'
p100544
S'C_ijkl'
p100545
sS'required'
p100546
I01
sS'group_name'
p100547
Nsa(dp100548
S'description'
p100549
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p100550
sS'cpp_type'
p100551
S'bool'
p100552
sS'default'
p100553
S'0'
p100554
sS'name'
p100555
S'compute_halo_maps'
p100556
sS'required'
p100557
I00
sS'group_name'
p100558
Nsa(dp100559
S'description'
p100560
S'Instruct the Postprocessor to compute the active vars to features map\n'
p100561
sS'cpp_type'
p100562
S'bool'
p100563
sS'default'
p100564
S'0'
p100565
sS'name'
p100566
S'compute_var_to_feature_map'
p100567
sS'required'
p100568
I00
sS'group_name'
p100569
Nsa(dp100570
S'description'
p100571
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p100572
sS'cpp_type'
p100573
S'bool'
p100574
sS'default'
p100575
S'1'
p100576
sS'name'
p100577
S'condense_map_info'
p100578
sS'required'
p100579
I00
sS'group_name'
p100580
S'Advanced'
p100581
sa(dp100582
S'description'
p100583
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p100584
sS'cpp_type'
p100585
S'double'
p100586
sS'default'
p100587
S'0.09'
p100588
sS'name'
p100589
S'connecting_threshold'
p100590
sS'required'
p100591
I00
sS'group_name'
p100592
Nsa(dp100593
S'description'
p100594
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100595
sS'cpp_type'
p100596
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100597
sS'default'
p100598
g3
sS'name'
p100599
S'control_tags'
p100600
sS'required'
p100601
I00
sS'group_name'
p100602
S'Advanced'
p100603
sa(dp100604
S'description'
p100605
S'Optional: EBSD Reader for initial condition\n'
p100606
sS'cpp_type'
p100607
S'UserObjectName'
p100608
sS'default'
p100609
g3
sS'name'
p100610
S'ebsd_reader'
p100611
sS'required'
p100612
I00
sS'group_name'
p100613
Nsa(dp100614
S'description'
p100615
S'Set the enabled status of the MooseObject.\n'
p100616
sS'cpp_type'
p100617
S'bool'
p100618
sS'default'
p100619
S'1'
p100620
sS'name'
p100621
S'enable'
p100622
sS'required'
p100623
I00
sS'group_name'
p100624
S'Advanced'
p100625
sa(dp100626
S'description'
p100627
S'Instruct the Postprocessor to populate the variable index map.\n'
p100628
sS'cpp_type'
p100629
S'bool'
p100630
sS'default'
p100631
S'1'
p100632
sS'name'
p100633
S'enable_var_coloring'
p100634
sS'required'
p100635
I00
sS'group_name'
p100636
Nsa(dp100637
S'description'
p100638
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p100639
sS'cpp_type'
p100640
S'bool'
p100641
sS'default'
p100642
S'0'
p100643
sS'name'
p100644
S'error_on_grain_creation'
p100645
sS'required'
p100646
I00
sS'group_name'
p100647
Nsa(dp100648
S'description'
p100649
S'Name of Euler angle provider user object\n'
p100650
sS'cpp_type'
p100651
S'UserObjectName'
p100652
sS'default'
p100653
g3
sS'name'
p100654
S'euler_angle_provider'
p100655
sS'required'
p100656
I01
sS'group_name'
p100657
Nsa(dp100658
S'name'
p100659
S'execute_on'
p100660
sS'cpp_type'
p100661
S'MultiMooseEnum'
p100662
sS'default'
p100663
S'INITIAL TIMESTEP_END'
p100664
sS'description'
p100665
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100666
sS'required'
p100667
I00
sS'options'
p100668
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100669
sS'group_name'
p100670
Nsa(dp100671
S'name'
p100672
S'fill_method'
p100673
sS'cpp_type'
p100674
S'MooseEnum'
p100675
sS'default'
p100676
S'symmetric9'
p100677
sS'description'
p100678
S'The fill method\n'
p100679
sS'required'
p100680
I00
sS'options'
p100681
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p100682
sS'group_name'
p100683
Nsa(dp100684
S'name'
p100685
S'flood_entity_type'
p100686
sS'cpp_type'
p100687
S'MooseEnum'
p100688
sS'default'
p100689
S'ELEMENTAL'
p100690
sS'description'
p100691
S'Determines whether the flood algorithm runs on nodes or elements\n'
p100692
sS'required'
p100693
I00
sS'options'
p100694
S'NODAL ELEMENTAL'
p100695
sS'group_name'
p100696
Nsa(dp100697
S'description'
p100698
S'The thickness of the halo surrounding each feature.\n'
p100699
sS'cpp_type'
p100700
S'unsigned int'
p100701
sS'default'
p100702
S'2'
p100703
sS'name'
p100704
S'halo_level'
p100705
sS'required'
p100706
I00
sS'group_name'
p100707
Nsa(dp100708
S'description'
p100709
S'Array of coupled variables (num_name)\n'
p100710
sS'cpp_type'
p100711
S'unsigned int'
p100712
sS'default'
p100713
g3
sS'name'
p100714
S'op_num'
p100715
sS'required'
p100716
I00
sS'group_name'
p100717
Nsa(dp100718
S'description'
p100719
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100720
sS'cpp_type'
p100721
S'std::vector<OutputName, std::allocator<OutputName> >'
p100722
sS'default'
p100723
g3
sS'name'
p100724
S'outputs'
p100725
sS'required'
p100726
I00
sS'group_name'
p100727
S'Advanced'
p100728
sa(dp100729
S'description'
p100730
S'EBSD phase number from which to retrieve information\n'
p100731
sS'cpp_type'
p100732
S'unsigned int'
p100733
sS'default'
p100734
g3
sS'name'
p100735
S'phase'
p100736
sS'required'
p100737
I00
sS'group_name'
p100738
Nsa(dp100739
S'description'
p100740
S'Generate random rotations when the Euler Angle provider runs out of data (otherwise error out)\n'
p100741
sS'cpp_type'
p100742
S'bool'
p100743
sS'default'
p100744
S'1'
p100745
sS'name'
p100746
S'random_rotations'
p100747
sS'required'
p100748
I00
sS'group_name'
p100749
Nsa(dp100750
S'description'
p100751
S'Indicates whether remapping should be done or not (default: true)\n'
p100752
sS'cpp_type'
p100753
S'bool'
p100754
sS'default'
p100755
S'1'
p100756
sS'name'
p100757
S'remap_grains'
p100758
sS'required'
p100759
I00
sS'group_name'
p100760
Nsa(dp100761
S'description'
p100762
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p100763
sS'cpp_type'
p100764
S'unsigned short'
p100765
sS'default'
p100766
S'0'
p100767
sS'name'
p100768
S'reserve_op'
p100769
sS'required'
p100770
I00
sS'group_name'
p100771
Nsa(dp100772
S'description'
p100773
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p100774
sS'cpp_type'
p100775
S'double'
p100776
sS'default'
p100777
S'0.95'
p100778
sS'name'
p100779
S'reserve_op_threshold'
p100780
sS'required'
p100781
I00
sS'group_name'
p100782
Nsa(dp100783
S'description'
p100784
S'The threshold value for which a new feature may be started\n'
p100785
sS'cpp_type'
p100786
S'double'
p100787
sS'default'
p100788
S'0.1'
p100789
sS'name'
p100790
S'threshold'
p100791
sS'required'
p100792
I00
sS'group_name'
p100793
Nsa(dp100794
S'description'
p100795
S'The timestep for when we should start tracking grains\n'
p100796
sS'cpp_type'
p100797
S'int'
p100798
sS'default'
p100799
S'0'
p100800
sS'name'
p100801
S'tracking_step'
p100802
sS'required'
p100803
I00
sS'group_name'
p100804
Nsa(dp100805
S'description'
p100806
g3
sS'cpp_type'
p100807
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100808
sS'default'
p100809
S'GrainTrackerElasticity'
p100810
sS'name'
p100811
S'type'
p100812
sS'required'
p100813
I00
sS'group_name'
p100814
Nsa(dp100815
S'description'
p100816
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100817
sS'cpp_type'
p100818
S'bool'
p100819
sS'default'
p100820
S'0'
p100821
sS'name'
p100822
S'use_displaced_mesh'
p100823
sS'required'
p100824
I00
sS'group_name'
p100825
S'Advanced'
p100826
sa(dp100827
S'description'
p100828
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p100829
sS'cpp_type'
p100830
S'bool'
p100831
sS'default'
p100832
S'1'
p100833
sS'name'
p100834
S'use_global_numbering'
p100835
sS'required'
p100836
I00
sS'group_name'
p100837
S'Advanced'
p100838
sa(dp100839
S'description'
p100840
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p100841
sS'cpp_type'
p100842
S'bool'
p100843
sS'default'
p100844
S'1'
p100845
sS'name'
p100846
S'use_less_than_threshold_comparison'
p100847
sS'required'
p100848
I00
sS'group_name'
p100849
Nsa(dp100850
S'description'
p100851
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p100852
sS'cpp_type'
p100853
S'bool'
p100854
sS'default'
p100855
S'0'
p100856
sS'name'
p100857
S'use_single_map'
p100858
sS'required'
p100859
I00
sS'group_name'
p100860
S'Advanced'
p100861
sa(dp100862
S'description'
p100863
S'Array of coupled variables (base_name)\n'
p100864
sS'cpp_type'
p100865
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100866
sS'default'
p100867
g3
sS'name'
p100868
S'var_name_base'
p100869
sS'required'
p100870
I00
sS'group_name'
p100871
Nsa(dp100872
S'description'
p100873
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p100874
sS'cpp_type'
p100875
S'std::vector<VariableName>'
p100876
sS'default'
p100877
g3
sS'name'
p100878
S'variable'
p100879
sS'required'
p100880
I01
sS'group_name'
p100881
NsasS'name'
p100882
S'/Postprocessors/GrainTrackerElasticity'
p100883
sa(dp100884
S'description'
p100885
g3
sS'subblocks'
p100886
NsS'parameters'
p100887
(lp100888
(dp100889
S'description'
p100890
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100891
sS'cpp_type'
p100892
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100893
sS'default'
p100894
g3
sS'name'
p100895
S'block'
p100896
sS'required'
p100897
I00
sS'group_name'
p100898
Nsa(dp100899
S'description'
p100900
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p100901
sS'cpp_type'
p100902
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p100903
sS'default'
p100904
g3
sS'name'
p100905
S'boundary'
p100906
sS'required'
p100907
I00
sS'group_name'
p100908
Nsa(dp100909
S'description'
p100910
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100911
sS'cpp_type'
p100912
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100913
sS'default'
p100914
g3
sS'name'
p100915
S'control_tags'
p100916
sS'required'
p100917
I00
sS'group_name'
p100918
S'Advanced'
p100919
sa(dp100920
S'description'
p100921
S'Set the enabled status of the MooseObject.\n'
p100922
sS'cpp_type'
p100923
S'bool'
p100924
sS'default'
p100925
S'1'
p100926
sS'name'
p100927
S'enable'
p100928
sS'required'
p100929
I00
sS'group_name'
p100930
S'Advanced'
p100931
sa(dp100932
S'description'
p100933
S'Array containing the rest of the order parameters\n'
p100934
sS'cpp_type'
p100935
S'std::vector<VariableName>'
p100936
sS'default'
p100937
g3
sS'name'
p100938
S'eta'
p100939
sS'required'
p100940
I01
sS'group_name'
p100941
Nsa(dp100942
S'name'
p100943
S'execute_on'
p100944
sS'cpp_type'
p100945
S'MultiMooseEnum'
p100946
sS'default'
p100947
S'TIMESTEP_END'
p100948
sS'description'
p100949
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100950
sS'required'
p100951
I00
sS'options'
p100952
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100953
sS'group_name'
p100954
Nsa(dp100955
S'description'
p100956
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100957
sS'cpp_type'
p100958
S'std::vector<OutputName, std::allocator<OutputName> >'
p100959
sS'default'
p100960
g3
sS'name'
p100961
S'outputs'
p100962
sS'required'
p100963
I00
sS'group_name'
p100964
S'Advanced'
p100965
sa(dp100966
S'description'
p100967
S'The seed for the master random number generator\n'
p100968
sS'cpp_type'
p100969
S'unsigned int'
p100970
sS'default'
p100971
S'0'
p100972
sS'name'
p100973
S'seed'
p100974
sS'required'
p100975
I00
sS'group_name'
p100976
S'Advanced'
p100977
sa(dp100978
S'description'
p100979
g3
sS'cpp_type'
p100980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100981
sS'default'
p100982
S'IMCFraction'
p100983
sS'name'
p100984
S'type'
p100985
sS'required'
p100986
I00
sS'group_name'
p100987
Nsa(dp100988
S'description'
p100989
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p100990
sS'cpp_type'
p100991
S'bool'
p100992
sS'default'
p100993
S'1'
p100994
sS'name'
p100995
S'unique_node_execute'
p100996
sS'required'
p100997
I00
sS'group_name'
p100998
Nsa(dp100999
S'description'
p101000
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101001
sS'cpp_type'
p101002
S'bool'
p101003
sS'default'
p101004
S'0'
p101005
sS'name'
p101006
S'use_displaced_mesh'
p101007
sS'required'
p101008
I00
sS'group_name'
p101009
S'Advanced'
p101010
sa(dp101011
S'description'
p101012
S'The name of the variable that this postprocessor operates on\n'
p101013
sS'cpp_type'
p101014
S'std::vector<VariableName>'
p101015
sS'default'
p101016
g3
sS'name'
p101017
S'variable'
p101018
sS'required'
p101019
I01
sS'group_name'
p101020
NsasS'name'
p101021
S'/Postprocessors/IMCFraction'
p101022
sa(dp101023
S'description'
p101024
g3
sS'subblocks'
p101025
NsS'parameters'
p101026
(lp101027
(dp101028
S'description'
p101029
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101030
sS'cpp_type'
p101031
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101032
sS'default'
p101033
g3
sS'name'
p101034
S'block'
p101035
sS'required'
p101036
I00
sS'group_name'
p101037
Nsa(dp101038
S'description'
p101039
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101040
sS'cpp_type'
p101041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101042
sS'default'
p101043
g3
sS'name'
p101044
S'control_tags'
p101045
sS'required'
p101046
I00
sS'group_name'
p101047
S'Advanced'
p101048
sa(dp101049
S'description'
p101050
S'Set the enabled status of the MooseObject.\n'
p101051
sS'cpp_type'
p101052
S'bool'
p101053
sS'default'
p101054
S'1'
p101055
sS'name'
p101056
S'enable'
p101057
sS'required'
p101058
I00
sS'group_name'
p101059
S'Advanced'
p101060
sa(dp101061
S'name'
p101062
S'execute_on'
p101063
sS'cpp_type'
p101064
S'MultiMooseEnum'
p101065
sS'default'
p101066
S'TIMESTEP_END'
p101067
sS'description'
p101068
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101069
sS'required'
p101070
I00
sS'options'
p101071
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101072
sS'group_name'
p101073
Nsa(dp101074
S'description'
p101075
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101076
sS'cpp_type'
p101077
S'std::vector<OutputName, std::allocator<OutputName> >'
p101078
sS'default'
p101079
g3
sS'name'
p101080
S'outputs'
p101081
sS'required'
p101082
I00
sS'group_name'
p101083
S'Advanced'
p101084
sa(dp101085
S'description'
p101086
S'The seed for the master random number generator\n'
p101087
sS'cpp_type'
p101088
S'unsigned int'
p101089
sS'default'
p101090
S'0'
p101091
sS'name'
p101092
S'seed'
p101093
sS'required'
p101094
I00
sS'group_name'
p101095
S'Advanced'
p101096
sa(dp101097
S'description'
p101098
g3
sS'cpp_type'
p101099
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101100
sS'default'
p101101
S'Mass'
p101102
sS'name'
p101103
S'type'
p101104
sS'required'
p101105
I00
sS'group_name'
p101106
Nsa(dp101107
S'description'
p101108
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101109
sS'cpp_type'
p101110
S'bool'
p101111
sS'default'
p101112
S'1'
p101113
sS'name'
p101114
S'use_displaced_mesh'
p101115
sS'required'
p101116
I00
sS'group_name'
p101117
S'Advanced'
p101118
sa(dp101119
S'description'
p101120
S'The name of the variable that this object operates on\n'
p101121
sS'cpp_type'
p101122
S'std::vector<VariableName>'
p101123
sS'default'
p101124
g3
sS'name'
p101125
S'variable'
p101126
sS'required'
p101127
I01
sS'group_name'
p101128
NsasS'name'
p101129
S'/Postprocessors/Mass'
p101130
sa(dp101131
S'description'
p101132
g3
sS'subblocks'
p101133
NsS'parameters'
p101134
(lp101135
(dp101136
S'description'
p101137
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101138
sS'cpp_type'
p101139
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101140
sS'default'
p101141
g3
sS'name'
p101142
S'block'
p101143
sS'required'
p101144
I00
sS'group_name'
p101145
Nsa(dp101146
S'description'
p101147
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101148
sS'cpp_type'
p101149
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101150
sS'default'
p101151
g3
sS'name'
p101152
S'control_tags'
p101153
sS'required'
p101154
I00
sS'group_name'
p101155
S'Advanced'
p101156
sa(dp101157
S'description'
p101158
S'Set the enabled status of the MooseObject.\n'
p101159
sS'cpp_type'
p101160
S'bool'
p101161
sS'default'
p101162
S'1'
p101163
sS'name'
p101164
S'enable'
p101165
sS'required'
p101166
I00
sS'group_name'
p101167
S'Advanced'
p101168
sa(dp101169
S'name'
p101170
S'execute_on'
p101171
sS'cpp_type'
p101172
S'MultiMooseEnum'
p101173
sS'default'
p101174
S'TIMESTEP_END'
p101175
sS'description'
p101176
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101177
sS'required'
p101178
I00
sS'options'
p101179
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101180
sS'group_name'
p101181
Nsa(dp101182
S'description'
p101183
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p101184
sS'cpp_type'
p101185
S'unsigned int'
p101186
sS'default'
p101187
g3
sS'name'
p101188
S'index_i'
p101189
sS'required'
p101190
I01
sS'group_name'
p101191
Nsa(dp101192
S'description'
p101193
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p101194
sS'cpp_type'
p101195
S'unsigned int'
p101196
sS'default'
p101197
g3
sS'name'
p101198
S'index_j'
p101199
sS'required'
p101200
I01
sS'group_name'
p101201
Nsa(dp101202
S'description'
p101203
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101204
sS'cpp_type'
p101205
S'std::vector<OutputName, std::allocator<OutputName> >'
p101206
sS'default'
p101207
g3
sS'name'
p101208
S'outputs'
p101209
sS'required'
p101210
I00
sS'group_name'
p101211
S'Advanced'
p101212
sa(dp101213
S'description'
p101214
S'The rank two material tensor name\n'
p101215
sS'cpp_type'
p101216
S'MaterialPropertyName'
p101217
sS'default'
p101218
g3
sS'name'
p101219
S'rank_two_tensor'
p101220
sS'required'
p101221
I01
sS'group_name'
p101222
Nsa(dp101223
S'description'
p101224
S'The seed for the master random number generator\n'
p101225
sS'cpp_type'
p101226
S'unsigned int'
p101227
sS'default'
p101228
S'0'
p101229
sS'name'
p101230
S'seed'
p101231
sS'required'
p101232
I00
sS'group_name'
p101233
S'Advanced'
p101234
sa(dp101235
S'description'
p101236
g3
sS'cpp_type'
p101237
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101238
sS'default'
p101239
S'MaterialTensorIntegral'
p101240
sS'name'
p101241
S'type'
p101242
sS'required'
p101243
I00
sS'group_name'
p101244
Nsa(dp101245
S'description'
p101246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101247
sS'cpp_type'
p101248
S'bool'
p101249
sS'default'
p101250
S'1'
p101251
sS'name'
p101252
S'use_displaced_mesh'
p101253
sS'required'
p101254
I00
sS'group_name'
p101255
S'Advanced'
p101256
sasS'name'
p101257
S'/Postprocessors/MaterialTensorIntegral'
p101258
sa(dp101259
S'description'
p101260
S'Memory usage statistics for the running simulation.\n'
p101261
sS'subblocks'
p101262
NsS'parameters'
p101263
(lp101264
(dp101265
S'description'
p101266
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101267
sS'cpp_type'
p101268
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101269
sS'default'
p101270
g3
sS'name'
p101271
S'control_tags'
p101272
sS'required'
p101273
I00
sS'group_name'
p101274
S'Advanced'
p101275
sa(dp101276
S'description'
p101277
S'Set the enabled status of the MooseObject.\n'
p101278
sS'cpp_type'
p101279
S'bool'
p101280
sS'default'
p101281
S'1'
p101282
sS'name'
p101283
S'enable'
p101284
sS'required'
p101285
I00
sS'group_name'
p101286
S'Advanced'
p101287
sa(dp101288
S'name'
p101289
S'execute_on'
p101290
sS'cpp_type'
p101291
S'MultiMooseEnum'
p101292
sS'default'
p101293
S'TIMESTEP_END'
p101294
sS'description'
p101295
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101296
sS'required'
p101297
I00
sS'options'
p101298
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101299
sS'group_name'
p101300
Nsa(dp101301
S'name'
p101302
S'mem_type'
p101303
sS'cpp_type'
p101304
S'MooseEnum'
p101305
sS'default'
p101306
S'virtual_memory'
p101307
sS'description'
p101308
S'Memory metric to report.\n'
p101309
sS'required'
p101310
I00
sS'options'
p101311
S'virtual_memory physical_memory page_faults'
p101312
sS'group_name'
p101313
Nsa(dp101314
S'description'
p101315
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101316
sS'cpp_type'
p101317
S'std::vector<OutputName, std::allocator<OutputName> >'
p101318
sS'default'
p101319
g3
sS'name'
p101320
S'outputs'
p101321
sS'required'
p101322
I00
sS'group_name'
p101323
S'Advanced'
p101324
sa(dp101325
S'description'
p101326
S'If the postprocessor is executed more than one during a time step, report the aggregated peak value.\n'
p101327
sS'cpp_type'
p101328
S'bool'
p101329
sS'default'
p101330
S'1'
p101331
sS'name'
p101332
S'report_peak_value'
p101333
sS'required'
p101334
I00
sS'group_name'
p101335
Nsa(dp101336
S'description'
p101337
g3
sS'cpp_type'
p101338
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101339
sS'default'
p101340
S'MemoryUsage'
p101341
sS'name'
p101342
S'type'
p101343
sS'required'
p101344
I00
sS'group_name'
p101345
Nsa(dp101346
S'description'
p101347
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101348
sS'cpp_type'
p101349
S'bool'
p101350
sS'default'
p101351
S'0'
p101352
sS'name'
p101353
S'use_displaced_mesh'
p101354
sS'required'
p101355
I00
sS'group_name'
p101356
S'Advanced'
p101357
sa(dp101358
S'name'
p101359
S'value_type'
p101360
sS'cpp_type'
p101361
S'MooseEnum'
p101362
sS'default'
p101363
S'total'
p101364
sS'description'
p101365
S'Aggregation method to apply to the requested memory metric.\n'
p101366
sS'required'
p101367
I00
sS'options'
p101368
S'total average max_process min_processs'
p101369
sS'group_name'
p101370
NsasS'name'
p101371
S'/Postprocessors/MemoryUsage'
p101372
sa(dp101373
S'description'
p101374
g3
sS'subblocks'
p101375
NsS'parameters'
p101376
(lp101377
(dp101378
S'description'
p101379
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101380
sS'cpp_type'
p101381
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101382
sS'default'
p101383
g3
sS'name'
p101384
S'block'
p101385
sS'required'
p101386
I00
sS'group_name'
p101387
Nsa(dp101388
S'description'
p101389
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101390
sS'cpp_type'
p101391
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101392
sS'default'
p101393
g3
sS'name'
p101394
S'boundary'
p101395
sS'required'
p101396
I00
sS'group_name'
p101397
Nsa(dp101398
S'description'
p101399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101400
sS'cpp_type'
p101401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101402
sS'default'
p101403
g3
sS'name'
p101404
S'control_tags'
p101405
sS'required'
p101406
I00
sS'group_name'
p101407
S'Advanced'
p101408
sa(dp101409
S'description'
p101410
S'Set the enabled status of the MooseObject.\n'
p101411
sS'cpp_type'
p101412
S'bool'
p101413
sS'default'
p101414
S'1'
p101415
sS'name'
p101416
S'enable'
p101417
sS'required'
p101418
I00
sS'group_name'
p101419
S'Advanced'
p101420
sa(dp101421
S'name'
p101422
S'execute_on'
p101423
sS'cpp_type'
p101424
S'MultiMooseEnum'
p101425
sS'default'
p101426
S'TIMESTEP_END'
p101427
sS'description'
p101428
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101429
sS'required'
p101430
I00
sS'options'
p101431
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101432
sS'group_name'
p101433
Nsa(dp101434
S'description'
p101435
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101436
sS'cpp_type'
p101437
S'std::vector<OutputName, std::allocator<OutputName> >'
p101438
sS'default'
p101439
g3
sS'name'
p101440
S'outputs'
p101441
sS'required'
p101442
I00
sS'group_name'
p101443
S'Advanced'
p101444
sa(dp101445
S'description'
p101446
S'The seed for the master random number generator\n'
p101447
sS'cpp_type'
p101448
S'unsigned int'
p101449
sS'default'
p101450
S'0'
p101451
sS'name'
p101452
S'seed'
p101453
sS'required'
p101454
I00
sS'group_name'
p101455
S'Advanced'
p101456
sa(dp101457
S'description'
p101458
g3
sS'cpp_type'
p101459
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101460
sS'default'
p101461
S'NodalExtremeValue'
p101462
sS'name'
p101463
S'type'
p101464
sS'required'
p101465
I00
sS'group_name'
p101466
Nsa(dp101467
S'description'
p101468
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p101469
sS'cpp_type'
p101470
S'bool'
p101471
sS'default'
p101472
S'0'
p101473
sS'name'
p101474
S'unique_node_execute'
p101475
sS'required'
p101476
I00
sS'group_name'
p101477
Nsa(dp101478
S'description'
p101479
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101480
sS'cpp_type'
p101481
S'bool'
p101482
sS'default'
p101483
S'0'
p101484
sS'name'
p101485
S'use_displaced_mesh'
p101486
sS'required'
p101487
I00
sS'group_name'
p101488
S'Advanced'
p101489
sa(dp101490
S'name'
p101491
S'value_type'
p101492
sS'cpp_type'
p101493
S'MooseEnum'
p101494
sS'default'
p101495
S'max'
p101496
sS'description'
p101497
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p101498
sS'required'
p101499
I00
sS'options'
p101500
S'max min'
p101501
sS'group_name'
p101502
Nsa(dp101503
S'description'
p101504
S'The name of the variable that this postprocessor operates on\n'
p101505
sS'cpp_type'
p101506
S'std::vector<VariableName>'
p101507
sS'default'
p101508
g3
sS'name'
p101509
S'variable'
p101510
sS'required'
p101511
I01
sS'group_name'
p101512
NsasS'name'
p101513
S'/Postprocessors/NodalExtremeValue'
p101514
sa(dp101515
S'description'
p101516
g3
sS'subblocks'
p101517
NsS'parameters'
p101518
(lp101519
(dp101520
S'description'
p101521
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101522
sS'cpp_type'
p101523
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101524
sS'default'
p101525
g3
sS'name'
p101526
S'block'
p101527
sS'required'
p101528
I00
sS'group_name'
p101529
Nsa(dp101530
S'description'
p101531
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101532
sS'cpp_type'
p101533
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101534
sS'default'
p101535
g3
sS'name'
p101536
S'boundary'
p101537
sS'required'
p101538
I00
sS'group_name'
p101539
Nsa(dp101540
S'description'
p101541
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101542
sS'cpp_type'
p101543
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101544
sS'default'
p101545
g3
sS'name'
p101546
S'control_tags'
p101547
sS'required'
p101548
I00
sS'group_name'
p101549
S'Advanced'
p101550
sa(dp101551
S'description'
p101552
S'Set the enabled status of the MooseObject.\n'
p101553
sS'cpp_type'
p101554
S'bool'
p101555
sS'default'
p101556
S'1'
p101557
sS'name'
p101558
S'enable'
p101559
sS'required'
p101560
I00
sS'group_name'
p101561
S'Advanced'
p101562
sa(dp101563
S'name'
p101564
S'execute_on'
p101565
sS'cpp_type'
p101566
S'MultiMooseEnum'
p101567
sS'default'
p101568
S'TIMESTEP_END'
p101569
sS'description'
p101570
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101571
sS'required'
p101572
I00
sS'options'
p101573
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101574
sS'group_name'
p101575
Nsa(dp101576
S'description'
p101577
S'The analytic solution to compare against\n'
p101578
sS'cpp_type'
p101579
S'FunctionName'
p101580
sS'default'
p101581
g3
sS'name'
p101582
S'function'
p101583
sS'required'
p101584
I01
sS'group_name'
p101585
Nsa(dp101586
S'description'
p101587
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101588
sS'cpp_type'
p101589
S'std::vector<OutputName, std::allocator<OutputName> >'
p101590
sS'default'
p101591
g3
sS'name'
p101592
S'outputs'
p101593
sS'required'
p101594
I00
sS'group_name'
p101595
S'Advanced'
p101596
sa(dp101597
S'description'
p101598
S'The seed for the master random number generator\n'
p101599
sS'cpp_type'
p101600
S'unsigned int'
p101601
sS'default'
p101602
S'0'
p101603
sS'name'
p101604
S'seed'
p101605
sS'required'
p101606
I00
sS'group_name'
p101607
S'Advanced'
p101608
sa(dp101609
S'description'
p101610
g3
sS'cpp_type'
p101611
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101612
sS'default'
p101613
S'NodalL2Error'
p101614
sS'name'
p101615
S'type'
p101616
sS'required'
p101617
I00
sS'group_name'
p101618
Nsa(dp101619
S'description'
p101620
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p101621
sS'cpp_type'
p101622
S'bool'
p101623
sS'default'
p101624
S'0'
p101625
sS'name'
p101626
S'unique_node_execute'
p101627
sS'required'
p101628
I00
sS'group_name'
p101629
Nsa(dp101630
S'description'
p101631
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101632
sS'cpp_type'
p101633
S'bool'
p101634
sS'default'
p101635
S'0'
p101636
sS'name'
p101637
S'use_displaced_mesh'
p101638
sS'required'
p101639
I00
sS'group_name'
p101640
S'Advanced'
p101641
sa(dp101642
S'description'
p101643
S'The name of the variable that this postprocessor operates on\n'
p101644
sS'cpp_type'
p101645
S'std::vector<VariableName>'
p101646
sS'default'
p101647
g3
sS'name'
p101648
S'variable'
p101649
sS'required'
p101650
I01
sS'group_name'
p101651
NsasS'name'
p101652
S'/Postprocessors/NodalL2Error'
p101653
sa(dp101654
S'description'
p101655
g3
sS'subblocks'
p101656
NsS'parameters'
p101657
(lp101658
(dp101659
S'description'
p101660
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101661
sS'cpp_type'
p101662
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101663
sS'default'
p101664
g3
sS'name'
p101665
S'block'
p101666
sS'required'
p101667
I00
sS'group_name'
p101668
Nsa(dp101669
S'description'
p101670
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101671
sS'cpp_type'
p101672
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101673
sS'default'
p101674
g3
sS'name'
p101675
S'boundary'
p101676
sS'required'
p101677
I00
sS'group_name'
p101678
Nsa(dp101679
S'description'
p101680
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101681
sS'cpp_type'
p101682
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101683
sS'default'
p101684
g3
sS'name'
p101685
S'control_tags'
p101686
sS'required'
p101687
I00
sS'group_name'
p101688
S'Advanced'
p101689
sa(dp101690
S'description'
p101691
S'Set the enabled status of the MooseObject.\n'
p101692
sS'cpp_type'
p101693
S'bool'
p101694
sS'default'
p101695
S'1'
p101696
sS'name'
p101697
S'enable'
p101698
sS'required'
p101699
I00
sS'group_name'
p101700
S'Advanced'
p101701
sa(dp101702
S'name'
p101703
S'execute_on'
p101704
sS'cpp_type'
p101705
S'MultiMooseEnum'
p101706
sS'default'
p101707
S'TIMESTEP_END'
p101708
sS'description'
p101709
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101710
sS'required'
p101711
I00
sS'options'
p101712
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101713
sS'group_name'
p101714
Nsa(dp101715
S'description'
p101716
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101717
sS'cpp_type'
p101718
S'std::vector<OutputName, std::allocator<OutputName> >'
p101719
sS'default'
p101720
g3
sS'name'
p101721
S'outputs'
p101722
sS'required'
p101723
I00
sS'group_name'
p101724
S'Advanced'
p101725
sa(dp101726
S'description'
p101727
S'The seed for the master random number generator\n'
p101728
sS'cpp_type'
p101729
S'unsigned int'
p101730
sS'default'
p101731
S'0'
p101732
sS'name'
p101733
S'seed'
p101734
sS'required'
p101735
I00
sS'group_name'
p101736
S'Advanced'
p101737
sa(dp101738
S'description'
p101739
g3
sS'cpp_type'
p101740
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101741
sS'default'
p101742
S'NodalL2Norm'
p101743
sS'name'
p101744
S'type'
p101745
sS'required'
p101746
I00
sS'group_name'
p101747
Nsa(dp101748
S'description'
p101749
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p101750
sS'cpp_type'
p101751
S'bool'
p101752
sS'default'
p101753
S'1'
p101754
sS'name'
p101755
S'unique_node_execute'
p101756
sS'required'
p101757
I00
sS'group_name'
p101758
Nsa(dp101759
S'description'
p101760
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101761
sS'cpp_type'
p101762
S'bool'
p101763
sS'default'
p101764
S'0'
p101765
sS'name'
p101766
S'use_displaced_mesh'
p101767
sS'required'
p101768
I00
sS'group_name'
p101769
S'Advanced'
p101770
sa(dp101771
S'description'
p101772
S'The name of the variable that this postprocessor operates on\n'
p101773
sS'cpp_type'
p101774
S'std::vector<VariableName>'
p101775
sS'default'
p101776
g3
sS'name'
p101777
S'variable'
p101778
sS'required'
p101779
I01
sS'group_name'
p101780
NsasS'name'
p101781
S'/Postprocessors/NodalL2Norm'
p101782
sa(dp101783
S'description'
p101784
g3
sS'subblocks'
p101785
NsS'parameters'
p101786
(lp101787
(dp101788
S'description'
p101789
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101790
sS'cpp_type'
p101791
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101792
sS'default'
p101793
g3
sS'name'
p101794
S'block'
p101795
sS'required'
p101796
I00
sS'group_name'
p101797
Nsa(dp101798
S'description'
p101799
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101800
sS'cpp_type'
p101801
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101802
sS'default'
p101803
g3
sS'name'
p101804
S'boundary'
p101805
sS'required'
p101806
I00
sS'group_name'
p101807
Nsa(dp101808
S'description'
p101809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101810
sS'cpp_type'
p101811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101812
sS'default'
p101813
g3
sS'name'
p101814
S'control_tags'
p101815
sS'required'
p101816
I00
sS'group_name'
p101817
S'Advanced'
p101818
sa(dp101819
S'description'
p101820
S'Set the enabled status of the MooseObject.\n'
p101821
sS'cpp_type'
p101822
S'bool'
p101823
sS'default'
p101824
S'1'
p101825
sS'name'
p101826
S'enable'
p101827
sS'required'
p101828
I00
sS'group_name'
p101829
S'Advanced'
p101830
sa(dp101831
S'name'
p101832
S'execute_on'
p101833
sS'cpp_type'
p101834
S'MultiMooseEnum'
p101835
sS'default'
p101836
S'TIMESTEP_END'
p101837
sS'description'
p101838
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101839
sS'required'
p101840
I00
sS'options'
p101841
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101842
sS'group_name'
p101843
Nsa(dp101844
S'description'
p101845
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101846
sS'cpp_type'
p101847
S'std::vector<OutputName, std::allocator<OutputName> >'
p101848
sS'default'
p101849
g3
sS'name'
p101850
S'outputs'
p101851
sS'required'
p101852
I00
sS'group_name'
p101853
S'Advanced'
p101854
sa(dp101855
S'description'
p101856
S'The seed for the master random number generator\n'
p101857
sS'cpp_type'
p101858
S'unsigned int'
p101859
sS'default'
p101860
S'0'
p101861
sS'name'
p101862
S'seed'
p101863
sS'required'
p101864
I00
sS'group_name'
p101865
S'Advanced'
p101866
sa(dp101867
S'description'
p101868
g3
sS'cpp_type'
p101869
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101870
sS'default'
p101871
S'NodalMaxValue'
p101872
sS'name'
p101873
S'type'
p101874
sS'required'
p101875
I00
sS'group_name'
p101876
Nsa(dp101877
S'description'
p101878
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p101879
sS'cpp_type'
p101880
S'bool'
p101881
sS'default'
p101882
S'0'
p101883
sS'name'
p101884
S'unique_node_execute'
p101885
sS'required'
p101886
I00
sS'group_name'
p101887
Nsa(dp101888
S'description'
p101889
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101890
sS'cpp_type'
p101891
S'bool'
p101892
sS'default'
p101893
S'0'
p101894
sS'name'
p101895
S'use_displaced_mesh'
p101896
sS'required'
p101897
I00
sS'group_name'
p101898
S'Advanced'
p101899
sa(dp101900
S'description'
p101901
S'The name of the variable that this postprocessor operates on\n'
p101902
sS'cpp_type'
p101903
S'std::vector<VariableName>'
p101904
sS'default'
p101905
g3
sS'name'
p101906
S'variable'
p101907
sS'required'
p101908
I01
sS'group_name'
p101909
NsasS'name'
p101910
S'/Postprocessors/NodalMaxValue'
p101911
sa(dp101912
S'description'
p101913
g3
sS'subblocks'
p101914
NsS'parameters'
p101915
(lp101916
(dp101917
S'description'
p101918
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101919
sS'cpp_type'
p101920
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101921
sS'default'
p101922
g3
sS'name'
p101923
S'block'
p101924
sS'required'
p101925
I00
sS'group_name'
p101926
Nsa(dp101927
S'description'
p101928
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101929
sS'cpp_type'
p101930
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101931
sS'default'
p101932
g3
sS'name'
p101933
S'boundary'
p101934
sS'required'
p101935
I00
sS'group_name'
p101936
Nsa(dp101937
S'description'
p101938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101939
sS'cpp_type'
p101940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101941
sS'default'
p101942
g3
sS'name'
p101943
S'control_tags'
p101944
sS'required'
p101945
I00
sS'group_name'
p101946
S'Advanced'
p101947
sa(dp101948
S'description'
p101949
S'Set the enabled status of the MooseObject.\n'
p101950
sS'cpp_type'
p101951
S'bool'
p101952
sS'default'
p101953
S'1'
p101954
sS'name'
p101955
S'enable'
p101956
sS'required'
p101957
I00
sS'group_name'
p101958
S'Advanced'
p101959
sa(dp101960
S'name'
p101961
S'execute_on'
p101962
sS'cpp_type'
p101963
S'MultiMooseEnum'
p101964
sS'default'
p101965
S'TIMESTEP_END'
p101966
sS'description'
p101967
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101968
sS'required'
p101969
I00
sS'options'
p101970
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101971
sS'group_name'
p101972
Nsa(dp101973
S'description'
p101974
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101975
sS'cpp_type'
p101976
S'std::vector<OutputName, std::allocator<OutputName> >'
p101977
sS'default'
p101978
g3
sS'name'
p101979
S'outputs'
p101980
sS'required'
p101981
I00
sS'group_name'
p101982
S'Advanced'
p101983
sa(dp101984
S'description'
p101985
S'The seed for the master random number generator\n'
p101986
sS'cpp_type'
p101987
S'unsigned int'
p101988
sS'default'
p101989
S'0'
p101990
sS'name'
p101991
S'seed'
p101992
sS'required'
p101993
I00
sS'group_name'
p101994
S'Advanced'
p101995
sa(dp101996
S'description'
p101997
g3
sS'cpp_type'
p101998
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101999
sS'default'
p102000
S'NodalProxyMaxValue'
p102001
sS'name'
p102002
S'type'
p102003
sS'required'
p102004
I00
sS'group_name'
p102005
Nsa(dp102006
S'description'
p102007
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102008
sS'cpp_type'
p102009
S'bool'
p102010
sS'default'
p102011
S'0'
p102012
sS'name'
p102013
S'unique_node_execute'
p102014
sS'required'
p102015
I00
sS'group_name'
p102016
Nsa(dp102017
S'description'
p102018
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102019
sS'cpp_type'
p102020
S'bool'
p102021
sS'default'
p102022
S'0'
p102023
sS'name'
p102024
S'use_displaced_mesh'
p102025
sS'required'
p102026
I00
sS'group_name'
p102027
S'Advanced'
p102028
sa(dp102029
S'description'
p102030
S'The name of the variable that this postprocessor operates on\n'
p102031
sS'cpp_type'
p102032
S'std::vector<VariableName>'
p102033
sS'default'
p102034
g3
sS'name'
p102035
S'variable'
p102036
sS'required'
p102037
I01
sS'group_name'
p102038
NsasS'name'
p102039
S'/Postprocessors/NodalProxyMaxValue'
p102040
sa(dp102041
S'description'
p102042
g3
sS'subblocks'
p102043
NsS'parameters'
p102044
(lp102045
(dp102046
S'description'
p102047
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102048
sS'cpp_type'
p102049
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102050
sS'default'
p102051
g3
sS'name'
p102052
S'block'
p102053
sS'required'
p102054
I00
sS'group_name'
p102055
Nsa(dp102056
S'description'
p102057
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102058
sS'cpp_type'
p102059
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102060
sS'default'
p102061
g3
sS'name'
p102062
S'boundary'
p102063
sS'required'
p102064
I00
sS'group_name'
p102065
Nsa(dp102066
S'description'
p102067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102068
sS'cpp_type'
p102069
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102070
sS'default'
p102071
g3
sS'name'
p102072
S'control_tags'
p102073
sS'required'
p102074
I00
sS'group_name'
p102075
S'Advanced'
p102076
sa(dp102077
S'description'
p102078
S'Set the enabled status of the MooseObject.\n'
p102079
sS'cpp_type'
p102080
S'bool'
p102081
sS'default'
p102082
S'1'
p102083
sS'name'
p102084
S'enable'
p102085
sS'required'
p102086
I00
sS'group_name'
p102087
S'Advanced'
p102088
sa(dp102089
S'name'
p102090
S'execute_on'
p102091
sS'cpp_type'
p102092
S'MultiMooseEnum'
p102093
sS'default'
p102094
S'TIMESTEP_END'
p102095
sS'description'
p102096
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102097
sS'required'
p102098
I00
sS'options'
p102099
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102100
sS'group_name'
p102101
Nsa(dp102102
S'description'
p102103
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102104
sS'cpp_type'
p102105
S'std::vector<OutputName, std::allocator<OutputName> >'
p102106
sS'default'
p102107
g3
sS'name'
p102108
S'outputs'
p102109
sS'required'
p102110
I00
sS'group_name'
p102111
S'Advanced'
p102112
sa(dp102113
S'description'
p102114
S'The seed for the master random number generator\n'
p102115
sS'cpp_type'
p102116
S'unsigned int'
p102117
sS'default'
p102118
S'0'
p102119
sS'name'
p102120
S'seed'
p102121
sS'required'
p102122
I00
sS'group_name'
p102123
S'Advanced'
p102124
sa(dp102125
S'description'
p102126
g3
sS'cpp_type'
p102127
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102128
sS'default'
p102129
S'NodalSum'
p102130
sS'name'
p102131
S'type'
p102132
sS'required'
p102133
I00
sS'group_name'
p102134
Nsa(dp102135
S'description'
p102136
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102137
sS'cpp_type'
p102138
S'bool'
p102139
sS'default'
p102140
S'1'
p102141
sS'name'
p102142
S'unique_node_execute'
p102143
sS'required'
p102144
I00
sS'group_name'
p102145
Nsa(dp102146
S'description'
p102147
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102148
sS'cpp_type'
p102149
S'bool'
p102150
sS'default'
p102151
S'0'
p102152
sS'name'
p102153
S'use_displaced_mesh'
p102154
sS'required'
p102155
I00
sS'group_name'
p102156
S'Advanced'
p102157
sa(dp102158
S'description'
p102159
S'The name of the variable that this postprocessor operates on\n'
p102160
sS'cpp_type'
p102161
S'std::vector<VariableName>'
p102162
sS'default'
p102163
g3
sS'name'
p102164
S'variable'
p102165
sS'required'
p102166
I01
sS'group_name'
p102167
NsasS'name'
p102168
S'/Postprocessors/NodalSum'
p102169
sa(dp102170
S'description'
p102171
g3
sS'subblocks'
p102172
NsS'parameters'
p102173
(lp102174
(dp102175
S'description'
p102176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102177
sS'cpp_type'
p102178
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102179
sS'default'
p102180
g3
sS'name'
p102181
S'control_tags'
p102182
sS'required'
p102183
I00
sS'group_name'
p102184
S'Advanced'
p102185
sa(dp102186
S'description'
p102187
S'Set the enabled status of the MooseObject.\n'
p102188
sS'cpp_type'
p102189
S'bool'
p102190
sS'default'
p102191
S'1'
p102192
sS'name'
p102193
S'enable'
p102194
sS'required'
p102195
I00
sS'group_name'
p102196
S'Advanced'
p102197
sa(dp102198
S'name'
p102199
S'execute_on'
p102200
sS'cpp_type'
p102201
S'MultiMooseEnum'
p102202
sS'default'
p102203
S'TIMESTEP_END'
p102204
sS'description'
p102205
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102206
sS'required'
p102207
I00
sS'options'
p102208
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102209
sS'group_name'
p102210
Nsa(dp102211
S'description'
p102212
S'The ID of the node where we monitor\n'
p102213
sS'cpp_type'
p102214
S'unsigned int'
p102215
sS'default'
p102216
g3
sS'name'
p102217
S'nodeid'
p102218
sS'required'
p102219
I01
sS'group_name'
p102220
Nsa(dp102221
S'description'
p102222
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102223
sS'cpp_type'
p102224
S'std::vector<OutputName, std::allocator<OutputName> >'
p102225
sS'default'
p102226
g3
sS'name'
p102227
S'outputs'
p102228
sS'required'
p102229
I00
sS'group_name'
p102230
S'Advanced'
p102231
sa(dp102232
S'description'
p102233
S'A scale factor to be applied to the variable\n'
p102234
sS'cpp_type'
p102235
S'double'
p102236
sS'default'
p102237
S'1'
p102238
sS'name'
p102239
S'scale_factor'
p102240
sS'required'
p102241
I00
sS'group_name'
p102242
Nsa(dp102243
S'description'
p102244
g3
sS'cpp_type'
p102245
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102246
sS'default'
p102247
S'NodalVariableValue'
p102248
sS'name'
p102249
S'type'
p102250
sS'required'
p102251
I00
sS'group_name'
p102252
Nsa(dp102253
S'description'
p102254
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102255
sS'cpp_type'
p102256
S'bool'
p102257
sS'default'
p102258
S'0'
p102259
sS'name'
p102260
S'use_displaced_mesh'
p102261
sS'required'
p102262
I00
sS'group_name'
p102263
S'Advanced'
p102264
sa(dp102265
S'description'
p102266
S'The variable to be monitored\n'
p102267
sS'cpp_type'
p102268
S'VariableName'
p102269
sS'default'
p102270
g3
sS'name'
p102271
S'variable'
p102272
sS'required'
p102273
I01
sS'group_name'
p102274
NsasS'name'
p102275
S'/Postprocessors/NodalVariableValue'
p102276
sa(dp102277
S'description'
p102278
g3
sS'subblocks'
p102279
NsS'parameters'
p102280
(lp102281
(dp102282
S'description'
p102283
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102284
sS'cpp_type'
p102285
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102286
sS'default'
p102287
g3
sS'name'
p102288
S'control_tags'
p102289
sS'required'
p102290
I00
sS'group_name'
p102291
S'Advanced'
p102292
sa(dp102293
S'description'
p102294
S'Set the enabled status of the MooseObject.\n'
p102295
sS'cpp_type'
p102296
S'bool'
p102297
sS'default'
p102298
S'1'
p102299
sS'name'
p102300
S'enable'
p102301
sS'required'
p102302
I00
sS'group_name'
p102303
S'Advanced'
p102304
sa(dp102305
S'name'
p102306
S'execute_on'
p102307
sS'cpp_type'
p102308
S'MultiMooseEnum'
p102309
sS'default'
p102310
S'TIMESTEP_END'
p102311
sS'description'
p102312
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102313
sS'required'
p102314
I00
sS'options'
p102315
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102316
sS'group_name'
p102317
Nsa(dp102318
S'description'
p102319
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102320
sS'cpp_type'
p102321
S'std::vector<OutputName, std::allocator<OutputName> >'
p102322
sS'default'
p102323
g3
sS'name'
p102324
S'outputs'
p102325
sS'required'
p102326
I00
sS'group_name'
p102327
S'Advanced'
p102328
sa(dp102329
S'name'
p102330
S'system'
p102331
sS'cpp_type'
p102332
S'MooseEnum'
p102333
sS'default'
p102334
S'ALL'
p102335
sS'description'
p102336
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p102337
sS'required'
p102338
I00
sS'options'
p102339
S'NL AUX ALL'
p102340
sS'group_name'
p102341
Nsa(dp102342
S'description'
p102343
g3
sS'cpp_type'
p102344
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102345
sS'default'
p102346
S'NumDOFs'
p102347
sS'name'
p102348
S'type'
p102349
sS'required'
p102350
I00
sS'group_name'
p102351
Nsa(dp102352
S'description'
p102353
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102354
sS'cpp_type'
p102355
S'bool'
p102356
sS'default'
p102357
S'0'
p102358
sS'name'
p102359
S'use_displaced_mesh'
p102360
sS'required'
p102361
I00
sS'group_name'
p102362
S'Advanced'
p102363
sasS'name'
p102364
S'/Postprocessors/NumDOFs'
p102365
sa(dp102366
S'description'
p102367
g3
sS'subblocks'
p102368
NsS'parameters'
p102369
(lp102370
(dp102371
S'description'
p102372
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102373
sS'cpp_type'
p102374
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102375
sS'default'
p102376
g3
sS'name'
p102377
S'control_tags'
p102378
sS'required'
p102379
I00
sS'group_name'
p102380
S'Advanced'
p102381
sa(dp102382
S'name'
p102383
S'elem_filter'
p102384
sS'cpp_type'
p102385
S'MooseEnum'
p102386
sS'default'
p102387
S'active'
p102388
sS'description'
p102389
S'The type of elements to include in the count (active, total). Default == active\n'
p102390
sS'required'
p102391
I00
sS'options'
p102392
S'active total'
p102393
sS'group_name'
p102394
Nsa(dp102395
S'description'
p102396
S'Set the enabled status of the MooseObject.\n'
p102397
sS'cpp_type'
p102398
S'bool'
p102399
sS'default'
p102400
S'1'
p102401
sS'name'
p102402
S'enable'
p102403
sS'required'
p102404
I00
sS'group_name'
p102405
S'Advanced'
p102406
sa(dp102407
S'name'
p102408
S'execute_on'
p102409
sS'cpp_type'
p102410
S'MultiMooseEnum'
p102411
sS'default'
p102412
S'TIMESTEP_END'
p102413
sS'description'
p102414
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102415
sS'required'
p102416
I00
sS'options'
p102417
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102418
sS'group_name'
p102419
Nsa(dp102420
S'description'
p102421
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102422
sS'cpp_type'
p102423
S'std::vector<OutputName, std::allocator<OutputName> >'
p102424
sS'default'
p102425
g3
sS'name'
p102426
S'outputs'
p102427
sS'required'
p102428
I00
sS'group_name'
p102429
S'Advanced'
p102430
sa(dp102431
S'description'
p102432
g3
sS'cpp_type'
p102433
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102434
sS'default'
p102435
S'NumElems'
p102436
sS'name'
p102437
S'type'
p102438
sS'required'
p102439
I00
sS'group_name'
p102440
Nsa(dp102441
S'description'
p102442
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102443
sS'cpp_type'
p102444
S'bool'
p102445
sS'default'
p102446
S'0'
p102447
sS'name'
p102448
S'use_displaced_mesh'
p102449
sS'required'
p102450
I00
sS'group_name'
p102451
S'Advanced'
p102452
sasS'name'
p102453
S'/Postprocessors/NumElems'
p102454
sa(dp102455
S'description'
p102456
g3
sS'subblocks'
p102457
NsS'parameters'
p102458
(lp102459
(dp102460
S'description'
p102461
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102462
sS'cpp_type'
p102463
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102464
sS'default'
p102465
g3
sS'name'
p102466
S'control_tags'
p102467
sS'required'
p102468
I00
sS'group_name'
p102469
S'Advanced'
p102470
sa(dp102471
S'description'
p102472
S'Set the enabled status of the MooseObject.\n'
p102473
sS'cpp_type'
p102474
S'bool'
p102475
sS'default'
p102476
S'1'
p102477
sS'name'
p102478
S'enable'
p102479
sS'required'
p102480
I00
sS'group_name'
p102481
S'Advanced'
p102482
sa(dp102483
S'name'
p102484
S'execute_on'
p102485
sS'cpp_type'
p102486
S'MultiMooseEnum'
p102487
sS'default'
p102488
S'TIMESTEP_END'
p102489
sS'description'
p102490
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102491
sS'required'
p102492
I00
sS'options'
p102493
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102494
sS'group_name'
p102495
Nsa(dp102496
S'description'
p102497
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102498
sS'cpp_type'
p102499
S'std::vector<OutputName, std::allocator<OutputName> >'
p102500
sS'default'
p102501
g3
sS'name'
p102502
S'outputs'
p102503
sS'required'
p102504
I00
sS'group_name'
p102505
S'Advanced'
p102506
sa(dp102507
S'description'
p102508
g3
sS'cpp_type'
p102509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102510
sS'default'
p102511
S'NumLinearIterations'
p102512
sS'name'
p102513
S'type'
p102514
sS'required'
p102515
I00
sS'group_name'
p102516
Nsa(dp102517
S'description'
p102518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102519
sS'cpp_type'
p102520
S'bool'
p102521
sS'default'
p102522
S'0'
p102523
sS'name'
p102524
S'use_displaced_mesh'
p102525
sS'required'
p102526
I00
sS'group_name'
p102527
S'Advanced'
p102528
sasS'name'
p102529
S'/Postprocessors/NumLinearIterations'
p102530
sa(dp102531
S'description'
p102532
g3
sS'subblocks'
p102533
NsS'parameters'
p102534
(lp102535
(dp102536
S'description'
p102537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102538
sS'cpp_type'
p102539
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102540
sS'default'
p102541
g3
sS'name'
p102542
S'control_tags'
p102543
sS'required'
p102544
I00
sS'group_name'
p102545
S'Advanced'
p102546
sa(dp102547
S'description'
p102548
S'Set the enabled status of the MooseObject.\n'
p102549
sS'cpp_type'
p102550
S'bool'
p102551
sS'default'
p102552
S'1'
p102553
sS'name'
p102554
S'enable'
p102555
sS'required'
p102556
I00
sS'group_name'
p102557
S'Advanced'
p102558
sa(dp102559
S'name'
p102560
S'execute_on'
p102561
sS'cpp_type'
p102562
S'MultiMooseEnum'
p102563
sS'default'
p102564
S'TIMESTEP_END'
p102565
sS'description'
p102566
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102567
sS'required'
p102568
I00
sS'options'
p102569
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102570
sS'group_name'
p102571
Nsa(dp102572
S'description'
p102573
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102574
sS'cpp_type'
p102575
S'std::vector<OutputName, std::allocator<OutputName> >'
p102576
sS'default'
p102577
g3
sS'name'
p102578
S'outputs'
p102579
sS'required'
p102580
I00
sS'group_name'
p102581
S'Advanced'
p102582
sa(dp102583
S'description'
p102584
g3
sS'cpp_type'
p102585
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102586
sS'default'
p102587
S'NumNodes'
p102588
sS'name'
p102589
S'type'
p102590
sS'required'
p102591
I00
sS'group_name'
p102592
Nsa(dp102593
S'description'
p102594
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102595
sS'cpp_type'
p102596
S'bool'
p102597
sS'default'
p102598
S'0'
p102599
sS'name'
p102600
S'use_displaced_mesh'
p102601
sS'required'
p102602
I00
sS'group_name'
p102603
S'Advanced'
p102604
sasS'name'
p102605
S'/Postprocessors/NumNodes'
p102606
sa(dp102607
S'description'
p102608
g3
sS'subblocks'
p102609
NsS'parameters'
p102610
(lp102611
(dp102612
S'description'
p102613
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p102614
sS'cpp_type'
p102615
S'bool'
p102616
sS'default'
p102617
S'0'
p102618
sS'name'
p102619
S'accumulate_over_step'
p102620
sS'required'
p102621
I00
sS'group_name'
p102622
Nsa(dp102623
S'description'
p102624
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102625
sS'cpp_type'
p102626
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102627
sS'default'
p102628
g3
sS'name'
p102629
S'control_tags'
p102630
sS'required'
p102631
I00
sS'group_name'
p102632
S'Advanced'
p102633
sa(dp102634
S'description'
p102635
S'Set the enabled status of the MooseObject.\n'
p102636
sS'cpp_type'
p102637
S'bool'
p102638
sS'default'
p102639
S'1'
p102640
sS'name'
p102641
S'enable'
p102642
sS'required'
p102643
I00
sS'group_name'
p102644
S'Advanced'
p102645
sa(dp102646
S'name'
p102647
S'execute_on'
p102648
sS'cpp_type'
p102649
S'MultiMooseEnum'
p102650
sS'default'
p102651
S'TIMESTEP_END'
p102652
sS'description'
p102653
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102654
sS'required'
p102655
I00
sS'options'
p102656
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102657
sS'group_name'
p102658
Nsa(dp102659
S'description'
p102660
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102661
sS'cpp_type'
p102662
S'std::vector<OutputName, std::allocator<OutputName> >'
p102663
sS'default'
p102664
g3
sS'name'
p102665
S'outputs'
p102666
sS'required'
p102667
I00
sS'group_name'
p102668
S'Advanced'
p102669
sa(dp102670
S'description'
p102671
g3
sS'cpp_type'
p102672
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102673
sS'default'
p102674
S'NumNonlinearIterations'
p102675
sS'name'
p102676
S'type'
p102677
sS'required'
p102678
I00
sS'group_name'
p102679
Nsa(dp102680
S'description'
p102681
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102682
sS'cpp_type'
p102683
S'bool'
p102684
sS'default'
p102685
S'0'
p102686
sS'name'
p102687
S'use_displaced_mesh'
p102688
sS'required'
p102689
I00
sS'group_name'
p102690
S'Advanced'
p102691
sasS'name'
p102692
S'/Postprocessors/NumNonlinearIterations'
p102693
sa(dp102694
S'description'
p102695
g3
sS'subblocks'
p102696
NsS'parameters'
p102697
(lp102698
(dp102699
S'description'
p102700
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102701
sS'cpp_type'
p102702
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102703
sS'default'
p102704
g3
sS'name'
p102705
S'control_tags'
p102706
sS'required'
p102707
I00
sS'group_name'
p102708
S'Advanced'
p102709
sa(dp102710
S'description'
p102711
S'Set the enabled status of the MooseObject.\n'
p102712
sS'cpp_type'
p102713
S'bool'
p102714
sS'default'
p102715
S'1'
p102716
sS'name'
p102717
S'enable'
p102718
sS'required'
p102719
I00
sS'group_name'
p102720
S'Advanced'
p102721
sa(dp102722
S'name'
p102723
S'execute_on'
p102724
sS'cpp_type'
p102725
S'MultiMooseEnum'
p102726
sS'default'
p102727
S'TIMESTEP_END'
p102728
sS'description'
p102729
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102730
sS'required'
p102731
I00
sS'options'
p102732
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102733
sS'group_name'
p102734
Nsa(dp102735
S'description'
p102736
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102737
sS'cpp_type'
p102738
S'std::vector<OutputName, std::allocator<OutputName> >'
p102739
sS'default'
p102740
g3
sS'name'
p102741
S'outputs'
p102742
sS'required'
p102743
I00
sS'group_name'
p102744
S'Advanced'
p102745
sa(dp102746
S'description'
p102747
g3
sS'cpp_type'
p102748
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102749
sS'default'
p102750
S'NumPicardIterations'
p102751
sS'name'
p102752
S'type'
p102753
sS'required'
p102754
I00
sS'group_name'
p102755
Nsa(dp102756
S'description'
p102757
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102758
sS'cpp_type'
p102759
S'bool'
p102760
sS'default'
p102761
S'0'
p102762
sS'name'
p102763
S'use_displaced_mesh'
p102764
sS'required'
p102765
I00
sS'group_name'
p102766
S'Advanced'
p102767
sasS'name'
p102768
S'/Postprocessors/NumPicardIterations'
p102769
sa(dp102770
S'description'
p102771
g3
sS'subblocks'
p102772
NsS'parameters'
p102773
(lp102774
(dp102775
S'description'
p102776
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102777
sS'cpp_type'
p102778
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102779
sS'default'
p102780
g3
sS'name'
p102781
S'control_tags'
p102782
sS'required'
p102783
I00
sS'group_name'
p102784
S'Advanced'
p102785
sa(dp102786
S'description'
p102787
S'Set the enabled status of the MooseObject.\n'
p102788
sS'cpp_type'
p102789
S'bool'
p102790
sS'default'
p102791
S'1'
p102792
sS'name'
p102793
S'enable'
p102794
sS'required'
p102795
I00
sS'group_name'
p102796
S'Advanced'
p102797
sa(dp102798
S'name'
p102799
S'execute_on'
p102800
sS'cpp_type'
p102801
S'MultiMooseEnum'
p102802
sS'default'
p102803
S'TIMESTEP_END'
p102804
sS'description'
p102805
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102806
sS'required'
p102807
I00
sS'options'
p102808
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102809
sS'group_name'
p102810
Nsa(dp102811
S'description'
p102812
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102813
sS'cpp_type'
p102814
S'std::vector<OutputName, std::allocator<OutputName> >'
p102815
sS'default'
p102816
g3
sS'name'
p102817
S'outputs'
p102818
sS'required'
p102819
I00
sS'group_name'
p102820
S'Advanced'
p102821
sa(dp102822
S'description'
p102823
g3
sS'cpp_type'
p102824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102825
sS'default'
p102826
S'NumResidualEvaluations'
p102827
sS'name'
p102828
S'type'
p102829
sS'required'
p102830
I00
sS'group_name'
p102831
Nsa(dp102832
S'description'
p102833
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102834
sS'cpp_type'
p102835
S'bool'
p102836
sS'default'
p102837
S'0'
p102838
sS'name'
p102839
S'use_displaced_mesh'
p102840
sS'required'
p102841
I00
sS'group_name'
p102842
S'Advanced'
p102843
sasS'name'
p102844
S'/Postprocessors/NumResidualEvaluations'
p102845
sa(dp102846
S'description'
p102847
g3
sS'subblocks'
p102848
NsS'parameters'
p102849
(lp102850
(dp102851
S'description'
p102852
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102853
sS'cpp_type'
p102854
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102855
sS'default'
p102856
g3
sS'name'
p102857
S'control_tags'
p102858
sS'required'
p102859
I00
sS'group_name'
p102860
S'Advanced'
p102861
sa(dp102862
S'description'
p102863
S'Set the enabled status of the MooseObject.\n'
p102864
sS'cpp_type'
p102865
S'bool'
p102866
sS'default'
p102867
S'1'
p102868
sS'name'
p102869
S'enable'
p102870
sS'required'
p102871
I00
sS'group_name'
p102872
S'Advanced'
p102873
sa(dp102874
S'name'
p102875
S'execute_on'
p102876
sS'cpp_type'
p102877
S'MultiMooseEnum'
p102878
sS'default'
p102879
S'TIMESTEP_END'
p102880
sS'description'
p102881
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102882
sS'required'
p102883
I00
sS'options'
p102884
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102885
sS'group_name'
p102886
Nsa(dp102887
S'description'
p102888
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102889
sS'cpp_type'
p102890
S'std::vector<OutputName, std::allocator<OutputName> >'
p102891
sS'default'
p102892
g3
sS'name'
p102893
S'outputs'
p102894
sS'required'
p102895
I00
sS'group_name'
p102896
S'Advanced'
p102897
sa(dp102898
S'name'
p102899
S'system'
p102900
sS'cpp_type'
p102901
S'MooseEnum'
p102902
sS'default'
p102903
S'nonlinear'
p102904
sS'description'
p102905
S'The system for which you want to print the number of variables.\n'
p102906
sS'required'
p102907
I00
sS'options'
p102908
S'nonlinear auxiliary'
p102909
sS'group_name'
p102910
Nsa(dp102911
S'description'
p102912
g3
sS'cpp_type'
p102913
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102914
sS'default'
p102915
S'NumVars'
p102916
sS'name'
p102917
S'type'
p102918
sS'required'
p102919
I00
sS'group_name'
p102920
Nsa(dp102921
S'description'
p102922
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102923
sS'cpp_type'
p102924
S'bool'
p102925
sS'default'
p102926
S'0'
p102927
sS'name'
p102928
S'use_displaced_mesh'
p102929
sS'required'
p102930
I00
sS'group_name'
p102931
S'Advanced'
p102932
sasS'name'
p102933
S'/Postprocessors/NumVars'
p102934
sa(dp102935
S'description'
p102936
g3
sS'subblocks'
p102937
NsS'parameters'
p102938
(lp102939
(dp102940
S'description'
p102941
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102942
sS'cpp_type'
p102943
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102944
sS'default'
p102945
g3
sS'name'
p102946
S'block'
p102947
sS'required'
p102948
I00
sS'group_name'
p102949
Nsa(dp102950
S'description'
p102951
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102952
sS'cpp_type'
p102953
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102954
sS'default'
p102955
g3
sS'name'
p102956
S'control_tags'
p102957
sS'required'
p102958
I00
sS'group_name'
p102959
S'Advanced'
p102960
sa(dp102961
S'description'
p102962
S'Set the enabled status of the MooseObject.\n'
p102963
sS'cpp_type'
p102964
S'bool'
p102965
sS'default'
p102966
S'1'
p102967
sS'name'
p102968
S'enable'
p102969
sS'required'
p102970
I00
sS'group_name'
p102971
S'Advanced'
p102972
sa(dp102973
S'name'
p102974
S'execute_on'
p102975
sS'cpp_type'
p102976
S'MultiMooseEnum'
p102977
sS'default'
p102978
S'TIMESTEP_END'
p102979
sS'description'
p102980
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102981
sS'required'
p102982
I00
sS'options'
p102983
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102984
sS'group_name'
p102985
Nsa(dp102986
S'description'
p102987
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102988
sS'cpp_type'
p102989
S'std::vector<OutputName, std::allocator<OutputName> >'
p102990
sS'default'
p102991
g3
sS'name'
p102992
S'outputs'
p102993
sS'required'
p102994
I00
sS'group_name'
p102995
S'Advanced'
p102996
sa(dp102997
S'description'
p102998
S'The seed for the master random number generator\n'
p102999
sS'cpp_type'
p103000
S'unsigned int'
p103001
sS'default'
p103002
S'0'
p103003
sS'name'
p103004
S'seed'
p103005
sS'required'
p103006
I00
sS'group_name'
p103007
S'Advanced'
p103008
sa(dp103009
S'description'
p103010
S'Temperature of simulation\n'
p103011
sS'cpp_type'
p103012
S'double'
p103013
sS'default'
p103014
S'1833'
p103015
sS'name'
p103016
S'temp'
p103017
sS'required'
p103018
I00
sS'group_name'
p103019
Nsa(dp103020
S'description'
p103021
g3
sS'cpp_type'
p103022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103023
sS'default'
p103024
S'PFCElementEnergyIntegral'
p103025
sS'name'
p103026
S'type'
p103027
sS'required'
p103028
I00
sS'group_name'
p103029
Nsa(dp103030
S'description'
p103031
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103032
sS'cpp_type'
p103033
S'bool'
p103034
sS'default'
p103035
S'0'
p103036
sS'name'
p103037
S'use_displaced_mesh'
p103038
sS'required'
p103039
I00
sS'group_name'
p103040
S'Advanced'
p103041
sa(dp103042
S'description'
p103043
S'The name of the variable that this object operates on\n'
p103044
sS'cpp_type'
p103045
S'VariableName'
p103046
sS'default'
p103047
g3
sS'name'
p103048
S'variable'
p103049
sS'required'
p103050
I01
sS'group_name'
p103051
NsasS'name'
p103052
S'/Postprocessors/PFCElementEnergyIntegral'
p103053
sa(dp103054
S'description'
p103055
g3
sS'subblocks'
p103056
NsS'parameters'
p103057
(lp103058
(dp103059
S'description'
p103060
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103061
sS'cpp_type'
p103062
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103063
sS'default'
p103064
g3
sS'name'
p103065
S'control_tags'
p103066
sS'required'
p103067
I00
sS'group_name'
p103068
S'Advanced'
p103069
sa(dp103070
S'description'
p103071
S'Set the enabled status of the MooseObject.\n'
p103072
sS'cpp_type'
p103073
S'bool'
p103074
sS'default'
p103075
S'1'
p103076
sS'name'
p103077
S'enable'
p103078
sS'required'
p103079
I00
sS'group_name'
p103080
S'Advanced'
p103081
sa(dp103082
S'name'
p103083
S'execute_on'
p103084
sS'cpp_type'
p103085
S'MultiMooseEnum'
p103086
sS'default'
p103087
S'TIMESTEP_END'
p103088
sS'description'
p103089
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103090
sS'required'
p103091
I00
sS'options'
p103092
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103093
sS'group_name'
p103094
Nsa(dp103095
S'description'
p103096
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103097
sS'cpp_type'
p103098
S'std::vector<OutputName, std::allocator<OutputName> >'
p103099
sS'default'
p103100
g3
sS'name'
p103101
S'outputs'
p103102
sS'required'
p103103
I00
sS'group_name'
p103104
S'Advanced'
p103105
sa(dp103106
S'description'
p103107
S'The name of the postprocessor used for exit criterion\n'
p103108
sS'cpp_type'
p103109
S'PostprocessorName'
p103110
sS'default'
p103111
g3
sS'name'
p103112
S'postprocessor'
p103113
sS'required'
p103114
I01
sS'group_name'
p103115
Nsa(dp103116
S'description'
p103117
g3
sS'cpp_type'
p103118
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103119
sS'default'
p103120
S'PercentChangePostprocessor'
p103121
sS'name'
p103122
S'type'
p103123
sS'required'
p103124
I00
sS'group_name'
p103125
Nsa(dp103126
S'description'
p103127
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103128
sS'cpp_type'
p103129
S'bool'
p103130
sS'default'
p103131
S'0'
p103132
sS'name'
p103133
S'use_displaced_mesh'
p103134
sS'required'
p103135
I00
sS'group_name'
p103136
S'Advanced'
p103137
sasS'name'
p103138
S'/Postprocessors/PercentChangePostprocessor'
p103139
sa(dp103140
S'description'
p103141
g3
sS'subblocks'
p103142
NsS'parameters'
p103143
(lp103144
(dp103145
S'description'
p103146
S'The category or "Header" for the event\n'
p103147
sS'cpp_type'
p103148
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103149
sS'default'
p103150
S'Execution'
p103151
sS'name'
p103152
S'category'
p103153
sS'required'
p103154
I00
sS'group_name'
p103155
Nsa(dp103156
S'name'
p103157
S'column'
p103158
sS'cpp_type'
p103159
S'MooseEnum'
p103160
sS'default'
p103161
S'total_time_with_sub'
p103162
sS'description'
p103163
S'The column you want the value of (Default: total_time_with_sub).\n'
p103164
sS'required'
p103165
I00
sS'options'
p103166
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p103167
sS'group_name'
p103168
Nsa(dp103169
S'description'
p103170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103171
sS'cpp_type'
p103172
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103173
sS'default'
p103174
g3
sS'name'
p103175
S'control_tags'
p103176
sS'required'
p103177
I00
sS'group_name'
p103178
S'Advanced'
p103179
sa(dp103180
S'description'
p103181
S'Set the enabled status of the MooseObject.\n'
p103182
sS'cpp_type'
p103183
S'bool'
p103184
sS'default'
p103185
S'1'
p103186
sS'name'
p103187
S'enable'
p103188
sS'required'
p103189
I00
sS'group_name'
p103190
S'Advanced'
p103191
sa(dp103192
S'description'
p103193
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p103194
sS'cpp_type'
p103195
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103196
sS'default'
p103197
g3
sS'name'
p103198
S'event'
p103199
sS'required'
p103200
I01
sS'group_name'
p103201
Nsa(dp103202
S'name'
p103203
S'execute_on'
p103204
sS'cpp_type'
p103205
S'MultiMooseEnum'
p103206
sS'default'
p103207
S'TIMESTEP_END'
p103208
sS'description'
p103209
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103210
sS'required'
p103211
I00
sS'options'
p103212
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103213
sS'group_name'
p103214
Nsa(dp103215
S'description'
p103216
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103217
sS'cpp_type'
p103218
S'std::vector<OutputName, std::allocator<OutputName> >'
p103219
sS'default'
p103220
g3
sS'name'
p103221
S'outputs'
p103222
sS'required'
p103223
I00
sS'group_name'
p103224
S'Advanced'
p103225
sa(dp103226
S'description'
p103227
g3
sS'cpp_type'
p103228
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103229
sS'default'
p103230
S'PerformanceData'
p103231
sS'name'
p103232
S'type'
p103233
sS'required'
p103234
I00
sS'group_name'
p103235
Nsa(dp103236
S'description'
p103237
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103238
sS'cpp_type'
p103239
S'bool'
p103240
sS'default'
p103241
S'0'
p103242
sS'name'
p103243
S'use_displaced_mesh'
p103244
sS'required'
p103245
I00
sS'group_name'
p103246
S'Advanced'
p103247
sasS'name'
p103248
S'/Postprocessors/PerformanceData'
p103249
sa(dp103250
S'description'
p103251
g3
sS'subblocks'
p103252
NsS'parameters'
p103253
(lp103254
(dp103255
S'description'
p103256
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103257
sS'cpp_type'
p103258
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103259
sS'default'
p103260
g3
sS'name'
p103261
S'control_tags'
p103262
sS'required'
p103263
I00
sS'group_name'
p103264
S'Advanced'
p103265
sa(dp103266
S'description'
p103267
S'Set the enabled status of the MooseObject.\n'
p103268
sS'cpp_type'
p103269
S'bool'
p103270
sS'default'
p103271
S'1'
p103272
sS'name'
p103273
S'enable'
p103274
sS'required'
p103275
I00
sS'group_name'
p103276
S'Advanced'
p103277
sa(dp103278
S'name'
p103279
S'execute_on'
p103280
sS'cpp_type'
p103281
S'MultiMooseEnum'
p103282
sS'default'
p103283
S'TIMESTEP_END'
p103284
sS'description'
p103285
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103286
sS'required'
p103287
I00
sS'options'
p103288
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103289
sS'group_name'
p103290
Nsa(dp103291
S'description'
p103292
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103293
sS'cpp_type'
p103294
S'std::vector<OutputName, std::allocator<OutputName> >'
p103295
sS'default'
p103296
g3
sS'name'
p103297
S'outputs'
p103298
sS'required'
p103299
I00
sS'group_name'
p103300
S'Advanced'
p103301
sa(dp103302
S'description'
p103303
S'The physical point where the solution will be evaluated.\n'
p103304
sS'cpp_type'
p103305
S'libMesh::Point'
p103306
sS'default'
p103307
g3
sS'name'
p103308
S'point'
p103309
sS'required'
p103310
I01
sS'group_name'
p103311
Nsa(dp103312
S'description'
p103313
g3
sS'cpp_type'
p103314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103315
sS'default'
p103316
S'PointValue'
p103317
sS'name'
p103318
S'type'
p103319
sS'required'
p103320
I00
sS'group_name'
p103321
Nsa(dp103322
S'description'
p103323
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103324
sS'cpp_type'
p103325
S'bool'
p103326
sS'default'
p103327
S'0'
p103328
sS'name'
p103329
S'use_displaced_mesh'
p103330
sS'required'
p103331
I00
sS'group_name'
p103332
S'Advanced'
p103333
sa(dp103334
S'description'
p103335
S'The name of the variable that this postprocessor operates on.\n'
p103336
sS'cpp_type'
p103337
S'VariableName'
p103338
sS'default'
p103339
g3
sS'name'
p103340
S'variable'
p103341
sS'required'
p103342
I01
sS'group_name'
p103343
NsasS'name'
p103344
S'/Postprocessors/PointValue'
p103345
sa(dp103346
S'description'
p103347
g3
sS'subblocks'
p103348
NsS'parameters'
p103349
(lp103350
(dp103351
S'description'
p103352
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103353
sS'cpp_type'
p103354
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103355
sS'default'
p103356
g3
sS'name'
p103357
S'control_tags'
p103358
sS'required'
p103359
I00
sS'group_name'
p103360
S'Advanced'
p103361
sa(dp103362
S'description'
p103363
S'The default value\n'
p103364
sS'cpp_type'
p103365
S'double'
p103366
sS'default'
p103367
g3
sS'name'
p103368
S'default'
p103369
sS'required'
p103370
I00
sS'group_name'
p103371
Nsa(dp103372
S'description'
p103373
S'Set the enabled status of the MooseObject.\n'
p103374
sS'cpp_type'
p103375
S'bool'
p103376
sS'default'
p103377
S'1'
p103378
sS'name'
p103379
S'enable'
p103380
sS'required'
p103381
I00
sS'group_name'
p103382
S'Advanced'
p103383
sa(dp103384
S'name'
p103385
S'execute_on'
p103386
sS'cpp_type'
p103387
S'MultiMooseEnum'
p103388
sS'default'
p103389
S'TIMESTEP_END'
p103390
sS'description'
p103391
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103392
sS'required'
p103393
I00
sS'options'
p103394
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103395
sS'group_name'
p103396
Nsa(dp103397
S'description'
p103398
S'Initialize the old postprocessor value with the default value\n'
p103399
sS'cpp_type'
p103400
S'bool'
p103401
sS'default'
p103402
S'1'
p103403
sS'name'
p103404
S'initialize_old'
p103405
sS'required'
p103406
I00
sS'group_name'
p103407
Nsa(dp103408
S'description'
p103409
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103410
sS'cpp_type'
p103411
S'std::vector<OutputName, std::allocator<OutputName> >'
p103412
sS'default'
p103413
g3
sS'name'
p103414
S'outputs'
p103415
sS'required'
p103416
I00
sS'group_name'
p103417
S'Advanced'
p103418
sa(dp103419
S'description'
p103420
g3
sS'cpp_type'
p103421
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103422
sS'default'
p103423
S'Receiver'
p103424
sS'name'
p103425
S'type'
p103426
sS'required'
p103427
I00
sS'group_name'
p103428
Nsa(dp103429
S'description'
p103430
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103431
sS'cpp_type'
p103432
S'bool'
p103433
sS'default'
p103434
S'0'
p103435
sS'name'
p103436
S'use_displaced_mesh'
p103437
sS'required'
p103438
I00
sS'group_name'
p103439
S'Advanced'
p103440
sasS'name'
p103441
S'/Postprocessors/Receiver'
p103442
sa(dp103443
S'description'
p103444
g3
sS'subblocks'
p103445
NsS'parameters'
p103446
(lp103447
(dp103448
S'description'
p103449
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103450
sS'cpp_type'
p103451
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103452
sS'default'
p103453
g3
sS'name'
p103454
S'control_tags'
p103455
sS'required'
p103456
I00
sS'group_name'
p103457
S'Advanced'
p103458
sa(dp103459
S'description'
p103460
S'Set the enabled status of the MooseObject.\n'
p103461
sS'cpp_type'
p103462
S'bool'
p103463
sS'default'
p103464
S'1'
p103465
sS'name'
p103466
S'enable'
p103467
sS'required'
p103468
I00
sS'group_name'
p103469
S'Advanced'
p103470
sa(dp103471
S'name'
p103472
S'execute_on'
p103473
sS'cpp_type'
p103474
S'MultiMooseEnum'
p103475
sS'default'
p103476
S'TIMESTEP_END'
p103477
sS'description'
p103478
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103479
sS'required'
p103480
I00
sS'options'
p103481
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103482
sS'group_name'
p103483
Nsa(dp103484
S'description'
p103485
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103486
sS'cpp_type'
p103487
S'std::vector<OutputName, std::allocator<OutputName> >'
p103488
sS'default'
p103489
g3
sS'name'
p103490
S'outputs'
p103491
sS'required'
p103492
I00
sS'group_name'
p103493
S'Advanced'
p103494
sa(dp103495
S'description'
p103496
g3
sS'cpp_type'
p103497
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103498
sS'default'
p103499
S'RelativeSolutionDifferenceNorm'
p103500
sS'name'
p103501
S'type'
p103502
sS'required'
p103503
I00
sS'group_name'
p103504
Nsa(dp103505
S'description'
p103506
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103507
sS'cpp_type'
p103508
S'bool'
p103509
sS'default'
p103510
S'0'
p103511
sS'name'
p103512
S'use_displaced_mesh'
p103513
sS'required'
p103514
I00
sS'group_name'
p103515
S'Advanced'
p103516
sasS'name'
p103517
S'/Postprocessors/RelativeSolutionDifferenceNorm'
p103518
sa(dp103519
S'description'
p103520
g3
sS'subblocks'
p103521
NsS'parameters'
p103522
(lp103523
(dp103524
S'description'
p103525
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103526
sS'cpp_type'
p103527
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103528
sS'default'
p103529
g3
sS'name'
p103530
S'control_tags'
p103531
sS'required'
p103532
I00
sS'group_name'
p103533
S'Advanced'
p103534
sa(dp103535
S'description'
p103536
S'Set the enabled status of the MooseObject.\n'
p103537
sS'cpp_type'
p103538
S'bool'
p103539
sS'default'
p103540
S'1'
p103541
sS'name'
p103542
S'enable'
p103543
sS'required'
p103544
I00
sS'group_name'
p103545
S'Advanced'
p103546
sa(dp103547
S'name'
p103548
S'execute_on'
p103549
sS'cpp_type'
p103550
S'MultiMooseEnum'
p103551
sS'default'
p103552
S'TIMESTEP_END'
p103553
sS'description'
p103554
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103555
sS'required'
p103556
I00
sS'options'
p103557
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103558
sS'group_name'
p103559
Nsa(dp103560
S'description'
p103561
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103562
sS'cpp_type'
p103563
S'std::vector<OutputName, std::allocator<OutputName> >'
p103564
sS'default'
p103565
g3
sS'name'
p103566
S'outputs'
p103567
sS'required'
p103568
I00
sS'group_name'
p103569
S'Advanced'
p103570
sa(dp103571
S'name'
p103572
S'residual_type'
p103573
sS'cpp_type'
p103574
S'MooseEnum'
p103575
sS'default'
p103576
S'FINAL'
p103577
sS'description'
p103578
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p103579
sS'required'
p103580
I00
sS'options'
p103581
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p103582
sS'group_name'
p103583
Nsa(dp103584
S'description'
p103585
g3
sS'cpp_type'
p103586
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103587
sS'default'
p103588
S'Residual'
p103589
sS'name'
p103590
S'type'
p103591
sS'required'
p103592
I00
sS'group_name'
p103593
Nsa(dp103594
S'description'
p103595
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103596
sS'cpp_type'
p103597
S'bool'
p103598
sS'default'
p103599
S'0'
p103600
sS'name'
p103601
S'use_displaced_mesh'
p103602
sS'required'
p103603
I00
sS'group_name'
p103604
S'Advanced'
p103605
sasS'name'
p103606
S'/Postprocessors/Residual'
p103607
sa(dp103608
S'description'
p103609
g3
sS'subblocks'
p103610
NsS'parameters'
p103611
(lp103612
(dp103613
S'description'
p103614
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103615
sS'cpp_type'
p103616
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103617
sS'default'
p103618
g3
sS'name'
p103619
S'control_tags'
p103620
sS'required'
p103621
I00
sS'group_name'
p103622
S'Advanced'
p103623
sa(dp103624
S'description'
p103625
S'Set the enabled status of the MooseObject.\n'
p103626
sS'cpp_type'
p103627
S'bool'
p103628
sS'default'
p103629
S'1'
p103630
sS'name'
p103631
S'enable'
p103632
sS'required'
p103633
I00
sS'group_name'
p103634
S'Advanced'
p103635
sa(dp103636
S'name'
p103637
S'execute_on'
p103638
sS'cpp_type'
p103639
S'MultiMooseEnum'
p103640
sS'default'
p103641
S'TIMESTEP_END'
p103642
sS'description'
p103643
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103644
sS'required'
p103645
I00
sS'options'
p103646
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103647
sS'group_name'
p103648
Nsa(dp103649
S'description'
p103650
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103651
sS'cpp_type'
p103652
S'std::vector<OutputName, std::allocator<OutputName> >'
p103653
sS'default'
p103654
g3
sS'name'
p103655
S'outputs'
p103656
sS'required'
p103657
I00
sS'group_name'
p103658
S'Advanced'
p103659
sa(dp103660
S'name'
p103661
S'time_type'
p103662
sS'cpp_type'
p103663
S'MooseEnum'
p103664
sS'default'
p103665
g3
sS'description'
p103666
S'Whether to output the total elapsed or just the active time\n'
p103667
sS'required'
p103668
I01
sS'options'
p103669
S'alive active'
p103670
sS'group_name'
p103671
Nsa(dp103672
S'description'
p103673
g3
sS'cpp_type'
p103674
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103675
sS'default'
p103676
S'RunTime'
p103677
sS'name'
p103678
S'type'
p103679
sS'required'
p103680
I00
sS'group_name'
p103681
Nsa(dp103682
S'description'
p103683
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103684
sS'cpp_type'
p103685
S'bool'
p103686
sS'default'
p103687
S'0'
p103688
sS'name'
p103689
S'use_displaced_mesh'
p103690
sS'required'
p103691
I00
sS'group_name'
p103692
S'Advanced'
p103693
sasS'name'
p103694
S'/Postprocessors/RunTime'
p103695
sa(dp103696
S'description'
p103697
g3
sS'subblocks'
p103698
NsS'parameters'
p103699
(lp103700
(dp103701
S'description'
p103702
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103703
sS'cpp_type'
p103704
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103705
sS'default'
p103706
g3
sS'name'
p103707
S'control_tags'
p103708
sS'required'
p103709
I00
sS'group_name'
p103710
S'Advanced'
p103711
sa(dp103712
S'description'
p103713
S'Set the enabled status of the MooseObject.\n'
p103714
sS'cpp_type'
p103715
S'bool'
p103716
sS'default'
p103717
S'1'
p103718
sS'name'
p103719
S'enable'
p103720
sS'required'
p103721
I00
sS'group_name'
p103722
S'Advanced'
p103723
sa(dp103724
S'name'
p103725
S'execute_on'
p103726
sS'cpp_type'
p103727
S'MultiMooseEnum'
p103728
sS'default'
p103729
S'TIMESTEP_END'
p103730
sS'description'
p103731
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103732
sS'required'
p103733
I00
sS'options'
p103734
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103735
sS'group_name'
p103736
Nsa(dp103737
S'description'
p103738
S'The analytic solution to compare against\n'
p103739
sS'cpp_type'
p103740
S'FunctionName'
p103741
sS'default'
p103742
g3
sS'name'
p103743
S'function'
p103744
sS'required'
p103745
I01
sS'group_name'
p103746
Nsa(dp103747
S'description'
p103748
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103749
sS'cpp_type'
p103750
S'std::vector<OutputName, std::allocator<OutputName> >'
p103751
sS'default'
p103752
g3
sS'name'
p103753
S'outputs'
p103754
sS'required'
p103755
I00
sS'group_name'
p103756
S'Advanced'
p103757
sa(dp103758
S'description'
p103759
g3
sS'cpp_type'
p103760
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103761
sS'default'
p103762
S'ScalarL2Error'
p103763
sS'name'
p103764
S'type'
p103765
sS'required'
p103766
I00
sS'group_name'
p103767
Nsa(dp103768
S'description'
p103769
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103770
sS'cpp_type'
p103771
S'bool'
p103772
sS'default'
p103773
S'0'
p103774
sS'name'
p103775
S'use_displaced_mesh'
p103776
sS'required'
p103777
I00
sS'group_name'
p103778
S'Advanced'
p103779
sa(dp103780
S'description'
p103781
S'The name of the scalar variable\n'
p103782
sS'cpp_type'
p103783
S'VariableName'
p103784
sS'default'
p103785
g3
sS'name'
p103786
S'variable'
p103787
sS'required'
p103788
I01
sS'group_name'
p103789
NsasS'name'
p103790
S'/Postprocessors/ScalarL2Error'
p103791
sa(dp103792
S'description'
p103793
g3
sS'subblocks'
p103794
NsS'parameters'
p103795
(lp103796
(dp103797
S'description'
p103798
S'Component to output for this variable\n'
p103799
sS'cpp_type'
p103800
S'unsigned int'
p103801
sS'default'
p103802
S'0'
p103803
sS'name'
p103804
S'component'
p103805
sS'required'
p103806
I00
sS'group_name'
p103807
Nsa(dp103808
S'description'
p103809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103810
sS'cpp_type'
p103811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103812
sS'default'
p103813
g3
sS'name'
p103814
S'control_tags'
p103815
sS'required'
p103816
I00
sS'group_name'
p103817
S'Advanced'
p103818
sa(dp103819
S'description'
p103820
S'Set the enabled status of the MooseObject.\n'
p103821
sS'cpp_type'
p103822
S'bool'
p103823
sS'default'
p103824
S'1'
p103825
sS'name'
p103826
S'enable'
p103827
sS'required'
p103828
I00
sS'group_name'
p103829
S'Advanced'
p103830
sa(dp103831
S'name'
p103832
S'execute_on'
p103833
sS'cpp_type'
p103834
S'MultiMooseEnum'
p103835
sS'default'
p103836
S'TIMESTEP_END'
p103837
sS'description'
p103838
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103839
sS'required'
p103840
I00
sS'options'
p103841
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103842
sS'group_name'
p103843
Nsa(dp103844
S'description'
p103845
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103846
sS'cpp_type'
p103847
S'std::vector<OutputName, std::allocator<OutputName> >'
p103848
sS'default'
p103849
g3
sS'name'
p103850
S'outputs'
p103851
sS'required'
p103852
I00
sS'group_name'
p103853
S'Advanced'
p103854
sa(dp103855
S'description'
p103856
g3
sS'cpp_type'
p103857
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103858
sS'default'
p103859
S'ScalarVariable'
p103860
sS'name'
p103861
S'type'
p103862
sS'required'
p103863
I00
sS'group_name'
p103864
Nsa(dp103865
S'description'
p103866
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103867
sS'cpp_type'
p103868
S'bool'
p103869
sS'default'
p103870
S'0'
p103871
sS'name'
p103872
S'use_displaced_mesh'
p103873
sS'required'
p103874
I00
sS'group_name'
p103875
S'Advanced'
p103876
sa(dp103877
S'description'
p103878
S'Name of the variable\n'
p103879
sS'cpp_type'
p103880
S'VariableName'
p103881
sS'default'
p103882
g3
sS'name'
p103883
S'variable'
p103884
sS'required'
p103885
I01
sS'group_name'
p103886
NsasS'name'
p103887
S'/Postprocessors/ScalarVariable'
p103888
sa(dp103889
S'description'
p103890
g3
sS'subblocks'
p103891
NsS'parameters'
p103892
(lp103893
(dp103894
S'description'
p103895
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103896
sS'cpp_type'
p103897
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103898
sS'default'
p103899
g3
sS'name'
p103900
S'control_tags'
p103901
sS'required'
p103902
I00
sS'group_name'
p103903
S'Advanced'
p103904
sa(dp103905
S'description'
p103906
S'Set the enabled status of the MooseObject.\n'
p103907
sS'cpp_type'
p103908
S'bool'
p103909
sS'default'
p103910
S'1'
p103911
sS'name'
p103912
S'enable'
p103913
sS'required'
p103914
I00
sS'group_name'
p103915
S'Advanced'
p103916
sa(dp103917
S'name'
p103918
S'execute_on'
p103919
sS'cpp_type'
p103920
S'MultiMooseEnum'
p103921
sS'default'
p103922
S'TIMESTEP_END'
p103923
sS'description'
p103924
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103925
sS'required'
p103926
I00
sS'options'
p103927
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103928
sS'group_name'
p103929
Nsa(dp103930
S'description'
p103931
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103932
sS'cpp_type'
p103933
S'std::vector<OutputName, std::allocator<OutputName> >'
p103934
sS'default'
p103935
g3
sS'name'
p103936
S'outputs'
p103937
sS'required'
p103938
I00
sS'group_name'
p103939
S'Advanced'
p103940
sa(dp103941
S'description'
p103942
S'The scaling factor\n'
p103943
sS'cpp_type'
p103944
S'double'
p103945
sS'default'
p103946
S'1'
p103947
sS'name'
p103948
S'scaling_factor'
p103949
sS'required'
p103950
I00
sS'group_name'
p103951
Nsa(dp103952
S'description'
p103953
g3
sS'cpp_type'
p103954
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103955
sS'default'
p103956
S'ScalePostprocessor'
p103957
sS'name'
p103958
S'type'
p103959
sS'required'
p103960
I00
sS'group_name'
p103961
Nsa(dp103962
S'description'
p103963
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103964
sS'cpp_type'
p103965
S'bool'
p103966
sS'default'
p103967
S'0'
p103968
sS'name'
p103969
S'use_displaced_mesh'
p103970
sS'required'
p103971
I00
sS'group_name'
p103972
S'Advanced'
p103973
sa(dp103974
S'description'
p103975
S'The postprocessor to be scaled\n'
p103976
sS'cpp_type'
p103977
S'PostprocessorName'
p103978
sS'default'
p103979
g3
sS'name'
p103980
S'value'
p103981
sS'required'
p103982
I01
sS'group_name'
p103983
NsasS'name'
p103984
S'/Postprocessors/ScalePostprocessor'
p103985
sa(dp103986
S'description'
p103987
g3
sS'subblocks'
p103988
NsS'parameters'
p103989
(lp103990
(dp103991
S'description'
p103992
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p103993
sS'cpp_type'
p103994
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p103995
sS'default'
p103996
g3
sS'name'
p103997
S'boundary'
p103998
sS'required'
p103999
I01
sS'group_name'
p104000
Nsa(dp104001
S'description'
p104002
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104003
sS'cpp_type'
p104004
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104005
sS'default'
p104006
g3
sS'name'
p104007
S'control_tags'
p104008
sS'required'
p104009
I00
sS'group_name'
p104010
S'Advanced'
p104011
sa(dp104012
S'description'
p104013
S'Set the enabled status of the MooseObject.\n'
p104014
sS'cpp_type'
p104015
S'bool'
p104016
sS'default'
p104017
S'1'
p104018
sS'name'
p104019
S'enable'
p104020
sS'required'
p104021
I00
sS'group_name'
p104022
S'Advanced'
p104023
sa(dp104024
S'name'
p104025
S'execute_on'
p104026
sS'cpp_type'
p104027
S'MultiMooseEnum'
p104028
sS'default'
p104029
S'TIMESTEP_END'
p104030
sS'description'
p104031
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104032
sS'required'
p104033
I00
sS'options'
p104034
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104035
sS'group_name'
p104036
Nsa(dp104037
S'description'
p104038
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104039
sS'cpp_type'
p104040
S'std::vector<OutputName, std::allocator<OutputName> >'
p104041
sS'default'
p104042
g3
sS'name'
p104043
S'outputs'
p104044
sS'required'
p104045
I00
sS'group_name'
p104046
S'Advanced'
p104047
sa(dp104048
S'description'
p104049
g3
sS'cpp_type'
p104050
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104051
sS'default'
p104052
S'SideAverageValue'
p104053
sS'name'
p104054
S'type'
p104055
sS'required'
p104056
I00
sS'group_name'
p104057
Nsa(dp104058
S'description'
p104059
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104060
sS'cpp_type'
p104061
S'bool'
p104062
sS'default'
p104063
S'0'
p104064
sS'name'
p104065
S'use_displaced_mesh'
p104066
sS'required'
p104067
I00
sS'group_name'
p104068
S'Advanced'
p104069
sa(dp104070
S'description'
p104071
S'The name of the variable that this boundary condition applies to\n'
p104072
sS'cpp_type'
p104073
S'std::vector<VariableName>'
p104074
sS'default'
p104075
g3
sS'name'
p104076
S'variable'
p104077
sS'required'
p104078
I01
sS'group_name'
p104079
NsasS'name'
p104080
S'/Postprocessors/SideAverageValue'
p104081
sa(dp104082
S'description'
p104083
g3
sS'subblocks'
p104084
NsS'parameters'
p104085
(lp104086
(dp104087
S'description'
p104088
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104089
sS'cpp_type'
p104090
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104091
sS'default'
p104092
g3
sS'name'
p104093
S'boundary'
p104094
sS'required'
p104095
I01
sS'group_name'
p104096
Nsa(dp104097
S'description'
p104098
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104099
sS'cpp_type'
p104100
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104101
sS'default'
p104102
g3
sS'name'
p104103
S'control_tags'
p104104
sS'required'
p104105
I00
sS'group_name'
p104106
S'Advanced'
p104107
sa(dp104108
S'description'
p104109
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p104110
sS'cpp_type'
p104111
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104112
sS'default'
p104113
g3
sS'name'
p104114
S'diffusivity'
p104115
sS'required'
p104116
I01
sS'group_name'
p104117
Nsa(dp104118
S'description'
p104119
S'Set the enabled status of the MooseObject.\n'
p104120
sS'cpp_type'
p104121
S'bool'
p104122
sS'default'
p104123
S'1'
p104124
sS'name'
p104125
S'enable'
p104126
sS'required'
p104127
I00
sS'group_name'
p104128
S'Advanced'
p104129
sa(dp104130
S'name'
p104131
S'execute_on'
p104132
sS'cpp_type'
p104133
S'MultiMooseEnum'
p104134
sS'default'
p104135
S'TIMESTEP_END'
p104136
sS'description'
p104137
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104138
sS'required'
p104139
I00
sS'options'
p104140
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104141
sS'group_name'
p104142
Nsa(dp104143
S'description'
p104144
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104145
sS'cpp_type'
p104146
S'std::vector<OutputName, std::allocator<OutputName> >'
p104147
sS'default'
p104148
g3
sS'name'
p104149
S'outputs'
p104150
sS'required'
p104151
I00
sS'group_name'
p104152
S'Advanced'
p104153
sa(dp104154
S'description'
p104155
g3
sS'cpp_type'
p104156
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104157
sS'default'
p104158
S'SideFluxAverage'
p104159
sS'name'
p104160
S'type'
p104161
sS'required'
p104162
I00
sS'group_name'
p104163
Nsa(dp104164
S'description'
p104165
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104166
sS'cpp_type'
p104167
S'bool'
p104168
sS'default'
p104169
S'0'
p104170
sS'name'
p104171
S'use_displaced_mesh'
p104172
sS'required'
p104173
I00
sS'group_name'
p104174
S'Advanced'
p104175
sa(dp104176
S'description'
p104177
S'The name of the variable that this boundary condition applies to\n'
p104178
sS'cpp_type'
p104179
S'std::vector<VariableName>'
p104180
sS'default'
p104181
g3
sS'name'
p104182
S'variable'
p104183
sS'required'
p104184
I01
sS'group_name'
p104185
NsasS'name'
p104186
S'/Postprocessors/SideFluxAverage'
p104187
sa(dp104188
S'description'
p104189
g3
sS'subblocks'
p104190
NsS'parameters'
p104191
(lp104192
(dp104193
S'description'
p104194
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104195
sS'cpp_type'
p104196
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104197
sS'default'
p104198
g3
sS'name'
p104199
S'boundary'
p104200
sS'required'
p104201
I01
sS'group_name'
p104202
Nsa(dp104203
S'description'
p104204
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104205
sS'cpp_type'
p104206
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104207
sS'default'
p104208
g3
sS'name'
p104209
S'control_tags'
p104210
sS'required'
p104211
I00
sS'group_name'
p104212
S'Advanced'
p104213
sa(dp104214
S'description'
p104215
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p104216
sS'cpp_type'
p104217
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104218
sS'default'
p104219
g3
sS'name'
p104220
S'diffusivity'
p104221
sS'required'
p104222
I01
sS'group_name'
p104223
Nsa(dp104224
S'description'
p104225
S'Set the enabled status of the MooseObject.\n'
p104226
sS'cpp_type'
p104227
S'bool'
p104228
sS'default'
p104229
S'1'
p104230
sS'name'
p104231
S'enable'
p104232
sS'required'
p104233
I00
sS'group_name'
p104234
S'Advanced'
p104235
sa(dp104236
S'name'
p104237
S'execute_on'
p104238
sS'cpp_type'
p104239
S'MultiMooseEnum'
p104240
sS'default'
p104241
S'TIMESTEP_END'
p104242
sS'description'
p104243
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104244
sS'required'
p104245
I00
sS'options'
p104246
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104247
sS'group_name'
p104248
Nsa(dp104249
S'description'
p104250
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104251
sS'cpp_type'
p104252
S'std::vector<OutputName, std::allocator<OutputName> >'
p104253
sS'default'
p104254
g3
sS'name'
p104255
S'outputs'
p104256
sS'required'
p104257
I00
sS'group_name'
p104258
S'Advanced'
p104259
sa(dp104260
S'description'
p104261
g3
sS'cpp_type'
p104262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104263
sS'default'
p104264
S'SideFluxIntegral'
p104265
sS'name'
p104266
S'type'
p104267
sS'required'
p104268
I00
sS'group_name'
p104269
Nsa(dp104270
S'description'
p104271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104272
sS'cpp_type'
p104273
S'bool'
p104274
sS'default'
p104275
S'0'
p104276
sS'name'
p104277
S'use_displaced_mesh'
p104278
sS'required'
p104279
I00
sS'group_name'
p104280
S'Advanced'
p104281
sa(dp104282
S'description'
p104283
S'The name of the variable that this boundary condition applies to\n'
p104284
sS'cpp_type'
p104285
S'std::vector<VariableName>'
p104286
sS'default'
p104287
g3
sS'name'
p104288
S'variable'
p104289
sS'required'
p104290
I01
sS'group_name'
p104291
NsasS'name'
p104292
S'/Postprocessors/SideFluxIntegral'
p104293
sa(dp104294
S'description'
p104295
g3
sS'subblocks'
p104296
NsS'parameters'
p104297
(lp104298
(dp104299
S'description'
p104300
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104301
sS'cpp_type'
p104302
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104303
sS'default'
p104304
g3
sS'name'
p104305
S'boundary'
p104306
sS'required'
p104307
I01
sS'group_name'
p104308
Nsa(dp104309
S'description'
p104310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104311
sS'cpp_type'
p104312
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104313
sS'default'
p104314
g3
sS'name'
p104315
S'control_tags'
p104316
sS'required'
p104317
I00
sS'group_name'
p104318
S'Advanced'
p104319
sa(dp104320
S'description'
p104321
S'Set the enabled status of the MooseObject.\n'
p104322
sS'cpp_type'
p104323
S'bool'
p104324
sS'default'
p104325
S'1'
p104326
sS'name'
p104327
S'enable'
p104328
sS'required'
p104329
I00
sS'group_name'
p104330
S'Advanced'
p104331
sa(dp104332
S'name'
p104333
S'execute_on'
p104334
sS'cpp_type'
p104335
S'MultiMooseEnum'
p104336
sS'default'
p104337
S'TIMESTEP_END'
p104338
sS'description'
p104339
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104340
sS'required'
p104341
I00
sS'options'
p104342
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104343
sS'group_name'
p104344
Nsa(dp104345
S'description'
p104346
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104347
sS'cpp_type'
p104348
S'std::vector<OutputName, std::allocator<OutputName> >'
p104349
sS'default'
p104350
g3
sS'name'
p104351
S'outputs'
p104352
sS'required'
p104353
I00
sS'group_name'
p104354
S'Advanced'
p104355
sa(dp104356
S'description'
p104357
g3
sS'cpp_type'
p104358
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104359
sS'default'
p104360
S'SideIntegralVariablePostprocessor'
p104361
sS'name'
p104362
S'type'
p104363
sS'required'
p104364
I00
sS'group_name'
p104365
Nsa(dp104366
S'description'
p104367
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104368
sS'cpp_type'
p104369
S'bool'
p104370
sS'default'
p104371
S'0'
p104372
sS'name'
p104373
S'use_displaced_mesh'
p104374
sS'required'
p104375
I00
sS'group_name'
p104376
S'Advanced'
p104377
sa(dp104378
S'description'
p104379
S'The name of the variable that this boundary condition applies to\n'
p104380
sS'cpp_type'
p104381
S'std::vector<VariableName>'
p104382
sS'default'
p104383
g3
sS'name'
p104384
S'variable'
p104385
sS'required'
p104386
I01
sS'group_name'
p104387
NsasS'name'
p104388
S'/Postprocessors/SideIntegralVariablePostprocessor'
p104389
sa(dp104390
S'description'
p104391
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p104392
sS'subblocks'
p104393
NsS'parameters'
p104394
(lp104395
(dp104396
S'description'
p104397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104398
sS'cpp_type'
p104399
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104400
sS'default'
p104401
g3
sS'name'
p104402
S'control_tags'
p104403
sS'required'
p104404
I00
sS'group_name'
p104405
S'Advanced'
p104406
sa(dp104407
S'description'
p104408
S'Set the enabled status of the MooseObject.\n'
p104409
sS'cpp_type'
p104410
S'bool'
p104411
sS'default'
p104412
S'1'
p104413
sS'name'
p104414
S'enable'
p104415
sS'required'
p104416
I00
sS'group_name'
p104417
S'Advanced'
p104418
sa(dp104419
S'name'
p104420
S'execute_on'
p104421
sS'cpp_type'
p104422
S'MultiMooseEnum'
p104423
sS'default'
p104424
S'TIMESTEP_END'
p104425
sS'description'
p104426
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104427
sS'required'
p104428
I00
sS'options'
p104429
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104430
sS'group_name'
p104431
Nsa(dp104432
S'description'
p104433
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104434
sS'cpp_type'
p104435
S'std::vector<OutputName, std::allocator<OutputName> >'
p104436
sS'default'
p104437
g3
sS'name'
p104438
S'outputs'
p104439
sS'required'
p104440
I00
sS'group_name'
p104441
S'Advanced'
p104442
sa(dp104443
S'description'
p104444
S'The name of the postprocessor used for reporting time extreme values\n'
p104445
sS'cpp_type'
p104446
S'PostprocessorName'
p104447
sS'default'
p104448
g3
sS'name'
p104449
S'postprocessor'
p104450
sS'required'
p104451
I01
sS'group_name'
p104452
Nsa(dp104453
S'description'
p104454
g3
sS'cpp_type'
p104455
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104456
sS'default'
p104457
S'TimeExtremeValue'
p104458
sS'name'
p104459
S'type'
p104460
sS'required'
p104461
I00
sS'group_name'
p104462
Nsa(dp104463
S'description'
p104464
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104465
sS'cpp_type'
p104466
S'bool'
p104467
sS'default'
p104468
S'0'
p104469
sS'name'
p104470
S'use_displaced_mesh'
p104471
sS'required'
p104472
I00
sS'group_name'
p104473
S'Advanced'
p104474
sa(dp104475
S'name'
p104476
S'value_type'
p104477
sS'cpp_type'
p104478
S'MooseEnum'
p104479
sS'default'
p104480
S'max'
p104481
sS'description'
p104482
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p104483
sS'required'
p104484
I00
sS'options'
p104485
S'max min abs_max abs_min'
p104486
sS'group_name'
p104487
NsasS'name'
p104488
S'/Postprocessors/TimeExtremeValue'
p104489
sa(dp104490
S'description'
p104491
g3
sS'subblocks'
p104492
NsS'parameters'
p104493
(lp104494
(dp104495
S'description'
p104496
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104497
sS'cpp_type'
p104498
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104499
sS'default'
p104500
g3
sS'name'
p104501
S'control_tags'
p104502
sS'required'
p104503
I00
sS'group_name'
p104504
S'Advanced'
p104505
sa(dp104506
S'description'
p104507
S'Set the enabled status of the MooseObject.\n'
p104508
sS'cpp_type'
p104509
S'bool'
p104510
sS'default'
p104511
S'1'
p104512
sS'name'
p104513
S'enable'
p104514
sS'required'
p104515
I00
sS'group_name'
p104516
S'Advanced'
p104517
sa(dp104518
S'name'
p104519
S'execute_on'
p104520
sS'cpp_type'
p104521
S'MultiMooseEnum'
p104522
sS'default'
p104523
S'TIMESTEP_END'
p104524
sS'description'
p104525
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104526
sS'required'
p104527
I00
sS'options'
p104528
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104529
sS'group_name'
p104530
Nsa(dp104531
S'description'
p104532
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104533
sS'cpp_type'
p104534
S'std::vector<OutputName, std::allocator<OutputName> >'
p104535
sS'default'
p104536
g3
sS'name'
p104537
S'outputs'
p104538
sS'required'
p104539
I00
sS'group_name'
p104540
S'Advanced'
p104541
sa(dp104542
S'description'
p104543
g3
sS'cpp_type'
p104544
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104545
sS'default'
p104546
S'TimestepSize'
p104547
sS'name'
p104548
S'type'
p104549
sS'required'
p104550
I00
sS'group_name'
p104551
Nsa(dp104552
S'description'
p104553
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104554
sS'cpp_type'
p104555
S'bool'
p104556
sS'default'
p104557
S'0'
p104558
sS'name'
p104559
S'use_displaced_mesh'
p104560
sS'required'
p104561
I00
sS'group_name'
p104562
S'Advanced'
p104563
sasS'name'
p104564
S'/Postprocessors/TimestepSize'
p104565
sa(dp104566
S'description'
p104567
g3
sS'subblocks'
p104568
NsS'parameters'
p104569
(lp104570
(dp104571
S'description'
p104572
S'Origin of the axis of rotation used to calculate the torque\n'
p104573
sS'cpp_type'
p104574
S'libMesh::VectorValue<double>'
p104575
sS'default'
p104576
S'0 0 0'
p104577
sS'name'
p104578
S'axis_origin'
p104579
sS'required'
p104580
I00
sS'group_name'
p104581
Nsa(dp104582
S'description'
p104583
S'The list of block ids (SubdomainID) that this object will be applied\n'
p104584
sS'cpp_type'
p104585
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p104586
sS'default'
p104587
g3
sS'name'
p104588
S'block'
p104589
sS'required'
p104590
I00
sS'group_name'
p104591
Nsa(dp104592
S'description'
p104593
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104594
sS'cpp_type'
p104595
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104596
sS'default'
p104597
g3
sS'name'
p104598
S'boundary'
p104599
sS'required'
p104600
I00
sS'group_name'
p104601
Nsa(dp104602
S'description'
p104603
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104604
sS'cpp_type'
p104605
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104606
sS'default'
p104607
g3
sS'name'
p104608
S'control_tags'
p104609
sS'required'
p104610
I00
sS'group_name'
p104611
S'Advanced'
p104612
sa(dp104613
S'description'
p104614
S'The direction vector of the axis of rotation about which the calculated torque is calculated\n'
p104615
sS'cpp_type'
p104616
S'libMesh::VectorValue<double>'
p104617
sS'default'
p104618
g3
sS'name'
p104619
S'direction_vector'
p104620
sS'required'
p104621
I01
sS'group_name'
p104622
Nsa(dp104623
S'description'
p104624
S'Set the enabled status of the MooseObject.\n'
p104625
sS'cpp_type'
p104626
S'bool'
p104627
sS'default'
p104628
S'1'
p104629
sS'name'
p104630
S'enable'
p104631
sS'required'
p104632
I00
sS'group_name'
p104633
S'Advanced'
p104634
sa(dp104635
S'name'
p104636
S'execute_on'
p104637
sS'cpp_type'
p104638
S'MultiMooseEnum'
p104639
sS'default'
p104640
S'TIMESTEP_END'
p104641
sS'description'
p104642
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104643
sS'required'
p104644
I00
sS'options'
p104645
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104646
sS'group_name'
p104647
Nsa(dp104648
S'description'
p104649
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104650
sS'cpp_type'
p104651
S'std::vector<OutputName, std::allocator<OutputName> >'
p104652
sS'default'
p104653
g3
sS'name'
p104654
S'outputs'
p104655
sS'required'
p104656
I00
sS'group_name'
p104657
S'Advanced'
p104658
sa(dp104659
S'description'
p104660
S'The reaction variables\n'
p104661
sS'cpp_type'
p104662
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p104663
sS'default'
p104664
g3
sS'name'
p104665
S'react'
p104666
sS'required'
p104667
I01
sS'group_name'
p104668
Nsa(dp104669
S'description'
p104670
S'The seed for the master random number generator\n'
p104671
sS'cpp_type'
p104672
S'unsigned int'
p104673
sS'default'
p104674
S'0'
p104675
sS'name'
p104676
S'seed'
p104677
sS'required'
p104678
I00
sS'group_name'
p104679
S'Advanced'
p104680
sa(dp104681
S'description'
p104682
g3
sS'cpp_type'
p104683
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104684
sS'default'
p104685
S'TorqueReaction'
p104686
sS'name'
p104687
S'type'
p104688
sS'required'
p104689
I00
sS'group_name'
p104690
Nsa(dp104691
S'description'
p104692
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p104693
sS'cpp_type'
p104694
S'bool'
p104695
sS'default'
p104696
S'0'
p104697
sS'name'
p104698
S'unique_node_execute'
p104699
sS'required'
p104700
I00
sS'group_name'
p104701
Nsa(dp104702
S'description'
p104703
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104704
sS'cpp_type'
p104705
S'bool'
p104706
sS'default'
p104707
S'1'
p104708
sS'name'
p104709
S'use_displaced_mesh'
p104710
sS'required'
p104711
I00
sS'group_name'
p104712
S'Advanced'
p104713
sasS'name'
p104714
S'/Postprocessors/TorqueReaction'
p104715
sa(dp104716
S'description'
p104717
g3
sS'subblocks'
p104718
NsS'parameters'
p104719
(lp104720
(dp104721
S'description'
p104722
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104723
sS'cpp_type'
p104724
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104725
sS'default'
p104726
g3
sS'name'
p104727
S'control_tags'
p104728
sS'required'
p104729
I00
sS'group_name'
p104730
S'Advanced'
p104731
sa(dp104732
S'description'
p104733
S'Set the enabled status of the MooseObject.\n'
p104734
sS'cpp_type'
p104735
S'bool'
p104736
sS'default'
p104737
S'1'
p104738
sS'name'
p104739
S'enable'
p104740
sS'required'
p104741
I00
sS'group_name'
p104742
S'Advanced'
p104743
sa(dp104744
S'name'
p104745
S'execute_on'
p104746
sS'cpp_type'
p104747
S'MultiMooseEnum'
p104748
sS'default'
p104749
S'TIMESTEP_END'
p104750
sS'description'
p104751
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104752
sS'required'
p104753
I00
sS'options'
p104754
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104755
sS'group_name'
p104756
Nsa(dp104757
S'description'
p104758
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104759
sS'cpp_type'
p104760
S'std::vector<OutputName, std::allocator<OutputName> >'
p104761
sS'default'
p104762
g3
sS'name'
p104763
S'outputs'
p104764
sS'required'
p104765
I00
sS'group_name'
p104766
S'Advanced'
p104767
sa(dp104768
S'description'
p104769
g3
sS'cpp_type'
p104770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104771
sS'default'
p104772
S'TotalVariableValue'
p104773
sS'name'
p104774
S'type'
p104775
sS'required'
p104776
I00
sS'group_name'
p104777
Nsa(dp104778
S'description'
p104779
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104780
sS'cpp_type'
p104781
S'bool'
p104782
sS'default'
p104783
S'0'
p104784
sS'name'
p104785
S'use_displaced_mesh'
p104786
sS'required'
p104787
I00
sS'group_name'
p104788
S'Advanced'
p104789
sa(dp104790
S'description'
p104791
S'The name of the postprocessor\n'
p104792
sS'cpp_type'
p104793
S'PostprocessorName'
p104794
sS'default'
p104795
g3
sS'name'
p104796
S'value'
p104797
sS'required'
p104798
I00
sS'group_name'
p104799
NsasS'name'
p104800
S'/Postprocessors/TotalVariableValue'
p104801
sa(dp104802
S'description'
p104803
g3
sS'subblocks'
p104804
NsS'parameters'
p104805
(lp104806
(dp104807
S'description'
p104808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p104809
sS'cpp_type'
p104810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p104811
sS'default'
p104812
g3
sS'name'
p104813
S'block'
p104814
sS'required'
p104815
I00
sS'group_name'
p104816
Nsa(dp104817
S'description'
p104818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104819
sS'cpp_type'
p104820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104821
sS'default'
p104822
g3
sS'name'
p104823
S'control_tags'
p104824
sS'required'
p104825
I00
sS'group_name'
p104826
S'Advanced'
p104827
sa(dp104828
S'description'
p104829
S'Set the enabled status of the MooseObject.\n'
p104830
sS'cpp_type'
p104831
S'bool'
p104832
sS'default'
p104833
S'1'
p104834
sS'name'
p104835
S'enable'
p104836
sS'required'
p104837
I00
sS'group_name'
p104838
S'Advanced'
p104839
sa(dp104840
S'name'
p104841
S'execute_on'
p104842
sS'cpp_type'
p104843
S'MultiMooseEnum'
p104844
sS'default'
p104845
S'TIMESTEP_END'
p104846
sS'description'
p104847
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104848
sS'required'
p104849
I00
sS'options'
p104850
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104851
sS'group_name'
p104852
Nsa(dp104853
S'description'
p104854
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104855
sS'cpp_type'
p104856
S'std::vector<OutputName, std::allocator<OutputName> >'
p104857
sS'default'
p104858
g3
sS'name'
p104859
S'outputs'
p104860
sS'required'
p104861
I00
sS'group_name'
p104862
S'Advanced'
p104863
sa(dp104864
S'description'
p104865
S'The name of the second variable in the inner product (variable, second_variable)\n'
p104866
sS'cpp_type'
p104867
S'std::vector<VariableName>'
p104868
sS'default'
p104869
g3
sS'name'
p104870
S'second_variable'
p104871
sS'required'
p104872
I01
sS'group_name'
p104873
Nsa(dp104874
S'description'
p104875
S'The seed for the master random number generator\n'
p104876
sS'cpp_type'
p104877
S'unsigned int'
p104878
sS'default'
p104879
S'0'
p104880
sS'name'
p104881
S'seed'
p104882
sS'required'
p104883
I00
sS'group_name'
p104884
S'Advanced'
p104885
sa(dp104886
S'description'
p104887
g3
sS'cpp_type'
p104888
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104889
sS'default'
p104890
S'VariableInnerProduct'
p104891
sS'name'
p104892
S'type'
p104893
sS'required'
p104894
I00
sS'group_name'
p104895
Nsa(dp104896
S'description'
p104897
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104898
sS'cpp_type'
p104899
S'bool'
p104900
sS'default'
p104901
S'0'
p104902
sS'name'
p104903
S'use_displaced_mesh'
p104904
sS'required'
p104905
I00
sS'group_name'
p104906
S'Advanced'
p104907
sa(dp104908
S'description'
p104909
S'The name of the variable that this object operates on\n'
p104910
sS'cpp_type'
p104911
S'std::vector<VariableName>'
p104912
sS'default'
p104913
g3
sS'name'
p104914
S'variable'
p104915
sS'required'
p104916
I01
sS'group_name'
p104917
NsasS'name'
p104918
S'/Postprocessors/VariableInnerProduct'
p104919
sa(dp104920
S'description'
p104921
g3
sS'subblocks'
p104922
NsS'parameters'
p104923
(lp104924
(dp104925
S'description'
p104926
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104927
sS'cpp_type'
p104928
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104929
sS'default'
p104930
g3
sS'name'
p104931
S'control_tags'
p104932
sS'required'
p104933
I00
sS'group_name'
p104934
S'Advanced'
p104935
sa(dp104936
S'description'
p104937
S'Set the enabled status of the MooseObject.\n'
p104938
sS'cpp_type'
p104939
S'bool'
p104940
sS'default'
p104941
S'1'
p104942
sS'name'
p104943
S'enable'
p104944
sS'required'
p104945
I00
sS'group_name'
p104946
S'Advanced'
p104947
sa(dp104948
S'name'
p104949
S'execute_on'
p104950
sS'cpp_type'
p104951
S'MultiMooseEnum'
p104952
sS'default'
p104953
S'TIMESTEP_END'
p104954
sS'description'
p104955
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104956
sS'required'
p104957
I00
sS'options'
p104958
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104959
sS'group_name'
p104960
Nsa(dp104961
S'description'
p104962
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104963
sS'cpp_type'
p104964
S'std::vector<OutputName, std::allocator<OutputName> >'
p104965
sS'default'
p104966
g3
sS'name'
p104967
S'outputs'
p104968
sS'required'
p104969
I00
sS'group_name'
p104970
S'Advanced'
p104971
sa(dp104972
S'description'
p104973
g3
sS'cpp_type'
p104974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104975
sS'default'
p104976
S'VariableResidual'
p104977
sS'name'
p104978
S'type'
p104979
sS'required'
p104980
I00
sS'group_name'
p104981
Nsa(dp104982
S'description'
p104983
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104984
sS'cpp_type'
p104985
S'bool'
p104986
sS'default'
p104987
S'0'
p104988
sS'name'
p104989
S'use_displaced_mesh'
p104990
sS'required'
p104991
I00
sS'group_name'
p104992
S'Advanced'
p104993
sa(dp104994
S'description'
p104995
S'The name of the variable to compute the residual for\n'
p104996
sS'cpp_type'
p104997
S'VariableName'
p104998
sS'default'
p104999
g3
sS'name'
p105000
S'variable'
p105001
sS'required'
p105002
I01
sS'group_name'
p105003
NsasS'name'
p105004
S'/Postprocessors/VariableResidual'
p105005
sa(dp105006
S'description'
p105007
g3
sS'subblocks'
p105008
NsS'parameters'
p105009
(lp105010
(dp105011
S'description'
p105012
S'The list of block ids (SubdomainID) that this object will be applied\n'
p105013
sS'cpp_type'
p105014
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105015
sS'default'
p105016
g3
sS'name'
p105017
S'block'
p105018
sS'required'
p105019
I00
sS'group_name'
p105020
Nsa(dp105021
S'description'
p105022
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105023
sS'cpp_type'
p105024
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105025
sS'default'
p105026
g3
sS'name'
p105027
S'control_tags'
p105028
sS'required'
p105029
I00
sS'group_name'
p105030
S'Advanced'
p105031
sa(dp105032
S'description'
p105033
S'Set the enabled status of the MooseObject.\n'
p105034
sS'cpp_type'
p105035
S'bool'
p105036
sS'default'
p105037
S'1'
p105038
sS'name'
p105039
S'enable'
p105040
sS'required'
p105041
I00
sS'group_name'
p105042
S'Advanced'
p105043
sa(dp105044
S'name'
p105045
S'execute_on'
p105046
sS'cpp_type'
p105047
S'MultiMooseEnum'
p105048
sS'default'
p105049
S'TIMESTEP_END'
p105050
sS'description'
p105051
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105052
sS'required'
p105053
I00
sS'options'
p105054
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105055
sS'group_name'
p105056
Nsa(dp105057
S'description'
p105058
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105059
sS'cpp_type'
p105060
S'std::vector<OutputName, std::allocator<OutputName> >'
p105061
sS'default'
p105062
g3
sS'name'
p105063
S'outputs'
p105064
sS'required'
p105065
I00
sS'group_name'
p105066
S'Advanced'
p105067
sa(dp105068
S'description'
p105069
S'The seed for the master random number generator\n'
p105070
sS'cpp_type'
p105071
S'unsigned int'
p105072
sS'default'
p105073
S'0'
p105074
sS'name'
p105075
S'seed'
p105076
sS'required'
p105077
I00
sS'group_name'
p105078
S'Advanced'
p105079
sa(dp105080
S'description'
p105081
g3
sS'cpp_type'
p105082
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105083
sS'default'
p105084
S'VolumePostprocessor'
p105085
sS'name'
p105086
S'type'
p105087
sS'required'
p105088
I00
sS'group_name'
p105089
Nsa(dp105090
S'description'
p105091
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105092
sS'cpp_type'
p105093
S'bool'
p105094
sS'default'
p105095
S'0'
p105096
sS'name'
p105097
S'use_displaced_mesh'
p105098
sS'required'
p105099
I00
sS'group_name'
p105100
S'Advanced'
p105101
sasS'name'
p105102
S'/Postprocessors/VolumePostprocessor'
p105103
sasS'parameters'
p105104
NsS'name'
p105105
S'/Postprocessors'
p105106
sa(dp105107
S'description'
p105108
g3
sS'subblocks'
p105109
(lp105110
(dp105111
S'description'
p105112
g3
sS'subblocks'
p105113
(lp105114
(dp105115
S'description'
p105116
g3
sS'subblocks'
p105117
NsS'parameters'
p105118
(lp105119
(dp105120
S'name'
p105121
S'petsc_options'
p105122
sS'cpp_type'
p105123
S'MultiMooseEnum'
p105124
sS'default'
p105125
g3
sS'description'
p105126
S'Singleton PETSc options\n'
p105127
sS'required'
p105128
I00
sS'options'
p105129
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105130
sS'group_name'
p105131
Nsa(dp105132
S'name'
p105133
S'petsc_options_iname'
p105134
sS'cpp_type'
p105135
S'MultiMooseEnum'
p105136
sS'default'
p105137
g3
sS'description'
p105138
S'Names of PETSc name/value pairs\n'
p105139
sS'required'
p105140
I00
sS'options'
p105141
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105142
sS'group_name'
p105143
Nsa(dp105144
S'description'
p105145
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105146
sS'cpp_type'
p105147
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105148
sS'default'
p105149
g3
sS'name'
p105150
S'petsc_options_value'
p105151
sS'required'
p105152
I00
sS'group_name'
p105153
Nsa(dp105154
S'description'
p105155
S'Classname of the split object\n'
p105156
sS'cpp_type'
p105157
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105158
sS'default'
p105159
S'Split'
p105160
sS'name'
p105161
S'type'
p105162
sS'required'
p105163
I01
sS'group_name'
p105164
Nsa(dp105165
S'description'
p105166
S'variables for this field\n'
p105167
sS'cpp_type'
p105168
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105169
sS'default'
p105170
g3
sS'name'
p105171
S'vars'
p105172
sS'required'
p105173
I00
sS'group_name'
p105174
NsasS'name'
p105175
S'/Preconditioning/*/*'
p105176
sa(dp105177
S'description'
p105178
g3
sS'subblocks'
p105179
NsS'parameters'
p105180
(lp105181
(dp105182
S'description'
p105183
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p105184
sS'cpp_type'
p105185
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105186
sS'default'
p105187
g3
sS'name'
p105188
S'blocks'
p105189
sS'required'
p105190
I00
sS'group_name'
p105191
Nsa(dp105192
S'description'
p105193
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105194
sS'cpp_type'
p105195
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105196
sS'default'
p105197
g3
sS'name'
p105198
S'control_tags'
p105199
sS'required'
p105200
I00
sS'group_name'
p105201
S'Advanced'
p105202
sa(dp105203
S'description'
p105204
S'Set the enabled status of the MooseObject.\n'
p105205
sS'cpp_type'
p105206
S'bool'
p105207
sS'default'
p105208
S'1'
p105209
sS'name'
p105210
S'enable'
p105211
sS'required'
p105212
I00
sS'group_name'
p105213
S'Advanced'
p105214
sa(dp105215
S'name'
p105216
S'petsc_options'
p105217
sS'cpp_type'
p105218
S'MultiMooseEnum'
p105219
sS'default'
p105220
g3
sS'description'
p105221
S'PETSc flags for the FieldSplit solver\n'
p105222
sS'required'
p105223
I00
sS'options'
p105224
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105225
sS'group_name'
p105226
Nsa(dp105227
S'description'
p105228
S'PETSc option names for the FieldSplit solver\n'
p105229
sS'cpp_type'
p105230
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105231
sS'default'
p105232
g3
sS'name'
p105233
S'petsc_options_iname'
p105234
sS'required'
p105235
I00
sS'group_name'
p105236
Nsa(dp105237
S'description'
p105238
S'PETSc option values for the FieldSplit solver\n'
p105239
sS'cpp_type'
p105240
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105241
sS'default'
p105242
g3
sS'name'
p105243
S'petsc_options_value'
p105244
sS'required'
p105245
I00
sS'group_name'
p105246
Nsa(dp105247
S'name'
p105248
S'schur_ainv'
p105249
sS'cpp_type'
p105250
S'MooseEnum'
p105251
sS'default'
p105252
S'diag'
p105253
sS'description'
p105254
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p105255
sS'required'
p105256
I00
sS'options'
p105257
S'diag lump'
p105258
sS'group_name'
p105259
Nsa(dp105260
S'name'
p105261
S'schur_pre'
p105262
sS'cpp_type'
p105263
S'MooseEnum'
p105264
sS'default'
p105265
S'S'
p105266
sS'description'
p105267
S'Type of Schur complement preconditioner matrix\n'
p105268
sS'required'
p105269
I00
sS'options'
p105270
S'S Sp A11'
p105271
sS'group_name'
p105272
Nsa(dp105273
S'name'
p105274
S'schur_type'
p105275
sS'cpp_type'
p105276
S'MooseEnum'
p105277
sS'default'
p105278
S'full'
p105279
sS'description'
p105280
S'Type of Schur complement\n'
p105281
sS'required'
p105282
I00
sS'options'
p105283
S'full upper lower'
p105284
sS'group_name'
p105285
Nsa(dp105286
S'description'
p105287
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p105288
sS'cpp_type'
p105289
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p105290
sS'default'
p105291
g3
sS'name'
p105292
S'sides'
p105293
sS'required'
p105294
I00
sS'group_name'
p105295
Nsa(dp105296
S'description'
p105297
S'The names of the splits (subsystems) in the decomposition of this split\n'
p105298
sS'cpp_type'
p105299
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105300
sS'default'
p105301
g3
sS'name'
p105302
S'splitting'
p105303
sS'required'
p105304
I00
sS'group_name'
p105305
Nsa(dp105306
S'name'
p105307
S'splitting_type'
p105308
sS'cpp_type'
p105309
S'MooseEnum'
p105310
sS'default'
p105311
S'additive'
p105312
sS'description'
p105313
S'Split decomposition type\n'
p105314
sS'required'
p105315
I00
sS'options'
p105316
S'additive multiplicative symmetric_multiplicative schur'
p105317
sS'group_name'
p105318
Nsa(dp105319
S'description'
p105320
g3
sS'cpp_type'
p105321
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105322
sS'default'
p105323
S'Split'
p105324
sS'name'
p105325
S'type'
p105326
sS'required'
p105327
I00
sS'group_name'
p105328
Nsa(dp105329
S'description'
p105330
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p105331
sS'cpp_type'
p105332
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p105333
sS'default'
p105334
g3
sS'name'
p105335
S'unsides'
p105336
sS'required'
p105337
I00
sS'group_name'
p105338
Nsa(dp105339
S'description'
p105340
S'Variables Split operates on (omitting this implies "all variables"\n'
p105341
sS'cpp_type'
p105342
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105343
sS'default'
p105344
g3
sS'name'
p105345
S'vars'
p105346
sS'required'
p105347
I00
sS'group_name'
p105348
NsasS'name'
p105349
S'/Preconditioning/*/Split'
p105350
sasS'parameters'
p105351
(lp105352
(dp105353
S'description'
p105354
S'A string representing the Moose Object that will be built by this Action\n'
p105355
sS'cpp_type'
p105356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105357
sS'default'
p105358
g3
sS'name'
p105359
S'type'
p105360
sS'required'
p105361
I01
sS'group_name'
p105362
NsasS'name'
p105363
S'/Preconditioning/*'
p105364
sa(dp105365
S'description'
p105366
g3
sS'subblocks'
p105367
NsS'parameters'
p105368
(lp105369
(dp105370
S'description'
p105371
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105372
sS'cpp_type'
p105373
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105374
sS'default'
p105375
g3
sS'name'
p105376
S'control_tags'
p105377
sS'required'
p105378
I00
sS'group_name'
p105379
S'Advanced'
p105380
sa(dp105381
S'description'
p105382
S'Set the enabled status of the MooseObject.\n'
p105383
sS'cpp_type'
p105384
S'bool'
p105385
sS'default'
p105386
S'1'
p105387
sS'name'
p105388
S'enable'
p105389
sS'required'
p105390
I00
sS'group_name'
p105391
S'Advanced'
p105392
sa(dp105393
S'description'
p105394
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105395
sS'cpp_type'
p105396
S'bool'
p105397
sS'default'
p105398
S'0'
p105399
sS'name'
p105400
S'full'
p105401
sS'required'
p105402
I00
sS'group_name'
p105403
Nsa(dp105404
S'description'
p105405
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p105406
sS'cpp_type'
p105407
S'bool'
p105408
sS'default'
p105409
S'0'
p105410
sS'name'
p105411
S'implicit_geometric_coupling'
p105412
sS'required'
p105413
I00
sS'group_name'
p105414
Nsa(dp105415
S'name'
p105416
S'ksp_norm'
p105417
sS'cpp_type'
p105418
S'MooseEnum'
p105419
sS'default'
p105420
S'unpreconditioned'
p105421
sS'description'
p105422
S'Sets the norm that is used for convergence testing\n'
p105423
sS'required'
p105424
I00
sS'options'
p105425
S'none preconditioned unpreconditioned natural default'
p105426
sS'group_name'
p105427
Nsa(dp105428
S'name'
p105429
S'line_search'
p105430
sS'cpp_type'
p105431
S'MooseEnum'
p105432
sS'default'
p105433
S'default'
p105434
sS'description'
p105435
S'Specifies the line search type (Note: none = basic)\n'
p105436
sS'required'
p105437
I00
sS'options'
p105438
S'default shell none basic l2 bt cp'
p105439
sS'group_name'
p105440
Nsa(dp105441
S'description'
p105442
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105443
sS'cpp_type'
p105444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105445
sS'default'
p105446
g3
sS'name'
p105447
S'off_diag_column'
p105448
sS'required'
p105449
I00
sS'group_name'
p105450
Nsa(dp105451
S'description'
p105452
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105453
sS'cpp_type'
p105454
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105455
sS'default'
p105456
g3
sS'name'
p105457
S'off_diag_row'
p105458
sS'required'
p105459
I00
sS'group_name'
p105460
Nsa(dp105461
S'name'
p105462
S'pc_side'
p105463
sS'cpp_type'
p105464
S'MooseEnum'
p105465
sS'default'
p105466
S'default'
p105467
sS'description'
p105468
S'Preconditioning side\n'
p105469
sS'required'
p105470
I00
sS'options'
p105471
S'left right symmetric default'
p105472
sS'group_name'
p105473
Nsa(dp105474
S'name'
p105475
S'petsc_options'
p105476
sS'cpp_type'
p105477
S'MultiMooseEnum'
p105478
sS'default'
p105479
g3
sS'description'
p105480
S'Singleton PETSc options\n'
p105481
sS'required'
p105482
I00
sS'options'
p105483
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105484
sS'group_name'
p105485
Nsa(dp105486
S'name'
p105487
S'petsc_options_iname'
p105488
sS'cpp_type'
p105489
S'MultiMooseEnum'
p105490
sS'default'
p105491
g3
sS'description'
p105492
S'Names of PETSc name/value pairs\n'
p105493
sS'required'
p105494
I00
sS'options'
p105495
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105496
sS'group_name'
p105497
Nsa(dp105498
S'description'
p105499
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105500
sS'cpp_type'
p105501
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105502
sS'default'
p105503
g3
sS'name'
p105504
S'petsc_options_value'
p105505
sS'required'
p105506
I00
sS'group_name'
p105507
Nsa(dp105508
S'name'
p105509
S'solve_type'
p105510
sS'cpp_type'
p105511
S'MooseEnum'
p105512
sS'default'
p105513
g3
sS'description'
p105514
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105515
sS'required'
p105516
I00
sS'options'
p105517
S'PJFNK JFNK NEWTON FD LINEAR'
p105518
sS'group_name'
p105519
Nsa(dp105520
S'description'
p105521
g3
sS'cpp_type'
p105522
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105523
sS'default'
p105524
S'FDP'
p105525
sS'name'
p105526
S'type'
p105527
sS'required'
p105528
I00
sS'group_name'
p105529
NsasS'name'
p105530
S'/Preconditioning/FDP'
p105531
sa(dp105532
S'description'
p105533
g3
sS'subblocks'
p105534
NsS'parameters'
p105535
(lp105536
(dp105537
S'description'
p105538
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105539
sS'cpp_type'
p105540
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105541
sS'default'
p105542
g3
sS'name'
p105543
S'control_tags'
p105544
sS'required'
p105545
I00
sS'group_name'
p105546
S'Advanced'
p105547
sa(dp105548
S'description'
p105549
S'Set the enabled status of the MooseObject.\n'
p105550
sS'cpp_type'
p105551
S'bool'
p105552
sS'default'
p105553
S'1'
p105554
sS'name'
p105555
S'enable'
p105556
sS'required'
p105557
I00
sS'group_name'
p105558
S'Advanced'
p105559
sa(dp105560
S'description'
p105561
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105562
sS'cpp_type'
p105563
S'bool'
p105564
sS'default'
p105565
S'1'
p105566
sS'name'
p105567
S'full'
p105568
sS'required'
p105569
I00
sS'group_name'
p105570
Nsa(dp105571
S'name'
p105572
S'ksp_norm'
p105573
sS'cpp_type'
p105574
S'MooseEnum'
p105575
sS'default'
p105576
S'unpreconditioned'
p105577
sS'description'
p105578
S'Sets the norm that is used for convergence testing\n'
p105579
sS'required'
p105580
I00
sS'options'
p105581
S'none preconditioned unpreconditioned natural default'
p105582
sS'group_name'
p105583
Nsa(dp105584
S'name'
p105585
S'line_search'
p105586
sS'cpp_type'
p105587
S'MooseEnum'
p105588
sS'default'
p105589
S'default'
p105590
sS'description'
p105591
S'Specifies the line search type (Note: none = basic)\n'
p105592
sS'required'
p105593
I00
sS'options'
p105594
S'default shell none basic l2 bt cp'
p105595
sS'group_name'
p105596
Nsa(dp105597
S'description'
p105598
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105599
sS'cpp_type'
p105600
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105601
sS'default'
p105602
g3
sS'name'
p105603
S'off_diag_column'
p105604
sS'required'
p105605
I00
sS'group_name'
p105606
Nsa(dp105607
S'description'
p105608
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105609
sS'cpp_type'
p105610
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105611
sS'default'
p105612
g3
sS'name'
p105613
S'off_diag_row'
p105614
sS'required'
p105615
I00
sS'group_name'
p105616
Nsa(dp105617
S'name'
p105618
S'pc_side'
p105619
sS'cpp_type'
p105620
S'MooseEnum'
p105621
sS'default'
p105622
S'default'
p105623
sS'description'
p105624
S'Preconditioning side\n'
p105625
sS'required'
p105626
I00
sS'options'
p105627
S'left right symmetric default'
p105628
sS'group_name'
p105629
Nsa(dp105630
S'name'
p105631
S'petsc_options'
p105632
sS'cpp_type'
p105633
S'MultiMooseEnum'
p105634
sS'default'
p105635
g3
sS'description'
p105636
S'Singleton PETSc options\n'
p105637
sS'required'
p105638
I00
sS'options'
p105639
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105640
sS'group_name'
p105641
Nsa(dp105642
S'name'
p105643
S'petsc_options_iname'
p105644
sS'cpp_type'
p105645
S'MultiMooseEnum'
p105646
sS'default'
p105647
g3
sS'description'
p105648
S'Names of PETSc name/value pairs\n'
p105649
sS'required'
p105650
I00
sS'options'
p105651
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105652
sS'group_name'
p105653
Nsa(dp105654
S'description'
p105655
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105656
sS'cpp_type'
p105657
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105658
sS'default'
p105659
g3
sS'name'
p105660
S'petsc_options_value'
p105661
sS'required'
p105662
I00
sS'group_name'
p105663
Nsa(dp105664
S'name'
p105665
S'solve_type'
p105666
sS'cpp_type'
p105667
S'MooseEnum'
p105668
sS'default'
p105669
g3
sS'description'
p105670
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105671
sS'required'
p105672
I00
sS'options'
p105673
S'PJFNK JFNK NEWTON FD LINEAR'
p105674
sS'group_name'
p105675
Nsa(dp105676
S'description'
p105677
S'entrance to splits, the top split will specify how splits will go.\n'
p105678
sS'cpp_type'
p105679
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105680
sS'default'
p105681
g3
sS'name'
p105682
S'topsplit'
p105683
sS'required'
p105684
I01
sS'group_name'
p105685
Nsa(dp105686
S'description'
p105687
g3
sS'cpp_type'
p105688
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105689
sS'default'
p105690
S'FSP'
p105691
sS'name'
p105692
S'type'
p105693
sS'required'
p105694
I00
sS'group_name'
p105695
NsasS'name'
p105696
S'/Preconditioning/FSP'
p105697
sa(dp105698
S'description'
p105699
g3
sS'subblocks'
p105700
NsS'parameters'
p105701
(lp105702
(dp105703
S'description'
p105704
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105705
sS'cpp_type'
p105706
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105707
sS'default'
p105708
g3
sS'name'
p105709
S'control_tags'
p105710
sS'required'
p105711
I00
sS'group_name'
p105712
S'Advanced'
p105713
sa(dp105714
S'description'
p105715
S'Set the enabled status of the MooseObject.\n'
p105716
sS'cpp_type'
p105717
S'bool'
p105718
sS'default'
p105719
S'1'
p105720
sS'name'
p105721
S'enable'
p105722
sS'required'
p105723
I00
sS'group_name'
p105724
S'Advanced'
p105725
sa(dp105726
S'name'
p105727
S'ksp_norm'
p105728
sS'cpp_type'
p105729
S'MooseEnum'
p105730
sS'default'
p105731
S'unpreconditioned'
p105732
sS'description'
p105733
S'Sets the norm that is used for convergence testing\n'
p105734
sS'required'
p105735
I00
sS'options'
p105736
S'none preconditioned unpreconditioned natural default'
p105737
sS'group_name'
p105738
Nsa(dp105739
S'name'
p105740
S'line_search'
p105741
sS'cpp_type'
p105742
S'MooseEnum'
p105743
sS'default'
p105744
S'default'
p105745
sS'description'
p105746
S'Specifies the line search type (Note: none = basic)\n'
p105747
sS'required'
p105748
I00
sS'options'
p105749
S'default shell none basic l2 bt cp'
p105750
sS'group_name'
p105751
Nsa(dp105752
S'description'
p105753
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105754
sS'cpp_type'
p105755
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105756
sS'default'
p105757
g3
sS'name'
p105758
S'off_diag_column'
p105759
sS'required'
p105760
I00
sS'group_name'
p105761
Nsa(dp105762
S'description'
p105763
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105764
sS'cpp_type'
p105765
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105766
sS'default'
p105767
g3
sS'name'
p105768
S'off_diag_row'
p105769
sS'required'
p105770
I00
sS'group_name'
p105771
Nsa(dp105772
S'name'
p105773
S'pc_side'
p105774
sS'cpp_type'
p105775
S'MooseEnum'
p105776
sS'default'
p105777
S'default'
p105778
sS'description'
p105779
S'Preconditioning side\n'
p105780
sS'required'
p105781
I00
sS'options'
p105782
S'left right symmetric default'
p105783
sS'group_name'
p105784
Nsa(dp105785
S'name'
p105786
S'petsc_options'
p105787
sS'cpp_type'
p105788
S'MultiMooseEnum'
p105789
sS'default'
p105790
g3
sS'description'
p105791
S'Singleton PETSc options\n'
p105792
sS'required'
p105793
I00
sS'options'
p105794
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105795
sS'group_name'
p105796
Nsa(dp105797
S'name'
p105798
S'petsc_options_iname'
p105799
sS'cpp_type'
p105800
S'MultiMooseEnum'
p105801
sS'default'
p105802
g3
sS'description'
p105803
S'Names of PETSc name/value pairs\n'
p105804
sS'required'
p105805
I00
sS'options'
p105806
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105807
sS'group_name'
p105808
Nsa(dp105809
S'description'
p105810
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105811
sS'cpp_type'
p105812
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105813
sS'default'
p105814
g3
sS'name'
p105815
S'petsc_options_value'
p105816
sS'required'
p105817
I00
sS'group_name'
p105818
Nsa(dp105819
S'description'
p105820
S'TODO: docstring\n'
p105821
sS'cpp_type'
p105822
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105823
sS'default'
p105824
g3
sS'name'
p105825
S'preconditioner'
p105826
sS'required'
p105827
I01
sS'group_name'
p105828
Nsa(dp105829
S'description'
p105830
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p105831
sS'cpp_type'
p105832
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105833
sS'default'
p105834
g3
sS'name'
p105835
S'solve_order'
p105836
sS'required'
p105837
I01
sS'group_name'
p105838
Nsa(dp105839
S'name'
p105840
S'solve_type'
p105841
sS'cpp_type'
p105842
S'MooseEnum'
p105843
sS'default'
p105844
g3
sS'description'
p105845
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105846
sS'required'
p105847
I00
sS'options'
p105848
S'PJFNK JFNK NEWTON FD LINEAR'
p105849
sS'group_name'
p105850
Nsa(dp105851
S'description'
p105852
g3
sS'cpp_type'
p105853
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105854
sS'default'
p105855
S'PBP'
p105856
sS'name'
p105857
S'type'
p105858
sS'required'
p105859
I00
sS'group_name'
p105860
NsasS'name'
p105861
S'/Preconditioning/PBP'
p105862
sa(dp105863
S'description'
p105864
g3
sS'subblocks'
p105865
NsS'parameters'
p105866
(lp105867
(dp105868
S'description'
p105869
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105870
sS'cpp_type'
p105871
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105872
sS'default'
p105873
g3
sS'name'
p105874
S'control_tags'
p105875
sS'required'
p105876
I00
sS'group_name'
p105877
S'Advanced'
p105878
sa(dp105879
S'description'
p105880
S'List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n'
p105881
sS'cpp_type'
p105882
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105883
sS'default'
p105884
g3
sS'name'
p105885
S'coupled_groups'
p105886
sS'required'
p105887
I00
sS'group_name'
p105888
Nsa(dp105889
S'description'
p105890
S'Set the enabled status of the MooseObject.\n'
p105891
sS'cpp_type'
p105892
S'bool'
p105893
sS'default'
p105894
S'1'
p105895
sS'name'
p105896
S'enable'
p105897
sS'required'
p105898
I00
sS'group_name'
p105899
S'Advanced'
p105900
sa(dp105901
S'description'
p105902
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105903
sS'cpp_type'
p105904
S'bool'
p105905
sS'default'
p105906
S'0'
p105907
sS'name'
p105908
S'full'
p105909
sS'required'
p105910
I00
sS'group_name'
p105911
Nsa(dp105912
S'name'
p105913
S'ksp_norm'
p105914
sS'cpp_type'
p105915
S'MooseEnum'
p105916
sS'default'
p105917
S'unpreconditioned'
p105918
sS'description'
p105919
S'Sets the norm that is used for convergence testing\n'
p105920
sS'required'
p105921
I00
sS'options'
p105922
S'none preconditioned unpreconditioned natural default'
p105923
sS'group_name'
p105924
Nsa(dp105925
S'name'
p105926
S'line_search'
p105927
sS'cpp_type'
p105928
S'MooseEnum'
p105929
sS'default'
p105930
S'default'
p105931
sS'description'
p105932
S'Specifies the line search type (Note: none = basic)\n'
p105933
sS'required'
p105934
I00
sS'options'
p105935
S'default shell none basic l2 bt cp'
p105936
sS'group_name'
p105937
Nsa(dp105938
S'description'
p105939
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105940
sS'cpp_type'
p105941
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105942
sS'default'
p105943
g3
sS'name'
p105944
S'off_diag_column'
p105945
sS'required'
p105946
I00
sS'group_name'
p105947
Nsa(dp105948
S'description'
p105949
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105950
sS'cpp_type'
p105951
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105952
sS'default'
p105953
g3
sS'name'
p105954
S'off_diag_row'
p105955
sS'required'
p105956
I00
sS'group_name'
p105957
Nsa(dp105958
S'name'
p105959
S'pc_side'
p105960
sS'cpp_type'
p105961
S'MooseEnum'
p105962
sS'default'
p105963
S'default'
p105964
sS'description'
p105965
S'Preconditioning side\n'
p105966
sS'required'
p105967
I00
sS'options'
p105968
S'left right symmetric default'
p105969
sS'group_name'
p105970
Nsa(dp105971
S'name'
p105972
S'petsc_options'
p105973
sS'cpp_type'
p105974
S'MultiMooseEnum'
p105975
sS'default'
p105976
g3
sS'description'
p105977
S'Singleton PETSc options\n'
p105978
sS'required'
p105979
I00
sS'options'
p105980
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105981
sS'group_name'
p105982
Nsa(dp105983
S'name'
p105984
S'petsc_options_iname'
p105985
sS'cpp_type'
p105986
S'MultiMooseEnum'
p105987
sS'default'
p105988
g3
sS'description'
p105989
S'Names of PETSc name/value pairs\n'
p105990
sS'required'
p105991
I00
sS'options'
p105992
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105993
sS'group_name'
p105994
Nsa(dp105995
S'description'
p105996
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105997
sS'cpp_type'
p105998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105999
sS'default'
p106000
g3
sS'name'
p106001
S'petsc_options_value'
p106002
sS'required'
p106003
I00
sS'group_name'
p106004
Nsa(dp106005
S'name'
p106006
S'solve_type'
p106007
sS'cpp_type'
p106008
S'MooseEnum'
p106009
sS'default'
p106010
g3
sS'description'
p106011
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p106012
sS'required'
p106013
I00
sS'options'
p106014
S'PJFNK JFNK NEWTON FD LINEAR'
p106015
sS'group_name'
p106016
Nsa(dp106017
S'description'
p106018
g3
sS'cpp_type'
p106019
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106020
sS'default'
p106021
S'SMP'
p106022
sS'name'
p106023
S'type'
p106024
sS'required'
p106025
I00
sS'group_name'
p106026
NsasS'name'
p106027
S'/Preconditioning/SMP'
p106028
sasS'parameters'
p106029
NsS'name'
p106030
S'/Preconditioning'
p106031
sa(dp106032
S'description'
p106033
g3
sS'subblocks'
p106034
(lp106035
(dp106036
S'description'
p106037
g3
sS'subblocks'
p106038
(lp106039
(dp106040
S'description'
p106041
g3
sS'subblocks'
p106042
NsS'parameters'
p106043
(lp106044
(dp106045
S'description'
p106046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106047
sS'cpp_type'
p106048
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106049
sS'default'
p106050
g3
sS'name'
p106051
S'control_tags'
p106052
sS'required'
p106053
I00
sS'group_name'
p106054
S'Advanced'
p106055
sa(dp106056
S'description'
p106057
S'Set the enabled status of the MooseObject.\n'
p106058
sS'cpp_type'
p106059
S'bool'
p106060
sS'default'
p106061
S'1'
p106062
sS'name'
p106063
S'enable'
p106064
sS'required'
p106065
I00
sS'group_name'
p106066
S'Advanced'
p106067
sa(dp106068
S'description'
p106069
g3
sS'cpp_type'
p106070
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106071
sS'default'
p106072
S'DisplacedProblem'
p106073
sS'name'
p106074
S'type'
p106075
sS'required'
p106076
I00
sS'group_name'
p106077
NsasS'name'
p106078
S'/Problem/<type>/DisplacedProblem'
p106079
sa(dp106080
S'description'
p106081
g3
sS'subblocks'
p106082
NsS'parameters'
p106083
(lp106084
(dp106085
S'description'
p106086
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106087
sS'cpp_type'
p106088
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106089
sS'default'
p106090
g3
sS'name'
p106091
S'control_tags'
p106092
sS'required'
p106093
I00
sS'group_name'
p106094
S'Advanced'
p106095
sa(dp106096
S'description'
p106097
S'Set the enabled status of the MooseObject.\n'
p106098
sS'cpp_type'
p106099
S'bool'
p106100
sS'default'
p106101
S'1'
p106102
sS'name'
p106103
S'enable'
p106104
sS'required'
p106105
I00
sS'group_name'
p106106
S'Advanced'
p106107
sa(dp106108
S'description'
p106109
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106110
sS'cpp_type'
p106111
S'bool'
p106112
sS'default'
p106113
S'0'
p106114
sS'name'
p106115
S'error_on_jacobian_nonzero_reallocation'
p106116
sS'required'
p106117
I00
sS'group_name'
p106118
Nsa(dp106119
S'description'
p106120
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p106121
sS'cpp_type'
p106122
S'bool'
p106123
sS'default'
p106124
S'0'
p106125
sS'name'
p106126
S'force_restart'
p106127
sS'required'
p106128
I00
sS'group_name'
p106129
Nsa(dp106130
S'description'
p106131
S'The dimension of eigen subspaces\n'
p106132
sS'cpp_type'
p106133
S'unsigned int'
p106134
sS'default'
p106135
S'3'
p106136
sS'name'
p106137
S'n_basis_vectors'
p106138
sS'required'
p106139
I00
sS'group_name'
p106140
Nsa(dp106141
S'description'
p106142
S'The number of eigen pairs\n'
p106143
sS'cpp_type'
p106144
S'unsigned int'
p106145
sS'default'
p106146
S'1'
p106147
sS'name'
p106148
S'n_eigen_pairs'
p106149
sS'required'
p106150
I00
sS'group_name'
p106151
Nsa(dp106152
S'description'
p106153
S'The dimension of the near nullspace\n'
p106154
sS'cpp_type'
p106155
S'unsigned int'
p106156
sS'default'
p106157
S'0'
p106158
sS'name'
p106159
S'near_null_space_dimension'
p106160
sS'required'
p106161
I00
sS'group_name'
p106162
Nsa(dp106163
S'description'
p106164
S'The dimension of the nullspace\n'
p106165
sS'cpp_type'
p106166
S'unsigned int'
p106167
sS'default'
p106168
S'0'
p106169
sS'name'
p106170
S'null_space_dimension'
p106171
sS'required'
p106172
I00
sS'group_name'
p106173
Nsa(dp106174
S'description'
p106175
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106176
sS'cpp_type'
p106177
S'bool'
p106178
sS'default'
p106179
S'1'
p106180
sS'name'
p106181
S'solve'
p106182
sS'required'
p106183
I00
sS'group_name'
p106184
Nsa(dp106185
S'description'
p106186
S'The dimension of the transpose nullspace\n'
p106187
sS'cpp_type'
p106188
S'unsigned int'
p106189
sS'default'
p106190
S'0'
p106191
sS'name'
p106192
S'transpose_null_space_dimension'
p106193
sS'required'
p106194
I00
sS'group_name'
p106195
Nsa(dp106196
S'description'
p106197
g3
sS'cpp_type'
p106198
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106199
sS'default'
p106200
S'EigenProblem'
p106201
sS'name'
p106202
S'type'
p106203
sS'required'
p106204
I00
sS'group_name'
p106205
Nsa(dp106206
S'description'
p106207
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106208
sS'cpp_type'
p106209
S'bool'
p106210
sS'default'
p106211
S'1'
p106212
sS'name'
p106213
S'use_nonlinear'
p106214
sS'required'
p106215
I00
sS'group_name'
p106216
NsasS'name'
p106217
S'/Problem/<type>/EigenProblem'
p106218
sa(dp106219
S'description'
p106220
g3
sS'subblocks'
p106221
NsS'parameters'
p106222
(lp106223
(dp106224
S'description'
p106225
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106226
sS'cpp_type'
p106227
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106228
sS'default'
p106229
g3
sS'name'
p106230
S'control_tags'
p106231
sS'required'
p106232
I00
sS'group_name'
p106233
S'Advanced'
p106234
sa(dp106235
S'description'
p106236
S'Set the enabled status of the MooseObject.\n'
p106237
sS'cpp_type'
p106238
S'bool'
p106239
sS'default'
p106240
S'1'
p106241
sS'name'
p106242
S'enable'
p106243
sS'required'
p106244
I00
sS'group_name'
p106245
S'Advanced'
p106246
sa(dp106247
S'description'
p106248
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106249
sS'cpp_type'
p106250
S'bool'
p106251
sS'default'
p106252
S'0'
p106253
sS'name'
p106254
S'error_on_jacobian_nonzero_reallocation'
p106255
sS'required'
p106256
I00
sS'group_name'
p106257
Nsa(dp106258
S'description'
p106259
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p106260
sS'cpp_type'
p106261
S'bool'
p106262
sS'default'
p106263
S'0'
p106264
sS'name'
p106265
S'force_restart'
p106266
sS'required'
p106267
I00
sS'group_name'
p106268
Nsa(dp106269
S'description'
p106270
S'The dimension of the near nullspace\n'
p106271
sS'cpp_type'
p106272
S'unsigned int'
p106273
sS'default'
p106274
S'0'
p106275
sS'name'
p106276
S'near_null_space_dimension'
p106277
sS'required'
p106278
I00
sS'group_name'
p106279
Nsa(dp106280
S'description'
p106281
S'The dimension of the nullspace\n'
p106282
sS'cpp_type'
p106283
S'unsigned int'
p106284
sS'default'
p106285
S'0'
p106286
sS'name'
p106287
S'null_space_dimension'
p106288
sS'required'
p106289
I00
sS'group_name'
p106290
Nsa(dp106291
S'description'
p106292
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106293
sS'cpp_type'
p106294
S'bool'
p106295
sS'default'
p106296
S'1'
p106297
sS'name'
p106298
S'solve'
p106299
sS'required'
p106300
I00
sS'group_name'
p106301
Nsa(dp106302
S'description'
p106303
S'The dimension of the transpose nullspace\n'
p106304
sS'cpp_type'
p106305
S'unsigned int'
p106306
sS'default'
p106307
S'0'
p106308
sS'name'
p106309
S'transpose_null_space_dimension'
p106310
sS'required'
p106311
I00
sS'group_name'
p106312
Nsa(dp106313
S'description'
p106314
g3
sS'cpp_type'
p106315
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106316
sS'default'
p106317
S'FEProblem'
p106318
sS'name'
p106319
S'type'
p106320
sS'required'
p106321
I00
sS'group_name'
p106322
Nsa(dp106323
S'description'
p106324
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106325
sS'cpp_type'
p106326
S'bool'
p106327
sS'default'
p106328
S'1'
p106329
sS'name'
p106330
S'use_nonlinear'
p106331
sS'required'
p106332
I00
sS'group_name'
p106333
NsasS'name'
p106334
S'/Problem/<type>/FEProblem'
p106335
sasS'parameters'
p106336
NsS'name'
p106337
S'/Problem/<type>'
p106338
sasS'parameters'
p106339
(lp106340
(dp106341
S'description'
p106342
S'Block IDs for the coordinate systems\n'
p106343
sS'cpp_type'
p106344
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p106345
sS'default'
p106346
g3
sS'name'
p106347
S'block'
p106348
sS'required'
p106349
I00
sS'group_name'
p106350
Nsa(dp106351
S'name'
p106352
S'coord_type'
p106353
sS'cpp_type'
p106354
S'MultiMooseEnum'
p106355
sS'default'
p106356
S'XYZ'
p106357
sS'description'
p106358
S'Type of the coordinate system per block param\n'
p106359
sS'required'
p106360
I00
sS'options'
p106361
S'XYZ RZ RSPHERICAL'
p106362
sS'group_name'
p106363
Nsa(dp106364
S'description'
p106365
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p106366
sS'cpp_type'
p106367
S'bool'
p106368
sS'default'
p106369
S'0'
p106370
sS'name'
p106371
S'fe_cache'
p106372
sS'required'
p106373
I00
sS'group_name'
p106374
Nsa(dp106375
S'description'
p106376
S'Set to false to disable kernel->subdomain coverage check\n'
p106377
sS'cpp_type'
p106378
S'bool'
p106379
sS'default'
p106380
S'1'
p106381
sS'name'
p106382
S'kernel_coverage_check'
p106383
sS'required'
p106384
I00
sS'group_name'
p106385
Nsa(dp106386
S'description'
p106387
S'Set to false to disable material->subdomain coverage check\n'
p106388
sS'cpp_type'
p106389
S'bool'
p106390
sS'default'
p106391
S'1'
p106392
sS'name'
p106393
S'material_coverage_check'
p106394
sS'required'
p106395
I00
sS'group_name'
p106396
Nsa(dp106397
S'description'
p106398
S'The name the problem\n'
p106399
sS'cpp_type'
p106400
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106401
sS'default'
p106402
S'MOOSE Problem'
p106403
sS'name'
p106404
S'name'
p106405
sS'required'
p106406
I00
sS'group_name'
p106407
Nsa(dp106408
S'description'
p106409
S'File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n'
p106410
sS'cpp_type'
p106411
S'FileNameNoExtension'
p106412
sS'default'
p106413
g3
sS'name'
p106414
S'restart_file_base'
p106415
sS'required'
p106416
I00
sS'group_name'
p106417
Nsa(dp106418
S'name'
p106419
S'rz_coord_axis'
p106420
sS'cpp_type'
p106421
S'MooseEnum'
p106422
sS'default'
p106423
S'Y'
p106424
sS'description'
p106425
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p106426
sS'required'
p106427
I00
sS'options'
p106428
S'X Y'
p106429
sS'group_name'
p106430
Nsa(dp106431
S'description'
p106432
S'A string representing the Moose Object that will be built by this Action\n'
p106433
sS'cpp_type'
p106434
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106435
sS'default'
p106436
S'FEProblem'
p106437
sS'name'
p106438
S'type'
p106439
sS'required'
p106440
I01
sS'group_name'
p106441
Nsa(dp106442
S'description'
p106443
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p106444
sS'cpp_type'
p106445
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106446
sS'default'
p106447
g3
sS'name'
p106448
S'library_path'
p106449
sS'required'
p106450
I00
sS'group_name'
p106451
Nsa(dp106452
S'description'
p106453
S'The names of the objects to register (Default: register all).\n'
p106454
sS'cpp_type'
p106455
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106456
sS'default'
p106457
g3
sS'name'
p106458
S'object_names'
p106459
sS'required'
p106460
I00
sS'group_name'
p106461
Nsa(dp106462
S'description'
p106463
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p106464
sS'cpp_type'
p106465
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106466
sS'default'
p106467
g3
sS'name'
p106468
S'register_objects_from'
p106469
sS'required'
p106470
I00
sS'group_name'
p106471
NsasS'name'
p106472
S'/Problem'
p106473
sa(dp106474
S'description'
p106475
g3
sS'subblocks'
p106476
(lp106477
(dp106478
S'description'
p106479
g3
sS'subblocks'
p106480
NsS'parameters'
p106481
(lp106482
(dp106483
S'description'
p106484
S'A string representing the Moose Object that will be built by this Action\n'
p106485
sS'cpp_type'
p106486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106487
sS'default'
p106488
g3
sS'name'
p106489
S'type'
p106490
sS'required'
p106491
I01
sS'group_name'
p106492
NsasS'name'
p106493
S'/ScalarKernels/*'
p106494
sa(dp106495
S'description'
p106496
S'Generalized Plane Strain Scalar Kernel\n'
p106497
sS'subblocks'
p106498
NsS'parameters'
p106499
(lp106500
(dp106501
S'description'
p106502
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106503
sS'cpp_type'
p106504
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106505
sS'default'
p106506
g3
sS'name'
p106507
S'control_tags'
p106508
sS'required'
p106509
I00
sS'group_name'
p106510
S'Advanced'
p106511
sa(dp106512
S'description'
p106513
S'Set the enabled status of the MooseObject.\n'
p106514
sS'cpp_type'
p106515
S'bool'
p106516
sS'default'
p106517
S'1'
p106518
sS'name'
p106519
S'enable'
p106520
sS'required'
p106521
I00
sS'group_name'
p106522
S'Advanced'
p106523
sa(dp106524
S'description'
p106525
S'The name of the GeneralizedPlaneStrainUO UserObject\n'
p106526
sS'cpp_type'
p106527
S'UserObjectName'
p106528
sS'default'
p106529
g3
sS'name'
p106530
S'generalized_plane_strain'
p106531
sS'required'
p106532
I01
sS'group_name'
p106533
Nsa(dp106534
S'description'
p106535
S'Determines whether this object is calculated using an implicit or explicit form\n'
p106536
sS'cpp_type'
p106537
S'bool'
p106538
sS'default'
p106539
S'1'
p106540
sS'name'
p106541
S'implicit'
p106542
sS'required'
p106543
I00
sS'group_name'
p106544
S'Advanced'
p106545
sa(dp106546
S'description'
p106547
g3
sS'cpp_type'
p106548
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106549
sS'default'
p106550
S'GeneralizedPlaneStrain'
p106551
sS'name'
p106552
S'type'
p106553
sS'required'
p106554
I00
sS'group_name'
p106555
Nsa(dp106556
S'description'
p106557
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p106558
sS'cpp_type'
p106559
S'bool'
p106560
sS'default'
p106561
S'0'
p106562
sS'name'
p106563
S'use_displaced_mesh'
p106564
sS'required'
p106565
I00
sS'group_name'
p106566
S'Advanced'
p106567
sa(dp106568
S'description'
p106569
S'The name of the variable that this kernel operates on\n'
p106570
sS'cpp_type'
p106571
S'NonlinearVariableName'
p106572
sS'default'
p106573
g3
sS'name'
p106574
S'variable'
p106575
sS'required'
p106576
I01
sS'group_name'
p106577
NsasS'name'
p106578
S'/ScalarKernels/GeneralizedPlaneStrain'
p106579
sa(dp106580
S'description'
p106581
g3
sS'subblocks'
p106582
NsS'parameters'
p106583
(lp106584
(dp106585
S'description'
p106586
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106587
sS'cpp_type'
p106588
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106589
sS'default'
p106590
g3
sS'name'
p106591
S'control_tags'
p106592
sS'required'
p106593
I00
sS'group_name'
p106594
S'Advanced'
p106595
sa(dp106596
S'description'
p106597
S'Set the enabled status of the MooseObject.\n'
p106598
sS'cpp_type'
p106599
S'bool'
p106600
sS'default'
p106601
S'1'
p106602
sS'name'
p106603
S'enable'
p106604
sS'required'
p106605
I00
sS'group_name'
p106606
S'Advanced'
p106607
sa(dp106608
S'description'
p106609
S'Determines whether this object is calculated using an implicit or explicit form\n'
p106610
sS'cpp_type'
p106611
S'bool'
p106612
sS'default'
p106613
S'1'
p106614
sS'name'
p106615
S'implicit'
p106616
sS'required'
p106617
I00
sS'group_name'
p106618
S'Advanced'
p106619
sa(dp106620
S'description'
p106621
S'Node ids\n'
p106622
sS'cpp_type'
p106623
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p106624
sS'default'
p106625
g3
sS'name'
p106626
S'nodes'
p106627
sS'required'
p106628
I01
sS'group_name'
p106629
Nsa(dp106630
S'description'
p106631
g3
sS'cpp_type'
p106632
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106633
sS'default'
p106634
S'NodalEqualValueConstraint'
p106635
sS'name'
p106636
S'type'
p106637
sS'required'
p106638
I00
sS'group_name'
p106639
Nsa(dp106640
S'description'
p106641
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p106642
sS'cpp_type'
p106643
S'bool'
p106644
sS'default'
p106645
S'0'
p106646
sS'name'
p106647
S'use_displaced_mesh'
p106648
sS'required'
p106649
I00
sS'group_name'
p106650
S'Advanced'
p106651
sa(dp106652
S'description'
p106653
S'Variable(s) to put the constraint on\n'
p106654
sS'cpp_type'
p106655
S'std::vector<VariableName>'
p106656
sS'default'
p106657
g3
sS'name'
p106658
S'var'
p106659
sS'required'
p106660
I01
sS'group_name'
p106661
Nsa(dp106662
S'description'
p106663
S'The name of the variable that this kernel operates on\n'
p106664
sS'cpp_type'
p106665
S'NonlinearVariableName'
p106666
sS'default'
p106667
g3
sS'name'
p106668
S'variable'
p106669
sS'required'
p106670
I01
sS'group_name'
p106671
NsasS'name'
p106672
S'/ScalarKernels/NodalEqualValueConstraint'
p106673
sa(dp106674
S'description'
p106675
g3
sS'subblocks'
p106676
NsS'parameters'
p106677
(lp106678
(dp106679
S'description'
p106680
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106681
sS'cpp_type'
p106682
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106683
sS'default'
p106684
g3
sS'name'
p106685
S'control_tags'
p106686
sS'required'
p106687
I00
sS'group_name'
p106688
S'Advanced'
p106689
sa(dp106690
S'description'
p106691
S'Set the enabled status of the MooseObject.\n'
p106692
sS'cpp_type'
p106693
S'bool'
p106694
sS'default'
p106695
S'1'
p106696
sS'name'
p106697
S'enable'
p106698
sS'required'
p106699
I00
sS'group_name'
p106700
S'Advanced'
p106701
sa(dp106702
S'description'
p106703
S'Determines whether this object is calculated using an implicit or explicit form\n'
p106704
sS'cpp_type'
p106705
S'bool'
p106706
sS'default'
p106707
S'1'
p106708
sS'name'
p106709
S'implicit'
p106710
sS'required'
p106711
I00
sS'group_name'
p106712
S'Advanced'
p106713
sa(dp106714
S'description'
p106715
g3
sS'cpp_type'
p106716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106717
sS'default'
p106718
S'ODETimeDerivative'
p106719
sS'name'
p106720
S'type'
p106721
sS'required'
p106722
I00
sS'group_name'
p106723
Nsa(dp106724
S'description'
p106725
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p106726
sS'cpp_type'
p106727
S'bool'
p106728
sS'default'
p106729
S'0'
p106730
sS'name'
p106731
S'use_displaced_mesh'
p106732
sS'required'
p106733
I00
sS'group_name'
p106734
S'Advanced'
p106735
sa(dp106736
S'description'
p106737
S'The name of the variable that this kernel operates on\n'
p106738
sS'cpp_type'
p106739
S'NonlinearVariableName'
p106740
sS'default'
p106741
g3
sS'name'
p106742
S'variable'
p106743
sS'required'
p106744
I01
sS'group_name'
p106745
NsasS'name'
p106746
S'/ScalarKernels/ODETimeDerivative'
p106747
sa(dp106748
S'description'
p106749
S'Parsed ODE function kernel.\n'
p106750
sS'subblocks'
p106751
NsS'parameters'
p106752
(lp106753
(dp106754
S'description'
p106755
S'additional coupled variables\n'
p106756
sS'cpp_type'
p106757
S'std::vector<VariableName>'
p106758
sS'default'
p106759
g3
sS'name'
p106760
S'args'
p106761
sS'required'
p106762
I00
sS'group_name'
p106763
Nsa(dp106764
S'description'
p106765
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p106766
sS'cpp_type'
p106767
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106768
sS'default'
p106769
g3
sS'name'
p106770
S'constant_expressions'
p106771
sS'required'
p106772
I00
sS'group_name'
p106773
Nsa(dp106774
S'description'
p106775
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p106776
sS'cpp_type'
p106777
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106778
sS'default'
p106779
g3
sS'name'
p106780
S'constant_names'
p106781
sS'required'
p106782
I00
sS'group_name'
p106783
Nsa(dp106784
S'description'
p106785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106786
sS'cpp_type'
p106787
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106788
sS'default'
p106789
g3
sS'name'
p106790
S'control_tags'
p106791
sS'required'
p106792
I00
sS'group_name'
p106793
S'Advanced'
p106794
sa(dp106795
S'description'
p106796
S'Disable the function parser algebraic optimizer\n'
p106797
sS'cpp_type'
p106798
S'bool'
p106799
sS'default'
p106800
S'0'
p106801
sS'name'
p106802
S'disable_fpoptimizer'
p106803
sS'required'
p106804
I00
sS'group_name'
p106805
S'Advanced'
p106806
sa(dp106807
S'description'
p106808
S'Set the enabled status of the MooseObject.\n'
p106809
sS'cpp_type'
p106810
S'bool'
p106811
sS'default'
p106812
S'1'
p106813
sS'name'
p106814
S'enable'
p106815
sS'required'
p106816
I00
sS'group_name'
p106817
S'Advanced'
p106818
sa(dp106819
S'description'
p106820
S'Enable cacheing of function derivatives for faster startup time\n'
p106821
sS'cpp_type'
p106822
S'bool'
p106823
sS'default'
p106824
S'1'
p106825
sS'name'
p106826
S'enable_ad_cache'
p106827
sS'required'
p106828
I00
sS'group_name'
p106829
S'Advanced'
p106830
sa(dp106831
S'description'
p106832
S'Enable automatic immediate optimization of derivatives\n'
p106833
sS'cpp_type'
p106834
S'bool'
p106835
sS'default'
p106836
S'1'
p106837
sS'name'
p106838
S'enable_auto_optimize'
p106839
sS'required'
p106840
I00
sS'group_name'
p106841
S'Advanced'
p106842
sa(dp106843
S'description'
p106844
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p106845
sS'cpp_type'
p106846
S'bool'
p106847
sS'default'
p106848
S'1'
p106849
sS'name'
p106850
S'enable_jit'
p106851
sS'required'
p106852
I00
sS'group_name'
p106853
S'Advanced'
p106854
sa(dp106855
S'description'
p106856
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p106857
sS'cpp_type'
p106858
S'bool'
p106859
sS'default'
p106860
S'0'
p106861
sS'name'
p106862
S'fail_on_evalerror'
p106863
sS'required'
p106864
I00
sS'group_name'
p106865
S'Advanced'
p106866
sa(dp106867
S'description'
p106868
S'function expression\n'
p106869
sS'cpp_type'
p106870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106871
sS'default'
p106872
g3
sS'name'
p106873
S'function'
p106874
sS'required'
p106875
I01
sS'group_name'
p106876
Nsa(dp106877
S'description'
p106878
S'Determines whether this object is calculated using an implicit or explicit form\n'
p106879
sS'cpp_type'
p106880
S'bool'
p106881
sS'default'
p106882
S'1'
p106883
sS'name'
p106884
S'implicit'
p106885
sS'required'
p106886
I00
sS'group_name'
p106887
S'Advanced'
p106888
sa(dp106889
S'description'
p106890
g3
sS'cpp_type'
p106891
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106892
sS'default'
p106893
S'ParsedODEKernel'
p106894
sS'name'
p106895
S'type'
p106896
sS'required'
p106897
I00
sS'group_name'
p106898
Nsa(dp106899
S'description'
p106900
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p106901
sS'cpp_type'
p106902
S'bool'
p106903
sS'default'
p106904
S'0'
p106905
sS'name'
p106906
S'use_displaced_mesh'
p106907
sS'required'
p106908
I00
sS'group_name'
p106909
S'Advanced'
p106910
sa(dp106911
S'description'
p106912
S'The name of the variable that this kernel operates on\n'
p106913
sS'cpp_type'
p106914
S'NonlinearVariableName'
p106915
sS'default'
p106916
g3
sS'name'
p106917
S'variable'
p106918
sS'required'
p106919
I01
sS'group_name'
p106920
NsasS'name'
p106921
S'/ScalarKernels/ParsedODEKernel'
p106922
sasS'parameters'
p106923
NsS'name'
p106924
S'/ScalarKernels'
p106925
sa(dp106926
S'description'
p106927
g3
sS'subblocks'
p106928
(lp106929
(dp106930
S'description'
p106931
g3
sS'subblocks'
p106932
NsS'parameters'
p106933
(lp106934
(dp106935
S'description'
p106936
S'A string representing the Moose Object that will be built by this Action\n'
p106937
sS'cpp_type'
p106938
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106939
sS'default'
p106940
g3
sS'name'
p106941
S'type'
p106942
sS'required'
p106943
I01
sS'group_name'
p106944
NsasS'name'
p106945
S'/Transfers/*'
p106946
sa(dp106947
S'description'
p106948
S'Copies variables (nonlinear and auxiliary) between multiapps that have identical meshes.\n'
p106949
sS'subblocks'
p106950
NsS'parameters'
p106951
(lp106952
(dp106953
S'description'
p106954
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p106955
sS'cpp_type'
p106956
S'bool'
p106957
sS'default'
p106958
S'1'
p106959
sS'name'
p106960
S'check_multiapp_execute_on'
p106961
sS'required'
p106962
I00
sS'group_name'
p106963
Nsa(dp106964
S'description'
p106965
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106966
sS'cpp_type'
p106967
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106968
sS'default'
p106969
g3
sS'name'
p106970
S'control_tags'
p106971
sS'required'
p106972
I00
sS'group_name'
p106973
S'Advanced'
p106974
sa(dp106975
S'name'
p106976
S'direction'
p106977
sS'cpp_type'
p106978
S'MooseEnum'
p106979
sS'default'
p106980
g3
sS'description'
p106981
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p106982
sS'required'
p106983
I01
sS'options'
p106984
S'to_multiapp from_multiapp'
p106985
sS'group_name'
p106986
Nsa(dp106987
S'description'
p106988
S'Whether or not to use the displaced mesh for the source mesh.\n'
p106989
sS'cpp_type'
p106990
S'bool'
p106991
sS'default'
p106992
S'0'
p106993
sS'name'
p106994
S'displaced_source_mesh'
p106995
sS'required'
p106996
I00
sS'group_name'
p106997
Nsa(dp106998
S'description'
p106999
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107000
sS'cpp_type'
p107001
S'bool'
p107002
sS'default'
p107003
S'0'
p107004
sS'name'
p107005
S'displaced_target_mesh'
p107006
sS'required'
p107007
I00
sS'group_name'
p107008
Nsa(dp107009
S'description'
p107010
S'Set the enabled status of the MooseObject.\n'
p107011
sS'cpp_type'
p107012
S'bool'
p107013
sS'default'
p107014
S'1'
p107015
sS'name'
p107016
S'enable'
p107017
sS'required'
p107018
I00
sS'group_name'
p107019
S'Advanced'
p107020
sa(dp107021
S'name'
p107022
S'execute_on'
p107023
sS'cpp_type'
p107024
S'MultiMooseEnum'
p107025
sS'default'
p107026
S'SAME_AS_MULTIAPP'
p107027
sS'description'
p107028
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107029
sS'required'
p107030
I00
sS'options'
p107031
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107032
sS'group_name'
p107033
Nsa(dp107034
S'description'
p107035
S'The name of the MultiApp to use.\n'
p107036
sS'cpp_type'
p107037
S'MultiAppName'
p107038
sS'default'
p107039
g3
sS'name'
p107040
S'multi_app'
p107041
sS'required'
p107042
I01
sS'group_name'
p107043
Nsa(dp107044
S'description'
p107045
S'The variable to transfer from.\n'
p107046
sS'cpp_type'
p107047
S'VariableName'
p107048
sS'default'
p107049
g3
sS'name'
p107050
S'source_variable'
p107051
sS'required'
p107052
I01
sS'group_name'
p107053
Nsa(dp107054
S'description'
p107055
g3
sS'cpp_type'
p107056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107057
sS'default'
p107058
S'MultiAppCopyTransfer'
p107059
sS'name'
p107060
S'type'
p107061
sS'required'
p107062
I00
sS'group_name'
p107063
Nsa(dp107064
S'description'
p107065
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107066
sS'cpp_type'
p107067
S'bool'
p107068
sS'default'
p107069
S'0'
p107070
sS'name'
p107071
S'use_displaced_mesh'
p107072
sS'required'
p107073
I00
sS'group_name'
p107074
S'Advanced'
p107075
sa(dp107076
S'description'
p107077
S'The variable to store the transferred values in.\n'
p107078
sS'cpp_type'
p107079
S'VariableName'
p107080
sS'default'
p107081
g3
sS'name'
p107082
S'variable'
p107083
sS'required'
p107084
I01
sS'group_name'
p107085
NsasS'name'
p107086
S'/Transfers/MultiAppCopyTransfer'
p107087
sa(dp107088
S'description'
p107089
g3
sS'subblocks'
p107090
NsS'parameters'
p107091
(lp107092
(dp107093
S'description'
p107094
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107095
sS'cpp_type'
p107096
S'bool'
p107097
sS'default'
p107098
S'1'
p107099
sS'name'
p107100
S'check_multiapp_execute_on'
p107101
sS'required'
p107102
I00
sS'group_name'
p107103
Nsa(dp107104
S'description'
p107105
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107106
sS'cpp_type'
p107107
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107108
sS'default'
p107109
g3
sS'name'
p107110
S'control_tags'
p107111
sS'required'
p107112
I00
sS'group_name'
p107113
S'Advanced'
p107114
sa(dp107115
S'name'
p107116
S'direction'
p107117
sS'cpp_type'
p107118
S'MooseEnum'
p107119
sS'default'
p107120
g3
sS'description'
p107121
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107122
sS'required'
p107123
I01
sS'options'
p107124
S'to_multiapp from_multiapp'
p107125
sS'group_name'
p107126
Nsa(dp107127
S'description'
p107128
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107129
sS'cpp_type'
p107130
S'bool'
p107131
sS'default'
p107132
S'0'
p107133
sS'name'
p107134
S'displaced_source_mesh'
p107135
sS'required'
p107136
I00
sS'group_name'
p107137
Nsa(dp107138
S'description'
p107139
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107140
sS'cpp_type'
p107141
S'bool'
p107142
sS'default'
p107143
S'0'
p107144
sS'name'
p107145
S'displaced_target_mesh'
p107146
sS'required'
p107147
I00
sS'group_name'
p107148
Nsa(dp107149
S'description'
p107150
S'Set the enabled status of the MooseObject.\n'
p107151
sS'cpp_type'
p107152
S'bool'
p107153
sS'default'
p107154
S'1'
p107155
sS'name'
p107156
S'enable'
p107157
sS'required'
p107158
I00
sS'group_name'
p107159
S'Advanced'
p107160
sa(dp107161
S'name'
p107162
S'execute_on'
p107163
sS'cpp_type'
p107164
S'MultiMooseEnum'
p107165
sS'default'
p107166
S'SAME_AS_MULTIAPP'
p107167
sS'description'
p107168
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107169
sS'required'
p107170
I00
sS'options'
p107171
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107172
sS'group_name'
p107173
Nsa(dp107174
S'name'
p107175
S'interp_type'
p107176
sS'cpp_type'
p107177
S'MooseEnum'
p107178
sS'default'
p107179
S'inverse_distance'
p107180
sS'description'
p107181
S'The algorithm to use for interpolation.\n'
p107182
sS'required'
p107183
I00
sS'options'
p107184
S'inverse_distance radial_basis'
p107185
sS'group_name'
p107186
Nsa(dp107187
S'description'
p107188
S'The name of the MultiApp to use.\n'
p107189
sS'cpp_type'
p107190
S'MultiAppName'
p107191
sS'default'
p107192
g3
sS'name'
p107193
S'multi_app'
p107194
sS'required'
p107195
I01
sS'group_name'
p107196
Nsa(dp107197
S'description'
p107198
S'The number of nearest points to use for interpolation.\n'
p107199
sS'cpp_type'
p107200
S'unsigned int'
p107201
sS'default'
p107202
S'3'
p107203
sS'name'
p107204
S'num_points'
p107205
sS'required'
p107206
I00
sS'group_name'
p107207
Nsa(dp107208
S'description'
p107209
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p107210
sS'cpp_type'
p107211
S'double'
p107212
sS'default'
p107213
S'2'
p107214
sS'name'
p107215
S'power'
p107216
sS'required'
p107217
I00
sS'group_name'
p107218
Nsa(dp107219
S'description'
p107220
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p107221
sS'cpp_type'
p107222
S'double'
p107223
sS'default'
p107224
S'-1'
p107225
sS'name'
p107226
S'radius'
p107227
sS'required'
p107228
I00
sS'group_name'
p107229
Nsa(dp107230
S'description'
p107231
S'The variable to transfer from.\n'
p107232
sS'cpp_type'
p107233
S'VariableName'
p107234
sS'default'
p107235
g3
sS'name'
p107236
S'source_variable'
p107237
sS'required'
p107238
I01
sS'group_name'
p107239
Nsa(dp107240
S'description'
p107241
g3
sS'cpp_type'
p107242
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107243
sS'default'
p107244
S'MultiAppInterpolationTransfer'
p107245
sS'name'
p107246
S'type'
p107247
sS'required'
p107248
I00
sS'group_name'
p107249
Nsa(dp107250
S'description'
p107251
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107252
sS'cpp_type'
p107253
S'bool'
p107254
sS'default'
p107255
S'0'
p107256
sS'name'
p107257
S'use_displaced_mesh'
p107258
sS'required'
p107259
I00
sS'group_name'
p107260
S'Advanced'
p107261
sa(dp107262
S'description'
p107263
S'The auxiliary variable to store the transferred values in.\n'
p107264
sS'cpp_type'
p107265
S'AuxVariableName'
p107266
sS'default'
p107267
g3
sS'name'
p107268
S'variable'
p107269
sS'required'
p107270
I01
sS'group_name'
p107271
NsasS'name'
p107272
S'/Transfers/MultiAppInterpolationTransfer'
p107273
sa(dp107274
S'description'
p107275
g3
sS'subblocks'
p107276
NsS'parameters'
p107277
(lp107278
(dp107279
S'description'
p107280
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107281
sS'cpp_type'
p107282
S'bool'
p107283
sS'default'
p107284
S'1'
p107285
sS'name'
p107286
S'check_multiapp_execute_on'
p107287
sS'required'
p107288
I00
sS'group_name'
p107289
Nsa(dp107290
S'description'
p107291
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107292
sS'cpp_type'
p107293
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107294
sS'default'
p107295
g3
sS'name'
p107296
S'control_tags'
p107297
sS'required'
p107298
I00
sS'group_name'
p107299
S'Advanced'
p107300
sa(dp107301
S'name'
p107302
S'direction'
p107303
sS'cpp_type'
p107304
S'MooseEnum'
p107305
sS'default'
p107306
g3
sS'description'
p107307
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107308
sS'required'
p107309
I01
sS'options'
p107310
S'to_multiapp from_multiapp'
p107311
sS'group_name'
p107312
Nsa(dp107313
S'description'
p107314
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107315
sS'cpp_type'
p107316
S'bool'
p107317
sS'default'
p107318
S'0'
p107319
sS'name'
p107320
S'displaced_source_mesh'
p107321
sS'required'
p107322
I00
sS'group_name'
p107323
Nsa(dp107324
S'description'
p107325
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107326
sS'cpp_type'
p107327
S'bool'
p107328
sS'default'
p107329
S'0'
p107330
sS'name'
p107331
S'displaced_target_mesh'
p107332
sS'required'
p107333
I00
sS'group_name'
p107334
Nsa(dp107335
S'description'
p107336
S'Set the enabled status of the MooseObject.\n'
p107337
sS'cpp_type'
p107338
S'bool'
p107339
sS'default'
p107340
S'1'
p107341
sS'name'
p107342
S'enable'
p107343
sS'required'
p107344
I00
sS'group_name'
p107345
S'Advanced'
p107346
sa(dp107347
S'description'
p107348
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p107349
sS'cpp_type'
p107350
S'bool'
p107351
sS'default'
p107352
S'0'
p107353
sS'name'
p107354
S'error_on_miss'
p107355
sS'required'
p107356
I00
sS'group_name'
p107357
Nsa(dp107358
S'name'
p107359
S'execute_on'
p107360
sS'cpp_type'
p107361
S'MultiMooseEnum'
p107362
sS'default'
p107363
S'SAME_AS_MULTIAPP'
p107364
sS'description'
p107365
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107366
sS'required'
p107367
I00
sS'options'
p107368
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107369
sS'group_name'
p107370
Nsa(dp107371
S'description'
p107372
S'The name of the MultiApp to use.\n'
p107373
sS'cpp_type'
p107374
S'MultiAppName'
p107375
sS'default'
p107376
g3
sS'name'
p107377
S'multi_app'
p107378
sS'required'
p107379
I01
sS'group_name'
p107380
Nsa(dp107381
S'description'
p107382
S'The variable to transfer from.\n'
p107383
sS'cpp_type'
p107384
S'VariableName'
p107385
sS'default'
p107386
g3
sS'name'
p107387
S'source_variable'
p107388
sS'required'
p107389
I01
sS'group_name'
p107390
Nsa(dp107391
S'description'
p107392
g3
sS'cpp_type'
p107393
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107394
sS'default'
p107395
S'MultiAppMeshFunctionTransfer'
p107396
sS'name'
p107397
S'type'
p107398
sS'required'
p107399
I00
sS'group_name'
p107400
Nsa(dp107401
S'description'
p107402
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107403
sS'cpp_type'
p107404
S'bool'
p107405
sS'default'
p107406
S'0'
p107407
sS'name'
p107408
S'use_displaced_mesh'
p107409
sS'required'
p107410
I00
sS'group_name'
p107411
S'Advanced'
p107412
sa(dp107413
S'description'
p107414
S'The auxiliary variable to store the transferred values in.\n'
p107415
sS'cpp_type'
p107416
S'AuxVariableName'
p107417
sS'default'
p107418
g3
sS'name'
p107419
S'variable'
p107420
sS'required'
p107421
I01
sS'group_name'
p107422
NsasS'name'
p107423
S'/Transfers/MultiAppMeshFunctionTransfer'
p107424
sa(dp107425
S'description'
p107426
g3
sS'subblocks'
p107427
NsS'parameters'
p107428
(lp107429
(dp107430
S'description'
p107431
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107432
sS'cpp_type'
p107433
S'bool'
p107434
sS'default'
p107435
S'1'
p107436
sS'name'
p107437
S'check_multiapp_execute_on'
p107438
sS'required'
p107439
I00
sS'group_name'
p107440
Nsa(dp107441
S'description'
p107442
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107443
sS'cpp_type'
p107444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107445
sS'default'
p107446
g3
sS'name'
p107447
S'control_tags'
p107448
sS'required'
p107449
I00
sS'group_name'
p107450
S'Advanced'
p107451
sa(dp107452
S'name'
p107453
S'direction'
p107454
sS'cpp_type'
p107455
S'MooseEnum'
p107456
sS'default'
p107457
g3
sS'description'
p107458
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107459
sS'required'
p107460
I01
sS'options'
p107461
S'to_multiapp from_multiapp'
p107462
sS'group_name'
p107463
Nsa(dp107464
S'description'
p107465
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107466
sS'cpp_type'
p107467
S'bool'
p107468
sS'default'
p107469
S'0'
p107470
sS'name'
p107471
S'displaced_source_mesh'
p107472
sS'required'
p107473
I00
sS'group_name'
p107474
Nsa(dp107475
S'description'
p107476
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107477
sS'cpp_type'
p107478
S'bool'
p107479
sS'default'
p107480
S'0'
p107481
sS'name'
p107482
S'displaced_target_mesh'
p107483
sS'required'
p107484
I00
sS'group_name'
p107485
Nsa(dp107486
S'description'
p107487
S'Set the enabled status of the MooseObject.\n'
p107488
sS'cpp_type'
p107489
S'bool'
p107490
sS'default'
p107491
S'1'
p107492
sS'name'
p107493
S'enable'
p107494
sS'required'
p107495
I00
sS'group_name'
p107496
S'Advanced'
p107497
sa(dp107498
S'name'
p107499
S'execute_on'
p107500
sS'cpp_type'
p107501
S'MultiMooseEnum'
p107502
sS'default'
p107503
S'SAME_AS_MULTIAPP'
p107504
sS'description'
p107505
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107506
sS'required'
p107507
I00
sS'options'
p107508
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107509
sS'group_name'
p107510
Nsa(dp107511
S'description'
p107512
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p107513
sS'cpp_type'
p107514
S'bool'
p107515
sS'default'
p107516
S'0'
p107517
sS'name'
p107518
S'fixed_meshes'
p107519
sS'required'
p107520
I00
sS'group_name'
p107521
Nsa(dp107522
S'description'
p107523
S'The name of the MultiApp to use.\n'
p107524
sS'cpp_type'
p107525
S'MultiAppName'
p107526
sS'default'
p107527
g3
sS'name'
p107528
S'multi_app'
p107529
sS'required'
p107530
I01
sS'group_name'
p107531
Nsa(dp107532
S'description'
p107533
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p107534
sS'cpp_type'
p107535
S'BoundaryName'
p107536
sS'default'
p107537
g3
sS'name'
p107538
S'source_boundary'
p107539
sS'required'
p107540
I00
sS'group_name'
p107541
Nsa(dp107542
S'description'
p107543
S'The variable to transfer from.\n'
p107544
sS'cpp_type'
p107545
S'VariableName'
p107546
sS'default'
p107547
g3
sS'name'
p107548
S'source_variable'
p107549
sS'required'
p107550
I01
sS'group_name'
p107551
Nsa(dp107552
S'description'
p107553
S'The boundary we are transferring to (if not specified, whole domain is used).\n'
p107554
sS'cpp_type'
p107555
S'BoundaryName'
p107556
sS'default'
p107557
g3
sS'name'
p107558
S'target_boundary'
p107559
sS'required'
p107560
I00
sS'group_name'
p107561
Nsa(dp107562
S'description'
p107563
g3
sS'cpp_type'
p107564
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107565
sS'default'
p107566
S'MultiAppNearestNodeTransfer'
p107567
sS'name'
p107568
S'type'
p107569
sS'required'
p107570
I00
sS'group_name'
p107571
Nsa(dp107572
S'description'
p107573
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107574
sS'cpp_type'
p107575
S'bool'
p107576
sS'default'
p107577
S'0'
p107578
sS'name'
p107579
S'use_displaced_mesh'
p107580
sS'required'
p107581
I00
sS'group_name'
p107582
S'Advanced'
p107583
sa(dp107584
S'description'
p107585
S'The auxiliary variable to store the transferred values in.\n'
p107586
sS'cpp_type'
p107587
S'AuxVariableName'
p107588
sS'default'
p107589
g3
sS'name'
p107590
S'variable'
p107591
sS'required'
p107592
I01
sS'group_name'
p107593
NsasS'name'
p107594
S'/Transfers/MultiAppNearestNodeTransfer'
p107595
sa(dp107596
S'description'
p107597
g3
sS'subblocks'
p107598
NsS'parameters'
p107599
(lp107600
(dp107601
S'description'
p107602
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107603
sS'cpp_type'
p107604
S'bool'
p107605
sS'default'
p107606
S'1'
p107607
sS'name'
p107608
S'check_multiapp_execute_on'
p107609
sS'required'
p107610
I00
sS'group_name'
p107611
Nsa(dp107612
S'description'
p107613
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107614
sS'cpp_type'
p107615
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107616
sS'default'
p107617
g3
sS'name'
p107618
S'control_tags'
p107619
sS'required'
p107620
I00
sS'group_name'
p107621
S'Advanced'
p107622
sa(dp107623
S'name'
p107624
S'direction'
p107625
sS'cpp_type'
p107626
S'MooseEnum'
p107627
sS'default'
p107628
g3
sS'description'
p107629
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107630
sS'required'
p107631
I01
sS'options'
p107632
S'to_multiapp from_multiapp'
p107633
sS'group_name'
p107634
Nsa(dp107635
S'description'
p107636
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107637
sS'cpp_type'
p107638
S'bool'
p107639
sS'default'
p107640
S'0'
p107641
sS'name'
p107642
S'displaced_source_mesh'
p107643
sS'required'
p107644
I00
sS'group_name'
p107645
Nsa(dp107646
S'description'
p107647
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107648
sS'cpp_type'
p107649
S'bool'
p107650
sS'default'
p107651
S'0'
p107652
sS'name'
p107653
S'displaced_target_mesh'
p107654
sS'required'
p107655
I00
sS'group_name'
p107656
Nsa(dp107657
S'description'
p107658
S'Set the enabled status of the MooseObject.\n'
p107659
sS'cpp_type'
p107660
S'bool'
p107661
sS'default'
p107662
S'1'
p107663
sS'name'
p107664
S'enable'
p107665
sS'required'
p107666
I00
sS'group_name'
p107667
S'Advanced'
p107668
sa(dp107669
S'name'
p107670
S'execute_on'
p107671
sS'cpp_type'
p107672
S'MultiMooseEnum'
p107673
sS'default'
p107674
S'SAME_AS_MULTIAPP'
p107675
sS'description'
p107676
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107677
sS'required'
p107678
I00
sS'options'
p107679
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107680
sS'group_name'
p107681
Nsa(dp107682
S'name'
p107683
S'interp_type'
p107684
sS'cpp_type'
p107685
S'MooseEnum'
p107686
sS'default'
p107687
S'inverse_distance'
p107688
sS'description'
p107689
S'The algorithm to use for interpolation.\n'
p107690
sS'required'
p107691
I00
sS'options'
p107692
S'inverse_distance radial_basis'
p107693
sS'group_name'
p107694
Nsa(dp107695
S'description'
p107696
S'The name of the MultiApp to use.\n'
p107697
sS'cpp_type'
p107698
S'MultiAppName'
p107699
sS'default'
p107700
g3
sS'name'
p107701
S'multi_app'
p107702
sS'required'
p107703
I01
sS'group_name'
p107704
Nsa(dp107705
S'description'
p107706
S'The number of nearest points to use for interpolation.\n'
p107707
sS'cpp_type'
p107708
S'unsigned int'
p107709
sS'default'
p107710
S'3'
p107711
sS'name'
p107712
S'num_points'
p107713
sS'required'
p107714
I00
sS'group_name'
p107715
Nsa(dp107716
S'description'
p107717
S'The Postprocessor to interpolate.\n'
p107718
sS'cpp_type'
p107719
S'PostprocessorName'
p107720
sS'default'
p107721
g3
sS'name'
p107722
S'postprocessor'
p107723
sS'required'
p107724
I01
sS'group_name'
p107725
Nsa(dp107726
S'description'
p107727
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p107728
sS'cpp_type'
p107729
S'double'
p107730
sS'default'
p107731
S'2'
p107732
sS'name'
p107733
S'power'
p107734
sS'required'
p107735
I00
sS'group_name'
p107736
Nsa(dp107737
S'description'
p107738
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p107739
sS'cpp_type'
p107740
S'double'
p107741
sS'default'
p107742
S'-1'
p107743
sS'name'
p107744
S'radius'
p107745
sS'required'
p107746
I00
sS'group_name'
p107747
Nsa(dp107748
S'description'
p107749
g3
sS'cpp_type'
p107750
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107751
sS'default'
p107752
S'MultiAppPostprocessorInterpolationTransfer'
p107753
sS'name'
p107754
S'type'
p107755
sS'required'
p107756
I00
sS'group_name'
p107757
Nsa(dp107758
S'description'
p107759
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107760
sS'cpp_type'
p107761
S'bool'
p107762
sS'default'
p107763
S'0'
p107764
sS'name'
p107765
S'use_displaced_mesh'
p107766
sS'required'
p107767
I00
sS'group_name'
p107768
S'Advanced'
p107769
sa(dp107770
S'description'
p107771
S'The auxiliary variable to store the transferred values in.\n'
p107772
sS'cpp_type'
p107773
S'AuxVariableName'
p107774
sS'default'
p107775
g3
sS'name'
p107776
S'variable'
p107777
sS'required'
p107778
I01
sS'group_name'
p107779
NsasS'name'
p107780
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p107781
sa(dp107782
S'description'
p107783
g3
sS'subblocks'
p107784
NsS'parameters'
p107785
(lp107786
(dp107787
S'description'
p107788
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107789
sS'cpp_type'
p107790
S'bool'
p107791
sS'default'
p107792
S'1'
p107793
sS'name'
p107794
S'check_multiapp_execute_on'
p107795
sS'required'
p107796
I00
sS'group_name'
p107797
Nsa(dp107798
S'description'
p107799
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107800
sS'cpp_type'
p107801
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107802
sS'default'
p107803
g3
sS'name'
p107804
S'control_tags'
p107805
sS'required'
p107806
I00
sS'group_name'
p107807
S'Advanced'
p107808
sa(dp107809
S'name'
p107810
S'direction'
p107811
sS'cpp_type'
p107812
S'MooseEnum'
p107813
sS'default'
p107814
g3
sS'description'
p107815
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107816
sS'required'
p107817
I01
sS'options'
p107818
S'to_multiapp from_multiapp'
p107819
sS'group_name'
p107820
Nsa(dp107821
S'description'
p107822
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107823
sS'cpp_type'
p107824
S'bool'
p107825
sS'default'
p107826
S'0'
p107827
sS'name'
p107828
S'displaced_source_mesh'
p107829
sS'required'
p107830
I00
sS'group_name'
p107831
Nsa(dp107832
S'description'
p107833
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107834
sS'cpp_type'
p107835
S'bool'
p107836
sS'default'
p107837
S'0'
p107838
sS'name'
p107839
S'displaced_target_mesh'
p107840
sS'required'
p107841
I00
sS'group_name'
p107842
Nsa(dp107843
S'description'
p107844
S'Set the enabled status of the MooseObject.\n'
p107845
sS'cpp_type'
p107846
S'bool'
p107847
sS'default'
p107848
S'1'
p107849
sS'name'
p107850
S'enable'
p107851
sS'required'
p107852
I00
sS'group_name'
p107853
S'Advanced'
p107854
sa(dp107855
S'name'
p107856
S'execute_on'
p107857
sS'cpp_type'
p107858
S'MultiMooseEnum'
p107859
sS'default'
p107860
S'SAME_AS_MULTIAPP'
p107861
sS'description'
p107862
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107863
sS'required'
p107864
I00
sS'options'
p107865
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107866
sS'group_name'
p107867
Nsa(dp107868
S'description'
p107869
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p107870
sS'cpp_type'
p107871
S'PostprocessorName'
p107872
sS'default'
p107873
g3
sS'name'
p107874
S'from_postprocessor'
p107875
sS'required'
p107876
I01
sS'group_name'
p107877
Nsa(dp107878
S'description'
p107879
S'The name of the MultiApp to use.\n'
p107880
sS'cpp_type'
p107881
S'MultiAppName'
p107882
sS'default'
p107883
g3
sS'name'
p107884
S'multi_app'
p107885
sS'required'
p107886
I01
sS'group_name'
p107887
Nsa(dp107888
S'description'
p107889
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p107890
sS'cpp_type'
p107891
S'VariableName'
p107892
sS'default'
p107893
g3
sS'name'
p107894
S'to_aux_scalar'
p107895
sS'required'
p107896
I01
sS'group_name'
p107897
Nsa(dp107898
S'description'
p107899
g3
sS'cpp_type'
p107900
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107901
sS'default'
p107902
S'MultiAppPostprocessorToAuxScalarTransfer'
p107903
sS'name'
p107904
S'type'
p107905
sS'required'
p107906
I00
sS'group_name'
p107907
Nsa(dp107908
S'description'
p107909
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107910
sS'cpp_type'
p107911
S'bool'
p107912
sS'default'
p107913
S'0'
p107914
sS'name'
p107915
S'use_displaced_mesh'
p107916
sS'required'
p107917
I00
sS'group_name'
p107918
S'Advanced'
p107919
sasS'name'
p107920
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p107921
sa(dp107922
S'description'
p107923
g3
sS'subblocks'
p107924
NsS'parameters'
p107925
(lp107926
(dp107927
S'description'
p107928
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107929
sS'cpp_type'
p107930
S'bool'
p107931
sS'default'
p107932
S'1'
p107933
sS'name'
p107934
S'check_multiapp_execute_on'
p107935
sS'required'
p107936
I00
sS'group_name'
p107937
Nsa(dp107938
S'description'
p107939
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107940
sS'cpp_type'
p107941
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107942
sS'default'
p107943
g3
sS'name'
p107944
S'control_tags'
p107945
sS'required'
p107946
I00
sS'group_name'
p107947
S'Advanced'
p107948
sa(dp107949
S'name'
p107950
S'direction'
p107951
sS'cpp_type'
p107952
S'MooseEnum'
p107953
sS'default'
p107954
g3
sS'description'
p107955
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107956
sS'required'
p107957
I01
sS'options'
p107958
S'to_multiapp from_multiapp'
p107959
sS'group_name'
p107960
Nsa(dp107961
S'description'
p107962
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107963
sS'cpp_type'
p107964
S'bool'
p107965
sS'default'
p107966
S'0'
p107967
sS'name'
p107968
S'displaced_source_mesh'
p107969
sS'required'
p107970
I00
sS'group_name'
p107971
Nsa(dp107972
S'description'
p107973
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107974
sS'cpp_type'
p107975
S'bool'
p107976
sS'default'
p107977
S'0'
p107978
sS'name'
p107979
S'displaced_target_mesh'
p107980
sS'required'
p107981
I00
sS'group_name'
p107982
Nsa(dp107983
S'description'
p107984
S'Set the enabled status of the MooseObject.\n'
p107985
sS'cpp_type'
p107986
S'bool'
p107987
sS'default'
p107988
S'1'
p107989
sS'name'
p107990
S'enable'
p107991
sS'required'
p107992
I00
sS'group_name'
p107993
S'Advanced'
p107994
sa(dp107995
S'name'
p107996
S'execute_on'
p107997
sS'cpp_type'
p107998
S'MultiMooseEnum'
p107999
sS'default'
p108000
S'SAME_AS_MULTIAPP'
p108001
sS'description'
p108002
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108003
sS'required'
p108004
I00
sS'options'
p108005
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108006
sS'group_name'
p108007
Nsa(dp108008
S'description'
p108009
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p108010
sS'cpp_type'
p108011
S'PostprocessorName'
p108012
sS'default'
p108013
g3
sS'name'
p108014
S'from_postprocessor'
p108015
sS'required'
p108016
I01
sS'group_name'
p108017
Nsa(dp108018
S'description'
p108019
S'The name of the MultiApp to use.\n'
p108020
sS'cpp_type'
p108021
S'MultiAppName'
p108022
sS'default'
p108023
g3
sS'name'
p108024
S'multi_app'
p108025
sS'required'
p108026
I01
sS'group_name'
p108027
Nsa(dp108028
S'name'
p108029
S'reduction_type'
p108030
sS'cpp_type'
p108031
S'MooseEnum'
p108032
sS'default'
p108033
g3
sS'description'
p108034
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p108035
sS'required'
p108036
I00
sS'options'
p108037
S'average sum maximum minimum'
p108038
sS'group_name'
p108039
Nsa(dp108040
S'description'
p108041
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p108042
sS'cpp_type'
p108043
S'PostprocessorName'
p108044
sS'default'
p108045
g3
sS'name'
p108046
S'to_postprocessor'
p108047
sS'required'
p108048
I01
sS'group_name'
p108049
Nsa(dp108050
S'description'
p108051
g3
sS'cpp_type'
p108052
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108053
sS'default'
p108054
S'MultiAppPostprocessorTransfer'
p108055
sS'name'
p108056
S'type'
p108057
sS'required'
p108058
I00
sS'group_name'
p108059
Nsa(dp108060
S'description'
p108061
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108062
sS'cpp_type'
p108063
S'bool'
p108064
sS'default'
p108065
S'0'
p108066
sS'name'
p108067
S'use_displaced_mesh'
p108068
sS'required'
p108069
I00
sS'group_name'
p108070
S'Advanced'
p108071
sasS'name'
p108072
S'/Transfers/MultiAppPostprocessorTransfer'
p108073
sa(dp108074
S'description'
p108075
g3
sS'subblocks'
p108076
NsS'parameters'
p108077
(lp108078
(dp108079
S'description'
p108080
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108081
sS'cpp_type'
p108082
S'bool'
p108083
sS'default'
p108084
S'1'
p108085
sS'name'
p108086
S'check_multiapp_execute_on'
p108087
sS'required'
p108088
I00
sS'group_name'
p108089
Nsa(dp108090
S'description'
p108091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108092
sS'cpp_type'
p108093
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108094
sS'default'
p108095
g3
sS'name'
p108096
S'control_tags'
p108097
sS'required'
p108098
I00
sS'group_name'
p108099
S'Advanced'
p108100
sa(dp108101
S'name'
p108102
S'direction'
p108103
sS'cpp_type'
p108104
S'MooseEnum'
p108105
sS'default'
p108106
g3
sS'description'
p108107
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108108
sS'required'
p108109
I01
sS'options'
p108110
S'to_multiapp from_multiapp'
p108111
sS'group_name'
p108112
Nsa(dp108113
S'description'
p108114
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108115
sS'cpp_type'
p108116
S'bool'
p108117
sS'default'
p108118
S'0'
p108119
sS'name'
p108120
S'displaced_source_mesh'
p108121
sS'required'
p108122
I00
sS'group_name'
p108123
Nsa(dp108124
S'description'
p108125
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108126
sS'cpp_type'
p108127
S'bool'
p108128
sS'default'
p108129
S'0'
p108130
sS'name'
p108131
S'displaced_target_mesh'
p108132
sS'required'
p108133
I00
sS'group_name'
p108134
Nsa(dp108135
S'description'
p108136
S'Set the enabled status of the MooseObject.\n'
p108137
sS'cpp_type'
p108138
S'bool'
p108139
sS'default'
p108140
S'1'
p108141
sS'name'
p108142
S'enable'
p108143
sS'required'
p108144
I00
sS'group_name'
p108145
S'Advanced'
p108146
sa(dp108147
S'name'
p108148
S'execute_on'
p108149
sS'cpp_type'
p108150
S'MultiMooseEnum'
p108151
sS'default'
p108152
S'SAME_AS_MULTIAPP'
p108153
sS'description'
p108154
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108155
sS'required'
p108156
I00
sS'options'
p108157
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108158
sS'group_name'
p108159
Nsa(dp108160
S'description'
p108161
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n'
p108162
sS'cpp_type'
p108163
S'bool'
p108164
sS'default'
p108165
S'0'
p108166
sS'name'
p108167
S'fixed_meshes'
p108168
sS'required'
p108169
I00
sS'group_name'
p108170
Nsa(dp108171
S'description'
p108172
S'The name of the MultiApp to use.\n'
p108173
sS'cpp_type'
p108174
S'MultiAppName'
p108175
sS'default'
p108176
g3
sS'name'
p108177
S'multi_app'
p108178
sS'required'
p108179
I01
sS'group_name'
p108180
Nsa(dp108181
S'name'
p108182
S'proj_type'
p108183
sS'cpp_type'
p108184
S'MooseEnum'
p108185
sS'default'
p108186
S'l2'
p108187
sS'description'
p108188
S'The type of the projection.\n'
p108189
sS'required'
p108190
I00
sS'options'
p108191
S'l2'
p108192
sS'group_name'
p108193
Nsa(dp108194
S'description'
p108195
S'The variable to transfer from.\n'
p108196
sS'cpp_type'
p108197
S'VariableName'
p108198
sS'default'
p108199
g3
sS'name'
p108200
S'source_variable'
p108201
sS'required'
p108202
I01
sS'group_name'
p108203
Nsa(dp108204
S'description'
p108205
g3
sS'cpp_type'
p108206
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108207
sS'default'
p108208
S'MultiAppProjectionTransfer'
p108209
sS'name'
p108210
S'type'
p108211
sS'required'
p108212
I00
sS'group_name'
p108213
Nsa(dp108214
S'description'
p108215
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108216
sS'cpp_type'
p108217
S'bool'
p108218
sS'default'
p108219
S'0'
p108220
sS'name'
p108221
S'use_displaced_mesh'
p108222
sS'required'
p108223
I00
sS'group_name'
p108224
S'Advanced'
p108225
sa(dp108226
S'description'
p108227
S'The auxiliary variable to store the transferred values in.\n'
p108228
sS'cpp_type'
p108229
S'AuxVariableName'
p108230
sS'default'
p108231
g3
sS'name'
p108232
S'variable'
p108233
sS'required'
p108234
I01
sS'group_name'
p108235
NsasS'name'
p108236
S'/Transfers/MultiAppProjectionTransfer'
p108237
sa(dp108238
S'description'
p108239
g3
sS'subblocks'
p108240
NsS'parameters'
p108241
(lp108242
(dp108243
S'description'
p108244
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108245
sS'cpp_type'
p108246
S'bool'
p108247
sS'default'
p108248
S'1'
p108249
sS'name'
p108250
S'check_multiapp_execute_on'
p108251
sS'required'
p108252
I00
sS'group_name'
p108253
Nsa(dp108254
S'description'
p108255
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108256
sS'cpp_type'
p108257
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108258
sS'default'
p108259
g3
sS'name'
p108260
S'control_tags'
p108261
sS'required'
p108262
I00
sS'group_name'
p108263
S'Advanced'
p108264
sa(dp108265
S'name'
p108266
S'direction'
p108267
sS'cpp_type'
p108268
S'MooseEnum'
p108269
sS'default'
p108270
g3
sS'description'
p108271
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108272
sS'required'
p108273
I01
sS'options'
p108274
S'to_multiapp from_multiapp'
p108275
sS'group_name'
p108276
Nsa(dp108277
S'description'
p108278
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108279
sS'cpp_type'
p108280
S'bool'
p108281
sS'default'
p108282
S'0'
p108283
sS'name'
p108284
S'displaced_source_mesh'
p108285
sS'required'
p108286
I00
sS'group_name'
p108287
Nsa(dp108288
S'description'
p108289
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108290
sS'cpp_type'
p108291
S'bool'
p108292
sS'default'
p108293
S'0'
p108294
sS'name'
p108295
S'displaced_target_mesh'
p108296
sS'required'
p108297
I00
sS'group_name'
p108298
Nsa(dp108299
S'description'
p108300
S'Set the enabled status of the MooseObject.\n'
p108301
sS'cpp_type'
p108302
S'bool'
p108303
sS'default'
p108304
S'1'
p108305
sS'name'
p108306
S'enable'
p108307
sS'required'
p108308
I00
sS'group_name'
p108309
S'Advanced'
p108310
sa(dp108311
S'name'
p108312
S'execute_on'
p108313
sS'cpp_type'
p108314
S'MultiMooseEnum'
p108315
sS'default'
p108316
S'SAME_AS_MULTIAPP'
p108317
sS'description'
p108318
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108319
sS'required'
p108320
I00
sS'options'
p108321
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108322
sS'group_name'
p108323
Nsa(dp108324
S'description'
p108325
S'The name of the MultiApp to use.\n'
p108326
sS'cpp_type'
p108327
S'MultiAppName'
p108328
sS'default'
p108329
g3
sS'name'
p108330
S'multi_app'
p108331
sS'required'
p108332
I01
sS'group_name'
p108333
Nsa(dp108334
S'description'
p108335
g3
sS'cpp_type'
p108336
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108337
sS'default'
p108338
S'MultiAppUserObjectTransfer'
p108339
sS'name'
p108340
S'type'
p108341
sS'required'
p108342
I00
sS'group_name'
p108343
Nsa(dp108344
S'description'
p108345
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108346
sS'cpp_type'
p108347
S'bool'
p108348
sS'default'
p108349
S'0'
p108350
sS'name'
p108351
S'use_displaced_mesh'
p108352
sS'required'
p108353
I00
sS'group_name'
p108354
S'Advanced'
p108355
sa(dp108356
S'description'
p108357
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p108358
sS'cpp_type'
p108359
S'UserObjectName'
p108360
sS'default'
p108361
g3
sS'name'
p108362
S'user_object'
p108363
sS'required'
p108364
I01
sS'group_name'
p108365
Nsa(dp108366
S'description'
p108367
S'The auxiliary variable to store the transferred values in.\n'
p108368
sS'cpp_type'
p108369
S'AuxVariableName'
p108370
sS'default'
p108371
g3
sS'name'
p108372
S'variable'
p108373
sS'required'
p108374
I01
sS'group_name'
p108375
NsasS'name'
p108376
S'/Transfers/MultiAppUserObjectTransfer'
p108377
sa(dp108378
S'description'
p108379
g3
sS'subblocks'
p108380
NsS'parameters'
p108381
(lp108382
(dp108383
S'description'
p108384
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108385
sS'cpp_type'
p108386
S'bool'
p108387
sS'default'
p108388
S'1'
p108389
sS'name'
p108390
S'check_multiapp_execute_on'
p108391
sS'required'
p108392
I00
sS'group_name'
p108393
Nsa(dp108394
S'description'
p108395
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108396
sS'cpp_type'
p108397
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108398
sS'default'
p108399
g3
sS'name'
p108400
S'control_tags'
p108401
sS'required'
p108402
I00
sS'group_name'
p108403
S'Advanced'
p108404
sa(dp108405
S'name'
p108406
S'direction'
p108407
sS'cpp_type'
p108408
S'MooseEnum'
p108409
sS'default'
p108410
g3
sS'description'
p108411
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108412
sS'required'
p108413
I01
sS'options'
p108414
S'to_multiapp from_multiapp'
p108415
sS'group_name'
p108416
Nsa(dp108417
S'description'
p108418
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108419
sS'cpp_type'
p108420
S'bool'
p108421
sS'default'
p108422
S'0'
p108423
sS'name'
p108424
S'displaced_source_mesh'
p108425
sS'required'
p108426
I00
sS'group_name'
p108427
Nsa(dp108428
S'description'
p108429
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108430
sS'cpp_type'
p108431
S'bool'
p108432
sS'default'
p108433
S'0'
p108434
sS'name'
p108435
S'displaced_target_mesh'
p108436
sS'required'
p108437
I00
sS'group_name'
p108438
Nsa(dp108439
S'description'
p108440
S'Set the enabled status of the MooseObject.\n'
p108441
sS'cpp_type'
p108442
S'bool'
p108443
sS'default'
p108444
S'1'
p108445
sS'name'
p108446
S'enable'
p108447
sS'required'
p108448
I00
sS'group_name'
p108449
S'Advanced'
p108450
sa(dp108451
S'name'
p108452
S'execute_on'
p108453
sS'cpp_type'
p108454
S'MultiMooseEnum'
p108455
sS'default'
p108456
S'SAME_AS_MULTIAPP'
p108457
sS'description'
p108458
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108459
sS'required'
p108460
I00
sS'options'
p108461
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108462
sS'group_name'
p108463
Nsa(dp108464
S'description'
p108465
S'The name of the MultiApp to use.\n'
p108466
sS'cpp_type'
p108467
S'MultiAppName'
p108468
sS'default'
p108469
g3
sS'name'
p108470
S'multi_app'
p108471
sS'required'
p108472
I01
sS'group_name'
p108473
Nsa(dp108474
S'description'
p108475
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p108476
sS'cpp_type'
p108477
S'PostprocessorName'
p108478
sS'default'
p108479
g3
sS'name'
p108480
S'postprocessor'
p108481
sS'required'
p108482
I01
sS'group_name'
p108483
Nsa(dp108484
S'description'
p108485
S'The variable to transfer from.\n'
p108486
sS'cpp_type'
p108487
S'VariableName'
p108488
sS'default'
p108489
g3
sS'name'
p108490
S'source_variable'
p108491
sS'required'
p108492
I01
sS'group_name'
p108493
Nsa(dp108494
S'description'
p108495
g3
sS'cpp_type'
p108496
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108497
sS'default'
p108498
S'MultiAppVariableValueSamplePostprocessorTransfer'
p108499
sS'name'
p108500
S'type'
p108501
sS'required'
p108502
I00
sS'group_name'
p108503
Nsa(dp108504
S'description'
p108505
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108506
sS'cpp_type'
p108507
S'bool'
p108508
sS'default'
p108509
S'0'
p108510
sS'name'
p108511
S'use_displaced_mesh'
p108512
sS'required'
p108513
I00
sS'group_name'
p108514
S'Advanced'
p108515
sasS'name'
p108516
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p108517
sa(dp108518
S'description'
p108519
g3
sS'subblocks'
p108520
NsS'parameters'
p108521
(lp108522
(dp108523
S'description'
p108524
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108525
sS'cpp_type'
p108526
S'bool'
p108527
sS'default'
p108528
S'1'
p108529
sS'name'
p108530
S'check_multiapp_execute_on'
p108531
sS'required'
p108532
I00
sS'group_name'
p108533
Nsa(dp108534
S'description'
p108535
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108536
sS'cpp_type'
p108537
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108538
sS'default'
p108539
g3
sS'name'
p108540
S'control_tags'
p108541
sS'required'
p108542
I00
sS'group_name'
p108543
S'Advanced'
p108544
sa(dp108545
S'name'
p108546
S'direction'
p108547
sS'cpp_type'
p108548
S'MooseEnum'
p108549
sS'default'
p108550
g3
sS'description'
p108551
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108552
sS'required'
p108553
I01
sS'options'
p108554
S'to_multiapp from_multiapp'
p108555
sS'group_name'
p108556
Nsa(dp108557
S'description'
p108558
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108559
sS'cpp_type'
p108560
S'bool'
p108561
sS'default'
p108562
S'0'
p108563
sS'name'
p108564
S'displaced_source_mesh'
p108565
sS'required'
p108566
I00
sS'group_name'
p108567
Nsa(dp108568
S'description'
p108569
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108570
sS'cpp_type'
p108571
S'bool'
p108572
sS'default'
p108573
S'0'
p108574
sS'name'
p108575
S'displaced_target_mesh'
p108576
sS'required'
p108577
I00
sS'group_name'
p108578
Nsa(dp108579
S'description'
p108580
S'Set the enabled status of the MooseObject.\n'
p108581
sS'cpp_type'
p108582
S'bool'
p108583
sS'default'
p108584
S'1'
p108585
sS'name'
p108586
S'enable'
p108587
sS'required'
p108588
I00
sS'group_name'
p108589
S'Advanced'
p108590
sa(dp108591
S'name'
p108592
S'execute_on'
p108593
sS'cpp_type'
p108594
S'MultiMooseEnum'
p108595
sS'default'
p108596
S'SAME_AS_MULTIAPP'
p108597
sS'description'
p108598
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108599
sS'required'
p108600
I00
sS'options'
p108601
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108602
sS'group_name'
p108603
Nsa(dp108604
S'description'
p108605
S'The name of the MultiApp to use.\n'
p108606
sS'cpp_type'
p108607
S'MultiAppName'
p108608
sS'default'
p108609
g3
sS'name'
p108610
S'multi_app'
p108611
sS'required'
p108612
I01
sS'group_name'
p108613
Nsa(dp108614
S'description'
p108615
S'The variable to transfer from.\n'
p108616
sS'cpp_type'
p108617
S'VariableName'
p108618
sS'default'
p108619
g3
sS'name'
p108620
S'source_variable'
p108621
sS'required'
p108622
I01
sS'group_name'
p108623
Nsa(dp108624
S'description'
p108625
g3
sS'cpp_type'
p108626
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108627
sS'default'
p108628
S'MultiAppVariableValueSampleTransfer'
p108629
sS'name'
p108630
S'type'
p108631
sS'required'
p108632
I00
sS'group_name'
p108633
Nsa(dp108634
S'description'
p108635
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108636
sS'cpp_type'
p108637
S'bool'
p108638
sS'default'
p108639
S'0'
p108640
sS'name'
p108641
S'use_displaced_mesh'
p108642
sS'required'
p108643
I00
sS'group_name'
p108644
S'Advanced'
p108645
sa(dp108646
S'description'
p108647
S'The auxiliary variable to store the transferred values in.\n'
p108648
sS'cpp_type'
p108649
S'AuxVariableName'
p108650
sS'default'
p108651
g3
sS'name'
p108652
S'variable'
p108653
sS'required'
p108654
I01
sS'group_name'
p108655
NsasS'name'
p108656
S'/Transfers/MultiAppVariableValueSampleTransfer'
p108657
sasS'parameters'
p108658
NsS'name'
p108659
S'/Transfers'
p108660
sa(dp108661
S'description'
p108662
g3
sS'subblocks'
p108663
(lp108664
(dp108665
S'description'
p108666
g3
sS'subblocks'
p108667
NsS'parameters'
p108668
(lp108669
(dp108670
S'description'
p108671
S'A string representing the Moose Object that will be built by this Action\n'
p108672
sS'cpp_type'
p108673
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108674
sS'default'
p108675
g3
sS'name'
p108676
S'type'
p108677
sS'required'
p108678
I01
sS'group_name'
p108679
NsasS'name'
p108680
S'/UserObjects/*'
p108681
sa(dp108682
S'description'
p108683
g3
sS'subblocks'
p108684
NsS'parameters'
p108685
(lp108686
(dp108687
S'description'
p108688
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p108689
sS'cpp_type'
p108690
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p108691
sS'default'
p108692
g3
sS'name'
p108693
S'boundary'
p108694
sS'required'
p108695
I01
sS'group_name'
p108696
Nsa(dp108697
S'description'
p108698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108699
sS'cpp_type'
p108700
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108701
sS'default'
p108702
g3
sS'name'
p108703
S'control_tags'
p108704
sS'required'
p108705
I00
sS'group_name'
p108706
S'Advanced'
p108707
sa(dp108708
S'description'
p108709
S'Set the enabled status of the MooseObject.\n'
p108710
sS'cpp_type'
p108711
S'bool'
p108712
sS'default'
p108713
S'1'
p108714
sS'name'
p108715
S'enable'
p108716
sS'required'
p108717
I00
sS'group_name'
p108718
S'Advanced'
p108719
sa(dp108720
S'name'
p108721
S'execute_on'
p108722
sS'cpp_type'
p108723
S'MultiMooseEnum'
p108724
sS'default'
p108725
S'TIMESTEP_END'
p108726
sS'description'
p108727
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108728
sS'required'
p108729
I00
sS'options'
p108730
S'none initial linear nonlinear timestep_end timestep_begin custom'
p108731
sS'group_name'
p108732
Nsa(dp108733
S'description'
p108734
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p108735
sS'cpp_type'
p108736
S'std::vector<OutputName, std::allocator<OutputName> >'
p108737
sS'default'
p108738
g3
sS'name'
p108739
S'outputs'
p108740
sS'required'
p108741
I00
sS'group_name'
p108742
S'Advanced'
p108743
sa(dp108744
S'description'
p108745
g3
sS'cpp_type'
p108746
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108747
sS'default'
p108748
S'AreaPostprocessor'
p108749
sS'name'
p108750
S'type'
p108751
sS'required'
p108752
I00
sS'group_name'
p108753
Nsa(dp108754
S'description'
p108755
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108756
sS'cpp_type'
p108757
S'bool'
p108758
sS'default'
p108759
S'0'
p108760
sS'name'
p108761
S'use_displaced_mesh'
p108762
sS'required'
p108763
I00
sS'group_name'
p108764
S'Advanced'
p108765
sasS'name'
p108766
S'/UserObjects/AreaPostprocessor'
p108767
sa(dp108768
S'description'
p108769
g3
sS'subblocks'
p108770
NsS'parameters'
p108771
(lp108772
(dp108773
S'description'
p108774
S'The list of block ids (SubdomainID) that this object will be applied\n'
p108775
sS'cpp_type'
p108776
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p108777
sS'default'
p108778
g3
sS'name'
p108779
S'block'
p108780
sS'required'
p108781
I00
sS'group_name'
p108782
Nsa(dp108783
S'description'
p108784
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108785
sS'cpp_type'
p108786
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108787
sS'default'
p108788
g3
sS'name'
p108789
S'control_tags'
p108790
sS'required'
p108791
I00
sS'group_name'
p108792
S'Advanced'
p108793
sa(dp108794
S'description'
p108795
S'Set the enabled status of the MooseObject.\n'
p108796
sS'cpp_type'
p108797
S'bool'
p108798
sS'default'
p108799
S'1'
p108800
sS'name'
p108801
S'enable'
p108802
sS'required'
p108803
I00
sS'group_name'
p108804
S'Advanced'
p108805
sa(dp108806
S'name'
p108807
S'execute_on'
p108808
sS'cpp_type'
p108809
S'MultiMooseEnum'
p108810
sS'default'
p108811
S'TIMESTEP_END'
p108812
sS'description'
p108813
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108814
sS'required'
p108815
I00
sS'options'
p108816
S'none initial linear nonlinear timestep_end timestep_begin custom'
p108817
sS'group_name'
p108818
Nsa(dp108819
S'description'
p108820
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p108821
sS'cpp_type'
p108822
S'std::vector<OutputName, std::allocator<OutputName> >'
p108823
sS'default'
p108824
g3
sS'name'
p108825
S'outputs'
p108826
sS'required'
p108827
I00
sS'group_name'
p108828
S'Advanced'
p108829
sa(dp108830
S'description'
p108831
S'The seed for the master random number generator\n'
p108832
sS'cpp_type'
p108833
S'unsigned int'
p108834
sS'default'
p108835
S'0'
p108836
sS'name'
p108837
S'seed'
p108838
sS'required'
p108839
I00
sS'group_name'
p108840
S'Advanced'
p108841
sa(dp108842
S'description'
p108843
g3
sS'cpp_type'
p108844
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108845
sS'default'
p108846
S'AverageElementSize'
p108847
sS'name'
p108848
S'type'
p108849
sS'required'
p108850
I00
sS'group_name'
p108851
Nsa(dp108852
S'description'
p108853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108854
sS'cpp_type'
p108855
S'bool'
p108856
sS'default'
p108857
S'0'
p108858
sS'name'
p108859
S'use_displaced_mesh'
p108860
sS'required'
p108861
I00
sS'group_name'
p108862
S'Advanced'
p108863
sa(dp108864
S'description'
p108865
S'The name of the variable that this object operates on\n'
p108866
sS'cpp_type'
p108867
S'std::vector<VariableName>'
p108868
sS'default'
p108869
g3
sS'name'
p108870
S'variable'
p108871
sS'required'
p108872
I01
sS'group_name'
p108873
NsasS'name'
p108874
S'/UserObjects/AverageElementSize'
p108875
sa(dp108876
S'description'
p108877
g3
sS'subblocks'
p108878
NsS'parameters'
p108879
(lp108880
(dp108881
S'description'
p108882
S'The list of block ids (SubdomainID) that this object will be applied\n'
p108883
sS'cpp_type'
p108884
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p108885
sS'default'
p108886
g3
sS'name'
p108887
S'block'
p108888
sS'required'
p108889
I00
sS'group_name'
p108890
Nsa(dp108891
S'description'
p108892
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p108893
sS'cpp_type'
p108894
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p108895
sS'default'
p108896
g3
sS'name'
p108897
S'boundary'
p108898
sS'required'
p108899
I00
sS'group_name'
p108900
Nsa(dp108901
S'description'
p108902
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108903
sS'cpp_type'
p108904
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108905
sS'default'
p108906
g3
sS'name'
p108907
S'control_tags'
p108908
sS'required'
p108909
I00
sS'group_name'
p108910
S'Advanced'
p108911
sa(dp108912
S'description'
p108913
S'Set the enabled status of the MooseObject.\n'
p108914
sS'cpp_type'
p108915
S'bool'
p108916
sS'default'
p108917
S'1'
p108918
sS'name'
p108919
S'enable'
p108920
sS'required'
p108921
I00
sS'group_name'
p108922
S'Advanced'
p108923
sa(dp108924
S'name'
p108925
S'execute_on'
p108926
sS'cpp_type'
p108927
S'MultiMooseEnum'
p108928
sS'default'
p108929
S'TIMESTEP_END'
p108930
sS'description'
p108931
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108932
sS'required'
p108933
I00
sS'options'
p108934
S'none initial linear nonlinear timestep_end timestep_begin custom'
p108935
sS'group_name'
p108936
Nsa(dp108937
S'description'
p108938
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p108939
sS'cpp_type'
p108940
S'std::vector<OutputName, std::allocator<OutputName> >'
p108941
sS'default'
p108942
g3
sS'name'
p108943
S'outputs'
p108944
sS'required'
p108945
I00
sS'group_name'
p108946
S'Advanced'
p108947
sa(dp108948
S'description'
p108949
S'The seed for the master random number generator\n'
p108950
sS'cpp_type'
p108951
S'unsigned int'
p108952
sS'default'
p108953
S'0'
p108954
sS'name'
p108955
S'seed'
p108956
sS'required'
p108957
I00
sS'group_name'
p108958
S'Advanced'
p108959
sa(dp108960
S'description'
p108961
g3
sS'cpp_type'
p108962
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108963
sS'default'
p108964
S'AverageNodalVariableValue'
p108965
sS'name'
p108966
S'type'
p108967
sS'required'
p108968
I00
sS'group_name'
p108969
Nsa(dp108970
S'description'
p108971
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p108972
sS'cpp_type'
p108973
S'bool'
p108974
sS'default'
p108975
S'0'
p108976
sS'name'
p108977
S'unique_node_execute'
p108978
sS'required'
p108979
I00
sS'group_name'
p108980
Nsa(dp108981
S'description'
p108982
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108983
sS'cpp_type'
p108984
S'bool'
p108985
sS'default'
p108986
S'0'
p108987
sS'name'
p108988
S'use_displaced_mesh'
p108989
sS'required'
p108990
I00
sS'group_name'
p108991
S'Advanced'
p108992
sa(dp108993
S'description'
p108994
S'The name of the variable that this postprocessor operates on\n'
p108995
sS'cpp_type'
p108996
S'std::vector<VariableName>'
p108997
sS'default'
p108998
g3
sS'name'
p108999
S'variable'
p109000
sS'required'
p109001
I01
sS'group_name'
p109002
NsasS'name'
p109003
S'/UserObjects/AverageNodalVariableValue'
p109004
sa(dp109005
S'description'
p109006
g3
sS'subblocks'
p109007
NsS'parameters'
p109008
(lp109009
(dp109010
S'description'
p109011
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109012
sS'cpp_type'
p109013
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109014
sS'default'
p109015
g3
sS'name'
p109016
S'boundary'
p109017
sS'required'
p109018
I01
sS'group_name'
p109019
Nsa(dp109020
S'description'
p109021
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109022
sS'cpp_type'
p109023
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109024
sS'default'
p109025
g3
sS'name'
p109026
S'control_tags'
p109027
sS'required'
p109028
I00
sS'group_name'
p109029
S'Advanced'
p109030
sa(dp109031
S'description'
p109032
S'Set the enabled status of the MooseObject.\n'
p109033
sS'cpp_type'
p109034
S'bool'
p109035
sS'default'
p109036
S'1'
p109037
sS'name'
p109038
S'enable'
p109039
sS'required'
p109040
I00
sS'group_name'
p109041
S'Advanced'
p109042
sa(dp109043
S'name'
p109044
S'execute_on'
p109045
sS'cpp_type'
p109046
S'MultiMooseEnum'
p109047
sS'default'
p109048
S'TIMESTEP_END'
p109049
sS'description'
p109050
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109051
sS'required'
p109052
I00
sS'options'
p109053
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109054
sS'group_name'
p109055
Nsa(dp109056
S'description'
p109057
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109058
sS'cpp_type'
p109059
S'std::vector<OutputName, std::allocator<OutputName> >'
p109060
sS'default'
p109061
g3
sS'name'
p109062
S'outputs'
p109063
sS'required'
p109064
I00
sS'group_name'
p109065
S'Advanced'
p109066
sa(dp109067
S'description'
p109068
g3
sS'cpp_type'
p109069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109070
sS'default'
p109071
S'AxisymmetricCenterlineAverageValue'
p109072
sS'name'
p109073
S'type'
p109074
sS'required'
p109075
I00
sS'group_name'
p109076
Nsa(dp109077
S'description'
p109078
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109079
sS'cpp_type'
p109080
S'bool'
p109081
sS'default'
p109082
S'0'
p109083
sS'name'
p109084
S'use_displaced_mesh'
p109085
sS'required'
p109086
I00
sS'group_name'
p109087
S'Advanced'
p109088
sa(dp109089
S'description'
p109090
S'The name of the variable that this boundary condition applies to\n'
p109091
sS'cpp_type'
p109092
S'std::vector<VariableName>'
p109093
sS'default'
p109094
g3
sS'name'
p109095
S'variable'
p109096
sS'required'
p109097
I01
sS'group_name'
p109098
NsasS'name'
p109099
S'/UserObjects/AxisymmetricCenterlineAverageValue'
p109100
sa(dp109101
S'description'
p109102
g3
sS'subblocks'
p109103
NsS'parameters'
p109104
(lp109105
(dp109106
S'description'
p109107
S'The CavityPressureUserObject that computes the initial moles\n'
p109108
sS'cpp_type'
p109109
S'UserObjectName'
p109110
sS'default'
p109111
g3
sS'name'
p109112
S'cavity_pressure_uo'
p109113
sS'required'
p109114
I01
sS'group_name'
p109115
Nsa(dp109116
S'description'
p109117
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109118
sS'cpp_type'
p109119
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109120
sS'default'
p109121
g3
sS'name'
p109122
S'control_tags'
p109123
sS'required'
p109124
I00
sS'group_name'
p109125
S'Advanced'
p109126
sa(dp109127
S'description'
p109128
S'Set the enabled status of the MooseObject.\n'
p109129
sS'cpp_type'
p109130
S'bool'
p109131
sS'default'
p109132
S'1'
p109133
sS'name'
p109134
S'enable'
p109135
sS'required'
p109136
I00
sS'group_name'
p109137
S'Advanced'
p109138
sa(dp109139
S'name'
p109140
S'execute_on'
p109141
sS'cpp_type'
p109142
S'MultiMooseEnum'
p109143
sS'default'
p109144
S'TIMESTEP_END'
p109145
sS'description'
p109146
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109147
sS'required'
p109148
I00
sS'options'
p109149
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109150
sS'group_name'
p109151
Nsa(dp109152
S'description'
p109153
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109154
sS'cpp_type'
p109155
S'std::vector<OutputName, std::allocator<OutputName> >'
p109156
sS'default'
p109157
g3
sS'name'
p109158
S'outputs'
p109159
sS'required'
p109160
I00
sS'group_name'
p109161
S'Advanced'
p109162
sa(dp109163
S'description'
p109164
S'The quantity to report\n'
p109165
sS'cpp_type'
p109166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109167
sS'default'
p109168
g3
sS'name'
p109169
S'quantity'
p109170
sS'required'
p109171
I01
sS'group_name'
p109172
Nsa(dp109173
S'description'
p109174
g3
sS'cpp_type'
p109175
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109176
sS'default'
p109177
S'CavityPressurePostprocessor'
p109178
sS'name'
p109179
S'type'
p109180
sS'required'
p109181
I00
sS'group_name'
p109182
Nsa(dp109183
S'description'
p109184
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109185
sS'cpp_type'
p109186
S'bool'
p109187
sS'default'
p109188
S'1'
p109189
sS'name'
p109190
S'use_displaced_mesh'
p109191
sS'required'
p109192
I00
sS'group_name'
p109193
S'Advanced'
p109194
sasS'name'
p109195
S'/UserObjects/CavityPressurePostprocessor'
p109196
sa(dp109197
S'description'
p109198
g3
sS'subblocks'
p109199
NsS'parameters'
p109200
(lp109201
(dp109202
S'description'
p109203
S'The universal gas constant for the units used.\n'
p109204
sS'cpp_type'
p109205
S'double'
p109206
sS'default'
p109207
g3
sS'name'
p109208
S'R'
p109209
sS'required'
p109210
I01
sS'group_name'
p109211
Nsa(dp109212
S'description'
p109213
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109214
sS'cpp_type'
p109215
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109216
sS'default'
p109217
g3
sS'name'
p109218
S'control_tags'
p109219
sS'required'
p109220
I00
sS'group_name'
p109221
S'Advanced'
p109222
sa(dp109223
S'description'
p109224
S'Set the enabled status of the MooseObject.\n'
p109225
sS'cpp_type'
p109226
S'bool'
p109227
sS'default'
p109228
S'1'
p109229
sS'name'
p109230
S'enable'
p109231
sS'required'
p109232
I00
sS'group_name'
p109233
S'Advanced'
p109234
sa(dp109235
S'name'
p109236
S'execute_on'
p109237
sS'cpp_type'
p109238
S'MultiMooseEnum'
p109239
sS'default'
p109240
S'TIMESTEP_END'
p109241
sS'description'
p109242
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109243
sS'required'
p109244
I00
sS'options'
p109245
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109246
sS'group_name'
p109247
Nsa(dp109248
S'description'
p109249
S'The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n'
p109250
sS'cpp_type'
p109251
S'double'
p109252
sS'default'
p109253
S'0'
p109254
sS'name'
p109255
S'initial_pressure'
p109256
sS'required'
p109257
I00
sS'group_name'
p109258
Nsa(dp109259
S'description'
p109260
S'Initial temperature (optional)\n'
p109261
sS'cpp_type'
p109262
S'double'
p109263
sS'default'
p109264
g3
sS'name'
p109265
S'initial_temperature'
p109266
sS'required'
p109267
I00
sS'group_name'
p109268
Nsa(dp109269
S'description'
p109270
S'The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n'
p109271
sS'cpp_type'
p109272
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p109273
sS'default'
p109274
g3
sS'name'
p109275
S'material_input'
p109276
sS'required'
p109277
I00
sS'group_name'
p109278
Nsa(dp109279
S'description'
p109280
S'The amount of time during which the pressure will ramp from zero to its true value.\n'
p109281
sS'cpp_type'
p109282
S'double'
p109283
sS'default'
p109284
S'0'
p109285
sS'name'
p109286
S'startup_time'
p109287
sS'required'
p109288
I00
sS'group_name'
p109289
Nsa(dp109290
S'description'
p109291
S'The name of the average temperature postprocessor value.\n'
p109292
sS'cpp_type'
p109293
S'PostprocessorName'
p109294
sS'default'
p109295
g3
sS'name'
p109296
S'temperature'
p109297
sS'required'
p109298
I01
sS'group_name'
p109299
Nsa(dp109300
S'description'
p109301
g3
sS'cpp_type'
p109302
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109303
sS'default'
p109304
S'CavityPressureUserObject'
p109305
sS'name'
p109306
S'type'
p109307
sS'required'
p109308
I00
sS'group_name'
p109309
Nsa(dp109310
S'description'
p109311
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109312
sS'cpp_type'
p109313
S'bool'
p109314
sS'default'
p109315
S'1'
p109316
sS'name'
p109317
S'use_displaced_mesh'
p109318
sS'required'
p109319
I00
sS'group_name'
p109320
S'Advanced'
p109321
sa(dp109322
S'description'
p109323
S'The name of the internal volume postprocessor value.\n'
p109324
sS'cpp_type'
p109325
S'PostprocessorName'
p109326
sS'default'
p109327
g3
sS'name'
p109328
S'volume'
p109329
sS'required'
p109330
I01
sS'group_name'
p109331
NsasS'name'
p109332
S'/UserObjects/CavityPressureUserObject'
p109333
sa(dp109334
S'description'
p109335
g3
sS'subblocks'
p109336
NsS'parameters'
p109337
(lp109338
(dp109339
S'description'
p109340
S'Compute magnitude of relative change instead of change\n'
p109341
sS'cpp_type'
p109342
S'bool'
p109343
sS'default'
p109344
S'0'
p109345
sS'name'
p109346
S'compute_relative_change'
p109347
sS'required'
p109348
I00
sS'group_name'
p109349
Nsa(dp109350
S'description'
p109351
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109352
sS'cpp_type'
p109353
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109354
sS'default'
p109355
g3
sS'name'
p109356
S'control_tags'
p109357
sS'required'
p109358
I00
sS'group_name'
p109359
S'Advanced'
p109360
sa(dp109361
S'description'
p109362
S'Set the enabled status of the MooseObject.\n'
p109363
sS'cpp_type'
p109364
S'bool'
p109365
sS'default'
p109366
S'1'
p109367
sS'name'
p109368
S'enable'
p109369
sS'required'
p109370
I00
sS'group_name'
p109371
S'Advanced'
p109372
sa(dp109373
S'name'
p109374
S'execute_on'
p109375
sS'cpp_type'
p109376
S'MultiMooseEnum'
p109377
sS'default'
p109378
S'TIMESTEP_END'
p109379
sS'description'
p109380
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109381
sS'required'
p109382
I00
sS'options'
p109383
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109384
sS'group_name'
p109385
Nsa(dp109386
S'description'
p109387
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109388
sS'cpp_type'
p109389
S'std::vector<OutputName, std::allocator<OutputName> >'
p109390
sS'default'
p109391
g3
sS'name'
p109392
S'outputs'
p109393
sS'required'
p109394
I00
sS'group_name'
p109395
S'Advanced'
p109396
sa(dp109397
S'description'
p109398
S'The name of the postprocessor\n'
p109399
sS'cpp_type'
p109400
S'PostprocessorName'
p109401
sS'default'
p109402
g3
sS'name'
p109403
S'postprocessor'
p109404
sS'required'
p109405
I01
sS'group_name'
p109406
Nsa(dp109407
S'description'
p109408
g3
sS'cpp_type'
p109409
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109410
sS'default'
p109411
S'ChangeOverTimestepPostprocessor'
p109412
sS'name'
p109413
S'type'
p109414
sS'required'
p109415
I00
sS'group_name'
p109416
Nsa(dp109417
S'description'
p109418
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109419
sS'cpp_type'
p109420
S'bool'
p109421
sS'default'
p109422
S'0'
p109423
sS'name'
p109424
S'use_displaced_mesh'
p109425
sS'required'
p109426
I00
sS'group_name'
p109427
S'Advanced'
p109428
sasS'name'
p109429
S'/UserObjects/ChangeOverTimestepPostprocessor'
p109430
sa(dp109431
S'description'
p109432
S'Userobject for calculating force and torque acting on a grain\n'
p109433
sS'subblocks'
p109434
NsS'parameters'
p109435
(lp109436
(dp109437
S'description'
p109438
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109439
sS'cpp_type'
p109440
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109441
sS'default'
p109442
g3
sS'name'
p109443
S'block'
p109444
sS'required'
p109445
I00
sS'group_name'
p109446
Nsa(dp109447
S'description'
p109448
S'Concentration field\n'
p109449
sS'cpp_type'
p109450
S'std::vector<VariableName>'
p109451
sS'default'
p109452
g3
sS'name'
p109453
S'c'
p109454
sS'required'
p109455
I00
sS'group_name'
p109456
Nsa(dp109457
S'description'
p109458
S'Compute Jacobians for coupled variables\n'
p109459
sS'cpp_type'
p109460
S'bool'
p109461
sS'default'
p109462
S'1'
p109463
sS'name'
p109464
S'compute_jacobians'
p109465
sS'required'
p109466
I00
sS'group_name'
p109467
S'Advanced'
p109468
sa(dp109469
S'description'
p109470
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109471
sS'cpp_type'
p109472
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109473
sS'default'
p109474
g3
sS'name'
p109475
S'control_tags'
p109476
sS'required'
p109477
I00
sS'group_name'
p109478
S'Advanced'
p109479
sa(dp109480
S'description'
p109481
S'Set the enabled status of the MooseObject.\n'
p109482
sS'cpp_type'
p109483
S'bool'
p109484
sS'default'
p109485
S'1'
p109486
sS'name'
p109487
S'enable'
p109488
sS'required'
p109489
I00
sS'group_name'
p109490
S'Advanced'
p109491
sa(dp109492
S'description'
p109493
S'Array of coupled order parameters\n'
p109494
sS'cpp_type'
p109495
S'std::vector<VariableName>'
p109496
sS'default'
p109497
g3
sS'name'
p109498
S'etas'
p109499
sS'required'
p109500
I00
sS'group_name'
p109501
Nsa(dp109502
S'name'
p109503
S'execute_on'
p109504
sS'cpp_type'
p109505
S'MultiMooseEnum'
p109506
sS'default'
p109507
S'TIMESTEP_END'
p109508
sS'description'
p109509
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109510
sS'required'
p109511
I00
sS'options'
p109512
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109513
sS'group_name'
p109514
Nsa(dp109515
S'description'
p109516
S'Force density material\n'
p109517
sS'cpp_type'
p109518
S'MaterialPropertyName'
p109519
sS'default'
p109520
S'force_density'
p109521
sS'name'
p109522
S'force_density'
p109523
sS'required'
p109524
I00
sS'group_name'
p109525
Nsa(dp109526
S'description'
p109527
S'center of mass of grains\n'
p109528
sS'cpp_type'
p109529
S'UserObjectName'
p109530
sS'default'
p109531
g3
sS'name'
p109532
S'grain_data'
p109533
sS'required'
p109534
I00
sS'group_name'
p109535
Nsa(dp109536
S'description'
p109537
S'The seed for the master random number generator\n'
p109538
sS'cpp_type'
p109539
S'unsigned int'
p109540
sS'default'
p109541
S'0'
p109542
sS'name'
p109543
S'seed'
p109544
sS'required'
p109545
I00
sS'group_name'
p109546
S'Advanced'
p109547
sa(dp109548
S'description'
p109549
g3
sS'cpp_type'
p109550
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109551
sS'default'
p109552
S'ComputeExternalGrainForceAndTorque'
p109553
sS'name'
p109554
S'type'
p109555
sS'required'
p109556
I00
sS'group_name'
p109557
Nsa(dp109558
S'description'
p109559
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109560
sS'cpp_type'
p109561
S'bool'
p109562
sS'default'
p109563
S'0'
p109564
sS'name'
p109565
S'use_displaced_mesh'
p109566
sS'required'
p109567
I00
sS'group_name'
p109568
S'Advanced'
p109569
sasS'name'
p109570
S'/UserObjects/ComputeExternalGrainForceAndTorque'
p109571
sa(dp109572
S'description'
p109573
S'Userobject for calculating force and torque acting on a grain\n'
p109574
sS'subblocks'
p109575
NsS'parameters'
p109576
(lp109577
(dp109578
S'description'
p109579
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109580
sS'cpp_type'
p109581
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109582
sS'default'
p109583
g3
sS'name'
p109584
S'block'
p109585
sS'required'
p109586
I00
sS'group_name'
p109587
Nsa(dp109588
S'description'
p109589
S'Concentration field\n'
p109590
sS'cpp_type'
p109591
S'std::vector<VariableName>'
p109592
sS'default'
p109593
g3
sS'name'
p109594
S'c'
p109595
sS'required'
p109596
I00
sS'group_name'
p109597
Nsa(dp109598
S'description'
p109599
S'Compute Jacobians for coupled variables\n'
p109600
sS'cpp_type'
p109601
S'bool'
p109602
sS'default'
p109603
S'1'
p109604
sS'name'
p109605
S'compute_jacobians'
p109606
sS'required'
p109607
I00
sS'group_name'
p109608
S'Advanced'
p109609
sa(dp109610
S'description'
p109611
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109612
sS'cpp_type'
p109613
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109614
sS'default'
p109615
g3
sS'name'
p109616
S'control_tags'
p109617
sS'required'
p109618
I00
sS'group_name'
p109619
S'Advanced'
p109620
sa(dp109621
S'description'
p109622
S'Set the enabled status of the MooseObject.\n'
p109623
sS'cpp_type'
p109624
S'bool'
p109625
sS'default'
p109626
S'1'
p109627
sS'name'
p109628
S'enable'
p109629
sS'required'
p109630
I00
sS'group_name'
p109631
S'Advanced'
p109632
sa(dp109633
S'description'
p109634
S'Array of coupled order parameters\n'
p109635
sS'cpp_type'
p109636
S'std::vector<VariableName>'
p109637
sS'default'
p109638
g3
sS'name'
p109639
S'etas'
p109640
sS'required'
p109641
I00
sS'group_name'
p109642
Nsa(dp109643
S'name'
p109644
S'execute_on'
p109645
sS'cpp_type'
p109646
S'MultiMooseEnum'
p109647
sS'default'
p109648
S'TIMESTEP_END'
p109649
sS'description'
p109650
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109651
sS'required'
p109652
I00
sS'options'
p109653
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109654
sS'group_name'
p109655
Nsa(dp109656
S'description'
p109657
S'Force density material\n'
p109658
sS'cpp_type'
p109659
S'MaterialPropertyName'
p109660
sS'default'
p109661
S'force_density'
p109662
sS'name'
p109663
S'force_density'
p109664
sS'required'
p109665
I00
sS'group_name'
p109666
Nsa(dp109667
S'description'
p109668
S'center of mass of grains\n'
p109669
sS'cpp_type'
p109670
S'UserObjectName'
p109671
sS'default'
p109672
g3
sS'name'
p109673
S'grain_data'
p109674
sS'required'
p109675
I00
sS'group_name'
p109676
Nsa(dp109677
S'description'
p109678
S'The seed for the master random number generator\n'
p109679
sS'cpp_type'
p109680
S'unsigned int'
p109681
sS'default'
p109682
S'0'
p109683
sS'name'
p109684
S'seed'
p109685
sS'required'
p109686
I00
sS'group_name'
p109687
S'Advanced'
p109688
sa(dp109689
S'description'
p109690
g3
sS'cpp_type'
p109691
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109692
sS'default'
p109693
S'ComputeGrainForceAndTorque'
p109694
sS'name'
p109695
S'type'
p109696
sS'required'
p109697
I00
sS'group_name'
p109698
Nsa(dp109699
S'description'
p109700
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109701
sS'cpp_type'
p109702
S'bool'
p109703
sS'default'
p109704
S'0'
p109705
sS'name'
p109706
S'use_displaced_mesh'
p109707
sS'required'
p109708
I00
sS'group_name'
p109709
S'Advanced'
p109710
sasS'name'
p109711
S'/UserObjects/ComputeGrainForceAndTorque'
p109712
sa(dp109713
S'description'
p109714
g3
sS'subblocks'
p109715
NsS'parameters'
p109716
(lp109717
(dp109718
S'description'
p109719
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109720
sS'cpp_type'
p109721
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109722
sS'default'
p109723
g3
sS'name'
p109724
S'block'
p109725
sS'required'
p109726
I00
sS'group_name'
p109727
Nsa(dp109728
S'description'
p109729
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109730
sS'cpp_type'
p109731
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109732
sS'default'
p109733
g3
sS'name'
p109734
S'control_tags'
p109735
sS'required'
p109736
I00
sS'group_name'
p109737
S'Advanced'
p109738
sa(dp109739
S'description'
p109740
S'Set the enabled status of the MooseObject.\n'
p109741
sS'cpp_type'
p109742
S'bool'
p109743
sS'default'
p109744
S'1'
p109745
sS'name'
p109746
S'enable'
p109747
sS'required'
p109748
I00
sS'group_name'
p109749
S'Advanced'
p109750
sa(dp109751
S'name'
p109752
S'execute_on'
p109753
sS'cpp_type'
p109754
S'MultiMooseEnum'
p109755
sS'default'
p109756
S'TIMESTEP_BEGIN'
p109757
sS'description'
p109758
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109759
sS'required'
p109760
I00
sS'options'
p109761
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109762
sS'group_name'
p109763
Nsa(dp109764
S'description'
p109765
S'Material property to multiply the random numbers with\n'
p109766
sS'cpp_type'
p109767
S'MaterialPropertyName'
p109768
sS'default'
p109769
g3
sS'name'
p109770
S'mask'
p109771
sS'required'
p109772
I00
sS'group_name'
p109773
Nsa(dp109774
S'description'
p109775
S'The seed for the master random number generator\n'
p109776
sS'cpp_type'
p109777
S'unsigned int'
p109778
sS'default'
p109779
S'0'
p109780
sS'name'
p109781
S'seed'
p109782
sS'required'
p109783
I00
sS'group_name'
p109784
S'Advanced'
p109785
sa(dp109786
S'description'
p109787
g3
sS'cpp_type'
p109788
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109789
sS'default'
p109790
S'ConservedMaskedNormalNoise'
p109791
sS'name'
p109792
S'type'
p109793
sS'required'
p109794
I00
sS'group_name'
p109795
Nsa(dp109796
S'description'
p109797
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109798
sS'cpp_type'
p109799
S'bool'
p109800
sS'default'
p109801
S'0'
p109802
sS'name'
p109803
S'use_displaced_mesh'
p109804
sS'required'
p109805
I00
sS'group_name'
p109806
S'Advanced'
p109807
sasS'name'
p109808
S'/UserObjects/ConservedMaskedNormalNoise'
p109809
sa(dp109810
S'description'
p109811
g3
sS'subblocks'
p109812
NsS'parameters'
p109813
(lp109814
(dp109815
S'description'
p109816
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109817
sS'cpp_type'
p109818
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109819
sS'default'
p109820
g3
sS'name'
p109821
S'block'
p109822
sS'required'
p109823
I00
sS'group_name'
p109824
Nsa(dp109825
S'description'
p109826
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109827
sS'cpp_type'
p109828
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109829
sS'default'
p109830
g3
sS'name'
p109831
S'control_tags'
p109832
sS'required'
p109833
I00
sS'group_name'
p109834
S'Advanced'
p109835
sa(dp109836
S'description'
p109837
S'Set the enabled status of the MooseObject.\n'
p109838
sS'cpp_type'
p109839
S'bool'
p109840
sS'default'
p109841
S'1'
p109842
sS'name'
p109843
S'enable'
p109844
sS'required'
p109845
I00
sS'group_name'
p109846
S'Advanced'
p109847
sa(dp109848
S'name'
p109849
S'execute_on'
p109850
sS'cpp_type'
p109851
S'MultiMooseEnum'
p109852
sS'default'
p109853
S'TIMESTEP_BEGIN'
p109854
sS'description'
p109855
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109856
sS'required'
p109857
I00
sS'options'
p109858
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109859
sS'group_name'
p109860
Nsa(dp109861
S'description'
p109862
S'Material property to multiply the random numbers with\n'
p109863
sS'cpp_type'
p109864
S'MaterialPropertyName'
p109865
sS'default'
p109866
g3
sS'name'
p109867
S'mask'
p109868
sS'required'
p109869
I00
sS'group_name'
p109870
Nsa(dp109871
S'description'
p109872
S'The seed for the master random number generator\n'
p109873
sS'cpp_type'
p109874
S'unsigned int'
p109875
sS'default'
p109876
S'0'
p109877
sS'name'
p109878
S'seed'
p109879
sS'required'
p109880
I00
sS'group_name'
p109881
S'Advanced'
p109882
sa(dp109883
S'description'
p109884
g3
sS'cpp_type'
p109885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109886
sS'default'
p109887
S'ConservedMaskedUniformNoise'
p109888
sS'name'
p109889
S'type'
p109890
sS'required'
p109891
I00
sS'group_name'
p109892
Nsa(dp109893
S'description'
p109894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109895
sS'cpp_type'
p109896
S'bool'
p109897
sS'default'
p109898
S'0'
p109899
sS'name'
p109900
S'use_displaced_mesh'
p109901
sS'required'
p109902
I00
sS'group_name'
p109903
S'Advanced'
p109904
sasS'name'
p109905
S'/UserObjects/ConservedMaskedUniformNoise'
p109906
sa(dp109907
S'description'
p109908
g3
sS'subblocks'
p109909
NsS'parameters'
p109910
(lp109911
(dp109912
S'description'
p109913
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109914
sS'cpp_type'
p109915
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109916
sS'default'
p109917
g3
sS'name'
p109918
S'block'
p109919
sS'required'
p109920
I00
sS'group_name'
p109921
Nsa(dp109922
S'description'
p109923
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109924
sS'cpp_type'
p109925
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109926
sS'default'
p109927
g3
sS'name'
p109928
S'control_tags'
p109929
sS'required'
p109930
I00
sS'group_name'
p109931
S'Advanced'
p109932
sa(dp109933
S'description'
p109934
S'Set the enabled status of the MooseObject.\n'
p109935
sS'cpp_type'
p109936
S'bool'
p109937
sS'default'
p109938
S'1'
p109939
sS'name'
p109940
S'enable'
p109941
sS'required'
p109942
I00
sS'group_name'
p109943
S'Advanced'
p109944
sa(dp109945
S'name'
p109946
S'execute_on'
p109947
sS'cpp_type'
p109948
S'MultiMooseEnum'
p109949
sS'default'
p109950
S'TIMESTEP_BEGIN'
p109951
sS'description'
p109952
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109953
sS'required'
p109954
I00
sS'options'
p109955
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109956
sS'group_name'
p109957
Nsa(dp109958
S'description'
p109959
S'The seed for the master random number generator\n'
p109960
sS'cpp_type'
p109961
S'unsigned int'
p109962
sS'default'
p109963
S'0'
p109964
sS'name'
p109965
S'seed'
p109966
sS'required'
p109967
I00
sS'group_name'
p109968
S'Advanced'
p109969
sa(dp109970
S'description'
p109971
g3
sS'cpp_type'
p109972
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109973
sS'default'
p109974
S'ConservedNormalNoise'
p109975
sS'name'
p109976
S'type'
p109977
sS'required'
p109978
I00
sS'group_name'
p109979
Nsa(dp109980
S'description'
p109981
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109982
sS'cpp_type'
p109983
S'bool'
p109984
sS'default'
p109985
S'0'
p109986
sS'name'
p109987
S'use_displaced_mesh'
p109988
sS'required'
p109989
I00
sS'group_name'
p109990
S'Advanced'
p109991
sasS'name'
p109992
S'/UserObjects/ConservedNormalNoise'
p109993
sa(dp109994
S'description'
p109995
g3
sS'subblocks'
p109996
NsS'parameters'
p109997
(lp109998
(dp109999
S'description'
p110000
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110001
sS'cpp_type'
p110002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110003
sS'default'
p110004
g3
sS'name'
p110005
S'block'
p110006
sS'required'
p110007
I00
sS'group_name'
p110008
Nsa(dp110009
S'description'
p110010
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110011
sS'cpp_type'
p110012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110013
sS'default'
p110014
g3
sS'name'
p110015
S'control_tags'
p110016
sS'required'
p110017
I00
sS'group_name'
p110018
S'Advanced'
p110019
sa(dp110020
S'description'
p110021
S'Set the enabled status of the MooseObject.\n'
p110022
sS'cpp_type'
p110023
S'bool'
p110024
sS'default'
p110025
S'1'
p110026
sS'name'
p110027
S'enable'
p110028
sS'required'
p110029
I00
sS'group_name'
p110030
S'Advanced'
p110031
sa(dp110032
S'name'
p110033
S'execute_on'
p110034
sS'cpp_type'
p110035
S'MultiMooseEnum'
p110036
sS'default'
p110037
S'TIMESTEP_BEGIN'
p110038
sS'description'
p110039
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110040
sS'required'
p110041
I00
sS'options'
p110042
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110043
sS'group_name'
p110044
Nsa(dp110045
S'description'
p110046
S'The seed for the master random number generator\n'
p110047
sS'cpp_type'
p110048
S'unsigned int'
p110049
sS'default'
p110050
S'0'
p110051
sS'name'
p110052
S'seed'
p110053
sS'required'
p110054
I00
sS'group_name'
p110055
S'Advanced'
p110056
sa(dp110057
S'description'
p110058
g3
sS'cpp_type'
p110059
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110060
sS'default'
p110061
S'ConservedUniformNoise'
p110062
sS'name'
p110063
S'type'
p110064
sS'required'
p110065
I00
sS'group_name'
p110066
Nsa(dp110067
S'description'
p110068
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110069
sS'cpp_type'
p110070
S'bool'
p110071
sS'default'
p110072
S'0'
p110073
sS'name'
p110074
S'use_displaced_mesh'
p110075
sS'required'
p110076
I00
sS'group_name'
p110077
S'Advanced'
p110078
sasS'name'
p110079
S'/UserObjects/ConservedUniformNoise'
p110080
sa(dp110081
S'description'
p110082
S'Userobject for calculating force and torque acting on a grain\n'
p110083
sS'subblocks'
p110084
NsS'parameters'
p110085
(lp110086
(dp110087
S'description'
p110088
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110089
sS'cpp_type'
p110090
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110091
sS'default'
p110092
g3
sS'name'
p110093
S'control_tags'
p110094
sS'required'
p110095
I00
sS'group_name'
p110096
S'Advanced'
p110097
sa(dp110098
S'description'
p110099
S'Set the enabled status of the MooseObject.\n'
p110100
sS'cpp_type'
p110101
S'bool'
p110102
sS'default'
p110103
S'1'
p110104
sS'name'
p110105
S'enable'
p110106
sS'required'
p110107
I00
sS'group_name'
p110108
S'Advanced'
p110109
sa(dp110110
S'name'
p110111
S'execute_on'
p110112
sS'cpp_type'
p110113
S'MultiMooseEnum'
p110114
sS'default'
p110115
S'TIMESTEP_END'
p110116
sS'description'
p110117
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110118
sS'required'
p110119
I00
sS'options'
p110120
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110121
sS'group_name'
p110122
Nsa(dp110123
S'description'
p110124
S'force acting on grains\n'
p110125
sS'cpp_type'
p110126
S'std::vector<double, std::allocator<double> >'
p110127
sS'default'
p110128
g3
sS'name'
p110129
S'force'
p110130
sS'required'
p110131
I00
sS'group_name'
p110132
Nsa(dp110133
S'description'
p110134
S'torque acting on grains\n'
p110135
sS'cpp_type'
p110136
S'std::vector<double, std::allocator<double> >'
p110137
sS'default'
p110138
g3
sS'name'
p110139
S'torque'
p110140
sS'required'
p110141
I00
sS'group_name'
p110142
Nsa(dp110143
S'description'
p110144
g3
sS'cpp_type'
p110145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110146
sS'default'
p110147
S'ConstantGrainForceAndTorque'
p110148
sS'name'
p110149
S'type'
p110150
sS'required'
p110151
I00
sS'group_name'
p110152
Nsa(dp110153
S'description'
p110154
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110155
sS'cpp_type'
p110156
S'bool'
p110157
sS'default'
p110158
S'0'
p110159
sS'name'
p110160
S'use_displaced_mesh'
p110161
sS'required'
p110162
I00
sS'group_name'
p110163
S'Advanced'
p110164
sasS'name'
p110165
S'/UserObjects/ConstantGrainForceAndTorque'
p110166
sa(dp110167
S'description'
p110168
S'Phenomenological constitutive model slip rate class.  Override the virtual functions in your class\n'
p110169
sS'subblocks'
p110170
NsS'parameters'
p110171
(lp110172
(dp110173
S'description'
p110174
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110175
sS'cpp_type'
p110176
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110177
sS'default'
p110178
g3
sS'name'
p110179
S'block'
p110180
sS'required'
p110181
I00
sS'group_name'
p110182
Nsa(dp110183
S'description'
p110184
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110185
sS'cpp_type'
p110186
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110187
sS'default'
p110188
g3
sS'name'
p110189
S'control_tags'
p110190
sS'required'
p110191
I00
sS'group_name'
p110192
S'Advanced'
p110193
sa(dp110194
S'description'
p110195
S'Set the enabled status of the MooseObject.\n'
p110196
sS'cpp_type'
p110197
S'bool'
p110198
sS'default'
p110199
S'1'
p110200
sS'name'
p110201
S'enable'
p110202
sS'required'
p110203
I00
sS'group_name'
p110204
S'Advanced'
p110205
sa(dp110206
S'description'
p110207
S'Parameters used in slip rate equations\n'
p110208
sS'cpp_type'
p110209
S'std::vector<double, std::allocator<double> >'
p110210
sS'default'
p110211
g3
sS'name'
p110212
S'flowprops'
p110213
sS'required'
p110214
I00
sS'group_name'
p110215
Nsa(dp110216
S'description'
p110217
S'Number of flow rate properties for a slip system\n'
p110218
sS'cpp_type'
p110219
S'unsigned int'
p110220
sS'default'
p110221
S'2'
p110222
sS'name'
p110223
S'num_slip_sys_flowrate_props'
p110224
sS'required'
p110225
I00
sS'group_name'
p110226
Nsa(dp110227
S'description'
p110228
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p110229
sS'cpp_type'
p110230
S'unsigned int'
p110231
sS'default'
p110232
S'0'
p110233
sS'name'
p110234
S'num_slip_sys_props'
p110235
sS'required'
p110236
I00
sS'group_name'
p110237
Nsa(dp110238
S'description'
p110239
S'The seed for the master random number generator\n'
p110240
sS'cpp_type'
p110241
S'unsigned int'
p110242
sS'default'
p110243
S'0'
p110244
sS'name'
p110245
S'seed'
p110246
sS'required'
p110247
I00
sS'group_name'
p110248
S'Advanced'
p110249
sa(dp110250
S'description'
p110251
S'Maximum allowable slip in an increment\n'
p110252
sS'cpp_type'
p110253
S'double'
p110254
sS'default'
p110255
S'0.02'
p110256
sS'name'
p110257
S'slip_incr_tol'
p110258
sS'required'
p110259
I00
sS'group_name'
p110260
Nsa(dp110261
S'description'
p110262
S'Name of the file containing the slip system\n'
p110263
sS'cpp_type'
p110264
S'FileName'
p110265
sS'default'
p110266
g3
sS'name'
p110267
S'slip_sys_file_name'
p110268
sS'required'
p110269
I01
sS'group_name'
p110270
Nsa(dp110271
S'description'
p110272
S'Name of the file containing the values of slip rate equation parameters\n'
p110273
sS'cpp_type'
p110274
S'FileName'
p110275
sS'default'
p110276
g3
sS'name'
p110277
S'slip_sys_flow_prop_file_name'
p110278
sS'required'
p110279
I00
sS'group_name'
p110280
Nsa(dp110281
S'description'
p110282
g3
sS'cpp_type'
p110283
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110284
sS'default'
p110285
S'CrystalPlasticitySlipRateGSS'
p110286
sS'name'
p110287
S'type'
p110288
sS'required'
p110289
I00
sS'group_name'
p110290
Nsa(dp110291
S'description'
p110292
S'Name of state variable property: Same as state variable user object specified in input file.\n'
p110293
sS'cpp_type'
p110294
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110295
sS'default'
p110296
g3
sS'name'
p110297
S'uo_state_var_name'
p110298
sS'required'
p110299
I00
sS'group_name'
p110300
Nsa(dp110301
S'description'
p110302
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110303
sS'cpp_type'
p110304
S'bool'
p110305
sS'default'
p110306
S'0'
p110307
sS'name'
p110308
S'use_displaced_mesh'
p110309
sS'required'
p110310
I00
sS'group_name'
p110311
S'Advanced'
p110312
sa(dp110313
S'description'
p110314
S"The userobject's variable size.\n"
p110315
sS'cpp_type'
p110316
S'unsigned int'
p110317
sS'default'
p110318
g3
sS'name'
p110319
S'variable_size'
p110320
sS'required'
p110321
I01
sS'group_name'
p110322
NsasS'name'
p110323
S'/UserObjects/CrystalPlasticitySlipRateGSS'
p110324
sa(dp110325
S'description'
p110326
S"Phenomenological constitutive models' slip resistance base class.  Override the virtual functions in your class\n"
p110327
sS'subblocks'
p110328
NsS'parameters'
p110329
(lp110330
(dp110331
S'description'
p110332
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110333
sS'cpp_type'
p110334
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110335
sS'default'
p110336
g3
sS'name'
p110337
S'block'
p110338
sS'required'
p110339
I00
sS'group_name'
p110340
Nsa(dp110341
S'description'
p110342
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110343
sS'cpp_type'
p110344
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110345
sS'default'
p110346
g3
sS'name'
p110347
S'control_tags'
p110348
sS'required'
p110349
I00
sS'group_name'
p110350
S'Advanced'
p110351
sa(dp110352
S'description'
p110353
S'Set the enabled status of the MooseObject.\n'
p110354
sS'cpp_type'
p110355
S'bool'
p110356
sS'default'
p110357
S'1'
p110358
sS'name'
p110359
S'enable'
p110360
sS'required'
p110361
I00
sS'group_name'
p110362
S'Advanced'
p110363
sa(dp110364
S'description'
p110365
S'The seed for the master random number generator\n'
p110366
sS'cpp_type'
p110367
S'unsigned int'
p110368
sS'default'
p110369
S'0'
p110370
sS'name'
p110371
S'seed'
p110372
sS'required'
p110373
I00
sS'group_name'
p110374
S'Advanced'
p110375
sa(dp110376
S'description'
p110377
g3
sS'cpp_type'
p110378
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110379
sS'default'
p110380
S'CrystalPlasticitySlipResistanceGSS'
p110381
sS'name'
p110382
S'type'
p110383
sS'required'
p110384
I00
sS'group_name'
p110385
Nsa(dp110386
S'description'
p110387
S'Name of state variable property: Same as state variable user object specified in input file.\n'
p110388
sS'cpp_type'
p110389
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110390
sS'default'
p110391
g3
sS'name'
p110392
S'uo_state_var_name'
p110393
sS'required'
p110394
I00
sS'group_name'
p110395
Nsa(dp110396
S'description'
p110397
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110398
sS'cpp_type'
p110399
S'bool'
p110400
sS'default'
p110401
S'0'
p110402
sS'name'
p110403
S'use_displaced_mesh'
p110404
sS'required'
p110405
I00
sS'group_name'
p110406
S'Advanced'
p110407
sa(dp110408
S'description'
p110409
S"The userobject's variable size.\n"
p110410
sS'cpp_type'
p110411
S'unsigned int'
p110412
sS'default'
p110413
g3
sS'name'
p110414
S'variable_size'
p110415
sS'required'
p110416
I01
sS'group_name'
p110417
NsasS'name'
p110418
S'/UserObjects/CrystalPlasticitySlipResistanceGSS'
p110419
sa(dp110420
S'description'
p110421
S'Phenomenological constitutive model state variable evolution rate component base class.  Override the virtual functions in your class\n'
p110422
sS'subblocks'
p110423
NsS'parameters'
p110424
(lp110425
(dp110426
S'description'
p110427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110428
sS'cpp_type'
p110429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110430
sS'default'
p110431
g3
sS'name'
p110432
S'block'
p110433
sS'required'
p110434
I00
sS'group_name'
p110435
Nsa(dp110436
S'description'
p110437
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110438
sS'cpp_type'
p110439
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110440
sS'default'
p110441
g3
sS'name'
p110442
S'control_tags'
p110443
sS'required'
p110444
I00
sS'group_name'
p110445
S'Advanced'
p110446
sa(dp110447
S'description'
p110448
S'Set the enabled status of the MooseObject.\n'
p110449
sS'cpp_type'
p110450
S'bool'
p110451
sS'default'
p110452
S'1'
p110453
sS'name'
p110454
S'enable'
p110455
sS'required'
p110456
I00
sS'group_name'
p110457
S'Advanced'
p110458
sa(dp110459
S'description'
p110460
S'Hardening properties\n'
p110461
sS'cpp_type'
p110462
S'std::vector<double, std::allocator<double> >'
p110463
sS'default'
p110464
g3
sS'name'
p110465
S'hprops'
p110466
sS'required'
p110467
I00
sS'group_name'
p110468
Nsa(dp110469
S'description'
p110470
S'The seed for the master random number generator\n'
p110471
sS'cpp_type'
p110472
S'unsigned int'
p110473
sS'default'
p110474
S'0'
p110475
sS'name'
p110476
S'seed'
p110477
sS'required'
p110478
I00
sS'group_name'
p110479
S'Advanced'
p110480
sa(dp110481
S'description'
p110482
S'Name of the file containing the values of hardness evolution parameters\n'
p110483
sS'cpp_type'
p110484
S'FileName'
p110485
sS'default'
p110486
g3
sS'name'
p110487
S'slip_sys_hard_prop_file_name'
p110488
sS'required'
p110489
I00
sS'group_name'
p110490
Nsa(dp110491
S'description'
p110492
g3
sS'cpp_type'
p110493
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110494
sS'default'
p110495
S'CrystalPlasticityStateVarRateComponentGSS'
p110496
sS'name'
p110497
S'type'
p110498
sS'required'
p110499
I00
sS'group_name'
p110500
Nsa(dp110501
S'description'
p110502
S'Name of slip rate property: Same as slip rate user object specified in input file.\n'
p110503
sS'cpp_type'
p110504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110505
sS'default'
p110506
g3
sS'name'
p110507
S'uo_slip_rate_name'
p110508
sS'required'
p110509
I00
sS'group_name'
p110510
Nsa(dp110511
S'description'
p110512
S'Name of state variable property: Same as state variable user object specified in input file.\n'
p110513
sS'cpp_type'
p110514
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110515
sS'default'
p110516
g3
sS'name'
p110517
S'uo_state_var_name'
p110518
sS'required'
p110519
I00
sS'group_name'
p110520
Nsa(dp110521
S'description'
p110522
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110523
sS'cpp_type'
p110524
S'bool'
p110525
sS'default'
p110526
S'0'
p110527
sS'name'
p110528
S'use_displaced_mesh'
p110529
sS'required'
p110530
I00
sS'group_name'
p110531
S'Advanced'
p110532
sa(dp110533
S'description'
p110534
S"The userobject's variable size.\n"
p110535
sS'cpp_type'
p110536
S'unsigned int'
p110537
sS'default'
p110538
g3
sS'name'
p110539
S'variable_size'
p110540
sS'required'
p110541
I01
sS'group_name'
p110542
NsasS'name'
p110543
S'/UserObjects/CrystalPlasticityStateVarRateComponentGSS'
p110544
sa(dp110545
S'description'
p110546
S'Crystal plasticity state variable class.  Override the virtual functions in your class\n'
p110547
sS'subblocks'
p110548
NsS'parameters'
p110549
(lp110550
(dp110551
S'description'
p110552
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110553
sS'cpp_type'
p110554
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110555
sS'default'
p110556
g3
sS'name'
p110557
S'block'
p110558
sS'required'
p110559
I00
sS'group_name'
p110560
Nsa(dp110561
S'description'
p110562
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110563
sS'cpp_type'
p110564
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110565
sS'default'
p110566
g3
sS'name'
p110567
S'control_tags'
p110568
sS'required'
p110569
I00
sS'group_name'
p110570
S'Advanced'
p110571
sa(dp110572
S'description'
p110573
S'Set the enabled status of the MooseObject.\n'
p110574
sS'cpp_type'
p110575
S'bool'
p110576
sS'default'
p110577
S'1'
p110578
sS'name'
p110579
S'enable'
p110580
sS'required'
p110581
I00
sS'group_name'
p110582
S'Advanced'
p110583
sa(dp110584
S'description'
p110585
S"The initial values correspoinding to each group, i.e. '0.0 1.0 2.0' means 0-4 = 0.0, 4-8 = 1.0 and 8-12 = 2.0 \n"
p110586
sS'cpp_type'
p110587
S'std::vector<double, std::allocator<double> >'
p110588
sS'default'
p110589
g3
sS'name'
p110590
S'group_values'
p110591
sS'required'
p110592
I00
sS'group_name'
p110593
Nsa(dp110594
S'description'
p110595
S"To group the initial values on different slip systems 'format: [start end)', i.e.'0 4 8 11' groups 0-3, 4-7 and 8-11 \n"
p110596
sS'cpp_type'
p110597
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p110598
sS'default'
p110599
g3
sS'name'
p110600
S'groups'
p110601
sS'required'
p110602
I00
sS'group_name'
p110603
Nsa(dp110604
S'name'
p110605
S'intvar_read_type'
p110606
sS'cpp_type'
p110607
S'MooseEnum'
p110608
sS'default'
p110609
S'inline_input'
p110610
sS'description'
p110611
S'Read from options for initial value of internal variables: Default from .i file\n'
p110612
sS'required'
p110613
I00
sS'options'
p110614
S'file_input inline_input user_input'
p110615
sS'group_name'
p110616
Nsa(dp110617
S'description'
p110618
S'Scale factor of individual component.\n'
p110619
sS'cpp_type'
p110620
S'std::vector<double, std::allocator<double> >'
p110621
sS'default'
p110622
g3
sS'name'
p110623
S'scale_factor'
p110624
sS'required'
p110625
I00
sS'group_name'
p110626
Nsa(dp110627
S'description'
p110628
S'The seed for the master random number generator\n'
p110629
sS'cpp_type'
p110630
S'unsigned int'
p110631
sS'default'
p110632
S'0'
p110633
sS'name'
p110634
S'seed'
p110635
sS'required'
p110636
I00
sS'group_name'
p110637
S'Advanced'
p110638
sa(dp110639
S'description'
p110640
S'Name of the file containing the initial values of slip system resistances\n'
p110641
sS'cpp_type'
p110642
S'FileName'
p110643
sS'default'
p110644
g3
sS'name'
p110645
S'state_variable_file_name'
p110646
sS'required'
p110647
I00
sS'group_name'
p110648
Nsa(dp110649
S'description'
p110650
g3
sS'cpp_type'
p110651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110652
sS'default'
p110653
S'CrystalPlasticityStateVariable'
p110654
sS'name'
p110655
S'type'
p110656
sS'required'
p110657
I00
sS'group_name'
p110658
Nsa(dp110659
S'description'
p110660
S'Name of state variable evolution rate component property: Same as state variable evolution rate component user object specified in input file.\n'
p110661
sS'cpp_type'
p110662
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110663
sS'default'
p110664
g3
sS'name'
p110665
S'uo_state_var_evol_rate_comp_name'
p110666
sS'required'
p110667
I00
sS'group_name'
p110668
Nsa(dp110669
S'description'
p110670
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110671
sS'cpp_type'
p110672
S'bool'
p110673
sS'default'
p110674
S'0'
p110675
sS'name'
p110676
S'use_displaced_mesh'
p110677
sS'required'
p110678
I00
sS'group_name'
p110679
S'Advanced'
p110680
sa(dp110681
S'description'
p110682
S"The userobject's variable size.\n"
p110683
sS'cpp_type'
p110684
S'unsigned int'
p110685
sS'default'
p110686
g3
sS'name'
p110687
S'variable_size'
p110688
sS'required'
p110689
I01
sS'group_name'
p110690
Nsa(dp110691
S'description'
p110692
S'Numerical zero for interval variable\n'
p110693
sS'cpp_type'
p110694
S'double'
p110695
sS'default'
p110696
S'0'
p110697
sS'name'
p110698
S'zero'
p110699
sS'required'
p110700
I00
sS'group_name'
p110701
NsasS'name'
p110702
S'/UserObjects/CrystalPlasticityStateVariable'
p110703
sa(dp110704
S'description'
p110705
g3
sS'subblocks'
p110706
NsS'parameters'
p110707
(lp110708
(dp110709
S'description'
p110710
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110711
sS'cpp_type'
p110712
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110713
sS'default'
p110714
g3
sS'name'
p110715
S'control_tags'
p110716
sS'required'
p110717
I00
sS'group_name'
p110718
S'Advanced'
p110719
sa(dp110720
S'description'
p110721
S'Set the enabled status of the MooseObject.\n'
p110722
sS'cpp_type'
p110723
S'bool'
p110724
sS'default'
p110725
S'1'
p110726
sS'name'
p110727
S'enable'
p110728
sS'required'
p110729
I00
sS'group_name'
p110730
S'Advanced'
p110731
sa(dp110732
S'name'
p110733
S'execute_on'
p110734
sS'cpp_type'
p110735
S'MultiMooseEnum'
p110736
sS'default'
p110737
S'TIMESTEP_END'
p110738
sS'description'
p110739
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110740
sS'required'
p110741
I00
sS'options'
p110742
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110743
sS'group_name'
p110744
Nsa(dp110745
S'description'
p110746
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p110747
sS'cpp_type'
p110748
S'std::vector<OutputName, std::allocator<OutputName> >'
p110749
sS'default'
p110750
g3
sS'name'
p110751
S'outputs'
p110752
sS'required'
p110753
I00
sS'group_name'
p110754
S'Advanced'
p110755
sa(dp110756
S'description'
p110757
S'The name of the postprocessor\n'
p110758
sS'cpp_type'
p110759
S'PostprocessorName'
p110760
sS'default'
p110761
g3
sS'name'
p110762
S'postprocessor'
p110763
sS'required'
p110764
I01
sS'group_name'
p110765
Nsa(dp110766
S'description'
p110767
g3
sS'cpp_type'
p110768
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110769
sS'default'
p110770
S'CumulativeValuePostprocessor'
p110771
sS'name'
p110772
S'type'
p110773
sS'required'
p110774
I00
sS'group_name'
p110775
Nsa(dp110776
S'description'
p110777
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110778
sS'cpp_type'
p110779
S'bool'
p110780
sS'default'
p110781
S'0'
p110782
sS'name'
p110783
S'use_displaced_mesh'
p110784
sS'required'
p110785
I00
sS'group_name'
p110786
S'Advanced'
p110787
sasS'name'
p110788
S'/UserObjects/CumulativeValuePostprocessor'
p110789
sa(dp110790
S'description'
p110791
g3
sS'subblocks'
p110792
NsS'parameters'
p110793
(lp110794
(dp110795
S'description'
p110796
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110797
sS'cpp_type'
p110798
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110799
sS'default'
p110800
g3
sS'name'
p110801
S'control_tags'
p110802
sS'required'
p110803
I00
sS'group_name'
p110804
S'Advanced'
p110805
sa(dp110806
S'description'
p110807
S'Set the enabled status of the MooseObject.\n'
p110808
sS'cpp_type'
p110809
S'bool'
p110810
sS'default'
p110811
S'1'
p110812
sS'name'
p110813
S'enable'
p110814
sS'required'
p110815
I00
sS'group_name'
p110816
S'Advanced'
p110817
sa(dp110818
S'name'
p110819
S'execute_on'
p110820
sS'cpp_type'
p110821
S'MultiMooseEnum'
p110822
sS'default'
p110823
S'TIMESTEP_END'
p110824
sS'description'
p110825
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110826
sS'required'
p110827
I00
sS'options'
p110828
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110829
sS'group_name'
p110830
Nsa(dp110831
S'description'
p110832
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p110833
sS'cpp_type'
p110834
S'std::vector<OutputName, std::allocator<OutputName> >'
p110835
sS'default'
p110836
g3
sS'name'
p110837
S'outputs'
p110838
sS'required'
p110839
I00
sS'group_name'
p110840
S'Advanced'
p110841
sa(dp110842
S'description'
p110843
g3
sS'cpp_type'
p110844
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110845
sS'default'
p110846
S'DifferencePostprocessor'
p110847
sS'name'
p110848
S'type'
p110849
sS'required'
p110850
I00
sS'group_name'
p110851
Nsa(dp110852
S'description'
p110853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110854
sS'cpp_type'
p110855
S'bool'
p110856
sS'default'
p110857
S'0'
p110858
sS'name'
p110859
S'use_displaced_mesh'
p110860
sS'required'
p110861
I00
sS'group_name'
p110862
S'Advanced'
p110863
sa(dp110864
S'description'
p110865
S'First value\n'
p110866
sS'cpp_type'
p110867
S'PostprocessorName'
p110868
sS'default'
p110869
g3
sS'name'
p110870
S'value1'
p110871
sS'required'
p110872
I01
sS'group_name'
p110873
Nsa(dp110874
S'description'
p110875
S'Second value\n'
p110876
sS'cpp_type'
p110877
S'PostprocessorName'
p110878
sS'default'
p110879
g3
sS'name'
p110880
S'value2'
p110881
sS'required'
p110882
I01
sS'group_name'
p110883
NsasS'name'
p110884
S'/UserObjects/DifferencePostprocessor'
p110885
sa(dp110886
S'description'
p110887
S'Manages the list of currently active nucleation sites and adds new sites according to a given probability function.\n'
p110888
sS'subblocks'
p110889
NsS'parameters'
p110890
(lp110891
(dp110892
S'description'
p110893
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110894
sS'cpp_type'
p110895
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110896
sS'default'
p110897
g3
sS'name'
p110898
S'block'
p110899
sS'required'
p110900
I00
sS'group_name'
p110901
Nsa(dp110902
S'description'
p110903
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110904
sS'cpp_type'
p110905
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110906
sS'default'
p110907
g3
sS'name'
p110908
S'control_tags'
p110909
sS'required'
p110910
I00
sS'group_name'
p110911
S'Advanced'
p110912
sa(dp110913
S'description'
p110914
S'Set the enabled status of the MooseObject.\n'
p110915
sS'cpp_type'
p110916
S'bool'
p110917
sS'default'
p110918
S'1'
p110919
sS'name'
p110920
S'enable'
p110921
sS'required'
p110922
I00
sS'group_name'
p110923
S'Advanced'
p110924
sa(dp110925
S'name'
p110926
S'execute_on'
p110927
sS'cpp_type'
p110928
S'MultiMooseEnum'
p110929
sS'default'
p110930
S'TIMESTEP_END'
p110931
sS'description'
p110932
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110933
sS'required'
p110934
I00
sS'options'
p110935
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110936
sS'group_name'
p110937
Nsa(dp110938
S'description'
p110939
S'Time to keep each nucleus active\n'
p110940
sS'cpp_type'
p110941
S'double'
p110942
sS'default'
p110943
g3
sS'name'
p110944
S'hold_time'
p110945
sS'required'
p110946
I01
sS'group_name'
p110947
Nsa(dp110948
S'description'
p110949
S'Probability density for inserting a discrete nucleus\n'
p110950
sS'cpp_type'
p110951
S'MaterialPropertyName'
p110952
sS'default'
p110953
g3
sS'name'
p110954
S'probability'
p110955
sS'required'
p110956
I01
sS'group_name'
p110957
Nsa(dp110958
S'description'
p110959
S'The seed for the master random number generator\n'
p110960
sS'cpp_type'
p110961
S'unsigned int'
p110962
sS'default'
p110963
S'0'
p110964
sS'name'
p110965
S'seed'
p110966
sS'required'
p110967
I00
sS'group_name'
p110968
S'Advanced'
p110969
sa(dp110970
S'description'
p110971
S'Insert a fixed nucleus at a point in the simulation cell\n'
p110972
sS'cpp_type'
p110973
S'libMesh::Point'
p110974
sS'default'
p110975
g3
sS'name'
p110976
S'test'
p110977
sS'required'
p110978
I00
sS'group_name'
p110979
Nsa(dp110980
S'description'
p110981
g3
sS'cpp_type'
p110982
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110983
sS'default'
p110984
S'DiscreteNucleationInserter'
p110985
sS'name'
p110986
S'type'
p110987
sS'required'
p110988
I00
sS'group_name'
p110989
Nsa(dp110990
S'description'
p110991
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110992
sS'cpp_type'
p110993
S'bool'
p110994
sS'default'
p110995
S'0'
p110996
sS'name'
p110997
S'use_displaced_mesh'
p110998
sS'required'
p110999
I00
sS'group_name'
p111000
S'Advanced'
p111001
sasS'name'
p111002
S'/UserObjects/DiscreteNucleationInserter'
p111003
sa(dp111004
S'description'
p111005
S'Generates a spatial smoothed map of all nucleation sites with the data of the DiscreteNucleationInserter for use by the DiscreteNucleation material.\n'
p111006
sS'subblocks'
p111007
NsS'parameters'
p111008
(lp111009
(dp111010
S'description'
p111011
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111012
sS'cpp_type'
p111013
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111014
sS'default'
p111015
g3
sS'name'
p111016
S'block'
p111017
sS'required'
p111018
I00
sS'group_name'
p111019
Nsa(dp111020
S'description'
p111021
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111022
sS'cpp_type'
p111023
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111024
sS'default'
p111025
g3
sS'name'
p111026
S'control_tags'
p111027
sS'required'
p111028
I00
sS'group_name'
p111029
S'Advanced'
p111030
sa(dp111031
S'description'
p111032
S'Set the enabled status of the MooseObject.\n'
p111033
sS'cpp_type'
p111034
S'bool'
p111035
sS'default'
p111036
S'1'
p111037
sS'name'
p111038
S'enable'
p111039
sS'required'
p111040
I00
sS'group_name'
p111041
S'Advanced'
p111042
sa(dp111043
S'name'
p111044
S'execute_on'
p111045
sS'cpp_type'
p111046
S'MultiMooseEnum'
p111047
sS'default'
p111048
S'TIMESTEP_BEGIN'
p111049
sS'description'
p111050
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111051
sS'required'
p111052
I00
sS'options'
p111053
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111054
sS'group_name'
p111055
Nsa(dp111056
S'description'
p111057
S'DiscreteNucleationInserter user object\n'
p111058
sS'cpp_type'
p111059
S'UserObjectName'
p111060
sS'default'
p111061
g3
sS'name'
p111062
S'inserter'
p111063
sS'required'
p111064
I01
sS'group_name'
p111065
Nsa(dp111066
S'description'
p111067
S'Nucleus interface width for smooth nuclei\n'
p111068
sS'cpp_type'
p111069
S'double'
p111070
sS'default'
p111071
S'0'
p111072
sS'name'
p111073
S'int_width'
p111074
sS'required'
p111075
I00
sS'group_name'
p111076
Nsa(dp111077
S'description'
p111078
S'Use the periodicity settings of this variable to populate the grain map\n'
p111079
sS'cpp_type'
p111080
S'std::vector<VariableName>'
p111081
sS'default'
p111082
g3
sS'name'
p111083
S'periodic'
p111084
sS'required'
p111085
I00
sS'group_name'
p111086
Nsa(dp111087
S'description'
p111088
S'Radius for the inserted nuclei\n'
p111089
sS'cpp_type'
p111090
S'double'
p111091
sS'default'
p111092
S'0'
p111093
sS'name'
p111094
S'radius'
p111095
sS'required'
p111096
I00
sS'group_name'
p111097
Nsa(dp111098
S'description'
p111099
S'The seed for the master random number generator\n'
p111100
sS'cpp_type'
p111101
S'unsigned int'
p111102
sS'default'
p111103
S'0'
p111104
sS'name'
p111105
S'seed'
p111106
sS'required'
p111107
I00
sS'group_name'
p111108
S'Advanced'
p111109
sa(dp111110
S'description'
p111111
g3
sS'cpp_type'
p111112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111113
sS'default'
p111114
S'DiscreteNucleationMap'
p111115
sS'name'
p111116
S'type'
p111117
sS'required'
p111118
I00
sS'group_name'
p111119
Nsa(dp111120
S'description'
p111121
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111122
sS'cpp_type'
p111123
S'bool'
p111124
sS'default'
p111125
S'0'
p111126
sS'name'
p111127
S'use_displaced_mesh'
p111128
sS'required'
p111129
I00
sS'group_name'
p111130
S'Advanced'
p111131
sasS'name'
p111132
S'/UserObjects/DiscreteNucleationMap'
p111133
sa(dp111134
S'description'
p111135
S'Load and manage DREAM.3D EBSD data files for running simulations on reconstructed microstructures.\n'
p111136
sS'subblocks'
p111137
NsS'parameters'
p111138
(lp111139
(dp111140
S'description'
p111141
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111142
sS'cpp_type'
p111143
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111144
sS'default'
p111145
g3
sS'name'
p111146
S'control_tags'
p111147
sS'required'
p111148
I00
sS'group_name'
p111149
S'Advanced'
p111150
sa(dp111151
S'description'
p111152
S'Number of additional custom data columns to read from the EBSD file\n'
p111153
sS'cpp_type'
p111154
S'unsigned int'
p111155
sS'default'
p111156
S'0'
p111157
sS'name'
p111158
S'custom_columns'
p111159
sS'required'
p111160
I00
sS'group_name'
p111161
Nsa(dp111162
S'description'
p111163
S'Set the enabled status of the MooseObject.\n'
p111164
sS'cpp_type'
p111165
S'bool'
p111166
sS'default'
p111167
S'1'
p111168
sS'name'
p111169
S'enable'
p111170
sS'required'
p111171
I00
sS'group_name'
p111172
S'Advanced'
p111173
sa(dp111174
S'name'
p111175
S'execute_on'
p111176
sS'cpp_type'
p111177
S'MultiMooseEnum'
p111178
sS'default'
p111179
S'TIMESTEP_END'
p111180
sS'description'
p111181
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111182
sS'required'
p111183
I00
sS'options'
p111184
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111185
sS'group_name'
p111186
Nsa(dp111187
S'description'
p111188
g3
sS'cpp_type'
p111189
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111190
sS'default'
p111191
S'EBSDReader'
p111192
sS'name'
p111193
S'type'
p111194
sS'required'
p111195
I00
sS'group_name'
p111196
Nsa(dp111197
S'description'
p111198
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111199
sS'cpp_type'
p111200
S'bool'
p111201
sS'default'
p111202
S'0'
p111203
sS'name'
p111204
S'use_displaced_mesh'
p111205
sS'required'
p111206
I00
sS'group_name'
p111207
S'Advanced'
p111208
sasS'name'
p111209
S'/UserObjects/EBSDReader'
p111210
sa(dp111211
S'description'
p111212
g3
sS'subblocks'
p111213
NsS'parameters'
p111214
(lp111215
(dp111216
S'description'
p111217
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111218
sS'cpp_type'
p111219
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111220
sS'default'
p111221
g3
sS'name'
p111222
S'block'
p111223
sS'required'
p111224
I00
sS'group_name'
p111225
Nsa(dp111226
S'description'
p111227
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111228
sS'cpp_type'
p111229
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111230
sS'default'
p111231
g3
sS'name'
p111232
S'control_tags'
p111233
sS'required'
p111234
I00
sS'group_name'
p111235
S'Advanced'
p111236
sa(dp111237
S'description'
p111238
S'Set the enabled status of the MooseObject.\n'
p111239
sS'cpp_type'
p111240
S'bool'
p111241
sS'default'
p111242
S'1'
p111243
sS'name'
p111244
S'enable'
p111245
sS'required'
p111246
I00
sS'group_name'
p111247
S'Advanced'
p111248
sa(dp111249
S'name'
p111250
S'execute_on'
p111251
sS'cpp_type'
p111252
S'MultiMooseEnum'
p111253
sS'default'
p111254
S'TIMESTEP_END'
p111255
sS'description'
p111256
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111257
sS'required'
p111258
I00
sS'options'
p111259
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111260
sS'group_name'
p111261
Nsa(dp111262
S'description'
p111263
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111264
sS'cpp_type'
p111265
S'std::vector<OutputName, std::allocator<OutputName> >'
p111266
sS'default'
p111267
g3
sS'name'
p111268
S'outputs'
p111269
sS'required'
p111270
I00
sS'group_name'
p111271
S'Advanced'
p111272
sa(dp111273
S'description'
p111274
S'The seed for the master random number generator\n'
p111275
sS'cpp_type'
p111276
S'unsigned int'
p111277
sS'default'
p111278
S'0'
p111279
sS'name'
p111280
S'seed'
p111281
sS'required'
p111282
I00
sS'group_name'
p111283
S'Advanced'
p111284
sa(dp111285
S'description'
p111286
g3
sS'cpp_type'
p111287
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111288
sS'default'
p111289
S'ElementAverageTimeDerivative'
p111290
sS'name'
p111291
S'type'
p111292
sS'required'
p111293
I00
sS'group_name'
p111294
Nsa(dp111295
S'description'
p111296
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111297
sS'cpp_type'
p111298
S'bool'
p111299
sS'default'
p111300
S'0'
p111301
sS'name'
p111302
S'use_displaced_mesh'
p111303
sS'required'
p111304
I00
sS'group_name'
p111305
S'Advanced'
p111306
sa(dp111307
S'description'
p111308
S'The name of the variable that this object operates on\n'
p111309
sS'cpp_type'
p111310
S'std::vector<VariableName>'
p111311
sS'default'
p111312
g3
sS'name'
p111313
S'variable'
p111314
sS'required'
p111315
I01
sS'group_name'
p111316
NsasS'name'
p111317
S'/UserObjects/ElementAverageTimeDerivative'
p111318
sa(dp111319
S'description'
p111320
g3
sS'subblocks'
p111321
NsS'parameters'
p111322
(lp111323
(dp111324
S'description'
p111325
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111326
sS'cpp_type'
p111327
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111328
sS'default'
p111329
g3
sS'name'
p111330
S'block'
p111331
sS'required'
p111332
I00
sS'group_name'
p111333
Nsa(dp111334
S'description'
p111335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111336
sS'cpp_type'
p111337
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111338
sS'default'
p111339
g3
sS'name'
p111340
S'control_tags'
p111341
sS'required'
p111342
I00
sS'group_name'
p111343
S'Advanced'
p111344
sa(dp111345
S'description'
p111346
S'Set the enabled status of the MooseObject.\n'
p111347
sS'cpp_type'
p111348
S'bool'
p111349
sS'default'
p111350
S'1'
p111351
sS'name'
p111352
S'enable'
p111353
sS'required'
p111354
I00
sS'group_name'
p111355
S'Advanced'
p111356
sa(dp111357
S'name'
p111358
S'execute_on'
p111359
sS'cpp_type'
p111360
S'MultiMooseEnum'
p111361
sS'default'
p111362
S'TIMESTEP_END'
p111363
sS'description'
p111364
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111365
sS'required'
p111366
I00
sS'options'
p111367
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111368
sS'group_name'
p111369
Nsa(dp111370
S'description'
p111371
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111372
sS'cpp_type'
p111373
S'std::vector<OutputName, std::allocator<OutputName> >'
p111374
sS'default'
p111375
g3
sS'name'
p111376
S'outputs'
p111377
sS'required'
p111378
I00
sS'group_name'
p111379
S'Advanced'
p111380
sa(dp111381
S'description'
p111382
S'The seed for the master random number generator\n'
p111383
sS'cpp_type'
p111384
S'unsigned int'
p111385
sS'default'
p111386
S'0'
p111387
sS'name'
p111388
S'seed'
p111389
sS'required'
p111390
I00
sS'group_name'
p111391
S'Advanced'
p111392
sa(dp111393
S'description'
p111394
g3
sS'cpp_type'
p111395
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111396
sS'default'
p111397
S'ElementAverageValue'
p111398
sS'name'
p111399
S'type'
p111400
sS'required'
p111401
I00
sS'group_name'
p111402
Nsa(dp111403
S'description'
p111404
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111405
sS'cpp_type'
p111406
S'bool'
p111407
sS'default'
p111408
S'0'
p111409
sS'name'
p111410
S'use_displaced_mesh'
p111411
sS'required'
p111412
I00
sS'group_name'
p111413
S'Advanced'
p111414
sa(dp111415
S'description'
p111416
S'The name of the variable that this object operates on\n'
p111417
sS'cpp_type'
p111418
S'std::vector<VariableName>'
p111419
sS'default'
p111420
g3
sS'name'
p111421
S'variable'
p111422
sS'required'
p111423
I01
sS'group_name'
p111424
NsasS'name'
p111425
S'/UserObjects/ElementAverageValue'
p111426
sa(dp111427
S'description'
p111428
g3
sS'subblocks'
p111429
NsS'parameters'
p111430
(lp111431
(dp111432
S'description'
p111433
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111434
sS'cpp_type'
p111435
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111436
sS'default'
p111437
g3
sS'name'
p111438
S'block'
p111439
sS'required'
p111440
I00
sS'group_name'
p111441
Nsa(dp111442
S'description'
p111443
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111444
sS'cpp_type'
p111445
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111446
sS'default'
p111447
g3
sS'name'
p111448
S'control_tags'
p111449
sS'required'
p111450
I00
sS'group_name'
p111451
S'Advanced'
p111452
sa(dp111453
S'description'
p111454
S'Set the enabled status of the MooseObject.\n'
p111455
sS'cpp_type'
p111456
S'bool'
p111457
sS'default'
p111458
S'1'
p111459
sS'name'
p111460
S'enable'
p111461
sS'required'
p111462
I00
sS'group_name'
p111463
S'Advanced'
p111464
sa(dp111465
S'name'
p111466
S'execute_on'
p111467
sS'cpp_type'
p111468
S'MultiMooseEnum'
p111469
sS'default'
p111470
S'TIMESTEP_END'
p111471
sS'description'
p111472
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111473
sS'required'
p111474
I00
sS'options'
p111475
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111476
sS'group_name'
p111477
Nsa(dp111478
S'description'
p111479
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111480
sS'cpp_type'
p111481
S'std::vector<OutputName, std::allocator<OutputName> >'
p111482
sS'default'
p111483
g3
sS'name'
p111484
S'outputs'
p111485
sS'required'
p111486
I00
sS'group_name'
p111487
S'Advanced'
p111488
sa(dp111489
S'description'
p111490
S'The seed for the master random number generator\n'
p111491
sS'cpp_type'
p111492
S'unsigned int'
p111493
sS'default'
p111494
S'0'
p111495
sS'name'
p111496
S'seed'
p111497
sS'required'
p111498
I00
sS'group_name'
p111499
S'Advanced'
p111500
sa(dp111501
S'description'
p111502
g3
sS'cpp_type'
p111503
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111504
sS'default'
p111505
S'ElementExtremeValue'
p111506
sS'name'
p111507
S'type'
p111508
sS'required'
p111509
I00
sS'group_name'
p111510
Nsa(dp111511
S'description'
p111512
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111513
sS'cpp_type'
p111514
S'bool'
p111515
sS'default'
p111516
S'0'
p111517
sS'name'
p111518
S'use_displaced_mesh'
p111519
sS'required'
p111520
I00
sS'group_name'
p111521
S'Advanced'
p111522
sa(dp111523
S'name'
p111524
S'value_type'
p111525
sS'cpp_type'
p111526
S'MooseEnum'
p111527
sS'default'
p111528
S'max'
p111529
sS'description'
p111530
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p111531
sS'required'
p111532
I00
sS'options'
p111533
S'max min'
p111534
sS'group_name'
p111535
Nsa(dp111536
S'description'
p111537
S'The name of the variable that this postprocessor operates on\n'
p111538
sS'cpp_type'
p111539
S'std::vector<VariableName>'
p111540
sS'default'
p111541
g3
sS'name'
p111542
S'variable'
p111543
sS'required'
p111544
I01
sS'group_name'
p111545
NsasS'name'
p111546
S'/UserObjects/ElementExtremeValue'
p111547
sa(dp111548
S'description'
p111549
g3
sS'subblocks'
p111550
NsS'parameters'
p111551
(lp111552
(dp111553
S'description'
p111554
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111555
sS'cpp_type'
p111556
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111557
sS'default'
p111558
g3
sS'name'
p111559
S'block'
p111560
sS'required'
p111561
I00
sS'group_name'
p111562
Nsa(dp111563
S'description'
p111564
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111565
sS'cpp_type'
p111566
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111567
sS'default'
p111568
g3
sS'name'
p111569
S'control_tags'
p111570
sS'required'
p111571
I00
sS'group_name'
p111572
S'Advanced'
p111573
sa(dp111574
S'description'
p111575
S'Set the enabled status of the MooseObject.\n'
p111576
sS'cpp_type'
p111577
S'bool'
p111578
sS'default'
p111579
S'1'
p111580
sS'name'
p111581
S'enable'
p111582
sS'required'
p111583
I00
sS'group_name'
p111584
S'Advanced'
p111585
sa(dp111586
S'name'
p111587
S'execute_on'
p111588
sS'cpp_type'
p111589
S'MultiMooseEnum'
p111590
sS'default'
p111591
S'TIMESTEP_END'
p111592
sS'description'
p111593
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111594
sS'required'
p111595
I00
sS'options'
p111596
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111597
sS'group_name'
p111598
Nsa(dp111599
S'description'
p111600
S'The analytic solution to compare against\n'
p111601
sS'cpp_type'
p111602
S'FunctionName'
p111603
sS'default'
p111604
g3
sS'name'
p111605
S'function'
p111606
sS'required'
p111607
I01
sS'group_name'
p111608
Nsa(dp111609
S'description'
p111610
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111611
sS'cpp_type'
p111612
S'std::vector<OutputName, std::allocator<OutputName> >'
p111613
sS'default'
p111614
g3
sS'name'
p111615
S'outputs'
p111616
sS'required'
p111617
I00
sS'group_name'
p111618
S'Advanced'
p111619
sa(dp111620
S'description'
p111621
S'The exponent used in the norm.\n'
p111622
sS'cpp_type'
p111623
S'double'
p111624
sS'default'
p111625
S'2'
p111626
sS'name'
p111627
S'p'
p111628
sS'required'
p111629
I00
sS'group_name'
p111630
Nsa(dp111631
S'description'
p111632
S'The seed for the master random number generator\n'
p111633
sS'cpp_type'
p111634
S'unsigned int'
p111635
sS'default'
p111636
S'0'
p111637
sS'name'
p111638
S'seed'
p111639
sS'required'
p111640
I00
sS'group_name'
p111641
S'Advanced'
p111642
sa(dp111643
S'description'
p111644
g3
sS'cpp_type'
p111645
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111646
sS'default'
p111647
S'ElementH1Error'
p111648
sS'name'
p111649
S'type'
p111650
sS'required'
p111651
I00
sS'group_name'
p111652
Nsa(dp111653
S'description'
p111654
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111655
sS'cpp_type'
p111656
S'bool'
p111657
sS'default'
p111658
S'0'
p111659
sS'name'
p111660
S'use_displaced_mesh'
p111661
sS'required'
p111662
I00
sS'group_name'
p111663
S'Advanced'
p111664
sa(dp111665
S'description'
p111666
S'The name of the variable that this object operates on\n'
p111667
sS'cpp_type'
p111668
S'std::vector<VariableName>'
p111669
sS'default'
p111670
g3
sS'name'
p111671
S'variable'
p111672
sS'required'
p111673
I01
sS'group_name'
p111674
NsasS'name'
p111675
S'/UserObjects/ElementH1Error'
p111676
sa(dp111677
S'description'
p111678
g3
sS'subblocks'
p111679
NsS'parameters'
p111680
(lp111681
(dp111682
S'description'
p111683
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111684
sS'cpp_type'
p111685
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111686
sS'default'
p111687
g3
sS'name'
p111688
S'block'
p111689
sS'required'
p111690
I00
sS'group_name'
p111691
Nsa(dp111692
S'description'
p111693
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111694
sS'cpp_type'
p111695
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111696
sS'default'
p111697
g3
sS'name'
p111698
S'control_tags'
p111699
sS'required'
p111700
I00
sS'group_name'
p111701
S'Advanced'
p111702
sa(dp111703
S'description'
p111704
S'Set the enabled status of the MooseObject.\n'
p111705
sS'cpp_type'
p111706
S'bool'
p111707
sS'default'
p111708
S'1'
p111709
sS'name'
p111710
S'enable'
p111711
sS'required'
p111712
I00
sS'group_name'
p111713
S'Advanced'
p111714
sa(dp111715
S'name'
p111716
S'execute_on'
p111717
sS'cpp_type'
p111718
S'MultiMooseEnum'
p111719
sS'default'
p111720
S'TIMESTEP_END'
p111721
sS'description'
p111722
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111723
sS'required'
p111724
I00
sS'options'
p111725
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111726
sS'group_name'
p111727
Nsa(dp111728
S'description'
p111729
S'The analytic solution to compare against\n'
p111730
sS'cpp_type'
p111731
S'FunctionName'
p111732
sS'default'
p111733
g3
sS'name'
p111734
S'function'
p111735
sS'required'
p111736
I01
sS'group_name'
p111737
Nsa(dp111738
S'description'
p111739
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111740
sS'cpp_type'
p111741
S'std::vector<OutputName, std::allocator<OutputName> >'
p111742
sS'default'
p111743
g3
sS'name'
p111744
S'outputs'
p111745
sS'required'
p111746
I00
sS'group_name'
p111747
S'Advanced'
p111748
sa(dp111749
S'description'
p111750
S'The seed for the master random number generator\n'
p111751
sS'cpp_type'
p111752
S'unsigned int'
p111753
sS'default'
p111754
S'0'
p111755
sS'name'
p111756
S'seed'
p111757
sS'required'
p111758
I00
sS'group_name'
p111759
S'Advanced'
p111760
sa(dp111761
S'description'
p111762
g3
sS'cpp_type'
p111763
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111764
sS'default'
p111765
S'ElementH1SemiError'
p111766
sS'name'
p111767
S'type'
p111768
sS'required'
p111769
I00
sS'group_name'
p111770
Nsa(dp111771
S'description'
p111772
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111773
sS'cpp_type'
p111774
S'bool'
p111775
sS'default'
p111776
S'0'
p111777
sS'name'
p111778
S'use_displaced_mesh'
p111779
sS'required'
p111780
I00
sS'group_name'
p111781
S'Advanced'
p111782
sa(dp111783
S'description'
p111784
S'The name of the variable that this object operates on\n'
p111785
sS'cpp_type'
p111786
S'std::vector<VariableName>'
p111787
sS'default'
p111788
g3
sS'name'
p111789
S'variable'
p111790
sS'required'
p111791
I01
sS'group_name'
p111792
NsasS'name'
p111793
S'/UserObjects/ElementH1SemiError'
p111794
sa(dp111795
S'description'
p111796
g3
sS'subblocks'
p111797
NsS'parameters'
p111798
(lp111799
(dp111800
S'description'
p111801
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111802
sS'cpp_type'
p111803
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111804
sS'default'
p111805
g3
sS'name'
p111806
S'block'
p111807
sS'required'
p111808
I00
sS'group_name'
p111809
Nsa(dp111810
S'description'
p111811
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111812
sS'cpp_type'
p111813
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111814
sS'default'
p111815
g3
sS'name'
p111816
S'control_tags'
p111817
sS'required'
p111818
I00
sS'group_name'
p111819
S'Advanced'
p111820
sa(dp111821
S'description'
p111822
S'Set the enabled status of the MooseObject.\n'
p111823
sS'cpp_type'
p111824
S'bool'
p111825
sS'default'
p111826
S'1'
p111827
sS'name'
p111828
S'enable'
p111829
sS'required'
p111830
I00
sS'group_name'
p111831
S'Advanced'
p111832
sa(dp111833
S'name'
p111834
S'execute_on'
p111835
sS'cpp_type'
p111836
S'MultiMooseEnum'
p111837
sS'default'
p111838
S'TIMESTEP_END'
p111839
sS'description'
p111840
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111841
sS'required'
p111842
I00
sS'options'
p111843
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111844
sS'group_name'
p111845
Nsa(dp111846
S'description'
p111847
S'The name of the material property\n'
p111848
sS'cpp_type'
p111849
S'MaterialPropertyName'
p111850
sS'default'
p111851
g3
sS'name'
p111852
S'mat_prop'
p111853
sS'required'
p111854
I01
sS'group_name'
p111855
Nsa(dp111856
S'description'
p111857
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111858
sS'cpp_type'
p111859
S'std::vector<OutputName, std::allocator<OutputName> >'
p111860
sS'default'
p111861
g3
sS'name'
p111862
S'outputs'
p111863
sS'required'
p111864
I00
sS'group_name'
p111865
S'Advanced'
p111866
sa(dp111867
S'description'
p111868
S'The seed for the master random number generator\n'
p111869
sS'cpp_type'
p111870
S'unsigned int'
p111871
sS'default'
p111872
S'0'
p111873
sS'name'
p111874
S'seed'
p111875
sS'required'
p111876
I00
sS'group_name'
p111877
S'Advanced'
p111878
sa(dp111879
S'description'
p111880
g3
sS'cpp_type'
p111881
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111882
sS'default'
p111883
S'ElementIntegralMaterialProperty'
p111884
sS'name'
p111885
S'type'
p111886
sS'required'
p111887
I00
sS'group_name'
p111888
Nsa(dp111889
S'description'
p111890
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111891
sS'cpp_type'
p111892
S'bool'
p111893
sS'default'
p111894
S'0'
p111895
sS'name'
p111896
S'use_displaced_mesh'
p111897
sS'required'
p111898
I00
sS'group_name'
p111899
S'Advanced'
p111900
sasS'name'
p111901
S'/UserObjects/ElementIntegralMaterialProperty'
p111902
sa(dp111903
S'description'
p111904
g3
sS'subblocks'
p111905
NsS'parameters'
p111906
(lp111907
(dp111908
S'description'
p111909
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111910
sS'cpp_type'
p111911
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111912
sS'default'
p111913
g3
sS'name'
p111914
S'block'
p111915
sS'required'
p111916
I00
sS'group_name'
p111917
Nsa(dp111918
S'description'
p111919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111920
sS'cpp_type'
p111921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111922
sS'default'
p111923
g3
sS'name'
p111924
S'control_tags'
p111925
sS'required'
p111926
I00
sS'group_name'
p111927
S'Advanced'
p111928
sa(dp111929
S'description'
p111930
S'Set the enabled status of the MooseObject.\n'
p111931
sS'cpp_type'
p111932
S'bool'
p111933
sS'default'
p111934
S'1'
p111935
sS'name'
p111936
S'enable'
p111937
sS'required'
p111938
I00
sS'group_name'
p111939
S'Advanced'
p111940
sa(dp111941
S'name'
p111942
S'execute_on'
p111943
sS'cpp_type'
p111944
S'MultiMooseEnum'
p111945
sS'default'
p111946
S'TIMESTEP_END'
p111947
sS'description'
p111948
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111949
sS'required'
p111950
I00
sS'options'
p111951
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111952
sS'group_name'
p111953
Nsa(dp111954
S'description'
p111955
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111956
sS'cpp_type'
p111957
S'std::vector<OutputName, std::allocator<OutputName> >'
p111958
sS'default'
p111959
g3
sS'name'
p111960
S'outputs'
p111961
sS'required'
p111962
I00
sS'group_name'
p111963
S'Advanced'
p111964
sa(dp111965
S'description'
p111966
S'The seed for the master random number generator\n'
p111967
sS'cpp_type'
p111968
S'unsigned int'
p111969
sS'default'
p111970
S'0'
p111971
sS'name'
p111972
S'seed'
p111973
sS'required'
p111974
I00
sS'group_name'
p111975
S'Advanced'
p111976
sa(dp111977
S'description'
p111978
g3
sS'cpp_type'
p111979
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111980
sS'default'
p111981
S'ElementIntegralVariablePostprocessor'
p111982
sS'name'
p111983
S'type'
p111984
sS'required'
p111985
I00
sS'group_name'
p111986
Nsa(dp111987
S'description'
p111988
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111989
sS'cpp_type'
p111990
S'bool'
p111991
sS'default'
p111992
S'0'
p111993
sS'name'
p111994
S'use_displaced_mesh'
p111995
sS'required'
p111996
I00
sS'group_name'
p111997
S'Advanced'
p111998
sa(dp111999
S'description'
p112000
S'The name of the variable that this object operates on\n'
p112001
sS'cpp_type'
p112002
S'std::vector<VariableName>'
p112003
sS'default'
p112004
g3
sS'name'
p112005
S'variable'
p112006
sS'required'
p112007
I01
sS'group_name'
p112008
NsasS'name'
p112009
S'/UserObjects/ElementIntegralVariablePostprocessor'
p112010
sa(dp112011
S'description'
p112012
g3
sS'subblocks'
p112013
NsS'parameters'
p112014
(lp112015
(dp112016
S'description'
p112017
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112018
sS'cpp_type'
p112019
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112020
sS'default'
p112021
g3
sS'name'
p112022
S'block'
p112023
sS'required'
p112024
I00
sS'group_name'
p112025
Nsa(dp112026
S'description'
p112027
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112028
sS'cpp_type'
p112029
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112030
sS'default'
p112031
g3
sS'name'
p112032
S'control_tags'
p112033
sS'required'
p112034
I00
sS'group_name'
p112035
S'Advanced'
p112036
sa(dp112037
S'description'
p112038
S'Set the enabled status of the MooseObject.\n'
p112039
sS'cpp_type'
p112040
S'bool'
p112041
sS'default'
p112042
S'1'
p112043
sS'name'
p112044
S'enable'
p112045
sS'required'
p112046
I00
sS'group_name'
p112047
S'Advanced'
p112048
sa(dp112049
S'name'
p112050
S'execute_on'
p112051
sS'cpp_type'
p112052
S'MultiMooseEnum'
p112053
sS'default'
p112054
S'TIMESTEP_END'
p112055
sS'description'
p112056
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112057
sS'required'
p112058
I00
sS'options'
p112059
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112060
sS'group_name'
p112061
Nsa(dp112062
S'description'
p112063
S'The seed for the master random number generator\n'
p112064
sS'cpp_type'
p112065
S'unsigned int'
p112066
sS'default'
p112067
S'0'
p112068
sS'name'
p112069
S'seed'
p112070
sS'required'
p112071
I00
sS'group_name'
p112072
S'Advanced'
p112073
sa(dp112074
S'description'
p112075
g3
sS'cpp_type'
p112076
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112077
sS'default'
p112078
S'ElementIntegralVariableUserObject'
p112079
sS'name'
p112080
S'type'
p112081
sS'required'
p112082
I00
sS'group_name'
p112083
Nsa(dp112084
S'description'
p112085
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112086
sS'cpp_type'
p112087
S'bool'
p112088
sS'default'
p112089
S'0'
p112090
sS'name'
p112091
S'use_displaced_mesh'
p112092
sS'required'
p112093
I00
sS'group_name'
p112094
S'Advanced'
p112095
sa(dp112096
S'description'
p112097
S'The name of the variable that this object operates on\n'
p112098
sS'cpp_type'
p112099
S'std::vector<VariableName>'
p112100
sS'default'
p112101
g3
sS'name'
p112102
S'variable'
p112103
sS'required'
p112104
I01
sS'group_name'
p112105
NsasS'name'
p112106
S'/UserObjects/ElementIntegralVariableUserObject'
p112107
sa(dp112108
S'description'
p112109
g3
sS'subblocks'
p112110
NsS'parameters'
p112111
(lp112112
(dp112113
S'description'
p112114
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112115
sS'cpp_type'
p112116
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112117
sS'default'
p112118
g3
sS'name'
p112119
S'block'
p112120
sS'required'
p112121
I00
sS'group_name'
p112122
Nsa(dp112123
S'description'
p112124
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112125
sS'cpp_type'
p112126
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112127
sS'default'
p112128
g3
sS'name'
p112129
S'control_tags'
p112130
sS'required'
p112131
I00
sS'group_name'
p112132
S'Advanced'
p112133
sa(dp112134
S'description'
p112135
S'Set the enabled status of the MooseObject.\n'
p112136
sS'cpp_type'
p112137
S'bool'
p112138
sS'default'
p112139
S'1'
p112140
sS'name'
p112141
S'enable'
p112142
sS'required'
p112143
I00
sS'group_name'
p112144
S'Advanced'
p112145
sa(dp112146
S'name'
p112147
S'execute_on'
p112148
sS'cpp_type'
p112149
S'MultiMooseEnum'
p112150
sS'default'
p112151
S'TIMESTEP_END'
p112152
sS'description'
p112153
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112154
sS'required'
p112155
I00
sS'options'
p112156
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112157
sS'group_name'
p112158
Nsa(dp112159
S'description'
p112160
S'The variable to compare to\n'
p112161
sS'cpp_type'
p112162
S'std::vector<VariableName>'
p112163
sS'default'
p112164
g3
sS'name'
p112165
S'other_variable'
p112166
sS'required'
p112167
I01
sS'group_name'
p112168
Nsa(dp112169
S'description'
p112170
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112171
sS'cpp_type'
p112172
S'std::vector<OutputName, std::allocator<OutputName> >'
p112173
sS'default'
p112174
g3
sS'name'
p112175
S'outputs'
p112176
sS'required'
p112177
I00
sS'group_name'
p112178
S'Advanced'
p112179
sa(dp112180
S'description'
p112181
S'The seed for the master random number generator\n'
p112182
sS'cpp_type'
p112183
S'unsigned int'
p112184
sS'default'
p112185
S'0'
p112186
sS'name'
p112187
S'seed'
p112188
sS'required'
p112189
I00
sS'group_name'
p112190
S'Advanced'
p112191
sa(dp112192
S'description'
p112193
g3
sS'cpp_type'
p112194
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112195
sS'default'
p112196
S'ElementL2Difference'
p112197
sS'name'
p112198
S'type'
p112199
sS'required'
p112200
I00
sS'group_name'
p112201
Nsa(dp112202
S'description'
p112203
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112204
sS'cpp_type'
p112205
S'bool'
p112206
sS'default'
p112207
S'0'
p112208
sS'name'
p112209
S'use_displaced_mesh'
p112210
sS'required'
p112211
I00
sS'group_name'
p112212
S'Advanced'
p112213
sa(dp112214
S'description'
p112215
S'The name of the variable that this object operates on\n'
p112216
sS'cpp_type'
p112217
S'std::vector<VariableName>'
p112218
sS'default'
p112219
g3
sS'name'
p112220
S'variable'
p112221
sS'required'
p112222
I01
sS'group_name'
p112223
NsasS'name'
p112224
S'/UserObjects/ElementL2Difference'
p112225
sa(dp112226
S'description'
p112227
g3
sS'subblocks'
p112228
NsS'parameters'
p112229
(lp112230
(dp112231
S'description'
p112232
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112233
sS'cpp_type'
p112234
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112235
sS'default'
p112236
g3
sS'name'
p112237
S'block'
p112238
sS'required'
p112239
I00
sS'group_name'
p112240
Nsa(dp112241
S'description'
p112242
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112243
sS'cpp_type'
p112244
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112245
sS'default'
p112246
g3
sS'name'
p112247
S'control_tags'
p112248
sS'required'
p112249
I00
sS'group_name'
p112250
S'Advanced'
p112251
sa(dp112252
S'description'
p112253
S'Set the enabled status of the MooseObject.\n'
p112254
sS'cpp_type'
p112255
S'bool'
p112256
sS'default'
p112257
S'1'
p112258
sS'name'
p112259
S'enable'
p112260
sS'required'
p112261
I00
sS'group_name'
p112262
S'Advanced'
p112263
sa(dp112264
S'name'
p112265
S'execute_on'
p112266
sS'cpp_type'
p112267
S'MultiMooseEnum'
p112268
sS'default'
p112269
S'TIMESTEP_END'
p112270
sS'description'
p112271
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112272
sS'required'
p112273
I00
sS'options'
p112274
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112275
sS'group_name'
p112276
Nsa(dp112277
S'description'
p112278
S'The analytic solution to compare against\n'
p112279
sS'cpp_type'
p112280
S'FunctionName'
p112281
sS'default'
p112282
g3
sS'name'
p112283
S'function'
p112284
sS'required'
p112285
I01
sS'group_name'
p112286
Nsa(dp112287
S'description'
p112288
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112289
sS'cpp_type'
p112290
S'std::vector<OutputName, std::allocator<OutputName> >'
p112291
sS'default'
p112292
g3
sS'name'
p112293
S'outputs'
p112294
sS'required'
p112295
I00
sS'group_name'
p112296
S'Advanced'
p112297
sa(dp112298
S'description'
p112299
S'The seed for the master random number generator\n'
p112300
sS'cpp_type'
p112301
S'unsigned int'
p112302
sS'default'
p112303
S'0'
p112304
sS'name'
p112305
S'seed'
p112306
sS'required'
p112307
I00
sS'group_name'
p112308
S'Advanced'
p112309
sa(dp112310
S'description'
p112311
g3
sS'cpp_type'
p112312
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112313
sS'default'
p112314
S'ElementL2Error'
p112315
sS'name'
p112316
S'type'
p112317
sS'required'
p112318
I00
sS'group_name'
p112319
Nsa(dp112320
S'description'
p112321
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112322
sS'cpp_type'
p112323
S'bool'
p112324
sS'default'
p112325
S'0'
p112326
sS'name'
p112327
S'use_displaced_mesh'
p112328
sS'required'
p112329
I00
sS'group_name'
p112330
S'Advanced'
p112331
sa(dp112332
S'description'
p112333
S'The name of the variable that this object operates on\n'
p112334
sS'cpp_type'
p112335
S'std::vector<VariableName>'
p112336
sS'default'
p112337
g3
sS'name'
p112338
S'variable'
p112339
sS'required'
p112340
I01
sS'group_name'
p112341
NsasS'name'
p112342
S'/UserObjects/ElementL2Error'
p112343
sa(dp112344
S'description'
p112345
g3
sS'subblocks'
p112346
NsS'parameters'
p112347
(lp112348
(dp112349
S'description'
p112350
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112351
sS'cpp_type'
p112352
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112353
sS'default'
p112354
g3
sS'name'
p112355
S'block'
p112356
sS'required'
p112357
I00
sS'group_name'
p112358
Nsa(dp112359
S'description'
p112360
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112361
sS'cpp_type'
p112362
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112363
sS'default'
p112364
g3
sS'name'
p112365
S'control_tags'
p112366
sS'required'
p112367
I00
sS'group_name'
p112368
S'Advanced'
p112369
sa(dp112370
S'description'
p112371
S'Set the enabled status of the MooseObject.\n'
p112372
sS'cpp_type'
p112373
S'bool'
p112374
sS'default'
p112375
S'1'
p112376
sS'name'
p112377
S'enable'
p112378
sS'required'
p112379
I00
sS'group_name'
p112380
S'Advanced'
p112381
sa(dp112382
S'name'
p112383
S'execute_on'
p112384
sS'cpp_type'
p112385
S'MultiMooseEnum'
p112386
sS'default'
p112387
S'TIMESTEP_END'
p112388
sS'description'
p112389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112390
sS'required'
p112391
I00
sS'options'
p112392
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112393
sS'group_name'
p112394
Nsa(dp112395
S'description'
p112396
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112397
sS'cpp_type'
p112398
S'std::vector<OutputName, std::allocator<OutputName> >'
p112399
sS'default'
p112400
g3
sS'name'
p112401
S'outputs'
p112402
sS'required'
p112403
I00
sS'group_name'
p112404
S'Advanced'
p112405
sa(dp112406
S'description'
p112407
S'The seed for the master random number generator\n'
p112408
sS'cpp_type'
p112409
S'unsigned int'
p112410
sS'default'
p112411
S'0'
p112412
sS'name'
p112413
S'seed'
p112414
sS'required'
p112415
I00
sS'group_name'
p112416
S'Advanced'
p112417
sa(dp112418
S'description'
p112419
g3
sS'cpp_type'
p112420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112421
sS'default'
p112422
S'ElementL2Norm'
p112423
sS'name'
p112424
S'type'
p112425
sS'required'
p112426
I00
sS'group_name'
p112427
Nsa(dp112428
S'description'
p112429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112430
sS'cpp_type'
p112431
S'bool'
p112432
sS'default'
p112433
S'0'
p112434
sS'name'
p112435
S'use_displaced_mesh'
p112436
sS'required'
p112437
I00
sS'group_name'
p112438
S'Advanced'
p112439
sa(dp112440
S'description'
p112441
S'The name of the variable that this object operates on\n'
p112442
sS'cpp_type'
p112443
S'std::vector<VariableName>'
p112444
sS'default'
p112445
g3
sS'name'
p112446
S'variable'
p112447
sS'required'
p112448
I01
sS'group_name'
p112449
NsasS'name'
p112450
S'/UserObjects/ElementL2Norm'
p112451
sa(dp112452
S'description'
p112453
S'User Object to read property data from an external file and assign to elements: Works only for Rectangular geometry (2D-3D)\n'
p112454
sS'subblocks'
p112455
NsS'parameters'
p112456
(lp112457
(dp112458
S'description'
p112459
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112460
sS'cpp_type'
p112461
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112462
sS'default'
p112463
g3
sS'name'
p112464
S'control_tags'
p112465
sS'required'
p112466
I00
sS'group_name'
p112467
S'Advanced'
p112468
sa(dp112469
S'description'
p112470
S'Set the enabled status of the MooseObject.\n'
p112471
sS'cpp_type'
p112472
S'bool'
p112473
sS'default'
p112474
S'1'
p112475
sS'name'
p112476
S'enable'
p112477
sS'required'
p112478
I00
sS'group_name'
p112479
S'Advanced'
p112480
sa(dp112481
S'name'
p112482
S'execute_on'
p112483
sS'cpp_type'
p112484
S'MultiMooseEnum'
p112485
sS'default'
p112486
S'TIMESTEP_END'
p112487
sS'description'
p112488
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112489
sS'required'
p112490
I00
sS'options'
p112491
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112492
sS'group_name'
p112493
Nsa(dp112494
S'description'
p112495
S'Number of grains\n'
p112496
sS'cpp_type'
p112497
S'unsigned int'
p112498
sS'default'
p112499
S'0'
p112500
sS'name'
p112501
S'ngrain'
p112502
sS'required'
p112503
I00
sS'group_name'
p112504
Nsa(dp112505
S'description'
p112506
S'Number of tabulated property values\n'
p112507
sS'cpp_type'
p112508
S'unsigned int'
p112509
sS'default'
p112510
g3
sS'name'
p112511
S'nprop'
p112512
sS'required'
p112513
I01
sS'group_name'
p112514
Nsa(dp112515
S'description'
p112516
S'Name of the property file name\n'
p112517
sS'cpp_type'
p112518
S'FileName'
p112519
sS'default'
p112520
g3
sS'name'
p112521
S'prop_file_name'
p112522
sS'required'
p112523
I00
sS'group_name'
p112524
Nsa(dp112525
S'description'
p112526
S'random seed\n'
p112527
sS'cpp_type'
p112528
S'unsigned int'
p112529
sS'default'
p112530
S'2000'
p112531
sS'name'
p112532
S'rand_seed'
p112533
sS'required'
p112534
I00
sS'group_name'
p112535
Nsa(dp112536
S'name'
p112537
S'read_type'
p112538
sS'cpp_type'
p112539
S'MooseEnum'
p112540
sS'default'
p112541
S'none'
p112542
sS'description'
p112543
S'Type of property distribution: element:element by element property variation; grain:voronoi grain structure\n'
p112544
sS'required'
p112545
I00
sS'options'
p112546
S'element grain none'
p112547
sS'group_name'
p112548
Nsa(dp112549
S'name'
p112550
S'rve_type'
p112551
sS'cpp_type'
p112552
S'MooseEnum'
p112553
sS'default'
p112554
S'none'
p112555
sS'description'
p112556
S'Periodic or non-periodic grain distribution: Default is non-periodic\n'
p112557
sS'required'
p112558
I00
sS'options'
p112559
S'periodic none'
p112560
sS'group_name'
p112561
Nsa(dp112562
S'description'
p112563
g3
sS'cpp_type'
p112564
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112565
sS'default'
p112566
S'ElementPropertyReadFile'
p112567
sS'name'
p112568
S'type'
p112569
sS'required'
p112570
I00
sS'group_name'
p112571
Nsa(dp112572
S'description'
p112573
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112574
sS'cpp_type'
p112575
S'bool'
p112576
sS'default'
p112577
S'0'
p112578
sS'name'
p112579
S'use_displaced_mesh'
p112580
sS'required'
p112581
I00
sS'group_name'
p112582
S'Advanced'
p112583
sasS'name'
p112584
S'/UserObjects/ElementPropertyReadFile'
p112585
sa(dp112586
S'description'
p112587
g3
sS'subblocks'
p112588
NsS'parameters'
p112589
(lp112590
(dp112591
S'description'
p112592
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112593
sS'cpp_type'
p112594
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112595
sS'default'
p112596
g3
sS'name'
p112597
S'block'
p112598
sS'required'
p112599
I00
sS'group_name'
p112600
Nsa(dp112601
S'description'
p112602
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112603
sS'cpp_type'
p112604
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112605
sS'default'
p112606
g3
sS'name'
p112607
S'control_tags'
p112608
sS'required'
p112609
I00
sS'group_name'
p112610
S'Advanced'
p112611
sa(dp112612
S'description'
p112613
S'Set the enabled status of the MooseObject.\n'
p112614
sS'cpp_type'
p112615
S'bool'
p112616
sS'default'
p112617
S'1'
p112618
sS'name'
p112619
S'enable'
p112620
sS'required'
p112621
I00
sS'group_name'
p112622
S'Advanced'
p112623
sa(dp112624
S'name'
p112625
S'execute_on'
p112626
sS'cpp_type'
p112627
S'MultiMooseEnum'
p112628
sS'default'
p112629
S'TIMESTEP_END'
p112630
sS'description'
p112631
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112632
sS'required'
p112633
I00
sS'options'
p112634
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112635
sS'group_name'
p112636
Nsa(dp112637
S'description'
p112638
S'The analytic solution to compare against\n'
p112639
sS'cpp_type'
p112640
S'FunctionName'
p112641
sS'default'
p112642
g3
sS'name'
p112643
S'function_x'
p112644
sS'required'
p112645
I01
sS'group_name'
p112646
Nsa(dp112647
S'description'
p112648
S'The analytic solution to compare against\n'
p112649
sS'cpp_type'
p112650
S'FunctionName'
p112651
sS'default'
p112652
S'0'
p112653
sS'name'
p112654
S'function_y'
p112655
sS'required'
p112656
I00
sS'group_name'
p112657
Nsa(dp112658
S'description'
p112659
S'The analytic solution to compare against\n'
p112660
sS'cpp_type'
p112661
S'FunctionName'
p112662
sS'default'
p112663
S'0'
p112664
sS'name'
p112665
S'function_z'
p112666
sS'required'
p112667
I00
sS'group_name'
p112668
Nsa(dp112669
S'description'
p112670
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112671
sS'cpp_type'
p112672
S'std::vector<OutputName, std::allocator<OutputName> >'
p112673
sS'default'
p112674
g3
sS'name'
p112675
S'outputs'
p112676
sS'required'
p112677
I00
sS'group_name'
p112678
S'Advanced'
p112679
sa(dp112680
S'description'
p112681
S'The seed for the master random number generator\n'
p112682
sS'cpp_type'
p112683
S'unsigned int'
p112684
sS'default'
p112685
S'0'
p112686
sS'name'
p112687
S'seed'
p112688
sS'required'
p112689
I00
sS'group_name'
p112690
S'Advanced'
p112691
sa(dp112692
S'description'
p112693
g3
sS'cpp_type'
p112694
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112695
sS'default'
p112696
S'ElementVectorL2Error'
p112697
sS'name'
p112698
S'type'
p112699
sS'required'
p112700
I00
sS'group_name'
p112701
Nsa(dp112702
S'description'
p112703
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112704
sS'cpp_type'
p112705
S'bool'
p112706
sS'default'
p112707
S'0'
p112708
sS'name'
p112709
S'use_displaced_mesh'
p112710
sS'required'
p112711
I00
sS'group_name'
p112712
S'Advanced'
p112713
sa(dp112714
S'description'
p112715
S'The FE solution in x direction\n'
p112716
sS'cpp_type'
p112717
S'std::vector<VariableName>'
p112718
sS'default'
p112719
g3
sS'name'
p112720
S'var_x'
p112721
sS'required'
p112722
I01
sS'group_name'
p112723
Nsa(dp112724
S'description'
p112725
S'The FE solution in y direction\n'
p112726
sS'cpp_type'
p112727
S'std::vector<VariableName>'
p112728
sS'default'
p112729
S'0'
p112730
sS'name'
p112731
S'var_y'
p112732
sS'required'
p112733
I00
sS'group_name'
p112734
Nsa(dp112735
S'description'
p112736
S'The FE solution in z direction\n'
p112737
sS'cpp_type'
p112738
S'std::vector<VariableName>'
p112739
sS'default'
p112740
S'0'
p112741
sS'name'
p112742
S'var_z'
p112743
sS'required'
p112744
I00
sS'group_name'
p112745
NsasS'name'
p112746
S'/UserObjects/ElementVectorL2Error'
p112747
sa(dp112748
S'description'
p112749
g3
sS'subblocks'
p112750
NsS'parameters'
p112751
(lp112752
(dp112753
S'description'
p112754
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112755
sS'cpp_type'
p112756
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112757
sS'default'
p112758
g3
sS'name'
p112759
S'block'
p112760
sS'required'
p112761
I00
sS'group_name'
p112762
Nsa(dp112763
S'description'
p112764
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112765
sS'cpp_type'
p112766
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112767
sS'default'
p112768
g3
sS'name'
p112769
S'control_tags'
p112770
sS'required'
p112771
I00
sS'group_name'
p112772
S'Advanced'
p112773
sa(dp112774
S'description'
p112775
S'Set the enabled status of the MooseObject.\n'
p112776
sS'cpp_type'
p112777
S'bool'
p112778
sS'default'
p112779
S'1'
p112780
sS'name'
p112781
S'enable'
p112782
sS'required'
p112783
I00
sS'group_name'
p112784
S'Advanced'
p112785
sa(dp112786
S'name'
p112787
S'execute_on'
p112788
sS'cpp_type'
p112789
S'MultiMooseEnum'
p112790
sS'default'
p112791
S'TIMESTEP_END'
p112792
sS'description'
p112793
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112794
sS'required'
p112795
I00
sS'options'
p112796
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112797
sS'group_name'
p112798
Nsa(dp112799
S'description'
p112800
S'The analytic solution to compare against\n'
p112801
sS'cpp_type'
p112802
S'FunctionName'
p112803
sS'default'
p112804
g3
sS'name'
p112805
S'function'
p112806
sS'required'
p112807
I01
sS'group_name'
p112808
Nsa(dp112809
S'description'
p112810
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112811
sS'cpp_type'
p112812
S'std::vector<OutputName, std::allocator<OutputName> >'
p112813
sS'default'
p112814
g3
sS'name'
p112815
S'outputs'
p112816
sS'required'
p112817
I00
sS'group_name'
p112818
S'Advanced'
p112819
sa(dp112820
S'description'
p112821
S'The exponent used in the norm.\n'
p112822
sS'cpp_type'
p112823
S'double'
p112824
sS'default'
p112825
S'2'
p112826
sS'name'
p112827
S'p'
p112828
sS'required'
p112829
I00
sS'group_name'
p112830
Nsa(dp112831
S'description'
p112832
S'The seed for the master random number generator\n'
p112833
sS'cpp_type'
p112834
S'unsigned int'
p112835
sS'default'
p112836
S'0'
p112837
sS'name'
p112838
S'seed'
p112839
sS'required'
p112840
I00
sS'group_name'
p112841
S'Advanced'
p112842
sa(dp112843
S'description'
p112844
g3
sS'cpp_type'
p112845
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112846
sS'default'
p112847
S'ElementW1pError'
p112848
sS'name'
p112849
S'type'
p112850
sS'required'
p112851
I00
sS'group_name'
p112852
Nsa(dp112853
S'description'
p112854
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112855
sS'cpp_type'
p112856
S'bool'
p112857
sS'default'
p112858
S'0'
p112859
sS'name'
p112860
S'use_displaced_mesh'
p112861
sS'required'
p112862
I00
sS'group_name'
p112863
S'Advanced'
p112864
sa(dp112865
S'description'
p112866
S'The name of the variable that this object operates on\n'
p112867
sS'cpp_type'
p112868
S'std::vector<VariableName>'
p112869
sS'default'
p112870
g3
sS'name'
p112871
S'variable'
p112872
sS'required'
p112873
I01
sS'group_name'
p112874
NsasS'name'
p112875
S'/UserObjects/ElementW1pError'
p112876
sa(dp112877
S'description'
p112878
g3
sS'subblocks'
p112879
NsS'parameters'
p112880
(lp112881
(dp112882
S'description'
p112883
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112884
sS'cpp_type'
p112885
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112886
sS'default'
p112887
g3
sS'name'
p112888
S'control_tags'
p112889
sS'required'
p112890
I00
sS'group_name'
p112891
S'Advanced'
p112892
sa(dp112893
S'description'
p112894
S'The ID of the element where we monitor\n'
p112895
sS'cpp_type'
p112896
S'unsigned int'
p112897
sS'default'
p112898
g3
sS'name'
p112899
S'elementid'
p112900
sS'required'
p112901
I01
sS'group_name'
p112902
Nsa(dp112903
S'description'
p112904
S'Set the enabled status of the MooseObject.\n'
p112905
sS'cpp_type'
p112906
S'bool'
p112907
sS'default'
p112908
S'1'
p112909
sS'name'
p112910
S'enable'
p112911
sS'required'
p112912
I00
sS'group_name'
p112913
S'Advanced'
p112914
sa(dp112915
S'name'
p112916
S'execute_on'
p112917
sS'cpp_type'
p112918
S'MultiMooseEnum'
p112919
sS'default'
p112920
S'TIMESTEP_END'
p112921
sS'description'
p112922
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112923
sS'required'
p112924
I00
sS'options'
p112925
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112926
sS'group_name'
p112927
Nsa(dp112928
S'description'
p112929
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112930
sS'cpp_type'
p112931
S'std::vector<OutputName, std::allocator<OutputName> >'
p112932
sS'default'
p112933
g3
sS'name'
p112934
S'outputs'
p112935
sS'required'
p112936
I00
sS'group_name'
p112937
S'Advanced'
p112938
sa(dp112939
S'description'
p112940
g3
sS'cpp_type'
p112941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112942
sS'default'
p112943
S'ElementalVariableValue'
p112944
sS'name'
p112945
S'type'
p112946
sS'required'
p112947
I00
sS'group_name'
p112948
Nsa(dp112949
S'description'
p112950
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112951
sS'cpp_type'
p112952
S'bool'
p112953
sS'default'
p112954
S'0'
p112955
sS'name'
p112956
S'use_displaced_mesh'
p112957
sS'required'
p112958
I00
sS'group_name'
p112959
S'Advanced'
p112960
sa(dp112961
S'description'
p112962
S'The variable to be monitored\n'
p112963
sS'cpp_type'
p112964
S'VariableName'
p112965
sS'default'
p112966
g3
sS'name'
p112967
S'variable'
p112968
sS'required'
p112969
I01
sS'group_name'
p112970
NsasS'name'
p112971
S'/UserObjects/ElementalVariableValue'
p112972
sa(dp112973
S'description'
p112974
g3
sS'subblocks'
p112975
NsS'parameters'
p112976
(lp112977
(dp112978
S'description'
p112979
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112980
sS'cpp_type'
p112981
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112982
sS'default'
p112983
g3
sS'name'
p112984
S'control_tags'
p112985
sS'required'
p112986
I00
sS'group_name'
p112987
S'Advanced'
p112988
sa(dp112989
S'description'
p112990
S'Set the enabled status of the MooseObject.\n'
p112991
sS'cpp_type'
p112992
S'bool'
p112993
sS'default'
p112994
S'1'
p112995
sS'name'
p112996
S'enable'
p112997
sS'required'
p112998
I00
sS'group_name'
p112999
S'Advanced'
p113000
sa(dp113001
S'name'
p113002
S'execute_on'
p113003
sS'cpp_type'
p113004
S'MultiMooseEnum'
p113005
sS'default'
p113006
S'TIMESTEP_END'
p113007
sS'description'
p113008
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113009
sS'required'
p113010
I00
sS'options'
p113011
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113012
sS'group_name'
p113013
Nsa(dp113014
S'description'
p113015
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113016
sS'cpp_type'
p113017
S'std::vector<OutputName, std::allocator<OutputName> >'
p113018
sS'default'
p113019
g3
sS'name'
p113020
S'outputs'
p113021
sS'required'
p113022
I00
sS'group_name'
p113023
S'Advanced'
p113024
sa(dp113025
S'description'
p113026
g3
sS'cpp_type'
p113027
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113028
sS'default'
p113029
S'EmptyPostprocessor'
p113030
sS'name'
p113031
S'type'
p113032
sS'required'
p113033
I00
sS'group_name'
p113034
Nsa(dp113035
S'description'
p113036
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113037
sS'cpp_type'
p113038
S'bool'
p113039
sS'default'
p113040
S'0'
p113041
sS'name'
p113042
S'use_displaced_mesh'
p113043
sS'required'
p113044
I00
sS'group_name'
p113045
S'Advanced'
p113046
sasS'name'
p113047
S'/UserObjects/EmptyPostprocessor'
p113048
sa(dp113049
S'description'
p113050
S'Read Euler angle data from a file and provide it to other objects.\n'
p113051
sS'subblocks'
p113052
NsS'parameters'
p113053
(lp113054
(dp113055
S'description'
p113056
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113057
sS'cpp_type'
p113058
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113059
sS'default'
p113060
g3
sS'name'
p113061
S'control_tags'
p113062
sS'required'
p113063
I00
sS'group_name'
p113064
S'Advanced'
p113065
sa(dp113066
S'description'
p113067
S'Set the enabled status of the MooseObject.\n'
p113068
sS'cpp_type'
p113069
S'bool'
p113070
sS'default'
p113071
S'1'
p113072
sS'name'
p113073
S'enable'
p113074
sS'required'
p113075
I00
sS'group_name'
p113076
S'Advanced'
p113077
sa(dp113078
S'name'
p113079
S'execute_on'
p113080
sS'cpp_type'
p113081
S'MultiMooseEnum'
p113082
sS'default'
p113083
S'TIMESTEP_END'
p113084
sS'description'
p113085
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113086
sS'required'
p113087
I00
sS'options'
p113088
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113089
sS'group_name'
p113090
Nsa(dp113091
S'description'
p113092
S'Euler angle data file name\n'
p113093
sS'cpp_type'
p113094
S'FileName'
p113095
sS'default'
p113096
g3
sS'name'
p113097
S'file_name'
p113098
sS'required'
p113099
I01
sS'group_name'
p113100
Nsa(dp113101
S'description'
p113102
g3
sS'cpp_type'
p113103
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113104
sS'default'
p113105
S'EulerAngleFileReader'
p113106
sS'name'
p113107
S'type'
p113108
sS'required'
p113109
I00
sS'group_name'
p113110
Nsa(dp113111
S'description'
p113112
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113113
sS'cpp_type'
p113114
S'bool'
p113115
sS'default'
p113116
S'0'
p113117
sS'name'
p113118
S'use_displaced_mesh'
p113119
sS'required'
p113120
I00
sS'group_name'
p113121
S'Advanced'
p113122
sasS'name'
p113123
S'/UserObjects/EulerAngleFileReader'
p113124
sa(dp113125
S'description'
p113126
S'Provide updated euler angles after rigid body rotation of the grains.\n'
p113127
sS'subblocks'
p113128
NsS'parameters'
p113129
(lp113130
(dp113131
S'description'
p113132
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113133
sS'cpp_type'
p113134
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113135
sS'default'
p113136
g3
sS'name'
p113137
S'control_tags'
p113138
sS'required'
p113139
I00
sS'group_name'
p113140
S'Advanced'
p113141
sa(dp113142
S'description'
p113143
S'Set the enabled status of the MooseObject.\n'
p113144
sS'cpp_type'
p113145
S'bool'
p113146
sS'default'
p113147
S'1'
p113148
sS'name'
p113149
S'enable'
p113150
sS'required'
p113151
I00
sS'group_name'
p113152
S'Advanced'
p113153
sa(dp113154
S'description'
p113155
S'Name of Euler angle provider user object\n'
p113156
sS'cpp_type'
p113157
S'UserObjectName'
p113158
sS'default'
p113159
g3
sS'name'
p113160
S'euler_angle_provider'
p113161
sS'required'
p113162
I01
sS'group_name'
p113163
Nsa(dp113164
S'name'
p113165
S'execute_on'
p113166
sS'cpp_type'
p113167
S'MultiMooseEnum'
p113168
sS'default'
p113169
S'TIMESTEP_END'
p113170
sS'description'
p113171
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113172
sS'required'
p113173
I00
sS'options'
p113174
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113175
sS'group_name'
p113176
Nsa(dp113177
S'description'
p113178
S'Name of Euler angle provider user object\n'
p113179
sS'cpp_type'
p113180
S'UserObjectName'
p113181
sS'default'
p113182
g3
sS'name'
p113183
S'grain_torques_object'
p113184
sS'required'
p113185
I01
sS'group_name'
p113186
Nsa(dp113187
S'description'
p113188
S'The FeatureFloodCount UserObject to get values from.\n'
p113189
sS'cpp_type'
p113190
S'UserObjectName'
p113191
sS'default'
p113192
g3
sS'name'
p113193
S'grain_tracker_object'
p113194
sS'required'
p113195
I01
sS'group_name'
p113196
Nsa(dp113197
S'description'
p113198
S'The feature volume VectorPostprocessorValue.\n'
p113199
sS'cpp_type'
p113200
S'VectorPostprocessorName'
p113201
sS'default'
p113202
g3
sS'name'
p113203
S'grain_volumes'
p113204
sS'required'
p113205
I01
sS'group_name'
p113206
Nsa(dp113207
S'description'
p113208
S'Constant value characterizing grain rotation\n'
p113209
sS'cpp_type'
p113210
S'double'
p113211
sS'default'
p113212
S'1'
p113213
sS'name'
p113214
S'rotation_constant'
p113215
sS'required'
p113216
I00
sS'group_name'
p113217
Nsa(dp113218
S'description'
p113219
g3
sS'cpp_type'
p113220
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113221
sS'default'
p113222
S'EulerAngleUpdater'
p113223
sS'name'
p113224
S'type'
p113225
sS'required'
p113226
I00
sS'group_name'
p113227
Nsa(dp113228
S'description'
p113229
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113230
sS'cpp_type'
p113231
S'bool'
p113232
sS'default'
p113233
S'0'
p113234
sS'name'
p113235
S'use_displaced_mesh'
p113236
sS'required'
p113237
I00
sS'group_name'
p113238
S'Advanced'
p113239
sasS'name'
p113240
S'/UserObjects/EulerAngleUpdater'
p113241
sa(dp113242
S'description'
p113243
g3
sS'subblocks'
p113244
NsS'parameters'
p113245
(lp113246
(dp113247
S'description'
p113248
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113249
sS'cpp_type'
p113250
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113251
sS'default'
p113252
g3
sS'name'
p113253
S'control_tags'
p113254
sS'required'
p113255
I00
sS'group_name'
p113256
S'Advanced'
p113257
sa(dp113258
S'description'
p113259
S'Set the enabled status of the MooseObject.\n'
p113260
sS'cpp_type'
p113261
S'bool'
p113262
sS'default'
p113263
S'1'
p113264
sS'name'
p113265
S'enable'
p113266
sS'required'
p113267
I00
sS'group_name'
p113268
S'Advanced'
p113269
sa(dp113270
S'name'
p113271
S'execute_on'
p113272
sS'cpp_type'
p113273
S'MultiMooseEnum'
p113274
sS'default'
p113275
S'TIMESTEP_END'
p113276
sS'description'
p113277
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113278
sS'required'
p113279
I00
sS'options'
p113280
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113281
sS'group_name'
p113282
Nsa(dp113283
S'description'
p113284
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113285
sS'cpp_type'
p113286
S'std::vector<OutputName, std::allocator<OutputName> >'
p113287
sS'default'
p113288
g3
sS'name'
p113289
S'outputs'
p113290
sS'required'
p113291
I00
sS'group_name'
p113292
S'Advanced'
p113293
sa(dp113294
S'description'
p113295
g3
sS'cpp_type'
p113296
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113297
sS'default'
p113298
S'ExecutionerAttributeReporter'
p113299
sS'name'
p113300
S'type'
p113301
sS'required'
p113302
I00
sS'group_name'
p113303
Nsa(dp113304
S'description'
p113305
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113306
sS'cpp_type'
p113307
S'bool'
p113308
sS'default'
p113309
S'0'
p113310
sS'name'
p113311
S'use_displaced_mesh'
p113312
sS'required'
p113313
I00
sS'group_name'
p113314
S'Advanced'
p113315
sasS'name'
p113316
S'/UserObjects/ExecutionerAttributeReporter'
p113317
sa(dp113318
S'description'
p113319
S'Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n'
p113320
sS'subblocks'
p113321
NsS'parameters'
p113322
(lp113323
(dp113324
S'description'
p113325
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p113326
sS'cpp_type'
p113327
S'bool'
p113328
sS'default'
p113329
S'0'
p113330
sS'name'
p113331
S'compute_halo_maps'
p113332
sS'required'
p113333
I00
sS'group_name'
p113334
Nsa(dp113335
S'description'
p113336
S'Instruct the Postprocessor to compute the active vars to features map\n'
p113337
sS'cpp_type'
p113338
S'bool'
p113339
sS'default'
p113340
S'0'
p113341
sS'name'
p113342
S'compute_var_to_feature_map'
p113343
sS'required'
p113344
I00
sS'group_name'
p113345
Nsa(dp113346
S'description'
p113347
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p113348
sS'cpp_type'
p113349
S'bool'
p113350
sS'default'
p113351
S'1'
p113352
sS'name'
p113353
S'condense_map_info'
p113354
sS'required'
p113355
I00
sS'group_name'
p113356
S'Advanced'
p113357
sa(dp113358
S'description'
p113359
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p113360
sS'cpp_type'
p113361
S'double'
p113362
sS'default'
p113363
S'0.09'
p113364
sS'name'
p113365
S'connecting_threshold'
p113366
sS'required'
p113367
I00
sS'group_name'
p113368
Nsa(dp113369
S'description'
p113370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113371
sS'cpp_type'
p113372
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113373
sS'default'
p113374
g3
sS'name'
p113375
S'control_tags'
p113376
sS'required'
p113377
I00
sS'group_name'
p113378
S'Advanced'
p113379
sa(dp113380
S'description'
p113381
S'Optional: EBSD Reader for initial condition\n'
p113382
sS'cpp_type'
p113383
S'UserObjectName'
p113384
sS'default'
p113385
g3
sS'name'
p113386
S'ebsd_reader'
p113387
sS'required'
p113388
I00
sS'group_name'
p113389
Nsa(dp113390
S'description'
p113391
S'Set the enabled status of the MooseObject.\n'
p113392
sS'cpp_type'
p113393
S'bool'
p113394
sS'default'
p113395
S'1'
p113396
sS'name'
p113397
S'enable'
p113398
sS'required'
p113399
I00
sS'group_name'
p113400
S'Advanced'
p113401
sa(dp113402
S'description'
p113403
S'Instruct the Postprocessor to populate the variable index map.\n'
p113404
sS'cpp_type'
p113405
S'bool'
p113406
sS'default'
p113407
S'1'
p113408
sS'name'
p113409
S'enable_var_coloring'
p113410
sS'required'
p113411
I00
sS'group_name'
p113412
Nsa(dp113413
S'description'
p113414
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p113415
sS'cpp_type'
p113416
S'bool'
p113417
sS'default'
p113418
S'0'
p113419
sS'name'
p113420
S'error_on_grain_creation'
p113421
sS'required'
p113422
I00
sS'group_name'
p113423
Nsa(dp113424
S'name'
p113425
S'execute_on'
p113426
sS'cpp_type'
p113427
S'MultiMooseEnum'
p113428
sS'default'
p113429
S'INITIAL TIMESTEP_END'
p113430
sS'description'
p113431
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113432
sS'required'
p113433
I00
sS'options'
p113434
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113435
sS'group_name'
p113436
Nsa(dp113437
S'name'
p113438
S'flood_entity_type'
p113439
sS'cpp_type'
p113440
S'MooseEnum'
p113441
sS'default'
p113442
S'ELEMENTAL'
p113443
sS'description'
p113444
S'Determines whether the flood algorithm runs on nodes or elements\n'
p113445
sS'required'
p113446
I00
sS'options'
p113447
S'NODAL ELEMENTAL'
p113448
sS'group_name'
p113449
Nsa(dp113450
S'description'
p113451
S'The thickness of the halo surrounding each feature.\n'
p113452
sS'cpp_type'
p113453
S'unsigned int'
p113454
sS'default'
p113455
S'2'
p113456
sS'name'
p113457
S'halo_level'
p113458
sS'required'
p113459
I00
sS'group_name'
p113460
Nsa(dp113461
S'description'
p113462
S'Array of coupled variables (num_name)\n'
p113463
sS'cpp_type'
p113464
S'unsigned int'
p113465
sS'default'
p113466
g3
sS'name'
p113467
S'op_num'
p113468
sS'required'
p113469
I00
sS'group_name'
p113470
Nsa(dp113471
S'description'
p113472
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113473
sS'cpp_type'
p113474
S'std::vector<OutputName, std::allocator<OutputName> >'
p113475
sS'default'
p113476
g3
sS'name'
p113477
S'outputs'
p113478
sS'required'
p113479
I00
sS'group_name'
p113480
S'Advanced'
p113481
sa(dp113482
S'description'
p113483
S'EBSD phase number from which to retrieve information\n'
p113484
sS'cpp_type'
p113485
S'unsigned int'
p113486
sS'default'
p113487
g3
sS'name'
p113488
S'phase'
p113489
sS'required'
p113490
I00
sS'group_name'
p113491
Nsa(dp113492
S'description'
p113493
S'Indicates whether remapping should be done or not (default: true)\n'
p113494
sS'cpp_type'
p113495
S'bool'
p113496
sS'default'
p113497
S'1'
p113498
sS'name'
p113499
S'remap_grains'
p113500
sS'required'
p113501
I00
sS'group_name'
p113502
Nsa(dp113503
S'description'
p113504
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p113505
sS'cpp_type'
p113506
S'unsigned short'
p113507
sS'default'
p113508
S'0'
p113509
sS'name'
p113510
S'reserve_op'
p113511
sS'required'
p113512
I00
sS'group_name'
p113513
Nsa(dp113514
S'description'
p113515
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p113516
sS'cpp_type'
p113517
S'double'
p113518
sS'default'
p113519
S'0.95'
p113520
sS'name'
p113521
S'reserve_op_threshold'
p113522
sS'required'
p113523
I00
sS'group_name'
p113524
Nsa(dp113525
S'description'
p113526
S'The threshold value for which a new feature may be started\n'
p113527
sS'cpp_type'
p113528
S'double'
p113529
sS'default'
p113530
S'0.1'
p113531
sS'name'
p113532
S'threshold'
p113533
sS'required'
p113534
I00
sS'group_name'
p113535
Nsa(dp113536
S'description'
p113537
S'The timestep for when we should start tracking grains\n'
p113538
sS'cpp_type'
p113539
S'int'
p113540
sS'default'
p113541
S'0'
p113542
sS'name'
p113543
S'tracking_step'
p113544
sS'required'
p113545
I00
sS'group_name'
p113546
Nsa(dp113547
S'description'
p113548
g3
sS'cpp_type'
p113549
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113550
sS'default'
p113551
S'FauxGrainTracker'
p113552
sS'name'
p113553
S'type'
p113554
sS'required'
p113555
I00
sS'group_name'
p113556
Nsa(dp113557
S'description'
p113558
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113559
sS'cpp_type'
p113560
S'bool'
p113561
sS'default'
p113562
S'0'
p113563
sS'name'
p113564
S'use_displaced_mesh'
p113565
sS'required'
p113566
I00
sS'group_name'
p113567
S'Advanced'
p113568
sa(dp113569
S'description'
p113570
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p113571
sS'cpp_type'
p113572
S'bool'
p113573
sS'default'
p113574
S'1'
p113575
sS'name'
p113576
S'use_global_numbering'
p113577
sS'required'
p113578
I00
sS'group_name'
p113579
S'Advanced'
p113580
sa(dp113581
S'description'
p113582
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p113583
sS'cpp_type'
p113584
S'bool'
p113585
sS'default'
p113586
S'1'
p113587
sS'name'
p113588
S'use_less_than_threshold_comparison'
p113589
sS'required'
p113590
I00
sS'group_name'
p113591
Nsa(dp113592
S'description'
p113593
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p113594
sS'cpp_type'
p113595
S'bool'
p113596
sS'default'
p113597
S'0'
p113598
sS'name'
p113599
S'use_single_map'
p113600
sS'required'
p113601
I00
sS'group_name'
p113602
S'Advanced'
p113603
sa(dp113604
S'description'
p113605
S'Array of coupled variables (base_name)\n'
p113606
sS'cpp_type'
p113607
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113608
sS'default'
p113609
g3
sS'name'
p113610
S'var_name_base'
p113611
sS'required'
p113612
I00
sS'group_name'
p113613
Nsa(dp113614
S'description'
p113615
S'Array of coupled variables\n'
p113616
sS'cpp_type'
p113617
S'std::vector<VariableName>'
p113618
sS'default'
p113619
g3
sS'name'
p113620
S'variable'
p113621
sS'required'
p113622
I01
sS'group_name'
p113623
NsasS'name'
p113624
S'/UserObjects/FauxGrainTracker'
p113625
sa(dp113626
S'description'
p113627
g3
sS'subblocks'
p113628
NsS'parameters'
p113629
(lp113630
(dp113631
S'description'
p113632
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p113633
sS'cpp_type'
p113634
S'bool'
p113635
sS'default'
p113636
S'0'
p113637
sS'name'
p113638
S'compute_halo_maps'
p113639
sS'required'
p113640
I00
sS'group_name'
p113641
Nsa(dp113642
S'description'
p113643
S'Instruct the Postprocessor to compute the active vars to features map\n'
p113644
sS'cpp_type'
p113645
S'bool'
p113646
sS'default'
p113647
S'0'
p113648
sS'name'
p113649
S'compute_var_to_feature_map'
p113650
sS'required'
p113651
I00
sS'group_name'
p113652
Nsa(dp113653
S'description'
p113654
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p113655
sS'cpp_type'
p113656
S'bool'
p113657
sS'default'
p113658
S'0'
p113659
sS'name'
p113660
S'condense_map_info'
p113661
sS'required'
p113662
I00
sS'group_name'
p113663
S'Advanced'
p113664
sa(dp113665
S'description'
p113666
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p113667
sS'cpp_type'
p113668
S'double'
p113669
sS'default'
p113670
g3
sS'name'
p113671
S'connecting_threshold'
p113672
sS'required'
p113673
I00
sS'group_name'
p113674
Nsa(dp113675
S'description'
p113676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113677
sS'cpp_type'
p113678
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113679
sS'default'
p113680
g3
sS'name'
p113681
S'control_tags'
p113682
sS'required'
p113683
I00
sS'group_name'
p113684
S'Advanced'
p113685
sa(dp113686
S'description'
p113687
S'Set the enabled status of the MooseObject.\n'
p113688
sS'cpp_type'
p113689
S'bool'
p113690
sS'default'
p113691
S'1'
p113692
sS'name'
p113693
S'enable'
p113694
sS'required'
p113695
I00
sS'group_name'
p113696
S'Advanced'
p113697
sa(dp113698
S'description'
p113699
S'Instruct the Postprocessor to populate the variable index map.\n'
p113700
sS'cpp_type'
p113701
S'bool'
p113702
sS'default'
p113703
S'0'
p113704
sS'name'
p113705
S'enable_var_coloring'
p113706
sS'required'
p113707
I00
sS'group_name'
p113708
Nsa(dp113709
S'name'
p113710
S'execute_on'
p113711
sS'cpp_type'
p113712
S'MultiMooseEnum'
p113713
sS'default'
p113714
S'TIMESTEP_END'
p113715
sS'description'
p113716
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113717
sS'required'
p113718
I00
sS'options'
p113719
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113720
sS'group_name'
p113721
Nsa(dp113722
S'name'
p113723
S'flood_entity_type'
p113724
sS'cpp_type'
p113725
S'MooseEnum'
p113726
sS'default'
p113727
S'ELEMENTAL'
p113728
sS'description'
p113729
S'Determines whether the flood algorithm runs on nodes or elements\n'
p113730
sS'required'
p113731
I00
sS'options'
p113732
S'NODAL ELEMENTAL'
p113733
sS'group_name'
p113734
Nsa(dp113735
S'description'
p113736
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113737
sS'cpp_type'
p113738
S'std::vector<OutputName, std::allocator<OutputName> >'
p113739
sS'default'
p113740
g3
sS'name'
p113741
S'outputs'
p113742
sS'required'
p113743
I00
sS'group_name'
p113744
S'Advanced'
p113745
sa(dp113746
S'description'
p113747
S'The threshold value for which a new feature may be started\n'
p113748
sS'cpp_type'
p113749
S'double'
p113750
sS'default'
p113751
S'0.5'
p113752
sS'name'
p113753
S'threshold'
p113754
sS'required'
p113755
I00
sS'group_name'
p113756
Nsa(dp113757
S'description'
p113758
g3
sS'cpp_type'
p113759
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113760
sS'default'
p113761
S'FeatureFloodCount'
p113762
sS'name'
p113763
S'type'
p113764
sS'required'
p113765
I00
sS'group_name'
p113766
Nsa(dp113767
S'description'
p113768
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113769
sS'cpp_type'
p113770
S'bool'
p113771
sS'default'
p113772
S'0'
p113773
sS'name'
p113774
S'use_displaced_mesh'
p113775
sS'required'
p113776
I00
sS'group_name'
p113777
S'Advanced'
p113778
sa(dp113779
S'description'
p113780
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p113781
sS'cpp_type'
p113782
S'bool'
p113783
sS'default'
p113784
S'1'
p113785
sS'name'
p113786
S'use_global_numbering'
p113787
sS'required'
p113788
I00
sS'group_name'
p113789
S'Advanced'
p113790
sa(dp113791
S'description'
p113792
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p113793
sS'cpp_type'
p113794
S'bool'
p113795
sS'default'
p113796
S'1'
p113797
sS'name'
p113798
S'use_less_than_threshold_comparison'
p113799
sS'required'
p113800
I00
sS'group_name'
p113801
Nsa(dp113802
S'description'
p113803
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p113804
sS'cpp_type'
p113805
S'bool'
p113806
sS'default'
p113807
S'1'
p113808
sS'name'
p113809
S'use_single_map'
p113810
sS'required'
p113811
I00
sS'group_name'
p113812
S'Advanced'
p113813
sa(dp113814
S'description'
p113815
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p113816
sS'cpp_type'
p113817
S'std::vector<VariableName>'
p113818
sS'default'
p113819
g3
sS'name'
p113820
S'variable'
p113821
sS'required'
p113822
I01
sS'group_name'
p113823
NsasS'name'
p113824
S'/UserObjects/FeatureFloodCount'
p113825
sa(dp113826
S'description'
p113827
g3
sS'subblocks'
p113828
NsS'parameters'
p113829
(lp113830
(dp113831
S'description'
p113832
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113833
sS'cpp_type'
p113834
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113835
sS'default'
p113836
g3
sS'name'
p113837
S'control_tags'
p113838
sS'required'
p113839
I00
sS'group_name'
p113840
S'Advanced'
p113841
sa(dp113842
S'description'
p113843
S'Set the enabled status of the MooseObject.\n'
p113844
sS'cpp_type'
p113845
S'bool'
p113846
sS'default'
p113847
S'1'
p113848
sS'name'
p113849
S'enable'
p113850
sS'required'
p113851
I00
sS'group_name'
p113852
S'Advanced'
p113853
sa(dp113854
S'description'
p113855
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p113856
sS'cpp_type'
p113857
S'double'
p113858
sS'default'
p113859
S'-1'
p113860
sS'name'
p113861
S'equil_fraction'
p113862
sS'required'
p113863
I00
sS'group_name'
p113864
Nsa(dp113865
S'name'
p113866
S'execute_on'
p113867
sS'cpp_type'
p113868
S'MultiMooseEnum'
p113869
sS'default'
p113870
S'TIMESTEP_END'
p113871
sS'description'
p113872
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113873
sS'required'
p113874
I00
sS'options'
p113875
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113876
sS'group_name'
p113877
Nsa(dp113878
S'description'
p113879
S'The feature volume VectorPostprocessorValue.\n'
p113880
sS'cpp_type'
p113881
S'VectorPostprocessorName'
p113882
sS'default'
p113883
g3
sS'name'
p113884
S'feature_volumes'
p113885
sS'required'
p113886
I01
sS'group_name'
p113887
Nsa(dp113888
S'description'
p113889
S'Postprocessor from which to get mesh volume\n'
p113890
sS'cpp_type'
p113891
S'PostprocessorName'
p113892
sS'default'
p113893
g3
sS'name'
p113894
S'mesh_volume'
p113895
sS'required'
p113896
I01
sS'group_name'
p113897
Nsa(dp113898
S'description'
p113899
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113900
sS'cpp_type'
p113901
S'std::vector<OutputName, std::allocator<OutputName> >'
p113902
sS'default'
p113903
g3
sS'name'
p113904
S'outputs'
p113905
sS'required'
p113906
I00
sS'group_name'
p113907
S'Advanced'
p113908
sa(dp113909
S'description'
p113910
g3
sS'cpp_type'
p113911
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113912
sS'default'
p113913
S'FeatureVolumeFraction'
p113914
sS'name'
p113915
S'type'
p113916
sS'required'
p113917
I00
sS'group_name'
p113918
Nsa(dp113919
S'description'
p113920
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113921
sS'cpp_type'
p113922
S'bool'
p113923
sS'default'
p113924
S'0'
p113925
sS'name'
p113926
S'use_displaced_mesh'
p113927
sS'required'
p113928
I00
sS'group_name'
p113929
S'Advanced'
p113930
sa(dp113931
S'name'
p113932
S'value_type'
p113933
sS'cpp_type'
p113934
S'MooseEnum'
p113935
sS'default'
p113936
S'VOLUME_FRACTION'
p113937
sS'description'
p113938
S'The value to output (VOLUME_FRACTION or AVRAMI value)\n'
p113939
sS'required'
p113940
I00
sS'options'
p113941
S'VOLUME_FRACTION AVRAMI'
p113942
sS'group_name'
p113943
NsasS'name'
p113944
S'/UserObjects/FeatureVolumeFraction'
p113945
sa(dp113946
S'description'
p113947
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p113948
sS'subblocks'
p113949
NsS'parameters'
p113950
(lp113951
(dp113952
S'description'
p113953
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113954
sS'cpp_type'
p113955
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113956
sS'default'
p113957
g3
sS'name'
p113958
S'control_tags'
p113959
sS'required'
p113960
I00
sS'group_name'
p113961
S'Advanced'
p113962
sa(dp113963
S'description'
p113964
S'Maximum number of bisections to perform.\n'
p113965
sS'cpp_type'
p113966
S'unsigned int'
p113967
sS'default'
p113968
S'36'
p113969
sS'name'
p113970
S'depth'
p113971
sS'required'
p113972
I00
sS'group_name'
p113973
Nsa(dp113974
S'description'
p113975
S'Set the enabled status of the MooseObject.\n'
p113976
sS'cpp_type'
p113977
S'bool'
p113978
sS'default'
p113979
S'1'
p113980
sS'name'
p113981
S'enable'
p113982
sS'required'
p113983
I00
sS'group_name'
p113984
S'Advanced'
p113985
sa(dp113986
S'description'
p113987
S'End point of the sampling line.\n'
p113988
sS'cpp_type'
p113989
S'libMesh::Point'
p113990
sS'default'
p113991
g3
sS'name'
p113992
S'end_point'
p113993
sS'required'
p113994
I00
sS'group_name'
p113995
Nsa(dp113996
S'name'
p113997
S'execute_on'
p113998
sS'cpp_type'
p113999
S'MultiMooseEnum'
p114000
sS'default'
p114001
S'TIMESTEP_END'
p114002
sS'description'
p114003
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114004
sS'required'
p114005
I00
sS'options'
p114006
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114007
sS'group_name'
p114008
Nsa(dp114009
S'description'
p114010
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114011
sS'cpp_type'
p114012
S'std::vector<OutputName, std::allocator<OutputName> >'
p114013
sS'default'
p114014
g3
sS'name'
p114015
S'outputs'
p114016
sS'required'
p114017
I00
sS'group_name'
p114018
S'Advanced'
p114019
sa(dp114020
S'description'
p114021
S'Start point of the sampling line.\n'
p114022
sS'cpp_type'
p114023
S'libMesh::Point'
p114024
sS'default'
p114025
g3
sS'name'
p114026
S'start_point'
p114027
sS'required'
p114028
I00
sS'group_name'
p114029
Nsa(dp114030
S'description'
p114031
S'Target value to locate.\n'
p114032
sS'cpp_type'
p114033
S'double'
p114034
sS'default'
p114035
g3
sS'name'
p114036
S'target'
p114037
sS'required'
p114038
I00
sS'group_name'
p114039
Nsa(dp114040
S'description'
p114041
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p114042
sS'cpp_type'
p114043
S'double'
p114044
sS'default'
p114045
S'1e-10'
p114046
sS'name'
p114047
S'tol'
p114048
sS'required'
p114049
I00
sS'group_name'
p114050
Nsa(dp114051
S'description'
p114052
g3
sS'cpp_type'
p114053
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114054
sS'default'
p114055
S'FindValueOnLine'
p114056
sS'name'
p114057
S'type'
p114058
sS'required'
p114059
I00
sS'group_name'
p114060
Nsa(dp114061
S'description'
p114062
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114063
sS'cpp_type'
p114064
S'bool'
p114065
sS'default'
p114066
S'0'
p114067
sS'name'
p114068
S'use_displaced_mesh'
p114069
sS'required'
p114070
I00
sS'group_name'
p114071
S'Advanced'
p114072
sa(dp114073
S'description'
p114074
S'Variable to inspect\n'
p114075
sS'cpp_type'
p114076
S'std::vector<VariableName>'
p114077
sS'default'
p114078
g3
sS'name'
p114079
S'v'
p114080
sS'required'
p114081
I00
sS'group_name'
p114082
NsasS'name'
p114083
S'/UserObjects/FindValueOnLine'
p114084
sa(dp114085
S'description'
p114086
g3
sS'subblocks'
p114087
NsS'parameters'
p114088
(lp114089
(dp114090
S'description'
p114091
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p114092
sS'cpp_type'
p114093
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p114094
sS'default'
p114095
g3
sS'name'
p114096
S'boundary'
p114097
sS'required'
p114098
I01
sS'group_name'
p114099
Nsa(dp114100
S'description'
p114101
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114102
sS'cpp_type'
p114103
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114104
sS'default'
p114105
g3
sS'name'
p114106
S'control_tags'
p114107
sS'required'
p114108
I00
sS'group_name'
p114109
S'Advanced'
p114110
sa(dp114111
S'description'
p114112
S'Set the enabled status of the MooseObject.\n'
p114113
sS'cpp_type'
p114114
S'bool'
p114115
sS'default'
p114116
S'1'
p114117
sS'name'
p114118
S'enable'
p114119
sS'required'
p114120
I00
sS'group_name'
p114121
S'Advanced'
p114122
sa(dp114123
S'name'
p114124
S'execute_on'
p114125
sS'cpp_type'
p114126
S'MultiMooseEnum'
p114127
sS'default'
p114128
S'TIMESTEP_END'
p114129
sS'description'
p114130
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114131
sS'required'
p114132
I00
sS'options'
p114133
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114134
sS'group_name'
p114135
Nsa(dp114136
S'description'
p114137
S'This postprocessor will return the integral of this function over the boundary\n'
p114138
sS'cpp_type'
p114139
S'FunctionName'
p114140
sS'default'
p114141
S'1'
p114142
sS'name'
p114143
S'function'
p114144
sS'required'
p114145
I00
sS'group_name'
p114146
Nsa(dp114147
S'description'
p114148
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114149
sS'cpp_type'
p114150
S'std::vector<OutputName, std::allocator<OutputName> >'
p114151
sS'default'
p114152
g3
sS'name'
p114153
S'outputs'
p114154
sS'required'
p114155
I00
sS'group_name'
p114156
S'Advanced'
p114157
sa(dp114158
S'description'
p114159
g3
sS'cpp_type'
p114160
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114161
sS'default'
p114162
S'FunctionSideIntegral'
p114163
sS'name'
p114164
S'type'
p114165
sS'required'
p114166
I00
sS'group_name'
p114167
Nsa(dp114168
S'description'
p114169
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114170
sS'cpp_type'
p114171
S'bool'
p114172
sS'default'
p114173
S'0'
p114174
sS'name'
p114175
S'use_displaced_mesh'
p114176
sS'required'
p114177
I00
sS'group_name'
p114178
S'Advanced'
p114179
sasS'name'
p114180
S'/UserObjects/FunctionSideIntegral'
p114181
sa(dp114182
S'description'
p114183
g3
sS'subblocks'
p114184
NsS'parameters'
p114185
(lp114186
(dp114187
S'description'
p114188
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114189
sS'cpp_type'
p114190
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114191
sS'default'
p114192
g3
sS'name'
p114193
S'control_tags'
p114194
sS'required'
p114195
I00
sS'group_name'
p114196
S'Advanced'
p114197
sa(dp114198
S'description'
p114199
S'Set the enabled status of the MooseObject.\n'
p114200
sS'cpp_type'
p114201
S'bool'
p114202
sS'default'
p114203
S'1'
p114204
sS'name'
p114205
S'enable'
p114206
sS'required'
p114207
I00
sS'group_name'
p114208
S'Advanced'
p114209
sa(dp114210
S'name'
p114211
S'execute_on'
p114212
sS'cpp_type'
p114213
S'MultiMooseEnum'
p114214
sS'default'
p114215
S'TIMESTEP_END'
p114216
sS'description'
p114217
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114218
sS'required'
p114219
I00
sS'options'
p114220
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114221
sS'group_name'
p114222
Nsa(dp114223
S'description'
p114224
S'The function which supplies the postprocessor value.\n'
p114225
sS'cpp_type'
p114226
S'FunctionName'
p114227
sS'default'
p114228
g3
sS'name'
p114229
S'function'
p114230
sS'required'
p114231
I01
sS'group_name'
p114232
Nsa(dp114233
S'description'
p114234
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114235
sS'cpp_type'
p114236
S'std::vector<OutputName, std::allocator<OutputName> >'
p114237
sS'default'
p114238
g3
sS'name'
p114239
S'outputs'
p114240
sS'required'
p114241
I00
sS'group_name'
p114242
S'Advanced'
p114243
sa(dp114244
S'description'
p114245
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p114246
sS'cpp_type'
p114247
S'libMesh::Point'
p114248
sS'default'
p114249
S'0 0 0'
p114250
sS'name'
p114251
S'point'
p114252
sS'required'
p114253
I00
sS'group_name'
p114254
Nsa(dp114255
S'description'
p114256
S'A scale factor to be applied to the function\n'
p114257
sS'cpp_type'
p114258
S'double'
p114259
sS'default'
p114260
S'1'
p114261
sS'name'
p114262
S'scale_factor'
p114263
sS'required'
p114264
I00
sS'group_name'
p114265
Nsa(dp114266
S'description'
p114267
g3
sS'cpp_type'
p114268
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114269
sS'default'
p114270
S'FunctionValuePostprocessor'
p114271
sS'name'
p114272
S'type'
p114273
sS'required'
p114274
I00
sS'group_name'
p114275
Nsa(dp114276
S'description'
p114277
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114278
sS'cpp_type'
p114279
S'bool'
p114280
sS'default'
p114281
S'0'
p114282
sS'name'
p114283
S'use_displaced_mesh'
p114284
sS'required'
p114285
I00
sS'group_name'
p114286
S'Advanced'
p114287
sasS'name'
p114288
S'/UserObjects/FunctionValuePostprocessor'
p114289
sa(dp114290
S'description'
p114291
S'Generalized Plane Strain UserObject to provide Residual and diagonal Jacobian entry\n'
p114292
sS'subblocks'
p114293
NsS'parameters'
p114294
(lp114295
(dp114296
S'description'
p114297
S'Material properties base name\n'
p114298
sS'cpp_type'
p114299
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114300
sS'default'
p114301
g3
sS'name'
p114302
S'base_name'
p114303
sS'required'
p114304
I00
sS'group_name'
p114305
Nsa(dp114306
S'description'
p114307
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114308
sS'cpp_type'
p114309
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114310
sS'default'
p114311
g3
sS'name'
p114312
S'block'
p114313
sS'required'
p114314
I00
sS'group_name'
p114315
Nsa(dp114316
S'description'
p114317
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114318
sS'cpp_type'
p114319
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114320
sS'default'
p114321
g3
sS'name'
p114322
S'control_tags'
p114323
sS'required'
p114324
I00
sS'group_name'
p114325
S'Advanced'
p114326
sa(dp114327
S'description'
p114328
S'Set the enabled status of the MooseObject.\n'
p114329
sS'cpp_type'
p114330
S'bool'
p114331
sS'default'
p114332
S'1'
p114333
sS'name'
p114334
S'enable'
p114335
sS'required'
p114336
I00
sS'group_name'
p114337
S'Advanced'
p114338
sa(dp114339
S'name'
p114340
S'execute_on'
p114341
sS'cpp_type'
p114342
S'MultiMooseEnum'
p114343
sS'default'
p114344
S'LINEAR'
p114345
sS'description'
p114346
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114347
sS'required'
p114348
I00
sS'options'
p114349
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114350
sS'group_name'
p114351
Nsa(dp114352
S'description'
p114353
S'Scale factor applied to prescribed pressure\n'
p114354
sS'cpp_type'
p114355
S'double'
p114356
sS'default'
p114357
S'1'
p114358
sS'name'
p114359
S'factor'
p114360
sS'required'
p114361
I00
sS'group_name'
p114362
Nsa(dp114363
S'description'
p114364
S'Function used to prescribe pressure in the out-of-plane direction\n'
p114365
sS'cpp_type'
p114366
S'FunctionName'
p114367
sS'default'
p114368
S'0'
p114369
sS'name'
p114370
S'out_of_plane_pressure'
p114371
sS'required'
p114372
I00
sS'group_name'
p114373
Nsa(dp114374
S'description'
p114375
S'The seed for the master random number generator\n'
p114376
sS'cpp_type'
p114377
S'unsigned int'
p114378
sS'default'
p114379
S'0'
p114380
sS'name'
p114381
S'seed'
p114382
sS'required'
p114383
I00
sS'group_name'
p114384
S'Advanced'
p114385
sa(dp114386
S'description'
p114387
g3
sS'cpp_type'
p114388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114389
sS'default'
p114390
S'GeneralizedPlaneStrainUserObject'
p114391
sS'name'
p114392
S'type'
p114393
sS'required'
p114394
I00
sS'group_name'
p114395
Nsa(dp114396
S'description'
p114397
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114398
sS'cpp_type'
p114399
S'bool'
p114400
sS'default'
p114401
S'0'
p114402
sS'name'
p114403
S'use_displaced_mesh'
p114404
sS'required'
p114405
I00
sS'group_name'
p114406
S'Advanced'
p114407
sasS'name'
p114408
S'/UserObjects/GeneralizedPlaneStrainUserObject'
p114409
sa(dp114410
S'description'
p114411
S'Calculate total grain boundary length in 2D and area in 3D\n'
p114412
sS'subblocks'
p114413
NsS'parameters'
p114414
(lp114415
(dp114416
S'description'
p114417
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114418
sS'cpp_type'
p114419
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114420
sS'default'
p114421
g3
sS'name'
p114422
S'block'
p114423
sS'required'
p114424
I00
sS'group_name'
p114425
Nsa(dp114426
S'description'
p114427
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114428
sS'cpp_type'
p114429
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114430
sS'default'
p114431
g3
sS'name'
p114432
S'control_tags'
p114433
sS'required'
p114434
I00
sS'group_name'
p114435
S'Advanced'
p114436
sa(dp114437
S'description'
p114438
S'Set the enabled status of the MooseObject.\n'
p114439
sS'cpp_type'
p114440
S'bool'
p114441
sS'default'
p114442
S'1'
p114443
sS'name'
p114444
S'enable'
p114445
sS'required'
p114446
I00
sS'group_name'
p114447
S'Advanced'
p114448
sa(dp114449
S'name'
p114450
S'execute_on'
p114451
sS'cpp_type'
p114452
S'MultiMooseEnum'
p114453
sS'default'
p114454
S'TIMESTEP_END'
p114455
sS'description'
p114456
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114457
sS'required'
p114458
I00
sS'options'
p114459
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114460
sS'group_name'
p114461
Nsa(dp114462
S'description'
p114463
S'Number of order parameters contacting a boundary (should be 2.0 in polycrystals and 1.0 for dispersed particles)\n'
p114464
sS'cpp_type'
p114465
S'double'
p114466
sS'default'
p114467
S'2'
p114468
sS'name'
p114469
S'grains_per_side'
p114470
sS'required'
p114471
I00
sS'group_name'
p114472
Nsa(dp114473
S'description'
p114474
S'Array of coupled variables (num_name)\n'
p114475
sS'cpp_type'
p114476
S'unsigned int'
p114477
sS'default'
p114478
g3
sS'name'
p114479
S'op_num'
p114480
sS'required'
p114481
I00
sS'group_name'
p114482
Nsa(dp114483
S'description'
p114484
S'Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n'
p114485
sS'cpp_type'
p114486
S'double'
p114487
sS'default'
p114488
S'1'
p114489
sS'name'
p114490
S'op_range'
p114491
sS'required'
p114492
I00
sS'group_name'
p114493
Nsa(dp114494
S'description'
p114495
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114496
sS'cpp_type'
p114497
S'std::vector<OutputName, std::allocator<OutputName> >'
p114498
sS'default'
p114499
g3
sS'name'
p114500
S'outputs'
p114501
sS'required'
p114502
I00
sS'group_name'
p114503
S'Advanced'
p114504
sa(dp114505
S'description'
p114506
S'The seed for the master random number generator\n'
p114507
sS'cpp_type'
p114508
S'unsigned int'
p114509
sS'default'
p114510
S'0'
p114511
sS'name'
p114512
S'seed'
p114513
sS'required'
p114514
I00
sS'group_name'
p114515
S'Advanced'
p114516
sa(dp114517
S'description'
p114518
g3
sS'cpp_type'
p114519
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114520
sS'default'
p114521
S'GrainBoundaryArea'
p114522
sS'name'
p114523
S'type'
p114524
sS'required'
p114525
I00
sS'group_name'
p114526
Nsa(dp114527
S'description'
p114528
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114529
sS'cpp_type'
p114530
S'bool'
p114531
sS'default'
p114532
S'0'
p114533
sS'name'
p114534
S'use_displaced_mesh'
p114535
sS'required'
p114536
I00
sS'group_name'
p114537
S'Advanced'
p114538
sa(dp114539
S'description'
p114540
S'Array of coupled variables\n'
p114541
sS'cpp_type'
p114542
S'std::vector<VariableName>'
p114543
sS'default'
p114544
g3
sS'name'
p114545
S'v'
p114546
sS'required'
p114547
I01
sS'group_name'
p114548
Nsa(dp114549
S'description'
p114550
S'Array of coupled variables (base_name)\n'
p114551
sS'cpp_type'
p114552
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114553
sS'default'
p114554
g3
sS'name'
p114555
S'var_name_base'
p114556
sS'required'
p114557
I00
sS'group_name'
p114558
NsasS'name'
p114559
S'/UserObjects/GrainBoundaryArea'
p114560
sa(dp114561
S'description'
p114562
S'Userobject for summing forces and torques acting on a grain\n'
p114563
sS'subblocks'
p114564
NsS'parameters'
p114565
(lp114566
(dp114567
S'description'
p114568
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114569
sS'cpp_type'
p114570
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114571
sS'default'
p114572
g3
sS'name'
p114573
S'control_tags'
p114574
sS'required'
p114575
I00
sS'group_name'
p114576
S'Advanced'
p114577
sa(dp114578
S'description'
p114579
S'Set the enabled status of the MooseObject.\n'
p114580
sS'cpp_type'
p114581
S'bool'
p114582
sS'default'
p114583
S'1'
p114584
sS'name'
p114585
S'enable'
p114586
sS'required'
p114587
I00
sS'group_name'
p114588
S'Advanced'
p114589
sa(dp114590
S'name'
p114591
S'execute_on'
p114592
sS'cpp_type'
p114593
S'MultiMooseEnum'
p114594
sS'default'
p114595
S'TIMESTEP_END'
p114596
sS'description'
p114597
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114598
sS'required'
p114599
I00
sS'options'
p114600
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114601
sS'group_name'
p114602
Nsa(dp114603
S'description'
p114604
S'List of names of user objects that provides forces and torques applied to grains\n'
p114605
sS'cpp_type'
p114606
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p114607
sS'default'
p114608
g3
sS'name'
p114609
S'grain_forces'
p114610
sS'required'
p114611
I00
sS'group_name'
p114612
Nsa(dp114613
S'description'
p114614
S'Number of grains\n'
p114615
sS'cpp_type'
p114616
S'unsigned int'
p114617
sS'default'
p114618
g3
sS'name'
p114619
S'grain_num'
p114620
sS'required'
p114621
I00
sS'group_name'
p114622
Nsa(dp114623
S'description'
p114624
g3
sS'cpp_type'
p114625
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114626
sS'default'
p114627
S'GrainForceAndTorqueSum'
p114628
sS'name'
p114629
S'type'
p114630
sS'required'
p114631
I00
sS'group_name'
p114632
Nsa(dp114633
S'description'
p114634
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114635
sS'cpp_type'
p114636
S'bool'
p114637
sS'default'
p114638
S'0'
p114639
sS'name'
p114640
S'use_displaced_mesh'
p114641
sS'required'
p114642
I00
sS'group_name'
p114643
S'Advanced'
p114644
sasS'name'
p114645
S'/UserObjects/GrainForceAndTorqueSum'
p114646
sa(dp114647
S'description'
p114648
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p114649
sS'subblocks'
p114650
NsS'parameters'
p114651
(lp114652
(dp114653
S'description'
p114654
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p114655
sS'cpp_type'
p114656
S'bool'
p114657
sS'default'
p114658
S'0'
p114659
sS'name'
p114660
S'compute_halo_maps'
p114661
sS'required'
p114662
I00
sS'group_name'
p114663
Nsa(dp114664
S'description'
p114665
S'Instruct the Postprocessor to compute the active vars to features map\n'
p114666
sS'cpp_type'
p114667
S'bool'
p114668
sS'default'
p114669
S'0'
p114670
sS'name'
p114671
S'compute_var_to_feature_map'
p114672
sS'required'
p114673
I00
sS'group_name'
p114674
Nsa(dp114675
S'description'
p114676
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p114677
sS'cpp_type'
p114678
S'bool'
p114679
sS'default'
p114680
S'1'
p114681
sS'name'
p114682
S'condense_map_info'
p114683
sS'required'
p114684
I00
sS'group_name'
p114685
S'Advanced'
p114686
sa(dp114687
S'description'
p114688
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p114689
sS'cpp_type'
p114690
S'double'
p114691
sS'default'
p114692
S'0.09'
p114693
sS'name'
p114694
S'connecting_threshold'
p114695
sS'required'
p114696
I00
sS'group_name'
p114697
Nsa(dp114698
S'description'
p114699
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114700
sS'cpp_type'
p114701
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114702
sS'default'
p114703
g3
sS'name'
p114704
S'control_tags'
p114705
sS'required'
p114706
I00
sS'group_name'
p114707
S'Advanced'
p114708
sa(dp114709
S'description'
p114710
S'Optional: EBSD Reader for initial condition\n'
p114711
sS'cpp_type'
p114712
S'UserObjectName'
p114713
sS'default'
p114714
g3
sS'name'
p114715
S'ebsd_reader'
p114716
sS'required'
p114717
I00
sS'group_name'
p114718
Nsa(dp114719
S'description'
p114720
S'Set the enabled status of the MooseObject.\n'
p114721
sS'cpp_type'
p114722
S'bool'
p114723
sS'default'
p114724
S'1'
p114725
sS'name'
p114726
S'enable'
p114727
sS'required'
p114728
I00
sS'group_name'
p114729
S'Advanced'
p114730
sa(dp114731
S'description'
p114732
S'Instruct the Postprocessor to populate the variable index map.\n'
p114733
sS'cpp_type'
p114734
S'bool'
p114735
sS'default'
p114736
S'1'
p114737
sS'name'
p114738
S'enable_var_coloring'
p114739
sS'required'
p114740
I00
sS'group_name'
p114741
Nsa(dp114742
S'description'
p114743
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p114744
sS'cpp_type'
p114745
S'bool'
p114746
sS'default'
p114747
S'0'
p114748
sS'name'
p114749
S'error_on_grain_creation'
p114750
sS'required'
p114751
I00
sS'group_name'
p114752
Nsa(dp114753
S'name'
p114754
S'execute_on'
p114755
sS'cpp_type'
p114756
S'MultiMooseEnum'
p114757
sS'default'
p114758
S'INITIAL TIMESTEP_END'
p114759
sS'description'
p114760
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114761
sS'required'
p114762
I00
sS'options'
p114763
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114764
sS'group_name'
p114765
Nsa(dp114766
S'name'
p114767
S'flood_entity_type'
p114768
sS'cpp_type'
p114769
S'MooseEnum'
p114770
sS'default'
p114771
S'ELEMENTAL'
p114772
sS'description'
p114773
S'Determines whether the flood algorithm runs on nodes or elements\n'
p114774
sS'required'
p114775
I00
sS'options'
p114776
S'NODAL ELEMENTAL'
p114777
sS'group_name'
p114778
Nsa(dp114779
S'description'
p114780
S'The thickness of the halo surrounding each feature.\n'
p114781
sS'cpp_type'
p114782
S'unsigned int'
p114783
sS'default'
p114784
S'2'
p114785
sS'name'
p114786
S'halo_level'
p114787
sS'required'
p114788
I00
sS'group_name'
p114789
Nsa(dp114790
S'description'
p114791
S'Array of coupled variables (num_name)\n'
p114792
sS'cpp_type'
p114793
S'unsigned int'
p114794
sS'default'
p114795
g3
sS'name'
p114796
S'op_num'
p114797
sS'required'
p114798
I00
sS'group_name'
p114799
Nsa(dp114800
S'description'
p114801
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114802
sS'cpp_type'
p114803
S'std::vector<OutputName, std::allocator<OutputName> >'
p114804
sS'default'
p114805
g3
sS'name'
p114806
S'outputs'
p114807
sS'required'
p114808
I00
sS'group_name'
p114809
S'Advanced'
p114810
sa(dp114811
S'description'
p114812
S'EBSD phase number from which to retrieve information\n'
p114813
sS'cpp_type'
p114814
S'unsigned int'
p114815
sS'default'
p114816
g3
sS'name'
p114817
S'phase'
p114818
sS'required'
p114819
I00
sS'group_name'
p114820
Nsa(dp114821
S'description'
p114822
S'Indicates whether remapping should be done or not (default: true)\n'
p114823
sS'cpp_type'
p114824
S'bool'
p114825
sS'default'
p114826
S'1'
p114827
sS'name'
p114828
S'remap_grains'
p114829
sS'required'
p114830
I00
sS'group_name'
p114831
Nsa(dp114832
S'description'
p114833
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p114834
sS'cpp_type'
p114835
S'unsigned short'
p114836
sS'default'
p114837
S'0'
p114838
sS'name'
p114839
S'reserve_op'
p114840
sS'required'
p114841
I00
sS'group_name'
p114842
Nsa(dp114843
S'description'
p114844
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p114845
sS'cpp_type'
p114846
S'double'
p114847
sS'default'
p114848
S'0.95'
p114849
sS'name'
p114850
S'reserve_op_threshold'
p114851
sS'required'
p114852
I00
sS'group_name'
p114853
Nsa(dp114854
S'description'
p114855
S'The threshold value for which a new feature may be started\n'
p114856
sS'cpp_type'
p114857
S'double'
p114858
sS'default'
p114859
S'0.1'
p114860
sS'name'
p114861
S'threshold'
p114862
sS'required'
p114863
I00
sS'group_name'
p114864
Nsa(dp114865
S'description'
p114866
S'The timestep for when we should start tracking grains\n'
p114867
sS'cpp_type'
p114868
S'int'
p114869
sS'default'
p114870
S'0'
p114871
sS'name'
p114872
S'tracking_step'
p114873
sS'required'
p114874
I00
sS'group_name'
p114875
Nsa(dp114876
S'description'
p114877
g3
sS'cpp_type'
p114878
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114879
sS'default'
p114880
S'GrainTracker'
p114881
sS'name'
p114882
S'type'
p114883
sS'required'
p114884
I00
sS'group_name'
p114885
Nsa(dp114886
S'description'
p114887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114888
sS'cpp_type'
p114889
S'bool'
p114890
sS'default'
p114891
S'0'
p114892
sS'name'
p114893
S'use_displaced_mesh'
p114894
sS'required'
p114895
I00
sS'group_name'
p114896
S'Advanced'
p114897
sa(dp114898
S'description'
p114899
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p114900
sS'cpp_type'
p114901
S'bool'
p114902
sS'default'
p114903
S'1'
p114904
sS'name'
p114905
S'use_global_numbering'
p114906
sS'required'
p114907
I00
sS'group_name'
p114908
S'Advanced'
p114909
sa(dp114910
S'description'
p114911
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p114912
sS'cpp_type'
p114913
S'bool'
p114914
sS'default'
p114915
S'1'
p114916
sS'name'
p114917
S'use_less_than_threshold_comparison'
p114918
sS'required'
p114919
I00
sS'group_name'
p114920
Nsa(dp114921
S'description'
p114922
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p114923
sS'cpp_type'
p114924
S'bool'
p114925
sS'default'
p114926
S'0'
p114927
sS'name'
p114928
S'use_single_map'
p114929
sS'required'
p114930
I00
sS'group_name'
p114931
S'Advanced'
p114932
sa(dp114933
S'description'
p114934
S'Array of coupled variables (base_name)\n'
p114935
sS'cpp_type'
p114936
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114937
sS'default'
p114938
g3
sS'name'
p114939
S'var_name_base'
p114940
sS'required'
p114941
I00
sS'group_name'
p114942
Nsa(dp114943
S'description'
p114944
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p114945
sS'cpp_type'
p114946
S'std::vector<VariableName>'
p114947
sS'default'
p114948
g3
sS'name'
p114949
S'variable'
p114950
sS'required'
p114951
I01
sS'group_name'
p114952
NsasS'name'
p114953
S'/UserObjects/GrainTracker'
p114954
sa(dp114955
S'description'
p114956
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p114957
sS'subblocks'
p114958
NsS'parameters'
p114959
(lp114960
(dp114961
S'description'
p114962
S'Unrotated stiffness tensor\n'
p114963
sS'cpp_type'
p114964
S'std::vector<double, std::allocator<double> >'
p114965
sS'default'
p114966
g3
sS'name'
p114967
S'C_ijkl'
p114968
sS'required'
p114969
I01
sS'group_name'
p114970
Nsa(dp114971
S'description'
p114972
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p114973
sS'cpp_type'
p114974
S'bool'
p114975
sS'default'
p114976
S'0'
p114977
sS'name'
p114978
S'compute_halo_maps'
p114979
sS'required'
p114980
I00
sS'group_name'
p114981
Nsa(dp114982
S'description'
p114983
S'Instruct the Postprocessor to compute the active vars to features map\n'
p114984
sS'cpp_type'
p114985
S'bool'
p114986
sS'default'
p114987
S'0'
p114988
sS'name'
p114989
S'compute_var_to_feature_map'
p114990
sS'required'
p114991
I00
sS'group_name'
p114992
Nsa(dp114993
S'description'
p114994
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p114995
sS'cpp_type'
p114996
S'bool'
p114997
sS'default'
p114998
S'1'
p114999
sS'name'
p115000
S'condense_map_info'
p115001
sS'required'
p115002
I00
sS'group_name'
p115003
S'Advanced'
p115004
sa(dp115005
S'description'
p115006
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p115007
sS'cpp_type'
p115008
S'double'
p115009
sS'default'
p115010
S'0.09'
p115011
sS'name'
p115012
S'connecting_threshold'
p115013
sS'required'
p115014
I00
sS'group_name'
p115015
Nsa(dp115016
S'description'
p115017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115018
sS'cpp_type'
p115019
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115020
sS'default'
p115021
g3
sS'name'
p115022
S'control_tags'
p115023
sS'required'
p115024
I00
sS'group_name'
p115025
S'Advanced'
p115026
sa(dp115027
S'description'
p115028
S'Optional: EBSD Reader for initial condition\n'
p115029
sS'cpp_type'
p115030
S'UserObjectName'
p115031
sS'default'
p115032
g3
sS'name'
p115033
S'ebsd_reader'
p115034
sS'required'
p115035
I00
sS'group_name'
p115036
Nsa(dp115037
S'description'
p115038
S'Set the enabled status of the MooseObject.\n'
p115039
sS'cpp_type'
p115040
S'bool'
p115041
sS'default'
p115042
S'1'
p115043
sS'name'
p115044
S'enable'
p115045
sS'required'
p115046
I00
sS'group_name'
p115047
S'Advanced'
p115048
sa(dp115049
S'description'
p115050
S'Instruct the Postprocessor to populate the variable index map.\n'
p115051
sS'cpp_type'
p115052
S'bool'
p115053
sS'default'
p115054
S'1'
p115055
sS'name'
p115056
S'enable_var_coloring'
p115057
sS'required'
p115058
I00
sS'group_name'
p115059
Nsa(dp115060
S'description'
p115061
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p115062
sS'cpp_type'
p115063
S'bool'
p115064
sS'default'
p115065
S'0'
p115066
sS'name'
p115067
S'error_on_grain_creation'
p115068
sS'required'
p115069
I00
sS'group_name'
p115070
Nsa(dp115071
S'description'
p115072
S'Name of Euler angle provider user object\n'
p115073
sS'cpp_type'
p115074
S'UserObjectName'
p115075
sS'default'
p115076
g3
sS'name'
p115077
S'euler_angle_provider'
p115078
sS'required'
p115079
I01
sS'group_name'
p115080
Nsa(dp115081
S'name'
p115082
S'execute_on'
p115083
sS'cpp_type'
p115084
S'MultiMooseEnum'
p115085
sS'default'
p115086
S'INITIAL TIMESTEP_END'
p115087
sS'description'
p115088
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115089
sS'required'
p115090
I00
sS'options'
p115091
S'none initial linear nonlinear timestep_end timestep_begin custom'
p115092
sS'group_name'
p115093
Nsa(dp115094
S'name'
p115095
S'fill_method'
p115096
sS'cpp_type'
p115097
S'MooseEnum'
p115098
sS'default'
p115099
S'symmetric9'
p115100
sS'description'
p115101
S'The fill method\n'
p115102
sS'required'
p115103
I00
sS'options'
p115104
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p115105
sS'group_name'
p115106
Nsa(dp115107
S'name'
p115108
S'flood_entity_type'
p115109
sS'cpp_type'
p115110
S'MooseEnum'
p115111
sS'default'
p115112
S'ELEMENTAL'
p115113
sS'description'
p115114
S'Determines whether the flood algorithm runs on nodes or elements\n'
p115115
sS'required'
p115116
I00
sS'options'
p115117
S'NODAL ELEMENTAL'
p115118
sS'group_name'
p115119
Nsa(dp115120
S'description'
p115121
S'The thickness of the halo surrounding each feature.\n'
p115122
sS'cpp_type'
p115123
S'unsigned int'
p115124
sS'default'
p115125
S'2'
p115126
sS'name'
p115127
S'halo_level'
p115128
sS'required'
p115129
I00
sS'group_name'
p115130
Nsa(dp115131
S'description'
p115132
S'Array of coupled variables (num_name)\n'
p115133
sS'cpp_type'
p115134
S'unsigned int'
p115135
sS'default'
p115136
g3
sS'name'
p115137
S'op_num'
p115138
sS'required'
p115139
I00
sS'group_name'
p115140
Nsa(dp115141
S'description'
p115142
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115143
sS'cpp_type'
p115144
S'std::vector<OutputName, std::allocator<OutputName> >'
p115145
sS'default'
p115146
g3
sS'name'
p115147
S'outputs'
p115148
sS'required'
p115149
I00
sS'group_name'
p115150
S'Advanced'
p115151
sa(dp115152
S'description'
p115153
S'EBSD phase number from which to retrieve information\n'
p115154
sS'cpp_type'
p115155
S'unsigned int'
p115156
sS'default'
p115157
g3
sS'name'
p115158
S'phase'
p115159
sS'required'
p115160
I00
sS'group_name'
p115161
Nsa(dp115162
S'description'
p115163
S'Generate random rotations when the Euler Angle provider runs out of data (otherwise error out)\n'
p115164
sS'cpp_type'
p115165
S'bool'
p115166
sS'default'
p115167
S'1'
p115168
sS'name'
p115169
S'random_rotations'
p115170
sS'required'
p115171
I00
sS'group_name'
p115172
Nsa(dp115173
S'description'
p115174
S'Indicates whether remapping should be done or not (default: true)\n'
p115175
sS'cpp_type'
p115176
S'bool'
p115177
sS'default'
p115178
S'1'
p115179
sS'name'
p115180
S'remap_grains'
p115181
sS'required'
p115182
I00
sS'group_name'
p115183
Nsa(dp115184
S'description'
p115185
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p115186
sS'cpp_type'
p115187
S'unsigned short'
p115188
sS'default'
p115189
S'0'
p115190
sS'name'
p115191
S'reserve_op'
p115192
sS'required'
p115193
I00
sS'group_name'
p115194
Nsa(dp115195
S'description'
p115196
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p115197
sS'cpp_type'
p115198
S'double'
p115199
sS'default'
p115200
S'0.95'
p115201
sS'name'
p115202
S'reserve_op_threshold'
p115203
sS'required'
p115204
I00
sS'group_name'
p115205
Nsa(dp115206
S'description'
p115207
S'The threshold value for which a new feature may be started\n'
p115208
sS'cpp_type'
p115209
S'double'
p115210
sS'default'
p115211
S'0.1'
p115212
sS'name'
p115213
S'threshold'
p115214
sS'required'
p115215
I00
sS'group_name'
p115216
Nsa(dp115217
S'description'
p115218
S'The timestep for when we should start tracking grains\n'
p115219
sS'cpp_type'
p115220
S'int'
p115221
sS'default'
p115222
S'0'
p115223
sS'name'
p115224
S'tracking_step'
p115225
sS'required'
p115226
I00
sS'group_name'
p115227
Nsa(dp115228
S'description'
p115229
g3
sS'cpp_type'
p115230
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115231
sS'default'
p115232
S'GrainTrackerElasticity'
p115233
sS'name'
p115234
S'type'
p115235
sS'required'
p115236
I00
sS'group_name'
p115237
Nsa(dp115238
S'description'
p115239
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115240
sS'cpp_type'
p115241
S'bool'
p115242
sS'default'
p115243
S'0'
p115244
sS'name'
p115245
S'use_displaced_mesh'
p115246
sS'required'
p115247
I00
sS'group_name'
p115248
S'Advanced'
p115249
sa(dp115250
S'description'
p115251
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p115252
sS'cpp_type'
p115253
S'bool'
p115254
sS'default'
p115255
S'1'
p115256
sS'name'
p115257
S'use_global_numbering'
p115258
sS'required'
p115259
I00
sS'group_name'
p115260
S'Advanced'
p115261
sa(dp115262
S'description'
p115263
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p115264
sS'cpp_type'
p115265
S'bool'
p115266
sS'default'
p115267
S'1'
p115268
sS'name'
p115269
S'use_less_than_threshold_comparison'
p115270
sS'required'
p115271
I00
sS'group_name'
p115272
Nsa(dp115273
S'description'
p115274
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p115275
sS'cpp_type'
p115276
S'bool'
p115277
sS'default'
p115278
S'0'
p115279
sS'name'
p115280
S'use_single_map'
p115281
sS'required'
p115282
I00
sS'group_name'
p115283
S'Advanced'
p115284
sa(dp115285
S'description'
p115286
S'Array of coupled variables (base_name)\n'
p115287
sS'cpp_type'
p115288
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115289
sS'default'
p115290
g3
sS'name'
p115291
S'var_name_base'
p115292
sS'required'
p115293
I00
sS'group_name'
p115294
Nsa(dp115295
S'description'
p115296
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p115297
sS'cpp_type'
p115298
S'std::vector<VariableName>'
p115299
sS'default'
p115300
g3
sS'name'
p115301
S'variable'
p115302
sS'required'
p115303
I01
sS'group_name'
p115304
NsasS'name'
p115305
S'/UserObjects/GrainTrackerElasticity'
p115306
sa(dp115307
S'description'
p115308
S'User Object to integrate equivalent plastic strain\n'
p115309
sS'subblocks'
p115310
NsS'parameters'
p115311
(lp115312
(dp115313
S'description'
p115314
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115315
sS'cpp_type'
p115316
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115317
sS'default'
p115318
g3
sS'name'
p115319
S'block'
p115320
sS'required'
p115321
I00
sS'group_name'
p115322
Nsa(dp115323
S'description'
p115324
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115325
sS'cpp_type'
p115326
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115327
sS'default'
p115328
g3
sS'name'
p115329
S'control_tags'
p115330
sS'required'
p115331
I00
sS'group_name'
p115332
S'Advanced'
p115333
sa(dp115334
S'description'
p115335
S'Set the enabled status of the MooseObject.\n'
p115336
sS'cpp_type'
p115337
S'bool'
p115338
sS'default'
p115339
S'1'
p115340
sS'name'
p115341
S'enable'
p115342
sS'required'
p115343
I00
sS'group_name'
p115344
S'Advanced'
p115345
sa(dp115346
S'description'
p115347
S'Name of internal variable property: Same as internal variable rate user object\n'
p115348
sS'cpp_type'
p115349
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115350
sS'default'
p115351
g3
sS'name'
p115352
S'intvar_rate_prop_name'
p115353
sS'required'
p115354
I00
sS'group_name'
p115355
Nsa(dp115356
S'description'
p115357
S'The seed for the master random number generator\n'
p115358
sS'cpp_type'
p115359
S'unsigned int'
p115360
sS'default'
p115361
S'0'
p115362
sS'name'
p115363
S'seed'
p115364
sS'required'
p115365
I00
sS'group_name'
p115366
S'Advanced'
p115367
sa(dp115368
S'description'
p115369
g3
sS'cpp_type'
p115370
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115371
sS'default'
p115372
S'HEVPEqvPlasticStrain'
p115373
sS'name'
p115374
S'type'
p115375
sS'required'
p115376
I00
sS'group_name'
p115377
Nsa(dp115378
S'description'
p115379
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115380
sS'cpp_type'
p115381
S'bool'
p115382
sS'default'
p115383
S'0'
p115384
sS'name'
p115385
S'use_displaced_mesh'
p115386
sS'required'
p115387
I00
sS'group_name'
p115388
S'Advanced'
p115389
sasS'name'
p115390
S'/UserObjects/HEVPEqvPlasticStrain'
p115391
sa(dp115392
S'description'
p115393
S'User Object computing equivalent plastic strain rate\n'
p115394
sS'subblocks'
p115395
NsS'parameters'
p115396
(lp115397
(dp115398
S'description'
p115399
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115400
sS'cpp_type'
p115401
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115402
sS'default'
p115403
g3
sS'name'
p115404
S'block'
p115405
sS'required'
p115406
I00
sS'group_name'
p115407
Nsa(dp115408
S'description'
p115409
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115410
sS'cpp_type'
p115411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115412
sS'default'
p115413
g3
sS'name'
p115414
S'control_tags'
p115415
sS'required'
p115416
I00
sS'group_name'
p115417
S'Advanced'
p115418
sa(dp115419
S'description'
p115420
S'Set the enabled status of the MooseObject.\n'
p115421
sS'cpp_type'
p115422
S'bool'
p115423
sS'default'
p115424
S'1'
p115425
sS'name'
p115426
S'enable'
p115427
sS'required'
p115428
I00
sS'group_name'
p115429
S'Advanced'
p115430
sa(dp115431
S'description'
p115432
S'Name of flow rate property: Same as the flow rate user object name specified in input file\n'
p115433
sS'cpp_type'
p115434
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115435
sS'default'
p115436
g3
sS'name'
p115437
S'flow_rate_prop_name'
p115438
sS'required'
p115439
I00
sS'group_name'
p115440
Nsa(dp115441
S'description'
p115442
S'Scaling parameter\n'
p115443
sS'cpp_type'
p115444
S'double'
p115445
sS'default'
p115446
S'1'
p115447
sS'name'
p115448
S'h_scaling'
p115449
sS'required'
p115450
I00
sS'group_name'
p115451
Nsa(dp115452
S'description'
p115453
S'The seed for the master random number generator\n'
p115454
sS'cpp_type'
p115455
S'unsigned int'
p115456
sS'default'
p115457
S'0'
p115458
sS'name'
p115459
S'seed'
p115460
sS'required'
p115461
I00
sS'group_name'
p115462
S'Advanced'
p115463
sa(dp115464
S'description'
p115465
g3
sS'cpp_type'
p115466
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115467
sS'default'
p115468
S'HEVPEqvPlasticStrainRate'
p115469
sS'name'
p115470
S'type'
p115471
sS'required'
p115472
I00
sS'group_name'
p115473
Nsa(dp115474
S'description'
p115475
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115476
sS'cpp_type'
p115477
S'bool'
p115478
sS'default'
p115479
S'0'
p115480
sS'name'
p115481
S'use_displaced_mesh'
p115482
sS'required'
p115483
I00
sS'group_name'
p115484
S'Advanced'
p115485
sasS'name'
p115486
S'/UserObjects/HEVPEqvPlasticStrainRate'
p115487
sa(dp115488
S'description'
p115489
S'User object to evaluate power law flow rate and flow direction based on J2\n'
p115490
sS'subblocks'
p115491
NsS'parameters'
p115492
(lp115493
(dp115494
S'description'
p115495
S'Base name of tensor properties to fetch\n'
p115496
sS'cpp_type'
p115497
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115498
sS'default'
p115499
g3
sS'name'
p115500
S'base_name'
p115501
sS'required'
p115502
I00
sS'group_name'
p115503
Nsa(dp115504
S'description'
p115505
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115506
sS'cpp_type'
p115507
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115508
sS'default'
p115509
g3
sS'name'
p115510
S'block'
p115511
sS'required'
p115512
I00
sS'group_name'
p115513
Nsa(dp115514
S'description'
p115515
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115516
sS'cpp_type'
p115517
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115518
sS'default'
p115519
g3
sS'name'
p115520
S'control_tags'
p115521
sS'required'
p115522
I00
sS'group_name'
p115523
S'Advanced'
p115524
sa(dp115525
S'description'
p115526
S'Set the enabled status of the MooseObject.\n'
p115527
sS'cpp_type'
p115528
S'bool'
p115529
sS'default'
p115530
S'1'
p115531
sS'name'
p115532
S'enable'
p115533
sS'required'
p115534
I00
sS'group_name'
p115535
S'Advanced'
p115536
sa(dp115537
S'description'
p115538
S'Power law exponent in flow rate equation\n'
p115539
sS'cpp_type'
p115540
S'double'
p115541
sS'default'
p115542
S'10'
p115543
sS'name'
p115544
S'flow_rate_exponent'
p115545
sS'required'
p115546
I00
sS'group_name'
p115547
Nsa(dp115548
S'description'
p115549
S'Tolerance for flow rate\n'
p115550
sS'cpp_type'
p115551
S'double'
p115552
sS'default'
p115553
S'1000'
p115554
sS'name'
p115555
S'flow_rate_tol'
p115556
sS'required'
p115557
I00
sS'group_name'
p115558
Nsa(dp115559
S'description'
p115560
S'Reference flow rate for rate dependent flow\n'
p115561
sS'cpp_type'
p115562
S'double'
p115563
sS'default'
p115564
S'0.001'
p115565
sS'name'
p115566
S'reference_flow_rate'
p115567
sS'required'
p115568
I00
sS'group_name'
p115569
Nsa(dp115570
S'description'
p115571
S'The seed for the master random number generator\n'
p115572
sS'cpp_type'
p115573
S'unsigned int'
p115574
sS'default'
p115575
S'0'
p115576
sS'name'
p115577
S'seed'
p115578
sS'required'
p115579
I00
sS'group_name'
p115580
S'Advanced'
p115581
sa(dp115582
S'description'
p115583
S'Name of strength property: Same as strength user object specified in input file\n'
p115584
sS'cpp_type'
p115585
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115586
sS'default'
p115587
g3
sS'name'
p115588
S'strength_prop_name'
p115589
sS'required'
p115590
I00
sS'group_name'
p115591
Nsa(dp115592
S'description'
p115593
g3
sS'cpp_type'
p115594
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115595
sS'default'
p115596
S'HEVPFlowRatePowerLawJ2'
p115597
sS'name'
p115598
S'type'
p115599
sS'required'
p115600
I00
sS'group_name'
p115601
Nsa(dp115602
S'description'
p115603
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115604
sS'cpp_type'
p115605
S'bool'
p115606
sS'default'
p115607
S'0'
p115608
sS'name'
p115609
S'use_displaced_mesh'
p115610
sS'required'
p115611
I00
sS'group_name'
p115612
S'Advanced'
p115613
sasS'name'
p115614
S'/UserObjects/HEVPFlowRatePowerLawJ2'
p115615
sa(dp115616
S'description'
p115617
S'User Object for linear hardening\n'
p115618
sS'subblocks'
p115619
NsS'parameters'
p115620
(lp115621
(dp115622
S'description'
p115623
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115624
sS'cpp_type'
p115625
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115626
sS'default'
p115627
g3
sS'name'
p115628
S'block'
p115629
sS'required'
p115630
I00
sS'group_name'
p115631
Nsa(dp115632
S'description'
p115633
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115634
sS'cpp_type'
p115635
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115636
sS'default'
p115637
g3
sS'name'
p115638
S'control_tags'
p115639
sS'required'
p115640
I00
sS'group_name'
p115641
S'Advanced'
p115642
sa(dp115643
S'description'
p115644
S'Set the enabled status of the MooseObject.\n'
p115645
sS'cpp_type'
p115646
S'bool'
p115647
sS'default'
p115648
S'1'
p115649
sS'name'
p115650
S'enable'
p115651
sS'required'
p115652
I00
sS'group_name'
p115653
S'Advanced'
p115654
sa(dp115655
S'description'
p115656
S'Name of internal variable property to calculate material resistance: Same as internal variable user object\n'
p115657
sS'cpp_type'
p115658
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115659
sS'default'
p115660
g3
sS'name'
p115661
S'intvar_prop_name'
p115662
sS'required'
p115663
I00
sS'group_name'
p115664
Nsa(dp115665
S'description'
p115666
S'The seed for the master random number generator\n'
p115667
sS'cpp_type'
p115668
S'unsigned int'
p115669
sS'default'
p115670
S'0'
p115671
sS'name'
p115672
S'seed'
p115673
sS'required'
p115674
I00
sS'group_name'
p115675
S'Advanced'
p115676
sa(dp115677
S'description'
p115678
S'Linear hardening slope\n'
p115679
sS'cpp_type'
p115680
S'double'
p115681
sS'default'
p115682
g3
sS'name'
p115683
S'slope'
p115684
sS'required'
p115685
I00
sS'group_name'
p115686
Nsa(dp115687
S'description'
p115688
g3
sS'cpp_type'
p115689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115690
sS'default'
p115691
S'HEVPLinearHardening'
p115692
sS'name'
p115693
S'type'
p115694
sS'required'
p115695
I00
sS'group_name'
p115696
Nsa(dp115697
S'description'
p115698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115699
sS'cpp_type'
p115700
S'bool'
p115701
sS'default'
p115702
S'0'
p115703
sS'name'
p115704
S'use_displaced_mesh'
p115705
sS'required'
p115706
I00
sS'group_name'
p115707
S'Advanced'
p115708
sa(dp115709
S'description'
p115710
S'Yield strength\n'
p115711
sS'cpp_type'
p115712
S'double'
p115713
sS'default'
p115714
g3
sS'name'
p115715
S'yield_stress'
p115716
sS'required'
p115717
I00
sS'group_name'
p115718
NsasS'name'
p115719
S'/UserObjects/HEVPLinearHardening'
p115720
sa(dp115721
S'description'
p115722
S'User object for Ramberg-Osgood hardening power law hardening\n'
p115723
sS'subblocks'
p115724
NsS'parameters'
p115725
(lp115726
(dp115727
S'description'
p115728
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115729
sS'cpp_type'
p115730
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115731
sS'default'
p115732
g3
sS'name'
p115733
S'block'
p115734
sS'required'
p115735
I00
sS'group_name'
p115736
Nsa(dp115737
S'description'
p115738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115739
sS'cpp_type'
p115740
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115741
sS'default'
p115742
g3
sS'name'
p115743
S'control_tags'
p115744
sS'required'
p115745
I00
sS'group_name'
p115746
S'Advanced'
p115747
sa(dp115748
S'description'
p115749
S'Set the enabled status of the MooseObject.\n'
p115750
sS'cpp_type'
p115751
S'bool'
p115752
sS'default'
p115753
S'1'
p115754
sS'name'
p115755
S'enable'
p115756
sS'required'
p115757
I00
sS'group_name'
p115758
S'Advanced'
p115759
sa(dp115760
S'description'
p115761
S'The hardening exponent value\n'
p115762
sS'cpp_type'
p115763
S'double'
p115764
sS'default'
p115765
g3
sS'name'
p115766
S'hardening_exponent'
p115767
sS'required'
p115768
I01
sS'group_name'
p115769
Nsa(dp115770
S'description'
p115771
S'Name of internal variable property to calculate material resistance: Same as internal variable user object\n'
p115772
sS'cpp_type'
p115773
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115774
sS'default'
p115775
g3
sS'name'
p115776
S'intvar_prop_name'
p115777
sS'required'
p115778
I00
sS'group_name'
p115779
Nsa(dp115780
S'description'
p115781
S'Reference plastic strain value\n'
p115782
sS'cpp_type'
p115783
S'double'
p115784
sS'default'
p115785
g3
sS'name'
p115786
S'reference_plastic_strain'
p115787
sS'required'
p115788
I01
sS'group_name'
p115789
Nsa(dp115790
S'description'
p115791
S'The seed for the master random number generator\n'
p115792
sS'cpp_type'
p115793
S'unsigned int'
p115794
sS'default'
p115795
S'0'
p115796
sS'name'
p115797
S'seed'
p115798
sS'required'
p115799
I00
sS'group_name'
p115800
S'Advanced'
p115801
sa(dp115802
S'description'
p115803
g3
sS'cpp_type'
p115804
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115805
sS'default'
p115806
S'HEVPRambergOsgoodHardening'
p115807
sS'name'
p115808
S'type'
p115809
sS'required'
p115810
I00
sS'group_name'
p115811
Nsa(dp115812
S'description'
p115813
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115814
sS'cpp_type'
p115815
S'bool'
p115816
sS'default'
p115817
S'0'
p115818
sS'name'
p115819
S'use_displaced_mesh'
p115820
sS'required'
p115821
I00
sS'group_name'
p115822
S'Advanced'
p115823
sa(dp115824
S'description'
p115825
S'Yield strength\n'
p115826
sS'cpp_type'
p115827
S'double'
p115828
sS'default'
p115829
g3
sS'name'
p115830
S'yield_stress'
p115831
sS'required'
p115832
I00
sS'group_name'
p115833
NsasS'name'
p115834
S'/UserObjects/HEVPRambergOsgoodHardening'
p115835
sa(dp115836
S'description'
p115837
g3
sS'subblocks'
p115838
NsS'parameters'
p115839
(lp115840
(dp115841
S'description'
p115842
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115843
sS'cpp_type'
p115844
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115845
sS'default'
p115846
g3
sS'name'
p115847
S'block'
p115848
sS'required'
p115849
I00
sS'group_name'
p115850
Nsa(dp115851
S'description'
p115852
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p115853
sS'cpp_type'
p115854
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p115855
sS'default'
p115856
g3
sS'name'
p115857
S'boundary'
p115858
sS'required'
p115859
I00
sS'group_name'
p115860
Nsa(dp115861
S'description'
p115862
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115863
sS'cpp_type'
p115864
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115865
sS'default'
p115866
g3
sS'name'
p115867
S'control_tags'
p115868
sS'required'
p115869
I00
sS'group_name'
p115870
S'Advanced'
p115871
sa(dp115872
S'description'
p115873
S'Set the enabled status of the MooseObject.\n'
p115874
sS'cpp_type'
p115875
S'bool'
p115876
sS'default'
p115877
S'1'
p115878
sS'name'
p115879
S'enable'
p115880
sS'required'
p115881
I00
sS'group_name'
p115882
S'Advanced'
p115883
sa(dp115884
S'description'
p115885
S'Array containing the rest of the order parameters\n'
p115886
sS'cpp_type'
p115887
S'std::vector<VariableName>'
p115888
sS'default'
p115889
g3
sS'name'
p115890
S'eta'
p115891
sS'required'
p115892
I01
sS'group_name'
p115893
Nsa(dp115894
S'name'
p115895
S'execute_on'
p115896
sS'cpp_type'
p115897
S'MultiMooseEnum'
p115898
sS'default'
p115899
S'TIMESTEP_END'
p115900
sS'description'
p115901
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115902
sS'required'
p115903
I00
sS'options'
p115904
S'none initial linear nonlinear timestep_end timestep_begin custom'
p115905
sS'group_name'
p115906
Nsa(dp115907
S'description'
p115908
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115909
sS'cpp_type'
p115910
S'std::vector<OutputName, std::allocator<OutputName> >'
p115911
sS'default'
p115912
g3
sS'name'
p115913
S'outputs'
p115914
sS'required'
p115915
I00
sS'group_name'
p115916
S'Advanced'
p115917
sa(dp115918
S'description'
p115919
S'The seed for the master random number generator\n'
p115920
sS'cpp_type'
p115921
S'unsigned int'
p115922
sS'default'
p115923
S'0'
p115924
sS'name'
p115925
S'seed'
p115926
sS'required'
p115927
I00
sS'group_name'
p115928
S'Advanced'
p115929
sa(dp115930
S'description'
p115931
g3
sS'cpp_type'
p115932
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115933
sS'default'
p115934
S'IMCFraction'
p115935
sS'name'
p115936
S'type'
p115937
sS'required'
p115938
I00
sS'group_name'
p115939
Nsa(dp115940
S'description'
p115941
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p115942
sS'cpp_type'
p115943
S'bool'
p115944
sS'default'
p115945
S'1'
p115946
sS'name'
p115947
S'unique_node_execute'
p115948
sS'required'
p115949
I00
sS'group_name'
p115950
Nsa(dp115951
S'description'
p115952
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115953
sS'cpp_type'
p115954
S'bool'
p115955
sS'default'
p115956
S'0'
p115957
sS'name'
p115958
S'use_displaced_mesh'
p115959
sS'required'
p115960
I00
sS'group_name'
p115961
S'Advanced'
p115962
sa(dp115963
S'description'
p115964
S'The name of the variable that this postprocessor operates on\n'
p115965
sS'cpp_type'
p115966
S'std::vector<VariableName>'
p115967
sS'default'
p115968
g3
sS'name'
p115969
S'variable'
p115970
sS'required'
p115971
I01
sS'group_name'
p115972
NsasS'name'
p115973
S'/UserObjects/IMCFraction'
p115974
sa(dp115975
S'description'
p115976
g3
sS'subblocks'
p115977
NsS'parameters'
p115978
(lp115979
(dp115980
S'description'
p115981
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p115982
sS'cpp_type'
p115983
S'unsigned int'
p115984
sS'default'
p115985
S'1'
p115986
sS'name'
p115987
S'average_radius'
p115988
sS'required'
p115989
I00
sS'group_name'
p115990
Nsa(dp115991
S'description'
p115992
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115993
sS'cpp_type'
p115994
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115995
sS'default'
p115996
g3
sS'name'
p115997
S'block'
p115998
sS'required'
p115999
I00
sS'group_name'
p116000
Nsa(dp116001
S'description'
p116002
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116003
sS'cpp_type'
p116004
S'std::vector<double, std::allocator<double> >'
p116005
sS'default'
p116006
g3
sS'name'
p116007
S'bounds'
p116008
sS'required'
p116009
I00
sS'group_name'
p116010
Nsa(dp116011
S'description'
p116012
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116013
sS'cpp_type'
p116014
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116015
sS'default'
p116016
g3
sS'name'
p116017
S'control_tags'
p116018
sS'required'
p116019
I00
sS'group_name'
p116020
S'Advanced'
p116021
sa(dp116022
S'description'
p116023
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116024
sS'cpp_type'
p116025
S'bool'
p116026
sS'default'
p116027
S'0'
p116028
sS'name'
p116029
S'cumulative'
p116030
sS'required'
p116031
I00
sS'group_name'
p116032
Nsa(dp116033
S'name'
p116034
S'direction'
p116035
sS'cpp_type'
p116036
S'MooseEnum'
p116037
sS'default'
p116038
g3
sS'description'
p116039
S'The direction of the layers.\n'
p116040
sS'required'
p116041
I01
sS'options'
p116042
S'x y z'
p116043
sS'group_name'
p116044
Nsa(dp116045
S'description'
p116046
S'Set the enabled status of the MooseObject.\n'
p116047
sS'cpp_type'
p116048
S'bool'
p116049
sS'default'
p116050
S'1'
p116051
sS'name'
p116052
S'enable'
p116053
sS'required'
p116054
I00
sS'group_name'
p116055
S'Advanced'
p116056
sa(dp116057
S'name'
p116058
S'execute_on'
p116059
sS'cpp_type'
p116060
S'MultiMooseEnum'
p116061
sS'default'
p116062
S'TIMESTEP_END'
p116063
sS'description'
p116064
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116065
sS'required'
p116066
I00
sS'options'
p116067
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116068
sS'group_name'
p116069
Nsa(dp116070
S'description'
p116071
S'The number of layers.\n'
p116072
sS'cpp_type'
p116073
S'unsigned int'
p116074
sS'default'
p116075
g3
sS'name'
p116076
S'num_layers'
p116077
sS'required'
p116078
I00
sS'group_name'
p116079
Nsa(dp116080
S'name'
p116081
S'sample_type'
p116082
sS'cpp_type'
p116083
S'MooseEnum'
p116084
sS'default'
p116085
S'direct'
p116086
sS'description'
p116087
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116088
sS'required'
p116089
I00
sS'options'
p116090
S'direct interpolate average'
p116091
sS'group_name'
p116092
Nsa(dp116093
S'description'
p116094
S'The seed for the master random number generator\n'
p116095
sS'cpp_type'
p116096
S'unsigned int'
p116097
sS'default'
p116098
S'0'
p116099
sS'name'
p116100
S'seed'
p116101
sS'required'
p116102
I00
sS'group_name'
p116103
S'Advanced'
p116104
sa(dp116105
S'description'
p116106
g3
sS'cpp_type'
p116107
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116108
sS'default'
p116109
S'LayeredAverage'
p116110
sS'name'
p116111
S'type'
p116112
sS'required'
p116113
I00
sS'group_name'
p116114
Nsa(dp116115
S'description'
p116116
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116117
sS'cpp_type'
p116118
S'bool'
p116119
sS'default'
p116120
S'0'
p116121
sS'name'
p116122
S'use_displaced_mesh'
p116123
sS'required'
p116124
I00
sS'group_name'
p116125
S'Advanced'
p116126
sa(dp116127
S'description'
p116128
S'The name of the variable that this object operates on\n'
p116129
sS'cpp_type'
p116130
S'std::vector<VariableName>'
p116131
sS'default'
p116132
g3
sS'name'
p116133
S'variable'
p116134
sS'required'
p116135
I01
sS'group_name'
p116136
NsasS'name'
p116137
S'/UserObjects/LayeredAverage'
p116138
sa(dp116139
S'description'
p116140
g3
sS'subblocks'
p116141
NsS'parameters'
p116142
(lp116143
(dp116144
S'description'
p116145
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116146
sS'cpp_type'
p116147
S'unsigned int'
p116148
sS'default'
p116149
S'1'
p116150
sS'name'
p116151
S'average_radius'
p116152
sS'required'
p116153
I00
sS'group_name'
p116154
Nsa(dp116155
S'description'
p116156
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116157
sS'cpp_type'
p116158
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116159
sS'default'
p116160
g3
sS'name'
p116161
S'block'
p116162
sS'required'
p116163
I00
sS'group_name'
p116164
Nsa(dp116165
S'description'
p116166
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116167
sS'cpp_type'
p116168
S'std::vector<double, std::allocator<double> >'
p116169
sS'default'
p116170
g3
sS'name'
p116171
S'bounds'
p116172
sS'required'
p116173
I00
sS'group_name'
p116174
Nsa(dp116175
S'description'
p116176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116177
sS'cpp_type'
p116178
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116179
sS'default'
p116180
g3
sS'name'
p116181
S'control_tags'
p116182
sS'required'
p116183
I00
sS'group_name'
p116184
S'Advanced'
p116185
sa(dp116186
S'description'
p116187
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116188
sS'cpp_type'
p116189
S'bool'
p116190
sS'default'
p116191
S'0'
p116192
sS'name'
p116193
S'cumulative'
p116194
sS'required'
p116195
I00
sS'group_name'
p116196
Nsa(dp116197
S'name'
p116198
S'direction'
p116199
sS'cpp_type'
p116200
S'MooseEnum'
p116201
sS'default'
p116202
g3
sS'description'
p116203
S'The direction of the layers.\n'
p116204
sS'required'
p116205
I01
sS'options'
p116206
S'x y z'
p116207
sS'group_name'
p116208
Nsa(dp116209
S'description'
p116210
S'Set the enabled status of the MooseObject.\n'
p116211
sS'cpp_type'
p116212
S'bool'
p116213
sS'default'
p116214
S'1'
p116215
sS'name'
p116216
S'enable'
p116217
sS'required'
p116218
I00
sS'group_name'
p116219
S'Advanced'
p116220
sa(dp116221
S'name'
p116222
S'execute_on'
p116223
sS'cpp_type'
p116224
S'MultiMooseEnum'
p116225
sS'default'
p116226
S'TIMESTEP_END'
p116227
sS'description'
p116228
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116229
sS'required'
p116230
I00
sS'options'
p116231
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116232
sS'group_name'
p116233
Nsa(dp116234
S'description'
p116235
S'The number of layers.\n'
p116236
sS'cpp_type'
p116237
S'unsigned int'
p116238
sS'default'
p116239
g3
sS'name'
p116240
S'num_layers'
p116241
sS'required'
p116242
I00
sS'group_name'
p116243
Nsa(dp116244
S'name'
p116245
S'sample_type'
p116246
sS'cpp_type'
p116247
S'MooseEnum'
p116248
sS'default'
p116249
S'direct'
p116250
sS'description'
p116251
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116252
sS'required'
p116253
I00
sS'options'
p116254
S'direct interpolate average'
p116255
sS'group_name'
p116256
Nsa(dp116257
S'description'
p116258
S'The seed for the master random number generator\n'
p116259
sS'cpp_type'
p116260
S'unsigned int'
p116261
sS'default'
p116262
S'0'
p116263
sS'name'
p116264
S'seed'
p116265
sS'required'
p116266
I00
sS'group_name'
p116267
S'Advanced'
p116268
sa(dp116269
S'description'
p116270
g3
sS'cpp_type'
p116271
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116272
sS'default'
p116273
S'LayeredIntegral'
p116274
sS'name'
p116275
S'type'
p116276
sS'required'
p116277
I00
sS'group_name'
p116278
Nsa(dp116279
S'description'
p116280
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116281
sS'cpp_type'
p116282
S'bool'
p116283
sS'default'
p116284
S'0'
p116285
sS'name'
p116286
S'use_displaced_mesh'
p116287
sS'required'
p116288
I00
sS'group_name'
p116289
S'Advanced'
p116290
sa(dp116291
S'description'
p116292
S'The name of the variable that this object operates on\n'
p116293
sS'cpp_type'
p116294
S'std::vector<VariableName>'
p116295
sS'default'
p116296
g3
sS'name'
p116297
S'variable'
p116298
sS'required'
p116299
I01
sS'group_name'
p116300
NsasS'name'
p116301
S'/UserObjects/LayeredIntegral'
p116302
sa(dp116303
S'description'
p116304
g3
sS'subblocks'
p116305
NsS'parameters'
p116306
(lp116307
(dp116308
S'description'
p116309
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116310
sS'cpp_type'
p116311
S'unsigned int'
p116312
sS'default'
p116313
S'1'
p116314
sS'name'
p116315
S'average_radius'
p116316
sS'required'
p116317
I00
sS'group_name'
p116318
Nsa(dp116319
S'description'
p116320
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116321
sS'cpp_type'
p116322
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116323
sS'default'
p116324
g3
sS'name'
p116325
S'boundary'
p116326
sS'required'
p116327
I01
sS'group_name'
p116328
Nsa(dp116329
S'description'
p116330
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116331
sS'cpp_type'
p116332
S'std::vector<double, std::allocator<double> >'
p116333
sS'default'
p116334
g3
sS'name'
p116335
S'bounds'
p116336
sS'required'
p116337
I00
sS'group_name'
p116338
Nsa(dp116339
S'description'
p116340
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116341
sS'cpp_type'
p116342
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116343
sS'default'
p116344
g3
sS'name'
p116345
S'control_tags'
p116346
sS'required'
p116347
I00
sS'group_name'
p116348
S'Advanced'
p116349
sa(dp116350
S'description'
p116351
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116352
sS'cpp_type'
p116353
S'bool'
p116354
sS'default'
p116355
S'0'
p116356
sS'name'
p116357
S'cumulative'
p116358
sS'required'
p116359
I00
sS'group_name'
p116360
Nsa(dp116361
S'name'
p116362
S'direction'
p116363
sS'cpp_type'
p116364
S'MooseEnum'
p116365
sS'default'
p116366
g3
sS'description'
p116367
S'The direction of the layers.\n'
p116368
sS'required'
p116369
I01
sS'options'
p116370
S'x y z'
p116371
sS'group_name'
p116372
Nsa(dp116373
S'description'
p116374
S'Set the enabled status of the MooseObject.\n'
p116375
sS'cpp_type'
p116376
S'bool'
p116377
sS'default'
p116378
S'1'
p116379
sS'name'
p116380
S'enable'
p116381
sS'required'
p116382
I00
sS'group_name'
p116383
S'Advanced'
p116384
sa(dp116385
S'name'
p116386
S'execute_on'
p116387
sS'cpp_type'
p116388
S'MultiMooseEnum'
p116389
sS'default'
p116390
S'TIMESTEP_END'
p116391
sS'description'
p116392
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116393
sS'required'
p116394
I00
sS'options'
p116395
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116396
sS'group_name'
p116397
Nsa(dp116398
S'description'
p116399
S'The number of layers.\n'
p116400
sS'cpp_type'
p116401
S'unsigned int'
p116402
sS'default'
p116403
g3
sS'name'
p116404
S'num_layers'
p116405
sS'required'
p116406
I00
sS'group_name'
p116407
Nsa(dp116408
S'name'
p116409
S'sample_type'
p116410
sS'cpp_type'
p116411
S'MooseEnum'
p116412
sS'default'
p116413
S'direct'
p116414
sS'description'
p116415
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116416
sS'required'
p116417
I00
sS'options'
p116418
S'direct interpolate average'
p116419
sS'group_name'
p116420
Nsa(dp116421
S'description'
p116422
g3
sS'cpp_type'
p116423
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116424
sS'default'
p116425
S'LayeredSideAverage'
p116426
sS'name'
p116427
S'type'
p116428
sS'required'
p116429
I00
sS'group_name'
p116430
Nsa(dp116431
S'description'
p116432
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116433
sS'cpp_type'
p116434
S'bool'
p116435
sS'default'
p116436
S'0'
p116437
sS'name'
p116438
S'use_displaced_mesh'
p116439
sS'required'
p116440
I00
sS'group_name'
p116441
S'Advanced'
p116442
sa(dp116443
S'description'
p116444
S'The name of the variable that this boundary condition applies to\n'
p116445
sS'cpp_type'
p116446
S'std::vector<VariableName>'
p116447
sS'default'
p116448
g3
sS'name'
p116449
S'variable'
p116450
sS'required'
p116451
I01
sS'group_name'
p116452
NsasS'name'
p116453
S'/UserObjects/LayeredSideAverage'
p116454
sa(dp116455
S'description'
p116456
g3
sS'subblocks'
p116457
NsS'parameters'
p116458
(lp116459
(dp116460
S'description'
p116461
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116462
sS'cpp_type'
p116463
S'unsigned int'
p116464
sS'default'
p116465
S'1'
p116466
sS'name'
p116467
S'average_radius'
p116468
sS'required'
p116469
I00
sS'group_name'
p116470
Nsa(dp116471
S'description'
p116472
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116473
sS'cpp_type'
p116474
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116475
sS'default'
p116476
g3
sS'name'
p116477
S'boundary'
p116478
sS'required'
p116479
I01
sS'group_name'
p116480
Nsa(dp116481
S'description'
p116482
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116483
sS'cpp_type'
p116484
S'std::vector<double, std::allocator<double> >'
p116485
sS'default'
p116486
g3
sS'name'
p116487
S'bounds'
p116488
sS'required'
p116489
I00
sS'group_name'
p116490
Nsa(dp116491
S'description'
p116492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116493
sS'cpp_type'
p116494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116495
sS'default'
p116496
g3
sS'name'
p116497
S'control_tags'
p116498
sS'required'
p116499
I00
sS'group_name'
p116500
S'Advanced'
p116501
sa(dp116502
S'description'
p116503
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116504
sS'cpp_type'
p116505
S'bool'
p116506
sS'default'
p116507
S'0'
p116508
sS'name'
p116509
S'cumulative'
p116510
sS'required'
p116511
I00
sS'group_name'
p116512
Nsa(dp116513
S'description'
p116514
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p116515
sS'cpp_type'
p116516
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116517
sS'default'
p116518
g3
sS'name'
p116519
S'diffusivity'
p116520
sS'required'
p116521
I01
sS'group_name'
p116522
Nsa(dp116523
S'name'
p116524
S'direction'
p116525
sS'cpp_type'
p116526
S'MooseEnum'
p116527
sS'default'
p116528
g3
sS'description'
p116529
S'The direction of the layers.\n'
p116530
sS'required'
p116531
I01
sS'options'
p116532
S'x y z'
p116533
sS'group_name'
p116534
Nsa(dp116535
S'description'
p116536
S'Set the enabled status of the MooseObject.\n'
p116537
sS'cpp_type'
p116538
S'bool'
p116539
sS'default'
p116540
S'1'
p116541
sS'name'
p116542
S'enable'
p116543
sS'required'
p116544
I00
sS'group_name'
p116545
S'Advanced'
p116546
sa(dp116547
S'name'
p116548
S'execute_on'
p116549
sS'cpp_type'
p116550
S'MultiMooseEnum'
p116551
sS'default'
p116552
S'TIMESTEP_END'
p116553
sS'description'
p116554
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116555
sS'required'
p116556
I00
sS'options'
p116557
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116558
sS'group_name'
p116559
Nsa(dp116560
S'description'
p116561
S'The number of layers.\n'
p116562
sS'cpp_type'
p116563
S'unsigned int'
p116564
sS'default'
p116565
g3
sS'name'
p116566
S'num_layers'
p116567
sS'required'
p116568
I00
sS'group_name'
p116569
Nsa(dp116570
S'name'
p116571
S'sample_type'
p116572
sS'cpp_type'
p116573
S'MooseEnum'
p116574
sS'default'
p116575
S'direct'
p116576
sS'description'
p116577
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116578
sS'required'
p116579
I00
sS'options'
p116580
S'direct interpolate average'
p116581
sS'group_name'
p116582
Nsa(dp116583
S'description'
p116584
g3
sS'cpp_type'
p116585
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116586
sS'default'
p116587
S'LayeredSideFluxAverage'
p116588
sS'name'
p116589
S'type'
p116590
sS'required'
p116591
I00
sS'group_name'
p116592
Nsa(dp116593
S'description'
p116594
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116595
sS'cpp_type'
p116596
S'bool'
p116597
sS'default'
p116598
S'0'
p116599
sS'name'
p116600
S'use_displaced_mesh'
p116601
sS'required'
p116602
I00
sS'group_name'
p116603
S'Advanced'
p116604
sa(dp116605
S'description'
p116606
S'The name of the variable that this boundary condition applies to\n'
p116607
sS'cpp_type'
p116608
S'std::vector<VariableName>'
p116609
sS'default'
p116610
g3
sS'name'
p116611
S'variable'
p116612
sS'required'
p116613
I01
sS'group_name'
p116614
NsasS'name'
p116615
S'/UserObjects/LayeredSideFluxAverage'
p116616
sa(dp116617
S'description'
p116618
g3
sS'subblocks'
p116619
NsS'parameters'
p116620
(lp116621
(dp116622
S'description'
p116623
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116624
sS'cpp_type'
p116625
S'unsigned int'
p116626
sS'default'
p116627
S'1'
p116628
sS'name'
p116629
S'average_radius'
p116630
sS'required'
p116631
I00
sS'group_name'
p116632
Nsa(dp116633
S'description'
p116634
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116635
sS'cpp_type'
p116636
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116637
sS'default'
p116638
g3
sS'name'
p116639
S'boundary'
p116640
sS'required'
p116641
I01
sS'group_name'
p116642
Nsa(dp116643
S'description'
p116644
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116645
sS'cpp_type'
p116646
S'std::vector<double, std::allocator<double> >'
p116647
sS'default'
p116648
g3
sS'name'
p116649
S'bounds'
p116650
sS'required'
p116651
I00
sS'group_name'
p116652
Nsa(dp116653
S'description'
p116654
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116655
sS'cpp_type'
p116656
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116657
sS'default'
p116658
g3
sS'name'
p116659
S'control_tags'
p116660
sS'required'
p116661
I00
sS'group_name'
p116662
S'Advanced'
p116663
sa(dp116664
S'description'
p116665
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116666
sS'cpp_type'
p116667
S'bool'
p116668
sS'default'
p116669
S'0'
p116670
sS'name'
p116671
S'cumulative'
p116672
sS'required'
p116673
I00
sS'group_name'
p116674
Nsa(dp116675
S'name'
p116676
S'direction'
p116677
sS'cpp_type'
p116678
S'MooseEnum'
p116679
sS'default'
p116680
g3
sS'description'
p116681
S'The direction of the layers.\n'
p116682
sS'required'
p116683
I01
sS'options'
p116684
S'x y z'
p116685
sS'group_name'
p116686
Nsa(dp116687
S'description'
p116688
S'Set the enabled status of the MooseObject.\n'
p116689
sS'cpp_type'
p116690
S'bool'
p116691
sS'default'
p116692
S'1'
p116693
sS'name'
p116694
S'enable'
p116695
sS'required'
p116696
I00
sS'group_name'
p116697
S'Advanced'
p116698
sa(dp116699
S'name'
p116700
S'execute_on'
p116701
sS'cpp_type'
p116702
S'MultiMooseEnum'
p116703
sS'default'
p116704
S'TIMESTEP_END'
p116705
sS'description'
p116706
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116707
sS'required'
p116708
I00
sS'options'
p116709
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116710
sS'group_name'
p116711
Nsa(dp116712
S'description'
p116713
S'The number of layers.\n'
p116714
sS'cpp_type'
p116715
S'unsigned int'
p116716
sS'default'
p116717
g3
sS'name'
p116718
S'num_layers'
p116719
sS'required'
p116720
I00
sS'group_name'
p116721
Nsa(dp116722
S'name'
p116723
S'sample_type'
p116724
sS'cpp_type'
p116725
S'MooseEnum'
p116726
sS'default'
p116727
S'direct'
p116728
sS'description'
p116729
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116730
sS'required'
p116731
I00
sS'options'
p116732
S'direct interpolate average'
p116733
sS'group_name'
p116734
Nsa(dp116735
S'description'
p116736
g3
sS'cpp_type'
p116737
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116738
sS'default'
p116739
S'LayeredSideIntegral'
p116740
sS'name'
p116741
S'type'
p116742
sS'required'
p116743
I00
sS'group_name'
p116744
Nsa(dp116745
S'description'
p116746
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116747
sS'cpp_type'
p116748
S'bool'
p116749
sS'default'
p116750
S'0'
p116751
sS'name'
p116752
S'use_displaced_mesh'
p116753
sS'required'
p116754
I00
sS'group_name'
p116755
S'Advanced'
p116756
sa(dp116757
S'description'
p116758
S'The name of the variable that this boundary condition applies to\n'
p116759
sS'cpp_type'
p116760
S'std::vector<VariableName>'
p116761
sS'default'
p116762
g3
sS'name'
p116763
S'variable'
p116764
sS'required'
p116765
I01
sS'group_name'
p116766
NsasS'name'
p116767
S'/UserObjects/LayeredSideIntegral'
p116768
sa(dp116769
S'description'
p116770
S'Userobject for masking/pinning grains and making forces and torques acting on that grain zero\n'
p116771
sS'subblocks'
p116772
NsS'parameters'
p116773
(lp116774
(dp116775
S'description'
p116776
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116777
sS'cpp_type'
p116778
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116779
sS'default'
p116780
g3
sS'name'
p116781
S'control_tags'
p116782
sS'required'
p116783
I00
sS'group_name'
p116784
S'Advanced'
p116785
sa(dp116786
S'description'
p116787
S'Set the enabled status of the MooseObject.\n'
p116788
sS'cpp_type'
p116789
S'bool'
p116790
sS'default'
p116791
S'1'
p116792
sS'name'
p116793
S'enable'
p116794
sS'required'
p116795
I00
sS'group_name'
p116796
S'Advanced'
p116797
sa(dp116798
S'name'
p116799
S'execute_on'
p116800
sS'cpp_type'
p116801
S'MultiMooseEnum'
p116802
sS'default'
p116803
S'TIMESTEP_END'
p116804
sS'description'
p116805
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116806
sS'required'
p116807
I00
sS'options'
p116808
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116809
sS'group_name'
p116810
Nsa(dp116811
S'description'
p116812
S'userobject for getting force and torque acting on grains\n'
p116813
sS'cpp_type'
p116814
S'UserObjectName'
p116815
sS'default'
p116816
g3
sS'name'
p116817
S'grain_force'
p116818
sS'required'
p116819
I00
sS'group_name'
p116820
Nsa(dp116821
S'description'
p116822
S'Grain numbers for pinned grains\n'
p116823
sS'cpp_type'
p116824
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p116825
sS'default'
p116826
g3
sS'name'
p116827
S'pinned_grains'
p116828
sS'required'
p116829
I00
sS'group_name'
p116830
Nsa(dp116831
S'description'
p116832
g3
sS'cpp_type'
p116833
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116834
sS'default'
p116835
S'MaskedGrainForceAndTorque'
p116836
sS'name'
p116837
S'type'
p116838
sS'required'
p116839
I00
sS'group_name'
p116840
Nsa(dp116841
S'description'
p116842
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116843
sS'cpp_type'
p116844
S'bool'
p116845
sS'default'
p116846
S'0'
p116847
sS'name'
p116848
S'use_displaced_mesh'
p116849
sS'required'
p116850
I00
sS'group_name'
p116851
S'Advanced'
p116852
sasS'name'
p116853
S'/UserObjects/MaskedGrainForceAndTorque'
p116854
sa(dp116855
S'description'
p116856
g3
sS'subblocks'
p116857
NsS'parameters'
p116858
(lp116859
(dp116860
S'description'
p116861
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116862
sS'cpp_type'
p116863
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116864
sS'default'
p116865
g3
sS'name'
p116866
S'block'
p116867
sS'required'
p116868
I00
sS'group_name'
p116869
Nsa(dp116870
S'description'
p116871
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116872
sS'cpp_type'
p116873
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116874
sS'default'
p116875
g3
sS'name'
p116876
S'control_tags'
p116877
sS'required'
p116878
I00
sS'group_name'
p116879
S'Advanced'
p116880
sa(dp116881
S'description'
p116882
S'Set the enabled status of the MooseObject.\n'
p116883
sS'cpp_type'
p116884
S'bool'
p116885
sS'default'
p116886
S'1'
p116887
sS'name'
p116888
S'enable'
p116889
sS'required'
p116890
I00
sS'group_name'
p116891
S'Advanced'
p116892
sa(dp116893
S'name'
p116894
S'execute_on'
p116895
sS'cpp_type'
p116896
S'MultiMooseEnum'
p116897
sS'default'
p116898
S'TIMESTEP_END'
p116899
sS'description'
p116900
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116901
sS'required'
p116902
I00
sS'options'
p116903
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116904
sS'group_name'
p116905
Nsa(dp116906
S'description'
p116907
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p116908
sS'cpp_type'
p116909
S'std::vector<OutputName, std::allocator<OutputName> >'
p116910
sS'default'
p116911
g3
sS'name'
p116912
S'outputs'
p116913
sS'required'
p116914
I00
sS'group_name'
p116915
S'Advanced'
p116916
sa(dp116917
S'description'
p116918
S'The seed for the master random number generator\n'
p116919
sS'cpp_type'
p116920
S'unsigned int'
p116921
sS'default'
p116922
S'0'
p116923
sS'name'
p116924
S'seed'
p116925
sS'required'
p116926
I00
sS'group_name'
p116927
S'Advanced'
p116928
sa(dp116929
S'description'
p116930
g3
sS'cpp_type'
p116931
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116932
sS'default'
p116933
S'Mass'
p116934
sS'name'
p116935
S'type'
p116936
sS'required'
p116937
I00
sS'group_name'
p116938
Nsa(dp116939
S'description'
p116940
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116941
sS'cpp_type'
p116942
S'bool'
p116943
sS'default'
p116944
S'1'
p116945
sS'name'
p116946
S'use_displaced_mesh'
p116947
sS'required'
p116948
I00
sS'group_name'
p116949
S'Advanced'
p116950
sa(dp116951
S'description'
p116952
S'The name of the variable that this object operates on\n'
p116953
sS'cpp_type'
p116954
S'std::vector<VariableName>'
p116955
sS'default'
p116956
g3
sS'name'
p116957
S'variable'
p116958
sS'required'
p116959
I01
sS'group_name'
p116960
NsasS'name'
p116961
S'/UserObjects/Mass'
p116962
sa(dp116963
S'description'
p116964
g3
sS'subblocks'
p116965
NsS'parameters'
p116966
(lp116967
(dp116968
S'description'
p116969
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116970
sS'cpp_type'
p116971
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116972
sS'default'
p116973
g3
sS'name'
p116974
S'block'
p116975
sS'required'
p116976
I00
sS'group_name'
p116977
Nsa(dp116978
S'description'
p116979
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116980
sS'cpp_type'
p116981
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116982
sS'default'
p116983
g3
sS'name'
p116984
S'control_tags'
p116985
sS'required'
p116986
I00
sS'group_name'
p116987
S'Advanced'
p116988
sa(dp116989
S'description'
p116990
S'Set the enabled status of the MooseObject.\n'
p116991
sS'cpp_type'
p116992
S'bool'
p116993
sS'default'
p116994
S'1'
p116995
sS'name'
p116996
S'enable'
p116997
sS'required'
p116998
I00
sS'group_name'
p116999
S'Advanced'
p117000
sa(dp117001
S'name'
p117002
S'execute_on'
p117003
sS'cpp_type'
p117004
S'MultiMooseEnum'
p117005
sS'default'
p117006
S'TIMESTEP_END'
p117007
sS'description'
p117008
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117009
sS'required'
p117010
I00
sS'options'
p117011
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117012
sS'group_name'
p117013
Nsa(dp117014
S'description'
p117015
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p117016
sS'cpp_type'
p117017
S'unsigned int'
p117018
sS'default'
p117019
g3
sS'name'
p117020
S'index_i'
p117021
sS'required'
p117022
I01
sS'group_name'
p117023
Nsa(dp117024
S'description'
p117025
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p117026
sS'cpp_type'
p117027
S'unsigned int'
p117028
sS'default'
p117029
g3
sS'name'
p117030
S'index_j'
p117031
sS'required'
p117032
I01
sS'group_name'
p117033
Nsa(dp117034
S'description'
p117035
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117036
sS'cpp_type'
p117037
S'std::vector<OutputName, std::allocator<OutputName> >'
p117038
sS'default'
p117039
g3
sS'name'
p117040
S'outputs'
p117041
sS'required'
p117042
I00
sS'group_name'
p117043
S'Advanced'
p117044
sa(dp117045
S'description'
p117046
S'The rank two material tensor name\n'
p117047
sS'cpp_type'
p117048
S'MaterialPropertyName'
p117049
sS'default'
p117050
g3
sS'name'
p117051
S'rank_two_tensor'
p117052
sS'required'
p117053
I01
sS'group_name'
p117054
Nsa(dp117055
S'description'
p117056
S'The seed for the master random number generator\n'
p117057
sS'cpp_type'
p117058
S'unsigned int'
p117059
sS'default'
p117060
S'0'
p117061
sS'name'
p117062
S'seed'
p117063
sS'required'
p117064
I00
sS'group_name'
p117065
S'Advanced'
p117066
sa(dp117067
S'description'
p117068
g3
sS'cpp_type'
p117069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117070
sS'default'
p117071
S'MaterialTensorIntegral'
p117072
sS'name'
p117073
S'type'
p117074
sS'required'
p117075
I00
sS'group_name'
p117076
Nsa(dp117077
S'description'
p117078
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117079
sS'cpp_type'
p117080
S'bool'
p117081
sS'default'
p117082
S'1'
p117083
sS'name'
p117084
S'use_displaced_mesh'
p117085
sS'required'
p117086
I00
sS'group_name'
p117087
S'Advanced'
p117088
sasS'name'
p117089
S'/UserObjects/MaterialTensorIntegral'
p117090
sa(dp117091
S'description'
p117092
S'Memory usage statistics for the running simulation.\n'
p117093
sS'subblocks'
p117094
NsS'parameters'
p117095
(lp117096
(dp117097
S'description'
p117098
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117099
sS'cpp_type'
p117100
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117101
sS'default'
p117102
g3
sS'name'
p117103
S'control_tags'
p117104
sS'required'
p117105
I00
sS'group_name'
p117106
S'Advanced'
p117107
sa(dp117108
S'description'
p117109
S'Set the enabled status of the MooseObject.\n'
p117110
sS'cpp_type'
p117111
S'bool'
p117112
sS'default'
p117113
S'1'
p117114
sS'name'
p117115
S'enable'
p117116
sS'required'
p117117
I00
sS'group_name'
p117118
S'Advanced'
p117119
sa(dp117120
S'name'
p117121
S'execute_on'
p117122
sS'cpp_type'
p117123
S'MultiMooseEnum'
p117124
sS'default'
p117125
S'TIMESTEP_END'
p117126
sS'description'
p117127
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117128
sS'required'
p117129
I00
sS'options'
p117130
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117131
sS'group_name'
p117132
Nsa(dp117133
S'name'
p117134
S'mem_type'
p117135
sS'cpp_type'
p117136
S'MooseEnum'
p117137
sS'default'
p117138
S'virtual_memory'
p117139
sS'description'
p117140
S'Memory metric to report.\n'
p117141
sS'required'
p117142
I00
sS'options'
p117143
S'virtual_memory physical_memory page_faults'
p117144
sS'group_name'
p117145
Nsa(dp117146
S'description'
p117147
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117148
sS'cpp_type'
p117149
S'std::vector<OutputName, std::allocator<OutputName> >'
p117150
sS'default'
p117151
g3
sS'name'
p117152
S'outputs'
p117153
sS'required'
p117154
I00
sS'group_name'
p117155
S'Advanced'
p117156
sa(dp117157
S'description'
p117158
S'If the postprocessor is executed more than one during a time step, report the aggregated peak value.\n'
p117159
sS'cpp_type'
p117160
S'bool'
p117161
sS'default'
p117162
S'1'
p117163
sS'name'
p117164
S'report_peak_value'
p117165
sS'required'
p117166
I00
sS'group_name'
p117167
Nsa(dp117168
S'description'
p117169
g3
sS'cpp_type'
p117170
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117171
sS'default'
p117172
S'MemoryUsage'
p117173
sS'name'
p117174
S'type'
p117175
sS'required'
p117176
I00
sS'group_name'
p117177
Nsa(dp117178
S'description'
p117179
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117180
sS'cpp_type'
p117181
S'bool'
p117182
sS'default'
p117183
S'0'
p117184
sS'name'
p117185
S'use_displaced_mesh'
p117186
sS'required'
p117187
I00
sS'group_name'
p117188
S'Advanced'
p117189
sa(dp117190
S'name'
p117191
S'value_type'
p117192
sS'cpp_type'
p117193
S'MooseEnum'
p117194
sS'default'
p117195
S'total'
p117196
sS'description'
p117197
S'Aggregation method to apply to the requested memory metric.\n'
p117198
sS'required'
p117199
I00
sS'options'
p117200
S'total average max_process min_processs'
p117201
sS'group_name'
p117202
NsasS'name'
p117203
S'/UserObjects/MemoryUsage'
p117204
sa(dp117205
S'description'
p117206
g3
sS'subblocks'
p117207
NsS'parameters'
p117208
(lp117209
(dp117210
S'description'
p117211
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p117212
sS'cpp_type'
p117213
S'unsigned int'
p117214
sS'default'
p117215
S'1'
p117216
sS'name'
p117217
S'average_radius'
p117218
sS'required'
p117219
I00
sS'group_name'
p117220
Nsa(dp117221
S'description'
p117222
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117223
sS'cpp_type'
p117224
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117225
sS'default'
p117226
g3
sS'name'
p117227
S'block'
p117228
sS'required'
p117229
I00
sS'group_name'
p117230
Nsa(dp117231
S'description'
p117232
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p117233
sS'cpp_type'
p117234
S'std::vector<double, std::allocator<double> >'
p117235
sS'default'
p117236
g3
sS'name'
p117237
S'bounds'
p117238
sS'required'
p117239
I00
sS'group_name'
p117240
Nsa(dp117241
S'description'
p117242
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117243
sS'cpp_type'
p117244
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117245
sS'default'
p117246
g3
sS'name'
p117247
S'control_tags'
p117248
sS'required'
p117249
I00
sS'group_name'
p117250
S'Advanced'
p117251
sa(dp117252
S'description'
p117253
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p117254
sS'cpp_type'
p117255
S'bool'
p117256
sS'default'
p117257
S'0'
p117258
sS'name'
p117259
S'cumulative'
p117260
sS'required'
p117261
I00
sS'group_name'
p117262
Nsa(dp117263
S'name'
p117264
S'direction'
p117265
sS'cpp_type'
p117266
S'MooseEnum'
p117267
sS'default'
p117268
g3
sS'description'
p117269
S'The direction of the layers.\n'
p117270
sS'required'
p117271
I01
sS'options'
p117272
S'x y z'
p117273
sS'group_name'
p117274
Nsa(dp117275
S'description'
p117276
S'Set the enabled status of the MooseObject.\n'
p117277
sS'cpp_type'
p117278
S'bool'
p117279
sS'default'
p117280
S'1'
p117281
sS'name'
p117282
S'enable'
p117283
sS'required'
p117284
I00
sS'group_name'
p117285
S'Advanced'
p117286
sa(dp117287
S'name'
p117288
S'execute_on'
p117289
sS'cpp_type'
p117290
S'MultiMooseEnum'
p117291
sS'default'
p117292
S'TIMESTEP_END'
p117293
sS'description'
p117294
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117295
sS'required'
p117296
I00
sS'options'
p117297
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117298
sS'group_name'
p117299
Nsa(dp117300
S'description'
p117301
S'The number of layers.\n'
p117302
sS'cpp_type'
p117303
S'unsigned int'
p117304
sS'default'
p117305
g3
sS'name'
p117306
S'num_layers'
p117307
sS'required'
p117308
I00
sS'group_name'
p117309
Nsa(dp117310
S'description'
p117311
S'Computations will be lumped into values at these points.\n'
p117312
sS'cpp_type'
p117313
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p117314
sS'default'
p117315
g3
sS'name'
p117316
S'points'
p117317
sS'required'
p117318
I01
sS'group_name'
p117319
Nsa(dp117320
S'name'
p117321
S'sample_type'
p117322
sS'cpp_type'
p117323
S'MooseEnum'
p117324
sS'default'
p117325
S'direct'
p117326
sS'description'
p117327
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p117328
sS'required'
p117329
I00
sS'options'
p117330
S'direct interpolate average'
p117331
sS'group_name'
p117332
Nsa(dp117333
S'description'
p117334
S'The seed for the master random number generator\n'
p117335
sS'cpp_type'
p117336
S'unsigned int'
p117337
sS'default'
p117338
S'0'
p117339
sS'name'
p117340
S'seed'
p117341
sS'required'
p117342
I00
sS'group_name'
p117343
S'Advanced'
p117344
sa(dp117345
S'description'
p117346
g3
sS'cpp_type'
p117347
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117348
sS'default'
p117349
S'NearestPointLayeredAverage'
p117350
sS'name'
p117351
S'type'
p117352
sS'required'
p117353
I00
sS'group_name'
p117354
Nsa(dp117355
S'description'
p117356
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117357
sS'cpp_type'
p117358
S'bool'
p117359
sS'default'
p117360
S'0'
p117361
sS'name'
p117362
S'use_displaced_mesh'
p117363
sS'required'
p117364
I00
sS'group_name'
p117365
S'Advanced'
p117366
sa(dp117367
S'description'
p117368
S'The name of the variable that this object operates on\n'
p117369
sS'cpp_type'
p117370
S'std::vector<VariableName>'
p117371
sS'default'
p117372
g3
sS'name'
p117373
S'variable'
p117374
sS'required'
p117375
I01
sS'group_name'
p117376
NsasS'name'
p117377
S'/UserObjects/NearestPointLayeredAverage'
p117378
sa(dp117379
S'description'
p117380
g3
sS'subblocks'
p117381
NsS'parameters'
p117382
(lp117383
(dp117384
S'description'
p117385
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117386
sS'cpp_type'
p117387
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117388
sS'default'
p117389
g3
sS'name'
p117390
S'block'
p117391
sS'required'
p117392
I00
sS'group_name'
p117393
Nsa(dp117394
S'description'
p117395
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117396
sS'cpp_type'
p117397
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117398
sS'default'
p117399
g3
sS'name'
p117400
S'boundary'
p117401
sS'required'
p117402
I00
sS'group_name'
p117403
Nsa(dp117404
S'description'
p117405
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117406
sS'cpp_type'
p117407
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117408
sS'default'
p117409
g3
sS'name'
p117410
S'control_tags'
p117411
sS'required'
p117412
I00
sS'group_name'
p117413
S'Advanced'
p117414
sa(dp117415
S'description'
p117416
S'Set the enabled status of the MooseObject.\n'
p117417
sS'cpp_type'
p117418
S'bool'
p117419
sS'default'
p117420
S'1'
p117421
sS'name'
p117422
S'enable'
p117423
sS'required'
p117424
I00
sS'group_name'
p117425
S'Advanced'
p117426
sa(dp117427
S'name'
p117428
S'execute_on'
p117429
sS'cpp_type'
p117430
S'MultiMooseEnum'
p117431
sS'default'
p117432
S'TIMESTEP_END'
p117433
sS'description'
p117434
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117435
sS'required'
p117436
I00
sS'options'
p117437
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117438
sS'group_name'
p117439
Nsa(dp117440
S'description'
p117441
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117442
sS'cpp_type'
p117443
S'std::vector<OutputName, std::allocator<OutputName> >'
p117444
sS'default'
p117445
g3
sS'name'
p117446
S'outputs'
p117447
sS'required'
p117448
I00
sS'group_name'
p117449
S'Advanced'
p117450
sa(dp117451
S'description'
p117452
S'The seed for the master random number generator\n'
p117453
sS'cpp_type'
p117454
S'unsigned int'
p117455
sS'default'
p117456
S'0'
p117457
sS'name'
p117458
S'seed'
p117459
sS'required'
p117460
I00
sS'group_name'
p117461
S'Advanced'
p117462
sa(dp117463
S'description'
p117464
g3
sS'cpp_type'
p117465
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117466
sS'default'
p117467
S'NodalExtremeValue'
p117468
sS'name'
p117469
S'type'
p117470
sS'required'
p117471
I00
sS'group_name'
p117472
Nsa(dp117473
S'description'
p117474
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p117475
sS'cpp_type'
p117476
S'bool'
p117477
sS'default'
p117478
S'0'
p117479
sS'name'
p117480
S'unique_node_execute'
p117481
sS'required'
p117482
I00
sS'group_name'
p117483
Nsa(dp117484
S'description'
p117485
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117486
sS'cpp_type'
p117487
S'bool'
p117488
sS'default'
p117489
S'0'
p117490
sS'name'
p117491
S'use_displaced_mesh'
p117492
sS'required'
p117493
I00
sS'group_name'
p117494
S'Advanced'
p117495
sa(dp117496
S'name'
p117497
S'value_type'
p117498
sS'cpp_type'
p117499
S'MooseEnum'
p117500
sS'default'
p117501
S'max'
p117502
sS'description'
p117503
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p117504
sS'required'
p117505
I00
sS'options'
p117506
S'max min'
p117507
sS'group_name'
p117508
Nsa(dp117509
S'description'
p117510
S'The name of the variable that this postprocessor operates on\n'
p117511
sS'cpp_type'
p117512
S'std::vector<VariableName>'
p117513
sS'default'
p117514
g3
sS'name'
p117515
S'variable'
p117516
sS'required'
p117517
I01
sS'group_name'
p117518
NsasS'name'
p117519
S'/UserObjects/NodalExtremeValue'
p117520
sa(dp117521
S'description'
p117522
g3
sS'subblocks'
p117523
NsS'parameters'
p117524
(lp117525
(dp117526
S'description'
p117527
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117528
sS'cpp_type'
p117529
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117530
sS'default'
p117531
g3
sS'name'
p117532
S'block'
p117533
sS'required'
p117534
I00
sS'group_name'
p117535
Nsa(dp117536
S'description'
p117537
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117538
sS'cpp_type'
p117539
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117540
sS'default'
p117541
g3
sS'name'
p117542
S'boundary'
p117543
sS'required'
p117544
I00
sS'group_name'
p117545
Nsa(dp117546
S'description'
p117547
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117548
sS'cpp_type'
p117549
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117550
sS'default'
p117551
g3
sS'name'
p117552
S'control_tags'
p117553
sS'required'
p117554
I00
sS'group_name'
p117555
S'Advanced'
p117556
sa(dp117557
S'description'
p117558
S'Set the enabled status of the MooseObject.\n'
p117559
sS'cpp_type'
p117560
S'bool'
p117561
sS'default'
p117562
S'1'
p117563
sS'name'
p117564
S'enable'
p117565
sS'required'
p117566
I00
sS'group_name'
p117567
S'Advanced'
p117568
sa(dp117569
S'name'
p117570
S'execute_on'
p117571
sS'cpp_type'
p117572
S'MultiMooseEnum'
p117573
sS'default'
p117574
S'TIMESTEP_END'
p117575
sS'description'
p117576
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117577
sS'required'
p117578
I00
sS'options'
p117579
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117580
sS'group_name'
p117581
Nsa(dp117582
S'description'
p117583
S'The analytic solution to compare against\n'
p117584
sS'cpp_type'
p117585
S'FunctionName'
p117586
sS'default'
p117587
g3
sS'name'
p117588
S'function'
p117589
sS'required'
p117590
I01
sS'group_name'
p117591
Nsa(dp117592
S'description'
p117593
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117594
sS'cpp_type'
p117595
S'std::vector<OutputName, std::allocator<OutputName> >'
p117596
sS'default'
p117597
g3
sS'name'
p117598
S'outputs'
p117599
sS'required'
p117600
I00
sS'group_name'
p117601
S'Advanced'
p117602
sa(dp117603
S'description'
p117604
S'The seed for the master random number generator\n'
p117605
sS'cpp_type'
p117606
S'unsigned int'
p117607
sS'default'
p117608
S'0'
p117609
sS'name'
p117610
S'seed'
p117611
sS'required'
p117612
I00
sS'group_name'
p117613
S'Advanced'
p117614
sa(dp117615
S'description'
p117616
g3
sS'cpp_type'
p117617
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117618
sS'default'
p117619
S'NodalL2Error'
p117620
sS'name'
p117621
S'type'
p117622
sS'required'
p117623
I00
sS'group_name'
p117624
Nsa(dp117625
S'description'
p117626
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p117627
sS'cpp_type'
p117628
S'bool'
p117629
sS'default'
p117630
S'0'
p117631
sS'name'
p117632
S'unique_node_execute'
p117633
sS'required'
p117634
I00
sS'group_name'
p117635
Nsa(dp117636
S'description'
p117637
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117638
sS'cpp_type'
p117639
S'bool'
p117640
sS'default'
p117641
S'0'
p117642
sS'name'
p117643
S'use_displaced_mesh'
p117644
sS'required'
p117645
I00
sS'group_name'
p117646
S'Advanced'
p117647
sa(dp117648
S'description'
p117649
S'The name of the variable that this postprocessor operates on\n'
p117650
sS'cpp_type'
p117651
S'std::vector<VariableName>'
p117652
sS'default'
p117653
g3
sS'name'
p117654
S'variable'
p117655
sS'required'
p117656
I01
sS'group_name'
p117657
NsasS'name'
p117658
S'/UserObjects/NodalL2Error'
p117659
sa(dp117660
S'description'
p117661
g3
sS'subblocks'
p117662
NsS'parameters'
p117663
(lp117664
(dp117665
S'description'
p117666
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117667
sS'cpp_type'
p117668
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117669
sS'default'
p117670
g3
sS'name'
p117671
S'block'
p117672
sS'required'
p117673
I00
sS'group_name'
p117674
Nsa(dp117675
S'description'
p117676
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117677
sS'cpp_type'
p117678
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117679
sS'default'
p117680
g3
sS'name'
p117681
S'boundary'
p117682
sS'required'
p117683
I00
sS'group_name'
p117684
Nsa(dp117685
S'description'
p117686
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117687
sS'cpp_type'
p117688
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117689
sS'default'
p117690
g3
sS'name'
p117691
S'control_tags'
p117692
sS'required'
p117693
I00
sS'group_name'
p117694
S'Advanced'
p117695
sa(dp117696
S'description'
p117697
S'Set the enabled status of the MooseObject.\n'
p117698
sS'cpp_type'
p117699
S'bool'
p117700
sS'default'
p117701
S'1'
p117702
sS'name'
p117703
S'enable'
p117704
sS'required'
p117705
I00
sS'group_name'
p117706
S'Advanced'
p117707
sa(dp117708
S'name'
p117709
S'execute_on'
p117710
sS'cpp_type'
p117711
S'MultiMooseEnum'
p117712
sS'default'
p117713
S'TIMESTEP_END'
p117714
sS'description'
p117715
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117716
sS'required'
p117717
I00
sS'options'
p117718
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117719
sS'group_name'
p117720
Nsa(dp117721
S'description'
p117722
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117723
sS'cpp_type'
p117724
S'std::vector<OutputName, std::allocator<OutputName> >'
p117725
sS'default'
p117726
g3
sS'name'
p117727
S'outputs'
p117728
sS'required'
p117729
I00
sS'group_name'
p117730
S'Advanced'
p117731
sa(dp117732
S'description'
p117733
S'The seed for the master random number generator\n'
p117734
sS'cpp_type'
p117735
S'unsigned int'
p117736
sS'default'
p117737
S'0'
p117738
sS'name'
p117739
S'seed'
p117740
sS'required'
p117741
I00
sS'group_name'
p117742
S'Advanced'
p117743
sa(dp117744
S'description'
p117745
g3
sS'cpp_type'
p117746
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117747
sS'default'
p117748
S'NodalL2Norm'
p117749
sS'name'
p117750
S'type'
p117751
sS'required'
p117752
I00
sS'group_name'
p117753
Nsa(dp117754
S'description'
p117755
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p117756
sS'cpp_type'
p117757
S'bool'
p117758
sS'default'
p117759
S'1'
p117760
sS'name'
p117761
S'unique_node_execute'
p117762
sS'required'
p117763
I00
sS'group_name'
p117764
Nsa(dp117765
S'description'
p117766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117767
sS'cpp_type'
p117768
S'bool'
p117769
sS'default'
p117770
S'0'
p117771
sS'name'
p117772
S'use_displaced_mesh'
p117773
sS'required'
p117774
I00
sS'group_name'
p117775
S'Advanced'
p117776
sa(dp117777
S'description'
p117778
S'The name of the variable that this postprocessor operates on\n'
p117779
sS'cpp_type'
p117780
S'std::vector<VariableName>'
p117781
sS'default'
p117782
g3
sS'name'
p117783
S'variable'
p117784
sS'required'
p117785
I01
sS'group_name'
p117786
NsasS'name'
p117787
S'/UserObjects/NodalL2Norm'
p117788
sa(dp117789
S'description'
p117790
g3
sS'subblocks'
p117791
NsS'parameters'
p117792
(lp117793
(dp117794
S'description'
p117795
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117796
sS'cpp_type'
p117797
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117798
sS'default'
p117799
g3
sS'name'
p117800
S'block'
p117801
sS'required'
p117802
I00
sS'group_name'
p117803
Nsa(dp117804
S'description'
p117805
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117806
sS'cpp_type'
p117807
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117808
sS'default'
p117809
g3
sS'name'
p117810
S'boundary'
p117811
sS'required'
p117812
I00
sS'group_name'
p117813
Nsa(dp117814
S'description'
p117815
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117816
sS'cpp_type'
p117817
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117818
sS'default'
p117819
g3
sS'name'
p117820
S'control_tags'
p117821
sS'required'
p117822
I00
sS'group_name'
p117823
S'Advanced'
p117824
sa(dp117825
S'description'
p117826
S'Set the enabled status of the MooseObject.\n'
p117827
sS'cpp_type'
p117828
S'bool'
p117829
sS'default'
p117830
S'1'
p117831
sS'name'
p117832
S'enable'
p117833
sS'required'
p117834
I00
sS'group_name'
p117835
S'Advanced'
p117836
sa(dp117837
S'name'
p117838
S'execute_on'
p117839
sS'cpp_type'
p117840
S'MultiMooseEnum'
p117841
sS'default'
p117842
S'TIMESTEP_END'
p117843
sS'description'
p117844
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117845
sS'required'
p117846
I00
sS'options'
p117847
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117848
sS'group_name'
p117849
Nsa(dp117850
S'description'
p117851
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117852
sS'cpp_type'
p117853
S'std::vector<OutputName, std::allocator<OutputName> >'
p117854
sS'default'
p117855
g3
sS'name'
p117856
S'outputs'
p117857
sS'required'
p117858
I00
sS'group_name'
p117859
S'Advanced'
p117860
sa(dp117861
S'description'
p117862
S'The seed for the master random number generator\n'
p117863
sS'cpp_type'
p117864
S'unsigned int'
p117865
sS'default'
p117866
S'0'
p117867
sS'name'
p117868
S'seed'
p117869
sS'required'
p117870
I00
sS'group_name'
p117871
S'Advanced'
p117872
sa(dp117873
S'description'
p117874
g3
sS'cpp_type'
p117875
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117876
sS'default'
p117877
S'NodalMaxValue'
p117878
sS'name'
p117879
S'type'
p117880
sS'required'
p117881
I00
sS'group_name'
p117882
Nsa(dp117883
S'description'
p117884
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p117885
sS'cpp_type'
p117886
S'bool'
p117887
sS'default'
p117888
S'0'
p117889
sS'name'
p117890
S'unique_node_execute'
p117891
sS'required'
p117892
I00
sS'group_name'
p117893
Nsa(dp117894
S'description'
p117895
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117896
sS'cpp_type'
p117897
S'bool'
p117898
sS'default'
p117899
S'0'
p117900
sS'name'
p117901
S'use_displaced_mesh'
p117902
sS'required'
p117903
I00
sS'group_name'
p117904
S'Advanced'
p117905
sa(dp117906
S'description'
p117907
S'The name of the variable that this postprocessor operates on\n'
p117908
sS'cpp_type'
p117909
S'std::vector<VariableName>'
p117910
sS'default'
p117911
g3
sS'name'
p117912
S'variable'
p117913
sS'required'
p117914
I01
sS'group_name'
p117915
NsasS'name'
p117916
S'/UserObjects/NodalMaxValue'
p117917
sa(dp117918
S'description'
p117919
g3
sS'subblocks'
p117920
NsS'parameters'
p117921
(lp117922
(dp117923
S'description'
p117924
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117925
sS'cpp_type'
p117926
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117927
sS'default'
p117928
g3
sS'name'
p117929
S'boundary'
p117930
sS'required'
p117931
I01
sS'group_name'
p117932
Nsa(dp117933
S'description'
p117934
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117935
sS'cpp_type'
p117936
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117937
sS'default'
p117938
g3
sS'name'
p117939
S'control_tags'
p117940
sS'required'
p117941
I00
sS'group_name'
p117942
S'Advanced'
p117943
sa(dp117944
S'description'
p117945
S"Node set ID which contains the nodes that are in 'corners'.\n"
p117946
sS'cpp_type'
p117947
S'BoundaryName'
p117948
sS'default'
p117949
g3
sS'name'
p117950
S'corner_boundary'
p117951
sS'required'
p117952
I01
sS'group_name'
p117953
Nsa(dp117954
S'description'
p117955
S'Set the enabled status of the MooseObject.\n'
p117956
sS'cpp_type'
p117957
S'bool'
p117958
sS'default'
p117959
S'1'
p117960
sS'name'
p117961
S'enable'
p117962
sS'required'
p117963
I00
sS'group_name'
p117964
S'Advanced'
p117965
sa(dp117966
S'name'
p117967
S'execute_on'
p117968
sS'cpp_type'
p117969
S'MultiMooseEnum'
p117970
sS'default'
p117971
S'TIMESTEP_END'
p117972
sS'description'
p117973
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117974
sS'required'
p117975
I00
sS'options'
p117976
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117977
sS'group_name'
p117978
Nsa(dp117979
S'description'
p117980
g3
sS'cpp_type'
p117981
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117982
sS'default'
p117983
S'NodalNormalsCorner'
p117984
sS'name'
p117985
S'type'
p117986
sS'required'
p117987
I00
sS'group_name'
p117988
Nsa(dp117989
S'description'
p117990
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117991
sS'cpp_type'
p117992
S'bool'
p117993
sS'default'
p117994
S'0'
p117995
sS'name'
p117996
S'use_displaced_mesh'
p117997
sS'required'
p117998
I00
sS'group_name'
p117999
S'Advanced'
p118000
sasS'name'
p118001
S'/UserObjects/NodalNormalsCorner'
p118002
sa(dp118003
S'description'
p118004
g3
sS'subblocks'
p118005
NsS'parameters'
p118006
(lp118007
(dp118008
S'description'
p118009
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118010
sS'cpp_type'
p118011
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118012
sS'default'
p118013
g3
sS'name'
p118014
S'block'
p118015
sS'required'
p118016
I00
sS'group_name'
p118017
Nsa(dp118018
S'description'
p118019
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118020
sS'cpp_type'
p118021
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118022
sS'default'
p118023
g3
sS'name'
p118024
S'boundary'
p118025
sS'required'
p118026
I00
sS'group_name'
p118027
Nsa(dp118028
S'description'
p118029
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118030
sS'cpp_type'
p118031
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118032
sS'default'
p118033
g3
sS'name'
p118034
S'control_tags'
p118035
sS'required'
p118036
I00
sS'group_name'
p118037
S'Advanced'
p118038
sa(dp118039
S'description'
p118040
S'Set the enabled status of the MooseObject.\n'
p118041
sS'cpp_type'
p118042
S'bool'
p118043
sS'default'
p118044
S'1'
p118045
sS'name'
p118046
S'enable'
p118047
sS'required'
p118048
I00
sS'group_name'
p118049
S'Advanced'
p118050
sa(dp118051
S'name'
p118052
S'execute_on'
p118053
sS'cpp_type'
p118054
S'MultiMooseEnum'
p118055
sS'default'
p118056
S'TIMESTEP_END'
p118057
sS'description'
p118058
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118059
sS'required'
p118060
I00
sS'options'
p118061
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118062
sS'group_name'
p118063
Nsa(dp118064
S'description'
p118065
S'The seed for the master random number generator\n'
p118066
sS'cpp_type'
p118067
S'unsigned int'
p118068
sS'default'
p118069
S'0'
p118070
sS'name'
p118071
S'seed'
p118072
sS'required'
p118073
I00
sS'group_name'
p118074
S'Advanced'
p118075
sa(dp118076
S'description'
p118077
g3
sS'cpp_type'
p118078
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118079
sS'default'
p118080
S'NodalNormalsEvaluator'
p118081
sS'name'
p118082
S'type'
p118083
sS'required'
p118084
I00
sS'group_name'
p118085
Nsa(dp118086
S'description'
p118087
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118088
sS'cpp_type'
p118089
S'bool'
p118090
sS'default'
p118091
S'0'
p118092
sS'name'
p118093
S'unique_node_execute'
p118094
sS'required'
p118095
I00
sS'group_name'
p118096
Nsa(dp118097
S'description'
p118098
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118099
sS'cpp_type'
p118100
S'bool'
p118101
sS'default'
p118102
S'0'
p118103
sS'name'
p118104
S'use_displaced_mesh'
p118105
sS'required'
p118106
I00
sS'group_name'
p118107
S'Advanced'
p118108
sasS'name'
p118109
S'/UserObjects/NodalNormalsEvaluator'
p118110
sa(dp118111
S'description'
p118112
g3
sS'subblocks'
p118113
NsS'parameters'
p118114
(lp118115
(dp118116
S'description'
p118117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118118
sS'cpp_type'
p118119
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118120
sS'default'
p118121
g3
sS'name'
p118122
S'block'
p118123
sS'required'
p118124
I00
sS'group_name'
p118125
Nsa(dp118126
S'description'
p118127
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118128
sS'cpp_type'
p118129
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118130
sS'default'
p118131
g3
sS'name'
p118132
S'boundary'
p118133
sS'required'
p118134
I00
sS'group_name'
p118135
Nsa(dp118136
S'description'
p118137
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118138
sS'cpp_type'
p118139
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118140
sS'default'
p118141
g3
sS'name'
p118142
S'control_tags'
p118143
sS'required'
p118144
I00
sS'group_name'
p118145
S'Advanced'
p118146
sa(dp118147
S'description'
p118148
S"Node set ID which contains the nodes that are in 'corners'.\n"
p118149
sS'cpp_type'
p118150
S'BoundaryName'
p118151
sS'default'
p118152
g3
sS'name'
p118153
S'corner_boundary'
p118154
sS'required'
p118155
I00
sS'group_name'
p118156
Nsa(dp118157
S'description'
p118158
S'Set the enabled status of the MooseObject.\n'
p118159
sS'cpp_type'
p118160
S'bool'
p118161
sS'default'
p118162
S'1'
p118163
sS'name'
p118164
S'enable'
p118165
sS'required'
p118166
I00
sS'group_name'
p118167
S'Advanced'
p118168
sa(dp118169
S'name'
p118170
S'execute_on'
p118171
sS'cpp_type'
p118172
S'MultiMooseEnum'
p118173
sS'default'
p118174
S'TIMESTEP_END'
p118175
sS'description'
p118176
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118177
sS'required'
p118178
I00
sS'options'
p118179
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118180
sS'group_name'
p118181
Nsa(dp118182
S'description'
p118183
S'The seed for the master random number generator\n'
p118184
sS'cpp_type'
p118185
S'unsigned int'
p118186
sS'default'
p118187
S'0'
p118188
sS'name'
p118189
S'seed'
p118190
sS'required'
p118191
I00
sS'group_name'
p118192
S'Advanced'
p118193
sa(dp118194
S'description'
p118195
g3
sS'cpp_type'
p118196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118197
sS'default'
p118198
S'NodalNormalsPreprocessor'
p118199
sS'name'
p118200
S'type'
p118201
sS'required'
p118202
I00
sS'group_name'
p118203
Nsa(dp118204
S'description'
p118205
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118206
sS'cpp_type'
p118207
S'bool'
p118208
sS'default'
p118209
S'0'
p118210
sS'name'
p118211
S'use_displaced_mesh'
p118212
sS'required'
p118213
I00
sS'group_name'
p118214
S'Advanced'
p118215
sasS'name'
p118216
S'/UserObjects/NodalNormalsPreprocessor'
p118217
sa(dp118218
S'description'
p118219
g3
sS'subblocks'
p118220
NsS'parameters'
p118221
(lp118222
(dp118223
S'description'
p118224
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118225
sS'cpp_type'
p118226
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118227
sS'default'
p118228
g3
sS'name'
p118229
S'block'
p118230
sS'required'
p118231
I00
sS'group_name'
p118232
Nsa(dp118233
S'description'
p118234
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118235
sS'cpp_type'
p118236
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118237
sS'default'
p118238
g3
sS'name'
p118239
S'boundary'
p118240
sS'required'
p118241
I00
sS'group_name'
p118242
Nsa(dp118243
S'description'
p118244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118245
sS'cpp_type'
p118246
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118247
sS'default'
p118248
g3
sS'name'
p118249
S'control_tags'
p118250
sS'required'
p118251
I00
sS'group_name'
p118252
S'Advanced'
p118253
sa(dp118254
S'description'
p118255
S'Set the enabled status of the MooseObject.\n'
p118256
sS'cpp_type'
p118257
S'bool'
p118258
sS'default'
p118259
S'1'
p118260
sS'name'
p118261
S'enable'
p118262
sS'required'
p118263
I00
sS'group_name'
p118264
S'Advanced'
p118265
sa(dp118266
S'name'
p118267
S'execute_on'
p118268
sS'cpp_type'
p118269
S'MultiMooseEnum'
p118270
sS'default'
p118271
S'TIMESTEP_END'
p118272
sS'description'
p118273
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118274
sS'required'
p118275
I00
sS'options'
p118276
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118277
sS'group_name'
p118278
Nsa(dp118279
S'description'
p118280
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118281
sS'cpp_type'
p118282
S'std::vector<OutputName, std::allocator<OutputName> >'
p118283
sS'default'
p118284
g3
sS'name'
p118285
S'outputs'
p118286
sS'required'
p118287
I00
sS'group_name'
p118288
S'Advanced'
p118289
sa(dp118290
S'description'
p118291
S'The seed for the master random number generator\n'
p118292
sS'cpp_type'
p118293
S'unsigned int'
p118294
sS'default'
p118295
S'0'
p118296
sS'name'
p118297
S'seed'
p118298
sS'required'
p118299
I00
sS'group_name'
p118300
S'Advanced'
p118301
sa(dp118302
S'description'
p118303
g3
sS'cpp_type'
p118304
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118305
sS'default'
p118306
S'NodalProxyMaxValue'
p118307
sS'name'
p118308
S'type'
p118309
sS'required'
p118310
I00
sS'group_name'
p118311
Nsa(dp118312
S'description'
p118313
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118314
sS'cpp_type'
p118315
S'bool'
p118316
sS'default'
p118317
S'0'
p118318
sS'name'
p118319
S'unique_node_execute'
p118320
sS'required'
p118321
I00
sS'group_name'
p118322
Nsa(dp118323
S'description'
p118324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118325
sS'cpp_type'
p118326
S'bool'
p118327
sS'default'
p118328
S'0'
p118329
sS'name'
p118330
S'use_displaced_mesh'
p118331
sS'required'
p118332
I00
sS'group_name'
p118333
S'Advanced'
p118334
sa(dp118335
S'description'
p118336
S'The name of the variable that this postprocessor operates on\n'
p118337
sS'cpp_type'
p118338
S'std::vector<VariableName>'
p118339
sS'default'
p118340
g3
sS'name'
p118341
S'variable'
p118342
sS'required'
p118343
I01
sS'group_name'
p118344
NsasS'name'
p118345
S'/UserObjects/NodalProxyMaxValue'
p118346
sa(dp118347
S'description'
p118348
g3
sS'subblocks'
p118349
NsS'parameters'
p118350
(lp118351
(dp118352
S'description'
p118353
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118354
sS'cpp_type'
p118355
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118356
sS'default'
p118357
g3
sS'name'
p118358
S'block'
p118359
sS'required'
p118360
I00
sS'group_name'
p118361
Nsa(dp118362
S'description'
p118363
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118364
sS'cpp_type'
p118365
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118366
sS'default'
p118367
g3
sS'name'
p118368
S'boundary'
p118369
sS'required'
p118370
I00
sS'group_name'
p118371
Nsa(dp118372
S'description'
p118373
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118374
sS'cpp_type'
p118375
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118376
sS'default'
p118377
g3
sS'name'
p118378
S'control_tags'
p118379
sS'required'
p118380
I00
sS'group_name'
p118381
S'Advanced'
p118382
sa(dp118383
S'description'
p118384
S'Set the enabled status of the MooseObject.\n'
p118385
sS'cpp_type'
p118386
S'bool'
p118387
sS'default'
p118388
S'1'
p118389
sS'name'
p118390
S'enable'
p118391
sS'required'
p118392
I00
sS'group_name'
p118393
S'Advanced'
p118394
sa(dp118395
S'name'
p118396
S'execute_on'
p118397
sS'cpp_type'
p118398
S'MultiMooseEnum'
p118399
sS'default'
p118400
S'TIMESTEP_END'
p118401
sS'description'
p118402
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118403
sS'required'
p118404
I00
sS'options'
p118405
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118406
sS'group_name'
p118407
Nsa(dp118408
S'description'
p118409
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118410
sS'cpp_type'
p118411
S'std::vector<OutputName, std::allocator<OutputName> >'
p118412
sS'default'
p118413
g3
sS'name'
p118414
S'outputs'
p118415
sS'required'
p118416
I00
sS'group_name'
p118417
S'Advanced'
p118418
sa(dp118419
S'description'
p118420
S'The seed for the master random number generator\n'
p118421
sS'cpp_type'
p118422
S'unsigned int'
p118423
sS'default'
p118424
S'0'
p118425
sS'name'
p118426
S'seed'
p118427
sS'required'
p118428
I00
sS'group_name'
p118429
S'Advanced'
p118430
sa(dp118431
S'description'
p118432
g3
sS'cpp_type'
p118433
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118434
sS'default'
p118435
S'NodalSum'
p118436
sS'name'
p118437
S'type'
p118438
sS'required'
p118439
I00
sS'group_name'
p118440
Nsa(dp118441
S'description'
p118442
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118443
sS'cpp_type'
p118444
S'bool'
p118445
sS'default'
p118446
S'1'
p118447
sS'name'
p118448
S'unique_node_execute'
p118449
sS'required'
p118450
I00
sS'group_name'
p118451
Nsa(dp118452
S'description'
p118453
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118454
sS'cpp_type'
p118455
S'bool'
p118456
sS'default'
p118457
S'0'
p118458
sS'name'
p118459
S'use_displaced_mesh'
p118460
sS'required'
p118461
I00
sS'group_name'
p118462
S'Advanced'
p118463
sa(dp118464
S'description'
p118465
S'The name of the variable that this postprocessor operates on\n'
p118466
sS'cpp_type'
p118467
S'std::vector<VariableName>'
p118468
sS'default'
p118469
g3
sS'name'
p118470
S'variable'
p118471
sS'required'
p118472
I01
sS'group_name'
p118473
NsasS'name'
p118474
S'/UserObjects/NodalSum'
p118475
sa(dp118476
S'description'
p118477
g3
sS'subblocks'
p118478
NsS'parameters'
p118479
(lp118480
(dp118481
S'description'
p118482
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118483
sS'cpp_type'
p118484
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118485
sS'default'
p118486
g3
sS'name'
p118487
S'control_tags'
p118488
sS'required'
p118489
I00
sS'group_name'
p118490
S'Advanced'
p118491
sa(dp118492
S'description'
p118493
S'Set the enabled status of the MooseObject.\n'
p118494
sS'cpp_type'
p118495
S'bool'
p118496
sS'default'
p118497
S'1'
p118498
sS'name'
p118499
S'enable'
p118500
sS'required'
p118501
I00
sS'group_name'
p118502
S'Advanced'
p118503
sa(dp118504
S'name'
p118505
S'execute_on'
p118506
sS'cpp_type'
p118507
S'MultiMooseEnum'
p118508
sS'default'
p118509
S'TIMESTEP_END'
p118510
sS'description'
p118511
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118512
sS'required'
p118513
I00
sS'options'
p118514
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118515
sS'group_name'
p118516
Nsa(dp118517
S'description'
p118518
S'The ID of the node where we monitor\n'
p118519
sS'cpp_type'
p118520
S'unsigned int'
p118521
sS'default'
p118522
g3
sS'name'
p118523
S'nodeid'
p118524
sS'required'
p118525
I01
sS'group_name'
p118526
Nsa(dp118527
S'description'
p118528
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118529
sS'cpp_type'
p118530
S'std::vector<OutputName, std::allocator<OutputName> >'
p118531
sS'default'
p118532
g3
sS'name'
p118533
S'outputs'
p118534
sS'required'
p118535
I00
sS'group_name'
p118536
S'Advanced'
p118537
sa(dp118538
S'description'
p118539
S'A scale factor to be applied to the variable\n'
p118540
sS'cpp_type'
p118541
S'double'
p118542
sS'default'
p118543
S'1'
p118544
sS'name'
p118545
S'scale_factor'
p118546
sS'required'
p118547
I00
sS'group_name'
p118548
Nsa(dp118549
S'description'
p118550
g3
sS'cpp_type'
p118551
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118552
sS'default'
p118553
S'NodalVariableValue'
p118554
sS'name'
p118555
S'type'
p118556
sS'required'
p118557
I00
sS'group_name'
p118558
Nsa(dp118559
S'description'
p118560
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118561
sS'cpp_type'
p118562
S'bool'
p118563
sS'default'
p118564
S'0'
p118565
sS'name'
p118566
S'use_displaced_mesh'
p118567
sS'required'
p118568
I00
sS'group_name'
p118569
S'Advanced'
p118570
sa(dp118571
S'description'
p118572
S'The variable to be monitored\n'
p118573
sS'cpp_type'
p118574
S'VariableName'
p118575
sS'default'
p118576
g3
sS'name'
p118577
S'variable'
p118578
sS'required'
p118579
I01
sS'group_name'
p118580
NsasS'name'
p118581
S'/UserObjects/NodalVariableValue'
p118582
sa(dp118583
S'description'
p118584
g3
sS'subblocks'
p118585
NsS'parameters'
p118586
(lp118587
(dp118588
S'description'
p118589
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118590
sS'cpp_type'
p118591
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118592
sS'default'
p118593
g3
sS'name'
p118594
S'control_tags'
p118595
sS'required'
p118596
I00
sS'group_name'
p118597
S'Advanced'
p118598
sa(dp118599
S'description'
p118600
S'Set the enabled status of the MooseObject.\n'
p118601
sS'cpp_type'
p118602
S'bool'
p118603
sS'default'
p118604
S'1'
p118605
sS'name'
p118606
S'enable'
p118607
sS'required'
p118608
I00
sS'group_name'
p118609
S'Advanced'
p118610
sa(dp118611
S'name'
p118612
S'execute_on'
p118613
sS'cpp_type'
p118614
S'MultiMooseEnum'
p118615
sS'default'
p118616
S'TIMESTEP_END'
p118617
sS'description'
p118618
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118619
sS'required'
p118620
I00
sS'options'
p118621
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118622
sS'group_name'
p118623
Nsa(dp118624
S'description'
p118625
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118626
sS'cpp_type'
p118627
S'std::vector<OutputName, std::allocator<OutputName> >'
p118628
sS'default'
p118629
g3
sS'name'
p118630
S'outputs'
p118631
sS'required'
p118632
I00
sS'group_name'
p118633
S'Advanced'
p118634
sa(dp118635
S'name'
p118636
S'system'
p118637
sS'cpp_type'
p118638
S'MooseEnum'
p118639
sS'default'
p118640
S'ALL'
p118641
sS'description'
p118642
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p118643
sS'required'
p118644
I00
sS'options'
p118645
S'NL AUX ALL'
p118646
sS'group_name'
p118647
Nsa(dp118648
S'description'
p118649
g3
sS'cpp_type'
p118650
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118651
sS'default'
p118652
S'NumDOFs'
p118653
sS'name'
p118654
S'type'
p118655
sS'required'
p118656
I00
sS'group_name'
p118657
Nsa(dp118658
S'description'
p118659
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118660
sS'cpp_type'
p118661
S'bool'
p118662
sS'default'
p118663
S'0'
p118664
sS'name'
p118665
S'use_displaced_mesh'
p118666
sS'required'
p118667
I00
sS'group_name'
p118668
S'Advanced'
p118669
sasS'name'
p118670
S'/UserObjects/NumDOFs'
p118671
sa(dp118672
S'description'
p118673
g3
sS'subblocks'
p118674
NsS'parameters'
p118675
(lp118676
(dp118677
S'description'
p118678
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118679
sS'cpp_type'
p118680
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118681
sS'default'
p118682
g3
sS'name'
p118683
S'control_tags'
p118684
sS'required'
p118685
I00
sS'group_name'
p118686
S'Advanced'
p118687
sa(dp118688
S'name'
p118689
S'elem_filter'
p118690
sS'cpp_type'
p118691
S'MooseEnum'
p118692
sS'default'
p118693
S'active'
p118694
sS'description'
p118695
S'The type of elements to include in the count (active, total). Default == active\n'
p118696
sS'required'
p118697
I00
sS'options'
p118698
S'active total'
p118699
sS'group_name'
p118700
Nsa(dp118701
S'description'
p118702
S'Set the enabled status of the MooseObject.\n'
p118703
sS'cpp_type'
p118704
S'bool'
p118705
sS'default'
p118706
S'1'
p118707
sS'name'
p118708
S'enable'
p118709
sS'required'
p118710
I00
sS'group_name'
p118711
S'Advanced'
p118712
sa(dp118713
S'name'
p118714
S'execute_on'
p118715
sS'cpp_type'
p118716
S'MultiMooseEnum'
p118717
sS'default'
p118718
S'TIMESTEP_END'
p118719
sS'description'
p118720
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118721
sS'required'
p118722
I00
sS'options'
p118723
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118724
sS'group_name'
p118725
Nsa(dp118726
S'description'
p118727
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118728
sS'cpp_type'
p118729
S'std::vector<OutputName, std::allocator<OutputName> >'
p118730
sS'default'
p118731
g3
sS'name'
p118732
S'outputs'
p118733
sS'required'
p118734
I00
sS'group_name'
p118735
S'Advanced'
p118736
sa(dp118737
S'description'
p118738
g3
sS'cpp_type'
p118739
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118740
sS'default'
p118741
S'NumElems'
p118742
sS'name'
p118743
S'type'
p118744
sS'required'
p118745
I00
sS'group_name'
p118746
Nsa(dp118747
S'description'
p118748
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118749
sS'cpp_type'
p118750
S'bool'
p118751
sS'default'
p118752
S'0'
p118753
sS'name'
p118754
S'use_displaced_mesh'
p118755
sS'required'
p118756
I00
sS'group_name'
p118757
S'Advanced'
p118758
sasS'name'
p118759
S'/UserObjects/NumElems'
p118760
sa(dp118761
S'description'
p118762
g3
sS'subblocks'
p118763
NsS'parameters'
p118764
(lp118765
(dp118766
S'description'
p118767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118768
sS'cpp_type'
p118769
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118770
sS'default'
p118771
g3
sS'name'
p118772
S'control_tags'
p118773
sS'required'
p118774
I00
sS'group_name'
p118775
S'Advanced'
p118776
sa(dp118777
S'description'
p118778
S'Set the enabled status of the MooseObject.\n'
p118779
sS'cpp_type'
p118780
S'bool'
p118781
sS'default'
p118782
S'1'
p118783
sS'name'
p118784
S'enable'
p118785
sS'required'
p118786
I00
sS'group_name'
p118787
S'Advanced'
p118788
sa(dp118789
S'name'
p118790
S'execute_on'
p118791
sS'cpp_type'
p118792
S'MultiMooseEnum'
p118793
sS'default'
p118794
S'TIMESTEP_END'
p118795
sS'description'
p118796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118797
sS'required'
p118798
I00
sS'options'
p118799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118800
sS'group_name'
p118801
Nsa(dp118802
S'description'
p118803
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118804
sS'cpp_type'
p118805
S'std::vector<OutputName, std::allocator<OutputName> >'
p118806
sS'default'
p118807
g3
sS'name'
p118808
S'outputs'
p118809
sS'required'
p118810
I00
sS'group_name'
p118811
S'Advanced'
p118812
sa(dp118813
S'description'
p118814
g3
sS'cpp_type'
p118815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118816
sS'default'
p118817
S'NumLinearIterations'
p118818
sS'name'
p118819
S'type'
p118820
sS'required'
p118821
I00
sS'group_name'
p118822
Nsa(dp118823
S'description'
p118824
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118825
sS'cpp_type'
p118826
S'bool'
p118827
sS'default'
p118828
S'0'
p118829
sS'name'
p118830
S'use_displaced_mesh'
p118831
sS'required'
p118832
I00
sS'group_name'
p118833
S'Advanced'
p118834
sasS'name'
p118835
S'/UserObjects/NumLinearIterations'
p118836
sa(dp118837
S'description'
p118838
g3
sS'subblocks'
p118839
NsS'parameters'
p118840
(lp118841
(dp118842
S'description'
p118843
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118844
sS'cpp_type'
p118845
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118846
sS'default'
p118847
g3
sS'name'
p118848
S'control_tags'
p118849
sS'required'
p118850
I00
sS'group_name'
p118851
S'Advanced'
p118852
sa(dp118853
S'description'
p118854
S'Set the enabled status of the MooseObject.\n'
p118855
sS'cpp_type'
p118856
S'bool'
p118857
sS'default'
p118858
S'1'
p118859
sS'name'
p118860
S'enable'
p118861
sS'required'
p118862
I00
sS'group_name'
p118863
S'Advanced'
p118864
sa(dp118865
S'name'
p118866
S'execute_on'
p118867
sS'cpp_type'
p118868
S'MultiMooseEnum'
p118869
sS'default'
p118870
S'TIMESTEP_END'
p118871
sS'description'
p118872
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118873
sS'required'
p118874
I00
sS'options'
p118875
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118876
sS'group_name'
p118877
Nsa(dp118878
S'description'
p118879
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118880
sS'cpp_type'
p118881
S'std::vector<OutputName, std::allocator<OutputName> >'
p118882
sS'default'
p118883
g3
sS'name'
p118884
S'outputs'
p118885
sS'required'
p118886
I00
sS'group_name'
p118887
S'Advanced'
p118888
sa(dp118889
S'description'
p118890
g3
sS'cpp_type'
p118891
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118892
sS'default'
p118893
S'NumNodes'
p118894
sS'name'
p118895
S'type'
p118896
sS'required'
p118897
I00
sS'group_name'
p118898
Nsa(dp118899
S'description'
p118900
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118901
sS'cpp_type'
p118902
S'bool'
p118903
sS'default'
p118904
S'0'
p118905
sS'name'
p118906
S'use_displaced_mesh'
p118907
sS'required'
p118908
I00
sS'group_name'
p118909
S'Advanced'
p118910
sasS'name'
p118911
S'/UserObjects/NumNodes'
p118912
sa(dp118913
S'description'
p118914
g3
sS'subblocks'
p118915
NsS'parameters'
p118916
(lp118917
(dp118918
S'description'
p118919
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p118920
sS'cpp_type'
p118921
S'bool'
p118922
sS'default'
p118923
S'0'
p118924
sS'name'
p118925
S'accumulate_over_step'
p118926
sS'required'
p118927
I00
sS'group_name'
p118928
Nsa(dp118929
S'description'
p118930
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118931
sS'cpp_type'
p118932
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118933
sS'default'
p118934
g3
sS'name'
p118935
S'control_tags'
p118936
sS'required'
p118937
I00
sS'group_name'
p118938
S'Advanced'
p118939
sa(dp118940
S'description'
p118941
S'Set the enabled status of the MooseObject.\n'
p118942
sS'cpp_type'
p118943
S'bool'
p118944
sS'default'
p118945
S'1'
p118946
sS'name'
p118947
S'enable'
p118948
sS'required'
p118949
I00
sS'group_name'
p118950
S'Advanced'
p118951
sa(dp118952
S'name'
p118953
S'execute_on'
p118954
sS'cpp_type'
p118955
S'MultiMooseEnum'
p118956
sS'default'
p118957
S'TIMESTEP_END'
p118958
sS'description'
p118959
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118960
sS'required'
p118961
I00
sS'options'
p118962
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118963
sS'group_name'
p118964
Nsa(dp118965
S'description'
p118966
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118967
sS'cpp_type'
p118968
S'std::vector<OutputName, std::allocator<OutputName> >'
p118969
sS'default'
p118970
g3
sS'name'
p118971
S'outputs'
p118972
sS'required'
p118973
I00
sS'group_name'
p118974
S'Advanced'
p118975
sa(dp118976
S'description'
p118977
g3
sS'cpp_type'
p118978
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118979
sS'default'
p118980
S'NumNonlinearIterations'
p118981
sS'name'
p118982
S'type'
p118983
sS'required'
p118984
I00
sS'group_name'
p118985
Nsa(dp118986
S'description'
p118987
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118988
sS'cpp_type'
p118989
S'bool'
p118990
sS'default'
p118991
S'0'
p118992
sS'name'
p118993
S'use_displaced_mesh'
p118994
sS'required'
p118995
I00
sS'group_name'
p118996
S'Advanced'
p118997
sasS'name'
p118998
S'/UserObjects/NumNonlinearIterations'
p118999
sa(dp119000
S'description'
p119001
g3
sS'subblocks'
p119002
NsS'parameters'
p119003
(lp119004
(dp119005
S'description'
p119006
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119007
sS'cpp_type'
p119008
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119009
sS'default'
p119010
g3
sS'name'
p119011
S'control_tags'
p119012
sS'required'
p119013
I00
sS'group_name'
p119014
S'Advanced'
p119015
sa(dp119016
S'description'
p119017
S'Set the enabled status of the MooseObject.\n'
p119018
sS'cpp_type'
p119019
S'bool'
p119020
sS'default'
p119021
S'1'
p119022
sS'name'
p119023
S'enable'
p119024
sS'required'
p119025
I00
sS'group_name'
p119026
S'Advanced'
p119027
sa(dp119028
S'name'
p119029
S'execute_on'
p119030
sS'cpp_type'
p119031
S'MultiMooseEnum'
p119032
sS'default'
p119033
S'TIMESTEP_END'
p119034
sS'description'
p119035
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119036
sS'required'
p119037
I00
sS'options'
p119038
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119039
sS'group_name'
p119040
Nsa(dp119041
S'description'
p119042
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119043
sS'cpp_type'
p119044
S'std::vector<OutputName, std::allocator<OutputName> >'
p119045
sS'default'
p119046
g3
sS'name'
p119047
S'outputs'
p119048
sS'required'
p119049
I00
sS'group_name'
p119050
S'Advanced'
p119051
sa(dp119052
S'description'
p119053
g3
sS'cpp_type'
p119054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119055
sS'default'
p119056
S'NumPicardIterations'
p119057
sS'name'
p119058
S'type'
p119059
sS'required'
p119060
I00
sS'group_name'
p119061
Nsa(dp119062
S'description'
p119063
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119064
sS'cpp_type'
p119065
S'bool'
p119066
sS'default'
p119067
S'0'
p119068
sS'name'
p119069
S'use_displaced_mesh'
p119070
sS'required'
p119071
I00
sS'group_name'
p119072
S'Advanced'
p119073
sasS'name'
p119074
S'/UserObjects/NumPicardIterations'
p119075
sa(dp119076
S'description'
p119077
g3
sS'subblocks'
p119078
NsS'parameters'
p119079
(lp119080
(dp119081
S'description'
p119082
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119083
sS'cpp_type'
p119084
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119085
sS'default'
p119086
g3
sS'name'
p119087
S'control_tags'
p119088
sS'required'
p119089
I00
sS'group_name'
p119090
S'Advanced'
p119091
sa(dp119092
S'description'
p119093
S'Set the enabled status of the MooseObject.\n'
p119094
sS'cpp_type'
p119095
S'bool'
p119096
sS'default'
p119097
S'1'
p119098
sS'name'
p119099
S'enable'
p119100
sS'required'
p119101
I00
sS'group_name'
p119102
S'Advanced'
p119103
sa(dp119104
S'name'
p119105
S'execute_on'
p119106
sS'cpp_type'
p119107
S'MultiMooseEnum'
p119108
sS'default'
p119109
S'TIMESTEP_END'
p119110
sS'description'
p119111
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119112
sS'required'
p119113
I00
sS'options'
p119114
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119115
sS'group_name'
p119116
Nsa(dp119117
S'description'
p119118
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119119
sS'cpp_type'
p119120
S'std::vector<OutputName, std::allocator<OutputName> >'
p119121
sS'default'
p119122
g3
sS'name'
p119123
S'outputs'
p119124
sS'required'
p119125
I00
sS'group_name'
p119126
S'Advanced'
p119127
sa(dp119128
S'description'
p119129
g3
sS'cpp_type'
p119130
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119131
sS'default'
p119132
S'NumResidualEvaluations'
p119133
sS'name'
p119134
S'type'
p119135
sS'required'
p119136
I00
sS'group_name'
p119137
Nsa(dp119138
S'description'
p119139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119140
sS'cpp_type'
p119141
S'bool'
p119142
sS'default'
p119143
S'0'
p119144
sS'name'
p119145
S'use_displaced_mesh'
p119146
sS'required'
p119147
I00
sS'group_name'
p119148
S'Advanced'
p119149
sasS'name'
p119150
S'/UserObjects/NumResidualEvaluations'
p119151
sa(dp119152
S'description'
p119153
g3
sS'subblocks'
p119154
NsS'parameters'
p119155
(lp119156
(dp119157
S'description'
p119158
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119159
sS'cpp_type'
p119160
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119161
sS'default'
p119162
g3
sS'name'
p119163
S'control_tags'
p119164
sS'required'
p119165
I00
sS'group_name'
p119166
S'Advanced'
p119167
sa(dp119168
S'description'
p119169
S'Set the enabled status of the MooseObject.\n'
p119170
sS'cpp_type'
p119171
S'bool'
p119172
sS'default'
p119173
S'1'
p119174
sS'name'
p119175
S'enable'
p119176
sS'required'
p119177
I00
sS'group_name'
p119178
S'Advanced'
p119179
sa(dp119180
S'name'
p119181
S'execute_on'
p119182
sS'cpp_type'
p119183
S'MultiMooseEnum'
p119184
sS'default'
p119185
S'TIMESTEP_END'
p119186
sS'description'
p119187
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119188
sS'required'
p119189
I00
sS'options'
p119190
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119191
sS'group_name'
p119192
Nsa(dp119193
S'description'
p119194
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119195
sS'cpp_type'
p119196
S'std::vector<OutputName, std::allocator<OutputName> >'
p119197
sS'default'
p119198
g3
sS'name'
p119199
S'outputs'
p119200
sS'required'
p119201
I00
sS'group_name'
p119202
S'Advanced'
p119203
sa(dp119204
S'name'
p119205
S'system'
p119206
sS'cpp_type'
p119207
S'MooseEnum'
p119208
sS'default'
p119209
S'nonlinear'
p119210
sS'description'
p119211
S'The system for which you want to print the number of variables.\n'
p119212
sS'required'
p119213
I00
sS'options'
p119214
S'nonlinear auxiliary'
p119215
sS'group_name'
p119216
Nsa(dp119217
S'description'
p119218
g3
sS'cpp_type'
p119219
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119220
sS'default'
p119221
S'NumVars'
p119222
sS'name'
p119223
S'type'
p119224
sS'required'
p119225
I00
sS'group_name'
p119226
Nsa(dp119227
S'description'
p119228
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119229
sS'cpp_type'
p119230
S'bool'
p119231
sS'default'
p119232
S'0'
p119233
sS'name'
p119234
S'use_displaced_mesh'
p119235
sS'required'
p119236
I00
sS'group_name'
p119237
S'Advanced'
p119238
sasS'name'
p119239
S'/UserObjects/NumVars'
p119240
sa(dp119241
S'description'
p119242
g3
sS'subblocks'
p119243
NsS'parameters'
p119244
(lp119245
(dp119246
S'description'
p119247
S'The list of block ids (SubdomainID) that this object will be applied\n'
p119248
sS'cpp_type'
p119249
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p119250
sS'default'
p119251
g3
sS'name'
p119252
S'block'
p119253
sS'required'
p119254
I00
sS'group_name'
p119255
Nsa(dp119256
S'description'
p119257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119258
sS'cpp_type'
p119259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119260
sS'default'
p119261
g3
sS'name'
p119262
S'control_tags'
p119263
sS'required'
p119264
I00
sS'group_name'
p119265
S'Advanced'
p119266
sa(dp119267
S'description'
p119268
S'Set the enabled status of the MooseObject.\n'
p119269
sS'cpp_type'
p119270
S'bool'
p119271
sS'default'
p119272
S'1'
p119273
sS'name'
p119274
S'enable'
p119275
sS'required'
p119276
I00
sS'group_name'
p119277
S'Advanced'
p119278
sa(dp119279
S'name'
p119280
S'execute_on'
p119281
sS'cpp_type'
p119282
S'MultiMooseEnum'
p119283
sS'default'
p119284
S'TIMESTEP_END'
p119285
sS'description'
p119286
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119287
sS'required'
p119288
I00
sS'options'
p119289
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119290
sS'group_name'
p119291
Nsa(dp119292
S'description'
p119293
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119294
sS'cpp_type'
p119295
S'std::vector<OutputName, std::allocator<OutputName> >'
p119296
sS'default'
p119297
g3
sS'name'
p119298
S'outputs'
p119299
sS'required'
p119300
I00
sS'group_name'
p119301
S'Advanced'
p119302
sa(dp119303
S'description'
p119304
S'The seed for the master random number generator\n'
p119305
sS'cpp_type'
p119306
S'unsigned int'
p119307
sS'default'
p119308
S'0'
p119309
sS'name'
p119310
S'seed'
p119311
sS'required'
p119312
I00
sS'group_name'
p119313
S'Advanced'
p119314
sa(dp119315
S'description'
p119316
S'Temperature of simulation\n'
p119317
sS'cpp_type'
p119318
S'double'
p119319
sS'default'
p119320
S'1833'
p119321
sS'name'
p119322
S'temp'
p119323
sS'required'
p119324
I00
sS'group_name'
p119325
Nsa(dp119326
S'description'
p119327
g3
sS'cpp_type'
p119328
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119329
sS'default'
p119330
S'PFCElementEnergyIntegral'
p119331
sS'name'
p119332
S'type'
p119333
sS'required'
p119334
I00
sS'group_name'
p119335
Nsa(dp119336
S'description'
p119337
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119338
sS'cpp_type'
p119339
S'bool'
p119340
sS'default'
p119341
S'0'
p119342
sS'name'
p119343
S'use_displaced_mesh'
p119344
sS'required'
p119345
I00
sS'group_name'
p119346
S'Advanced'
p119347
sa(dp119348
S'description'
p119349
S'The name of the variable that this object operates on\n'
p119350
sS'cpp_type'
p119351
S'VariableName'
p119352
sS'default'
p119353
g3
sS'name'
p119354
S'variable'
p119355
sS'required'
p119356
I01
sS'group_name'
p119357
NsasS'name'
p119358
S'/UserObjects/PFCElementEnergyIntegral'
p119359
sa(dp119360
S'description'
p119361
g3
sS'subblocks'
p119362
NsS'parameters'
p119363
(lp119364
(dp119365
S'description'
p119366
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119367
sS'cpp_type'
p119368
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119369
sS'default'
p119370
g3
sS'name'
p119371
S'control_tags'
p119372
sS'required'
p119373
I00
sS'group_name'
p119374
S'Advanced'
p119375
sa(dp119376
S'description'
p119377
S'Set the enabled status of the MooseObject.\n'
p119378
sS'cpp_type'
p119379
S'bool'
p119380
sS'default'
p119381
S'1'
p119382
sS'name'
p119383
S'enable'
p119384
sS'required'
p119385
I00
sS'group_name'
p119386
S'Advanced'
p119387
sa(dp119388
S'name'
p119389
S'execute_on'
p119390
sS'cpp_type'
p119391
S'MultiMooseEnum'
p119392
sS'default'
p119393
S'TIMESTEP_END'
p119394
sS'description'
p119395
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119396
sS'required'
p119397
I00
sS'options'
p119398
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119399
sS'group_name'
p119400
Nsa(dp119401
S'description'
p119402
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119403
sS'cpp_type'
p119404
S'std::vector<OutputName, std::allocator<OutputName> >'
p119405
sS'default'
p119406
g3
sS'name'
p119407
S'outputs'
p119408
sS'required'
p119409
I00
sS'group_name'
p119410
S'Advanced'
p119411
sa(dp119412
S'description'
p119413
S'The name of the postprocessor used for exit criterion\n'
p119414
sS'cpp_type'
p119415
S'PostprocessorName'
p119416
sS'default'
p119417
g3
sS'name'
p119418
S'postprocessor'
p119419
sS'required'
p119420
I01
sS'group_name'
p119421
Nsa(dp119422
S'description'
p119423
g3
sS'cpp_type'
p119424
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119425
sS'default'
p119426
S'PercentChangePostprocessor'
p119427
sS'name'
p119428
S'type'
p119429
sS'required'
p119430
I00
sS'group_name'
p119431
Nsa(dp119432
S'description'
p119433
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119434
sS'cpp_type'
p119435
S'bool'
p119436
sS'default'
p119437
S'0'
p119438
sS'name'
p119439
S'use_displaced_mesh'
p119440
sS'required'
p119441
I00
sS'group_name'
p119442
S'Advanced'
p119443
sasS'name'
p119444
S'/UserObjects/PercentChangePostprocessor'
p119445
sa(dp119446
S'description'
p119447
g3
sS'subblocks'
p119448
NsS'parameters'
p119449
(lp119450
(dp119451
S'description'
p119452
S'The category or "Header" for the event\n'
p119453
sS'cpp_type'
p119454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119455
sS'default'
p119456
S'Execution'
p119457
sS'name'
p119458
S'category'
p119459
sS'required'
p119460
I00
sS'group_name'
p119461
Nsa(dp119462
S'name'
p119463
S'column'
p119464
sS'cpp_type'
p119465
S'MooseEnum'
p119466
sS'default'
p119467
S'total_time_with_sub'
p119468
sS'description'
p119469
S'The column you want the value of (Default: total_time_with_sub).\n'
p119470
sS'required'
p119471
I00
sS'options'
p119472
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p119473
sS'group_name'
p119474
Nsa(dp119475
S'description'
p119476
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119477
sS'cpp_type'
p119478
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119479
sS'default'
p119480
g3
sS'name'
p119481
S'control_tags'
p119482
sS'required'
p119483
I00
sS'group_name'
p119484
S'Advanced'
p119485
sa(dp119486
S'description'
p119487
S'Set the enabled status of the MooseObject.\n'
p119488
sS'cpp_type'
p119489
S'bool'
p119490
sS'default'
p119491
S'1'
p119492
sS'name'
p119493
S'enable'
p119494
sS'required'
p119495
I00
sS'group_name'
p119496
S'Advanced'
p119497
sa(dp119498
S'description'
p119499
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p119500
sS'cpp_type'
p119501
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119502
sS'default'
p119503
g3
sS'name'
p119504
S'event'
p119505
sS'required'
p119506
I01
sS'group_name'
p119507
Nsa(dp119508
S'name'
p119509
S'execute_on'
p119510
sS'cpp_type'
p119511
S'MultiMooseEnum'
p119512
sS'default'
p119513
S'TIMESTEP_END'
p119514
sS'description'
p119515
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119516
sS'required'
p119517
I00
sS'options'
p119518
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119519
sS'group_name'
p119520
Nsa(dp119521
S'description'
p119522
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119523
sS'cpp_type'
p119524
S'std::vector<OutputName, std::allocator<OutputName> >'
p119525
sS'default'
p119526
g3
sS'name'
p119527
S'outputs'
p119528
sS'required'
p119529
I00
sS'group_name'
p119530
S'Advanced'
p119531
sa(dp119532
S'description'
p119533
g3
sS'cpp_type'
p119534
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119535
sS'default'
p119536
S'PerformanceData'
p119537
sS'name'
p119538
S'type'
p119539
sS'required'
p119540
I00
sS'group_name'
p119541
Nsa(dp119542
S'description'
p119543
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119544
sS'cpp_type'
p119545
S'bool'
p119546
sS'default'
p119547
S'0'
p119548
sS'name'
p119549
S'use_displaced_mesh'
p119550
sS'required'
p119551
I00
sS'group_name'
p119552
S'Advanced'
p119553
sasS'name'
p119554
S'/UserObjects/PerformanceData'
p119555
sa(dp119556
S'description'
p119557
g3
sS'subblocks'
p119558
NsS'parameters'
p119559
(lp119560
(dp119561
S'description'
p119562
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119563
sS'cpp_type'
p119564
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119565
sS'default'
p119566
g3
sS'name'
p119567
S'control_tags'
p119568
sS'required'
p119569
I00
sS'group_name'
p119570
S'Advanced'
p119571
sa(dp119572
S'description'
p119573
S'Set the enabled status of the MooseObject.\n'
p119574
sS'cpp_type'
p119575
S'bool'
p119576
sS'default'
p119577
S'1'
p119578
sS'name'
p119579
S'enable'
p119580
sS'required'
p119581
I00
sS'group_name'
p119582
S'Advanced'
p119583
sa(dp119584
S'name'
p119585
S'execute_on'
p119586
sS'cpp_type'
p119587
S'MultiMooseEnum'
p119588
sS'default'
p119589
S'TIMESTEP_END'
p119590
sS'description'
p119591
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119592
sS'required'
p119593
I00
sS'options'
p119594
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119595
sS'group_name'
p119596
Nsa(dp119597
S'description'
p119598
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119599
sS'cpp_type'
p119600
S'std::vector<OutputName, std::allocator<OutputName> >'
p119601
sS'default'
p119602
g3
sS'name'
p119603
S'outputs'
p119604
sS'required'
p119605
I00
sS'group_name'
p119606
S'Advanced'
p119607
sa(dp119608
S'description'
p119609
S'The physical point where the solution will be evaluated.\n'
p119610
sS'cpp_type'
p119611
S'libMesh::Point'
p119612
sS'default'
p119613
g3
sS'name'
p119614
S'point'
p119615
sS'required'
p119616
I01
sS'group_name'
p119617
Nsa(dp119618
S'description'
p119619
g3
sS'cpp_type'
p119620
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119621
sS'default'
p119622
S'PointValue'
p119623
sS'name'
p119624
S'type'
p119625
sS'required'
p119626
I00
sS'group_name'
p119627
Nsa(dp119628
S'description'
p119629
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119630
sS'cpp_type'
p119631
S'bool'
p119632
sS'default'
p119633
S'0'
p119634
sS'name'
p119635
S'use_displaced_mesh'
p119636
sS'required'
p119637
I00
sS'group_name'
p119638
S'Advanced'
p119639
sa(dp119640
S'description'
p119641
S'The name of the variable that this postprocessor operates on.\n'
p119642
sS'cpp_type'
p119643
S'VariableName'
p119644
sS'default'
p119645
g3
sS'name'
p119646
S'variable'
p119647
sS'required'
p119648
I01
sS'group_name'
p119649
NsasS'name'
p119650
S'/UserObjects/PointValue'
p119651
sa(dp119652
S'description'
p119653
S'Assign random euler angles for each grain.\n'
p119654
sS'subblocks'
p119655
NsS'parameters'
p119656
(lp119657
(dp119658
S'description'
p119659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119660
sS'cpp_type'
p119661
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119662
sS'default'
p119663
g3
sS'name'
p119664
S'control_tags'
p119665
sS'required'
p119666
I00
sS'group_name'
p119667
S'Advanced'
p119668
sa(dp119669
S'description'
p119670
S'Set the enabled status of the MooseObject.\n'
p119671
sS'cpp_type'
p119672
S'bool'
p119673
sS'default'
p119674
S'1'
p119675
sS'name'
p119676
S'enable'
p119677
sS'required'
p119678
I00
sS'group_name'
p119679
S'Advanced'
p119680
sa(dp119681
S'name'
p119682
S'execute_on'
p119683
sS'cpp_type'
p119684
S'MultiMooseEnum'
p119685
sS'default'
p119686
S'TIMESTEP_END'
p119687
sS'description'
p119688
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119689
sS'required'
p119690
I00
sS'options'
p119691
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119692
sS'group_name'
p119693
Nsa(dp119694
S'description'
p119695
S'The FeatureFloodCount UserObject to get values from.\n'
p119696
sS'cpp_type'
p119697
S'UserObjectName'
p119698
sS'default'
p119699
g3
sS'name'
p119700
S'grain_tracker_object'
p119701
sS'required'
p119702
I01
sS'group_name'
p119703
Nsa(dp119704
S'description'
p119705
S'Seed value for the random number generator\n'
p119706
sS'cpp_type'
p119707
S'unsigned int'
p119708
sS'default'
p119709
S'0'
p119710
sS'name'
p119711
S'seed'
p119712
sS'required'
p119713
I00
sS'group_name'
p119714
Nsa(dp119715
S'description'
p119716
g3
sS'cpp_type'
p119717
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119718
sS'default'
p119719
S'RandomEulerAngleProvider'
p119720
sS'name'
p119721
S'type'
p119722
sS'required'
p119723
I00
sS'group_name'
p119724
Nsa(dp119725
S'description'
p119726
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119727
sS'cpp_type'
p119728
S'bool'
p119729
sS'default'
p119730
S'0'
p119731
sS'name'
p119732
S'use_displaced_mesh'
p119733
sS'required'
p119734
I00
sS'group_name'
p119735
S'Advanced'
p119736
sasS'name'
p119737
S'/UserObjects/RandomEulerAngleProvider'
p119738
sa(dp119739
S'description'
p119740
g3
sS'subblocks'
p119741
NsS'parameters'
p119742
(lp119743
(dp119744
S'description'
p119745
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119746
sS'cpp_type'
p119747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119748
sS'default'
p119749
g3
sS'name'
p119750
S'control_tags'
p119751
sS'required'
p119752
I00
sS'group_name'
p119753
S'Advanced'
p119754
sa(dp119755
S'description'
p119756
S'The default value\n'
p119757
sS'cpp_type'
p119758
S'double'
p119759
sS'default'
p119760
g3
sS'name'
p119761
S'default'
p119762
sS'required'
p119763
I00
sS'group_name'
p119764
Nsa(dp119765
S'description'
p119766
S'Set the enabled status of the MooseObject.\n'
p119767
sS'cpp_type'
p119768
S'bool'
p119769
sS'default'
p119770
S'1'
p119771
sS'name'
p119772
S'enable'
p119773
sS'required'
p119774
I00
sS'group_name'
p119775
S'Advanced'
p119776
sa(dp119777
S'name'
p119778
S'execute_on'
p119779
sS'cpp_type'
p119780
S'MultiMooseEnum'
p119781
sS'default'
p119782
S'TIMESTEP_END'
p119783
sS'description'
p119784
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119785
sS'required'
p119786
I00
sS'options'
p119787
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119788
sS'group_name'
p119789
Nsa(dp119790
S'description'
p119791
S'Initialize the old postprocessor value with the default value\n'
p119792
sS'cpp_type'
p119793
S'bool'
p119794
sS'default'
p119795
S'1'
p119796
sS'name'
p119797
S'initialize_old'
p119798
sS'required'
p119799
I00
sS'group_name'
p119800
Nsa(dp119801
S'description'
p119802
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119803
sS'cpp_type'
p119804
S'std::vector<OutputName, std::allocator<OutputName> >'
p119805
sS'default'
p119806
g3
sS'name'
p119807
S'outputs'
p119808
sS'required'
p119809
I00
sS'group_name'
p119810
S'Advanced'
p119811
sa(dp119812
S'description'
p119813
g3
sS'cpp_type'
p119814
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119815
sS'default'
p119816
S'Receiver'
p119817
sS'name'
p119818
S'type'
p119819
sS'required'
p119820
I00
sS'group_name'
p119821
Nsa(dp119822
S'description'
p119823
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119824
sS'cpp_type'
p119825
S'bool'
p119826
sS'default'
p119827
S'0'
p119828
sS'name'
p119829
S'use_displaced_mesh'
p119830
sS'required'
p119831
I00
sS'group_name'
p119832
S'Advanced'
p119833
sasS'name'
p119834
S'/UserObjects/Receiver'
p119835
sa(dp119836
S'description'
p119837
g3
sS'subblocks'
p119838
NsS'parameters'
p119839
(lp119840
(dp119841
S'description'
p119842
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119843
sS'cpp_type'
p119844
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119845
sS'default'
p119846
g3
sS'name'
p119847
S'control_tags'
p119848
sS'required'
p119849
I00
sS'group_name'
p119850
S'Advanced'
p119851
sa(dp119852
S'description'
p119853
S'Set the enabled status of the MooseObject.\n'
p119854
sS'cpp_type'
p119855
S'bool'
p119856
sS'default'
p119857
S'1'
p119858
sS'name'
p119859
S'enable'
p119860
sS'required'
p119861
I00
sS'group_name'
p119862
S'Advanced'
p119863
sa(dp119864
S'name'
p119865
S'execute_on'
p119866
sS'cpp_type'
p119867
S'MultiMooseEnum'
p119868
sS'default'
p119869
S'TIMESTEP_END'
p119870
sS'description'
p119871
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119872
sS'required'
p119873
I00
sS'options'
p119874
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119875
sS'group_name'
p119876
Nsa(dp119877
S'description'
p119878
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119879
sS'cpp_type'
p119880
S'std::vector<OutputName, std::allocator<OutputName> >'
p119881
sS'default'
p119882
g3
sS'name'
p119883
S'outputs'
p119884
sS'required'
p119885
I00
sS'group_name'
p119886
S'Advanced'
p119887
sa(dp119888
S'description'
p119889
g3
sS'cpp_type'
p119890
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119891
sS'default'
p119892
S'RelativeSolutionDifferenceNorm'
p119893
sS'name'
p119894
S'type'
p119895
sS'required'
p119896
I00
sS'group_name'
p119897
Nsa(dp119898
S'description'
p119899
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119900
sS'cpp_type'
p119901
S'bool'
p119902
sS'default'
p119903
S'0'
p119904
sS'name'
p119905
S'use_displaced_mesh'
p119906
sS'required'
p119907
I00
sS'group_name'
p119908
S'Advanced'
p119909
sasS'name'
p119910
S'/UserObjects/RelativeSolutionDifferenceNorm'
p119911
sa(dp119912
S'description'
p119913
g3
sS'subblocks'
p119914
NsS'parameters'
p119915
(lp119916
(dp119917
S'description'
p119918
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119919
sS'cpp_type'
p119920
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119921
sS'default'
p119922
g3
sS'name'
p119923
S'control_tags'
p119924
sS'required'
p119925
I00
sS'group_name'
p119926
S'Advanced'
p119927
sa(dp119928
S'description'
p119929
S'Set the enabled status of the MooseObject.\n'
p119930
sS'cpp_type'
p119931
S'bool'
p119932
sS'default'
p119933
S'1'
p119934
sS'name'
p119935
S'enable'
p119936
sS'required'
p119937
I00
sS'group_name'
p119938
S'Advanced'
p119939
sa(dp119940
S'name'
p119941
S'execute_on'
p119942
sS'cpp_type'
p119943
S'MultiMooseEnum'
p119944
sS'default'
p119945
S'TIMESTEP_END'
p119946
sS'description'
p119947
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119948
sS'required'
p119949
I00
sS'options'
p119950
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119951
sS'group_name'
p119952
Nsa(dp119953
S'description'
p119954
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119955
sS'cpp_type'
p119956
S'std::vector<OutputName, std::allocator<OutputName> >'
p119957
sS'default'
p119958
g3
sS'name'
p119959
S'outputs'
p119960
sS'required'
p119961
I00
sS'group_name'
p119962
S'Advanced'
p119963
sa(dp119964
S'name'
p119965
S'residual_type'
p119966
sS'cpp_type'
p119967
S'MooseEnum'
p119968
sS'default'
p119969
S'FINAL'
p119970
sS'description'
p119971
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p119972
sS'required'
p119973
I00
sS'options'
p119974
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p119975
sS'group_name'
p119976
Nsa(dp119977
S'description'
p119978
g3
sS'cpp_type'
p119979
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119980
sS'default'
p119981
S'Residual'
p119982
sS'name'
p119983
S'type'
p119984
sS'required'
p119985
I00
sS'group_name'
p119986
Nsa(dp119987
S'description'
p119988
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119989
sS'cpp_type'
p119990
S'bool'
p119991
sS'default'
p119992
S'0'
p119993
sS'name'
p119994
S'use_displaced_mesh'
p119995
sS'required'
p119996
I00
sS'group_name'
p119997
S'Advanced'
p119998
sasS'name'
p119999
S'/UserObjects/Residual'
p120000
sa(dp120001
S'description'
p120002
g3
sS'subblocks'
p120003
NsS'parameters'
p120004
(lp120005
(dp120006
S'description'
p120007
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120008
sS'cpp_type'
p120009
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120010
sS'default'
p120011
g3
sS'name'
p120012
S'control_tags'
p120013
sS'required'
p120014
I00
sS'group_name'
p120015
S'Advanced'
p120016
sa(dp120017
S'description'
p120018
S'Set the enabled status of the MooseObject.\n'
p120019
sS'cpp_type'
p120020
S'bool'
p120021
sS'default'
p120022
S'1'
p120023
sS'name'
p120024
S'enable'
p120025
sS'required'
p120026
I00
sS'group_name'
p120027
S'Advanced'
p120028
sa(dp120029
S'name'
p120030
S'execute_on'
p120031
sS'cpp_type'
p120032
S'MultiMooseEnum'
p120033
sS'default'
p120034
S'TIMESTEP_END'
p120035
sS'description'
p120036
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120037
sS'required'
p120038
I00
sS'options'
p120039
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120040
sS'group_name'
p120041
Nsa(dp120042
S'description'
p120043
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120044
sS'cpp_type'
p120045
S'std::vector<OutputName, std::allocator<OutputName> >'
p120046
sS'default'
p120047
g3
sS'name'
p120048
S'outputs'
p120049
sS'required'
p120050
I00
sS'group_name'
p120051
S'Advanced'
p120052
sa(dp120053
S'name'
p120054
S'time_type'
p120055
sS'cpp_type'
p120056
S'MooseEnum'
p120057
sS'default'
p120058
g3
sS'description'
p120059
S'Whether to output the total elapsed or just the active time\n'
p120060
sS'required'
p120061
I01
sS'options'
p120062
S'alive active'
p120063
sS'group_name'
p120064
Nsa(dp120065
S'description'
p120066
g3
sS'cpp_type'
p120067
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120068
sS'default'
p120069
S'RunTime'
p120070
sS'name'
p120071
S'type'
p120072
sS'required'
p120073
I00
sS'group_name'
p120074
Nsa(dp120075
S'description'
p120076
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120077
sS'cpp_type'
p120078
S'bool'
p120079
sS'default'
p120080
S'0'
p120081
sS'name'
p120082
S'use_displaced_mesh'
p120083
sS'required'
p120084
I00
sS'group_name'
p120085
S'Advanced'
p120086
sasS'name'
p120087
S'/UserObjects/RunTime'
p120088
sa(dp120089
S'description'
p120090
g3
sS'subblocks'
p120091
NsS'parameters'
p120092
(lp120093
(dp120094
S'description'
p120095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120096
sS'cpp_type'
p120097
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120098
sS'default'
p120099
g3
sS'name'
p120100
S'control_tags'
p120101
sS'required'
p120102
I00
sS'group_name'
p120103
S'Advanced'
p120104
sa(dp120105
S'description'
p120106
S'Set the enabled status of the MooseObject.\n'
p120107
sS'cpp_type'
p120108
S'bool'
p120109
sS'default'
p120110
S'1'
p120111
sS'name'
p120112
S'enable'
p120113
sS'required'
p120114
I00
sS'group_name'
p120115
S'Advanced'
p120116
sa(dp120117
S'name'
p120118
S'execute_on'
p120119
sS'cpp_type'
p120120
S'MultiMooseEnum'
p120121
sS'default'
p120122
S'TIMESTEP_END'
p120123
sS'description'
p120124
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120125
sS'required'
p120126
I00
sS'options'
p120127
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120128
sS'group_name'
p120129
Nsa(dp120130
S'description'
p120131
S'The analytic solution to compare against\n'
p120132
sS'cpp_type'
p120133
S'FunctionName'
p120134
sS'default'
p120135
g3
sS'name'
p120136
S'function'
p120137
sS'required'
p120138
I01
sS'group_name'
p120139
Nsa(dp120140
S'description'
p120141
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120142
sS'cpp_type'
p120143
S'std::vector<OutputName, std::allocator<OutputName> >'
p120144
sS'default'
p120145
g3
sS'name'
p120146
S'outputs'
p120147
sS'required'
p120148
I00
sS'group_name'
p120149
S'Advanced'
p120150
sa(dp120151
S'description'
p120152
g3
sS'cpp_type'
p120153
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120154
sS'default'
p120155
S'ScalarL2Error'
p120156
sS'name'
p120157
S'type'
p120158
sS'required'
p120159
I00
sS'group_name'
p120160
Nsa(dp120161
S'description'
p120162
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120163
sS'cpp_type'
p120164
S'bool'
p120165
sS'default'
p120166
S'0'
p120167
sS'name'
p120168
S'use_displaced_mesh'
p120169
sS'required'
p120170
I00
sS'group_name'
p120171
S'Advanced'
p120172
sa(dp120173
S'description'
p120174
S'The name of the scalar variable\n'
p120175
sS'cpp_type'
p120176
S'VariableName'
p120177
sS'default'
p120178
g3
sS'name'
p120179
S'variable'
p120180
sS'required'
p120181
I01
sS'group_name'
p120182
NsasS'name'
p120183
S'/UserObjects/ScalarL2Error'
p120184
sa(dp120185
S'description'
p120186
g3
sS'subblocks'
p120187
NsS'parameters'
p120188
(lp120189
(dp120190
S'description'
p120191
S'Component to output for this variable\n'
p120192
sS'cpp_type'
p120193
S'unsigned int'
p120194
sS'default'
p120195
S'0'
p120196
sS'name'
p120197
S'component'
p120198
sS'required'
p120199
I00
sS'group_name'
p120200
Nsa(dp120201
S'description'
p120202
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120203
sS'cpp_type'
p120204
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120205
sS'default'
p120206
g3
sS'name'
p120207
S'control_tags'
p120208
sS'required'
p120209
I00
sS'group_name'
p120210
S'Advanced'
p120211
sa(dp120212
S'description'
p120213
S'Set the enabled status of the MooseObject.\n'
p120214
sS'cpp_type'
p120215
S'bool'
p120216
sS'default'
p120217
S'1'
p120218
sS'name'
p120219
S'enable'
p120220
sS'required'
p120221
I00
sS'group_name'
p120222
S'Advanced'
p120223
sa(dp120224
S'name'
p120225
S'execute_on'
p120226
sS'cpp_type'
p120227
S'MultiMooseEnum'
p120228
sS'default'
p120229
S'TIMESTEP_END'
p120230
sS'description'
p120231
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120232
sS'required'
p120233
I00
sS'options'
p120234
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120235
sS'group_name'
p120236
Nsa(dp120237
S'description'
p120238
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120239
sS'cpp_type'
p120240
S'std::vector<OutputName, std::allocator<OutputName> >'
p120241
sS'default'
p120242
g3
sS'name'
p120243
S'outputs'
p120244
sS'required'
p120245
I00
sS'group_name'
p120246
S'Advanced'
p120247
sa(dp120248
S'description'
p120249
g3
sS'cpp_type'
p120250
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120251
sS'default'
p120252
S'ScalarVariable'
p120253
sS'name'
p120254
S'type'
p120255
sS'required'
p120256
I00
sS'group_name'
p120257
Nsa(dp120258
S'description'
p120259
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120260
sS'cpp_type'
p120261
S'bool'
p120262
sS'default'
p120263
S'0'
p120264
sS'name'
p120265
S'use_displaced_mesh'
p120266
sS'required'
p120267
I00
sS'group_name'
p120268
S'Advanced'
p120269
sa(dp120270
S'description'
p120271
S'Name of the variable\n'
p120272
sS'cpp_type'
p120273
S'VariableName'
p120274
sS'default'
p120275
g3
sS'name'
p120276
S'variable'
p120277
sS'required'
p120278
I01
sS'group_name'
p120279
NsasS'name'
p120280
S'/UserObjects/ScalarVariable'
p120281
sa(dp120282
S'description'
p120283
g3
sS'subblocks'
p120284
NsS'parameters'
p120285
(lp120286
(dp120287
S'description'
p120288
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120289
sS'cpp_type'
p120290
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120291
sS'default'
p120292
g3
sS'name'
p120293
S'control_tags'
p120294
sS'required'
p120295
I00
sS'group_name'
p120296
S'Advanced'
p120297
sa(dp120298
S'description'
p120299
S'Set the enabled status of the MooseObject.\n'
p120300
sS'cpp_type'
p120301
S'bool'
p120302
sS'default'
p120303
S'1'
p120304
sS'name'
p120305
S'enable'
p120306
sS'required'
p120307
I00
sS'group_name'
p120308
S'Advanced'
p120309
sa(dp120310
S'name'
p120311
S'execute_on'
p120312
sS'cpp_type'
p120313
S'MultiMooseEnum'
p120314
sS'default'
p120315
S'TIMESTEP_END'
p120316
sS'description'
p120317
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120318
sS'required'
p120319
I00
sS'options'
p120320
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120321
sS'group_name'
p120322
Nsa(dp120323
S'description'
p120324
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120325
sS'cpp_type'
p120326
S'std::vector<OutputName, std::allocator<OutputName> >'
p120327
sS'default'
p120328
g3
sS'name'
p120329
S'outputs'
p120330
sS'required'
p120331
I00
sS'group_name'
p120332
S'Advanced'
p120333
sa(dp120334
S'description'
p120335
S'The scaling factor\n'
p120336
sS'cpp_type'
p120337
S'double'
p120338
sS'default'
p120339
S'1'
p120340
sS'name'
p120341
S'scaling_factor'
p120342
sS'required'
p120343
I00
sS'group_name'
p120344
Nsa(dp120345
S'description'
p120346
g3
sS'cpp_type'
p120347
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120348
sS'default'
p120349
S'ScalePostprocessor'
p120350
sS'name'
p120351
S'type'
p120352
sS'required'
p120353
I00
sS'group_name'
p120354
Nsa(dp120355
S'description'
p120356
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120357
sS'cpp_type'
p120358
S'bool'
p120359
sS'default'
p120360
S'0'
p120361
sS'name'
p120362
S'use_displaced_mesh'
p120363
sS'required'
p120364
I00
sS'group_name'
p120365
S'Advanced'
p120366
sa(dp120367
S'description'
p120368
S'The postprocessor to be scaled\n'
p120369
sS'cpp_type'
p120370
S'PostprocessorName'
p120371
sS'default'
p120372
g3
sS'name'
p120373
S'value'
p120374
sS'required'
p120375
I01
sS'group_name'
p120376
NsasS'name'
p120377
S'/UserObjects/ScalePostprocessor'
p120378
sa(dp120379
S'description'
p120380
g3
sS'subblocks'
p120381
NsS'parameters'
p120382
(lp120383
(dp120384
S'description'
p120385
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120386
sS'cpp_type'
p120387
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120388
sS'default'
p120389
g3
sS'name'
p120390
S'boundary'
p120391
sS'required'
p120392
I01
sS'group_name'
p120393
Nsa(dp120394
S'description'
p120395
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120396
sS'cpp_type'
p120397
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120398
sS'default'
p120399
g3
sS'name'
p120400
S'control_tags'
p120401
sS'required'
p120402
I00
sS'group_name'
p120403
S'Advanced'
p120404
sa(dp120405
S'description'
p120406
S'Set the enabled status of the MooseObject.\n'
p120407
sS'cpp_type'
p120408
S'bool'
p120409
sS'default'
p120410
S'1'
p120411
sS'name'
p120412
S'enable'
p120413
sS'required'
p120414
I00
sS'group_name'
p120415
S'Advanced'
p120416
sa(dp120417
S'name'
p120418
S'execute_on'
p120419
sS'cpp_type'
p120420
S'MultiMooseEnum'
p120421
sS'default'
p120422
S'TIMESTEP_END'
p120423
sS'description'
p120424
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120425
sS'required'
p120426
I00
sS'options'
p120427
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120428
sS'group_name'
p120429
Nsa(dp120430
S'description'
p120431
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120432
sS'cpp_type'
p120433
S'std::vector<OutputName, std::allocator<OutputName> >'
p120434
sS'default'
p120435
g3
sS'name'
p120436
S'outputs'
p120437
sS'required'
p120438
I00
sS'group_name'
p120439
S'Advanced'
p120440
sa(dp120441
S'description'
p120442
g3
sS'cpp_type'
p120443
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120444
sS'default'
p120445
S'SideAverageValue'
p120446
sS'name'
p120447
S'type'
p120448
sS'required'
p120449
I00
sS'group_name'
p120450
Nsa(dp120451
S'description'
p120452
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120453
sS'cpp_type'
p120454
S'bool'
p120455
sS'default'
p120456
S'0'
p120457
sS'name'
p120458
S'use_displaced_mesh'
p120459
sS'required'
p120460
I00
sS'group_name'
p120461
S'Advanced'
p120462
sa(dp120463
S'description'
p120464
S'The name of the variable that this boundary condition applies to\n'
p120465
sS'cpp_type'
p120466
S'std::vector<VariableName>'
p120467
sS'default'
p120468
g3
sS'name'
p120469
S'variable'
p120470
sS'required'
p120471
I01
sS'group_name'
p120472
NsasS'name'
p120473
S'/UserObjects/SideAverageValue'
p120474
sa(dp120475
S'description'
p120476
g3
sS'subblocks'
p120477
NsS'parameters'
p120478
(lp120479
(dp120480
S'description'
p120481
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120482
sS'cpp_type'
p120483
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120484
sS'default'
p120485
g3
sS'name'
p120486
S'boundary'
p120487
sS'required'
p120488
I01
sS'group_name'
p120489
Nsa(dp120490
S'description'
p120491
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120492
sS'cpp_type'
p120493
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120494
sS'default'
p120495
g3
sS'name'
p120496
S'control_tags'
p120497
sS'required'
p120498
I00
sS'group_name'
p120499
S'Advanced'
p120500
sa(dp120501
S'description'
p120502
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p120503
sS'cpp_type'
p120504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120505
sS'default'
p120506
g3
sS'name'
p120507
S'diffusivity'
p120508
sS'required'
p120509
I01
sS'group_name'
p120510
Nsa(dp120511
S'description'
p120512
S'Set the enabled status of the MooseObject.\n'
p120513
sS'cpp_type'
p120514
S'bool'
p120515
sS'default'
p120516
S'1'
p120517
sS'name'
p120518
S'enable'
p120519
sS'required'
p120520
I00
sS'group_name'
p120521
S'Advanced'
p120522
sa(dp120523
S'name'
p120524
S'execute_on'
p120525
sS'cpp_type'
p120526
S'MultiMooseEnum'
p120527
sS'default'
p120528
S'TIMESTEP_END'
p120529
sS'description'
p120530
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120531
sS'required'
p120532
I00
sS'options'
p120533
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120534
sS'group_name'
p120535
Nsa(dp120536
S'description'
p120537
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120538
sS'cpp_type'
p120539
S'std::vector<OutputName, std::allocator<OutputName> >'
p120540
sS'default'
p120541
g3
sS'name'
p120542
S'outputs'
p120543
sS'required'
p120544
I00
sS'group_name'
p120545
S'Advanced'
p120546
sa(dp120547
S'description'
p120548
g3
sS'cpp_type'
p120549
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120550
sS'default'
p120551
S'SideFluxAverage'
p120552
sS'name'
p120553
S'type'
p120554
sS'required'
p120555
I00
sS'group_name'
p120556
Nsa(dp120557
S'description'
p120558
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120559
sS'cpp_type'
p120560
S'bool'
p120561
sS'default'
p120562
S'0'
p120563
sS'name'
p120564
S'use_displaced_mesh'
p120565
sS'required'
p120566
I00
sS'group_name'
p120567
S'Advanced'
p120568
sa(dp120569
S'description'
p120570
S'The name of the variable that this boundary condition applies to\n'
p120571
sS'cpp_type'
p120572
S'std::vector<VariableName>'
p120573
sS'default'
p120574
g3
sS'name'
p120575
S'variable'
p120576
sS'required'
p120577
I01
sS'group_name'
p120578
NsasS'name'
p120579
S'/UserObjects/SideFluxAverage'
p120580
sa(dp120581
S'description'
p120582
g3
sS'subblocks'
p120583
NsS'parameters'
p120584
(lp120585
(dp120586
S'description'
p120587
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120588
sS'cpp_type'
p120589
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120590
sS'default'
p120591
g3
sS'name'
p120592
S'boundary'
p120593
sS'required'
p120594
I01
sS'group_name'
p120595
Nsa(dp120596
S'description'
p120597
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120598
sS'cpp_type'
p120599
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120600
sS'default'
p120601
g3
sS'name'
p120602
S'control_tags'
p120603
sS'required'
p120604
I00
sS'group_name'
p120605
S'Advanced'
p120606
sa(dp120607
S'description'
p120608
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p120609
sS'cpp_type'
p120610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120611
sS'default'
p120612
g3
sS'name'
p120613
S'diffusivity'
p120614
sS'required'
p120615
I01
sS'group_name'
p120616
Nsa(dp120617
S'description'
p120618
S'Set the enabled status of the MooseObject.\n'
p120619
sS'cpp_type'
p120620
S'bool'
p120621
sS'default'
p120622
S'1'
p120623
sS'name'
p120624
S'enable'
p120625
sS'required'
p120626
I00
sS'group_name'
p120627
S'Advanced'
p120628
sa(dp120629
S'name'
p120630
S'execute_on'
p120631
sS'cpp_type'
p120632
S'MultiMooseEnum'
p120633
sS'default'
p120634
S'TIMESTEP_END'
p120635
sS'description'
p120636
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120637
sS'required'
p120638
I00
sS'options'
p120639
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120640
sS'group_name'
p120641
Nsa(dp120642
S'description'
p120643
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120644
sS'cpp_type'
p120645
S'std::vector<OutputName, std::allocator<OutputName> >'
p120646
sS'default'
p120647
g3
sS'name'
p120648
S'outputs'
p120649
sS'required'
p120650
I00
sS'group_name'
p120651
S'Advanced'
p120652
sa(dp120653
S'description'
p120654
g3
sS'cpp_type'
p120655
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120656
sS'default'
p120657
S'SideFluxIntegral'
p120658
sS'name'
p120659
S'type'
p120660
sS'required'
p120661
I00
sS'group_name'
p120662
Nsa(dp120663
S'description'
p120664
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120665
sS'cpp_type'
p120666
S'bool'
p120667
sS'default'
p120668
S'0'
p120669
sS'name'
p120670
S'use_displaced_mesh'
p120671
sS'required'
p120672
I00
sS'group_name'
p120673
S'Advanced'
p120674
sa(dp120675
S'description'
p120676
S'The name of the variable that this boundary condition applies to\n'
p120677
sS'cpp_type'
p120678
S'std::vector<VariableName>'
p120679
sS'default'
p120680
g3
sS'name'
p120681
S'variable'
p120682
sS'required'
p120683
I01
sS'group_name'
p120684
NsasS'name'
p120685
S'/UserObjects/SideFluxIntegral'
p120686
sa(dp120687
S'description'
p120688
g3
sS'subblocks'
p120689
NsS'parameters'
p120690
(lp120691
(dp120692
S'description'
p120693
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120694
sS'cpp_type'
p120695
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120696
sS'default'
p120697
g3
sS'name'
p120698
S'boundary'
p120699
sS'required'
p120700
I01
sS'group_name'
p120701
Nsa(dp120702
S'description'
p120703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120704
sS'cpp_type'
p120705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120706
sS'default'
p120707
g3
sS'name'
p120708
S'control_tags'
p120709
sS'required'
p120710
I00
sS'group_name'
p120711
S'Advanced'
p120712
sa(dp120713
S'description'
p120714
S'Set the enabled status of the MooseObject.\n'
p120715
sS'cpp_type'
p120716
S'bool'
p120717
sS'default'
p120718
S'1'
p120719
sS'name'
p120720
S'enable'
p120721
sS'required'
p120722
I00
sS'group_name'
p120723
S'Advanced'
p120724
sa(dp120725
S'name'
p120726
S'execute_on'
p120727
sS'cpp_type'
p120728
S'MultiMooseEnum'
p120729
sS'default'
p120730
S'TIMESTEP_END'
p120731
sS'description'
p120732
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120733
sS'required'
p120734
I00
sS'options'
p120735
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120736
sS'group_name'
p120737
Nsa(dp120738
S'description'
p120739
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120740
sS'cpp_type'
p120741
S'std::vector<OutputName, std::allocator<OutputName> >'
p120742
sS'default'
p120743
g3
sS'name'
p120744
S'outputs'
p120745
sS'required'
p120746
I00
sS'group_name'
p120747
S'Advanced'
p120748
sa(dp120749
S'description'
p120750
g3
sS'cpp_type'
p120751
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120752
sS'default'
p120753
S'SideIntegralVariablePostprocessor'
p120754
sS'name'
p120755
S'type'
p120756
sS'required'
p120757
I00
sS'group_name'
p120758
Nsa(dp120759
S'description'
p120760
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120761
sS'cpp_type'
p120762
S'bool'
p120763
sS'default'
p120764
S'0'
p120765
sS'name'
p120766
S'use_displaced_mesh'
p120767
sS'required'
p120768
I00
sS'group_name'
p120769
S'Advanced'
p120770
sa(dp120771
S'description'
p120772
S'The name of the variable that this boundary condition applies to\n'
p120773
sS'cpp_type'
p120774
S'std::vector<VariableName>'
p120775
sS'default'
p120776
g3
sS'name'
p120777
S'variable'
p120778
sS'required'
p120779
I01
sS'group_name'
p120780
NsasS'name'
p120781
S'/UserObjects/SideIntegralVariablePostprocessor'
p120782
sa(dp120783
S'description'
p120784
S'Process an XYZ file of atomic coordinates and filter atoms via threshold or map variable values.\n'
p120785
sS'subblocks'
p120786
NsS'parameters'
p120787
(lp120788
(dp120789
S'description'
p120790
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120791
sS'cpp_type'
p120792
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120793
sS'default'
p120794
g3
sS'name'
p120795
S'control_tags'
p120796
sS'required'
p120797
I00
sS'group_name'
p120798
S'Advanced'
p120799
sa(dp120800
S'description'
p120801
S'Set the enabled status of the MooseObject.\n'
p120802
sS'cpp_type'
p120803
S'bool'
p120804
sS'default'
p120805
S'1'
p120806
sS'name'
p120807
S'enable'
p120808
sS'required'
p120809
I00
sS'group_name'
p120810
S'Advanced'
p120811
sa(dp120812
S'description'
p120813
S'The name of the file holding the equation system info in xda format (xda only).\n'
p120814
sS'cpp_type'
p120815
S'FileName'
p120816
sS'default'
p120817
S'<not supplied>'
p120818
sS'name'
p120819
S'es'
p120820
sS'required'
p120821
I00
sS'group_name'
p120822
Nsa(dp120823
S'name'
p120824
S'execute_on'
p120825
sS'cpp_type'
p120826
S'MultiMooseEnum'
p120827
sS'default'
p120828
S'TIMESTEP_END'
p120829
sS'description'
p120830
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120831
sS'required'
p120832
I00
sS'options'
p120833
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120834
sS'group_name'
p120835
Nsa(dp120836
S'description'
p120837
S'The name of the mesh file (must be xda or exodusII file).\n'
p120838
sS'cpp_type'
p120839
S'MeshFileName'
p120840
sS'default'
p120841
g3
sS'name'
p120842
S'mesh'
p120843
sS'required'
p120844
I01
sS'group_name'
p120845
Nsa(dp120846
S'name'
p120847
S'raster_mode'
p120848
sS'cpp_type'
p120849
S'MooseEnum'
p120850
sS'default'
p120851
S'MAP'
p120852
sS'description'
p120853
S'Rasterization mode (MAP|FILTER).\n'
p120854
sS'required'
p120855
I00
sS'options'
p120856
S'MAP FILTER'
p120857
sS'group_name'
p120858
Nsa(dp120859
S'description'
p120860
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p120861
sS'cpp_type'
p120862
S'double'
p120863
sS'default'
p120864
S'0'
p120865
sS'name'
p120866
S'rotation0_angle'
p120867
sS'required'
p120868
I00
sS'group_name'
p120869
Nsa(dp120870
S'description'
p120871
S'Vector about which to rotate points of the simulation.\n'
p120872
sS'cpp_type'
p120873
S'libMesh::VectorValue<double>'
p120874
sS'default'
p120875
S'0 0 1'
p120876
sS'name'
p120877
S'rotation0_vector'
p120878
sS'required'
p120879
I00
sS'group_name'
p120880
Nsa(dp120881
S'description'
p120882
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p120883
sS'cpp_type'
p120884
S'double'
p120885
sS'default'
p120886
S'0'
p120887
sS'name'
p120888
S'rotation1_angle'
p120889
sS'required'
p120890
I00
sS'group_name'
p120891
Nsa(dp120892
S'description'
p120893
S'Vector about which to rotate points of the simulation.\n'
p120894
sS'cpp_type'
p120895
S'libMesh::VectorValue<double>'
p120896
sS'default'
p120897
S'0 0 1'
p120898
sS'name'
p120899
S'rotation1_vector'
p120900
sS'required'
p120901
I00
sS'group_name'
p120902
Nsa(dp120903
S'description'
p120904
S'Scale factor for points in the simulation\n'
p120905
sS'cpp_type'
p120906
S'std::vector<double, std::allocator<double> >'
p120907
sS'default'
p120908
S'1 1 1'
p120909
sS'name'
p120910
S'scale'
p120911
sS'required'
p120912
I00
sS'group_name'
p120913
Nsa(dp120914
S'description'
p120915
S'Scale multiplying factor for points in the simulation\n'
p120916
sS'cpp_type'
p120917
S'std::vector<double, std::allocator<double> >'
p120918
sS'default'
p120919
S'1 1 1'
p120920
sS'name'
p120921
S'scale_multiplier'
p120922
sS'required'
p120923
I00
sS'group_name'
p120924
Nsa(dp120925
S'description'
p120926
S'The name of the system to pull values out of (xda only).\n'
p120927
sS'cpp_type'
p120928
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120929
sS'default'
p120930
S'nl0'
p120931
sS'name'
p120932
S'system'
p120933
sS'required'
p120934
I00
sS'group_name'
p120935
Nsa(dp120936
S'description'
p120937
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p120938
sS'cpp_type'
p120939
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120940
sS'default'
p120941
g3
sS'name'
p120942
S'system_variables'
p120943
sS'required'
p120944
I00
sS'group_name'
p120945
Nsa(dp120946
S'description'
p120947
S'Accept atoms with a variable value above this threshold in FILTER mode.\n'
p120948
sS'cpp_type'
p120949
S'double'
p120950
sS'default'
p120951
g3
sS'name'
p120952
S'threshold'
p120953
sS'required'
p120954
I00
sS'group_name'
p120955
Nsa(dp120956
S'description'
p120957
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p120958
sS'cpp_type'
p120959
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120960
sS'default'
p120961
g3
sS'name'
p120962
S'timestep'
p120963
sS'required'
p120964
I00
sS'group_name'
p120965
Nsa(dp120966
S'name'
p120967
S'transformation_order'
p120968
sS'cpp_type'
p120969
S'MultiMooseEnum'
p120970
sS'default'
p120971
S'SCALE TRANSLATION'
p120972
sS'description'
p120973
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p120974
sS'required'
p120975
I00
sS'options'
p120976
S'rotation0 translation scale rotation1 scale_multiplier'
p120977
sS'group_name'
p120978
Nsa(dp120979
S'description'
p120980
S'Translation factors for x,y,z coordinates of the simulation\n'
p120981
sS'cpp_type'
p120982
S'std::vector<double, std::allocator<double> >'
p120983
sS'default'
p120984
S'0 0 0'
p120985
sS'name'
p120986
S'translation'
p120987
sS'required'
p120988
I00
sS'group_name'
p120989
Nsa(dp120990
S'description'
p120991
g3
sS'cpp_type'
p120992
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120993
sS'default'
p120994
S'SolutionRasterizer'
p120995
sS'name'
p120996
S'type'
p120997
sS'required'
p120998
I00
sS'group_name'
p120999
Nsa(dp121000
S'description'
p121001
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121002
sS'cpp_type'
p121003
S'bool'
p121004
sS'default'
p121005
S'0'
p121006
sS'name'
p121007
S'use_displaced_mesh'
p121008
sS'required'
p121009
I00
sS'group_name'
p121010
S'Advanced'
p121011
sa(dp121012
S'description'
p121013
S'Variable from the mesh file to use for mapping to or filtering of the atoms.\n'
p121014
sS'cpp_type'
p121015
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121016
sS'default'
p121017
g3
sS'name'
p121018
S'variable'
p121019
sS'required'
p121020
I01
sS'group_name'
p121021
Nsa(dp121022
S'description'
p121023
S'XYZ input file.\n'
p121024
sS'cpp_type'
p121025
S'FileName'
p121026
sS'default'
p121027
g3
sS'name'
p121028
S'xyz_input'
p121029
sS'required'
p121030
I01
sS'group_name'
p121031
Nsa(dp121032
S'description'
p121033
S'XYZ output file.\n'
p121034
sS'cpp_type'
p121035
S'FileName'
p121036
sS'default'
p121037
g3
sS'name'
p121038
S'xyz_output'
p121039
sS'required'
p121040
I01
sS'group_name'
p121041
NsasS'name'
p121042
S'/UserObjects/SolutionRasterizer'
p121043
sa(dp121044
S'description'
p121045
g3
sS'subblocks'
p121046
NsS'parameters'
p121047
(lp121048
(dp121049
S'description'
p121050
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121051
sS'cpp_type'
p121052
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121053
sS'default'
p121054
g3
sS'name'
p121055
S'control_tags'
p121056
sS'required'
p121057
I00
sS'group_name'
p121058
S'Advanced'
p121059
sa(dp121060
S'description'
p121061
S'Set the enabled status of the MooseObject.\n'
p121062
sS'cpp_type'
p121063
S'bool'
p121064
sS'default'
p121065
S'1'
p121066
sS'name'
p121067
S'enable'
p121068
sS'required'
p121069
I00
sS'group_name'
p121070
S'Advanced'
p121071
sa(dp121072
S'description'
p121073
S'The name of the file holding the equation system info in xda format (xda only).\n'
p121074
sS'cpp_type'
p121075
S'FileName'
p121076
sS'default'
p121077
S'<not supplied>'
p121078
sS'name'
p121079
S'es'
p121080
sS'required'
p121081
I00
sS'group_name'
p121082
Nsa(dp121083
S'name'
p121084
S'execute_on'
p121085
sS'cpp_type'
p121086
S'MultiMooseEnum'
p121087
sS'default'
p121088
S'TIMESTEP_END'
p121089
sS'description'
p121090
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121091
sS'required'
p121092
I00
sS'options'
p121093
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121094
sS'group_name'
p121095
Nsa(dp121096
S'description'
p121097
S'The name of the mesh file (must be xda or exodusII file).\n'
p121098
sS'cpp_type'
p121099
S'MeshFileName'
p121100
sS'default'
p121101
g3
sS'name'
p121102
S'mesh'
p121103
sS'required'
p121104
I01
sS'group_name'
p121105
Nsa(dp121106
S'description'
p121107
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p121108
sS'cpp_type'
p121109
S'double'
p121110
sS'default'
p121111
S'0'
p121112
sS'name'
p121113
S'rotation0_angle'
p121114
sS'required'
p121115
I00
sS'group_name'
p121116
Nsa(dp121117
S'description'
p121118
S'Vector about which to rotate points of the simulation.\n'
p121119
sS'cpp_type'
p121120
S'libMesh::VectorValue<double>'
p121121
sS'default'
p121122
S'0 0 1'
p121123
sS'name'
p121124
S'rotation0_vector'
p121125
sS'required'
p121126
I00
sS'group_name'
p121127
Nsa(dp121128
S'description'
p121129
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p121130
sS'cpp_type'
p121131
S'double'
p121132
sS'default'
p121133
S'0'
p121134
sS'name'
p121135
S'rotation1_angle'
p121136
sS'required'
p121137
I00
sS'group_name'
p121138
Nsa(dp121139
S'description'
p121140
S'Vector about which to rotate points of the simulation.\n'
p121141
sS'cpp_type'
p121142
S'libMesh::VectorValue<double>'
p121143
sS'default'
p121144
S'0 0 1'
p121145
sS'name'
p121146
S'rotation1_vector'
p121147
sS'required'
p121148
I00
sS'group_name'
p121149
Nsa(dp121150
S'description'
p121151
S'Scale factor for points in the simulation\n'
p121152
sS'cpp_type'
p121153
S'std::vector<double, std::allocator<double> >'
p121154
sS'default'
p121155
S'1 1 1'
p121156
sS'name'
p121157
S'scale'
p121158
sS'required'
p121159
I00
sS'group_name'
p121160
Nsa(dp121161
S'description'
p121162
S'Scale multiplying factor for points in the simulation\n'
p121163
sS'cpp_type'
p121164
S'std::vector<double, std::allocator<double> >'
p121165
sS'default'
p121166
S'1 1 1'
p121167
sS'name'
p121168
S'scale_multiplier'
p121169
sS'required'
p121170
I00
sS'group_name'
p121171
Nsa(dp121172
S'description'
p121173
S'The name of the system to pull values out of (xda only).\n'
p121174
sS'cpp_type'
p121175
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121176
sS'default'
p121177
S'nl0'
p121178
sS'name'
p121179
S'system'
p121180
sS'required'
p121181
I00
sS'group_name'
p121182
Nsa(dp121183
S'description'
p121184
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p121185
sS'cpp_type'
p121186
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121187
sS'default'
p121188
g3
sS'name'
p121189
S'system_variables'
p121190
sS'required'
p121191
I00
sS'group_name'
p121192
Nsa(dp121193
S'description'
p121194
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p121195
sS'cpp_type'
p121196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121197
sS'default'
p121198
g3
sS'name'
p121199
S'timestep'
p121200
sS'required'
p121201
I00
sS'group_name'
p121202
Nsa(dp121203
S'name'
p121204
S'transformation_order'
p121205
sS'cpp_type'
p121206
S'MultiMooseEnum'
p121207
sS'default'
p121208
S'SCALE TRANSLATION'
p121209
sS'description'
p121210
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p121211
sS'required'
p121212
I00
sS'options'
p121213
S'rotation0 translation scale rotation1 scale_multiplier'
p121214
sS'group_name'
p121215
Nsa(dp121216
S'description'
p121217
S'Translation factors for x,y,z coordinates of the simulation\n'
p121218
sS'cpp_type'
p121219
S'std::vector<double, std::allocator<double> >'
p121220
sS'default'
p121221
S'0 0 0'
p121222
sS'name'
p121223
S'translation'
p121224
sS'required'
p121225
I00
sS'group_name'
p121226
Nsa(dp121227
S'description'
p121228
g3
sS'cpp_type'
p121229
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121230
sS'default'
p121231
S'SolutionUserObject'
p121232
sS'name'
p121233
S'type'
p121234
sS'required'
p121235
I00
sS'group_name'
p121236
Nsa(dp121237
S'description'
p121238
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121239
sS'cpp_type'
p121240
S'bool'
p121241
sS'default'
p121242
S'0'
p121243
sS'name'
p121244
S'use_displaced_mesh'
p121245
sS'required'
p121246
I00
sS'group_name'
p121247
S'Advanced'
p121248
sasS'name'
p121249
S'/UserObjects/SolutionUserObject'
p121250
sa(dp121251
S'description'
p121252
S'No hardening - the parameter is independent of the internal parameter(s)\n'
p121253
sS'subblocks'
p121254
NsS'parameters'
p121255
(lp121256
(dp121257
S'description'
p121258
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121259
sS'cpp_type'
p121260
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121261
sS'default'
p121262
g3
sS'name'
p121263
S'control_tags'
p121264
sS'required'
p121265
I00
sS'group_name'
p121266
S'Advanced'
p121267
sa(dp121268
S'description'
p121269
S'If true, the value you entered will be multiplied by Pi/180 before passing to the Plasticity algorithms\n'
p121270
sS'cpp_type'
p121271
S'bool'
p121272
sS'default'
p121273
S'0'
p121274
sS'name'
p121275
S'convert_to_radians'
p121276
sS'required'
p121277
I00
sS'group_name'
p121278
Nsa(dp121279
S'description'
p121280
S'Set the enabled status of the MooseObject.\n'
p121281
sS'cpp_type'
p121282
S'bool'
p121283
sS'default'
p121284
S'1'
p121285
sS'name'
p121286
S'enable'
p121287
sS'required'
p121288
I00
sS'group_name'
p121289
S'Advanced'
p121290
sa(dp121291
S'name'
p121292
S'execute_on'
p121293
sS'cpp_type'
p121294
S'MultiMooseEnum'
p121295
sS'default'
p121296
S'TIMESTEP_END'
p121297
sS'description'
p121298
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121299
sS'required'
p121300
I00
sS'options'
p121301
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121302
sS'group_name'
p121303
Nsa(dp121304
S'description'
p121305
g3
sS'cpp_type'
p121306
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121307
sS'default'
p121308
S'TensorMechanicsHardeningConstant'
p121309
sS'name'
p121310
S'type'
p121311
sS'required'
p121312
I00
sS'group_name'
p121313
Nsa(dp121314
S'description'
p121315
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121316
sS'cpp_type'
p121317
S'bool'
p121318
sS'default'
p121319
S'0'
p121320
sS'name'
p121321
S'use_displaced_mesh'
p121322
sS'required'
p121323
I00
sS'group_name'
p121324
S'Advanced'
p121325
sa(dp121326
S'description'
p121327
S'The value of the parameter for all internal parameter.  This is perfect plasticity - there is no hardening.\n'
p121328
sS'cpp_type'
p121329
S'double'
p121330
sS'default'
p121331
S'1'
p121332
sS'name'
p121333
S'value'
p121334
sS'required'
p121335
I00
sS'group_name'
p121336
NsasS'name'
p121337
S'/UserObjects/TensorMechanicsHardeningConstant'
p121338
sa(dp121339
S'description'
p121340
S'Hardening is Cubic\n'
p121341
sS'subblocks'
p121342
NsS'parameters'
p121343
(lp121344
(dp121345
S'description'
p121346
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121347
sS'cpp_type'
p121348
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121349
sS'default'
p121350
g3
sS'name'
p121351
S'control_tags'
p121352
sS'required'
p121353
I00
sS'group_name'
p121354
S'Advanced'
p121355
sa(dp121356
S'description'
p121357
S'Set the enabled status of the MooseObject.\n'
p121358
sS'cpp_type'
p121359
S'bool'
p121360
sS'default'
p121361
S'1'
p121362
sS'name'
p121363
S'enable'
p121364
sS'required'
p121365
I00
sS'group_name'
p121366
S'Advanced'
p121367
sa(dp121368
S'name'
p121369
S'execute_on'
p121370
sS'cpp_type'
p121371
S'MultiMooseEnum'
p121372
sS'default'
p121373
S'TIMESTEP_END'
p121374
sS'description'
p121375
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121376
sS'required'
p121377
I00
sS'options'
p121378
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121379
sS'group_name'
p121380
Nsa(dp121381
S'description'
p121382
S'The value of the internal_parameter when hardening begins\n'
p121383
sS'cpp_type'
p121384
S'double'
p121385
sS'default'
p121386
S'0'
p121387
sS'name'
p121388
S'internal_0'
p121389
sS'required'
p121390
I00
sS'group_name'
p121391
Nsa(dp121392
S'description'
p121393
S'The value of the internal_parameter when hardening ends.  This hardening forms a cubic between (internal_0, value_0) and (internal_limit, value_residual) that is smooth at internal_0 and internal_limit\n'
p121394
sS'cpp_type'
p121395
S'double'
p121396
sS'default'
p121397
S'1'
p121398
sS'name'
p121399
S'internal_limit'
p121400
sS'required'
p121401
I00
sS'group_name'
p121402
Nsa(dp121403
S'description'
p121404
g3
sS'cpp_type'
p121405
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121406
sS'default'
p121407
S'TensorMechanicsHardeningCubic'
p121408
sS'name'
p121409
S'type'
p121410
sS'required'
p121411
I00
sS'group_name'
p121412
Nsa(dp121413
S'description'
p121414
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121415
sS'cpp_type'
p121416
S'bool'
p121417
sS'default'
p121418
S'0'
p121419
sS'name'
p121420
S'use_displaced_mesh'
p121421
sS'required'
p121422
I00
sS'group_name'
p121423
S'Advanced'
p121424
sa(dp121425
S'description'
p121426
S'The value of the parameter for all internal_parameter <= internal_0\n'
p121427
sS'cpp_type'
p121428
S'double'
p121429
sS'default'
p121430
g3
sS'name'
p121431
S'value_0'
p121432
sS'required'
p121433
I01
sS'group_name'
p121434
Nsa(dp121435
S'description'
p121436
S'The value of the parameter for internal_parameter >= internal_limit.  Default = value_0, ie perfect plasticity\n'
p121437
sS'cpp_type'
p121438
S'double'
p121439
sS'default'
p121440
g3
sS'name'
p121441
S'value_residual'
p121442
sS'required'
p121443
I00
sS'group_name'
p121444
NsasS'name'
p121445
S'/UserObjects/TensorMechanicsHardeningCubic'
p121446
sa(dp121447
S'description'
p121448
S'Hardening is Cut-exponential\n'
p121449
sS'subblocks'
p121450
NsS'parameters'
p121451
(lp121452
(dp121453
S'description'
p121454
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121455
sS'cpp_type'
p121456
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121457
sS'default'
p121458
g3
sS'name'
p121459
S'control_tags'
p121460
sS'required'
p121461
I00
sS'group_name'
p121462
S'Advanced'
p121463
sa(dp121464
S'description'
p121465
S'Set the enabled status of the MooseObject.\n'
p121466
sS'cpp_type'
p121467
S'bool'
p121468
sS'default'
p121469
S'1'
p121470
sS'name'
p121471
S'enable'
p121472
sS'required'
p121473
I00
sS'group_name'
p121474
S'Advanced'
p121475
sa(dp121476
S'name'
p121477
S'execute_on'
p121478
sS'cpp_type'
p121479
S'MultiMooseEnum'
p121480
sS'default'
p121481
S'TIMESTEP_END'
p121482
sS'description'
p121483
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121484
sS'required'
p121485
I00
sS'options'
p121486
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121487
sS'group_name'
p121488
Nsa(dp121489
S'description'
p121490
S'The cutoff of internal parameter\n'
p121491
sS'cpp_type'
p121492
S'double'
p121493
sS'default'
p121494
S'0'
p121495
sS'name'
p121496
S'internal_0'
p121497
sS'required'
p121498
I00
sS'group_name'
p121499
Nsa(dp121500
S'description'
p121501
S'Let p = internal_parameter.  Then value = value_0 for p<internal_0, and otherwise, value = value_residual + (value_0 - value_residual)*exp(-rate*(p - internal_0)\n'
p121502
sS'cpp_type'
p121503
S'double'
p121504
sS'default'
p121505
S'0'
p121506
sS'name'
p121507
S'rate'
p121508
sS'required'
p121509
I00
sS'group_name'
p121510
Nsa(dp121511
S'description'
p121512
g3
sS'cpp_type'
p121513
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121514
sS'default'
p121515
S'TensorMechanicsHardeningCutExponential'
p121516
sS'name'
p121517
S'type'
p121518
sS'required'
p121519
I00
sS'group_name'
p121520
Nsa(dp121521
S'description'
p121522
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121523
sS'cpp_type'
p121524
S'bool'
p121525
sS'default'
p121526
S'0'
p121527
sS'name'
p121528
S'use_displaced_mesh'
p121529
sS'required'
p121530
I00
sS'group_name'
p121531
S'Advanced'
p121532
sa(dp121533
S'description'
p121534
S'The value of the parameter for all internal_parameter <= internal_0\n'
p121535
sS'cpp_type'
p121536
S'double'
p121537
sS'default'
p121538
g3
sS'name'
p121539
S'value_0'
p121540
sS'required'
p121541
I01
sS'group_name'
p121542
Nsa(dp121543
S'description'
p121544
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p121545
sS'cpp_type'
p121546
S'double'
p121547
sS'default'
p121548
g3
sS'name'
p121549
S'value_residual'
p121550
sS'required'
p121551
I00
sS'group_name'
p121552
NsasS'name'
p121553
S'/UserObjects/TensorMechanicsHardeningCutExponential'
p121554
sa(dp121555
S'description'
p121556
S'Hardening is Exponential\n'
p121557
sS'subblocks'
p121558
NsS'parameters'
p121559
(lp121560
(dp121561
S'description'
p121562
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121563
sS'cpp_type'
p121564
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121565
sS'default'
p121566
g3
sS'name'
p121567
S'control_tags'
p121568
sS'required'
p121569
I00
sS'group_name'
p121570
S'Advanced'
p121571
sa(dp121572
S'description'
p121573
S'Set the enabled status of the MooseObject.\n'
p121574
sS'cpp_type'
p121575
S'bool'
p121576
sS'default'
p121577
S'1'
p121578
sS'name'
p121579
S'enable'
p121580
sS'required'
p121581
I00
sS'group_name'
p121582
S'Advanced'
p121583
sa(dp121584
S'name'
p121585
S'execute_on'
p121586
sS'cpp_type'
p121587
S'MultiMooseEnum'
p121588
sS'default'
p121589
S'TIMESTEP_END'
p121590
sS'description'
p121591
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121592
sS'required'
p121593
I00
sS'options'
p121594
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121595
sS'group_name'
p121596
Nsa(dp121597
S'description'
p121598
S'Let p = internal_parameter.  Then value = value_residual + (value_0 - value_residual)*exp(-rate*intnal_parameter)\n'
p121599
sS'cpp_type'
p121600
S'double'
p121601
sS'default'
p121602
S'0'
p121603
sS'name'
p121604
S'rate'
p121605
sS'required'
p121606
I00
sS'group_name'
p121607
Nsa(dp121608
S'description'
p121609
g3
sS'cpp_type'
p121610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121611
sS'default'
p121612
S'TensorMechanicsHardeningExponential'
p121613
sS'name'
p121614
S'type'
p121615
sS'required'
p121616
I00
sS'group_name'
p121617
Nsa(dp121618
S'description'
p121619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121620
sS'cpp_type'
p121621
S'bool'
p121622
sS'default'
p121623
S'0'
p121624
sS'name'
p121625
S'use_displaced_mesh'
p121626
sS'required'
p121627
I00
sS'group_name'
p121628
S'Advanced'
p121629
sa(dp121630
S'description'
p121631
S'The value of the parameter at internal_parameter = 0\n'
p121632
sS'cpp_type'
p121633
S'double'
p121634
sS'default'
p121635
g3
sS'name'
p121636
S'value_0'
p121637
sS'required'
p121638
I01
sS'group_name'
p121639
Nsa(dp121640
S'description'
p121641
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p121642
sS'cpp_type'
p121643
S'double'
p121644
sS'default'
p121645
g3
sS'name'
p121646
S'value_residual'
p121647
sS'required'
p121648
I00
sS'group_name'
p121649
NsasS'name'
p121650
S'/UserObjects/TensorMechanicsHardeningExponential'
p121651
sa(dp121652
S'description'
p121653
S'Hardening is Gaussian\n'
p121654
sS'subblocks'
p121655
NsS'parameters'
p121656
(lp121657
(dp121658
S'description'
p121659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121660
sS'cpp_type'
p121661
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121662
sS'default'
p121663
g3
sS'name'
p121664
S'control_tags'
p121665
sS'required'
p121666
I00
sS'group_name'
p121667
S'Advanced'
p121668
sa(dp121669
S'description'
p121670
S'Set the enabled status of the MooseObject.\n'
p121671
sS'cpp_type'
p121672
S'bool'
p121673
sS'default'
p121674
S'1'
p121675
sS'name'
p121676
S'enable'
p121677
sS'required'
p121678
I00
sS'group_name'
p121679
S'Advanced'
p121680
sa(dp121681
S'name'
p121682
S'execute_on'
p121683
sS'cpp_type'
p121684
S'MultiMooseEnum'
p121685
sS'default'
p121686
S'TIMESTEP_END'
p121687
sS'description'
p121688
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121689
sS'required'
p121690
I00
sS'options'
p121691
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121692
sS'group_name'
p121693
Nsa(dp121694
S'description'
p121695
S'The value of the internal_parameter when hardening begins\n'
p121696
sS'cpp_type'
p121697
S'double'
p121698
sS'default'
p121699
S'0'
p121700
sS'name'
p121701
S'internal_0'
p121702
sS'required'
p121703
I00
sS'group_name'
p121704
Nsa(dp121705
S'description'
p121706
S'Let p = internal_parameter.  Then value = value_0 for p<internal_0, and value = value_residual + (value_0 - value_residual)*exp(-0.5*rate*(p - internal_0)^2)\n'
p121707
sS'cpp_type'
p121708
S'double'
p121709
sS'default'
p121710
S'0'
p121711
sS'name'
p121712
S'rate'
p121713
sS'required'
p121714
I00
sS'group_name'
p121715
Nsa(dp121716
S'description'
p121717
g3
sS'cpp_type'
p121718
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121719
sS'default'
p121720
S'TensorMechanicsHardeningGaussian'
p121721
sS'name'
p121722
S'type'
p121723
sS'required'
p121724
I00
sS'group_name'
p121725
Nsa(dp121726
S'description'
p121727
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121728
sS'cpp_type'
p121729
S'bool'
p121730
sS'default'
p121731
S'0'
p121732
sS'name'
p121733
S'use_displaced_mesh'
p121734
sS'required'
p121735
I00
sS'group_name'
p121736
S'Advanced'
p121737
sa(dp121738
S'description'
p121739
S'The value of the parameter for all internal_parameter <= internal_0\n'
p121740
sS'cpp_type'
p121741
S'double'
p121742
sS'default'
p121743
g3
sS'name'
p121744
S'value_0'
p121745
sS'required'
p121746
I01
sS'group_name'
p121747
Nsa(dp121748
S'description'
p121749
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p121750
sS'cpp_type'
p121751
S'double'
p121752
sS'default'
p121753
g3
sS'name'
p121754
S'value_residual'
p121755
sS'required'
p121756
I00
sS'group_name'
p121757
NsasS'name'
p121758
S'/UserObjects/TensorMechanicsHardeningGaussian'
p121759
sa(dp121760
S'description'
p121761
S'Hardening defined by power rule\n'
p121762
sS'subblocks'
p121763
NsS'parameters'
p121764
(lp121765
(dp121766
S'description'
p121767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121768
sS'cpp_type'
p121769
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121770
sS'default'
p121771
g3
sS'name'
p121772
S'control_tags'
p121773
sS'required'
p121774
I00
sS'group_name'
p121775
S'Advanced'
p121776
sa(dp121777
S'description'
p121778
S'Set the enabled status of the MooseObject.\n'
p121779
sS'cpp_type'
p121780
S'bool'
p121781
sS'default'
p121782
S'1'
p121783
sS'name'
p121784
S'enable'
p121785
sS'required'
p121786
I00
sS'group_name'
p121787
S'Advanced'
p121788
sa(dp121789
S'description'
p121790
S'The reference strain\n'
p121791
sS'cpp_type'
p121792
S'double'
p121793
sS'default'
p121794
S'1'
p121795
sS'name'
p121796
S'epsilon0'
p121797
sS'required'
p121798
I00
sS'group_name'
p121799
Nsa(dp121800
S'name'
p121801
S'execute_on'
p121802
sS'cpp_type'
p121803
S'MultiMooseEnum'
p121804
sS'default'
p121805
S'TIMESTEP_END'
p121806
sS'description'
p121807
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121808
sS'required'
p121809
I00
sS'options'
p121810
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121811
sS'group_name'
p121812
Nsa(dp121813
S'description'
p121814
S'Let p = internal_parameter.  Then value = value_0 * (p / epsilon0 + 1)^{exponent})\n'
p121815
sS'cpp_type'
p121816
S'double'
p121817
sS'default'
p121818
S'0'
p121819
sS'name'
p121820
S'exponent'
p121821
sS'required'
p121822
I00
sS'group_name'
p121823
Nsa(dp121824
S'description'
p121825
g3
sS'cpp_type'
p121826
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121827
sS'default'
p121828
S'TensorMechanicsHardeningPowerRule'
p121829
sS'name'
p121830
S'type'
p121831
sS'required'
p121832
I00
sS'group_name'
p121833
Nsa(dp121834
S'description'
p121835
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121836
sS'cpp_type'
p121837
S'bool'
p121838
sS'default'
p121839
S'0'
p121840
sS'name'
p121841
S'use_displaced_mesh'
p121842
sS'required'
p121843
I00
sS'group_name'
p121844
S'Advanced'
p121845
sa(dp121846
S'description'
p121847
S'The yield strength when internal variable = 0\n'
p121848
sS'cpp_type'
p121849
S'double'
p121850
sS'default'
p121851
g3
sS'name'
p121852
S'value_0'
p121853
sS'required'
p121854
I01
sS'group_name'
p121855
NsasS'name'
p121856
S'/UserObjects/TensorMechanicsHardeningPowerRule'
p121857
sa(dp121858
S'description'
p121859
S'Non-associative Drucker Prager plasticity with no smoothing of the cone tip.\n'
p121860
sS'subblocks'
p121861
NsS'parameters'
p121862
(lp121863
(dp121864
S'description'
p121865
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121866
sS'cpp_type'
p121867
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121868
sS'default'
p121869
g3
sS'name'
p121870
S'control_tags'
p121871
sS'required'
p121872
I00
sS'group_name'
p121873
S'Advanced'
p121874
sa(dp121875
S'description'
p121876
S'Set the enabled status of the MooseObject.\n'
p121877
sS'cpp_type'
p121878
S'bool'
p121879
sS'default'
p121880
S'1'
p121881
sS'name'
p121882
S'enable'
p121883
sS'required'
p121884
I00
sS'group_name'
p121885
S'Advanced'
p121886
sa(dp121887
S'name'
p121888
S'execute_on'
p121889
sS'cpp_type'
p121890
S'MultiMooseEnum'
p121891
sS'default'
p121892
S'TIMESTEP_END'
p121893
sS'description'
p121894
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121895
sS'required'
p121896
I00
sS'options'
p121897
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121898
sS'group_name'
p121899
Nsa(dp121900
S'description'
p121901
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p121902
sS'cpp_type'
p121903
S'double'
p121904
sS'default'
p121905
g3
sS'name'
p121906
S'internal_constraint_tolerance'
p121907
sS'required'
p121908
I01
sS'group_name'
p121909
Nsa(dp121910
S'description'
p121911
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb cohesion.  Physically this should not be negative.\n'
p121912
sS'cpp_type'
p121913
S'UserObjectName'
p121914
sS'default'
p121915
g3
sS'name'
p121916
S'mc_cohesion'
p121917
sS'required'
p121918
I01
sS'group_name'
p121919
Nsa(dp121920
S'description'
p121921
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and Pi/2.\n'
p121922
sS'cpp_type'
p121923
S'UserObjectName'
p121924
sS'default'
p121925
g3
sS'name'
p121926
S'mc_dilation_angle'
p121927
sS'required'
p121928
I01
sS'group_name'
p121929
Nsa(dp121930
S'description'
p121931
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb friction angle (in radians).  Physically this should be between 0 and Pi/2.\n'
p121932
sS'cpp_type'
p121933
S'UserObjectName'
p121934
sS'default'
p121935
g3
sS'name'
p121936
S'mc_friction_angle'
p121937
sS'required'
p121938
I01
sS'group_name'
p121939
Nsa(dp121940
S'name'
p121941
S'mc_interpolation_scheme'
p121942
sS'cpp_type'
p121943
S'MooseEnum'
p121944
sS'default'
p121945
S'lode_zero'
p121946
sS'description'
p121947
S'Scheme by which the Drucker-Prager cohesion, friction angle and dilation angle are set from the Mohr-Coulomb parameters mc_cohesion, mc_friction_angle and mc_dilation_angle.  Consider the DP and MC yield surfaces on the devatoric (octahedral) plane.  Outer_tip: the DP circle touches the outer tips of the MC hex.  Inner_tip: the DP circle touches the inner tips of the MC hex.  Lode_zero: the DP circle intersects the MC hex at lode angle=0.  Inner_edge: the DP circle is the largest circle that wholey fits inside the MC hex.  Native: The DP cohesion, friction angle and dilation angle are set equal to the mc_ parameters entered.\n'
p121948
sS'required'
p121949
I00
sS'options'
p121950
S'outer_tip inner_tip lode_zero inner_edge native'
p121951
sS'group_name'
p121952
Nsa(dp121953
S'description'
p121954
g3
sS'cpp_type'
p121955
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121956
sS'default'
p121957
S'TensorMechanicsPlasticDruckerPrager'
p121958
sS'name'
p121959
S'type'
p121960
sS'required'
p121961
I00
sS'group_name'
p121962
Nsa(dp121963
S'description'
p121964
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121965
sS'cpp_type'
p121966
S'bool'
p121967
sS'default'
p121968
S'0'
p121969
sS'name'
p121970
S'use_displaced_mesh'
p121971
sS'required'
p121972
I00
sS'group_name'
p121973
S'Advanced'
p121974
sa(dp121975
S'description'
p121976
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p121977
sS'cpp_type'
p121978
S'double'
p121979
sS'default'
p121980
g3
sS'name'
p121981
S'yield_function_tolerance'
p121982
sS'required'
p121983
I01
sS'group_name'
p121984
NsasS'name'
p121985
S'/UserObjects/TensorMechanicsPlasticDruckerPrager'
p121986
sa(dp121987
S'description'
p121988
S'Non-associative Drucker Prager plasticity with hyperbolic smoothing of the cone tip.\n'
p121989
sS'subblocks'
p121990
NsS'parameters'
p121991
(lp121992
(dp121993
S'description'
p121994
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121995
sS'cpp_type'
p121996
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121997
sS'default'
p121998
g3
sS'name'
p121999
S'control_tags'
p122000
sS'required'
p122001
I00
sS'group_name'
p122002
S'Advanced'
p122003
sa(dp122004
S'description'
p122005
S'Set the enabled status of the MooseObject.\n'
p122006
sS'cpp_type'
p122007
S'bool'
p122008
sS'default'
p122009
S'1'
p122010
sS'name'
p122011
S'enable'
p122012
sS'required'
p122013
I00
sS'group_name'
p122014
S'Advanced'
p122015
sa(dp122016
S'name'
p122017
S'execute_on'
p122018
sS'cpp_type'
p122019
S'MultiMooseEnum'
p122020
sS'default'
p122021
S'TIMESTEP_END'
p122022
sS'description'
p122023
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122024
sS'required'
p122025
I00
sS'options'
p122026
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122027
sS'group_name'
p122028
Nsa(dp122029
S'description'
p122030
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122031
sS'cpp_type'
p122032
S'double'
p122033
sS'default'
p122034
g3
sS'name'
p122035
S'internal_constraint_tolerance'
p122036
sS'required'
p122037
I01
sS'group_name'
p122038
Nsa(dp122039
S'description'
p122040
S'Maximum iterations to use in the custom return map function\n'
p122041
sS'cpp_type'
p122042
S'unsigned int'
p122043
sS'default'
p122044
S'40'
p122045
sS'name'
p122046
S'max_iterations'
p122047
sS'required'
p122048
I00
sS'group_name'
p122049
Nsa(dp122050
S'description'
p122051
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb cohesion.  Physically this should not be negative.\n'
p122052
sS'cpp_type'
p122053
S'UserObjectName'
p122054
sS'default'
p122055
g3
sS'name'
p122056
S'mc_cohesion'
p122057
sS'required'
p122058
I01
sS'group_name'
p122059
Nsa(dp122060
S'description'
p122061
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and Pi/2.\n'
p122062
sS'cpp_type'
p122063
S'UserObjectName'
p122064
sS'default'
p122065
g3
sS'name'
p122066
S'mc_dilation_angle'
p122067
sS'required'
p122068
I01
sS'group_name'
p122069
Nsa(dp122070
S'description'
p122071
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb friction angle (in radians).  Physically this should be between 0 and Pi/2.\n'
p122072
sS'cpp_type'
p122073
S'UserObjectName'
p122074
sS'default'
p122075
g3
sS'name'
p122076
S'mc_friction_angle'
p122077
sS'required'
p122078
I01
sS'group_name'
p122079
Nsa(dp122080
S'name'
p122081
S'mc_interpolation_scheme'
p122082
sS'cpp_type'
p122083
S'MooseEnum'
p122084
sS'default'
p122085
S'lode_zero'
p122086
sS'description'
p122087
S'Scheme by which the Drucker-Prager cohesion, friction angle and dilation angle are set from the Mohr-Coulomb parameters mc_cohesion, mc_friction_angle and mc_dilation_angle.  Consider the DP and MC yield surfaces on the devatoric (octahedral) plane.  Outer_tip: the DP circle touches the outer tips of the MC hex.  Inner_tip: the DP circle touches the inner tips of the MC hex.  Lode_zero: the DP circle intersects the MC hex at lode angle=0.  Inner_edge: the DP circle is the largest circle that wholey fits inside the MC hex.  Native: The DP cohesion, friction angle and dilation angle are set equal to the mc_ parameters entered.\n'
p122088
sS'required'
p122089
I00
sS'options'
p122090
S'outer_tip inner_tip lode_zero inner_edge native'
p122091
sS'group_name'
p122092
Nsa(dp122093
S'description'
p122094
S'The cone vertex at J2=0 is smoothed.  The maximum mean stress possible, which is Cohesion*Cot(friction_angle) for smoother=0, becomes (Cohesion - smoother/3)*Cot(friction_angle).  This is a non-hardening parameter\n'
p122095
sS'cpp_type'
p122096
S'double'
p122097
sS'default'
p122098
S'0'
p122099
sS'name'
p122100
S'smoother'
p122101
sS'required'
p122102
I00
sS'group_name'
p122103
Nsa(dp122104
S'description'
p122105
g3
sS'cpp_type'
p122106
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122107
sS'default'
p122108
S'TensorMechanicsPlasticDruckerPragerHyperbolic'
p122109
sS'name'
p122110
S'type'
p122111
sS'required'
p122112
I00
sS'group_name'
p122113
Nsa(dp122114
S'description'
p122115
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p122116
sS'cpp_type'
p122117
S'bool'
p122118
sS'default'
p122119
S'1'
p122120
sS'name'
p122121
S'use_custom_cto'
p122122
sS'required'
p122123
I00
sS'group_name'
p122124
Nsa(dp122125
S'description'
p122126
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p122127
sS'cpp_type'
p122128
S'bool'
p122129
sS'default'
p122130
S'1'
p122131
sS'name'
p122132
S'use_custom_returnMap'
p122133
sS'required'
p122134
I00
sS'group_name'
p122135
Nsa(dp122136
S'description'
p122137
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122138
sS'cpp_type'
p122139
S'bool'
p122140
sS'default'
p122141
S'0'
p122142
sS'name'
p122143
S'use_displaced_mesh'
p122144
sS'required'
p122145
I00
sS'group_name'
p122146
S'Advanced'
p122147
sa(dp122148
S'description'
p122149
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122150
sS'cpp_type'
p122151
S'double'
p122152
sS'default'
p122153
g3
sS'name'
p122154
S'yield_function_tolerance'
p122155
sS'required'
p122156
I01
sS'group_name'
p122157
NsasS'name'
p122158
S'/UserObjects/TensorMechanicsPlasticDruckerPragerHyperbolic'
p122159
sa(dp122160
S'description'
p122161
S'IsotropicSD plasticity for pressure sensitive materials and also models the strength differential effect\n'
p122162
sS'subblocks'
p122163
NsS'parameters'
p122164
(lp122165
(dp122166
S'description'
p122167
S'Flag for flow-rule, true if not specified\n'
p122168
sS'cpp_type'
p122169
S'bool'
p122170
sS'default'
p122171
S'1'
p122172
sS'name'
p122173
S'associative'
p122174
sS'required'
p122175
I00
sS'group_name'
p122176
Nsa(dp122177
S'description'
p122178
S'A constant to model the influence of pressure\n'
p122179
sS'cpp_type'
p122180
S'double'
p122181
sS'default'
p122182
g3
sS'name'
p122183
S'b'
p122184
sS'required'
p122185
I01
sS'group_name'
p122186
Nsa(dp122187
S'description'
p122188
S'A constant to model the influence of strength differential effect\n'
p122189
sS'cpp_type'
p122190
S'double'
p122191
sS'default'
p122192
S'0'
p122193
sS'name'
p122194
S'c'
p122195
sS'required'
p122196
I00
sS'group_name'
p122197
Nsa(dp122198
S'description'
p122199
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122200
sS'cpp_type'
p122201
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122202
sS'default'
p122203
g3
sS'name'
p122204
S'control_tags'
p122205
sS'required'
p122206
I00
sS'group_name'
p122207
S'Advanced'
p122208
sa(dp122209
S'description'
p122210
S'Set the enabled status of the MooseObject.\n'
p122211
sS'cpp_type'
p122212
S'bool'
p122213
sS'default'
p122214
S'1'
p122215
sS'name'
p122216
S'enable'
p122217
sS'required'
p122218
I00
sS'group_name'
p122219
S'Advanced'
p122220
sa(dp122221
S'name'
p122222
S'execute_on'
p122223
sS'cpp_type'
p122224
S'MultiMooseEnum'
p122225
sS'default'
p122226
S'TIMESTEP_END'
p122227
sS'description'
p122228
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122229
sS'required'
p122230
I00
sS'options'
p122231
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122232
sS'group_name'
p122233
Nsa(dp122234
S'description'
p122235
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122236
sS'cpp_type'
p122237
S'double'
p122238
sS'default'
p122239
g3
sS'name'
p122240
S'internal_constraint_tolerance'
p122241
sS'required'
p122242
I01
sS'group_name'
p122243
Nsa(dp122244
S'description'
p122245
S'Maximum iterations for custom J2 return map\n'
p122246
sS'cpp_type'
p122247
S'unsigned int'
p122248
sS'default'
p122249
S'10'
p122250
sS'name'
p122251
S'max_iterations'
p122252
sS'required'
p122253
I00
sS'group_name'
p122254
Nsa(dp122255
S'description'
p122256
g3
sS'cpp_type'
p122257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122258
sS'default'
p122259
S'TensorMechanicsPlasticIsotropicSD'
p122260
sS'name'
p122261
S'type'
p122262
sS'required'
p122263
I00
sS'group_name'
p122264
Nsa(dp122265
S'description'
p122266
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p122267
sS'cpp_type'
p122268
S'bool'
p122269
sS'default'
p122270
S'1'
p122271
sS'name'
p122272
S'use_custom_cto'
p122273
sS'required'
p122274
I00
sS'group_name'
p122275
Nsa(dp122276
S'description'
p122277
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p122278
sS'cpp_type'
p122279
S'bool'
p122280
sS'default'
p122281
S'1'
p122282
sS'name'
p122283
S'use_custom_returnMap'
p122284
sS'required'
p122285
I00
sS'group_name'
p122286
Nsa(dp122287
S'description'
p122288
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122289
sS'cpp_type'
p122290
S'bool'
p122291
sS'default'
p122292
S'0'
p122293
sS'name'
p122294
S'use_displaced_mesh'
p122295
sS'required'
p122296
I00
sS'group_name'
p122297
S'Advanced'
p122298
sa(dp122299
S'description'
p122300
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122301
sS'cpp_type'
p122302
S'double'
p122303
sS'default'
p122304
g3
sS'name'
p122305
S'yield_function_tolerance'
p122306
sS'required'
p122307
I01
sS'group_name'
p122308
Nsa(dp122309
S'description'
p122310
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p122311
sS'cpp_type'
p122312
S'UserObjectName'
p122313
sS'default'
p122314
g3
sS'name'
p122315
S'yield_strength'
p122316
sS'required'
p122317
I01
sS'group_name'
p122318
NsasS'name'
p122319
S'/UserObjects/TensorMechanicsPlasticIsotropicSD'
p122320
sa(dp122321
S'description'
p122322
S'J2 plasticity, associative, with hardening\n'
p122323
sS'subblocks'
p122324
NsS'parameters'
p122325
(lp122326
(dp122327
S'description'
p122328
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122329
sS'cpp_type'
p122330
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122331
sS'default'
p122332
g3
sS'name'
p122333
S'control_tags'
p122334
sS'required'
p122335
I00
sS'group_name'
p122336
S'Advanced'
p122337
sa(dp122338
S'description'
p122339
S'Set the enabled status of the MooseObject.\n'
p122340
sS'cpp_type'
p122341
S'bool'
p122342
sS'default'
p122343
S'1'
p122344
sS'name'
p122345
S'enable'
p122346
sS'required'
p122347
I00
sS'group_name'
p122348
S'Advanced'
p122349
sa(dp122350
S'name'
p122351
S'execute_on'
p122352
sS'cpp_type'
p122353
S'MultiMooseEnum'
p122354
sS'default'
p122355
S'TIMESTEP_END'
p122356
sS'description'
p122357
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122358
sS'required'
p122359
I00
sS'options'
p122360
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122361
sS'group_name'
p122362
Nsa(dp122363
S'description'
p122364
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122365
sS'cpp_type'
p122366
S'double'
p122367
sS'default'
p122368
g3
sS'name'
p122369
S'internal_constraint_tolerance'
p122370
sS'required'
p122371
I01
sS'group_name'
p122372
Nsa(dp122373
S'description'
p122374
S'Maximum iterations for custom J2 return map\n'
p122375
sS'cpp_type'
p122376
S'unsigned int'
p122377
sS'default'
p122378
S'10'
p122379
sS'name'
p122380
S'max_iterations'
p122381
sS'required'
p122382
I00
sS'group_name'
p122383
Nsa(dp122384
S'description'
p122385
g3
sS'cpp_type'
p122386
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122387
sS'default'
p122388
S'TensorMechanicsPlasticJ2'
p122389
sS'name'
p122390
S'type'
p122391
sS'required'
p122392
I00
sS'group_name'
p122393
Nsa(dp122394
S'description'
p122395
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p122396
sS'cpp_type'
p122397
S'bool'
p122398
sS'default'
p122399
S'1'
p122400
sS'name'
p122401
S'use_custom_cto'
p122402
sS'required'
p122403
I00
sS'group_name'
p122404
Nsa(dp122405
S'description'
p122406
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p122407
sS'cpp_type'
p122408
S'bool'
p122409
sS'default'
p122410
S'1'
p122411
sS'name'
p122412
S'use_custom_returnMap'
p122413
sS'required'
p122414
I00
sS'group_name'
p122415
Nsa(dp122416
S'description'
p122417
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122418
sS'cpp_type'
p122419
S'bool'
p122420
sS'default'
p122421
S'0'
p122422
sS'name'
p122423
S'use_displaced_mesh'
p122424
sS'required'
p122425
I00
sS'group_name'
p122426
S'Advanced'
p122427
sa(dp122428
S'description'
p122429
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122430
sS'cpp_type'
p122431
S'double'
p122432
sS'default'
p122433
g3
sS'name'
p122434
S'yield_function_tolerance'
p122435
sS'required'
p122436
I01
sS'group_name'
p122437
Nsa(dp122438
S'description'
p122439
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p122440
sS'cpp_type'
p122441
S'UserObjectName'
p122442
sS'default'
p122443
g3
sS'name'
p122444
S'yield_strength'
p122445
sS'required'
p122446
I01
sS'group_name'
p122447
NsasS'name'
p122448
S'/UserObjects/TensorMechanicsPlasticJ2'
p122449
sa(dp122450
S'description'
p122451
S'Class that limits the mean stress.  Yield function = a*mean_stress - strength.  mean_stress = (stress_xx + stress_yy + stress_zz)/3\n'
p122452
sS'subblocks'
p122453
NsS'parameters'
p122454
(lp122455
(dp122456
S'description'
p122457
S'Yield function = a*mean_stress - strength\n'
p122458
sS'cpp_type'
p122459
S'double'
p122460
sS'default'
p122461
S'1'
p122462
sS'name'
p122463
S'a'
p122464
sS'required'
p122465
I00
sS'group_name'
p122466
Nsa(dp122467
S'description'
p122468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122469
sS'cpp_type'
p122470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122471
sS'default'
p122472
g3
sS'name'
p122473
S'control_tags'
p122474
sS'required'
p122475
I00
sS'group_name'
p122476
S'Advanced'
p122477
sa(dp122478
S'description'
p122479
S'Set the enabled status of the MooseObject.\n'
p122480
sS'cpp_type'
p122481
S'bool'
p122482
sS'default'
p122483
S'1'
p122484
sS'name'
p122485
S'enable'
p122486
sS'required'
p122487
I00
sS'group_name'
p122488
S'Advanced'
p122489
sa(dp122490
S'name'
p122491
S'execute_on'
p122492
sS'cpp_type'
p122493
S'MultiMooseEnum'
p122494
sS'default'
p122495
S'TIMESTEP_END'
p122496
sS'description'
p122497
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122498
sS'required'
p122499
I00
sS'options'
p122500
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122501
sS'group_name'
p122502
Nsa(dp122503
S'description'
p122504
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122505
sS'cpp_type'
p122506
S'double'
p122507
sS'default'
p122508
g3
sS'name'
p122509
S'internal_constraint_tolerance'
p122510
sS'required'
p122511
I01
sS'group_name'
p122512
Nsa(dp122513
S'description'
p122514
S'Yield function = a*mean_stress - strength\n'
p122515
sS'cpp_type'
p122516
S'UserObjectName'
p122517
sS'default'
p122518
g3
sS'name'
p122519
S'strength'
p122520
sS'required'
p122521
I01
sS'group_name'
p122522
Nsa(dp122523
S'description'
p122524
g3
sS'cpp_type'
p122525
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122526
sS'default'
p122527
S'TensorMechanicsPlasticMeanCap'
p122528
sS'name'
p122529
S'type'
p122530
sS'required'
p122531
I00
sS'group_name'
p122532
Nsa(dp122533
S'description'
p122534
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122535
sS'cpp_type'
p122536
S'bool'
p122537
sS'default'
p122538
S'0'
p122539
sS'name'
p122540
S'use_displaced_mesh'
p122541
sS'required'
p122542
I00
sS'group_name'
p122543
S'Advanced'
p122544
sa(dp122545
S'description'
p122546
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122547
sS'cpp_type'
p122548
S'double'
p122549
sS'default'
p122550
g3
sS'name'
p122551
S'yield_function_tolerance'
p122552
sS'required'
p122553
I01
sS'group_name'
p122554
NsasS'name'
p122555
S'/UserObjects/TensorMechanicsPlasticMeanCap'
p122556
sa(dp122557
S'description'
p122558
S'Associative mean-cap tensile and compressive plasticity with hardening/softening\n'
p122559
sS'subblocks'
p122560
NsS'parameters'
p122561
(lp122562
(dp122563
S'description'
p122564
S'A TensorMechanicsHardening UserObject that defines hardening of the mean-cap compressive strength.  This should always be less than tensile_strength (it will typically be negative).  Yield function = - (trace(stress) - compressive_strength) for trace(stress)<compressive_strength.\n'
p122565
sS'cpp_type'
p122566
S'UserObjectName'
p122567
sS'default'
p122568
g3
sS'name'
p122569
S'compressive_strength'
p122570
sS'required'
p122571
I01
sS'group_name'
p122572
Nsa(dp122573
S'description'
p122574
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122575
sS'cpp_type'
p122576
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122577
sS'default'
p122578
g3
sS'name'
p122579
S'control_tags'
p122580
sS'required'
p122581
I00
sS'group_name'
p122582
S'Advanced'
p122583
sa(dp122584
S'description'
p122585
S'Set the enabled status of the MooseObject.\n'
p122586
sS'cpp_type'
p122587
S'bool'
p122588
sS'default'
p122589
S'1'
p122590
sS'name'
p122591
S'enable'
p122592
sS'required'
p122593
I00
sS'group_name'
p122594
S'Advanced'
p122595
sa(dp122596
S'name'
p122597
S'execute_on'
p122598
sS'cpp_type'
p122599
S'MultiMooseEnum'
p122600
sS'default'
p122601
S'TIMESTEP_END'
p122602
sS'description'
p122603
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122604
sS'required'
p122605
I00
sS'options'
p122606
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122607
sS'group_name'
p122608
Nsa(dp122609
S'description'
p122610
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122611
sS'cpp_type'
p122612
S'double'
p122613
sS'default'
p122614
g3
sS'name'
p122615
S'internal_constraint_tolerance'
p122616
sS'required'
p122617
I01
sS'group_name'
p122618
Nsa(dp122619
S'description'
p122620
S'Maximum iterations for custom MeanCapTC return map\n'
p122621
sS'cpp_type'
p122622
S'unsigned int'
p122623
sS'default'
p122624
S'10'
p122625
sS'name'
p122626
S'max_iterations'
p122627
sS'required'
p122628
I00
sS'group_name'
p122629
Nsa(dp122630
S'description'
p122631
S'A TensorMechanicsHardening UserObject that defines hardening of the mean-cap tensile strength (it will typically be positive).  Yield function = trace(stress) - tensile_strength for trace(stress)>tensile_strength.\n'
p122632
sS'cpp_type'
p122633
S'UserObjectName'
p122634
sS'default'
p122635
g3
sS'name'
p122636
S'tensile_strength'
p122637
sS'required'
p122638
I01
sS'group_name'
p122639
Nsa(dp122640
S'description'
p122641
g3
sS'cpp_type'
p122642
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122643
sS'default'
p122644
S'TensorMechanicsPlasticMeanCapTC'
p122645
sS'name'
p122646
S'type'
p122647
sS'required'
p122648
I00
sS'group_name'
p122649
Nsa(dp122650
S'description'
p122651
S'Whether to use the custom consistent tangent operator computations.\n'
p122652
sS'cpp_type'
p122653
S'bool'
p122654
sS'default'
p122655
S'1'
p122656
sS'name'
p122657
S'use_custom_cto'
p122658
sS'required'
p122659
I00
sS'group_name'
p122660
Nsa(dp122661
S'description'
p122662
S'Whether to use the custom MeanCapTC returnMap algorithm.\n'
p122663
sS'cpp_type'
p122664
S'bool'
p122665
sS'default'
p122666
S'1'
p122667
sS'name'
p122668
S'use_custom_returnMap'
p122669
sS'required'
p122670
I00
sS'group_name'
p122671
Nsa(dp122672
S'description'
p122673
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122674
sS'cpp_type'
p122675
S'bool'
p122676
sS'default'
p122677
S'0'
p122678
sS'name'
p122679
S'use_displaced_mesh'
p122680
sS'required'
p122681
I00
sS'group_name'
p122682
S'Advanced'
p122683
sa(dp122684
S'description'
p122685
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122686
sS'cpp_type'
p122687
S'double'
p122688
sS'default'
p122689
g3
sS'name'
p122690
S'yield_function_tolerance'
p122691
sS'required'
p122692
I01
sS'group_name'
p122693
NsasS'name'
p122694
S'/UserObjects/TensorMechanicsPlasticMeanCapTC'
p122695
sa(dp122696
S'description'
p122697
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p122698
sS'subblocks'
p122699
NsS'parameters'
p122700
(lp122701
(dp122702
S'description'
p122703
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/tensile_strength\n"
p122704
sS'cpp_type'
p122705
S'double'
p122706
sS'default'
p122707
S'0'
p122708
sS'name'
p122709
S'cap_rate'
p122710
sS'required'
p122711
I00
sS'group_name'
p122712
Nsa(dp122713
S'description'
p122714
S"For the 'cap' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n"
p122715
sS'cpp_type'
p122716
S'double'
p122717
sS'default'
p122718
S'0'
p122719
sS'name'
p122720
S'cap_start'
p122721
sS'required'
p122722
I00
sS'group_name'
p122723
Nsa(dp122724
S'description'
p122725
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p122726
sS'cpp_type'
p122727
S'UserObjectName'
p122728
sS'default'
p122729
g3
sS'name'
p122730
S'cohesion'
p122731
sS'required'
p122732
I01
sS'group_name'
p122733
Nsa(dp122734
S'description'
p122735
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122736
sS'cpp_type'
p122737
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122738
sS'default'
p122739
g3
sS'name'
p122740
S'control_tags'
p122741
sS'required'
p122742
I00
sS'group_name'
p122743
S'Advanced'
p122744
sa(dp122745
S'description'
p122746
S'A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p122747
sS'cpp_type'
p122748
S'UserObjectName'
p122749
sS'default'
p122750
g3
sS'name'
p122751
S'dilation_angle'
p122752
sS'required'
p122753
I01
sS'group_name'
p122754
Nsa(dp122755
S'description'
p122756
S'Set the enabled status of the MooseObject.\n'
p122757
sS'cpp_type'
p122758
S'bool'
p122759
sS'default'
p122760
S'1'
p122761
sS'name'
p122762
S'enable'
p122763
sS'required'
p122764
I00
sS'group_name'
p122765
S'Advanced'
p122766
sa(dp122767
S'name'
p122768
S'execute_on'
p122769
sS'cpp_type'
p122770
S'MultiMooseEnum'
p122771
sS'default'
p122772
S'TIMESTEP_END'
p122773
sS'description'
p122774
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122775
sS'required'
p122776
I00
sS'options'
p122777
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122778
sS'group_name'
p122779
Nsa(dp122780
S'description'
p122781
S'A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians).  Physically the friction angle should be between 0 and 90deg.\n'
p122782
sS'cpp_type'
p122783
S'UserObjectName'
p122784
sS'default'
p122785
g3
sS'name'
p122786
S'friction_angle'
p122787
sS'required'
p122788
I01
sS'group_name'
p122789
Nsa(dp122790
S'description'
p122791
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122792
sS'cpp_type'
p122793
S'double'
p122794
sS'default'
p122795
g3
sS'name'
p122796
S'internal_constraint_tolerance'
p122797
sS'required'
p122798
I01
sS'group_name'
p122799
Nsa(dp122800
S'description'
p122801
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p122802
sS'cpp_type'
p122803
S'double'
p122804
sS'default'
p122805
S'25'
p122806
sS'name'
p122807
S'mc_edge_smoother'
p122808
sS'required'
p122809
I00
sS'group_name'
p122810
Nsa(dp122811
S'description'
p122812
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p122813
sS'cpp_type'
p122814
S'double'
p122815
sS'default'
p122816
g3
sS'name'
p122817
S'mc_lode_cutoff'
p122818
sS'required'
p122819
I00
sS'group_name'
p122820
Nsa(dp122821
S'description'
p122822
S'Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p122823
sS'cpp_type'
p122824
S'double'
p122825
sS'default'
p122826
g3
sS'name'
p122827
S'mc_tip_smoother'
p122828
sS'required'
p122829
I01
sS'group_name'
p122830
Nsa(dp122831
S'name'
p122832
S'tip_scheme'
p122833
sS'cpp_type'
p122834
S'MooseEnum'
p122835
sS'default'
p122836
S'hyperbolic'
p122837
sS'description'
p122838
S"Scheme by which the pyramid's tip will be smoothed.\n"
p122839
sS'required'
p122840
I00
sS'options'
p122841
S'hyperbolic cap'
p122842
sS'group_name'
p122843
Nsa(dp122844
S'description'
p122845
g3
sS'cpp_type'
p122846
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122847
sS'default'
p122848
S'TensorMechanicsPlasticMohrCoulomb'
p122849
sS'name'
p122850
S'type'
p122851
sS'required'
p122852
I00
sS'group_name'
p122853
Nsa(dp122854
S'description'
p122855
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122856
sS'cpp_type'
p122857
S'bool'
p122858
sS'default'
p122859
S'0'
p122860
sS'name'
p122861
S'use_displaced_mesh'
p122862
sS'required'
p122863
I00
sS'group_name'
p122864
S'Advanced'
p122865
sa(dp122866
S'description'
p122867
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122868
sS'cpp_type'
p122869
S'double'
p122870
sS'default'
p122871
g3
sS'name'
p122872
S'yield_function_tolerance'
p122873
sS'required'
p122874
I01
sS'group_name'
p122875
NsasS'name'
p122876
S'/UserObjects/TensorMechanicsPlasticMohrCoulomb'
p122877
sa(dp122878
S'description'
p122879
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p122880
sS'subblocks'
p122881
NsS'parameters'
p122882
(lp122883
(dp122884
S'description'
p122885
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n'
p122886
sS'cpp_type'
p122887
S'UserObjectName'
p122888
sS'default'
p122889
g3
sS'name'
p122890
S'cohesion'
p122891
sS'required'
p122892
I01
sS'group_name'
p122893
Nsa(dp122894
S'description'
p122895
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122896
sS'cpp_type'
p122897
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122898
sS'default'
p122899
g3
sS'name'
p122900
S'control_tags'
p122901
sS'required'
p122902
I00
sS'group_name'
p122903
S'Advanced'
p122904
sa(dp122905
S'description'
p122906
S'A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians)\n'
p122907
sS'cpp_type'
p122908
S'UserObjectName'
p122909
sS'default'
p122910
g3
sS'name'
p122911
S'dilation_angle'
p122912
sS'required'
p122913
I01
sS'group_name'
p122914
Nsa(dp122915
S'description'
p122916
S'Set the enabled status of the MooseObject.\n'
p122917
sS'cpp_type'
p122918
S'bool'
p122919
sS'default'
p122920
S'1'
p122921
sS'name'
p122922
S'enable'
p122923
sS'required'
p122924
I00
sS'group_name'
p122925
S'Advanced'
p122926
sa(dp122927
S'name'
p122928
S'execute_on'
p122929
sS'cpp_type'
p122930
S'MultiMooseEnum'
p122931
sS'default'
p122932
S'TIMESTEP_END'
p122933
sS'description'
p122934
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122935
sS'required'
p122936
I00
sS'options'
p122937
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122938
sS'group_name'
p122939
Nsa(dp122940
S'description'
p122941
S'A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n'
p122942
sS'cpp_type'
p122943
S'UserObjectName'
p122944
sS'default'
p122945
g3
sS'name'
p122946
S'friction_angle'
p122947
sS'required'
p122948
I01
sS'group_name'
p122949
Nsa(dp122950
S'description'
p122951
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122952
sS'cpp_type'
p122953
S'double'
p122954
sS'default'
p122955
g3
sS'name'
p122956
S'internal_constraint_tolerance'
p122957
sS'required'
p122958
I01
sS'group_name'
p122959
Nsa(dp122960
S'description'
p122961
S'Maximum number of Newton-Raphson iterations allowed in the custom return-map algorithm.  For highly nonlinear hardening this may need to be higher than 10.\n'
p122962
sS'cpp_type'
p122963
S'unsigned int'
p122964
sS'default'
p122965
S'10'
p122966
sS'name'
p122967
S'max_iterations'
p122968
sS'required'
p122969
I00
sS'group_name'
p122970
Nsa(dp122971
S'description'
p122972
S'Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  This may be set very small when using the custom returnMap.  Default = f_tol.\n'
p122973
sS'cpp_type'
p122974
S'double'
p122975
sS'default'
p122976
g3
sS'name'
p122977
S'shift'
p122978
sS'required'
p122979
I00
sS'group_name'
p122980
Nsa(dp122981
S'description'
p122982
g3
sS'cpp_type'
p122983
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122984
sS'default'
p122985
S'TensorMechanicsPlasticMohrCoulombMulti'
p122986
sS'name'
p122987
S'type'
p122988
sS'required'
p122989
I00
sS'group_name'
p122990
Nsa(dp122991
S'description'
p122992
S"Use a custom return-map algorithm for this plasticity model, which may speed up computations considerably.  Set to true only for isotropic elasticity with no hardening of the dilation angle.  In this case you may set 'shift' very small.\n"
p122993
sS'cpp_type'
p122994
S'bool'
p122995
sS'default'
p122996
S'1'
p122997
sS'name'
p122998
S'use_custom_returnMap'
p122999
sS'required'
p123000
I00
sS'group_name'
p123001
Nsa(dp123002
S'description'
p123003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123004
sS'cpp_type'
p123005
S'bool'
p123006
sS'default'
p123007
S'0'
p123008
sS'name'
p123009
S'use_displaced_mesh'
p123010
sS'required'
p123011
I00
sS'group_name'
p123012
S'Advanced'
p123013
sa(dp123014
S'description'
p123015
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123016
sS'cpp_type'
p123017
S'double'
p123018
sS'default'
p123019
g3
sS'name'
p123020
S'yield_function_tolerance'
p123021
sS'required'
p123022
I01
sS'group_name'
p123023
NsasS'name'
p123024
S'/UserObjects/TensorMechanicsPlasticMohrCoulombMulti'
p123025
sa(dp123026
S'description'
p123027
S'Orthotropic plasticity for pressure sensitive materials and also models the strength differential effect\n'
p123028
sS'subblocks'
p123029
NsS'parameters'
p123030
(lp123031
(dp123032
S'description'
p123033
S'Flag for flow-rule, true if not specified\n'
p123034
sS'cpp_type'
p123035
S'bool'
p123036
sS'default'
p123037
S'1'
p123038
sS'name'
p123039
S'associative'
p123040
sS'required'
p123041
I00
sS'group_name'
p123042
Nsa(dp123043
S'description'
p123044
S'A constant to model the influence of pressure\n'
p123045
sS'cpp_type'
p123046
S'double'
p123047
sS'default'
p123048
g3
sS'name'
p123049
S'b'
p123050
sS'required'
p123051
I01
sS'group_name'
p123052
Nsa(dp123053
S'description'
p123054
S'A constant to model the influence of strength differential effect\n'
p123055
sS'cpp_type'
p123056
S'double'
p123057
sS'default'
p123058
S'0'
p123059
sS'name'
p123060
S'c'
p123061
sS'required'
p123062
I00
sS'group_name'
p123063
Nsa(dp123064
S'description'
p123065
S'The six coefficients of L prime\n'
p123066
sS'cpp_type'
p123067
S'std::vector<double, std::allocator<double> >'
p123068
sS'default'
p123069
g3
sS'name'
p123070
S'c1'
p123071
sS'required'
p123072
I01
sS'group_name'
p123073
Nsa(dp123074
S'description'
p123075
S'The six coefficients of L prime prime\n'
p123076
sS'cpp_type'
p123077
S'std::vector<double, std::allocator<double> >'
p123078
sS'default'
p123079
g3
sS'name'
p123080
S'c2'
p123081
sS'required'
p123082
I01
sS'group_name'
p123083
Nsa(dp123084
S'description'
p123085
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123086
sS'cpp_type'
p123087
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123088
sS'default'
p123089
g3
sS'name'
p123090
S'control_tags'
p123091
sS'required'
p123092
I00
sS'group_name'
p123093
S'Advanced'
p123094
sa(dp123095
S'description'
p123096
S'Set the enabled status of the MooseObject.\n'
p123097
sS'cpp_type'
p123098
S'bool'
p123099
sS'default'
p123100
S'1'
p123101
sS'name'
p123102
S'enable'
p123103
sS'required'
p123104
I00
sS'group_name'
p123105
S'Advanced'
p123106
sa(dp123107
S'name'
p123108
S'execute_on'
p123109
sS'cpp_type'
p123110
S'MultiMooseEnum'
p123111
sS'default'
p123112
S'TIMESTEP_END'
p123113
sS'description'
p123114
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123115
sS'required'
p123116
I00
sS'options'
p123117
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123118
sS'group_name'
p123119
Nsa(dp123120
S'description'
p123121
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123122
sS'cpp_type'
p123123
S'double'
p123124
sS'default'
p123125
g3
sS'name'
p123126
S'internal_constraint_tolerance'
p123127
sS'required'
p123128
I01
sS'group_name'
p123129
Nsa(dp123130
S'description'
p123131
S'Maximum iterations for custom J2 return map\n'
p123132
sS'cpp_type'
p123133
S'unsigned int'
p123134
sS'default'
p123135
S'10'
p123136
sS'name'
p123137
S'max_iterations'
p123138
sS'required'
p123139
I00
sS'group_name'
p123140
Nsa(dp123141
S'description'
p123142
g3
sS'cpp_type'
p123143
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123144
sS'default'
p123145
S'TensorMechanicsPlasticOrthotropic'
p123146
sS'name'
p123147
S'type'
p123148
sS'required'
p123149
I00
sS'group_name'
p123150
Nsa(dp123151
S'description'
p123152
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p123153
sS'cpp_type'
p123154
S'bool'
p123155
sS'default'
p123156
S'1'
p123157
sS'name'
p123158
S'use_custom_cto'
p123159
sS'required'
p123160
I00
sS'group_name'
p123161
Nsa(dp123162
S'description'
p123163
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p123164
sS'cpp_type'
p123165
S'bool'
p123166
sS'default'
p123167
S'1'
p123168
sS'name'
p123169
S'use_custom_returnMap'
p123170
sS'required'
p123171
I00
sS'group_name'
p123172
Nsa(dp123173
S'description'
p123174
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123175
sS'cpp_type'
p123176
S'bool'
p123177
sS'default'
p123178
S'0'
p123179
sS'name'
p123180
S'use_displaced_mesh'
p123181
sS'required'
p123182
I00
sS'group_name'
p123183
S'Advanced'
p123184
sa(dp123185
S'description'
p123186
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123187
sS'cpp_type'
p123188
S'double'
p123189
sS'default'
p123190
g3
sS'name'
p123191
S'yield_function_tolerance'
p123192
sS'required'
p123193
I01
sS'group_name'
p123194
Nsa(dp123195
S'description'
p123196
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p123197
sS'cpp_type'
p123198
S'UserObjectName'
p123199
sS'default'
p123200
g3
sS'name'
p123201
S'yield_strength'
p123202
sS'required'
p123203
I01
sS'group_name'
p123204
NsasS'name'
p123205
S'/UserObjects/TensorMechanicsPlasticOrthotropic'
p123206
sa(dp123207
S'description'
p123208
S'Class that can be used for testing multi-surface plasticity models.  Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123209
sS'subblocks'
p123210
NsS'parameters'
p123211
(lp123212
(dp123213
S'description'
p123214
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123215
sS'cpp_type'
p123216
S'double'
p123217
sS'default'
p123218
g3
sS'name'
p123219
S'a'
p123220
sS'required'
p123221
I01
sS'group_name'
p123222
Nsa(dp123223
S'description'
p123224
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123225
sS'cpp_type'
p123226
S'double'
p123227
sS'default'
p123228
g3
sS'name'
p123229
S'b'
p123230
sS'required'
p123231
I01
sS'group_name'
p123232
Nsa(dp123233
S'description'
p123234
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123235
sS'cpp_type'
p123236
S'double'
p123237
sS'default'
p123238
S'0'
p123239
sS'name'
p123240
S'c'
p123241
sS'required'
p123242
I00
sS'group_name'
p123243
Nsa(dp123244
S'description'
p123245
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123246
sS'cpp_type'
p123247
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123248
sS'default'
p123249
g3
sS'name'
p123250
S'control_tags'
p123251
sS'required'
p123252
I00
sS'group_name'
p123253
S'Advanced'
p123254
sa(dp123255
S'description'
p123256
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123257
sS'cpp_type'
p123258
S'double'
p123259
sS'default'
p123260
S'0'
p123261
sS'name'
p123262
S'd'
p123263
sS'required'
p123264
I00
sS'group_name'
p123265
Nsa(dp123266
S'description'
p123267
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123268
sS'cpp_type'
p123269
S'double'
p123270
sS'default'
p123271
S'0'
p123272
sS'name'
p123273
S'e'
p123274
sS'required'
p123275
I00
sS'group_name'
p123276
Nsa(dp123277
S'description'
p123278
S'Set the enabled status of the MooseObject.\n'
p123279
sS'cpp_type'
p123280
S'bool'
p123281
sS'default'
p123282
S'1'
p123283
sS'name'
p123284
S'enable'
p123285
sS'required'
p123286
I00
sS'group_name'
p123287
S'Advanced'
p123288
sa(dp123289
S'name'
p123290
S'execute_on'
p123291
sS'cpp_type'
p123292
S'MultiMooseEnum'
p123293
sS'default'
p123294
S'TIMESTEP_END'
p123295
sS'description'
p123296
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123297
sS'required'
p123298
I00
sS'options'
p123299
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123300
sS'group_name'
p123301
Nsa(dp123302
S'description'
p123303
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123304
sS'cpp_type'
p123305
S'double'
p123306
sS'default'
p123307
S'0'
p123308
sS'name'
p123309
S'f'
p123310
sS'required'
p123311
I00
sS'group_name'
p123312
Nsa(dp123313
S'description'
p123314
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123315
sS'cpp_type'
p123316
S'double'
p123317
sS'default'
p123318
g3
sS'name'
p123319
S'internal_constraint_tolerance'
p123320
sS'required'
p123321
I01
sS'group_name'
p123322
Nsa(dp123323
S'description'
p123324
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123325
sS'cpp_type'
p123326
S'double'
p123327
sS'default'
p123328
g3
sS'name'
p123329
S'strength'
p123330
sS'required'
p123331
I01
sS'group_name'
p123332
Nsa(dp123333
S'description'
p123334
g3
sS'cpp_type'
p123335
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123336
sS'default'
p123337
S'TensorMechanicsPlasticSimpleTester'
p123338
sS'name'
p123339
S'type'
p123340
sS'required'
p123341
I00
sS'group_name'
p123342
Nsa(dp123343
S'description'
p123344
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123345
sS'cpp_type'
p123346
S'bool'
p123347
sS'default'
p123348
S'0'
p123349
sS'name'
p123350
S'use_displaced_mesh'
p123351
sS'required'
p123352
I00
sS'group_name'
p123353
S'Advanced'
p123354
sa(dp123355
S'description'
p123356
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123357
sS'cpp_type'
p123358
S'double'
p123359
sS'default'
p123360
g3
sS'name'
p123361
S'yield_function_tolerance'
p123362
sS'required'
p123363
I01
sS'group_name'
p123364
NsasS'name'
p123365
S'/UserObjects/TensorMechanicsPlasticSimpleTester'
p123366
sa(dp123367
S'description'
p123368
S'Associative tensile plasticity with hardening/softening, and tensile_strength = 1\n'
p123369
sS'subblocks'
p123370
NsS'parameters'
p123371
(lp123372
(dp123373
S'description'
p123374
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/tensile_strength\n"
p123375
sS'cpp_type'
p123376
S'double'
p123377
sS'default'
p123378
S'0'
p123379
sS'name'
p123380
S'cap_rate'
p123381
sS'required'
p123382
I00
sS'group_name'
p123383
Nsa(dp123384
S'description'
p123385
S"For the 'cap' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n"
p123386
sS'cpp_type'
p123387
S'double'
p123388
sS'default'
p123389
S'0'
p123390
sS'name'
p123391
S'cap_start'
p123392
sS'required'
p123393
I00
sS'group_name'
p123394
Nsa(dp123395
S'description'
p123396
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123397
sS'cpp_type'
p123398
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123399
sS'default'
p123400
g3
sS'name'
p123401
S'control_tags'
p123402
sS'required'
p123403
I00
sS'group_name'
p123404
S'Advanced'
p123405
sa(dp123406
S'description'
p123407
S'Set the enabled status of the MooseObject.\n'
p123408
sS'cpp_type'
p123409
S'bool'
p123410
sS'default'
p123411
S'1'
p123412
sS'name'
p123413
S'enable'
p123414
sS'required'
p123415
I00
sS'group_name'
p123416
S'Advanced'
p123417
sa(dp123418
S'name'
p123419
S'execute_on'
p123420
sS'cpp_type'
p123421
S'MultiMooseEnum'
p123422
sS'default'
p123423
S'TIMESTEP_END'
p123424
sS'description'
p123425
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123426
sS'required'
p123427
I00
sS'options'
p123428
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123429
sS'group_name'
p123430
Nsa(dp123431
S'description'
p123432
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123433
sS'cpp_type'
p123434
S'double'
p123435
sS'default'
p123436
g3
sS'name'
p123437
S'internal_constraint_tolerance'
p123438
sS'required'
p123439
I01
sS'group_name'
p123440
Nsa(dp123441
S'description'
p123442
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p123443
sS'cpp_type'
p123444
S'double'
p123445
sS'default'
p123446
S'25'
p123447
sS'name'
p123448
S'tensile_edge_smoother'
p123449
sS'required'
p123450
I00
sS'group_name'
p123451
Nsa(dp123452
S'description'
p123453
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p123454
sS'cpp_type'
p123455
S'double'
p123456
sS'default'
p123457
g3
sS'name'
p123458
S'tensile_lode_cutoff'
p123459
sS'required'
p123460
I00
sS'group_name'
p123461
Nsa(dp123462
S'description'
p123463
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n'
p123464
sS'cpp_type'
p123465
S'UserObjectName'
p123466
sS'default'
p123467
g3
sS'name'
p123468
S'tensile_strength'
p123469
sS'required'
p123470
I01
sS'group_name'
p123471
Nsa(dp123472
S'description'
p123473
S"For the 'hyperbolic' tip_scheme, the pyramid vertex will be smoothed by the given amount.  For the 'cap' tip_scheme, additional smoothing will occur.  Typical value is 0.1*tensile_strength\n"
p123474
sS'cpp_type'
p123475
S'double'
p123476
sS'default'
p123477
g3
sS'name'
p123478
S'tensile_tip_smoother'
p123479
sS'required'
p123480
I01
sS'group_name'
p123481
Nsa(dp123482
S'name'
p123483
S'tip_scheme'
p123484
sS'cpp_type'
p123485
S'MooseEnum'
p123486
sS'default'
p123487
S'hyperbolic'
p123488
sS'description'
p123489
S"Scheme by which the pyramid's tip will be smoothed.\n"
p123490
sS'required'
p123491
I00
sS'options'
p123492
S'hyperbolic cap'
p123493
sS'group_name'
p123494
Nsa(dp123495
S'description'
p123496
g3
sS'cpp_type'
p123497
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123498
sS'default'
p123499
S'TensorMechanicsPlasticTensile'
p123500
sS'name'
p123501
S'type'
p123502
sS'required'
p123503
I00
sS'group_name'
p123504
Nsa(dp123505
S'description'
p123506
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123507
sS'cpp_type'
p123508
S'bool'
p123509
sS'default'
p123510
S'0'
p123511
sS'name'
p123512
S'use_displaced_mesh'
p123513
sS'required'
p123514
I00
sS'group_name'
p123515
S'Advanced'
p123516
sa(dp123517
S'description'
p123518
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123519
sS'cpp_type'
p123520
S'double'
p123521
sS'default'
p123522
g3
sS'name'
p123523
S'yield_function_tolerance'
p123524
sS'required'
p123525
I01
sS'group_name'
p123526
NsasS'name'
p123527
S'/UserObjects/TensorMechanicsPlasticTensile'
p123528
sa(dp123529
S'description'
p123530
S'Associative tensile plasticity with hardening/softening\n'
p123531
sS'subblocks'
p123532
NsS'parameters'
p123533
(lp123534
(dp123535
S'description'
p123536
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123537
sS'cpp_type'
p123538
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123539
sS'default'
p123540
g3
sS'name'
p123541
S'control_tags'
p123542
sS'required'
p123543
I00
sS'group_name'
p123544
S'Advanced'
p123545
sa(dp123546
S'description'
p123547
S'Set the enabled status of the MooseObject.\n'
p123548
sS'cpp_type'
p123549
S'bool'
p123550
sS'default'
p123551
S'1'
p123552
sS'name'
p123553
S'enable'
p123554
sS'required'
p123555
I00
sS'group_name'
p123556
S'Advanced'
p123557
sa(dp123558
S'name'
p123559
S'execute_on'
p123560
sS'cpp_type'
p123561
S'MultiMooseEnum'
p123562
sS'default'
p123563
S'TIMESTEP_END'
p123564
sS'description'
p123565
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123566
sS'required'
p123567
I00
sS'options'
p123568
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123569
sS'group_name'
p123570
Nsa(dp123571
S'description'
p123572
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123573
sS'cpp_type'
p123574
S'double'
p123575
sS'default'
p123576
g3
sS'name'
p123577
S'internal_constraint_tolerance'
p123578
sS'required'
p123579
I01
sS'group_name'
p123580
Nsa(dp123581
S'description'
p123582
S'Maximum number of Newton-Raphson iterations allowed in the custom return-map algorithm.  For highly nonlinear hardening this may need to be higher than 10.\n'
p123583
sS'cpp_type'
p123584
S'unsigned int'
p123585
sS'default'
p123586
S'10'
p123587
sS'name'
p123588
S'max_iterations'
p123589
sS'required'
p123590
I00
sS'group_name'
p123591
Nsa(dp123592
S'description'
p123593
S'Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n'
p123594
sS'cpp_type'
p123595
S'double'
p123596
sS'default'
p123597
g3
sS'name'
p123598
S'shift'
p123599
sS'required'
p123600
I00
sS'group_name'
p123601
Nsa(dp123602
S'description'
p123603
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n'
p123604
sS'cpp_type'
p123605
S'UserObjectName'
p123606
sS'default'
p123607
g3
sS'name'
p123608
S'tensile_strength'
p123609
sS'required'
p123610
I01
sS'group_name'
p123611
Nsa(dp123612
S'description'
p123613
g3
sS'cpp_type'
p123614
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123615
sS'default'
p123616
S'TensorMechanicsPlasticTensileMulti'
p123617
sS'name'
p123618
S'type'
p123619
sS'required'
p123620
I00
sS'group_name'
p123621
Nsa(dp123622
S'description'
p123623
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p123624
sS'cpp_type'
p123625
S'bool'
p123626
sS'default'
p123627
S'1'
p123628
sS'name'
p123629
S'use_custom_cto'
p123630
sS'required'
p123631
I00
sS'group_name'
p123632
Nsa(dp123633
S'description'
p123634
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p123635
sS'cpp_type'
p123636
S'bool'
p123637
sS'default'
p123638
S'1'
p123639
sS'name'
p123640
S'use_custom_returnMap'
p123641
sS'required'
p123642
I00
sS'group_name'
p123643
Nsa(dp123644
S'description'
p123645
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123646
sS'cpp_type'
p123647
S'bool'
p123648
sS'default'
p123649
S'0'
p123650
sS'name'
p123651
S'use_displaced_mesh'
p123652
sS'required'
p123653
I00
sS'group_name'
p123654
S'Advanced'
p123655
sa(dp123656
S'description'
p123657
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123658
sS'cpp_type'
p123659
S'double'
p123660
sS'default'
p123661
g3
sS'name'
p123662
S'yield_function_tolerance'
p123663
sS'required'
p123664
I01
sS'group_name'
p123665
NsasS'name'
p123666
S'/UserObjects/TensorMechanicsPlasticTensileMulti'
p123667
sa(dp123668
S'description'
p123669
S'Non-associative finite-strain weak-plane shear perfect plasticity.  Here cohesion = 1, tan(phi) = 1 = tan(psi)\n'
p123670
sS'subblocks'
p123671
NsS'parameters'
p123672
(lp123673
(dp123674
S'description'
p123675
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/cohesion\n"
p123676
sS'cpp_type'
p123677
S'double'
p123678
sS'default'
p123679
S'0'
p123680
sS'name'
p123681
S'cap_rate'
p123682
sS'required'
p123683
I00
sS'group_name'
p123684
Nsa(dp123685
S'description'
p123686
S"For the 'cap' tip_scheme, smoothing is performed in the stress_zz > cap_start region\n"
p123687
sS'cpp_type'
p123688
S'double'
p123689
sS'default'
p123690
S'0'
p123691
sS'name'
p123692
S'cap_start'
p123693
sS'required'
p123694
I00
sS'group_name'
p123695
Nsa(dp123696
S'description'
p123697
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p123698
sS'cpp_type'
p123699
S'UserObjectName'
p123700
sS'default'
p123701
g3
sS'name'
p123702
S'cohesion'
p123703
sS'required'
p123704
I01
sS'group_name'
p123705
Nsa(dp123706
S'description'
p123707
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123708
sS'cpp_type'
p123709
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123710
sS'default'
p123711
g3
sS'name'
p123712
S'control_tags'
p123713
sS'required'
p123714
I00
sS'group_name'
p123715
S'Advanced'
p123716
sa(dp123717
S'description'
p123718
S'Set the enabled status of the MooseObject.\n'
p123719
sS'cpp_type'
p123720
S'bool'
p123721
sS'default'
p123722
S'1'
p123723
sS'name'
p123724
S'enable'
p123725
sS'required'
p123726
I00
sS'group_name'
p123727
S'Advanced'
p123728
sa(dp123729
S'name'
p123730
S'execute_on'
p123731
sS'cpp_type'
p123732
S'MultiMooseEnum'
p123733
sS'default'
p123734
S'TIMESTEP_END'
p123735
sS'description'
p123736
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123737
sS'required'
p123738
I00
sS'options'
p123739
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123740
sS'group_name'
p123741
Nsa(dp123742
S'description'
p123743
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123744
sS'cpp_type'
p123745
S'double'
p123746
sS'default'
p123747
g3
sS'name'
p123748
S'internal_constraint_tolerance'
p123749
sS'required'
p123750
I01
sS'group_name'
p123751
Nsa(dp123752
S'description'
p123753
S"For the 'hyperbolic' tip_scheme, the cone vertex at shear-stress = 0 will be smoothed by the given amount.  For the 'cap' tip_scheme, additional smoothing will occur.  Typical value is 0.1*cohesion\n"
p123754
sS'cpp_type'
p123755
S'double'
p123756
sS'default'
p123757
g3
sS'name'
p123758
S'smoother'
p123759
sS'required'
p123760
I01
sS'group_name'
p123761
Nsa(dp123762
S'description'
p123763
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p123764
sS'cpp_type'
p123765
S'UserObjectName'
p123766
sS'default'
p123767
g3
sS'name'
p123768
S'tan_dilation_angle'
p123769
sS'required'
p123770
I01
sS'group_name'
p123771
Nsa(dp123772
S'description'
p123773
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p123774
sS'cpp_type'
p123775
S'UserObjectName'
p123776
sS'default'
p123777
g3
sS'name'
p123778
S'tan_friction_angle'
p123779
sS'required'
p123780
I01
sS'group_name'
p123781
Nsa(dp123782
S'name'
p123783
S'tip_scheme'
p123784
sS'cpp_type'
p123785
S'MooseEnum'
p123786
sS'default'
p123787
S'hyperbolic'
p123788
sS'description'
p123789
S"Scheme by which the cone's tip will be smoothed.\n"
p123790
sS'required'
p123791
I00
sS'options'
p123792
S'hyperbolic cap'
p123793
sS'group_name'
p123794
Nsa(dp123795
S'description'
p123796
g3
sS'cpp_type'
p123797
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123798
sS'default'
p123799
S'TensorMechanicsPlasticWeakPlaneShear'
p123800
sS'name'
p123801
S'type'
p123802
sS'required'
p123803
I00
sS'group_name'
p123804
Nsa(dp123805
S'description'
p123806
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123807
sS'cpp_type'
p123808
S'bool'
p123809
sS'default'
p123810
S'0'
p123811
sS'name'
p123812
S'use_displaced_mesh'
p123813
sS'required'
p123814
I00
sS'group_name'
p123815
S'Advanced'
p123816
sa(dp123817
S'description'
p123818
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123819
sS'cpp_type'
p123820
S'double'
p123821
sS'default'
p123822
g3
sS'name'
p123823
S'yield_function_tolerance'
p123824
sS'required'
p123825
I01
sS'group_name'
p123826
NsasS'name'
p123827
S'/UserObjects/TensorMechanicsPlasticWeakPlaneShear'
p123828
sa(dp123829
S'description'
p123830
S'Associative weak-plane tensile plasticity with hardening/softening\n'
p123831
sS'subblocks'
p123832
NsS'parameters'
p123833
(lp123834
(dp123835
S'description'
p123836
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123837
sS'cpp_type'
p123838
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123839
sS'default'
p123840
g3
sS'name'
p123841
S'control_tags'
p123842
sS'required'
p123843
I00
sS'group_name'
p123844
S'Advanced'
p123845
sa(dp123846
S'description'
p123847
S'Set the enabled status of the MooseObject.\n'
p123848
sS'cpp_type'
p123849
S'bool'
p123850
sS'default'
p123851
S'1'
p123852
sS'name'
p123853
S'enable'
p123854
sS'required'
p123855
I00
sS'group_name'
p123856
S'Advanced'
p123857
sa(dp123858
S'name'
p123859
S'execute_on'
p123860
sS'cpp_type'
p123861
S'MultiMooseEnum'
p123862
sS'default'
p123863
S'TIMESTEP_END'
p123864
sS'description'
p123865
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123866
sS'required'
p123867
I00
sS'options'
p123868
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123869
sS'group_name'
p123870
Nsa(dp123871
S'description'
p123872
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123873
sS'cpp_type'
p123874
S'double'
p123875
sS'default'
p123876
g3
sS'name'
p123877
S'internal_constraint_tolerance'
p123878
sS'required'
p123879
I01
sS'group_name'
p123880
Nsa(dp123881
S'description'
p123882
S'The yield function is stress_coefficient * stress_zz - tensile_strength\n'
p123883
sS'cpp_type'
p123884
S'double'
p123885
sS'default'
p123886
S'1'
p123887
sS'name'
p123888
S'stress_coefficient'
p123889
sS'required'
p123890
I00
sS'group_name'
p123891
Nsa(dp123892
S'description'
p123893
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n'
p123894
sS'cpp_type'
p123895
S'UserObjectName'
p123896
sS'default'
p123897
g3
sS'name'
p123898
S'tensile_strength'
p123899
sS'required'
p123900
I01
sS'group_name'
p123901
Nsa(dp123902
S'description'
p123903
g3
sS'cpp_type'
p123904
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123905
sS'default'
p123906
S'TensorMechanicsPlasticWeakPlaneTensile'
p123907
sS'name'
p123908
S'type'
p123909
sS'required'
p123910
I00
sS'group_name'
p123911
Nsa(dp123912
S'description'
p123913
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123914
sS'cpp_type'
p123915
S'bool'
p123916
sS'default'
p123917
S'0'
p123918
sS'name'
p123919
S'use_displaced_mesh'
p123920
sS'required'
p123921
I00
sS'group_name'
p123922
S'Advanced'
p123923
sa(dp123924
S'description'
p123925
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123926
sS'cpp_type'
p123927
S'double'
p123928
sS'default'
p123929
g3
sS'name'
p123930
S'yield_function_tolerance'
p123931
sS'required'
p123932
I01
sS'group_name'
p123933
NsasS'name'
p123934
S'/UserObjects/TensorMechanicsPlasticWeakPlaneTensile'
p123935
sa(dp123936
S'description'
p123937
S'Associative weak-plane tensile plasticity with hardening/softening, with specified, fixed normal vector.  (WeakPlaneTensile combined with specifying N in the Material might be preferable to you.)\n'
p123938
sS'subblocks'
p123939
NsS'parameters'
p123940
(lp123941
(dp123942
S'description'
p123943
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123944
sS'cpp_type'
p123945
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123946
sS'default'
p123947
g3
sS'name'
p123948
S'control_tags'
p123949
sS'required'
p123950
I00
sS'group_name'
p123951
S'Advanced'
p123952
sa(dp123953
S'description'
p123954
S'Set the enabled status of the MooseObject.\n'
p123955
sS'cpp_type'
p123956
S'bool'
p123957
sS'default'
p123958
S'1'
p123959
sS'name'
p123960
S'enable'
p123961
sS'required'
p123962
I00
sS'group_name'
p123963
S'Advanced'
p123964
sa(dp123965
S'name'
p123966
S'execute_on'
p123967
sS'cpp_type'
p123968
S'MultiMooseEnum'
p123969
sS'default'
p123970
S'TIMESTEP_END'
p123971
sS'description'
p123972
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123973
sS'required'
p123974
I00
sS'options'
p123975
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123976
sS'group_name'
p123977
Nsa(dp123978
S'description'
p123979
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123980
sS'cpp_type'
p123981
S'double'
p123982
sS'default'
p123983
g3
sS'name'
p123984
S'internal_constraint_tolerance'
p123985
sS'required'
p123986
I01
sS'group_name'
p123987
Nsa(dp123988
S'description'
p123989
S'The normal vector to the weak plane\n'
p123990
sS'cpp_type'
p123991
S'libMesh::VectorValue<double>'
p123992
sS'default'
p123993
g3
sS'name'
p123994
S'normal_vector'
p123995
sS'required'
p123996
I01
sS'group_name'
p123997
Nsa(dp123998
S'description'
p123999
S'The yield function is stress_coefficient * stress_zz - tensile_strength\n'
p124000
sS'cpp_type'
p124001
S'double'
p124002
sS'default'
p124003
S'1'
p124004
sS'name'
p124005
S'stress_coefficient'
p124006
sS'required'
p124007
I00
sS'group_name'
p124008
Nsa(dp124009
S'description'
p124010
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n'
p124011
sS'cpp_type'
p124012
S'UserObjectName'
p124013
sS'default'
p124014
g3
sS'name'
p124015
S'tensile_strength'
p124016
sS'required'
p124017
I01
sS'group_name'
p124018
Nsa(dp124019
S'description'
p124020
g3
sS'cpp_type'
p124021
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124022
sS'default'
p124023
S'TensorMechanicsPlasticWeakPlaneTensileN'
p124024
sS'name'
p124025
S'type'
p124026
sS'required'
p124027
I00
sS'group_name'
p124028
Nsa(dp124029
S'description'
p124030
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124031
sS'cpp_type'
p124032
S'bool'
p124033
sS'default'
p124034
S'0'
p124035
sS'name'
p124036
S'use_displaced_mesh'
p124037
sS'required'
p124038
I00
sS'group_name'
p124039
S'Advanced'
p124040
sa(dp124041
S'description'
p124042
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124043
sS'cpp_type'
p124044
S'double'
p124045
sS'default'
p124046
g3
sS'name'
p124047
S'yield_function_tolerance'
p124048
sS'required'
p124049
I01
sS'group_name'
p124050
NsasS'name'
p124051
S'/UserObjects/TensorMechanicsPlasticWeakPlaneTensileN'
p124052
sa(dp124053
S'description'
p124054
g3
sS'subblocks'
p124055
NsS'parameters'
p124056
(lp124057
(dp124058
S'description'
p124059
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124060
sS'cpp_type'
p124061
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124062
sS'default'
p124063
g3
sS'name'
p124064
S'control_tags'
p124065
sS'required'
p124066
I00
sS'group_name'
p124067
S'Advanced'
p124068
sa(dp124069
S'description'
p124070
S'Set the enabled status of the MooseObject.\n'
p124071
sS'cpp_type'
p124072
S'bool'
p124073
sS'default'
p124074
S'1'
p124075
sS'name'
p124076
S'enable'
p124077
sS'required'
p124078
I00
sS'group_name'
p124079
S'Advanced'
p124080
sa(dp124081
S'name'
p124082
S'execute_on'
p124083
sS'cpp_type'
p124084
S'MultiMooseEnum'
p124085
sS'default'
p124086
S'TIMESTEP_END'
p124087
sS'description'
p124088
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124089
sS'required'
p124090
I00
sS'options'
p124091
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124092
sS'group_name'
p124093
Nsa(dp124094
S'description'
p124095
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p124096
sS'cpp_type'
p124097
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124098
sS'default'
p124099
g3
sS'name'
p124100
S'expression'
p124101
sS'required'
p124102
I01
sS'group_name'
p124103
Nsa(dp124104
S'description'
p124105
g3
sS'cpp_type'
p124106
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124107
sS'default'
p124108
S'Terminator'
p124109
sS'name'
p124110
S'type'
p124111
sS'required'
p124112
I00
sS'group_name'
p124113
Nsa(dp124114
S'description'
p124115
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124116
sS'cpp_type'
p124117
S'bool'
p124118
sS'default'
p124119
S'0'
p124120
sS'name'
p124121
S'use_displaced_mesh'
p124122
sS'required'
p124123
I00
sS'group_name'
p124124
S'Advanced'
p124125
sasS'name'
p124126
S'/UserObjects/Terminator'
p124127
sa(dp124128
S'description'
p124129
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p124130
sS'subblocks'
p124131
NsS'parameters'
p124132
(lp124133
(dp124134
S'description'
p124135
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124136
sS'cpp_type'
p124137
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124138
sS'default'
p124139
g3
sS'name'
p124140
S'control_tags'
p124141
sS'required'
p124142
I00
sS'group_name'
p124143
S'Advanced'
p124144
sa(dp124145
S'description'
p124146
S'Set the enabled status of the MooseObject.\n'
p124147
sS'cpp_type'
p124148
S'bool'
p124149
sS'default'
p124150
S'1'
p124151
sS'name'
p124152
S'enable'
p124153
sS'required'
p124154
I00
sS'group_name'
p124155
S'Advanced'
p124156
sa(dp124157
S'name'
p124158
S'execute_on'
p124159
sS'cpp_type'
p124160
S'MultiMooseEnum'
p124161
sS'default'
p124162
S'TIMESTEP_END'
p124163
sS'description'
p124164
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124165
sS'required'
p124166
I00
sS'options'
p124167
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124168
sS'group_name'
p124169
Nsa(dp124170
S'description'
p124171
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124172
sS'cpp_type'
p124173
S'std::vector<OutputName, std::allocator<OutputName> >'
p124174
sS'default'
p124175
g3
sS'name'
p124176
S'outputs'
p124177
sS'required'
p124178
I00
sS'group_name'
p124179
S'Advanced'
p124180
sa(dp124181
S'description'
p124182
S'The name of the postprocessor used for reporting time extreme values\n'
p124183
sS'cpp_type'
p124184
S'PostprocessorName'
p124185
sS'default'
p124186
g3
sS'name'
p124187
S'postprocessor'
p124188
sS'required'
p124189
I01
sS'group_name'
p124190
Nsa(dp124191
S'description'
p124192
g3
sS'cpp_type'
p124193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124194
sS'default'
p124195
S'TimeExtremeValue'
p124196
sS'name'
p124197
S'type'
p124198
sS'required'
p124199
I00
sS'group_name'
p124200
Nsa(dp124201
S'description'
p124202
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124203
sS'cpp_type'
p124204
S'bool'
p124205
sS'default'
p124206
S'0'
p124207
sS'name'
p124208
S'use_displaced_mesh'
p124209
sS'required'
p124210
I00
sS'group_name'
p124211
S'Advanced'
p124212
sa(dp124213
S'name'
p124214
S'value_type'
p124215
sS'cpp_type'
p124216
S'MooseEnum'
p124217
sS'default'
p124218
S'max'
p124219
sS'description'
p124220
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p124221
sS'required'
p124222
I00
sS'options'
p124223
S'max min abs_max abs_min'
p124224
sS'group_name'
p124225
NsasS'name'
p124226
S'/UserObjects/TimeExtremeValue'
p124227
sa(dp124228
S'description'
p124229
g3
sS'subblocks'
p124230
NsS'parameters'
p124231
(lp124232
(dp124233
S'description'
p124234
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124235
sS'cpp_type'
p124236
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124237
sS'default'
p124238
g3
sS'name'
p124239
S'control_tags'
p124240
sS'required'
p124241
I00
sS'group_name'
p124242
S'Advanced'
p124243
sa(dp124244
S'description'
p124245
S'Set the enabled status of the MooseObject.\n'
p124246
sS'cpp_type'
p124247
S'bool'
p124248
sS'default'
p124249
S'1'
p124250
sS'name'
p124251
S'enable'
p124252
sS'required'
p124253
I00
sS'group_name'
p124254
S'Advanced'
p124255
sa(dp124256
S'name'
p124257
S'execute_on'
p124258
sS'cpp_type'
p124259
S'MultiMooseEnum'
p124260
sS'default'
p124261
S'TIMESTEP_END'
p124262
sS'description'
p124263
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124264
sS'required'
p124265
I00
sS'options'
p124266
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124267
sS'group_name'
p124268
Nsa(dp124269
S'description'
p124270
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124271
sS'cpp_type'
p124272
S'std::vector<OutputName, std::allocator<OutputName> >'
p124273
sS'default'
p124274
g3
sS'name'
p124275
S'outputs'
p124276
sS'required'
p124277
I00
sS'group_name'
p124278
S'Advanced'
p124279
sa(dp124280
S'description'
p124281
g3
sS'cpp_type'
p124282
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124283
sS'default'
p124284
S'TimestepSize'
p124285
sS'name'
p124286
S'type'
p124287
sS'required'
p124288
I00
sS'group_name'
p124289
Nsa(dp124290
S'description'
p124291
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124292
sS'cpp_type'
p124293
S'bool'
p124294
sS'default'
p124295
S'0'
p124296
sS'name'
p124297
S'use_displaced_mesh'
p124298
sS'required'
p124299
I00
sS'group_name'
p124300
S'Advanced'
p124301
sasS'name'
p124302
S'/UserObjects/TimestepSize'
p124303
sa(dp124304
S'description'
p124305
g3
sS'subblocks'
p124306
NsS'parameters'
p124307
(lp124308
(dp124309
S'description'
p124310
S'Origin of the axis of rotation used to calculate the torque\n'
p124311
sS'cpp_type'
p124312
S'libMesh::VectorValue<double>'
p124313
sS'default'
p124314
S'0 0 0'
p124315
sS'name'
p124316
S'axis_origin'
p124317
sS'required'
p124318
I00
sS'group_name'
p124319
Nsa(dp124320
S'description'
p124321
S'The list of block ids (SubdomainID) that this object will be applied\n'
p124322
sS'cpp_type'
p124323
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p124324
sS'default'
p124325
g3
sS'name'
p124326
S'block'
p124327
sS'required'
p124328
I00
sS'group_name'
p124329
Nsa(dp124330
S'description'
p124331
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p124332
sS'cpp_type'
p124333
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p124334
sS'default'
p124335
g3
sS'name'
p124336
S'boundary'
p124337
sS'required'
p124338
I00
sS'group_name'
p124339
Nsa(dp124340
S'description'
p124341
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124342
sS'cpp_type'
p124343
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124344
sS'default'
p124345
g3
sS'name'
p124346
S'control_tags'
p124347
sS'required'
p124348
I00
sS'group_name'
p124349
S'Advanced'
p124350
sa(dp124351
S'description'
p124352
S'The direction vector of the axis of rotation about which the calculated torque is calculated\n'
p124353
sS'cpp_type'
p124354
S'libMesh::VectorValue<double>'
p124355
sS'default'
p124356
g3
sS'name'
p124357
S'direction_vector'
p124358
sS'required'
p124359
I01
sS'group_name'
p124360
Nsa(dp124361
S'description'
p124362
S'Set the enabled status of the MooseObject.\n'
p124363
sS'cpp_type'
p124364
S'bool'
p124365
sS'default'
p124366
S'1'
p124367
sS'name'
p124368
S'enable'
p124369
sS'required'
p124370
I00
sS'group_name'
p124371
S'Advanced'
p124372
sa(dp124373
S'name'
p124374
S'execute_on'
p124375
sS'cpp_type'
p124376
S'MultiMooseEnum'
p124377
sS'default'
p124378
S'TIMESTEP_END'
p124379
sS'description'
p124380
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124381
sS'required'
p124382
I00
sS'options'
p124383
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124384
sS'group_name'
p124385
Nsa(dp124386
S'description'
p124387
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124388
sS'cpp_type'
p124389
S'std::vector<OutputName, std::allocator<OutputName> >'
p124390
sS'default'
p124391
g3
sS'name'
p124392
S'outputs'
p124393
sS'required'
p124394
I00
sS'group_name'
p124395
S'Advanced'
p124396
sa(dp124397
S'description'
p124398
S'The reaction variables\n'
p124399
sS'cpp_type'
p124400
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p124401
sS'default'
p124402
g3
sS'name'
p124403
S'react'
p124404
sS'required'
p124405
I01
sS'group_name'
p124406
Nsa(dp124407
S'description'
p124408
S'The seed for the master random number generator\n'
p124409
sS'cpp_type'
p124410
S'unsigned int'
p124411
sS'default'
p124412
S'0'
p124413
sS'name'
p124414
S'seed'
p124415
sS'required'
p124416
I00
sS'group_name'
p124417
S'Advanced'
p124418
sa(dp124419
S'description'
p124420
g3
sS'cpp_type'
p124421
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124422
sS'default'
p124423
S'TorqueReaction'
p124424
sS'name'
p124425
S'type'
p124426
sS'required'
p124427
I00
sS'group_name'
p124428
Nsa(dp124429
S'description'
p124430
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p124431
sS'cpp_type'
p124432
S'bool'
p124433
sS'default'
p124434
S'0'
p124435
sS'name'
p124436
S'unique_node_execute'
p124437
sS'required'
p124438
I00
sS'group_name'
p124439
Nsa(dp124440
S'description'
p124441
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124442
sS'cpp_type'
p124443
S'bool'
p124444
sS'default'
p124445
S'1'
p124446
sS'name'
p124447
S'use_displaced_mesh'
p124448
sS'required'
p124449
I00
sS'group_name'
p124450
S'Advanced'
p124451
sasS'name'
p124452
S'/UserObjects/TorqueReaction'
p124453
sa(dp124454
S'description'
p124455
g3
sS'subblocks'
p124456
NsS'parameters'
p124457
(lp124458
(dp124459
S'description'
p124460
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124461
sS'cpp_type'
p124462
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124463
sS'default'
p124464
g3
sS'name'
p124465
S'control_tags'
p124466
sS'required'
p124467
I00
sS'group_name'
p124468
S'Advanced'
p124469
sa(dp124470
S'description'
p124471
S'Set the enabled status of the MooseObject.\n'
p124472
sS'cpp_type'
p124473
S'bool'
p124474
sS'default'
p124475
S'1'
p124476
sS'name'
p124477
S'enable'
p124478
sS'required'
p124479
I00
sS'group_name'
p124480
S'Advanced'
p124481
sa(dp124482
S'name'
p124483
S'execute_on'
p124484
sS'cpp_type'
p124485
S'MultiMooseEnum'
p124486
sS'default'
p124487
S'TIMESTEP_END'
p124488
sS'description'
p124489
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124490
sS'required'
p124491
I00
sS'options'
p124492
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124493
sS'group_name'
p124494
Nsa(dp124495
S'description'
p124496
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124497
sS'cpp_type'
p124498
S'std::vector<OutputName, std::allocator<OutputName> >'
p124499
sS'default'
p124500
g3
sS'name'
p124501
S'outputs'
p124502
sS'required'
p124503
I00
sS'group_name'
p124504
S'Advanced'
p124505
sa(dp124506
S'description'
p124507
g3
sS'cpp_type'
p124508
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124509
sS'default'
p124510
S'TotalVariableValue'
p124511
sS'name'
p124512
S'type'
p124513
sS'required'
p124514
I00
sS'group_name'
p124515
Nsa(dp124516
S'description'
p124517
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124518
sS'cpp_type'
p124519
S'bool'
p124520
sS'default'
p124521
S'0'
p124522
sS'name'
p124523
S'use_displaced_mesh'
p124524
sS'required'
p124525
I00
sS'group_name'
p124526
S'Advanced'
p124527
sa(dp124528
S'description'
p124529
S'The name of the postprocessor\n'
p124530
sS'cpp_type'
p124531
S'PostprocessorName'
p124532
sS'default'
p124533
g3
sS'name'
p124534
S'value'
p124535
sS'required'
p124536
I00
sS'group_name'
p124537
NsasS'name'
p124538
S'/UserObjects/TotalVariableValue'
p124539
sa(dp124540
S'description'
p124541
g3
sS'subblocks'
p124542
NsS'parameters'
p124543
(lp124544
(dp124545
S'description'
p124546
S'The list of block ids (SubdomainID) that this object will be applied\n'
p124547
sS'cpp_type'
p124548
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p124549
sS'default'
p124550
g3
sS'name'
p124551
S'block'
p124552
sS'required'
p124553
I00
sS'group_name'
p124554
Nsa(dp124555
S'description'
p124556
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124557
sS'cpp_type'
p124558
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124559
sS'default'
p124560
g3
sS'name'
p124561
S'control_tags'
p124562
sS'required'
p124563
I00
sS'group_name'
p124564
S'Advanced'
p124565
sa(dp124566
S'description'
p124567
S'Set the enabled status of the MooseObject.\n'
p124568
sS'cpp_type'
p124569
S'bool'
p124570
sS'default'
p124571
S'1'
p124572
sS'name'
p124573
S'enable'
p124574
sS'required'
p124575
I00
sS'group_name'
p124576
S'Advanced'
p124577
sa(dp124578
S'name'
p124579
S'execute_on'
p124580
sS'cpp_type'
p124581
S'MultiMooseEnum'
p124582
sS'default'
p124583
S'TIMESTEP_END'
p124584
sS'description'
p124585
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124586
sS'required'
p124587
I00
sS'options'
p124588
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124589
sS'group_name'
p124590
Nsa(dp124591
S'description'
p124592
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124593
sS'cpp_type'
p124594
S'std::vector<OutputName, std::allocator<OutputName> >'
p124595
sS'default'
p124596
g3
sS'name'
p124597
S'outputs'
p124598
sS'required'
p124599
I00
sS'group_name'
p124600
S'Advanced'
p124601
sa(dp124602
S'description'
p124603
S'The name of the second variable in the inner product (variable, second_variable)\n'
p124604
sS'cpp_type'
p124605
S'std::vector<VariableName>'
p124606
sS'default'
p124607
g3
sS'name'
p124608
S'second_variable'
p124609
sS'required'
p124610
I01
sS'group_name'
p124611
Nsa(dp124612
S'description'
p124613
S'The seed for the master random number generator\n'
p124614
sS'cpp_type'
p124615
S'unsigned int'
p124616
sS'default'
p124617
S'0'
p124618
sS'name'
p124619
S'seed'
p124620
sS'required'
p124621
I00
sS'group_name'
p124622
S'Advanced'
p124623
sa(dp124624
S'description'
p124625
g3
sS'cpp_type'
p124626
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124627
sS'default'
p124628
S'VariableInnerProduct'
p124629
sS'name'
p124630
S'type'
p124631
sS'required'
p124632
I00
sS'group_name'
p124633
Nsa(dp124634
S'description'
p124635
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124636
sS'cpp_type'
p124637
S'bool'
p124638
sS'default'
p124639
S'0'
p124640
sS'name'
p124641
S'use_displaced_mesh'
p124642
sS'required'
p124643
I00
sS'group_name'
p124644
S'Advanced'
p124645
sa(dp124646
S'description'
p124647
S'The name of the variable that this object operates on\n'
p124648
sS'cpp_type'
p124649
S'std::vector<VariableName>'
p124650
sS'default'
p124651
g3
sS'name'
p124652
S'variable'
p124653
sS'required'
p124654
I01
sS'group_name'
p124655
NsasS'name'
p124656
S'/UserObjects/VariableInnerProduct'
p124657
sa(dp124658
S'description'
p124659
g3
sS'subblocks'
p124660
NsS'parameters'
p124661
(lp124662
(dp124663
S'description'
p124664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124665
sS'cpp_type'
p124666
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124667
sS'default'
p124668
g3
sS'name'
p124669
S'control_tags'
p124670
sS'required'
p124671
I00
sS'group_name'
p124672
S'Advanced'
p124673
sa(dp124674
S'description'
p124675
S'Set the enabled status of the MooseObject.\n'
p124676
sS'cpp_type'
p124677
S'bool'
p124678
sS'default'
p124679
S'1'
p124680
sS'name'
p124681
S'enable'
p124682
sS'required'
p124683
I00
sS'group_name'
p124684
S'Advanced'
p124685
sa(dp124686
S'name'
p124687
S'execute_on'
p124688
sS'cpp_type'
p124689
S'MultiMooseEnum'
p124690
sS'default'
p124691
S'TIMESTEP_END'
p124692
sS'description'
p124693
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124694
sS'required'
p124695
I00
sS'options'
p124696
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124697
sS'group_name'
p124698
Nsa(dp124699
S'description'
p124700
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124701
sS'cpp_type'
p124702
S'std::vector<OutputName, std::allocator<OutputName> >'
p124703
sS'default'
p124704
g3
sS'name'
p124705
S'outputs'
p124706
sS'required'
p124707
I00
sS'group_name'
p124708
S'Advanced'
p124709
sa(dp124710
S'description'
p124711
g3
sS'cpp_type'
p124712
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124713
sS'default'
p124714
S'VariableResidual'
p124715
sS'name'
p124716
S'type'
p124717
sS'required'
p124718
I00
sS'group_name'
p124719
Nsa(dp124720
S'description'
p124721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124722
sS'cpp_type'
p124723
S'bool'
p124724
sS'default'
p124725
S'0'
p124726
sS'name'
p124727
S'use_displaced_mesh'
p124728
sS'required'
p124729
I00
sS'group_name'
p124730
S'Advanced'
p124731
sa(dp124732
S'description'
p124733
S'The name of the variable to compute the residual for\n'
p124734
sS'cpp_type'
p124735
S'VariableName'
p124736
sS'default'
p124737
g3
sS'name'
p124738
S'variable'
p124739
sS'required'
p124740
I01
sS'group_name'
p124741
NsasS'name'
p124742
S'/UserObjects/VariableResidual'
p124743
sa(dp124744
S'description'
p124745
g3
sS'subblocks'
p124746
NsS'parameters'
p124747
(lp124748
(dp124749
S'description'
p124750
S'The list of block ids (SubdomainID) that this object will be applied\n'
p124751
sS'cpp_type'
p124752
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p124753
sS'default'
p124754
g3
sS'name'
p124755
S'block'
p124756
sS'required'
p124757
I00
sS'group_name'
p124758
Nsa(dp124759
S'description'
p124760
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124761
sS'cpp_type'
p124762
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124763
sS'default'
p124764
g3
sS'name'
p124765
S'control_tags'
p124766
sS'required'
p124767
I00
sS'group_name'
p124768
S'Advanced'
p124769
sa(dp124770
S'description'
p124771
S'Set the enabled status of the MooseObject.\n'
p124772
sS'cpp_type'
p124773
S'bool'
p124774
sS'default'
p124775
S'1'
p124776
sS'name'
p124777
S'enable'
p124778
sS'required'
p124779
I00
sS'group_name'
p124780
S'Advanced'
p124781
sa(dp124782
S'name'
p124783
S'execute_on'
p124784
sS'cpp_type'
p124785
S'MultiMooseEnum'
p124786
sS'default'
p124787
S'TIMESTEP_END'
p124788
sS'description'
p124789
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124790
sS'required'
p124791
I00
sS'options'
p124792
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124793
sS'group_name'
p124794
Nsa(dp124795
S'description'
p124796
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124797
sS'cpp_type'
p124798
S'std::vector<OutputName, std::allocator<OutputName> >'
p124799
sS'default'
p124800
g3
sS'name'
p124801
S'outputs'
p124802
sS'required'
p124803
I00
sS'group_name'
p124804
S'Advanced'
p124805
sa(dp124806
S'description'
p124807
S'The seed for the master random number generator\n'
p124808
sS'cpp_type'
p124809
S'unsigned int'
p124810
sS'default'
p124811
S'0'
p124812
sS'name'
p124813
S'seed'
p124814
sS'required'
p124815
I00
sS'group_name'
p124816
S'Advanced'
p124817
sa(dp124818
S'description'
p124819
g3
sS'cpp_type'
p124820
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124821
sS'default'
p124822
S'VolumePostprocessor'
p124823
sS'name'
p124824
S'type'
p124825
sS'required'
p124826
I00
sS'group_name'
p124827
Nsa(dp124828
S'description'
p124829
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124830
sS'cpp_type'
p124831
S'bool'
p124832
sS'default'
p124833
S'0'
p124834
sS'name'
p124835
S'use_displaced_mesh'
p124836
sS'required'
p124837
I00
sS'group_name'
p124838
S'Advanced'
p124839
sasS'name'
p124840
S'/UserObjects/VolumePostprocessor'
p124841
sasS'parameters'
p124842
NsS'name'
p124843
S'/UserObjects'
p124844
sa(dp124845
S'description'
p124846
g3
sS'subblocks'
p124847
(lp124848
(dp124849
S'description'
p124850
g3
sS'subblocks'
p124851
(lp124852
(dp124853
S'description'
p124854
g3
sS'subblocks'
p124855
(lp124856
(dp124857
S'description'
p124858
g3
sS'subblocks'
p124859
(lp124860
(dp124861
S'description'
p124862
S'Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n'
p124863
sS'subblocks'
p124864
NsS'parameters'
p124865
(lp124866
(dp124867
S'description'
p124868
S'Semiaxis a for each superellipsoid\n'
p124869
sS'cpp_type'
p124870
S'std::vector<double, std::allocator<double> >'
p124871
sS'default'
p124872
g3
sS'name'
p124873
S'as'
p124874
sS'required'
p124875
I01
sS'group_name'
p124876
Nsa(dp124877
S'description'
p124878
S'The list of block ids (SubdomainID) that this object will be applied\n'
p124879
sS'cpp_type'
p124880
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p124881
sS'default'
p124882
g3
sS'name'
p124883
S'block'
p124884
sS'required'
p124885
I00
sS'group_name'
p124886
Nsa(dp124887
S'description'
p124888
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p124889
sS'cpp_type'
p124890
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p124891
sS'default'
p124892
g3
sS'name'
p124893
S'boundary'
p124894
sS'required'
p124895
I00
sS'group_name'
p124896
Nsa(dp124897
S'description'
p124898
S'Semiaxis b for each superellipsoid\n'
p124899
sS'cpp_type'
p124900
S'std::vector<double, std::allocator<double> >'
p124901
sS'default'
p124902
g3
sS'name'
p124903
S'bs'
p124904
sS'required'
p124905
I01
sS'group_name'
p124906
Nsa(dp124907
S'description'
p124908
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124909
sS'cpp_type'
p124910
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124911
sS'default'
p124912
g3
sS'name'
p124913
S'control_tags'
p124914
sS'required'
p124915
I00
sS'group_name'
p124916
S'Advanced'
p124917
sa(dp124918
S'description'
p124919
S'Semiaxis c for each superellipsoid\n'
p124920
sS'cpp_type'
p124921
S'std::vector<double, std::allocator<double> >'
p124922
sS'default'
p124923
g3
sS'name'
p124924
S'cs'
p124925
sS'required'
p124926
I01
sS'group_name'
p124927
Nsa(dp124928
S'description'
p124929
S'Set the enabled status of the MooseObject.\n'
p124930
sS'cpp_type'
p124931
S'bool'
p124932
sS'default'
p124933
S'1'
p124934
sS'name'
p124935
S'enable'
p124936
sS'required'
p124937
I00
sS'group_name'
p124938
S'Advanced'
p124939
sa(dp124940
S'description'
p124941
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p124942
sS'cpp_type'
p124943
S'bool'
p124944
sS'default'
p124945
S'0'
p124946
sS'name'
p124947
S'ignore_uo_dependency'
p124948
sS'required'
p124949
I00
sS'group_name'
p124950
S'Advanced'
p124951
sa(dp124952
S'description'
p124953
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p124954
sS'cpp_type'
p124955
S'double'
p124956
sS'default'
p124957
S'0'
p124958
sS'name'
p124959
S'int_width'
p124960
sS'required'
p124961
I00
sS'group_name'
p124962
Nsa(dp124963
S'description'
p124964
S'The variable value inside the superellipsoid\n'
p124965
sS'cpp_type'
p124966
S'double'
p124967
sS'default'
p124968
g3
sS'name'
p124969
S'invalue'
p124970
sS'required'
p124971
I01
sS'group_name'
p124972
Nsa(dp124973
S'description'
p124974
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p124975
sS'cpp_type'
p124976
S'double'
p124977
sS'default'
p124978
g3
sS'name'
p124979
S'large_spac'
p124980
sS'required'
p124981
I01
sS'group_name'
p124982
Nsa(dp124983
S'description'
p124984
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p124985
sS'cpp_type'
p124986
S'double'
p124987
sS'default'
p124988
g3
sS'name'
p124989
S'nestedvalue'
p124990
sS'required'
p124991
I00
sS'group_name'
p124992
Nsa(dp124993
S'description'
p124994
S'The number of random (small) particles to place\n'
p124995
sS'cpp_type'
p124996
S'unsigned int'
p124997
sS'default'
p124998
g3
sS'name'
p124999
S'npart'
p125000
sS'required'
p125001
I01
sS'group_name'
p125002
Nsa(dp125003
S'description'
p125004
S'Exponent n for each superellipsoid\n'
p125005
sS'cpp_type'
p125006
S'std::vector<double, std::allocator<double> >'
p125007
sS'default'
p125008
g3
sS'name'
p125009
S'ns'
p125010
sS'required'
p125011
I01
sS'group_name'
p125012
Nsa(dp125013
S'description'
p125014
S'The number of tries to place the random particles\n'
p125015
sS'cpp_type'
p125016
S'unsigned int'
p125017
sS'default'
p125018
S'1000'
p125019
sS'name'
p125020
S'numtries'
p125021
sS'required'
p125022
I00
sS'group_name'
p125023
Nsa(dp125024
S'description'
p125025
S'The variable value outside the superellipsoid\n'
p125026
sS'cpp_type'
p125027
S'double'
p125028
sS'default'
p125029
g3
sS'name'
p125030
S'outvalue'
p125031
sS'required'
p125032
I01
sS'group_name'
p125033
Nsa(dp125034
S'description'
p125035
S'Seed value for the random number generator\n'
p125036
sS'cpp_type'
p125037
S'unsigned int'
p125038
sS'default'
p125039
S'12345'
p125040
sS'name'
p125041
S'rand_seed'
p125042
sS'required'
p125043
I00
sS'group_name'
p125044
Nsa(dp125045
S'description'
p125046
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p125047
sS'cpp_type'
p125048
S'double'
p125049
sS'default'
p125050
S'0'
p125051
sS'name'
p125052
S'size_variation'
p125053
sS'required'
p125054
I00
sS'group_name'
p125055
Nsa(dp125056
S'name'
p125057
S'size_variation_type'
p125058
sS'cpp_type'
p125059
S'MooseEnum'
p125060
sS'default'
p125061
S'none'
p125062
sS'description'
p125063
S'Type of distribution that random semiaxes will follow\n'
p125064
sS'required'
p125065
I00
sS'options'
p125066
S'uniform normal none'
p125067
sS'group_name'
p125068
Nsa(dp125069
S'description'
p125070
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p125071
sS'cpp_type'
p125072
S'double'
p125073
sS'default'
p125074
g3
sS'name'
p125075
S'small_a'
p125076
sS'required'
p125077
I01
sS'group_name'
p125078
Nsa(dp125079
S'description'
p125080
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p125081
sS'cpp_type'
p125082
S'double'
p125083
sS'default'
p125084
g3
sS'name'
p125085
S'small_b'
p125086
sS'required'
p125087
I01
sS'group_name'
p125088
Nsa(dp125089
S'description'
p125090
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p125091
sS'cpp_type'
p125092
S'double'
p125093
sS'default'
p125094
g3
sS'name'
p125095
S'small_c'
p125096
sS'required'
p125097
I01
sS'group_name'
p125098
Nsa(dp125099
S'description'
p125100
S'Exponent n for the randomly placed (small) superellipsoids\n'
p125101
sS'cpp_type'
p125102
S'double'
p125103
sS'default'
p125104
g3
sS'name'
p125105
S'small_n'
p125106
sS'required'
p125107
I01
sS'group_name'
p125108
Nsa(dp125109
S'description'
p125110
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p125111
sS'cpp_type'
p125112
S'double'
p125113
sS'default'
p125114
g3
sS'name'
p125115
S'small_spac'
p125116
sS'required'
p125117
I01
sS'group_name'
p125118
Nsa(dp125119
S'description'
p125120
g3
sS'cpp_type'
p125121
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125122
sS'default'
p125123
S'BimodalInverseSuperellipsoidsIC'
p125124
sS'name'
p125125
S'type'
p125126
sS'required'
p125127
I00
sS'group_name'
p125128
Nsa(dp125129
S'description'
p125130
S'The variable this initial condition is supposed to provide values for.\n'
p125131
sS'cpp_type'
p125132
S'VariableName'
p125133
sS'default'
p125134
g3
sS'name'
p125135
S'variable'
p125136
sS'required'
p125137
I01
sS'group_name'
p125138
Nsa(dp125139
S'description'
p125140
S'The x-coordinate for each superellipsoid center\n'
p125141
sS'cpp_type'
p125142
S'std::vector<double, std::allocator<double> >'
p125143
sS'default'
p125144
g3
sS'name'
p125145
S'x_positions'
p125146
sS'required'
p125147
I01
sS'group_name'
p125148
Nsa(dp125149
S'description'
p125150
S'The y-coordinate for each superellipsoid center\n'
p125151
sS'cpp_type'
p125152
S'std::vector<double, std::allocator<double> >'
p125153
sS'default'
p125154
g3
sS'name'
p125155
S'y_positions'
p125156
sS'required'
p125157
I01
sS'group_name'
p125158
Nsa(dp125159
S'description'
p125160
S'The z-coordinate for each superellipsoid center\n'
p125161
sS'cpp_type'
p125162
S'std::vector<double, std::allocator<double> >'
p125163
sS'default'
p125164
g3
sS'name'
p125165
S'z_positions'
p125166
sS'required'
p125167
I01
sS'group_name'
p125168
Nsa(dp125169
S'description'
p125170
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p125171
sS'cpp_type'
p125172
S'bool'
p125173
sS'default'
p125174
S'0'
p125175
sS'name'
p125176
S'zero_gradient'
p125177
sS'required'
p125178
I00
sS'group_name'
p125179
NsasS'name'
p125180
S'/Variables/*/InitialCondition/<type>/BimodalInverseSuperellipsoidsIC'
p125181
sa(dp125182
S'description'
p125183
S'Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n'
p125184
sS'subblocks'
p125185
NsS'parameters'
p125186
(lp125187
(dp125188
S'description'
p125189
S'Semiaxis a for each superellipsoid\n'
p125190
sS'cpp_type'
p125191
S'std::vector<double, std::allocator<double> >'
p125192
sS'default'
p125193
g3
sS'name'
p125194
S'as'
p125195
sS'required'
p125196
I01
sS'group_name'
p125197
Nsa(dp125198
S'description'
p125199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125200
sS'cpp_type'
p125201
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125202
sS'default'
p125203
g3
sS'name'
p125204
S'block'
p125205
sS'required'
p125206
I00
sS'group_name'
p125207
Nsa(dp125208
S'description'
p125209
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125210
sS'cpp_type'
p125211
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125212
sS'default'
p125213
g3
sS'name'
p125214
S'boundary'
p125215
sS'required'
p125216
I00
sS'group_name'
p125217
Nsa(dp125218
S'description'
p125219
S'Semiaxis b for each superellipsoid\n'
p125220
sS'cpp_type'
p125221
S'std::vector<double, std::allocator<double> >'
p125222
sS'default'
p125223
g3
sS'name'
p125224
S'bs'
p125225
sS'required'
p125226
I01
sS'group_name'
p125227
Nsa(dp125228
S'description'
p125229
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125230
sS'cpp_type'
p125231
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125232
sS'default'
p125233
g3
sS'name'
p125234
S'control_tags'
p125235
sS'required'
p125236
I00
sS'group_name'
p125237
S'Advanced'
p125238
sa(dp125239
S'description'
p125240
S'Semiaxis c for each superellipsoid\n'
p125241
sS'cpp_type'
p125242
S'std::vector<double, std::allocator<double> >'
p125243
sS'default'
p125244
g3
sS'name'
p125245
S'cs'
p125246
sS'required'
p125247
I01
sS'group_name'
p125248
Nsa(dp125249
S'description'
p125250
S'Set the enabled status of the MooseObject.\n'
p125251
sS'cpp_type'
p125252
S'bool'
p125253
sS'default'
p125254
S'1'
p125255
sS'name'
p125256
S'enable'
p125257
sS'required'
p125258
I00
sS'group_name'
p125259
S'Advanced'
p125260
sa(dp125261
S'description'
p125262
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p125263
sS'cpp_type'
p125264
S'bool'
p125265
sS'default'
p125266
S'0'
p125267
sS'name'
p125268
S'ignore_uo_dependency'
p125269
sS'required'
p125270
I00
sS'group_name'
p125271
S'Advanced'
p125272
sa(dp125273
S'description'
p125274
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p125275
sS'cpp_type'
p125276
S'double'
p125277
sS'default'
p125278
S'0'
p125279
sS'name'
p125280
S'int_width'
p125281
sS'required'
p125282
I00
sS'group_name'
p125283
Nsa(dp125284
S'description'
p125285
S'The variable value inside the superellipsoid\n'
p125286
sS'cpp_type'
p125287
S'double'
p125288
sS'default'
p125289
g3
sS'name'
p125290
S'invalue'
p125291
sS'required'
p125292
I01
sS'group_name'
p125293
Nsa(dp125294
S'description'
p125295
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p125296
sS'cpp_type'
p125297
S'double'
p125298
sS'default'
p125299
g3
sS'name'
p125300
S'large_spac'
p125301
sS'required'
p125302
I01
sS'group_name'
p125303
Nsa(dp125304
S'description'
p125305
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p125306
sS'cpp_type'
p125307
S'double'
p125308
sS'default'
p125309
g3
sS'name'
p125310
S'nestedvalue'
p125311
sS'required'
p125312
I00
sS'group_name'
p125313
Nsa(dp125314
S'description'
p125315
S'The number of random (small) particles to place\n'
p125316
sS'cpp_type'
p125317
S'unsigned int'
p125318
sS'default'
p125319
g3
sS'name'
p125320
S'npart'
p125321
sS'required'
p125322
I01
sS'group_name'
p125323
Nsa(dp125324
S'description'
p125325
S'Exponent n for each superellipsoid\n'
p125326
sS'cpp_type'
p125327
S'std::vector<double, std::allocator<double> >'
p125328
sS'default'
p125329
g3
sS'name'
p125330
S'ns'
p125331
sS'required'
p125332
I01
sS'group_name'
p125333
Nsa(dp125334
S'description'
p125335
S'The number of tries to place the random particles\n'
p125336
sS'cpp_type'
p125337
S'unsigned int'
p125338
sS'default'
p125339
S'1000'
p125340
sS'name'
p125341
S'numtries'
p125342
sS'required'
p125343
I00
sS'group_name'
p125344
Nsa(dp125345
S'description'
p125346
S'The variable value outside the superellipsoid\n'
p125347
sS'cpp_type'
p125348
S'double'
p125349
sS'default'
p125350
g3
sS'name'
p125351
S'outvalue'
p125352
sS'required'
p125353
I01
sS'group_name'
p125354
Nsa(dp125355
S'description'
p125356
S'Seed value for the random number generator\n'
p125357
sS'cpp_type'
p125358
S'unsigned int'
p125359
sS'default'
p125360
S'12345'
p125361
sS'name'
p125362
S'rand_seed'
p125363
sS'required'
p125364
I00
sS'group_name'
p125365
Nsa(dp125366
S'description'
p125367
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p125368
sS'cpp_type'
p125369
S'double'
p125370
sS'default'
p125371
S'0'
p125372
sS'name'
p125373
S'size_variation'
p125374
sS'required'
p125375
I00
sS'group_name'
p125376
Nsa(dp125377
S'name'
p125378
S'size_variation_type'
p125379
sS'cpp_type'
p125380
S'MooseEnum'
p125381
sS'default'
p125382
S'none'
p125383
sS'description'
p125384
S'Type of distribution that random semiaxes will follow\n'
p125385
sS'required'
p125386
I00
sS'options'
p125387
S'uniform normal none'
p125388
sS'group_name'
p125389
Nsa(dp125390
S'description'
p125391
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p125392
sS'cpp_type'
p125393
S'double'
p125394
sS'default'
p125395
g3
sS'name'
p125396
S'small_a'
p125397
sS'required'
p125398
I01
sS'group_name'
p125399
Nsa(dp125400
S'description'
p125401
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p125402
sS'cpp_type'
p125403
S'double'
p125404
sS'default'
p125405
g3
sS'name'
p125406
S'small_b'
p125407
sS'required'
p125408
I01
sS'group_name'
p125409
Nsa(dp125410
S'description'
p125411
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p125412
sS'cpp_type'
p125413
S'double'
p125414
sS'default'
p125415
g3
sS'name'
p125416
S'small_c'
p125417
sS'required'
p125418
I01
sS'group_name'
p125419
Nsa(dp125420
S'description'
p125421
S'Exponent n for the randomly placed (small) superellipsoids\n'
p125422
sS'cpp_type'
p125423
S'double'
p125424
sS'default'
p125425
g3
sS'name'
p125426
S'small_n'
p125427
sS'required'
p125428
I01
sS'group_name'
p125429
Nsa(dp125430
S'description'
p125431
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p125432
sS'cpp_type'
p125433
S'double'
p125434
sS'default'
p125435
g3
sS'name'
p125436
S'small_spac'
p125437
sS'required'
p125438
I01
sS'group_name'
p125439
Nsa(dp125440
S'description'
p125441
g3
sS'cpp_type'
p125442
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125443
sS'default'
p125444
S'BimodalSuperellipsoidsIC'
p125445
sS'name'
p125446
S'type'
p125447
sS'required'
p125448
I00
sS'group_name'
p125449
Nsa(dp125450
S'description'
p125451
S'The variable this initial condition is supposed to provide values for.\n'
p125452
sS'cpp_type'
p125453
S'VariableName'
p125454
sS'default'
p125455
g3
sS'name'
p125456
S'variable'
p125457
sS'required'
p125458
I01
sS'group_name'
p125459
Nsa(dp125460
S'description'
p125461
S'The x-coordinate for each superellipsoid center\n'
p125462
sS'cpp_type'
p125463
S'std::vector<double, std::allocator<double> >'
p125464
sS'default'
p125465
g3
sS'name'
p125466
S'x_positions'
p125467
sS'required'
p125468
I01
sS'group_name'
p125469
Nsa(dp125470
S'description'
p125471
S'The y-coordinate for each superellipsoid center\n'
p125472
sS'cpp_type'
p125473
S'std::vector<double, std::allocator<double> >'
p125474
sS'default'
p125475
g3
sS'name'
p125476
S'y_positions'
p125477
sS'required'
p125478
I01
sS'group_name'
p125479
Nsa(dp125480
S'description'
p125481
S'The z-coordinate for each superellipsoid center\n'
p125482
sS'cpp_type'
p125483
S'std::vector<double, std::allocator<double> >'
p125484
sS'default'
p125485
g3
sS'name'
p125486
S'z_positions'
p125487
sS'required'
p125488
I01
sS'group_name'
p125489
Nsa(dp125490
S'description'
p125491
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p125492
sS'cpp_type'
p125493
S'bool'
p125494
sS'default'
p125495
S'0'
p125496
sS'name'
p125497
S'zero_gradient'
p125498
sS'required'
p125499
I00
sS'group_name'
p125500
NsasS'name'
p125501
S'/Variables/*/InitialCondition/<type>/BimodalSuperellipsoidsIC'
p125502
sa(dp125503
S'description'
p125504
g3
sS'subblocks'
p125505
NsS'parameters'
p125506
(lp125507
(dp125508
S'description'
p125509
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125510
sS'cpp_type'
p125511
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125512
sS'default'
p125513
g3
sS'name'
p125514
S'block'
p125515
sS'required'
p125516
I00
sS'group_name'
p125517
Nsa(dp125518
S'description'
p125519
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125520
sS'cpp_type'
p125521
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125522
sS'default'
p125523
g3
sS'name'
p125524
S'boundary'
p125525
sS'required'
p125526
I00
sS'group_name'
p125527
Nsa(dp125528
S'description'
p125529
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125530
sS'cpp_type'
p125531
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125532
sS'default'
p125533
g3
sS'name'
p125534
S'control_tags'
p125535
sS'required'
p125536
I00
sS'group_name'
p125537
S'Advanced'
p125538
sa(dp125539
S'description'
p125540
S'Set the enabled status of the MooseObject.\n'
p125541
sS'cpp_type'
p125542
S'bool'
p125543
sS'default'
p125544
S'1'
p125545
sS'name'
p125546
S'enable'
p125547
sS'required'
p125548
I00
sS'group_name'
p125549
S'Advanced'
p125550
sa(dp125551
S'description'
p125552
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p125553
sS'cpp_type'
p125554
S'bool'
p125555
sS'default'
p125556
S'0'
p125557
sS'name'
p125558
S'ignore_uo_dependency'
p125559
sS'required'
p125560
I00
sS'group_name'
p125561
S'Advanced'
p125562
sa(dp125563
S'description'
p125564
S'The value of the variable inside the box\n'
p125565
sS'cpp_type'
p125566
S'double'
p125567
sS'default'
p125568
S'0'
p125569
sS'name'
p125570
S'inside'
p125571
sS'required'
p125572
I00
sS'group_name'
p125573
Nsa(dp125574
S'description'
p125575
S'The value of the variable outside the box\n'
p125576
sS'cpp_type'
p125577
S'double'
p125578
sS'default'
p125579
S'0'
p125580
sS'name'
p125581
S'outside'
p125582
sS'required'
p125583
I00
sS'group_name'
p125584
Nsa(dp125585
S'description'
p125586
g3
sS'cpp_type'
p125587
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125588
sS'default'
p125589
S'BoundingBoxIC'
p125590
sS'name'
p125591
S'type'
p125592
sS'required'
p125593
I00
sS'group_name'
p125594
Nsa(dp125595
S'description'
p125596
S'The variable this initial condition is supposed to provide values for.\n'
p125597
sS'cpp_type'
p125598
S'VariableName'
p125599
sS'default'
p125600
g3
sS'name'
p125601
S'variable'
p125602
sS'required'
p125603
I01
sS'group_name'
p125604
Nsa(dp125605
S'description'
p125606
S'The x coordinate of the lower left-hand corner of the box\n'
p125607
sS'cpp_type'
p125608
S'double'
p125609
sS'default'
p125610
g3
sS'name'
p125611
S'x1'
p125612
sS'required'
p125613
I01
sS'group_name'
p125614
Nsa(dp125615
S'description'
p125616
S'The x coordinate of the upper right-hand corner of the box\n'
p125617
sS'cpp_type'
p125618
S'double'
p125619
sS'default'
p125620
g3
sS'name'
p125621
S'x2'
p125622
sS'required'
p125623
I01
sS'group_name'
p125624
Nsa(dp125625
S'description'
p125626
S'The y coordinate of the lower left-hand corner of the box\n'
p125627
sS'cpp_type'
p125628
S'double'
p125629
sS'default'
p125630
g3
sS'name'
p125631
S'y1'
p125632
sS'required'
p125633
I01
sS'group_name'
p125634
Nsa(dp125635
S'description'
p125636
S'The y coordinate of the upper right-hand corner of the box\n'
p125637
sS'cpp_type'
p125638
S'double'
p125639
sS'default'
p125640
g3
sS'name'
p125641
S'y2'
p125642
sS'required'
p125643
I01
sS'group_name'
p125644
Nsa(dp125645
S'description'
p125646
S'The z coordinate of the lower left-hand corner of the box\n'
p125647
sS'cpp_type'
p125648
S'double'
p125649
sS'default'
p125650
S'0'
p125651
sS'name'
p125652
S'z1'
p125653
sS'required'
p125654
I00
sS'group_name'
p125655
Nsa(dp125656
S'description'
p125657
S'The z coordinate of the upper right-hand corner of the box\n'
p125658
sS'cpp_type'
p125659
S'double'
p125660
sS'default'
p125661
S'0'
p125662
sS'name'
p125663
S'z2'
p125664
sS'required'
p125665
I00
sS'group_name'
p125666
NsasS'name'
p125667
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p125668
sa(dp125669
S'description'
p125670
S'Close packed arrangement of smooth circles\n'
p125671
sS'subblocks'
p125672
NsS'parameters'
p125673
(lp125674
(dp125675
S'description'
p125676
S'in 3D, whether the objects are spheres or columns\n'
p125677
sS'cpp_type'
p125678
S'bool'
p125679
sS'default'
p125680
S'1'
p125681
sS'name'
p125682
S'3D_spheres'
p125683
sS'required'
p125684
I00
sS'group_name'
p125685
Nsa(dp125686
S'description'
p125687
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125688
sS'cpp_type'
p125689
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125690
sS'default'
p125691
g3
sS'name'
p125692
S'block'
p125693
sS'required'
p125694
I00
sS'group_name'
p125695
Nsa(dp125696
S'description'
p125697
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125698
sS'cpp_type'
p125699
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125700
sS'default'
p125701
g3
sS'name'
p125702
S'boundary'
p125703
sS'required'
p125704
I00
sS'group_name'
p125705
Nsa(dp125706
S'description'
p125707
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125708
sS'cpp_type'
p125709
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125710
sS'default'
p125711
g3
sS'name'
p125712
S'control_tags'
p125713
sS'required'
p125714
I00
sS'group_name'
p125715
S'Advanced'
p125716
sa(dp125717
S'description'
p125718
S'Set the enabled status of the MooseObject.\n'
p125719
sS'cpp_type'
p125720
S'bool'
p125721
sS'default'
p125722
S'1'
p125723
sS'name'
p125724
S'enable'
p125725
sS'required'
p125726
I00
sS'group_name'
p125727
S'Advanced'
p125728
sa(dp125729
S'description'
p125730
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p125731
sS'cpp_type'
p125732
S'bool'
p125733
sS'default'
p125734
S'0'
p125735
sS'name'
p125736
S'ignore_uo_dependency'
p125737
sS'required'
p125738
I00
sS'group_name'
p125739
S'Advanced'
p125740
sa(dp125741
S'description'
p125742
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p125743
sS'cpp_type'
p125744
S'double'
p125745
sS'default'
p125746
S'0'
p125747
sS'name'
p125748
S'int_width'
p125749
sS'required'
p125750
I00
sS'group_name'
p125751
Nsa(dp125752
S'description'
p125753
S'The variable value inside the circle\n'
p125754
sS'cpp_type'
p125755
S'double'
p125756
sS'default'
p125757
g3
sS'name'
p125758
S'invalue'
p125759
sS'required'
p125760
I01
sS'group_name'
p125761
Nsa(dp125762
S'description'
p125763
S'The variable value outside the circle\n'
p125764
sS'cpp_type'
p125765
S'double'
p125766
sS'default'
p125767
g3
sS'name'
p125768
S'outvalue'
p125769
sS'required'
p125770
I01
sS'group_name'
p125771
Nsa(dp125772
S'description'
p125773
S'The radius of a circle\n'
p125774
sS'cpp_type'
p125775
S'double'
p125776
sS'default'
p125777
g3
sS'name'
p125778
S'radius'
p125779
sS'required'
p125780
I01
sS'group_name'
p125781
Nsa(dp125782
S'description'
p125783
S'Seed value for the random number generator\n'
p125784
sS'cpp_type'
p125785
S'unsigned int'
p125786
sS'default'
p125787
S'12345'
p125788
sS'name'
p125789
S'rand_seed'
p125790
sS'required'
p125791
I00
sS'group_name'
p125792
Nsa(dp125793
S'description'
p125794
g3
sS'cpp_type'
p125795
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125796
sS'default'
p125797
S'ClosePackIC'
p125798
sS'name'
p125799
S'type'
p125800
sS'required'
p125801
I00
sS'group_name'
p125802
Nsa(dp125803
S'description'
p125804
S'The variable this initial condition is supposed to provide values for.\n'
p125805
sS'cpp_type'
p125806
S'VariableName'
p125807
sS'default'
p125808
g3
sS'name'
p125809
S'variable'
p125810
sS'required'
p125811
I01
sS'group_name'
p125812
Nsa(dp125813
S'description'
p125814
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p125815
sS'cpp_type'
p125816
S'bool'
p125817
sS'default'
p125818
S'0'
p125819
sS'name'
p125820
S'zero_gradient'
p125821
sS'required'
p125822
I00
sS'group_name'
p125823
NsasS'name'
p125824
S'/Variables/*/InitialCondition/<type>/ClosePackIC'
p125825
sa(dp125826
S'description'
p125827
g3
sS'subblocks'
p125828
NsS'parameters'
p125829
(lp125830
(dp125831
S'description'
p125832
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125833
sS'cpp_type'
p125834
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125835
sS'default'
p125836
g3
sS'name'
p125837
S'block'
p125838
sS'required'
p125839
I00
sS'group_name'
p125840
Nsa(dp125841
S'description'
p125842
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125843
sS'cpp_type'
p125844
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125845
sS'default'
p125846
g3
sS'name'
p125847
S'boundary'
p125848
sS'required'
p125849
I00
sS'group_name'
p125850
Nsa(dp125851
S'description'
p125852
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125853
sS'cpp_type'
p125854
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125855
sS'default'
p125856
g3
sS'name'
p125857
S'control_tags'
p125858
sS'required'
p125859
I00
sS'group_name'
p125860
S'Advanced'
p125861
sa(dp125862
S'description'
p125863
S'Set the enabled status of the MooseObject.\n'
p125864
sS'cpp_type'
p125865
S'bool'
p125866
sS'default'
p125867
S'1'
p125868
sS'name'
p125869
S'enable'
p125870
sS'required'
p125871
I00
sS'group_name'
p125872
S'Advanced'
p125873
sa(dp125874
S'description'
p125875
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p125876
sS'cpp_type'
p125877
S'bool'
p125878
sS'default'
p125879
S'0'
p125880
sS'name'
p125881
S'ignore_uo_dependency'
p125882
sS'required'
p125883
I00
sS'group_name'
p125884
S'Advanced'
p125885
sa(dp125886
S'description'
p125887
g3
sS'cpp_type'
p125888
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125889
sS'default'
p125890
S'ConstantIC'
p125891
sS'name'
p125892
S'type'
p125893
sS'required'
p125894
I00
sS'group_name'
p125895
Nsa(dp125896
S'description'
p125897
S'The value to be set in IC\n'
p125898
sS'cpp_type'
p125899
S'double'
p125900
sS'default'
p125901
g3
sS'name'
p125902
S'value'
p125903
sS'required'
p125904
I01
sS'group_name'
p125905
Nsa(dp125906
S'description'
p125907
S'The variable this initial condition is supposed to provide values for.\n'
p125908
sS'cpp_type'
p125909
S'VariableName'
p125910
sS'default'
p125911
g3
sS'name'
p125912
S'variable'
p125913
sS'required'
p125914
I01
sS'group_name'
p125915
NsasS'name'
p125916
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p125917
sa(dp125918
S'description'
p125919
S'Cross-shaped initial condition\n'
p125920
sS'subblocks'
p125921
NsS'parameters'
p125922
(lp125923
(dp125924
S'description'
p125925
S'The amplitude\n'
p125926
sS'cpp_type'
p125927
S'double'
p125928
sS'default'
p125929
S'1'
p125930
sS'name'
p125931
S'amplitude'
p125932
sS'required'
p125933
I00
sS'group_name'
p125934
Nsa(dp125935
S'description'
p125936
S'The average value\n'
p125937
sS'cpp_type'
p125938
S'double'
p125939
sS'default'
p125940
S'0'
p125941
sS'name'
p125942
S'average'
p125943
sS'required'
p125944
I00
sS'group_name'
p125945
Nsa(dp125946
S'description'
p125947
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125948
sS'cpp_type'
p125949
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125950
sS'default'
p125951
g3
sS'name'
p125952
S'block'
p125953
sS'required'
p125954
I00
sS'group_name'
p125955
Nsa(dp125956
S'description'
p125957
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125958
sS'cpp_type'
p125959
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125960
sS'default'
p125961
g3
sS'name'
p125962
S'boundary'
p125963
sS'required'
p125964
I00
sS'group_name'
p125965
Nsa(dp125966
S'description'
p125967
S'A small area between the max value and the interface\n'
p125968
sS'cpp_type'
p125969
S'double'
p125970
sS'default'
p125971
S'0.03125'
p125972
sS'name'
p125973
S'buffer'
p125974
sS'required'
p125975
I00
sS'group_name'
p125976
Nsa(dp125977
S'description'
p125978
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125979
sS'cpp_type'
p125980
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125981
sS'default'
p125982
g3
sS'name'
p125983
S'control_tags'
p125984
sS'required'
p125985
I00
sS'group_name'
p125986
S'Advanced'
p125987
sa(dp125988
S'description'
p125989
S'Set the enabled status of the MooseObject.\n'
p125990
sS'cpp_type'
p125991
S'bool'
p125992
sS'default'
p125993
S'1'
p125994
sS'name'
p125995
S'enable'
p125996
sS'required'
p125997
I00
sS'group_name'
p125998
S'Advanced'
p125999
sa(dp126000
S'description'
p126001
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126002
sS'cpp_type'
p126003
S'bool'
p126004
sS'default'
p126005
S'0'
p126006
sS'name'
p126007
S'ignore_uo_dependency'
p126008
sS'required'
p126009
I00
sS'group_name'
p126010
S'Advanced'
p126011
sa(dp126012
S'description'
p126013
S'The interface width\n'
p126014
sS'cpp_type'
p126015
S'double'
p126016
sS'default'
p126017
S'0.03125'
p126018
sS'name'
p126019
S'interface'
p126020
sS'required'
p126021
I00
sS'group_name'
p126022
Nsa(dp126023
S'description'
p126024
S'The length\n'
p126025
sS'cpp_type'
p126026
S'double'
p126027
sS'default'
p126028
S'0.75'
p126029
sS'name'
p126030
S'length'
p126031
sS'required'
p126032
I00
sS'group_name'
p126033
Nsa(dp126034
S'description'
p126035
g3
sS'cpp_type'
p126036
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126037
sS'default'
p126038
S'CrossIC'
p126039
sS'name'
p126040
S'type'
p126041
sS'required'
p126042
I00
sS'group_name'
p126043
Nsa(dp126044
S'description'
p126045
S'The variable this initial condition is supposed to provide values for.\n'
p126046
sS'cpp_type'
p126047
S'VariableName'
p126048
sS'default'
p126049
g3
sS'name'
p126050
S'variable'
p126051
sS'required'
p126052
I01
sS'group_name'
p126053
Nsa(dp126054
S'description'
p126055
S'The width\n'
p126056
sS'cpp_type'
p126057
S'double'
p126058
sS'default'
p126059
S'0.125'
p126060
sS'name'
p126061
S'width'
p126062
sS'required'
p126063
I00
sS'group_name'
p126064
Nsa(dp126065
S'description'
p126066
S'The x coordinate of the lower left-hand corner of the box\n'
p126067
sS'cpp_type'
p126068
S'double'
p126069
sS'default'
p126070
S'0'
p126071
sS'name'
p126072
S'x1'
p126073
sS'required'
p126074
I00
sS'group_name'
p126075
Nsa(dp126076
S'description'
p126077
S'The x coordinate of the upper right-hand corner of the box\n'
p126078
sS'cpp_type'
p126079
S'double'
p126080
sS'default'
p126081
S'1'
p126082
sS'name'
p126083
S'x2'
p126084
sS'required'
p126085
I00
sS'group_name'
p126086
Nsa(dp126087
S'description'
p126088
S'The y coordinate of the lower left-hand corner of the box\n'
p126089
sS'cpp_type'
p126090
S'double'
p126091
sS'default'
p126092
S'0'
p126093
sS'name'
p126094
S'y1'
p126095
sS'required'
p126096
I00
sS'group_name'
p126097
Nsa(dp126098
S'description'
p126099
S'The y coordinate of the upper right-hand corner of the box\n'
p126100
sS'cpp_type'
p126101
S'double'
p126102
sS'default'
p126103
S'1'
p126104
sS'name'
p126105
S'y2'
p126106
sS'required'
p126107
I00
sS'group_name'
p126108
NsasS'name'
p126109
S'/Variables/*/InitialCondition/<type>/CrossIC'
p126110
sa(dp126111
S'description'
p126112
g3
sS'subblocks'
p126113
NsS'parameters'
p126114
(lp126115
(dp126116
S'description'
p126117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126118
sS'cpp_type'
p126119
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126120
sS'default'
p126121
g3
sS'name'
p126122
S'block'
p126123
sS'required'
p126124
I00
sS'group_name'
p126125
Nsa(dp126126
S'description'
p126127
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126128
sS'cpp_type'
p126129
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126130
sS'default'
p126131
g3
sS'name'
p126132
S'boundary'
p126133
sS'required'
p126134
I00
sS'group_name'
p126135
Nsa(dp126136
S'description'
p126137
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126138
sS'cpp_type'
p126139
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126140
sS'default'
p126141
g3
sS'name'
p126142
S'control_tags'
p126143
sS'required'
p126144
I00
sS'group_name'
p126145
S'Advanced'
p126146
sa(dp126147
S'description'
p126148
S'Set the enabled status of the MooseObject.\n'
p126149
sS'cpp_type'
p126150
S'bool'
p126151
sS'default'
p126152
S'1'
p126153
sS'name'
p126154
S'enable'
p126155
sS'required'
p126156
I00
sS'group_name'
p126157
S'Advanced'
p126158
sa(dp126159
S'description'
p126160
S'The initial condition function.\n'
p126161
sS'cpp_type'
p126162
S'FunctionName'
p126163
sS'default'
p126164
g3
sS'name'
p126165
S'function'
p126166
sS'required'
p126167
I01
sS'group_name'
p126168
Nsa(dp126169
S'description'
p126170
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126171
sS'cpp_type'
p126172
S'bool'
p126173
sS'default'
p126174
S'0'
p126175
sS'name'
p126176
S'ignore_uo_dependency'
p126177
sS'required'
p126178
I00
sS'group_name'
p126179
S'Advanced'
p126180
sa(dp126181
S'description'
p126182
g3
sS'cpp_type'
p126183
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126184
sS'default'
p126185
S'FunctionIC'
p126186
sS'name'
p126187
S'type'
p126188
sS'required'
p126189
I00
sS'group_name'
p126190
Nsa(dp126191
S'description'
p126192
S'The variable this initial condition is supposed to provide values for.\n'
p126193
sS'cpp_type'
p126194
S'VariableName'
p126195
sS'default'
p126196
g3
sS'name'
p126197
S'variable'
p126198
sS'required'
p126199
I01
sS'group_name'
p126200
NsasS'name'
p126201
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p126202
sa(dp126203
S'description'
p126204
g3
sS'subblocks'
p126205
NsS'parameters'
p126206
(lp126207
(dp126208
S'description'
p126209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126210
sS'cpp_type'
p126211
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126212
sS'default'
p126213
g3
sS'name'
p126214
S'control_tags'
p126215
sS'required'
p126216
I00
sS'group_name'
p126217
S'Advanced'
p126218
sa(dp126219
S'description'
p126220
S'Set the enabled status of the MooseObject.\n'
p126221
sS'cpp_type'
p126222
S'bool'
p126223
sS'default'
p126224
S'1'
p126225
sS'name'
p126226
S'enable'
p126227
sS'required'
p126228
I00
sS'group_name'
p126229
S'Advanced'
p126230
sa(dp126231
S'description'
p126232
S'The initial condition function.\n'
p126233
sS'cpp_type'
p126234
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p126235
sS'default'
p126236
g3
sS'name'
p126237
S'function'
p126238
sS'required'
p126239
I01
sS'group_name'
p126240
Nsa(dp126241
S'description'
p126242
g3
sS'cpp_type'
p126243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126244
sS'default'
p126245
S'FunctionScalarIC'
p126246
sS'name'
p126247
S'type'
p126248
sS'required'
p126249
I00
sS'group_name'
p126250
Nsa(dp126251
S'description'
p126252
S'The variable this initial condition is supposed to provide values for.\n'
p126253
sS'cpp_type'
p126254
S'VariableName'
p126255
sS'default'
p126256
g3
sS'name'
p126257
S'variable'
p126258
sS'required'
p126259
I00
sS'group_name'
p126260
NsasS'name'
p126261
S'/Variables/*/InitialCondition/<type>/FunctionScalarIC'
p126262
sa(dp126263
S'description'
p126264
S'Perturbed hexagonal polycrystal\n'
p126265
sS'subblocks'
p126266
NsS'parameters'
p126267
(lp126268
(dp126269
S'description'
p126270
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126271
sS'cpp_type'
p126272
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126273
sS'default'
p126274
g3
sS'name'
p126275
S'block'
p126276
sS'required'
p126277
I00
sS'group_name'
p126278
Nsa(dp126279
S'description'
p126280
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126281
sS'cpp_type'
p126282
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126283
sS'default'
p126284
g3
sS'name'
p126285
S'boundary'
p126286
sS'required'
p126287
I00
sS'group_name'
p126288
Nsa(dp126289
S'name'
p126290
S'coloring_algorithm'
p126291
sS'cpp_type'
p126292
S'MooseEnum'
p126293
sS'default'
p126294
S'legacy'
p126295
sS'description'
p126296
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p126297
sS'required'
p126298
I00
sS'options'
p126299
S'legacy bt jp power greedy'
p126300
sS'group_name'
p126301
Nsa(dp126302
S'description'
p126303
S'3D microstructure will be columnar in the z-direction?\n'
p126304
sS'cpp_type'
p126305
S'bool'
p126306
sS'default'
p126307
S'0'
p126308
sS'name'
p126309
S'columnar_3D'
p126310
sS'required'
p126311
I00
sS'group_name'
p126312
Nsa(dp126313
S'description'
p126314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126315
sS'cpp_type'
p126316
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126317
sS'default'
p126318
g3
sS'name'
p126319
S'control_tags'
p126320
sS'required'
p126321
I00
sS'group_name'
p126322
S'Advanced'
p126323
sa(dp126324
S'description'
p126325
S'Set the enabled status of the MooseObject.\n'
p126326
sS'cpp_type'
p126327
S'bool'
p126328
sS'default'
p126329
S'1'
p126330
sS'name'
p126331
S'enable'
p126332
sS'required'
p126333
I00
sS'group_name'
p126334
S'Advanced'
p126335
sa(dp126336
S'description'
p126337
S'Number of grains being represented by the order parameters\n'
p126338
sS'cpp_type'
p126339
S'unsigned int'
p126340
sS'default'
p126341
g3
sS'name'
p126342
S'grain_num'
p126343
sS'required'
p126344
I01
sS'group_name'
p126345
Nsa(dp126346
S'description'
p126347
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126348
sS'cpp_type'
p126349
S'bool'
p126350
sS'default'
p126351
S'0'
p126352
sS'name'
p126353
S'ignore_uo_dependency'
p126354
sS'required'
p126355
I00
sS'group_name'
p126356
S'Advanced'
p126357
sa(dp126358
S'description'
p126359
S'The index for the current order parameter\n'
p126360
sS'cpp_type'
p126361
S'unsigned int'
p126362
sS'default'
p126363
g3
sS'name'
p126364
S'op_index'
p126365
sS'required'
p126366
I01
sS'group_name'
p126367
Nsa(dp126368
S'description'
p126369
S'Number of order parameters\n'
p126370
sS'cpp_type'
p126371
S'unsigned int'
p126372
sS'default'
p126373
g3
sS'name'
p126374
S'op_num'
p126375
sS'required'
p126376
I01
sS'group_name'
p126377
Nsa(dp126378
S'description'
p126379
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p126380
sS'cpp_type'
p126381
S'double'
p126382
sS'default'
p126383
S'0'
p126384
sS'name'
p126385
S'perturbation_percent'
p126386
sS'required'
p126387
I00
sS'group_name'
p126388
Nsa(dp126389
S'description'
p126390
S'The random seed\n'
p126391
sS'cpp_type'
p126392
S'unsigned int'
p126393
sS'default'
p126394
S'12444'
p126395
sS'name'
p126396
S'rand_seed'
p126397
sS'required'
p126398
I00
sS'group_name'
p126399
Nsa(dp126400
S'description'
p126401
g3
sS'cpp_type'
p126402
S'int'
p126403
sS'default'
p126404
S'1'
p126405
sS'name'
p126406
S'typ'
p126407
sS'required'
p126408
I00
sS'group_name'
p126409
Nsa(dp126410
S'description'
p126411
g3
sS'cpp_type'
p126412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126413
sS'default'
p126414
S'HexPolycrystalIC'
p126415
sS'name'
p126416
S'type'
p126417
sS'required'
p126418
I00
sS'group_name'
p126419
Nsa(dp126420
S'description'
p126421
S'The variable this initial condition is supposed to provide values for.\n'
p126422
sS'cpp_type'
p126423
S'VariableName'
p126424
sS'default'
p126425
g3
sS'name'
p126426
S'variable'
p126427
sS'required'
p126428
I01
sS'group_name'
p126429
Nsa(dp126430
S'description'
p126431
S'Specifies offset of hexagon grid in x-direction\n'
p126432
sS'cpp_type'
p126433
S'double'
p126434
sS'default'
p126435
S'0.5'
p126436
sS'name'
p126437
S'x_offset'
p126438
sS'required'
p126439
I00
sS'group_name'
p126440
NsasS'name'
p126441
S'/Variables/*/InitialCondition/<type>/HexPolycrystalIC'
p126442
sa(dp126443
S'description'
p126444
S'Perturbed square lattice of smooth circles\n'
p126445
sS'subblocks'
p126446
NsS'parameters'
p126447
(lp126448
(dp126449
S'description'
p126450
S'in 3D, whether the objects are spheres or columns\n'
p126451
sS'cpp_type'
p126452
S'bool'
p126453
sS'default'
p126454
S'1'
p126455
sS'name'
p126456
S'3D_spheres'
p126457
sS'required'
p126458
I00
sS'group_name'
p126459
Nsa(dp126460
S'description'
p126461
S'Variation from central lattice position\n'
p126462
sS'cpp_type'
p126463
S'double'
p126464
sS'default'
p126465
g3
sS'name'
p126466
S'Rnd_variation'
p126467
sS'required'
p126468
I00
sS'group_name'
p126469
Nsa(dp126470
S'description'
p126471
S"Don't place any bubbles on the simulation cell boundaries\n"
p126472
sS'cpp_type'
p126473
S'bool'
p126474
sS'default'
p126475
S'1'
p126476
sS'name'
p126477
S'avoid_bounds'
p126478
sS'required'
p126479
I00
sS'group_name'
p126480
Nsa(dp126481
S'description'
p126482
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126483
sS'cpp_type'
p126484
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126485
sS'default'
p126486
g3
sS'name'
p126487
S'block'
p126488
sS'required'
p126489
I00
sS'group_name'
p126490
Nsa(dp126491
S'description'
p126492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126493
sS'cpp_type'
p126494
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126495
sS'default'
p126496
g3
sS'name'
p126497
S'boundary'
p126498
sS'required'
p126499
I00
sS'group_name'
p126500
Nsa(dp126501
S'description'
p126502
S'Vector containing the number of bubbles along each side\n'
p126503
sS'cpp_type'
p126504
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p126505
sS'default'
p126506
g3
sS'name'
p126507
S'circles_per_side'
p126508
sS'required'
p126509
I01
sS'group_name'
p126510
Nsa(dp126511
S'description'
p126512
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126513
sS'cpp_type'
p126514
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126515
sS'default'
p126516
g3
sS'name'
p126517
S'control_tags'
p126518
sS'required'
p126519
I00
sS'group_name'
p126520
S'Advanced'
p126521
sa(dp126522
S'description'
p126523
S'Set the enabled status of the MooseObject.\n'
p126524
sS'cpp_type'
p126525
S'bool'
p126526
sS'default'
p126527
S'1'
p126528
sS'name'
p126529
S'enable'
p126530
sS'required'
p126531
I00
sS'group_name'
p126532
S'Advanced'
p126533
sa(dp126534
S'description'
p126535
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126536
sS'cpp_type'
p126537
S'bool'
p126538
sS'default'
p126539
S'0'
p126540
sS'name'
p126541
S'ignore_uo_dependency'
p126542
sS'required'
p126543
I00
sS'group_name'
p126544
S'Advanced'
p126545
sa(dp126546
S'description'
p126547
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p126548
sS'cpp_type'
p126549
S'double'
p126550
sS'default'
p126551
S'0'
p126552
sS'name'
p126553
S'int_width'
p126554
sS'required'
p126555
I00
sS'group_name'
p126556
Nsa(dp126557
S'description'
p126558
S'The variable value inside the circle\n'
p126559
sS'cpp_type'
p126560
S'double'
p126561
sS'default'
p126562
g3
sS'name'
p126563
S'invalue'
p126564
sS'required'
p126565
I01
sS'group_name'
p126566
Nsa(dp126567
S'description'
p126568
S'The variable value outside the circle\n'
p126569
sS'cpp_type'
p126570
S'double'
p126571
sS'default'
p126572
g3
sS'name'
p126573
S'outvalue'
p126574
sS'required'
p126575
I01
sS'group_name'
p126576
Nsa(dp126577
S'description'
p126578
S'Variation from central lattice position\n'
p126579
sS'cpp_type'
p126580
S'double'
p126581
sS'default'
p126582
S'0'
p126583
sS'name'
p126584
S'pos_variation'
p126585
sS'required'
p126586
I00
sS'group_name'
p126587
Nsa(dp126588
S'description'
p126589
S'Mean radius value for the circels\n'
p126590
sS'cpp_type'
p126591
S'double'
p126592
sS'default'
p126593
g3
sS'name'
p126594
S'radius'
p126595
sS'required'
p126596
I01
sS'group_name'
p126597
Nsa(dp126598
S'description'
p126599
S'Plus or minus fraction of random variation in the bubble radius\n'
p126600
sS'cpp_type'
p126601
S'double'
p126602
sS'default'
p126603
S'0'
p126604
sS'name'
p126605
S'radius_variation'
p126606
sS'required'
p126607
I00
sS'group_name'
p126608
Nsa(dp126609
S'name'
p126610
S'radius_variation_type'
p126611
sS'cpp_type'
p126612
S'MooseEnum'
p126613
sS'default'
p126614
S'none'
p126615
sS'description'
p126616
S'Type of distribution that random circle radii will follow\n'
p126617
sS'required'
p126618
I00
sS'options'
p126619
S'uniform normal none'
p126620
sS'group_name'
p126621
Nsa(dp126622
S'description'
p126623
S'random seed\n'
p126624
sS'cpp_type'
p126625
S'unsigned int'
p126626
sS'default'
p126627
S'2000'
p126628
sS'name'
p126629
S'rand_seed'
p126630
sS'required'
p126631
I00
sS'group_name'
p126632
Nsa(dp126633
S'description'
p126634
g3
sS'cpp_type'
p126635
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126636
sS'default'
p126637
S'LatticeSmoothCircleIC'
p126638
sS'name'
p126639
S'type'
p126640
sS'required'
p126641
I00
sS'group_name'
p126642
Nsa(dp126643
S'description'
p126644
S'The variable this initial condition is supposed to provide values for.\n'
p126645
sS'cpp_type'
p126646
S'VariableName'
p126647
sS'default'
p126648
g3
sS'name'
p126649
S'variable'
p126650
sS'required'
p126651
I01
sS'group_name'
p126652
Nsa(dp126653
S'description'
p126654
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p126655
sS'cpp_type'
p126656
S'bool'
p126657
sS'default'
p126658
S'0'
p126659
sS'name'
p126660
S'zero_gradient'
p126661
sS'required'
p126662
I00
sS'group_name'
p126663
NsasS'name'
p126664
S'/Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p126665
sa(dp126666
S'description'
p126667
S'Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n'
p126668
sS'subblocks'
p126669
NsS'parameters'
p126670
(lp126671
(dp126672
S'description'
p126673
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126674
sS'cpp_type'
p126675
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126676
sS'default'
p126677
g3
sS'name'
p126678
S'block'
p126679
sS'required'
p126680
I00
sS'group_name'
p126681
Nsa(dp126682
S'description'
p126683
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126684
sS'cpp_type'
p126685
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126686
sS'default'
p126687
g3
sS'name'
p126688
S'boundary'
p126689
sS'required'
p126690
I00
sS'group_name'
p126691
Nsa(dp126692
S'description'
p126693
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126694
sS'cpp_type'
p126695
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126696
sS'default'
p126697
g3
sS'name'
p126698
S'control_tags'
p126699
sS'required'
p126700
I00
sS'group_name'
p126701
S'Advanced'
p126702
sa(dp126703
S'description'
p126704
S'The corner coordinates boxes\n'
p126705
sS'cpp_type'
p126706
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p126707
sS'default'
p126708
g3
sS'name'
p126709
S'corners'
p126710
sS'required'
p126711
I01
sS'group_name'
p126712
Nsa(dp126713
S'description'
p126714
S'Set the enabled status of the MooseObject.\n'
p126715
sS'cpp_type'
p126716
S'bool'
p126717
sS'default'
p126718
S'1'
p126719
sS'name'
p126720
S'enable'
p126721
sS'required'
p126722
I00
sS'group_name'
p126723
S'Advanced'
p126724
sa(dp126725
S'description'
p126726
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126727
sS'cpp_type'
p126728
S'bool'
p126729
sS'default'
p126730
S'0'
p126731
sS'name'
p126732
S'ignore_uo_dependency'
p126733
sS'required'
p126734
I00
sS'group_name'
p126735
S'Advanced'
p126736
sa(dp126737
S'description'
p126738
S'The value of the variable inside each box (one value per box or a single value for all boxes)\n'
p126739
sS'cpp_type'
p126740
S'std::vector<double, std::allocator<double> >'
p126741
sS'default'
p126742
g3
sS'name'
p126743
S'inside'
p126744
sS'required'
p126745
I01
sS'group_name'
p126746
Nsa(dp126747
S'description'
p126748
S'The coordinates of the opposite corners of the boxes\n'
p126749
sS'cpp_type'
p126750
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p126751
sS'default'
p126752
g3
sS'name'
p126753
S'opposite_corners'
p126754
sS'required'
p126755
I01
sS'group_name'
p126756
Nsa(dp126757
S'description'
p126758
S'The value of the variable outside the box\n'
p126759
sS'cpp_type'
p126760
S'double'
p126761
sS'default'
p126762
S'0'
p126763
sS'name'
p126764
S'outside'
p126765
sS'required'
p126766
I00
sS'group_name'
p126767
Nsa(dp126768
S'description'
p126769
g3
sS'cpp_type'
p126770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126771
sS'default'
p126772
S'MultiBoundingBoxIC'
p126773
sS'name'
p126774
S'type'
p126775
sS'required'
p126776
I00
sS'group_name'
p126777
Nsa(dp126778
S'description'
p126779
S'The variable this initial condition is supposed to provide values for.\n'
p126780
sS'cpp_type'
p126781
S'VariableName'
p126782
sS'default'
p126783
g3
sS'name'
p126784
S'variable'
p126785
sS'required'
p126786
I01
sS'group_name'
p126787
NsasS'name'
p126788
S'/Variables/*/InitialCondition/<type>/MultiBoundingBoxIC'
p126789
sa(dp126790
S'description'
p126791
S'Random distribution of smooth circles with given minimum spacing\n'
p126792
sS'subblocks'
p126793
NsS'parameters'
p126794
(lp126795
(dp126796
S'description'
p126797
S'in 3D, whether the objects are spheres or columns\n'
p126798
sS'cpp_type'
p126799
S'bool'
p126800
sS'default'
p126801
S'1'
p126802
sS'name'
p126803
S'3D_spheres'
p126804
sS'required'
p126805
I00
sS'group_name'
p126806
Nsa(dp126807
S'description'
p126808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126809
sS'cpp_type'
p126810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126811
sS'default'
p126812
g3
sS'name'
p126813
S'block'
p126814
sS'required'
p126815
I00
sS'group_name'
p126816
Nsa(dp126817
S'description'
p126818
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126819
sS'cpp_type'
p126820
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126821
sS'default'
p126822
g3
sS'name'
p126823
S'boundary'
p126824
sS'required'
p126825
I00
sS'group_name'
p126826
Nsa(dp126827
S'description'
p126828
S'minimum spacing of bubbles, measured from center to center\n'
p126829
sS'cpp_type'
p126830
S'double'
p126831
sS'default'
p126832
g3
sS'name'
p126833
S'bubspac'
p126834
sS'required'
p126835
I01
sS'group_name'
p126836
Nsa(dp126837
S'description'
p126838
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126839
sS'cpp_type'
p126840
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126841
sS'default'
p126842
g3
sS'name'
p126843
S'control_tags'
p126844
sS'required'
p126845
I00
sS'group_name'
p126846
S'Advanced'
p126847
sa(dp126848
S'description'
p126849
S'Set the enabled status of the MooseObject.\n'
p126850
sS'cpp_type'
p126851
S'bool'
p126852
sS'default'
p126853
S'1'
p126854
sS'name'
p126855
S'enable'
p126856
sS'required'
p126857
I00
sS'group_name'
p126858
S'Advanced'
p126859
sa(dp126860
S'description'
p126861
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126862
sS'cpp_type'
p126863
S'bool'
p126864
sS'default'
p126865
S'0'
p126866
sS'name'
p126867
S'ignore_uo_dependency'
p126868
sS'required'
p126869
I00
sS'group_name'
p126870
S'Advanced'
p126871
sa(dp126872
S'description'
p126873
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p126874
sS'cpp_type'
p126875
S'double'
p126876
sS'default'
p126877
S'0'
p126878
sS'name'
p126879
S'int_width'
p126880
sS'required'
p126881
I00
sS'group_name'
p126882
Nsa(dp126883
S'description'
p126884
S'The variable value inside the circle\n'
p126885
sS'cpp_type'
p126886
S'double'
p126887
sS'default'
p126888
g3
sS'name'
p126889
S'invalue'
p126890
sS'required'
p126891
I01
sS'group_name'
p126892
Nsa(dp126893
S'description'
p126894
S'The number of bubbles to place\n'
p126895
sS'cpp_type'
p126896
S'unsigned int'
p126897
sS'default'
p126898
g3
sS'name'
p126899
S'numbub'
p126900
sS'required'
p126901
I01
sS'group_name'
p126902
Nsa(dp126903
S'description'
p126904
S'The number of tries\n'
p126905
sS'cpp_type'
p126906
S'unsigned int'
p126907
sS'default'
p126908
S'1000'
p126909
sS'name'
p126910
S'numtries'
p126911
sS'required'
p126912
I00
sS'group_name'
p126913
Nsa(dp126914
S'description'
p126915
S'The variable value outside the circle\n'
p126916
sS'cpp_type'
p126917
S'double'
p126918
sS'default'
p126919
g3
sS'name'
p126920
S'outvalue'
p126921
sS'required'
p126922
I01
sS'group_name'
p126923
Nsa(dp126924
S'description'
p126925
S'Mean radius value for the circles\n'
p126926
sS'cpp_type'
p126927
S'double'
p126928
sS'default'
p126929
g3
sS'name'
p126930
S'radius'
p126931
sS'required'
p126932
I01
sS'group_name'
p126933
Nsa(dp126934
S'description'
p126935
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p126936
sS'cpp_type'
p126937
S'double'
p126938
sS'default'
p126939
S'0'
p126940
sS'name'
p126941
S'radius_variation'
p126942
sS'required'
p126943
I00
sS'group_name'
p126944
Nsa(dp126945
S'name'
p126946
S'radius_variation_type'
p126947
sS'cpp_type'
p126948
S'MooseEnum'
p126949
sS'default'
p126950
S'none'
p126951
sS'description'
p126952
S'Type of distribution that random circle radii will follow\n'
p126953
sS'required'
p126954
I00
sS'options'
p126955
S'uniform normal none'
p126956
sS'group_name'
p126957
Nsa(dp126958
S'description'
p126959
S'Seed value for the random number generator\n'
p126960
sS'cpp_type'
p126961
S'unsigned int'
p126962
sS'default'
p126963
S'12345'
p126964
sS'name'
p126965
S'rand_seed'
p126966
sS'required'
p126967
I00
sS'group_name'
p126968
Nsa(dp126969
S'description'
p126970
g3
sS'cpp_type'
p126971
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126972
sS'default'
p126973
S'MultiSmoothCircleIC'
p126974
sS'name'
p126975
S'type'
p126976
sS'required'
p126977
I00
sS'group_name'
p126978
Nsa(dp126979
S'description'
p126980
S'The variable this initial condition is supposed to provide values for.\n'
p126981
sS'cpp_type'
p126982
S'VariableName'
p126983
sS'default'
p126984
g3
sS'name'
p126985
S'variable'
p126986
sS'required'
p126987
I01
sS'group_name'
p126988
Nsa(dp126989
S'description'
p126990
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p126991
sS'cpp_type'
p126992
S'bool'
p126993
sS'default'
p126994
S'0'
p126995
sS'name'
p126996
S'zero_gradient'
p126997
sS'required'
p126998
I00
sS'group_name'
p126999
NsasS'name'
p127000
S'/Variables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p127001
sa(dp127002
S'description'
p127003
S'Random distribution of smooth ellipse with given minimum spacing\n'
p127004
sS'subblocks'
p127005
NsS'parameters'
p127006
(lp127007
(dp127008
S'description'
p127009
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127010
sS'cpp_type'
p127011
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127012
sS'default'
p127013
g3
sS'name'
p127014
S'block'
p127015
sS'required'
p127016
I00
sS'group_name'
p127017
Nsa(dp127018
S'description'
p127019
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127020
sS'cpp_type'
p127021
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127022
sS'default'
p127023
g3
sS'name'
p127024
S'boundary'
p127025
sS'required'
p127026
I00
sS'group_name'
p127027
Nsa(dp127028
S'description'
p127029
S'Vector of the minimum spacing of bubbles of one type, measured from center to center\n'
p127030
sS'cpp_type'
p127031
S'std::vector<double, std::allocator<double> >'
p127032
sS'default'
p127033
g3
sS'name'
p127034
S'bubspac'
p127035
sS'required'
p127036
I01
sS'group_name'
p127037
Nsa(dp127038
S'description'
p127039
S'Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n'
p127040
sS'cpp_type'
p127041
S'bool'
p127042
sS'default'
p127043
S'0'
p127044
sS'name'
p127045
S'check_extremes'
p127046
sS'required'
p127047
I00
sS'group_name'
p127048
Nsa(dp127049
S'description'
p127050
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127051
sS'cpp_type'
p127052
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127053
sS'default'
p127054
g3
sS'name'
p127055
S'control_tags'
p127056
sS'required'
p127057
I00
sS'group_name'
p127058
S'Advanced'
p127059
sa(dp127060
S'description'
p127061
S'Set the enabled status of the MooseObject.\n'
p127062
sS'cpp_type'
p127063
S'bool'
p127064
sS'default'
p127065
S'1'
p127066
sS'name'
p127067
S'enable'
p127068
sS'required'
p127069
I00
sS'group_name'
p127070
S'Advanced'
p127071
sa(dp127072
S'description'
p127073
S'Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n'
p127074
sS'cpp_type'
p127075
S'std::vector<double, std::allocator<double> >'
p127076
sS'default'
p127077
g3
sS'name'
p127078
S'exponent'
p127079
sS'required'
p127080
I00
sS'group_name'
p127081
Nsa(dp127082
S'description'
p127083
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127084
sS'cpp_type'
p127085
S'bool'
p127086
sS'default'
p127087
S'0'
p127088
sS'name'
p127089
S'ignore_uo_dependency'
p127090
sS'required'
p127091
I00
sS'group_name'
p127092
S'Advanced'
p127093
sa(dp127094
S'description'
p127095
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p127096
sS'cpp_type'
p127097
S'double'
p127098
sS'default'
p127099
S'0'
p127100
sS'name'
p127101
S'int_width'
p127102
sS'required'
p127103
I00
sS'group_name'
p127104
Nsa(dp127105
S'description'
p127106
S'The variable value inside the superellipsoid\n'
p127107
sS'cpp_type'
p127108
S'double'
p127109
sS'default'
p127110
g3
sS'name'
p127111
S'invalue'
p127112
sS'required'
p127113
I01
sS'group_name'
p127114
Nsa(dp127115
S'description'
p127116
S'The number of tries\n'
p127117
sS'cpp_type'
p127118
S'unsigned int'
p127119
sS'default'
p127120
S'1000'
p127121
sS'name'
p127122
S'max_num_tries'
p127123
sS'required'
p127124
I00
sS'group_name'
p127125
Nsa(dp127126
S'description'
p127127
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p127128
sS'cpp_type'
p127129
S'double'
p127130
sS'default'
p127131
g3
sS'name'
p127132
S'nestedvalue'
p127133
sS'required'
p127134
I00
sS'group_name'
p127135
Nsa(dp127136
S'description'
p127137
S'Vector of the number of bubbles to place\n'
p127138
sS'cpp_type'
p127139
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p127140
sS'default'
p127141
g3
sS'name'
p127142
S'numbub'
p127143
sS'required'
p127144
I01
sS'group_name'
p127145
Nsa(dp127146
S'description'
p127147
S'The variable value outside the superellipsoid\n'
p127148
sS'cpp_type'
p127149
S'double'
p127150
sS'default'
p127151
g3
sS'name'
p127152
S'outvalue'
p127153
sS'required'
p127154
I01
sS'group_name'
p127155
Nsa(dp127156
S'description'
p127157
S'Check all Superellipsoid centers for overlap with other Superellipsoids.\n'
p127158
sS'cpp_type'
p127159
S'bool'
p127160
sS'default'
p127161
S'0'
p127162
sS'name'
p127163
S'prevent_overlap'
p127164
sS'required'
p127165
I00
sS'group_name'
p127166
Nsa(dp127167
S'description'
p127168
S'Seed value for the random number generator\n'
p127169
sS'cpp_type'
p127170
S'unsigned int'
p127171
sS'default'
p127172
S'12345'
p127173
sS'name'
p127174
S'rand_seed'
p127175
sS'required'
p127176
I00
sS'group_name'
p127177
Nsa(dp127178
S'description'
p127179
S'Vector of mean semiaxis values in the x direction for the ellipse\n'
p127180
sS'cpp_type'
p127181
S'std::vector<double, std::allocator<double> >'
p127182
sS'default'
p127183
g3
sS'name'
p127184
S'semiaxis_a'
p127185
sS'required'
p127186
I01
sS'group_name'
p127187
Nsa(dp127188
S'description'
p127189
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n'
p127190
sS'cpp_type'
p127191
S'std::vector<double, std::allocator<double> >'
p127192
sS'default'
p127193
g3
sS'name'
p127194
S'semiaxis_a_variation'
p127195
sS'required'
p127196
I00
sS'group_name'
p127197
Nsa(dp127198
S'description'
p127199
S'Vector of mean semiaxis values in the y direction for the ellipse\n'
p127200
sS'cpp_type'
p127201
S'std::vector<double, std::allocator<double> >'
p127202
sS'default'
p127203
g3
sS'name'
p127204
S'semiaxis_b'
p127205
sS'required'
p127206
I01
sS'group_name'
p127207
Nsa(dp127208
S'description'
p127209
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n'
p127210
sS'cpp_type'
p127211
S'std::vector<double, std::allocator<double> >'
p127212
sS'default'
p127213
g3
sS'name'
p127214
S'semiaxis_b_variation'
p127215
sS'required'
p127216
I00
sS'group_name'
p127217
Nsa(dp127218
S'description'
p127219
S'Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n'
p127220
sS'cpp_type'
p127221
S'std::vector<double, std::allocator<double> >'
p127222
sS'default'
p127223
g3
sS'name'
p127224
S'semiaxis_c'
p127225
sS'required'
p127226
I01
sS'group_name'
p127227
Nsa(dp127228
S'description'
p127229
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n'
p127230
sS'cpp_type'
p127231
S'std::vector<double, std::allocator<double> >'
p127232
sS'default'
p127233
g3
sS'name'
p127234
S'semiaxis_c_variation'
p127235
sS'required'
p127236
I00
sS'group_name'
p127237
Nsa(dp127238
S'name'
p127239
S'semiaxis_variation_type'
p127240
sS'cpp_type'
p127241
S'MooseEnum'
p127242
sS'default'
p127243
S'none'
p127244
sS'description'
p127245
S'Type of distribution that random superellipsoid semiaxes will follow\n'
p127246
sS'required'
p127247
I00
sS'options'
p127248
S'uniform normal none'
p127249
sS'group_name'
p127250
Nsa(dp127251
S'description'
p127252
g3
sS'cpp_type'
p127253
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127254
sS'default'
p127255
S'MultiSmoothSuperellipsoidIC'
p127256
sS'name'
p127257
S'type'
p127258
sS'required'
p127259
I00
sS'group_name'
p127260
Nsa(dp127261
S'description'
p127262
S'The variable this initial condition is supposed to provide values for.\n'
p127263
sS'cpp_type'
p127264
S'VariableName'
p127265
sS'default'
p127266
g3
sS'name'
p127267
S'variable'
p127268
sS'required'
p127269
I01
sS'group_name'
p127270
Nsa(dp127271
S'description'
p127272
S'If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n'
p127273
sS'cpp_type'
p127274
S'bool'
p127275
sS'default'
p127276
S'1'
p127277
sS'name'
p127278
S'vary_axes_independently'
p127279
sS'required'
p127280
I00
sS'group_name'
p127281
Nsa(dp127282
S'description'
p127283
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p127284
sS'cpp_type'
p127285
S'bool'
p127286
sS'default'
p127287
S'0'
p127288
sS'name'
p127289
S'zero_gradient'
p127290
sS'required'
p127291
I00
sS'group_name'
p127292
NsasS'name'
p127293
S'/Variables/*/InitialCondition/<type>/MultiSmoothSuperellipsoidIC'
p127294
sa(dp127295
S'description'
p127296
g3
sS'subblocks'
p127297
NsS'parameters'
p127298
(lp127299
(dp127300
S'description'
p127301
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127302
sS'cpp_type'
p127303
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127304
sS'default'
p127305
g3
sS'name'
p127306
S'block'
p127307
sS'required'
p127308
I00
sS'group_name'
p127309
Nsa(dp127310
S'description'
p127311
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127312
sS'cpp_type'
p127313
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127314
sS'default'
p127315
g3
sS'name'
p127316
S'boundary'
p127317
sS'required'
p127318
I00
sS'group_name'
p127319
Nsa(dp127320
S'description'
p127321
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127322
sS'cpp_type'
p127323
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127324
sS'default'
p127325
g3
sS'name'
p127326
S'control_tags'
p127327
sS'required'
p127328
I00
sS'group_name'
p127329
S'Advanced'
p127330
sa(dp127331
S'name'
p127332
S'crystal_structure'
p127333
sS'cpp_type'
p127334
S'MooseEnum'
p127335
sS'default'
p127336
g3
sS'description'
p127337
S'The type of crystal structure\n'
p127338
sS'required'
p127339
I00
sS'options'
p127340
S'FCC BCC'
p127341
sS'group_name'
p127342
Nsa(dp127343
S'description'
p127344
S'Set the enabled status of the MooseObject.\n'
p127345
sS'cpp_type'
p127346
S'bool'
p127347
sS'default'
p127348
S'1'
p127349
sS'name'
p127350
S'enable'
p127351
sS'required'
p127352
I00
sS'group_name'
p127353
S'Advanced'
p127354
sa(dp127355
S'description'
p127356
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127357
sS'cpp_type'
p127358
S'bool'
p127359
sS'default'
p127360
S'0'
p127361
sS'name'
p127362
S'ignore_uo_dependency'
p127363
sS'required'
p127364
I00
sS'group_name'
p127365
S'Advanced'
p127366
sa(dp127367
S'description'
p127368
S'Value inside sinusoids\n'
p127369
sS'cpp_type'
p127370
S'double'
p127371
sS'default'
p127372
S'1'
p127373
sS'name'
p127374
S'inside'
p127375
sS'required'
p127376
I00
sS'group_name'
p127377
Nsa(dp127378
S'description'
p127379
S'The lattice constant off the crystal structure\n'
p127380
sS'cpp_type'
p127381
S'double'
p127382
sS'default'
p127383
g3
sS'name'
p127384
S'lc'
p127385
sS'required'
p127386
I01
sS'group_name'
p127387
Nsa(dp127388
S'description'
p127389
S'Upper bound of the randomly generated values\n'
p127390
sS'cpp_type'
p127391
S'double'
p127392
sS'default'
p127393
S'1'
p127394
sS'name'
p127395
S'max'
p127396
sS'required'
p127397
I00
sS'group_name'
p127398
Nsa(dp127399
S'description'
p127400
S'Lower bound of the randomly generated values\n'
p127401
sS'cpp_type'
p127402
S'double'
p127403
sS'default'
p127404
S'0'
p127405
sS'name'
p127406
S'min'
p127407
sS'required'
p127408
I00
sS'group_name'
p127409
Nsa(dp127410
S'description'
p127411
S'Value outside sinusoids\n'
p127412
sS'cpp_type'
p127413
S'double'
p127414
sS'default'
p127415
S'0'
p127416
sS'name'
p127417
S'outside'
p127418
sS'required'
p127419
I00
sS'group_name'
p127420
Nsa(dp127421
S'description'
p127422
S'Seed value for the random number generator\n'
p127423
sS'cpp_type'
p127424
S'unsigned int'
p127425
sS'default'
p127426
S'0'
p127427
sS'name'
p127428
S'seed'
p127429
sS'required'
p127430
I00
sS'group_name'
p127431
Nsa(dp127432
S'description'
p127433
g3
sS'cpp_type'
p127434
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127435
sS'default'
p127436
S'PFCFreezingIC'
p127437
sS'name'
p127438
S'type'
p127439
sS'required'
p127440
I00
sS'group_name'
p127441
Nsa(dp127442
S'description'
p127443
S'The variable this initial condition is supposed to provide values for.\n'
p127444
sS'cpp_type'
p127445
S'VariableName'
p127446
sS'default'
p127447
g3
sS'name'
p127448
S'variable'
p127449
sS'required'
p127450
I01
sS'group_name'
p127451
Nsa(dp127452
S'description'
p127453
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p127454
sS'cpp_type'
p127455
S'double'
p127456
sS'default'
p127457
g3
sS'name'
p127458
S'x1'
p127459
sS'required'
p127460
I01
sS'group_name'
p127461
Nsa(dp127462
S'description'
p127463
S'The x coordinate of the upper right-hand corner of the box\n'
p127464
sS'cpp_type'
p127465
S'double'
p127466
sS'default'
p127467
g3
sS'name'
p127468
S'x2'
p127469
sS'required'
p127470
I01
sS'group_name'
p127471
Nsa(dp127472
S'description'
p127473
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p127474
sS'cpp_type'
p127475
S'double'
p127476
sS'default'
p127477
g3
sS'name'
p127478
S'y1'
p127479
sS'required'
p127480
I01
sS'group_name'
p127481
Nsa(dp127482
S'description'
p127483
S'The y coordinate of the upper right-hand corner of the box\n'
p127484
sS'cpp_type'
p127485
S'double'
p127486
sS'default'
p127487
g3
sS'name'
p127488
S'y2'
p127489
sS'required'
p127490
I01
sS'group_name'
p127491
Nsa(dp127492
S'description'
p127493
S'The z coordinate of the lower left-hand corner of the box\n'
p127494
sS'cpp_type'
p127495
S'double'
p127496
sS'default'
p127497
S'0'
p127498
sS'name'
p127499
S'z1'
p127500
sS'required'
p127501
I00
sS'group_name'
p127502
Nsa(dp127503
S'description'
p127504
S'The z coordinate of the upper right-hand corner of the box\n'
p127505
sS'cpp_type'
p127506
S'double'
p127507
sS'default'
p127508
S'0'
p127509
sS'name'
p127510
S'z2'
p127511
sS'required'
p127512
I00
sS'group_name'
p127513
NsasS'name'
p127514
S'/Variables/*/InitialCondition/<type>/PFCFreezingIC'
p127515
sa(dp127516
S'description'
p127517
S'Random initial condition for a polycrystalline material\n'
p127518
sS'subblocks'
p127519
NsS'parameters'
p127520
(lp127521
(dp127522
S'description'
p127523
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127524
sS'cpp_type'
p127525
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127526
sS'default'
p127527
g3
sS'name'
p127528
S'block'
p127529
sS'required'
p127530
I00
sS'group_name'
p127531
Nsa(dp127532
S'description'
p127533
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127534
sS'cpp_type'
p127535
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127536
sS'default'
p127537
g3
sS'name'
p127538
S'boundary'
p127539
sS'required'
p127540
I00
sS'group_name'
p127541
Nsa(dp127542
S'description'
p127543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127544
sS'cpp_type'
p127545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127546
sS'default'
p127547
g3
sS'name'
p127548
S'control_tags'
p127549
sS'required'
p127550
I00
sS'group_name'
p127551
S'Advanced'
p127552
sa(dp127553
S'description'
p127554
S'Set the enabled status of the MooseObject.\n'
p127555
sS'cpp_type'
p127556
S'bool'
p127557
sS'default'
p127558
S'1'
p127559
sS'name'
p127560
S'enable'
p127561
sS'required'
p127562
I00
sS'group_name'
p127563
S'Advanced'
p127564
sa(dp127565
S'description'
p127566
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127567
sS'cpp_type'
p127568
S'bool'
p127569
sS'default'
p127570
S'0'
p127571
sS'name'
p127572
S'ignore_uo_dependency'
p127573
sS'required'
p127574
I00
sS'group_name'
p127575
S'Advanced'
p127576
sa(dp127577
S'description'
p127578
S'The index for the current order parameter\n'
p127579
sS'cpp_type'
p127580
S'unsigned int'
p127581
sS'default'
p127582
g3
sS'name'
p127583
S'op_index'
p127584
sS'required'
p127585
I01
sS'group_name'
p127586
Nsa(dp127587
S'description'
p127588
S'Number of order parameters\n'
p127589
sS'cpp_type'
p127590
S'unsigned int'
p127591
sS'default'
p127592
g3
sS'name'
p127593
S'op_num'
p127594
sS'required'
p127595
I01
sS'group_name'
p127596
Nsa(dp127597
S'description'
p127598
S'Type of random grain structure\n'
p127599
sS'cpp_type'
p127600
S'unsigned int'
p127601
sS'default'
p127602
g3
sS'name'
p127603
S'typ'
p127604
sS'required'
p127605
I01
sS'group_name'
p127606
Nsa(dp127607
S'description'
p127608
g3
sS'cpp_type'
p127609
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127610
sS'default'
p127611
S'PolycrystalRandomIC'
p127612
sS'name'
p127613
S'type'
p127614
sS'required'
p127615
I00
sS'group_name'
p127616
Nsa(dp127617
S'description'
p127618
S'The variable this initial condition is supposed to provide values for.\n'
p127619
sS'cpp_type'
p127620
S'VariableName'
p127621
sS'default'
p127622
g3
sS'name'
p127623
S'variable'
p127624
sS'required'
p127625
I01
sS'group_name'
p127626
NsasS'name'
p127627
S'/Variables/*/InitialCondition/<type>/PolycrystalRandomIC'
p127628
sa(dp127629
S'description'
p127630
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p127631
sS'subblocks'
p127632
NsS'parameters'
p127633
(lp127634
(dp127635
S'description'
p127636
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127637
sS'cpp_type'
p127638
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127639
sS'default'
p127640
g3
sS'name'
p127641
S'block'
p127642
sS'required'
p127643
I00
sS'group_name'
p127644
Nsa(dp127645
S'description'
p127646
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127647
sS'cpp_type'
p127648
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127649
sS'default'
p127650
g3
sS'name'
p127651
S'boundary'
p127652
sS'required'
p127653
I00
sS'group_name'
p127654
Nsa(dp127655
S'name'
p127656
S'coloring_algorithm'
p127657
sS'cpp_type'
p127658
S'MooseEnum'
p127659
sS'default'
p127660
S'legacy'
p127661
sS'description'
p127662
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p127663
sS'required'
p127664
I00
sS'options'
p127665
S'legacy bt jp power greedy'
p127666
sS'group_name'
p127667
Nsa(dp127668
S'description'
p127669
S'3D microstructure will be columnar in the z-direction?\n'
p127670
sS'cpp_type'
p127671
S'bool'
p127672
sS'default'
p127673
S'0'
p127674
sS'name'
p127675
S'columnar_3D'
p127676
sS'required'
p127677
I00
sS'group_name'
p127678
Nsa(dp127679
S'description'
p127680
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127681
sS'cpp_type'
p127682
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127683
sS'default'
p127684
g3
sS'name'
p127685
S'control_tags'
p127686
sS'required'
p127687
I00
sS'group_name'
p127688
S'Advanced'
p127689
sa(dp127690
S'description'
p127691
S'Set the enabled status of the MooseObject.\n'
p127692
sS'cpp_type'
p127693
S'bool'
p127694
sS'default'
p127695
S'1'
p127696
sS'name'
p127697
S'enable'
p127698
sS'required'
p127699
I00
sS'group_name'
p127700
S'Advanced'
p127701
sa(dp127702
S'description'
p127703
S'Number of grains being represented by the order parameters\n'
p127704
sS'cpp_type'
p127705
S'unsigned int'
p127706
sS'default'
p127707
g3
sS'name'
p127708
S'grain_num'
p127709
sS'required'
p127710
I01
sS'group_name'
p127711
Nsa(dp127712
S'description'
p127713
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127714
sS'cpp_type'
p127715
S'bool'
p127716
sS'default'
p127717
S'0'
p127718
sS'name'
p127719
S'ignore_uo_dependency'
p127720
sS'required'
p127721
I00
sS'group_name'
p127722
S'Advanced'
p127723
sa(dp127724
S'description'
p127725
S'The index for the current order parameter\n'
p127726
sS'cpp_type'
p127727
S'unsigned int'
p127728
sS'default'
p127729
g3
sS'name'
p127730
S'op_index'
p127731
sS'required'
p127732
I01
sS'group_name'
p127733
Nsa(dp127734
S'description'
p127735
S'Number of order parameters\n'
p127736
sS'cpp_type'
p127737
S'unsigned int'
p127738
sS'default'
p127739
g3
sS'name'
p127740
S'op_num'
p127741
sS'required'
p127742
I01
sS'group_name'
p127743
Nsa(dp127744
S'description'
p127745
S'The random seed\n'
p127746
sS'cpp_type'
p127747
S'unsigned int'
p127748
sS'default'
p127749
S'12444'
p127750
sS'name'
p127751
S'rand_seed'
p127752
sS'required'
p127753
I00
sS'group_name'
p127754
Nsa(dp127755
S'description'
p127756
g3
sS'cpp_type'
p127757
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127758
sS'default'
p127759
S'PolycrystalReducedIC'
p127760
sS'name'
p127761
S'type'
p127762
sS'required'
p127763
I00
sS'group_name'
p127764
Nsa(dp127765
S'description'
p127766
S'The variable this initial condition is supposed to provide values for.\n'
p127767
sS'cpp_type'
p127768
S'VariableName'
p127769
sS'default'
p127770
g3
sS'name'
p127771
S'variable'
p127772
sS'required'
p127773
I01
sS'group_name'
p127774
NsasS'name'
p127775
S'/Variables/*/InitialCondition/<type>/PolycrystalReducedIC'
p127776
sa(dp127777
S'description'
p127778
S'Random distribution of smooth circles with given minimum spacing\n'
p127779
sS'subblocks'
p127780
NsS'parameters'
p127781
(lp127782
(dp127783
S'description'
p127784
S'in 3D, whether the objects are spheres or columns\n'
p127785
sS'cpp_type'
p127786
S'bool'
p127787
sS'default'
p127788
S'1'
p127789
sS'name'
p127790
S'3D_spheres'
p127791
sS'required'
p127792
I00
sS'group_name'
p127793
Nsa(dp127794
S'description'
p127795
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127796
sS'cpp_type'
p127797
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127798
sS'default'
p127799
g3
sS'name'
p127800
S'block'
p127801
sS'required'
p127802
I00
sS'group_name'
p127803
Nsa(dp127804
S'description'
p127805
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127806
sS'cpp_type'
p127807
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127808
sS'default'
p127809
g3
sS'name'
p127810
S'boundary'
p127811
sS'required'
p127812
I00
sS'group_name'
p127813
Nsa(dp127814
S'description'
p127815
S'minimum spacing of bubbles, measured from center to center\n'
p127816
sS'cpp_type'
p127817
S'double'
p127818
sS'default'
p127819
g3
sS'name'
p127820
S'bubspac'
p127821
sS'required'
p127822
I01
sS'group_name'
p127823
Nsa(dp127824
S'description'
p127825
S'3D microstructure will be columnar in the z-direction?\n'
p127826
sS'cpp_type'
p127827
S'bool'
p127828
sS'default'
p127829
S'0'
p127830
sS'name'
p127831
S'columnar_3D'
p127832
sS'required'
p127833
I00
sS'group_name'
p127834
Nsa(dp127835
S'description'
p127836
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127837
sS'cpp_type'
p127838
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127839
sS'default'
p127840
g3
sS'name'
p127841
S'control_tags'
p127842
sS'required'
p127843
I00
sS'group_name'
p127844
S'Advanced'
p127845
sa(dp127846
S'description'
p127847
S'Set the enabled status of the MooseObject.\n'
p127848
sS'cpp_type'
p127849
S'bool'
p127850
sS'default'
p127851
S'1'
p127852
sS'name'
p127853
S'enable'
p127854
sS'required'
p127855
I00
sS'group_name'
p127856
S'Advanced'
p127857
sa(dp127858
S'description'
p127859
S'Number of grains being represented by the order parameters\n'
p127860
sS'cpp_type'
p127861
S'unsigned int'
p127862
sS'default'
p127863
g3
sS'name'
p127864
S'grain_num'
p127865
sS'required'
p127866
I01
sS'group_name'
p127867
Nsa(dp127868
S'description'
p127869
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127870
sS'cpp_type'
p127871
S'bool'
p127872
sS'default'
p127873
S'0'
p127874
sS'name'
p127875
S'ignore_uo_dependency'
p127876
sS'required'
p127877
I00
sS'group_name'
p127878
S'Advanced'
p127879
sa(dp127880
S'description'
p127881
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p127882
sS'cpp_type'
p127883
S'double'
p127884
sS'default'
p127885
S'0'
p127886
sS'name'
p127887
S'int_width'
p127888
sS'required'
p127889
I00
sS'group_name'
p127890
Nsa(dp127891
S'description'
p127892
S'The variable value inside the circle\n'
p127893
sS'cpp_type'
p127894
S'double'
p127895
sS'default'
p127896
g3
sS'name'
p127897
S'invalue'
p127898
sS'required'
p127899
I01
sS'group_name'
p127900
Nsa(dp127901
S'description'
p127902
S'The number of bubbles to place\n'
p127903
sS'cpp_type'
p127904
S'unsigned int'
p127905
sS'default'
p127906
g3
sS'name'
p127907
S'numbub'
p127908
sS'required'
p127909
I01
sS'group_name'
p127910
Nsa(dp127911
S'description'
p127912
S'The number of tries\n'
p127913
sS'cpp_type'
p127914
S'unsigned int'
p127915
sS'default'
p127916
S'1000'
p127917
sS'name'
p127918
S'numtries'
p127919
sS'required'
p127920
I00
sS'group_name'
p127921
Nsa(dp127922
S'description'
p127923
S'The index for the current order parameter, not needed if structure_type = voids\n'
p127924
sS'cpp_type'
p127925
S'unsigned int'
p127926
sS'default'
p127927
S'0'
p127928
sS'name'
p127929
S'op_index'
p127930
sS'required'
p127931
I00
sS'group_name'
p127932
Nsa(dp127933
S'description'
p127934
S'Number of order parameters\n'
p127935
sS'cpp_type'
p127936
S'unsigned int'
p127937
sS'default'
p127938
g3
sS'name'
p127939
S'op_num'
p127940
sS'required'
p127941
I01
sS'group_name'
p127942
Nsa(dp127943
S'description'
p127944
S'The variable value outside the circle\n'
p127945
sS'cpp_type'
p127946
S'double'
p127947
sS'default'
p127948
g3
sS'name'
p127949
S'outvalue'
p127950
sS'required'
p127951
I01
sS'group_name'
p127952
Nsa(dp127953
S'description'
p127954
S'Mean radius value for the circles\n'
p127955
sS'cpp_type'
p127956
S'double'
p127957
sS'default'
p127958
g3
sS'name'
p127959
S'radius'
p127960
sS'required'
p127961
I01
sS'group_name'
p127962
Nsa(dp127963
S'description'
p127964
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p127965
sS'cpp_type'
p127966
S'double'
p127967
sS'default'
p127968
S'0'
p127969
sS'name'
p127970
S'radius_variation'
p127971
sS'required'
p127972
I00
sS'group_name'
p127973
Nsa(dp127974
S'name'
p127975
S'radius_variation_type'
p127976
sS'cpp_type'
p127977
S'MooseEnum'
p127978
sS'default'
p127979
S'none'
p127980
sS'description'
p127981
S'Type of distribution that random circle radii will follow\n'
p127982
sS'required'
p127983
I00
sS'options'
p127984
S'uniform normal none'
p127985
sS'group_name'
p127986
Nsa(dp127987
S'description'
p127988
S'The random seed\n'
p127989
sS'cpp_type'
p127990
S'unsigned int'
p127991
sS'default'
p127992
S'12444'
p127993
sS'name'
p127994
S'rand_seed'
p127995
sS'required'
p127996
I00
sS'group_name'
p127997
Nsa(dp127998
S'name'
p127999
S'structure_type'
p128000
sS'cpp_type'
p128001
S'MooseEnum'
p128002
sS'default'
p128003
g3
sS'description'
p128004
S'Which structure type is being initialized, grains or voids\n'
p128005
sS'required'
p128006
I01
sS'options'
p128007
S'grains voids'
p128008
sS'group_name'
p128009
Nsa(dp128010
S'description'
p128011
g3
sS'cpp_type'
p128012
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128013
sS'default'
p128014
S'PolycrystalVoronoiVoidIC'
p128015
sS'name'
p128016
S'type'
p128017
sS'required'
p128018
I00
sS'group_name'
p128019
Nsa(dp128020
S'description'
p128021
S'The variable this initial condition is supposed to provide values for.\n'
p128022
sS'cpp_type'
p128023
S'VariableName'
p128024
sS'default'
p128025
g3
sS'name'
p128026
S'variable'
p128027
sS'required'
p128028
I01
sS'group_name'
p128029
Nsa(dp128030
S'description'
p128031
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p128032
sS'cpp_type'
p128033
S'bool'
p128034
sS'default'
p128035
S'0'
p128036
sS'name'
p128037
S'zero_gradient'
p128038
sS'required'
p128039
I00
sS'group_name'
p128040
NsasS'name'
p128041
S'/Variables/*/InitialCondition/<type>/PolycrystalVoronoiVoidIC'
p128042
sa(dp128043
S'description'
p128044
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p128045
sS'subblocks'
p128046
NsS'parameters'
p128047
(lp128048
(dp128049
S'description'
p128050
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128051
sS'cpp_type'
p128052
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128053
sS'default'
p128054
g3
sS'name'
p128055
S'block'
p128056
sS'required'
p128057
I00
sS'group_name'
p128058
Nsa(dp128059
S'description'
p128060
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128061
sS'cpp_type'
p128062
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128063
sS'default'
p128064
g3
sS'name'
p128065
S'boundary'
p128066
sS'required'
p128067
I00
sS'group_name'
p128068
Nsa(dp128069
S'description'
p128070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128071
sS'cpp_type'
p128072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128073
sS'default'
p128074
g3
sS'name'
p128075
S'control_tags'
p128076
sS'required'
p128077
I00
sS'group_name'
p128078
S'Advanced'
p128079
sa(dp128080
S'description'
p128081
S'Set the enabled status of the MooseObject.\n'
p128082
sS'cpp_type'
p128083
S'bool'
p128084
sS'default'
p128085
S'1'
p128086
sS'name'
p128087
S'enable'
p128088
sS'required'
p128089
I00
sS'group_name'
p128090
S'Advanced'
p128091
sa(dp128092
S'description'
p128093
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128094
sS'cpp_type'
p128095
S'bool'
p128096
sS'default'
p128097
S'0'
p128098
sS'name'
p128099
S'ignore_uo_dependency'
p128100
sS'required'
p128101
I00
sS'group_name'
p128102
S'Advanced'
p128103
sa(dp128104
S'description'
p128105
g3
sS'cpp_type'
p128106
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128107
sS'default'
p128108
S'RampIC'
p128109
sS'name'
p128110
S'type'
p128111
sS'required'
p128112
I00
sS'group_name'
p128113
Nsa(dp128114
S'description'
p128115
S'The value on left (xmin) boundary.\n'
p128116
sS'cpp_type'
p128117
S'double'
p128118
sS'default'
p128119
g3
sS'name'
p128120
S'value_left'
p128121
sS'required'
p128122
I01
sS'group_name'
p128123
Nsa(dp128124
S'description'
p128125
S'The value on right (xmax) boundary.\n'
p128126
sS'cpp_type'
p128127
S'double'
p128128
sS'default'
p128129
g3
sS'name'
p128130
S'value_right'
p128131
sS'required'
p128132
I01
sS'group_name'
p128133
Nsa(dp128134
S'description'
p128135
S'The variable this initial condition is supposed to provide values for.\n'
p128136
sS'cpp_type'
p128137
S'VariableName'
p128138
sS'default'
p128139
g3
sS'name'
p128140
S'variable'
p128141
sS'required'
p128142
I01
sS'group_name'
p128143
NsasS'name'
p128144
S'/Variables/*/InitialCondition/<type>/RampIC'
p128145
sa(dp128146
S'description'
p128147
g3
sS'subblocks'
p128148
NsS'parameters'
p128149
(lp128150
(dp128151
S'description'
p128152
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128153
sS'cpp_type'
p128154
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128155
sS'default'
p128156
g3
sS'name'
p128157
S'block'
p128158
sS'required'
p128159
I00
sS'group_name'
p128160
Nsa(dp128161
S'description'
p128162
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128163
sS'cpp_type'
p128164
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128165
sS'default'
p128166
g3
sS'name'
p128167
S'boundary'
p128168
sS'required'
p128169
I00
sS'group_name'
p128170
Nsa(dp128171
S'description'
p128172
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128173
sS'cpp_type'
p128174
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128175
sS'default'
p128176
g3
sS'name'
p128177
S'control_tags'
p128178
sS'required'
p128179
I00
sS'group_name'
p128180
S'Advanced'
p128181
sa(dp128182
S'description'
p128183
S'Set the enabled status of the MooseObject.\n'
p128184
sS'cpp_type'
p128185
S'bool'
p128186
sS'default'
p128187
S'1'
p128188
sS'name'
p128189
S'enable'
p128190
sS'required'
p128191
I00
sS'group_name'
p128192
S'Advanced'
p128193
sa(dp128194
S'description'
p128195
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128196
sS'cpp_type'
p128197
S'bool'
p128198
sS'default'
p128199
S'0'
p128200
sS'name'
p128201
S'ignore_uo_dependency'
p128202
sS'required'
p128203
I00
sS'group_name'
p128204
S'Advanced'
p128205
sa(dp128206
S'description'
p128207
S'Upper bound of the randomly generated values\n'
p128208
sS'cpp_type'
p128209
S'double'
p128210
sS'default'
p128211
S'1'
p128212
sS'name'
p128213
S'max'
p128214
sS'required'
p128215
I00
sS'group_name'
p128216
Nsa(dp128217
S'description'
p128218
S'Lower bound of the randomly generated values\n'
p128219
sS'cpp_type'
p128220
S'double'
p128221
sS'default'
p128222
S'0'
p128223
sS'name'
p128224
S'min'
p128225
sS'required'
p128226
I00
sS'group_name'
p128227
Nsa(dp128228
S'description'
p128229
S'Seed value for the random number generator\n'
p128230
sS'cpp_type'
p128231
S'unsigned int'
p128232
sS'default'
p128233
S'0'
p128234
sS'name'
p128235
S'seed'
p128236
sS'required'
p128237
I00
sS'group_name'
p128238
Nsa(dp128239
S'description'
p128240
g3
sS'cpp_type'
p128241
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128242
sS'default'
p128243
S'RandomIC'
p128244
sS'name'
p128245
S'type'
p128246
sS'required'
p128247
I00
sS'group_name'
p128248
Nsa(dp128249
S'description'
p128250
S'The variable this initial condition is supposed to provide values for.\n'
p128251
sS'cpp_type'
p128252
S'VariableName'
p128253
sS'default'
p128254
g3
sS'name'
p128255
S'variable'
p128256
sS'required'
p128257
I01
sS'group_name'
p128258
NsasS'name'
p128259
S'/Variables/*/InitialCondition/<type>/RandomIC'
p128260
sa(dp128261
S'description'
p128262
g3
sS'subblocks'
p128263
NsS'parameters'
p128264
(lp128265
(dp128266
S'description'
p128267
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128268
sS'cpp_type'
p128269
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128270
sS'default'
p128271
g3
sS'name'
p128272
S'block'
p128273
sS'required'
p128274
I00
sS'group_name'
p128275
Nsa(dp128276
S'description'
p128277
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128278
sS'cpp_type'
p128279
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128280
sS'default'
p128281
g3
sS'name'
p128282
S'boundary'
p128283
sS'required'
p128284
I00
sS'group_name'
p128285
Nsa(dp128286
S'description'
p128287
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128288
sS'cpp_type'
p128289
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128290
sS'default'
p128291
g3
sS'name'
p128292
S'control_tags'
p128293
sS'required'
p128294
I00
sS'group_name'
p128295
S'Advanced'
p128296
sa(dp128297
S'description'
p128298
S'The EBSDReader object holding the EBSD data\n'
p128299
sS'cpp_type'
p128300
S'UserObjectName'
p128301
sS'default'
p128302
g3
sS'name'
p128303
S'ebsd_reader'
p128304
sS'required'
p128305
I01
sS'group_name'
p128306
Nsa(dp128307
S'description'
p128308
S'Set the enabled status of the MooseObject.\n'
p128309
sS'cpp_type'
p128310
S'bool'
p128311
sS'default'
p128312
S'1'
p128313
sS'name'
p128314
S'enable'
p128315
sS'required'
p128316
I00
sS'group_name'
p128317
S'Advanced'
p128318
sa(dp128319
S'description'
p128320
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128321
sS'cpp_type'
p128322
S'bool'
p128323
sS'default'
p128324
S'0'
p128325
sS'name'
p128326
S'ignore_uo_dependency'
p128327
sS'required'
p128328
I00
sS'group_name'
p128329
S'Advanced'
p128330
sa(dp128331
S'description'
p128332
S'EBSD phase number this variable is to represent\n'
p128333
sS'cpp_type'
p128334
S'unsigned int'
p128335
sS'default'
p128336
g3
sS'name'
p128337
S'phase'
p128338
sS'required'
p128339
I01
sS'group_name'
p128340
Nsa(dp128341
S'description'
p128342
g3
sS'cpp_type'
p128343
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128344
sS'default'
p128345
S'ReconPhaseVarIC'
p128346
sS'name'
p128347
S'type'
p128348
sS'required'
p128349
I00
sS'group_name'
p128350
Nsa(dp128351
S'description'
p128352
S'The variable this initial condition is supposed to provide values for.\n'
p128353
sS'cpp_type'
p128354
S'VariableName'
p128355
sS'default'
p128356
g3
sS'name'
p128357
S'variable'
p128358
sS'required'
p128359
I01
sS'group_name'
p128360
NsasS'name'
p128361
S'/Variables/*/InitialCondition/<type>/ReconPhaseVarIC'
p128362
sa(dp128363
S'description'
p128364
g3
sS'subblocks'
p128365
NsS'parameters'
p128366
(lp128367
(dp128368
S'description'
p128369
g3
sS'cpp_type'
p128370
S'bool'
p128371
sS'default'
p128372
S'0'
p128373
sS'name'
p128374
S'all_op_elemental'
p128375
sS'required'
p128376
I00
sS'group_name'
p128377
Nsa(dp128378
S'description'
p128379
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128380
sS'cpp_type'
p128381
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128382
sS'default'
p128383
g3
sS'name'
p128384
S'block'
p128385
sS'required'
p128386
I00
sS'group_name'
p128387
Nsa(dp128388
S'description'
p128389
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128390
sS'cpp_type'
p128391
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128392
sS'default'
p128393
g3
sS'name'
p128394
S'boundary'
p128395
sS'required'
p128396
I00
sS'group_name'
p128397
Nsa(dp128398
S'name'
p128399
S'coloring_algorithm'
p128400
sS'cpp_type'
p128401
S'MooseEnum'
p128402
sS'default'
p128403
S'legacy'
p128404
sS'description'
p128405
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p128406
sS'required'
p128407
I00
sS'options'
p128408
S'legacy bt jp power greedy'
p128409
sS'group_name'
p128410
Nsa(dp128411
S'description'
p128412
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128413
sS'cpp_type'
p128414
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128415
sS'default'
p128416
g3
sS'name'
p128417
S'control_tags'
p128418
sS'required'
p128419
I00
sS'group_name'
p128420
S'Advanced'
p128421
sa(dp128422
S'description'
p128423
S'The EBSDReader GeneralUserObject\n'
p128424
sS'cpp_type'
p128425
S'UserObjectName'
p128426
sS'default'
p128427
g3
sS'name'
p128428
S'ebsd_reader'
p128429
sS'required'
p128430
I01
sS'group_name'
p128431
Nsa(dp128432
S'description'
p128433
S'Set the enabled status of the MooseObject.\n'
p128434
sS'cpp_type'
p128435
S'bool'
p128436
sS'default'
p128437
S'1'
p128438
sS'name'
p128439
S'enable'
p128440
sS'required'
p128441
I00
sS'group_name'
p128442
S'Advanced'
p128443
sa(dp128444
S'description'
p128445
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128446
sS'cpp_type'
p128447
S'bool'
p128448
sS'default'
p128449
S'0'
p128450
sS'name'
p128451
S'ignore_uo_dependency'
p128452
sS'required'
p128453
I00
sS'group_name'
p128454
S'Advanced'
p128455
sa(dp128456
S'description'
p128457
S'The index for the current order parameter\n'
p128458
sS'cpp_type'
p128459
S'unsigned int'
p128460
sS'default'
p128461
g3
sS'name'
p128462
S'op_index'
p128463
sS'required'
p128464
I01
sS'group_name'
p128465
Nsa(dp128466
S'description'
p128467
S'Specifies the number of order parameters to create\n'
p128468
sS'cpp_type'
p128469
S'unsigned int'
p128470
sS'default'
p128471
g3
sS'name'
p128472
S'op_num'
p128473
sS'required'
p128474
I01
sS'group_name'
p128475
Nsa(dp128476
S'description'
p128477
S'EBSD phase number to be assigned to this grain\n'
p128478
sS'cpp_type'
p128479
S'unsigned int'
p128480
sS'default'
p128481
g3
sS'name'
p128482
S'phase'
p128483
sS'required'
p128484
I00
sS'group_name'
p128485
Nsa(dp128486
S'description'
p128487
g3
sS'cpp_type'
p128488
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128489
sS'default'
p128490
S'ReconVarIC'
p128491
sS'name'
p128492
S'type'
p128493
sS'required'
p128494
I00
sS'group_name'
p128495
Nsa(dp128496
S'description'
p128497
S'The variable this initial condition is supposed to provide values for.\n'
p128498
sS'cpp_type'
p128499
S'VariableName'
p128500
sS'default'
p128501
g3
sS'name'
p128502
S'variable'
p128503
sS'required'
p128504
I01
sS'group_name'
p128505
NsasS'name'
p128506
S'/Variables/*/InitialCondition/<type>/ReconVarIC'
p128507
sa(dp128508
S'description'
p128509
S'Random noise with different min/max inside/outside of a bounding box\n'
p128510
sS'subblocks'
p128511
NsS'parameters'
p128512
(lp128513
(dp128514
S'description'
p128515
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128516
sS'cpp_type'
p128517
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128518
sS'default'
p128519
g3
sS'name'
p128520
S'block'
p128521
sS'required'
p128522
I00
sS'group_name'
p128523
Nsa(dp128524
S'description'
p128525
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128526
sS'cpp_type'
p128527
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128528
sS'default'
p128529
g3
sS'name'
p128530
S'boundary'
p128531
sS'required'
p128532
I00
sS'group_name'
p128533
Nsa(dp128534
S'description'
p128535
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128536
sS'cpp_type'
p128537
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128538
sS'default'
p128539
g3
sS'name'
p128540
S'control_tags'
p128541
sS'required'
p128542
I00
sS'group_name'
p128543
S'Advanced'
p128544
sa(dp128545
S'description'
p128546
S'Set the enabled status of the MooseObject.\n'
p128547
sS'cpp_type'
p128548
S'bool'
p128549
sS'default'
p128550
S'1'
p128551
sS'name'
p128552
S'enable'
p128553
sS'required'
p128554
I00
sS'group_name'
p128555
S'Advanced'
p128556
sa(dp128557
S'description'
p128558
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128559
sS'cpp_type'
p128560
S'bool'
p128561
sS'default'
p128562
S'0'
p128563
sS'name'
p128564
S'ignore_uo_dependency'
p128565
sS'required'
p128566
I00
sS'group_name'
p128567
S'Advanced'
p128568
sa(dp128569
S'description'
p128570
S'The min value of the variable invalue the box\n'
p128571
sS'cpp_type'
p128572
S'double'
p128573
sS'default'
p128574
S'0'
p128575
sS'name'
p128576
S'mn_invalue'
p128577
sS'required'
p128578
I00
sS'group_name'
p128579
Nsa(dp128580
S'description'
p128581
S'The min value of the variable outvalue the box\n'
p128582
sS'cpp_type'
p128583
S'double'
p128584
sS'default'
p128585
S'0'
p128586
sS'name'
p128587
S'mn_outvalue'
p128588
sS'required'
p128589
I00
sS'group_name'
p128590
Nsa(dp128591
S'description'
p128592
S'The max value of the variable invalue the box\n'
p128593
sS'cpp_type'
p128594
S'double'
p128595
sS'default'
p128596
g3
sS'name'
p128597
S'mx_invalue'
p128598
sS'required'
p128599
I01
sS'group_name'
p128600
Nsa(dp128601
S'description'
p128602
S'The max value of the variable outvalue the box\n'
p128603
sS'cpp_type'
p128604
S'double'
p128605
sS'default'
p128606
g3
sS'name'
p128607
S'mx_outvalue'
p128608
sS'required'
p128609
I01
sS'group_name'
p128610
Nsa(dp128611
S'description'
p128612
g3
sS'cpp_type'
p128613
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128614
sS'default'
p128615
S'RndBoundingBoxIC'
p128616
sS'name'
p128617
S'type'
p128618
sS'required'
p128619
I00
sS'group_name'
p128620
Nsa(dp128621
S'description'
p128622
S'The variable this initial condition is supposed to provide values for.\n'
p128623
sS'cpp_type'
p128624
S'VariableName'
p128625
sS'default'
p128626
g3
sS'name'
p128627
S'variable'
p128628
sS'required'
p128629
I01
sS'group_name'
p128630
Nsa(dp128631
S'description'
p128632
S'The x coordinate of the lower left-hand corner of the box\n'
p128633
sS'cpp_type'
p128634
S'double'
p128635
sS'default'
p128636
g3
sS'name'
p128637
S'x1'
p128638
sS'required'
p128639
I01
sS'group_name'
p128640
Nsa(dp128641
S'description'
p128642
S'The x coordinate of the upper right-hand corner of the box\n'
p128643
sS'cpp_type'
p128644
S'double'
p128645
sS'default'
p128646
g3
sS'name'
p128647
S'x2'
p128648
sS'required'
p128649
I01
sS'group_name'
p128650
Nsa(dp128651
S'description'
p128652
S'The y coordinate of the lower left-hand corner of the box\n'
p128653
sS'cpp_type'
p128654
S'double'
p128655
sS'default'
p128656
g3
sS'name'
p128657
S'y1'
p128658
sS'required'
p128659
I01
sS'group_name'
p128660
Nsa(dp128661
S'description'
p128662
S'The y coordinate of the upper right-hand corner of the box\n'
p128663
sS'cpp_type'
p128664
S'double'
p128665
sS'default'
p128666
g3
sS'name'
p128667
S'y2'
p128668
sS'required'
p128669
I01
sS'group_name'
p128670
Nsa(dp128671
S'description'
p128672
S'The z coordinate of the lower left-hand corner of the box\n'
p128673
sS'cpp_type'
p128674
S'double'
p128675
sS'default'
p128676
S'0'
p128677
sS'name'
p128678
S'z1'
p128679
sS'required'
p128680
I00
sS'group_name'
p128681
Nsa(dp128682
S'description'
p128683
S'The z coordinate of the upper right-hand corner of the box\n'
p128684
sS'cpp_type'
p128685
S'double'
p128686
sS'default'
p128687
S'0'
p128688
sS'name'
p128689
S'z2'
p128690
sS'required'
p128691
I00
sS'group_name'
p128692
NsasS'name'
p128693
S'/Variables/*/InitialCondition/<type>/RndBoundingBoxIC'
p128694
sa(dp128695
S'description'
p128696
S'Random noise with different min/max inside/outside of a smooth circle\n'
p128697
sS'subblocks'
p128698
NsS'parameters'
p128699
(lp128700
(dp128701
S'description'
p128702
S'in 3D, whether the objects are spheres or columns\n'
p128703
sS'cpp_type'
p128704
S'bool'
p128705
sS'default'
p128706
S'1'
p128707
sS'name'
p128708
S'3D_spheres'
p128709
sS'required'
p128710
I00
sS'group_name'
p128711
Nsa(dp128712
S'description'
p128713
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128714
sS'cpp_type'
p128715
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128716
sS'default'
p128717
g3
sS'name'
p128718
S'block'
p128719
sS'required'
p128720
I00
sS'group_name'
p128721
Nsa(dp128722
S'description'
p128723
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128724
sS'cpp_type'
p128725
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128726
sS'default'
p128727
g3
sS'name'
p128728
S'boundary'
p128729
sS'required'
p128730
I00
sS'group_name'
p128731
Nsa(dp128732
S'description'
p128733
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128734
sS'cpp_type'
p128735
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128736
sS'default'
p128737
g3
sS'name'
p128738
S'control_tags'
p128739
sS'required'
p128740
I00
sS'group_name'
p128741
S'Advanced'
p128742
sa(dp128743
S'description'
p128744
S'Set the enabled status of the MooseObject.\n'
p128745
sS'cpp_type'
p128746
S'bool'
p128747
sS'default'
p128748
S'1'
p128749
sS'name'
p128750
S'enable'
p128751
sS'required'
p128752
I00
sS'group_name'
p128753
S'Advanced'
p128754
sa(dp128755
S'description'
p128756
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128757
sS'cpp_type'
p128758
S'bool'
p128759
sS'default'
p128760
S'0'
p128761
sS'name'
p128762
S'ignore_uo_dependency'
p128763
sS'required'
p128764
I00
sS'group_name'
p128765
S'Advanced'
p128766
sa(dp128767
S'description'
p128768
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p128769
sS'cpp_type'
p128770
S'double'
p128771
sS'default'
p128772
S'0'
p128773
sS'name'
p128774
S'int_width'
p128775
sS'required'
p128776
I00
sS'group_name'
p128777
Nsa(dp128778
S'description'
p128779
S'The variable value inside the circle\n'
p128780
sS'cpp_type'
p128781
S'double'
p128782
sS'default'
p128783
g3
sS'name'
p128784
S'invalue'
p128785
sS'required'
p128786
I01
sS'group_name'
p128787
Nsa(dp128788
S'description'
p128789
S'The variable value outside the circle\n'
p128790
sS'cpp_type'
p128791
S'double'
p128792
sS'default'
p128793
g3
sS'name'
p128794
S'outvalue'
p128795
sS'required'
p128796
I01
sS'group_name'
p128797
Nsa(dp128798
S'description'
p128799
S'The radius of a circle\n'
p128800
sS'cpp_type'
p128801
S'double'
p128802
sS'default'
p128803
g3
sS'name'
p128804
S'radius'
p128805
sS'required'
p128806
I01
sS'group_name'
p128807
Nsa(dp128808
S'description'
p128809
S'Seed value for the random number generator\n'
p128810
sS'cpp_type'
p128811
S'unsigned int'
p128812
sS'default'
p128813
S'12345'
p128814
sS'name'
p128815
S'rand_seed'
p128816
sS'required'
p128817
I00
sS'group_name'
p128818
Nsa(dp128819
S'description'
p128820
g3
sS'cpp_type'
p128821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128822
sS'default'
p128823
S'RndSmoothCircleIC'
p128824
sS'name'
p128825
S'type'
p128826
sS'required'
p128827
I00
sS'group_name'
p128828
Nsa(dp128829
S'description'
p128830
S'The variable this initial condition is supposed to provide values for.\n'
p128831
sS'cpp_type'
p128832
S'VariableName'
p128833
sS'default'
p128834
g3
sS'name'
p128835
S'variable'
p128836
sS'required'
p128837
I01
sS'group_name'
p128838
Nsa(dp128839
S'description'
p128840
S'Plus or minus this amount on the invalue\n'
p128841
sS'cpp_type'
p128842
S'double'
p128843
sS'default'
p128844
g3
sS'name'
p128845
S'variation_invalue'
p128846
sS'required'
p128847
I01
sS'group_name'
p128848
Nsa(dp128849
S'description'
p128850
S'Plus or minus this amount on the outvalue\n'
p128851
sS'cpp_type'
p128852
S'double'
p128853
sS'default'
p128854
g3
sS'name'
p128855
S'variation_outvalue'
p128856
sS'required'
p128857
I01
sS'group_name'
p128858
Nsa(dp128859
S'description'
p128860
S'The x coordinate of the circle center\n'
p128861
sS'cpp_type'
p128862
S'double'
p128863
sS'default'
p128864
g3
sS'name'
p128865
S'x1'
p128866
sS'required'
p128867
I01
sS'group_name'
p128868
Nsa(dp128869
S'description'
p128870
S'The y coordinate of the circle center\n'
p128871
sS'cpp_type'
p128872
S'double'
p128873
sS'default'
p128874
g3
sS'name'
p128875
S'y1'
p128876
sS'required'
p128877
I01
sS'group_name'
p128878
Nsa(dp128879
S'description'
p128880
S'The z coordinate of the circle center\n'
p128881
sS'cpp_type'
p128882
S'double'
p128883
sS'default'
p128884
S'0'
p128885
sS'name'
p128886
S'z1'
p128887
sS'required'
p128888
I00
sS'group_name'
p128889
Nsa(dp128890
S'description'
p128891
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p128892
sS'cpp_type'
p128893
S'bool'
p128894
sS'default'
p128895
S'0'
p128896
sS'name'
p128897
S'zero_gradient'
p128898
sS'required'
p128899
I00
sS'group_name'
p128900
NsasS'name'
p128901
S'/Variables/*/InitialCondition/<type>/RndSmoothCircleIC'
p128902
sa(dp128903
S'description'
p128904
g3
sS'subblocks'
p128905
NsS'parameters'
p128906
(lp128907
(dp128908
S'description'
p128909
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128910
sS'cpp_type'
p128911
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128912
sS'default'
p128913
g3
sS'name'
p128914
S'control_tags'
p128915
sS'required'
p128916
I00
sS'group_name'
p128917
S'Advanced'
p128918
sa(dp128919
S'description'
p128920
S'Set the enabled status of the MooseObject.\n'
p128921
sS'cpp_type'
p128922
S'bool'
p128923
sS'default'
p128924
S'1'
p128925
sS'name'
p128926
S'enable'
p128927
sS'required'
p128928
I00
sS'group_name'
p128929
S'Advanced'
p128930
sa(dp128931
S'description'
p128932
g3
sS'cpp_type'
p128933
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128934
sS'default'
p128935
S'ScalarComponentIC'
p128936
sS'name'
p128937
S'type'
p128938
sS'required'
p128939
I00
sS'group_name'
p128940
Nsa(dp128941
S'description'
p128942
S'Initial values to initialize the scalar variable.\n'
p128943
sS'cpp_type'
p128944
S'std::vector<double, std::allocator<double> >'
p128945
sS'default'
p128946
g3
sS'name'
p128947
S'values'
p128948
sS'required'
p128949
I01
sS'group_name'
p128950
Nsa(dp128951
S'description'
p128952
S'The variable this initial condition is supposed to provide values for.\n'
p128953
sS'cpp_type'
p128954
S'VariableName'
p128955
sS'default'
p128956
g3
sS'name'
p128957
S'variable'
p128958
sS'required'
p128959
I00
sS'group_name'
p128960
NsasS'name'
p128961
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p128962
sa(dp128963
S'description'
p128964
g3
sS'subblocks'
p128965
NsS'parameters'
p128966
(lp128967
(dp128968
S'description'
p128969
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128970
sS'cpp_type'
p128971
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128972
sS'default'
p128973
g3
sS'name'
p128974
S'control_tags'
p128975
sS'required'
p128976
I00
sS'group_name'
p128977
S'Advanced'
p128978
sa(dp128979
S'description'
p128980
S'Set the enabled status of the MooseObject.\n'
p128981
sS'cpp_type'
p128982
S'bool'
p128983
sS'default'
p128984
S'1'
p128985
sS'name'
p128986
S'enable'
p128987
sS'required'
p128988
I00
sS'group_name'
p128989
S'Advanced'
p128990
sa(dp128991
S'description'
p128992
g3
sS'cpp_type'
p128993
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128994
sS'default'
p128995
S'ScalarConstantIC'
p128996
sS'name'
p128997
S'type'
p128998
sS'required'
p128999
I00
sS'group_name'
p129000
Nsa(dp129001
S'description'
p129002
g3
sS'cpp_type'
p129003
S'double'
p129004
sS'default'
p129005
S'0'
p129006
sS'name'
p129007
S'value'
p129008
sS'required'
p129009
I00
sS'group_name'
p129010
Nsa(dp129011
S'description'
p129012
S'The variable this initial condition is supposed to provide values for.\n'
p129013
sS'cpp_type'
p129014
S'VariableName'
p129015
sS'default'
p129016
g3
sS'name'
p129017
S'variable'
p129018
sS'required'
p129019
I00
sS'group_name'
p129020
NsasS'name'
p129021
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p129022
sa(dp129023
S'description'
p129024
S'Circle with a smooth interface\n'
p129025
sS'subblocks'
p129026
NsS'parameters'
p129027
(lp129028
(dp129029
S'description'
p129030
S'in 3D, whether the objects are spheres or columns\n'
p129031
sS'cpp_type'
p129032
S'bool'
p129033
sS'default'
p129034
S'1'
p129035
sS'name'
p129036
S'3D_spheres'
p129037
sS'required'
p129038
I00
sS'group_name'
p129039
Nsa(dp129040
S'description'
p129041
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129042
sS'cpp_type'
p129043
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129044
sS'default'
p129045
g3
sS'name'
p129046
S'block'
p129047
sS'required'
p129048
I00
sS'group_name'
p129049
Nsa(dp129050
S'description'
p129051
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129052
sS'cpp_type'
p129053
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129054
sS'default'
p129055
g3
sS'name'
p129056
S'boundary'
p129057
sS'required'
p129058
I00
sS'group_name'
p129059
Nsa(dp129060
S'description'
p129061
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129062
sS'cpp_type'
p129063
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129064
sS'default'
p129065
g3
sS'name'
p129066
S'control_tags'
p129067
sS'required'
p129068
I00
sS'group_name'
p129069
S'Advanced'
p129070
sa(dp129071
S'description'
p129072
S'Set the enabled status of the MooseObject.\n'
p129073
sS'cpp_type'
p129074
S'bool'
p129075
sS'default'
p129076
S'1'
p129077
sS'name'
p129078
S'enable'
p129079
sS'required'
p129080
I00
sS'group_name'
p129081
S'Advanced'
p129082
sa(dp129083
S'description'
p129084
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129085
sS'cpp_type'
p129086
S'bool'
p129087
sS'default'
p129088
S'0'
p129089
sS'name'
p129090
S'ignore_uo_dependency'
p129091
sS'required'
p129092
I00
sS'group_name'
p129093
S'Advanced'
p129094
sa(dp129095
S'description'
p129096
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129097
sS'cpp_type'
p129098
S'double'
p129099
sS'default'
p129100
S'0'
p129101
sS'name'
p129102
S'int_width'
p129103
sS'required'
p129104
I00
sS'group_name'
p129105
Nsa(dp129106
S'description'
p129107
S'The variable value inside the circle\n'
p129108
sS'cpp_type'
p129109
S'double'
p129110
sS'default'
p129111
g3
sS'name'
p129112
S'invalue'
p129113
sS'required'
p129114
I01
sS'group_name'
p129115
Nsa(dp129116
S'description'
p129117
S'The variable value outside the circle\n'
p129118
sS'cpp_type'
p129119
S'double'
p129120
sS'default'
p129121
g3
sS'name'
p129122
S'outvalue'
p129123
sS'required'
p129124
I01
sS'group_name'
p129125
Nsa(dp129126
S'description'
p129127
S'The radius of a circle\n'
p129128
sS'cpp_type'
p129129
S'double'
p129130
sS'default'
p129131
g3
sS'name'
p129132
S'radius'
p129133
sS'required'
p129134
I01
sS'group_name'
p129135
Nsa(dp129136
S'description'
p129137
S'Seed value for the random number generator\n'
p129138
sS'cpp_type'
p129139
S'unsigned int'
p129140
sS'default'
p129141
S'12345'
p129142
sS'name'
p129143
S'rand_seed'
p129144
sS'required'
p129145
I00
sS'group_name'
p129146
Nsa(dp129147
S'description'
p129148
g3
sS'cpp_type'
p129149
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129150
sS'default'
p129151
S'SmoothCircleIC'
p129152
sS'name'
p129153
S'type'
p129154
sS'required'
p129155
I00
sS'group_name'
p129156
Nsa(dp129157
S'description'
p129158
S'The variable this initial condition is supposed to provide values for.\n'
p129159
sS'cpp_type'
p129160
S'VariableName'
p129161
sS'default'
p129162
g3
sS'name'
p129163
S'variable'
p129164
sS'required'
p129165
I01
sS'group_name'
p129166
Nsa(dp129167
S'description'
p129168
S'The x coordinate of the circle center\n'
p129169
sS'cpp_type'
p129170
S'double'
p129171
sS'default'
p129172
g3
sS'name'
p129173
S'x1'
p129174
sS'required'
p129175
I01
sS'group_name'
p129176
Nsa(dp129177
S'description'
p129178
S'The y coordinate of the circle center\n'
p129179
sS'cpp_type'
p129180
S'double'
p129181
sS'default'
p129182
g3
sS'name'
p129183
S'y1'
p129184
sS'required'
p129185
I01
sS'group_name'
p129186
Nsa(dp129187
S'description'
p129188
S'The z coordinate of the circle center\n'
p129189
sS'cpp_type'
p129190
S'double'
p129191
sS'default'
p129192
S'0'
p129193
sS'name'
p129194
S'z1'
p129195
sS'required'
p129196
I00
sS'group_name'
p129197
Nsa(dp129198
S'description'
p129199
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p129200
sS'cpp_type'
p129201
S'bool'
p129202
sS'default'
p129203
S'0'
p129204
sS'name'
p129205
S'zero_gradient'
p129206
sS'required'
p129207
I00
sS'group_name'
p129208
NsasS'name'
p129209
S'/Variables/*/InitialCondition/<type>/SmoothCircleIC'
p129210
sa(dp129211
S'description'
p129212
S'Superellipsoid with a smooth interface\n'
p129213
sS'subblocks'
p129214
NsS'parameters'
p129215
(lp129216
(dp129217
S'description'
p129218
S'Semiaxis a of the superellipsoid\n'
p129219
sS'cpp_type'
p129220
S'double'
p129221
sS'default'
p129222
g3
sS'name'
p129223
S'a'
p129224
sS'required'
p129225
I01
sS'group_name'
p129226
Nsa(dp129227
S'description'
p129228
S'Semiaxis b of the superellipsoid\n'
p129229
sS'cpp_type'
p129230
S'double'
p129231
sS'default'
p129232
g3
sS'name'
p129233
S'b'
p129234
sS'required'
p129235
I01
sS'group_name'
p129236
Nsa(dp129237
S'description'
p129238
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129239
sS'cpp_type'
p129240
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129241
sS'default'
p129242
g3
sS'name'
p129243
S'block'
p129244
sS'required'
p129245
I00
sS'group_name'
p129246
Nsa(dp129247
S'description'
p129248
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129249
sS'cpp_type'
p129250
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129251
sS'default'
p129252
g3
sS'name'
p129253
S'boundary'
p129254
sS'required'
p129255
I00
sS'group_name'
p129256
Nsa(dp129257
S'description'
p129258
S'Semiaxis c of the superellipsoid\n'
p129259
sS'cpp_type'
p129260
S'double'
p129261
sS'default'
p129262
S'1'
p129263
sS'name'
p129264
S'c'
p129265
sS'required'
p129266
I00
sS'group_name'
p129267
Nsa(dp129268
S'description'
p129269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129270
sS'cpp_type'
p129271
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129272
sS'default'
p129273
g3
sS'name'
p129274
S'control_tags'
p129275
sS'required'
p129276
I00
sS'group_name'
p129277
S'Advanced'
p129278
sa(dp129279
S'description'
p129280
S'Set the enabled status of the MooseObject.\n'
p129281
sS'cpp_type'
p129282
S'bool'
p129283
sS'default'
p129284
S'1'
p129285
sS'name'
p129286
S'enable'
p129287
sS'required'
p129288
I00
sS'group_name'
p129289
S'Advanced'
p129290
sa(dp129291
S'description'
p129292
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129293
sS'cpp_type'
p129294
S'bool'
p129295
sS'default'
p129296
S'0'
p129297
sS'name'
p129298
S'ignore_uo_dependency'
p129299
sS'required'
p129300
I00
sS'group_name'
p129301
S'Advanced'
p129302
sa(dp129303
S'description'
p129304
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129305
sS'cpp_type'
p129306
S'double'
p129307
sS'default'
p129308
S'0'
p129309
sS'name'
p129310
S'int_width'
p129311
sS'required'
p129312
I00
sS'group_name'
p129313
Nsa(dp129314
S'description'
p129315
S'The variable value inside the superellipsoid\n'
p129316
sS'cpp_type'
p129317
S'double'
p129318
sS'default'
p129319
g3
sS'name'
p129320
S'invalue'
p129321
sS'required'
p129322
I01
sS'group_name'
p129323
Nsa(dp129324
S'description'
p129325
S'Exponent n of the superellipsoid\n'
p129326
sS'cpp_type'
p129327
S'double'
p129328
sS'default'
p129329
g3
sS'name'
p129330
S'n'
p129331
sS'required'
p129332
I01
sS'group_name'
p129333
Nsa(dp129334
S'description'
p129335
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p129336
sS'cpp_type'
p129337
S'double'
p129338
sS'default'
p129339
g3
sS'name'
p129340
S'nestedvalue'
p129341
sS'required'
p129342
I00
sS'group_name'
p129343
Nsa(dp129344
S'description'
p129345
S'The variable value outside the superellipsoid\n'
p129346
sS'cpp_type'
p129347
S'double'
p129348
sS'default'
p129349
g3
sS'name'
p129350
S'outvalue'
p129351
sS'required'
p129352
I01
sS'group_name'
p129353
Nsa(dp129354
S'description'
p129355
S'Seed value for the random number generator\n'
p129356
sS'cpp_type'
p129357
S'unsigned int'
p129358
sS'default'
p129359
S'12345'
p129360
sS'name'
p129361
S'rand_seed'
p129362
sS'required'
p129363
I00
sS'group_name'
p129364
Nsa(dp129365
S'description'
p129366
g3
sS'cpp_type'
p129367
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129368
sS'default'
p129369
S'SmoothSuperellipsoidIC'
p129370
sS'name'
p129371
S'type'
p129372
sS'required'
p129373
I00
sS'group_name'
p129374
Nsa(dp129375
S'description'
p129376
S'The variable this initial condition is supposed to provide values for.\n'
p129377
sS'cpp_type'
p129378
S'VariableName'
p129379
sS'default'
p129380
g3
sS'name'
p129381
S'variable'
p129382
sS'required'
p129383
I01
sS'group_name'
p129384
Nsa(dp129385
S'description'
p129386
S'The x coordinate of the superellipsoid center\n'
p129387
sS'cpp_type'
p129388
S'double'
p129389
sS'default'
p129390
g3
sS'name'
p129391
S'x1'
p129392
sS'required'
p129393
I01
sS'group_name'
p129394
Nsa(dp129395
S'description'
p129396
S'The y coordinate of the superellipsoid center\n'
p129397
sS'cpp_type'
p129398
S'double'
p129399
sS'default'
p129400
g3
sS'name'
p129401
S'y1'
p129402
sS'required'
p129403
I01
sS'group_name'
p129404
Nsa(dp129405
S'description'
p129406
S'The z coordinate of the superellipsoid center\n'
p129407
sS'cpp_type'
p129408
S'double'
p129409
sS'default'
p129410
S'0'
p129411
sS'name'
p129412
S'z1'
p129413
sS'required'
p129414
I00
sS'group_name'
p129415
Nsa(dp129416
S'description'
p129417
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p129418
sS'cpp_type'
p129419
S'bool'
p129420
sS'default'
p129421
S'0'
p129422
sS'name'
p129423
S'zero_gradient'
p129424
sS'required'
p129425
I00
sS'group_name'
p129426
NsasS'name'
p129427
S'/Variables/*/InitialCondition/<type>/SmoothSuperellipsoidIC'
p129428
sa(dp129429
S'description'
p129430
S'Multiple smooth circles with manually specified radii and center points\n'
p129431
sS'subblocks'
p129432
NsS'parameters'
p129433
(lp129434
(dp129435
S'description'
p129436
S'in 3D, whether the objects are spheres or columns\n'
p129437
sS'cpp_type'
p129438
S'bool'
p129439
sS'default'
p129440
S'1'
p129441
sS'name'
p129442
S'3D_spheres'
p129443
sS'required'
p129444
I00
sS'group_name'
p129445
Nsa(dp129446
S'description'
p129447
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129448
sS'cpp_type'
p129449
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129450
sS'default'
p129451
g3
sS'name'
p129452
S'block'
p129453
sS'required'
p129454
I00
sS'group_name'
p129455
Nsa(dp129456
S'description'
p129457
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129458
sS'cpp_type'
p129459
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129460
sS'default'
p129461
g3
sS'name'
p129462
S'boundary'
p129463
sS'required'
p129464
I00
sS'group_name'
p129465
Nsa(dp129466
S'description'
p129467
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129468
sS'cpp_type'
p129469
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129470
sS'default'
p129471
g3
sS'name'
p129472
S'control_tags'
p129473
sS'required'
p129474
I00
sS'group_name'
p129475
S'Advanced'
p129476
sa(dp129477
S'description'
p129478
S'Set the enabled status of the MooseObject.\n'
p129479
sS'cpp_type'
p129480
S'bool'
p129481
sS'default'
p129482
S'1'
p129483
sS'name'
p129484
S'enable'
p129485
sS'required'
p129486
I00
sS'group_name'
p129487
S'Advanced'
p129488
sa(dp129489
S'description'
p129490
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129491
sS'cpp_type'
p129492
S'bool'
p129493
sS'default'
p129494
S'0'
p129495
sS'name'
p129496
S'ignore_uo_dependency'
p129497
sS'required'
p129498
I00
sS'group_name'
p129499
S'Advanced'
p129500
sa(dp129501
S'description'
p129502
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129503
sS'cpp_type'
p129504
S'double'
p129505
sS'default'
p129506
S'0'
p129507
sS'name'
p129508
S'int_width'
p129509
sS'required'
p129510
I00
sS'group_name'
p129511
Nsa(dp129512
S'description'
p129513
S'The variable value inside the circle\n'
p129514
sS'cpp_type'
p129515
S'double'
p129516
sS'default'
p129517
g3
sS'name'
p129518
S'invalue'
p129519
sS'required'
p129520
I01
sS'group_name'
p129521
Nsa(dp129522
S'description'
p129523
S'The variable value outside the circle\n'
p129524
sS'cpp_type'
p129525
S'double'
p129526
sS'default'
p129527
g3
sS'name'
p129528
S'outvalue'
p129529
sS'required'
p129530
I01
sS'group_name'
p129531
Nsa(dp129532
S'description'
p129533
S'The radius for each circle\n'
p129534
sS'cpp_type'
p129535
S'std::vector<double, std::allocator<double> >'
p129536
sS'default'
p129537
g3
sS'name'
p129538
S'radii'
p129539
sS'required'
p129540
I01
sS'group_name'
p129541
Nsa(dp129542
S'description'
p129543
S'Seed value for the random number generator\n'
p129544
sS'cpp_type'
p129545
S'unsigned int'
p129546
sS'default'
p129547
S'12345'
p129548
sS'name'
p129549
S'rand_seed'
p129550
sS'required'
p129551
I00
sS'group_name'
p129552
Nsa(dp129553
S'description'
p129554
g3
sS'cpp_type'
p129555
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129556
sS'default'
p129557
S'SpecifiedSmoothCircleIC'
p129558
sS'name'
p129559
S'type'
p129560
sS'required'
p129561
I00
sS'group_name'
p129562
Nsa(dp129563
S'description'
p129564
S'The variable this initial condition is supposed to provide values for.\n'
p129565
sS'cpp_type'
p129566
S'VariableName'
p129567
sS'default'
p129568
g3
sS'name'
p129569
S'variable'
p129570
sS'required'
p129571
I01
sS'group_name'
p129572
Nsa(dp129573
S'description'
p129574
S'The x-coordinate for each circle center\n'
p129575
sS'cpp_type'
p129576
S'std::vector<double, std::allocator<double> >'
p129577
sS'default'
p129578
g3
sS'name'
p129579
S'x_positions'
p129580
sS'required'
p129581
I01
sS'group_name'
p129582
Nsa(dp129583
S'description'
p129584
S'The y-coordinate for each circle center\n'
p129585
sS'cpp_type'
p129586
S'std::vector<double, std::allocator<double> >'
p129587
sS'default'
p129588
g3
sS'name'
p129589
S'y_positions'
p129590
sS'required'
p129591
I01
sS'group_name'
p129592
Nsa(dp129593
S'description'
p129594
S'The z-coordinate for each circle center\n'
p129595
sS'cpp_type'
p129596
S'std::vector<double, std::allocator<double> >'
p129597
sS'default'
p129598
g3
sS'name'
p129599
S'z_positions'
p129600
sS'required'
p129601
I01
sS'group_name'
p129602
Nsa(dp129603
S'description'
p129604
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p129605
sS'cpp_type'
p129606
S'bool'
p129607
sS'default'
p129608
S'0'
p129609
sS'name'
p129610
S'zero_gradient'
p129611
sS'required'
p129612
I00
sS'group_name'
p129613
NsasS'name'
p129614
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p129615
sa(dp129616
S'description'
p129617
S'Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n'
p129618
sS'subblocks'
p129619
NsS'parameters'
p129620
(lp129621
(dp129622
S'description'
p129623
S'Semiaxis a for each superellipsoid\n'
p129624
sS'cpp_type'
p129625
S'std::vector<double, std::allocator<double> >'
p129626
sS'default'
p129627
g3
sS'name'
p129628
S'as'
p129629
sS'required'
p129630
I01
sS'group_name'
p129631
Nsa(dp129632
S'description'
p129633
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129634
sS'cpp_type'
p129635
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129636
sS'default'
p129637
g3
sS'name'
p129638
S'block'
p129639
sS'required'
p129640
I00
sS'group_name'
p129641
Nsa(dp129642
S'description'
p129643
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129644
sS'cpp_type'
p129645
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129646
sS'default'
p129647
g3
sS'name'
p129648
S'boundary'
p129649
sS'required'
p129650
I00
sS'group_name'
p129651
Nsa(dp129652
S'description'
p129653
S'Semiaxis b for each superellipsoid\n'
p129654
sS'cpp_type'
p129655
S'std::vector<double, std::allocator<double> >'
p129656
sS'default'
p129657
g3
sS'name'
p129658
S'bs'
p129659
sS'required'
p129660
I01
sS'group_name'
p129661
Nsa(dp129662
S'description'
p129663
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129664
sS'cpp_type'
p129665
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129666
sS'default'
p129667
g3
sS'name'
p129668
S'control_tags'
p129669
sS'required'
p129670
I00
sS'group_name'
p129671
S'Advanced'
p129672
sa(dp129673
S'description'
p129674
S'Semiaxis c for each superellipsoid\n'
p129675
sS'cpp_type'
p129676
S'std::vector<double, std::allocator<double> >'
p129677
sS'default'
p129678
g3
sS'name'
p129679
S'cs'
p129680
sS'required'
p129681
I01
sS'group_name'
p129682
Nsa(dp129683
S'description'
p129684
S'Set the enabled status of the MooseObject.\n'
p129685
sS'cpp_type'
p129686
S'bool'
p129687
sS'default'
p129688
S'1'
p129689
sS'name'
p129690
S'enable'
p129691
sS'required'
p129692
I00
sS'group_name'
p129693
S'Advanced'
p129694
sa(dp129695
S'description'
p129696
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129697
sS'cpp_type'
p129698
S'bool'
p129699
sS'default'
p129700
S'0'
p129701
sS'name'
p129702
S'ignore_uo_dependency'
p129703
sS'required'
p129704
I00
sS'group_name'
p129705
S'Advanced'
p129706
sa(dp129707
S'description'
p129708
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129709
sS'cpp_type'
p129710
S'double'
p129711
sS'default'
p129712
S'0'
p129713
sS'name'
p129714
S'int_width'
p129715
sS'required'
p129716
I00
sS'group_name'
p129717
Nsa(dp129718
S'description'
p129719
S'The variable value inside the superellipsoid\n'
p129720
sS'cpp_type'
p129721
S'double'
p129722
sS'default'
p129723
g3
sS'name'
p129724
S'invalue'
p129725
sS'required'
p129726
I01
sS'group_name'
p129727
Nsa(dp129728
S'description'
p129729
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p129730
sS'cpp_type'
p129731
S'double'
p129732
sS'default'
p129733
g3
sS'name'
p129734
S'nestedvalue'
p129735
sS'required'
p129736
I00
sS'group_name'
p129737
Nsa(dp129738
S'description'
p129739
S'Exponent n for each superellipsoid\n'
p129740
sS'cpp_type'
p129741
S'std::vector<double, std::allocator<double> >'
p129742
sS'default'
p129743
g3
sS'name'
p129744
S'ns'
p129745
sS'required'
p129746
I01
sS'group_name'
p129747
Nsa(dp129748
S'description'
p129749
S'The variable value outside the superellipsoid\n'
p129750
sS'cpp_type'
p129751
S'double'
p129752
sS'default'
p129753
g3
sS'name'
p129754
S'outvalue'
p129755
sS'required'
p129756
I01
sS'group_name'
p129757
Nsa(dp129758
S'description'
p129759
S'Seed value for the random number generator\n'
p129760
sS'cpp_type'
p129761
S'unsigned int'
p129762
sS'default'
p129763
S'12345'
p129764
sS'name'
p129765
S'rand_seed'
p129766
sS'required'
p129767
I00
sS'group_name'
p129768
Nsa(dp129769
S'description'
p129770
g3
sS'cpp_type'
p129771
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129772
sS'default'
p129773
S'SpecifiedSmoothSuperellipsoidIC'
p129774
sS'name'
p129775
S'type'
p129776
sS'required'
p129777
I00
sS'group_name'
p129778
Nsa(dp129779
S'description'
p129780
S'The variable this initial condition is supposed to provide values for.\n'
p129781
sS'cpp_type'
p129782
S'VariableName'
p129783
sS'default'
p129784
g3
sS'name'
p129785
S'variable'
p129786
sS'required'
p129787
I01
sS'group_name'
p129788
Nsa(dp129789
S'description'
p129790
S'The x-coordinate for each superellipsoid center\n'
p129791
sS'cpp_type'
p129792
S'std::vector<double, std::allocator<double> >'
p129793
sS'default'
p129794
g3
sS'name'
p129795
S'x_positions'
p129796
sS'required'
p129797
I01
sS'group_name'
p129798
Nsa(dp129799
S'description'
p129800
S'The y-coordinate for each superellipsoid center\n'
p129801
sS'cpp_type'
p129802
S'std::vector<double, std::allocator<double> >'
p129803
sS'default'
p129804
g3
sS'name'
p129805
S'y_positions'
p129806
sS'required'
p129807
I01
sS'group_name'
p129808
Nsa(dp129809
S'description'
p129810
S'The z-coordinate for each superellipsoid center\n'
p129811
sS'cpp_type'
p129812
S'std::vector<double, std::allocator<double> >'
p129813
sS'default'
p129814
g3
sS'name'
p129815
S'z_positions'
p129816
sS'required'
p129817
I01
sS'group_name'
p129818
Nsa(dp129819
S'description'
p129820
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p129821
sS'cpp_type'
p129822
S'bool'
p129823
sS'default'
p129824
S'0'
p129825
sS'name'
p129826
S'zero_gradient'
p129827
sS'required'
p129828
I00
sS'group_name'
p129829
NsasS'name'
p129830
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothSuperellipsoidIC'
p129831
sa(dp129832
S'description'
p129833
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p129834
sS'subblocks'
p129835
NsS'parameters'
p129836
(lp129837
(dp129838
S'description'
p129839
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129840
sS'cpp_type'
p129841
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129842
sS'default'
p129843
g3
sS'name'
p129844
S'block'
p129845
sS'required'
p129846
I00
sS'group_name'
p129847
Nsa(dp129848
S'description'
p129849
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129850
sS'cpp_type'
p129851
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129852
sS'default'
p129853
g3
sS'name'
p129854
S'boundary'
p129855
sS'required'
p129856
I00
sS'group_name'
p129857
Nsa(dp129858
S'description'
p129859
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129860
sS'cpp_type'
p129861
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129862
sS'default'
p129863
g3
sS'name'
p129864
S'control_tags'
p129865
sS'required'
p129866
I00
sS'group_name'
p129867
S'Advanced'
p129868
sa(dp129869
S'description'
p129870
S'Set the enabled status of the MooseObject.\n'
p129871
sS'cpp_type'
p129872
S'bool'
p129873
sS'default'
p129874
S'1'
p129875
sS'name'
p129876
S'enable'
p129877
sS'required'
p129878
I00
sS'group_name'
p129879
S'Advanced'
p129880
sa(dp129881
S'description'
p129882
S'The z coordinate of the circle center\n'
p129883
sS'cpp_type'
p129884
S'double'
p129885
sS'default'
p129886
g3
sS'name'
p129887
S'height'
p129888
sS'required'
p129889
I01
sS'group_name'
p129890
Nsa(dp129891
S'description'
p129892
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129893
sS'cpp_type'
p129894
S'bool'
p129895
sS'default'
p129896
S'0'
p129897
sS'name'
p129898
S'ignore_uo_dependency'
p129899
sS'required'
p129900
I00
sS'group_name'
p129901
S'Advanced'
p129902
sa(dp129903
S'description'
p129904
S'The variable value inside the circle\n'
p129905
sS'cpp_type'
p129906
S'double'
p129907
sS'default'
p129908
g3
sS'name'
p129909
S'invalue'
p129910
sS'required'
p129911
I01
sS'group_name'
p129912
Nsa(dp129913
S'description'
p129914
S'The variable value outside the circle\n'
p129915
sS'cpp_type'
p129916
S'double'
p129917
sS'default'
p129918
g3
sS'name'
p129919
S'outvalue'
p129920
sS'required'
p129921
I01
sS'group_name'
p129922
Nsa(dp129923
S'description'
p129924
g3
sS'cpp_type'
p129925
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129926
sS'default'
p129927
S'ThumbIC'
p129928
sS'name'
p129929
S'type'
p129930
sS'required'
p129931
I00
sS'group_name'
p129932
Nsa(dp129933
S'description'
p129934
S'The variable this initial condition is supposed to provide values for.\n'
p129935
sS'cpp_type'
p129936
S'VariableName'
p129937
sS'default'
p129938
g3
sS'name'
p129939
S'variable'
p129940
sS'required'
p129941
I01
sS'group_name'
p129942
Nsa(dp129943
S'description'
p129944
S'The y coordinate of the circle center\n'
p129945
sS'cpp_type'
p129946
S'double'
p129947
sS'default'
p129948
g3
sS'name'
p129949
S'width'
p129950
sS'required'
p129951
I01
sS'group_name'
p129952
Nsa(dp129953
S'description'
p129954
S'The x coordinate of the circle center\n'
p129955
sS'cpp_type'
p129956
S'double'
p129957
sS'default'
p129958
g3
sS'name'
p129959
S'xcoord'
p129960
sS'required'
p129961
I01
sS'group_name'
p129962
NsasS'name'
p129963
S'/Variables/*/InitialCondition/<type>/ThumbIC'
p129964
sa(dp129965
S'description'
p129966
S'Tricrystal with two circles/bubbles\n'
p129967
sS'subblocks'
p129968
NsS'parameters'
p129969
(lp129970
(dp129971
S'description'
p129972
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129973
sS'cpp_type'
p129974
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129975
sS'default'
p129976
g3
sS'name'
p129977
S'block'
p129978
sS'required'
p129979
I00
sS'group_name'
p129980
Nsa(dp129981
S'description'
p129982
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129983
sS'cpp_type'
p129984
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129985
sS'default'
p129986
g3
sS'name'
p129987
S'boundary'
p129988
sS'required'
p129989
I00
sS'group_name'
p129990
Nsa(dp129991
S'description'
p129992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129993
sS'cpp_type'
p129994
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129995
sS'default'
p129996
g3
sS'name'
p129997
S'control_tags'
p129998
sS'required'
p129999
I00
sS'group_name'
p130000
S'Advanced'
p130001
sa(dp130002
S'description'
p130003
S'Set the enabled status of the MooseObject.\n'
p130004
sS'cpp_type'
p130005
S'bool'
p130006
sS'default'
p130007
S'1'
p130008
sS'name'
p130009
S'enable'
p130010
sS'required'
p130011
I00
sS'group_name'
p130012
S'Advanced'
p130013
sa(dp130014
S'description'
p130015
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130016
sS'cpp_type'
p130017
S'bool'
p130018
sS'default'
p130019
S'0'
p130020
sS'name'
p130021
S'ignore_uo_dependency'
p130022
sS'required'
p130023
I00
sS'group_name'
p130024
S'Advanced'
p130025
sa(dp130026
S'description'
p130027
S'Index for the current grain order parameter\n'
p130028
sS'cpp_type'
p130029
S'unsigned int'
p130030
sS'default'
p130031
g3
sS'name'
p130032
S'op_index'
p130033
sS'required'
p130034
I01
sS'group_name'
p130035
Nsa(dp130036
S'description'
p130037
S'Number of grain order parameters\n'
p130038
sS'cpp_type'
p130039
S'unsigned int'
p130040
sS'default'
p130041
g3
sS'name'
p130042
S'op_num'
p130043
sS'required'
p130044
I01
sS'group_name'
p130045
Nsa(dp130046
S'description'
p130047
g3
sS'cpp_type'
p130048
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130049
sS'default'
p130050
S'Tricrystal2CircleGrainsIC'
p130051
sS'name'
p130052
S'type'
p130053
sS'required'
p130054
I00
sS'group_name'
p130055
Nsa(dp130056
S'description'
p130057
S'The variable this initial condition is supposed to provide values for.\n'
p130058
sS'cpp_type'
p130059
S'VariableName'
p130060
sS'default'
p130061
g3
sS'name'
p130062
S'variable'
p130063
sS'required'
p130064
I01
sS'group_name'
p130065
NsasS'name'
p130066
S'/Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p130067
sa(dp130068
S'description'
p130069
S'Tricrystal with a triple junction\n'
p130070
sS'subblocks'
p130071
NsS'parameters'
p130072
(lp130073
(dp130074
S'description'
p130075
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130076
sS'cpp_type'
p130077
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130078
sS'default'
p130079
g3
sS'name'
p130080
S'block'
p130081
sS'required'
p130082
I00
sS'group_name'
p130083
Nsa(dp130084
S'description'
p130085
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130086
sS'cpp_type'
p130087
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130088
sS'default'
p130089
g3
sS'name'
p130090
S'boundary'
p130091
sS'required'
p130092
I00
sS'group_name'
p130093
Nsa(dp130094
S'description'
p130095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130096
sS'cpp_type'
p130097
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130098
sS'default'
p130099
g3
sS'name'
p130100
S'control_tags'
p130101
sS'required'
p130102
I00
sS'group_name'
p130103
S'Advanced'
p130104
sa(dp130105
S'description'
p130106
S'Set the enabled status of the MooseObject.\n'
p130107
sS'cpp_type'
p130108
S'bool'
p130109
sS'default'
p130110
S'1'
p130111
sS'name'
p130112
S'enable'
p130113
sS'required'
p130114
I00
sS'group_name'
p130115
S'Advanced'
p130116
sa(dp130117
S'description'
p130118
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130119
sS'cpp_type'
p130120
S'bool'
p130121
sS'default'
p130122
S'0'
p130123
sS'name'
p130124
S'ignore_uo_dependency'
p130125
sS'required'
p130126
I00
sS'group_name'
p130127
S'Advanced'
p130128
sa(dp130129
S'description'
p130130
S'The point where the triple junction is located. Default is the center of the mesh\n'
p130131
sS'cpp_type'
p130132
S'libMesh::Point'
p130133
sS'default'
p130134
g3
sS'name'
p130135
S'junction'
p130136
sS'required'
p130137
I00
sS'group_name'
p130138
Nsa(dp130139
S'description'
p130140
S'Index for the current grain order parameter\n'
p130141
sS'cpp_type'
p130142
S'unsigned int'
p130143
sS'default'
p130144
g3
sS'name'
p130145
S'op_index'
p130146
sS'required'
p130147
I01
sS'group_name'
p130148
Nsa(dp130149
S'description'
p130150
S'Number of grain order parameters\n'
p130151
sS'cpp_type'
p130152
S'unsigned int'
p130153
sS'default'
p130154
g3
sS'name'
p130155
S'op_num'
p130156
sS'required'
p130157
I01
sS'group_name'
p130158
Nsa(dp130159
S'description'
p130160
S'Angle of first grain at triple junction in degrees\n'
p130161
sS'cpp_type'
p130162
S'double'
p130163
sS'default'
p130164
S'135'
p130165
sS'name'
p130166
S'theta1'
p130167
sS'required'
p130168
I00
sS'group_name'
p130169
Nsa(dp130170
S'description'
p130171
S'Angle of second grain at triple junction in degrees\n'
p130172
sS'cpp_type'
p130173
S'double'
p130174
sS'default'
p130175
S'135'
p130176
sS'name'
p130177
S'theta2'
p130178
sS'required'
p130179
I00
sS'group_name'
p130180
Nsa(dp130181
S'description'
p130182
g3
sS'cpp_type'
p130183
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130184
sS'default'
p130185
S'TricrystalTripleJunctionIC'
p130186
sS'name'
p130187
S'type'
p130188
sS'required'
p130189
I00
sS'group_name'
p130190
Nsa(dp130191
S'description'
p130192
S'The variable this initial condition is supposed to provide values for.\n'
p130193
sS'cpp_type'
p130194
S'VariableName'
p130195
sS'default'
p130196
g3
sS'name'
p130197
S'variable'
p130198
sS'required'
p130199
I01
sS'group_name'
p130200
NsasS'name'
p130201
S'/Variables/*/InitialCondition/<type>/TricrystalTripleJunctionIC'
p130202
sasS'parameters'
p130203
NsS'name'
p130204
S'/Variables/*/InitialCondition/<type>'
p130205
sasS'parameters'
p130206
(lp130207
(dp130208
S'description'
p130209
S'A string representing the Moose Object that will be built by this Action\n'
p130210
sS'cpp_type'
p130211
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130212
sS'default'
p130213
g3
sS'name'
p130214
S'type'
p130215
sS'required'
p130216
I01
sS'group_name'
p130217
NsasS'name'
p130218
S'/Variables/*/InitialCondition'
p130219
sasS'parameters'
p130220
(lp130221
(dp130222
S'description'
p130223
S'The block id where this variable lives\n'
p130224
sS'cpp_type'
p130225
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130226
sS'default'
p130227
g3
sS'name'
p130228
S'block'
p130229
sS'required'
p130230
I00
sS'group_name'
p130231
Nsa(dp130232
S'description'
p130233
S'True to make this variable an eigen variable\n'
p130234
sS'cpp_type'
p130235
S'bool'
p130236
sS'default'
p130237
S'0'
p130238
sS'name'
p130239
S'eigen'
p130240
sS'required'
p130241
I00
sS'group_name'
p130242
S'Advanced'
p130243
sa(dp130244
S'name'
p130245
S'family'
p130246
sS'cpp_type'
p130247
S'MooseEnum'
p130248
sS'default'
p130249
S'LAGRANGE'
p130250
sS'description'
p130251
S'Specifies the family of FE shape functions to use for this variable\n'
p130252
sS'required'
p130253
I00
sS'options'
p130254
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p130255
sS'group_name'
p130256
Nsa(dp130257
S'description'
p130258
S'Specifies the initial condition for this variable\n'
p130259
sS'cpp_type'
p130260
S'double'
p130261
sS'default'
p130262
g3
sS'name'
p130263
S'initial_condition'
p130264
sS'required'
p130265
I00
sS'group_name'
p130266
Nsa(dp130267
S'name'
p130268
S'order'
p130269
sS'cpp_type'
p130270
S'MooseEnum'
p130271
sS'default'
p130272
S'FIRST'
p130273
sS'description'
p130274
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p130275
sS'required'
p130276
I00
sS'options'
p130277
S'CONSTANT FIRST SECOND THIRD FOURTH'
p130278
sS'group_name'
p130279
Nsa(dp130280
S'description'
p130281
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p130282
sS'cpp_type'
p130283
S'std::vector<OutputName, std::allocator<OutputName> >'
p130284
sS'default'
p130285
g3
sS'name'
p130286
S'outputs'
p130287
sS'required'
p130288
I00
sS'group_name'
p130289
S'Advanced'
p130290
sa(dp130291
S'description'
p130292
S'Specifies a scaling factor to apply to this variable\n'
p130293
sS'cpp_type'
p130294
S'double'
p130295
sS'default'
p130296
S'1'
p130297
sS'name'
p130298
S'scaling'
p130299
sS'required'
p130300
I00
sS'group_name'
p130301
S'Advanced'
p130302
sa(dp130303
S'description'
p130304
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p130305
sS'cpp_type'
p130306
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130307
sS'default'
p130308
S'LATEST'
p130309
sS'name'
p130310
S'initial_from_file_timestep'
p130311
sS'required'
p130312
I00
sS'group_name'
p130313
S'Initial From File'
p130314
sa(dp130315
S'description'
p130316
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p130317
sS'cpp_type'
p130318
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130319
sS'default'
p130320
g3
sS'name'
p130321
S'initial_from_file_var'
p130322
sS'required'
p130323
I00
sS'group_name'
p130324
S'Initial From File'
p130325
sasS'name'
p130326
S'/Variables/*'
p130327
sa(dp130328
S'description'
p130329
g3
sS'subblocks'
p130330
NsS'parameters'
p130331
(lp130332
(dp130333
S'description'
p130334
S'Base name for the complex L variables\n'
p130335
sS'cpp_type'
p130336
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130337
sS'default'
p130338
g3
sS'name'
p130339
S'L_name_base'
p130340
sS'required'
p130341
I01
sS'group_name'
p130342
Nsa(dp130343
S'name'
p130344
S'family'
p130345
sS'cpp_type'
p130346
S'MooseEnum'
p130347
sS'default'
p130348
S'LAGRANGE'
p130349
sS'description'
p130350
S'Specifies the family of FE shape functions to use for the L variables\n'
p130351
sS'required'
p130352
I00
sS'options'
p130353
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p130354
sS'group_name'
p130355
Nsa(dp130356
S'description'
p130357
S'Name of atomic density variable\n'
p130358
sS'cpp_type'
p130359
S'AuxVariableName'
p130360
sS'default'
p130361
g3
sS'name'
p130362
S'n_name'
p130363
sS'required'
p130364
I01
sS'group_name'
p130365
Nsa(dp130366
S'description'
p130367
S'specifies the number of complex L variables will be solved for\n'
p130368
sS'cpp_type'
p130369
S'unsigned int'
p130370
sS'default'
p130371
g3
sS'name'
p130372
S'num_L'
p130373
sS'required'
p130374
I01
sS'group_name'
p130375
Nsa(dp130376
S'name'
p130377
S'order'
p130378
sS'cpp_type'
p130379
S'MooseEnum'
p130380
sS'default'
p130381
S'FIRST'
p130382
sS'description'
p130383
S'Specifies the order of the FE shape function to use for the L variables\n'
p130384
sS'required'
p130385
I00
sS'options'
p130386
S'CONSTANT FIRST SECOND THIRD FOURTH'
p130387
sS'group_name'
p130388
Nsa(dp130389
S'description'
p130390
S'Specifies a scaling factor to apply to the L variables\n'
p130391
sS'cpp_type'
p130392
S'double'
p130393
sS'default'
p130394
S'1'
p130395
sS'name'
p130396
S'scaling'
p130397
sS'required'
p130398
I00
sS'group_name'
p130399
Nsa(dp130400
S'description'
p130401
S'This is the filename of the sub.i file\n'
p130402
sS'cpp_type'
p130403
S'std::vector<FileName, std::allocator<FileName> >'
p130404
sS'default'
p130405
g3
sS'name'
p130406
S'sub_filenames'
p130407
sS'required'
p130408
I01
sS'group_name'
p130409
NsasS'name'
p130410
S'/Variables/CHPFCRFFSplitVariables'
p130411
sa(dp130412
S'description'
p130413
g3
sS'subblocks'
p130414
NsS'parameters'
p130415
(lp130416
(dp130417
S'description'
p130418
S'Base name for the complex L variables\n'
p130419
sS'cpp_type'
p130420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130421
sS'default'
p130422
g3
sS'name'
p130423
S'L_name_base'
p130424
sS'required'
p130425
I01
sS'group_name'
p130426
Nsa(dp130427
S'name'
p130428
S'family'
p130429
sS'cpp_type'
p130430
S'MooseEnum'
p130431
sS'default'
p130432
S'LAGRANGE'
p130433
sS'description'
p130434
S'Specifies the family of FE shape functions to use for the L variables\n'
p130435
sS'required'
p130436
I00
sS'options'
p130437
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p130438
sS'group_name'
p130439
Nsa(dp130440
S'description'
p130441
S'specifies the number of complex L variables will be solved for\n'
p130442
sS'cpp_type'
p130443
S'unsigned int'
p130444
sS'default'
p130445
g3
sS'name'
p130446
S'num_L'
p130447
sS'required'
p130448
I01
sS'group_name'
p130449
Nsa(dp130450
S'name'
p130451
S'order'
p130452
sS'cpp_type'
p130453
S'MooseEnum'
p130454
sS'default'
p130455
S'FIRST'
p130456
sS'description'
p130457
S'Specifies the order of the FE shape function to use for the L variables\n'
p130458
sS'required'
p130459
I00
sS'options'
p130460
S'CONSTANT FIRST SECOND THIRD FOURTH'
p130461
sS'group_name'
p130462
Nsa(dp130463
S'description'
p130464
S'Specifies a scaling factor to apply to the L variables\n'
p130465
sS'cpp_type'
p130466
S'double'
p130467
sS'default'
p130468
S'1'
p130469
sS'name'
p130470
S'scaling'
p130471
sS'required'
p130472
I00
sS'group_name'
p130473
NsasS'name'
p130474
S'/Variables/HHPFCRFFSplitVariables'
p130475
sa(dp130476
S'description'
p130477
g3
sS'subblocks'
p130478
NsS'parameters'
p130479
(lp130480
(dp130481
S'description'
p130482
S'Base name for the complex L variables\n'
p130483
sS'cpp_type'
p130484
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130485
sS'default'
p130486
g3
sS'name'
p130487
S'L_name_base'
p130488
sS'required'
p130489
I01
sS'group_name'
p130490
Nsa(dp130491
S'name'
p130492
S'family'
p130493
sS'cpp_type'
p130494
S'MooseEnum'
p130495
sS'default'
p130496
S'LAGRANGE'
p130497
sS'description'
p130498
S'Specifies the family of FE shape functions to use for the L variables\n'
p130499
sS'required'
p130500
I00
sS'options'
p130501
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p130502
sS'group_name'
p130503
Nsa(dp130504
S'description'
p130505
S'specifies the number of complex L variables will be solved for\n'
p130506
sS'cpp_type'
p130507
S'unsigned int'
p130508
sS'default'
p130509
g3
sS'name'
p130510
S'num_L'
p130511
sS'required'
p130512
I01
sS'group_name'
p130513
Nsa(dp130514
S'name'
p130515
S'order'
p130516
sS'cpp_type'
p130517
S'MooseEnum'
p130518
sS'default'
p130519
S'FIRST'
p130520
sS'description'
p130521
S'Specifies the order of the FE shape function to use for the L variables\n'
p130522
sS'required'
p130523
I00
sS'options'
p130524
S'CONSTANT FIRST SECOND THIRD FOURTH'
p130525
sS'group_name'
p130526
Nsa(dp130527
S'description'
p130528
S'Specifies a scaling factor to apply to the L variables\n'
p130529
sS'cpp_type'
p130530
S'double'
p130531
sS'default'
p130532
S'1'
p130533
sS'name'
p130534
S'scaling'
p130535
sS'required'
p130536
I00
sS'group_name'
p130537
NsasS'name'
p130538
S'/Variables/PFCRFFVariables'
p130539
sa(dp130540
S'description'
p130541
g3
sS'subblocks'
p130542
NsS'parameters'
p130543
(lp130544
(dp130545
S'description'
p130546
S'Specifies the family of FE shape functions to use for this variable\n'
p130547
sS'cpp_type'
p130548
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130549
sS'default'
p130550
S'LAGRANGE'
p130551
sS'name'
p130552
S'family'
p130553
sS'required'
p130554
I00
sS'group_name'
p130555
Nsa(dp130556
S'description'
p130557
S'specifies the number of order parameters to create\n'
p130558
sS'cpp_type'
p130559
S'unsigned int'
p130560
sS'default'
p130561
g3
sS'name'
p130562
S'op_num'
p130563
sS'required'
p130564
I01
sS'group_name'
p130565
Nsa(dp130566
S'description'
p130567
S'Specifies the order of the FE shape function to use for this variable\n'
p130568
sS'cpp_type'
p130569
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130570
sS'default'
p130571
S'FIRST'
p130572
sS'name'
p130573
S'order'
p130574
sS'required'
p130575
I00
sS'group_name'
p130576
Nsa(dp130577
S'description'
p130578
S'Specifies a scaling factor to apply to this variable\n'
p130579
sS'cpp_type'
p130580
S'double'
p130581
sS'default'
p130582
S'1'
p130583
sS'name'
p130584
S'scaling'
p130585
sS'required'
p130586
I00
sS'group_name'
p130587
Nsa(dp130588
S'description'
p130589
S'specifies the base name of the variables\n'
p130590
sS'cpp_type'
p130591
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130592
sS'default'
p130593
g3
sS'name'
p130594
S'var_name_base'
p130595
sS'required'
p130596
I01
sS'group_name'
p130597
NsasS'name'
p130598
S'/Variables/PolycrystalVariables'
p130599
sasS'parameters'
p130600
NsS'name'
p130601
S'/Variables'
p130602
sa(dp130603
S'description'
p130604
g3
sS'subblocks'
p130605
(lp130606
(dp130607
S'description'
p130608
g3
sS'subblocks'
p130609
NsS'parameters'
p130610
(lp130611
(dp130612
S'description'
p130613
S'A string representing the Moose Object that will be built by this Action\n'
p130614
sS'cpp_type'
p130615
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130616
sS'default'
p130617
g3
sS'name'
p130618
S'type'
p130619
sS'required'
p130620
I01
sS'group_name'
p130621
NsasS'name'
p130622
S'/VectorPostprocessors/*'
p130623
sa(dp130624
S'description'
p130625
g3
sS'subblocks'
p130626
NsS'parameters'
p130627
(lp130628
(dp130629
S'description'
p130630
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130631
sS'cpp_type'
p130632
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130633
sS'default'
p130634
g3
sS'name'
p130635
S'control_tags'
p130636
sS'required'
p130637
I00
sS'group_name'
p130638
S'Advanced'
p130639
sa(dp130640
S'description'
p130641
S'Set the enabled status of the MooseObject.\n'
p130642
sS'cpp_type'
p130643
S'bool'
p130644
sS'default'
p130645
S'1'
p130646
sS'name'
p130647
S'enable'
p130648
sS'required'
p130649
I00
sS'group_name'
p130650
S'Advanced'
p130651
sa(dp130652
S'name'
p130653
S'execute_on'
p130654
sS'cpp_type'
p130655
S'MultiMooseEnum'
p130656
sS'default'
p130657
S'TIMESTEP_END'
p130658
sS'description'
p130659
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130660
sS'required'
p130661
I00
sS'options'
p130662
S'none initial linear nonlinear timestep_end timestep_begin custom'
p130663
sS'group_name'
p130664
Nsa(dp130665
S'description'
p130666
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p130667
sS'cpp_type'
p130668
S'std::vector<OutputName, std::allocator<OutputName> >'
p130669
sS'default'
p130670
g3
sS'name'
p130671
S'outputs'
p130672
sS'required'
p130673
I00
sS'group_name'
p130674
S'Advanced'
p130675
sa(dp130676
S'description'
p130677
g3
sS'cpp_type'
p130678
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130679
sS'default'
p130680
S'ConstantVectorPostprocessor'
p130681
sS'name'
p130682
S'type'
p130683
sS'required'
p130684
I00
sS'group_name'
p130685
Nsa(dp130686
S'description'
p130687
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130688
sS'cpp_type'
p130689
S'bool'
p130690
sS'default'
p130691
S'0'
p130692
sS'name'
p130693
S'use_displaced_mesh'
p130694
sS'required'
p130695
I00
sS'group_name'
p130696
S'Advanced'
p130697
sa(dp130698
S'description'
p130699
S'The vector value this object will have.\n'
p130700
sS'cpp_type'
p130701
S'std::vector<double, std::allocator<double> >'
p130702
sS'default'
p130703
g3
sS'name'
p130704
S'value'
p130705
sS'required'
p130706
I01
sS'group_name'
p130707
NsasS'name'
p130708
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p130709
sa(dp130710
S'description'
p130711
g3
sS'subblocks'
p130712
NsS'parameters'
p130713
(lp130714
(dp130715
S'description'
p130716
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130717
sS'cpp_type'
p130718
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130719
sS'default'
p130720
g3
sS'name'
p130721
S'control_tags'
p130722
sS'required'
p130723
I00
sS'group_name'
p130724
S'Advanced'
p130725
sa(dp130726
S'description'
p130727
S'Set the enabled status of the MooseObject.\n'
p130728
sS'cpp_type'
p130729
S'bool'
p130730
sS'default'
p130731
S'1'
p130732
sS'name'
p130733
S'enable'
p130734
sS'required'
p130735
I00
sS'group_name'
p130736
S'Advanced'
p130737
sa(dp130738
S'name'
p130739
S'execute_on'
p130740
sS'cpp_type'
p130741
S'MultiMooseEnum'
p130742
sS'default'
p130743
S'TIMESTEP_END'
p130744
sS'description'
p130745
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130746
sS'required'
p130747
I00
sS'options'
p130748
S'none initial linear nonlinear timestep_end timestep_begin custom'
p130749
sS'group_name'
p130750
Nsa(dp130751
S'description'
p130752
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p130753
sS'cpp_type'
p130754
S'std::vector<OutputName, std::allocator<OutputName> >'
p130755
sS'default'
p130756
g3
sS'name'
p130757
S'outputs'
p130758
sS'required'
p130759
I00
sS'group_name'
p130760
S'Advanced'
p130761
sa(dp130762
S'description'
p130763
g3
sS'cpp_type'
p130764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130765
sS'default'
p130766
S'Eigenvalues'
p130767
sS'name'
p130768
S'type'
p130769
sS'required'
p130770
I00
sS'group_name'
p130771
Nsa(dp130772
S'description'
p130773
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130774
sS'cpp_type'
p130775
S'bool'
p130776
sS'default'
p130777
S'0'
p130778
sS'name'
p130779
S'use_displaced_mesh'
p130780
sS'required'
p130781
I00
sS'group_name'
p130782
S'Advanced'
p130783
sasS'name'
p130784
S'/VectorPostprocessors/Eigenvalues'
p130785
sa(dp130786
S'description'
p130787
g3
sS'subblocks'
p130788
NsS'parameters'
p130789
(lp130790
(dp130791
S'description'
p130792
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130793
sS'cpp_type'
p130794
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130795
sS'default'
p130796
g3
sS'name'
p130797
S'control_tags'
p130798
sS'required'
p130799
I00
sS'group_name'
p130800
S'Advanced'
p130801
sa(dp130802
S'description'
p130803
S'Set the enabled status of the MooseObject.\n'
p130804
sS'cpp_type'
p130805
S'bool'
p130806
sS'default'
p130807
S'1'
p130808
sS'name'
p130809
S'enable'
p130810
sS'required'
p130811
I00
sS'group_name'
p130812
S'Advanced'
p130813
sa(dp130814
S'description'
p130815
S'The end of the line\n'
p130816
sS'cpp_type'
p130817
S'libMesh::Point'
p130818
sS'default'
p130819
g3
sS'name'
p130820
S'end'
p130821
sS'required'
p130822
I01
sS'group_name'
p130823
Nsa(dp130824
S'name'
p130825
S'execute_on'
p130826
sS'cpp_type'
p130827
S'MultiMooseEnum'
p130828
sS'default'
p130829
S'TIMESTEP_END'
p130830
sS'description'
p130831
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130832
sS'required'
p130833
I00
sS'options'
p130834
S'none initial linear nonlinear timestep_end timestep_begin custom'
p130835
sS'group_name'
p130836
Nsa(dp130837
S'description'
p130838
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p130839
sS'cpp_type'
p130840
S'std::vector<OutputName, std::allocator<OutputName> >'
p130841
sS'default'
p130842
g3
sS'name'
p130843
S'outputs'
p130844
sS'required'
p130845
I00
sS'group_name'
p130846
S'Advanced'
p130847
sa(dp130848
S'description'
p130849
S'The beginning of the line\n'
p130850
sS'cpp_type'
p130851
S'libMesh::Point'
p130852
sS'default'
p130853
g3
sS'name'
p130854
S'start'
p130855
sS'required'
p130856
I01
sS'group_name'
p130857
Nsa(dp130858
S'description'
p130859
g3
sS'cpp_type'
p130860
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130861
sS'default'
p130862
S'ElementsAlongLine'
p130863
sS'name'
p130864
S'type'
p130865
sS'required'
p130866
I00
sS'group_name'
p130867
Nsa(dp130868
S'description'
p130869
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130870
sS'cpp_type'
p130871
S'bool'
p130872
sS'default'
p130873
S'0'
p130874
sS'name'
p130875
S'use_displaced_mesh'
p130876
sS'required'
p130877
I00
sS'group_name'
p130878
S'Advanced'
p130879
sasS'name'
p130880
S'/VectorPostprocessors/ElementsAlongLine'
p130881
sa(dp130882
S'description'
p130883
g3
sS'subblocks'
p130884
NsS'parameters'
p130885
(lp130886
(dp130887
S'description'
p130888
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130889
sS'cpp_type'
p130890
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130891
sS'default'
p130892
g3
sS'name'
p130893
S'control_tags'
p130894
sS'required'
p130895
I00
sS'group_name'
p130896
S'Advanced'
p130897
sa(dp130898
S'description'
p130899
S'Set the enabled status of the MooseObject.\n'
p130900
sS'cpp_type'
p130901
S'bool'
p130902
sS'default'
p130903
S'1'
p130904
sS'name'
p130905
S'enable'
p130906
sS'required'
p130907
I00
sS'group_name'
p130908
S'Advanced'
p130909
sa(dp130910
S'name'
p130911
S'execute_on'
p130912
sS'cpp_type'
p130913
S'MultiMooseEnum'
p130914
sS'default'
p130915
S'TIMESTEP_END'
p130916
sS'description'
p130917
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130918
sS'required'
p130919
I00
sS'options'
p130920
S'none initial linear nonlinear timestep_end timestep_begin custom'
p130921
sS'group_name'
p130922
Nsa(dp130923
S'description'
p130924
S'Normal vector to the plane\n'
p130925
sS'cpp_type'
p130926
S'libMesh::Point'
p130927
sS'default'
p130928
g3
sS'name'
p130929
S'normal'
p130930
sS'required'
p130931
I01
sS'group_name'
p130932
Nsa(dp130933
S'description'
p130934
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p130935
sS'cpp_type'
p130936
S'std::vector<OutputName, std::allocator<OutputName> >'
p130937
sS'default'
p130938
g3
sS'name'
p130939
S'outputs'
p130940
sS'required'
p130941
I00
sS'group_name'
p130942
S'Advanced'
p130943
sa(dp130944
S'description'
p130945
S'Point in the plane\n'
p130946
sS'cpp_type'
p130947
S'libMesh::Point'
p130948
sS'default'
p130949
g3
sS'name'
p130950
S'point'
p130951
sS'required'
p130952
I01
sS'group_name'
p130953
Nsa(dp130954
S'description'
p130955
g3
sS'cpp_type'
p130956
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130957
sS'default'
p130958
S'ElementsAlongPlane'
p130959
sS'name'
p130960
S'type'
p130961
sS'required'
p130962
I00
sS'group_name'
p130963
Nsa(dp130964
S'description'
p130965
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130966
sS'cpp_type'
p130967
S'bool'
p130968
sS'default'
p130969
S'0'
p130970
sS'name'
p130971
S'use_displaced_mesh'
p130972
sS'required'
p130973
I00
sS'group_name'
p130974
S'Advanced'
p130975
sasS'name'
p130976
S'/VectorPostprocessors/ElementsAlongPlane'
p130977
sa(dp130978
S'description'
p130979
S'Provide updated euler angles after rigid body rotation of the grains.\n'
p130980
sS'subblocks'
p130981
NsS'parameters'
p130982
(lp130983
(dp130984
S'description'
p130985
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130986
sS'cpp_type'
p130987
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130988
sS'default'
p130989
g3
sS'name'
p130990
S'control_tags'
p130991
sS'required'
p130992
I00
sS'group_name'
p130993
S'Advanced'
p130994
sa(dp130995
S'description'
p130996
S'Set the enabled status of the MooseObject.\n'
p130997
sS'cpp_type'
p130998
S'bool'
p130999
sS'default'
p131000
S'1'
p131001
sS'name'
p131002
S'enable'
p131003
sS'required'
p131004
I00
sS'group_name'
p131005
S'Advanced'
p131006
sa(dp131007
S'description'
p131008
S'Name of Euler angle provider user object\n'
p131009
sS'cpp_type'
p131010
S'UserObjectName'
p131011
sS'default'
p131012
g3
sS'name'
p131013
S'euler_angle_updater'
p131014
sS'required'
p131015
I00
sS'group_name'
p131016
Nsa(dp131017
S'name'
p131018
S'execute_on'
p131019
sS'cpp_type'
p131020
S'MultiMooseEnum'
p131021
sS'default'
p131022
S'TIMESTEP_END'
p131023
sS'description'
p131024
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131025
sS'required'
p131026
I00
sS'options'
p131027
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131028
sS'group_name'
p131029
Nsa(dp131030
S'description'
p131031
S'Name of Euler angle provider user object\n'
p131032
sS'cpp_type'
p131033
S'UserObjectName'
p131034
sS'default'
p131035
g3
sS'name'
p131036
S'grain_torques_object'
p131037
sS'required'
p131038
I01
sS'group_name'
p131039
Nsa(dp131040
S'description'
p131041
S'The FeatureFloodCount UserObject to get values from.\n'
p131042
sS'cpp_type'
p131043
S'UserObjectName'
p131044
sS'default'
p131045
g3
sS'name'
p131046
S'grain_tracker_object'
p131047
sS'required'
p131048
I01
sS'group_name'
p131049
Nsa(dp131050
S'description'
p131051
S'The feature volume VectorPostprocessorValue.\n'
p131052
sS'cpp_type'
p131053
S'VectorPostprocessorName'
p131054
sS'default'
p131055
g3
sS'name'
p131056
S'grain_volumes'
p131057
sS'required'
p131058
I01
sS'group_name'
p131059
Nsa(dp131060
S'description'
p131061
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131062
sS'cpp_type'
p131063
S'std::vector<OutputName, std::allocator<OutputName> >'
p131064
sS'default'
p131065
g3
sS'name'
p131066
S'outputs'
p131067
sS'required'
p131068
I00
sS'group_name'
p131069
S'Advanced'
p131070
sa(dp131071
S'description'
p131072
S'constant value characterizing grain rotation\n'
p131073
sS'cpp_type'
p131074
S'double'
p131075
sS'default'
p131076
S'1'
p131077
sS'name'
p131078
S'rotation_constant'
p131079
sS'required'
p131080
I00
sS'group_name'
p131081
Nsa(dp131082
S'description'
p131083
g3
sS'cpp_type'
p131084
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131085
sS'default'
p131086
S'EulerAngleUpdaterCheck'
p131087
sS'name'
p131088
S'type'
p131089
sS'required'
p131090
I00
sS'group_name'
p131091
Nsa(dp131092
S'description'
p131093
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131094
sS'cpp_type'
p131095
S'bool'
p131096
sS'default'
p131097
S'0'
p131098
sS'name'
p131099
S'use_displaced_mesh'
p131100
sS'required'
p131101
I00
sS'group_name'
p131102
S'Advanced'
p131103
sasS'name'
p131104
S'/VectorPostprocessors/EulerAngleUpdaterCheck'
p131105
sa(dp131106
S'description'
p131107
g3
sS'subblocks'
p131108
NsS'parameters'
p131109
(lp131110
(dp131111
S'description'
p131112
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131113
sS'cpp_type'
p131114
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131115
sS'default'
p131116
g3
sS'name'
p131117
S'control_tags'
p131118
sS'required'
p131119
I00
sS'group_name'
p131120
S'Advanced'
p131121
sa(dp131122
S'description'
p131123
S'Set the enabled status of the MooseObject.\n'
p131124
sS'cpp_type'
p131125
S'bool'
p131126
sS'default'
p131127
S'1'
p131128
sS'name'
p131129
S'enable'
p131130
sS'required'
p131131
I00
sS'group_name'
p131132
S'Advanced'
p131133
sa(dp131134
S'name'
p131135
S'execute_on'
p131136
sS'cpp_type'
p131137
S'MultiMooseEnum'
p131138
sS'default'
p131139
S'TIMESTEP_END'
p131140
sS'description'
p131141
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131142
sS'required'
p131143
I00
sS'options'
p131144
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131145
sS'group_name'
p131146
Nsa(dp131147
S'description'
p131148
S'The FeatureFloodCount UserObject to get values from.\n'
p131149
sS'cpp_type'
p131150
S'UserObjectName'
p131151
sS'default'
p131152
g3
sS'name'
p131153
S'flood_counter'
p131154
sS'required'
p131155
I01
sS'group_name'
p131156
Nsa(dp131157
S'description'
p131158
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131159
sS'cpp_type'
p131160
S'std::vector<OutputName, std::allocator<OutputName> >'
p131161
sS'default'
p131162
g3
sS'name'
p131163
S'outputs'
p131164
sS'required'
p131165
I00
sS'group_name'
p131166
S'Advanced'
p131167
sa(dp131168
S'description'
p131169
S'Set this Boolean if you wish to use an element based volume where the dominant order parameter determines the feature that accumulates the entire element volume\n'
p131170
sS'cpp_type'
p131171
S'bool'
p131172
sS'default'
p131173
S'0'
p131174
sS'name'
p131175
S'single_feature_per_element'
p131176
sS'required'
p131177
I00
sS'group_name'
p131178
Nsa(dp131179
S'description'
p131180
g3
sS'cpp_type'
p131181
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131182
sS'default'
p131183
S'FeatureVolumeVectorPostprocessor'
p131184
sS'name'
p131185
S'type'
p131186
sS'required'
p131187
I00
sS'group_name'
p131188
Nsa(dp131189
S'description'
p131190
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131191
sS'cpp_type'
p131192
S'bool'
p131193
sS'default'
p131194
S'0'
p131195
sS'name'
p131196
S'use_displaced_mesh'
p131197
sS'required'
p131198
I00
sS'group_name'
p131199
S'Advanced'
p131200
sasS'name'
p131201
S'/VectorPostprocessors/FeatureVolumeVectorPostprocessor'
p131202
sa(dp131203
S'description'
p131204
S'Outputs the values from GrainForcesPostprocessor\n'
p131205
sS'subblocks'
p131206
NsS'parameters'
p131207
(lp131208
(dp131209
S'description'
p131210
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131211
sS'cpp_type'
p131212
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131213
sS'default'
p131214
g3
sS'name'
p131215
S'control_tags'
p131216
sS'required'
p131217
I00
sS'group_name'
p131218
S'Advanced'
p131219
sa(dp131220
S'description'
p131221
S'Set the enabled status of the MooseObject.\n'
p131222
sS'cpp_type'
p131223
S'bool'
p131224
sS'default'
p131225
S'1'
p131226
sS'name'
p131227
S'enable'
p131228
sS'required'
p131229
I00
sS'group_name'
p131230
S'Advanced'
p131231
sa(dp131232
S'name'
p131233
S'execute_on'
p131234
sS'cpp_type'
p131235
S'MultiMooseEnum'
p131236
sS'default'
p131237
S'TIMESTEP_END'
p131238
sS'description'
p131239
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131240
sS'required'
p131241
I00
sS'options'
p131242
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131243
sS'group_name'
p131244
Nsa(dp131245
S'description'
p131246
S'Specify userobject that gives center of mass and volume of grains\n'
p131247
sS'cpp_type'
p131248
S'UserObjectName'
p131249
sS'default'
p131250
g3
sS'name'
p131251
S'grain_force'
p131252
sS'required'
p131253
I00
sS'group_name'
p131254
Nsa(dp131255
S'description'
p131256
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131257
sS'cpp_type'
p131258
S'std::vector<OutputName, std::allocator<OutputName> >'
p131259
sS'default'
p131260
g3
sS'name'
p131261
S'outputs'
p131262
sS'required'
p131263
I00
sS'group_name'
p131264
S'Advanced'
p131265
sa(dp131266
S'description'
p131267
g3
sS'cpp_type'
p131268
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131269
sS'default'
p131270
S'GrainForcesPostprocessor'
p131271
sS'name'
p131272
S'type'
p131273
sS'required'
p131274
I00
sS'group_name'
p131275
Nsa(dp131276
S'description'
p131277
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131278
sS'cpp_type'
p131279
S'bool'
p131280
sS'default'
p131281
S'0'
p131282
sS'name'
p131283
S'use_displaced_mesh'
p131284
sS'required'
p131285
I00
sS'group_name'
p131286
S'Advanced'
p131287
sasS'name'
p131288
S'/VectorPostprocessors/GrainForcesPostprocessor'
p131289
sa(dp131290
S'description'
p131291
S'Gives out info on the grain boundary properties\n'
p131292
sS'subblocks'
p131293
NsS'parameters'
p131294
(lp131295
(dp131296
S'description'
p131297
S'The list of block ids (SubdomainID) that this object will be applied\n'
p131298
sS'cpp_type'
p131299
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p131300
sS'default'
p131301
g3
sS'name'
p131302
S'block'
p131303
sS'required'
p131304
I00
sS'group_name'
p131305
Nsa(dp131306
S'description'
p131307
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131308
sS'cpp_type'
p131309
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131310
sS'default'
p131311
g3
sS'name'
p131312
S'control_tags'
p131313
sS'required'
p131314
I00
sS'group_name'
p131315
S'Advanced'
p131316
sa(dp131317
S'description'
p131318
S'Set the enabled status of the MooseObject.\n'
p131319
sS'cpp_type'
p131320
S'bool'
p131321
sS'default'
p131322
S'1'
p131323
sS'name'
p131324
S'enable'
p131325
sS'required'
p131326
I00
sS'group_name'
p131327
S'Advanced'
p131328
sa(dp131329
S'description'
p131330
S'The EulerAngleProvider User object\n'
p131331
sS'cpp_type'
p131332
S'UserObjectName'
p131333
sS'default'
p131334
g3
sS'name'
p131335
S'euler_angle_provider'
p131336
sS'required'
p131337
I01
sS'group_name'
p131338
Nsa(dp131339
S'name'
p131340
S'execute_on'
p131341
sS'cpp_type'
p131342
S'MultiMooseEnum'
p131343
sS'default'
p131344
S'TIMESTEP_END'
p131345
sS'description'
p131346
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131347
sS'required'
p131348
I00
sS'options'
p131349
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131350
sS'group_name'
p131351
Nsa(dp131352
S'description'
p131353
S'the number of grains\n'
p131354
sS'cpp_type'
p131355
S'unsigned int'
p131356
sS'default'
p131357
g3
sS'name'
p131358
S'grain_num'
p131359
sS'required'
p131360
I01
sS'group_name'
p131361
Nsa(dp131362
S'description'
p131363
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131364
sS'cpp_type'
p131365
S'std::vector<OutputName, std::allocator<OutputName> >'
p131366
sS'default'
p131367
g3
sS'name'
p131368
S'outputs'
p131369
sS'required'
p131370
I00
sS'group_name'
p131371
S'Advanced'
p131372
sa(dp131373
S'description'
p131374
S'The seed for the master random number generator\n'
p131375
sS'cpp_type'
p131376
S'unsigned int'
p131377
sS'default'
p131378
S'0'
p131379
sS'name'
p131380
S'seed'
p131381
sS'required'
p131382
I00
sS'group_name'
p131383
S'Advanced'
p131384
sa(dp131385
S'name'
p131386
S'sort_by'
p131387
sS'cpp_type'
p131388
S'MooseEnum'
p131389
sS'default'
p131390
g3
sS'description'
p131391
S'What to sort the samples by\n'
p131392
sS'required'
p131393
I01
sS'options'
p131394
S'x y z id'
p131395
sS'group_name'
p131396
Nsa(dp131397
S'description'
p131398
g3
sS'cpp_type'
p131399
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131400
sS'default'
p131401
S'GrainTextureVectorPostprocessor'
p131402
sS'name'
p131403
S'type'
p131404
sS'required'
p131405
I00
sS'group_name'
p131406
Nsa(dp131407
S'description'
p131408
S'The grain number\n'
p131409
sS'cpp_type'
p131410
S'std::vector<VariableName>'
p131411
sS'default'
p131412
g3
sS'name'
p131413
S'unique_grains'
p131414
sS'required'
p131415
I01
sS'group_name'
p131416
Nsa(dp131417
S'description'
p131418
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131419
sS'cpp_type'
p131420
S'bool'
p131421
sS'default'
p131422
S'0'
p131423
sS'name'
p131424
S'use_displaced_mesh'
p131425
sS'required'
p131426
I00
sS'group_name'
p131427
S'Advanced'
p131428
sasS'name'
p131429
S'/VectorPostprocessors/GrainTextureVectorPostprocessor'
p131430
sa(dp131431
S'description'
p131432
g3
sS'subblocks'
p131433
NsS'parameters'
p131434
(lp131435
(dp131436
S'description'
p131437
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131438
sS'cpp_type'
p131439
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131440
sS'default'
p131441
g3
sS'name'
p131442
S'control_tags'
p131443
sS'required'
p131444
I00
sS'group_name'
p131445
S'Advanced'
p131446
sa(dp131447
S'description'
p131448
S'Set the enabled status of the MooseObject.\n'
p131449
sS'cpp_type'
p131450
S'bool'
p131451
sS'default'
p131452
S'1'
p131453
sS'name'
p131454
S'enable'
p131455
sS'required'
p131456
I00
sS'group_name'
p131457
S'Advanced'
p131458
sa(dp131459
S'description'
p131460
S'The end of the line\n'
p131461
sS'cpp_type'
p131462
S'libMesh::Point'
p131463
sS'default'
p131464
g3
sS'name'
p131465
S'end'
p131466
sS'required'
p131467
I01
sS'group_name'
p131468
Nsa(dp131469
S'name'
p131470
S'execute_on'
p131471
sS'cpp_type'
p131472
S'MultiMooseEnum'
p131473
sS'default'
p131474
S'TIMESTEP_END'
p131475
sS'description'
p131476
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131477
sS'required'
p131478
I00
sS'options'
p131479
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131480
sS'group_name'
p131481
Nsa(dp131482
S'description'
p131483
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131484
sS'cpp_type'
p131485
S'std::vector<OutputName, std::allocator<OutputName> >'
p131486
sS'default'
p131487
g3
sS'name'
p131488
S'outputs'
p131489
sS'required'
p131490
I00
sS'group_name'
p131491
S'Advanced'
p131492
sa(dp131493
S'description'
p131494
S'The beginning of the line\n'
p131495
sS'cpp_type'
p131496
S'libMesh::Point'
p131497
sS'default'
p131498
g3
sS'name'
p131499
S'start'
p131500
sS'required'
p131501
I01
sS'group_name'
p131502
Nsa(dp131503
S'description'
p131504
g3
sS'cpp_type'
p131505
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131506
sS'default'
p131507
S'IntersectionPointsAlongLine'
p131508
sS'name'
p131509
S'type'
p131510
sS'required'
p131511
I00
sS'group_name'
p131512
Nsa(dp131513
S'description'
p131514
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131515
sS'cpp_type'
p131516
S'bool'
p131517
sS'default'
p131518
S'0'
p131519
sS'name'
p131520
S'use_displaced_mesh'
p131521
sS'required'
p131522
I00
sS'group_name'
p131523
S'Advanced'
p131524
sasS'name'
p131525
S'/VectorPostprocessors/IntersectionPointsAlongLine'
p131526
sa(dp131527
S'description'
p131528
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p131529
sS'subblocks'
p131530
NsS'parameters'
p131531
(lp131532
(dp131533
S'description'
p131534
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131535
sS'cpp_type'
p131536
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131537
sS'default'
p131538
g3
sS'name'
p131539
S'control_tags'
p131540
sS'required'
p131541
I00
sS'group_name'
p131542
S'Advanced'
p131543
sa(dp131544
S'description'
p131545
S'Set the enabled status of the MooseObject.\n'
p131546
sS'cpp_type'
p131547
S'bool'
p131548
sS'default'
p131549
S'1'
p131550
sS'name'
p131551
S'enable'
p131552
sS'required'
p131553
I00
sS'group_name'
p131554
S'Advanced'
p131555
sa(dp131556
S'name'
p131557
S'execute_on'
p131558
sS'cpp_type'
p131559
S'MultiMooseEnum'
p131560
sS'default'
p131561
S'TIMESTEP_END'
p131562
sS'description'
p131563
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131564
sS'required'
p131565
I00
sS'options'
p131566
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131567
sS'group_name'
p131568
Nsa(dp131569
S'description'
p131570
S'The number of samples to be output\n'
p131571
sS'cpp_type'
p131572
S'unsigned int'
p131573
sS'default'
p131574
g3
sS'name'
p131575
S'num_samples'
p131576
sS'required'
p131577
I00
sS'group_name'
p131578
Nsa(dp131579
S'description'
p131580
S'The order of the polynomial fit\n'
p131581
sS'cpp_type'
p131582
S'unsigned int'
p131583
sS'default'
p131584
g3
sS'name'
p131585
S'order'
p131586
sS'required'
p131587
I01
sS'group_name'
p131588
Nsa(dp131589
S'name'
p131590
S'output'
p131591
sS'cpp_type'
p131592
S'MooseEnum'
p131593
sS'default'
p131594
S'Coefficients'
p131595
sS'description'
p131596
S'The quantity to output.  Options are: Coefficients Samples\n'
p131597
sS'required'
p131598
I00
sS'options'
p131599
S'Coefficients Samples'
p131600
sS'group_name'
p131601
Nsa(dp131602
S'description'
p131603
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131604
sS'cpp_type'
p131605
S'std::vector<OutputName, std::allocator<OutputName> >'
p131606
sS'default'
p131607
g3
sS'name'
p131608
S'outputs'
p131609
sS'required'
p131610
I00
sS'group_name'
p131611
S'Advanced'
p131612
sa(dp131613
S'description'
p131614
S'The maximum x value of the of samples to be output\n'
p131615
sS'cpp_type'
p131616
S'double'
p131617
sS'default'
p131618
g3
sS'name'
p131619
S'sample_x_max'
p131620
sS'required'
p131621
I00
sS'group_name'
p131622
Nsa(dp131623
S'description'
p131624
S'The minimum x value of the of samples to be output\n'
p131625
sS'cpp_type'
p131626
S'double'
p131627
sS'default'
p131628
g3
sS'name'
p131629
S'sample_x_min'
p131630
sS'required'
p131631
I00
sS'group_name'
p131632
Nsa(dp131633
S'description'
p131634
g3
sS'cpp_type'
p131635
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131636
sS'default'
p131637
S'LeastSquaresFit'
p131638
sS'name'
p131639
S'type'
p131640
sS'required'
p131641
I00
sS'group_name'
p131642
Nsa(dp131643
S'description'
p131644
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131645
sS'cpp_type'
p131646
S'bool'
p131647
sS'default'
p131648
S'0'
p131649
sS'name'
p131650
S'use_displaced_mesh'
p131651
sS'required'
p131652
I00
sS'group_name'
p131653
S'Advanced'
p131654
sa(dp131655
S'description'
p131656
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p131657
sS'cpp_type'
p131658
S'VectorPostprocessorName'
p131659
sS'default'
p131660
g3
sS'name'
p131661
S'vectorpostprocessor'
p131662
sS'required'
p131663
I01
sS'group_name'
p131664
Nsa(dp131665
S'description'
p131666
S'The name of the independent variable\n'
p131667
sS'cpp_type'
p131668
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131669
sS'default'
p131670
g3
sS'name'
p131671
S'x_name'
p131672
sS'required'
p131673
I01
sS'group_name'
p131674
Nsa(dp131675
S'description'
p131676
S'Value used to scale x values (scaling is done after shifting)\n'
p131677
sS'cpp_type'
p131678
S'double'
p131679
sS'default'
p131680
S'1'
p131681
sS'name'
p131682
S'x_scale'
p131683
sS'required'
p131684
I00
sS'group_name'
p131685
Nsa(dp131686
S'description'
p131687
S'Value used to shift x values (shifting is done before scaling)\n'
p131688
sS'cpp_type'
p131689
S'double'
p131690
sS'default'
p131691
S'0'
p131692
sS'name'
p131693
S'x_shift'
p131694
sS'required'
p131695
I00
sS'group_name'
p131696
Nsa(dp131697
S'description'
p131698
S'The name of the dependent variable\n'
p131699
sS'cpp_type'
p131700
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131701
sS'default'
p131702
g3
sS'name'
p131703
S'y_name'
p131704
sS'required'
p131705
I01
sS'group_name'
p131706
Nsa(dp131707
S'description'
p131708
S'Value used to scale y values (scaling is done after shifting)\n'
p131709
sS'cpp_type'
p131710
S'double'
p131711
sS'default'
p131712
S'1'
p131713
sS'name'
p131714
S'y_scale'
p131715
sS'required'
p131716
I00
sS'group_name'
p131717
Nsa(dp131718
S'description'
p131719
S'Value used to shift y values (shifting is done before scaling)\n'
p131720
sS'cpp_type'
p131721
S'double'
p131722
sS'default'
p131723
S'0'
p131724
sS'name'
p131725
S'y_shift'
p131726
sS'required'
p131727
I00
sS'group_name'
p131728
NsasS'name'
p131729
S'/VectorPostprocessors/LeastSquaresFit'
p131730
sa(dp131731
S'description'
p131732
g3
sS'subblocks'
p131733
NsS'parameters'
p131734
(lp131735
(dp131736
S'description'
p131737
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131738
sS'cpp_type'
p131739
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131740
sS'default'
p131741
g3
sS'name'
p131742
S'control_tags'
p131743
sS'required'
p131744
I00
sS'group_name'
p131745
S'Advanced'
p131746
sa(dp131747
S'description'
p131748
S'Set the enabled status of the MooseObject.\n'
p131749
sS'cpp_type'
p131750
S'bool'
p131751
sS'default'
p131752
S'1'
p131753
sS'name'
p131754
S'enable'
p131755
sS'required'
p131756
I00
sS'group_name'
p131757
S'Advanced'
p131758
sa(dp131759
S'description'
p131760
S'The ending of the line\n'
p131761
sS'cpp_type'
p131762
S'libMesh::Point'
p131763
sS'default'
p131764
g3
sS'name'
p131765
S'end_point'
p131766
sS'required'
p131767
I01
sS'group_name'
p131768
Nsa(dp131769
S'name'
p131770
S'execute_on'
p131771
sS'cpp_type'
p131772
S'MultiMooseEnum'
p131773
sS'default'
p131774
S'TIMESTEP_END'
p131775
sS'description'
p131776
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131777
sS'required'
p131778
I00
sS'options'
p131779
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131780
sS'group_name'
p131781
Nsa(dp131782
S'description'
p131783
S'The Functions to sample along the line\n'
p131784
sS'cpp_type'
p131785
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p131786
sS'default'
p131787
g3
sS'name'
p131788
S'functions'
p131789
sS'required'
p131790
I01
sS'group_name'
p131791
Nsa(dp131792
S'description'
p131793
S'The number of points to sample along the line\n'
p131794
sS'cpp_type'
p131795
S'unsigned int'
p131796
sS'default'
p131797
g3
sS'name'
p131798
S'num_points'
p131799
sS'required'
p131800
I01
sS'group_name'
p131801
Nsa(dp131802
S'description'
p131803
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131804
sS'cpp_type'
p131805
S'std::vector<OutputName, std::allocator<OutputName> >'
p131806
sS'default'
p131807
g3
sS'name'
p131808
S'outputs'
p131809
sS'required'
p131810
I00
sS'group_name'
p131811
S'Advanced'
p131812
sa(dp131813
S'name'
p131814
S'sort_by'
p131815
sS'cpp_type'
p131816
S'MooseEnum'
p131817
sS'default'
p131818
g3
sS'description'
p131819
S'What to sort the samples by\n'
p131820
sS'required'
p131821
I01
sS'options'
p131822
S'x y z id'
p131823
sS'group_name'
p131824
Nsa(dp131825
S'description'
p131826
S'The beginning of the line\n'
p131827
sS'cpp_type'
p131828
S'libMesh::Point'
p131829
sS'default'
p131830
g3
sS'name'
p131831
S'start_point'
p131832
sS'required'
p131833
I01
sS'group_name'
p131834
Nsa(dp131835
S'description'
p131836
g3
sS'cpp_type'
p131837
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131838
sS'default'
p131839
S'LineFunctionSampler'
p131840
sS'name'
p131841
S'type'
p131842
sS'required'
p131843
I00
sS'group_name'
p131844
Nsa(dp131845
S'description'
p131846
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131847
sS'cpp_type'
p131848
S'bool'
p131849
sS'default'
p131850
S'0'
p131851
sS'name'
p131852
S'use_displaced_mesh'
p131853
sS'required'
p131854
I00
sS'group_name'
p131855
S'Advanced'
p131856
sasS'name'
p131857
S'/VectorPostprocessors/LineFunctionSampler'
p131858
sa(dp131859
S'description'
p131860
S'Access a component of a RankTwoTensor\n'
p131861
sS'subblocks'
p131862
NsS'parameters'
p131863
(lp131864
(dp131865
S'description'
p131866
S'The list of block ids (SubdomainID) that this object will be applied\n'
p131867
sS'cpp_type'
p131868
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p131869
sS'default'
p131870
g3
sS'name'
p131871
S'block'
p131872
sS'required'
p131873
I00
sS'group_name'
p131874
Nsa(dp131875
S'description'
p131876
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131877
sS'cpp_type'
p131878
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131879
sS'default'
p131880
g3
sS'name'
p131881
S'control_tags'
p131882
sS'required'
p131883
I00
sS'group_name'
p131884
S'Advanced'
p131885
sa(dp131886
S'description'
p131887
S'Set the enabled status of the MooseObject.\n'
p131888
sS'cpp_type'
p131889
S'bool'
p131890
sS'default'
p131891
S'1'
p131892
sS'name'
p131893
S'enable'
p131894
sS'required'
p131895
I00
sS'group_name'
p131896
S'Advanced'
p131897
sa(dp131898
S'description'
p131899
S'The end of the line\n'
p131900
sS'cpp_type'
p131901
S'libMesh::Point'
p131902
sS'default'
p131903
g3
sS'name'
p131904
S'end'
p131905
sS'required'
p131906
I01
sS'group_name'
p131907
Nsa(dp131908
S'name'
p131909
S'execute_on'
p131910
sS'cpp_type'
p131911
S'MultiMooseEnum'
p131912
sS'default'
p131913
S'TIMESTEP_END'
p131914
sS'description'
p131915
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131916
sS'required'
p131917
I00
sS'options'
p131918
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131919
sS'group_name'
p131920
Nsa(dp131921
S'description'
p131922
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p131923
sS'cpp_type'
p131924
S'unsigned int'
p131925
sS'default'
p131926
g3
sS'name'
p131927
S'index_i'
p131928
sS'required'
p131929
I01
sS'group_name'
p131930
Nsa(dp131931
S'description'
p131932
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p131933
sS'cpp_type'
p131934
S'unsigned int'
p131935
sS'default'
p131936
g3
sS'name'
p131937
S'index_j'
p131938
sS'required'
p131939
I01
sS'group_name'
p131940
Nsa(dp131941
S'description'
p131942
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131943
sS'cpp_type'
p131944
S'std::vector<OutputName, std::allocator<OutputName> >'
p131945
sS'default'
p131946
g3
sS'name'
p131947
S'outputs'
p131948
sS'required'
p131949
I00
sS'group_name'
p131950
S'Advanced'
p131951
sa(dp131952
S'description'
p131953
S'Name of the material property to be output along a line\n'
p131954
sS'cpp_type'
p131955
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131956
sS'default'
p131957
g3
sS'name'
p131958
S'property'
p131959
sS'required'
p131960
I01
sS'group_name'
p131961
Nsa(dp131962
S'name'
p131963
S'sort_by'
p131964
sS'cpp_type'
p131965
S'MooseEnum'
p131966
sS'default'
p131967
g3
sS'description'
p131968
S'What to sort the samples by\n'
p131969
sS'required'
p131970
I01
sS'options'
p131971
S'x y z id'
p131972
sS'group_name'
p131973
Nsa(dp131974
S'description'
p131975
S'The beginning of the line\n'
p131976
sS'cpp_type'
p131977
S'libMesh::Point'
p131978
sS'default'
p131979
g3
sS'name'
p131980
S'start'
p131981
sS'required'
p131982
I01
sS'group_name'
p131983
Nsa(dp131984
S'description'
p131985
g3
sS'cpp_type'
p131986
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131987
sS'default'
p131988
S'LineMaterialRankTwoSampler'
p131989
sS'name'
p131990
S'type'
p131991
sS'required'
p131992
I00
sS'group_name'
p131993
Nsa(dp131994
S'description'
p131995
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131996
sS'cpp_type'
p131997
S'bool'
p131998
sS'default'
p131999
S'0'
p132000
sS'name'
p132001
S'use_displaced_mesh'
p132002
sS'required'
p132003
I00
sS'group_name'
p132004
S'Advanced'
p132005
sasS'name'
p132006
S'/VectorPostprocessors/LineMaterialRankTwoSampler'
p132007
sa(dp132008
S'description'
p132009
S'Compute a scalar property of a RankTwoTensor\n'
p132010
sS'subblocks'
p132011
NsS'parameters'
p132012
(lp132013
(dp132014
S'description'
p132015
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132016
sS'cpp_type'
p132017
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132018
sS'default'
p132019
g3
sS'name'
p132020
S'block'
p132021
sS'required'
p132022
I00
sS'group_name'
p132023
Nsa(dp132024
S'description'
p132025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132026
sS'cpp_type'
p132027
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132028
sS'default'
p132029
g3
sS'name'
p132030
S'control_tags'
p132031
sS'required'
p132032
I00
sS'group_name'
p132033
S'Advanced'
p132034
sa(dp132035
S'description'
p132036
S'Direction vector\n'
p132037
sS'cpp_type'
p132038
S'libMesh::Point'
p132039
sS'default'
p132040
S'0 0 1'
p132041
sS'name'
p132042
S'direction'
p132043
sS'required'
p132044
I00
sS'group_name'
p132045
Nsa(dp132046
S'description'
p132047
S'Set the enabled status of the MooseObject.\n'
p132048
sS'cpp_type'
p132049
S'bool'
p132050
sS'default'
p132051
S'1'
p132052
sS'name'
p132053
S'enable'
p132054
sS'required'
p132055
I00
sS'group_name'
p132056
S'Advanced'
p132057
sa(dp132058
S'description'
p132059
S'The end of the line\n'
p132060
sS'cpp_type'
p132061
S'libMesh::Point'
p132062
sS'default'
p132063
g3
sS'name'
p132064
S'end'
p132065
sS'required'
p132066
I01
sS'group_name'
p132067
Nsa(dp132068
S'name'
p132069
S'execute_on'
p132070
sS'cpp_type'
p132071
S'MultiMooseEnum'
p132072
sS'default'
p132073
S'TIMESTEP_END'
p132074
sS'description'
p132075
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132076
sS'required'
p132077
I00
sS'options'
p132078
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132079
sS'group_name'
p132080
Nsa(dp132081
S'description'
p132082
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132083
sS'cpp_type'
p132084
S'std::vector<OutputName, std::allocator<OutputName> >'
p132085
sS'default'
p132086
g3
sS'name'
p132087
S'outputs'
p132088
sS'required'
p132089
I00
sS'group_name'
p132090
S'Advanced'
p132091
sa(dp132092
S'description'
p132093
S'Start point for axis used to calculate some cylinderical material tensor quantities\n'
p132094
sS'cpp_type'
p132095
S'libMesh::Point'
p132096
sS'default'
p132097
S'0 0 0'
p132098
sS'name'
p132099
S'point1'
p132100
sS'required'
p132101
I00
sS'group_name'
p132102
Nsa(dp132103
S'description'
p132104
S'End point for axis used to calculate some material tensor quantities\n'
p132105
sS'cpp_type'
p132106
S'libMesh::Point'
p132107
sS'default'
p132108
S'0 1 0'
p132109
sS'name'
p132110
S'point2'
p132111
sS'required'
p132112
I00
sS'group_name'
p132113
Nsa(dp132114
S'description'
p132115
S'Name of the material property to be output along a line\n'
p132116
sS'cpp_type'
p132117
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132118
sS'default'
p132119
g3
sS'name'
p132120
S'property'
p132121
sS'required'
p132122
I01
sS'group_name'
p132123
Nsa(dp132124
S'name'
p132125
S'scalar_type'
p132126
sS'cpp_type'
p132127
S'MooseEnum'
p132128
sS'default'
p132129
g3
sS'description'
p132130
S'A scalar to ouput\n'
p132131
sS'required'
p132132
I00
sS'options'
p132133
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction'
p132134
sS'group_name'
p132135
Nsa(dp132136
S'name'
p132137
S'sort_by'
p132138
sS'cpp_type'
p132139
S'MooseEnum'
p132140
sS'default'
p132141
g3
sS'description'
p132142
S'What to sort the samples by\n'
p132143
sS'required'
p132144
I01
sS'options'
p132145
S'x y z id'
p132146
sS'group_name'
p132147
Nsa(dp132148
S'description'
p132149
S'The beginning of the line\n'
p132150
sS'cpp_type'
p132151
S'libMesh::Point'
p132152
sS'default'
p132153
g3
sS'name'
p132154
S'start'
p132155
sS'required'
p132156
I01
sS'group_name'
p132157
Nsa(dp132158
S'description'
p132159
g3
sS'cpp_type'
p132160
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132161
sS'default'
p132162
S'LineMaterialRankTwoScalarSampler'
p132163
sS'name'
p132164
S'type'
p132165
sS'required'
p132166
I00
sS'group_name'
p132167
Nsa(dp132168
S'description'
p132169
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132170
sS'cpp_type'
p132171
S'bool'
p132172
sS'default'
p132173
S'0'
p132174
sS'name'
p132175
S'use_displaced_mesh'
p132176
sS'required'
p132177
I00
sS'group_name'
p132178
S'Advanced'
p132179
sasS'name'
p132180
S'/VectorPostprocessors/LineMaterialRankTwoScalarSampler'
p132181
sa(dp132182
S'description'
p132183
g3
sS'subblocks'
p132184
NsS'parameters'
p132185
(lp132186
(dp132187
S'description'
p132188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132189
sS'cpp_type'
p132190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132191
sS'default'
p132192
g3
sS'name'
p132193
S'block'
p132194
sS'required'
p132195
I00
sS'group_name'
p132196
Nsa(dp132197
S'description'
p132198
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132199
sS'cpp_type'
p132200
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132201
sS'default'
p132202
g3
sS'name'
p132203
S'control_tags'
p132204
sS'required'
p132205
I00
sS'group_name'
p132206
S'Advanced'
p132207
sa(dp132208
S'description'
p132209
S'Set the enabled status of the MooseObject.\n'
p132210
sS'cpp_type'
p132211
S'bool'
p132212
sS'default'
p132213
S'1'
p132214
sS'name'
p132215
S'enable'
p132216
sS'required'
p132217
I00
sS'group_name'
p132218
S'Advanced'
p132219
sa(dp132220
S'description'
p132221
S'The end of the line\n'
p132222
sS'cpp_type'
p132223
S'libMesh::Point'
p132224
sS'default'
p132225
g3
sS'name'
p132226
S'end'
p132227
sS'required'
p132228
I01
sS'group_name'
p132229
Nsa(dp132230
S'name'
p132231
S'execute_on'
p132232
sS'cpp_type'
p132233
S'MultiMooseEnum'
p132234
sS'default'
p132235
S'TIMESTEP_END'
p132236
sS'description'
p132237
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132238
sS'required'
p132239
I00
sS'options'
p132240
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132241
sS'group_name'
p132242
Nsa(dp132243
S'description'
p132244
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132245
sS'cpp_type'
p132246
S'std::vector<OutputName, std::allocator<OutputName> >'
p132247
sS'default'
p132248
g3
sS'name'
p132249
S'outputs'
p132250
sS'required'
p132251
I00
sS'group_name'
p132252
S'Advanced'
p132253
sa(dp132254
S'description'
p132255
S'Name of the material property to be output along a line\n'
p132256
sS'cpp_type'
p132257
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132258
sS'default'
p132259
g3
sS'name'
p132260
S'property'
p132261
sS'required'
p132262
I01
sS'group_name'
p132263
Nsa(dp132264
S'name'
p132265
S'sort_by'
p132266
sS'cpp_type'
p132267
S'MooseEnum'
p132268
sS'default'
p132269
g3
sS'description'
p132270
S'What to sort the samples by\n'
p132271
sS'required'
p132272
I01
sS'options'
p132273
S'x y z id'
p132274
sS'group_name'
p132275
Nsa(dp132276
S'description'
p132277
S'The beginning of the line\n'
p132278
sS'cpp_type'
p132279
S'libMesh::Point'
p132280
sS'default'
p132281
g3
sS'name'
p132282
S'start'
p132283
sS'required'
p132284
I01
sS'group_name'
p132285
Nsa(dp132286
S'description'
p132287
g3
sS'cpp_type'
p132288
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132289
sS'default'
p132290
S'LineMaterialRealSampler'
p132291
sS'name'
p132292
S'type'
p132293
sS'required'
p132294
I00
sS'group_name'
p132295
Nsa(dp132296
S'description'
p132297
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132298
sS'cpp_type'
p132299
S'bool'
p132300
sS'default'
p132301
S'0'
p132302
sS'name'
p132303
S'use_displaced_mesh'
p132304
sS'required'
p132305
I00
sS'group_name'
p132306
S'Advanced'
p132307
sasS'name'
p132308
S'/VectorPostprocessors/LineMaterialRealSampler'
p132309
sa(dp132310
S'description'
p132311
g3
sS'subblocks'
p132312
NsS'parameters'
p132313
(lp132314
(dp132315
S'description'
p132316
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132317
sS'cpp_type'
p132318
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132319
sS'default'
p132320
g3
sS'name'
p132321
S'control_tags'
p132322
sS'required'
p132323
I00
sS'group_name'
p132324
S'Advanced'
p132325
sa(dp132326
S'description'
p132327
S'Set the enabled status of the MooseObject.\n'
p132328
sS'cpp_type'
p132329
S'bool'
p132330
sS'default'
p132331
S'1'
p132332
sS'name'
p132333
S'enable'
p132334
sS'required'
p132335
I00
sS'group_name'
p132336
S'Advanced'
p132337
sa(dp132338
S'description'
p132339
S'The ending of the line\n'
p132340
sS'cpp_type'
p132341
S'libMesh::Point'
p132342
sS'default'
p132343
g3
sS'name'
p132344
S'end_point'
p132345
sS'required'
p132346
I01
sS'group_name'
p132347
Nsa(dp132348
S'name'
p132349
S'execute_on'
p132350
sS'cpp_type'
p132351
S'MultiMooseEnum'
p132352
sS'default'
p132353
S'TIMESTEP_END'
p132354
sS'description'
p132355
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132356
sS'required'
p132357
I00
sS'options'
p132358
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132359
sS'group_name'
p132360
Nsa(dp132361
S'description'
p132362
S'The number of points to sample along the line\n'
p132363
sS'cpp_type'
p132364
S'unsigned int'
p132365
sS'default'
p132366
g3
sS'name'
p132367
S'num_points'
p132368
sS'required'
p132369
I01
sS'group_name'
p132370
Nsa(dp132371
S'description'
p132372
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132373
sS'cpp_type'
p132374
S'std::vector<OutputName, std::allocator<OutputName> >'
p132375
sS'default'
p132376
g3
sS'name'
p132377
S'outputs'
p132378
sS'required'
p132379
I00
sS'group_name'
p132380
S'Advanced'
p132381
sa(dp132382
S'name'
p132383
S'sort_by'
p132384
sS'cpp_type'
p132385
S'MooseEnum'
p132386
sS'default'
p132387
g3
sS'description'
p132388
S'What to sort the samples by\n'
p132389
sS'required'
p132390
I01
sS'options'
p132391
S'x y z id'
p132392
sS'group_name'
p132393
Nsa(dp132394
S'description'
p132395
S'The beginning of the line\n'
p132396
sS'cpp_type'
p132397
S'libMesh::Point'
p132398
sS'default'
p132399
g3
sS'name'
p132400
S'start_point'
p132401
sS'required'
p132402
I01
sS'group_name'
p132403
Nsa(dp132404
S'description'
p132405
g3
sS'cpp_type'
p132406
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132407
sS'default'
p132408
S'LineValueSampler'
p132409
sS'name'
p132410
S'type'
p132411
sS'required'
p132412
I00
sS'group_name'
p132413
Nsa(dp132414
S'description'
p132415
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132416
sS'cpp_type'
p132417
S'bool'
p132418
sS'default'
p132419
S'0'
p132420
sS'name'
p132421
S'use_displaced_mesh'
p132422
sS'required'
p132423
I00
sS'group_name'
p132424
S'Advanced'
p132425
sa(dp132426
S'description'
p132427
S'The names of the variables that this VectorPostprocessor operates on\n'
p132428
sS'cpp_type'
p132429
S'std::vector<VariableName>'
p132430
sS'default'
p132431
g3
sS'name'
p132432
S'variable'
p132433
sS'required'
p132434
I01
sS'group_name'
p132435
NsasS'name'
p132436
S'/VectorPostprocessors/LineValueSampler'
p132437
sa(dp132438
S'description'
p132439
g3
sS'subblocks'
p132440
NsS'parameters'
p132441
(lp132442
(dp132443
S'description'
p132444
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132445
sS'cpp_type'
p132446
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132447
sS'default'
p132448
g3
sS'name'
p132449
S'block'
p132450
sS'required'
p132451
I00
sS'group_name'
p132452
Nsa(dp132453
S'description'
p132454
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132455
sS'cpp_type'
p132456
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132457
sS'default'
p132458
g3
sS'name'
p132459
S'control_tags'
p132460
sS'required'
p132461
I00
sS'group_name'
p132462
S'Advanced'
p132463
sa(dp132464
S'description'
p132465
S'Element IDs to print data for (others are ignored).\n'
p132466
sS'cpp_type'
p132467
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p132468
sS'default'
p132469
g3
sS'name'
p132470
S'elem_ids'
p132471
sS'required'
p132472
I01
sS'group_name'
p132473
Nsa(dp132474
S'description'
p132475
S'Set the enabled status of the MooseObject.\n'
p132476
sS'cpp_type'
p132477
S'bool'
p132478
sS'default'
p132479
S'1'
p132480
sS'name'
p132481
S'enable'
p132482
sS'required'
p132483
I00
sS'group_name'
p132484
S'Advanced'
p132485
sa(dp132486
S'name'
p132487
S'execute_on'
p132488
sS'cpp_type'
p132489
S'MultiMooseEnum'
p132490
sS'default'
p132491
S'TIMESTEP_END'
p132492
sS'description'
p132493
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132494
sS'required'
p132495
I00
sS'options'
p132496
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132497
sS'group_name'
p132498
Nsa(dp132499
S'description'
p132500
S'Material for which all properties will be recorded.\n'
p132501
sS'cpp_type'
p132502
S'MaterialName'
p132503
sS'default'
p132504
g3
sS'name'
p132505
S'material'
p132506
sS'required'
p132507
I01
sS'group_name'
p132508
Nsa(dp132509
S'description'
p132510
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132511
sS'cpp_type'
p132512
S'std::vector<OutputName, std::allocator<OutputName> >'
p132513
sS'default'
p132514
g3
sS'name'
p132515
S'outputs'
p132516
sS'required'
p132517
I00
sS'group_name'
p132518
S'Advanced'
p132519
sa(dp132520
S'description'
p132521
S'The seed for the master random number generator\n'
p132522
sS'cpp_type'
p132523
S'unsigned int'
p132524
sS'default'
p132525
S'0'
p132526
sS'name'
p132527
S'seed'
p132528
sS'required'
p132529
I00
sS'group_name'
p132530
S'Advanced'
p132531
sa(dp132532
S'description'
p132533
g3
sS'cpp_type'
p132534
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132535
sS'default'
p132536
S'MaterialVectorPostprocessor'
p132537
sS'name'
p132538
S'type'
p132539
sS'required'
p132540
I00
sS'group_name'
p132541
Nsa(dp132542
S'description'
p132543
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132544
sS'cpp_type'
p132545
S'bool'
p132546
sS'default'
p132547
S'0'
p132548
sS'name'
p132549
S'use_displaced_mesh'
p132550
sS'required'
p132551
I00
sS'group_name'
p132552
S'Advanced'
p132553
sasS'name'
p132554
S'/VectorPostprocessors/MaterialVectorPostprocessor'
p132555
sa(dp132556
S'description'
p132557
g3
sS'subblocks'
p132558
NsS'parameters'
p132559
(lp132560
(dp132561
S'description'
p132562
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132563
sS'cpp_type'
p132564
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132565
sS'default'
p132566
g3
sS'name'
p132567
S'block'
p132568
sS'required'
p132569
I00
sS'group_name'
p132570
Nsa(dp132571
S'description'
p132572
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p132573
sS'cpp_type'
p132574
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p132575
sS'default'
p132576
g3
sS'name'
p132577
S'boundary'
p132578
sS'required'
p132579
I00
sS'group_name'
p132580
Nsa(dp132581
S'description'
p132582
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132583
sS'cpp_type'
p132584
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132585
sS'default'
p132586
g3
sS'name'
p132587
S'control_tags'
p132588
sS'required'
p132589
I00
sS'group_name'
p132590
S'Advanced'
p132591
sa(dp132592
S'description'
p132593
S'Set the enabled status of the MooseObject.\n'
p132594
sS'cpp_type'
p132595
S'bool'
p132596
sS'default'
p132597
S'1'
p132598
sS'name'
p132599
S'enable'
p132600
sS'required'
p132601
I00
sS'group_name'
p132602
S'Advanced'
p132603
sa(dp132604
S'name'
p132605
S'execute_on'
p132606
sS'cpp_type'
p132607
S'MultiMooseEnum'
p132608
sS'default'
p132609
S'TIMESTEP_END'
p132610
sS'description'
p132611
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132612
sS'required'
p132613
I00
sS'options'
p132614
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132615
sS'group_name'
p132616
Nsa(dp132617
S'description'
p132618
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132619
sS'cpp_type'
p132620
S'std::vector<OutputName, std::allocator<OutputName> >'
p132621
sS'default'
p132622
g3
sS'name'
p132623
S'outputs'
p132624
sS'required'
p132625
I00
sS'group_name'
p132626
S'Advanced'
p132627
sa(dp132628
S'description'
p132629
S'The seed for the master random number generator\n'
p132630
sS'cpp_type'
p132631
S'unsigned int'
p132632
sS'default'
p132633
S'0'
p132634
sS'name'
p132635
S'seed'
p132636
sS'required'
p132637
I00
sS'group_name'
p132638
S'Advanced'
p132639
sa(dp132640
S'name'
p132641
S'sort_by'
p132642
sS'cpp_type'
p132643
S'MooseEnum'
p132644
sS'default'
p132645
g3
sS'description'
p132646
S'What to sort the samples by\n'
p132647
sS'required'
p132648
I01
sS'options'
p132649
S'x y z id'
p132650
sS'group_name'
p132651
Nsa(dp132652
S'description'
p132653
g3
sS'cpp_type'
p132654
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132655
sS'default'
p132656
S'NodalValueSampler'
p132657
sS'name'
p132658
S'type'
p132659
sS'required'
p132660
I00
sS'group_name'
p132661
Nsa(dp132662
S'description'
p132663
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p132664
sS'cpp_type'
p132665
S'bool'
p132666
sS'default'
p132667
S'0'
p132668
sS'name'
p132669
S'unique_node_execute'
p132670
sS'required'
p132671
I00
sS'group_name'
p132672
Nsa(dp132673
S'description'
p132674
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132675
sS'cpp_type'
p132676
S'bool'
p132677
sS'default'
p132678
S'0'
p132679
sS'name'
p132680
S'use_displaced_mesh'
p132681
sS'required'
p132682
I00
sS'group_name'
p132683
S'Advanced'
p132684
sa(dp132685
S'description'
p132686
S'The names of the variables that this VectorPostprocessor operates on\n'
p132687
sS'cpp_type'
p132688
S'std::vector<VariableName>'
p132689
sS'default'
p132690
g3
sS'name'
p132691
S'variable'
p132692
sS'required'
p132693
I01
sS'group_name'
p132694
NsasS'name'
p132695
S'/VectorPostprocessors/NodalValueSampler'
p132696
sa(dp132697
S'description'
p132698
g3
sS'subblocks'
p132699
NsS'parameters'
p132700
(lp132701
(dp132702
S'description'
p132703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132704
sS'cpp_type'
p132705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132706
sS'default'
p132707
g3
sS'name'
p132708
S'control_tags'
p132709
sS'required'
p132710
I00
sS'group_name'
p132711
S'Advanced'
p132712
sa(dp132713
S'description'
p132714
S'Set the enabled status of the MooseObject.\n'
p132715
sS'cpp_type'
p132716
S'bool'
p132717
sS'default'
p132718
S'1'
p132719
sS'name'
p132720
S'enable'
p132721
sS'required'
p132722
I00
sS'group_name'
p132723
S'Advanced'
p132724
sa(dp132725
S'name'
p132726
S'execute_on'
p132727
sS'cpp_type'
p132728
S'MultiMooseEnum'
p132729
sS'default'
p132730
S'TIMESTEP_END'
p132731
sS'description'
p132732
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132733
sS'required'
p132734
I00
sS'options'
p132735
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132736
sS'group_name'
p132737
Nsa(dp132738
S'description'
p132739
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132740
sS'cpp_type'
p132741
S'std::vector<OutputName, std::allocator<OutputName> >'
p132742
sS'default'
p132743
g3
sS'name'
p132744
S'outputs'
p132745
sS'required'
p132746
I00
sS'group_name'
p132747
S'Advanced'
p132748
sa(dp132749
S'description'
p132750
S'The points where you want to evaluate the variables\n'
p132751
sS'cpp_type'
p132752
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p132753
sS'default'
p132754
g3
sS'name'
p132755
S'points'
p132756
sS'required'
p132757
I01
sS'group_name'
p132758
Nsa(dp132759
S'name'
p132760
S'sort_by'
p132761
sS'cpp_type'
p132762
S'MooseEnum'
p132763
sS'default'
p132764
g3
sS'description'
p132765
S'What to sort the samples by\n'
p132766
sS'required'
p132767
I01
sS'options'
p132768
S'x y z id'
p132769
sS'group_name'
p132770
Nsa(dp132771
S'description'
p132772
g3
sS'cpp_type'
p132773
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132774
sS'default'
p132775
S'PointValueSampler'
p132776
sS'name'
p132777
S'type'
p132778
sS'required'
p132779
I00
sS'group_name'
p132780
Nsa(dp132781
S'description'
p132782
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132783
sS'cpp_type'
p132784
S'bool'
p132785
sS'default'
p132786
S'0'
p132787
sS'name'
p132788
S'use_displaced_mesh'
p132789
sS'required'
p132790
I00
sS'group_name'
p132791
S'Advanced'
p132792
sa(dp132793
S'description'
p132794
S'The names of the variables that this VectorPostprocessor operates on\n'
p132795
sS'cpp_type'
p132796
S'std::vector<VariableName>'
p132797
sS'default'
p132798
g3
sS'name'
p132799
S'variable'
p132800
sS'required'
p132801
I01
sS'group_name'
p132802
NsasS'name'
p132803
S'/VectorPostprocessors/PointValueSampler'
p132804
sa(dp132805
S'description'
p132806
g3
sS'subblocks'
p132807
NsS'parameters'
p132808
(lp132809
(dp132810
S'description'
p132811
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p132812
sS'cpp_type'
p132813
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p132814
sS'default'
p132815
g3
sS'name'
p132816
S'boundary'
p132817
sS'required'
p132818
I01
sS'group_name'
p132819
Nsa(dp132820
S'description'
p132821
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132822
sS'cpp_type'
p132823
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132824
sS'default'
p132825
g3
sS'name'
p132826
S'control_tags'
p132827
sS'required'
p132828
I00
sS'group_name'
p132829
S'Advanced'
p132830
sa(dp132831
S'description'
p132832
S'Set the enabled status of the MooseObject.\n'
p132833
sS'cpp_type'
p132834
S'bool'
p132835
sS'default'
p132836
S'1'
p132837
sS'name'
p132838
S'enable'
p132839
sS'required'
p132840
I00
sS'group_name'
p132841
S'Advanced'
p132842
sa(dp132843
S'name'
p132844
S'execute_on'
p132845
sS'cpp_type'
p132846
S'MultiMooseEnum'
p132847
sS'default'
p132848
S'TIMESTEP_END'
p132849
sS'description'
p132850
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132851
sS'required'
p132852
I00
sS'options'
p132853
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132854
sS'group_name'
p132855
Nsa(dp132856
S'description'
p132857
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132858
sS'cpp_type'
p132859
S'std::vector<OutputName, std::allocator<OutputName> >'
p132860
sS'default'
p132861
g3
sS'name'
p132862
S'outputs'
p132863
sS'required'
p132864
I00
sS'group_name'
p132865
S'Advanced'
p132866
sa(dp132867
S'name'
p132868
S'sort_by'
p132869
sS'cpp_type'
p132870
S'MooseEnum'
p132871
sS'default'
p132872
g3
sS'description'
p132873
S'What to sort the samples by\n'
p132874
sS'required'
p132875
I01
sS'options'
p132876
S'x y z id'
p132877
sS'group_name'
p132878
Nsa(dp132879
S'description'
p132880
g3
sS'cpp_type'
p132881
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132882
sS'default'
p132883
S'SideValueSampler'
p132884
sS'name'
p132885
S'type'
p132886
sS'required'
p132887
I00
sS'group_name'
p132888
Nsa(dp132889
S'description'
p132890
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132891
sS'cpp_type'
p132892
S'bool'
p132893
sS'default'
p132894
S'0'
p132895
sS'name'
p132896
S'use_displaced_mesh'
p132897
sS'required'
p132898
I00
sS'group_name'
p132899
S'Advanced'
p132900
sa(dp132901
S'description'
p132902
S'The names of the variables that this VectorPostprocessor operates on\n'
p132903
sS'cpp_type'
p132904
S'std::vector<VariableName>'
p132905
sS'default'
p132906
g3
sS'name'
p132907
S'variable'
p132908
sS'required'
p132909
I01
sS'group_name'
p132910
NsasS'name'
p132911
S'/VectorPostprocessors/SideValueSampler'
p132912
sa(dp132913
S'description'
p132914
g3
sS'subblocks'
p132915
NsS'parameters'
p132916
(lp132917
(dp132918
S'description'
p132919
S'Number of histogram bins\n'
p132920
sS'cpp_type'
p132921
S'unsigned int'
p132922
sS'default'
p132923
S'50'
p132924
sS'name'
p132925
S'bin_number'
p132926
sS'required'
p132927
I00
sS'group_name'
p132928
Nsa(dp132929
S'description'
p132930
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132931
sS'cpp_type'
p132932
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132933
sS'default'
p132934
g3
sS'name'
p132935
S'block'
p132936
sS'required'
p132937
I00
sS'group_name'
p132938
Nsa(dp132939
S'description'
p132940
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132941
sS'cpp_type'
p132942
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132943
sS'default'
p132944
g3
sS'name'
p132945
S'control_tags'
p132946
sS'required'
p132947
I00
sS'group_name'
p132948
S'Advanced'
p132949
sa(dp132950
S'description'
p132951
S'Value to assign to bins into which no datapoints fall\n'
p132952
sS'cpp_type'
p132953
S'double'
p132954
sS'default'
p132955
S'0'
p132956
sS'name'
p132957
S'empty_bin_value'
p132958
sS'required'
p132959
I00
sS'group_name'
p132960
Nsa(dp132961
S'description'
p132962
S'Set the enabled status of the MooseObject.\n'
p132963
sS'cpp_type'
p132964
S'bool'
p132965
sS'default'
p132966
S'1'
p132967
sS'name'
p132968
S'enable'
p132969
sS'required'
p132970
I00
sS'group_name'
p132971
S'Advanced'
p132972
sa(dp132973
S'name'
p132974
S'execute_on'
p132975
sS'cpp_type'
p132976
S'MultiMooseEnum'
p132977
sS'default'
p132978
S'TIMESTEP_END'
p132979
sS'description'
p132980
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132981
sS'required'
p132982
I00
sS'options'
p132983
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132984
sS'group_name'
p132985
Nsa(dp132986
S'description'
p132987
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132988
sS'cpp_type'
p132989
S'std::vector<OutputName, std::allocator<OutputName> >'
p132990
sS'default'
p132991
g3
sS'name'
p132992
S'outputs'
p132993
sS'required'
p132994
I00
sS'group_name'
p132995
S'Advanced'
p132996
sa(dp132997
S'description'
p132998
S'Radius to average out to\n'
p132999
sS'cpp_type'
p133000
S'double'
p133001
sS'default'
p133002
g3
sS'name'
p133003
S'radius'
p133004
sS'required'
p133005
I01
sS'group_name'
p133006
Nsa(dp133007
S'description'
p133008
S'The seed for the master random number generator\n'
p133009
sS'cpp_type'
p133010
S'unsigned int'
p133011
sS'default'
p133012
S'0'
p133013
sS'name'
p133014
S'seed'
p133015
sS'required'
p133016
I00
sS'group_name'
p133017
S'Advanced'
p133018
sa(dp133019
S'description'
p133020
g3
sS'cpp_type'
p133021
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133022
sS'default'
p133023
S'SphericalAverage'
p133024
sS'name'
p133025
S'type'
p133026
sS'required'
p133027
I00
sS'group_name'
p133028
Nsa(dp133029
S'description'
p133030
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133031
sS'cpp_type'
p133032
S'bool'
p133033
sS'default'
p133034
S'0'
p133035
sS'name'
p133036
S'use_displaced_mesh'
p133037
sS'required'
p133038
I00
sS'group_name'
p133039
S'Advanced'
p133040
sa(dp133041
S'description'
p133042
S'Variables to average radially\n'
p133043
sS'cpp_type'
p133044
S'std::vector<VariableName>'
p133045
sS'default'
p133046
g3
sS'name'
p133047
S'variable'
p133048
sS'required'
p133049
I00
sS'group_name'
p133050
NsasS'name'
p133051
S'/VectorPostprocessors/SphericalAverage'
p133052
sa(dp133053
S'description'
p133054
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p133055
sS'subblocks'
p133056
NsS'parameters'
p133057
(lp133058
(dp133059
S'description'
p133060
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133061
sS'cpp_type'
p133062
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133063
sS'default'
p133064
g3
sS'name'
p133065
S'control_tags'
p133066
sS'required'
p133067
I00
sS'group_name'
p133068
S'Advanced'
p133069
sa(dp133070
S'description'
p133071
S'Set the enabled status of the MooseObject.\n'
p133072
sS'cpp_type'
p133073
S'bool'
p133074
sS'default'
p133075
S'1'
p133076
sS'name'
p133077
S'enable'
p133078
sS'required'
p133079
I00
sS'group_name'
p133080
S'Advanced'
p133081
sa(dp133082
S'name'
p133083
S'execute_on'
p133084
sS'cpp_type'
p133085
S'MultiMooseEnum'
p133086
sS'default'
p133087
S'TIMESTEP_END'
p133088
sS'description'
p133089
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133090
sS'required'
p133091
I00
sS'options'
p133092
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133093
sS'group_name'
p133094
Nsa(dp133095
S'description'
p133096
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133097
sS'cpp_type'
p133098
S'std::vector<OutputName, std::allocator<OutputName> >'
p133099
sS'default'
p133100
g3
sS'name'
p133101
S'outputs'
p133102
sS'required'
p133103
I00
sS'group_name'
p133104
S'Advanced'
p133105
sa(dp133106
S'description'
p133107
S'The postprocessors whose values are to be reported\n'
p133108
sS'cpp_type'
p133109
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p133110
sS'default'
p133111
g3
sS'name'
p133112
S'postprocessors'
p133113
sS'required'
p133114
I01
sS'group_name'
p133115
Nsa(dp133116
S'description'
p133117
g3
sS'cpp_type'
p133118
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133119
sS'default'
p133120
S'VectorOfPostprocessors'
p133121
sS'name'
p133122
S'type'
p133123
sS'required'
p133124
I00
sS'group_name'
p133125
Nsa(dp133126
S'description'
p133127
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133128
sS'cpp_type'
p133129
S'bool'
p133130
sS'default'
p133131
S'0'
p133132
sS'name'
p133133
S'use_displaced_mesh'
p133134
sS'required'
p133135
I00
sS'group_name'
p133136
S'Advanced'
p133137
sasS'name'
p133138
S'/VectorPostprocessors/VectorOfPostprocessors'
p133139
sa(dp133140
S'description'
p133141
g3
sS'subblocks'
p133142
NsS'parameters'
p133143
(lp133144
(dp133145
S'description'
p133146
S'Number of histogram bins\n'
p133147
sS'cpp_type'
p133148
S'unsigned int'
p133149
sS'default'
p133150
S'50'
p133151
sS'name'
p133152
S'bin_number'
p133153
sS'required'
p133154
I00
sS'group_name'
p133155
Nsa(dp133156
S'description'
p133157
S'The list of block ids (SubdomainID) that this object will be applied\n'
p133158
sS'cpp_type'
p133159
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p133160
sS'default'
p133161
g3
sS'name'
p133162
S'block'
p133163
sS'required'
p133164
I00
sS'group_name'
p133165
Nsa(dp133166
S'description'
p133167
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133168
sS'cpp_type'
p133169
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133170
sS'default'
p133171
g3
sS'name'
p133172
S'control_tags'
p133173
sS'required'
p133174
I00
sS'group_name'
p133175
S'Advanced'
p133176
sa(dp133177
S'description'
p133178
S'Set the enabled status of the MooseObject.\n'
p133179
sS'cpp_type'
p133180
S'bool'
p133181
sS'default'
p133182
S'1'
p133183
sS'name'
p133184
S'enable'
p133185
sS'required'
p133186
I00
sS'group_name'
p133187
S'Advanced'
p133188
sa(dp133189
S'name'
p133190
S'execute_on'
p133191
sS'cpp_type'
p133192
S'MultiMooseEnum'
p133193
sS'default'
p133194
S'TIMESTEP_END'
p133195
sS'description'
p133196
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133197
sS'required'
p133198
I00
sS'options'
p133199
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133200
sS'group_name'
p133201
Nsa(dp133202
S'description'
p133203
S'Maximum variable value\n'
p133204
sS'cpp_type'
p133205
S'double'
p133206
sS'default'
p133207
g3
sS'name'
p133208
S'max_value'
p133209
sS'required'
p133210
I01
sS'group_name'
p133211
Nsa(dp133212
S'description'
p133213
S'Minimum variable value\n'
p133214
sS'cpp_type'
p133215
S'double'
p133216
sS'default'
p133217
g3
sS'name'
p133218
S'min_value'
p133219
sS'required'
p133220
I01
sS'group_name'
p133221
Nsa(dp133222
S'description'
p133223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133224
sS'cpp_type'
p133225
S'std::vector<OutputName, std::allocator<OutputName> >'
p133226
sS'default'
p133227
g3
sS'name'
p133228
S'outputs'
p133229
sS'required'
p133230
I00
sS'group_name'
p133231
S'Advanced'
p133232
sa(dp133233
S'description'
p133234
S'The seed for the master random number generator\n'
p133235
sS'cpp_type'
p133236
S'unsigned int'
p133237
sS'default'
p133238
S'0'
p133239
sS'name'
p133240
S'seed'
p133241
sS'required'
p133242
I00
sS'group_name'
p133243
S'Advanced'
p133244
sa(dp133245
S'description'
p133246
g3
sS'cpp_type'
p133247
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133248
sS'default'
p133249
S'VolumeHistogram'
p133250
sS'name'
p133251
S'type'
p133252
sS'required'
p133253
I00
sS'group_name'
p133254
Nsa(dp133255
S'description'
p133256
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133257
sS'cpp_type'
p133258
S'bool'
p133259
sS'default'
p133260
S'0'
p133261
sS'name'
p133262
S'use_displaced_mesh'
p133263
sS'required'
p133264
I00
sS'group_name'
p133265
S'Advanced'
p133266
sa(dp133267
S'description'
p133268
S'Variable to bin the volume of\n'
p133269
sS'cpp_type'
p133270
S'std::vector<VariableName>'
p133271
sS'default'
p133272
g3
sS'name'
p133273
S'variable'
p133274
sS'required'
p133275
I00
sS'group_name'
p133276
NsasS'name'
p133277
S'/VectorPostprocessors/VolumeHistogram'
p133278
sasS'parameters'
p133279
NsS'name'
p133280
S'/VectorPostprocessors'
p133281
sa.