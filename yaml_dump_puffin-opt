(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55
sS'cpp_type'
p56
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57
sS'default'
p58
g3
sS'name'
p59
S'control_tags'
p60
sS'required'
p61
I00
sS'group_name'
p62
S'Advanced'
p63
sa(dp64
S'description'
p65
S'Set the enabled status of the MooseObject.\n'
p66
sS'cpp_type'
p67
S'bool'
p68
sS'default'
p69
S'1'
p70
sS'name'
p71
S'enable'
p72
sS'required'
p73
I00
sS'group_name'
p74
S'Advanced'
p75
sa(dp76
S'description'
p77
S'The analytic solution to compare against\n'
p78
sS'cpp_type'
p79
S'FunctionName'
p80
sS'default'
p81
g3
sS'name'
p82
S'function'
p83
sS'required'
p84
I01
sS'group_name'
p85
Nsa(dp86
S'description'
p87
S'Determines whether this object is calculated using an implicit or explicit form\n'
p88
sS'cpp_type'
p89
S'bool'
p90
sS'default'
p91
S'1'
p92
sS'name'
p93
S'implicit'
p94
sS'required'
p95
I00
sS'group_name'
p96
S'Advanced'
p97
sa(dp98
S'description'
p99
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100
sS'cpp_type'
p101
S'std::vector<OutputName, std::allocator<OutputName> >'
p102
sS'default'
p103
g3
sS'name'
p104
S'outputs'
p105
sS'required'
p106
I00
sS'group_name'
p107
S'Advanced'
p108
sa(dp109
S'description'
p110
g3
sS'cpp_type'
p111
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112
sS'default'
p113
S'AnalyticalIndicator'
p114
sS'name'
p115
S'type'
p116
sS'required'
p117
I00
sS'group_name'
p118
Nsa(dp119
S'description'
p120
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121
sS'cpp_type'
p122
S'bool'
p123
sS'default'
p124
S'0'
p125
sS'name'
p126
S'use_displaced_mesh'
p127
sS'required'
p128
I00
sS'group_name'
p129
S'Advanced'
p130
sa(dp131
S'description'
p132
S'The name of the variable that this Indicator operates on\n'
p133
sS'cpp_type'
p134
S'VariableName'
p135
sS'default'
p136
g3
sS'name'
p137
S'variable'
p138
sS'required'
p139
I01
sS'group_name'
p140
NsasS'name'
p141
S'/Adaptivity/Indicators/AnalyticalIndicator'
p142
sa(dp143
S'description'
p144
g3
sS'subblocks'
p145
NsS'parameters'
p146
(lp147
(dp148
S'description'
p149
S'The list of block ids (SubdomainID) that this object will be applied\n'
p150
sS'cpp_type'
p151
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p152
sS'default'
p153
g3
sS'name'
p154
S'block'
p155
sS'required'
p156
I00
sS'group_name'
p157
Nsa(dp158
S'description'
p159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p160
sS'cpp_type'
p161
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p162
sS'default'
p163
g3
sS'name'
p164
S'control_tags'
p165
sS'required'
p166
I00
sS'group_name'
p167
S'Advanced'
p168
sa(dp169
S'description'
p170
S'Set the enabled status of the MooseObject.\n'
p171
sS'cpp_type'
p172
S'bool'
p173
sS'default'
p174
S'1'
p175
sS'name'
p176
S'enable'
p177
sS'required'
p178
I00
sS'group_name'
p179
S'Advanced'
p180
sa(dp181
S'description'
p182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p183
sS'cpp_type'
p184
S'std::vector<OutputName, std::allocator<OutputName> >'
p185
sS'default'
p186
g3
sS'name'
p187
S'outputs'
p188
sS'required'
p189
I00
sS'group_name'
p190
S'Advanced'
p191
sa(dp192
S'description'
p193
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p194
sS'cpp_type'
p195
S'bool'
p196
sS'default'
p197
S'0'
p198
sS'name'
p199
S'scale_by_flux_faces'
p200
sS'required'
p201
I00
sS'group_name'
p202
Nsa(dp203
S'description'
p204
g3
sS'cpp_type'
p205
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p206
sS'default'
p207
S'GradientJumpIndicator'
p208
sS'name'
p209
S'type'
p210
sS'required'
p211
I00
sS'group_name'
p212
Nsa(dp213
S'description'
p214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p215
sS'cpp_type'
p216
S'bool'
p217
sS'default'
p218
S'0'
p219
sS'name'
p220
S'use_displaced_mesh'
p221
sS'required'
p222
I00
sS'group_name'
p223
S'Advanced'
p224
sa(dp225
S'description'
p226
S'The name of the variable that this side indicator applies to\n'
p227
sS'cpp_type'
p228
S'VariableName'
p229
sS'default'
p230
g3
sS'name'
p231
S'variable'
p232
sS'required'
p233
I01
sS'group_name'
p234
NsasS'name'
p235
S'/Adaptivity/Indicators/GradientJumpIndicator'
p236
sa(dp237
S'description'
p238
g3
sS'subblocks'
p239
NsS'parameters'
p240
(lp241
(dp242
S'description'
p243
S'The list of block ids (SubdomainID) that this object will be applied\n'
p244
sS'cpp_type'
p245
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p246
sS'default'
p247
g3
sS'name'
p248
S'block'
p249
sS'required'
p250
I00
sS'group_name'
p251
Nsa(dp252
S'description'
p253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p254
sS'cpp_type'
p255
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p256
sS'default'
p257
g3
sS'name'
p258
S'control_tags'
p259
sS'required'
p260
I00
sS'group_name'
p261
S'Advanced'
p262
sa(dp263
S'description'
p264
S'Set the enabled status of the MooseObject.\n'
p265
sS'cpp_type'
p266
S'bool'
p267
sS'default'
p268
S'1'
p269
sS'name'
p270
S'enable'
p271
sS'required'
p272
I00
sS'group_name'
p273
S'Advanced'
p274
sa(dp275
S'description'
p276
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p277
sS'cpp_type'
p278
S'std::vector<OutputName, std::allocator<OutputName> >'
p279
sS'default'
p280
g3
sS'name'
p281
S'outputs'
p282
sS'required'
p283
I00
sS'group_name'
p284
S'Advanced'
p285
sa(dp286
S'description'
p287
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p288
sS'cpp_type'
p289
S'bool'
p290
sS'default'
p291
S'0'
p292
sS'name'
p293
S'scale_by_flux_faces'
p294
sS'required'
p295
I00
sS'group_name'
p296
Nsa(dp297
S'description'
p298
g3
sS'cpp_type'
p299
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p300
sS'default'
p301
S'LaplacianJumpIndicator'
p302
sS'name'
p303
S'type'
p304
sS'required'
p305
I00
sS'group_name'
p306
Nsa(dp307
S'description'
p308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p309
sS'cpp_type'
p310
S'bool'
p311
sS'default'
p312
S'0'
p313
sS'name'
p314
S'use_displaced_mesh'
p315
sS'required'
p316
I00
sS'group_name'
p317
S'Advanced'
p318
sa(dp319
S'description'
p320
S'The name of the variable that this side indicator applies to\n'
p321
sS'cpp_type'
p322
S'VariableName'
p323
sS'default'
p324
g3
sS'name'
p325
S'variable'
p326
sS'required'
p327
I01
sS'group_name'
p328
NsasS'name'
p329
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p330
sasS'parameters'
p331
NsS'name'
p332
S'/Adaptivity/Indicators'
p333
sa(dp334
S'description'
p335
g3
sS'subblocks'
p336
(lp337
(dp338
S'description'
p339
g3
sS'subblocks'
p340
NsS'parameters'
p341
(lp342
(dp343
S'description'
p344
S'The block id where this object lives.\n'
p345
sS'cpp_type'
p346
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p347
sS'default'
p348
g3
sS'name'
p349
S'block'
p350
sS'required'
p351
I00
sS'group_name'
p352
Nsa(dp353
S'description'
p354
S'A string representing the Moose Object that will be built by this Action\n'
p355
sS'cpp_type'
p356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p357
sS'default'
p358
g3
sS'name'
p359
S'type'
p360
sS'required'
p361
I01
sS'group_name'
p362
NsasS'name'
p363
S'/Adaptivity/Markers/*'
p364
sa(dp365
S'description'
p366
S"Marks the region inside and outside of a 'box' domain for refinement or coarsening.\n"
p367
sS'subblocks'
p368
NsS'parameters'
p369
(lp370
(dp371
S'description'
p372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p373
sS'cpp_type'
p374
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p375
sS'default'
p376
g3
sS'name'
p377
S'block'
p378
sS'required'
p379
I00
sS'group_name'
p380
Nsa(dp381
S'description'
p382
S'The bottom left point (in x,y,z with spaces in-between).\n'
p383
sS'cpp_type'
p384
S'libMesh::VectorValue<double>'
p385
sS'default'
p386
g3
sS'name'
p387
S'bottom_left'
p388
sS'required'
p389
I01
sS'group_name'
p390
Nsa(dp391
S'description'
p392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p393
sS'cpp_type'
p394
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p395
sS'default'
p396
g3
sS'name'
p397
S'control_tags'
p398
sS'required'
p399
I00
sS'group_name'
p400
S'Advanced'
p401
sa(dp402
S'description'
p403
S'Set the enabled status of the MooseObject.\n'
p404
sS'cpp_type'
p405
S'bool'
p406
sS'default'
p407
S'1'
p408
sS'name'
p409
S'enable'
p410
sS'required'
p411
I00
sS'group_name'
p412
S'Advanced'
p413
sa(dp414
S'name'
p415
S'inside'
p416
sS'cpp_type'
p417
S'MooseEnum'
p418
sS'default'
p419
g3
sS'description'
p420
S'How to mark elements inside the box.\n'
p421
sS'required'
p422
I01
sS'options'
p423
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p424
sS'group_name'
p425
Nsa(dp426
S'description'
p427
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p428
sS'cpp_type'
p429
S'std::vector<OutputName, std::allocator<OutputName> >'
p430
sS'default'
p431
g3
sS'name'
p432
S'outputs'
p433
sS'required'
p434
I00
sS'group_name'
p435
S'Advanced'
p436
sa(dp437
S'name'
p438
S'outside'
p439
sS'cpp_type'
p440
S'MooseEnum'
p441
sS'default'
p442
g3
sS'description'
p443
S'How to mark elements outside the box.\n'
p444
sS'required'
p445
I01
sS'options'
p446
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p447
sS'group_name'
p448
Nsa(dp449
S'description'
p450
S'The bottom left point (in x,y,z with spaces in-between).\n'
p451
sS'cpp_type'
p452
S'libMesh::VectorValue<double>'
p453
sS'default'
p454
g3
sS'name'
p455
S'top_right'
p456
sS'required'
p457
I01
sS'group_name'
p458
Nsa(dp459
S'description'
p460
g3
sS'cpp_type'
p461
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p462
sS'default'
p463
S'BoxMarker'
p464
sS'name'
p465
S'type'
p466
sS'required'
p467
I00
sS'group_name'
p468
Nsa(dp469
S'description'
p470
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p471
sS'cpp_type'
p472
S'bool'
p473
sS'default'
p474
S'0'
p475
sS'name'
p476
S'use_displaced_mesh'
p477
sS'required'
p478
I00
sS'group_name'
p479
S'Advanced'
p480
sasS'name'
p481
S'/Adaptivity/Markers/BoxMarker'
p482
sa(dp483
S'description'
p484
S'A marker that converts many markers into a single marker by considering the maximum value of the listed markers (i.e., refinement takes precedent).\n'
p485
sS'subblocks'
p486
NsS'parameters'
p487
(lp488
(dp489
S'description'
p490
S'The list of block ids (SubdomainID) that this object will be applied\n'
p491
sS'cpp_type'
p492
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p493
sS'default'
p494
g3
sS'name'
p495
S'block'
p496
sS'required'
p497
I00
sS'group_name'
p498
Nsa(dp499
S'description'
p500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p501
sS'cpp_type'
p502
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p503
sS'default'
p504
g3
sS'name'
p505
S'control_tags'
p506
sS'required'
p507
I00
sS'group_name'
p508
S'Advanced'
p509
sa(dp510
S'description'
p511
S'Set the enabled status of the MooseObject.\n'
p512
sS'cpp_type'
p513
S'bool'
p514
sS'default'
p515
S'1'
p516
sS'name'
p517
S'enable'
p518
sS'required'
p519
I00
sS'group_name'
p520
S'Advanced'
p521
sa(dp522
S'description'
p523
S'A list of marker names to combine into a single marker.\n'
p524
sS'cpp_type'
p525
S'std::vector<MarkerName, std::allocator<MarkerName> >'
p526
sS'default'
p527
g3
sS'name'
p528
S'markers'
p529
sS'required'
p530
I01
sS'group_name'
p531
Nsa(dp532
S'description'
p533
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p534
sS'cpp_type'
p535
S'std::vector<OutputName, std::allocator<OutputName> >'
p536
sS'default'
p537
g3
sS'name'
p538
S'outputs'
p539
sS'required'
p540
I00
sS'group_name'
p541
S'Advanced'
p542
sa(dp543
S'description'
p544
g3
sS'cpp_type'
p545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p546
sS'default'
p547
S'ComboMarker'
p548
sS'name'
p549
S'type'
p550
sS'required'
p551
I00
sS'group_name'
p552
Nsa(dp553
S'description'
p554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p555
sS'cpp_type'
p556
S'bool'
p557
sS'default'
p558
S'0'
p559
sS'name'
p560
S'use_displaced_mesh'
p561
sS'required'
p562
I00
sS'group_name'
p563
S'Advanced'
p564
sasS'name'
p565
S'/Adaptivity/Markers/ComboMarker'
p566
sa(dp567
S'description'
p568
S'Marks elements for refinement or coarsening based on the fraction of the total error from the supplied indicator.\n'
p569
sS'subblocks'
p570
NsS'parameters'
p571
(lp572
(dp573
S'description'
p574
S'The list of block ids (SubdomainID) that this object will be applied\n'
p575
sS'cpp_type'
p576
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p577
sS'default'
p578
g3
sS'name'
p579
S'block'
p580
sS'required'
p581
I00
sS'group_name'
p582
Nsa(dp583
S'description'
p584
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p585
sS'cpp_type'
p586
S'double'
p587
sS'default'
p588
S'0'
p589
sS'name'
p590
S'coarsen'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p596
sS'cpp_type'
p597
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p598
sS'default'
p599
g3
sS'name'
p600
S'control_tags'
p601
sS'required'
p602
I00
sS'group_name'
p603
S'Advanced'
p604
sa(dp605
S'description'
p606
S'Set the enabled status of the MooseObject.\n'
p607
sS'cpp_type'
p608
S'bool'
p609
sS'default'
p610
S'1'
p611
sS'name'
p612
S'enable'
p613
sS'required'
p614
I00
sS'group_name'
p615
S'Advanced'
p616
sa(dp617
S'description'
p618
S'The name of the Indicator that this Marker uses.\n'
p619
sS'cpp_type'
p620
S'IndicatorName'
p621
sS'default'
p622
g3
sS'name'
p623
S'indicator'
p624
sS'required'
p625
I01
sS'group_name'
p626
Nsa(dp627
S'description'
p628
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p629
sS'cpp_type'
p630
S'std::vector<OutputName, std::allocator<OutputName> >'
p631
sS'default'
p632
g3
sS'name'
p633
S'outputs'
p634
sS'required'
p635
I00
sS'group_name'
p636
S'Advanced'
p637
sa(dp638
S'description'
p639
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p640
sS'cpp_type'
p641
S'double'
p642
sS'default'
p643
S'0'
p644
sS'name'
p645
S'refine'
p646
sS'required'
p647
I00
sS'group_name'
p648
Nsa(dp649
S'description'
p650
g3
sS'cpp_type'
p651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p652
sS'default'
p653
S'ErrorFractionMarker'
p654
sS'name'
p655
S'type'
p656
sS'required'
p657
I00
sS'group_name'
p658
Nsa(dp659
S'description'
p660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p661
sS'cpp_type'
p662
S'bool'
p663
sS'default'
p664
S'0'
p665
sS'name'
p666
S'use_displaced_mesh'
p667
sS'required'
p668
I00
sS'group_name'
p669
S'Advanced'
p670
sasS'name'
p671
S'/Adaptivity/Markers/ErrorFractionMarker'
p672
sa(dp673
S'description'
p674
S'Coarsen or refine elements based on an absolute tolerance allowed from the supplied indicator.\n'
p675
sS'subblocks'
p676
NsS'parameters'
p677
(lp678
(dp679
S'description'
p680
S'The list of block ids (SubdomainID) that this object will be applied\n'
p681
sS'cpp_type'
p682
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p683
sS'default'
p684
g3
sS'name'
p685
S'block'
p686
sS'required'
p687
I00
sS'group_name'
p688
Nsa(dp689
S'description'
p690
S'Elements with error less than this will be coarsened.\n'
p691
sS'cpp_type'
p692
S'double'
p693
sS'default'
p694
S'0'
p695
sS'name'
p696
S'coarsen'
p697
sS'required'
p698
I00
sS'group_name'
p699
Nsa(dp700
S'description'
p701
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p702
sS'cpp_type'
p703
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p704
sS'default'
p705
g3
sS'name'
p706
S'control_tags'
p707
sS'required'
p708
I00
sS'group_name'
p709
S'Advanced'
p710
sa(dp711
S'description'
p712
S'Set the enabled status of the MooseObject.\n'
p713
sS'cpp_type'
p714
S'bool'
p715
sS'default'
p716
S'1'
p717
sS'name'
p718
S'enable'
p719
sS'required'
p720
I00
sS'group_name'
p721
S'Advanced'
p722
sa(dp723
S'description'
p724
S'The name of the Indicator that this Marker uses.\n'
p725
sS'cpp_type'
p726
S'IndicatorName'
p727
sS'default'
p728
g3
sS'name'
p729
S'indicator'
p730
sS'required'
p731
I01
sS'group_name'
p732
Nsa(dp733
S'description'
p734
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p735
sS'cpp_type'
p736
S'std::vector<OutputName, std::allocator<OutputName> >'
p737
sS'default'
p738
g3
sS'name'
p739
S'outputs'
p740
sS'required'
p741
I00
sS'group_name'
p742
S'Advanced'
p743
sa(dp744
S'description'
p745
S'Elements with error more than this will be refined.\n'
p746
sS'cpp_type'
p747
S'double'
p748
sS'default'
p749
S'1.79769e+308'
p750
sS'name'
p751
S'refine'
p752
sS'required'
p753
I00
sS'group_name'
p754
Nsa(dp755
S'description'
p756
g3
sS'cpp_type'
p757
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p758
sS'default'
p759
S'ErrorToleranceMarker'
p760
sS'name'
p761
S'type'
p762
sS'required'
p763
I00
sS'group_name'
p764
Nsa(dp765
S'description'
p766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p767
sS'cpp_type'
p768
S'bool'
p769
sS'default'
p770
S'0'
p771
sS'name'
p772
S'use_displaced_mesh'
p773
sS'required'
p774
I00
sS'group_name'
p775
S'Advanced'
p776
sasS'name'
p777
S'/Adaptivity/Markers/ErrorToleranceMarker'
p778
sa(dp779
S'description'
p780
S'Marks inside and outside a box that can have arbitrary orientation and center point.\n'
p781
sS'subblocks'
p782
NsS'parameters'
p783
(lp784
(dp785
S'description'
p786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p787
sS'cpp_type'
p788
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p789
sS'default'
p790
g3
sS'name'
p791
S'block'
p792
sS'required'
p793
I00
sS'group_name'
p794
Nsa(dp795
S'description'
p796
S"The center (many people spell this 'center') of the box.\n"
p797
sS'cpp_type'
p798
S'libMesh::Point'
p799
sS'default'
p800
g3
sS'name'
p801
S'center'
p802
sS'required'
p803
I01
sS'group_name'
p804
Nsa(dp805
S'description'
p806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p807
sS'cpp_type'
p808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p809
sS'default'
p810
g3
sS'name'
p811
S'control_tags'
p812
sS'required'
p813
I00
sS'group_name'
p814
S'Advanced'
p815
sa(dp816
S'description'
p817
S'Set the enabled status of the MooseObject.\n'
p818
sS'cpp_type'
p819
S'bool'
p820
sS'default'
p821
S'1'
p822
sS'name'
p823
S'enable'
p824
sS'required'
p825
I00
sS'group_name'
p826
S'Advanced'
p827
sa(dp828
S'description'
p829
S'The height of the box\n'
p830
sS'cpp_type'
p831
S'double'
p832
sS'default'
p833
g3
sS'name'
p834
S'height'
p835
sS'required'
p836
I01
sS'group_name'
p837
Nsa(dp838
S'name'
p839
S'inside'
p840
sS'cpp_type'
p841
S'MooseEnum'
p842
sS'default'
p843
g3
sS'description'
p844
S'How to mark elements inside the box.\n'
p845
sS'required'
p846
I01
sS'options'
p847
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p848
sS'group_name'
p849
Nsa(dp850
S'description'
p851
S'The length of the box\n'
p852
sS'cpp_type'
p853
S'double'
p854
sS'default'
p855
g3
sS'name'
p856
S'length'
p857
sS'required'
p858
I01
sS'group_name'
p859
Nsa(dp860
S'description'
p861
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p862
sS'cpp_type'
p863
S'libMesh::VectorValue<double>'
p864
sS'default'
p865
g3
sS'name'
p866
S'length_direction'
p867
sS'required'
p868
I01
sS'group_name'
p869
Nsa(dp870
S'description'
p871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p872
sS'cpp_type'
p873
S'std::vector<OutputName, std::allocator<OutputName> >'
p874
sS'default'
p875
g3
sS'name'
p876
S'outputs'
p877
sS'required'
p878
I00
sS'group_name'
p879
S'Advanced'
p880
sa(dp881
S'name'
p882
S'outside'
p883
sS'cpp_type'
p884
S'MooseEnum'
p885
sS'default'
p886
g3
sS'description'
p887
S'How to mark elements outside the box.\n'
p888
sS'required'
p889
I01
sS'options'
p890
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p891
sS'group_name'
p892
Nsa(dp893
S'description'
p894
g3
sS'cpp_type'
p895
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p896
sS'default'
p897
S'OrientedBoxMarker'
p898
sS'name'
p899
S'type'
p900
sS'required'
p901
I00
sS'group_name'
p902
Nsa(dp903
S'description'
p904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p905
sS'cpp_type'
p906
S'bool'
p907
sS'default'
p908
S'0'
p909
sS'name'
p910
S'use_displaced_mesh'
p911
sS'required'
p912
I00
sS'group_name'
p913
S'Advanced'
p914
sa(dp915
S'description'
p916
S'The width of the box\n'
p917
sS'cpp_type'
p918
S'double'
p919
sS'default'
p920
g3
sS'name'
p921
S'width'
p922
sS'required'
p923
I01
sS'group_name'
p924
Nsa(dp925
S'description'
p926
S'The direction along which the width is oriented.\n'
p927
sS'cpp_type'
p928
S'libMesh::VectorValue<double>'
p929
sS'default'
p930
g3
sS'name'
p931
S'width_direction'
p932
sS'required'
p933
I01
sS'group_name'
p934
NsasS'name'
p935
S'/Adaptivity/Markers/OrientedBoxMarker'
p936
sa(dp937
S'description'
p938
S'Uniformly mark all elements for refinement or coarsening.\n'
p939
sS'subblocks'
p940
NsS'parameters'
p941
(lp942
(dp943
S'description'
p944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p945
sS'cpp_type'
p946
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p947
sS'default'
p948
g3
sS'name'
p949
S'block'
p950
sS'required'
p951
I00
sS'group_name'
p952
Nsa(dp953
S'description'
p954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p955
sS'cpp_type'
p956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p957
sS'default'
p958
g3
sS'name'
p959
S'control_tags'
p960
sS'required'
p961
I00
sS'group_name'
p962
S'Advanced'
p963
sa(dp964
S'description'
p965
S'Set the enabled status of the MooseObject.\n'
p966
sS'cpp_type'
p967
S'bool'
p968
sS'default'
p969
S'1'
p970
sS'name'
p971
S'enable'
p972
sS'required'
p973
I00
sS'group_name'
p974
S'Advanced'
p975
sa(dp976
S'name'
p977
S'mark'
p978
sS'cpp_type'
p979
S'MooseEnum'
p980
sS'default'
p981
g3
sS'description'
p982
S'How to mark elements.\n'
p983
sS'required'
p984
I01
sS'options'
p985
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p986
sS'group_name'
p987
Nsa(dp988
S'description'
p989
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p990
sS'cpp_type'
p991
S'std::vector<OutputName, std::allocator<OutputName> >'
p992
sS'default'
p993
g3
sS'name'
p994
S'outputs'
p995
sS'required'
p996
I00
sS'group_name'
p997
S'Advanced'
p998
sa(dp999
S'description'
p1000
g3
sS'cpp_type'
p1001
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1002
sS'default'
p1003
S'UniformMarker'
p1004
sS'name'
p1005
S'type'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1011
sS'cpp_type'
p1012
S'bool'
p1013
sS'default'
p1014
S'0'
p1015
sS'name'
p1016
S'use_displaced_mesh'
p1017
sS'required'
p1018
I00
sS'group_name'
p1019
S'Advanced'
p1020
sasS'name'
p1021
S'/Adaptivity/Markers/UniformMarker'
p1022
sa(dp1023
S'description'
p1024
S'Mark elements for adaptivity based on the supplied upper and lower bounds and the specified variable.\n'
p1025
sS'subblocks'
p1026
NsS'parameters'
p1027
(lp1028
(dp1029
S'description'
p1030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1031
sS'cpp_type'
p1032
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1033
sS'default'
p1034
g3
sS'name'
p1035
S'block'
p1036
sS'required'
p1037
I00
sS'group_name'
p1038
Nsa(dp1039
S'description'
p1040
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p1041
sS'cpp_type'
p1042
S'double'
p1043
sS'default'
p1044
S'0'
p1045
sS'name'
p1046
S'buffer_size'
p1047
sS'required'
p1048
I00
sS'group_name'
p1049
Nsa(dp1050
S'description'
p1051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1052
sS'cpp_type'
p1053
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1054
sS'default'
p1055
g3
sS'name'
p1056
S'control_tags'
p1057
sS'required'
p1058
I00
sS'group_name'
p1059
S'Advanced'
p1060
sa(dp1061
S'description'
p1062
S'Set the enabled status of the MooseObject.\n'
p1063
sS'cpp_type'
p1064
S'bool'
p1065
sS'default'
p1066
S'1'
p1067
sS'name'
p1068
S'enable'
p1069
sS'required'
p1070
I00
sS'group_name'
p1071
S'Advanced'
p1072
sa(dp1073
S'description'
p1074
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p1075
sS'cpp_type'
p1076
S'bool'
p1077
sS'default'
p1078
S'0'
p1079
sS'name'
p1080
S'invert'
p1081
sS'required'
p1082
I00
sS'group_name'
p1083
Nsa(dp1084
S'description'
p1085
S'The lower bound value for the range.\n'
p1086
sS'cpp_type'
p1087
S'double'
p1088
sS'default'
p1089
g3
sS'name'
p1090
S'lower_bound'
p1091
sS'required'
p1092
I01
sS'group_name'
p1093
Nsa(dp1094
S'description'
p1095
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1096
sS'cpp_type'
p1097
S'std::vector<OutputName, std::allocator<OutputName> >'
p1098
sS'default'
p1099
g3
sS'name'
p1100
S'outputs'
p1101
sS'required'
p1102
I00
sS'group_name'
p1103
S'Advanced'
p1104
sa(dp1105
S'name'
p1106
S'third_state'
p1107
sS'cpp_type'
p1108
S'MooseEnum'
p1109
sS'default'
p1110
S'DONT_MARK'
p1111
sS'description'
p1112
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p1113
sS'required'
p1114
I00
sS'options'
p1115
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1116
sS'group_name'
p1117
Nsa(dp1118
S'description'
p1119
g3
sS'cpp_type'
p1120
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1121
sS'default'
p1122
S'ValueRangeMarker'
p1123
sS'name'
p1124
S'type'
p1125
sS'required'
p1126
I00
sS'group_name'
p1127
Nsa(dp1128
S'description'
p1129
S'The upper bound value for the range.\n'
p1130
sS'cpp_type'
p1131
S'double'
p1132
sS'default'
p1133
g3
sS'name'
p1134
S'upper_bound'
p1135
sS'required'
p1136
I01
sS'group_name'
p1137
Nsa(dp1138
S'description'
p1139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1140
sS'cpp_type'
p1141
S'bool'
p1142
sS'default'
p1143
S'0'
p1144
sS'name'
p1145
S'use_displaced_mesh'
p1146
sS'required'
p1147
I00
sS'group_name'
p1148
S'Advanced'
p1149
sa(dp1150
S'description'
p1151
S'The variable whose values are used in this marker.\n'
p1152
sS'cpp_type'
p1153
S'std::vector<VariableName>'
p1154
sS'default'
p1155
g3
sS'name'
p1156
S'variable'
p1157
sS'required'
p1158
I01
sS'group_name'
p1159
NsasS'name'
p1160
S'/Adaptivity/Markers/ValueRangeMarker'
p1161
sa(dp1162
S'description'
p1163
S'The the refinement state based on a threshold value compared to the specified variable.\n'
p1164
sS'subblocks'
p1165
NsS'parameters'
p1166
(lp1167
(dp1168
S'description'
p1169
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1170
sS'cpp_type'
p1171
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1172
sS'default'
p1173
g3
sS'name'
p1174
S'block'
p1175
sS'required'
p1176
I00
sS'group_name'
p1177
Nsa(dp1178
S'description'
p1179
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p1180
sS'cpp_type'
p1181
S'double'
p1182
sS'default'
p1183
g3
sS'name'
p1184
S'coarsen'
p1185
sS'required'
p1186
I00
sS'group_name'
p1187
Nsa(dp1188
S'description'
p1189
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1190
sS'cpp_type'
p1191
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1192
sS'default'
p1193
g3
sS'name'
p1194
S'control_tags'
p1195
sS'required'
p1196
I00
sS'group_name'
p1197
S'Advanced'
p1198
sa(dp1199
S'description'
p1200
S'Set the enabled status of the MooseObject.\n'
p1201
sS'cpp_type'
p1202
S'bool'
p1203
sS'default'
p1204
S'1'
p1205
sS'name'
p1206
S'enable'
p1207
sS'required'
p1208
I00
sS'group_name'
p1209
S'Advanced'
p1210
sa(dp1211
S'description'
p1212
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p1213
sS'cpp_type'
p1214
S'bool'
p1215
sS'default'
p1216
S'0'
p1217
sS'name'
p1218
S'invert'
p1219
sS'required'
p1220
I00
sS'group_name'
p1221
Nsa(dp1222
S'description'
p1223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1224
sS'cpp_type'
p1225
S'std::vector<OutputName, std::allocator<OutputName> >'
p1226
sS'default'
p1227
g3
sS'name'
p1228
S'outputs'
p1229
sS'required'
p1230
I00
sS'group_name'
p1231
S'Advanced'
p1232
sa(dp1233
S'description'
p1234
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p1235
sS'cpp_type'
p1236
S'double'
p1237
sS'default'
p1238
g3
sS'name'
p1239
S'refine'
p1240
sS'required'
p1241
I00
sS'group_name'
p1242
Nsa(dp1243
S'name'
p1244
S'third_state'
p1245
sS'cpp_type'
p1246
S'MooseEnum'
p1247
sS'default'
p1248
S'DONT_MARK'
p1249
sS'description'
p1250
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p1251
sS'required'
p1252
I00
sS'options'
p1253
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1254
sS'group_name'
p1255
Nsa(dp1256
S'description'
p1257
g3
sS'cpp_type'
p1258
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1259
sS'default'
p1260
S'ValueThresholdMarker'
p1261
sS'name'
p1262
S'type'
p1263
sS'required'
p1264
I00
sS'group_name'
p1265
Nsa(dp1266
S'description'
p1267
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1268
sS'cpp_type'
p1269
S'bool'
p1270
sS'default'
p1271
S'0'
p1272
sS'name'
p1273
S'use_displaced_mesh'
p1274
sS'required'
p1275
I00
sS'group_name'
p1276
S'Advanced'
p1277
sa(dp1278
S'description'
p1279
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1280
sS'cpp_type'
p1281
S'std::vector<VariableName>'
p1282
sS'default'
p1283
g3
sS'name'
p1284
S'variable'
p1285
sS'required'
p1286
I01
sS'group_name'
p1287
NsasS'name'
p1288
S'/Adaptivity/Markers/ValueThresholdMarker'
p1289
sasS'parameters'
p1290
NsS'name'
p1291
S'/Adaptivity/Markers'
p1292
sasS'parameters'
p1293
(lp1294
(dp1295
S'description'
p1296
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1297
sS'cpp_type'
p1298
S'unsigned int'
p1299
sS'default'
p1300
S'1'
p1301
sS'name'
p1302
S'cycles_per_step'
p1303
sS'required'
p1304
I00
sS'group_name'
p1305
Nsa(dp1306
S'description'
p1307
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1308
sS'cpp_type'
p1309
S'MarkerName'
p1310
sS'default'
p1311
g3
sS'name'
p1312
S'initial_marker'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The number of adaptive steps to do based on the initial condition.\n'
p1318
sS'cpp_type'
p1319
S'unsigned int'
p1320
sS'default'
p1321
S'0'
p1322
sS'name'
p1323
S'initial_steps'
p1324
sS'required'
p1325
I00
sS'group_name'
p1326
Nsa(dp1327
S'description'
p1328
S'The name of the Marker to use to actually adapt the mesh.\n'
p1329
sS'cpp_type'
p1330
S'MarkerName'
p1331
sS'default'
p1332
g3
sS'name'
p1333
S'marker'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
Nsa(dp1337
S'description'
p1338
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1339
sS'cpp_type'
p1340
S'unsigned int'
p1341
sS'default'
p1342
S'0'
p1343
sS'name'
p1344
S'max_h_level'
p1345
sS'required'
p1346
I00
sS'group_name'
p1347
Nsa(dp1348
S'description'
p1349
S'Recompute markers during adaptivity cycles\n'
p1350
sS'cpp_type'
p1351
S'bool'
p1352
sS'default'
p1353
S'0'
p1354
sS'name'
p1355
S'recompute_markers_during_cycles'
p1356
sS'required'
p1357
I00
sS'group_name'
p1358
Nsa(dp1359
S'description'
p1360
S'The time that adaptivity will be active after.\n'
p1361
sS'cpp_type'
p1362
S'double'
p1363
sS'default'
p1364
S'-1.79769e+308'
p1365
sS'name'
p1366
S'start_time'
p1367
sS'required'
p1368
I00
sS'group_name'
p1369
Nsa(dp1370
S'description'
p1371
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1372
sS'cpp_type'
p1373
S'unsigned int'
p1374
sS'default'
p1375
S'0'
p1376
sS'name'
p1377
S'steps'
p1378
sS'required'
p1379
I00
sS'group_name'
p1380
Nsa(dp1381
S'description'
p1382
S'The time after which adaptivity will no longer be active.\n'
p1383
sS'cpp_type'
p1384
S'double'
p1385
sS'default'
p1386
S'1.79769e+308'
p1387
sS'name'
p1388
S'stop_time'
p1389
sS'required'
p1390
I00
sS'group_name'
p1391
NsasS'name'
p1392
S'/Adaptivity'
p1393
sa(dp1394
S'description'
p1395
g3
sS'subblocks'
p1396
(lp1397
(dp1398
S'description'
p1399
g3
sS'subblocks'
p1400
NsS'parameters'
p1401
(lp1402
(dp1403
S'description'
p1404
S'A string representing the Moose Object that will be built by this Action\n'
p1405
sS'cpp_type'
p1406
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1407
sS'default'
p1408
g3
sS'name'
p1409
S'type'
p1410
sS'required'
p1411
I01
sS'group_name'
p1412
NsasS'name'
p1413
S'/AuxKernels/*'
p1414
sa(dp1415
S'description'
p1416
g3
sS'subblocks'
p1417
NsS'parameters'
p1418
(lp1419
(dp1420
S'description'
p1421
S'Variable whose values are to be accumulated into the current variable\n'
p1422
sS'cpp_type'
p1423
S'std::vector<VariableName>'
p1424
sS'default'
p1425
g3
sS'name'
p1426
S'accumulate_from_variable'
p1427
sS'required'
p1428
I01
sS'group_name'
p1429
Nsa(dp1430
S'description'
p1431
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1432
sS'cpp_type'
p1433
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1434
sS'default'
p1435
g3
sS'name'
p1436
S'block'
p1437
sS'required'
p1438
I00
sS'group_name'
p1439
Nsa(dp1440
S'description'
p1441
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1442
sS'cpp_type'
p1443
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1444
sS'default'
p1445
g3
sS'name'
p1446
S'boundary'
p1447
sS'required'
p1448
I00
sS'group_name'
p1449
Nsa(dp1450
S'description'
p1451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1452
sS'cpp_type'
p1453
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1454
sS'default'
p1455
g3
sS'name'
p1456
S'control_tags'
p1457
sS'required'
p1458
I00
sS'group_name'
p1459
S'Advanced'
p1460
sa(dp1461
S'description'
p1462
S'Set the enabled status of the MooseObject.\n'
p1463
sS'cpp_type'
p1464
S'bool'
p1465
sS'default'
p1466
S'1'
p1467
sS'name'
p1468
S'enable'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
S'Advanced'
p1472
sa(dp1473
S'name'
p1474
S'execute_on'
p1475
sS'cpp_type'
p1476
S'MultiMooseEnum'
p1477
sS'default'
p1478
S'LINEAR'
p1479
sS'description'
p1480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1481
sS'required'
p1482
I00
sS'options'
p1483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1484
sS'group_name'
p1485
Nsa(dp1486
S'description'
p1487
S'The seed for the master random number generator\n'
p1488
sS'cpp_type'
p1489
S'unsigned int'
p1490
sS'default'
p1491
S'0'
p1492
sS'name'
p1493
S'seed'
p1494
sS'required'
p1495
I00
sS'group_name'
p1496
S'Advanced'
p1497
sa(dp1498
S'description'
p1499
g3
sS'cpp_type'
p1500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1501
sS'default'
p1502
S'AccumulateAux'
p1503
sS'name'
p1504
S'type'
p1505
sS'required'
p1506
I00
sS'group_name'
p1507
Nsa(dp1508
S'description'
p1509
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1510
sS'cpp_type'
p1511
S'bool'
p1512
sS'default'
p1513
S'0'
p1514
sS'name'
p1515
S'use_displaced_mesh'
p1516
sS'required'
p1517
I00
sS'group_name'
p1518
S'Advanced'
p1519
sa(dp1520
S'description'
p1521
S'The name of the variable that this object applies to\n'
p1522
sS'cpp_type'
p1523
S'AuxVariableName'
p1524
sS'default'
p1525
g3
sS'name'
p1526
S'variable'
p1527
sS'required'
p1528
I01
sS'group_name'
p1529
NsasS'name'
p1530
S'/AuxKernels/AccumulateAux'
p1531
sa(dp1532
S'description'
p1533
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p1534
sS'subblocks'
p1535
NsS'parameters'
p1536
(lp1537
(dp1538
S'description'
p1539
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1540
sS'cpp_type'
p1541
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1542
sS'default'
p1543
g3
sS'name'
p1544
S'block'
p1545
sS'required'
p1546
I00
sS'group_name'
p1547
Nsa(dp1548
S'description'
p1549
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1550
sS'cpp_type'
p1551
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1552
sS'default'
p1553
g3
sS'name'
p1554
S'boundary'
p1555
sS'required'
p1556
I00
sS'group_name'
p1557
Nsa(dp1558
S'description'
p1559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1560
sS'cpp_type'
p1561
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1562
sS'default'
p1563
g3
sS'name'
p1564
S'control_tags'
p1565
sS'required'
p1566
I00
sS'group_name'
p1567
S'Advanced'
p1568
sa(dp1569
S'description'
p1570
S'Set the enabled status of the MooseObject.\n'
p1571
sS'cpp_type'
p1572
S'bool'
p1573
sS'default'
p1574
S'1'
p1575
sS'name'
p1576
S'enable'
p1577
sS'required'
p1578
I00
sS'group_name'
p1579
S'Advanced'
p1580
sa(dp1581
S'name'
p1582
S'execute_on'
p1583
sS'cpp_type'
p1584
S'MultiMooseEnum'
p1585
sS'default'
p1586
S'LINEAR'
p1587
sS'description'
p1588
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1589
sS'required'
p1590
I00
sS'options'
p1591
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1592
sS'group_name'
p1593
Nsa(dp1594
S'description'
p1595
S'Array of coupled variables (num_name)\n'
p1596
sS'cpp_type'
p1597
S'unsigned int'
p1598
sS'default'
p1599
g3
sS'name'
p1600
S'op_num'
p1601
sS'required'
p1602
I00
sS'group_name'
p1603
Nsa(dp1604
S'description'
p1605
S'The seed for the master random number generator\n'
p1606
sS'cpp_type'
p1607
S'unsigned int'
p1608
sS'default'
p1609
S'0'
p1610
sS'name'
p1611
S'seed'
p1612
sS'required'
p1613
I00
sS'group_name'
p1614
S'Advanced'
p1615
sa(dp1616
S'description'
p1617
g3
sS'cpp_type'
p1618
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1619
sS'default'
p1620
S'BndsCalcAux'
p1621
sS'name'
p1622
S'type'
p1623
sS'required'
p1624
I00
sS'group_name'
p1625
Nsa(dp1626
S'description'
p1627
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1628
sS'cpp_type'
p1629
S'bool'
p1630
sS'default'
p1631
S'0'
p1632
sS'name'
p1633
S'use_displaced_mesh'
p1634
sS'required'
p1635
I00
sS'group_name'
p1636
S'Advanced'
p1637
sa(dp1638
S'description'
p1639
S'Array of coupled variables\n'
p1640
sS'cpp_type'
p1641
S'std::vector<VariableName>'
p1642
sS'default'
p1643
g3
sS'name'
p1644
S'v'
p1645
sS'required'
p1646
I01
sS'group_name'
p1647
Nsa(dp1648
S'description'
p1649
S'Array of coupled variables (base_name)\n'
p1650
sS'cpp_type'
p1651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1652
sS'default'
p1653
g3
sS'name'
p1654
S'var_name_base'
p1655
sS'required'
p1656
I00
sS'group_name'
p1657
Nsa(dp1658
S'description'
p1659
S'The name of the variable that this object applies to\n'
p1660
sS'cpp_type'
p1661
S'AuxVariableName'
p1662
sS'default'
p1663
g3
sS'name'
p1664
S'variable'
p1665
sS'required'
p1666
I01
sS'group_name'
p1667
NsasS'name'
p1668
S'/AuxKernels/BndsCalcAux'
p1669
sa(dp1670
S'description'
p1671
g3
sS'subblocks'
p1672
NsS'parameters'
p1673
(lp1674
(dp1675
S'description'
p1676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1677
sS'cpp_type'
p1678
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'block'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1687
sS'cpp_type'
p1688
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'boundary'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'description'
p1696
S'The variable to be bounded\n'
p1697
sS'cpp_type'
p1698
S'std::vector<VariableName>'
p1699
sS'default'
p1700
g3
sS'name'
p1701
S'bounded_variable'
p1702
sS'required'
p1703
I01
sS'group_name'
p1704
Nsa(dp1705
S'description'
p1706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1707
sS'cpp_type'
p1708
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1709
sS'default'
p1710
g3
sS'name'
p1711
S'control_tags'
p1712
sS'required'
p1713
I00
sS'group_name'
p1714
S'Advanced'
p1715
sa(dp1716
S'description'
p1717
S'Set the enabled status of the MooseObject.\n'
p1718
sS'cpp_type'
p1719
S'bool'
p1720
sS'default'
p1721
S'1'
p1722
sS'name'
p1723
S'enable'
p1724
sS'required'
p1725
I00
sS'group_name'
p1726
S'Advanced'
p1727
sa(dp1728
S'name'
p1729
S'execute_on'
p1730
sS'cpp_type'
p1731
S'MultiMooseEnum'
p1732
sS'default'
p1733
S'LINEAR'
p1734
sS'description'
p1735
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1736
sS'required'
p1737
I00
sS'options'
p1738
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1739
sS'group_name'
p1740
Nsa(dp1741
S'description'
p1742
S'The lower bound for the variable\n'
p1743
sS'cpp_type'
p1744
S'double'
p1745
sS'default'
p1746
g3
sS'name'
p1747
S'lower'
p1748
sS'required'
p1749
I00
sS'group_name'
p1750
Nsa(dp1751
S'description'
p1752
S'The seed for the master random number generator\n'
p1753
sS'cpp_type'
p1754
S'unsigned int'
p1755
sS'default'
p1756
S'0'
p1757
sS'name'
p1758
S'seed'
p1759
sS'required'
p1760
I00
sS'group_name'
p1761
S'Advanced'
p1762
sa(dp1763
S'description'
p1764
g3
sS'cpp_type'
p1765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1766
sS'default'
p1767
S'BoundsAux'
p1768
sS'name'
p1769
S'type'
p1770
sS'required'
p1771
I00
sS'group_name'
p1772
Nsa(dp1773
S'description'
p1774
S'The upper bound for the variable\n'
p1775
sS'cpp_type'
p1776
S'double'
p1777
sS'default'
p1778
g3
sS'name'
p1779
S'upper'
p1780
sS'required'
p1781
I00
sS'group_name'
p1782
Nsa(dp1783
S'description'
p1784
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1785
sS'cpp_type'
p1786
S'bool'
p1787
sS'default'
p1788
S'0'
p1789
sS'name'
p1790
S'use_displaced_mesh'
p1791
sS'required'
p1792
I00
sS'group_name'
p1793
S'Advanced'
p1794
sa(dp1795
S'description'
p1796
S'The name of the variable that this object applies to\n'
p1797
sS'cpp_type'
p1798
S'AuxVariableName'
p1799
sS'default'
p1800
g3
sS'name'
p1801
S'variable'
p1802
sS'required'
p1803
I01
sS'group_name'
p1804
NsasS'name'
p1805
S'/AuxKernels/BoundsAux'
p1806
sa(dp1807
S'description'
p1808
g3
sS'subblocks'
p1809
NsS'parameters'
p1810
(lp1811
(dp1812
S'description'
p1813
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1814
sS'cpp_type'
p1815
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1816
sS'default'
p1817
g3
sS'name'
p1818
S'block'
p1819
sS'required'
p1820
I00
sS'group_name'
p1821
Nsa(dp1822
S'description'
p1823
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1824
sS'cpp_type'
p1825
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1826
sS'default'
p1827
g3
sS'name'
p1828
S'boundary'
p1829
sS'required'
p1830
I00
sS'group_name'
p1831
Nsa(dp1832
S'description'
p1833
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1834
sS'cpp_type'
p1835
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1836
sS'default'
p1837
g3
sS'name'
p1838
S'control_tags'
p1839
sS'required'
p1840
I00
sS'group_name'
p1841
S'Advanced'
p1842
sa(dp1843
S'description'
p1844
S'Set the enabled status of the MooseObject.\n'
p1845
sS'cpp_type'
p1846
S'bool'
p1847
sS'default'
p1848
S'1'
p1849
sS'name'
p1850
S'enable'
p1851
sS'required'
p1852
I00
sS'group_name'
p1853
S'Advanced'
p1854
sa(dp1855
S'name'
p1856
S'execute_on'
p1857
sS'cpp_type'
p1858
S'MultiMooseEnum'
p1859
sS'default'
p1860
S'LINEAR'
p1861
sS'description'
p1862
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1863
sS'required'
p1864
I00
sS'options'
p1865
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1866
sS'group_name'
p1867
Nsa(dp1868
S'description'
p1869
S'The seed for the master random number generator\n'
p1870
sS'cpp_type'
p1871
S'unsigned int'
p1872
sS'default'
p1873
S'0'
p1874
sS'name'
p1875
S'seed'
p1876
sS'required'
p1877
I00
sS'group_name'
p1878
S'Advanced'
p1879
sa(dp1880
S'description'
p1881
g3
sS'cpp_type'
p1882
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1883
sS'default'
p1884
S'ConstantAux'
p1885
sS'name'
p1886
S'type'
p1887
sS'required'
p1888
I00
sS'group_name'
p1889
Nsa(dp1890
S'description'
p1891
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1892
sS'cpp_type'
p1893
S'bool'
p1894
sS'default'
p1895
S'0'
p1896
sS'name'
p1897
S'use_displaced_mesh'
p1898
sS'required'
p1899
I00
sS'group_name'
p1900
S'Advanced'
p1901
sa(dp1902
S'description'
p1903
S'Some constant value that can be read from the input file\n'
p1904
sS'cpp_type'
p1905
S'double'
p1906
sS'default'
p1907
S'0'
p1908
sS'name'
p1909
S'value'
p1910
sS'required'
p1911
I00
sS'group_name'
p1912
Nsa(dp1913
S'description'
p1914
S'The name of the variable that this object applies to\n'
p1915
sS'cpp_type'
p1916
S'AuxVariableName'
p1917
sS'default'
p1918
g3
sS'name'
p1919
S'variable'
p1920
sS'required'
p1921
I01
sS'group_name'
p1922
NsasS'name'
p1923
S'/AuxKernels/ConstantAux'
p1924
sa(dp1925
S'description'
p1926
S'Free energy contribution from the cross terms in ACMultiInetrface\n'
p1927
sS'subblocks'
p1928
NsS'parameters'
p1929
(lp1930
(dp1931
S'description'
p1932
S'Coupled variable holding additional free energy contributions to be summed up\n'
p1933
sS'cpp_type'
p1934
S'std::vector<VariableName>'
p1935
sS'default'
p1936
S'0'
p1937
sS'name'
p1938
S'additional_free_energy'
p1939
sS'required'
p1940
I00
sS'group_name'
p1941
Nsa(dp1942
S'description'
p1943
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1944
sS'cpp_type'
p1945
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1946
sS'default'
p1947
g3
sS'name'
p1948
S'block'
p1949
sS'required'
p1950
I00
sS'group_name'
p1951
Nsa(dp1952
S'description'
p1953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1954
sS'cpp_type'
p1955
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1956
sS'default'
p1957
g3
sS'name'
p1958
S'boundary'
p1959
sS'required'
p1960
I00
sS'group_name'
p1961
Nsa(dp1962
S'description'
p1963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1964
sS'cpp_type'
p1965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1966
sS'default'
p1967
g3
sS'name'
p1968
S'control_tags'
p1969
sS'required'
p1970
I00
sS'group_name'
p1971
S'Advanced'
p1972
sa(dp1973
S'description'
p1974
S'Set the enabled status of the MooseObject.\n'
p1975
sS'cpp_type'
p1976
S'bool'
p1977
sS'default'
p1978
S'1'
p1979
sS'name'
p1980
S'enable'
p1981
sS'required'
p1982
I00
sS'group_name'
p1983
S'Advanced'
p1984
sa(dp1985
S'name'
p1986
S'execute_on'
p1987
sS'cpp_type'
p1988
S'MultiMooseEnum'
p1989
sS'default'
p1990
S'LINEAR'
p1991
sS'description'
p1992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1993
sS'required'
p1994
I00
sS'options'
p1995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1996
sS'group_name'
p1997
Nsa(dp1998
S'description'
p1999
S'Variable names that contribute to interfacial energy\n'
p2000
sS'cpp_type'
p2001
S'std::vector<VariableName>'
p2002
sS'default'
p2003
g3
sS'name'
p2004
S'interfacial_vars'
p2005
sS'required'
p2006
I00
sS'group_name'
p2007
Nsa(dp2008
S'description'
p2009
S'Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n'
p2010
sS'cpp_type'
p2011
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p2012
sS'default'
p2013
g3
sS'name'
p2014
S'kappa_names'
p2015
sS'required'
p2016
I01
sS'group_name'
p2017
Nsa(dp2018
S'description'
p2019
S'The seed for the master random number generator\n'
p2020
sS'cpp_type'
p2021
S'unsigned int'
p2022
sS'default'
p2023
S'0'
p2024
sS'name'
p2025
S'seed'
p2026
sS'required'
p2027
I00
sS'group_name'
p2028
S'Advanced'
p2029
sa(dp2030
S'description'
p2031
g3
sS'cpp_type'
p2032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2033
sS'default'
p2034
S'CrossTermGradientFreeEnergy'
p2035
sS'name'
p2036
S'type'
p2037
sS'required'
p2038
I00
sS'group_name'
p2039
Nsa(dp2040
S'description'
p2041
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2042
sS'cpp_type'
p2043
S'bool'
p2044
sS'default'
p2045
S'0'
p2046
sS'name'
p2047
S'use_displaced_mesh'
p2048
sS'required'
p2049
I00
sS'group_name'
p2050
S'Advanced'
p2051
sa(dp2052
S'description'
p2053
S'The name of the variable that this object applies to\n'
p2054
sS'cpp_type'
p2055
S'AuxVariableName'
p2056
sS'default'
p2057
g3
sS'name'
p2058
S'variable'
p2059
sS'required'
p2060
I01
sS'group_name'
p2061
NsasS'name'
p2062
S'/AuxKernels/CrossTermGradientFreeEnergy'
p2063
sa(dp2064
S'description'
p2065
S'Output updated rotation tensor to a file: Use for stereographic plots\n'
p2066
sS'subblocks'
p2067
NsS'parameters'
p2068
(lp2069
(dp2070
S'description'
p2071
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2072
sS'cpp_type'
p2073
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2074
sS'default'
p2075
g3
sS'name'
p2076
S'block'
p2077
sS'required'
p2078
I00
sS'group_name'
p2079
Nsa(dp2080
S'description'
p2081
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2082
sS'cpp_type'
p2083
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2084
sS'default'
p2085
g3
sS'name'
p2086
S'boundary'
p2087
sS'required'
p2088
I00
sS'group_name'
p2089
Nsa(dp2090
S'description'
p2091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2092
sS'cpp_type'
p2093
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2094
sS'default'
p2095
g3
sS'name'
p2096
S'control_tags'
p2097
sS'required'
p2098
I00
sS'group_name'
p2099
S'Advanced'
p2100
sa(dp2101
S'description'
p2102
S'Set the enabled status of the MooseObject.\n'
p2103
sS'cpp_type'
p2104
S'bool'
p2105
sS'default'
p2106
S'1'
p2107
sS'name'
p2108
S'enable'
p2109
sS'required'
p2110
I00
sS'group_name'
p2111
S'Advanced'
p2112
sa(dp2113
S'name'
p2114
S'execute_on'
p2115
sS'cpp_type'
p2116
S'MultiMooseEnum'
p2117
sS'default'
p2118
S'LINEAR'
p2119
sS'description'
p2120
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2121
sS'required'
p2122
I00
sS'options'
p2123
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2124
sS'group_name'
p2125
Nsa(dp2126
S'description'
p2127
S'Frequency of Output\n'
p2128
sS'cpp_type'
p2129
S'unsigned int'
p2130
sS'default'
p2131
S'1'
p2132
sS'name'
p2133
S'output_frequency'
p2134
sS'required'
p2135
I00
sS'group_name'
p2136
Nsa(dp2137
S'description'
p2138
S'Name of rotation output file: Default rot.out\n'
p2139
sS'cpp_type'
p2140
S'FileName'
p2141
sS'default'
p2142
S'rot.out'
p2143
sS'name'
p2144
S'rotout_file_name'
p2145
sS'required'
p2146
I00
sS'group_name'
p2147
Nsa(dp2148
S'description'
p2149
S'The seed for the master random number generator\n'
p2150
sS'cpp_type'
p2151
S'unsigned int'
p2152
sS'default'
p2153
S'0'
p2154
sS'name'
p2155
S'seed'
p2156
sS'required'
p2157
I00
sS'group_name'
p2158
S'Advanced'
p2159
sa(dp2160
S'description'
p2161
g3
sS'cpp_type'
p2162
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2163
sS'default'
p2164
S'CrystalPlasticityRotationOutAux'
p2165
sS'name'
p2166
S'type'
p2167
sS'required'
p2168
I00
sS'group_name'
p2169
Nsa(dp2170
S'description'
p2171
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2172
sS'cpp_type'
p2173
S'bool'
p2174
sS'default'
p2175
S'0'
p2176
sS'name'
p2177
S'use_displaced_mesh'
p2178
sS'required'
p2179
I00
sS'group_name'
p2180
S'Advanced'
p2181
sa(dp2182
S'description'
p2183
S'The name of the variable that this object applies to\n'
p2184
sS'cpp_type'
p2185
S'AuxVariableName'
p2186
sS'default'
p2187
g3
sS'name'
p2188
S'variable'
p2189
sS'required'
p2190
I01
sS'group_name'
p2191
NsasS'name'
p2192
S'/AuxKernels/CrystalPlasticityRotationOutAux'
p2193
sa(dp2194
S'description'
p2195
S'Takes RankTwoTensor material and outputs component in cylindrical coordinates\n'
p2196
sS'subblocks'
p2197
NsS'parameters'
p2198
(lp2199
(dp2200
S'description'
p2201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2202
sS'cpp_type'
p2203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2204
sS'default'
p2205
g3
sS'name'
p2206
S'block'
p2207
sS'required'
p2208
I00
sS'group_name'
p2209
Nsa(dp2210
S'description'
p2211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2212
sS'cpp_type'
p2213
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2214
sS'default'
p2215
g3
sS'name'
p2216
S'boundary'
p2217
sS'required'
p2218
I00
sS'group_name'
p2219
Nsa(dp2220
S'description'
p2221
S'Location of the center point of the cylindrical coordinates\n'
p2222
sS'cpp_type'
p2223
S'libMesh::Point'
p2224
sS'default'
p2225
g3
sS'name'
p2226
S'center_point'
p2227
sS'required'
p2228
I01
sS'group_name'
p2229
Nsa(dp2230
S'description'
p2231
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2232
sS'cpp_type'
p2233
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2234
sS'default'
p2235
g3
sS'name'
p2236
S'control_tags'
p2237
sS'required'
p2238
I00
sS'group_name'
p2239
S'Advanced'
p2240
sa(dp2241
S'description'
p2242
S'Set the enabled status of the MooseObject.\n'
p2243
sS'cpp_type'
p2244
S'bool'
p2245
sS'default'
p2246
S'1'
p2247
sS'name'
p2248
S'enable'
p2249
sS'required'
p2250
I00
sS'group_name'
p2251
S'Advanced'
p2252
sa(dp2253
S'name'
p2254
S'execute_on'
p2255
sS'cpp_type'
p2256
S'MultiMooseEnum'
p2257
sS'default'
p2258
S'LINEAR'
p2259
sS'description'
p2260
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2261
sS'required'
p2262
I00
sS'options'
p2263
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2264
sS'group_name'
p2265
Nsa(dp2266
S'description'
p2267
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p2268
sS'cpp_type'
p2269
S'unsigned int'
p2270
sS'default'
p2271
g3
sS'name'
p2272
S'index_i'
p2273
sS'required'
p2274
I01
sS'group_name'
p2275
Nsa(dp2276
S'description'
p2277
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p2278
sS'cpp_type'
p2279
S'unsigned int'
p2280
sS'default'
p2281
g3
sS'name'
p2282
S'index_j'
p2283
sS'required'
p2284
I01
sS'group_name'
p2285
Nsa(dp2286
S'description'
p2287
S'The rank two material tensor name\n'
p2288
sS'cpp_type'
p2289
S'MaterialPropertyName'
p2290
sS'default'
p2291
g3
sS'name'
p2292
S'rank_two_tensor'
p2293
sS'required'
p2294
I01
sS'group_name'
p2295
Nsa(dp2296
S'description'
p2297
S'The seed for the master random number generator\n'
p2298
sS'cpp_type'
p2299
S'unsigned int'
p2300
sS'default'
p2301
S'0'
p2302
sS'name'
p2303
S'seed'
p2304
sS'required'
p2305
I00
sS'group_name'
p2306
S'Advanced'
p2307
sa(dp2308
S'description'
p2309
g3
sS'cpp_type'
p2310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2311
sS'default'
p2312
S'CylindricalRankTwoAux'
p2313
sS'name'
p2314
S'type'
p2315
sS'required'
p2316
I00
sS'group_name'
p2317
Nsa(dp2318
S'description'
p2319
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2320
sS'cpp_type'
p2321
S'bool'
p2322
sS'default'
p2323
S'0'
p2324
sS'name'
p2325
S'use_displaced_mesh'
p2326
sS'required'
p2327
I00
sS'group_name'
p2328
S'Advanced'
p2329
sa(dp2330
S'description'
p2331
S'The name of the variable that this object applies to\n'
p2332
sS'cpp_type'
p2333
S'AuxVariableName'
p2334
sS'default'
p2335
g3
sS'name'
p2336
S'variable'
p2337
sS'required'
p2338
I01
sS'group_name'
p2339
NsasS'name'
p2340
S'/AuxKernels/CylindricalRankTwoAux'
p2341
sa(dp2342
S'description'
p2343
g3
sS'subblocks'
p2344
NsS'parameters'
p2345
(lp2346
(dp2347
S'description'
p2348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2349
sS'cpp_type'
p2350
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2351
sS'default'
p2352
g3
sS'name'
p2353
S'block'
p2354
sS'required'
p2355
I00
sS'group_name'
p2356
Nsa(dp2357
S'description'
p2358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2359
sS'cpp_type'
p2360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2361
sS'default'
p2362
g3
sS'name'
p2363
S'boundary'
p2364
sS'required'
p2365
I00
sS'group_name'
p2366
Nsa(dp2367
S'description'
p2368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2369
sS'cpp_type'
p2370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2371
sS'default'
p2372
g3
sS'name'
p2373
S'control_tags'
p2374
sS'required'
p2375
I00
sS'group_name'
p2376
S'Advanced'
p2377
sa(dp2378
S'description'
p2379
S'The variable that is being debugged.\n'
p2380
sS'cpp_type'
p2381
S'NonlinearVariableName'
p2382
sS'default'
p2383
g3
sS'name'
p2384
S'debug_variable'
p2385
sS'required'
p2386
I01
sS'group_name'
p2387
Nsa(dp2388
S'description'
p2389
S'Set the enabled status of the MooseObject.\n'
p2390
sS'cpp_type'
p2391
S'bool'
p2392
sS'default'
p2393
S'1'
p2394
sS'name'
p2395
S'enable'
p2396
sS'required'
p2397
I00
sS'group_name'
p2398
S'Advanced'
p2399
sa(dp2400
S'name'
p2401
S'execute_on'
p2402
sS'cpp_type'
p2403
S'MultiMooseEnum'
p2404
sS'default'
p2405
S'LINEAR'
p2406
sS'description'
p2407
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2408
sS'required'
p2409
I00
sS'options'
p2410
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2411
sS'group_name'
p2412
Nsa(dp2413
S'description'
p2414
S'The seed for the master random number generator\n'
p2415
sS'cpp_type'
p2416
S'unsigned int'
p2417
sS'default'
p2418
S'0'
p2419
sS'name'
p2420
S'seed'
p2421
sS'required'
p2422
I00
sS'group_name'
p2423
S'Advanced'
p2424
sa(dp2425
S'description'
p2426
g3
sS'cpp_type'
p2427
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2428
sS'default'
p2429
S'DebugResidualAux'
p2430
sS'name'
p2431
S'type'
p2432
sS'required'
p2433
I00
sS'group_name'
p2434
Nsa(dp2435
S'description'
p2436
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2437
sS'cpp_type'
p2438
S'bool'
p2439
sS'default'
p2440
S'0'
p2441
sS'name'
p2442
S'use_displaced_mesh'
p2443
sS'required'
p2444
I00
sS'group_name'
p2445
S'Advanced'
p2446
sa(dp2447
S'description'
p2448
S'The name of the variable that this object applies to\n'
p2449
sS'cpp_type'
p2450
S'AuxVariableName'
p2451
sS'default'
p2452
g3
sS'name'
p2453
S'variable'
p2454
sS'required'
p2455
I01
sS'group_name'
p2456
NsasS'name'
p2457
S'/AuxKernels/DebugResidualAux'
p2458
sa(dp2459
S'description'
p2460
g3
sS'subblocks'
p2461
NsS'parameters'
p2462
(lp2463
(dp2464
S'description'
p2465
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2466
sS'cpp_type'
p2467
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2468
sS'default'
p2469
g3
sS'name'
p2470
S'block'
p2471
sS'required'
p2472
I00
sS'group_name'
p2473
Nsa(dp2474
S'description'
p2475
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2476
sS'cpp_type'
p2477
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2478
sS'default'
p2479
g3
sS'name'
p2480
S'boundary'
p2481
sS'required'
p2482
I00
sS'group_name'
p2483
Nsa(dp2484
S'description'
p2485
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2486
sS'cpp_type'
p2487
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2488
sS'default'
p2489
g3
sS'name'
p2490
S'control_tags'
p2491
sS'required'
p2492
I00
sS'group_name'
p2493
S'Advanced'
p2494
sa(dp2495
S'name'
p2496
S'data_name'
p2497
sS'cpp_type'
p2498
S'MooseEnum'
p2499
sS'default'
p2500
g3
sS'description'
p2501
S'The averaged data to be extracted from the EBSD data by this AuxKernel\n'
p2502
sS'required'
p2503
I01
sS'options'
p2504
S'phi1 phi phi2 phase symmetry local_id feature_id'
p2505
sS'group_name'
p2506
Nsa(dp2507
S'description'
p2508
S'The EBSDReader GeneralUserObject\n'
p2509
sS'cpp_type'
p2510
S'UserObjectName'
p2511
sS'default'
p2512
g3
sS'name'
p2513
S'ebsd_reader'
p2514
sS'required'
p2515
I01
sS'group_name'
p2516
Nsa(dp2517
S'description'
p2518
S'Set the enabled status of the MooseObject.\n'
p2519
sS'cpp_type'
p2520
S'bool'
p2521
sS'default'
p2522
S'1'
p2523
sS'name'
p2524
S'enable'
p2525
sS'required'
p2526
I00
sS'group_name'
p2527
S'Advanced'
p2528
sa(dp2529
S'name'
p2530
S'execute_on'
p2531
sS'cpp_type'
p2532
S'MultiMooseEnum'
p2533
sS'default'
p2534
S'LINEAR'
p2535
sS'description'
p2536
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2537
sS'required'
p2538
I00
sS'options'
p2539
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2540
sS'group_name'
p2541
Nsa(dp2542
S'description'
p2543
S'The GrainTracker UserObject\n'
p2544
sS'cpp_type'
p2545
S'UserObjectName'
p2546
sS'default'
p2547
g3
sS'name'
p2548
S'grain_tracker'
p2549
sS'required'
p2550
I01
sS'group_name'
p2551
Nsa(dp2552
S'description'
p2553
S'Value to return for points without active grains.\n'
p2554
sS'cpp_type'
p2555
S'double'
p2556
sS'default'
p2557
S'-1'
p2558
sS'name'
p2559
S'invalid'
p2560
sS'required'
p2561
I00
sS'group_name'
p2562
Nsa(dp2563
S'description'
p2564
S'The seed for the master random number generator\n'
p2565
sS'cpp_type'
p2566
S'unsigned int'
p2567
sS'default'
p2568
S'0'
p2569
sS'name'
p2570
S'seed'
p2571
sS'required'
p2572
I00
sS'group_name'
p2573
S'Advanced'
p2574
sa(dp2575
S'description'
p2576
g3
sS'cpp_type'
p2577
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2578
sS'default'
p2579
S'EBSDReaderAvgDataAux'
p2580
sS'name'
p2581
S'type'
p2582
sS'required'
p2583
I00
sS'group_name'
p2584
Nsa(dp2585
S'description'
p2586
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2587
sS'cpp_type'
p2588
S'bool'
p2589
sS'default'
p2590
S'0'
p2591
sS'name'
p2592
S'use_displaced_mesh'
p2593
sS'required'
p2594
I00
sS'group_name'
p2595
S'Advanced'
p2596
sa(dp2597
S'description'
p2598
S'The name of the variable that this object applies to\n'
p2599
sS'cpp_type'
p2600
S'AuxVariableName'
p2601
sS'default'
p2602
g3
sS'name'
p2603
S'variable'
p2604
sS'required'
p2605
I01
sS'group_name'
p2606
NsasS'name'
p2607
S'/AuxKernels/EBSDReaderAvgDataAux'
p2608
sa(dp2609
S'description'
p2610
g3
sS'subblocks'
p2611
NsS'parameters'
p2612
(lp2613
(dp2614
S'description'
p2615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2616
sS'cpp_type'
p2617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2618
sS'default'
p2619
g3
sS'name'
p2620
S'block'
p2621
sS'required'
p2622
I00
sS'group_name'
p2623
Nsa(dp2624
S'description'
p2625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2626
sS'cpp_type'
p2627
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2628
sS'default'
p2629
g3
sS'name'
p2630
S'boundary'
p2631
sS'required'
p2632
I00
sS'group_name'
p2633
Nsa(dp2634
S'description'
p2635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2636
sS'cpp_type'
p2637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2638
sS'default'
p2639
g3
sS'name'
p2640
S'control_tags'
p2641
sS'required'
p2642
I00
sS'group_name'
p2643
S'Advanced'
p2644
sa(dp2645
S'name'
p2646
S'data_name'
p2647
sS'cpp_type'
p2648
S'MooseEnum'
p2649
sS'default'
p2650
g3
sS'description'
p2651
S'The data to be extracted from the EBSD data by this AuxKernel\n'
p2652
sS'required'
p2653
I01
sS'options'
p2654
S'phi1 phi phi2 feature_id phase symmetry'
p2655
sS'group_name'
p2656
Nsa(dp2657
S'description'
p2658
S'The EBSDReader GeneralUserObject\n'
p2659
sS'cpp_type'
p2660
S'UserObjectName'
p2661
sS'default'
p2662
g3
sS'name'
p2663
S'ebsd_reader'
p2664
sS'required'
p2665
I01
sS'group_name'
p2666
Nsa(dp2667
S'description'
p2668
S'Set the enabled status of the MooseObject.\n'
p2669
sS'cpp_type'
p2670
S'bool'
p2671
sS'default'
p2672
S'1'
p2673
sS'name'
p2674
S'enable'
p2675
sS'required'
p2676
I00
sS'group_name'
p2677
S'Advanced'
p2678
sa(dp2679
S'name'
p2680
S'execute_on'
p2681
sS'cpp_type'
p2682
S'MultiMooseEnum'
p2683
sS'default'
p2684
S'LINEAR'
p2685
sS'description'
p2686
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2687
sS'required'
p2688
I00
sS'options'
p2689
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2690
sS'group_name'
p2691
Nsa(dp2692
S'description'
p2693
S'The seed for the master random number generator\n'
p2694
sS'cpp_type'
p2695
S'unsigned int'
p2696
sS'default'
p2697
S'0'
p2698
sS'name'
p2699
S'seed'
p2700
sS'required'
p2701
I00
sS'group_name'
p2702
S'Advanced'
p2703
sa(dp2704
S'description'
p2705
g3
sS'cpp_type'
p2706
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2707
sS'default'
p2708
S'EBSDReaderPointDataAux'
p2709
sS'name'
p2710
S'type'
p2711
sS'required'
p2712
I00
sS'group_name'
p2713
Nsa(dp2714
S'description'
p2715
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2716
sS'cpp_type'
p2717
S'bool'
p2718
sS'default'
p2719
S'0'
p2720
sS'name'
p2721
S'use_displaced_mesh'
p2722
sS'required'
p2723
I00
sS'group_name'
p2724
S'Advanced'
p2725
sa(dp2726
S'description'
p2727
S'The name of the variable that this object applies to\n'
p2728
sS'cpp_type'
p2729
S'AuxVariableName'
p2730
sS'default'
p2731
g3
sS'name'
p2732
S'variable'
p2733
sS'required'
p2734
I01
sS'group_name'
p2735
NsasS'name'
p2736
S'/AuxKernels/EBSDReaderPointDataAux'
p2737
sa(dp2738
S'description'
p2739
S'Compute the local elastic energy\n'
p2740
sS'subblocks'
p2741
NsS'parameters'
p2742
(lp2743
(dp2744
S'description'
p2745
S'Mechanical property base name\n'
p2746
sS'cpp_type'
p2747
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2748
sS'default'
p2749
g3
sS'name'
p2750
S'base_name'
p2751
sS'required'
p2752
I00
sS'group_name'
p2753
Nsa(dp2754
S'description'
p2755
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2756
sS'cpp_type'
p2757
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2758
sS'default'
p2759
g3
sS'name'
p2760
S'block'
p2761
sS'required'
p2762
I00
sS'group_name'
p2763
Nsa(dp2764
S'description'
p2765
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2766
sS'cpp_type'
p2767
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2768
sS'default'
p2769
g3
sS'name'
p2770
S'boundary'
p2771
sS'required'
p2772
I00
sS'group_name'
p2773
Nsa(dp2774
S'description'
p2775
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2776
sS'cpp_type'
p2777
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2778
sS'default'
p2779
g3
sS'name'
p2780
S'control_tags'
p2781
sS'required'
p2782
I00
sS'group_name'
p2783
S'Advanced'
p2784
sa(dp2785
S'description'
p2786
S'Set the enabled status of the MooseObject.\n'
p2787
sS'cpp_type'
p2788
S'bool'
p2789
sS'default'
p2790
S'1'
p2791
sS'name'
p2792
S'enable'
p2793
sS'required'
p2794
I00
sS'group_name'
p2795
S'Advanced'
p2796
sa(dp2797
S'name'
p2798
S'execute_on'
p2799
sS'cpp_type'
p2800
S'MultiMooseEnum'
p2801
sS'default'
p2802
S'LINEAR'
p2803
sS'description'
p2804
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2805
sS'required'
p2806
I00
sS'options'
p2807
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2808
sS'group_name'
p2809
Nsa(dp2810
S'description'
p2811
S'The seed for the master random number generator\n'
p2812
sS'cpp_type'
p2813
S'unsigned int'
p2814
sS'default'
p2815
S'0'
p2816
sS'name'
p2817
S'seed'
p2818
sS'required'
p2819
I00
sS'group_name'
p2820
S'Advanced'
p2821
sa(dp2822
S'description'
p2823
g3
sS'cpp_type'
p2824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2825
sS'default'
p2826
S'ElasticEnergyAux'
p2827
sS'name'
p2828
S'type'
p2829
sS'required'
p2830
I00
sS'group_name'
p2831
Nsa(dp2832
S'description'
p2833
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2834
sS'cpp_type'
p2835
S'bool'
p2836
sS'default'
p2837
S'0'
p2838
sS'name'
p2839
S'use_displaced_mesh'
p2840
sS'required'
p2841
I00
sS'group_name'
p2842
S'Advanced'
p2843
sa(dp2844
S'description'
p2845
S'The name of the variable that this object applies to\n'
p2846
sS'cpp_type'
p2847
S'AuxVariableName'
p2848
sS'default'
p2849
g3
sS'name'
p2850
S'variable'
p2851
sS'required'
p2852
I01
sS'group_name'
p2853
NsasS'name'
p2854
S'/AuxKernels/ElasticEnergyAux'
p2855
sa(dp2856
S'description'
p2857
g3
sS'subblocks'
p2858
NsS'parameters'
p2859
(lp2860
(dp2861
S'description'
p2862
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2863
sS'cpp_type'
p2864
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2865
sS'default'
p2866
g3
sS'name'
p2867
S'block'
p2868
sS'required'
p2869
I00
sS'group_name'
p2870
Nsa(dp2871
S'description'
p2872
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2873
sS'cpp_type'
p2874
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2875
sS'default'
p2876
g3
sS'name'
p2877
S'boundary'
p2878
sS'required'
p2879
I00
sS'group_name'
p2880
Nsa(dp2881
S'description'
p2882
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2883
sS'cpp_type'
p2884
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2885
sS'default'
p2886
g3
sS'name'
p2887
S'control_tags'
p2888
sS'required'
p2889
I00
sS'group_name'
p2890
S'Advanced'
p2891
sa(dp2892
S'description'
p2893
S'The variable to compute the norm of.\n'
p2894
sS'cpp_type'
p2895
S'std::vector<VariableName>'
p2896
sS'default'
p2897
g3
sS'name'
p2898
S'coupled_variable'
p2899
sS'required'
p2900
I01
sS'group_name'
p2901
Nsa(dp2902
S'description'
p2903
S'Set the enabled status of the MooseObject.\n'
p2904
sS'cpp_type'
p2905
S'bool'
p2906
sS'default'
p2907
S'1'
p2908
sS'name'
p2909
S'enable'
p2910
sS'required'
p2911
I00
sS'group_name'
p2912
S'Advanced'
p2913
sa(dp2914
S'name'
p2915
S'execute_on'
p2916
sS'cpp_type'
p2917
S'MultiMooseEnum'
p2918
sS'default'
p2919
S'LINEAR'
p2920
sS'description'
p2921
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2922
sS'required'
p2923
I00
sS'options'
p2924
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2925
sS'group_name'
p2926
Nsa(dp2927
S'description'
p2928
S'Function representing the exact solution\n'
p2929
sS'cpp_type'
p2930
S'FunctionName'
p2931
sS'default'
p2932
g3
sS'name'
p2933
S'function'
p2934
sS'required'
p2935
I01
sS'group_name'
p2936
Nsa(dp2937
S'description'
p2938
S'The exponent used in the norm.\n'
p2939
sS'cpp_type'
p2940
S'double'
p2941
sS'default'
p2942
S'2'
p2943
sS'name'
p2944
S'p'
p2945
sS'required'
p2946
I00
sS'group_name'
p2947
Nsa(dp2948
S'description'
p2949
S'The seed for the master random number generator\n'
p2950
sS'cpp_type'
p2951
S'unsigned int'
p2952
sS'default'
p2953
S'0'
p2954
sS'name'
p2955
S'seed'
p2956
sS'required'
p2957
I00
sS'group_name'
p2958
S'Advanced'
p2959
sa(dp2960
S'description'
p2961
g3
sS'cpp_type'
p2962
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2963
sS'default'
p2964
S'ElementH1ErrorFunctionAux'
p2965
sS'name'
p2966
S'type'
p2967
sS'required'
p2968
I00
sS'group_name'
p2969
Nsa(dp2970
S'description'
p2971
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2972
sS'cpp_type'
p2973
S'bool'
p2974
sS'default'
p2975
S'0'
p2976
sS'name'
p2977
S'use_displaced_mesh'
p2978
sS'required'
p2979
I00
sS'group_name'
p2980
S'Advanced'
p2981
sa(dp2982
S'description'
p2983
S'The name of the variable that this object applies to\n'
p2984
sS'cpp_type'
p2985
S'AuxVariableName'
p2986
sS'default'
p2987
g3
sS'name'
p2988
S'variable'
p2989
sS'required'
p2990
I01
sS'group_name'
p2991
NsasS'name'
p2992
S'/AuxKernels/ElementH1ErrorFunctionAux'
p2993
sa(dp2994
S'description'
p2995
g3
sS'subblocks'
p2996
NsS'parameters'
p2997
(lp2998
(dp2999
S'description'
p3000
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3001
sS'cpp_type'
p3002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3003
sS'default'
p3004
g3
sS'name'
p3005
S'block'
p3006
sS'required'
p3007
I00
sS'group_name'
p3008
Nsa(dp3009
S'description'
p3010
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3011
sS'cpp_type'
p3012
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3013
sS'default'
p3014
g3
sS'name'
p3015
S'boundary'
p3016
sS'required'
p3017
I00
sS'group_name'
p3018
Nsa(dp3019
S'description'
p3020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3021
sS'cpp_type'
p3022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3023
sS'default'
p3024
g3
sS'name'
p3025
S'control_tags'
p3026
sS'required'
p3027
I00
sS'group_name'
p3028
S'Advanced'
p3029
sa(dp3030
S'description'
p3031
S'The variable to compute the norm of.\n'
p3032
sS'cpp_type'
p3033
S'std::vector<VariableName>'
p3034
sS'default'
p3035
g3
sS'name'
p3036
S'coupled_variable'
p3037
sS'required'
p3038
I01
sS'group_name'
p3039
Nsa(dp3040
S'description'
p3041
S'Set the enabled status of the MooseObject.\n'
p3042
sS'cpp_type'
p3043
S'bool'
p3044
sS'default'
p3045
S'1'
p3046
sS'name'
p3047
S'enable'
p3048
sS'required'
p3049
I00
sS'group_name'
p3050
S'Advanced'
p3051
sa(dp3052
S'name'
p3053
S'execute_on'
p3054
sS'cpp_type'
p3055
S'MultiMooseEnum'
p3056
sS'default'
p3057
S'LINEAR'
p3058
sS'description'
p3059
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3060
sS'required'
p3061
I00
sS'options'
p3062
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3063
sS'group_name'
p3064
Nsa(dp3065
S'description'
p3066
S'Function representing the exact solution\n'
p3067
sS'cpp_type'
p3068
S'FunctionName'
p3069
sS'default'
p3070
g3
sS'name'
p3071
S'function'
p3072
sS'required'
p3073
I01
sS'group_name'
p3074
Nsa(dp3075
S'description'
p3076
S'The exponent used in the norm.\n'
p3077
sS'cpp_type'
p3078
S'double'
p3079
sS'default'
p3080
S'2'
p3081
sS'name'
p3082
S'p'
p3083
sS'required'
p3084
I00
sS'group_name'
p3085
Nsa(dp3086
S'description'
p3087
S'The seed for the master random number generator\n'
p3088
sS'cpp_type'
p3089
S'unsigned int'
p3090
sS'default'
p3091
S'0'
p3092
sS'name'
p3093
S'seed'
p3094
sS'required'
p3095
I00
sS'group_name'
p3096
S'Advanced'
p3097
sa(dp3098
S'description'
p3099
g3
sS'cpp_type'
p3100
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3101
sS'default'
p3102
S'ElementL2ErrorFunctionAux'
p3103
sS'name'
p3104
S'type'
p3105
sS'required'
p3106
I00
sS'group_name'
p3107
Nsa(dp3108
S'description'
p3109
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3110
sS'cpp_type'
p3111
S'bool'
p3112
sS'default'
p3113
S'0'
p3114
sS'name'
p3115
S'use_displaced_mesh'
p3116
sS'required'
p3117
I00
sS'group_name'
p3118
S'Advanced'
p3119
sa(dp3120
S'description'
p3121
S'The name of the variable that this object applies to\n'
p3122
sS'cpp_type'
p3123
S'AuxVariableName'
p3124
sS'default'
p3125
g3
sS'name'
p3126
S'variable'
p3127
sS'required'
p3128
I01
sS'group_name'
p3129
NsasS'name'
p3130
S'/AuxKernels/ElementL2ErrorFunctionAux'
p3131
sa(dp3132
S'description'
p3133
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p3134
sS'subblocks'
p3135
NsS'parameters'
p3136
(lp3137
(dp3138
S'description'
p3139
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3140
sS'cpp_type'
p3141
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3142
sS'default'
p3143
g3
sS'name'
p3144
S'block'
p3145
sS'required'
p3146
I00
sS'group_name'
p3147
Nsa(dp3148
S'description'
p3149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3150
sS'cpp_type'
p3151
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3152
sS'default'
p3153
g3
sS'name'
p3154
S'boundary'
p3155
sS'required'
p3156
I00
sS'group_name'
p3157
Nsa(dp3158
S'description'
p3159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3160
sS'cpp_type'
p3161
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3162
sS'default'
p3163
g3
sS'name'
p3164
S'control_tags'
p3165
sS'required'
p3166
I00
sS'group_name'
p3167
S'Advanced'
p3168
sa(dp3169
S'description'
p3170
S'Set the enabled status of the MooseObject.\n'
p3171
sS'cpp_type'
p3172
S'bool'
p3173
sS'default'
p3174
S'1'
p3175
sS'name'
p3176
S'enable'
p3177
sS'required'
p3178
I00
sS'group_name'
p3179
S'Advanced'
p3180
sa(dp3181
S'name'
p3182
S'execute_on'
p3183
sS'cpp_type'
p3184
S'MultiMooseEnum'
p3185
sS'default'
p3186
S'LINEAR'
p3187
sS'description'
p3188
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3189
sS'required'
p3190
I00
sS'options'
p3191
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3192
sS'group_name'
p3193
Nsa(dp3194
S'name'
p3195
S'method'
p3196
sS'cpp_type'
p3197
S'MooseEnum'
p3198
sS'default'
p3199
g3
sS'description'
p3200
S"The size calculation to perform ('min' or 'max').\n"
p3201
sS'required'
p3202
I01
sS'options'
p3203
S'min max'
p3204
sS'group_name'
p3205
Nsa(dp3206
S'description'
p3207
S'The seed for the master random number generator\n'
p3208
sS'cpp_type'
p3209
S'unsigned int'
p3210
sS'default'
p3211
S'0'
p3212
sS'name'
p3213
S'seed'
p3214
sS'required'
p3215
I00
sS'group_name'
p3216
S'Advanced'
p3217
sa(dp3218
S'description'
p3219
g3
sS'cpp_type'
p3220
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3221
sS'default'
p3222
S'ElementLengthAux'
p3223
sS'name'
p3224
S'type'
p3225
sS'required'
p3226
I00
sS'group_name'
p3227
Nsa(dp3228
S'description'
p3229
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3230
sS'cpp_type'
p3231
S'bool'
p3232
sS'default'
p3233
S'0'
p3234
sS'name'
p3235
S'use_displaced_mesh'
p3236
sS'required'
p3237
I00
sS'group_name'
p3238
S'Advanced'
p3239
sa(dp3240
S'description'
p3241
S'The name of the variable that this object applies to\n'
p3242
sS'cpp_type'
p3243
S'AuxVariableName'
p3244
sS'default'
p3245
g3
sS'name'
p3246
S'variable'
p3247
sS'required'
p3248
I01
sS'group_name'
p3249
NsasS'name'
p3250
S'/AuxKernels/ElementLengthAux'
p3251
sa(dp3252
S'description'
p3253
g3
sS'subblocks'
p3254
NsS'parameters'
p3255
(lp3256
(dp3257
S'description'
p3258
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3259
sS'cpp_type'
p3260
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3261
sS'default'
p3262
g3
sS'name'
p3263
S'block'
p3264
sS'required'
p3265
I00
sS'group_name'
p3266
Nsa(dp3267
S'description'
p3268
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3269
sS'cpp_type'
p3270
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3271
sS'default'
p3272
g3
sS'name'
p3273
S'boundary'
p3274
sS'required'
p3275
I00
sS'group_name'
p3276
Nsa(dp3277
S'description'
p3278
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3279
sS'cpp_type'
p3280
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3281
sS'default'
p3282
g3
sS'name'
p3283
S'control_tags'
p3284
sS'required'
p3285
I00
sS'group_name'
p3286
S'Advanced'
p3287
sa(dp3288
S'description'
p3289
S'The variable to compute the norm of.\n'
p3290
sS'cpp_type'
p3291
S'std::vector<VariableName>'
p3292
sS'default'
p3293
g3
sS'name'
p3294
S'coupled_variable'
p3295
sS'required'
p3296
I01
sS'group_name'
p3297
Nsa(dp3298
S'description'
p3299
S'Set the enabled status of the MooseObject.\n'
p3300
sS'cpp_type'
p3301
S'bool'
p3302
sS'default'
p3303
S'1'
p3304
sS'name'
p3305
S'enable'
p3306
sS'required'
p3307
I00
sS'group_name'
p3308
S'Advanced'
p3309
sa(dp3310
S'name'
p3311
S'execute_on'
p3312
sS'cpp_type'
p3313
S'MultiMooseEnum'
p3314
sS'default'
p3315
S'LINEAR'
p3316
sS'description'
p3317
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3318
sS'required'
p3319
I00
sS'options'
p3320
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3321
sS'group_name'
p3322
Nsa(dp3323
S'description'
p3324
S'The exponent used in the norm.\n'
p3325
sS'cpp_type'
p3326
S'double'
p3327
sS'default'
p3328
S'2'
p3329
sS'name'
p3330
S'p'
p3331
sS'required'
p3332
I00
sS'group_name'
p3333
Nsa(dp3334
S'description'
p3335
S'The seed for the master random number generator\n'
p3336
sS'cpp_type'
p3337
S'unsigned int'
p3338
sS'default'
p3339
S'0'
p3340
sS'name'
p3341
S'seed'
p3342
sS'required'
p3343
I00
sS'group_name'
p3344
S'Advanced'
p3345
sa(dp3346
S'description'
p3347
g3
sS'cpp_type'
p3348
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3349
sS'default'
p3350
S'ElementLpNormAux'
p3351
sS'name'
p3352
S'type'
p3353
sS'required'
p3354
I00
sS'group_name'
p3355
Nsa(dp3356
S'description'
p3357
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3358
sS'cpp_type'
p3359
S'bool'
p3360
sS'default'
p3361
S'0'
p3362
sS'name'
p3363
S'use_displaced_mesh'
p3364
sS'required'
p3365
I00
sS'group_name'
p3366
S'Advanced'
p3367
sa(dp3368
S'description'
p3369
S'The name of the variable that this object applies to\n'
p3370
sS'cpp_type'
p3371
S'AuxVariableName'
p3372
sS'default'
p3373
g3
sS'name'
p3374
S'variable'
p3375
sS'required'
p3376
I01
sS'group_name'
p3377
NsasS'name'
p3378
S'/AuxKernels/ElementLpNormAux'
p3379
sa(dp3380
S'description'
p3381
S'Output RGB representation of crystal orientation from user object to an AuxVariable. The entire domain must have the same crystal structure.\n'
p3382
sS'subblocks'
p3383
NsS'parameters'
p3384
(lp3385
(dp3386
S'description'
p3387
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3388
sS'cpp_type'
p3389
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3390
sS'default'
p3391
g3
sS'name'
p3392
S'block'
p3393
sS'required'
p3394
I00
sS'group_name'
p3395
Nsa(dp3396
S'description'
p3397
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3398
sS'cpp_type'
p3399
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3400
sS'default'
p3401
g3
sS'name'
p3402
S'boundary'
p3403
sS'required'
p3404
I00
sS'group_name'
p3405
Nsa(dp3406
S'description'
p3407
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3408
sS'cpp_type'
p3409
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3410
sS'default'
p3411
g3
sS'name'
p3412
S'control_tags'
p3413
sS'required'
p3414
I00
sS'group_name'
p3415
S'Advanced'
p3416
sa(dp3417
S'name'
p3418
S'crystal_structure'
p3419
sS'cpp_type'
p3420
S'MooseEnum'
p3421
sS'default'
p3422
g3
sS'description'
p3423
S'Crystal structure of the material\n'
p3424
sS'required'
p3425
I01
sS'options'
p3426
S'cubic hexagonal tetragonal trigonal orthorhombic monoclinic triclinic'
p3427
sS'group_name'
p3428
Nsa(dp3429
S'description'
p3430
S'Set the enabled status of the MooseObject.\n'
p3431
sS'cpp_type'
p3432
S'bool'
p3433
sS'default'
p3434
S'1'
p3435
sS'name'
p3436
S'enable'
p3437
sS'required'
p3438
I00
sS'group_name'
p3439
S'Advanced'
p3440
sa(dp3441
S'description'
p3442
S'Name of Euler angle provider user object\n'
p3443
sS'cpp_type'
p3444
S'UserObjectName'
p3445
sS'default'
p3446
g3
sS'name'
p3447
S'euler_angle_provider'
p3448
sS'required'
p3449
I01
sS'group_name'
p3450
Nsa(dp3451
S'name'
p3452
S'execute_on'
p3453
sS'cpp_type'
p3454
S'MultiMooseEnum'
p3455
sS'default'
p3456
S'LINEAR'
p3457
sS'description'
p3458
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3459
sS'required'
p3460
I00
sS'options'
p3461
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3462
sS'group_name'
p3463
Nsa(dp3464
S'description'
p3465
S'The GrainTracker UserObject to get values from.\n'
p3466
sS'cpp_type'
p3467
S'UserObjectName'
p3468
sS'default'
p3469
g3
sS'name'
p3470
S'grain_tracker'
p3471
sS'required'
p3472
I01
sS'group_name'
p3473
Nsa(dp3474
S'description'
p3475
S'RGB value of color used to represent area with no grains, defaults to black\n'
p3476
sS'cpp_type'
p3477
S'libMesh::Point'
p3478
sS'default'
p3479
S'0 0 0'
p3480
sS'name'
p3481
S'no_grain_color'
p3482
sS'required'
p3483
I00
sS'group_name'
p3484
Nsa(dp3485
S'name'
p3486
S'output_type'
p3487
sS'cpp_type'
p3488
S'MooseEnum'
p3489
sS'default'
p3490
S'scalar'
p3491
sS'description'
p3492
S'Type of value that will be outputted\n'
p3493
sS'required'
p3494
I00
sS'options'
p3495
S'red green blue scalar'
p3496
sS'group_name'
p3497
Nsa(dp3498
S'name'
p3499
S'sd'
p3500
sS'cpp_type'
p3501
S'MooseEnum'
p3502
sS'default'
p3503
S'001'
p3504
sS'description'
p3505
S'Reference sample direction\n'
p3506
sS'required'
p3507
I00
sS'options'
p3508
S'100 010 001'
p3509
sS'group_name'
p3510
Nsa(dp3511
S'description'
p3512
S'The seed for the master random number generator\n'
p3513
sS'cpp_type'
p3514
S'unsigned int'
p3515
sS'default'
p3516
S'0'
p3517
sS'name'
p3518
S'seed'
p3519
sS'required'
p3520
I00
sS'group_name'
p3521
S'Advanced'
p3522
sa(dp3523
S'description'
p3524
g3
sS'cpp_type'
p3525
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3526
sS'default'
p3527
S'EulerAngleProvider2RGBAux'
p3528
sS'name'
p3529
S'type'
p3530
sS'required'
p3531
I00
sS'group_name'
p3532
Nsa(dp3533
S'description'
p3534
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3535
sS'cpp_type'
p3536
S'bool'
p3537
sS'default'
p3538
S'0'
p3539
sS'name'
p3540
S'use_displaced_mesh'
p3541
sS'required'
p3542
I00
sS'group_name'
p3543
S'Advanced'
p3544
sa(dp3545
S'description'
p3546
S'The name of the variable that this object applies to\n'
p3547
sS'cpp_type'
p3548
S'AuxVariableName'
p3549
sS'default'
p3550
g3
sS'name'
p3551
S'variable'
p3552
sS'required'
p3553
I01
sS'group_name'
p3554
NsasS'name'
p3555
S'/AuxKernels/EulerAngleProvider2RGBAux'
p3556
sa(dp3557
S'description'
p3558
g3
sS'subblocks'
p3559
NsS'parameters'
p3560
(lp3561
(dp3562
S'description'
p3563
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3564
sS'cpp_type'
p3565
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3566
sS'default'
p3567
g3
sS'name'
p3568
S'block'
p3569
sS'required'
p3570
I00
sS'group_name'
p3571
Nsa(dp3572
S'description'
p3573
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3574
sS'cpp_type'
p3575
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3576
sS'default'
p3577
g3
sS'name'
p3578
S'boundary'
p3579
sS'required'
p3580
I00
sS'group_name'
p3581
Nsa(dp3582
S'description'
p3583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3584
sS'cpp_type'
p3585
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3586
sS'default'
p3587
g3
sS'name'
p3588
S'control_tags'
p3589
sS'required'
p3590
I00
sS'group_name'
p3591
S'Advanced'
p3592
sa(dp3593
S'description'
p3594
S'Set the enabled status of the MooseObject.\n'
p3595
sS'cpp_type'
p3596
S'bool'
p3597
sS'default'
p3598
S'1'
p3599
sS'name'
p3600
S'enable'
p3601
sS'required'
p3602
I00
sS'group_name'
p3603
S'Advanced'
p3604
sa(dp3605
S'name'
p3606
S'execute_on'
p3607
sS'cpp_type'
p3608
S'MultiMooseEnum'
p3609
sS'default'
p3610
S'LINEAR'
p3611
sS'description'
p3612
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3613
sS'required'
p3614
I00
sS'options'
p3615
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3616
sS'group_name'
p3617
Nsa(dp3618
S'name'
p3619
S'output_type'
p3620
sS'cpp_type'
p3621
S'MooseEnum'
p3622
sS'default'
p3623
S'scalar'
p3624
sS'description'
p3625
S'Type of value that will be outputted\n'
p3626
sS'required'
p3627
I00
sS'options'
p3628
S'red green blue scalar'
p3629
sS'group_name'
p3630
Nsa(dp3631
S'description'
p3632
S'Grain phase index\n'
p3633
sS'cpp_type'
p3634
S'std::vector<VariableName>'
p3635
sS'default'
p3636
g3
sS'name'
p3637
S'phase'
p3638
sS'required'
p3639
I00
sS'group_name'
p3640
Nsa(dp3641
S'description'
p3642
S'Euler angle 2\n'
p3643
sS'cpp_type'
p3644
S'std::vector<VariableName>'
p3645
sS'default'
p3646
g3
sS'name'
p3647
S'phi'
p3648
sS'required'
p3649
I00
sS'group_name'
p3650
Nsa(dp3651
S'description'
p3652
S'Euler angle 1\n'
p3653
sS'cpp_type'
p3654
S'std::vector<VariableName>'
p3655
sS'default'
p3656
g3
sS'name'
p3657
S'phi1'
p3658
sS'required'
p3659
I00
sS'group_name'
p3660
Nsa(dp3661
S'description'
p3662
S'Euler angle 3\n'
p3663
sS'cpp_type'
p3664
S'std::vector<VariableName>'
p3665
sS'default'
p3666
g3
sS'name'
p3667
S'phi2'
p3668
sS'required'
p3669
I00
sS'group_name'
p3670
Nsa(dp3671
S'name'
p3672
S'sd'
p3673
sS'cpp_type'
p3674
S'MooseEnum'
p3675
sS'default'
p3676
S'001'
p3677
sS'description'
p3678
S'Reference sample direction\n'
p3679
sS'required'
p3680
I00
sS'options'
p3681
S'100 010 001'
p3682
sS'group_name'
p3683
Nsa(dp3684
S'description'
p3685
S'The seed for the master random number generator\n'
p3686
sS'cpp_type'
p3687
S'unsigned int'
p3688
sS'default'
p3689
S'0'
p3690
sS'name'
p3691
S'seed'
p3692
sS'required'
p3693
I00
sS'group_name'
p3694
S'Advanced'
p3695
sa(dp3696
S'description'
p3697
S'Grain symmetry indentifier\n'
p3698
sS'cpp_type'
p3699
S'std::vector<VariableName>'
p3700
sS'default'
p3701
g3
sS'name'
p3702
S'symmetry'
p3703
sS'required'
p3704
I00
sS'group_name'
p3705
Nsa(dp3706
S'description'
p3707
g3
sS'cpp_type'
p3708
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3709
sS'default'
p3710
S'EulerAngleVariables2RGBAux'
p3711
sS'name'
p3712
S'type'
p3713
sS'required'
p3714
I00
sS'group_name'
p3715
Nsa(dp3716
S'description'
p3717
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3718
sS'cpp_type'
p3719
S'bool'
p3720
sS'default'
p3721
S'0'
p3722
sS'name'
p3723
S'use_displaced_mesh'
p3724
sS'required'
p3725
I00
sS'group_name'
p3726
S'Advanced'
p3727
sa(dp3728
S'description'
p3729
S'The name of the variable that this object applies to\n'
p3730
sS'cpp_type'
p3731
S'AuxVariableName'
p3732
sS'default'
p3733
g3
sS'name'
p3734
S'variable'
p3735
sS'required'
p3736
I01
sS'group_name'
p3737
NsasS'name'
p3738
S'/AuxKernels/EulerAngleVariables2RGBAux'
p3739
sa(dp3740
S'description'
p3741
S'Feature detection by connectivity analysis\n'
p3742
sS'subblocks'
p3743
NsS'parameters'
p3744
(lp3745
(dp3746
S'description'
p3747
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3748
sS'cpp_type'
p3749
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3750
sS'default'
p3751
g3
sS'name'
p3752
S'block'
p3753
sS'required'
p3754
I00
sS'group_name'
p3755
Nsa(dp3756
S'description'
p3757
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3758
sS'cpp_type'
p3759
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3760
sS'default'
p3761
g3
sS'name'
p3762
S'boundary'
p3763
sS'required'
p3764
I00
sS'group_name'
p3765
Nsa(dp3766
S'description'
p3767
S'The FeatureFloodCount UserObject to get values from.\n'
p3768
sS'cpp_type'
p3769
S'UserObjectName'
p3770
sS'default'
p3771
g3
sS'name'
p3772
S'bubble_object'
p3773
sS'required'
p3774
I00
sS'group_name'
p3775
Nsa(dp3776
S'description'
p3777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3778
sS'cpp_type'
p3779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3780
sS'default'
p3781
g3
sS'name'
p3782
S'control_tags'
p3783
sS'required'
p3784
I00
sS'group_name'
p3785
S'Advanced'
p3786
sa(dp3787
S'description'
p3788
S'Set the enabled status of the MooseObject.\n'
p3789
sS'cpp_type'
p3790
S'bool'
p3791
sS'default'
p3792
S'1'
p3793
sS'name'
p3794
S'enable'
p3795
sS'required'
p3796
I00
sS'group_name'
p3797
S'Advanced'
p3798
sa(dp3799
S'name'
p3800
S'execute_on'
p3801
sS'cpp_type'
p3802
S'MultiMooseEnum'
p3803
sS'default'
p3804
S'INITIAL TIMESTEP_END'
p3805
sS'description'
p3806
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3807
sS'required'
p3808
I00
sS'options'
p3809
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3810
sS'group_name'
p3811
Nsa(dp3812
S'name'
p3813
S'field_display'
p3814
sS'cpp_type'
p3815
S'MooseEnum'
p3816
sS'default'
p3817
S'UNIQUE_REGION'
p3818
sS'description'
p3819
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p3820
sS'required'
p3821
I00
sS'options'
p3822
S'UNIQUE_REGION VARIABLE_COLORING GHOSTED_ENTITIES HALOS CENTROID ACTIVE_BOUNDS'
p3823
sS'group_name'
p3824
Nsa(dp3825
S'description'
p3826
S'The FeatureFloodCount UserObject to get values from.\n'
p3827
sS'cpp_type'
p3828
S'UserObjectName'
p3829
sS'default'
p3830
g3
sS'name'
p3831
S'flood_counter'
p3832
sS'required'
p3833
I01
sS'group_name'
p3834
Nsa(dp3835
S'description'
p3836
S'The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n'
p3837
sS'cpp_type'
p3838
S'unsigned int'
p3839
sS'default'
p3840
g3
sS'name'
p3841
S'map_index'
p3842
sS'required'
p3843
I00
sS'group_name'
p3844
Nsa(dp3845
S'description'
p3846
S'The seed for the master random number generator\n'
p3847
sS'cpp_type'
p3848
S'unsigned int'
p3849
sS'default'
p3850
S'0'
p3851
sS'name'
p3852
S'seed'
p3853
sS'required'
p3854
I00
sS'group_name'
p3855
S'Advanced'
p3856
sa(dp3857
S'description'
p3858
g3
sS'cpp_type'
p3859
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3860
sS'default'
p3861
S'FeatureFloodCountAux'
p3862
sS'name'
p3863
S'type'
p3864
sS'required'
p3865
I00
sS'group_name'
p3866
Nsa(dp3867
S'description'
p3868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3869
sS'cpp_type'
p3870
S'bool'
p3871
sS'default'
p3872
S'0'
p3873
sS'name'
p3874
S'use_displaced_mesh'
p3875
sS'required'
p3876
I00
sS'group_name'
p3877
S'Advanced'
p3878
sa(dp3879
S'description'
p3880
S'The name of the variable that this object applies to\n'
p3881
sS'cpp_type'
p3882
S'AuxVariableName'
p3883
sS'default'
p3884
g3
sS'name'
p3885
S'variable'
p3886
sS'required'
p3887
I01
sS'group_name'
p3888
NsasS'name'
p3889
S'/AuxKernels/FeatureFloodCountAux'
p3890
sa(dp3891
S'description'
p3892
g3
sS'subblocks'
p3893
NsS'parameters'
p3894
(lp3895
(dp3896
S'description'
p3897
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3898
sS'cpp_type'
p3899
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3900
sS'default'
p3901
g3
sS'name'
p3902
S'block'
p3903
sS'required'
p3904
I00
sS'group_name'
p3905
Nsa(dp3906
S'description'
p3907
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3908
sS'cpp_type'
p3909
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3910
sS'default'
p3911
g3
sS'name'
p3912
S'boundary'
p3913
sS'required'
p3914
I00
sS'group_name'
p3915
Nsa(dp3916
S'description'
p3917
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3918
sS'cpp_type'
p3919
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3920
sS'default'
p3921
g3
sS'name'
p3922
S'control_tags'
p3923
sS'required'
p3924
I00
sS'group_name'
p3925
S'Advanced'
p3926
sa(dp3927
S'description'
p3928
S'Set the enabled status of the MooseObject.\n'
p3929
sS'cpp_type'
p3930
S'bool'
p3931
sS'default'
p3932
S'1'
p3933
sS'name'
p3934
S'enable'
p3935
sS'required'
p3936
I00
sS'group_name'
p3937
S'Advanced'
p3938
sa(dp3939
S'name'
p3940
S'execute_on'
p3941
sS'cpp_type'
p3942
S'MultiMooseEnum'
p3943
sS'default'
p3944
S'LINEAR'
p3945
sS'description'
p3946
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3947
sS'required'
p3948
I00
sS'options'
p3949
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3950
sS'group_name'
p3951
Nsa(dp3952
S'description'
p3953
S'The function to use as the value\n'
p3954
sS'cpp_type'
p3955
S'FunctionName'
p3956
sS'default'
p3957
g3
sS'name'
p3958
S'function'
p3959
sS'required'
p3960
I01
sS'group_name'
p3961
Nsa(dp3962
S'description'
p3963
S'The seed for the master random number generator\n'
p3964
sS'cpp_type'
p3965
S'unsigned int'
p3966
sS'default'
p3967
S'0'
p3968
sS'name'
p3969
S'seed'
p3970
sS'required'
p3971
I00
sS'group_name'
p3972
S'Advanced'
p3973
sa(dp3974
S'description'
p3975
g3
sS'cpp_type'
p3976
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3977
sS'default'
p3978
S'FunctionAux'
p3979
sS'name'
p3980
S'type'
p3981
sS'required'
p3982
I00
sS'group_name'
p3983
Nsa(dp3984
S'description'
p3985
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3986
sS'cpp_type'
p3987
S'bool'
p3988
sS'default'
p3989
S'0'
p3990
sS'name'
p3991
S'use_displaced_mesh'
p3992
sS'required'
p3993
I00
sS'group_name'
p3994
S'Advanced'
p3995
sa(dp3996
S'description'
p3997
S'The name of the variable that this object applies to\n'
p3998
sS'cpp_type'
p3999
S'AuxVariableName'
p4000
sS'default'
p4001
g3
sS'name'
p4002
S'variable'
p4003
sS'required'
p4004
I01
sS'group_name'
p4005
NsasS'name'
p4006
S'/AuxKernels/FunctionAux'
p4007
sa(dp4008
S'description'
p4009
g3
sS'subblocks'
p4010
NsS'parameters'
p4011
(lp4012
(dp4013
S'description'
p4014
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4015
sS'cpp_type'
p4016
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4017
sS'default'
p4018
g3
sS'name'
p4019
S'block'
p4020
sS'required'
p4021
I00
sS'group_name'
p4022
Nsa(dp4023
S'description'
p4024
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4025
sS'cpp_type'
p4026
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4027
sS'default'
p4028
g3
sS'name'
p4029
S'boundary'
p4030
sS'required'
p4031
I00
sS'group_name'
p4032
Nsa(dp4033
S'description'
p4034
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4035
sS'cpp_type'
p4036
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4037
sS'default'
p4038
g3
sS'name'
p4039
S'control_tags'
p4040
sS'required'
p4041
I00
sS'group_name'
p4042
S'Advanced'
p4043
sa(dp4044
S'description'
p4045
S'Set the enabled status of the MooseObject.\n'
p4046
sS'cpp_type'
p4047
S'bool'
p4048
sS'default'
p4049
S'1'
p4050
sS'name'
p4051
S'enable'
p4052
sS'required'
p4053
I00
sS'group_name'
p4054
S'Advanced'
p4055
sa(dp4056
S'name'
p4057
S'execute_on'
p4058
sS'cpp_type'
p4059
S'MultiMooseEnum'
p4060
sS'default'
p4061
S'LINEAR'
p4062
sS'description'
p4063
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4064
sS'required'
p4065
I00
sS'options'
p4066
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4067
sS'group_name'
p4068
Nsa(dp4069
S'description'
p4070
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4071
sS'cpp_type'
p4072
S'double'
p4073
sS'default'
p4074
g3
sS'name'
p4075
S'normal_smoothing_distance'
p4076
sS'required'
p4077
I00
sS'group_name'
p4078
Nsa(dp4079
S'description'
p4080
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4081
sS'cpp_type'
p4082
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4083
sS'default'
p4084
g3
sS'name'
p4085
S'normal_smoothing_method'
p4086
sS'required'
p4087
I00
sS'group_name'
p4088
Nsa(dp4089
S'name'
p4090
S'order'
p4091
sS'cpp_type'
p4092
S'MooseEnum'
p4093
sS'default'
p4094
S'FIRST'
p4095
sS'description'
p4096
S'The finite element order\n'
p4097
sS'required'
p4098
I00
sS'options'
p4099
S'FIRST SECOND THIRD FOURTH'
p4100
sS'group_name'
p4101
Nsa(dp4102
S'description'
p4103
S'The boundary on the other side of a gap.\n'
p4104
sS'cpp_type'
p4105
S'BoundaryName'
p4106
sS'default'
p4107
g3
sS'name'
p4108
S'paired_boundary'
p4109
sS'required'
p4110
I01
sS'group_name'
p4111
Nsa(dp4112
S'description'
p4113
S'The variable to get the value of.\n'
p4114
sS'cpp_type'
p4115
S'VariableName'
p4116
sS'default'
p4117
g3
sS'name'
p4118
S'paired_variable'
p4119
sS'required'
p4120
I01
sS'group_name'
p4121
Nsa(dp4122
S'description'
p4123
S'The seed for the master random number generator\n'
p4124
sS'cpp_type'
p4125
S'unsigned int'
p4126
sS'default'
p4127
S'0'
p4128
sS'name'
p4129
S'seed'
p4130
sS'required'
p4131
I00
sS'group_name'
p4132
S'Advanced'
p4133
sa(dp4134
S'description'
p4135
S'Tangential distance to extend edges of contact surfaces\n'
p4136
sS'cpp_type'
p4137
S'double'
p4138
sS'default'
p4139
g3
sS'name'
p4140
S'tangential_tolerance'
p4141
sS'required'
p4142
I00
sS'group_name'
p4143
Nsa(dp4144
S'description'
p4145
g3
sS'cpp_type'
p4146
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4147
sS'default'
p4148
S'GapValueAux'
p4149
sS'name'
p4150
S'type'
p4151
sS'required'
p4152
I00
sS'group_name'
p4153
Nsa(dp4154
S'description'
p4155
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4156
sS'cpp_type'
p4157
S'bool'
p4158
sS'default'
p4159
S'1'
p4160
sS'name'
p4161
S'use_displaced_mesh'
p4162
sS'required'
p4163
I00
sS'group_name'
p4164
S'Advanced'
p4165
sa(dp4166
S'description'
p4167
S'The name of the variable that this object applies to\n'
p4168
sS'cpp_type'
p4169
S'AuxVariableName'
p4170
sS'default'
p4171
g3
sS'name'
p4172
S'variable'
p4173
sS'required'
p4174
I01
sS'group_name'
p4175
Nsa(dp4176
S'description'
p4177
S'Whether to output warning messages concerning nodes not being found\n'
p4178
sS'cpp_type'
p4179
S'bool'
p4180
sS'default'
p4181
S'0'
p4182
sS'name'
p4183
S'warnings'
p4184
sS'required'
p4185
I00
sS'group_name'
p4186
NsasS'name'
p4187
S'/AuxKernels/GapValueAux'
p4188
sa(dp4189
S'description'
p4190
S'Calculates the advection velocity of grain due to rigid body translation and rotation\n'
p4191
sS'subblocks'
p4192
NsS'parameters'
p4193
(lp4194
(dp4195
S'description'
p4196
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4197
sS'cpp_type'
p4198
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4199
sS'default'
p4200
g3
sS'name'
p4201
S'block'
p4202
sS'required'
p4203
I00
sS'group_name'
p4204
Nsa(dp4205
S'description'
p4206
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4207
sS'cpp_type'
p4208
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4209
sS'default'
p4210
g3
sS'name'
p4211
S'boundary'
p4212
sS'required'
p4213
I00
sS'group_name'
p4214
Nsa(dp4215
S'name'
p4216
S'component'
p4217
sS'cpp_type'
p4218
S'MooseEnum'
p4219
sS'default'
p4220
g3
sS'description'
p4221
S'The gradient component to compute\n'
p4222
sS'required'
p4223
I00
sS'options'
p4224
S'x y z'
p4225
sS'group_name'
p4226
Nsa(dp4227
S'description'
p4228
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4229
sS'cpp_type'
p4230
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4231
sS'default'
p4232
g3
sS'name'
p4233
S'control_tags'
p4234
sS'required'
p4235
I00
sS'group_name'
p4236
S'Advanced'
p4237
sa(dp4238
S'description'
p4239
S'Set the enabled status of the MooseObject.\n'
p4240
sS'cpp_type'
p4241
S'bool'
p4242
sS'default'
p4243
S'1'
p4244
sS'name'
p4245
S'enable'
p4246
sS'required'
p4247
I00
sS'group_name'
p4248
S'Advanced'
p4249
sa(dp4250
S'name'
p4251
S'execute_on'
p4252
sS'cpp_type'
p4253
S'MultiMooseEnum'
p4254
sS'default'
p4255
S'LINEAR'
p4256
sS'description'
p4257
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4258
sS'required'
p4259
I00
sS'options'
p4260
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4261
sS'group_name'
p4262
Nsa(dp4263
S'description'
p4264
S'userobject for getting force and torque acting on grains\n'
p4265
sS'cpp_type'
p4266
S'UserObjectName'
p4267
sS'default'
p4268
g3
sS'name'
p4269
S'grain_force'
p4270
sS'required'
p4271
I00
sS'group_name'
p4272
Nsa(dp4273
S'description'
p4274
S'userobject for getting volume and center of mass of grains\n'
p4275
sS'cpp_type'
p4276
S'UserObjectName'
p4277
sS'default'
p4278
g3
sS'name'
p4279
S'grain_tracker_object'
p4280
sS'required'
p4281
I00
sS'group_name'
p4282
Nsa(dp4283
S'description'
p4284
S'The feature volume VectorPostprocessorValue.\n'
p4285
sS'cpp_type'
p4286
S'VectorPostprocessorName'
p4287
sS'default'
p4288
g3
sS'name'
p4289
S'grain_volumes'
p4290
sS'required'
p4291
I00
sS'group_name'
p4292
Nsa(dp4293
S'description'
p4294
S'constant value characterizing grain rotation\n'
p4295
sS'cpp_type'
p4296
S'double'
p4297
sS'default'
p4298
S'1'
p4299
sS'name'
p4300
S'rotation_constant'
p4301
sS'required'
p4302
I00
sS'group_name'
p4303
Nsa(dp4304
S'description'
p4305
S'The seed for the master random number generator\n'
p4306
sS'cpp_type'
p4307
S'unsigned int'
p4308
sS'default'
p4309
S'0'
p4310
sS'name'
p4311
S'seed'
p4312
sS'required'
p4313
I00
sS'group_name'
p4314
S'Advanced'
p4315
sa(dp4316
S'description'
p4317
S'constant value characterizing grain translation\n'
p4318
sS'cpp_type'
p4319
S'double'
p4320
sS'default'
p4321
S'1'
p4322
sS'name'
p4323
S'translation_constant'
p4324
sS'required'
p4325
I00
sS'group_name'
p4326
Nsa(dp4327
S'description'
p4328
g3
sS'cpp_type'
p4329
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4330
sS'default'
p4331
S'GrainAdvectionAux'
p4332
sS'name'
p4333
S'type'
p4334
sS'required'
p4335
I00
sS'group_name'
p4336
Nsa(dp4337
S'description'
p4338
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4339
sS'cpp_type'
p4340
S'bool'
p4341
sS'default'
p4342
S'0'
p4343
sS'name'
p4344
S'use_displaced_mesh'
p4345
sS'required'
p4346
I00
sS'group_name'
p4347
S'Advanced'
p4348
sa(dp4349
S'description'
p4350
S'The name of the variable that this object applies to\n'
p4351
sS'cpp_type'
p4352
S'AuxVariableName'
p4353
sS'default'
p4354
g3
sS'name'
p4355
S'variable'
p4356
sS'required'
p4357
I01
sS'group_name'
p4358
NsasS'name'
p4359
S'/AuxKernels/GrainAdvectionAux'
p4360
sa(dp4361
S'description'
p4362
S'Total free energy in KKS system, including chemical, barrier and gradient terms\n'
p4363
sS'subblocks'
p4364
NsS'parameters'
p4365
(lp4366
(dp4367
S'description'
p4368
S'Coupled variable holding additional free energy contributions to be summed up\n'
p4369
sS'cpp_type'
p4370
S'std::vector<VariableName>'
p4371
sS'default'
p4372
S'0'
p4373
sS'name'
p4374
S'additional_free_energy'
p4375
sS'required'
p4376
I00
sS'group_name'
p4377
Nsa(dp4378
S'description'
p4379
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4380
sS'cpp_type'
p4381
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4382
sS'default'
p4383
g3
sS'name'
p4384
S'block'
p4385
sS'required'
p4386
I00
sS'group_name'
p4387
Nsa(dp4388
S'description'
p4389
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4390
sS'cpp_type'
p4391
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4392
sS'default'
p4393
g3
sS'name'
p4394
S'boundary'
p4395
sS'required'
p4396
I00
sS'group_name'
p4397
Nsa(dp4398
S'description'
p4399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4400
sS'cpp_type'
p4401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4402
sS'default'
p4403
g3
sS'name'
p4404
S'control_tags'
p4405
sS'required'
p4406
I00
sS'group_name'
p4407
S'Advanced'
p4408
sa(dp4409
S'description'
p4410
S'Set the enabled status of the MooseObject.\n'
p4411
sS'cpp_type'
p4412
S'bool'
p4413
sS'default'
p4414
S'1'
p4415
sS'name'
p4416
S'enable'
p4417
sS'required'
p4418
I00
sS'group_name'
p4419
S'Advanced'
p4420
sa(dp4421
S'name'
p4422
S'execute_on'
p4423
sS'cpp_type'
p4424
S'MultiMooseEnum'
p4425
sS'default'
p4426
S'LINEAR'
p4427
sS'description'
p4428
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4429
sS'required'
p4430
I00
sS'options'
p4431
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4432
sS'group_name'
p4433
Nsa(dp4434
S'description'
p4435
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p4436
sS'cpp_type'
p4437
S'MaterialPropertyName'
p4438
sS'default'
p4439
g3
sS'name'
p4440
S'fa_name'
p4441
sS'required'
p4442
I01
sS'group_name'
p4443
Nsa(dp4444
S'description'
p4445
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p4446
sS'cpp_type'
p4447
S'MaterialPropertyName'
p4448
sS'default'
p4449
g3
sS'name'
p4450
S'fb_name'
p4451
sS'required'
p4452
I01
sS'group_name'
p4453
Nsa(dp4454
S'description'
p4455
S'Base name for the double well function g(eta)\n'
p4456
sS'cpp_type'
p4457
S'MaterialPropertyName'
p4458
sS'default'
p4459
S'g'
p4460
sS'name'
p4461
S'g_name'
p4462
sS'required'
p4463
I00
sS'group_name'
p4464
Nsa(dp4465
S'description'
p4466
S'Base name for the switching function h(eta)\n'
p4467
sS'cpp_type'
p4468
S'MaterialPropertyName'
p4469
sS'default'
p4470
S'h'
p4471
sS'name'
p4472
S'h_name'
p4473
sS'required'
p4474
I00
sS'group_name'
p4475
Nsa(dp4476
S'description'
p4477
S'Variable names that contribute to interfacial energy\n'
p4478
sS'cpp_type'
p4479
S'std::vector<VariableName>'
p4480
sS'default'
p4481
g3
sS'name'
p4482
S'interfacial_vars'
p4483
sS'required'
p4484
I00
sS'group_name'
p4485
Nsa(dp4486
S'description'
p4487
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order. For basic KKS, there is 1 kappa, 1 interfacial_var.\n'
p4488
sS'cpp_type'
p4489
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4490
sS'default'
p4491
g3
sS'name'
p4492
S'kappa_names'
p4493
sS'required'
p4494
I00
sS'group_name'
p4495
Nsa(dp4496
S'description'
p4497
S'The seed for the master random number generator\n'
p4498
sS'cpp_type'
p4499
S'unsigned int'
p4500
sS'default'
p4501
S'0'
p4502
sS'name'
p4503
S'seed'
p4504
sS'required'
p4505
I00
sS'group_name'
p4506
S'Advanced'
p4507
sa(dp4508
S'description'
p4509
g3
sS'cpp_type'
p4510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4511
sS'default'
p4512
S'KKSGlobalFreeEnergy'
p4513
sS'name'
p4514
S'type'
p4515
sS'required'
p4516
I00
sS'group_name'
p4517
Nsa(dp4518
S'description'
p4519
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4520
sS'cpp_type'
p4521
S'bool'
p4522
sS'default'
p4523
S'0'
p4524
sS'name'
p4525
S'use_displaced_mesh'
p4526
sS'required'
p4527
I00
sS'group_name'
p4528
S'Advanced'
p4529
sa(dp4530
S'description'
p4531
S'The name of the variable that this object applies to\n'
p4532
sS'cpp_type'
p4533
S'AuxVariableName'
p4534
sS'default'
p4535
g3
sS'name'
p4536
S'variable'
p4537
sS'required'
p4538
I01
sS'group_name'
p4539
Nsa(dp4540
S'description'
p4541
S'Double well height parameter\n'
p4542
sS'cpp_type'
p4543
S'double'
p4544
sS'default'
p4545
g3
sS'name'
p4546
S'w'
p4547
sS'required'
p4548
I01
sS'group_name'
p4549
NsasS'name'
p4550
S'/AuxKernels/KKSGlobalFreeEnergy'
p4551
sa(dp4552
S'description'
p4553
S'Total free energy in multi-phase KKS system, including chemical, barrier and gradient terms\n'
p4554
sS'subblocks'
p4555
NsS'parameters'
p4556
(lp4557
(dp4558
S'description'
p4559
S'List of free energies for each phase. Place in same order as hj_names and gj_names!\n'
p4560
sS'cpp_type'
p4561
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4562
sS'default'
p4563
g3
sS'name'
p4564
S'Fj_names'
p4565
sS'required'
p4566
I01
sS'group_name'
p4567
Nsa(dp4568
S'description'
p4569
S'Coupled variable holding additional free energy contributions to be summed up\n'
p4570
sS'cpp_type'
p4571
S'std::vector<VariableName>'
p4572
sS'default'
p4573
S'0'
p4574
sS'name'
p4575
S'additional_free_energy'
p4576
sS'required'
p4577
I00
sS'group_name'
p4578
Nsa(dp4579
S'description'
p4580
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4581
sS'cpp_type'
p4582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4583
sS'default'
p4584
g3
sS'name'
p4585
S'block'
p4586
sS'required'
p4587
I00
sS'group_name'
p4588
Nsa(dp4589
S'description'
p4590
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4591
sS'cpp_type'
p4592
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4593
sS'default'
p4594
g3
sS'name'
p4595
S'boundary'
p4596
sS'required'
p4597
I00
sS'group_name'
p4598
Nsa(dp4599
S'description'
p4600
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4601
sS'cpp_type'
p4602
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4603
sS'default'
p4604
g3
sS'name'
p4605
S'control_tags'
p4606
sS'required'
p4607
I00
sS'group_name'
p4608
S'Advanced'
p4609
sa(dp4610
S'description'
p4611
S'Set the enabled status of the MooseObject.\n'
p4612
sS'cpp_type'
p4613
S'bool'
p4614
sS'default'
p4615
S'1'
p4616
sS'name'
p4617
S'enable'
p4618
sS'required'
p4619
I00
sS'group_name'
p4620
S'Advanced'
p4621
sa(dp4622
S'name'
p4623
S'execute_on'
p4624
sS'cpp_type'
p4625
S'MultiMooseEnum'
p4626
sS'default'
p4627
S'LINEAR'
p4628
sS'description'
p4629
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4630
sS'required'
p4631
I00
sS'options'
p4632
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4633
sS'group_name'
p4634
Nsa(dp4635
S'description'
p4636
S'Barrier Function Materials that provide g. Place in same order as Fj_names and hj_names!\n'
p4637
sS'cpp_type'
p4638
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4639
sS'default'
p4640
g3
sS'name'
p4641
S'gj_names'
p4642
sS'required'
p4643
I01
sS'group_name'
p4644
Nsa(dp4645
S'description'
p4646
S'Switching Function Materials that provide h. Place in same order as Fj_names and gj_names!\n'
p4647
sS'cpp_type'
p4648
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4649
sS'default'
p4650
g3
sS'name'
p4651
S'hj_names'
p4652
sS'required'
p4653
I01
sS'group_name'
p4654
Nsa(dp4655
S'description'
p4656
S'Variable names that contribute to interfacial energy\n'
p4657
sS'cpp_type'
p4658
S'std::vector<VariableName>'
p4659
sS'default'
p4660
g3
sS'name'
p4661
S'interfacial_vars'
p4662
sS'required'
p4663
I00
sS'group_name'
p4664
Nsa(dp4665
S'description'
p4666
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p4667
sS'cpp_type'
p4668
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4669
sS'default'
p4670
g3
sS'name'
p4671
S'kappa_names'
p4672
sS'required'
p4673
I00
sS'group_name'
p4674
Nsa(dp4675
S'description'
p4676
S'The seed for the master random number generator\n'
p4677
sS'cpp_type'
p4678
S'unsigned int'
p4679
sS'default'
p4680
S'0'
p4681
sS'name'
p4682
S'seed'
p4683
sS'required'
p4684
I00
sS'group_name'
p4685
S'Advanced'
p4686
sa(dp4687
S'description'
p4688
g3
sS'cpp_type'
p4689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4690
sS'default'
p4691
S'KKSMultiFreeEnergy'
p4692
sS'name'
p4693
S'type'
p4694
sS'required'
p4695
I00
sS'group_name'
p4696
Nsa(dp4697
S'description'
p4698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4699
sS'cpp_type'
p4700
S'bool'
p4701
sS'default'
p4702
S'0'
p4703
sS'name'
p4704
S'use_displaced_mesh'
p4705
sS'required'
p4706
I00
sS'group_name'
p4707
S'Advanced'
p4708
sa(dp4709
S'description'
p4710
S'The name of the variable that this object applies to\n'
p4711
sS'cpp_type'
p4712
S'AuxVariableName'
p4713
sS'default'
p4714
g3
sS'name'
p4715
S'variable'
p4716
sS'required'
p4717
I01
sS'group_name'
p4718
Nsa(dp4719
S'description'
p4720
S'Double well height parameter\n'
p4721
sS'cpp_type'
p4722
S'double'
p4723
sS'default'
p4724
g3
sS'name'
p4725
S'w'
p4726
sS'required'
p4727
I01
sS'group_name'
p4728
NsasS'name'
p4729
S'/AuxKernels/KKSMultiFreeEnergy'
p4730
sa(dp4731
S'description'
p4732
g3
sS'subblocks'
p4733
NsS'parameters'
p4734
(lp4735
(dp4736
S'description'
p4737
S'the dimensions of the mesh\n'
p4738
sS'cpp_type'
p4739
S'unsigned int'
p4740
sS'default'
p4741
g3
sS'name'
p4742
S'dim'
p4743
sS'required'
p4744
I01
sS'group_name'
p4745
Nsa(dp4746
S'description'
p4747
S'Scalar material property name for divergence variable\n'
p4748
sS'cpp_type'
p4749
S'MaterialPropertyName'
p4750
sS'default'
p4751
g3
sS'name'
p4752
S'divergence_property'
p4753
sS'required'
p4754
I00
sS'group_name'
p4755
Nsa(dp4756
S'description'
p4757
S'Name of divergence variable to generate kernels for\n'
p4758
sS'cpp_type'
p4759
S'AuxVariableName'
p4760
sS'default'
p4761
g3
sS'name'
p4762
S'divergence_variable'
p4763
sS'required'
p4764
I00
sS'group_name'
p4765
Nsa(dp4766
S'description'
p4767
S'Value that specifies the number of grains to create\n'
p4768
sS'cpp_type'
p4769
S'unsigned int'
p4770
sS'default'
p4771
g3
sS'name'
p4772
S'op_num'
p4773
sS'required'
p4774
I01
sS'group_name'
p4775
Nsa(dp4776
S'description'
p4777
S'the scalar material property names\n'
p4778
sS'cpp_type'
p4779
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p4780
sS'default'
p4781
g3
sS'name'
p4782
S'property'
p4783
sS'required'
p4784
I01
sS'group_name'
p4785
Nsa(dp4786
S'description'
p4787
S'Whether to use displaced mesh in the kernels\n'
p4788
sS'cpp_type'
p4789
S'bool'
p4790
sS'default'
p4791
S'0'
p4792
sS'name'
p4793
S'use_displaced_mesh'
p4794
sS'required'
p4795
I00
sS'group_name'
p4796
Nsa(dp4797
S'description'
p4798
S'Vector specifies the base name of the variables\n'
p4799
sS'cpp_type'
p4800
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4801
sS'default'
p4802
g3
sS'name'
p4803
S'var_name_base'
p4804
sS'required'
p4805
I01
sS'group_name'
p4806
NsasS'name'
p4807
S'/AuxKernels/MatVecRealGradAuxKernel'
p4808
sa(dp4809
S'description'
p4810
g3
sS'subblocks'
p4811
NsS'parameters'
p4812
(lp4813
(dp4814
S'description'
p4815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4816
sS'cpp_type'
p4817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4818
sS'default'
p4819
g3
sS'name'
p4820
S'block'
p4821
sS'required'
p4822
I00
sS'group_name'
p4823
Nsa(dp4824
S'description'
p4825
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4826
sS'cpp_type'
p4827
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4828
sS'default'
p4829
g3
sS'name'
p4830
S'boundary'
p4831
sS'required'
p4832
I00
sS'group_name'
p4833
Nsa(dp4834
S'description'
p4835
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4836
sS'cpp_type'
p4837
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4838
sS'default'
p4839
g3
sS'name'
p4840
S'control_tags'
p4841
sS'required'
p4842
I00
sS'group_name'
p4843
S'Advanced'
p4844
sa(dp4845
S'description'
p4846
S'Set the enabled status of the MooseObject.\n'
p4847
sS'cpp_type'
p4848
S'bool'
p4849
sS'default'
p4850
S'1'
p4851
sS'name'
p4852
S'enable'
p4853
sS'required'
p4854
I00
sS'group_name'
p4855
S'Advanced'
p4856
sa(dp4857
S'name'
p4858
S'execute_on'
p4859
sS'cpp_type'
p4860
S'MultiMooseEnum'
p4861
sS'default'
p4862
S'LINEAR'
p4863
sS'description'
p4864
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4865
sS'required'
p4866
I00
sS'options'
p4867
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4868
sS'group_name'
p4869
Nsa(dp4870
S'description'
p4871
S'The factor by which to multiply your material property for visualization\n'
p4872
sS'cpp_type'
p4873
S'double'
p4874
sS'default'
p4875
S'1'
p4876
sS'name'
p4877
S'factor'
p4878
sS'required'
p4879
I00
sS'group_name'
p4880
Nsa(dp4881
S'description'
p4882
S'The offset to add to your material property for visualization\n'
p4883
sS'cpp_type'
p4884
S'double'
p4885
sS'default'
p4886
S'0'
p4887
sS'name'
p4888
S'offset'
p4889
sS'required'
p4890
I00
sS'group_name'
p4891
Nsa(dp4892
S'description'
p4893
S'The scalar material property name\n'
p4894
sS'cpp_type'
p4895
S'MaterialPropertyName'
p4896
sS'default'
p4897
g3
sS'name'
p4898
S'property'
p4899
sS'required'
p4900
I01
sS'group_name'
p4901
Nsa(dp4902
S'description'
p4903
S'The seed for the master random number generator\n'
p4904
sS'cpp_type'
p4905
S'unsigned int'
p4906
sS'default'
p4907
S'0'
p4908
sS'name'
p4909
S'seed'
p4910
sS'required'
p4911
I00
sS'group_name'
p4912
S'Advanced'
p4913
sa(dp4914
S'description'
p4915
g3
sS'cpp_type'
p4916
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4917
sS'default'
p4918
S'MaterialRealAux'
p4919
sS'name'
p4920
S'type'
p4921
sS'required'
p4922
I00
sS'group_name'
p4923
Nsa(dp4924
S'description'
p4925
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4926
sS'cpp_type'
p4927
S'bool'
p4928
sS'default'
p4929
S'0'
p4930
sS'name'
p4931
S'use_displaced_mesh'
p4932
sS'required'
p4933
I00
sS'group_name'
p4934
S'Advanced'
p4935
sa(dp4936
S'description'
p4937
S'The name of the variable that this object applies to\n'
p4938
sS'cpp_type'
p4939
S'AuxVariableName'
p4940
sS'default'
p4941
g3
sS'name'
p4942
S'variable'
p4943
sS'required'
p4944
I01
sS'group_name'
p4945
NsasS'name'
p4946
S'/AuxKernels/MaterialRealAux'
p4947
sa(dp4948
S'description'
p4949
g3
sS'subblocks'
p4950
NsS'parameters'
p4951
(lp4952
(dp4953
S'description'
p4954
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4955
sS'cpp_type'
p4956
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4957
sS'default'
p4958
g3
sS'name'
p4959
S'block'
p4960
sS'required'
p4961
I00
sS'group_name'
p4962
Nsa(dp4963
S'description'
p4964
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4965
sS'cpp_type'
p4966
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4967
sS'default'
p4968
g3
sS'name'
p4969
S'boundary'
p4970
sS'required'
p4971
I00
sS'group_name'
p4972
Nsa(dp4973
S'description'
p4974
S'The column component to consider for this kernel\n'
p4975
sS'cpp_type'
p4976
S'unsigned int'
p4977
sS'default'
p4978
S'0'
p4979
sS'name'
p4980
S'column'
p4981
sS'required'
p4982
I00
sS'group_name'
p4983
Nsa(dp4984
S'description'
p4985
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4986
sS'cpp_type'
p4987
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4988
sS'default'
p4989
g3
sS'name'
p4990
S'control_tags'
p4991
sS'required'
p4992
I00
sS'group_name'
p4993
S'Advanced'
p4994
sa(dp4995
S'description'
p4996
S'Set the enabled status of the MooseObject.\n'
p4997
sS'cpp_type'
p4998
S'bool'
p4999
sS'default'
p5000
S'1'
p5001
sS'name'
p5002
S'enable'
p5003
sS'required'
p5004
I00
sS'group_name'
p5005
S'Advanced'
p5006
sa(dp5007
S'name'
p5008
S'execute_on'
p5009
sS'cpp_type'
p5010
S'MultiMooseEnum'
p5011
sS'default'
p5012
S'LINEAR'
p5013
sS'description'
p5014
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5015
sS'required'
p5016
I00
sS'options'
p5017
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5018
sS'group_name'
p5019
Nsa(dp5020
S'description'
p5021
S'The factor by which to multiply your material property for visualization\n'
p5022
sS'cpp_type'
p5023
S'double'
p5024
sS'default'
p5025
S'1'
p5026
sS'name'
p5027
S'factor'
p5028
sS'required'
p5029
I00
sS'group_name'
p5030
Nsa(dp5031
S'description'
p5032
S'The offset to add to your material property for visualization\n'
p5033
sS'cpp_type'
p5034
S'double'
p5035
sS'default'
p5036
S'0'
p5037
sS'name'
p5038
S'offset'
p5039
sS'required'
p5040
I00
sS'group_name'
p5041
Nsa(dp5042
S'description'
p5043
S'The scalar material property name\n'
p5044
sS'cpp_type'
p5045
S'MaterialPropertyName'
p5046
sS'default'
p5047
g3
sS'name'
p5048
S'property'
p5049
sS'required'
p5050
I01
sS'group_name'
p5051
Nsa(dp5052
S'description'
p5053
S'The row component to consider for this kernel\n'
p5054
sS'cpp_type'
p5055
S'unsigned int'
p5056
sS'default'
p5057
S'0'
p5058
sS'name'
p5059
S'row'
p5060
sS'required'
p5061
I00
sS'group_name'
p5062
Nsa(dp5063
S'description'
p5064
S'The seed for the master random number generator\n'
p5065
sS'cpp_type'
p5066
S'unsigned int'
p5067
sS'default'
p5068
S'0'
p5069
sS'name'
p5070
S'seed'
p5071
sS'required'
p5072
I00
sS'group_name'
p5073
S'Advanced'
p5074
sa(dp5075
S'description'
p5076
g3
sS'cpp_type'
p5077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5078
sS'default'
p5079
S'MaterialRealDenseMatrixAux'
p5080
sS'name'
p5081
S'type'
p5082
sS'required'
p5083
I00
sS'group_name'
p5084
Nsa(dp5085
S'description'
p5086
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5087
sS'cpp_type'
p5088
S'bool'
p5089
sS'default'
p5090
S'0'
p5091
sS'name'
p5092
S'use_displaced_mesh'
p5093
sS'required'
p5094
I00
sS'group_name'
p5095
S'Advanced'
p5096
sa(dp5097
S'description'
p5098
S'The name of the variable that this object applies to\n'
p5099
sS'cpp_type'
p5100
S'AuxVariableName'
p5101
sS'default'
p5102
g3
sS'name'
p5103
S'variable'
p5104
sS'required'
p5105
I01
sS'group_name'
p5106
NsasS'name'
p5107
S'/AuxKernels/MaterialRealDenseMatrixAux'
p5108
sa(dp5109
S'description'
p5110
g3
sS'subblocks'
p5111
NsS'parameters'
p5112
(lp5113
(dp5114
S'description'
p5115
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5116
sS'cpp_type'
p5117
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5118
sS'default'
p5119
g3
sS'name'
p5120
S'block'
p5121
sS'required'
p5122
I00
sS'group_name'
p5123
Nsa(dp5124
S'description'
p5125
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5126
sS'cpp_type'
p5127
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5128
sS'default'
p5129
g3
sS'name'
p5130
S'boundary'
p5131
sS'required'
p5132
I00
sS'group_name'
p5133
Nsa(dp5134
S'description'
p5135
S'The column component to consider for this kernel\n'
p5136
sS'cpp_type'
p5137
S'unsigned int'
p5138
sS'default'
p5139
S'0'
p5140
sS'name'
p5141
S'column'
p5142
sS'required'
p5143
I00
sS'group_name'
p5144
Nsa(dp5145
S'description'
p5146
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5147
sS'cpp_type'
p5148
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5149
sS'default'
p5150
g3
sS'name'
p5151
S'control_tags'
p5152
sS'required'
p5153
I00
sS'group_name'
p5154
S'Advanced'
p5155
sa(dp5156
S'description'
p5157
S'Set the enabled status of the MooseObject.\n'
p5158
sS'cpp_type'
p5159
S'bool'
p5160
sS'default'
p5161
S'1'
p5162
sS'name'
p5163
S'enable'
p5164
sS'required'
p5165
I00
sS'group_name'
p5166
S'Advanced'
p5167
sa(dp5168
S'name'
p5169
S'execute_on'
p5170
sS'cpp_type'
p5171
S'MultiMooseEnum'
p5172
sS'default'
p5173
S'LINEAR'
p5174
sS'description'
p5175
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5176
sS'required'
p5177
I00
sS'options'
p5178
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5179
sS'group_name'
p5180
Nsa(dp5181
S'description'
p5182
S'The factor by which to multiply your material property for visualization\n'
p5183
sS'cpp_type'
p5184
S'double'
p5185
sS'default'
p5186
S'1'
p5187
sS'name'
p5188
S'factor'
p5189
sS'required'
p5190
I00
sS'group_name'
p5191
Nsa(dp5192
S'description'
p5193
S'The offset to add to your material property for visualization\n'
p5194
sS'cpp_type'
p5195
S'double'
p5196
sS'default'
p5197
S'0'
p5198
sS'name'
p5199
S'offset'
p5200
sS'required'
p5201
I00
sS'group_name'
p5202
Nsa(dp5203
S'description'
p5204
S'The scalar material property name\n'
p5205
sS'cpp_type'
p5206
S'MaterialPropertyName'
p5207
sS'default'
p5208
g3
sS'name'
p5209
S'property'
p5210
sS'required'
p5211
I01
sS'group_name'
p5212
Nsa(dp5213
S'description'
p5214
S'The row component to consider for this kernel\n'
p5215
sS'cpp_type'
p5216
S'unsigned int'
p5217
sS'default'
p5218
S'0'
p5219
sS'name'
p5220
S'row'
p5221
sS'required'
p5222
I00
sS'group_name'
p5223
Nsa(dp5224
S'description'
p5225
S'The seed for the master random number generator\n'
p5226
sS'cpp_type'
p5227
S'unsigned int'
p5228
sS'default'
p5229
S'0'
p5230
sS'name'
p5231
S'seed'
p5232
sS'required'
p5233
I00
sS'group_name'
p5234
S'Advanced'
p5235
sa(dp5236
S'description'
p5237
g3
sS'cpp_type'
p5238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5239
sS'default'
p5240
S'MaterialRealTensorValueAux'
p5241
sS'name'
p5242
S'type'
p5243
sS'required'
p5244
I00
sS'group_name'
p5245
Nsa(dp5246
S'description'
p5247
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5248
sS'cpp_type'
p5249
S'bool'
p5250
sS'default'
p5251
S'0'
p5252
sS'name'
p5253
S'use_displaced_mesh'
p5254
sS'required'
p5255
I00
sS'group_name'
p5256
S'Advanced'
p5257
sa(dp5258
S'description'
p5259
S'The name of the variable that this object applies to\n'
p5260
sS'cpp_type'
p5261
S'AuxVariableName'
p5262
sS'default'
p5263
g3
sS'name'
p5264
S'variable'
p5265
sS'required'
p5266
I01
sS'group_name'
p5267
NsasS'name'
p5268
S'/AuxKernels/MaterialRealTensorValueAux'
p5269
sa(dp5270
S'description'
p5271
g3
sS'subblocks'
p5272
NsS'parameters'
p5273
(lp5274
(dp5275
S'description'
p5276
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5277
sS'cpp_type'
p5278
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5279
sS'default'
p5280
g3
sS'name'
p5281
S'block'
p5282
sS'required'
p5283
I00
sS'group_name'
p5284
Nsa(dp5285
S'description'
p5286
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5287
sS'cpp_type'
p5288
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5289
sS'default'
p5290
g3
sS'name'
p5291
S'boundary'
p5292
sS'required'
p5293
I00
sS'group_name'
p5294
Nsa(dp5295
S'description'
p5296
S'The vector component to consider for this kernel\n'
p5297
sS'cpp_type'
p5298
S'unsigned int'
p5299
sS'default'
p5300
S'0'
p5301
sS'name'
p5302
S'component'
p5303
sS'required'
p5304
I00
sS'group_name'
p5305
Nsa(dp5306
S'description'
p5307
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5308
sS'cpp_type'
p5309
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5310
sS'default'
p5311
g3
sS'name'
p5312
S'control_tags'
p5313
sS'required'
p5314
I00
sS'group_name'
p5315
S'Advanced'
p5316
sa(dp5317
S'description'
p5318
S'Set the enabled status of the MooseObject.\n'
p5319
sS'cpp_type'
p5320
S'bool'
p5321
sS'default'
p5322
S'1'
p5323
sS'name'
p5324
S'enable'
p5325
sS'required'
p5326
I00
sS'group_name'
p5327
S'Advanced'
p5328
sa(dp5329
S'name'
p5330
S'execute_on'
p5331
sS'cpp_type'
p5332
S'MultiMooseEnum'
p5333
sS'default'
p5334
S'LINEAR'
p5335
sS'description'
p5336
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5337
sS'required'
p5338
I00
sS'options'
p5339
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5340
sS'group_name'
p5341
Nsa(dp5342
S'description'
p5343
S'The factor by which to multiply your material property for visualization\n'
p5344
sS'cpp_type'
p5345
S'double'
p5346
sS'default'
p5347
S'1'
p5348
sS'name'
p5349
S'factor'
p5350
sS'required'
p5351
I00
sS'group_name'
p5352
Nsa(dp5353
S'description'
p5354
S'The offset to add to your material property for visualization\n'
p5355
sS'cpp_type'
p5356
S'double'
p5357
sS'default'
p5358
S'0'
p5359
sS'name'
p5360
S'offset'
p5361
sS'required'
p5362
I00
sS'group_name'
p5363
Nsa(dp5364
S'description'
p5365
S'The scalar material property name\n'
p5366
sS'cpp_type'
p5367
S'MaterialPropertyName'
p5368
sS'default'
p5369
g3
sS'name'
p5370
S'property'
p5371
sS'required'
p5372
I01
sS'group_name'
p5373
Nsa(dp5374
S'description'
p5375
S'The seed for the master random number generator\n'
p5376
sS'cpp_type'
p5377
S'unsigned int'
p5378
sS'default'
p5379
S'0'
p5380
sS'name'
p5381
S'seed'
p5382
sS'required'
p5383
I00
sS'group_name'
p5384
S'Advanced'
p5385
sa(dp5386
S'description'
p5387
g3
sS'cpp_type'
p5388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5389
sS'default'
p5390
S'MaterialRealVectorValueAux'
p5391
sS'name'
p5392
S'type'
p5393
sS'required'
p5394
I00
sS'group_name'
p5395
Nsa(dp5396
S'description'
p5397
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5398
sS'cpp_type'
p5399
S'bool'
p5400
sS'default'
p5401
S'0'
p5402
sS'name'
p5403
S'use_displaced_mesh'
p5404
sS'required'
p5405
I00
sS'group_name'
p5406
S'Advanced'
p5407
sa(dp5408
S'description'
p5409
S'The name of the variable that this object applies to\n'
p5410
sS'cpp_type'
p5411
S'AuxVariableName'
p5412
sS'default'
p5413
g3
sS'name'
p5414
S'variable'
p5415
sS'required'
p5416
I01
sS'group_name'
p5417
NsasS'name'
p5418
S'/AuxKernels/MaterialRealVectorValueAux'
p5419
sa(dp5420
S'description'
p5421
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p5422
sS'subblocks'
p5423
NsS'parameters'
p5424
(lp5425
(dp5426
S'description'
p5427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5428
sS'cpp_type'
p5429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5430
sS'default'
p5431
g3
sS'name'
p5432
S'block'
p5433
sS'required'
p5434
I00
sS'group_name'
p5435
Nsa(dp5436
S'description'
p5437
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5438
sS'cpp_type'
p5439
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5440
sS'default'
p5441
g3
sS'name'
p5442
S'boundary'
p5443
sS'required'
p5444
I00
sS'group_name'
p5445
Nsa(dp5446
S'description'
p5447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5448
sS'cpp_type'
p5449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5450
sS'default'
p5451
g3
sS'name'
p5452
S'control_tags'
p5453
sS'required'
p5454
I00
sS'group_name'
p5455
S'Advanced'
p5456
sa(dp5457
S'description'
p5458
S'Set the enabled status of the MooseObject.\n'
p5459
sS'cpp_type'
p5460
S'bool'
p5461
sS'default'
p5462
S'1'
p5463
sS'name'
p5464
S'enable'
p5465
sS'required'
p5466
I00
sS'group_name'
p5467
S'Advanced'
p5468
sa(dp5469
S'name'
p5470
S'execute_on'
p5471
sS'cpp_type'
p5472
S'MultiMooseEnum'
p5473
sS'default'
p5474
S'LINEAR'
p5475
sS'description'
p5476
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5477
sS'required'
p5478
I00
sS'options'
p5479
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5480
sS'group_name'
p5481
Nsa(dp5482
S'description'
p5483
S'The factor by which to multiply your material property for visualization\n'
p5484
sS'cpp_type'
p5485
S'double'
p5486
sS'default'
p5487
S'1'
p5488
sS'name'
p5489
S'factor'
p5490
sS'required'
p5491
I00
sS'group_name'
p5492
Nsa(dp5493
S'description'
p5494
S'The index to consider for this kernel\n'
p5495
sS'cpp_type'
p5496
S'unsigned int'
p5497
sS'default'
p5498
S'0'
p5499
sS'name'
p5500
S'index'
p5501
sS'required'
p5502
I00
sS'group_name'
p5503
Nsa(dp5504
S'description'
p5505
S'The offset to add to your material property for visualization\n'
p5506
sS'cpp_type'
p5507
S'double'
p5508
sS'default'
p5509
S'0'
p5510
sS'name'
p5511
S'offset'
p5512
sS'required'
p5513
I00
sS'group_name'
p5514
Nsa(dp5515
S'description'
p5516
S'The scalar material property name\n'
p5517
sS'cpp_type'
p5518
S'MaterialPropertyName'
p5519
sS'default'
p5520
g3
sS'name'
p5521
S'property'
p5522
sS'required'
p5523
I01
sS'group_name'
p5524
Nsa(dp5525
S'description'
p5526
S'The seed for the master random number generator\n'
p5527
sS'cpp_type'
p5528
S'unsigned int'
p5529
sS'default'
p5530
S'0'
p5531
sS'name'
p5532
S'seed'
p5533
sS'required'
p5534
I00
sS'group_name'
p5535
S'Advanced'
p5536
sa(dp5537
S'description'
p5538
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p5539
sS'cpp_type'
p5540
S'unsigned int'
p5541
sS'default'
p5542
g3
sS'name'
p5543
S'selected_qp'
p5544
sS'required'
p5545
I00
sS'group_name'
p5546
S'Advanced'
p5547
sa(dp5548
S'description'
p5549
g3
sS'cpp_type'
p5550
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5551
sS'default'
p5552
S'MaterialStdVectorAux'
p5553
sS'name'
p5554
S'type'
p5555
sS'required'
p5556
I00
sS'group_name'
p5557
Nsa(dp5558
S'description'
p5559
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5560
sS'cpp_type'
p5561
S'bool'
p5562
sS'default'
p5563
S'0'
p5564
sS'name'
p5565
S'use_displaced_mesh'
p5566
sS'required'
p5567
I00
sS'group_name'
p5568
S'Advanced'
p5569
sa(dp5570
S'description'
p5571
S'The name of the variable that this object applies to\n'
p5572
sS'cpp_type'
p5573
S'AuxVariableName'
p5574
sS'default'
p5575
g3
sS'name'
p5576
S'variable'
p5577
sS'required'
p5578
I01
sS'group_name'
p5579
NsasS'name'
p5580
S'/AuxKernels/MaterialStdVectorAux'
p5581
sa(dp5582
S'description'
p5583
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p5584
sS'subblocks'
p5585
NsS'parameters'
p5586
(lp5587
(dp5588
S'description'
p5589
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5590
sS'cpp_type'
p5591
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5592
sS'default'
p5593
g3
sS'name'
p5594
S'block'
p5595
sS'required'
p5596
I00
sS'group_name'
p5597
Nsa(dp5598
S'description'
p5599
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5600
sS'cpp_type'
p5601
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5602
sS'default'
p5603
g3
sS'name'
p5604
S'boundary'
p5605
sS'required'
p5606
I00
sS'group_name'
p5607
Nsa(dp5608
S'description'
p5609
S'The gradient component to be extracted for this kernel\n'
p5610
sS'cpp_type'
p5611
S'unsigned int'
p5612
sS'default'
p5613
S'0'
p5614
sS'name'
p5615
S'component'
p5616
sS'required'
p5617
I00
sS'group_name'
p5618
Nsa(dp5619
S'description'
p5620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5621
sS'cpp_type'
p5622
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5623
sS'default'
p5624
g3
sS'name'
p5625
S'control_tags'
p5626
sS'required'
p5627
I00
sS'group_name'
p5628
S'Advanced'
p5629
sa(dp5630
S'description'
p5631
S'Set the enabled status of the MooseObject.\n'
p5632
sS'cpp_type'
p5633
S'bool'
p5634
sS'default'
p5635
S'1'
p5636
sS'name'
p5637
S'enable'
p5638
sS'required'
p5639
I00
sS'group_name'
p5640
S'Advanced'
p5641
sa(dp5642
S'name'
p5643
S'execute_on'
p5644
sS'cpp_type'
p5645
S'MultiMooseEnum'
p5646
sS'default'
p5647
S'LINEAR'
p5648
sS'description'
p5649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5650
sS'required'
p5651
I00
sS'options'
p5652
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5653
sS'group_name'
p5654
Nsa(dp5655
S'description'
p5656
S'The factor by which to multiply your material property for visualization\n'
p5657
sS'cpp_type'
p5658
S'double'
p5659
sS'default'
p5660
S'1'
p5661
sS'name'
p5662
S'factor'
p5663
sS'required'
p5664
I00
sS'group_name'
p5665
Nsa(dp5666
S'description'
p5667
S'The index to consider for this kernel\n'
p5668
sS'cpp_type'
p5669
S'unsigned int'
p5670
sS'default'
p5671
S'0'
p5672
sS'name'
p5673
S'index'
p5674
sS'required'
p5675
I00
sS'group_name'
p5676
Nsa(dp5677
S'description'
p5678
S'The offset to add to your material property for visualization\n'
p5679
sS'cpp_type'
p5680
S'double'
p5681
sS'default'
p5682
S'0'
p5683
sS'name'
p5684
S'offset'
p5685
sS'required'
p5686
I00
sS'group_name'
p5687
Nsa(dp5688
S'description'
p5689
S'The scalar material property name\n'
p5690
sS'cpp_type'
p5691
S'MaterialPropertyName'
p5692
sS'default'
p5693
g3
sS'name'
p5694
S'property'
p5695
sS'required'
p5696
I01
sS'group_name'
p5697
Nsa(dp5698
S'description'
p5699
S'The seed for the master random number generator\n'
p5700
sS'cpp_type'
p5701
S'unsigned int'
p5702
sS'default'
p5703
S'0'
p5704
sS'name'
p5705
S'seed'
p5706
sS'required'
p5707
I00
sS'group_name'
p5708
S'Advanced'
p5709
sa(dp5710
S'description'
p5711
g3
sS'cpp_type'
p5712
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5713
sS'default'
p5714
S'MaterialStdVectorRealGradientAux'
p5715
sS'name'
p5716
S'type'
p5717
sS'required'
p5718
I00
sS'group_name'
p5719
Nsa(dp5720
S'description'
p5721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5722
sS'cpp_type'
p5723
S'bool'
p5724
sS'default'
p5725
S'0'
p5726
sS'name'
p5727
S'use_displaced_mesh'
p5728
sS'required'
p5729
I00
sS'group_name'
p5730
S'Advanced'
p5731
sa(dp5732
S'description'
p5733
S'The name of the variable that this object applies to\n'
p5734
sS'cpp_type'
p5735
S'AuxVariableName'
p5736
sS'default'
p5737
g3
sS'name'
p5738
S'variable'
p5739
sS'required'
p5740
I01
sS'group_name'
p5741
NsasS'name'
p5742
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p5743
sa(dp5744
S'description'
p5745
g3
sS'subblocks'
p5746
NsS'parameters'
p5747
(lp5748
(dp5749
S'description'
p5750
S'Value that specifies the number of grains to create aux kernels for.\n'
p5751
sS'cpp_type'
p5752
S'unsigned int'
p5753
sS'default'
p5754
g3
sS'name'
p5755
S'grain_num'
p5756
sS'required'
p5757
I01
sS'group_name'
p5758
Nsa(dp5759
S'description'
p5760
S'The material property names.\n'
p5761
sS'cpp_type'
p5762
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p5763
sS'default'
p5764
g3
sS'name'
p5765
S'property'
p5766
sS'required'
p5767
I01
sS'group_name'
p5768
Nsa(dp5769
S'description'
p5770
S'Whether to use displaced mesh in the kernels.\n'
p5771
sS'cpp_type'
p5772
S'bool'
p5773
sS'default'
p5774
S'0'
p5775
sS'name'
p5776
S'use_displaced_mesh'
p5777
sS'required'
p5778
I00
sS'group_name'
p5779
Nsa(dp5780
S'description'
p5781
S'Vector specifies the base name of the variables.\n'
p5782
sS'cpp_type'
p5783
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5784
sS'default'
p5785
g3
sS'name'
p5786
S'variable_base'
p5787
sS'required'
p5788
I01
sS'group_name'
p5789
NsasS'name'
p5790
S'/AuxKernels/MaterialVectorAuxKernel'
p5791
sa(dp5792
S'description'
p5793
g3
sS'subblocks'
p5794
NsS'parameters'
p5795
(lp5796
(dp5797
S'description'
p5798
S'Value that specifies the number of grains to create aux kernels for.\n'
p5799
sS'cpp_type'
p5800
S'unsigned int'
p5801
sS'default'
p5802
g3
sS'name'
p5803
S'grain_num'
p5804
sS'required'
p5805
I01
sS'group_name'
p5806
Nsa(dp5807
S'description'
p5808
S'The material property names.\n'
p5809
sS'cpp_type'
p5810
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p5811
sS'default'
p5812
g3
sS'name'
p5813
S'property'
p5814
sS'required'
p5815
I01
sS'group_name'
p5816
Nsa(dp5817
S'description'
p5818
S'Whether to use displaced mesh in the kernels.\n'
p5819
sS'cpp_type'
p5820
S'bool'
p5821
sS'default'
p5822
S'0'
p5823
sS'name'
p5824
S'use_displaced_mesh'
p5825
sS'required'
p5826
I00
sS'group_name'
p5827
Nsa(dp5828
S'description'
p5829
S'Vector specifies the base name of the variables.\n'
p5830
sS'cpp_type'
p5831
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5832
sS'default'
p5833
g3
sS'name'
p5834
S'variable_base'
p5835
sS'required'
p5836
I01
sS'group_name'
p5837
NsasS'name'
p5838
S'/AuxKernels/MaterialVectorGradAuxKernel'
p5839
sa(dp5840
S'description'
p5841
g3
sS'subblocks'
p5842
NsS'parameters'
p5843
(lp5844
(dp5845
S'description'
p5846
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5847
sS'cpp_type'
p5848
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5849
sS'default'
p5850
g3
sS'name'
p5851
S'block'
p5852
sS'required'
p5853
I00
sS'group_name'
p5854
Nsa(dp5855
S'description'
p5856
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5857
sS'cpp_type'
p5858
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5859
sS'default'
p5860
g3
sS'name'
p5861
S'boundary'
p5862
sS'required'
p5863
I00
sS'group_name'
p5864
Nsa(dp5865
S'description'
p5866
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5867
sS'cpp_type'
p5868
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5869
sS'default'
p5870
g3
sS'name'
p5871
S'control_tags'
p5872
sS'required'
p5873
I00
sS'group_name'
p5874
S'Advanced'
p5875
sa(dp5876
S'description'
p5877
S'Set the enabled status of the MooseObject.\n'
p5878
sS'cpp_type'
p5879
S'bool'
p5880
sS'default'
p5881
S'1'
p5882
sS'name'
p5883
S'enable'
p5884
sS'required'
p5885
I00
sS'group_name'
p5886
S'Advanced'
p5887
sa(dp5888
S'name'
p5889
S'execute_on'
p5890
sS'cpp_type'
p5891
S'MultiMooseEnum'
p5892
sS'default'
p5893
S'LINEAR'
p5894
sS'description'
p5895
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5896
sS'required'
p5897
I00
sS'options'
p5898
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5899
sS'group_name'
p5900
Nsa(dp5901
S'description'
p5902
S'The boundary to find the distance to.\n'
p5903
sS'cpp_type'
p5904
S'BoundaryName'
p5905
sS'default'
p5906
g3
sS'name'
p5907
S'paired_boundary'
p5908
sS'required'
p5909
I01
sS'group_name'
p5910
Nsa(dp5911
S'description'
p5912
S'The seed for the master random number generator\n'
p5913
sS'cpp_type'
p5914
S'unsigned int'
p5915
sS'default'
p5916
S'0'
p5917
sS'name'
p5918
S'seed'
p5919
sS'required'
p5920
I00
sS'group_name'
p5921
S'Advanced'
p5922
sa(dp5923
S'description'
p5924
g3
sS'cpp_type'
p5925
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5926
sS'default'
p5927
S'NearestNodeDistanceAux'
p5928
sS'name'
p5929
S'type'
p5930
sS'required'
p5931
I00
sS'group_name'
p5932
Nsa(dp5933
S'description'
p5934
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5935
sS'cpp_type'
p5936
S'bool'
p5937
sS'default'
p5938
S'1'
p5939
sS'name'
p5940
S'use_displaced_mesh'
p5941
sS'required'
p5942
I00
sS'group_name'
p5943
S'Advanced'
p5944
sa(dp5945
S'description'
p5946
S'The name of the variable that this object applies to\n'
p5947
sS'cpp_type'
p5948
S'AuxVariableName'
p5949
sS'default'
p5950
g3
sS'name'
p5951
S'variable'
p5952
sS'required'
p5953
I01
sS'group_name'
p5954
NsasS'name'
p5955
S'/AuxKernels/NearestNodeDistanceAux'
p5956
sa(dp5957
S'description'
p5958
g3
sS'subblocks'
p5959
NsS'parameters'
p5960
(lp5961
(dp5962
S'description'
p5963
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5964
sS'cpp_type'
p5965
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5966
sS'default'
p5967
g3
sS'name'
p5968
S'block'
p5969
sS'required'
p5970
I00
sS'group_name'
p5971
Nsa(dp5972
S'description'
p5973
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5974
sS'cpp_type'
p5975
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5976
sS'default'
p5977
g3
sS'name'
p5978
S'boundary'
p5979
sS'required'
p5980
I00
sS'group_name'
p5981
Nsa(dp5982
S'description'
p5983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5984
sS'cpp_type'
p5985
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5986
sS'default'
p5987
g3
sS'name'
p5988
S'control_tags'
p5989
sS'required'
p5990
I00
sS'group_name'
p5991
S'Advanced'
p5992
sa(dp5993
S'description'
p5994
S'Set the enabled status of the MooseObject.\n'
p5995
sS'cpp_type'
p5996
S'bool'
p5997
sS'default'
p5998
S'1'
p5999
sS'name'
p6000
S'enable'
p6001
sS'required'
p6002
I00
sS'group_name'
p6003
S'Advanced'
p6004
sa(dp6005
S'name'
p6006
S'execute_on'
p6007
sS'cpp_type'
p6008
S'MultiMooseEnum'
p6009
sS'default'
p6010
S'LINEAR'
p6011
sS'description'
p6012
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6013
sS'required'
p6014
I00
sS'options'
p6015
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6016
sS'group_name'
p6017
Nsa(dp6018
S'description'
p6019
S'The boundary to get the value from.\n'
p6020
sS'cpp_type'
p6021
S'BoundaryName'
p6022
sS'default'
p6023
g3
sS'name'
p6024
S'paired_boundary'
p6025
sS'required'
p6026
I01
sS'group_name'
p6027
Nsa(dp6028
S'description'
p6029
S'The variable to get the value of.\n'
p6030
sS'cpp_type'
p6031
S'std::vector<VariableName>'
p6032
sS'default'
p6033
g3
sS'name'
p6034
S'paired_variable'
p6035
sS'required'
p6036
I01
sS'group_name'
p6037
Nsa(dp6038
S'description'
p6039
S'The seed for the master random number generator\n'
p6040
sS'cpp_type'
p6041
S'unsigned int'
p6042
sS'default'
p6043
S'0'
p6044
sS'name'
p6045
S'seed'
p6046
sS'required'
p6047
I00
sS'group_name'
p6048
S'Advanced'
p6049
sa(dp6050
S'description'
p6051
g3
sS'cpp_type'
p6052
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6053
sS'default'
p6054
S'NearestNodeValueAux'
p6055
sS'name'
p6056
S'type'
p6057
sS'required'
p6058
I00
sS'group_name'
p6059
Nsa(dp6060
S'description'
p6061
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6062
sS'cpp_type'
p6063
S'bool'
p6064
sS'default'
p6065
S'1'
p6066
sS'name'
p6067
S'use_displaced_mesh'
p6068
sS'required'
p6069
I00
sS'group_name'
p6070
S'Advanced'
p6071
sa(dp6072
S'description'
p6073
S'The name of the variable that this object applies to\n'
p6074
sS'cpp_type'
p6075
S'AuxVariableName'
p6076
sS'default'
p6077
g3
sS'name'
p6078
S'variable'
p6079
sS'required'
p6080
I01
sS'group_name'
p6081
NsasS'name'
p6082
S'/AuxKernels/NearestNodeValueAux'
p6083
sa(dp6084
S'description'
p6085
g3
sS'subblocks'
p6086
NsS'parameters'
p6087
(lp6088
(dp6089
S'description'
p6090
S'beta parameter\n'
p6091
sS'cpp_type'
p6092
S'double'
p6093
sS'default'
p6094
g3
sS'name'
p6095
S'beta'
p6096
sS'required'
p6097
I01
sS'group_name'
p6098
Nsa(dp6099
S'description'
p6100
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6101
sS'cpp_type'
p6102
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6103
sS'default'
p6104
g3
sS'name'
p6105
S'block'
p6106
sS'required'
p6107
I00
sS'group_name'
p6108
Nsa(dp6109
S'description'
p6110
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6111
sS'cpp_type'
p6112
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6113
sS'default'
p6114
g3
sS'name'
p6115
S'boundary'
p6116
sS'required'
p6117
I00
sS'group_name'
p6118
Nsa(dp6119
S'description'
p6120
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6121
sS'cpp_type'
p6122
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6123
sS'default'
p6124
g3
sS'name'
p6125
S'control_tags'
p6126
sS'required'
p6127
I00
sS'group_name'
p6128
S'Advanced'
p6129
sa(dp6130
S'description'
p6131
S'displacement variable\n'
p6132
sS'cpp_type'
p6133
S'std::vector<VariableName>'
p6134
sS'default'
p6135
g3
sS'name'
p6136
S'displacement'
p6137
sS'required'
p6138
I01
sS'group_name'
p6139
Nsa(dp6140
S'description'
p6141
S'Set the enabled status of the MooseObject.\n'
p6142
sS'cpp_type'
p6143
S'bool'
p6144
sS'default'
p6145
S'1'
p6146
sS'name'
p6147
S'enable'
p6148
sS'required'
p6149
I00
sS'group_name'
p6150
S'Advanced'
p6151
sa(dp6152
S'name'
p6153
S'execute_on'
p6154
sS'cpp_type'
p6155
S'MultiMooseEnum'
p6156
sS'default'
p6157
S'LINEAR'
p6158
sS'description'
p6159
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6160
sS'required'
p6161
I00
sS'options'
p6162
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6163
sS'group_name'
p6164
Nsa(dp6165
S'description'
p6166
S'The seed for the master random number generator\n'
p6167
sS'cpp_type'
p6168
S'unsigned int'
p6169
sS'default'
p6170
S'0'
p6171
sS'name'
p6172
S'seed'
p6173
sS'required'
p6174
I00
sS'group_name'
p6175
S'Advanced'
p6176
sa(dp6177
S'description'
p6178
g3
sS'cpp_type'
p6179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6180
sS'default'
p6181
S'NewmarkAccelAux'
p6182
sS'name'
p6183
S'type'
p6184
sS'required'
p6185
I00
sS'group_name'
p6186
Nsa(dp6187
S'description'
p6188
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6189
sS'cpp_type'
p6190
S'bool'
p6191
sS'default'
p6192
S'0'
p6193
sS'name'
p6194
S'use_displaced_mesh'
p6195
sS'required'
p6196
I00
sS'group_name'
p6197
S'Advanced'
p6198
sa(dp6199
S'description'
p6200
S'The name of the variable that this object applies to\n'
p6201
sS'cpp_type'
p6202
S'AuxVariableName'
p6203
sS'default'
p6204
g3
sS'name'
p6205
S'variable'
p6206
sS'required'
p6207
I01
sS'group_name'
p6208
Nsa(dp6209
S'description'
p6210
S'velocity variable\n'
p6211
sS'cpp_type'
p6212
S'std::vector<VariableName>'
p6213
sS'default'
p6214
g3
sS'name'
p6215
S'velocity'
p6216
sS'required'
p6217
I01
sS'group_name'
p6218
NsasS'name'
p6219
S'/AuxKernels/NewmarkAccelAux'
p6220
sa(dp6221
S'description'
p6222
g3
sS'subblocks'
p6223
NsS'parameters'
p6224
(lp6225
(dp6226
S'description'
p6227
S'acceleration variable\n'
p6228
sS'cpp_type'
p6229
S'std::vector<VariableName>'
p6230
sS'default'
p6231
g3
sS'name'
p6232
S'acceleration'
p6233
sS'required'
p6234
I01
sS'group_name'
p6235
Nsa(dp6236
S'description'
p6237
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6238
sS'cpp_type'
p6239
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6240
sS'default'
p6241
g3
sS'name'
p6242
S'block'
p6243
sS'required'
p6244
I00
sS'group_name'
p6245
Nsa(dp6246
S'description'
p6247
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6248
sS'cpp_type'
p6249
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6250
sS'default'
p6251
g3
sS'name'
p6252
S'boundary'
p6253
sS'required'
p6254
I00
sS'group_name'
p6255
Nsa(dp6256
S'description'
p6257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6258
sS'cpp_type'
p6259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6260
sS'default'
p6261
g3
sS'name'
p6262
S'control_tags'
p6263
sS'required'
p6264
I00
sS'group_name'
p6265
S'Advanced'
p6266
sa(dp6267
S'description'
p6268
S'Set the enabled status of the MooseObject.\n'
p6269
sS'cpp_type'
p6270
S'bool'
p6271
sS'default'
p6272
S'1'
p6273
sS'name'
p6274
S'enable'
p6275
sS'required'
p6276
I00
sS'group_name'
p6277
S'Advanced'
p6278
sa(dp6279
S'name'
p6280
S'execute_on'
p6281
sS'cpp_type'
p6282
S'MultiMooseEnum'
p6283
sS'default'
p6284
S'LINEAR'
p6285
sS'description'
p6286
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6287
sS'required'
p6288
I00
sS'options'
p6289
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6290
sS'group_name'
p6291
Nsa(dp6292
S'description'
p6293
S'gamma parameter\n'
p6294
sS'cpp_type'
p6295
S'double'
p6296
sS'default'
p6297
g3
sS'name'
p6298
S'gamma'
p6299
sS'required'
p6300
I01
sS'group_name'
p6301
Nsa(dp6302
S'description'
p6303
S'The seed for the master random number generator\n'
p6304
sS'cpp_type'
p6305
S'unsigned int'
p6306
sS'default'
p6307
S'0'
p6308
sS'name'
p6309
S'seed'
p6310
sS'required'
p6311
I00
sS'group_name'
p6312
S'Advanced'
p6313
sa(dp6314
S'description'
p6315
g3
sS'cpp_type'
p6316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6317
sS'default'
p6318
S'NewmarkVelAux'
p6319
sS'name'
p6320
S'type'
p6321
sS'required'
p6322
I00
sS'group_name'
p6323
Nsa(dp6324
S'description'
p6325
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6326
sS'cpp_type'
p6327
S'bool'
p6328
sS'default'
p6329
S'0'
p6330
sS'name'
p6331
S'use_displaced_mesh'
p6332
sS'required'
p6333
I00
sS'group_name'
p6334
S'Advanced'
p6335
sa(dp6336
S'description'
p6337
S'The name of the variable that this object applies to\n'
p6338
sS'cpp_type'
p6339
S'AuxVariableName'
p6340
sS'default'
p6341
g3
sS'name'
p6342
S'variable'
p6343
sS'required'
p6344
I01
sS'group_name'
p6345
NsasS'name'
p6346
S'/AuxKernels/NewmarkVelAux'
p6347
sa(dp6348
S'description'
p6349
g3
sS'subblocks'
p6350
NsS'parameters'
p6351
(lp6352
(dp6353
S'description'
p6354
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6355
sS'cpp_type'
p6356
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6357
sS'default'
p6358
g3
sS'name'
p6359
S'block'
p6360
sS'required'
p6361
I00
sS'group_name'
p6362
Nsa(dp6363
S'description'
p6364
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6365
sS'cpp_type'
p6366
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6367
sS'default'
p6368
g3
sS'name'
p6369
S'boundary'
p6370
sS'required'
p6371
I00
sS'group_name'
p6372
Nsa(dp6373
S'description'
p6374
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6375
sS'cpp_type'
p6376
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6377
sS'default'
p6378
g3
sS'name'
p6379
S'control_tags'
p6380
sS'required'
p6381
I00
sS'group_name'
p6382
S'Advanced'
p6383
sa(dp6384
S'description'
p6385
S'Set the enabled status of the MooseObject.\n'
p6386
sS'cpp_type'
p6387
S'bool'
p6388
sS'default'
p6389
S'1'
p6390
sS'name'
p6391
S'enable'
p6392
sS'required'
p6393
I00
sS'group_name'
p6394
S'Advanced'
p6395
sa(dp6396
S'name'
p6397
S'execute_on'
p6398
sS'cpp_type'
p6399
S'MultiMooseEnum'
p6400
sS'default'
p6401
S'LINEAR'
p6402
sS'description'
p6403
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6404
sS'required'
p6405
I00
sS'options'
p6406
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6407
sS'group_name'
p6408
Nsa(dp6409
S'description'
p6410
S'The normalization factor\n'
p6411
sS'cpp_type'
p6412
S'double'
p6413
sS'default'
p6414
S'1'
p6415
sS'name'
p6416
S'normal_factor'
p6417
sS'required'
p6418
I00
sS'group_name'
p6419
Nsa(dp6420
S'description'
p6421
S'The postprocessor on the source\n'
p6422
sS'cpp_type'
p6423
S'PostprocessorName'
p6424
sS'default'
p6425
g3
sS'name'
p6426
S'normalization'
p6427
sS'required'
p6428
I01
sS'group_name'
p6429
Nsa(dp6430
S'description'
p6431
S'The seed for the master random number generator\n'
p6432
sS'cpp_type'
p6433
S'unsigned int'
p6434
sS'default'
p6435
S'0'
p6436
sS'name'
p6437
S'seed'
p6438
sS'required'
p6439
I00
sS'group_name'
p6440
S'Advanced'
p6441
sa(dp6442
S'description'
p6443
S'The variable to be normalized\n'
p6444
sS'cpp_type'
p6445
S'std::vector<VariableName>'
p6446
sS'default'
p6447
g3
sS'name'
p6448
S'source_variable'
p6449
sS'required'
p6450
I01
sS'group_name'
p6451
Nsa(dp6452
S'description'
p6453
g3
sS'cpp_type'
p6454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6455
sS'default'
p6456
S'NormalizationAux'
p6457
sS'name'
p6458
S'type'
p6459
sS'required'
p6460
I00
sS'group_name'
p6461
Nsa(dp6462
S'description'
p6463
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6464
sS'cpp_type'
p6465
S'bool'
p6466
sS'default'
p6467
S'0'
p6468
sS'name'
p6469
S'use_displaced_mesh'
p6470
sS'required'
p6471
I00
sS'group_name'
p6472
S'Advanced'
p6473
sa(dp6474
S'description'
p6475
S'The name of the variable that this object applies to\n'
p6476
sS'cpp_type'
p6477
S'AuxVariableName'
p6478
sS'default'
p6479
g3
sS'name'
p6480
S'variable'
p6481
sS'required'
p6482
I01
sS'group_name'
p6483
NsasS'name'
p6484
S'/AuxKernels/NormalizationAux'
p6485
sa(dp6486
S'description'
p6487
S'Output euler angles from user object to an AuxVariable.\n'
p6488
sS'subblocks'
p6489
NsS'parameters'
p6490
(lp6491
(dp6492
S'description'
p6493
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6494
sS'cpp_type'
p6495
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6496
sS'default'
p6497
g3
sS'name'
p6498
S'block'
p6499
sS'required'
p6500
I00
sS'group_name'
p6501
Nsa(dp6502
S'description'
p6503
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6504
sS'cpp_type'
p6505
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6506
sS'default'
p6507
g3
sS'name'
p6508
S'boundary'
p6509
sS'required'
p6510
I00
sS'group_name'
p6511
Nsa(dp6512
S'description'
p6513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6514
sS'cpp_type'
p6515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6516
sS'default'
p6517
g3
sS'name'
p6518
S'control_tags'
p6519
sS'required'
p6520
I00
sS'group_name'
p6521
S'Advanced'
p6522
sa(dp6523
S'description'
p6524
S'Set the enabled status of the MooseObject.\n'
p6525
sS'cpp_type'
p6526
S'bool'
p6527
sS'default'
p6528
S'1'
p6529
sS'name'
p6530
S'enable'
p6531
sS'required'
p6532
I00
sS'group_name'
p6533
S'Advanced'
p6534
sa(dp6535
S'description'
p6536
S'Name of Euler angle provider user object\n'
p6537
sS'cpp_type'
p6538
S'UserObjectName'
p6539
sS'default'
p6540
g3
sS'name'
p6541
S'euler_angle_provider'
p6542
sS'required'
p6543
I01
sS'group_name'
p6544
Nsa(dp6545
S'name'
p6546
S'execute_on'
p6547
sS'cpp_type'
p6548
S'MultiMooseEnum'
p6549
sS'default'
p6550
S'LINEAR'
p6551
sS'description'
p6552
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6553
sS'required'
p6554
I00
sS'options'
p6555
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6556
sS'group_name'
p6557
Nsa(dp6558
S'description'
p6559
S'The GrainTracker UserObject to get values from.\n'
p6560
sS'cpp_type'
p6561
S'UserObjectName'
p6562
sS'default'
p6563
g3
sS'name'
p6564
S'grain_tracker'
p6565
sS'required'
p6566
I01
sS'group_name'
p6567
Nsa(dp6568
S'name'
p6569
S'output_euler_angle'
p6570
sS'cpp_type'
p6571
S'MooseEnum'
p6572
sS'default'
p6573
g3
sS'description'
p6574
S'Euler angle to output\n'
p6575
sS'required'
p6576
I01
sS'options'
p6577
S'phi1 Phi phi2'
p6578
sS'group_name'
p6579
Nsa(dp6580
S'description'
p6581
S'The seed for the master random number generator\n'
p6582
sS'cpp_type'
p6583
S'unsigned int'
p6584
sS'default'
p6585
S'0'
p6586
sS'name'
p6587
S'seed'
p6588
sS'required'
p6589
I00
sS'group_name'
p6590
S'Advanced'
p6591
sa(dp6592
S'description'
p6593
g3
sS'cpp_type'
p6594
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6595
sS'default'
p6596
S'OutputEulerAngles'
p6597
sS'name'
p6598
S'type'
p6599
sS'required'
p6600
I00
sS'group_name'
p6601
Nsa(dp6602
S'description'
p6603
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6604
sS'cpp_type'
p6605
S'bool'
p6606
sS'default'
p6607
S'0'
p6608
sS'name'
p6609
S'use_displaced_mesh'
p6610
sS'required'
p6611
I00
sS'group_name'
p6612
S'Advanced'
p6613
sa(dp6614
S'description'
p6615
S'The name of the variable that this object applies to\n'
p6616
sS'cpp_type'
p6617
S'AuxVariableName'
p6618
sS'default'
p6619
g3
sS'name'
p6620
S'variable'
p6621
sS'required'
p6622
I01
sS'group_name'
p6623
NsasS'name'
p6624
S'/AuxKernels/OutputEulerAngles'
p6625
sa(dp6626
S'description'
p6627
g3
sS'subblocks'
p6628
NsS'parameters'
p6629
(lp6630
(dp6631
S'description'
p6632
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6633
sS'cpp_type'
p6634
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6635
sS'default'
p6636
g3
sS'name'
p6637
S'block'
p6638
sS'required'
p6639
I00
sS'group_name'
p6640
Nsa(dp6641
S'description'
p6642
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6643
sS'cpp_type'
p6644
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6645
sS'default'
p6646
g3
sS'name'
p6647
S'boundary'
p6648
sS'required'
p6649
I00
sS'group_name'
p6650
Nsa(dp6651
S'description'
p6652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6653
sS'cpp_type'
p6654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6655
sS'default'
p6656
g3
sS'name'
p6657
S'control_tags'
p6658
sS'required'
p6659
I00
sS'group_name'
p6660
S'Advanced'
p6661
sa(dp6662
S'description'
p6663
S'Set the enabled status of the MooseObject.\n'
p6664
sS'cpp_type'
p6665
S'bool'
p6666
sS'default'
p6667
S'1'
p6668
sS'name'
p6669
S'enable'
p6670
sS'required'
p6671
I00
sS'group_name'
p6672
S'Advanced'
p6673
sa(dp6674
S'name'
p6675
S'execute_on'
p6676
sS'cpp_type'
p6677
S'MultiMooseEnum'
p6678
sS'default'
p6679
S'LINEAR'
p6680
sS'description'
p6681
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6682
sS'required'
p6683
I00
sS'options'
p6684
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6685
sS'group_name'
p6686
Nsa(dp6687
S'description'
p6688
S'The seed for the master random number generator\n'
p6689
sS'cpp_type'
p6690
S'unsigned int'
p6691
sS'default'
p6692
S'0'
p6693
sS'name'
p6694
S'seed'
p6695
sS'required'
p6696
I00
sS'group_name'
p6697
S'Advanced'
p6698
sa(dp6699
S'description'
p6700
g3
sS'cpp_type'
p6701
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6702
sS'default'
p6703
S'PFCEnergyDensity'
p6704
sS'name'
p6705
S'type'
p6706
sS'required'
p6707
I00
sS'group_name'
p6708
Nsa(dp6709
S'description'
p6710
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6711
sS'cpp_type'
p6712
S'bool'
p6713
sS'default'
p6714
S'0'
p6715
sS'name'
p6716
S'use_displaced_mesh'
p6717
sS'required'
p6718
I00
sS'group_name'
p6719
S'Advanced'
p6720
sa(dp6721
S'description'
p6722
S'Array of coupled variables\n'
p6723
sS'cpp_type'
p6724
S'std::vector<VariableName>'
p6725
sS'default'
p6726
g3
sS'name'
p6727
S'v'
p6728
sS'required'
p6729
I01
sS'group_name'
p6730
Nsa(dp6731
S'description'
p6732
S'The name of the variable that this object applies to\n'
p6733
sS'cpp_type'
p6734
S'AuxVariableName'
p6735
sS'default'
p6736
g3
sS'name'
p6737
S'variable'
p6738
sS'required'
p6739
I01
sS'group_name'
p6740
NsasS'name'
p6741
S'/AuxKernels/PFCEnergyDensity'
p6742
sa(dp6743
S'description'
p6744
g3
sS'subblocks'
p6745
NsS'parameters'
p6746
(lp6747
(dp6748
S'description'
p6749
S'Modified Coefficent in Taylor Series Expanstion\n'
p6750
sS'cpp_type'
p6751
S'double'
p6752
sS'default'
p6753
S'1'
p6754
sS'name'
p6755
S'a'
p6756
sS'required'
p6757
I00
sS'group_name'
p6758
Nsa(dp6759
S'description'
p6760
S'Modified Coefficent in Taylor Series Expanstion\n'
p6761
sS'cpp_type'
p6762
S'double'
p6763
sS'default'
p6764
S'1'
p6765
sS'name'
p6766
S'b'
p6767
sS'required'
p6768
I00
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6772
sS'cpp_type'
p6773
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6774
sS'default'
p6775
g3
sS'name'
p6776
S'block'
p6777
sS'required'
p6778
I00
sS'group_name'
p6779
Nsa(dp6780
S'description'
p6781
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6782
sS'cpp_type'
p6783
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6784
sS'default'
p6785
g3
sS'name'
p6786
S'boundary'
p6787
sS'required'
p6788
I00
sS'group_name'
p6789
Nsa(dp6790
S'description'
p6791
S'Modified Coefficent in Taylor Series Expanstion\n'
p6792
sS'cpp_type'
p6793
S'double'
p6794
sS'default'
p6795
S'1'
p6796
sS'name'
p6797
S'c'
p6798
sS'required'
p6799
I00
sS'group_name'
p6800
Nsa(dp6801
S'description'
p6802
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6803
sS'cpp_type'
p6804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6805
sS'default'
p6806
g3
sS'name'
p6807
S'control_tags'
p6808
sS'required'
p6809
I00
sS'group_name'
p6810
S'Advanced'
p6811
sa(dp6812
S'description'
p6813
S'Set the enabled status of the MooseObject.\n'
p6814
sS'cpp_type'
p6815
S'bool'
p6816
sS'default'
p6817
S'1'
p6818
sS'name'
p6819
S'enable'
p6820
sS'required'
p6821
I00
sS'group_name'
p6822
S'Advanced'
p6823
sa(dp6824
S'name'
p6825
S'execute_on'
p6826
sS'cpp_type'
p6827
S'MultiMooseEnum'
p6828
sS'default'
p6829
S'LINEAR'
p6830
sS'description'
p6831
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6832
sS'required'
p6833
I00
sS'options'
p6834
S'none initial linear nonlinear timestep_end timestep_begin custom'
p6835
sS'group_name'
p6836
Nsa(dp6837
S'name'
p6838
S'log_approach'
p6839
sS'cpp_type'
p6840
S'MooseEnum'
p6841
sS'default'
p6842
g3
sS'description'
p6843
S'Which approach will be used to handle the natural log\n'
p6844
sS'required'
p6845
I01
sS'options'
p6846
S'tolerance cancelation expansion nothing'
p6847
sS'group_name'
p6848
Nsa(dp6849
S'description'
p6850
S'This is the number of terms to use in the taylor series expansion\n'
p6851
sS'cpp_type'
p6852
S'unsigned int'
p6853
sS'default'
p6854
S'4'
p6855
sS'name'
p6856
S'num_exp_terms'
p6857
sS'required'
p6858
I00
sS'group_name'
p6859
Nsa(dp6860
S'description'
p6861
S'The seed for the master random number generator\n'
p6862
sS'cpp_type'
p6863
S'unsigned int'
p6864
sS'default'
p6865
S'0'
p6866
sS'name'
p6867
S'seed'
p6868
sS'required'
p6869
I00
sS'group_name'
p6870
S'Advanced'
p6871
sa(dp6872
S'description'
p6873
S'Tolerance used when the tolerance approach is chosen\n'
p6874
sS'cpp_type'
p6875
S'double'
p6876
sS'default'
p6877
S'1e-09'
p6878
sS'name'
p6879
S'tol'
p6880
sS'required'
p6881
I00
sS'group_name'
p6882
Nsa(dp6883
S'description'
p6884
g3
sS'cpp_type'
p6885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6886
sS'default'
p6887
S'PFCRFFEnergyDensity'
p6888
sS'name'
p6889
S'type'
p6890
sS'required'
p6891
I00
sS'group_name'
p6892
Nsa(dp6893
S'description'
p6894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6895
sS'cpp_type'
p6896
S'bool'
p6897
sS'default'
p6898
S'0'
p6899
sS'name'
p6900
S'use_displaced_mesh'
p6901
sS'required'
p6902
I00
sS'group_name'
p6903
S'Advanced'
p6904
sa(dp6905
S'description'
p6906
S'Array of coupled variables\n'
p6907
sS'cpp_type'
p6908
S'std::vector<VariableName>'
p6909
sS'default'
p6910
g3
sS'name'
p6911
S'v'
p6912
sS'required'
p6913
I01
sS'group_name'
p6914
Nsa(dp6915
S'description'
p6916
S'The name of the variable that this object applies to\n'
p6917
sS'cpp_type'
p6918
S'AuxVariableName'
p6919
sS'default'
p6920
g3
sS'name'
p6921
S'variable'
p6922
sS'required'
p6923
I01
sS'group_name'
p6924
NsasS'name'
p6925
S'/AuxKernels/PFCRFFEnergyDensity'
p6926
sa(dp6927
S'description'
p6928
S'Parsed function AuxKernel.\n'
p6929
sS'subblocks'
p6930
NsS'parameters'
p6931
(lp6932
(dp6933
S'description'
p6934
S'coupled variables\n'
p6935
sS'cpp_type'
p6936
S'std::vector<VariableName>'
p6937
sS'default'
p6938
g3
sS'name'
p6939
S'args'
p6940
sS'required'
p6941
I00
sS'group_name'
p6942
Nsa(dp6943
S'description'
p6944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6945
sS'cpp_type'
p6946
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6947
sS'default'
p6948
g3
sS'name'
p6949
S'block'
p6950
sS'required'
p6951
I00
sS'group_name'
p6952
Nsa(dp6953
S'description'
p6954
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6955
sS'cpp_type'
p6956
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6957
sS'default'
p6958
g3
sS'name'
p6959
S'boundary'
p6960
sS'required'
p6961
I00
sS'group_name'
p6962
Nsa(dp6963
S'description'
p6964
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p6965
sS'cpp_type'
p6966
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6967
sS'default'
p6968
g3
sS'name'
p6969
S'constant_expressions'
p6970
sS'required'
p6971
I00
sS'group_name'
p6972
Nsa(dp6973
S'description'
p6974
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p6975
sS'cpp_type'
p6976
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6977
sS'default'
p6978
g3
sS'name'
p6979
S'constant_names'
p6980
sS'required'
p6981
I00
sS'group_name'
p6982
Nsa(dp6983
S'description'
p6984
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6985
sS'cpp_type'
p6986
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6987
sS'default'
p6988
g3
sS'name'
p6989
S'control_tags'
p6990
sS'required'
p6991
I00
sS'group_name'
p6992
S'Advanced'
p6993
sa(dp6994
S'description'
p6995
S'Disable the function parser algebraic optimizer\n'
p6996
sS'cpp_type'
p6997
S'bool'
p6998
sS'default'
p6999
S'0'
p7000
sS'name'
p7001
S'disable_fpoptimizer'
p7002
sS'required'
p7003
I00
sS'group_name'
p7004
S'Advanced'
p7005
sa(dp7006
S'description'
p7007
S'Set the enabled status of the MooseObject.\n'
p7008
sS'cpp_type'
p7009
S'bool'
p7010
sS'default'
p7011
S'1'
p7012
sS'name'
p7013
S'enable'
p7014
sS'required'
p7015
I00
sS'group_name'
p7016
S'Advanced'
p7017
sa(dp7018
S'description'
p7019
S'Enable cacheing of function derivatives for faster startup time\n'
p7020
sS'cpp_type'
p7021
S'bool'
p7022
sS'default'
p7023
S'1'
p7024
sS'name'
p7025
S'enable_ad_cache'
p7026
sS'required'
p7027
I00
sS'group_name'
p7028
S'Advanced'
p7029
sa(dp7030
S'description'
p7031
S'Enable automatic immediate optimization of derivatives\n'
p7032
sS'cpp_type'
p7033
S'bool'
p7034
sS'default'
p7035
S'1'
p7036
sS'name'
p7037
S'enable_auto_optimize'
p7038
sS'required'
p7039
I00
sS'group_name'
p7040
S'Advanced'
p7041
sa(dp7042
S'description'
p7043
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p7044
sS'cpp_type'
p7045
S'bool'
p7046
sS'default'
p7047
S'1'
p7048
sS'name'
p7049
S'enable_jit'
p7050
sS'required'
p7051
I00
sS'group_name'
p7052
S'Advanced'
p7053
sa(dp7054
S'name'
p7055
S'execute_on'
p7056
sS'cpp_type'
p7057
S'MultiMooseEnum'
p7058
sS'default'
p7059
S'LINEAR'
p7060
sS'description'
p7061
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7062
sS'required'
p7063
I00
sS'options'
p7064
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7065
sS'group_name'
p7066
Nsa(dp7067
S'description'
p7068
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p7069
sS'cpp_type'
p7070
S'bool'
p7071
sS'default'
p7072
S'0'
p7073
sS'name'
p7074
S'fail_on_evalerror'
p7075
sS'required'
p7076
I00
sS'group_name'
p7077
S'Advanced'
p7078
sa(dp7079
S'description'
p7080
S'function expression\n'
p7081
sS'cpp_type'
p7082
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7083
sS'default'
p7084
g3
sS'name'
p7085
S'function'
p7086
sS'required'
p7087
I01
sS'group_name'
p7088
Nsa(dp7089
S'description'
p7090
S'The seed for the master random number generator\n'
p7091
sS'cpp_type'
p7092
S'unsigned int'
p7093
sS'default'
p7094
S'0'
p7095
sS'name'
p7096
S'seed'
p7097
sS'required'
p7098
I00
sS'group_name'
p7099
S'Advanced'
p7100
sa(dp7101
S'description'
p7102
g3
sS'cpp_type'
p7103
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7104
sS'default'
p7105
S'ParsedAux'
p7106
sS'name'
p7107
S'type'
p7108
sS'required'
p7109
I00
sS'group_name'
p7110
Nsa(dp7111
S'description'
p7112
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7113
sS'cpp_type'
p7114
S'bool'
p7115
sS'default'
p7116
S'0'
p7117
sS'name'
p7118
S'use_displaced_mesh'
p7119
sS'required'
p7120
I00
sS'group_name'
p7121
S'Advanced'
p7122
sa(dp7123
S'description'
p7124
S'The name of the variable that this object applies to\n'
p7125
sS'cpp_type'
p7126
S'AuxVariableName'
p7127
sS'default'
p7128
g3
sS'name'
p7129
S'variable'
p7130
sS'required'
p7131
I01
sS'group_name'
p7132
NsasS'name'
p7133
S'/AuxKernels/ParsedAux'
p7134
sa(dp7135
S'description'
p7136
g3
sS'subblocks'
p7137
NsS'parameters'
p7138
(lp7139
(dp7140
S'description'
p7141
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7142
sS'cpp_type'
p7143
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7144
sS'default'
p7145
g3
sS'name'
p7146
S'block'
p7147
sS'required'
p7148
I00
sS'group_name'
p7149
Nsa(dp7150
S'description'
p7151
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7152
sS'cpp_type'
p7153
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7154
sS'default'
p7155
g3
sS'name'
p7156
S'boundary'
p7157
sS'required'
p7158
I00
sS'group_name'
p7159
Nsa(dp7160
S'description'
p7161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7162
sS'cpp_type'
p7163
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7164
sS'default'
p7165
g3
sS'name'
p7166
S'control_tags'
p7167
sS'required'
p7168
I00
sS'group_name'
p7169
S'Advanced'
p7170
sa(dp7171
S'description'
p7172
S'Set the enabled status of the MooseObject.\n'
p7173
sS'cpp_type'
p7174
S'bool'
p7175
sS'default'
p7176
S'1'
p7177
sS'name'
p7178
S'enable'
p7179
sS'required'
p7180
I00
sS'group_name'
p7181
S'Advanced'
p7182
sa(dp7183
S'name'
p7184
S'execute_on'
p7185
sS'cpp_type'
p7186
S'MultiMooseEnum'
p7187
sS'default'
p7188
S'LINEAR'
p7189
sS'description'
p7190
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7191
sS'required'
p7192
I00
sS'options'
p7193
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7194
sS'group_name'
p7195
Nsa(dp7196
S'description'
p7197
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p7198
sS'cpp_type'
p7199
S'double'
p7200
sS'default'
p7201
g3
sS'name'
p7202
S'normal_smoothing_distance'
p7203
sS'required'
p7204
I00
sS'group_name'
p7205
Nsa(dp7206
S'description'
p7207
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p7208
sS'cpp_type'
p7209
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7210
sS'default'
p7211
g3
sS'name'
p7212
S'normal_smoothing_method'
p7213
sS'required'
p7214
I00
sS'group_name'
p7215
Nsa(dp7216
S'name'
p7217
S'order'
p7218
sS'cpp_type'
p7219
S'MooseEnum'
p7220
sS'default'
p7221
S'FIRST'
p7222
sS'description'
p7223
S'The finite element order\n'
p7224
sS'required'
p7225
I00
sS'options'
p7226
S'FIRST SECOND THIRD FOURTH'
p7227
sS'group_name'
p7228
Nsa(dp7229
S'description'
p7230
S'The boundary to be penetrated\n'
p7231
sS'cpp_type'
p7232
S'BoundaryName'
p7233
sS'default'
p7234
g3
sS'name'
p7235
S'paired_boundary'
p7236
sS'required'
p7237
I01
sS'group_name'
p7238
Nsa(dp7239
S'name'
p7240
S'quantity'
p7241
sS'cpp_type'
p7242
S'MooseEnum'
p7243
sS'default'
p7244
S'distance'
p7245
sS'description'
p7246
S'The quantity to recover from the available penetration information\n'
p7247
sS'required'
p7248
I00
sS'options'
p7249
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p7250
sS'group_name'
p7251
Nsa(dp7252
S'description'
p7253
S'The seed for the master random number generator\n'
p7254
sS'cpp_type'
p7255
S'unsigned int'
p7256
sS'default'
p7257
S'0'
p7258
sS'name'
p7259
S'seed'
p7260
sS'required'
p7261
I00
sS'group_name'
p7262
S'Advanced'
p7263
sa(dp7264
S'description'
p7265
S'Tangential distance to extend edges of contact surfaces\n'
p7266
sS'cpp_type'
p7267
S'double'
p7268
sS'default'
p7269
g3
sS'name'
p7270
S'tangential_tolerance'
p7271
sS'required'
p7272
I00
sS'group_name'
p7273
Nsa(dp7274
S'description'
p7275
g3
sS'cpp_type'
p7276
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7277
sS'default'
p7278
S'PenetrationAux'
p7279
sS'name'
p7280
S'type'
p7281
sS'required'
p7282
I00
sS'group_name'
p7283
Nsa(dp7284
S'description'
p7285
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7286
sS'cpp_type'
p7287
S'bool'
p7288
sS'default'
p7289
S'1'
p7290
sS'name'
p7291
S'use_displaced_mesh'
p7292
sS'required'
p7293
I00
sS'group_name'
p7294
S'Advanced'
p7295
sa(dp7296
S'description'
p7297
S'The name of the variable that this object applies to\n'
p7298
sS'cpp_type'
p7299
S'AuxVariableName'
p7300
sS'default'
p7301
g3
sS'name'
p7302
S'variable'
p7303
sS'required'
p7304
I01
sS'group_name'
p7305
NsasS'name'
p7306
S'/AuxKernels/PenetrationAux'
p7307
sa(dp7308
S'description'
p7309
g3
sS'subblocks'
p7310
NsS'parameters'
p7311
(lp7312
(dp7313
S'description'
p7314
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7315
sS'cpp_type'
p7316
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7317
sS'default'
p7318
g3
sS'name'
p7319
S'block'
p7320
sS'required'
p7321
I00
sS'group_name'
p7322
Nsa(dp7323
S'description'
p7324
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7325
sS'cpp_type'
p7326
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7327
sS'default'
p7328
g3
sS'name'
p7329
S'boundary'
p7330
sS'required'
p7331
I00
sS'group_name'
p7332
Nsa(dp7333
S'description'
p7334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7335
sS'cpp_type'
p7336
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7337
sS'default'
p7338
g3
sS'name'
p7339
S'control_tags'
p7340
sS'required'
p7341
I00
sS'group_name'
p7342
S'Advanced'
p7343
sa(dp7344
S'description'
p7345
S'Set the enabled status of the MooseObject.\n'
p7346
sS'cpp_type'
p7347
S'bool'
p7348
sS'default'
p7349
S'1'
p7350
sS'name'
p7351
S'enable'
p7352
sS'required'
p7353
I00
sS'group_name'
p7354
S'Advanced'
p7355
sa(dp7356
S'name'
p7357
S'execute_on'
p7358
sS'cpp_type'
p7359
S'MultiMooseEnum'
p7360
sS'default'
p7361
S'LINEAR'
p7362
sS'description'
p7363
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7364
sS'required'
p7365
I00
sS'options'
p7366
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7367
sS'group_name'
p7368
Nsa(dp7369
S'description'
p7370
S'The seed for the master random number generator\n'
p7371
sS'cpp_type'
p7372
S'unsigned int'
p7373
sS'default'
p7374
S'0'
p7375
sS'name'
p7376
S'seed'
p7377
sS'required'
p7378
I00
sS'group_name'
p7379
S'Advanced'
p7380
sa(dp7381
S'description'
p7382
g3
sS'cpp_type'
p7383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7384
sS'default'
p7385
S'ProcessorIDAux'
p7386
sS'name'
p7387
S'type'
p7388
sS'required'
p7389
I00
sS'group_name'
p7390
Nsa(dp7391
S'description'
p7392
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7393
sS'cpp_type'
p7394
S'bool'
p7395
sS'default'
p7396
S'0'
p7397
sS'name'
p7398
S'use_displaced_mesh'
p7399
sS'required'
p7400
I00
sS'group_name'
p7401
S'Advanced'
p7402
sa(dp7403
S'description'
p7404
S'The name of the variable that this object applies to\n'
p7405
sS'cpp_type'
p7406
S'AuxVariableName'
p7407
sS'default'
p7408
g3
sS'name'
p7409
S'variable'
p7410
sS'required'
p7411
I01
sS'group_name'
p7412
NsasS'name'
p7413
S'/AuxKernels/ProcessorIDAux'
p7414
sa(dp7415
S'description'
p7416
g3
sS'subblocks'
p7417
NsS'parameters'
p7418
(lp7419
(dp7420
S'description'
p7421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7422
sS'cpp_type'
p7423
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7424
sS'default'
p7425
g3
sS'name'
p7426
S'block'
p7427
sS'required'
p7428
I00
sS'group_name'
p7429
Nsa(dp7430
S'description'
p7431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7432
sS'cpp_type'
p7433
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7434
sS'default'
p7435
g3
sS'name'
p7436
S'boundary'
p7437
sS'required'
p7438
I00
sS'group_name'
p7439
Nsa(dp7440
S'description'
p7441
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7442
sS'cpp_type'
p7443
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7444
sS'default'
p7445
g3
sS'name'
p7446
S'control_tags'
p7447
sS'required'
p7448
I00
sS'group_name'
p7449
S'Advanced'
p7450
sa(dp7451
S'description'
p7452
S'The downstairs of the quotient variable\n'
p7453
sS'cpp_type'
p7454
S'std::vector<VariableName>'
p7455
sS'default'
p7456
g3
sS'name'
p7457
S'denominator'
p7458
sS'required'
p7459
I00
sS'group_name'
p7460
Nsa(dp7461
S'description'
p7462
S'Set the enabled status of the MooseObject.\n'
p7463
sS'cpp_type'
p7464
S'bool'
p7465
sS'default'
p7466
S'1'
p7467
sS'name'
p7468
S'enable'
p7469
sS'required'
p7470
I00
sS'group_name'
p7471
S'Advanced'
p7472
sa(dp7473
S'name'
p7474
S'execute_on'
p7475
sS'cpp_type'
p7476
S'MultiMooseEnum'
p7477
sS'default'
p7478
S'LINEAR'
p7479
sS'description'
p7480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7481
sS'required'
p7482
I00
sS'options'
p7483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7484
sS'group_name'
p7485
Nsa(dp7486
S'description'
p7487
S'The upstairs of the quotient variable\n'
p7488
sS'cpp_type'
p7489
S'std::vector<VariableName>'
p7490
sS'default'
p7491
g3
sS'name'
p7492
S'numerator'
p7493
sS'required'
p7494
I00
sS'group_name'
p7495
Nsa(dp7496
S'description'
p7497
S'The seed for the master random number generator\n'
p7498
sS'cpp_type'
p7499
S'unsigned int'
p7500
sS'default'
p7501
S'0'
p7502
sS'name'
p7503
S'seed'
p7504
sS'required'
p7505
I00
sS'group_name'
p7506
S'Advanced'
p7507
sa(dp7508
S'description'
p7509
g3
sS'cpp_type'
p7510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7511
sS'default'
p7512
S'QuotientAux'
p7513
sS'name'
p7514
S'type'
p7515
sS'required'
p7516
I00
sS'group_name'
p7517
Nsa(dp7518
S'description'
p7519
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7520
sS'cpp_type'
p7521
S'bool'
p7522
sS'default'
p7523
S'0'
p7524
sS'name'
p7525
S'use_displaced_mesh'
p7526
sS'required'
p7527
I00
sS'group_name'
p7528
S'Advanced'
p7529
sa(dp7530
S'description'
p7531
S'The name of the variable that this object applies to\n'
p7532
sS'cpp_type'
p7533
S'AuxVariableName'
p7534
sS'default'
p7535
g3
sS'name'
p7536
S'variable'
p7537
sS'required'
p7538
I01
sS'group_name'
p7539
NsasS'name'
p7540
S'/AuxKernels/QuotientAux'
p7541
sa(dp7542
S'description'
p7543
S'Compute the radial component of the displacement vector for cylindrical models.\n'
p7544
sS'subblocks'
p7545
NsS'parameters'
p7546
(lp7547
(dp7548
S'description'
p7549
S'Vector defining direction of cylindrical axis (3D Cartesian models)\n'
p7550
sS'cpp_type'
p7551
S'libMesh::VectorValue<double>'
p7552
sS'default'
p7553
g3
sS'name'
p7554
S'axis_vector'
p7555
sS'required'
p7556
I00
sS'group_name'
p7557
Nsa(dp7558
S'description'
p7559
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7560
sS'cpp_type'
p7561
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7562
sS'default'
p7563
g3
sS'name'
p7564
S'block'
p7565
sS'required'
p7566
I00
sS'group_name'
p7567
Nsa(dp7568
S'description'
p7569
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7570
sS'cpp_type'
p7571
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7572
sS'default'
p7573
g3
sS'name'
p7574
S'boundary'
p7575
sS'required'
p7576
I00
sS'group_name'
p7577
Nsa(dp7578
S'description'
p7579
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7580
sS'cpp_type'
p7581
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7582
sS'default'
p7583
g3
sS'name'
p7584
S'control_tags'
p7585
sS'required'
p7586
I00
sS'group_name'
p7587
S'Advanced'
p7588
sa(dp7589
S'description'
p7590
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p7591
sS'cpp_type'
p7592
S'std::vector<VariableName>'
p7593
sS'default'
p7594
g3
sS'name'
p7595
S'displacements'
p7596
sS'required'
p7597
I01
sS'group_name'
p7598
Nsa(dp7599
S'description'
p7600
S'Set the enabled status of the MooseObject.\n'
p7601
sS'cpp_type'
p7602
S'bool'
p7603
sS'default'
p7604
S'1'
p7605
sS'name'
p7606
S'enable'
p7607
sS'required'
p7608
I00
sS'group_name'
p7609
S'Advanced'
p7610
sa(dp7611
S'name'
p7612
S'execute_on'
p7613
sS'cpp_type'
p7614
S'MultiMooseEnum'
p7615
sS'default'
p7616
S'LINEAR'
p7617
sS'description'
p7618
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7619
sS'required'
p7620
I00
sS'options'
p7621
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7622
sS'group_name'
p7623
Nsa(dp7624
S'description'
p7625
S'Origin of cylinder axis of rotation for 2D and 3D Cartesian models\n'
p7626
sS'cpp_type'
p7627
S'libMesh::VectorValue<double>'
p7628
sS'default'
p7629
g3
sS'name'
p7630
S'origin'
p7631
sS'required'
p7632
I00
sS'group_name'
p7633
Nsa(dp7634
S'description'
p7635
S'The seed for the master random number generator\n'
p7636
sS'cpp_type'
p7637
S'unsigned int'
p7638
sS'default'
p7639
S'0'
p7640
sS'name'
p7641
S'seed'
p7642
sS'required'
p7643
I00
sS'group_name'
p7644
S'Advanced'
p7645
sa(dp7646
S'description'
p7647
g3
sS'cpp_type'
p7648
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7649
sS'default'
p7650
S'RadialDisplacementCylinderAux'
p7651
sS'name'
p7652
S'type'
p7653
sS'required'
p7654
I00
sS'group_name'
p7655
Nsa(dp7656
S'description'
p7657
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7658
sS'cpp_type'
p7659
S'bool'
p7660
sS'default'
p7661
S'0'
p7662
sS'name'
p7663
S'use_displaced_mesh'
p7664
sS'required'
p7665
I00
sS'group_name'
p7666
S'Advanced'
p7667
sa(dp7668
S'description'
p7669
S'The name of the variable that this object applies to\n'
p7670
sS'cpp_type'
p7671
S'AuxVariableName'
p7672
sS'default'
p7673
g3
sS'name'
p7674
S'variable'
p7675
sS'required'
p7676
I01
sS'group_name'
p7677
NsasS'name'
p7678
S'/AuxKernels/RadialDisplacementCylinderAux'
p7679
sa(dp7680
S'description'
p7681
S'Compute the radial component of the displacement vector for spherical models.\n'
p7682
sS'subblocks'
p7683
NsS'parameters'
p7684
(lp7685
(dp7686
S'description'
p7687
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7688
sS'cpp_type'
p7689
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7690
sS'default'
p7691
g3
sS'name'
p7692
S'block'
p7693
sS'required'
p7694
I00
sS'group_name'
p7695
Nsa(dp7696
S'description'
p7697
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7698
sS'cpp_type'
p7699
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7700
sS'default'
p7701
g3
sS'name'
p7702
S'boundary'
p7703
sS'required'
p7704
I00
sS'group_name'
p7705
Nsa(dp7706
S'description'
p7707
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7708
sS'cpp_type'
p7709
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7710
sS'default'
p7711
g3
sS'name'
p7712
S'control_tags'
p7713
sS'required'
p7714
I00
sS'group_name'
p7715
S'Advanced'
p7716
sa(dp7717
S'description'
p7718
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p7719
sS'cpp_type'
p7720
S'std::vector<VariableName>'
p7721
sS'default'
p7722
g3
sS'name'
p7723
S'displacements'
p7724
sS'required'
p7725
I01
sS'group_name'
p7726
Nsa(dp7727
S'description'
p7728
S'Set the enabled status of the MooseObject.\n'
p7729
sS'cpp_type'
p7730
S'bool'
p7731
sS'default'
p7732
S'1'
p7733
sS'name'
p7734
S'enable'
p7735
sS'required'
p7736
I00
sS'group_name'
p7737
S'Advanced'
p7738
sa(dp7739
S'name'
p7740
S'execute_on'
p7741
sS'cpp_type'
p7742
S'MultiMooseEnum'
p7743
sS'default'
p7744
S'LINEAR'
p7745
sS'description'
p7746
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7747
sS'required'
p7748
I00
sS'options'
p7749
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7750
sS'group_name'
p7751
Nsa(dp7752
S'description'
p7753
S'Sphere origin for 3D Cartesian and 2D axisymmetric models\n'
p7754
sS'cpp_type'
p7755
S'libMesh::VectorValue<double>'
p7756
sS'default'
p7757
g3
sS'name'
p7758
S'origin'
p7759
sS'required'
p7760
I00
sS'group_name'
p7761
Nsa(dp7762
S'description'
p7763
S'The seed for the master random number generator\n'
p7764
sS'cpp_type'
p7765
S'unsigned int'
p7766
sS'default'
p7767
S'0'
p7768
sS'name'
p7769
S'seed'
p7770
sS'required'
p7771
I00
sS'group_name'
p7772
S'Advanced'
p7773
sa(dp7774
S'description'
p7775
g3
sS'cpp_type'
p7776
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7777
sS'default'
p7778
S'RadialDisplacementSphereAux'
p7779
sS'name'
p7780
S'type'
p7781
sS'required'
p7782
I00
sS'group_name'
p7783
Nsa(dp7784
S'description'
p7785
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7786
sS'cpp_type'
p7787
S'bool'
p7788
sS'default'
p7789
S'0'
p7790
sS'name'
p7791
S'use_displaced_mesh'
p7792
sS'required'
p7793
I00
sS'group_name'
p7794
S'Advanced'
p7795
sa(dp7796
S'description'
p7797
S'The name of the variable that this object applies to\n'
p7798
sS'cpp_type'
p7799
S'AuxVariableName'
p7800
sS'default'
p7801
g3
sS'name'
p7802
S'variable'
p7803
sS'required'
p7804
I01
sS'group_name'
p7805
NsasS'name'
p7806
S'/AuxKernels/RadialDisplacementSphereAux'
p7807
sa(dp7808
S'description'
p7809
S'Access a component of a RankFourTensor\n'
p7810
sS'subblocks'
p7811
NsS'parameters'
p7812
(lp7813
(dp7814
S'description'
p7815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7816
sS'cpp_type'
p7817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7818
sS'default'
p7819
g3
sS'name'
p7820
S'block'
p7821
sS'required'
p7822
I00
sS'group_name'
p7823
Nsa(dp7824
S'description'
p7825
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7826
sS'cpp_type'
p7827
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7828
sS'default'
p7829
g3
sS'name'
p7830
S'boundary'
p7831
sS'required'
p7832
I00
sS'group_name'
p7833
Nsa(dp7834
S'description'
p7835
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7836
sS'cpp_type'
p7837
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7838
sS'default'
p7839
g3
sS'name'
p7840
S'control_tags'
p7841
sS'required'
p7842
I00
sS'group_name'
p7843
S'Advanced'
p7844
sa(dp7845
S'description'
p7846
S'Set the enabled status of the MooseObject.\n'
p7847
sS'cpp_type'
p7848
S'bool'
p7849
sS'default'
p7850
S'1'
p7851
sS'name'
p7852
S'enable'
p7853
sS'required'
p7854
I00
sS'group_name'
p7855
S'Advanced'
p7856
sa(dp7857
S'name'
p7858
S'execute_on'
p7859
sS'cpp_type'
p7860
S'MultiMooseEnum'
p7861
sS'default'
p7862
S'LINEAR'
p7863
sS'description'
p7864
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7865
sS'required'
p7866
I00
sS'options'
p7867
S'none initial linear nonlinear timestep_end timestep_begin custom'
p7868
sS'group_name'
p7869
Nsa(dp7870
S'description'
p7871
S'The index i of ijkl for the tensor to output (0, 1, 2)\n'
p7872
sS'cpp_type'
p7873
S'unsigned int'
p7874
sS'default'
p7875
g3
sS'name'
p7876
S'index_i'
p7877
sS'required'
p7878
I01
sS'group_name'
p7879
Nsa(dp7880
S'description'
p7881
S'The index j of ijkl for the tensor to output (0, 1, 2)\n'
p7882
sS'cpp_type'
p7883
S'unsigned int'
p7884
sS'default'
p7885
g3
sS'name'
p7886
S'index_j'
p7887
sS'required'
p7888
I01
sS'group_name'
p7889
Nsa(dp7890
S'description'
p7891
S'The index k of ijkl for the tensor to output (0, 1, 2)\n'
p7892
sS'cpp_type'
p7893
S'unsigned int'
p7894
sS'default'
p7895
g3
sS'name'
p7896
S'index_k'
p7897
sS'required'
p7898
I01
sS'group_name'
p7899
Nsa(dp7900
S'description'
p7901
S'The index l of ijkl for the tensor to output (0, 1, 2)\n'
p7902
sS'cpp_type'
p7903
S'unsigned int'
p7904
sS'default'
p7905
g3
sS'name'
p7906
S'index_l'
p7907
sS'required'
p7908
I01
sS'group_name'
p7909
Nsa(dp7910
S'description'
p7911
S'The rank four material tensor name\n'
p7912
sS'cpp_type'
p7913
S'MaterialPropertyName'
p7914
sS'default'
p7915
g3
sS'name'
p7916
S'rank_four_tensor'
p7917
sS'required'
p7918
I01
sS'group_name'
p7919
Nsa(dp7920
S'description'
p7921
S'The seed for the master random number generator\n'
p7922
sS'cpp_type'
p7923
S'unsigned int'
p7924
sS'default'
p7925
S'0'
p7926
sS'name'
p7927
S'seed'
p7928
sS'required'
p7929
I00
sS'group_name'
p7930
S'Advanced'
p7931
sa(dp7932
S'description'
p7933
g3
sS'cpp_type'
p7934
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7935
sS'default'
p7936
S'RankFourAux'
p7937
sS'name'
p7938
S'type'
p7939
sS'required'
p7940
I00
sS'group_name'
p7941
Nsa(dp7942
S'description'
p7943
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7944
sS'cpp_type'
p7945
S'bool'
p7946
sS'default'
p7947
S'0'
p7948
sS'name'
p7949
S'use_displaced_mesh'
p7950
sS'required'
p7951
I00
sS'group_name'
p7952
S'Advanced'
p7953
sa(dp7954
S'description'
p7955
S'The name of the variable that this object applies to\n'
p7956
sS'cpp_type'
p7957
S'AuxVariableName'
p7958
sS'default'
p7959
g3
sS'name'
p7960
S'variable'
p7961
sS'required'
p7962
I01
sS'group_name'
p7963
NsasS'name'
p7964
S'/AuxKernels/RankFourAux'
p7965
sa(dp7966
S'description'
p7967
S'Access a component of a RankTwoTensor\n'
p7968
sS'subblocks'
p7969
NsS'parameters'
p7970
(lp7971
(dp7972
S'description'
p7973
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7974
sS'cpp_type'
p7975
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7976
sS'default'
p7977
g3
sS'name'
p7978
S'block'
p7979
sS'required'
p7980
I00
sS'group_name'
p7981
Nsa(dp7982
S'description'
p7983
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7984
sS'cpp_type'
p7985
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7986
sS'default'
p7987
g3
sS'name'
p7988
S'boundary'
p7989
sS'required'
p7990
I00
sS'group_name'
p7991
Nsa(dp7992
S'description'
p7993
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7994
sS'cpp_type'
p7995
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7996
sS'default'
p7997
g3
sS'name'
p7998
S'control_tags'
p7999
sS'required'
p8000
I00
sS'group_name'
p8001
S'Advanced'
p8002
sa(dp8003
S'description'
p8004
S'Set the enabled status of the MooseObject.\n'
p8005
sS'cpp_type'
p8006
S'bool'
p8007
sS'default'
p8008
S'1'
p8009
sS'name'
p8010
S'enable'
p8011
sS'required'
p8012
I00
sS'group_name'
p8013
S'Advanced'
p8014
sa(dp8015
S'name'
p8016
S'execute_on'
p8017
sS'cpp_type'
p8018
S'MultiMooseEnum'
p8019
sS'default'
p8020
S'LINEAR'
p8021
sS'description'
p8022
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8023
sS'required'
p8024
I00
sS'options'
p8025
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8026
sS'group_name'
p8027
Nsa(dp8028
S'description'
p8029
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p8030
sS'cpp_type'
p8031
S'unsigned int'
p8032
sS'default'
p8033
g3
sS'name'
p8034
S'index_i'
p8035
sS'required'
p8036
I01
sS'group_name'
p8037
Nsa(dp8038
S'description'
p8039
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p8040
sS'cpp_type'
p8041
S'unsigned int'
p8042
sS'default'
p8043
g3
sS'name'
p8044
S'index_j'
p8045
sS'required'
p8046
I01
sS'group_name'
p8047
Nsa(dp8048
S'description'
p8049
S'The rank two material tensor name\n'
p8050
sS'cpp_type'
p8051
S'MaterialPropertyName'
p8052
sS'default'
p8053
g3
sS'name'
p8054
S'rank_two_tensor'
p8055
sS'required'
p8056
I01
sS'group_name'
p8057
Nsa(dp8058
S'description'
p8059
S'The seed for the master random number generator\n'
p8060
sS'cpp_type'
p8061
S'unsigned int'
p8062
sS'default'
p8063
S'0'
p8064
sS'name'
p8065
S'seed'
p8066
sS'required'
p8067
I00
sS'group_name'
p8068
S'Advanced'
p8069
sa(dp8070
S'description'
p8071
S'Evaluate the tensor at this specific quadpoint\n'
p8072
sS'cpp_type'
p8073
S'unsigned int'
p8074
sS'default'
p8075
g3
sS'name'
p8076
S'selected_qp'
p8077
sS'required'
p8078
I00
sS'group_name'
p8079
S'Advanced'
p8080
sa(dp8081
S'description'
p8082
g3
sS'cpp_type'
p8083
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8084
sS'default'
p8085
S'RankTwoAux'
p8086
sS'name'
p8087
S'type'
p8088
sS'required'
p8089
I00
sS'group_name'
p8090
Nsa(dp8091
S'description'
p8092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8093
sS'cpp_type'
p8094
S'bool'
p8095
sS'default'
p8096
S'0'
p8097
sS'name'
p8098
S'use_displaced_mesh'
p8099
sS'required'
p8100
I00
sS'group_name'
p8101
S'Advanced'
p8102
sa(dp8103
S'description'
p8104
S'The name of the variable that this object applies to\n'
p8105
sS'cpp_type'
p8106
S'AuxVariableName'
p8107
sS'default'
p8108
g3
sS'name'
p8109
S'variable'
p8110
sS'required'
p8111
I01
sS'group_name'
p8112
NsasS'name'
p8113
S'/AuxKernels/RankTwoAux'
p8114
sa(dp8115
S'description'
p8116
S'Compute a scalar property of a RankTwoTensor\n'
p8117
sS'subblocks'
p8118
NsS'parameters'
p8119
(lp8120
(dp8121
S'description'
p8122
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8123
sS'cpp_type'
p8124
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8125
sS'default'
p8126
g3
sS'name'
p8127
S'block'
p8128
sS'required'
p8129
I00
sS'group_name'
p8130
Nsa(dp8131
S'description'
p8132
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8133
sS'cpp_type'
p8134
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8135
sS'default'
p8136
g3
sS'name'
p8137
S'boundary'
p8138
sS'required'
p8139
I00
sS'group_name'
p8140
Nsa(dp8141
S'description'
p8142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8143
sS'cpp_type'
p8144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8145
sS'default'
p8146
g3
sS'name'
p8147
S'control_tags'
p8148
sS'required'
p8149
I00
sS'group_name'
p8150
S'Advanced'
p8151
sa(dp8152
S'description'
p8153
S'Direction vector\n'
p8154
sS'cpp_type'
p8155
S'libMesh::Point'
p8156
sS'default'
p8157
S'0 0 1'
p8158
sS'name'
p8159
S'direction'
p8160
sS'required'
p8161
I00
sS'group_name'
p8162
Nsa(dp8163
S'description'
p8164
S'Set the enabled status of the MooseObject.\n'
p8165
sS'cpp_type'
p8166
S'bool'
p8167
sS'default'
p8168
S'1'
p8169
sS'name'
p8170
S'enable'
p8171
sS'required'
p8172
I00
sS'group_name'
p8173
S'Advanced'
p8174
sa(dp8175
S'name'
p8176
S'execute_on'
p8177
sS'cpp_type'
p8178
S'MultiMooseEnum'
p8179
sS'default'
p8180
S'LINEAR'
p8181
sS'description'
p8182
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8183
sS'required'
p8184
I00
sS'options'
p8185
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8186
sS'group_name'
p8187
Nsa(dp8188
S'description'
p8189
S'Start point for axis used to calculate some cylinderical material tensor quantities\n'
p8190
sS'cpp_type'
p8191
S'libMesh::Point'
p8192
sS'default'
p8193
S'0 0 0'
p8194
sS'name'
p8195
S'point1'
p8196
sS'required'
p8197
I00
sS'group_name'
p8198
Nsa(dp8199
S'description'
p8200
S'End point for axis used to calculate some material tensor quantities\n'
p8201
sS'cpp_type'
p8202
S'libMesh::Point'
p8203
sS'default'
p8204
S'0 1 0'
p8205
sS'name'
p8206
S'point2'
p8207
sS'required'
p8208
I00
sS'group_name'
p8209
Nsa(dp8210
S'description'
p8211
S'The rank two material tensor name\n'
p8212
sS'cpp_type'
p8213
S'MaterialPropertyName'
p8214
sS'default'
p8215
g3
sS'name'
p8216
S'rank_two_tensor'
p8217
sS'required'
p8218
I01
sS'group_name'
p8219
Nsa(dp8220
S'name'
p8221
S'scalar_type'
p8222
sS'cpp_type'
p8223
S'MooseEnum'
p8224
sS'default'
p8225
g3
sS'description'
p8226
S'Type of scalar output\n'
p8227
sS'required'
p8228
I00
sS'options'
p8229
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction'
p8230
sS'group_name'
p8231
Nsa(dp8232
S'description'
p8233
S'The seed for the master random number generator\n'
p8234
sS'cpp_type'
p8235
S'unsigned int'
p8236
sS'default'
p8237
S'0'
p8238
sS'name'
p8239
S'seed'
p8240
sS'required'
p8241
I00
sS'group_name'
p8242
S'Advanced'
p8243
sa(dp8244
S'description'
p8245
S'Evaluate the tensor at this quadpoint.  This option only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p8246
sS'cpp_type'
p8247
S'unsigned int'
p8248
sS'default'
p8249
g3
sS'name'
p8250
S'selected_qp'
p8251
sS'required'
p8252
I00
sS'group_name'
p8253
S'Advanced'
p8254
sa(dp8255
S'description'
p8256
g3
sS'cpp_type'
p8257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8258
sS'default'
p8259
S'RankTwoScalarAux'
p8260
sS'name'
p8261
S'type'
p8262
sS'required'
p8263
I00
sS'group_name'
p8264
Nsa(dp8265
S'description'
p8266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8267
sS'cpp_type'
p8268
S'bool'
p8269
sS'default'
p8270
S'0'
p8271
sS'name'
p8272
S'use_displaced_mesh'
p8273
sS'required'
p8274
I00
sS'group_name'
p8275
S'Advanced'
p8276
sa(dp8277
S'description'
p8278
S'The name of the variable that this object applies to\n'
p8279
sS'cpp_type'
p8280
S'AuxVariableName'
p8281
sS'default'
p8282
g3
sS'name'
p8283
S'variable'
p8284
sS'required'
p8285
I01
sS'group_name'
p8286
NsasS'name'
p8287
S'/AuxKernels/RankTwoScalarAux'
p8288
sa(dp8289
S'description'
p8290
g3
sS'subblocks'
p8291
NsS'parameters'
p8292
(lp8293
(dp8294
S'description'
p8295
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8296
sS'cpp_type'
p8297
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8298
sS'default'
p8299
g3
sS'name'
p8300
S'block'
p8301
sS'required'
p8302
I00
sS'group_name'
p8303
Nsa(dp8304
S'description'
p8305
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8306
sS'cpp_type'
p8307
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8308
sS'default'
p8309
g3
sS'name'
p8310
S'boundary'
p8311
sS'required'
p8312
I00
sS'group_name'
p8313
Nsa(dp8314
S'description'
p8315
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8316
sS'cpp_type'
p8317
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8318
sS'default'
p8319
g3
sS'name'
p8320
S'control_tags'
p8321
sS'required'
p8322
I00
sS'group_name'
p8323
S'Advanced'
p8324
sa(dp8325
S'description'
p8326
S'Set the enabled status of the MooseObject.\n'
p8327
sS'cpp_type'
p8328
S'bool'
p8329
sS'default'
p8330
S'1'
p8331
sS'name'
p8332
S'enable'
p8333
sS'required'
p8334
I00
sS'group_name'
p8335
S'Advanced'
p8336
sa(dp8337
S'name'
p8338
S'execute_on'
p8339
sS'cpp_type'
p8340
S'MultiMooseEnum'
p8341
sS'default'
p8342
S'LINEAR'
p8343
sS'description'
p8344
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8345
sS'required'
p8346
I00
sS'options'
p8347
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8348
sS'group_name'
p8349
Nsa(dp8350
S'description'
p8351
S'The seed for the master random number generator\n'
p8352
sS'cpp_type'
p8353
S'unsigned int'
p8354
sS'default'
p8355
S'0'
p8356
sS'name'
p8357
S'seed'
p8358
sS'required'
p8359
I00
sS'group_name'
p8360
S'Advanced'
p8361
sa(dp8362
S'description'
p8363
g3
sS'cpp_type'
p8364
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8365
sS'default'
p8366
S'SelfAux'
p8367
sS'name'
p8368
S'type'
p8369
sS'required'
p8370
I00
sS'group_name'
p8371
Nsa(dp8372
S'description'
p8373
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8374
sS'cpp_type'
p8375
S'bool'
p8376
sS'default'
p8377
S'0'
p8378
sS'name'
p8379
S'use_displaced_mesh'
p8380
sS'required'
p8381
I00
sS'group_name'
p8382
S'Advanced'
p8383
sa(dp8384
S'description'
p8385
S'The name of the variable that this object applies to\n'
p8386
sS'cpp_type'
p8387
S'AuxVariableName'
p8388
sS'default'
p8389
g3
sS'name'
p8390
S'variable'
p8391
sS'required'
p8392
I01
sS'group_name'
p8393
NsasS'name'
p8394
S'/AuxKernels/SelfAux'
p8395
sa(dp8396
S'description'
p8397
g3
sS'subblocks'
p8398
NsS'parameters'
p8399
(lp8400
(dp8401
S'description'
p8402
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p8403
sS'cpp_type'
p8404
S'double'
p8405
sS'default'
p8406
S'0'
p8407
sS'name'
p8408
S'add_factor'
p8409
sS'required'
p8410
I00
sS'group_name'
p8411
Nsa(dp8412
S'description'
p8413
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8414
sS'cpp_type'
p8415
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8416
sS'default'
p8417
g3
sS'name'
p8418
S'block'
p8419
sS'required'
p8420
I00
sS'group_name'
p8421
Nsa(dp8422
S'description'
p8423
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8424
sS'cpp_type'
p8425
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8426
sS'default'
p8427
g3
sS'name'
p8428
S'boundary'
p8429
sS'required'
p8430
I00
sS'group_name'
p8431
Nsa(dp8432
S'description'
p8433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8434
sS'cpp_type'
p8435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8436
sS'default'
p8437
g3
sS'name'
p8438
S'control_tags'
p8439
sS'required'
p8440
I00
sS'group_name'
p8441
S'Advanced'
p8442
sa(dp8443
S'description'
p8444
S'If true the meshes must be the same and then the values are simply copied over.\n'
p8445
sS'cpp_type'
p8446
S'bool'
p8447
sS'default'
p8448
S'0'
p8449
sS'name'
p8450
S'direct'
p8451
sS'required'
p8452
I00
sS'group_name'
p8453
Nsa(dp8454
S'description'
p8455
S'Set the enabled status of the MooseObject.\n'
p8456
sS'cpp_type'
p8457
S'bool'
p8458
sS'default'
p8459
S'1'
p8460
sS'name'
p8461
S'enable'
p8462
sS'required'
p8463
I00
sS'group_name'
p8464
S'Advanced'
p8465
sa(dp8466
S'name'
p8467
S'execute_on'
p8468
sS'cpp_type'
p8469
S'MultiMooseEnum'
p8470
sS'default'
p8471
S'LINEAR'
p8472
sS'description'
p8473
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8474
sS'required'
p8475
I00
sS'options'
p8476
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8477
sS'group_name'
p8478
Nsa(dp8479
S'description'
p8480
S'The name of the variable to extract from the file\n'
p8481
sS'cpp_type'
p8482
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8483
sS'default'
p8484
g3
sS'name'
p8485
S'from_variable'
p8486
sS'required'
p8487
I00
sS'group_name'
p8488
Nsa(dp8489
S'description'
p8490
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p8491
sS'cpp_type'
p8492
S'double'
p8493
sS'default'
p8494
S'1'
p8495
sS'name'
p8496
S'scale_factor'
p8497
sS'required'
p8498
I00
sS'group_name'
p8499
Nsa(dp8500
S'description'
p8501
S'The seed for the master random number generator\n'
p8502
sS'cpp_type'
p8503
S'unsigned int'
p8504
sS'default'
p8505
S'0'
p8506
sS'name'
p8507
S'seed'
p8508
sS'required'
p8509
I00
sS'group_name'
p8510
S'Advanced'
p8511
sa(dp8512
S'description'
p8513
S'The name of the SolutionUserObject\n'
p8514
sS'cpp_type'
p8515
S'UserObjectName'
p8516
sS'default'
p8517
g3
sS'name'
p8518
S'solution'
p8519
sS'required'
p8520
I01
sS'group_name'
p8521
Nsa(dp8522
S'description'
p8523
g3
sS'cpp_type'
p8524
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8525
sS'default'
p8526
S'SolutionAux'
p8527
sS'name'
p8528
S'type'
p8529
sS'required'
p8530
I00
sS'group_name'
p8531
Nsa(dp8532
S'description'
p8533
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8534
sS'cpp_type'
p8535
S'bool'
p8536
sS'default'
p8537
S'0'
p8538
sS'name'
p8539
S'use_displaced_mesh'
p8540
sS'required'
p8541
I00
sS'group_name'
p8542
S'Advanced'
p8543
sa(dp8544
S'description'
p8545
S'The name of the variable that this object applies to\n'
p8546
sS'cpp_type'
p8547
S'AuxVariableName'
p8548
sS'default'
p8549
g3
sS'name'
p8550
S'variable'
p8551
sS'required'
p8552
I01
sS'group_name'
p8553
NsasS'name'
p8554
S'/AuxKernels/SolutionAux'
p8555
sa(dp8556
S'description'
p8557
g3
sS'subblocks'
p8558
NsS'parameters'
p8559
(lp8560
(dp8561
S'description'
p8562
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8563
sS'cpp_type'
p8564
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8565
sS'default'
p8566
g3
sS'name'
p8567
S'block'
p8568
sS'required'
p8569
I00
sS'group_name'
p8570
Nsa(dp8571
S'description'
p8572
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8573
sS'cpp_type'
p8574
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8575
sS'default'
p8576
g3
sS'name'
p8577
S'boundary'
p8578
sS'required'
p8579
I00
sS'group_name'
p8580
Nsa(dp8581
S'description'
p8582
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8583
sS'cpp_type'
p8584
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8585
sS'default'
p8586
g3
sS'name'
p8587
S'control_tags'
p8588
sS'required'
p8589
I00
sS'group_name'
p8590
S'Advanced'
p8591
sa(dp8592
S'description'
p8593
S'Set the enabled status of the MooseObject.\n'
p8594
sS'cpp_type'
p8595
S'bool'
p8596
sS'default'
p8597
S'1'
p8598
sS'name'
p8599
S'enable'
p8600
sS'required'
p8601
I00
sS'group_name'
p8602
S'Advanced'
p8603
sa(dp8604
S'name'
p8605
S'execute_on'
p8606
sS'cpp_type'
p8607
S'MultiMooseEnum'
p8608
sS'default'
p8609
S'LINEAR'
p8610
sS'description'
p8611
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8612
sS'required'
p8613
I00
sS'options'
p8614
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8615
sS'group_name'
p8616
Nsa(dp8617
S'description'
p8618
S'The seed for the master random number generator\n'
p8619
sS'cpp_type'
p8620
S'unsigned int'
p8621
sS'default'
p8622
S'0'
p8623
sS'name'
p8624
S'seed'
p8625
sS'required'
p8626
I00
sS'group_name'
p8627
S'Advanced'
p8628
sa(dp8629
S'description'
p8630
g3
sS'cpp_type'
p8631
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8632
sS'default'
p8633
S'SpatialUserObjectAux'
p8634
sS'name'
p8635
S'type'
p8636
sS'required'
p8637
I00
sS'group_name'
p8638
Nsa(dp8639
S'description'
p8640
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8641
sS'cpp_type'
p8642
S'bool'
p8643
sS'default'
p8644
S'0'
p8645
sS'name'
p8646
S'use_displaced_mesh'
p8647
sS'required'
p8648
I00
sS'group_name'
p8649
S'Advanced'
p8650
sa(dp8651
S'description'
p8652
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p8653
sS'cpp_type'
p8654
S'UserObjectName'
p8655
sS'default'
p8656
g3
sS'name'
p8657
S'user_object'
p8658
sS'required'
p8659
I01
sS'group_name'
p8660
Nsa(dp8661
S'description'
p8662
S'The name of the variable that this object applies to\n'
p8663
sS'cpp_type'
p8664
S'AuxVariableName'
p8665
sS'default'
p8666
g3
sS'name'
p8667
S'variable'
p8668
sS'required'
p8669
I01
sS'group_name'
p8670
NsasS'name'
p8671
S'/AuxKernels/SpatialUserObjectAux'
p8672
sa(dp8673
S'description'
p8674
S'Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n'
p8675
sS'subblocks'
p8676
NsS'parameters'
p8677
(lp8678
(dp8679
S'description'
p8680
S'Coupled variable holding additional free energy contributions to be summed up\n'
p8681
sS'cpp_type'
p8682
S'std::vector<VariableName>'
p8683
sS'default'
p8684
S'0'
p8685
sS'name'
p8686
S'additional_free_energy'
p8687
sS'required'
p8688
I00
sS'group_name'
p8689
Nsa(dp8690
S'description'
p8691
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8692
sS'cpp_type'
p8693
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8694
sS'default'
p8695
g3
sS'name'
p8696
S'block'
p8697
sS'required'
p8698
I00
sS'group_name'
p8699
Nsa(dp8700
S'description'
p8701
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8702
sS'cpp_type'
p8703
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8704
sS'default'
p8705
g3
sS'name'
p8706
S'boundary'
p8707
sS'required'
p8708
I00
sS'group_name'
p8709
Nsa(dp8710
S'description'
p8711
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8712
sS'cpp_type'
p8713
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8714
sS'default'
p8715
g3
sS'name'
p8716
S'control_tags'
p8717
sS'required'
p8718
I00
sS'group_name'
p8719
S'Advanced'
p8720
sa(dp8721
S'description'
p8722
S'Set the enabled status of the MooseObject.\n'
p8723
sS'cpp_type'
p8724
S'bool'
p8725
sS'default'
p8726
S'1'
p8727
sS'name'
p8728
S'enable'
p8729
sS'required'
p8730
I00
sS'group_name'
p8731
S'Advanced'
p8732
sa(dp8733
S'name'
p8734
S'execute_on'
p8735
sS'cpp_type'
p8736
S'MultiMooseEnum'
p8737
sS'default'
p8738
S'LINEAR'
p8739
sS'description'
p8740
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8741
sS'required'
p8742
I00
sS'options'
p8743
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8744
sS'group_name'
p8745
Nsa(dp8746
S'description'
p8747
S'Base name of the free energy function\n'
p8748
sS'cpp_type'
p8749
S'MaterialPropertyName'
p8750
sS'default'
p8751
S'F'
p8752
sS'name'
p8753
S'f_name'
p8754
sS'required'
p8755
I00
sS'group_name'
p8756
Nsa(dp8757
S'description'
p8758
S'Variable names that contribute to interfacial energy\n'
p8759
sS'cpp_type'
p8760
S'std::vector<VariableName>'
p8761
sS'default'
p8762
g3
sS'name'
p8763
S'interfacial_vars'
p8764
sS'required'
p8765
I00
sS'group_name'
p8766
Nsa(dp8767
S'description'
p8768
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p8769
sS'cpp_type'
p8770
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p8771
sS'default'
p8772
g3
sS'name'
p8773
S'kappa_names'
p8774
sS'required'
p8775
I00
sS'group_name'
p8776
Nsa(dp8777
S'description'
p8778
S'The seed for the master random number generator\n'
p8779
sS'cpp_type'
p8780
S'unsigned int'
p8781
sS'default'
p8782
S'0'
p8783
sS'name'
p8784
S'seed'
p8785
sS'required'
p8786
I00
sS'group_name'
p8787
S'Advanced'
p8788
sa(dp8789
S'description'
p8790
g3
sS'cpp_type'
p8791
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8792
sS'default'
p8793
S'TotalFreeEnergy'
p8794
sS'name'
p8795
S'type'
p8796
sS'required'
p8797
I00
sS'group_name'
p8798
Nsa(dp8799
S'description'
p8800
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8801
sS'cpp_type'
p8802
S'bool'
p8803
sS'default'
p8804
S'0'
p8805
sS'name'
p8806
S'use_displaced_mesh'
p8807
sS'required'
p8808
I00
sS'group_name'
p8809
S'Advanced'
p8810
sa(dp8811
S'description'
p8812
S'The name of the variable that this object applies to\n'
p8813
sS'cpp_type'
p8814
S'AuxVariableName'
p8815
sS'default'
p8816
g3
sS'name'
p8817
S'variable'
p8818
sS'required'
p8819
I01
sS'group_name'
p8820
NsasS'name'
p8821
S'/AuxKernels/TotalFreeEnergy'
p8822
sa(dp8823
S'description'
p8824
g3
sS'subblocks'
p8825
NsS'parameters'
p8826
(lp8827
(dp8828
S'description'
p8829
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8830
sS'cpp_type'
p8831
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8832
sS'default'
p8833
g3
sS'name'
p8834
S'block'
p8835
sS'required'
p8836
I00
sS'group_name'
p8837
Nsa(dp8838
S'description'
p8839
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8840
sS'cpp_type'
p8841
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8842
sS'default'
p8843
g3
sS'name'
p8844
S'boundary'
p8845
sS'required'
p8846
I00
sS'group_name'
p8847
Nsa(dp8848
S'name'
p8849
S'component'
p8850
sS'cpp_type'
p8851
S'MooseEnum'
p8852
sS'default'
p8853
g3
sS'description'
p8854
S'The gradient component to compute\n'
p8855
sS'required'
p8856
I00
sS'options'
p8857
S'x y z'
p8858
sS'group_name'
p8859
Nsa(dp8860
S'description'
p8861
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8862
sS'cpp_type'
p8863
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8864
sS'default'
p8865
g3
sS'name'
p8866
S'control_tags'
p8867
sS'required'
p8868
I00
sS'group_name'
p8869
S'Advanced'
p8870
sa(dp8871
S'description'
p8872
S'Set the enabled status of the MooseObject.\n'
p8873
sS'cpp_type'
p8874
S'bool'
p8875
sS'default'
p8876
S'1'
p8877
sS'name'
p8878
S'enable'
p8879
sS'required'
p8880
I00
sS'group_name'
p8881
S'Advanced'
p8882
sa(dp8883
S'name'
p8884
S'execute_on'
p8885
sS'cpp_type'
p8886
S'MultiMooseEnum'
p8887
sS'default'
p8888
S'LINEAR'
p8889
sS'description'
p8890
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8891
sS'required'
p8892
I00
sS'options'
p8893
S'none initial linear nonlinear timestep_end timestep_begin custom'
p8894
sS'group_name'
p8895
Nsa(dp8896
S'description'
p8897
S'The variable from which to compute the gradient component\n'
p8898
sS'cpp_type'
p8899
S'std::vector<VariableName>'
p8900
sS'default'
p8901
g3
sS'name'
p8902
S'gradient_variable'
p8903
sS'required'
p8904
I01
sS'group_name'
p8905
Nsa(dp8906
S'description'
p8907
S'The seed for the master random number generator\n'
p8908
sS'cpp_type'
p8909
S'unsigned int'
p8910
sS'default'
p8911
S'0'
p8912
sS'name'
p8913
S'seed'
p8914
sS'required'
p8915
I00
sS'group_name'
p8916
S'Advanced'
p8917
sa(dp8918
S'description'
p8919
g3
sS'cpp_type'
p8920
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8921
sS'default'
p8922
S'VariableGradientComponent'
p8923
sS'name'
p8924
S'type'
p8925
sS'required'
p8926
I00
sS'group_name'
p8927
Nsa(dp8928
S'description'
p8929
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8930
sS'cpp_type'
p8931
S'bool'
p8932
sS'default'
p8933
S'0'
p8934
sS'name'
p8935
S'use_displaced_mesh'
p8936
sS'required'
p8937
I00
sS'group_name'
p8938
S'Advanced'
p8939
sa(dp8940
S'description'
p8941
S'The name of the variable that this object applies to\n'
p8942
sS'cpp_type'
p8943
S'AuxVariableName'
p8944
sS'default'
p8945
g3
sS'name'
p8946
S'variable'
p8947
sS'required'
p8948
I01
sS'group_name'
p8949
NsasS'name'
p8950
S'/AuxKernels/VariableGradientComponent'
p8951
sa(dp8952
S'description'
p8953
g3
sS'subblocks'
p8954
NsS'parameters'
p8955
(lp8956
(dp8957
S'description'
p8958
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8959
sS'cpp_type'
p8960
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8961
sS'default'
p8962
g3
sS'name'
p8963
S'block'
p8964
sS'required'
p8965
I00
sS'group_name'
p8966
Nsa(dp8967
S'description'
p8968
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8969
sS'cpp_type'
p8970
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8971
sS'default'
p8972
g3
sS'name'
p8973
S'boundary'
p8974
sS'required'
p8975
I00
sS'group_name'
p8976
Nsa(dp8977
S'description'
p8978
S'A simple coefficient\n'
p8979
sS'cpp_type'
p8980
S'double'
p8981
sS'default'
p8982
S'1'
p8983
sS'name'
p8984
S'coefficient'
p8985
sS'required'
p8986
I00
sS'group_name'
p8987
Nsa(dp8988
S'description'
p8989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8990
sS'cpp_type'
p8991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8992
sS'default'
p8993
g3
sS'name'
p8994
S'control_tags'
p8995
sS'required'
p8996
I00
sS'group_name'
p8997
S'Advanced'
p8998
sa(dp8999
S'description'
p9000
S'Set the enabled status of the MooseObject.\n'
p9001
sS'cpp_type'
p9002
S'bool'
p9003
sS'default'
p9004
S'1'
p9005
sS'name'
p9006
S'enable'
p9007
sS'required'
p9008
I00
sS'group_name'
p9009
S'Advanced'
p9010
sa(dp9011
S'name'
p9012
S'execute_on'
p9013
sS'cpp_type'
p9014
S'MultiMooseEnum'
p9015
sS'default'
p9016
S'LINEAR'
p9017
sS'description'
p9018
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9019
sS'required'
p9020
I00
sS'options'
p9021
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9022
sS'group_name'
p9023
Nsa(dp9024
S'description'
p9025
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p9026
sS'cpp_type'
p9027
S'unsigned int'
p9028
sS'default'
p9029
S'2'
p9030
sS'name'
p9031
S'order'
p9032
sS'required'
p9033
I00
sS'group_name'
p9034
Nsa(dp9035
S'description'
p9036
S'The seed for the master random number generator\n'
p9037
sS'cpp_type'
p9038
S'unsigned int'
p9039
sS'default'
p9040
S'0'
p9041
sS'name'
p9042
S'seed'
p9043
sS'required'
p9044
I00
sS'group_name'
p9045
S'Advanced'
p9046
sa(dp9047
S'description'
p9048
g3
sS'cpp_type'
p9049
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9050
sS'default'
p9051
S'VariableTimeIntegrationAux'
p9052
sS'name'
p9053
S'type'
p9054
sS'required'
p9055
I00
sS'group_name'
p9056
Nsa(dp9057
S'description'
p9058
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9059
sS'cpp_type'
p9060
S'bool'
p9061
sS'default'
p9062
S'0'
p9063
sS'name'
p9064
S'use_displaced_mesh'
p9065
sS'required'
p9066
I00
sS'group_name'
p9067
S'Advanced'
p9068
sa(dp9069
S'description'
p9070
S'The name of the variable that this object applies to\n'
p9071
sS'cpp_type'
p9072
S'AuxVariableName'
p9073
sS'default'
p9074
g3
sS'name'
p9075
S'variable'
p9076
sS'required'
p9077
I01
sS'group_name'
p9078
Nsa(dp9079
S'description'
p9080
S'The variable to be integrated\n'
p9081
sS'cpp_type'
p9082
S'std::vector<VariableName>'
p9083
sS'default'
p9084
g3
sS'name'
p9085
S'variable_to_integrate'
p9086
sS'required'
p9087
I01
sS'group_name'
p9088
NsasS'name'
p9089
S'/AuxKernels/VariableTimeIntegrationAux'
p9090
sa(dp9091
S'description'
p9092
g3
sS'subblocks'
p9093
NsS'parameters'
p9094
(lp9095
(dp9096
S'description'
p9097
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9098
sS'cpp_type'
p9099
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9100
sS'default'
p9101
g3
sS'name'
p9102
S'block'
p9103
sS'required'
p9104
I00
sS'group_name'
p9105
Nsa(dp9106
S'description'
p9107
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9108
sS'cpp_type'
p9109
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9110
sS'default'
p9111
g3
sS'name'
p9112
S'boundary'
p9113
sS'required'
p9114
I00
sS'group_name'
p9115
Nsa(dp9116
S'description'
p9117
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9118
sS'cpp_type'
p9119
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9120
sS'default'
p9121
g3
sS'name'
p9122
S'control_tags'
p9123
sS'required'
p9124
I00
sS'group_name'
p9125
S'Advanced'
p9126
sa(dp9127
S'description'
p9128
S'Set the enabled status of the MooseObject.\n'
p9129
sS'cpp_type'
p9130
S'bool'
p9131
sS'default'
p9132
S'1'
p9133
sS'name'
p9134
S'enable'
p9135
sS'required'
p9136
I00
sS'group_name'
p9137
S'Advanced'
p9138
sa(dp9139
S'name'
p9140
S'execute_on'
p9141
sS'cpp_type'
p9142
S'MultiMooseEnum'
p9143
sS'default'
p9144
S'LINEAR'
p9145
sS'description'
p9146
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9147
sS'required'
p9148
I00
sS'options'
p9149
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9150
sS'group_name'
p9151
Nsa(dp9152
S'description'
p9153
S'The seed for the master random number generator\n'
p9154
sS'cpp_type'
p9155
S'unsigned int'
p9156
sS'default'
p9157
S'0'
p9158
sS'name'
p9159
S'seed'
p9160
sS'required'
p9161
I00
sS'group_name'
p9162
S'Advanced'
p9163
sa(dp9164
S'description'
p9165
g3
sS'cpp_type'
p9166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9167
sS'default'
p9168
S'VectorMagnitudeAux'
p9169
sS'name'
p9170
S'type'
p9171
sS'required'
p9172
I00
sS'group_name'
p9173
Nsa(dp9174
S'description'
p9175
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9176
sS'cpp_type'
p9177
S'bool'
p9178
sS'default'
p9179
S'0'
p9180
sS'name'
p9181
S'use_displaced_mesh'
p9182
sS'required'
p9183
I00
sS'group_name'
p9184
S'Advanced'
p9185
sa(dp9186
S'description'
p9187
S'The name of the variable that this object applies to\n'
p9188
sS'cpp_type'
p9189
S'AuxVariableName'
p9190
sS'default'
p9191
g3
sS'name'
p9192
S'variable'
p9193
sS'required'
p9194
I01
sS'group_name'
p9195
Nsa(dp9196
S'description'
p9197
S'x-component of the vector\n'
p9198
sS'cpp_type'
p9199
S'std::vector<VariableName>'
p9200
sS'default'
p9201
g3
sS'name'
p9202
S'x'
p9203
sS'required'
p9204
I01
sS'group_name'
p9205
Nsa(dp9206
S'description'
p9207
S'y-component of the vector\n'
p9208
sS'cpp_type'
p9209
S'std::vector<VariableName>'
p9210
sS'default'
p9211
g3
sS'name'
p9212
S'y'
p9213
sS'required'
p9214
I00
sS'group_name'
p9215
Nsa(dp9216
S'description'
p9217
S'z-component of the vector\n'
p9218
sS'cpp_type'
p9219
S'std::vector<VariableName>'
p9220
sS'default'
p9221
g3
sS'name'
p9222
S'z'
p9223
sS'required'
p9224
I00
sS'group_name'
p9225
NsasS'name'
p9226
S'/AuxKernels/VectorMagnitudeAux'
p9227
sasS'parameters'
p9228
NsS'name'
p9229
S'/AuxKernels'
p9230
sa(dp9231
S'description'
p9232
g3
sS'subblocks'
p9233
(lp9234
(dp9235
S'description'
p9236
g3
sS'subblocks'
p9237
NsS'parameters'
p9238
(lp9239
(dp9240
S'description'
p9241
S'A string representing the Moose Object that will be built by this Action\n'
p9242
sS'cpp_type'
p9243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9244
sS'default'
p9245
g3
sS'name'
p9246
S'type'
p9247
sS'required'
p9248
I01
sS'group_name'
p9249
NsasS'name'
p9250
S'/AuxScalarKernels/*'
p9251
sa(dp9252
S'description'
p9253
g3
sS'subblocks'
p9254
NsS'parameters'
p9255
(lp9256
(dp9257
S'description'
p9258
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9259
sS'cpp_type'
p9260
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9261
sS'default'
p9262
g3
sS'name'
p9263
S'control_tags'
p9264
sS'required'
p9265
I00
sS'group_name'
p9266
S'Advanced'
p9267
sa(dp9268
S'description'
p9269
S'Set the enabled status of the MooseObject.\n'
p9270
sS'cpp_type'
p9271
S'bool'
p9272
sS'default'
p9273
S'1'
p9274
sS'name'
p9275
S'enable'
p9276
sS'required'
p9277
I00
sS'group_name'
p9278
S'Advanced'
p9279
sa(dp9280
S'name'
p9281
S'execute_on'
p9282
sS'cpp_type'
p9283
S'MultiMooseEnum'
p9284
sS'default'
p9285
S'LINEAR'
p9286
sS'description'
p9287
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9288
sS'required'
p9289
I00
sS'options'
p9290
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9291
sS'group_name'
p9292
Nsa(dp9293
S'description'
p9294
g3
sS'cpp_type'
p9295
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9296
sS'default'
p9297
S'ConstantScalarAux'
p9298
sS'name'
p9299
S'type'
p9300
sS'required'
p9301
I00
sS'group_name'
p9302
Nsa(dp9303
S'description'
p9304
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9305
sS'cpp_type'
p9306
S'bool'
p9307
sS'default'
p9308
S'0'
p9309
sS'name'
p9310
S'use_displaced_mesh'
p9311
sS'required'
p9312
I00
sS'group_name'
p9313
S'Advanced'
p9314
sa(dp9315
S'description'
p9316
S'The value to be set to the scalar variable.\n'
p9317
sS'cpp_type'
p9318
S'double'
p9319
sS'default'
p9320
g3
sS'name'
p9321
S'value'
p9322
sS'required'
p9323
I01
sS'group_name'
p9324
Nsa(dp9325
S'description'
p9326
S'The name of the variable that this kernel operates on\n'
p9327
sS'cpp_type'
p9328
S'AuxVariableName'
p9329
sS'default'
p9330
g3
sS'name'
p9331
S'variable'
p9332
sS'required'
p9333
I01
sS'group_name'
p9334
NsasS'name'
p9335
S'/AuxScalarKernels/ConstantScalarAux'
p9336
sa(dp9337
S'description'
p9338
g3
sS'subblocks'
p9339
NsS'parameters'
p9340
(lp9341
(dp9342
S'description'
p9343
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9344
sS'cpp_type'
p9345
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9346
sS'default'
p9347
g3
sS'name'
p9348
S'control_tags'
p9349
sS'required'
p9350
I00
sS'group_name'
p9351
S'Advanced'
p9352
sa(dp9353
S'description'
p9354
S'Set the enabled status of the MooseObject.\n'
p9355
sS'cpp_type'
p9356
S'bool'
p9357
sS'default'
p9358
S'1'
p9359
sS'name'
p9360
S'enable'
p9361
sS'required'
p9362
I00
sS'group_name'
p9363
S'Advanced'
p9364
sa(dp9365
S'name'
p9366
S'execute_on'
p9367
sS'cpp_type'
p9368
S'MultiMooseEnum'
p9369
sS'default'
p9370
S'LINEAR'
p9371
sS'description'
p9372
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9373
sS'required'
p9374
I00
sS'options'
p9375
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9376
sS'group_name'
p9377
Nsa(dp9378
S'description'
p9379
S'The functions to set the scalar variable components.\n'
p9380
sS'cpp_type'
p9381
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p9382
sS'default'
p9383
g3
sS'name'
p9384
S'function'
p9385
sS'required'
p9386
I01
sS'group_name'
p9387
Nsa(dp9388
S'description'
p9389
g3
sS'cpp_type'
p9390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9391
sS'default'
p9392
S'FunctionScalarAux'
p9393
sS'name'
p9394
S'type'
p9395
sS'required'
p9396
I00
sS'group_name'
p9397
Nsa(dp9398
S'description'
p9399
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9400
sS'cpp_type'
p9401
S'bool'
p9402
sS'default'
p9403
S'0'
p9404
sS'name'
p9405
S'use_displaced_mesh'
p9406
sS'required'
p9407
I00
sS'group_name'
p9408
S'Advanced'
p9409
sa(dp9410
S'description'
p9411
S'The name of the variable that this kernel operates on\n'
p9412
sS'cpp_type'
p9413
S'AuxVariableName'
p9414
sS'default'
p9415
g3
sS'name'
p9416
S'variable'
p9417
sS'required'
p9418
I01
sS'group_name'
p9419
NsasS'name'
p9420
S'/AuxScalarKernels/FunctionScalarAux'
p9421
sa(dp9422
S'description'
p9423
g3
sS'subblocks'
p9424
NsS'parameters'
p9425
(lp9426
(dp9427
S'description'
p9428
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9429
sS'cpp_type'
p9430
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9431
sS'default'
p9432
g3
sS'name'
p9433
S'control_tags'
p9434
sS'required'
p9435
I00
sS'group_name'
p9436
S'Advanced'
p9437
sa(dp9438
S'description'
p9439
S'The downstairs of the quotient variable\n'
p9440
sS'cpp_type'
p9441
S'std::vector<VariableName>'
p9442
sS'default'
p9443
g3
sS'name'
p9444
S'denominator'
p9445
sS'required'
p9446
I00
sS'group_name'
p9447
Nsa(dp9448
S'description'
p9449
S'Set the enabled status of the MooseObject.\n'
p9450
sS'cpp_type'
p9451
S'bool'
p9452
sS'default'
p9453
S'1'
p9454
sS'name'
p9455
S'enable'
p9456
sS'required'
p9457
I00
sS'group_name'
p9458
S'Advanced'
p9459
sa(dp9460
S'name'
p9461
S'execute_on'
p9462
sS'cpp_type'
p9463
S'MultiMooseEnum'
p9464
sS'default'
p9465
S'LINEAR'
p9466
sS'description'
p9467
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9468
sS'required'
p9469
I00
sS'options'
p9470
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9471
sS'group_name'
p9472
Nsa(dp9473
S'description'
p9474
S'The upstairs of the quotient variable\n'
p9475
sS'cpp_type'
p9476
S'std::vector<VariableName>'
p9477
sS'default'
p9478
g3
sS'name'
p9479
S'numerator'
p9480
sS'required'
p9481
I00
sS'group_name'
p9482
Nsa(dp9483
S'description'
p9484
g3
sS'cpp_type'
p9485
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9486
sS'default'
p9487
S'QuotientScalarAux'
p9488
sS'name'
p9489
S'type'
p9490
sS'required'
p9491
I00
sS'group_name'
p9492
Nsa(dp9493
S'description'
p9494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9495
sS'cpp_type'
p9496
S'bool'
p9497
sS'default'
p9498
S'0'
p9499
sS'name'
p9500
S'use_displaced_mesh'
p9501
sS'required'
p9502
I00
sS'group_name'
p9503
S'Advanced'
p9504
sa(dp9505
S'description'
p9506
S'The name of the variable that this kernel operates on\n'
p9507
sS'cpp_type'
p9508
S'AuxVariableName'
p9509
sS'default'
p9510
g3
sS'name'
p9511
S'variable'
p9512
sS'required'
p9513
I01
sS'group_name'
p9514
NsasS'name'
p9515
S'/AuxScalarKernels/QuotientScalarAux'
p9516
sasS'parameters'
p9517
NsS'name'
p9518
S'/AuxScalarKernels'
p9519
sa(dp9520
S'description'
p9521
g3
sS'subblocks'
p9522
(lp9523
(dp9524
S'description'
p9525
g3
sS'subblocks'
p9526
(lp9527
(dp9528
S'description'
p9529
g3
sS'subblocks'
p9530
(lp9531
(dp9532
S'description'
p9533
g3
sS'subblocks'
p9534
(lp9535
(dp9536
S'description'
p9537
S'Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n'
p9538
sS'subblocks'
p9539
NsS'parameters'
p9540
(lp9541
(dp9542
S'description'
p9543
S'Semiaxis a for each superellipsoid\n'
p9544
sS'cpp_type'
p9545
S'std::vector<double, std::allocator<double> >'
p9546
sS'default'
p9547
g3
sS'name'
p9548
S'as'
p9549
sS'required'
p9550
I01
sS'group_name'
p9551
Nsa(dp9552
S'description'
p9553
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9554
sS'cpp_type'
p9555
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9556
sS'default'
p9557
g3
sS'name'
p9558
S'block'
p9559
sS'required'
p9560
I00
sS'group_name'
p9561
Nsa(dp9562
S'description'
p9563
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9564
sS'cpp_type'
p9565
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9566
sS'default'
p9567
g3
sS'name'
p9568
S'boundary'
p9569
sS'required'
p9570
I00
sS'group_name'
p9571
Nsa(dp9572
S'description'
p9573
S'Semiaxis b for each superellipsoid\n'
p9574
sS'cpp_type'
p9575
S'std::vector<double, std::allocator<double> >'
p9576
sS'default'
p9577
g3
sS'name'
p9578
S'bs'
p9579
sS'required'
p9580
I01
sS'group_name'
p9581
Nsa(dp9582
S'description'
p9583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9584
sS'cpp_type'
p9585
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9586
sS'default'
p9587
g3
sS'name'
p9588
S'control_tags'
p9589
sS'required'
p9590
I00
sS'group_name'
p9591
S'Advanced'
p9592
sa(dp9593
S'description'
p9594
S'Semiaxis c for each superellipsoid\n'
p9595
sS'cpp_type'
p9596
S'std::vector<double, std::allocator<double> >'
p9597
sS'default'
p9598
g3
sS'name'
p9599
S'cs'
p9600
sS'required'
p9601
I01
sS'group_name'
p9602
Nsa(dp9603
S'description'
p9604
S'Set the enabled status of the MooseObject.\n'
p9605
sS'cpp_type'
p9606
S'bool'
p9607
sS'default'
p9608
S'1'
p9609
sS'name'
p9610
S'enable'
p9611
sS'required'
p9612
I00
sS'group_name'
p9613
S'Advanced'
p9614
sa(dp9615
S'description'
p9616
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p9617
sS'cpp_type'
p9618
S'bool'
p9619
sS'default'
p9620
S'0'
p9621
sS'name'
p9622
S'ignore_uo_dependency'
p9623
sS'required'
p9624
I00
sS'group_name'
p9625
S'Advanced'
p9626
sa(dp9627
S'description'
p9628
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p9629
sS'cpp_type'
p9630
S'double'
p9631
sS'default'
p9632
S'0'
p9633
sS'name'
p9634
S'int_width'
p9635
sS'required'
p9636
I00
sS'group_name'
p9637
Nsa(dp9638
S'description'
p9639
S'The variable value inside the superellipsoid\n'
p9640
sS'cpp_type'
p9641
S'double'
p9642
sS'default'
p9643
g3
sS'name'
p9644
S'invalue'
p9645
sS'required'
p9646
I01
sS'group_name'
p9647
Nsa(dp9648
S'description'
p9649
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p9650
sS'cpp_type'
p9651
S'double'
p9652
sS'default'
p9653
g3
sS'name'
p9654
S'large_spac'
p9655
sS'required'
p9656
I01
sS'group_name'
p9657
Nsa(dp9658
S'description'
p9659
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p9660
sS'cpp_type'
p9661
S'double'
p9662
sS'default'
p9663
g3
sS'name'
p9664
S'nestedvalue'
p9665
sS'required'
p9666
I00
sS'group_name'
p9667
Nsa(dp9668
S'description'
p9669
S'The number of random (small) particles to place\n'
p9670
sS'cpp_type'
p9671
S'unsigned int'
p9672
sS'default'
p9673
g3
sS'name'
p9674
S'npart'
p9675
sS'required'
p9676
I01
sS'group_name'
p9677
Nsa(dp9678
S'description'
p9679
S'Exponent n for each superellipsoid\n'
p9680
sS'cpp_type'
p9681
S'std::vector<double, std::allocator<double> >'
p9682
sS'default'
p9683
g3
sS'name'
p9684
S'ns'
p9685
sS'required'
p9686
I01
sS'group_name'
p9687
Nsa(dp9688
S'description'
p9689
S'The number of tries to place the random particles\n'
p9690
sS'cpp_type'
p9691
S'unsigned int'
p9692
sS'default'
p9693
S'1000'
p9694
sS'name'
p9695
S'numtries'
p9696
sS'required'
p9697
I00
sS'group_name'
p9698
Nsa(dp9699
S'description'
p9700
S'The variable value outside the superellipsoid\n'
p9701
sS'cpp_type'
p9702
S'double'
p9703
sS'default'
p9704
g3
sS'name'
p9705
S'outvalue'
p9706
sS'required'
p9707
I01
sS'group_name'
p9708
Nsa(dp9709
S'description'
p9710
S'Seed value for the random number generator\n'
p9711
sS'cpp_type'
p9712
S'unsigned int'
p9713
sS'default'
p9714
S'12345'
p9715
sS'name'
p9716
S'rand_seed'
p9717
sS'required'
p9718
I00
sS'group_name'
p9719
Nsa(dp9720
S'description'
p9721
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p9722
sS'cpp_type'
p9723
S'double'
p9724
sS'default'
p9725
S'0'
p9726
sS'name'
p9727
S'size_variation'
p9728
sS'required'
p9729
I00
sS'group_name'
p9730
Nsa(dp9731
S'name'
p9732
S'size_variation_type'
p9733
sS'cpp_type'
p9734
S'MooseEnum'
p9735
sS'default'
p9736
S'none'
p9737
sS'description'
p9738
S'Type of distribution that random semiaxes will follow\n'
p9739
sS'required'
p9740
I00
sS'options'
p9741
S'uniform normal none'
p9742
sS'group_name'
p9743
Nsa(dp9744
S'description'
p9745
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p9746
sS'cpp_type'
p9747
S'double'
p9748
sS'default'
p9749
g3
sS'name'
p9750
S'small_a'
p9751
sS'required'
p9752
I01
sS'group_name'
p9753
Nsa(dp9754
S'description'
p9755
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p9756
sS'cpp_type'
p9757
S'double'
p9758
sS'default'
p9759
g3
sS'name'
p9760
S'small_b'
p9761
sS'required'
p9762
I01
sS'group_name'
p9763
Nsa(dp9764
S'description'
p9765
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p9766
sS'cpp_type'
p9767
S'double'
p9768
sS'default'
p9769
g3
sS'name'
p9770
S'small_c'
p9771
sS'required'
p9772
I01
sS'group_name'
p9773
Nsa(dp9774
S'description'
p9775
S'Exponent n for the randomly placed (small) superellipsoids\n'
p9776
sS'cpp_type'
p9777
S'double'
p9778
sS'default'
p9779
g3
sS'name'
p9780
S'small_n'
p9781
sS'required'
p9782
I01
sS'group_name'
p9783
Nsa(dp9784
S'description'
p9785
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p9786
sS'cpp_type'
p9787
S'double'
p9788
sS'default'
p9789
g3
sS'name'
p9790
S'small_spac'
p9791
sS'required'
p9792
I01
sS'group_name'
p9793
Nsa(dp9794
S'description'
p9795
g3
sS'cpp_type'
p9796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9797
sS'default'
p9798
S'BimodalInverseSuperellipsoidsIC'
p9799
sS'name'
p9800
S'type'
p9801
sS'required'
p9802
I00
sS'group_name'
p9803
Nsa(dp9804
S'description'
p9805
S'The variable this initial condition is supposed to provide values for.\n'
p9806
sS'cpp_type'
p9807
S'VariableName'
p9808
sS'default'
p9809
g3
sS'name'
p9810
S'variable'
p9811
sS'required'
p9812
I01
sS'group_name'
p9813
Nsa(dp9814
S'description'
p9815
S'The x-coordinate for each superellipsoid center\n'
p9816
sS'cpp_type'
p9817
S'std::vector<double, std::allocator<double> >'
p9818
sS'default'
p9819
g3
sS'name'
p9820
S'x_positions'
p9821
sS'required'
p9822
I01
sS'group_name'
p9823
Nsa(dp9824
S'description'
p9825
S'The y-coordinate for each superellipsoid center\n'
p9826
sS'cpp_type'
p9827
S'std::vector<double, std::allocator<double> >'
p9828
sS'default'
p9829
g3
sS'name'
p9830
S'y_positions'
p9831
sS'required'
p9832
I01
sS'group_name'
p9833
Nsa(dp9834
S'description'
p9835
S'The z-coordinate for each superellipsoid center\n'
p9836
sS'cpp_type'
p9837
S'std::vector<double, std::allocator<double> >'
p9838
sS'default'
p9839
g3
sS'name'
p9840
S'z_positions'
p9841
sS'required'
p9842
I01
sS'group_name'
p9843
Nsa(dp9844
S'description'
p9845
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p9846
sS'cpp_type'
p9847
S'bool'
p9848
sS'default'
p9849
S'0'
p9850
sS'name'
p9851
S'zero_gradient'
p9852
sS'required'
p9853
I00
sS'group_name'
p9854
NsasS'name'
p9855
S'/AuxVariables/*/InitialCondition/<type>/BimodalInverseSuperellipsoidsIC'
p9856
sa(dp9857
S'description'
p9858
S'Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n'
p9859
sS'subblocks'
p9860
NsS'parameters'
p9861
(lp9862
(dp9863
S'description'
p9864
S'Semiaxis a for each superellipsoid\n'
p9865
sS'cpp_type'
p9866
S'std::vector<double, std::allocator<double> >'
p9867
sS'default'
p9868
g3
sS'name'
p9869
S'as'
p9870
sS'required'
p9871
I01
sS'group_name'
p9872
Nsa(dp9873
S'description'
p9874
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9875
sS'cpp_type'
p9876
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9877
sS'default'
p9878
g3
sS'name'
p9879
S'block'
p9880
sS'required'
p9881
I00
sS'group_name'
p9882
Nsa(dp9883
S'description'
p9884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9885
sS'cpp_type'
p9886
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9887
sS'default'
p9888
g3
sS'name'
p9889
S'boundary'
p9890
sS'required'
p9891
I00
sS'group_name'
p9892
Nsa(dp9893
S'description'
p9894
S'Semiaxis b for each superellipsoid\n'
p9895
sS'cpp_type'
p9896
S'std::vector<double, std::allocator<double> >'
p9897
sS'default'
p9898
g3
sS'name'
p9899
S'bs'
p9900
sS'required'
p9901
I01
sS'group_name'
p9902
Nsa(dp9903
S'description'
p9904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9905
sS'cpp_type'
p9906
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9907
sS'default'
p9908
g3
sS'name'
p9909
S'control_tags'
p9910
sS'required'
p9911
I00
sS'group_name'
p9912
S'Advanced'
p9913
sa(dp9914
S'description'
p9915
S'Semiaxis c for each superellipsoid\n'
p9916
sS'cpp_type'
p9917
S'std::vector<double, std::allocator<double> >'
p9918
sS'default'
p9919
g3
sS'name'
p9920
S'cs'
p9921
sS'required'
p9922
I01
sS'group_name'
p9923
Nsa(dp9924
S'description'
p9925
S'Set the enabled status of the MooseObject.\n'
p9926
sS'cpp_type'
p9927
S'bool'
p9928
sS'default'
p9929
S'1'
p9930
sS'name'
p9931
S'enable'
p9932
sS'required'
p9933
I00
sS'group_name'
p9934
S'Advanced'
p9935
sa(dp9936
S'description'
p9937
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p9938
sS'cpp_type'
p9939
S'bool'
p9940
sS'default'
p9941
S'0'
p9942
sS'name'
p9943
S'ignore_uo_dependency'
p9944
sS'required'
p9945
I00
sS'group_name'
p9946
S'Advanced'
p9947
sa(dp9948
S'description'
p9949
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p9950
sS'cpp_type'
p9951
S'double'
p9952
sS'default'
p9953
S'0'
p9954
sS'name'
p9955
S'int_width'
p9956
sS'required'
p9957
I00
sS'group_name'
p9958
Nsa(dp9959
S'description'
p9960
S'The variable value inside the superellipsoid\n'
p9961
sS'cpp_type'
p9962
S'double'
p9963
sS'default'
p9964
g3
sS'name'
p9965
S'invalue'
p9966
sS'required'
p9967
I01
sS'group_name'
p9968
Nsa(dp9969
S'description'
p9970
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p9971
sS'cpp_type'
p9972
S'double'
p9973
sS'default'
p9974
g3
sS'name'
p9975
S'large_spac'
p9976
sS'required'
p9977
I01
sS'group_name'
p9978
Nsa(dp9979
S'description'
p9980
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p9981
sS'cpp_type'
p9982
S'double'
p9983
sS'default'
p9984
g3
sS'name'
p9985
S'nestedvalue'
p9986
sS'required'
p9987
I00
sS'group_name'
p9988
Nsa(dp9989
S'description'
p9990
S'The number of random (small) particles to place\n'
p9991
sS'cpp_type'
p9992
S'unsigned int'
p9993
sS'default'
p9994
g3
sS'name'
p9995
S'npart'
p9996
sS'required'
p9997
I01
sS'group_name'
p9998
Nsa(dp9999
S'description'
p10000
S'Exponent n for each superellipsoid\n'
p10001
sS'cpp_type'
p10002
S'std::vector<double, std::allocator<double> >'
p10003
sS'default'
p10004
g3
sS'name'
p10005
S'ns'
p10006
sS'required'
p10007
I01
sS'group_name'
p10008
Nsa(dp10009
S'description'
p10010
S'The number of tries to place the random particles\n'
p10011
sS'cpp_type'
p10012
S'unsigned int'
p10013
sS'default'
p10014
S'1000'
p10015
sS'name'
p10016
S'numtries'
p10017
sS'required'
p10018
I00
sS'group_name'
p10019
Nsa(dp10020
S'description'
p10021
S'The variable value outside the superellipsoid\n'
p10022
sS'cpp_type'
p10023
S'double'
p10024
sS'default'
p10025
g3
sS'name'
p10026
S'outvalue'
p10027
sS'required'
p10028
I01
sS'group_name'
p10029
Nsa(dp10030
S'description'
p10031
S'Seed value for the random number generator\n'
p10032
sS'cpp_type'
p10033
S'unsigned int'
p10034
sS'default'
p10035
S'12345'
p10036
sS'name'
p10037
S'rand_seed'
p10038
sS'required'
p10039
I00
sS'group_name'
p10040
Nsa(dp10041
S'description'
p10042
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p10043
sS'cpp_type'
p10044
S'double'
p10045
sS'default'
p10046
S'0'
p10047
sS'name'
p10048
S'size_variation'
p10049
sS'required'
p10050
I00
sS'group_name'
p10051
Nsa(dp10052
S'name'
p10053
S'size_variation_type'
p10054
sS'cpp_type'
p10055
S'MooseEnum'
p10056
sS'default'
p10057
S'none'
p10058
sS'description'
p10059
S'Type of distribution that random semiaxes will follow\n'
p10060
sS'required'
p10061
I00
sS'options'
p10062
S'uniform normal none'
p10063
sS'group_name'
p10064
Nsa(dp10065
S'description'
p10066
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p10067
sS'cpp_type'
p10068
S'double'
p10069
sS'default'
p10070
g3
sS'name'
p10071
S'small_a'
p10072
sS'required'
p10073
I01
sS'group_name'
p10074
Nsa(dp10075
S'description'
p10076
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p10077
sS'cpp_type'
p10078
S'double'
p10079
sS'default'
p10080
g3
sS'name'
p10081
S'small_b'
p10082
sS'required'
p10083
I01
sS'group_name'
p10084
Nsa(dp10085
S'description'
p10086
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p10087
sS'cpp_type'
p10088
S'double'
p10089
sS'default'
p10090
g3
sS'name'
p10091
S'small_c'
p10092
sS'required'
p10093
I01
sS'group_name'
p10094
Nsa(dp10095
S'description'
p10096
S'Exponent n for the randomly placed (small) superellipsoids\n'
p10097
sS'cpp_type'
p10098
S'double'
p10099
sS'default'
p10100
g3
sS'name'
p10101
S'small_n'
p10102
sS'required'
p10103
I01
sS'group_name'
p10104
Nsa(dp10105
S'description'
p10106
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p10107
sS'cpp_type'
p10108
S'double'
p10109
sS'default'
p10110
g3
sS'name'
p10111
S'small_spac'
p10112
sS'required'
p10113
I01
sS'group_name'
p10114
Nsa(dp10115
S'description'
p10116
g3
sS'cpp_type'
p10117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10118
sS'default'
p10119
S'BimodalSuperellipsoidsIC'
p10120
sS'name'
p10121
S'type'
p10122
sS'required'
p10123
I00
sS'group_name'
p10124
Nsa(dp10125
S'description'
p10126
S'The variable this initial condition is supposed to provide values for.\n'
p10127
sS'cpp_type'
p10128
S'VariableName'
p10129
sS'default'
p10130
g3
sS'name'
p10131
S'variable'
p10132
sS'required'
p10133
I01
sS'group_name'
p10134
Nsa(dp10135
S'description'
p10136
S'The x-coordinate for each superellipsoid center\n'
p10137
sS'cpp_type'
p10138
S'std::vector<double, std::allocator<double> >'
p10139
sS'default'
p10140
g3
sS'name'
p10141
S'x_positions'
p10142
sS'required'
p10143
I01
sS'group_name'
p10144
Nsa(dp10145
S'description'
p10146
S'The y-coordinate for each superellipsoid center\n'
p10147
sS'cpp_type'
p10148
S'std::vector<double, std::allocator<double> >'
p10149
sS'default'
p10150
g3
sS'name'
p10151
S'y_positions'
p10152
sS'required'
p10153
I01
sS'group_name'
p10154
Nsa(dp10155
S'description'
p10156
S'The z-coordinate for each superellipsoid center\n'
p10157
sS'cpp_type'
p10158
S'std::vector<double, std::allocator<double> >'
p10159
sS'default'
p10160
g3
sS'name'
p10161
S'z_positions'
p10162
sS'required'
p10163
I01
sS'group_name'
p10164
Nsa(dp10165
S'description'
p10166
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p10167
sS'cpp_type'
p10168
S'bool'
p10169
sS'default'
p10170
S'0'
p10171
sS'name'
p10172
S'zero_gradient'
p10173
sS'required'
p10174
I00
sS'group_name'
p10175
NsasS'name'
p10176
S'/AuxVariables/*/InitialCondition/<type>/BimodalSuperellipsoidsIC'
p10177
sa(dp10178
S'description'
p10179
g3
sS'subblocks'
p10180
NsS'parameters'
p10181
(lp10182
(dp10183
S'description'
p10184
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10185
sS'cpp_type'
p10186
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10187
sS'default'
p10188
g3
sS'name'
p10189
S'block'
p10190
sS'required'
p10191
I00
sS'group_name'
p10192
Nsa(dp10193
S'description'
p10194
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10195
sS'cpp_type'
p10196
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10197
sS'default'
p10198
g3
sS'name'
p10199
S'boundary'
p10200
sS'required'
p10201
I00
sS'group_name'
p10202
Nsa(dp10203
S'description'
p10204
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10205
sS'cpp_type'
p10206
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10207
sS'default'
p10208
g3
sS'name'
p10209
S'control_tags'
p10210
sS'required'
p10211
I00
sS'group_name'
p10212
S'Advanced'
p10213
sa(dp10214
S'description'
p10215
S'Set the enabled status of the MooseObject.\n'
p10216
sS'cpp_type'
p10217
S'bool'
p10218
sS'default'
p10219
S'1'
p10220
sS'name'
p10221
S'enable'
p10222
sS'required'
p10223
I00
sS'group_name'
p10224
S'Advanced'
p10225
sa(dp10226
S'description'
p10227
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10228
sS'cpp_type'
p10229
S'bool'
p10230
sS'default'
p10231
S'0'
p10232
sS'name'
p10233
S'ignore_uo_dependency'
p10234
sS'required'
p10235
I00
sS'group_name'
p10236
S'Advanced'
p10237
sa(dp10238
S'description'
p10239
S'The value of the variable inside the box\n'
p10240
sS'cpp_type'
p10241
S'double'
p10242
sS'default'
p10243
S'0'
p10244
sS'name'
p10245
S'inside'
p10246
sS'required'
p10247
I00
sS'group_name'
p10248
Nsa(dp10249
S'description'
p10250
S'The value of the variable outside the box\n'
p10251
sS'cpp_type'
p10252
S'double'
p10253
sS'default'
p10254
S'0'
p10255
sS'name'
p10256
S'outside'
p10257
sS'required'
p10258
I00
sS'group_name'
p10259
Nsa(dp10260
S'description'
p10261
g3
sS'cpp_type'
p10262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10263
sS'default'
p10264
S'BoundingBoxIC'
p10265
sS'name'
p10266
S'type'
p10267
sS'required'
p10268
I00
sS'group_name'
p10269
Nsa(dp10270
S'description'
p10271
S'The variable this initial condition is supposed to provide values for.\n'
p10272
sS'cpp_type'
p10273
S'VariableName'
p10274
sS'default'
p10275
g3
sS'name'
p10276
S'variable'
p10277
sS'required'
p10278
I01
sS'group_name'
p10279
Nsa(dp10280
S'description'
p10281
S'The x coordinate of the lower left-hand corner of the box\n'
p10282
sS'cpp_type'
p10283
S'double'
p10284
sS'default'
p10285
g3
sS'name'
p10286
S'x1'
p10287
sS'required'
p10288
I01
sS'group_name'
p10289
Nsa(dp10290
S'description'
p10291
S'The x coordinate of the upper right-hand corner of the box\n'
p10292
sS'cpp_type'
p10293
S'double'
p10294
sS'default'
p10295
g3
sS'name'
p10296
S'x2'
p10297
sS'required'
p10298
I01
sS'group_name'
p10299
Nsa(dp10300
S'description'
p10301
S'The y coordinate of the lower left-hand corner of the box\n'
p10302
sS'cpp_type'
p10303
S'double'
p10304
sS'default'
p10305
g3
sS'name'
p10306
S'y1'
p10307
sS'required'
p10308
I01
sS'group_name'
p10309
Nsa(dp10310
S'description'
p10311
S'The y coordinate of the upper right-hand corner of the box\n'
p10312
sS'cpp_type'
p10313
S'double'
p10314
sS'default'
p10315
g3
sS'name'
p10316
S'y2'
p10317
sS'required'
p10318
I01
sS'group_name'
p10319
Nsa(dp10320
S'description'
p10321
S'The z coordinate of the lower left-hand corner of the box\n'
p10322
sS'cpp_type'
p10323
S'double'
p10324
sS'default'
p10325
S'0'
p10326
sS'name'
p10327
S'z1'
p10328
sS'required'
p10329
I00
sS'group_name'
p10330
Nsa(dp10331
S'description'
p10332
S'The z coordinate of the upper right-hand corner of the box\n'
p10333
sS'cpp_type'
p10334
S'double'
p10335
sS'default'
p10336
S'0'
p10337
sS'name'
p10338
S'z2'
p10339
sS'required'
p10340
I00
sS'group_name'
p10341
NsasS'name'
p10342
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p10343
sa(dp10344
S'description'
p10345
S'Close packed arrangement of smooth circles\n'
p10346
sS'subblocks'
p10347
NsS'parameters'
p10348
(lp10349
(dp10350
S'description'
p10351
S'in 3D, whether the objects are spheres or columns\n'
p10352
sS'cpp_type'
p10353
S'bool'
p10354
sS'default'
p10355
S'1'
p10356
sS'name'
p10357
S'3D_spheres'
p10358
sS'required'
p10359
I00
sS'group_name'
p10360
Nsa(dp10361
S'description'
p10362
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10363
sS'cpp_type'
p10364
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10365
sS'default'
p10366
g3
sS'name'
p10367
S'block'
p10368
sS'required'
p10369
I00
sS'group_name'
p10370
Nsa(dp10371
S'description'
p10372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10373
sS'cpp_type'
p10374
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10375
sS'default'
p10376
g3
sS'name'
p10377
S'boundary'
p10378
sS'required'
p10379
I00
sS'group_name'
p10380
Nsa(dp10381
S'description'
p10382
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10383
sS'cpp_type'
p10384
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10385
sS'default'
p10386
g3
sS'name'
p10387
S'control_tags'
p10388
sS'required'
p10389
I00
sS'group_name'
p10390
S'Advanced'
p10391
sa(dp10392
S'description'
p10393
S'Set the enabled status of the MooseObject.\n'
p10394
sS'cpp_type'
p10395
S'bool'
p10396
sS'default'
p10397
S'1'
p10398
sS'name'
p10399
S'enable'
p10400
sS'required'
p10401
I00
sS'group_name'
p10402
S'Advanced'
p10403
sa(dp10404
S'description'
p10405
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10406
sS'cpp_type'
p10407
S'bool'
p10408
sS'default'
p10409
S'0'
p10410
sS'name'
p10411
S'ignore_uo_dependency'
p10412
sS'required'
p10413
I00
sS'group_name'
p10414
S'Advanced'
p10415
sa(dp10416
S'description'
p10417
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p10418
sS'cpp_type'
p10419
S'double'
p10420
sS'default'
p10421
S'0'
p10422
sS'name'
p10423
S'int_width'
p10424
sS'required'
p10425
I00
sS'group_name'
p10426
Nsa(dp10427
S'description'
p10428
S'The variable value inside the circle\n'
p10429
sS'cpp_type'
p10430
S'double'
p10431
sS'default'
p10432
g3
sS'name'
p10433
S'invalue'
p10434
sS'required'
p10435
I01
sS'group_name'
p10436
Nsa(dp10437
S'description'
p10438
S'The variable value outside the circle\n'
p10439
sS'cpp_type'
p10440
S'double'
p10441
sS'default'
p10442
g3
sS'name'
p10443
S'outvalue'
p10444
sS'required'
p10445
I01
sS'group_name'
p10446
Nsa(dp10447
S'description'
p10448
S'The radius of a circle\n'
p10449
sS'cpp_type'
p10450
S'double'
p10451
sS'default'
p10452
g3
sS'name'
p10453
S'radius'
p10454
sS'required'
p10455
I01
sS'group_name'
p10456
Nsa(dp10457
S'description'
p10458
S'Seed value for the random number generator\n'
p10459
sS'cpp_type'
p10460
S'unsigned int'
p10461
sS'default'
p10462
S'12345'
p10463
sS'name'
p10464
S'rand_seed'
p10465
sS'required'
p10466
I00
sS'group_name'
p10467
Nsa(dp10468
S'description'
p10469
g3
sS'cpp_type'
p10470
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10471
sS'default'
p10472
S'ClosePackIC'
p10473
sS'name'
p10474
S'type'
p10475
sS'required'
p10476
I00
sS'group_name'
p10477
Nsa(dp10478
S'description'
p10479
S'The variable this initial condition is supposed to provide values for.\n'
p10480
sS'cpp_type'
p10481
S'VariableName'
p10482
sS'default'
p10483
g3
sS'name'
p10484
S'variable'
p10485
sS'required'
p10486
I01
sS'group_name'
p10487
Nsa(dp10488
S'description'
p10489
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p10490
sS'cpp_type'
p10491
S'bool'
p10492
sS'default'
p10493
S'0'
p10494
sS'name'
p10495
S'zero_gradient'
p10496
sS'required'
p10497
I00
sS'group_name'
p10498
NsasS'name'
p10499
S'/AuxVariables/*/InitialCondition/<type>/ClosePackIC'
p10500
sa(dp10501
S'description'
p10502
g3
sS'subblocks'
p10503
NsS'parameters'
p10504
(lp10505
(dp10506
S'description'
p10507
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10508
sS'cpp_type'
p10509
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10510
sS'default'
p10511
g3
sS'name'
p10512
S'block'
p10513
sS'required'
p10514
I00
sS'group_name'
p10515
Nsa(dp10516
S'description'
p10517
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10518
sS'cpp_type'
p10519
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10520
sS'default'
p10521
g3
sS'name'
p10522
S'boundary'
p10523
sS'required'
p10524
I00
sS'group_name'
p10525
Nsa(dp10526
S'description'
p10527
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10528
sS'cpp_type'
p10529
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10530
sS'default'
p10531
g3
sS'name'
p10532
S'control_tags'
p10533
sS'required'
p10534
I00
sS'group_name'
p10535
S'Advanced'
p10536
sa(dp10537
S'description'
p10538
S'Set the enabled status of the MooseObject.\n'
p10539
sS'cpp_type'
p10540
S'bool'
p10541
sS'default'
p10542
S'1'
p10543
sS'name'
p10544
S'enable'
p10545
sS'required'
p10546
I00
sS'group_name'
p10547
S'Advanced'
p10548
sa(dp10549
S'description'
p10550
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10551
sS'cpp_type'
p10552
S'bool'
p10553
sS'default'
p10554
S'0'
p10555
sS'name'
p10556
S'ignore_uo_dependency'
p10557
sS'required'
p10558
I00
sS'group_name'
p10559
S'Advanced'
p10560
sa(dp10561
S'description'
p10562
g3
sS'cpp_type'
p10563
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10564
sS'default'
p10565
S'ConstantIC'
p10566
sS'name'
p10567
S'type'
p10568
sS'required'
p10569
I00
sS'group_name'
p10570
Nsa(dp10571
S'description'
p10572
S'The value to be set in IC\n'
p10573
sS'cpp_type'
p10574
S'double'
p10575
sS'default'
p10576
g3
sS'name'
p10577
S'value'
p10578
sS'required'
p10579
I01
sS'group_name'
p10580
Nsa(dp10581
S'description'
p10582
S'The variable this initial condition is supposed to provide values for.\n'
p10583
sS'cpp_type'
p10584
S'VariableName'
p10585
sS'default'
p10586
g3
sS'name'
p10587
S'variable'
p10588
sS'required'
p10589
I01
sS'group_name'
p10590
NsasS'name'
p10591
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p10592
sa(dp10593
S'description'
p10594
S'Cross-shaped initial condition\n'
p10595
sS'subblocks'
p10596
NsS'parameters'
p10597
(lp10598
(dp10599
S'description'
p10600
S'The amplitude\n'
p10601
sS'cpp_type'
p10602
S'double'
p10603
sS'default'
p10604
S'1'
p10605
sS'name'
p10606
S'amplitude'
p10607
sS'required'
p10608
I00
sS'group_name'
p10609
Nsa(dp10610
S'description'
p10611
S'The average value\n'
p10612
sS'cpp_type'
p10613
S'double'
p10614
sS'default'
p10615
S'0'
p10616
sS'name'
p10617
S'average'
p10618
sS'required'
p10619
I00
sS'group_name'
p10620
Nsa(dp10621
S'description'
p10622
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10623
sS'cpp_type'
p10624
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10625
sS'default'
p10626
g3
sS'name'
p10627
S'block'
p10628
sS'required'
p10629
I00
sS'group_name'
p10630
Nsa(dp10631
S'description'
p10632
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10633
sS'cpp_type'
p10634
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10635
sS'default'
p10636
g3
sS'name'
p10637
S'boundary'
p10638
sS'required'
p10639
I00
sS'group_name'
p10640
Nsa(dp10641
S'description'
p10642
S'A small area between the max value and the interface\n'
p10643
sS'cpp_type'
p10644
S'double'
p10645
sS'default'
p10646
S'0.03125'
p10647
sS'name'
p10648
S'buffer'
p10649
sS'required'
p10650
I00
sS'group_name'
p10651
Nsa(dp10652
S'description'
p10653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10654
sS'cpp_type'
p10655
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10656
sS'default'
p10657
g3
sS'name'
p10658
S'control_tags'
p10659
sS'required'
p10660
I00
sS'group_name'
p10661
S'Advanced'
p10662
sa(dp10663
S'description'
p10664
S'Set the enabled status of the MooseObject.\n'
p10665
sS'cpp_type'
p10666
S'bool'
p10667
sS'default'
p10668
S'1'
p10669
sS'name'
p10670
S'enable'
p10671
sS'required'
p10672
I00
sS'group_name'
p10673
S'Advanced'
p10674
sa(dp10675
S'description'
p10676
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10677
sS'cpp_type'
p10678
S'bool'
p10679
sS'default'
p10680
S'0'
p10681
sS'name'
p10682
S'ignore_uo_dependency'
p10683
sS'required'
p10684
I00
sS'group_name'
p10685
S'Advanced'
p10686
sa(dp10687
S'description'
p10688
S'The interface width\n'
p10689
sS'cpp_type'
p10690
S'double'
p10691
sS'default'
p10692
S'0.03125'
p10693
sS'name'
p10694
S'interface'
p10695
sS'required'
p10696
I00
sS'group_name'
p10697
Nsa(dp10698
S'description'
p10699
S'The length\n'
p10700
sS'cpp_type'
p10701
S'double'
p10702
sS'default'
p10703
S'0.75'
p10704
sS'name'
p10705
S'length'
p10706
sS'required'
p10707
I00
sS'group_name'
p10708
Nsa(dp10709
S'description'
p10710
g3
sS'cpp_type'
p10711
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10712
sS'default'
p10713
S'CrossIC'
p10714
sS'name'
p10715
S'type'
p10716
sS'required'
p10717
I00
sS'group_name'
p10718
Nsa(dp10719
S'description'
p10720
S'The variable this initial condition is supposed to provide values for.\n'
p10721
sS'cpp_type'
p10722
S'VariableName'
p10723
sS'default'
p10724
g3
sS'name'
p10725
S'variable'
p10726
sS'required'
p10727
I01
sS'group_name'
p10728
Nsa(dp10729
S'description'
p10730
S'The width\n'
p10731
sS'cpp_type'
p10732
S'double'
p10733
sS'default'
p10734
S'0.125'
p10735
sS'name'
p10736
S'width'
p10737
sS'required'
p10738
I00
sS'group_name'
p10739
Nsa(dp10740
S'description'
p10741
S'The x coordinate of the lower left-hand corner of the box\n'
p10742
sS'cpp_type'
p10743
S'double'
p10744
sS'default'
p10745
S'0'
p10746
sS'name'
p10747
S'x1'
p10748
sS'required'
p10749
I00
sS'group_name'
p10750
Nsa(dp10751
S'description'
p10752
S'The x coordinate of the upper right-hand corner of the box\n'
p10753
sS'cpp_type'
p10754
S'double'
p10755
sS'default'
p10756
S'1'
p10757
sS'name'
p10758
S'x2'
p10759
sS'required'
p10760
I00
sS'group_name'
p10761
Nsa(dp10762
S'description'
p10763
S'The y coordinate of the lower left-hand corner of the box\n'
p10764
sS'cpp_type'
p10765
S'double'
p10766
sS'default'
p10767
S'0'
p10768
sS'name'
p10769
S'y1'
p10770
sS'required'
p10771
I00
sS'group_name'
p10772
Nsa(dp10773
S'description'
p10774
S'The y coordinate of the upper right-hand corner of the box\n'
p10775
sS'cpp_type'
p10776
S'double'
p10777
sS'default'
p10778
S'1'
p10779
sS'name'
p10780
S'y2'
p10781
sS'required'
p10782
I00
sS'group_name'
p10783
NsasS'name'
p10784
S'/AuxVariables/*/InitialCondition/<type>/CrossIC'
p10785
sa(dp10786
S'description'
p10787
g3
sS'subblocks'
p10788
NsS'parameters'
p10789
(lp10790
(dp10791
S'description'
p10792
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10793
sS'cpp_type'
p10794
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10795
sS'default'
p10796
g3
sS'name'
p10797
S'block'
p10798
sS'required'
p10799
I00
sS'group_name'
p10800
Nsa(dp10801
S'description'
p10802
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10803
sS'cpp_type'
p10804
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10805
sS'default'
p10806
g3
sS'name'
p10807
S'boundary'
p10808
sS'required'
p10809
I00
sS'group_name'
p10810
Nsa(dp10811
S'description'
p10812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10813
sS'cpp_type'
p10814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10815
sS'default'
p10816
g3
sS'name'
p10817
S'control_tags'
p10818
sS'required'
p10819
I00
sS'group_name'
p10820
S'Advanced'
p10821
sa(dp10822
S'description'
p10823
S'Set the enabled status of the MooseObject.\n'
p10824
sS'cpp_type'
p10825
S'bool'
p10826
sS'default'
p10827
S'1'
p10828
sS'name'
p10829
S'enable'
p10830
sS'required'
p10831
I00
sS'group_name'
p10832
S'Advanced'
p10833
sa(dp10834
S'description'
p10835
S'The initial condition function.\n'
p10836
sS'cpp_type'
p10837
S'FunctionName'
p10838
sS'default'
p10839
g3
sS'name'
p10840
S'function'
p10841
sS'required'
p10842
I01
sS'group_name'
p10843
Nsa(dp10844
S'description'
p10845
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p10846
sS'cpp_type'
p10847
S'bool'
p10848
sS'default'
p10849
S'0'
p10850
sS'name'
p10851
S'ignore_uo_dependency'
p10852
sS'required'
p10853
I00
sS'group_name'
p10854
S'Advanced'
p10855
sa(dp10856
S'description'
p10857
g3
sS'cpp_type'
p10858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10859
sS'default'
p10860
S'FunctionIC'
p10861
sS'name'
p10862
S'type'
p10863
sS'required'
p10864
I00
sS'group_name'
p10865
Nsa(dp10866
S'description'
p10867
S'The variable this initial condition is supposed to provide values for.\n'
p10868
sS'cpp_type'
p10869
S'VariableName'
p10870
sS'default'
p10871
g3
sS'name'
p10872
S'variable'
p10873
sS'required'
p10874
I01
sS'group_name'
p10875
NsasS'name'
p10876
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p10877
sa(dp10878
S'description'
p10879
g3
sS'subblocks'
p10880
NsS'parameters'
p10881
(lp10882
(dp10883
S'description'
p10884
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10885
sS'cpp_type'
p10886
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10887
sS'default'
p10888
g3
sS'name'
p10889
S'control_tags'
p10890
sS'required'
p10891
I00
sS'group_name'
p10892
S'Advanced'
p10893
sa(dp10894
S'description'
p10895
S'Set the enabled status of the MooseObject.\n'
p10896
sS'cpp_type'
p10897
S'bool'
p10898
sS'default'
p10899
S'1'
p10900
sS'name'
p10901
S'enable'
p10902
sS'required'
p10903
I00
sS'group_name'
p10904
S'Advanced'
p10905
sa(dp10906
S'description'
p10907
S'The initial condition function.\n'
p10908
sS'cpp_type'
p10909
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p10910
sS'default'
p10911
g3
sS'name'
p10912
S'function'
p10913
sS'required'
p10914
I01
sS'group_name'
p10915
Nsa(dp10916
S'description'
p10917
g3
sS'cpp_type'
p10918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10919
sS'default'
p10920
S'FunctionScalarIC'
p10921
sS'name'
p10922
S'type'
p10923
sS'required'
p10924
I00
sS'group_name'
p10925
Nsa(dp10926
S'description'
p10927
S'The variable this initial condition is supposed to provide values for.\n'
p10928
sS'cpp_type'
p10929
S'VariableName'
p10930
sS'default'
p10931
g3
sS'name'
p10932
S'variable'
p10933
sS'required'
p10934
I00
sS'group_name'
p10935
NsasS'name'
p10936
S'/AuxVariables/*/InitialCondition/<type>/FunctionScalarIC'
p10937
sa(dp10938
S'description'
p10939
S'Perturbed hexagonal polycrystal\n'
p10940
sS'subblocks'
p10941
NsS'parameters'
p10942
(lp10943
(dp10944
S'description'
p10945
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10946
sS'cpp_type'
p10947
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10948
sS'default'
p10949
g3
sS'name'
p10950
S'block'
p10951
sS'required'
p10952
I00
sS'group_name'
p10953
Nsa(dp10954
S'description'
p10955
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10956
sS'cpp_type'
p10957
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10958
sS'default'
p10959
g3
sS'name'
p10960
S'boundary'
p10961
sS'required'
p10962
I00
sS'group_name'
p10963
Nsa(dp10964
S'name'
p10965
S'coloring_algorithm'
p10966
sS'cpp_type'
p10967
S'MooseEnum'
p10968
sS'default'
p10969
S'legacy'
p10970
sS'description'
p10971
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p10972
sS'required'
p10973
I00
sS'options'
p10974
S'legacy bt jp power greedy'
p10975
sS'group_name'
p10976
Nsa(dp10977
S'description'
p10978
S'3D microstructure will be columnar in the z-direction?\n'
p10979
sS'cpp_type'
p10980
S'bool'
p10981
sS'default'
p10982
S'0'
p10983
sS'name'
p10984
S'columnar_3D'
p10985
sS'required'
p10986
I00
sS'group_name'
p10987
Nsa(dp10988
S'description'
p10989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10990
sS'cpp_type'
p10991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10992
sS'default'
p10993
g3
sS'name'
p10994
S'control_tags'
p10995
sS'required'
p10996
I00
sS'group_name'
p10997
S'Advanced'
p10998
sa(dp10999
S'description'
p11000
S'Set the enabled status of the MooseObject.\n'
p11001
sS'cpp_type'
p11002
S'bool'
p11003
sS'default'
p11004
S'1'
p11005
sS'name'
p11006
S'enable'
p11007
sS'required'
p11008
I00
sS'group_name'
p11009
S'Advanced'
p11010
sa(dp11011
S'description'
p11012
S'Number of grains being represented by the order parameters\n'
p11013
sS'cpp_type'
p11014
S'unsigned int'
p11015
sS'default'
p11016
g3
sS'name'
p11017
S'grain_num'
p11018
sS'required'
p11019
I01
sS'group_name'
p11020
Nsa(dp11021
S'description'
p11022
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11023
sS'cpp_type'
p11024
S'bool'
p11025
sS'default'
p11026
S'0'
p11027
sS'name'
p11028
S'ignore_uo_dependency'
p11029
sS'required'
p11030
I00
sS'group_name'
p11031
S'Advanced'
p11032
sa(dp11033
S'description'
p11034
S'The index for the current order parameter\n'
p11035
sS'cpp_type'
p11036
S'unsigned int'
p11037
sS'default'
p11038
g3
sS'name'
p11039
S'op_index'
p11040
sS'required'
p11041
I01
sS'group_name'
p11042
Nsa(dp11043
S'description'
p11044
S'Number of order parameters\n'
p11045
sS'cpp_type'
p11046
S'unsigned int'
p11047
sS'default'
p11048
g3
sS'name'
p11049
S'op_num'
p11050
sS'required'
p11051
I01
sS'group_name'
p11052
Nsa(dp11053
S'description'
p11054
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p11055
sS'cpp_type'
p11056
S'double'
p11057
sS'default'
p11058
S'0'
p11059
sS'name'
p11060
S'perturbation_percent'
p11061
sS'required'
p11062
I00
sS'group_name'
p11063
Nsa(dp11064
S'description'
p11065
S'The random seed\n'
p11066
sS'cpp_type'
p11067
S'unsigned int'
p11068
sS'default'
p11069
S'12444'
p11070
sS'name'
p11071
S'rand_seed'
p11072
sS'required'
p11073
I00
sS'group_name'
p11074
Nsa(dp11075
S'description'
p11076
g3
sS'cpp_type'
p11077
S'int'
p11078
sS'default'
p11079
S'1'
p11080
sS'name'
p11081
S'typ'
p11082
sS'required'
p11083
I00
sS'group_name'
p11084
Nsa(dp11085
S'description'
p11086
g3
sS'cpp_type'
p11087
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11088
sS'default'
p11089
S'HexPolycrystalIC'
p11090
sS'name'
p11091
S'type'
p11092
sS'required'
p11093
I00
sS'group_name'
p11094
Nsa(dp11095
S'description'
p11096
S'The variable this initial condition is supposed to provide values for.\n'
p11097
sS'cpp_type'
p11098
S'VariableName'
p11099
sS'default'
p11100
g3
sS'name'
p11101
S'variable'
p11102
sS'required'
p11103
I01
sS'group_name'
p11104
Nsa(dp11105
S'description'
p11106
S'Specifies offset of hexagon grid in x-direction\n'
p11107
sS'cpp_type'
p11108
S'double'
p11109
sS'default'
p11110
S'0.5'
p11111
sS'name'
p11112
S'x_offset'
p11113
sS'required'
p11114
I00
sS'group_name'
p11115
NsasS'name'
p11116
S'/AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC'
p11117
sa(dp11118
S'description'
p11119
S'Perturbed square lattice of smooth circles\n'
p11120
sS'subblocks'
p11121
NsS'parameters'
p11122
(lp11123
(dp11124
S'description'
p11125
S'in 3D, whether the objects are spheres or columns\n'
p11126
sS'cpp_type'
p11127
S'bool'
p11128
sS'default'
p11129
S'1'
p11130
sS'name'
p11131
S'3D_spheres'
p11132
sS'required'
p11133
I00
sS'group_name'
p11134
Nsa(dp11135
S'description'
p11136
S'Variation from central lattice position\n'
p11137
sS'cpp_type'
p11138
S'double'
p11139
sS'default'
p11140
g3
sS'name'
p11141
S'Rnd_variation'
p11142
sS'required'
p11143
I00
sS'group_name'
p11144
Nsa(dp11145
S'description'
p11146
S"Don't place any bubbles on the simulation cell boundaries\n"
p11147
sS'cpp_type'
p11148
S'bool'
p11149
sS'default'
p11150
S'1'
p11151
sS'name'
p11152
S'avoid_bounds'
p11153
sS'required'
p11154
I00
sS'group_name'
p11155
Nsa(dp11156
S'description'
p11157
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11158
sS'cpp_type'
p11159
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11160
sS'default'
p11161
g3
sS'name'
p11162
S'block'
p11163
sS'required'
p11164
I00
sS'group_name'
p11165
Nsa(dp11166
S'description'
p11167
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11168
sS'cpp_type'
p11169
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11170
sS'default'
p11171
g3
sS'name'
p11172
S'boundary'
p11173
sS'required'
p11174
I00
sS'group_name'
p11175
Nsa(dp11176
S'description'
p11177
S'Vector containing the number of bubbles along each side\n'
p11178
sS'cpp_type'
p11179
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p11180
sS'default'
p11181
g3
sS'name'
p11182
S'circles_per_side'
p11183
sS'required'
p11184
I01
sS'group_name'
p11185
Nsa(dp11186
S'description'
p11187
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11188
sS'cpp_type'
p11189
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11190
sS'default'
p11191
g3
sS'name'
p11192
S'control_tags'
p11193
sS'required'
p11194
I00
sS'group_name'
p11195
S'Advanced'
p11196
sa(dp11197
S'description'
p11198
S'Set the enabled status of the MooseObject.\n'
p11199
sS'cpp_type'
p11200
S'bool'
p11201
sS'default'
p11202
S'1'
p11203
sS'name'
p11204
S'enable'
p11205
sS'required'
p11206
I00
sS'group_name'
p11207
S'Advanced'
p11208
sa(dp11209
S'description'
p11210
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11211
sS'cpp_type'
p11212
S'bool'
p11213
sS'default'
p11214
S'0'
p11215
sS'name'
p11216
S'ignore_uo_dependency'
p11217
sS'required'
p11218
I00
sS'group_name'
p11219
S'Advanced'
p11220
sa(dp11221
S'description'
p11222
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11223
sS'cpp_type'
p11224
S'double'
p11225
sS'default'
p11226
S'0'
p11227
sS'name'
p11228
S'int_width'
p11229
sS'required'
p11230
I00
sS'group_name'
p11231
Nsa(dp11232
S'description'
p11233
S'The variable value inside the circle\n'
p11234
sS'cpp_type'
p11235
S'double'
p11236
sS'default'
p11237
g3
sS'name'
p11238
S'invalue'
p11239
sS'required'
p11240
I01
sS'group_name'
p11241
Nsa(dp11242
S'description'
p11243
S'The variable value outside the circle\n'
p11244
sS'cpp_type'
p11245
S'double'
p11246
sS'default'
p11247
g3
sS'name'
p11248
S'outvalue'
p11249
sS'required'
p11250
I01
sS'group_name'
p11251
Nsa(dp11252
S'description'
p11253
S'Variation from central lattice position\n'
p11254
sS'cpp_type'
p11255
S'double'
p11256
sS'default'
p11257
S'0'
p11258
sS'name'
p11259
S'pos_variation'
p11260
sS'required'
p11261
I00
sS'group_name'
p11262
Nsa(dp11263
S'description'
p11264
S'Mean radius value for the circels\n'
p11265
sS'cpp_type'
p11266
S'double'
p11267
sS'default'
p11268
g3
sS'name'
p11269
S'radius'
p11270
sS'required'
p11271
I01
sS'group_name'
p11272
Nsa(dp11273
S'description'
p11274
S'Plus or minus fraction of random variation in the bubble radius\n'
p11275
sS'cpp_type'
p11276
S'double'
p11277
sS'default'
p11278
S'0'
p11279
sS'name'
p11280
S'radius_variation'
p11281
sS'required'
p11282
I00
sS'group_name'
p11283
Nsa(dp11284
S'name'
p11285
S'radius_variation_type'
p11286
sS'cpp_type'
p11287
S'MooseEnum'
p11288
sS'default'
p11289
S'none'
p11290
sS'description'
p11291
S'Type of distribution that random circle radii will follow\n'
p11292
sS'required'
p11293
I00
sS'options'
p11294
S'uniform normal none'
p11295
sS'group_name'
p11296
Nsa(dp11297
S'description'
p11298
S'random seed\n'
p11299
sS'cpp_type'
p11300
S'unsigned int'
p11301
sS'default'
p11302
S'2000'
p11303
sS'name'
p11304
S'rand_seed'
p11305
sS'required'
p11306
I00
sS'group_name'
p11307
Nsa(dp11308
S'description'
p11309
g3
sS'cpp_type'
p11310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11311
sS'default'
p11312
S'LatticeSmoothCircleIC'
p11313
sS'name'
p11314
S'type'
p11315
sS'required'
p11316
I00
sS'group_name'
p11317
Nsa(dp11318
S'description'
p11319
S'The variable this initial condition is supposed to provide values for.\n'
p11320
sS'cpp_type'
p11321
S'VariableName'
p11322
sS'default'
p11323
g3
sS'name'
p11324
S'variable'
p11325
sS'required'
p11326
I01
sS'group_name'
p11327
Nsa(dp11328
S'description'
p11329
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p11330
sS'cpp_type'
p11331
S'bool'
p11332
sS'default'
p11333
S'0'
p11334
sS'name'
p11335
S'zero_gradient'
p11336
sS'required'
p11337
I00
sS'group_name'
p11338
NsasS'name'
p11339
S'/AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p11340
sa(dp11341
S'description'
p11342
S'Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n'
p11343
sS'subblocks'
p11344
NsS'parameters'
p11345
(lp11346
(dp11347
S'description'
p11348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11349
sS'cpp_type'
p11350
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11351
sS'default'
p11352
g3
sS'name'
p11353
S'block'
p11354
sS'required'
p11355
I00
sS'group_name'
p11356
Nsa(dp11357
S'description'
p11358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11359
sS'cpp_type'
p11360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11361
sS'default'
p11362
g3
sS'name'
p11363
S'boundary'
p11364
sS'required'
p11365
I00
sS'group_name'
p11366
Nsa(dp11367
S'description'
p11368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11369
sS'cpp_type'
p11370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11371
sS'default'
p11372
g3
sS'name'
p11373
S'control_tags'
p11374
sS'required'
p11375
I00
sS'group_name'
p11376
S'Advanced'
p11377
sa(dp11378
S'description'
p11379
S'The corner coordinates boxes\n'
p11380
sS'cpp_type'
p11381
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p11382
sS'default'
p11383
g3
sS'name'
p11384
S'corners'
p11385
sS'required'
p11386
I01
sS'group_name'
p11387
Nsa(dp11388
S'description'
p11389
S'Set the enabled status of the MooseObject.\n'
p11390
sS'cpp_type'
p11391
S'bool'
p11392
sS'default'
p11393
S'1'
p11394
sS'name'
p11395
S'enable'
p11396
sS'required'
p11397
I00
sS'group_name'
p11398
S'Advanced'
p11399
sa(dp11400
S'description'
p11401
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11402
sS'cpp_type'
p11403
S'bool'
p11404
sS'default'
p11405
S'0'
p11406
sS'name'
p11407
S'ignore_uo_dependency'
p11408
sS'required'
p11409
I00
sS'group_name'
p11410
S'Advanced'
p11411
sa(dp11412
S'description'
p11413
S'The value of the variable inside each box (one value per box or a single value for all boxes)\n'
p11414
sS'cpp_type'
p11415
S'std::vector<double, std::allocator<double> >'
p11416
sS'default'
p11417
g3
sS'name'
p11418
S'inside'
p11419
sS'required'
p11420
I01
sS'group_name'
p11421
Nsa(dp11422
S'description'
p11423
S'The coordinates of the opposite corners of the boxes\n'
p11424
sS'cpp_type'
p11425
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p11426
sS'default'
p11427
g3
sS'name'
p11428
S'opposite_corners'
p11429
sS'required'
p11430
I01
sS'group_name'
p11431
Nsa(dp11432
S'description'
p11433
S'The value of the variable outside the box\n'
p11434
sS'cpp_type'
p11435
S'double'
p11436
sS'default'
p11437
S'0'
p11438
sS'name'
p11439
S'outside'
p11440
sS'required'
p11441
I00
sS'group_name'
p11442
Nsa(dp11443
S'description'
p11444
g3
sS'cpp_type'
p11445
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11446
sS'default'
p11447
S'MultiBoundingBoxIC'
p11448
sS'name'
p11449
S'type'
p11450
sS'required'
p11451
I00
sS'group_name'
p11452
Nsa(dp11453
S'description'
p11454
S'The variable this initial condition is supposed to provide values for.\n'
p11455
sS'cpp_type'
p11456
S'VariableName'
p11457
sS'default'
p11458
g3
sS'name'
p11459
S'variable'
p11460
sS'required'
p11461
I01
sS'group_name'
p11462
NsasS'name'
p11463
S'/AuxVariables/*/InitialCondition/<type>/MultiBoundingBoxIC'
p11464
sa(dp11465
S'description'
p11466
S'Random distribution of smooth circles with given minimum spacing\n'
p11467
sS'subblocks'
p11468
NsS'parameters'
p11469
(lp11470
(dp11471
S'description'
p11472
S'in 3D, whether the objects are spheres or columns\n'
p11473
sS'cpp_type'
p11474
S'bool'
p11475
sS'default'
p11476
S'1'
p11477
sS'name'
p11478
S'3D_spheres'
p11479
sS'required'
p11480
I00
sS'group_name'
p11481
Nsa(dp11482
S'description'
p11483
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11484
sS'cpp_type'
p11485
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11486
sS'default'
p11487
g3
sS'name'
p11488
S'block'
p11489
sS'required'
p11490
I00
sS'group_name'
p11491
Nsa(dp11492
S'description'
p11493
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11494
sS'cpp_type'
p11495
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11496
sS'default'
p11497
g3
sS'name'
p11498
S'boundary'
p11499
sS'required'
p11500
I00
sS'group_name'
p11501
Nsa(dp11502
S'description'
p11503
S'minimum spacing of bubbles, measured from center to center\n'
p11504
sS'cpp_type'
p11505
S'double'
p11506
sS'default'
p11507
g3
sS'name'
p11508
S'bubspac'
p11509
sS'required'
p11510
I01
sS'group_name'
p11511
Nsa(dp11512
S'description'
p11513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11514
sS'cpp_type'
p11515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11516
sS'default'
p11517
g3
sS'name'
p11518
S'control_tags'
p11519
sS'required'
p11520
I00
sS'group_name'
p11521
S'Advanced'
p11522
sa(dp11523
S'description'
p11524
S'Set the enabled status of the MooseObject.\n'
p11525
sS'cpp_type'
p11526
S'bool'
p11527
sS'default'
p11528
S'1'
p11529
sS'name'
p11530
S'enable'
p11531
sS'required'
p11532
I00
sS'group_name'
p11533
S'Advanced'
p11534
sa(dp11535
S'description'
p11536
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11537
sS'cpp_type'
p11538
S'bool'
p11539
sS'default'
p11540
S'0'
p11541
sS'name'
p11542
S'ignore_uo_dependency'
p11543
sS'required'
p11544
I00
sS'group_name'
p11545
S'Advanced'
p11546
sa(dp11547
S'description'
p11548
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11549
sS'cpp_type'
p11550
S'double'
p11551
sS'default'
p11552
S'0'
p11553
sS'name'
p11554
S'int_width'
p11555
sS'required'
p11556
I00
sS'group_name'
p11557
Nsa(dp11558
S'description'
p11559
S'The variable value inside the circle\n'
p11560
sS'cpp_type'
p11561
S'double'
p11562
sS'default'
p11563
g3
sS'name'
p11564
S'invalue'
p11565
sS'required'
p11566
I01
sS'group_name'
p11567
Nsa(dp11568
S'description'
p11569
S'The number of bubbles to place\n'
p11570
sS'cpp_type'
p11571
S'unsigned int'
p11572
sS'default'
p11573
g3
sS'name'
p11574
S'numbub'
p11575
sS'required'
p11576
I01
sS'group_name'
p11577
Nsa(dp11578
S'description'
p11579
S'The number of tries\n'
p11580
sS'cpp_type'
p11581
S'unsigned int'
p11582
sS'default'
p11583
S'1000'
p11584
sS'name'
p11585
S'numtries'
p11586
sS'required'
p11587
I00
sS'group_name'
p11588
Nsa(dp11589
S'description'
p11590
S'The variable value outside the circle\n'
p11591
sS'cpp_type'
p11592
S'double'
p11593
sS'default'
p11594
g3
sS'name'
p11595
S'outvalue'
p11596
sS'required'
p11597
I01
sS'group_name'
p11598
Nsa(dp11599
S'description'
p11600
S'Mean radius value for the circles\n'
p11601
sS'cpp_type'
p11602
S'double'
p11603
sS'default'
p11604
g3
sS'name'
p11605
S'radius'
p11606
sS'required'
p11607
I01
sS'group_name'
p11608
Nsa(dp11609
S'description'
p11610
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p11611
sS'cpp_type'
p11612
S'double'
p11613
sS'default'
p11614
S'0'
p11615
sS'name'
p11616
S'radius_variation'
p11617
sS'required'
p11618
I00
sS'group_name'
p11619
Nsa(dp11620
S'name'
p11621
S'radius_variation_type'
p11622
sS'cpp_type'
p11623
S'MooseEnum'
p11624
sS'default'
p11625
S'none'
p11626
sS'description'
p11627
S'Type of distribution that random circle radii will follow\n'
p11628
sS'required'
p11629
I00
sS'options'
p11630
S'uniform normal none'
p11631
sS'group_name'
p11632
Nsa(dp11633
S'description'
p11634
S'Seed value for the random number generator\n'
p11635
sS'cpp_type'
p11636
S'unsigned int'
p11637
sS'default'
p11638
S'12345'
p11639
sS'name'
p11640
S'rand_seed'
p11641
sS'required'
p11642
I00
sS'group_name'
p11643
Nsa(dp11644
S'description'
p11645
g3
sS'cpp_type'
p11646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11647
sS'default'
p11648
S'MultiSmoothCircleIC'
p11649
sS'name'
p11650
S'type'
p11651
sS'required'
p11652
I00
sS'group_name'
p11653
Nsa(dp11654
S'description'
p11655
S'The variable this initial condition is supposed to provide values for.\n'
p11656
sS'cpp_type'
p11657
S'VariableName'
p11658
sS'default'
p11659
g3
sS'name'
p11660
S'variable'
p11661
sS'required'
p11662
I01
sS'group_name'
p11663
Nsa(dp11664
S'description'
p11665
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p11666
sS'cpp_type'
p11667
S'bool'
p11668
sS'default'
p11669
S'0'
p11670
sS'name'
p11671
S'zero_gradient'
p11672
sS'required'
p11673
I00
sS'group_name'
p11674
NsasS'name'
p11675
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p11676
sa(dp11677
S'description'
p11678
S'Random distribution of smooth ellipse with given minimum spacing\n'
p11679
sS'subblocks'
p11680
NsS'parameters'
p11681
(lp11682
(dp11683
S'description'
p11684
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11685
sS'cpp_type'
p11686
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11687
sS'default'
p11688
g3
sS'name'
p11689
S'block'
p11690
sS'required'
p11691
I00
sS'group_name'
p11692
Nsa(dp11693
S'description'
p11694
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11695
sS'cpp_type'
p11696
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11697
sS'default'
p11698
g3
sS'name'
p11699
S'boundary'
p11700
sS'required'
p11701
I00
sS'group_name'
p11702
Nsa(dp11703
S'description'
p11704
S'Vector of the minimum spacing of bubbles of one type, measured from center to center\n'
p11705
sS'cpp_type'
p11706
S'std::vector<double, std::allocator<double> >'
p11707
sS'default'
p11708
g3
sS'name'
p11709
S'bubspac'
p11710
sS'required'
p11711
I01
sS'group_name'
p11712
Nsa(dp11713
S'description'
p11714
S'Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n'
p11715
sS'cpp_type'
p11716
S'bool'
p11717
sS'default'
p11718
S'0'
p11719
sS'name'
p11720
S'check_extremes'
p11721
sS'required'
p11722
I00
sS'group_name'
p11723
Nsa(dp11724
S'description'
p11725
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11726
sS'cpp_type'
p11727
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11728
sS'default'
p11729
g3
sS'name'
p11730
S'control_tags'
p11731
sS'required'
p11732
I00
sS'group_name'
p11733
S'Advanced'
p11734
sa(dp11735
S'description'
p11736
S'Set the enabled status of the MooseObject.\n'
p11737
sS'cpp_type'
p11738
S'bool'
p11739
sS'default'
p11740
S'1'
p11741
sS'name'
p11742
S'enable'
p11743
sS'required'
p11744
I00
sS'group_name'
p11745
S'Advanced'
p11746
sa(dp11747
S'description'
p11748
S'Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n'
p11749
sS'cpp_type'
p11750
S'std::vector<double, std::allocator<double> >'
p11751
sS'default'
p11752
g3
sS'name'
p11753
S'exponent'
p11754
sS'required'
p11755
I00
sS'group_name'
p11756
Nsa(dp11757
S'description'
p11758
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p11759
sS'cpp_type'
p11760
S'bool'
p11761
sS'default'
p11762
S'0'
p11763
sS'name'
p11764
S'ignore_uo_dependency'
p11765
sS'required'
p11766
I00
sS'group_name'
p11767
S'Advanced'
p11768
sa(dp11769
S'description'
p11770
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11771
sS'cpp_type'
p11772
S'double'
p11773
sS'default'
p11774
S'0'
p11775
sS'name'
p11776
S'int_width'
p11777
sS'required'
p11778
I00
sS'group_name'
p11779
Nsa(dp11780
S'description'
p11781
S'The variable value inside the superellipsoid\n'
p11782
sS'cpp_type'
p11783
S'double'
p11784
sS'default'
p11785
g3
sS'name'
p11786
S'invalue'
p11787
sS'required'
p11788
I01
sS'group_name'
p11789
Nsa(dp11790
S'description'
p11791
S'The number of tries\n'
p11792
sS'cpp_type'
p11793
S'unsigned int'
p11794
sS'default'
p11795
S'1000'
p11796
sS'name'
p11797
S'max_num_tries'
p11798
sS'required'
p11799
I00
sS'group_name'
p11800
Nsa(dp11801
S'description'
p11802
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p11803
sS'cpp_type'
p11804
S'double'
p11805
sS'default'
p11806
g3
sS'name'
p11807
S'nestedvalue'
p11808
sS'required'
p11809
I00
sS'group_name'
p11810
Nsa(dp11811
S'description'
p11812
S'Vector of the number of bubbles to place\n'
p11813
sS'cpp_type'
p11814
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p11815
sS'default'
p11816
g3
sS'name'
p11817
S'numbub'
p11818
sS'required'
p11819
I01
sS'group_name'
p11820
Nsa(dp11821
S'description'
p11822
S'The variable value outside the superellipsoid\n'
p11823
sS'cpp_type'
p11824
S'double'
p11825
sS'default'
p11826
g3
sS'name'
p11827
S'outvalue'
p11828
sS'required'
p11829
I01
sS'group_name'
p11830
Nsa(dp11831
S'description'
p11832
S'Check all Superellipsoid centers for overlap with other Superellipsoids.\n'
p11833
sS'cpp_type'
p11834
S'bool'
p11835
sS'default'
p11836
S'0'
p11837
sS'name'
p11838
S'prevent_overlap'
p11839
sS'required'
p11840
I00
sS'group_name'
p11841
Nsa(dp11842
S'description'
p11843
S'Seed value for the random number generator\n'
p11844
sS'cpp_type'
p11845
S'unsigned int'
p11846
sS'default'
p11847
S'12345'
p11848
sS'name'
p11849
S'rand_seed'
p11850
sS'required'
p11851
I00
sS'group_name'
p11852
Nsa(dp11853
S'description'
p11854
S'Vector of mean semiaxis values in the x direction for the ellipse\n'
p11855
sS'cpp_type'
p11856
S'std::vector<double, std::allocator<double> >'
p11857
sS'default'
p11858
g3
sS'name'
p11859
S'semiaxis_a'
p11860
sS'required'
p11861
I01
sS'group_name'
p11862
Nsa(dp11863
S'description'
p11864
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n'
p11865
sS'cpp_type'
p11866
S'std::vector<double, std::allocator<double> >'
p11867
sS'default'
p11868
g3
sS'name'
p11869
S'semiaxis_a_variation'
p11870
sS'required'
p11871
I00
sS'group_name'
p11872
Nsa(dp11873
S'description'
p11874
S'Vector of mean semiaxis values in the y direction for the ellipse\n'
p11875
sS'cpp_type'
p11876
S'std::vector<double, std::allocator<double> >'
p11877
sS'default'
p11878
g3
sS'name'
p11879
S'semiaxis_b'
p11880
sS'required'
p11881
I01
sS'group_name'
p11882
Nsa(dp11883
S'description'
p11884
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n'
p11885
sS'cpp_type'
p11886
S'std::vector<double, std::allocator<double> >'
p11887
sS'default'
p11888
g3
sS'name'
p11889
S'semiaxis_b_variation'
p11890
sS'required'
p11891
I00
sS'group_name'
p11892
Nsa(dp11893
S'description'
p11894
S'Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n'
p11895
sS'cpp_type'
p11896
S'std::vector<double, std::allocator<double> >'
p11897
sS'default'
p11898
g3
sS'name'
p11899
S'semiaxis_c'
p11900
sS'required'
p11901
I01
sS'group_name'
p11902
Nsa(dp11903
S'description'
p11904
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n'
p11905
sS'cpp_type'
p11906
S'std::vector<double, std::allocator<double> >'
p11907
sS'default'
p11908
g3
sS'name'
p11909
S'semiaxis_c_variation'
p11910
sS'required'
p11911
I00
sS'group_name'
p11912
Nsa(dp11913
S'name'
p11914
S'semiaxis_variation_type'
p11915
sS'cpp_type'
p11916
S'MooseEnum'
p11917
sS'default'
p11918
S'none'
p11919
sS'description'
p11920
S'Type of distribution that random superellipsoid semiaxes will follow\n'
p11921
sS'required'
p11922
I00
sS'options'
p11923
S'uniform normal none'
p11924
sS'group_name'
p11925
Nsa(dp11926
S'description'
p11927
g3
sS'cpp_type'
p11928
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11929
sS'default'
p11930
S'MultiSmoothSuperellipsoidIC'
p11931
sS'name'
p11932
S'type'
p11933
sS'required'
p11934
I00
sS'group_name'
p11935
Nsa(dp11936
S'description'
p11937
S'The variable this initial condition is supposed to provide values for.\n'
p11938
sS'cpp_type'
p11939
S'VariableName'
p11940
sS'default'
p11941
g3
sS'name'
p11942
S'variable'
p11943
sS'required'
p11944
I01
sS'group_name'
p11945
Nsa(dp11946
S'description'
p11947
S'If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n'
p11948
sS'cpp_type'
p11949
S'bool'
p11950
sS'default'
p11951
S'1'
p11952
sS'name'
p11953
S'vary_axes_independently'
p11954
sS'required'
p11955
I00
sS'group_name'
p11956
Nsa(dp11957
S'description'
p11958
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p11959
sS'cpp_type'
p11960
S'bool'
p11961
sS'default'
p11962
S'0'
p11963
sS'name'
p11964
S'zero_gradient'
p11965
sS'required'
p11966
I00
sS'group_name'
p11967
NsasS'name'
p11968
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothSuperellipsoidIC'
p11969
sa(dp11970
S'description'
p11971
g3
sS'subblocks'
p11972
NsS'parameters'
p11973
(lp11974
(dp11975
S'description'
p11976
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11977
sS'cpp_type'
p11978
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11979
sS'default'
p11980
g3
sS'name'
p11981
S'block'
p11982
sS'required'
p11983
I00
sS'group_name'
p11984
Nsa(dp11985
S'description'
p11986
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11987
sS'cpp_type'
p11988
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11989
sS'default'
p11990
g3
sS'name'
p11991
S'boundary'
p11992
sS'required'
p11993
I00
sS'group_name'
p11994
Nsa(dp11995
S'description'
p11996
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11997
sS'cpp_type'
p11998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11999
sS'default'
p12000
g3
sS'name'
p12001
S'control_tags'
p12002
sS'required'
p12003
I00
sS'group_name'
p12004
S'Advanced'
p12005
sa(dp12006
S'name'
p12007
S'crystal_structure'
p12008
sS'cpp_type'
p12009
S'MooseEnum'
p12010
sS'default'
p12011
g3
sS'description'
p12012
S'The type of crystal structure\n'
p12013
sS'required'
p12014
I00
sS'options'
p12015
S'FCC BCC'
p12016
sS'group_name'
p12017
Nsa(dp12018
S'description'
p12019
S'Set the enabled status of the MooseObject.\n'
p12020
sS'cpp_type'
p12021
S'bool'
p12022
sS'default'
p12023
S'1'
p12024
sS'name'
p12025
S'enable'
p12026
sS'required'
p12027
I00
sS'group_name'
p12028
S'Advanced'
p12029
sa(dp12030
S'description'
p12031
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12032
sS'cpp_type'
p12033
S'bool'
p12034
sS'default'
p12035
S'0'
p12036
sS'name'
p12037
S'ignore_uo_dependency'
p12038
sS'required'
p12039
I00
sS'group_name'
p12040
S'Advanced'
p12041
sa(dp12042
S'description'
p12043
S'Value inside sinusoids\n'
p12044
sS'cpp_type'
p12045
S'double'
p12046
sS'default'
p12047
S'1'
p12048
sS'name'
p12049
S'inside'
p12050
sS'required'
p12051
I00
sS'group_name'
p12052
Nsa(dp12053
S'description'
p12054
S'The lattice constant off the crystal structure\n'
p12055
sS'cpp_type'
p12056
S'double'
p12057
sS'default'
p12058
g3
sS'name'
p12059
S'lc'
p12060
sS'required'
p12061
I01
sS'group_name'
p12062
Nsa(dp12063
S'description'
p12064
S'Upper bound of the randomly generated values\n'
p12065
sS'cpp_type'
p12066
S'double'
p12067
sS'default'
p12068
S'1'
p12069
sS'name'
p12070
S'max'
p12071
sS'required'
p12072
I00
sS'group_name'
p12073
Nsa(dp12074
S'description'
p12075
S'Lower bound of the randomly generated values\n'
p12076
sS'cpp_type'
p12077
S'double'
p12078
sS'default'
p12079
S'0'
p12080
sS'name'
p12081
S'min'
p12082
sS'required'
p12083
I00
sS'group_name'
p12084
Nsa(dp12085
S'description'
p12086
S'Value outside sinusoids\n'
p12087
sS'cpp_type'
p12088
S'double'
p12089
sS'default'
p12090
S'0'
p12091
sS'name'
p12092
S'outside'
p12093
sS'required'
p12094
I00
sS'group_name'
p12095
Nsa(dp12096
S'description'
p12097
S'Seed value for the random number generator\n'
p12098
sS'cpp_type'
p12099
S'unsigned int'
p12100
sS'default'
p12101
S'0'
p12102
sS'name'
p12103
S'seed'
p12104
sS'required'
p12105
I00
sS'group_name'
p12106
Nsa(dp12107
S'description'
p12108
g3
sS'cpp_type'
p12109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12110
sS'default'
p12111
S'PFCFreezingIC'
p12112
sS'name'
p12113
S'type'
p12114
sS'required'
p12115
I00
sS'group_name'
p12116
Nsa(dp12117
S'description'
p12118
S'The variable this initial condition is supposed to provide values for.\n'
p12119
sS'cpp_type'
p12120
S'VariableName'
p12121
sS'default'
p12122
g3
sS'name'
p12123
S'variable'
p12124
sS'required'
p12125
I01
sS'group_name'
p12126
Nsa(dp12127
S'description'
p12128
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p12129
sS'cpp_type'
p12130
S'double'
p12131
sS'default'
p12132
g3
sS'name'
p12133
S'x1'
p12134
sS'required'
p12135
I01
sS'group_name'
p12136
Nsa(dp12137
S'description'
p12138
S'The x coordinate of the upper right-hand corner of the box\n'
p12139
sS'cpp_type'
p12140
S'double'
p12141
sS'default'
p12142
g3
sS'name'
p12143
S'x2'
p12144
sS'required'
p12145
I01
sS'group_name'
p12146
Nsa(dp12147
S'description'
p12148
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p12149
sS'cpp_type'
p12150
S'double'
p12151
sS'default'
p12152
g3
sS'name'
p12153
S'y1'
p12154
sS'required'
p12155
I01
sS'group_name'
p12156
Nsa(dp12157
S'description'
p12158
S'The y coordinate of the upper right-hand corner of the box\n'
p12159
sS'cpp_type'
p12160
S'double'
p12161
sS'default'
p12162
g3
sS'name'
p12163
S'y2'
p12164
sS'required'
p12165
I01
sS'group_name'
p12166
Nsa(dp12167
S'description'
p12168
S'The z coordinate of the lower left-hand corner of the box\n'
p12169
sS'cpp_type'
p12170
S'double'
p12171
sS'default'
p12172
S'0'
p12173
sS'name'
p12174
S'z1'
p12175
sS'required'
p12176
I00
sS'group_name'
p12177
Nsa(dp12178
S'description'
p12179
S'The z coordinate of the upper right-hand corner of the box\n'
p12180
sS'cpp_type'
p12181
S'double'
p12182
sS'default'
p12183
S'0'
p12184
sS'name'
p12185
S'z2'
p12186
sS'required'
p12187
I00
sS'group_name'
p12188
NsasS'name'
p12189
S'/AuxVariables/*/InitialCondition/<type>/PFCFreezingIC'
p12190
sa(dp12191
S'description'
p12192
S'Random initial condition for a polycrystalline material\n'
p12193
sS'subblocks'
p12194
NsS'parameters'
p12195
(lp12196
(dp12197
S'description'
p12198
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12199
sS'cpp_type'
p12200
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12201
sS'default'
p12202
g3
sS'name'
p12203
S'block'
p12204
sS'required'
p12205
I00
sS'group_name'
p12206
Nsa(dp12207
S'description'
p12208
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12209
sS'cpp_type'
p12210
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12211
sS'default'
p12212
g3
sS'name'
p12213
S'boundary'
p12214
sS'required'
p12215
I00
sS'group_name'
p12216
Nsa(dp12217
S'description'
p12218
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12219
sS'cpp_type'
p12220
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12221
sS'default'
p12222
g3
sS'name'
p12223
S'control_tags'
p12224
sS'required'
p12225
I00
sS'group_name'
p12226
S'Advanced'
p12227
sa(dp12228
S'description'
p12229
S'Set the enabled status of the MooseObject.\n'
p12230
sS'cpp_type'
p12231
S'bool'
p12232
sS'default'
p12233
S'1'
p12234
sS'name'
p12235
S'enable'
p12236
sS'required'
p12237
I00
sS'group_name'
p12238
S'Advanced'
p12239
sa(dp12240
S'description'
p12241
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12242
sS'cpp_type'
p12243
S'bool'
p12244
sS'default'
p12245
S'0'
p12246
sS'name'
p12247
S'ignore_uo_dependency'
p12248
sS'required'
p12249
I00
sS'group_name'
p12250
S'Advanced'
p12251
sa(dp12252
S'description'
p12253
S'The index for the current order parameter\n'
p12254
sS'cpp_type'
p12255
S'unsigned int'
p12256
sS'default'
p12257
g3
sS'name'
p12258
S'op_index'
p12259
sS'required'
p12260
I01
sS'group_name'
p12261
Nsa(dp12262
S'description'
p12263
S'Number of order parameters\n'
p12264
sS'cpp_type'
p12265
S'unsigned int'
p12266
sS'default'
p12267
g3
sS'name'
p12268
S'op_num'
p12269
sS'required'
p12270
I01
sS'group_name'
p12271
Nsa(dp12272
S'description'
p12273
S'Type of random grain structure\n'
p12274
sS'cpp_type'
p12275
S'unsigned int'
p12276
sS'default'
p12277
g3
sS'name'
p12278
S'typ'
p12279
sS'required'
p12280
I01
sS'group_name'
p12281
Nsa(dp12282
S'description'
p12283
g3
sS'cpp_type'
p12284
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12285
sS'default'
p12286
S'PolycrystalRandomIC'
p12287
sS'name'
p12288
S'type'
p12289
sS'required'
p12290
I00
sS'group_name'
p12291
Nsa(dp12292
S'description'
p12293
S'The variable this initial condition is supposed to provide values for.\n'
p12294
sS'cpp_type'
p12295
S'VariableName'
p12296
sS'default'
p12297
g3
sS'name'
p12298
S'variable'
p12299
sS'required'
p12300
I01
sS'group_name'
p12301
NsasS'name'
p12302
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC'
p12303
sa(dp12304
S'description'
p12305
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p12306
sS'subblocks'
p12307
NsS'parameters'
p12308
(lp12309
(dp12310
S'description'
p12311
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12312
sS'cpp_type'
p12313
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12314
sS'default'
p12315
g3
sS'name'
p12316
S'block'
p12317
sS'required'
p12318
I00
sS'group_name'
p12319
Nsa(dp12320
S'description'
p12321
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12322
sS'cpp_type'
p12323
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12324
sS'default'
p12325
g3
sS'name'
p12326
S'boundary'
p12327
sS'required'
p12328
I00
sS'group_name'
p12329
Nsa(dp12330
S'name'
p12331
S'coloring_algorithm'
p12332
sS'cpp_type'
p12333
S'MooseEnum'
p12334
sS'default'
p12335
S'legacy'
p12336
sS'description'
p12337
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p12338
sS'required'
p12339
I00
sS'options'
p12340
S'legacy bt jp power greedy'
p12341
sS'group_name'
p12342
Nsa(dp12343
S'description'
p12344
S'3D microstructure will be columnar in the z-direction?\n'
p12345
sS'cpp_type'
p12346
S'bool'
p12347
sS'default'
p12348
S'0'
p12349
sS'name'
p12350
S'columnar_3D'
p12351
sS'required'
p12352
I00
sS'group_name'
p12353
Nsa(dp12354
S'description'
p12355
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12356
sS'cpp_type'
p12357
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12358
sS'default'
p12359
g3
sS'name'
p12360
S'control_tags'
p12361
sS'required'
p12362
I00
sS'group_name'
p12363
S'Advanced'
p12364
sa(dp12365
S'description'
p12366
S'Set the enabled status of the MooseObject.\n'
p12367
sS'cpp_type'
p12368
S'bool'
p12369
sS'default'
p12370
S'1'
p12371
sS'name'
p12372
S'enable'
p12373
sS'required'
p12374
I00
sS'group_name'
p12375
S'Advanced'
p12376
sa(dp12377
S'description'
p12378
S'Number of grains being represented by the order parameters\n'
p12379
sS'cpp_type'
p12380
S'unsigned int'
p12381
sS'default'
p12382
g3
sS'name'
p12383
S'grain_num'
p12384
sS'required'
p12385
I01
sS'group_name'
p12386
Nsa(dp12387
S'description'
p12388
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12389
sS'cpp_type'
p12390
S'bool'
p12391
sS'default'
p12392
S'0'
p12393
sS'name'
p12394
S'ignore_uo_dependency'
p12395
sS'required'
p12396
I00
sS'group_name'
p12397
S'Advanced'
p12398
sa(dp12399
S'description'
p12400
S'The index for the current order parameter\n'
p12401
sS'cpp_type'
p12402
S'unsigned int'
p12403
sS'default'
p12404
g3
sS'name'
p12405
S'op_index'
p12406
sS'required'
p12407
I01
sS'group_name'
p12408
Nsa(dp12409
S'description'
p12410
S'Number of order parameters\n'
p12411
sS'cpp_type'
p12412
S'unsigned int'
p12413
sS'default'
p12414
g3
sS'name'
p12415
S'op_num'
p12416
sS'required'
p12417
I01
sS'group_name'
p12418
Nsa(dp12419
S'description'
p12420
S'The random seed\n'
p12421
sS'cpp_type'
p12422
S'unsigned int'
p12423
sS'default'
p12424
S'12444'
p12425
sS'name'
p12426
S'rand_seed'
p12427
sS'required'
p12428
I00
sS'group_name'
p12429
Nsa(dp12430
S'description'
p12431
g3
sS'cpp_type'
p12432
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12433
sS'default'
p12434
S'PolycrystalReducedIC'
p12435
sS'name'
p12436
S'type'
p12437
sS'required'
p12438
I00
sS'group_name'
p12439
Nsa(dp12440
S'description'
p12441
S'The variable this initial condition is supposed to provide values for.\n'
p12442
sS'cpp_type'
p12443
S'VariableName'
p12444
sS'default'
p12445
g3
sS'name'
p12446
S'variable'
p12447
sS'required'
p12448
I01
sS'group_name'
p12449
NsasS'name'
p12450
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC'
p12451
sa(dp12452
S'description'
p12453
S'Random distribution of smooth circles with given minimum spacing\n'
p12454
sS'subblocks'
p12455
NsS'parameters'
p12456
(lp12457
(dp12458
S'description'
p12459
S'in 3D, whether the objects are spheres or columns\n'
p12460
sS'cpp_type'
p12461
S'bool'
p12462
sS'default'
p12463
S'1'
p12464
sS'name'
p12465
S'3D_spheres'
p12466
sS'required'
p12467
I00
sS'group_name'
p12468
Nsa(dp12469
S'description'
p12470
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12471
sS'cpp_type'
p12472
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12473
sS'default'
p12474
g3
sS'name'
p12475
S'block'
p12476
sS'required'
p12477
I00
sS'group_name'
p12478
Nsa(dp12479
S'description'
p12480
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12481
sS'cpp_type'
p12482
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12483
sS'default'
p12484
g3
sS'name'
p12485
S'boundary'
p12486
sS'required'
p12487
I00
sS'group_name'
p12488
Nsa(dp12489
S'description'
p12490
S'minimum spacing of bubbles, measured from center to center\n'
p12491
sS'cpp_type'
p12492
S'double'
p12493
sS'default'
p12494
g3
sS'name'
p12495
S'bubspac'
p12496
sS'required'
p12497
I01
sS'group_name'
p12498
Nsa(dp12499
S'description'
p12500
S'3D microstructure will be columnar in the z-direction?\n'
p12501
sS'cpp_type'
p12502
S'bool'
p12503
sS'default'
p12504
S'0'
p12505
sS'name'
p12506
S'columnar_3D'
p12507
sS'required'
p12508
I00
sS'group_name'
p12509
Nsa(dp12510
S'description'
p12511
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12512
sS'cpp_type'
p12513
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12514
sS'default'
p12515
g3
sS'name'
p12516
S'control_tags'
p12517
sS'required'
p12518
I00
sS'group_name'
p12519
S'Advanced'
p12520
sa(dp12521
S'description'
p12522
S'Set the enabled status of the MooseObject.\n'
p12523
sS'cpp_type'
p12524
S'bool'
p12525
sS'default'
p12526
S'1'
p12527
sS'name'
p12528
S'enable'
p12529
sS'required'
p12530
I00
sS'group_name'
p12531
S'Advanced'
p12532
sa(dp12533
S'description'
p12534
S'Number of grains being represented by the order parameters\n'
p12535
sS'cpp_type'
p12536
S'unsigned int'
p12537
sS'default'
p12538
g3
sS'name'
p12539
S'grain_num'
p12540
sS'required'
p12541
I01
sS'group_name'
p12542
Nsa(dp12543
S'description'
p12544
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12545
sS'cpp_type'
p12546
S'bool'
p12547
sS'default'
p12548
S'0'
p12549
sS'name'
p12550
S'ignore_uo_dependency'
p12551
sS'required'
p12552
I00
sS'group_name'
p12553
S'Advanced'
p12554
sa(dp12555
S'description'
p12556
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p12557
sS'cpp_type'
p12558
S'double'
p12559
sS'default'
p12560
S'0'
p12561
sS'name'
p12562
S'int_width'
p12563
sS'required'
p12564
I00
sS'group_name'
p12565
Nsa(dp12566
S'description'
p12567
S'The variable value inside the circle\n'
p12568
sS'cpp_type'
p12569
S'double'
p12570
sS'default'
p12571
g3
sS'name'
p12572
S'invalue'
p12573
sS'required'
p12574
I01
sS'group_name'
p12575
Nsa(dp12576
S'description'
p12577
S'The number of bubbles to place\n'
p12578
sS'cpp_type'
p12579
S'unsigned int'
p12580
sS'default'
p12581
g3
sS'name'
p12582
S'numbub'
p12583
sS'required'
p12584
I01
sS'group_name'
p12585
Nsa(dp12586
S'description'
p12587
S'The number of tries\n'
p12588
sS'cpp_type'
p12589
S'unsigned int'
p12590
sS'default'
p12591
S'1000'
p12592
sS'name'
p12593
S'numtries'
p12594
sS'required'
p12595
I00
sS'group_name'
p12596
Nsa(dp12597
S'description'
p12598
S'The index for the current order parameter, not needed if structure_type = voids\n'
p12599
sS'cpp_type'
p12600
S'unsigned int'
p12601
sS'default'
p12602
S'0'
p12603
sS'name'
p12604
S'op_index'
p12605
sS'required'
p12606
I00
sS'group_name'
p12607
Nsa(dp12608
S'description'
p12609
S'Number of order parameters\n'
p12610
sS'cpp_type'
p12611
S'unsigned int'
p12612
sS'default'
p12613
g3
sS'name'
p12614
S'op_num'
p12615
sS'required'
p12616
I01
sS'group_name'
p12617
Nsa(dp12618
S'description'
p12619
S'The variable value outside the circle\n'
p12620
sS'cpp_type'
p12621
S'double'
p12622
sS'default'
p12623
g3
sS'name'
p12624
S'outvalue'
p12625
sS'required'
p12626
I01
sS'group_name'
p12627
Nsa(dp12628
S'description'
p12629
S'Mean radius value for the circles\n'
p12630
sS'cpp_type'
p12631
S'double'
p12632
sS'default'
p12633
g3
sS'name'
p12634
S'radius'
p12635
sS'required'
p12636
I01
sS'group_name'
p12637
Nsa(dp12638
S'description'
p12639
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p12640
sS'cpp_type'
p12641
S'double'
p12642
sS'default'
p12643
S'0'
p12644
sS'name'
p12645
S'radius_variation'
p12646
sS'required'
p12647
I00
sS'group_name'
p12648
Nsa(dp12649
S'name'
p12650
S'radius_variation_type'
p12651
sS'cpp_type'
p12652
S'MooseEnum'
p12653
sS'default'
p12654
S'none'
p12655
sS'description'
p12656
S'Type of distribution that random circle radii will follow\n'
p12657
sS'required'
p12658
I00
sS'options'
p12659
S'uniform normal none'
p12660
sS'group_name'
p12661
Nsa(dp12662
S'description'
p12663
S'The random seed\n'
p12664
sS'cpp_type'
p12665
S'unsigned int'
p12666
sS'default'
p12667
S'12444'
p12668
sS'name'
p12669
S'rand_seed'
p12670
sS'required'
p12671
I00
sS'group_name'
p12672
Nsa(dp12673
S'name'
p12674
S'structure_type'
p12675
sS'cpp_type'
p12676
S'MooseEnum'
p12677
sS'default'
p12678
g3
sS'description'
p12679
S'Which structure type is being initialized, grains or voids\n'
p12680
sS'required'
p12681
I01
sS'options'
p12682
S'grains voids'
p12683
sS'group_name'
p12684
Nsa(dp12685
S'description'
p12686
g3
sS'cpp_type'
p12687
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12688
sS'default'
p12689
S'PolycrystalVoronoiVoidIC'
p12690
sS'name'
p12691
S'type'
p12692
sS'required'
p12693
I00
sS'group_name'
p12694
Nsa(dp12695
S'description'
p12696
S'The variable this initial condition is supposed to provide values for.\n'
p12697
sS'cpp_type'
p12698
S'VariableName'
p12699
sS'default'
p12700
g3
sS'name'
p12701
S'variable'
p12702
sS'required'
p12703
I01
sS'group_name'
p12704
Nsa(dp12705
S'description'
p12706
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p12707
sS'cpp_type'
p12708
S'bool'
p12709
sS'default'
p12710
S'0'
p12711
sS'name'
p12712
S'zero_gradient'
p12713
sS'required'
p12714
I00
sS'group_name'
p12715
NsasS'name'
p12716
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalVoronoiVoidIC'
p12717
sa(dp12718
S'description'
p12719
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p12720
sS'subblocks'
p12721
NsS'parameters'
p12722
(lp12723
(dp12724
S'description'
p12725
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12726
sS'cpp_type'
p12727
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12728
sS'default'
p12729
g3
sS'name'
p12730
S'block'
p12731
sS'required'
p12732
I00
sS'group_name'
p12733
Nsa(dp12734
S'description'
p12735
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12736
sS'cpp_type'
p12737
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12738
sS'default'
p12739
g3
sS'name'
p12740
S'boundary'
p12741
sS'required'
p12742
I00
sS'group_name'
p12743
Nsa(dp12744
S'description'
p12745
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12746
sS'cpp_type'
p12747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12748
sS'default'
p12749
g3
sS'name'
p12750
S'control_tags'
p12751
sS'required'
p12752
I00
sS'group_name'
p12753
S'Advanced'
p12754
sa(dp12755
S'description'
p12756
S'Set the enabled status of the MooseObject.\n'
p12757
sS'cpp_type'
p12758
S'bool'
p12759
sS'default'
p12760
S'1'
p12761
sS'name'
p12762
S'enable'
p12763
sS'required'
p12764
I00
sS'group_name'
p12765
S'Advanced'
p12766
sa(dp12767
S'description'
p12768
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12769
sS'cpp_type'
p12770
S'bool'
p12771
sS'default'
p12772
S'0'
p12773
sS'name'
p12774
S'ignore_uo_dependency'
p12775
sS'required'
p12776
I00
sS'group_name'
p12777
S'Advanced'
p12778
sa(dp12779
S'description'
p12780
g3
sS'cpp_type'
p12781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12782
sS'default'
p12783
S'RampIC'
p12784
sS'name'
p12785
S'type'
p12786
sS'required'
p12787
I00
sS'group_name'
p12788
Nsa(dp12789
S'description'
p12790
S'The value on left (xmin) boundary.\n'
p12791
sS'cpp_type'
p12792
S'double'
p12793
sS'default'
p12794
g3
sS'name'
p12795
S'value_left'
p12796
sS'required'
p12797
I01
sS'group_name'
p12798
Nsa(dp12799
S'description'
p12800
S'The value on right (xmax) boundary.\n'
p12801
sS'cpp_type'
p12802
S'double'
p12803
sS'default'
p12804
g3
sS'name'
p12805
S'value_right'
p12806
sS'required'
p12807
I01
sS'group_name'
p12808
Nsa(dp12809
S'description'
p12810
S'The variable this initial condition is supposed to provide values for.\n'
p12811
sS'cpp_type'
p12812
S'VariableName'
p12813
sS'default'
p12814
g3
sS'name'
p12815
S'variable'
p12816
sS'required'
p12817
I01
sS'group_name'
p12818
NsasS'name'
p12819
S'/AuxVariables/*/InitialCondition/<type>/RampIC'
p12820
sa(dp12821
S'description'
p12822
g3
sS'subblocks'
p12823
NsS'parameters'
p12824
(lp12825
(dp12826
S'description'
p12827
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12828
sS'cpp_type'
p12829
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12830
sS'default'
p12831
g3
sS'name'
p12832
S'block'
p12833
sS'required'
p12834
I00
sS'group_name'
p12835
Nsa(dp12836
S'description'
p12837
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12838
sS'cpp_type'
p12839
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12840
sS'default'
p12841
g3
sS'name'
p12842
S'boundary'
p12843
sS'required'
p12844
I00
sS'group_name'
p12845
Nsa(dp12846
S'description'
p12847
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12848
sS'cpp_type'
p12849
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12850
sS'default'
p12851
g3
sS'name'
p12852
S'control_tags'
p12853
sS'required'
p12854
I00
sS'group_name'
p12855
S'Advanced'
p12856
sa(dp12857
S'description'
p12858
S'Set the enabled status of the MooseObject.\n'
p12859
sS'cpp_type'
p12860
S'bool'
p12861
sS'default'
p12862
S'1'
p12863
sS'name'
p12864
S'enable'
p12865
sS'required'
p12866
I00
sS'group_name'
p12867
S'Advanced'
p12868
sa(dp12869
S'description'
p12870
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12871
sS'cpp_type'
p12872
S'bool'
p12873
sS'default'
p12874
S'0'
p12875
sS'name'
p12876
S'ignore_uo_dependency'
p12877
sS'required'
p12878
I00
sS'group_name'
p12879
S'Advanced'
p12880
sa(dp12881
S'description'
p12882
S'Upper bound of the randomly generated values\n'
p12883
sS'cpp_type'
p12884
S'double'
p12885
sS'default'
p12886
S'1'
p12887
sS'name'
p12888
S'max'
p12889
sS'required'
p12890
I00
sS'group_name'
p12891
Nsa(dp12892
S'description'
p12893
S'Lower bound of the randomly generated values\n'
p12894
sS'cpp_type'
p12895
S'double'
p12896
sS'default'
p12897
S'0'
p12898
sS'name'
p12899
S'min'
p12900
sS'required'
p12901
I00
sS'group_name'
p12902
Nsa(dp12903
S'description'
p12904
S'Seed value for the random number generator\n'
p12905
sS'cpp_type'
p12906
S'unsigned int'
p12907
sS'default'
p12908
S'0'
p12909
sS'name'
p12910
S'seed'
p12911
sS'required'
p12912
I00
sS'group_name'
p12913
Nsa(dp12914
S'description'
p12915
g3
sS'cpp_type'
p12916
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12917
sS'default'
p12918
S'RandomIC'
p12919
sS'name'
p12920
S'type'
p12921
sS'required'
p12922
I00
sS'group_name'
p12923
Nsa(dp12924
S'description'
p12925
S'The variable this initial condition is supposed to provide values for.\n'
p12926
sS'cpp_type'
p12927
S'VariableName'
p12928
sS'default'
p12929
g3
sS'name'
p12930
S'variable'
p12931
sS'required'
p12932
I01
sS'group_name'
p12933
NsasS'name'
p12934
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p12935
sa(dp12936
S'description'
p12937
g3
sS'subblocks'
p12938
NsS'parameters'
p12939
(lp12940
(dp12941
S'description'
p12942
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12943
sS'cpp_type'
p12944
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12945
sS'default'
p12946
g3
sS'name'
p12947
S'block'
p12948
sS'required'
p12949
I00
sS'group_name'
p12950
Nsa(dp12951
S'description'
p12952
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12953
sS'cpp_type'
p12954
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12955
sS'default'
p12956
g3
sS'name'
p12957
S'boundary'
p12958
sS'required'
p12959
I00
sS'group_name'
p12960
Nsa(dp12961
S'description'
p12962
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12963
sS'cpp_type'
p12964
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12965
sS'default'
p12966
g3
sS'name'
p12967
S'control_tags'
p12968
sS'required'
p12969
I00
sS'group_name'
p12970
S'Advanced'
p12971
sa(dp12972
S'description'
p12973
S'The EBSDReader object holding the EBSD data\n'
p12974
sS'cpp_type'
p12975
S'UserObjectName'
p12976
sS'default'
p12977
g3
sS'name'
p12978
S'ebsd_reader'
p12979
sS'required'
p12980
I01
sS'group_name'
p12981
Nsa(dp12982
S'description'
p12983
S'Set the enabled status of the MooseObject.\n'
p12984
sS'cpp_type'
p12985
S'bool'
p12986
sS'default'
p12987
S'1'
p12988
sS'name'
p12989
S'enable'
p12990
sS'required'
p12991
I00
sS'group_name'
p12992
S'Advanced'
p12993
sa(dp12994
S'description'
p12995
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p12996
sS'cpp_type'
p12997
S'bool'
p12998
sS'default'
p12999
S'0'
p13000
sS'name'
p13001
S'ignore_uo_dependency'
p13002
sS'required'
p13003
I00
sS'group_name'
p13004
S'Advanced'
p13005
sa(dp13006
S'description'
p13007
S'EBSD phase number this variable is to represent\n'
p13008
sS'cpp_type'
p13009
S'unsigned int'
p13010
sS'default'
p13011
g3
sS'name'
p13012
S'phase'
p13013
sS'required'
p13014
I01
sS'group_name'
p13015
Nsa(dp13016
S'description'
p13017
g3
sS'cpp_type'
p13018
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13019
sS'default'
p13020
S'ReconPhaseVarIC'
p13021
sS'name'
p13022
S'type'
p13023
sS'required'
p13024
I00
sS'group_name'
p13025
Nsa(dp13026
S'description'
p13027
S'The variable this initial condition is supposed to provide values for.\n'
p13028
sS'cpp_type'
p13029
S'VariableName'
p13030
sS'default'
p13031
g3
sS'name'
p13032
S'variable'
p13033
sS'required'
p13034
I01
sS'group_name'
p13035
NsasS'name'
p13036
S'/AuxVariables/*/InitialCondition/<type>/ReconPhaseVarIC'
p13037
sa(dp13038
S'description'
p13039
g3
sS'subblocks'
p13040
NsS'parameters'
p13041
(lp13042
(dp13043
S'description'
p13044
g3
sS'cpp_type'
p13045
S'bool'
p13046
sS'default'
p13047
S'0'
p13048
sS'name'
p13049
S'all_op_elemental'
p13050
sS'required'
p13051
I00
sS'group_name'
p13052
Nsa(dp13053
S'description'
p13054
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13055
sS'cpp_type'
p13056
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13057
sS'default'
p13058
g3
sS'name'
p13059
S'block'
p13060
sS'required'
p13061
I00
sS'group_name'
p13062
Nsa(dp13063
S'description'
p13064
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13065
sS'cpp_type'
p13066
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13067
sS'default'
p13068
g3
sS'name'
p13069
S'boundary'
p13070
sS'required'
p13071
I00
sS'group_name'
p13072
Nsa(dp13073
S'name'
p13074
S'coloring_algorithm'
p13075
sS'cpp_type'
p13076
S'MooseEnum'
p13077
sS'default'
p13078
S'legacy'
p13079
sS'description'
p13080
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p13081
sS'required'
p13082
I00
sS'options'
p13083
S'legacy bt jp power greedy'
p13084
sS'group_name'
p13085
Nsa(dp13086
S'description'
p13087
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13088
sS'cpp_type'
p13089
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13090
sS'default'
p13091
g3
sS'name'
p13092
S'control_tags'
p13093
sS'required'
p13094
I00
sS'group_name'
p13095
S'Advanced'
p13096
sa(dp13097
S'description'
p13098
S'The EBSDReader GeneralUserObject\n'
p13099
sS'cpp_type'
p13100
S'UserObjectName'
p13101
sS'default'
p13102
g3
sS'name'
p13103
S'ebsd_reader'
p13104
sS'required'
p13105
I01
sS'group_name'
p13106
Nsa(dp13107
S'description'
p13108
S'Set the enabled status of the MooseObject.\n'
p13109
sS'cpp_type'
p13110
S'bool'
p13111
sS'default'
p13112
S'1'
p13113
sS'name'
p13114
S'enable'
p13115
sS'required'
p13116
I00
sS'group_name'
p13117
S'Advanced'
p13118
sa(dp13119
S'description'
p13120
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13121
sS'cpp_type'
p13122
S'bool'
p13123
sS'default'
p13124
S'0'
p13125
sS'name'
p13126
S'ignore_uo_dependency'
p13127
sS'required'
p13128
I00
sS'group_name'
p13129
S'Advanced'
p13130
sa(dp13131
S'description'
p13132
S'The index for the current order parameter\n'
p13133
sS'cpp_type'
p13134
S'unsigned int'
p13135
sS'default'
p13136
g3
sS'name'
p13137
S'op_index'
p13138
sS'required'
p13139
I01
sS'group_name'
p13140
Nsa(dp13141
S'description'
p13142
S'Specifies the number of order parameters to create\n'
p13143
sS'cpp_type'
p13144
S'unsigned int'
p13145
sS'default'
p13146
g3
sS'name'
p13147
S'op_num'
p13148
sS'required'
p13149
I01
sS'group_name'
p13150
Nsa(dp13151
S'description'
p13152
S'EBSD phase number to be assigned to this grain\n'
p13153
sS'cpp_type'
p13154
S'unsigned int'
p13155
sS'default'
p13156
g3
sS'name'
p13157
S'phase'
p13158
sS'required'
p13159
I00
sS'group_name'
p13160
Nsa(dp13161
S'description'
p13162
g3
sS'cpp_type'
p13163
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13164
sS'default'
p13165
S'ReconVarIC'
p13166
sS'name'
p13167
S'type'
p13168
sS'required'
p13169
I00
sS'group_name'
p13170
Nsa(dp13171
S'description'
p13172
S'The variable this initial condition is supposed to provide values for.\n'
p13173
sS'cpp_type'
p13174
S'VariableName'
p13175
sS'default'
p13176
g3
sS'name'
p13177
S'variable'
p13178
sS'required'
p13179
I01
sS'group_name'
p13180
NsasS'name'
p13181
S'/AuxVariables/*/InitialCondition/<type>/ReconVarIC'
p13182
sa(dp13183
S'description'
p13184
S'Random noise with different min/max inside/outside of a bounding box\n'
p13185
sS'subblocks'
p13186
NsS'parameters'
p13187
(lp13188
(dp13189
S'description'
p13190
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13191
sS'cpp_type'
p13192
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13193
sS'default'
p13194
g3
sS'name'
p13195
S'block'
p13196
sS'required'
p13197
I00
sS'group_name'
p13198
Nsa(dp13199
S'description'
p13200
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13201
sS'cpp_type'
p13202
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13203
sS'default'
p13204
g3
sS'name'
p13205
S'boundary'
p13206
sS'required'
p13207
I00
sS'group_name'
p13208
Nsa(dp13209
S'description'
p13210
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13211
sS'cpp_type'
p13212
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13213
sS'default'
p13214
g3
sS'name'
p13215
S'control_tags'
p13216
sS'required'
p13217
I00
sS'group_name'
p13218
S'Advanced'
p13219
sa(dp13220
S'description'
p13221
S'Set the enabled status of the MooseObject.\n'
p13222
sS'cpp_type'
p13223
S'bool'
p13224
sS'default'
p13225
S'1'
p13226
sS'name'
p13227
S'enable'
p13228
sS'required'
p13229
I00
sS'group_name'
p13230
S'Advanced'
p13231
sa(dp13232
S'description'
p13233
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13234
sS'cpp_type'
p13235
S'bool'
p13236
sS'default'
p13237
S'0'
p13238
sS'name'
p13239
S'ignore_uo_dependency'
p13240
sS'required'
p13241
I00
sS'group_name'
p13242
S'Advanced'
p13243
sa(dp13244
S'description'
p13245
S'The min value of the variable invalue the box\n'
p13246
sS'cpp_type'
p13247
S'double'
p13248
sS'default'
p13249
S'0'
p13250
sS'name'
p13251
S'mn_invalue'
p13252
sS'required'
p13253
I00
sS'group_name'
p13254
Nsa(dp13255
S'description'
p13256
S'The min value of the variable outvalue the box\n'
p13257
sS'cpp_type'
p13258
S'double'
p13259
sS'default'
p13260
S'0'
p13261
sS'name'
p13262
S'mn_outvalue'
p13263
sS'required'
p13264
I00
sS'group_name'
p13265
Nsa(dp13266
S'description'
p13267
S'The max value of the variable invalue the box\n'
p13268
sS'cpp_type'
p13269
S'double'
p13270
sS'default'
p13271
g3
sS'name'
p13272
S'mx_invalue'
p13273
sS'required'
p13274
I01
sS'group_name'
p13275
Nsa(dp13276
S'description'
p13277
S'The max value of the variable outvalue the box\n'
p13278
sS'cpp_type'
p13279
S'double'
p13280
sS'default'
p13281
g3
sS'name'
p13282
S'mx_outvalue'
p13283
sS'required'
p13284
I01
sS'group_name'
p13285
Nsa(dp13286
S'description'
p13287
g3
sS'cpp_type'
p13288
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13289
sS'default'
p13290
S'RndBoundingBoxIC'
p13291
sS'name'
p13292
S'type'
p13293
sS'required'
p13294
I00
sS'group_name'
p13295
Nsa(dp13296
S'description'
p13297
S'The variable this initial condition is supposed to provide values for.\n'
p13298
sS'cpp_type'
p13299
S'VariableName'
p13300
sS'default'
p13301
g3
sS'name'
p13302
S'variable'
p13303
sS'required'
p13304
I01
sS'group_name'
p13305
Nsa(dp13306
S'description'
p13307
S'The x coordinate of the lower left-hand corner of the box\n'
p13308
sS'cpp_type'
p13309
S'double'
p13310
sS'default'
p13311
g3
sS'name'
p13312
S'x1'
p13313
sS'required'
p13314
I01
sS'group_name'
p13315
Nsa(dp13316
S'description'
p13317
S'The x coordinate of the upper right-hand corner of the box\n'
p13318
sS'cpp_type'
p13319
S'double'
p13320
sS'default'
p13321
g3
sS'name'
p13322
S'x2'
p13323
sS'required'
p13324
I01
sS'group_name'
p13325
Nsa(dp13326
S'description'
p13327
S'The y coordinate of the lower left-hand corner of the box\n'
p13328
sS'cpp_type'
p13329
S'double'
p13330
sS'default'
p13331
g3
sS'name'
p13332
S'y1'
p13333
sS'required'
p13334
I01
sS'group_name'
p13335
Nsa(dp13336
S'description'
p13337
S'The y coordinate of the upper right-hand corner of the box\n'
p13338
sS'cpp_type'
p13339
S'double'
p13340
sS'default'
p13341
g3
sS'name'
p13342
S'y2'
p13343
sS'required'
p13344
I01
sS'group_name'
p13345
Nsa(dp13346
S'description'
p13347
S'The z coordinate of the lower left-hand corner of the box\n'
p13348
sS'cpp_type'
p13349
S'double'
p13350
sS'default'
p13351
S'0'
p13352
sS'name'
p13353
S'z1'
p13354
sS'required'
p13355
I00
sS'group_name'
p13356
Nsa(dp13357
S'description'
p13358
S'The z coordinate of the upper right-hand corner of the box\n'
p13359
sS'cpp_type'
p13360
S'double'
p13361
sS'default'
p13362
S'0'
p13363
sS'name'
p13364
S'z2'
p13365
sS'required'
p13366
I00
sS'group_name'
p13367
NsasS'name'
p13368
S'/AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC'
p13369
sa(dp13370
S'description'
p13371
S'Random noise with different min/max inside/outside of a smooth circle\n'
p13372
sS'subblocks'
p13373
NsS'parameters'
p13374
(lp13375
(dp13376
S'description'
p13377
S'in 3D, whether the objects are spheres or columns\n'
p13378
sS'cpp_type'
p13379
S'bool'
p13380
sS'default'
p13381
S'1'
p13382
sS'name'
p13383
S'3D_spheres'
p13384
sS'required'
p13385
I00
sS'group_name'
p13386
Nsa(dp13387
S'description'
p13388
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13389
sS'cpp_type'
p13390
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13391
sS'default'
p13392
g3
sS'name'
p13393
S'block'
p13394
sS'required'
p13395
I00
sS'group_name'
p13396
Nsa(dp13397
S'description'
p13398
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13399
sS'cpp_type'
p13400
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13401
sS'default'
p13402
g3
sS'name'
p13403
S'boundary'
p13404
sS'required'
p13405
I00
sS'group_name'
p13406
Nsa(dp13407
S'description'
p13408
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13409
sS'cpp_type'
p13410
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13411
sS'default'
p13412
g3
sS'name'
p13413
S'control_tags'
p13414
sS'required'
p13415
I00
sS'group_name'
p13416
S'Advanced'
p13417
sa(dp13418
S'description'
p13419
S'Set the enabled status of the MooseObject.\n'
p13420
sS'cpp_type'
p13421
S'bool'
p13422
sS'default'
p13423
S'1'
p13424
sS'name'
p13425
S'enable'
p13426
sS'required'
p13427
I00
sS'group_name'
p13428
S'Advanced'
p13429
sa(dp13430
S'description'
p13431
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13432
sS'cpp_type'
p13433
S'bool'
p13434
sS'default'
p13435
S'0'
p13436
sS'name'
p13437
S'ignore_uo_dependency'
p13438
sS'required'
p13439
I00
sS'group_name'
p13440
S'Advanced'
p13441
sa(dp13442
S'description'
p13443
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13444
sS'cpp_type'
p13445
S'double'
p13446
sS'default'
p13447
S'0'
p13448
sS'name'
p13449
S'int_width'
p13450
sS'required'
p13451
I00
sS'group_name'
p13452
Nsa(dp13453
S'description'
p13454
S'The variable value inside the circle\n'
p13455
sS'cpp_type'
p13456
S'double'
p13457
sS'default'
p13458
g3
sS'name'
p13459
S'invalue'
p13460
sS'required'
p13461
I01
sS'group_name'
p13462
Nsa(dp13463
S'description'
p13464
S'The variable value outside the circle\n'
p13465
sS'cpp_type'
p13466
S'double'
p13467
sS'default'
p13468
g3
sS'name'
p13469
S'outvalue'
p13470
sS'required'
p13471
I01
sS'group_name'
p13472
Nsa(dp13473
S'description'
p13474
S'The radius of a circle\n'
p13475
sS'cpp_type'
p13476
S'double'
p13477
sS'default'
p13478
g3
sS'name'
p13479
S'radius'
p13480
sS'required'
p13481
I01
sS'group_name'
p13482
Nsa(dp13483
S'description'
p13484
S'Seed value for the random number generator\n'
p13485
sS'cpp_type'
p13486
S'unsigned int'
p13487
sS'default'
p13488
S'12345'
p13489
sS'name'
p13490
S'rand_seed'
p13491
sS'required'
p13492
I00
sS'group_name'
p13493
Nsa(dp13494
S'description'
p13495
g3
sS'cpp_type'
p13496
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13497
sS'default'
p13498
S'RndSmoothCircleIC'
p13499
sS'name'
p13500
S'type'
p13501
sS'required'
p13502
I00
sS'group_name'
p13503
Nsa(dp13504
S'description'
p13505
S'The variable this initial condition is supposed to provide values for.\n'
p13506
sS'cpp_type'
p13507
S'VariableName'
p13508
sS'default'
p13509
g3
sS'name'
p13510
S'variable'
p13511
sS'required'
p13512
I01
sS'group_name'
p13513
Nsa(dp13514
S'description'
p13515
S'Plus or minus this amount on the invalue\n'
p13516
sS'cpp_type'
p13517
S'double'
p13518
sS'default'
p13519
g3
sS'name'
p13520
S'variation_invalue'
p13521
sS'required'
p13522
I01
sS'group_name'
p13523
Nsa(dp13524
S'description'
p13525
S'Plus or minus this amount on the outvalue\n'
p13526
sS'cpp_type'
p13527
S'double'
p13528
sS'default'
p13529
g3
sS'name'
p13530
S'variation_outvalue'
p13531
sS'required'
p13532
I01
sS'group_name'
p13533
Nsa(dp13534
S'description'
p13535
S'The x coordinate of the circle center\n'
p13536
sS'cpp_type'
p13537
S'double'
p13538
sS'default'
p13539
g3
sS'name'
p13540
S'x1'
p13541
sS'required'
p13542
I01
sS'group_name'
p13543
Nsa(dp13544
S'description'
p13545
S'The y coordinate of the circle center\n'
p13546
sS'cpp_type'
p13547
S'double'
p13548
sS'default'
p13549
g3
sS'name'
p13550
S'y1'
p13551
sS'required'
p13552
I01
sS'group_name'
p13553
Nsa(dp13554
S'description'
p13555
S'The z coordinate of the circle center\n'
p13556
sS'cpp_type'
p13557
S'double'
p13558
sS'default'
p13559
S'0'
p13560
sS'name'
p13561
S'z1'
p13562
sS'required'
p13563
I00
sS'group_name'
p13564
Nsa(dp13565
S'description'
p13566
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p13567
sS'cpp_type'
p13568
S'bool'
p13569
sS'default'
p13570
S'0'
p13571
sS'name'
p13572
S'zero_gradient'
p13573
sS'required'
p13574
I00
sS'group_name'
p13575
NsasS'name'
p13576
S'/AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC'
p13577
sa(dp13578
S'description'
p13579
g3
sS'subblocks'
p13580
NsS'parameters'
p13581
(lp13582
(dp13583
S'description'
p13584
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13585
sS'cpp_type'
p13586
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13587
sS'default'
p13588
g3
sS'name'
p13589
S'control_tags'
p13590
sS'required'
p13591
I00
sS'group_name'
p13592
S'Advanced'
p13593
sa(dp13594
S'description'
p13595
S'Set the enabled status of the MooseObject.\n'
p13596
sS'cpp_type'
p13597
S'bool'
p13598
sS'default'
p13599
S'1'
p13600
sS'name'
p13601
S'enable'
p13602
sS'required'
p13603
I00
sS'group_name'
p13604
S'Advanced'
p13605
sa(dp13606
S'description'
p13607
g3
sS'cpp_type'
p13608
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13609
sS'default'
p13610
S'ScalarComponentIC'
p13611
sS'name'
p13612
S'type'
p13613
sS'required'
p13614
I00
sS'group_name'
p13615
Nsa(dp13616
S'description'
p13617
S'Initial values to initialize the scalar variable.\n'
p13618
sS'cpp_type'
p13619
S'std::vector<double, std::allocator<double> >'
p13620
sS'default'
p13621
g3
sS'name'
p13622
S'values'
p13623
sS'required'
p13624
I01
sS'group_name'
p13625
Nsa(dp13626
S'description'
p13627
S'The variable this initial condition is supposed to provide values for.\n'
p13628
sS'cpp_type'
p13629
S'VariableName'
p13630
sS'default'
p13631
g3
sS'name'
p13632
S'variable'
p13633
sS'required'
p13634
I00
sS'group_name'
p13635
NsasS'name'
p13636
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p13637
sa(dp13638
S'description'
p13639
g3
sS'subblocks'
p13640
NsS'parameters'
p13641
(lp13642
(dp13643
S'description'
p13644
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13645
sS'cpp_type'
p13646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13647
sS'default'
p13648
g3
sS'name'
p13649
S'control_tags'
p13650
sS'required'
p13651
I00
sS'group_name'
p13652
S'Advanced'
p13653
sa(dp13654
S'description'
p13655
S'Set the enabled status of the MooseObject.\n'
p13656
sS'cpp_type'
p13657
S'bool'
p13658
sS'default'
p13659
S'1'
p13660
sS'name'
p13661
S'enable'
p13662
sS'required'
p13663
I00
sS'group_name'
p13664
S'Advanced'
p13665
sa(dp13666
S'description'
p13667
g3
sS'cpp_type'
p13668
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13669
sS'default'
p13670
S'ScalarConstantIC'
p13671
sS'name'
p13672
S'type'
p13673
sS'required'
p13674
I00
sS'group_name'
p13675
Nsa(dp13676
S'description'
p13677
g3
sS'cpp_type'
p13678
S'double'
p13679
sS'default'
p13680
S'0'
p13681
sS'name'
p13682
S'value'
p13683
sS'required'
p13684
I00
sS'group_name'
p13685
Nsa(dp13686
S'description'
p13687
S'The variable this initial condition is supposed to provide values for.\n'
p13688
sS'cpp_type'
p13689
S'VariableName'
p13690
sS'default'
p13691
g3
sS'name'
p13692
S'variable'
p13693
sS'required'
p13694
I00
sS'group_name'
p13695
NsasS'name'
p13696
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p13697
sa(dp13698
S'description'
p13699
S'Circle with a smooth interface\n'
p13700
sS'subblocks'
p13701
NsS'parameters'
p13702
(lp13703
(dp13704
S'description'
p13705
S'in 3D, whether the objects are spheres or columns\n'
p13706
sS'cpp_type'
p13707
S'bool'
p13708
sS'default'
p13709
S'1'
p13710
sS'name'
p13711
S'3D_spheres'
p13712
sS'required'
p13713
I00
sS'group_name'
p13714
Nsa(dp13715
S'description'
p13716
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13717
sS'cpp_type'
p13718
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13719
sS'default'
p13720
g3
sS'name'
p13721
S'block'
p13722
sS'required'
p13723
I00
sS'group_name'
p13724
Nsa(dp13725
S'description'
p13726
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13727
sS'cpp_type'
p13728
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13729
sS'default'
p13730
g3
sS'name'
p13731
S'boundary'
p13732
sS'required'
p13733
I00
sS'group_name'
p13734
Nsa(dp13735
S'description'
p13736
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13737
sS'cpp_type'
p13738
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13739
sS'default'
p13740
g3
sS'name'
p13741
S'control_tags'
p13742
sS'required'
p13743
I00
sS'group_name'
p13744
S'Advanced'
p13745
sa(dp13746
S'description'
p13747
S'Set the enabled status of the MooseObject.\n'
p13748
sS'cpp_type'
p13749
S'bool'
p13750
sS'default'
p13751
S'1'
p13752
sS'name'
p13753
S'enable'
p13754
sS'required'
p13755
I00
sS'group_name'
p13756
S'Advanced'
p13757
sa(dp13758
S'description'
p13759
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13760
sS'cpp_type'
p13761
S'bool'
p13762
sS'default'
p13763
S'0'
p13764
sS'name'
p13765
S'ignore_uo_dependency'
p13766
sS'required'
p13767
I00
sS'group_name'
p13768
S'Advanced'
p13769
sa(dp13770
S'description'
p13771
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13772
sS'cpp_type'
p13773
S'double'
p13774
sS'default'
p13775
S'0'
p13776
sS'name'
p13777
S'int_width'
p13778
sS'required'
p13779
I00
sS'group_name'
p13780
Nsa(dp13781
S'description'
p13782
S'The variable value inside the circle\n'
p13783
sS'cpp_type'
p13784
S'double'
p13785
sS'default'
p13786
g3
sS'name'
p13787
S'invalue'
p13788
sS'required'
p13789
I01
sS'group_name'
p13790
Nsa(dp13791
S'description'
p13792
S'The variable value outside the circle\n'
p13793
sS'cpp_type'
p13794
S'double'
p13795
sS'default'
p13796
g3
sS'name'
p13797
S'outvalue'
p13798
sS'required'
p13799
I01
sS'group_name'
p13800
Nsa(dp13801
S'description'
p13802
S'The radius of a circle\n'
p13803
sS'cpp_type'
p13804
S'double'
p13805
sS'default'
p13806
g3
sS'name'
p13807
S'radius'
p13808
sS'required'
p13809
I01
sS'group_name'
p13810
Nsa(dp13811
S'description'
p13812
S'Seed value for the random number generator\n'
p13813
sS'cpp_type'
p13814
S'unsigned int'
p13815
sS'default'
p13816
S'12345'
p13817
sS'name'
p13818
S'rand_seed'
p13819
sS'required'
p13820
I00
sS'group_name'
p13821
Nsa(dp13822
S'description'
p13823
g3
sS'cpp_type'
p13824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13825
sS'default'
p13826
S'SmoothCircleIC'
p13827
sS'name'
p13828
S'type'
p13829
sS'required'
p13830
I00
sS'group_name'
p13831
Nsa(dp13832
S'description'
p13833
S'The variable this initial condition is supposed to provide values for.\n'
p13834
sS'cpp_type'
p13835
S'VariableName'
p13836
sS'default'
p13837
g3
sS'name'
p13838
S'variable'
p13839
sS'required'
p13840
I01
sS'group_name'
p13841
Nsa(dp13842
S'description'
p13843
S'The x coordinate of the circle center\n'
p13844
sS'cpp_type'
p13845
S'double'
p13846
sS'default'
p13847
g3
sS'name'
p13848
S'x1'
p13849
sS'required'
p13850
I01
sS'group_name'
p13851
Nsa(dp13852
S'description'
p13853
S'The y coordinate of the circle center\n'
p13854
sS'cpp_type'
p13855
S'double'
p13856
sS'default'
p13857
g3
sS'name'
p13858
S'y1'
p13859
sS'required'
p13860
I01
sS'group_name'
p13861
Nsa(dp13862
S'description'
p13863
S'The z coordinate of the circle center\n'
p13864
sS'cpp_type'
p13865
S'double'
p13866
sS'default'
p13867
S'0'
p13868
sS'name'
p13869
S'z1'
p13870
sS'required'
p13871
I00
sS'group_name'
p13872
Nsa(dp13873
S'description'
p13874
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p13875
sS'cpp_type'
p13876
S'bool'
p13877
sS'default'
p13878
S'0'
p13879
sS'name'
p13880
S'zero_gradient'
p13881
sS'required'
p13882
I00
sS'group_name'
p13883
NsasS'name'
p13884
S'/AuxVariables/*/InitialCondition/<type>/SmoothCircleIC'
p13885
sa(dp13886
S'description'
p13887
S'Superellipsoid with a smooth interface\n'
p13888
sS'subblocks'
p13889
NsS'parameters'
p13890
(lp13891
(dp13892
S'description'
p13893
S'Semiaxis a of the superellipsoid\n'
p13894
sS'cpp_type'
p13895
S'double'
p13896
sS'default'
p13897
g3
sS'name'
p13898
S'a'
p13899
sS'required'
p13900
I01
sS'group_name'
p13901
Nsa(dp13902
S'description'
p13903
S'Semiaxis b of the superellipsoid\n'
p13904
sS'cpp_type'
p13905
S'double'
p13906
sS'default'
p13907
g3
sS'name'
p13908
S'b'
p13909
sS'required'
p13910
I01
sS'group_name'
p13911
Nsa(dp13912
S'description'
p13913
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13914
sS'cpp_type'
p13915
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13916
sS'default'
p13917
g3
sS'name'
p13918
S'block'
p13919
sS'required'
p13920
I00
sS'group_name'
p13921
Nsa(dp13922
S'description'
p13923
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13924
sS'cpp_type'
p13925
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13926
sS'default'
p13927
g3
sS'name'
p13928
S'boundary'
p13929
sS'required'
p13930
I00
sS'group_name'
p13931
Nsa(dp13932
S'description'
p13933
S'Semiaxis c of the superellipsoid\n'
p13934
sS'cpp_type'
p13935
S'double'
p13936
sS'default'
p13937
S'1'
p13938
sS'name'
p13939
S'c'
p13940
sS'required'
p13941
I00
sS'group_name'
p13942
Nsa(dp13943
S'description'
p13944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13945
sS'cpp_type'
p13946
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13947
sS'default'
p13948
g3
sS'name'
p13949
S'control_tags'
p13950
sS'required'
p13951
I00
sS'group_name'
p13952
S'Advanced'
p13953
sa(dp13954
S'description'
p13955
S'Set the enabled status of the MooseObject.\n'
p13956
sS'cpp_type'
p13957
S'bool'
p13958
sS'default'
p13959
S'1'
p13960
sS'name'
p13961
S'enable'
p13962
sS'required'
p13963
I00
sS'group_name'
p13964
S'Advanced'
p13965
sa(dp13966
S'description'
p13967
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p13968
sS'cpp_type'
p13969
S'bool'
p13970
sS'default'
p13971
S'0'
p13972
sS'name'
p13973
S'ignore_uo_dependency'
p13974
sS'required'
p13975
I00
sS'group_name'
p13976
S'Advanced'
p13977
sa(dp13978
S'description'
p13979
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13980
sS'cpp_type'
p13981
S'double'
p13982
sS'default'
p13983
S'0'
p13984
sS'name'
p13985
S'int_width'
p13986
sS'required'
p13987
I00
sS'group_name'
p13988
Nsa(dp13989
S'description'
p13990
S'The variable value inside the superellipsoid\n'
p13991
sS'cpp_type'
p13992
S'double'
p13993
sS'default'
p13994
g3
sS'name'
p13995
S'invalue'
p13996
sS'required'
p13997
I01
sS'group_name'
p13998
Nsa(dp13999
S'description'
p14000
S'Exponent n of the superellipsoid\n'
p14001
sS'cpp_type'
p14002
S'double'
p14003
sS'default'
p14004
g3
sS'name'
p14005
S'n'
p14006
sS'required'
p14007
I01
sS'group_name'
p14008
Nsa(dp14009
S'description'
p14010
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p14011
sS'cpp_type'
p14012
S'double'
p14013
sS'default'
p14014
g3
sS'name'
p14015
S'nestedvalue'
p14016
sS'required'
p14017
I00
sS'group_name'
p14018
Nsa(dp14019
S'description'
p14020
S'The variable value outside the superellipsoid\n'
p14021
sS'cpp_type'
p14022
S'double'
p14023
sS'default'
p14024
g3
sS'name'
p14025
S'outvalue'
p14026
sS'required'
p14027
I01
sS'group_name'
p14028
Nsa(dp14029
S'description'
p14030
S'Seed value for the random number generator\n'
p14031
sS'cpp_type'
p14032
S'unsigned int'
p14033
sS'default'
p14034
S'12345'
p14035
sS'name'
p14036
S'rand_seed'
p14037
sS'required'
p14038
I00
sS'group_name'
p14039
Nsa(dp14040
S'description'
p14041
g3
sS'cpp_type'
p14042
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14043
sS'default'
p14044
S'SmoothSuperellipsoidIC'
p14045
sS'name'
p14046
S'type'
p14047
sS'required'
p14048
I00
sS'group_name'
p14049
Nsa(dp14050
S'description'
p14051
S'The variable this initial condition is supposed to provide values for.\n'
p14052
sS'cpp_type'
p14053
S'VariableName'
p14054
sS'default'
p14055
g3
sS'name'
p14056
S'variable'
p14057
sS'required'
p14058
I01
sS'group_name'
p14059
Nsa(dp14060
S'description'
p14061
S'The x coordinate of the superellipsoid center\n'
p14062
sS'cpp_type'
p14063
S'double'
p14064
sS'default'
p14065
g3
sS'name'
p14066
S'x1'
p14067
sS'required'
p14068
I01
sS'group_name'
p14069
Nsa(dp14070
S'description'
p14071
S'The y coordinate of the superellipsoid center\n'
p14072
sS'cpp_type'
p14073
S'double'
p14074
sS'default'
p14075
g3
sS'name'
p14076
S'y1'
p14077
sS'required'
p14078
I01
sS'group_name'
p14079
Nsa(dp14080
S'description'
p14081
S'The z coordinate of the superellipsoid center\n'
p14082
sS'cpp_type'
p14083
S'double'
p14084
sS'default'
p14085
S'0'
p14086
sS'name'
p14087
S'z1'
p14088
sS'required'
p14089
I00
sS'group_name'
p14090
Nsa(dp14091
S'description'
p14092
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p14093
sS'cpp_type'
p14094
S'bool'
p14095
sS'default'
p14096
S'0'
p14097
sS'name'
p14098
S'zero_gradient'
p14099
sS'required'
p14100
I00
sS'group_name'
p14101
NsasS'name'
p14102
S'/AuxVariables/*/InitialCondition/<type>/SmoothSuperellipsoidIC'
p14103
sa(dp14104
S'description'
p14105
S'Multiple smooth circles with manually specified radii and center points\n'
p14106
sS'subblocks'
p14107
NsS'parameters'
p14108
(lp14109
(dp14110
S'description'
p14111
S'in 3D, whether the objects are spheres or columns\n'
p14112
sS'cpp_type'
p14113
S'bool'
p14114
sS'default'
p14115
S'1'
p14116
sS'name'
p14117
S'3D_spheres'
p14118
sS'required'
p14119
I00
sS'group_name'
p14120
Nsa(dp14121
S'description'
p14122
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14123
sS'cpp_type'
p14124
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14125
sS'default'
p14126
g3
sS'name'
p14127
S'block'
p14128
sS'required'
p14129
I00
sS'group_name'
p14130
Nsa(dp14131
S'description'
p14132
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14133
sS'cpp_type'
p14134
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14135
sS'default'
p14136
g3
sS'name'
p14137
S'boundary'
p14138
sS'required'
p14139
I00
sS'group_name'
p14140
Nsa(dp14141
S'description'
p14142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14143
sS'cpp_type'
p14144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14145
sS'default'
p14146
g3
sS'name'
p14147
S'control_tags'
p14148
sS'required'
p14149
I00
sS'group_name'
p14150
S'Advanced'
p14151
sa(dp14152
S'description'
p14153
S'Set the enabled status of the MooseObject.\n'
p14154
sS'cpp_type'
p14155
S'bool'
p14156
sS'default'
p14157
S'1'
p14158
sS'name'
p14159
S'enable'
p14160
sS'required'
p14161
I00
sS'group_name'
p14162
S'Advanced'
p14163
sa(dp14164
S'description'
p14165
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14166
sS'cpp_type'
p14167
S'bool'
p14168
sS'default'
p14169
S'0'
p14170
sS'name'
p14171
S'ignore_uo_dependency'
p14172
sS'required'
p14173
I00
sS'group_name'
p14174
S'Advanced'
p14175
sa(dp14176
S'description'
p14177
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p14178
sS'cpp_type'
p14179
S'double'
p14180
sS'default'
p14181
S'0'
p14182
sS'name'
p14183
S'int_width'
p14184
sS'required'
p14185
I00
sS'group_name'
p14186
Nsa(dp14187
S'description'
p14188
S'The variable value inside the circle\n'
p14189
sS'cpp_type'
p14190
S'double'
p14191
sS'default'
p14192
g3
sS'name'
p14193
S'invalue'
p14194
sS'required'
p14195
I01
sS'group_name'
p14196
Nsa(dp14197
S'description'
p14198
S'The variable value outside the circle\n'
p14199
sS'cpp_type'
p14200
S'double'
p14201
sS'default'
p14202
g3
sS'name'
p14203
S'outvalue'
p14204
sS'required'
p14205
I01
sS'group_name'
p14206
Nsa(dp14207
S'description'
p14208
S'The radius for each circle\n'
p14209
sS'cpp_type'
p14210
S'std::vector<double, std::allocator<double> >'
p14211
sS'default'
p14212
g3
sS'name'
p14213
S'radii'
p14214
sS'required'
p14215
I01
sS'group_name'
p14216
Nsa(dp14217
S'description'
p14218
S'Seed value for the random number generator\n'
p14219
sS'cpp_type'
p14220
S'unsigned int'
p14221
sS'default'
p14222
S'12345'
p14223
sS'name'
p14224
S'rand_seed'
p14225
sS'required'
p14226
I00
sS'group_name'
p14227
Nsa(dp14228
S'description'
p14229
g3
sS'cpp_type'
p14230
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14231
sS'default'
p14232
S'SpecifiedSmoothCircleIC'
p14233
sS'name'
p14234
S'type'
p14235
sS'required'
p14236
I00
sS'group_name'
p14237
Nsa(dp14238
S'description'
p14239
S'The variable this initial condition is supposed to provide values for.\n'
p14240
sS'cpp_type'
p14241
S'VariableName'
p14242
sS'default'
p14243
g3
sS'name'
p14244
S'variable'
p14245
sS'required'
p14246
I01
sS'group_name'
p14247
Nsa(dp14248
S'description'
p14249
S'The x-coordinate for each circle center\n'
p14250
sS'cpp_type'
p14251
S'std::vector<double, std::allocator<double> >'
p14252
sS'default'
p14253
g3
sS'name'
p14254
S'x_positions'
p14255
sS'required'
p14256
I01
sS'group_name'
p14257
Nsa(dp14258
S'description'
p14259
S'The y-coordinate for each circle center\n'
p14260
sS'cpp_type'
p14261
S'std::vector<double, std::allocator<double> >'
p14262
sS'default'
p14263
g3
sS'name'
p14264
S'y_positions'
p14265
sS'required'
p14266
I01
sS'group_name'
p14267
Nsa(dp14268
S'description'
p14269
S'The z-coordinate for each circle center\n'
p14270
sS'cpp_type'
p14271
S'std::vector<double, std::allocator<double> >'
p14272
sS'default'
p14273
g3
sS'name'
p14274
S'z_positions'
p14275
sS'required'
p14276
I01
sS'group_name'
p14277
Nsa(dp14278
S'description'
p14279
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p14280
sS'cpp_type'
p14281
S'bool'
p14282
sS'default'
p14283
S'0'
p14284
sS'name'
p14285
S'zero_gradient'
p14286
sS'required'
p14287
I00
sS'group_name'
p14288
NsasS'name'
p14289
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p14290
sa(dp14291
S'description'
p14292
S'Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n'
p14293
sS'subblocks'
p14294
NsS'parameters'
p14295
(lp14296
(dp14297
S'description'
p14298
S'Semiaxis a for each superellipsoid\n'
p14299
sS'cpp_type'
p14300
S'std::vector<double, std::allocator<double> >'
p14301
sS'default'
p14302
g3
sS'name'
p14303
S'as'
p14304
sS'required'
p14305
I01
sS'group_name'
p14306
Nsa(dp14307
S'description'
p14308
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14309
sS'cpp_type'
p14310
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14311
sS'default'
p14312
g3
sS'name'
p14313
S'block'
p14314
sS'required'
p14315
I00
sS'group_name'
p14316
Nsa(dp14317
S'description'
p14318
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14319
sS'cpp_type'
p14320
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14321
sS'default'
p14322
g3
sS'name'
p14323
S'boundary'
p14324
sS'required'
p14325
I00
sS'group_name'
p14326
Nsa(dp14327
S'description'
p14328
S'Semiaxis b for each superellipsoid\n'
p14329
sS'cpp_type'
p14330
S'std::vector<double, std::allocator<double> >'
p14331
sS'default'
p14332
g3
sS'name'
p14333
S'bs'
p14334
sS'required'
p14335
I01
sS'group_name'
p14336
Nsa(dp14337
S'description'
p14338
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14339
sS'cpp_type'
p14340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14341
sS'default'
p14342
g3
sS'name'
p14343
S'control_tags'
p14344
sS'required'
p14345
I00
sS'group_name'
p14346
S'Advanced'
p14347
sa(dp14348
S'description'
p14349
S'Semiaxis c for each superellipsoid\n'
p14350
sS'cpp_type'
p14351
S'std::vector<double, std::allocator<double> >'
p14352
sS'default'
p14353
g3
sS'name'
p14354
S'cs'
p14355
sS'required'
p14356
I01
sS'group_name'
p14357
Nsa(dp14358
S'description'
p14359
S'Set the enabled status of the MooseObject.\n'
p14360
sS'cpp_type'
p14361
S'bool'
p14362
sS'default'
p14363
S'1'
p14364
sS'name'
p14365
S'enable'
p14366
sS'required'
p14367
I00
sS'group_name'
p14368
S'Advanced'
p14369
sa(dp14370
S'description'
p14371
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14372
sS'cpp_type'
p14373
S'bool'
p14374
sS'default'
p14375
S'0'
p14376
sS'name'
p14377
S'ignore_uo_dependency'
p14378
sS'required'
p14379
I00
sS'group_name'
p14380
S'Advanced'
p14381
sa(dp14382
S'description'
p14383
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p14384
sS'cpp_type'
p14385
S'double'
p14386
sS'default'
p14387
S'0'
p14388
sS'name'
p14389
S'int_width'
p14390
sS'required'
p14391
I00
sS'group_name'
p14392
Nsa(dp14393
S'description'
p14394
S'The variable value inside the superellipsoid\n'
p14395
sS'cpp_type'
p14396
S'double'
p14397
sS'default'
p14398
g3
sS'name'
p14399
S'invalue'
p14400
sS'required'
p14401
I01
sS'group_name'
p14402
Nsa(dp14403
S'description'
p14404
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p14405
sS'cpp_type'
p14406
S'double'
p14407
sS'default'
p14408
g3
sS'name'
p14409
S'nestedvalue'
p14410
sS'required'
p14411
I00
sS'group_name'
p14412
Nsa(dp14413
S'description'
p14414
S'Exponent n for each superellipsoid\n'
p14415
sS'cpp_type'
p14416
S'std::vector<double, std::allocator<double> >'
p14417
sS'default'
p14418
g3
sS'name'
p14419
S'ns'
p14420
sS'required'
p14421
I01
sS'group_name'
p14422
Nsa(dp14423
S'description'
p14424
S'The variable value outside the superellipsoid\n'
p14425
sS'cpp_type'
p14426
S'double'
p14427
sS'default'
p14428
g3
sS'name'
p14429
S'outvalue'
p14430
sS'required'
p14431
I01
sS'group_name'
p14432
Nsa(dp14433
S'description'
p14434
S'Seed value for the random number generator\n'
p14435
sS'cpp_type'
p14436
S'unsigned int'
p14437
sS'default'
p14438
S'12345'
p14439
sS'name'
p14440
S'rand_seed'
p14441
sS'required'
p14442
I00
sS'group_name'
p14443
Nsa(dp14444
S'description'
p14445
g3
sS'cpp_type'
p14446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14447
sS'default'
p14448
S'SpecifiedSmoothSuperellipsoidIC'
p14449
sS'name'
p14450
S'type'
p14451
sS'required'
p14452
I00
sS'group_name'
p14453
Nsa(dp14454
S'description'
p14455
S'The variable this initial condition is supposed to provide values for.\n'
p14456
sS'cpp_type'
p14457
S'VariableName'
p14458
sS'default'
p14459
g3
sS'name'
p14460
S'variable'
p14461
sS'required'
p14462
I01
sS'group_name'
p14463
Nsa(dp14464
S'description'
p14465
S'The x-coordinate for each superellipsoid center\n'
p14466
sS'cpp_type'
p14467
S'std::vector<double, std::allocator<double> >'
p14468
sS'default'
p14469
g3
sS'name'
p14470
S'x_positions'
p14471
sS'required'
p14472
I01
sS'group_name'
p14473
Nsa(dp14474
S'description'
p14475
S'The y-coordinate for each superellipsoid center\n'
p14476
sS'cpp_type'
p14477
S'std::vector<double, std::allocator<double> >'
p14478
sS'default'
p14479
g3
sS'name'
p14480
S'y_positions'
p14481
sS'required'
p14482
I01
sS'group_name'
p14483
Nsa(dp14484
S'description'
p14485
S'The z-coordinate for each superellipsoid center\n'
p14486
sS'cpp_type'
p14487
S'std::vector<double, std::allocator<double> >'
p14488
sS'default'
p14489
g3
sS'name'
p14490
S'z_positions'
p14491
sS'required'
p14492
I01
sS'group_name'
p14493
Nsa(dp14494
S'description'
p14495
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p14496
sS'cpp_type'
p14497
S'bool'
p14498
sS'default'
p14499
S'0'
p14500
sS'name'
p14501
S'zero_gradient'
p14502
sS'required'
p14503
I00
sS'group_name'
p14504
NsasS'name'
p14505
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothSuperellipsoidIC'
p14506
sa(dp14507
S'description'
p14508
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p14509
sS'subblocks'
p14510
NsS'parameters'
p14511
(lp14512
(dp14513
S'description'
p14514
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14515
sS'cpp_type'
p14516
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14517
sS'default'
p14518
g3
sS'name'
p14519
S'block'
p14520
sS'required'
p14521
I00
sS'group_name'
p14522
Nsa(dp14523
S'description'
p14524
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14525
sS'cpp_type'
p14526
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14527
sS'default'
p14528
g3
sS'name'
p14529
S'boundary'
p14530
sS'required'
p14531
I00
sS'group_name'
p14532
Nsa(dp14533
S'description'
p14534
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14535
sS'cpp_type'
p14536
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14537
sS'default'
p14538
g3
sS'name'
p14539
S'control_tags'
p14540
sS'required'
p14541
I00
sS'group_name'
p14542
S'Advanced'
p14543
sa(dp14544
S'description'
p14545
S'Set the enabled status of the MooseObject.\n'
p14546
sS'cpp_type'
p14547
S'bool'
p14548
sS'default'
p14549
S'1'
p14550
sS'name'
p14551
S'enable'
p14552
sS'required'
p14553
I00
sS'group_name'
p14554
S'Advanced'
p14555
sa(dp14556
S'description'
p14557
S'The z coordinate of the circle center\n'
p14558
sS'cpp_type'
p14559
S'double'
p14560
sS'default'
p14561
g3
sS'name'
p14562
S'height'
p14563
sS'required'
p14564
I01
sS'group_name'
p14565
Nsa(dp14566
S'description'
p14567
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14568
sS'cpp_type'
p14569
S'bool'
p14570
sS'default'
p14571
S'0'
p14572
sS'name'
p14573
S'ignore_uo_dependency'
p14574
sS'required'
p14575
I00
sS'group_name'
p14576
S'Advanced'
p14577
sa(dp14578
S'description'
p14579
S'The variable value inside the circle\n'
p14580
sS'cpp_type'
p14581
S'double'
p14582
sS'default'
p14583
g3
sS'name'
p14584
S'invalue'
p14585
sS'required'
p14586
I01
sS'group_name'
p14587
Nsa(dp14588
S'description'
p14589
S'The variable value outside the circle\n'
p14590
sS'cpp_type'
p14591
S'double'
p14592
sS'default'
p14593
g3
sS'name'
p14594
S'outvalue'
p14595
sS'required'
p14596
I01
sS'group_name'
p14597
Nsa(dp14598
S'description'
p14599
g3
sS'cpp_type'
p14600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14601
sS'default'
p14602
S'ThumbIC'
p14603
sS'name'
p14604
S'type'
p14605
sS'required'
p14606
I00
sS'group_name'
p14607
Nsa(dp14608
S'description'
p14609
S'The variable this initial condition is supposed to provide values for.\n'
p14610
sS'cpp_type'
p14611
S'VariableName'
p14612
sS'default'
p14613
g3
sS'name'
p14614
S'variable'
p14615
sS'required'
p14616
I01
sS'group_name'
p14617
Nsa(dp14618
S'description'
p14619
S'The y coordinate of the circle center\n'
p14620
sS'cpp_type'
p14621
S'double'
p14622
sS'default'
p14623
g3
sS'name'
p14624
S'width'
p14625
sS'required'
p14626
I01
sS'group_name'
p14627
Nsa(dp14628
S'description'
p14629
S'The x coordinate of the circle center\n'
p14630
sS'cpp_type'
p14631
S'double'
p14632
sS'default'
p14633
g3
sS'name'
p14634
S'xcoord'
p14635
sS'required'
p14636
I01
sS'group_name'
p14637
NsasS'name'
p14638
S'/AuxVariables/*/InitialCondition/<type>/ThumbIC'
p14639
sa(dp14640
S'description'
p14641
S'Tricrystal with two circles/bubbles\n'
p14642
sS'subblocks'
p14643
NsS'parameters'
p14644
(lp14645
(dp14646
S'description'
p14647
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14648
sS'cpp_type'
p14649
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14650
sS'default'
p14651
g3
sS'name'
p14652
S'block'
p14653
sS'required'
p14654
I00
sS'group_name'
p14655
Nsa(dp14656
S'description'
p14657
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14658
sS'cpp_type'
p14659
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14660
sS'default'
p14661
g3
sS'name'
p14662
S'boundary'
p14663
sS'required'
p14664
I00
sS'group_name'
p14665
Nsa(dp14666
S'description'
p14667
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14668
sS'cpp_type'
p14669
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14670
sS'default'
p14671
g3
sS'name'
p14672
S'control_tags'
p14673
sS'required'
p14674
I00
sS'group_name'
p14675
S'Advanced'
p14676
sa(dp14677
S'description'
p14678
S'Set the enabled status of the MooseObject.\n'
p14679
sS'cpp_type'
p14680
S'bool'
p14681
sS'default'
p14682
S'1'
p14683
sS'name'
p14684
S'enable'
p14685
sS'required'
p14686
I00
sS'group_name'
p14687
S'Advanced'
p14688
sa(dp14689
S'description'
p14690
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14691
sS'cpp_type'
p14692
S'bool'
p14693
sS'default'
p14694
S'0'
p14695
sS'name'
p14696
S'ignore_uo_dependency'
p14697
sS'required'
p14698
I00
sS'group_name'
p14699
S'Advanced'
p14700
sa(dp14701
S'description'
p14702
S'Index for the current grain order parameter\n'
p14703
sS'cpp_type'
p14704
S'unsigned int'
p14705
sS'default'
p14706
g3
sS'name'
p14707
S'op_index'
p14708
sS'required'
p14709
I01
sS'group_name'
p14710
Nsa(dp14711
S'description'
p14712
S'Number of grain order parameters\n'
p14713
sS'cpp_type'
p14714
S'unsigned int'
p14715
sS'default'
p14716
g3
sS'name'
p14717
S'op_num'
p14718
sS'required'
p14719
I01
sS'group_name'
p14720
Nsa(dp14721
S'description'
p14722
g3
sS'cpp_type'
p14723
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14724
sS'default'
p14725
S'Tricrystal2CircleGrainsIC'
p14726
sS'name'
p14727
S'type'
p14728
sS'required'
p14729
I00
sS'group_name'
p14730
Nsa(dp14731
S'description'
p14732
S'The variable this initial condition is supposed to provide values for.\n'
p14733
sS'cpp_type'
p14734
S'VariableName'
p14735
sS'default'
p14736
g3
sS'name'
p14737
S'variable'
p14738
sS'required'
p14739
I01
sS'group_name'
p14740
NsasS'name'
p14741
S'/AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p14742
sa(dp14743
S'description'
p14744
S'Tricrystal with a triple junction\n'
p14745
sS'subblocks'
p14746
NsS'parameters'
p14747
(lp14748
(dp14749
S'description'
p14750
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14751
sS'cpp_type'
p14752
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14753
sS'default'
p14754
g3
sS'name'
p14755
S'block'
p14756
sS'required'
p14757
I00
sS'group_name'
p14758
Nsa(dp14759
S'description'
p14760
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14761
sS'cpp_type'
p14762
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14763
sS'default'
p14764
g3
sS'name'
p14765
S'boundary'
p14766
sS'required'
p14767
I00
sS'group_name'
p14768
Nsa(dp14769
S'description'
p14770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14771
sS'cpp_type'
p14772
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14773
sS'default'
p14774
g3
sS'name'
p14775
S'control_tags'
p14776
sS'required'
p14777
I00
sS'group_name'
p14778
S'Advanced'
p14779
sa(dp14780
S'description'
p14781
S'Set the enabled status of the MooseObject.\n'
p14782
sS'cpp_type'
p14783
S'bool'
p14784
sS'default'
p14785
S'1'
p14786
sS'name'
p14787
S'enable'
p14788
sS'required'
p14789
I00
sS'group_name'
p14790
S'Advanced'
p14791
sa(dp14792
S'description'
p14793
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14794
sS'cpp_type'
p14795
S'bool'
p14796
sS'default'
p14797
S'0'
p14798
sS'name'
p14799
S'ignore_uo_dependency'
p14800
sS'required'
p14801
I00
sS'group_name'
p14802
S'Advanced'
p14803
sa(dp14804
S'description'
p14805
S'The point where the triple junction is located. Default is the center of the mesh\n'
p14806
sS'cpp_type'
p14807
S'libMesh::Point'
p14808
sS'default'
p14809
g3
sS'name'
p14810
S'junction'
p14811
sS'required'
p14812
I00
sS'group_name'
p14813
Nsa(dp14814
S'description'
p14815
S'Index for the current grain order parameter\n'
p14816
sS'cpp_type'
p14817
S'unsigned int'
p14818
sS'default'
p14819
g3
sS'name'
p14820
S'op_index'
p14821
sS'required'
p14822
I01
sS'group_name'
p14823
Nsa(dp14824
S'description'
p14825
S'Number of grain order parameters\n'
p14826
sS'cpp_type'
p14827
S'unsigned int'
p14828
sS'default'
p14829
g3
sS'name'
p14830
S'op_num'
p14831
sS'required'
p14832
I01
sS'group_name'
p14833
Nsa(dp14834
S'description'
p14835
S'Angle of first grain at triple junction in degrees\n'
p14836
sS'cpp_type'
p14837
S'double'
p14838
sS'default'
p14839
S'135'
p14840
sS'name'
p14841
S'theta1'
p14842
sS'required'
p14843
I00
sS'group_name'
p14844
Nsa(dp14845
S'description'
p14846
S'Angle of second grain at triple junction in degrees\n'
p14847
sS'cpp_type'
p14848
S'double'
p14849
sS'default'
p14850
S'135'
p14851
sS'name'
p14852
S'theta2'
p14853
sS'required'
p14854
I00
sS'group_name'
p14855
Nsa(dp14856
S'description'
p14857
g3
sS'cpp_type'
p14858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14859
sS'default'
p14860
S'TricrystalTripleJunctionIC'
p14861
sS'name'
p14862
S'type'
p14863
sS'required'
p14864
I00
sS'group_name'
p14865
Nsa(dp14866
S'description'
p14867
S'The variable this initial condition is supposed to provide values for.\n'
p14868
sS'cpp_type'
p14869
S'VariableName'
p14870
sS'default'
p14871
g3
sS'name'
p14872
S'variable'
p14873
sS'required'
p14874
I01
sS'group_name'
p14875
NsasS'name'
p14876
S'/AuxVariables/*/InitialCondition/<type>/TricrystalTripleJunctionIC'
p14877
sa(dp14878
S'description'
p14879
g3
sS'subblocks'
p14880
NsS'parameters'
p14881
(lp14882
(dp14883
S'description'
p14884
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14885
sS'cpp_type'
p14886
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14887
sS'default'
p14888
g3
sS'name'
p14889
S'block'
p14890
sS'required'
p14891
I00
sS'group_name'
p14892
Nsa(dp14893
S'description'
p14894
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14895
sS'cpp_type'
p14896
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14897
sS'default'
p14898
g3
sS'name'
p14899
S'boundary'
p14900
sS'required'
p14901
I00
sS'group_name'
p14902
Nsa(dp14903
S'description'
p14904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14905
sS'cpp_type'
p14906
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14907
sS'default'
p14908
g3
sS'name'
p14909
S'control_tags'
p14910
sS'required'
p14911
I00
sS'group_name'
p14912
S'Advanced'
p14913
sa(dp14914
S'description'
p14915
S'Set the enabled status of the MooseObject.\n'
p14916
sS'cpp_type'
p14917
S'bool'
p14918
sS'default'
p14919
S'1'
p14920
sS'name'
p14921
S'enable'
p14922
sS'required'
p14923
I00
sS'group_name'
p14924
S'Advanced'
p14925
sa(dp14926
S'description'
p14927
S'Vector of order parameters\n'
p14928
sS'cpp_type'
p14929
S'std::vector<VariableName>'
p14930
sS'default'
p14931
g3
sS'name'
p14932
S'etas'
p14933
sS'required'
p14934
I01
sS'group_name'
p14935
Nsa(dp14936
S'description'
p14937
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p14938
sS'cpp_type'
p14939
S'bool'
p14940
sS'default'
p14941
S'0'
p14942
sS'name'
p14943
S'ignore_uo_dependency'
p14944
sS'required'
p14945
I00
sS'group_name'
p14946
S'Advanced'
p14947
sa(dp14948
S'description'
p14949
g3
sS'cpp_type'
p14950
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14951
sS'default'
p14952
S'UnitySubVarIC'
p14953
sS'name'
p14954
S'type'
p14955
sS'required'
p14956
I00
sS'group_name'
p14957
Nsa(dp14958
S'description'
p14959
S'Turns on/off y_threshold\n'
p14960
sS'cpp_type'
p14961
S'bool'
p14962
sS'default'
p14963
S'0'
p14964
sS'name'
p14965
S'use_threshold'
p14966
sS'required'
p14967
I00
sS'group_name'
p14968
Nsa(dp14969
S'description'
p14970
S'The variable this initial condition is supposed to provide values for.\n'
p14971
sS'cpp_type'
p14972
S'VariableName'
p14973
sS'default'
p14974
g3
sS'name'
p14975
S'variable'
p14976
sS'required'
p14977
I01
sS'group_name'
p14978
Nsa(dp14979
S'description'
p14980
S'Sets variable to 0 at y coordinates below this value\n'
p14981
sS'cpp_type'
p14982
S'double'
p14983
sS'default'
p14984
S'0'
p14985
sS'name'
p14986
S'y_threshold'
p14987
sS'required'
p14988
I00
sS'group_name'
p14989
NsasS'name'
p14990
S'/AuxVariables/*/InitialCondition/<type>/UnitySubVarIC'
p14991
sa(dp14992
S'description'
p14993
g3
sS'subblocks'
p14994
NsS'parameters'
p14995
(lp14996
(dp14997
S'description'
p14998
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14999
sS'cpp_type'
p15000
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15001
sS'default'
p15002
g3
sS'name'
p15003
S'block'
p15004
sS'required'
p15005
I00
sS'group_name'
p15006
Nsa(dp15007
S'description'
p15008
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15009
sS'cpp_type'
p15010
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15011
sS'default'
p15012
g3
sS'name'
p15013
S'boundary'
p15014
sS'required'
p15015
I00
sS'group_name'
p15016
Nsa(dp15017
S'description'
p15018
S'Vector of phase concentrations (must be the same lenght as etas)\n'
p15019
sS'cpp_type'
p15020
S'std::vector<VariableName>'
p15021
sS'default'
p15022
g3
sS'name'
p15023
S'cis'
p15024
sS'required'
p15025
I01
sS'group_name'
p15026
Nsa(dp15027
S'description'
p15028
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15029
sS'cpp_type'
p15030
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15031
sS'default'
p15032
g3
sS'name'
p15033
S'control_tags'
p15034
sS'required'
p15035
I00
sS'group_name'
p15036
S'Advanced'
p15037
sa(dp15038
S'description'
p15039
S'Set the enabled status of the MooseObject.\n'
p15040
sS'cpp_type'
p15041
S'bool'
p15042
sS'default'
p15043
S'1'
p15044
sS'name'
p15045
S'enable'
p15046
sS'required'
p15047
I00
sS'group_name'
p15048
S'Advanced'
p15049
sa(dp15050
S'description'
p15051
S'Vector of order parameters\n'
p15052
sS'cpp_type'
p15053
S'std::vector<VariableName>'
p15054
sS'default'
p15055
g3
sS'name'
p15056
S'etas'
p15057
sS'required'
p15058
I01
sS'group_name'
p15059
Nsa(dp15060
S'description'
p15061
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p15062
sS'cpp_type'
p15063
S'bool'
p15064
sS'default'
p15065
S'0'
p15066
sS'name'
p15067
S'ignore_uo_dependency'
p15068
sS'required'
p15069
I00
sS'group_name'
p15070
S'Advanced'
p15071
sa(dp15072
S'description'
p15073
g3
sS'cpp_type'
p15074
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15075
sS'default'
p15076
S'VarDepIC'
p15077
sS'name'
p15078
S'type'
p15079
sS'required'
p15080
I00
sS'group_name'
p15081
Nsa(dp15082
S'description'
p15083
S'The variable this initial condition is supposed to provide values for.\n'
p15084
sS'cpp_type'
p15085
S'VariableName'
p15086
sS'default'
p15087
g3
sS'name'
p15088
S'variable'
p15089
sS'required'
p15090
I01
sS'group_name'
p15091
NsasS'name'
p15092
S'/AuxVariables/*/InitialCondition/<type>/VarDepIC'
p15093
sasS'parameters'
p15094
NsS'name'
p15095
S'/AuxVariables/*/InitialCondition/<type>'
p15096
sasS'parameters'
p15097
(lp15098
(dp15099
S'description'
p15100
S'A string representing the Moose Object that will be built by this Action\n'
p15101
sS'cpp_type'
p15102
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15103
sS'default'
p15104
g3
sS'name'
p15105
S'type'
p15106
sS'required'
p15107
I01
sS'group_name'
p15108
NsasS'name'
p15109
S'/AuxVariables/*/InitialCondition'
p15110
sasS'parameters'
p15111
(lp15112
(dp15113
S'description'
p15114
S'The block id where this variable lives\n'
p15115
sS'cpp_type'
p15116
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15117
sS'default'
p15118
g3
sS'name'
p15119
S'block'
p15120
sS'required'
p15121
I00
sS'group_name'
p15122
Nsa(dp15123
S'name'
p15124
S'family'
p15125
sS'cpp_type'
p15126
S'MooseEnum'
p15127
sS'default'
p15128
S'LAGRANGE'
p15129
sS'description'
p15130
S'Specifies the family of FE shape functions to use for this variable\n'
p15131
sS'required'
p15132
I00
sS'options'
p15133
S'LAGRANGE MONOMIAL SCALAR'
p15134
sS'group_name'
p15135
Nsa(dp15136
S'description'
p15137
S'Specifies the initial condition for this variable\n'
p15138
sS'cpp_type'
p15139
S'double'
p15140
sS'default'
p15141
g3
sS'name'
p15142
S'initial_condition'
p15143
sS'required'
p15144
I00
sS'group_name'
p15145
Nsa(dp15146
S'name'
p15147
S'order'
p15148
sS'cpp_type'
p15149
S'MooseEnum'
p15150
sS'default'
p15151
S'FIRST'
p15152
sS'description'
p15153
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p15154
sS'required'
p15155
I00
sS'options'
p15156
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p15157
sS'group_name'
p15158
Nsa(dp15159
S'description'
p15160
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p15161
sS'cpp_type'
p15162
S'std::vector<OutputName, std::allocator<OutputName> >'
p15163
sS'default'
p15164
g3
sS'name'
p15165
S'outputs'
p15166
sS'required'
p15167
I00
sS'group_name'
p15168
S'Advanced'
p15169
sa(dp15170
S'description'
p15171
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p15172
sS'cpp_type'
p15173
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15174
sS'default'
p15175
S'LATEST'
p15176
sS'name'
p15177
S'initial_from_file_timestep'
p15178
sS'required'
p15179
I00
sS'group_name'
p15180
S'Initial From File'
p15181
sa(dp15182
S'description'
p15183
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p15184
sS'cpp_type'
p15185
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15186
sS'default'
p15187
g3
sS'name'
p15188
S'initial_from_file_var'
p15189
sS'required'
p15190
I00
sS'group_name'
p15191
S'Initial From File'
p15192
sasS'name'
p15193
S'/AuxVariables/*'
p15194
sa(dp15195
S'description'
p15196
g3
sS'subblocks'
p15197
NsS'parameters'
p15198
(lp15199
(dp15200
S'description'
p15201
S'The block id where this variable lives\n'
p15202
sS'cpp_type'
p15203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15204
sS'default'
p15205
g3
sS'name'
p15206
S'block'
p15207
sS'required'
p15208
I00
sS'group_name'
p15209
Nsa(dp15210
S'name'
p15211
S'data_type'
p15212
sS'cpp_type'
p15213
S'MultiMooseEnum'
p15214
sS'default'
p15215
S'REAL'
p15216
sS'description'
p15217
S'Specifying data type of the materials property, variables are created accordingly\n'
p15218
sS'required'
p15219
I01
sS'options'
p15220
S'Real RealGradient'
p15221
sS'group_name'
p15222
Nsa(dp15223
S'name'
p15224
S'family'
p15225
sS'cpp_type'
p15226
S'MooseEnum'
p15227
sS'default'
p15228
S'LAGRANGE'
p15229
sS'description'
p15230
S'Specifies the family of FE shape functions to use for this variable\n'
p15231
sS'required'
p15232
I00
sS'options'
p15233
S'LAGRANGE MONOMIAL SCALAR'
p15234
sS'group_name'
p15235
Nsa(dp15236
S'description'
p15237
S'Specifies the number of grains to create the aux varaivles for.\n'
p15238
sS'cpp_type'
p15239
S'unsigned int'
p15240
sS'default'
p15241
g3
sS'name'
p15242
S'grain_num'
p15243
sS'required'
p15244
I01
sS'group_name'
p15245
Nsa(dp15246
S'description'
p15247
S'Specifies the initial condition for this variable\n'
p15248
sS'cpp_type'
p15249
S'double'
p15250
sS'default'
p15251
g3
sS'name'
p15252
S'initial_condition'
p15253
sS'required'
p15254
I00
sS'group_name'
p15255
Nsa(dp15256
S'name'
p15257
S'order'
p15258
sS'cpp_type'
p15259
S'MooseEnum'
p15260
sS'default'
p15261
S'FIRST'
p15262
sS'description'
p15263
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p15264
sS'required'
p15265
I00
sS'options'
p15266
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p15267
sS'group_name'
p15268
Nsa(dp15269
S'description'
p15270
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p15271
sS'cpp_type'
p15272
S'std::vector<OutputName, std::allocator<OutputName> >'
p15273
sS'default'
p15274
g3
sS'name'
p15275
S'outputs'
p15276
sS'required'
p15277
I00
sS'group_name'
p15278
S'Advanced'
p15279
sa(dp15280
S'description'
p15281
S'Vector that specifies the base name of the variables.\n'
p15282
sS'cpp_type'
p15283
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15284
sS'default'
p15285
g3
sS'name'
p15286
S'variable_base'
p15287
sS'required'
p15288
I01
sS'group_name'
p15289
NsasS'name'
p15290
S'/AuxVariables/MultiAuxVariables'
p15291
sasS'parameters'
p15292
NsS'name'
p15293
S'/AuxVariables'
p15294
sa(dp15295
S'description'
p15296
g3
sS'subblocks'
p15297
(lp15298
(dp15299
S'description'
p15300
g3
sS'subblocks'
p15301
NsS'parameters'
p15302
(lp15303
(dp15304
S'description'
p15305
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15306
sS'cpp_type'
p15307
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15308
sS'default'
p15309
g3
sS'name'
p15310
S'boundary'
p15311
sS'required'
p15312
I01
sS'group_name'
p15313
Nsa(dp15314
S'description'
p15315
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15316
sS'cpp_type'
p15317
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15318
sS'default'
p15319
g3
sS'name'
p15320
S'control_tags'
p15321
sS'required'
p15322
I00
sS'group_name'
p15323
S'Advanced'
p15324
sa(dp15325
S'description'
p15326
S'Set the enabled status of the MooseObject.\n'
p15327
sS'cpp_type'
p15328
S'bool'
p15329
sS'default'
p15330
S'1'
p15331
sS'name'
p15332
S'enable'
p15333
sS'required'
p15334
I00
sS'group_name'
p15335
S'Advanced'
p15336
sa(dp15337
S'description'
p15338
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15339
sS'cpp_type'
p15340
S'bool'
p15341
sS'default'
p15342
S'1'
p15343
sS'name'
p15344
S'implicit'
p15345
sS'required'
p15346
I00
sS'group_name'
p15347
S'Advanced'
p15348
sa(dp15349
S'description'
p15350
S'A string representing the Moose Object that will be built by this Action\n'
p15351
sS'cpp_type'
p15352
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15353
sS'default'
p15354
g3
sS'name'
p15355
S'type'
p15356
sS'required'
p15357
I01
sS'group_name'
p15358
Nsa(dp15359
S'description'
p15360
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15361
sS'cpp_type'
p15362
S'bool'
p15363
sS'default'
p15364
S'0'
p15365
sS'name'
p15366
S'use_displaced_mesh'
p15367
sS'required'
p15368
I00
sS'group_name'
p15369
S'Advanced'
p15370
sa(dp15371
S'description'
p15372
S'The name of the variable that this boundary condition applies to\n'
p15373
sS'cpp_type'
p15374
S'NonlinearVariableName'
p15375
sS'default'
p15376
g3
sS'name'
p15377
S'variable'
p15378
sS'required'
p15379
I01
sS'group_name'
p15380
NsasS'name'
p15381
S'/BCs/*'
p15382
sa(dp15383
S'description'
p15384
S'Cahn-Hilliard fixed flux boundary condition using a tensorial (anisotropic) mobility\n'
p15385
sS'subblocks'
p15386
NsS'parameters'
p15387
(lp15388
(dp15389
S'description'
p15390
S'Vector of arguments of the mobility\n'
p15391
sS'cpp_type'
p15392
S'std::vector<VariableName>'
p15393
sS'default'
p15394
g3
sS'name'
p15395
S'args'
p15396
sS'required'
p15397
I00
sS'group_name'
p15398
Nsa(dp15399
S'description'
p15400
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15401
sS'cpp_type'
p15402
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15403
sS'default'
p15404
g3
sS'name'
p15405
S'boundary'
p15406
sS'required'
p15407
I01
sS'group_name'
p15408
Nsa(dp15409
S'description'
p15410
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15411
sS'cpp_type'
p15412
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15413
sS'default'
p15414
g3
sS'name'
p15415
S'control_tags'
p15416
sS'required'
p15417
I00
sS'group_name'
p15418
S'Advanced'
p15419
sa(dp15420
S'description'
p15421
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15422
sS'cpp_type'
p15423
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15424
sS'default'
p15425
g3
sS'name'
p15426
S'diag_save_in'
p15427
sS'required'
p15428
I00
sS'group_name'
p15429
S'Advanced'
p15430
sa(dp15431
S'description'
p15432
S'Set the enabled status of the MooseObject.\n'
p15433
sS'cpp_type'
p15434
S'bool'
p15435
sS'default'
p15436
S'1'
p15437
sS'name'
p15438
S'enable'
p15439
sS'required'
p15440
I00
sS'group_name'
p15441
S'Advanced'
p15442
sa(dp15443
S'description'
p15444
S'The flux set at the boundary\n'
p15445
sS'cpp_type'
p15446
S'libMesh::VectorValue<double>'
p15447
sS'default'
p15448
g3
sS'name'
p15449
S'flux'
p15450
sS'required'
p15451
I00
sS'group_name'
p15452
Nsa(dp15453
S'description'
p15454
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15455
sS'cpp_type'
p15456
S'bool'
p15457
sS'default'
p15458
S'1'
p15459
sS'name'
p15460
S'implicit'
p15461
sS'required'
p15462
I00
sS'group_name'
p15463
S'Advanced'
p15464
sa(dp15465
S'description'
p15466
S'The mobility used with the kernel\n'
p15467
sS'cpp_type'
p15468
S'MaterialPropertyName'
p15469
sS'default'
p15470
S'M'
p15471
sS'name'
p15472
S'mob_name'
p15473
sS'required'
p15474
I00
sS'group_name'
p15475
Nsa(dp15476
S'description'
p15477
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15478
sS'cpp_type'
p15479
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15480
sS'default'
p15481
g3
sS'name'
p15482
S'save_in'
p15483
sS'required'
p15484
I00
sS'group_name'
p15485
S'Advanced'
p15486
sa(dp15487
S'description'
p15488
S'The seed for the master random number generator\n'
p15489
sS'cpp_type'
p15490
S'unsigned int'
p15491
sS'default'
p15492
S'0'
p15493
sS'name'
p15494
S'seed'
p15495
sS'required'
p15496
I00
sS'group_name'
p15497
S'Advanced'
p15498
sa(dp15499
S'description'
p15500
g3
sS'cpp_type'
p15501
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15502
sS'default'
p15503
S'CahnHilliardAnisoFluxBC'
p15504
sS'name'
p15505
S'type'
p15506
sS'required'
p15507
I00
sS'group_name'
p15508
Nsa(dp15509
S'description'
p15510
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15511
sS'cpp_type'
p15512
S'bool'
p15513
sS'default'
p15514
S'0'
p15515
sS'name'
p15516
S'use_displaced_mesh'
p15517
sS'required'
p15518
I00
sS'group_name'
p15519
S'Advanced'
p15520
sa(dp15521
S'description'
p15522
S'The name of the variable that this boundary condition applies to\n'
p15523
sS'cpp_type'
p15524
S'NonlinearVariableName'
p15525
sS'default'
p15526
g3
sS'name'
p15527
S'variable'
p15528
sS'required'
p15529
I01
sS'group_name'
p15530
NsasS'name'
p15531
S'/BCs/CahnHilliardAnisoFluxBC'
p15532
sa(dp15533
S'description'
p15534
S'Cahn-Hilliard fixed flux boundary condition using a scalar (isotropic) mobility\n'
p15535
sS'subblocks'
p15536
NsS'parameters'
p15537
(lp15538
(dp15539
S'description'
p15540
S'Vector of arguments of the mobility\n'
p15541
sS'cpp_type'
p15542
S'std::vector<VariableName>'
p15543
sS'default'
p15544
g3
sS'name'
p15545
S'args'
p15546
sS'required'
p15547
I00
sS'group_name'
p15548
Nsa(dp15549
S'description'
p15550
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15551
sS'cpp_type'
p15552
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15553
sS'default'
p15554
g3
sS'name'
p15555
S'boundary'
p15556
sS'required'
p15557
I01
sS'group_name'
p15558
Nsa(dp15559
S'description'
p15560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15561
sS'cpp_type'
p15562
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15563
sS'default'
p15564
g3
sS'name'
p15565
S'control_tags'
p15566
sS'required'
p15567
I00
sS'group_name'
p15568
S'Advanced'
p15569
sa(dp15570
S'description'
p15571
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15572
sS'cpp_type'
p15573
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15574
sS'default'
p15575
g3
sS'name'
p15576
S'diag_save_in'
p15577
sS'required'
p15578
I00
sS'group_name'
p15579
S'Advanced'
p15580
sa(dp15581
S'description'
p15582
S'Set the enabled status of the MooseObject.\n'
p15583
sS'cpp_type'
p15584
S'bool'
p15585
sS'default'
p15586
S'1'
p15587
sS'name'
p15588
S'enable'
p15589
sS'required'
p15590
I00
sS'group_name'
p15591
S'Advanced'
p15592
sa(dp15593
S'description'
p15594
S'The flux set at the boundary\n'
p15595
sS'cpp_type'
p15596
S'libMesh::VectorValue<double>'
p15597
sS'default'
p15598
g3
sS'name'
p15599
S'flux'
p15600
sS'required'
p15601
I00
sS'group_name'
p15602
Nsa(dp15603
S'description'
p15604
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15605
sS'cpp_type'
p15606
S'bool'
p15607
sS'default'
p15608
S'1'
p15609
sS'name'
p15610
S'implicit'
p15611
sS'required'
p15612
I00
sS'group_name'
p15613
S'Advanced'
p15614
sa(dp15615
S'description'
p15616
S'The mobility used with the kernel\n'
p15617
sS'cpp_type'
p15618
S'MaterialPropertyName'
p15619
sS'default'
p15620
S'M'
p15621
sS'name'
p15622
S'mob_name'
p15623
sS'required'
p15624
I00
sS'group_name'
p15625
Nsa(dp15626
S'description'
p15627
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15628
sS'cpp_type'
p15629
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15630
sS'default'
p15631
g3
sS'name'
p15632
S'save_in'
p15633
sS'required'
p15634
I00
sS'group_name'
p15635
S'Advanced'
p15636
sa(dp15637
S'description'
p15638
S'The seed for the master random number generator\n'
p15639
sS'cpp_type'
p15640
S'unsigned int'
p15641
sS'default'
p15642
S'0'
p15643
sS'name'
p15644
S'seed'
p15645
sS'required'
p15646
I00
sS'group_name'
p15647
S'Advanced'
p15648
sa(dp15649
S'description'
p15650
g3
sS'cpp_type'
p15651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15652
sS'default'
p15653
S'CahnHilliardFluxBC'
p15654
sS'name'
p15655
S'type'
p15656
sS'required'
p15657
I00
sS'group_name'
p15658
Nsa(dp15659
S'description'
p15660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15661
sS'cpp_type'
p15662
S'bool'
p15663
sS'default'
p15664
S'0'
p15665
sS'name'
p15666
S'use_displaced_mesh'
p15667
sS'required'
p15668
I00
sS'group_name'
p15669
S'Advanced'
p15670
sa(dp15671
S'description'
p15672
S'The name of the variable that this boundary condition applies to\n'
p15673
sS'cpp_type'
p15674
S'NonlinearVariableName'
p15675
sS'default'
p15676
g3
sS'name'
p15677
S'variable'
p15678
sS'required'
p15679
I01
sS'group_name'
p15680
NsasS'name'
p15681
S'/BCs/CahnHilliardFluxBC'
p15682
sa(dp15683
S'description'
p15684
g3
sS'subblocks'
p15685
(lp15686
(dp15687
S'description'
p15688
g3
sS'subblocks'
p15689
NsS'parameters'
p15690
(lp15691
(dp15692
S'description'
p15693
S'The list of boundary IDs from the mesh where the pressure will be applied\n'
p15694
sS'cpp_type'
p15695
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15696
sS'default'
p15697
g3
sS'name'
p15698
S'boundary'
p15699
sS'required'
p15700
I01
sS'group_name'
p15701
Nsa(dp15702
S'description'
p15703
S'The nonlinear displacement variables\n'
p15704
sS'cpp_type'
p15705
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p15706
sS'default'
p15707
g3
sS'name'
p15708
S'displacements'
p15709
sS'required'
p15710
I01
sS'group_name'
p15711
Nsa(dp15712
S'description'
p15713
S'The name to use for the plenum pressure value\n'
p15714
sS'cpp_type'
p15715
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15716
sS'default'
p15717
g3
sS'name'
p15718
S'output'
p15719
sS'required'
p15720
I00
sS'group_name'
p15721
Nsa(dp15722
S'description'
p15723
S'Auxiliary variables to save the displacement residuals\n'
p15724
sS'cpp_type'
p15725
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15726
sS'default'
p15727
g3
sS'name'
p15728
S'save_in'
p15729
sS'required'
p15730
I00
sS'group_name'
p15731
Nsa(dp15732
S'description'
p15733
S'Whether to use displaced mesh in the boundary condition\n'
p15734
sS'cpp_type'
p15735
S'bool'
p15736
sS'default'
p15737
S'1'
p15738
sS'name'
p15739
S'use_displaced_mesh'
p15740
sS'required'
p15741
I00
sS'group_name'
p15742
Nsa(dp15743
S'description'
p15744
S'The name to use when reporting the initial moles of gas\n'
p15745
sS'cpp_type'
p15746
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15747
sS'default'
p15748
g3
sS'name'
p15749
S'output_initial_moles'
p15750
sS'required'
p15751
I00
sS'group_name'
p15752
Nsa(dp15753
S'description'
p15754
S'The universal gas constant for the units used\n'
p15755
sS'cpp_type'
p15756
S'double'
p15757
sS'default'
p15758
g3
sS'name'
p15759
S'R'
p15760
sS'required'
p15761
I01
sS'group_name'
p15762
Nsa(dp15763
S'name'
p15764
S'execute_on'
p15765
sS'cpp_type'
p15766
S'MultiMooseEnum'
p15767
sS'default'
p15768
S'LINEAR'
p15769
sS'description'
p15770
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p15771
sS'required'
p15772
I00
sS'options'
p15773
S'none initial linear nonlinear timestep_end timestep_begin custom'
p15774
sS'group_name'
p15775
Nsa(dp15776
S'description'
p15777
S'The initial pressure in the cavity\n'
p15778
sS'cpp_type'
p15779
S'double'
p15780
sS'default'
p15781
S'0'
p15782
sS'name'
p15783
S'initial_pressure'
p15784
sS'required'
p15785
I00
sS'group_name'
p15786
Nsa(dp15787
S'description'
p15788
S'Initial temperature (optional)\n'
p15789
sS'cpp_type'
p15790
S'double'
p15791
sS'default'
p15792
g3
sS'name'
p15793
S'initial_temperature'
p15794
sS'required'
p15795
I00
sS'group_name'
p15796
Nsa(dp15797
S'description'
p15798
S'The name of the postprocessor(s) that holds the amount of material injected into the cavity\n'
p15799
sS'cpp_type'
p15800
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p15801
sS'default'
p15802
g3
sS'name'
p15803
S'material_input'
p15804
sS'required'
p15805
I00
sS'group_name'
p15806
Nsa(dp15807
S'description'
p15808
S'The amount of time during which the pressure will ramp from zero to its true value\n'
p15809
sS'cpp_type'
p15810
S'double'
p15811
sS'default'
p15812
S'0'
p15813
sS'name'
p15814
S'startup_time'
p15815
sS'required'
p15816
I00
sS'group_name'
p15817
Nsa(dp15818
S'description'
p15819
S'The name of the average temperature postprocessor value\n'
p15820
sS'cpp_type'
p15821
S'PostprocessorName'
p15822
sS'default'
p15823
g3
sS'name'
p15824
S'temperature'
p15825
sS'required'
p15826
I01
sS'group_name'
p15827
Nsa(dp15828
S'description'
p15829
S'The name of the internal volume postprocessor value\n'
p15830
sS'cpp_type'
p15831
S'PostprocessorName'
p15832
sS'default'
p15833
g3
sS'name'
p15834
S'volume'
p15835
sS'required'
p15836
I01
sS'group_name'
p15837
NsasS'name'
p15838
S'/BCs/CavityPressure/*'
p15839
sasS'parameters'
p15840
NsS'name'
p15841
S'/BCs/CavityPressure'
p15842
sa(dp15843
S'description'
p15844
g3
sS'subblocks'
p15845
NsS'parameters'
p15846
(lp15847
(dp15848
S'description'
p15849
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15850
sS'cpp_type'
p15851
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15852
sS'default'
p15853
g3
sS'name'
p15854
S'boundary'
p15855
sS'required'
p15856
I01
sS'group_name'
p15857
Nsa(dp15858
S'description'
p15859
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15860
sS'cpp_type'
p15861
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15862
sS'default'
p15863
g3
sS'name'
p15864
S'control_tags'
p15865
sS'required'
p15866
I00
sS'group_name'
p15867
S'Advanced'
p15868
sa(dp15869
S'description'
p15870
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15871
sS'cpp_type'
p15872
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15873
sS'default'
p15874
g3
sS'name'
p15875
S'diag_save_in'
p15876
sS'required'
p15877
I00
sS'group_name'
p15878
S'Advanced'
p15879
sa(dp15880
S'description'
p15881
g3
sS'cpp_type'
p15882
S'double'
p15883
sS'default'
p15884
S'0'
p15885
sS'name'
p15886
S'duration'
p15887
sS'required'
p15888
I00
sS'group_name'
p15889
Nsa(dp15890
S'description'
p15891
S'Set the enabled status of the MooseObject.\n'
p15892
sS'cpp_type'
p15893
S'bool'
p15894
sS'default'
p15895
S'1'
p15896
sS'name'
p15897
S'enable'
p15898
sS'required'
p15899
I00
sS'group_name'
p15900
S'Advanced'
p15901
sa(dp15902
S'description'
p15903
g3
sS'cpp_type'
p15904
S'double'
p15905
sS'default'
p15906
S'500'
p15907
sS'name'
p15908
S'final'
p15909
sS'required'
p15910
I00
sS'group_name'
p15911
Nsa(dp15912
S'description'
p15913
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15914
sS'cpp_type'
p15915
S'bool'
p15916
sS'default'
p15917
S'1'
p15918
sS'name'
p15919
S'implicit'
p15920
sS'required'
p15921
I00
sS'group_name'
p15922
S'Advanced'
p15923
sa(dp15924
S'description'
p15925
g3
sS'cpp_type'
p15926
S'double'
p15927
sS'default'
p15928
S'500'
p15929
sS'name'
p15930
S'initial'
p15931
sS'required'
p15932
I00
sS'group_name'
p15933
Nsa(dp15934
S'description'
p15935
g3
sS'cpp_type'
p15936
S'double'
p15937
sS'default'
p15938
S'7500'
p15939
sS'name'
p15940
S'rate'
p15941
sS'required'
p15942
I00
sS'group_name'
p15943
Nsa(dp15944
S'description'
p15945
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15946
sS'cpp_type'
p15947
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15948
sS'default'
p15949
g3
sS'name'
p15950
S'save_in'
p15951
sS'required'
p15952
I00
sS'group_name'
p15953
S'Advanced'
p15954
sa(dp15955
S'description'
p15956
S'The seed for the master random number generator\n'
p15957
sS'cpp_type'
p15958
S'unsigned int'
p15959
sS'default'
p15960
S'0'
p15961
sS'name'
p15962
S'seed'
p15963
sS'required'
p15964
I00
sS'group_name'
p15965
S'Advanced'
p15966
sa(dp15967
S'description'
p15968
g3
sS'cpp_type'
p15969
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15970
sS'default'
p15971
S'ConvectiveFluxBC'
p15972
sS'name'
p15973
S'type'
p15974
sS'required'
p15975
I00
sS'group_name'
p15976
Nsa(dp15977
S'description'
p15978
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15979
sS'cpp_type'
p15980
S'bool'
p15981
sS'default'
p15982
S'0'
p15983
sS'name'
p15984
S'use_displaced_mesh'
p15985
sS'required'
p15986
I00
sS'group_name'
p15987
S'Advanced'
p15988
sa(dp15989
S'description'
p15990
S'The name of the variable that this boundary condition applies to\n'
p15991
sS'cpp_type'
p15992
S'NonlinearVariableName'
p15993
sS'default'
p15994
g3
sS'name'
p15995
S'variable'
p15996
sS'required'
p15997
I01
sS'group_name'
p15998
NsasS'name'
p15999
S'/BCs/ConvectiveFluxBC'
p16000
sa(dp16001
S'description'
p16002
g3
sS'subblocks'
p16003
NsS'parameters'
p16004
(lp16005
(dp16006
S'description'
p16007
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16008
sS'cpp_type'
p16009
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16010
sS'default'
p16011
g3
sS'name'
p16012
S'boundary'
p16013
sS'required'
p16014
I01
sS'group_name'
p16015
Nsa(dp16016
S'description'
p16017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16018
sS'cpp_type'
p16019
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16020
sS'default'
p16021
g3
sS'name'
p16022
S'control_tags'
p16023
sS'required'
p16024
I00
sS'group_name'
p16025
S'Advanced'
p16026
sa(dp16027
S'description'
p16028
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16029
sS'cpp_type'
p16030
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16031
sS'default'
p16032
g3
sS'name'
p16033
S'diag_save_in'
p16034
sS'required'
p16035
I00
sS'group_name'
p16036
S'Advanced'
p16037
sa(dp16038
S'description'
p16039
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p16040
sS'cpp_type'
p16041
S'MaterialPropertyName'
p16042
sS'default'
p16043
S'1'
p16044
sS'name'
p16045
S'diff'
p16046
sS'required'
p16047
I00
sS'group_name'
p16048
Nsa(dp16049
S'description'
p16050
S'Set the enabled status of the MooseObject.\n'
p16051
sS'cpp_type'
p16052
S'bool'
p16053
sS'default'
p16054
S'1'
p16055
sS'name'
p16056
S'enable'
p16057
sS'required'
p16058
I00
sS'group_name'
p16059
S'Advanced'
p16060
sa(dp16061
S'description'
p16062
S'Epsilon\n'
p16063
sS'cpp_type'
p16064
S'double'
p16065
sS'default'
p16066
g3
sS'name'
p16067
S'epsilon'
p16068
sS'required'
p16069
I01
sS'group_name'
p16070
Nsa(dp16071
S'description'
p16072
S'The forcing function.\n'
p16073
sS'cpp_type'
p16074
S'FunctionName'
p16075
sS'default'
p16076
g3
sS'name'
p16077
S'function'
p16078
sS'required'
p16079
I01
sS'group_name'
p16080
Nsa(dp16081
S'description'
p16082
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16083
sS'cpp_type'
p16084
S'bool'
p16085
sS'default'
p16086
S'1'
p16087
sS'name'
p16088
S'implicit'
p16089
sS'required'
p16090
I00
sS'group_name'
p16091
S'Advanced'
p16092
sa(dp16093
S'description'
p16094
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16095
sS'cpp_type'
p16096
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16097
sS'default'
p16098
g3
sS'name'
p16099
S'save_in'
p16100
sS'required'
p16101
I00
sS'group_name'
p16102
S'Advanced'
p16103
sa(dp16104
S'description'
p16105
S'The seed for the master random number generator\n'
p16106
sS'cpp_type'
p16107
S'unsigned int'
p16108
sS'default'
p16109
S'0'
p16110
sS'name'
p16111
S'seed'
p16112
sS'required'
p16113
I00
sS'group_name'
p16114
S'Advanced'
p16115
sa(dp16116
S'description'
p16117
S'Sigma\n'
p16118
sS'cpp_type'
p16119
S'double'
p16120
sS'default'
p16121
g3
sS'name'
p16122
S'sigma'
p16123
sS'required'
p16124
I01
sS'group_name'
p16125
Nsa(dp16126
S'description'
p16127
g3
sS'cpp_type'
p16128
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16129
sS'default'
p16130
S'DGFunctionDiffusionDirichletBC'
p16131
sS'name'
p16132
S'type'
p16133
sS'required'
p16134
I00
sS'group_name'
p16135
Nsa(dp16136
S'description'
p16137
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16138
sS'cpp_type'
p16139
S'bool'
p16140
sS'default'
p16141
S'0'
p16142
sS'name'
p16143
S'use_displaced_mesh'
p16144
sS'required'
p16145
I00
sS'group_name'
p16146
S'Advanced'
p16147
sa(dp16148
S'description'
p16149
S'The value the variable should have on the boundary\n'
p16150
sS'cpp_type'
p16151
S'double'
p16152
sS'default'
p16153
S'0'
p16154
sS'name'
p16155
S'value'
p16156
sS'required'
p16157
I00
sS'group_name'
p16158
Nsa(dp16159
S'description'
p16160
S'The name of the variable that this boundary condition applies to\n'
p16161
sS'cpp_type'
p16162
S'NonlinearVariableName'
p16163
sS'default'
p16164
g3
sS'name'
p16165
S'variable'
p16166
sS'required'
p16167
I01
sS'group_name'
p16168
NsasS'name'
p16169
S'/BCs/DGFunctionDiffusionDirichletBC'
p16170
sa(dp16171
S'description'
p16172
g3
sS'subblocks'
p16173
NsS'parameters'
p16174
(lp16175
(dp16176
S'description'
p16177
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16178
sS'cpp_type'
p16179
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16180
sS'default'
p16181
g3
sS'name'
p16182
S'boundary'
p16183
sS'required'
p16184
I01
sS'group_name'
p16185
Nsa(dp16186
S'description'
p16187
S'The viscosity coefficient\n'
p16188
sS'cpp_type'
p16189
S'double'
p16190
sS'default'
p16191
S'1'
p16192
sS'name'
p16193
S'coefficient'
p16194
sS'required'
p16195
I00
sS'group_name'
p16196
Nsa(dp16197
S'description'
p16198
S'The displacement component corresponding the variable this BC acts on.\n'
p16199
sS'cpp_type'
p16200
S'unsigned int'
p16201
sS'default'
p16202
g3
sS'name'
p16203
S'component'
p16204
sS'required'
p16205
I01
sS'group_name'
p16206
Nsa(dp16207
S'description'
p16208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16209
sS'cpp_type'
p16210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16211
sS'default'
p16212
g3
sS'name'
p16213
S'control_tags'
p16214
sS'required'
p16215
I00
sS'group_name'
p16216
S'Advanced'
p16217
sa(dp16218
S'description'
p16219
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16220
sS'cpp_type'
p16221
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16222
sS'default'
p16223
g3
sS'name'
p16224
S'diag_save_in'
p16225
sS'required'
p16226
I00
sS'group_name'
p16227
S'Advanced'
p16228
sa(dp16229
S'description'
p16230
S'Displacement in the x direction\n'
p16231
sS'cpp_type'
p16232
S'std::vector<VariableName>'
p16233
sS'default'
p16234
g3
sS'name'
p16235
S'disp_x'
p16236
sS'required'
p16237
I01
sS'group_name'
p16238
Nsa(dp16239
S'description'
p16240
S'Displacement in the y direction\n'
p16241
sS'cpp_type'
p16242
S'std::vector<VariableName>'
p16243
sS'default'
p16244
g3
sS'name'
p16245
S'disp_y'
p16246
sS'required'
p16247
I00
sS'group_name'
p16248
Nsa(dp16249
S'description'
p16250
S'Displacement in the z direction\n'
p16251
sS'cpp_type'
p16252
S'std::vector<VariableName>'
p16253
sS'default'
p16254
g3
sS'name'
p16255
S'disp_z'
p16256
sS'required'
p16257
I00
sS'group_name'
p16258
Nsa(dp16259
S'description'
p16260
S'Set the enabled status of the MooseObject.\n'
p16261
sS'cpp_type'
p16262
S'bool'
p16263
sS'default'
p16264
S'1'
p16265
sS'name'
p16266
S'enable'
p16267
sS'required'
p16268
I00
sS'group_name'
p16269
S'Advanced'
p16270
sa(dp16271
S'description'
p16272
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16273
sS'cpp_type'
p16274
S'bool'
p16275
sS'default'
p16276
S'1'
p16277
sS'name'
p16278
S'implicit'
p16279
sS'required'
p16280
I00
sS'group_name'
p16281
S'Advanced'
p16282
sa(dp16283
S'description'
p16284
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16285
sS'cpp_type'
p16286
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16287
sS'default'
p16288
g3
sS'name'
p16289
S'save_in'
p16290
sS'required'
p16291
I00
sS'group_name'
p16292
S'Advanced'
p16293
sa(dp16294
S'description'
p16295
S'The seed for the master random number generator\n'
p16296
sS'cpp_type'
p16297
S'unsigned int'
p16298
sS'default'
p16299
S'0'
p16300
sS'name'
p16301
S'seed'
p16302
sS'required'
p16303
I00
sS'group_name'
p16304
S'Advanced'
p16305
sa(dp16306
S'description'
p16307
g3
sS'cpp_type'
p16308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16309
sS'default'
p16310
S'DashpotBC'
p16311
sS'name'
p16312
S'type'
p16313
sS'required'
p16314
I00
sS'group_name'
p16315
Nsa(dp16316
S'description'
p16317
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16318
sS'cpp_type'
p16319
S'bool'
p16320
sS'default'
p16321
S'0'
p16322
sS'name'
p16323
S'use_displaced_mesh'
p16324
sS'required'
p16325
I00
sS'group_name'
p16326
S'Advanced'
p16327
sa(dp16328
S'description'
p16329
S'The name of the variable that this boundary condition applies to\n'
p16330
sS'cpp_type'
p16331
S'NonlinearVariableName'
p16332
sS'default'
p16333
g3
sS'name'
p16334
S'variable'
p16335
sS'required'
p16336
I01
sS'group_name'
p16337
NsasS'name'
p16338
S'/BCs/DashpotBC'
p16339
sa(dp16340
S'description'
p16341
g3
sS'subblocks'
p16342
NsS'parameters'
p16343
(lp16344
(dp16345
S'description'
p16346
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16347
sS'cpp_type'
p16348
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16349
sS'default'
p16350
g3
sS'name'
p16351
S'boundary'
p16352
sS'required'
p16353
I01
sS'group_name'
p16354
Nsa(dp16355
S'description'
p16356
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16357
sS'cpp_type'
p16358
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16359
sS'default'
p16360
g3
sS'name'
p16361
S'control_tags'
p16362
sS'required'
p16363
I00
sS'group_name'
p16364
S'Advanced'
p16365
sa(dp16366
S'description'
p16367
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16368
sS'cpp_type'
p16369
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16370
sS'default'
p16371
g3
sS'name'
p16372
S'diag_save_in'
p16373
sS'required'
p16374
I00
sS'group_name'
p16375
S'Advanced'
p16376
sa(dp16377
S'description'
p16378
S'Set the enabled status of the MooseObject.\n'
p16379
sS'cpp_type'
p16380
S'bool'
p16381
sS'default'
p16382
S'1'
p16383
sS'name'
p16384
S'enable'
p16385
sS'required'
p16386
I00
sS'group_name'
p16387
S'Advanced'
p16388
sa(dp16389
S'description'
p16390
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16391
sS'cpp_type'
p16392
S'bool'
p16393
sS'default'
p16394
S'1'
p16395
sS'name'
p16396
S'implicit'
p16397
sS'required'
p16398
I00
sS'group_name'
p16399
S'Advanced'
p16400
sa(dp16401
S'description'
p16402
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16403
sS'cpp_type'
p16404
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16405
sS'default'
p16406
g3
sS'name'
p16407
S'save_in'
p16408
sS'required'
p16409
I00
sS'group_name'
p16410
S'Advanced'
p16411
sa(dp16412
S'description'
p16413
S'The seed for the master random number generator\n'
p16414
sS'cpp_type'
p16415
S'unsigned int'
p16416
sS'default'
p16417
S'0'
p16418
sS'name'
p16419
S'seed'
p16420
sS'required'
p16421
I00
sS'group_name'
p16422
S'Advanced'
p16423
sa(dp16424
S'description'
p16425
g3
sS'cpp_type'
p16426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16427
sS'default'
p16428
S'DiffusionFluxBC'
p16429
sS'name'
p16430
S'type'
p16431
sS'required'
p16432
I00
sS'group_name'
p16433
Nsa(dp16434
S'description'
p16435
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16436
sS'cpp_type'
p16437
S'bool'
p16438
sS'default'
p16439
S'0'
p16440
sS'name'
p16441
S'use_displaced_mesh'
p16442
sS'required'
p16443
I00
sS'group_name'
p16444
S'Advanced'
p16445
sa(dp16446
S'description'
p16447
S'The name of the variable that this boundary condition applies to\n'
p16448
sS'cpp_type'
p16449
S'NonlinearVariableName'
p16450
sS'default'
p16451
g3
sS'name'
p16452
S'variable'
p16453
sS'required'
p16454
I01
sS'group_name'
p16455
NsasS'name'
p16456
S'/BCs/DiffusionFluxBC'
p16457
sa(dp16458
S'description'
p16459
g3
sS'subblocks'
p16460
NsS'parameters'
p16461
(lp16462
(dp16463
S'description'
p16464
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16465
sS'cpp_type'
p16466
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16467
sS'default'
p16468
g3
sS'name'
p16469
S'boundary'
p16470
sS'required'
p16471
I01
sS'group_name'
p16472
Nsa(dp16473
S'description'
p16474
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16475
sS'cpp_type'
p16476
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16477
sS'default'
p16478
g3
sS'name'
p16479
S'control_tags'
p16480
sS'required'
p16481
I00
sS'group_name'
p16482
S'Advanced'
p16483
sa(dp16484
S'description'
p16485
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16486
sS'cpp_type'
p16487
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16488
sS'default'
p16489
g3
sS'name'
p16490
S'diag_save_in'
p16491
sS'required'
p16492
I00
sS'group_name'
p16493
Nsa(dp16494
S'description'
p16495
S'Set the enabled status of the MooseObject.\n'
p16496
sS'cpp_type'
p16497
S'bool'
p16498
sS'default'
p16499
S'1'
p16500
sS'name'
p16501
S'enable'
p16502
sS'required'
p16503
I00
sS'group_name'
p16504
S'Advanced'
p16505
sa(dp16506
S'description'
p16507
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16508
sS'cpp_type'
p16509
S'bool'
p16510
sS'default'
p16511
S'1'
p16512
sS'name'
p16513
S'implicit'
p16514
sS'required'
p16515
I00
sS'group_name'
p16516
S'Advanced'
p16517
sa(dp16518
S'description'
p16519
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16520
sS'cpp_type'
p16521
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16522
sS'default'
p16523
g3
sS'name'
p16524
S'save_in'
p16525
sS'required'
p16526
I00
sS'group_name'
p16527
Nsa(dp16528
S'description'
p16529
S'The seed for the master random number generator\n'
p16530
sS'cpp_type'
p16531
S'unsigned int'
p16532
sS'default'
p16533
S'0'
p16534
sS'name'
p16535
S'seed'
p16536
sS'required'
p16537
I00
sS'group_name'
p16538
S'Advanced'
p16539
sa(dp16540
S'description'
p16541
g3
sS'cpp_type'
p16542
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16543
sS'default'
p16544
S'DirichletBC'
p16545
sS'name'
p16546
S'type'
p16547
sS'required'
p16548
I00
sS'group_name'
p16549
Nsa(dp16550
S'description'
p16551
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16552
sS'cpp_type'
p16553
S'bool'
p16554
sS'default'
p16555
S'0'
p16556
sS'name'
p16557
S'use_displaced_mesh'
p16558
sS'required'
p16559
I00
sS'group_name'
p16560
S'Advanced'
p16561
sa(dp16562
S'description'
p16563
S'Value of the BC\n'
p16564
sS'cpp_type'
p16565
S'double'
p16566
sS'default'
p16567
g3
sS'name'
p16568
S'value'
p16569
sS'required'
p16570
I01
sS'group_name'
p16571
Nsa(dp16572
S'description'
p16573
S'The name of the variable that this boundary condition applies to\n'
p16574
sS'cpp_type'
p16575
S'NonlinearVariableName'
p16576
sS'default'
p16577
g3
sS'name'
p16578
S'variable'
p16579
sS'required'
p16580
I01
sS'group_name'
p16581
NsasS'name'
p16582
S'/BCs/DirichletBC'
p16583
sa(dp16584
S'description'
p16585
g3
sS'subblocks'
p16586
NsS'parameters'
p16587
(lp16588
(dp16589
S'name'
p16590
S'angle_units'
p16591
sS'cpp_type'
p16592
S'MooseEnum'
p16593
sS'default'
p16594
g3
sS'description'
p16595
S'The units of the angle of rotation. Choices are:degrees radians\n'
p16596
sS'required'
p16597
I01
sS'options'
p16598
S'degrees radians'
p16599
sS'group_name'
p16600
Nsa(dp16601
S'description'
p16602
S'Direction of the axis of rotation\n'
p16603
sS'cpp_type'
p16604
S'libMesh::VectorValue<double>'
p16605
sS'default'
p16606
g3
sS'name'
p16607
S'axis_direction'
p16608
sS'required'
p16609
I01
sS'group_name'
p16610
Nsa(dp16611
S'description'
p16612
S'Origin of the axis of rotation\n'
p16613
sS'cpp_type'
p16614
S'libMesh::VectorValue<double>'
p16615
sS'default'
p16616
g3
sS'name'
p16617
S'axis_origin'
p16618
sS'required'
p16619
I01
sS'group_name'
p16620
Nsa(dp16621
S'description'
p16622
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16623
sS'cpp_type'
p16624
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16625
sS'default'
p16626
g3
sS'name'
p16627
S'boundary'
p16628
sS'required'
p16629
I01
sS'group_name'
p16630
Nsa(dp16631
S'description'
p16632
S'The component for the rotational displacement\n'
p16633
sS'cpp_type'
p16634
S'int'
p16635
sS'default'
p16636
g3
sS'name'
p16637
S'component'
p16638
sS'required'
p16639
I01
sS'group_name'
p16640
Nsa(dp16641
S'description'
p16642
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16643
sS'cpp_type'
p16644
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16645
sS'default'
p16646
g3
sS'name'
p16647
S'control_tags'
p16648
sS'required'
p16649
I00
sS'group_name'
p16650
S'Advanced'
p16651
sa(dp16652
S'description'
p16653
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16654
sS'cpp_type'
p16655
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16656
sS'default'
p16657
g3
sS'name'
p16658
S'diag_save_in'
p16659
sS'required'
p16660
I00
sS'group_name'
p16661
Nsa(dp16662
S'description'
p16663
S'Set the enabled status of the MooseObject.\n'
p16664
sS'cpp_type'
p16665
S'bool'
p16666
sS'default'
p16667
S'1'
p16668
sS'name'
p16669
S'enable'
p16670
sS'required'
p16671
I00
sS'group_name'
p16672
S'Advanced'
p16673
sa(dp16674
S'description'
p16675
S'The function providing the angle of rotation.\n'
p16676
sS'cpp_type'
p16677
S'FunctionName'
p16678
sS'default'
p16679
g3
sS'name'
p16680
S'function'
p16681
sS'required'
p16682
I01
sS'group_name'
p16683
Nsa(dp16684
S'description'
p16685
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16686
sS'cpp_type'
p16687
S'bool'
p16688
sS'default'
p16689
S'1'
p16690
sS'name'
p16691
S'implicit'
p16692
sS'required'
p16693
I00
sS'group_name'
p16694
S'Advanced'
p16695
sa(dp16696
S'description'
p16697
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16698
sS'cpp_type'
p16699
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16700
sS'default'
p16701
g3
sS'name'
p16702
S'save_in'
p16703
sS'required'
p16704
I00
sS'group_name'
p16705
Nsa(dp16706
S'description'
p16707
S'The seed for the master random number generator\n'
p16708
sS'cpp_type'
p16709
S'unsigned int'
p16710
sS'default'
p16711
S'0'
p16712
sS'name'
p16713
S'seed'
p16714
sS'required'
p16715
I00
sS'group_name'
p16716
S'Advanced'
p16717
sa(dp16718
S'description'
p16719
g3
sS'cpp_type'
p16720
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16721
sS'default'
p16722
S'DisplacementAboutAxis'
p16723
sS'name'
p16724
S'type'
p16725
sS'required'
p16726
I00
sS'group_name'
p16727
Nsa(dp16728
S'description'
p16729
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16730
sS'cpp_type'
p16731
S'bool'
p16732
sS'default'
p16733
S'1'
p16734
sS'name'
p16735
S'use_displaced_mesh'
p16736
sS'required'
p16737
I00
sS'group_name'
p16738
S'Advanced'
p16739
sa(dp16740
S'description'
p16741
S'The name of the variable that this boundary condition applies to\n'
p16742
sS'cpp_type'
p16743
S'NonlinearVariableName'
p16744
sS'default'
p16745
g3
sS'name'
p16746
S'variable'
p16747
sS'required'
p16748
I01
sS'group_name'
p16749
NsasS'name'
p16750
S'/BCs/DisplacementAboutAxis'
p16751
sa(dp16752
S'description'
p16753
g3
sS'subblocks'
p16754
NsS'parameters'
p16755
(lp16756
(dp16757
S'description'
p16758
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16759
sS'cpp_type'
p16760
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16761
sS'default'
p16762
g3
sS'name'
p16763
S'boundary'
p16764
sS'required'
p16765
I01
sS'group_name'
p16766
Nsa(dp16767
S'description'
p16768
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16769
sS'cpp_type'
p16770
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16771
sS'default'
p16772
g3
sS'name'
p16773
S'control_tags'
p16774
sS'required'
p16775
I00
sS'group_name'
p16776
S'Advanced'
p16777
sa(dp16778
S'description'
p16779
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16780
sS'cpp_type'
p16781
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16782
sS'default'
p16783
g3
sS'name'
p16784
S'diag_save_in'
p16785
sS'required'
p16786
I00
sS'group_name'
p16787
Nsa(dp16788
S'description'
p16789
S'Set the enabled status of the MooseObject.\n'
p16790
sS'cpp_type'
p16791
S'bool'
p16792
sS'default'
p16793
S'1'
p16794
sS'name'
p16795
S'enable'
p16796
sS'required'
p16797
I00
sS'group_name'
p16798
S'Advanced'
p16799
sa(dp16800
S'description'
p16801
S'The forcing function.\n'
p16802
sS'cpp_type'
p16803
S'FunctionName'
p16804
sS'default'
p16805
g3
sS'name'
p16806
S'function'
p16807
sS'required'
p16808
I01
sS'group_name'
p16809
Nsa(dp16810
S'description'
p16811
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16812
sS'cpp_type'
p16813
S'bool'
p16814
sS'default'
p16815
S'1'
p16816
sS'name'
p16817
S'implicit'
p16818
sS'required'
p16819
I00
sS'group_name'
p16820
S'Advanced'
p16821
sa(dp16822
S'description'
p16823
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16824
sS'cpp_type'
p16825
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16826
sS'default'
p16827
g3
sS'name'
p16828
S'save_in'
p16829
sS'required'
p16830
I00
sS'group_name'
p16831
Nsa(dp16832
S'description'
p16833
S'The seed for the master random number generator\n'
p16834
sS'cpp_type'
p16835
S'unsigned int'
p16836
sS'default'
p16837
S'0'
p16838
sS'name'
p16839
S'seed'
p16840
sS'required'
p16841
I00
sS'group_name'
p16842
S'Advanced'
p16843
sa(dp16844
S'description'
p16845
g3
sS'cpp_type'
p16846
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16847
sS'default'
p16848
S'FunctionDirichletBC'
p16849
sS'name'
p16850
S'type'
p16851
sS'required'
p16852
I00
sS'group_name'
p16853
Nsa(dp16854
S'description'
p16855
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16856
sS'cpp_type'
p16857
S'bool'
p16858
sS'default'
p16859
S'0'
p16860
sS'name'
p16861
S'use_displaced_mesh'
p16862
sS'required'
p16863
I00
sS'group_name'
p16864
S'Advanced'
p16865
sa(dp16866
S'description'
p16867
S'The name of the variable that this boundary condition applies to\n'
p16868
sS'cpp_type'
p16869
S'NonlinearVariableName'
p16870
sS'default'
p16871
g3
sS'name'
p16872
S'variable'
p16873
sS'required'
p16874
I01
sS'group_name'
p16875
NsasS'name'
p16876
S'/BCs/FunctionDirichletBC'
p16877
sa(dp16878
S'description'
p16879
g3
sS'subblocks'
p16880
NsS'parameters'
p16881
(lp16882
(dp16883
S'description'
p16884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16885
sS'cpp_type'
p16886
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16887
sS'default'
p16888
g3
sS'name'
p16889
S'boundary'
p16890
sS'required'
p16891
I01
sS'group_name'
p16892
Nsa(dp16893
S'description'
p16894
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16895
sS'cpp_type'
p16896
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16897
sS'default'
p16898
g3
sS'name'
p16899
S'control_tags'
p16900
sS'required'
p16901
I00
sS'group_name'
p16902
S'Advanced'
p16903
sa(dp16904
S'description'
p16905
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16906
sS'cpp_type'
p16907
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16908
sS'default'
p16909
g3
sS'name'
p16910
S'diag_save_in'
p16911
sS'required'
p16912
I00
sS'group_name'
p16913
S'Advanced'
p16914
sa(dp16915
S'description'
p16916
S'Set the enabled status of the MooseObject.\n'
p16917
sS'cpp_type'
p16918
S'bool'
p16919
sS'default'
p16920
S'1'
p16921
sS'name'
p16922
S'enable'
p16923
sS'required'
p16924
I00
sS'group_name'
p16925
S'Advanced'
p16926
sa(dp16927
S'description'
p16928
S'The function.\n'
p16929
sS'cpp_type'
p16930
S'FunctionName'
p16931
sS'default'
p16932
g3
sS'name'
p16933
S'function'
p16934
sS'required'
p16935
I01
sS'group_name'
p16936
Nsa(dp16937
S'description'
p16938
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16939
sS'cpp_type'
p16940
S'bool'
p16941
sS'default'
p16942
S'1'
p16943
sS'name'
p16944
S'implicit'
p16945
sS'required'
p16946
I00
sS'group_name'
p16947
S'Advanced'
p16948
sa(dp16949
S'description'
p16950
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16951
sS'cpp_type'
p16952
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16953
sS'default'
p16954
g3
sS'name'
p16955
S'save_in'
p16956
sS'required'
p16957
I00
sS'group_name'
p16958
S'Advanced'
p16959
sa(dp16960
S'description'
p16961
S'The seed for the master random number generator\n'
p16962
sS'cpp_type'
p16963
S'unsigned int'
p16964
sS'default'
p16965
S'0'
p16966
sS'name'
p16967
S'seed'
p16968
sS'required'
p16969
I00
sS'group_name'
p16970
S'Advanced'
p16971
sa(dp16972
S'description'
p16973
g3
sS'cpp_type'
p16974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16975
sS'default'
p16976
S'FunctionNeumannBC'
p16977
sS'name'
p16978
S'type'
p16979
sS'required'
p16980
I00
sS'group_name'
p16981
Nsa(dp16982
S'description'
p16983
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16984
sS'cpp_type'
p16985
S'bool'
p16986
sS'default'
p16987
S'0'
p16988
sS'name'
p16989
S'use_displaced_mesh'
p16990
sS'required'
p16991
I00
sS'group_name'
p16992
S'Advanced'
p16993
sa(dp16994
S'description'
p16995
S'The name of the variable that this boundary condition applies to\n'
p16996
sS'cpp_type'
p16997
S'NonlinearVariableName'
p16998
sS'default'
p16999
g3
sS'name'
p17000
S'variable'
p17001
sS'required'
p17002
I01
sS'group_name'
p17003
NsasS'name'
p17004
S'/BCs/FunctionNeumannBC'
p17005
sa(dp17006
S'description'
p17007
g3
sS'subblocks'
p17008
NsS'parameters'
p17009
(lp17010
(dp17011
S'description'
p17012
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17013
sS'cpp_type'
p17014
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17015
sS'default'
p17016
g3
sS'name'
p17017
S'boundary'
p17018
sS'required'
p17019
I01
sS'group_name'
p17020
Nsa(dp17021
S'description'
p17022
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17023
sS'cpp_type'
p17024
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17025
sS'default'
p17026
g3
sS'name'
p17027
S'control_tags'
p17028
sS'required'
p17029
I00
sS'group_name'
p17030
S'Advanced'
p17031
sa(dp17032
S'description'
p17033
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17034
sS'cpp_type'
p17035
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17036
sS'default'
p17037
g3
sS'name'
p17038
S'diag_save_in'
p17039
sS'required'
p17040
I00
sS'group_name'
p17041
S'Advanced'
p17042
sa(dp17043
S'description'
p17044
S'Set the enabled status of the MooseObject.\n'
p17045
sS'cpp_type'
p17046
S'bool'
p17047
sS'default'
p17048
S'1'
p17049
sS'name'
p17050
S'enable'
p17051
sS'required'
p17052
I00
sS'group_name'
p17053
S'Advanced'
p17054
sa(dp17055
S'description'
p17056
S'Forcing function\n'
p17057
sS'cpp_type'
p17058
S'FunctionName'
p17059
sS'default'
p17060
g3
sS'name'
p17061
S'function'
p17062
sS'required'
p17063
I01
sS'group_name'
p17064
Nsa(dp17065
S'description'
p17066
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17067
sS'cpp_type'
p17068
S'bool'
p17069
sS'default'
p17070
S'1'
p17071
sS'name'
p17072
S'implicit'
p17073
sS'required'
p17074
I00
sS'group_name'
p17075
S'Advanced'
p17076
sa(dp17077
S'description'
p17078
S'Penalty scalar\n'
p17079
sS'cpp_type'
p17080
S'double'
p17081
sS'default'
p17082
g3
sS'name'
p17083
S'penalty'
p17084
sS'required'
p17085
I01
sS'group_name'
p17086
Nsa(dp17087
S'description'
p17088
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17089
sS'cpp_type'
p17090
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17091
sS'default'
p17092
g3
sS'name'
p17093
S'save_in'
p17094
sS'required'
p17095
I00
sS'group_name'
p17096
S'Advanced'
p17097
sa(dp17098
S'description'
p17099
S'The seed for the master random number generator\n'
p17100
sS'cpp_type'
p17101
S'unsigned int'
p17102
sS'default'
p17103
S'0'
p17104
sS'name'
p17105
S'seed'
p17106
sS'required'
p17107
I00
sS'group_name'
p17108
S'Advanced'
p17109
sa(dp17110
S'description'
p17111
g3
sS'cpp_type'
p17112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17113
sS'default'
p17114
S'FunctionPenaltyDirichletBC'
p17115
sS'name'
p17116
S'type'
p17117
sS'required'
p17118
I00
sS'group_name'
p17119
Nsa(dp17120
S'description'
p17121
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17122
sS'cpp_type'
p17123
S'bool'
p17124
sS'default'
p17125
S'0'
p17126
sS'name'
p17127
S'use_displaced_mesh'
p17128
sS'required'
p17129
I00
sS'group_name'
p17130
S'Advanced'
p17131
sa(dp17132
S'description'
p17133
S'The name of the variable that this boundary condition applies to\n'
p17134
sS'cpp_type'
p17135
S'NonlinearVariableName'
p17136
sS'default'
p17137
g3
sS'name'
p17138
S'variable'
p17139
sS'required'
p17140
I01
sS'group_name'
p17141
NsasS'name'
p17142
S'/BCs/FunctionPenaltyDirichletBC'
p17143
sa(dp17144
S'description'
p17145
g3
sS'subblocks'
p17146
NsS'parameters'
p17147
(lp17148
(dp17149
S'description'
p17150
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17151
sS'cpp_type'
p17152
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17153
sS'default'
p17154
g3
sS'name'
p17155
S'boundary'
p17156
sS'required'
p17157
I01
sS'group_name'
p17158
Nsa(dp17159
S'description'
p17160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17161
sS'cpp_type'
p17162
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17163
sS'default'
p17164
g3
sS'name'
p17165
S'control_tags'
p17166
sS'required'
p17167
I00
sS'group_name'
p17168
S'Advanced'
p17169
sa(dp17170
S'description'
p17171
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17172
sS'cpp_type'
p17173
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17174
sS'default'
p17175
g3
sS'name'
p17176
S'diag_save_in'
p17177
sS'required'
p17178
I00
sS'group_name'
p17179
Nsa(dp17180
S'description'
p17181
S'Set the enabled status of the MooseObject.\n'
p17182
sS'cpp_type'
p17183
S'bool'
p17184
sS'default'
p17185
S'1'
p17186
sS'name'
p17187
S'enable'
p17188
sS'required'
p17189
I00
sS'group_name'
p17190
S'Advanced'
p17191
sa(dp17192
S'description'
p17193
S'The forcing function.\n'
p17194
sS'cpp_type'
p17195
S'FunctionName'
p17196
sS'default'
p17197
g3
sS'name'
p17198
S'function'
p17199
sS'required'
p17200
I01
sS'group_name'
p17201
Nsa(dp17202
S'description'
p17203
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17204
sS'cpp_type'
p17205
S'bool'
p17206
sS'default'
p17207
S'1'
p17208
sS'name'
p17209
S'implicit'
p17210
sS'required'
p17211
I00
sS'group_name'
p17212
S'Advanced'
p17213
sa(dp17214
S'description'
p17215
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17216
sS'cpp_type'
p17217
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17218
sS'default'
p17219
g3
sS'name'
p17220
S'save_in'
p17221
sS'required'
p17222
I00
sS'group_name'
p17223
Nsa(dp17224
S'description'
p17225
S'The seed for the master random number generator\n'
p17226
sS'cpp_type'
p17227
S'unsigned int'
p17228
sS'default'
p17229
S'0'
p17230
sS'name'
p17231
S'seed'
p17232
sS'required'
p17233
I00
sS'group_name'
p17234
S'Advanced'
p17235
sa(dp17236
S'description'
p17237
g3
sS'cpp_type'
p17238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17239
sS'default'
p17240
S'FunctionPresetBC'
p17241
sS'name'
p17242
S'type'
p17243
sS'required'
p17244
I00
sS'group_name'
p17245
Nsa(dp17246
S'description'
p17247
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17248
sS'cpp_type'
p17249
S'bool'
p17250
sS'default'
p17251
S'0'
p17252
sS'name'
p17253
S'use_displaced_mesh'
p17254
sS'required'
p17255
I00
sS'group_name'
p17256
S'Advanced'
p17257
sa(dp17258
S'description'
p17259
S'The name of the variable that this boundary condition applies to\n'
p17260
sS'cpp_type'
p17261
S'NonlinearVariableName'
p17262
sS'default'
p17263
g3
sS'name'
p17264
S'variable'
p17265
sS'required'
p17266
I01
sS'group_name'
p17267
NsasS'name'
p17268
S'/BCs/FunctionPresetBC'
p17269
sa(dp17270
S'description'
p17271
g3
sS'subblocks'
p17272
NsS'parameters'
p17273
(lp17274
(dp17275
S'description'
p17276
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17277
sS'cpp_type'
p17278
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17279
sS'default'
p17280
g3
sS'name'
p17281
S'boundary'
p17282
sS'required'
p17283
I01
sS'group_name'
p17284
Nsa(dp17285
S'description'
p17286
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17287
sS'cpp_type'
p17288
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17289
sS'default'
p17290
g3
sS'name'
p17291
S'control_tags'
p17292
sS'required'
p17293
I00
sS'group_name'
p17294
S'Advanced'
p17295
sa(dp17296
S'description'
p17297
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17298
sS'cpp_type'
p17299
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17300
sS'default'
p17301
g3
sS'name'
p17302
S'diag_save_in'
p17303
sS'required'
p17304
I00
sS'group_name'
p17305
Nsa(dp17306
S'description'
p17307
S'Set the enabled status of the MooseObject.\n'
p17308
sS'cpp_type'
p17309
S'bool'
p17310
sS'default'
p17311
S'1'
p17312
sS'name'
p17313
S'enable'
p17314
sS'required'
p17315
I00
sS'group_name'
p17316
S'Advanced'
p17317
sa(dp17318
S'description'
p17319
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17320
sS'cpp_type'
p17321
S'bool'
p17322
sS'default'
p17323
S'1'
p17324
sS'name'
p17325
S'implicit'
p17326
sS'required'
p17327
I00
sS'group_name'
p17328
S'Advanced'
p17329
sa(dp17330
S'description'
p17331
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17332
sS'cpp_type'
p17333
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17334
sS'default'
p17335
g3
sS'name'
p17336
S'save_in'
p17337
sS'required'
p17338
I00
sS'group_name'
p17339
Nsa(dp17340
S'description'
p17341
S'The seed for the master random number generator\n'
p17342
sS'cpp_type'
p17343
S'unsigned int'
p17344
sS'default'
p17345
S'0'
p17346
sS'name'
p17347
S'seed'
p17348
sS'required'
p17349
I00
sS'group_name'
p17350
S'Advanced'
p17351
sa(dp17352
S'description'
p17353
g3
sS'cpp_type'
p17354
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17355
sS'default'
p17356
S'MatchedValueBC'
p17357
sS'name'
p17358
S'type'
p17359
sS'required'
p17360
I00
sS'group_name'
p17361
Nsa(dp17362
S'description'
p17363
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17364
sS'cpp_type'
p17365
S'bool'
p17366
sS'default'
p17367
S'0'
p17368
sS'name'
p17369
S'use_displaced_mesh'
p17370
sS'required'
p17371
I00
sS'group_name'
p17372
S'Advanced'
p17373
sa(dp17374
S'description'
p17375
S'The variable whose value we are to match.\n'
p17376
sS'cpp_type'
p17377
S'std::vector<VariableName>'
p17378
sS'default'
p17379
g3
sS'name'
p17380
S'v'
p17381
sS'required'
p17382
I01
sS'group_name'
p17383
Nsa(dp17384
S'description'
p17385
S'The name of the variable that this boundary condition applies to\n'
p17386
sS'cpp_type'
p17387
S'NonlinearVariableName'
p17388
sS'default'
p17389
g3
sS'name'
p17390
S'variable'
p17391
sS'required'
p17392
I01
sS'group_name'
p17393
NsasS'name'
p17394
S'/BCs/MatchedValueBC'
p17395
sa(dp17396
S'description'
p17397
g3
sS'subblocks'
p17398
NsS'parameters'
p17399
(lp17400
(dp17401
S'description'
p17402
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17403
sS'cpp_type'
p17404
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17405
sS'default'
p17406
g3
sS'name'
p17407
S'boundary'
p17408
sS'required'
p17409
I01
sS'group_name'
p17410
Nsa(dp17411
S'description'
p17412
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17413
sS'cpp_type'
p17414
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17415
sS'default'
p17416
g3
sS'name'
p17417
S'control_tags'
p17418
sS'required'
p17419
I00
sS'group_name'
p17420
S'Advanced'
p17421
sa(dp17422
S'description'
p17423
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17424
sS'cpp_type'
p17425
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17426
sS'default'
p17427
g3
sS'name'
p17428
S'diag_save_in'
p17429
sS'required'
p17430
I00
sS'group_name'
p17431
S'Advanced'
p17432
sa(dp17433
S'description'
p17434
S'Set the enabled status of the MooseObject.\n'
p17435
sS'cpp_type'
p17436
S'bool'
p17437
sS'default'
p17438
S'1'
p17439
sS'name'
p17440
S'enable'
p17441
sS'required'
p17442
I00
sS'group_name'
p17443
S'Advanced'
p17444
sa(dp17445
S'description'
p17446
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17447
sS'cpp_type'
p17448
S'bool'
p17449
sS'default'
p17450
S'1'
p17451
sS'name'
p17452
S'implicit'
p17453
sS'required'
p17454
I00
sS'group_name'
p17455
S'Advanced'
p17456
sa(dp17457
S'description'
p17458
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17459
sS'cpp_type'
p17460
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17461
sS'default'
p17462
g3
sS'name'
p17463
S'save_in'
p17464
sS'required'
p17465
I00
sS'group_name'
p17466
S'Advanced'
p17467
sa(dp17468
S'description'
p17469
S'The seed for the master random number generator\n'
p17470
sS'cpp_type'
p17471
S'unsigned int'
p17472
sS'default'
p17473
S'0'
p17474
sS'name'
p17475
S'seed'
p17476
sS'required'
p17477
I00
sS'group_name'
p17478
S'Advanced'
p17479
sa(dp17480
S'description'
p17481
g3
sS'cpp_type'
p17482
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17483
sS'default'
p17484
S'NeumannBC'
p17485
sS'name'
p17486
S'type'
p17487
sS'required'
p17488
I00
sS'group_name'
p17489
Nsa(dp17490
S'description'
p17491
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17492
sS'cpp_type'
p17493
S'bool'
p17494
sS'default'
p17495
S'0'
p17496
sS'name'
p17497
S'use_displaced_mesh'
p17498
sS'required'
p17499
I00
sS'group_name'
p17500
S'Advanced'
p17501
sa(dp17502
S'description'
p17503
S'The value of the gradient on the boundary.\n'
p17504
sS'cpp_type'
p17505
S'double'
p17506
sS'default'
p17507
S'0'
p17508
sS'name'
p17509
S'value'
p17510
sS'required'
p17511
I00
sS'group_name'
p17512
Nsa(dp17513
S'description'
p17514
S'The name of the variable that this boundary condition applies to\n'
p17515
sS'cpp_type'
p17516
S'NonlinearVariableName'
p17517
sS'default'
p17518
g3
sS'name'
p17519
S'variable'
p17520
sS'required'
p17521
I01
sS'group_name'
p17522
NsasS'name'
p17523
S'/BCs/NeumannBC'
p17524
sa(dp17525
S'description'
p17526
g3
sS'subblocks'
p17527
NsS'parameters'
p17528
(lp17529
(dp17530
S'description'
p17531
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17532
sS'cpp_type'
p17533
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17534
sS'default'
p17535
g3
sS'name'
p17536
S'boundary'
p17537
sS'required'
p17538
I01
sS'group_name'
p17539
Nsa(dp17540
S'description'
p17541
S'Component of the Lagrange multiplier\n'
p17542
sS'cpp_type'
p17543
S'unsigned int'
p17544
sS'default'
p17545
g3
sS'name'
p17546
S'component'
p17547
sS'required'
p17548
I01
sS'group_name'
p17549
Nsa(dp17550
S'description'
p17551
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17552
sS'cpp_type'
p17553
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17554
sS'default'
p17555
g3
sS'name'
p17556
S'control_tags'
p17557
sS'required'
p17558
I00
sS'group_name'
p17559
S'Advanced'
p17560
sa(dp17561
S'description'
p17562
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17563
sS'cpp_type'
p17564
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17565
sS'default'
p17566
g3
sS'name'
p17567
S'diag_save_in'
p17568
sS'required'
p17569
I00
sS'group_name'
p17570
S'Advanced'
p17571
sa(dp17572
S'description'
p17573
S'Set the enabled status of the MooseObject.\n'
p17574
sS'cpp_type'
p17575
S'bool'
p17576
sS'default'
p17577
S'1'
p17578
sS'name'
p17579
S'enable'
p17580
sS'required'
p17581
I00
sS'group_name'
p17582
S'Advanced'
p17583
sa(dp17584
S'description'
p17585
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17586
sS'cpp_type'
p17587
S'bool'
p17588
sS'default'
p17589
S'1'
p17590
sS'name'
p17591
S'implicit'
p17592
sS'required'
p17593
I00
sS'group_name'
p17594
S'Advanced'
p17595
sa(dp17596
S'description'
p17597
S'Lagrange multiplier\n'
p17598
sS'cpp_type'
p17599
S'std::vector<VariableName>'
p17600
sS'default'
p17601
g3
sS'name'
p17602
S'lambda'
p17603
sS'required'
p17604
I01
sS'group_name'
p17605
Nsa(dp17606
S'description'
p17607
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17608
sS'cpp_type'
p17609
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17610
sS'default'
p17611
g3
sS'name'
p17612
S'save_in'
p17613
sS'required'
p17614
I00
sS'group_name'
p17615
S'Advanced'
p17616
sa(dp17617
S'description'
p17618
S'The seed for the master random number generator\n'
p17619
sS'cpp_type'
p17620
S'unsigned int'
p17621
sS'default'
p17622
S'0'
p17623
sS'name'
p17624
S'seed'
p17625
sS'required'
p17626
I00
sS'group_name'
p17627
S'Advanced'
p17628
sa(dp17629
S'description'
p17630
g3
sS'cpp_type'
p17631
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17632
sS'default'
p17633
S'OneDEqualValueConstraintBC'
p17634
sS'name'
p17635
S'type'
p17636
sS'required'
p17637
I00
sS'group_name'
p17638
Nsa(dp17639
S'description'
p17640
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17641
sS'cpp_type'
p17642
S'bool'
p17643
sS'default'
p17644
S'0'
p17645
sS'name'
p17646
S'use_displaced_mesh'
p17647
sS'required'
p17648
I00
sS'group_name'
p17649
S'Advanced'
p17650
sa(dp17651
S'description'
p17652
S'The name of the variable that this boundary condition applies to\n'
p17653
sS'cpp_type'
p17654
S'NonlinearVariableName'
p17655
sS'default'
p17656
g3
sS'name'
p17657
S'variable'
p17658
sS'required'
p17659
I01
sS'group_name'
p17660
Nsa(dp17661
S'description'
p17662
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p17663
sS'cpp_type'
p17664
S'double'
p17665
sS'default'
p17666
g3
sS'name'
p17667
S'vg'
p17668
sS'required'
p17669
I01
sS'group_name'
p17670
NsasS'name'
p17671
S'/BCs/OneDEqualValueConstraintBC'
p17672
sa(dp17673
S'description'
p17674
g3
sS'subblocks'
p17675
NsS'parameters'
p17676
(lp17677
(dp17678
S'description'
p17679
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17680
sS'cpp_type'
p17681
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17682
sS'default'
p17683
g3
sS'name'
p17684
S'boundary'
p17685
sS'required'
p17686
I01
sS'group_name'
p17687
Nsa(dp17688
S'description'
p17689
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17690
sS'cpp_type'
p17691
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17692
sS'default'
p17693
g3
sS'name'
p17694
S'control_tags'
p17695
sS'required'
p17696
I00
sS'group_name'
p17697
S'Advanced'
p17698
sa(dp17699
S'description'
p17700
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17701
sS'cpp_type'
p17702
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17703
sS'default'
p17704
g3
sS'name'
p17705
S'diag_save_in'
p17706
sS'required'
p17707
I00
sS'group_name'
p17708
S'Advanced'
p17709
sa(dp17710
S'description'
p17711
S'Set the enabled status of the MooseObject.\n'
p17712
sS'cpp_type'
p17713
S'bool'
p17714
sS'default'
p17715
S'1'
p17716
sS'name'
p17717
S'enable'
p17718
sS'required'
p17719
I00
sS'group_name'
p17720
S'Advanced'
p17721
sa(dp17722
S'description'
p17723
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17724
sS'cpp_type'
p17725
S'bool'
p17726
sS'default'
p17727
S'1'
p17728
sS'name'
p17729
S'implicit'
p17730
sS'required'
p17731
I00
sS'group_name'
p17732
S'Advanced'
p17733
sa(dp17734
S'description'
p17735
S'Penalty scalar\n'
p17736
sS'cpp_type'
p17737
S'double'
p17738
sS'default'
p17739
g3
sS'name'
p17740
S'penalty'
p17741
sS'required'
p17742
I01
sS'group_name'
p17743
Nsa(dp17744
S'description'
p17745
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17746
sS'cpp_type'
p17747
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17748
sS'default'
p17749
g3
sS'name'
p17750
S'save_in'
p17751
sS'required'
p17752
I00
sS'group_name'
p17753
S'Advanced'
p17754
sa(dp17755
S'description'
p17756
S'The seed for the master random number generator\n'
p17757
sS'cpp_type'
p17758
S'unsigned int'
p17759
sS'default'
p17760
S'0'
p17761
sS'name'
p17762
S'seed'
p17763
sS'required'
p17764
I00
sS'group_name'
p17765
S'Advanced'
p17766
sa(dp17767
S'description'
p17768
g3
sS'cpp_type'
p17769
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17770
sS'default'
p17771
S'PenaltyDirichletBC'
p17772
sS'name'
p17773
S'type'
p17774
sS'required'
p17775
I00
sS'group_name'
p17776
Nsa(dp17777
S'description'
p17778
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17779
sS'cpp_type'
p17780
S'bool'
p17781
sS'default'
p17782
S'0'
p17783
sS'name'
p17784
S'use_displaced_mesh'
p17785
sS'required'
p17786
I00
sS'group_name'
p17787
S'Advanced'
p17788
sa(dp17789
S'description'
p17790
S'Boundary value of the variable\n'
p17791
sS'cpp_type'
p17792
S'double'
p17793
sS'default'
p17794
S'0'
p17795
sS'name'
p17796
S'value'
p17797
sS'required'
p17798
I00
sS'group_name'
p17799
Nsa(dp17800
S'description'
p17801
S'The name of the variable that this boundary condition applies to\n'
p17802
sS'cpp_type'
p17803
S'NonlinearVariableName'
p17804
sS'default'
p17805
g3
sS'name'
p17806
S'variable'
p17807
sS'required'
p17808
I01
sS'group_name'
p17809
NsasS'name'
p17810
S'/BCs/PenaltyDirichletBC'
p17811
sa(dp17812
S'description'
p17813
g3
sS'subblocks'
p17814
(lp17815
(dp17816
S'description'
p17817
g3
sS'subblocks'
p17818
NsS'parameters'
p17819
(lp17820
(dp17821
S'description'
p17822
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p17823
sS'cpp_type'
p17824
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17825
sS'default'
p17826
g3
sS'name'
p17827
S'auto_direction'
p17828
sS'required'
p17829
I00
sS'group_name'
p17830
Nsa(dp17831
S'description'
p17832
S'Functions that specify the inverse transformation\n'
p17833
sS'cpp_type'
p17834
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17835
sS'default'
p17836
g3
sS'name'
p17837
S'inv_transform_func'
p17838
sS'required'
p17839
I00
sS'group_name'
p17840
Nsa(dp17841
S'description'
p17842
S'Boundary ID associated with the primary boundary.\n'
p17843
sS'cpp_type'
p17844
S'BoundaryName'
p17845
sS'default'
p17846
g3
sS'name'
p17847
S'primary'
p17848
sS'required'
p17849
I00
sS'group_name'
p17850
Nsa(dp17851
S'description'
p17852
S'Boundary ID associated with the secondary boundary.\n'
p17853
sS'cpp_type'
p17854
S'BoundaryName'
p17855
sS'default'
p17856
g3
sS'name'
p17857
S'secondary'
p17858
sS'required'
p17859
I00
sS'group_name'
p17860
Nsa(dp17861
S'description'
p17862
S'Functions that specify the transformation\n'
p17863
sS'cpp_type'
p17864
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17865
sS'default'
p17866
g3
sS'name'
p17867
S'transform_func'
p17868
sS'required'
p17869
I00
sS'group_name'
p17870
Nsa(dp17871
S'description'
p17872
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p17873
sS'cpp_type'
p17874
S'libMesh::VectorValue<double>'
p17875
sS'default'
p17876
g3
sS'name'
p17877
S'translation'
p17878
sS'required'
p17879
I00
sS'group_name'
p17880
Nsa(dp17881
S'description'
p17882
S'Variable for the periodic boundary\n'
p17883
sS'cpp_type'
p17884
S'std::vector<VariableName, std::allocator<VariableName> >'
p17885
sS'default'
p17886
g3
sS'name'
p17887
S'variable'
p17888
sS'required'
p17889
I00
sS'group_name'
p17890
NsasS'name'
p17891
S'/BCs/Periodic/*'
p17892
sasS'parameters'
p17893
NsS'name'
p17894
S'/BCs/Periodic'
p17895
sa(dp17896
S'description'
p17897
g3
sS'subblocks'
p17898
NsS'parameters'
p17899
(lp17900
(dp17901
S'description'
p17902
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17903
sS'cpp_type'
p17904
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17905
sS'default'
p17906
g3
sS'name'
p17907
S'boundary'
p17908
sS'required'
p17909
I01
sS'group_name'
p17910
Nsa(dp17911
S'description'
p17912
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17913
sS'cpp_type'
p17914
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17915
sS'default'
p17916
g3
sS'name'
p17917
S'control_tags'
p17918
sS'required'
p17919
I00
sS'group_name'
p17920
S'Advanced'
p17921
sa(dp17922
S'description'
p17923
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17924
sS'cpp_type'
p17925
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17926
sS'default'
p17927
g3
sS'name'
p17928
S'diag_save_in'
p17929
sS'required'
p17930
I00
sS'group_name'
p17931
Nsa(dp17932
S'description'
p17933
S'Set the enabled status of the MooseObject.\n'
p17934
sS'cpp_type'
p17935
S'bool'
p17936
sS'default'
p17937
S'1'
p17938
sS'name'
p17939
S'enable'
p17940
sS'required'
p17941
I00
sS'group_name'
p17942
S'Advanced'
p17943
sa(dp17944
S'description'
p17945
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17946
sS'cpp_type'
p17947
S'bool'
p17948
sS'default'
p17949
S'1'
p17950
sS'name'
p17951
S'implicit'
p17952
sS'required'
p17953
I00
sS'group_name'
p17954
S'Advanced'
p17955
sa(dp17956
S'description'
p17957
S'The postprocessor to set the value to on the boundary.\n'
p17958
sS'cpp_type'
p17959
S'PostprocessorName'
p17960
sS'default'
p17961
g3
sS'name'
p17962
S'postprocessor'
p17963
sS'required'
p17964
I01
sS'group_name'
p17965
Nsa(dp17966
S'description'
p17967
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17968
sS'cpp_type'
p17969
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17970
sS'default'
p17971
g3
sS'name'
p17972
S'save_in'
p17973
sS'required'
p17974
I00
sS'group_name'
p17975
Nsa(dp17976
S'description'
p17977
S'The seed for the master random number generator\n'
p17978
sS'cpp_type'
p17979
S'unsigned int'
p17980
sS'default'
p17981
S'0'
p17982
sS'name'
p17983
S'seed'
p17984
sS'required'
p17985
I00
sS'group_name'
p17986
S'Advanced'
p17987
sa(dp17988
S'description'
p17989
g3
sS'cpp_type'
p17990
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17991
sS'default'
p17992
S'PostprocessorDirichletBC'
p17993
sS'name'
p17994
S'type'
p17995
sS'required'
p17996
I00
sS'group_name'
p17997
Nsa(dp17998
S'description'
p17999
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18000
sS'cpp_type'
p18001
S'bool'
p18002
sS'default'
p18003
S'0'
p18004
sS'name'
p18005
S'use_displaced_mesh'
p18006
sS'required'
p18007
I00
sS'group_name'
p18008
S'Advanced'
p18009
sa(dp18010
S'description'
p18011
S'The name of the variable that this boundary condition applies to\n'
p18012
sS'cpp_type'
p18013
S'NonlinearVariableName'
p18014
sS'default'
p18015
g3
sS'name'
p18016
S'variable'
p18017
sS'required'
p18018
I01
sS'group_name'
p18019
NsasS'name'
p18020
S'/BCs/PostprocessorDirichletBC'
p18021
sa(dp18022
S'description'
p18023
g3
sS'subblocks'
p18024
NsS'parameters'
p18025
(lp18026
(dp18027
S'description'
p18028
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18029
sS'cpp_type'
p18030
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18031
sS'default'
p18032
g3
sS'name'
p18033
S'boundary'
p18034
sS'required'
p18035
I01
sS'group_name'
p18036
Nsa(dp18037
S'description'
p18038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18039
sS'cpp_type'
p18040
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18041
sS'default'
p18042
g3
sS'name'
p18043
S'control_tags'
p18044
sS'required'
p18045
I00
sS'group_name'
p18046
S'Advanced'
p18047
sa(dp18048
S'description'
p18049
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18050
sS'cpp_type'
p18051
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18052
sS'default'
p18053
g3
sS'name'
p18054
S'diag_save_in'
p18055
sS'required'
p18056
I00
sS'group_name'
p18057
S'Advanced'
p18058
sa(dp18059
S'description'
p18060
S'Set the enabled status of the MooseObject.\n'
p18061
sS'cpp_type'
p18062
S'bool'
p18063
sS'default'
p18064
S'1'
p18065
sS'name'
p18066
S'enable'
p18067
sS'required'
p18068
I00
sS'group_name'
p18069
S'Advanced'
p18070
sa(dp18071
S'description'
p18072
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18073
sS'cpp_type'
p18074
S'bool'
p18075
sS'default'
p18076
S'1'
p18077
sS'name'
p18078
S'implicit'
p18079
sS'required'
p18080
I00
sS'group_name'
p18081
S'Advanced'
p18082
sa(dp18083
S'description'
p18084
S'The postprocessor to use for value of the gradient on the boundary.\n'
p18085
sS'cpp_type'
p18086
S'PostprocessorName'
p18087
sS'default'
p18088
S'0'
p18089
sS'name'
p18090
S'postprocessor'
p18091
sS'required'
p18092
I00
sS'group_name'
p18093
Nsa(dp18094
S'description'
p18095
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18096
sS'cpp_type'
p18097
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18098
sS'default'
p18099
g3
sS'name'
p18100
S'save_in'
p18101
sS'required'
p18102
I00
sS'group_name'
p18103
S'Advanced'
p18104
sa(dp18105
S'description'
p18106
S'The seed for the master random number generator\n'
p18107
sS'cpp_type'
p18108
S'unsigned int'
p18109
sS'default'
p18110
S'0'
p18111
sS'name'
p18112
S'seed'
p18113
sS'required'
p18114
I00
sS'group_name'
p18115
S'Advanced'
p18116
sa(dp18117
S'description'
p18118
g3
sS'cpp_type'
p18119
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18120
sS'default'
p18121
S'PostprocessorNeumannBC'
p18122
sS'name'
p18123
S'type'
p18124
sS'required'
p18125
I00
sS'group_name'
p18126
Nsa(dp18127
S'description'
p18128
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18129
sS'cpp_type'
p18130
S'bool'
p18131
sS'default'
p18132
S'0'
p18133
sS'name'
p18134
S'use_displaced_mesh'
p18135
sS'required'
p18136
I00
sS'group_name'
p18137
S'Advanced'
p18138
sa(dp18139
S'description'
p18140
S'The name of the variable that this boundary condition applies to\n'
p18141
sS'cpp_type'
p18142
S'NonlinearVariableName'
p18143
sS'default'
p18144
g3
sS'name'
p18145
S'variable'
p18146
sS'required'
p18147
I01
sS'group_name'
p18148
NsasS'name'
p18149
S'/BCs/PostprocessorNeumannBC'
p18150
sa(dp18151
S'description'
p18152
S'Prescribe acceleration on a given boundary in a given direction\n'
p18153
sS'subblocks'
p18154
NsS'parameters'
p18155
(lp18156
(dp18157
S'description'
p18158
S'The acceleration variable.\n'
p18159
sS'cpp_type'
p18160
S'std::vector<VariableName>'
p18161
sS'default'
p18162
g3
sS'name'
p18163
S'acceleration'
p18164
sS'required'
p18165
I01
sS'group_name'
p18166
Nsa(dp18167
S'description'
p18168
S'beta parameter for Newmark time integration.\n'
p18169
sS'cpp_type'
p18170
S'double'
p18171
sS'default'
p18172
g3
sS'name'
p18173
S'beta'
p18174
sS'required'
p18175
I01
sS'group_name'
p18176
Nsa(dp18177
S'description'
p18178
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18179
sS'cpp_type'
p18180
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18181
sS'default'
p18182
g3
sS'name'
p18183
S'boundary'
p18184
sS'required'
p18185
I01
sS'group_name'
p18186
Nsa(dp18187
S'description'
p18188
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18189
sS'cpp_type'
p18190
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18191
sS'default'
p18192
g3
sS'name'
p18193
S'control_tags'
p18194
sS'required'
p18195
I00
sS'group_name'
p18196
S'Advanced'
p18197
sa(dp18198
S'description'
p18199
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18200
sS'cpp_type'
p18201
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18202
sS'default'
p18203
g3
sS'name'
p18204
S'diag_save_in'
p18205
sS'required'
p18206
I00
sS'group_name'
p18207
Nsa(dp18208
S'description'
p18209
S'Set the enabled status of the MooseObject.\n'
p18210
sS'cpp_type'
p18211
S'bool'
p18212
sS'default'
p18213
S'1'
p18214
sS'name'
p18215
S'enable'
p18216
sS'required'
p18217
I00
sS'group_name'
p18218
S'Advanced'
p18219
sa(dp18220
S'description'
p18221
S'Function describing the velocity.\n'
p18222
sS'cpp_type'
p18223
S'FunctionName'
p18224
sS'default'
p18225
S'1'
p18226
sS'name'
p18227
S'function'
p18228
sS'required'
p18229
I00
sS'group_name'
p18230
Nsa(dp18231
S'description'
p18232
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18233
sS'cpp_type'
p18234
S'bool'
p18235
sS'default'
p18236
S'1'
p18237
sS'name'
p18238
S'implicit'
p18239
sS'required'
p18240
I00
sS'group_name'
p18241
S'Advanced'
p18242
sa(dp18243
S'description'
p18244
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18245
sS'cpp_type'
p18246
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18247
sS'default'
p18248
g3
sS'name'
p18249
S'save_in'
p18250
sS'required'
p18251
I00
sS'group_name'
p18252
Nsa(dp18253
S'description'
p18254
S'Scale factor if function is given.\n'
p18255
sS'cpp_type'
p18256
S'double'
p18257
sS'default'
p18258
S'1'
p18259
sS'name'
p18260
S'scale_factor'
p18261
sS'required'
p18262
I00
sS'group_name'
p18263
Nsa(dp18264
S'description'
p18265
S'The seed for the master random number generator\n'
p18266
sS'cpp_type'
p18267
S'unsigned int'
p18268
sS'default'
p18269
S'0'
p18270
sS'name'
p18271
S'seed'
p18272
sS'required'
p18273
I00
sS'group_name'
p18274
S'Advanced'
p18275
sa(dp18276
S'description'
p18277
g3
sS'cpp_type'
p18278
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18279
sS'default'
p18280
S'PresetAcceleration'
p18281
sS'name'
p18282
S'type'
p18283
sS'required'
p18284
I00
sS'group_name'
p18285
Nsa(dp18286
S'description'
p18287
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18288
sS'cpp_type'
p18289
S'bool'
p18290
sS'default'
p18291
S'0'
p18292
sS'name'
p18293
S'use_displaced_mesh'
p18294
sS'required'
p18295
I00
sS'group_name'
p18296
S'Advanced'
p18297
sa(dp18298
S'description'
p18299
S'The name of the variable that this boundary condition applies to\n'
p18300
sS'cpp_type'
p18301
S'NonlinearVariableName'
p18302
sS'default'
p18303
g3
sS'name'
p18304
S'variable'
p18305
sS'required'
p18306
I01
sS'group_name'
p18307
Nsa(dp18308
S'description'
p18309
S'The velocity variable.\n'
p18310
sS'cpp_type'
p18311
S'std::vector<VariableName>'
p18312
sS'default'
p18313
g3
sS'name'
p18314
S'velocity'
p18315
sS'required'
p18316
I01
sS'group_name'
p18317
NsasS'name'
p18318
S'/BCs/PresetAcceleration'
p18319
sa(dp18320
S'description'
p18321
g3
sS'subblocks'
p18322
NsS'parameters'
p18323
(lp18324
(dp18325
S'description'
p18326
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18327
sS'cpp_type'
p18328
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18329
sS'default'
p18330
g3
sS'name'
p18331
S'boundary'
p18332
sS'required'
p18333
I01
sS'group_name'
p18334
Nsa(dp18335
S'description'
p18336
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18337
sS'cpp_type'
p18338
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18339
sS'default'
p18340
g3
sS'name'
p18341
S'control_tags'
p18342
sS'required'
p18343
I00
sS'group_name'
p18344
S'Advanced'
p18345
sa(dp18346
S'description'
p18347
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18348
sS'cpp_type'
p18349
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18350
sS'default'
p18351
g3
sS'name'
p18352
S'diag_save_in'
p18353
sS'required'
p18354
I00
sS'group_name'
p18355
Nsa(dp18356
S'description'
p18357
S'Set the enabled status of the MooseObject.\n'
p18358
sS'cpp_type'
p18359
S'bool'
p18360
sS'default'
p18361
S'1'
p18362
sS'name'
p18363
S'enable'
p18364
sS'required'
p18365
I00
sS'group_name'
p18366
S'Advanced'
p18367
sa(dp18368
S'description'
p18369
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18370
sS'cpp_type'
p18371
S'bool'
p18372
sS'default'
p18373
S'1'
p18374
sS'name'
p18375
S'implicit'
p18376
sS'required'
p18377
I00
sS'group_name'
p18378
S'Advanced'
p18379
sa(dp18380
S'description'
p18381
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18382
sS'cpp_type'
p18383
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18384
sS'default'
p18385
g3
sS'name'
p18386
S'save_in'
p18387
sS'required'
p18388
I00
sS'group_name'
p18389
Nsa(dp18390
S'description'
p18391
S'The seed for the master random number generator\n'
p18392
sS'cpp_type'
p18393
S'unsigned int'
p18394
sS'default'
p18395
S'0'
p18396
sS'name'
p18397
S'seed'
p18398
sS'required'
p18399
I00
sS'group_name'
p18400
S'Advanced'
p18401
sa(dp18402
S'description'
p18403
g3
sS'cpp_type'
p18404
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18405
sS'default'
p18406
S'PresetBC'
p18407
sS'name'
p18408
S'type'
p18409
sS'required'
p18410
I00
sS'group_name'
p18411
Nsa(dp18412
S'description'
p18413
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18414
sS'cpp_type'
p18415
S'bool'
p18416
sS'default'
p18417
S'0'
p18418
sS'name'
p18419
S'use_displaced_mesh'
p18420
sS'required'
p18421
I00
sS'group_name'
p18422
S'Advanced'
p18423
sa(dp18424
S'description'
p18425
S'Value of the BC\n'
p18426
sS'cpp_type'
p18427
S'double'
p18428
sS'default'
p18429
g3
sS'name'
p18430
S'value'
p18431
sS'required'
p18432
I01
sS'group_name'
p18433
Nsa(dp18434
S'description'
p18435
S'The name of the variable that this boundary condition applies to\n'
p18436
sS'cpp_type'
p18437
S'NonlinearVariableName'
p18438
sS'default'
p18439
g3
sS'name'
p18440
S'variable'
p18441
sS'required'
p18442
I01
sS'group_name'
p18443
NsasS'name'
p18444
S'/BCs/PresetBC'
p18445
sa(dp18446
S'description'
p18447
S'Prescribe the displacement on a given boundary in a given direction.\n'
p18448
sS'subblocks'
p18449
NsS'parameters'
p18450
(lp18451
(dp18452
S'description'
p18453
S'The acceleration variable.\n'
p18454
sS'cpp_type'
p18455
S'std::vector<VariableName>'
p18456
sS'default'
p18457
g3
sS'name'
p18458
S'acceleration'
p18459
sS'required'
p18460
I01
sS'group_name'
p18461
Nsa(dp18462
S'description'
p18463
S'beta parameter for Newmark time integration.\n'
p18464
sS'cpp_type'
p18465
S'double'
p18466
sS'default'
p18467
g3
sS'name'
p18468
S'beta'
p18469
sS'required'
p18470
I01
sS'group_name'
p18471
Nsa(dp18472
S'description'
p18473
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18474
sS'cpp_type'
p18475
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18476
sS'default'
p18477
g3
sS'name'
p18478
S'boundary'
p18479
sS'required'
p18480
I01
sS'group_name'
p18481
Nsa(dp18482
S'description'
p18483
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18484
sS'cpp_type'
p18485
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18486
sS'default'
p18487
g3
sS'name'
p18488
S'control_tags'
p18489
sS'required'
p18490
I00
sS'group_name'
p18491
S'Advanced'
p18492
sa(dp18493
S'description'
p18494
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18495
sS'cpp_type'
p18496
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18497
sS'default'
p18498
g3
sS'name'
p18499
S'diag_save_in'
p18500
sS'required'
p18501
I00
sS'group_name'
p18502
Nsa(dp18503
S'description'
p18504
S'Set the enabled status of the MooseObject.\n'
p18505
sS'cpp_type'
p18506
S'bool'
p18507
sS'default'
p18508
S'1'
p18509
sS'name'
p18510
S'enable'
p18511
sS'required'
p18512
I00
sS'group_name'
p18513
S'Advanced'
p18514
sa(dp18515
S'description'
p18516
S'Function describing the displacement.\n'
p18517
sS'cpp_type'
p18518
S'FunctionName'
p18519
sS'default'
p18520
S'1'
p18521
sS'name'
p18522
S'function'
p18523
sS'required'
p18524
I00
sS'group_name'
p18525
Nsa(dp18526
S'description'
p18527
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18528
sS'cpp_type'
p18529
S'bool'
p18530
sS'default'
p18531
S'1'
p18532
sS'name'
p18533
S'implicit'
p18534
sS'required'
p18535
I00
sS'group_name'
p18536
S'Advanced'
p18537
sa(dp18538
S'description'
p18539
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18540
sS'cpp_type'
p18541
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18542
sS'default'
p18543
g3
sS'name'
p18544
S'save_in'
p18545
sS'required'
p18546
I00
sS'group_name'
p18547
Nsa(dp18548
S'description'
p18549
S'Scale factor if function is given.\n'
p18550
sS'cpp_type'
p18551
S'double'
p18552
sS'default'
p18553
S'1'
p18554
sS'name'
p18555
S'scale_factor'
p18556
sS'required'
p18557
I00
sS'group_name'
p18558
Nsa(dp18559
S'description'
p18560
S'The seed for the master random number generator\n'
p18561
sS'cpp_type'
p18562
S'unsigned int'
p18563
sS'default'
p18564
S'0'
p18565
sS'name'
p18566
S'seed'
p18567
sS'required'
p18568
I00
sS'group_name'
p18569
S'Advanced'
p18570
sa(dp18571
S'description'
p18572
g3
sS'cpp_type'
p18573
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18574
sS'default'
p18575
S'PresetDisplacement'
p18576
sS'name'
p18577
S'type'
p18578
sS'required'
p18579
I00
sS'group_name'
p18580
Nsa(dp18581
S'description'
p18582
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18583
sS'cpp_type'
p18584
S'bool'
p18585
sS'default'
p18586
S'0'
p18587
sS'name'
p18588
S'use_displaced_mesh'
p18589
sS'required'
p18590
I00
sS'group_name'
p18591
S'Advanced'
p18592
sa(dp18593
S'description'
p18594
S'The name of the variable that this boundary condition applies to\n'
p18595
sS'cpp_type'
p18596
S'NonlinearVariableName'
p18597
sS'default'
p18598
g3
sS'name'
p18599
S'variable'
p18600
sS'required'
p18601
I01
sS'group_name'
p18602
Nsa(dp18603
S'description'
p18604
S'The velocity variable.\n'
p18605
sS'cpp_type'
p18606
S'std::vector<VariableName>'
p18607
sS'default'
p18608
g3
sS'name'
p18609
S'velocity'
p18610
sS'required'
p18611
I01
sS'group_name'
p18612
NsasS'name'
p18613
S'/BCs/PresetDisplacement'
p18614
sa(dp18615
S'description'
p18616
g3
sS'subblocks'
p18617
NsS'parameters'
p18618
(lp18619
(dp18620
S'description'
p18621
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18622
sS'cpp_type'
p18623
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18624
sS'default'
p18625
g3
sS'name'
p18626
S'boundary'
p18627
sS'required'
p18628
I01
sS'group_name'
p18629
Nsa(dp18630
S'description'
p18631
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18632
sS'cpp_type'
p18633
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18634
sS'default'
p18635
g3
sS'name'
p18636
S'control_tags'
p18637
sS'required'
p18638
I00
sS'group_name'
p18639
S'Advanced'
p18640
sa(dp18641
S'description'
p18642
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18643
sS'cpp_type'
p18644
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18645
sS'default'
p18646
g3
sS'name'
p18647
S'diag_save_in'
p18648
sS'required'
p18649
I00
sS'group_name'
p18650
Nsa(dp18651
S'description'
p18652
S'Set the enabled status of the MooseObject.\n'
p18653
sS'cpp_type'
p18654
S'bool'
p18655
sS'default'
p18656
S'1'
p18657
sS'name'
p18658
S'enable'
p18659
sS'required'
p18660
I00
sS'group_name'
p18661
S'Advanced'
p18662
sa(dp18663
S'description'
p18664
S'Function describing the velocity.\n'
p18665
sS'cpp_type'
p18666
S'FunctionName'
p18667
sS'default'
p18668
S'1'
p18669
sS'name'
p18670
S'function'
p18671
sS'required'
p18672
I00
sS'group_name'
p18673
Nsa(dp18674
S'description'
p18675
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18676
sS'cpp_type'
p18677
S'bool'
p18678
sS'default'
p18679
S'1'
p18680
sS'name'
p18681
S'implicit'
p18682
sS'required'
p18683
I00
sS'group_name'
p18684
S'Advanced'
p18685
sa(dp18686
S'description'
p18687
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18688
sS'cpp_type'
p18689
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18690
sS'default'
p18691
g3
sS'name'
p18692
S'save_in'
p18693
sS'required'
p18694
I00
sS'group_name'
p18695
Nsa(dp18696
S'description'
p18697
S'The seed for the master random number generator\n'
p18698
sS'cpp_type'
p18699
S'unsigned int'
p18700
sS'default'
p18701
S'0'
p18702
sS'name'
p18703
S'seed'
p18704
sS'required'
p18705
I00
sS'group_name'
p18706
S'Advanced'
p18707
sa(dp18708
S'description'
p18709
g3
sS'cpp_type'
p18710
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18711
sS'default'
p18712
S'PresetVelocity'
p18713
sS'name'
p18714
S'type'
p18715
sS'required'
p18716
I00
sS'group_name'
p18717
Nsa(dp18718
S'description'
p18719
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18720
sS'cpp_type'
p18721
S'bool'
p18722
sS'default'
p18723
S'0'
p18724
sS'name'
p18725
S'use_displaced_mesh'
p18726
sS'required'
p18727
I00
sS'group_name'
p18728
S'Advanced'
p18729
sa(dp18730
S'description'
p18731
S'The name of the variable that this boundary condition applies to\n'
p18732
sS'cpp_type'
p18733
S'NonlinearVariableName'
p18734
sS'default'
p18735
g3
sS'name'
p18736
S'variable'
p18737
sS'required'
p18738
I01
sS'group_name'
p18739
Nsa(dp18740
S'description'
p18741
S'Value of the velocity.  Used as scale factor if function is given.\n'
p18742
sS'cpp_type'
p18743
S'double'
p18744
sS'default'
p18745
S'1'
p18746
sS'name'
p18747
S'velocity'
p18748
sS'required'
p18749
I00
sS'group_name'
p18750
NsasS'name'
p18751
S'/BCs/PresetVelocity'
p18752
sa(dp18753
S'description'
p18754
S'Applies a pressure on a given boundary in a given direction\n'
p18755
sS'subblocks'
p18756
(lp18757
(dp18758
S'description'
p18759
g3
sS'subblocks'
p18760
NsS'parameters'
p18761
(lp18762
(dp18763
S'description'
p18764
S'alpha parameter for HHT time integration\n'
p18765
sS'cpp_type'
p18766
S'double'
p18767
sS'default'
p18768
S'0'
p18769
sS'name'
p18770
S'alpha'
p18771
sS'required'
p18772
I00
sS'group_name'
p18773
Nsa(dp18774
S'description'
p18775
S'The list of boundary IDs from the mesh where the pressure will be applied\n'
p18776
sS'cpp_type'
p18777
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18778
sS'default'
p18779
g3
sS'name'
p18780
S'boundary'
p18781
sS'required'
p18782
I01
sS'group_name'
p18783
Nsa(dp18784
S'description'
p18785
S'The x displacement\n'
p18786
sS'cpp_type'
p18787
S'NonlinearVariableName'
p18788
sS'default'
p18789
g3
sS'name'
p18790
S'disp_x'
p18791
sS'required'
p18792
I00
sS'group_name'
p18793
Nsa(dp18794
S'description'
p18795
S'The y displacement\n'
p18796
sS'cpp_type'
p18797
S'NonlinearVariableName'
p18798
sS'default'
p18799
g3
sS'name'
p18800
S'disp_y'
p18801
sS'required'
p18802
I00
sS'group_name'
p18803
Nsa(dp18804
S'description'
p18805
S'The z displacement\n'
p18806
sS'cpp_type'
p18807
S'NonlinearVariableName'
p18808
sS'default'
p18809
g3
sS'name'
p18810
S'disp_z'
p18811
sS'required'
p18812
I00
sS'group_name'
p18813
Nsa(dp18814
S'description'
p18815
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p18816
sS'cpp_type'
p18817
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p18818
sS'default'
p18819
g3
sS'name'
p18820
S'displacements'
p18821
sS'required'
p18822
I00
sS'group_name'
p18823
Nsa(dp18824
S'description'
p18825
S'The factor to use in computing the pressure\n'
p18826
sS'cpp_type'
p18827
S'double'
p18828
sS'default'
p18829
S'1'
p18830
sS'name'
p18831
S'factor'
p18832
sS'required'
p18833
I00
sS'group_name'
p18834
Nsa(dp18835
S'description'
p18836
S'The function that describes the pressure\n'
p18837
sS'cpp_type'
p18838
S'FunctionName'
p18839
sS'default'
p18840
g3
sS'name'
p18841
S'function'
p18842
sS'required'
p18843
I00
sS'group_name'
p18844
Nsa(dp18845
S'description'
p18846
S'The save_in variables for x displacement\n'
p18847
sS'cpp_type'
p18848
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18849
sS'default'
p18850
g3
sS'name'
p18851
S'save_in_disp_x'
p18852
sS'required'
p18853
I00
sS'group_name'
p18854
Nsa(dp18855
S'description'
p18856
S'The save_in variables for y displacement\n'
p18857
sS'cpp_type'
p18858
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18859
sS'default'
p18860
g3
sS'name'
p18861
S'save_in_disp_y'
p18862
sS'required'
p18863
I00
sS'group_name'
p18864
Nsa(dp18865
S'description'
p18866
S'The save_in variables for z displacement\n'
p18867
sS'cpp_type'
p18868
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18869
sS'default'
p18870
g3
sS'name'
p18871
S'save_in_disp_z'
p18872
sS'required'
p18873
I00
sS'group_name'
p18874
NsasS'name'
p18875
S'/BCs/Pressure/*'
p18876
sasS'parameters'
p18877
(lp18878
(dp18879
S'description'
p18880
S'alpha parameter required for HHT time integration scheme\n'
p18881
sS'cpp_type'
p18882
S'double'
p18883
sS'default'
p18884
S'0'
p18885
sS'name'
p18886
S'alpha'
p18887
sS'required'
p18888
I00
sS'group_name'
p18889
Nsa(dp18890
S'description'
p18891
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18892
sS'cpp_type'
p18893
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18894
sS'default'
p18895
g3
sS'name'
p18896
S'boundary'
p18897
sS'required'
p18898
I01
sS'group_name'
p18899
Nsa(dp18900
S'description'
p18901
S'The component for the pressure\n'
p18902
sS'cpp_type'
p18903
S'unsigned int'
p18904
sS'default'
p18905
g3
sS'name'
p18906
S'component'
p18907
sS'required'
p18908
I01
sS'group_name'
p18909
Nsa(dp18910
S'description'
p18911
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18912
sS'cpp_type'
p18913
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18914
sS'default'
p18915
g3
sS'name'
p18916
S'control_tags'
p18917
sS'required'
p18918
I00
sS'group_name'
p18919
S'Advanced'
p18920
sa(dp18921
S'description'
p18922
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18923
sS'cpp_type'
p18924
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18925
sS'default'
p18926
g3
sS'name'
p18927
S'diag_save_in'
p18928
sS'required'
p18929
I00
sS'group_name'
p18930
S'Advanced'
p18931
sa(dp18932
S'description'
p18933
S'Set the enabled status of the MooseObject.\n'
p18934
sS'cpp_type'
p18935
S'bool'
p18936
sS'default'
p18937
S'1'
p18938
sS'name'
p18939
S'enable'
p18940
sS'required'
p18941
I00
sS'group_name'
p18942
S'Advanced'
p18943
sa(dp18944
S'description'
p18945
S'The magnitude to use in computing the pressure\n'
p18946
sS'cpp_type'
p18947
S'double'
p18948
sS'default'
p18949
S'1'
p18950
sS'name'
p18951
S'factor'
p18952
sS'required'
p18953
I00
sS'group_name'
p18954
Nsa(dp18955
S'description'
p18956
S'The function that describes the pressure\n'
p18957
sS'cpp_type'
p18958
S'FunctionName'
p18959
sS'default'
p18960
g3
sS'name'
p18961
S'function'
p18962
sS'required'
p18963
I00
sS'group_name'
p18964
Nsa(dp18965
S'description'
p18966
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18967
sS'cpp_type'
p18968
S'bool'
p18969
sS'default'
p18970
S'1'
p18971
sS'name'
p18972
S'implicit'
p18973
sS'required'
p18974
I00
sS'group_name'
p18975
S'Advanced'
p18976
sa(dp18977
S'description'
p18978
S'Postprocessor that will supply the pressure value\n'
p18979
sS'cpp_type'
p18980
S'PostprocessorName'
p18981
sS'default'
p18982
g3
sS'name'
p18983
S'postprocessor'
p18984
sS'required'
p18985
I00
sS'group_name'
p18986
Nsa(dp18987
S'description'
p18988
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18989
sS'cpp_type'
p18990
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18991
sS'default'
p18992
g3
sS'name'
p18993
S'save_in'
p18994
sS'required'
p18995
I00
sS'group_name'
p18996
S'Advanced'
p18997
sa(dp18998
S'description'
p18999
S'The seed for the master random number generator\n'
p19000
sS'cpp_type'
p19001
S'unsigned int'
p19002
sS'default'
p19003
S'0'
p19004
sS'name'
p19005
S'seed'
p19006
sS'required'
p19007
I00
sS'group_name'
p19008
S'Advanced'
p19009
sa(dp19010
S'description'
p19011
g3
sS'cpp_type'
p19012
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19013
sS'default'
p19014
S'Pressure'
p19015
sS'name'
p19016
S'type'
p19017
sS'required'
p19018
I00
sS'group_name'
p19019
Nsa(dp19020
S'description'
p19021
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19022
sS'cpp_type'
p19023
S'bool'
p19024
sS'default'
p19025
S'1'
p19026
sS'name'
p19027
S'use_displaced_mesh'
p19028
sS'required'
p19029
I00
sS'group_name'
p19030
S'Advanced'
p19031
sa(dp19032
S'description'
p19033
S'The name of the variable that this boundary condition applies to\n'
p19034
sS'cpp_type'
p19035
S'NonlinearVariableName'
p19036
sS'default'
p19037
g3
sS'name'
p19038
S'variable'
p19039
sS'required'
p19040
I01
sS'group_name'
p19041
NsasS'name'
p19042
S'/BCs/Pressure'
p19043
sa(dp19044
S'description'
p19045
g3
sS'subblocks'
p19046
NsS'parameters'
p19047
(lp19048
(dp19049
S'description'
p19050
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19051
sS'cpp_type'
p19052
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19053
sS'default'
p19054
g3
sS'name'
p19055
S'boundary'
p19056
sS'required'
p19057
I01
sS'group_name'
p19058
Nsa(dp19059
S'description'
p19060
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19061
sS'cpp_type'
p19062
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19063
sS'default'
p19064
g3
sS'name'
p19065
S'control_tags'
p19066
sS'required'
p19067
I00
sS'group_name'
p19068
S'Advanced'
p19069
sa(dp19070
S'description'
p19071
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19072
sS'cpp_type'
p19073
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19074
sS'default'
p19075
g3
sS'name'
p19076
S'diag_save_in'
p19077
sS'required'
p19078
I00
sS'group_name'
p19079
Nsa(dp19080
S'description'
p19081
g3
sS'cpp_type'
p19082
S'double'
p19083
sS'default'
p19084
S'0'
p19085
sS'name'
p19086
S'duration'
p19087
sS'required'
p19088
I00
sS'group_name'
p19089
Nsa(dp19090
S'description'
p19091
S'Set the enabled status of the MooseObject.\n'
p19092
sS'cpp_type'
p19093
S'bool'
p19094
sS'default'
p19095
S'1'
p19096
sS'name'
p19097
S'enable'
p19098
sS'required'
p19099
I00
sS'group_name'
p19100
S'Advanced'
p19101
sa(dp19102
S'description'
p19103
g3
sS'cpp_type'
p19104
S'double'
p19105
sS'default'
p19106
S'0'
p19107
sS'name'
p19108
S'final'
p19109
sS'required'
p19110
I00
sS'group_name'
p19111
Nsa(dp19112
S'description'
p19113
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19114
sS'cpp_type'
p19115
S'bool'
p19116
sS'default'
p19117
S'1'
p19118
sS'name'
p19119
S'implicit'
p19120
sS'required'
p19121
I00
sS'group_name'
p19122
S'Advanced'
p19123
sa(dp19124
S'description'
p19125
g3
sS'cpp_type'
p19126
S'double'
p19127
sS'default'
p19128
S'0'
p19129
sS'name'
p19130
S'initial'
p19131
sS'required'
p19132
I00
sS'group_name'
p19133
Nsa(dp19134
S'description'
p19135
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19136
sS'cpp_type'
p19137
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19138
sS'default'
p19139
g3
sS'name'
p19140
S'save_in'
p19141
sS'required'
p19142
I00
sS'group_name'
p19143
Nsa(dp19144
S'description'
p19145
S'The seed for the master random number generator\n'
p19146
sS'cpp_type'
p19147
S'unsigned int'
p19148
sS'default'
p19149
S'0'
p19150
sS'name'
p19151
S'seed'
p19152
sS'required'
p19153
I00
sS'group_name'
p19154
S'Advanced'
p19155
sa(dp19156
S'description'
p19157
g3
sS'cpp_type'
p19158
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19159
sS'default'
p19160
S'SinDirichletBC'
p19161
sS'name'
p19162
S'type'
p19163
sS'required'
p19164
I00
sS'group_name'
p19165
Nsa(dp19166
S'description'
p19167
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19168
sS'cpp_type'
p19169
S'bool'
p19170
sS'default'
p19171
S'0'
p19172
sS'name'
p19173
S'use_displaced_mesh'
p19174
sS'required'
p19175
I00
sS'group_name'
p19176
S'Advanced'
p19177
sa(dp19178
S'description'
p19179
S'The name of the variable that this boundary condition applies to\n'
p19180
sS'cpp_type'
p19181
S'NonlinearVariableName'
p19182
sS'default'
p19183
g3
sS'name'
p19184
S'variable'
p19185
sS'required'
p19186
I01
sS'group_name'
p19187
NsasS'name'
p19188
S'/BCs/SinDirichletBC'
p19189
sa(dp19190
S'description'
p19191
g3
sS'subblocks'
p19192
NsS'parameters'
p19193
(lp19194
(dp19195
S'description'
p19196
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19197
sS'cpp_type'
p19198
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19199
sS'default'
p19200
g3
sS'name'
p19201
S'boundary'
p19202
sS'required'
p19203
I01
sS'group_name'
p19204
Nsa(dp19205
S'description'
p19206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19207
sS'cpp_type'
p19208
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19209
sS'default'
p19210
g3
sS'name'
p19211
S'control_tags'
p19212
sS'required'
p19213
I00
sS'group_name'
p19214
S'Advanced'
p19215
sa(dp19216
S'description'
p19217
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19218
sS'cpp_type'
p19219
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19220
sS'default'
p19221
g3
sS'name'
p19222
S'diag_save_in'
p19223
sS'required'
p19224
I00
sS'group_name'
p19225
S'Advanced'
p19226
sa(dp19227
S'description'
p19228
S'The duration of the ramp\n'
p19229
sS'cpp_type'
p19230
S'double'
p19231
sS'default'
p19232
S'0'
p19233
sS'name'
p19234
S'duration'
p19235
sS'required'
p19236
I00
sS'group_name'
p19237
Nsa(dp19238
S'description'
p19239
S'Set the enabled status of the MooseObject.\n'
p19240
sS'cpp_type'
p19241
S'bool'
p19242
sS'default'
p19243
S'1'
p19244
sS'name'
p19245
S'enable'
p19246
sS'required'
p19247
I00
sS'group_name'
p19248
S'Advanced'
p19249
sa(dp19250
S'description'
p19251
S'The final value of the gradient on the boundary\n'
p19252
sS'cpp_type'
p19253
S'double'
p19254
sS'default'
p19255
S'0'
p19256
sS'name'
p19257
S'final'
p19258
sS'required'
p19259
I00
sS'group_name'
p19260
Nsa(dp19261
S'description'
p19262
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19263
sS'cpp_type'
p19264
S'bool'
p19265
sS'default'
p19266
S'1'
p19267
sS'name'
p19268
S'implicit'
p19269
sS'required'
p19270
I00
sS'group_name'
p19271
S'Advanced'
p19272
sa(dp19273
S'description'
p19274
S'The initial value of the gradient on the boundary\n'
p19275
sS'cpp_type'
p19276
S'double'
p19277
sS'default'
p19278
S'0'
p19279
sS'name'
p19280
S'initial'
p19281
sS'required'
p19282
I00
sS'group_name'
p19283
Nsa(dp19284
S'description'
p19285
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19286
sS'cpp_type'
p19287
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19288
sS'default'
p19289
g3
sS'name'
p19290
S'save_in'
p19291
sS'required'
p19292
I00
sS'group_name'
p19293
S'Advanced'
p19294
sa(dp19295
S'description'
p19296
S'The seed for the master random number generator\n'
p19297
sS'cpp_type'
p19298
S'unsigned int'
p19299
sS'default'
p19300
S'0'
p19301
sS'name'
p19302
S'seed'
p19303
sS'required'
p19304
I00
sS'group_name'
p19305
S'Advanced'
p19306
sa(dp19307
S'description'
p19308
g3
sS'cpp_type'
p19309
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19310
sS'default'
p19311
S'SinNeumannBC'
p19312
sS'name'
p19313
S'type'
p19314
sS'required'
p19315
I00
sS'group_name'
p19316
Nsa(dp19317
S'description'
p19318
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19319
sS'cpp_type'
p19320
S'bool'
p19321
sS'default'
p19322
S'0'
p19323
sS'name'
p19324
S'use_displaced_mesh'
p19325
sS'required'
p19326
I00
sS'group_name'
p19327
S'Advanced'
p19328
sa(dp19329
S'description'
p19330
S'The name of the variable that this boundary condition applies to\n'
p19331
sS'cpp_type'
p19332
S'NonlinearVariableName'
p19333
sS'default'
p19334
g3
sS'name'
p19335
S'variable'
p19336
sS'required'
p19337
I01
sS'group_name'
p19338
NsasS'name'
p19339
S'/BCs/SinNeumannBC'
p19340
sa(dp19341
S'description'
p19342
g3
sS'subblocks'
p19343
NsS'parameters'
p19344
(lp19345
(dp19346
S'description'
p19347
S'No idea.\n'
p19348
sS'cpp_type'
p19349
S'double'
p19350
sS'default'
p19351
S'1'
p19352
sS'name'
p19353
S'alpha'
p19354
sS'required'
p19355
I00
sS'group_name'
p19356
Nsa(dp19357
S'description'
p19358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19359
sS'cpp_type'
p19360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19361
sS'default'
p19362
g3
sS'name'
p19363
S'boundary'
p19364
sS'required'
p19365
I01
sS'group_name'
p19366
Nsa(dp19367
S'description'
p19368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19369
sS'cpp_type'
p19370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19371
sS'default'
p19372
g3
sS'name'
p19373
S'control_tags'
p19374
sS'required'
p19375
I00
sS'group_name'
p19376
S'Advanced'
p19377
sa(dp19378
S'description'
p19379
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19380
sS'cpp_type'
p19381
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19382
sS'default'
p19383
g3
sS'name'
p19384
S'diag_save_in'
p19385
sS'required'
p19386
I00
sS'group_name'
p19387
S'Advanced'
p19388
sa(dp19389
S'description'
p19390
S'Set the enabled status of the MooseObject.\n'
p19391
sS'cpp_type'
p19392
S'bool'
p19393
sS'default'
p19394
S'1'
p19395
sS'name'
p19396
S'enable'
p19397
sS'required'
p19398
I00
sS'group_name'
p19399
S'Advanced'
p19400
sa(dp19401
S'description'
p19402
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19403
sS'cpp_type'
p19404
S'bool'
p19405
sS'default'
p19406
S'1'
p19407
sS'name'
p19408
S'implicit'
p19409
sS'required'
p19410
I00
sS'group_name'
p19411
S'Advanced'
p19412
sa(dp19413
S'description'
p19414
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19415
sS'cpp_type'
p19416
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19417
sS'default'
p19418
g3
sS'name'
p19419
S'save_in'
p19420
sS'required'
p19421
I00
sS'group_name'
p19422
S'Advanced'
p19423
sa(dp19424
S'description'
p19425
S'The seed for the master random number generator\n'
p19426
sS'cpp_type'
p19427
S'unsigned int'
p19428
sS'default'
p19429
S'0'
p19430
sS'name'
p19431
S'seed'
p19432
sS'required'
p19433
I00
sS'group_name'
p19434
S'Advanced'
p19435
sa(dp19436
S'description'
p19437
g3
sS'cpp_type'
p19438
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19439
sS'default'
p19440
S'VacuumBC'
p19441
sS'name'
p19442
S'type'
p19443
sS'required'
p19444
I00
sS'group_name'
p19445
Nsa(dp19446
S'description'
p19447
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19448
sS'cpp_type'
p19449
S'bool'
p19450
sS'default'
p19451
S'0'
p19452
sS'name'
p19453
S'use_displaced_mesh'
p19454
sS'required'
p19455
I00
sS'group_name'
p19456
S'Advanced'
p19457
sa(dp19458
S'description'
p19459
S'The name of the variable that this boundary condition applies to\n'
p19460
sS'cpp_type'
p19461
S'NonlinearVariableName'
p19462
sS'default'
p19463
g3
sS'name'
p19464
S'variable'
p19465
sS'required'
p19466
I01
sS'group_name'
p19467
NsasS'name'
p19468
S'/BCs/VacuumBC'
p19469
sa(dp19470
S'description'
p19471
g3
sS'subblocks'
p19472
NsS'parameters'
p19473
(lp19474
(dp19475
S'description'
p19476
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19477
sS'cpp_type'
p19478
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19479
sS'default'
p19480
g3
sS'name'
p19481
S'boundary'
p19482
sS'required'
p19483
I01
sS'group_name'
p19484
Nsa(dp19485
S'description'
p19486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19487
sS'cpp_type'
p19488
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19489
sS'default'
p19490
g3
sS'name'
p19491
S'control_tags'
p19492
sS'required'
p19493
I00
sS'group_name'
p19494
S'Advanced'
p19495
sa(dp19496
S'description'
p19497
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19498
sS'cpp_type'
p19499
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19500
sS'default'
p19501
g3
sS'name'
p19502
S'diag_save_in'
p19503
sS'required'
p19504
I00
sS'group_name'
p19505
S'Advanced'
p19506
sa(dp19507
S'description'
p19508
S'Set the enabled status of the MooseObject.\n'
p19509
sS'cpp_type'
p19510
S'bool'
p19511
sS'default'
p19512
S'1'
p19513
sS'name'
p19514
S'enable'
p19515
sS'required'
p19516
I00
sS'group_name'
p19517
S'Advanced'
p19518
sa(dp19519
S'description'
p19520
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19521
sS'cpp_type'
p19522
S'bool'
p19523
sS'default'
p19524
S'1'
p19525
sS'name'
p19526
S'implicit'
p19527
sS'required'
p19528
I00
sS'group_name'
p19529
S'Advanced'
p19530
sa(dp19531
S'description'
p19532
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19533
sS'cpp_type'
p19534
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19535
sS'default'
p19536
g3
sS'name'
p19537
S'save_in'
p19538
sS'required'
p19539
I00
sS'group_name'
p19540
S'Advanced'
p19541
sa(dp19542
S'description'
p19543
S'The seed for the master random number generator\n'
p19544
sS'cpp_type'
p19545
S'unsigned int'
p19546
sS'default'
p19547
S'0'
p19548
sS'name'
p19549
S'seed'
p19550
sS'required'
p19551
I00
sS'group_name'
p19552
S'Advanced'
p19553
sa(dp19554
S'description'
p19555
g3
sS'cpp_type'
p19556
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19557
sS'default'
p19558
S'VectorNeumannBC'
p19559
sS'name'
p19560
S'type'
p19561
sS'required'
p19562
I00
sS'group_name'
p19563
Nsa(dp19564
S'description'
p19565
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19566
sS'cpp_type'
p19567
S'bool'
p19568
sS'default'
p19569
S'0'
p19570
sS'name'
p19571
S'use_displaced_mesh'
p19572
sS'required'
p19573
I00
sS'group_name'
p19574
S'Advanced'
p19575
sa(dp19576
S'description'
p19577
S'The name of the variable that this boundary condition applies to\n'
p19578
sS'cpp_type'
p19579
S'NonlinearVariableName'
p19580
sS'default'
p19581
g3
sS'name'
p19582
S'variable'
p19583
sS'required'
p19584
I01
sS'group_name'
p19585
Nsa(dp19586
S'description'
p19587
S'vector this BC should act in\n'
p19588
sS'cpp_type'
p19589
S'libMesh::VectorValue<double>'
p19590
sS'default'
p19591
S'0 0 0'
p19592
sS'name'
p19593
S'vector_value'
p19594
sS'required'
p19595
I00
sS'group_name'
p19596
NsasS'name'
p19597
S'/BCs/VectorNeumannBC'
p19598
sa(dp19599
S'description'
p19600
g3
sS'subblocks'
p19601
NsS'parameters'
p19602
(lp19603
(dp19604
S'description'
p19605
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19606
sS'cpp_type'
p19607
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19608
sS'default'
p19609
g3
sS'name'
p19610
S'boundary'
p19611
sS'required'
p19612
I01
sS'group_name'
p19613
Nsa(dp19614
S'description'
p19615
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19616
sS'cpp_type'
p19617
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19618
sS'default'
p19619
g3
sS'name'
p19620
S'control_tags'
p19621
sS'required'
p19622
I00
sS'group_name'
p19623
S'Advanced'
p19624
sa(dp19625
S'description'
p19626
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19627
sS'cpp_type'
p19628
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19629
sS'default'
p19630
g3
sS'name'
p19631
S'diag_save_in'
p19632
sS'required'
p19633
I00
sS'group_name'
p19634
S'Advanced'
p19635
sa(dp19636
S'description'
p19637
S'Set the enabled status of the MooseObject.\n'
p19638
sS'cpp_type'
p19639
S'bool'
p19640
sS'default'
p19641
S'1'
p19642
sS'name'
p19643
S'enable'
p19644
sS'required'
p19645
I00
sS'group_name'
p19646
S'Advanced'
p19647
sa(dp19648
S'description'
p19649
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19650
sS'cpp_type'
p19651
S'bool'
p19652
sS'default'
p19653
S'1'
p19654
sS'name'
p19655
S'implicit'
p19656
sS'required'
p19657
I00
sS'group_name'
p19658
S'Advanced'
p19659
sa(dp19660
S'description'
p19661
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19662
sS'cpp_type'
p19663
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19664
sS'default'
p19665
g3
sS'name'
p19666
S'save_in'
p19667
sS'required'
p19668
I00
sS'group_name'
p19669
S'Advanced'
p19670
sa(dp19671
S'description'
p19672
S'The seed for the master random number generator\n'
p19673
sS'cpp_type'
p19674
S'unsigned int'
p19675
sS'default'
p19676
S'0'
p19677
sS'name'
p19678
S'seed'
p19679
sS'required'
p19680
I00
sS'group_name'
p19681
S'Advanced'
p19682
sa(dp19683
S'description'
p19684
g3
sS'cpp_type'
p19685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19686
sS'default'
p19687
S'WeakGradientBC'
p19688
sS'name'
p19689
S'type'
p19690
sS'required'
p19691
I00
sS'group_name'
p19692
Nsa(dp19693
S'description'
p19694
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19695
sS'cpp_type'
p19696
S'bool'
p19697
sS'default'
p19698
S'0'
p19699
sS'name'
p19700
S'use_displaced_mesh'
p19701
sS'required'
p19702
I00
sS'group_name'
p19703
S'Advanced'
p19704
sa(dp19705
S'description'
p19706
S'The name of the variable that this boundary condition applies to\n'
p19707
sS'cpp_type'
p19708
S'NonlinearVariableName'
p19709
sS'default'
p19710
g3
sS'name'
p19711
S'variable'
p19712
sS'required'
p19713
I01
sS'group_name'
p19714
NsasS'name'
p19715
S'/BCs/WeakGradientBC'
p19716
sasS'parameters'
p19717
NsS'name'
p19718
S'/BCs'
p19719
sa(dp19720
S'description'
p19721
g3
sS'subblocks'
p19722
(lp19723
(dp19724
S'description'
p19725
g3
sS'subblocks'
p19726
NsS'parameters'
p19727
(lp19728
(dp19729
S'description'
p19730
S'A string representing the Moose Object that will be built by this Action\n'
p19731
sS'cpp_type'
p19732
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19733
sS'default'
p19734
g3
sS'name'
p19735
S'type'
p19736
sS'required'
p19737
I01
sS'group_name'
p19738
NsasS'name'
p19739
S'/Bounds/*'
p19740
sa(dp19741
S'description'
p19742
g3
sS'subblocks'
p19743
NsS'parameters'
p19744
(lp19745
(dp19746
S'description'
p19747
S'Variable whose values are to be accumulated into the current variable\n'
p19748
sS'cpp_type'
p19749
S'std::vector<VariableName>'
p19750
sS'default'
p19751
g3
sS'name'
p19752
S'accumulate_from_variable'
p19753
sS'required'
p19754
I01
sS'group_name'
p19755
Nsa(dp19756
S'description'
p19757
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19758
sS'cpp_type'
p19759
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19760
sS'default'
p19761
g3
sS'name'
p19762
S'block'
p19763
sS'required'
p19764
I00
sS'group_name'
p19765
Nsa(dp19766
S'description'
p19767
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19768
sS'cpp_type'
p19769
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19770
sS'default'
p19771
g3
sS'name'
p19772
S'boundary'
p19773
sS'required'
p19774
I00
sS'group_name'
p19775
Nsa(dp19776
S'description'
p19777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19778
sS'cpp_type'
p19779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19780
sS'default'
p19781
g3
sS'name'
p19782
S'control_tags'
p19783
sS'required'
p19784
I00
sS'group_name'
p19785
S'Advanced'
p19786
sa(dp19787
S'description'
p19788
S'Set the enabled status of the MooseObject.\n'
p19789
sS'cpp_type'
p19790
S'bool'
p19791
sS'default'
p19792
S'1'
p19793
sS'name'
p19794
S'enable'
p19795
sS'required'
p19796
I00
sS'group_name'
p19797
S'Advanced'
p19798
sa(dp19799
S'name'
p19800
S'execute_on'
p19801
sS'cpp_type'
p19802
S'MultiMooseEnum'
p19803
sS'default'
p19804
S'LINEAR'
p19805
sS'description'
p19806
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p19807
sS'required'
p19808
I00
sS'options'
p19809
S'none initial linear nonlinear timestep_end timestep_begin custom'
p19810
sS'group_name'
p19811
Nsa(dp19812
S'description'
p19813
S'The seed for the master random number generator\n'
p19814
sS'cpp_type'
p19815
S'unsigned int'
p19816
sS'default'
p19817
S'0'
p19818
sS'name'
p19819
S'seed'
p19820
sS'required'
p19821
I00
sS'group_name'
p19822
S'Advanced'
p19823
sa(dp19824
S'description'
p19825
g3
sS'cpp_type'
p19826
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19827
sS'default'
p19828
S'AccumulateAux'
p19829
sS'name'
p19830
S'type'
p19831
sS'required'
p19832
I00
sS'group_name'
p19833
Nsa(dp19834
S'description'
p19835
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19836
sS'cpp_type'
p19837
S'bool'
p19838
sS'default'
p19839
S'0'
p19840
sS'name'
p19841
S'use_displaced_mesh'
p19842
sS'required'
p19843
I00
sS'group_name'
p19844
S'Advanced'
p19845
sa(dp19846
S'description'
p19847
S'The name of the variable that this object applies to\n'
p19848
sS'cpp_type'
p19849
S'AuxVariableName'
p19850
sS'default'
p19851
g3
sS'name'
p19852
S'variable'
p19853
sS'required'
p19854
I01
sS'group_name'
p19855
NsasS'name'
p19856
S'/Bounds/AccumulateAux'
p19857
sa(dp19858
S'description'
p19859
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p19860
sS'subblocks'
p19861
NsS'parameters'
p19862
(lp19863
(dp19864
S'description'
p19865
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19866
sS'cpp_type'
p19867
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19868
sS'default'
p19869
g3
sS'name'
p19870
S'block'
p19871
sS'required'
p19872
I00
sS'group_name'
p19873
Nsa(dp19874
S'description'
p19875
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19876
sS'cpp_type'
p19877
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19878
sS'default'
p19879
g3
sS'name'
p19880
S'boundary'
p19881
sS'required'
p19882
I00
sS'group_name'
p19883
Nsa(dp19884
S'description'
p19885
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19886
sS'cpp_type'
p19887
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19888
sS'default'
p19889
g3
sS'name'
p19890
S'control_tags'
p19891
sS'required'
p19892
I00
sS'group_name'
p19893
S'Advanced'
p19894
sa(dp19895
S'description'
p19896
S'Set the enabled status of the MooseObject.\n'
p19897
sS'cpp_type'
p19898
S'bool'
p19899
sS'default'
p19900
S'1'
p19901
sS'name'
p19902
S'enable'
p19903
sS'required'
p19904
I00
sS'group_name'
p19905
S'Advanced'
p19906
sa(dp19907
S'name'
p19908
S'execute_on'
p19909
sS'cpp_type'
p19910
S'MultiMooseEnum'
p19911
sS'default'
p19912
S'LINEAR'
p19913
sS'description'
p19914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p19915
sS'required'
p19916
I00
sS'options'
p19917
S'none initial linear nonlinear timestep_end timestep_begin custom'
p19918
sS'group_name'
p19919
Nsa(dp19920
S'description'
p19921
S'Array of coupled variables (num_name)\n'
p19922
sS'cpp_type'
p19923
S'unsigned int'
p19924
sS'default'
p19925
g3
sS'name'
p19926
S'op_num'
p19927
sS'required'
p19928
I00
sS'group_name'
p19929
Nsa(dp19930
S'description'
p19931
S'The seed for the master random number generator\n'
p19932
sS'cpp_type'
p19933
S'unsigned int'
p19934
sS'default'
p19935
S'0'
p19936
sS'name'
p19937
S'seed'
p19938
sS'required'
p19939
I00
sS'group_name'
p19940
S'Advanced'
p19941
sa(dp19942
S'description'
p19943
g3
sS'cpp_type'
p19944
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19945
sS'default'
p19946
S'BndsCalcAux'
p19947
sS'name'
p19948
S'type'
p19949
sS'required'
p19950
I00
sS'group_name'
p19951
Nsa(dp19952
S'description'
p19953
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19954
sS'cpp_type'
p19955
S'bool'
p19956
sS'default'
p19957
S'0'
p19958
sS'name'
p19959
S'use_displaced_mesh'
p19960
sS'required'
p19961
I00
sS'group_name'
p19962
S'Advanced'
p19963
sa(dp19964
S'description'
p19965
S'Array of coupled variables\n'
p19966
sS'cpp_type'
p19967
S'std::vector<VariableName>'
p19968
sS'default'
p19969
g3
sS'name'
p19970
S'v'
p19971
sS'required'
p19972
I01
sS'group_name'
p19973
Nsa(dp19974
S'description'
p19975
S'Array of coupled variables (base_name)\n'
p19976
sS'cpp_type'
p19977
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19978
sS'default'
p19979
g3
sS'name'
p19980
S'var_name_base'
p19981
sS'required'
p19982
I00
sS'group_name'
p19983
Nsa(dp19984
S'description'
p19985
S'The name of the variable that this object applies to\n'
p19986
sS'cpp_type'
p19987
S'AuxVariableName'
p19988
sS'default'
p19989
g3
sS'name'
p19990
S'variable'
p19991
sS'required'
p19992
I01
sS'group_name'
p19993
NsasS'name'
p19994
S'/Bounds/BndsCalcAux'
p19995
sa(dp19996
S'description'
p19997
g3
sS'subblocks'
p19998
NsS'parameters'
p19999
(lp20000
(dp20001
S'description'
p20002
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20003
sS'cpp_type'
p20004
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20005
sS'default'
p20006
g3
sS'name'
p20007
S'block'
p20008
sS'required'
p20009
I00
sS'group_name'
p20010
Nsa(dp20011
S'description'
p20012
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20013
sS'cpp_type'
p20014
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20015
sS'default'
p20016
g3
sS'name'
p20017
S'boundary'
p20018
sS'required'
p20019
I00
sS'group_name'
p20020
Nsa(dp20021
S'description'
p20022
S'The variable to be bounded\n'
p20023
sS'cpp_type'
p20024
S'std::vector<VariableName>'
p20025
sS'default'
p20026
g3
sS'name'
p20027
S'bounded_variable'
p20028
sS'required'
p20029
I01
sS'group_name'
p20030
Nsa(dp20031
S'description'
p20032
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20033
sS'cpp_type'
p20034
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20035
sS'default'
p20036
g3
sS'name'
p20037
S'control_tags'
p20038
sS'required'
p20039
I00
sS'group_name'
p20040
S'Advanced'
p20041
sa(dp20042
S'description'
p20043
S'Set the enabled status of the MooseObject.\n'
p20044
sS'cpp_type'
p20045
S'bool'
p20046
sS'default'
p20047
S'1'
p20048
sS'name'
p20049
S'enable'
p20050
sS'required'
p20051
I00
sS'group_name'
p20052
S'Advanced'
p20053
sa(dp20054
S'name'
p20055
S'execute_on'
p20056
sS'cpp_type'
p20057
S'MultiMooseEnum'
p20058
sS'default'
p20059
S'LINEAR'
p20060
sS'description'
p20061
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20062
sS'required'
p20063
I00
sS'options'
p20064
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20065
sS'group_name'
p20066
Nsa(dp20067
S'description'
p20068
S'The lower bound for the variable\n'
p20069
sS'cpp_type'
p20070
S'double'
p20071
sS'default'
p20072
g3
sS'name'
p20073
S'lower'
p20074
sS'required'
p20075
I00
sS'group_name'
p20076
Nsa(dp20077
S'description'
p20078
S'The seed for the master random number generator\n'
p20079
sS'cpp_type'
p20080
S'unsigned int'
p20081
sS'default'
p20082
S'0'
p20083
sS'name'
p20084
S'seed'
p20085
sS'required'
p20086
I00
sS'group_name'
p20087
S'Advanced'
p20088
sa(dp20089
S'description'
p20090
g3
sS'cpp_type'
p20091
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20092
sS'default'
p20093
S'BoundsAux'
p20094
sS'name'
p20095
S'type'
p20096
sS'required'
p20097
I00
sS'group_name'
p20098
Nsa(dp20099
S'description'
p20100
S'The upper bound for the variable\n'
p20101
sS'cpp_type'
p20102
S'double'
p20103
sS'default'
p20104
g3
sS'name'
p20105
S'upper'
p20106
sS'required'
p20107
I00
sS'group_name'
p20108
Nsa(dp20109
S'description'
p20110
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20111
sS'cpp_type'
p20112
S'bool'
p20113
sS'default'
p20114
S'0'
p20115
sS'name'
p20116
S'use_displaced_mesh'
p20117
sS'required'
p20118
I00
sS'group_name'
p20119
S'Advanced'
p20120
sa(dp20121
S'description'
p20122
S'The name of the variable that this object applies to\n'
p20123
sS'cpp_type'
p20124
S'AuxVariableName'
p20125
sS'default'
p20126
g3
sS'name'
p20127
S'variable'
p20128
sS'required'
p20129
I01
sS'group_name'
p20130
NsasS'name'
p20131
S'/Bounds/BoundsAux'
p20132
sa(dp20133
S'description'
p20134
g3
sS'subblocks'
p20135
NsS'parameters'
p20136
(lp20137
(dp20138
S'description'
p20139
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20140
sS'cpp_type'
p20141
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20142
sS'default'
p20143
g3
sS'name'
p20144
S'block'
p20145
sS'required'
p20146
I00
sS'group_name'
p20147
Nsa(dp20148
S'description'
p20149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20150
sS'cpp_type'
p20151
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20152
sS'default'
p20153
g3
sS'name'
p20154
S'boundary'
p20155
sS'required'
p20156
I00
sS'group_name'
p20157
Nsa(dp20158
S'description'
p20159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20160
sS'cpp_type'
p20161
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20162
sS'default'
p20163
g3
sS'name'
p20164
S'control_tags'
p20165
sS'required'
p20166
I00
sS'group_name'
p20167
S'Advanced'
p20168
sa(dp20169
S'description'
p20170
S'Set the enabled status of the MooseObject.\n'
p20171
sS'cpp_type'
p20172
S'bool'
p20173
sS'default'
p20174
S'1'
p20175
sS'name'
p20176
S'enable'
p20177
sS'required'
p20178
I00
sS'group_name'
p20179
S'Advanced'
p20180
sa(dp20181
S'name'
p20182
S'execute_on'
p20183
sS'cpp_type'
p20184
S'MultiMooseEnum'
p20185
sS'default'
p20186
S'LINEAR'
p20187
sS'description'
p20188
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20189
sS'required'
p20190
I00
sS'options'
p20191
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20192
sS'group_name'
p20193
Nsa(dp20194
S'description'
p20195
S'The seed for the master random number generator\n'
p20196
sS'cpp_type'
p20197
S'unsigned int'
p20198
sS'default'
p20199
S'0'
p20200
sS'name'
p20201
S'seed'
p20202
sS'required'
p20203
I00
sS'group_name'
p20204
S'Advanced'
p20205
sa(dp20206
S'description'
p20207
g3
sS'cpp_type'
p20208
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20209
sS'default'
p20210
S'ConstantAux'
p20211
sS'name'
p20212
S'type'
p20213
sS'required'
p20214
I00
sS'group_name'
p20215
Nsa(dp20216
S'description'
p20217
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20218
sS'cpp_type'
p20219
S'bool'
p20220
sS'default'
p20221
S'0'
p20222
sS'name'
p20223
S'use_displaced_mesh'
p20224
sS'required'
p20225
I00
sS'group_name'
p20226
S'Advanced'
p20227
sa(dp20228
S'description'
p20229
S'Some constant value that can be read from the input file\n'
p20230
sS'cpp_type'
p20231
S'double'
p20232
sS'default'
p20233
S'0'
p20234
sS'name'
p20235
S'value'
p20236
sS'required'
p20237
I00
sS'group_name'
p20238
Nsa(dp20239
S'description'
p20240
S'The name of the variable that this object applies to\n'
p20241
sS'cpp_type'
p20242
S'AuxVariableName'
p20243
sS'default'
p20244
g3
sS'name'
p20245
S'variable'
p20246
sS'required'
p20247
I01
sS'group_name'
p20248
NsasS'name'
p20249
S'/Bounds/ConstantAux'
p20250
sa(dp20251
S'description'
p20252
S'Free energy contribution from the cross terms in ACMultiInetrface\n'
p20253
sS'subblocks'
p20254
NsS'parameters'
p20255
(lp20256
(dp20257
S'description'
p20258
S'Coupled variable holding additional free energy contributions to be summed up\n'
p20259
sS'cpp_type'
p20260
S'std::vector<VariableName>'
p20261
sS'default'
p20262
S'0'
p20263
sS'name'
p20264
S'additional_free_energy'
p20265
sS'required'
p20266
I00
sS'group_name'
p20267
Nsa(dp20268
S'description'
p20269
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20270
sS'cpp_type'
p20271
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20272
sS'default'
p20273
g3
sS'name'
p20274
S'block'
p20275
sS'required'
p20276
I00
sS'group_name'
p20277
Nsa(dp20278
S'description'
p20279
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20280
sS'cpp_type'
p20281
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20282
sS'default'
p20283
g3
sS'name'
p20284
S'boundary'
p20285
sS'required'
p20286
I00
sS'group_name'
p20287
Nsa(dp20288
S'description'
p20289
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20290
sS'cpp_type'
p20291
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20292
sS'default'
p20293
g3
sS'name'
p20294
S'control_tags'
p20295
sS'required'
p20296
I00
sS'group_name'
p20297
S'Advanced'
p20298
sa(dp20299
S'description'
p20300
S'Set the enabled status of the MooseObject.\n'
p20301
sS'cpp_type'
p20302
S'bool'
p20303
sS'default'
p20304
S'1'
p20305
sS'name'
p20306
S'enable'
p20307
sS'required'
p20308
I00
sS'group_name'
p20309
S'Advanced'
p20310
sa(dp20311
S'name'
p20312
S'execute_on'
p20313
sS'cpp_type'
p20314
S'MultiMooseEnum'
p20315
sS'default'
p20316
S'LINEAR'
p20317
sS'description'
p20318
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20319
sS'required'
p20320
I00
sS'options'
p20321
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20322
sS'group_name'
p20323
Nsa(dp20324
S'description'
p20325
S'Variable names that contribute to interfacial energy\n'
p20326
sS'cpp_type'
p20327
S'std::vector<VariableName>'
p20328
sS'default'
p20329
g3
sS'name'
p20330
S'interfacial_vars'
p20331
sS'required'
p20332
I00
sS'group_name'
p20333
Nsa(dp20334
S'description'
p20335
S'Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n'
p20336
sS'cpp_type'
p20337
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p20338
sS'default'
p20339
g3
sS'name'
p20340
S'kappa_names'
p20341
sS'required'
p20342
I01
sS'group_name'
p20343
Nsa(dp20344
S'description'
p20345
S'The seed for the master random number generator\n'
p20346
sS'cpp_type'
p20347
S'unsigned int'
p20348
sS'default'
p20349
S'0'
p20350
sS'name'
p20351
S'seed'
p20352
sS'required'
p20353
I00
sS'group_name'
p20354
S'Advanced'
p20355
sa(dp20356
S'description'
p20357
g3
sS'cpp_type'
p20358
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20359
sS'default'
p20360
S'CrossTermGradientFreeEnergy'
p20361
sS'name'
p20362
S'type'
p20363
sS'required'
p20364
I00
sS'group_name'
p20365
Nsa(dp20366
S'description'
p20367
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20368
sS'cpp_type'
p20369
S'bool'
p20370
sS'default'
p20371
S'0'
p20372
sS'name'
p20373
S'use_displaced_mesh'
p20374
sS'required'
p20375
I00
sS'group_name'
p20376
S'Advanced'
p20377
sa(dp20378
S'description'
p20379
S'The name of the variable that this object applies to\n'
p20380
sS'cpp_type'
p20381
S'AuxVariableName'
p20382
sS'default'
p20383
g3
sS'name'
p20384
S'variable'
p20385
sS'required'
p20386
I01
sS'group_name'
p20387
NsasS'name'
p20388
S'/Bounds/CrossTermGradientFreeEnergy'
p20389
sa(dp20390
S'description'
p20391
S'Output updated rotation tensor to a file: Use for stereographic plots\n'
p20392
sS'subblocks'
p20393
NsS'parameters'
p20394
(lp20395
(dp20396
S'description'
p20397
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20398
sS'cpp_type'
p20399
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20400
sS'default'
p20401
g3
sS'name'
p20402
S'block'
p20403
sS'required'
p20404
I00
sS'group_name'
p20405
Nsa(dp20406
S'description'
p20407
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20408
sS'cpp_type'
p20409
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20410
sS'default'
p20411
g3
sS'name'
p20412
S'boundary'
p20413
sS'required'
p20414
I00
sS'group_name'
p20415
Nsa(dp20416
S'description'
p20417
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20418
sS'cpp_type'
p20419
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20420
sS'default'
p20421
g3
sS'name'
p20422
S'control_tags'
p20423
sS'required'
p20424
I00
sS'group_name'
p20425
S'Advanced'
p20426
sa(dp20427
S'description'
p20428
S'Set the enabled status of the MooseObject.\n'
p20429
sS'cpp_type'
p20430
S'bool'
p20431
sS'default'
p20432
S'1'
p20433
sS'name'
p20434
S'enable'
p20435
sS'required'
p20436
I00
sS'group_name'
p20437
S'Advanced'
p20438
sa(dp20439
S'name'
p20440
S'execute_on'
p20441
sS'cpp_type'
p20442
S'MultiMooseEnum'
p20443
sS'default'
p20444
S'LINEAR'
p20445
sS'description'
p20446
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20447
sS'required'
p20448
I00
sS'options'
p20449
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20450
sS'group_name'
p20451
Nsa(dp20452
S'description'
p20453
S'Frequency of Output\n'
p20454
sS'cpp_type'
p20455
S'unsigned int'
p20456
sS'default'
p20457
S'1'
p20458
sS'name'
p20459
S'output_frequency'
p20460
sS'required'
p20461
I00
sS'group_name'
p20462
Nsa(dp20463
S'description'
p20464
S'Name of rotation output file: Default rot.out\n'
p20465
sS'cpp_type'
p20466
S'FileName'
p20467
sS'default'
p20468
S'rot.out'
p20469
sS'name'
p20470
S'rotout_file_name'
p20471
sS'required'
p20472
I00
sS'group_name'
p20473
Nsa(dp20474
S'description'
p20475
S'The seed for the master random number generator\n'
p20476
sS'cpp_type'
p20477
S'unsigned int'
p20478
sS'default'
p20479
S'0'
p20480
sS'name'
p20481
S'seed'
p20482
sS'required'
p20483
I00
sS'group_name'
p20484
S'Advanced'
p20485
sa(dp20486
S'description'
p20487
g3
sS'cpp_type'
p20488
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20489
sS'default'
p20490
S'CrystalPlasticityRotationOutAux'
p20491
sS'name'
p20492
S'type'
p20493
sS'required'
p20494
I00
sS'group_name'
p20495
Nsa(dp20496
S'description'
p20497
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20498
sS'cpp_type'
p20499
S'bool'
p20500
sS'default'
p20501
S'0'
p20502
sS'name'
p20503
S'use_displaced_mesh'
p20504
sS'required'
p20505
I00
sS'group_name'
p20506
S'Advanced'
p20507
sa(dp20508
S'description'
p20509
S'The name of the variable that this object applies to\n'
p20510
sS'cpp_type'
p20511
S'AuxVariableName'
p20512
sS'default'
p20513
g3
sS'name'
p20514
S'variable'
p20515
sS'required'
p20516
I01
sS'group_name'
p20517
NsasS'name'
p20518
S'/Bounds/CrystalPlasticityRotationOutAux'
p20519
sa(dp20520
S'description'
p20521
S'Takes RankTwoTensor material and outputs component in cylindrical coordinates\n'
p20522
sS'subblocks'
p20523
NsS'parameters'
p20524
(lp20525
(dp20526
S'description'
p20527
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20528
sS'cpp_type'
p20529
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20530
sS'default'
p20531
g3
sS'name'
p20532
S'block'
p20533
sS'required'
p20534
I00
sS'group_name'
p20535
Nsa(dp20536
S'description'
p20537
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20538
sS'cpp_type'
p20539
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20540
sS'default'
p20541
g3
sS'name'
p20542
S'boundary'
p20543
sS'required'
p20544
I00
sS'group_name'
p20545
Nsa(dp20546
S'description'
p20547
S'Location of the center point of the cylindrical coordinates\n'
p20548
sS'cpp_type'
p20549
S'libMesh::Point'
p20550
sS'default'
p20551
g3
sS'name'
p20552
S'center_point'
p20553
sS'required'
p20554
I01
sS'group_name'
p20555
Nsa(dp20556
S'description'
p20557
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20558
sS'cpp_type'
p20559
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20560
sS'default'
p20561
g3
sS'name'
p20562
S'control_tags'
p20563
sS'required'
p20564
I00
sS'group_name'
p20565
S'Advanced'
p20566
sa(dp20567
S'description'
p20568
S'Set the enabled status of the MooseObject.\n'
p20569
sS'cpp_type'
p20570
S'bool'
p20571
sS'default'
p20572
S'1'
p20573
sS'name'
p20574
S'enable'
p20575
sS'required'
p20576
I00
sS'group_name'
p20577
S'Advanced'
p20578
sa(dp20579
S'name'
p20580
S'execute_on'
p20581
sS'cpp_type'
p20582
S'MultiMooseEnum'
p20583
sS'default'
p20584
S'LINEAR'
p20585
sS'description'
p20586
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20587
sS'required'
p20588
I00
sS'options'
p20589
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20590
sS'group_name'
p20591
Nsa(dp20592
S'description'
p20593
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p20594
sS'cpp_type'
p20595
S'unsigned int'
p20596
sS'default'
p20597
g3
sS'name'
p20598
S'index_i'
p20599
sS'required'
p20600
I01
sS'group_name'
p20601
Nsa(dp20602
S'description'
p20603
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p20604
sS'cpp_type'
p20605
S'unsigned int'
p20606
sS'default'
p20607
g3
sS'name'
p20608
S'index_j'
p20609
sS'required'
p20610
I01
sS'group_name'
p20611
Nsa(dp20612
S'description'
p20613
S'The rank two material tensor name\n'
p20614
sS'cpp_type'
p20615
S'MaterialPropertyName'
p20616
sS'default'
p20617
g3
sS'name'
p20618
S'rank_two_tensor'
p20619
sS'required'
p20620
I01
sS'group_name'
p20621
Nsa(dp20622
S'description'
p20623
S'The seed for the master random number generator\n'
p20624
sS'cpp_type'
p20625
S'unsigned int'
p20626
sS'default'
p20627
S'0'
p20628
sS'name'
p20629
S'seed'
p20630
sS'required'
p20631
I00
sS'group_name'
p20632
S'Advanced'
p20633
sa(dp20634
S'description'
p20635
g3
sS'cpp_type'
p20636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20637
sS'default'
p20638
S'CylindricalRankTwoAux'
p20639
sS'name'
p20640
S'type'
p20641
sS'required'
p20642
I00
sS'group_name'
p20643
Nsa(dp20644
S'description'
p20645
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20646
sS'cpp_type'
p20647
S'bool'
p20648
sS'default'
p20649
S'0'
p20650
sS'name'
p20651
S'use_displaced_mesh'
p20652
sS'required'
p20653
I00
sS'group_name'
p20654
S'Advanced'
p20655
sa(dp20656
S'description'
p20657
S'The name of the variable that this object applies to\n'
p20658
sS'cpp_type'
p20659
S'AuxVariableName'
p20660
sS'default'
p20661
g3
sS'name'
p20662
S'variable'
p20663
sS'required'
p20664
I01
sS'group_name'
p20665
NsasS'name'
p20666
S'/Bounds/CylindricalRankTwoAux'
p20667
sa(dp20668
S'description'
p20669
g3
sS'subblocks'
p20670
NsS'parameters'
p20671
(lp20672
(dp20673
S'description'
p20674
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20675
sS'cpp_type'
p20676
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20677
sS'default'
p20678
g3
sS'name'
p20679
S'block'
p20680
sS'required'
p20681
I00
sS'group_name'
p20682
Nsa(dp20683
S'description'
p20684
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20685
sS'cpp_type'
p20686
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20687
sS'default'
p20688
g3
sS'name'
p20689
S'boundary'
p20690
sS'required'
p20691
I00
sS'group_name'
p20692
Nsa(dp20693
S'description'
p20694
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20695
sS'cpp_type'
p20696
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20697
sS'default'
p20698
g3
sS'name'
p20699
S'control_tags'
p20700
sS'required'
p20701
I00
sS'group_name'
p20702
S'Advanced'
p20703
sa(dp20704
S'description'
p20705
S'The variable that is being debugged.\n'
p20706
sS'cpp_type'
p20707
S'NonlinearVariableName'
p20708
sS'default'
p20709
g3
sS'name'
p20710
S'debug_variable'
p20711
sS'required'
p20712
I01
sS'group_name'
p20713
Nsa(dp20714
S'description'
p20715
S'Set the enabled status of the MooseObject.\n'
p20716
sS'cpp_type'
p20717
S'bool'
p20718
sS'default'
p20719
S'1'
p20720
sS'name'
p20721
S'enable'
p20722
sS'required'
p20723
I00
sS'group_name'
p20724
S'Advanced'
p20725
sa(dp20726
S'name'
p20727
S'execute_on'
p20728
sS'cpp_type'
p20729
S'MultiMooseEnum'
p20730
sS'default'
p20731
S'LINEAR'
p20732
sS'description'
p20733
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20734
sS'required'
p20735
I00
sS'options'
p20736
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20737
sS'group_name'
p20738
Nsa(dp20739
S'description'
p20740
S'The seed for the master random number generator\n'
p20741
sS'cpp_type'
p20742
S'unsigned int'
p20743
sS'default'
p20744
S'0'
p20745
sS'name'
p20746
S'seed'
p20747
sS'required'
p20748
I00
sS'group_name'
p20749
S'Advanced'
p20750
sa(dp20751
S'description'
p20752
g3
sS'cpp_type'
p20753
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20754
sS'default'
p20755
S'DebugResidualAux'
p20756
sS'name'
p20757
S'type'
p20758
sS'required'
p20759
I00
sS'group_name'
p20760
Nsa(dp20761
S'description'
p20762
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20763
sS'cpp_type'
p20764
S'bool'
p20765
sS'default'
p20766
S'0'
p20767
sS'name'
p20768
S'use_displaced_mesh'
p20769
sS'required'
p20770
I00
sS'group_name'
p20771
S'Advanced'
p20772
sa(dp20773
S'description'
p20774
S'The name of the variable that this object applies to\n'
p20775
sS'cpp_type'
p20776
S'AuxVariableName'
p20777
sS'default'
p20778
g3
sS'name'
p20779
S'variable'
p20780
sS'required'
p20781
I01
sS'group_name'
p20782
NsasS'name'
p20783
S'/Bounds/DebugResidualAux'
p20784
sa(dp20785
S'description'
p20786
g3
sS'subblocks'
p20787
NsS'parameters'
p20788
(lp20789
(dp20790
S'description'
p20791
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20792
sS'cpp_type'
p20793
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20794
sS'default'
p20795
g3
sS'name'
p20796
S'block'
p20797
sS'required'
p20798
I00
sS'group_name'
p20799
Nsa(dp20800
S'description'
p20801
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20802
sS'cpp_type'
p20803
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20804
sS'default'
p20805
g3
sS'name'
p20806
S'boundary'
p20807
sS'required'
p20808
I00
sS'group_name'
p20809
Nsa(dp20810
S'description'
p20811
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20812
sS'cpp_type'
p20813
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20814
sS'default'
p20815
g3
sS'name'
p20816
S'control_tags'
p20817
sS'required'
p20818
I00
sS'group_name'
p20819
S'Advanced'
p20820
sa(dp20821
S'name'
p20822
S'data_name'
p20823
sS'cpp_type'
p20824
S'MooseEnum'
p20825
sS'default'
p20826
g3
sS'description'
p20827
S'The averaged data to be extracted from the EBSD data by this AuxKernel\n'
p20828
sS'required'
p20829
I01
sS'options'
p20830
S'phi1 phi phi2 phase symmetry local_id feature_id'
p20831
sS'group_name'
p20832
Nsa(dp20833
S'description'
p20834
S'The EBSDReader GeneralUserObject\n'
p20835
sS'cpp_type'
p20836
S'UserObjectName'
p20837
sS'default'
p20838
g3
sS'name'
p20839
S'ebsd_reader'
p20840
sS'required'
p20841
I01
sS'group_name'
p20842
Nsa(dp20843
S'description'
p20844
S'Set the enabled status of the MooseObject.\n'
p20845
sS'cpp_type'
p20846
S'bool'
p20847
sS'default'
p20848
S'1'
p20849
sS'name'
p20850
S'enable'
p20851
sS'required'
p20852
I00
sS'group_name'
p20853
S'Advanced'
p20854
sa(dp20855
S'name'
p20856
S'execute_on'
p20857
sS'cpp_type'
p20858
S'MultiMooseEnum'
p20859
sS'default'
p20860
S'LINEAR'
p20861
sS'description'
p20862
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p20863
sS'required'
p20864
I00
sS'options'
p20865
S'none initial linear nonlinear timestep_end timestep_begin custom'
p20866
sS'group_name'
p20867
Nsa(dp20868
S'description'
p20869
S'The GrainTracker UserObject\n'
p20870
sS'cpp_type'
p20871
S'UserObjectName'
p20872
sS'default'
p20873
g3
sS'name'
p20874
S'grain_tracker'
p20875
sS'required'
p20876
I01
sS'group_name'
p20877
Nsa(dp20878
S'description'
p20879
S'Value to return for points without active grains.\n'
p20880
sS'cpp_type'
p20881
S'double'
p20882
sS'default'
p20883
S'-1'
p20884
sS'name'
p20885
S'invalid'
p20886
sS'required'
p20887
I00
sS'group_name'
p20888
Nsa(dp20889
S'description'
p20890
S'The seed for the master random number generator\n'
p20891
sS'cpp_type'
p20892
S'unsigned int'
p20893
sS'default'
p20894
S'0'
p20895
sS'name'
p20896
S'seed'
p20897
sS'required'
p20898
I00
sS'group_name'
p20899
S'Advanced'
p20900
sa(dp20901
S'description'
p20902
g3
sS'cpp_type'
p20903
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20904
sS'default'
p20905
S'EBSDReaderAvgDataAux'
p20906
sS'name'
p20907
S'type'
p20908
sS'required'
p20909
I00
sS'group_name'
p20910
Nsa(dp20911
S'description'
p20912
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20913
sS'cpp_type'
p20914
S'bool'
p20915
sS'default'
p20916
S'0'
p20917
sS'name'
p20918
S'use_displaced_mesh'
p20919
sS'required'
p20920
I00
sS'group_name'
p20921
S'Advanced'
p20922
sa(dp20923
S'description'
p20924
S'The name of the variable that this object applies to\n'
p20925
sS'cpp_type'
p20926
S'AuxVariableName'
p20927
sS'default'
p20928
g3
sS'name'
p20929
S'variable'
p20930
sS'required'
p20931
I01
sS'group_name'
p20932
NsasS'name'
p20933
S'/Bounds/EBSDReaderAvgDataAux'
p20934
sa(dp20935
S'description'
p20936
g3
sS'subblocks'
p20937
NsS'parameters'
p20938
(lp20939
(dp20940
S'description'
p20941
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20942
sS'cpp_type'
p20943
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20944
sS'default'
p20945
g3
sS'name'
p20946
S'block'
p20947
sS'required'
p20948
I00
sS'group_name'
p20949
Nsa(dp20950
S'description'
p20951
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20952
sS'cpp_type'
p20953
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20954
sS'default'
p20955
g3
sS'name'
p20956
S'boundary'
p20957
sS'required'
p20958
I00
sS'group_name'
p20959
Nsa(dp20960
S'description'
p20961
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20962
sS'cpp_type'
p20963
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20964
sS'default'
p20965
g3
sS'name'
p20966
S'control_tags'
p20967
sS'required'
p20968
I00
sS'group_name'
p20969
S'Advanced'
p20970
sa(dp20971
S'name'
p20972
S'data_name'
p20973
sS'cpp_type'
p20974
S'MooseEnum'
p20975
sS'default'
p20976
g3
sS'description'
p20977
S'The data to be extracted from the EBSD data by this AuxKernel\n'
p20978
sS'required'
p20979
I01
sS'options'
p20980
S'phi1 phi phi2 feature_id phase symmetry'
p20981
sS'group_name'
p20982
Nsa(dp20983
S'description'
p20984
S'The EBSDReader GeneralUserObject\n'
p20985
sS'cpp_type'
p20986
S'UserObjectName'
p20987
sS'default'
p20988
g3
sS'name'
p20989
S'ebsd_reader'
p20990
sS'required'
p20991
I01
sS'group_name'
p20992
Nsa(dp20993
S'description'
p20994
S'Set the enabled status of the MooseObject.\n'
p20995
sS'cpp_type'
p20996
S'bool'
p20997
sS'default'
p20998
S'1'
p20999
sS'name'
p21000
S'enable'
p21001
sS'required'
p21002
I00
sS'group_name'
p21003
S'Advanced'
p21004
sa(dp21005
S'name'
p21006
S'execute_on'
p21007
sS'cpp_type'
p21008
S'MultiMooseEnum'
p21009
sS'default'
p21010
S'LINEAR'
p21011
sS'description'
p21012
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21013
sS'required'
p21014
I00
sS'options'
p21015
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21016
sS'group_name'
p21017
Nsa(dp21018
S'description'
p21019
S'The seed for the master random number generator\n'
p21020
sS'cpp_type'
p21021
S'unsigned int'
p21022
sS'default'
p21023
S'0'
p21024
sS'name'
p21025
S'seed'
p21026
sS'required'
p21027
I00
sS'group_name'
p21028
S'Advanced'
p21029
sa(dp21030
S'description'
p21031
g3
sS'cpp_type'
p21032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21033
sS'default'
p21034
S'EBSDReaderPointDataAux'
p21035
sS'name'
p21036
S'type'
p21037
sS'required'
p21038
I00
sS'group_name'
p21039
Nsa(dp21040
S'description'
p21041
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21042
sS'cpp_type'
p21043
S'bool'
p21044
sS'default'
p21045
S'0'
p21046
sS'name'
p21047
S'use_displaced_mesh'
p21048
sS'required'
p21049
I00
sS'group_name'
p21050
S'Advanced'
p21051
sa(dp21052
S'description'
p21053
S'The name of the variable that this object applies to\n'
p21054
sS'cpp_type'
p21055
S'AuxVariableName'
p21056
sS'default'
p21057
g3
sS'name'
p21058
S'variable'
p21059
sS'required'
p21060
I01
sS'group_name'
p21061
NsasS'name'
p21062
S'/Bounds/EBSDReaderPointDataAux'
p21063
sa(dp21064
S'description'
p21065
S'Compute the local elastic energy\n'
p21066
sS'subblocks'
p21067
NsS'parameters'
p21068
(lp21069
(dp21070
S'description'
p21071
S'Mechanical property base name\n'
p21072
sS'cpp_type'
p21073
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21074
sS'default'
p21075
g3
sS'name'
p21076
S'base_name'
p21077
sS'required'
p21078
I00
sS'group_name'
p21079
Nsa(dp21080
S'description'
p21081
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21082
sS'cpp_type'
p21083
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21084
sS'default'
p21085
g3
sS'name'
p21086
S'block'
p21087
sS'required'
p21088
I00
sS'group_name'
p21089
Nsa(dp21090
S'description'
p21091
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21092
sS'cpp_type'
p21093
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21094
sS'default'
p21095
g3
sS'name'
p21096
S'boundary'
p21097
sS'required'
p21098
I00
sS'group_name'
p21099
Nsa(dp21100
S'description'
p21101
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21102
sS'cpp_type'
p21103
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21104
sS'default'
p21105
g3
sS'name'
p21106
S'control_tags'
p21107
sS'required'
p21108
I00
sS'group_name'
p21109
S'Advanced'
p21110
sa(dp21111
S'description'
p21112
S'Set the enabled status of the MooseObject.\n'
p21113
sS'cpp_type'
p21114
S'bool'
p21115
sS'default'
p21116
S'1'
p21117
sS'name'
p21118
S'enable'
p21119
sS'required'
p21120
I00
sS'group_name'
p21121
S'Advanced'
p21122
sa(dp21123
S'name'
p21124
S'execute_on'
p21125
sS'cpp_type'
p21126
S'MultiMooseEnum'
p21127
sS'default'
p21128
S'LINEAR'
p21129
sS'description'
p21130
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21131
sS'required'
p21132
I00
sS'options'
p21133
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21134
sS'group_name'
p21135
Nsa(dp21136
S'description'
p21137
S'The seed for the master random number generator\n'
p21138
sS'cpp_type'
p21139
S'unsigned int'
p21140
sS'default'
p21141
S'0'
p21142
sS'name'
p21143
S'seed'
p21144
sS'required'
p21145
I00
sS'group_name'
p21146
S'Advanced'
p21147
sa(dp21148
S'description'
p21149
g3
sS'cpp_type'
p21150
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21151
sS'default'
p21152
S'ElasticEnergyAux'
p21153
sS'name'
p21154
S'type'
p21155
sS'required'
p21156
I00
sS'group_name'
p21157
Nsa(dp21158
S'description'
p21159
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21160
sS'cpp_type'
p21161
S'bool'
p21162
sS'default'
p21163
S'0'
p21164
sS'name'
p21165
S'use_displaced_mesh'
p21166
sS'required'
p21167
I00
sS'group_name'
p21168
S'Advanced'
p21169
sa(dp21170
S'description'
p21171
S'The name of the variable that this object applies to\n'
p21172
sS'cpp_type'
p21173
S'AuxVariableName'
p21174
sS'default'
p21175
g3
sS'name'
p21176
S'variable'
p21177
sS'required'
p21178
I01
sS'group_name'
p21179
NsasS'name'
p21180
S'/Bounds/ElasticEnergyAux'
p21181
sa(dp21182
S'description'
p21183
g3
sS'subblocks'
p21184
NsS'parameters'
p21185
(lp21186
(dp21187
S'description'
p21188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21189
sS'cpp_type'
p21190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21191
sS'default'
p21192
g3
sS'name'
p21193
S'block'
p21194
sS'required'
p21195
I00
sS'group_name'
p21196
Nsa(dp21197
S'description'
p21198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21199
sS'cpp_type'
p21200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21201
sS'default'
p21202
g3
sS'name'
p21203
S'boundary'
p21204
sS'required'
p21205
I00
sS'group_name'
p21206
Nsa(dp21207
S'description'
p21208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21209
sS'cpp_type'
p21210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21211
sS'default'
p21212
g3
sS'name'
p21213
S'control_tags'
p21214
sS'required'
p21215
I00
sS'group_name'
p21216
S'Advanced'
p21217
sa(dp21218
S'description'
p21219
S'The variable to compute the norm of.\n'
p21220
sS'cpp_type'
p21221
S'std::vector<VariableName>'
p21222
sS'default'
p21223
g3
sS'name'
p21224
S'coupled_variable'
p21225
sS'required'
p21226
I01
sS'group_name'
p21227
Nsa(dp21228
S'description'
p21229
S'Set the enabled status of the MooseObject.\n'
p21230
sS'cpp_type'
p21231
S'bool'
p21232
sS'default'
p21233
S'1'
p21234
sS'name'
p21235
S'enable'
p21236
sS'required'
p21237
I00
sS'group_name'
p21238
S'Advanced'
p21239
sa(dp21240
S'name'
p21241
S'execute_on'
p21242
sS'cpp_type'
p21243
S'MultiMooseEnum'
p21244
sS'default'
p21245
S'LINEAR'
p21246
sS'description'
p21247
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21248
sS'required'
p21249
I00
sS'options'
p21250
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21251
sS'group_name'
p21252
Nsa(dp21253
S'description'
p21254
S'Function representing the exact solution\n'
p21255
sS'cpp_type'
p21256
S'FunctionName'
p21257
sS'default'
p21258
g3
sS'name'
p21259
S'function'
p21260
sS'required'
p21261
I01
sS'group_name'
p21262
Nsa(dp21263
S'description'
p21264
S'The exponent used in the norm.\n'
p21265
sS'cpp_type'
p21266
S'double'
p21267
sS'default'
p21268
S'2'
p21269
sS'name'
p21270
S'p'
p21271
sS'required'
p21272
I00
sS'group_name'
p21273
Nsa(dp21274
S'description'
p21275
S'The seed for the master random number generator\n'
p21276
sS'cpp_type'
p21277
S'unsigned int'
p21278
sS'default'
p21279
S'0'
p21280
sS'name'
p21281
S'seed'
p21282
sS'required'
p21283
I00
sS'group_name'
p21284
S'Advanced'
p21285
sa(dp21286
S'description'
p21287
g3
sS'cpp_type'
p21288
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21289
sS'default'
p21290
S'ElementH1ErrorFunctionAux'
p21291
sS'name'
p21292
S'type'
p21293
sS'required'
p21294
I00
sS'group_name'
p21295
Nsa(dp21296
S'description'
p21297
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21298
sS'cpp_type'
p21299
S'bool'
p21300
sS'default'
p21301
S'0'
p21302
sS'name'
p21303
S'use_displaced_mesh'
p21304
sS'required'
p21305
I00
sS'group_name'
p21306
S'Advanced'
p21307
sa(dp21308
S'description'
p21309
S'The name of the variable that this object applies to\n'
p21310
sS'cpp_type'
p21311
S'AuxVariableName'
p21312
sS'default'
p21313
g3
sS'name'
p21314
S'variable'
p21315
sS'required'
p21316
I01
sS'group_name'
p21317
NsasS'name'
p21318
S'/Bounds/ElementH1ErrorFunctionAux'
p21319
sa(dp21320
S'description'
p21321
g3
sS'subblocks'
p21322
NsS'parameters'
p21323
(lp21324
(dp21325
S'description'
p21326
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21327
sS'cpp_type'
p21328
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21329
sS'default'
p21330
g3
sS'name'
p21331
S'block'
p21332
sS'required'
p21333
I00
sS'group_name'
p21334
Nsa(dp21335
S'description'
p21336
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21337
sS'cpp_type'
p21338
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21339
sS'default'
p21340
g3
sS'name'
p21341
S'boundary'
p21342
sS'required'
p21343
I00
sS'group_name'
p21344
Nsa(dp21345
S'description'
p21346
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21347
sS'cpp_type'
p21348
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21349
sS'default'
p21350
g3
sS'name'
p21351
S'control_tags'
p21352
sS'required'
p21353
I00
sS'group_name'
p21354
S'Advanced'
p21355
sa(dp21356
S'description'
p21357
S'The variable to compute the norm of.\n'
p21358
sS'cpp_type'
p21359
S'std::vector<VariableName>'
p21360
sS'default'
p21361
g3
sS'name'
p21362
S'coupled_variable'
p21363
sS'required'
p21364
I01
sS'group_name'
p21365
Nsa(dp21366
S'description'
p21367
S'Set the enabled status of the MooseObject.\n'
p21368
sS'cpp_type'
p21369
S'bool'
p21370
sS'default'
p21371
S'1'
p21372
sS'name'
p21373
S'enable'
p21374
sS'required'
p21375
I00
sS'group_name'
p21376
S'Advanced'
p21377
sa(dp21378
S'name'
p21379
S'execute_on'
p21380
sS'cpp_type'
p21381
S'MultiMooseEnum'
p21382
sS'default'
p21383
S'LINEAR'
p21384
sS'description'
p21385
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21386
sS'required'
p21387
I00
sS'options'
p21388
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21389
sS'group_name'
p21390
Nsa(dp21391
S'description'
p21392
S'Function representing the exact solution\n'
p21393
sS'cpp_type'
p21394
S'FunctionName'
p21395
sS'default'
p21396
g3
sS'name'
p21397
S'function'
p21398
sS'required'
p21399
I01
sS'group_name'
p21400
Nsa(dp21401
S'description'
p21402
S'The exponent used in the norm.\n'
p21403
sS'cpp_type'
p21404
S'double'
p21405
sS'default'
p21406
S'2'
p21407
sS'name'
p21408
S'p'
p21409
sS'required'
p21410
I00
sS'group_name'
p21411
Nsa(dp21412
S'description'
p21413
S'The seed for the master random number generator\n'
p21414
sS'cpp_type'
p21415
S'unsigned int'
p21416
sS'default'
p21417
S'0'
p21418
sS'name'
p21419
S'seed'
p21420
sS'required'
p21421
I00
sS'group_name'
p21422
S'Advanced'
p21423
sa(dp21424
S'description'
p21425
g3
sS'cpp_type'
p21426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21427
sS'default'
p21428
S'ElementL2ErrorFunctionAux'
p21429
sS'name'
p21430
S'type'
p21431
sS'required'
p21432
I00
sS'group_name'
p21433
Nsa(dp21434
S'description'
p21435
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21436
sS'cpp_type'
p21437
S'bool'
p21438
sS'default'
p21439
S'0'
p21440
sS'name'
p21441
S'use_displaced_mesh'
p21442
sS'required'
p21443
I00
sS'group_name'
p21444
S'Advanced'
p21445
sa(dp21446
S'description'
p21447
S'The name of the variable that this object applies to\n'
p21448
sS'cpp_type'
p21449
S'AuxVariableName'
p21450
sS'default'
p21451
g3
sS'name'
p21452
S'variable'
p21453
sS'required'
p21454
I01
sS'group_name'
p21455
NsasS'name'
p21456
S'/Bounds/ElementL2ErrorFunctionAux'
p21457
sa(dp21458
S'description'
p21459
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p21460
sS'subblocks'
p21461
NsS'parameters'
p21462
(lp21463
(dp21464
S'description'
p21465
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21466
sS'cpp_type'
p21467
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21468
sS'default'
p21469
g3
sS'name'
p21470
S'block'
p21471
sS'required'
p21472
I00
sS'group_name'
p21473
Nsa(dp21474
S'description'
p21475
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21476
sS'cpp_type'
p21477
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21478
sS'default'
p21479
g3
sS'name'
p21480
S'boundary'
p21481
sS'required'
p21482
I00
sS'group_name'
p21483
Nsa(dp21484
S'description'
p21485
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21486
sS'cpp_type'
p21487
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21488
sS'default'
p21489
g3
sS'name'
p21490
S'control_tags'
p21491
sS'required'
p21492
I00
sS'group_name'
p21493
S'Advanced'
p21494
sa(dp21495
S'description'
p21496
S'Set the enabled status of the MooseObject.\n'
p21497
sS'cpp_type'
p21498
S'bool'
p21499
sS'default'
p21500
S'1'
p21501
sS'name'
p21502
S'enable'
p21503
sS'required'
p21504
I00
sS'group_name'
p21505
S'Advanced'
p21506
sa(dp21507
S'name'
p21508
S'execute_on'
p21509
sS'cpp_type'
p21510
S'MultiMooseEnum'
p21511
sS'default'
p21512
S'LINEAR'
p21513
sS'description'
p21514
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21515
sS'required'
p21516
I00
sS'options'
p21517
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21518
sS'group_name'
p21519
Nsa(dp21520
S'name'
p21521
S'method'
p21522
sS'cpp_type'
p21523
S'MooseEnum'
p21524
sS'default'
p21525
g3
sS'description'
p21526
S"The size calculation to perform ('min' or 'max').\n"
p21527
sS'required'
p21528
I01
sS'options'
p21529
S'min max'
p21530
sS'group_name'
p21531
Nsa(dp21532
S'description'
p21533
S'The seed for the master random number generator\n'
p21534
sS'cpp_type'
p21535
S'unsigned int'
p21536
sS'default'
p21537
S'0'
p21538
sS'name'
p21539
S'seed'
p21540
sS'required'
p21541
I00
sS'group_name'
p21542
S'Advanced'
p21543
sa(dp21544
S'description'
p21545
g3
sS'cpp_type'
p21546
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21547
sS'default'
p21548
S'ElementLengthAux'
p21549
sS'name'
p21550
S'type'
p21551
sS'required'
p21552
I00
sS'group_name'
p21553
Nsa(dp21554
S'description'
p21555
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21556
sS'cpp_type'
p21557
S'bool'
p21558
sS'default'
p21559
S'0'
p21560
sS'name'
p21561
S'use_displaced_mesh'
p21562
sS'required'
p21563
I00
sS'group_name'
p21564
S'Advanced'
p21565
sa(dp21566
S'description'
p21567
S'The name of the variable that this object applies to\n'
p21568
sS'cpp_type'
p21569
S'AuxVariableName'
p21570
sS'default'
p21571
g3
sS'name'
p21572
S'variable'
p21573
sS'required'
p21574
I01
sS'group_name'
p21575
NsasS'name'
p21576
S'/Bounds/ElementLengthAux'
p21577
sa(dp21578
S'description'
p21579
g3
sS'subblocks'
p21580
NsS'parameters'
p21581
(lp21582
(dp21583
S'description'
p21584
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21585
sS'cpp_type'
p21586
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21587
sS'default'
p21588
g3
sS'name'
p21589
S'block'
p21590
sS'required'
p21591
I00
sS'group_name'
p21592
Nsa(dp21593
S'description'
p21594
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21595
sS'cpp_type'
p21596
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21597
sS'default'
p21598
g3
sS'name'
p21599
S'boundary'
p21600
sS'required'
p21601
I00
sS'group_name'
p21602
Nsa(dp21603
S'description'
p21604
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21605
sS'cpp_type'
p21606
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21607
sS'default'
p21608
g3
sS'name'
p21609
S'control_tags'
p21610
sS'required'
p21611
I00
sS'group_name'
p21612
S'Advanced'
p21613
sa(dp21614
S'description'
p21615
S'The variable to compute the norm of.\n'
p21616
sS'cpp_type'
p21617
S'std::vector<VariableName>'
p21618
sS'default'
p21619
g3
sS'name'
p21620
S'coupled_variable'
p21621
sS'required'
p21622
I01
sS'group_name'
p21623
Nsa(dp21624
S'description'
p21625
S'Set the enabled status of the MooseObject.\n'
p21626
sS'cpp_type'
p21627
S'bool'
p21628
sS'default'
p21629
S'1'
p21630
sS'name'
p21631
S'enable'
p21632
sS'required'
p21633
I00
sS'group_name'
p21634
S'Advanced'
p21635
sa(dp21636
S'name'
p21637
S'execute_on'
p21638
sS'cpp_type'
p21639
S'MultiMooseEnum'
p21640
sS'default'
p21641
S'LINEAR'
p21642
sS'description'
p21643
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21644
sS'required'
p21645
I00
sS'options'
p21646
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21647
sS'group_name'
p21648
Nsa(dp21649
S'description'
p21650
S'The exponent used in the norm.\n'
p21651
sS'cpp_type'
p21652
S'double'
p21653
sS'default'
p21654
S'2'
p21655
sS'name'
p21656
S'p'
p21657
sS'required'
p21658
I00
sS'group_name'
p21659
Nsa(dp21660
S'description'
p21661
S'The seed for the master random number generator\n'
p21662
sS'cpp_type'
p21663
S'unsigned int'
p21664
sS'default'
p21665
S'0'
p21666
sS'name'
p21667
S'seed'
p21668
sS'required'
p21669
I00
sS'group_name'
p21670
S'Advanced'
p21671
sa(dp21672
S'description'
p21673
g3
sS'cpp_type'
p21674
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21675
sS'default'
p21676
S'ElementLpNormAux'
p21677
sS'name'
p21678
S'type'
p21679
sS'required'
p21680
I00
sS'group_name'
p21681
Nsa(dp21682
S'description'
p21683
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21684
sS'cpp_type'
p21685
S'bool'
p21686
sS'default'
p21687
S'0'
p21688
sS'name'
p21689
S'use_displaced_mesh'
p21690
sS'required'
p21691
I00
sS'group_name'
p21692
S'Advanced'
p21693
sa(dp21694
S'description'
p21695
S'The name of the variable that this object applies to\n'
p21696
sS'cpp_type'
p21697
S'AuxVariableName'
p21698
sS'default'
p21699
g3
sS'name'
p21700
S'variable'
p21701
sS'required'
p21702
I01
sS'group_name'
p21703
NsasS'name'
p21704
S'/Bounds/ElementLpNormAux'
p21705
sa(dp21706
S'description'
p21707
S'Output RGB representation of crystal orientation from user object to an AuxVariable. The entire domain must have the same crystal structure.\n'
p21708
sS'subblocks'
p21709
NsS'parameters'
p21710
(lp21711
(dp21712
S'description'
p21713
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21714
sS'cpp_type'
p21715
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21716
sS'default'
p21717
g3
sS'name'
p21718
S'block'
p21719
sS'required'
p21720
I00
sS'group_name'
p21721
Nsa(dp21722
S'description'
p21723
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21724
sS'cpp_type'
p21725
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21726
sS'default'
p21727
g3
sS'name'
p21728
S'boundary'
p21729
sS'required'
p21730
I00
sS'group_name'
p21731
Nsa(dp21732
S'description'
p21733
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21734
sS'cpp_type'
p21735
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21736
sS'default'
p21737
g3
sS'name'
p21738
S'control_tags'
p21739
sS'required'
p21740
I00
sS'group_name'
p21741
S'Advanced'
p21742
sa(dp21743
S'name'
p21744
S'crystal_structure'
p21745
sS'cpp_type'
p21746
S'MooseEnum'
p21747
sS'default'
p21748
g3
sS'description'
p21749
S'Crystal structure of the material\n'
p21750
sS'required'
p21751
I01
sS'options'
p21752
S'cubic hexagonal tetragonal trigonal orthorhombic monoclinic triclinic'
p21753
sS'group_name'
p21754
Nsa(dp21755
S'description'
p21756
S'Set the enabled status of the MooseObject.\n'
p21757
sS'cpp_type'
p21758
S'bool'
p21759
sS'default'
p21760
S'1'
p21761
sS'name'
p21762
S'enable'
p21763
sS'required'
p21764
I00
sS'group_name'
p21765
S'Advanced'
p21766
sa(dp21767
S'description'
p21768
S'Name of Euler angle provider user object\n'
p21769
sS'cpp_type'
p21770
S'UserObjectName'
p21771
sS'default'
p21772
g3
sS'name'
p21773
S'euler_angle_provider'
p21774
sS'required'
p21775
I01
sS'group_name'
p21776
Nsa(dp21777
S'name'
p21778
S'execute_on'
p21779
sS'cpp_type'
p21780
S'MultiMooseEnum'
p21781
sS'default'
p21782
S'LINEAR'
p21783
sS'description'
p21784
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21785
sS'required'
p21786
I00
sS'options'
p21787
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21788
sS'group_name'
p21789
Nsa(dp21790
S'description'
p21791
S'The GrainTracker UserObject to get values from.\n'
p21792
sS'cpp_type'
p21793
S'UserObjectName'
p21794
sS'default'
p21795
g3
sS'name'
p21796
S'grain_tracker'
p21797
sS'required'
p21798
I01
sS'group_name'
p21799
Nsa(dp21800
S'description'
p21801
S'RGB value of color used to represent area with no grains, defaults to black\n'
p21802
sS'cpp_type'
p21803
S'libMesh::Point'
p21804
sS'default'
p21805
S'0 0 0'
p21806
sS'name'
p21807
S'no_grain_color'
p21808
sS'required'
p21809
I00
sS'group_name'
p21810
Nsa(dp21811
S'name'
p21812
S'output_type'
p21813
sS'cpp_type'
p21814
S'MooseEnum'
p21815
sS'default'
p21816
S'scalar'
p21817
sS'description'
p21818
S'Type of value that will be outputted\n'
p21819
sS'required'
p21820
I00
sS'options'
p21821
S'red green blue scalar'
p21822
sS'group_name'
p21823
Nsa(dp21824
S'name'
p21825
S'sd'
p21826
sS'cpp_type'
p21827
S'MooseEnum'
p21828
sS'default'
p21829
S'001'
p21830
sS'description'
p21831
S'Reference sample direction\n'
p21832
sS'required'
p21833
I00
sS'options'
p21834
S'100 010 001'
p21835
sS'group_name'
p21836
Nsa(dp21837
S'description'
p21838
S'The seed for the master random number generator\n'
p21839
sS'cpp_type'
p21840
S'unsigned int'
p21841
sS'default'
p21842
S'0'
p21843
sS'name'
p21844
S'seed'
p21845
sS'required'
p21846
I00
sS'group_name'
p21847
S'Advanced'
p21848
sa(dp21849
S'description'
p21850
g3
sS'cpp_type'
p21851
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21852
sS'default'
p21853
S'EulerAngleProvider2RGBAux'
p21854
sS'name'
p21855
S'type'
p21856
sS'required'
p21857
I00
sS'group_name'
p21858
Nsa(dp21859
S'description'
p21860
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21861
sS'cpp_type'
p21862
S'bool'
p21863
sS'default'
p21864
S'0'
p21865
sS'name'
p21866
S'use_displaced_mesh'
p21867
sS'required'
p21868
I00
sS'group_name'
p21869
S'Advanced'
p21870
sa(dp21871
S'description'
p21872
S'The name of the variable that this object applies to\n'
p21873
sS'cpp_type'
p21874
S'AuxVariableName'
p21875
sS'default'
p21876
g3
sS'name'
p21877
S'variable'
p21878
sS'required'
p21879
I01
sS'group_name'
p21880
NsasS'name'
p21881
S'/Bounds/EulerAngleProvider2RGBAux'
p21882
sa(dp21883
S'description'
p21884
g3
sS'subblocks'
p21885
NsS'parameters'
p21886
(lp21887
(dp21888
S'description'
p21889
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21890
sS'cpp_type'
p21891
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21892
sS'default'
p21893
g3
sS'name'
p21894
S'block'
p21895
sS'required'
p21896
I00
sS'group_name'
p21897
Nsa(dp21898
S'description'
p21899
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21900
sS'cpp_type'
p21901
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21902
sS'default'
p21903
g3
sS'name'
p21904
S'boundary'
p21905
sS'required'
p21906
I00
sS'group_name'
p21907
Nsa(dp21908
S'description'
p21909
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21910
sS'cpp_type'
p21911
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21912
sS'default'
p21913
g3
sS'name'
p21914
S'control_tags'
p21915
sS'required'
p21916
I00
sS'group_name'
p21917
S'Advanced'
p21918
sa(dp21919
S'description'
p21920
S'Set the enabled status of the MooseObject.\n'
p21921
sS'cpp_type'
p21922
S'bool'
p21923
sS'default'
p21924
S'1'
p21925
sS'name'
p21926
S'enable'
p21927
sS'required'
p21928
I00
sS'group_name'
p21929
S'Advanced'
p21930
sa(dp21931
S'name'
p21932
S'execute_on'
p21933
sS'cpp_type'
p21934
S'MultiMooseEnum'
p21935
sS'default'
p21936
S'LINEAR'
p21937
sS'description'
p21938
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p21939
sS'required'
p21940
I00
sS'options'
p21941
S'none initial linear nonlinear timestep_end timestep_begin custom'
p21942
sS'group_name'
p21943
Nsa(dp21944
S'name'
p21945
S'output_type'
p21946
sS'cpp_type'
p21947
S'MooseEnum'
p21948
sS'default'
p21949
S'scalar'
p21950
sS'description'
p21951
S'Type of value that will be outputted\n'
p21952
sS'required'
p21953
I00
sS'options'
p21954
S'red green blue scalar'
p21955
sS'group_name'
p21956
Nsa(dp21957
S'description'
p21958
S'Grain phase index\n'
p21959
sS'cpp_type'
p21960
S'std::vector<VariableName>'
p21961
sS'default'
p21962
g3
sS'name'
p21963
S'phase'
p21964
sS'required'
p21965
I00
sS'group_name'
p21966
Nsa(dp21967
S'description'
p21968
S'Euler angle 2\n'
p21969
sS'cpp_type'
p21970
S'std::vector<VariableName>'
p21971
sS'default'
p21972
g3
sS'name'
p21973
S'phi'
p21974
sS'required'
p21975
I00
sS'group_name'
p21976
Nsa(dp21977
S'description'
p21978
S'Euler angle 1\n'
p21979
sS'cpp_type'
p21980
S'std::vector<VariableName>'
p21981
sS'default'
p21982
g3
sS'name'
p21983
S'phi1'
p21984
sS'required'
p21985
I00
sS'group_name'
p21986
Nsa(dp21987
S'description'
p21988
S'Euler angle 3\n'
p21989
sS'cpp_type'
p21990
S'std::vector<VariableName>'
p21991
sS'default'
p21992
g3
sS'name'
p21993
S'phi2'
p21994
sS'required'
p21995
I00
sS'group_name'
p21996
Nsa(dp21997
S'name'
p21998
S'sd'
p21999
sS'cpp_type'
p22000
S'MooseEnum'
p22001
sS'default'
p22002
S'001'
p22003
sS'description'
p22004
S'Reference sample direction\n'
p22005
sS'required'
p22006
I00
sS'options'
p22007
S'100 010 001'
p22008
sS'group_name'
p22009
Nsa(dp22010
S'description'
p22011
S'The seed for the master random number generator\n'
p22012
sS'cpp_type'
p22013
S'unsigned int'
p22014
sS'default'
p22015
S'0'
p22016
sS'name'
p22017
S'seed'
p22018
sS'required'
p22019
I00
sS'group_name'
p22020
S'Advanced'
p22021
sa(dp22022
S'description'
p22023
S'Grain symmetry indentifier\n'
p22024
sS'cpp_type'
p22025
S'std::vector<VariableName>'
p22026
sS'default'
p22027
g3
sS'name'
p22028
S'symmetry'
p22029
sS'required'
p22030
I00
sS'group_name'
p22031
Nsa(dp22032
S'description'
p22033
g3
sS'cpp_type'
p22034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22035
sS'default'
p22036
S'EulerAngleVariables2RGBAux'
p22037
sS'name'
p22038
S'type'
p22039
sS'required'
p22040
I00
sS'group_name'
p22041
Nsa(dp22042
S'description'
p22043
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22044
sS'cpp_type'
p22045
S'bool'
p22046
sS'default'
p22047
S'0'
p22048
sS'name'
p22049
S'use_displaced_mesh'
p22050
sS'required'
p22051
I00
sS'group_name'
p22052
S'Advanced'
p22053
sa(dp22054
S'description'
p22055
S'The name of the variable that this object applies to\n'
p22056
sS'cpp_type'
p22057
S'AuxVariableName'
p22058
sS'default'
p22059
g3
sS'name'
p22060
S'variable'
p22061
sS'required'
p22062
I01
sS'group_name'
p22063
NsasS'name'
p22064
S'/Bounds/EulerAngleVariables2RGBAux'
p22065
sa(dp22066
S'description'
p22067
S'Feature detection by connectivity analysis\n'
p22068
sS'subblocks'
p22069
NsS'parameters'
p22070
(lp22071
(dp22072
S'description'
p22073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22074
sS'cpp_type'
p22075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22076
sS'default'
p22077
g3
sS'name'
p22078
S'block'
p22079
sS'required'
p22080
I00
sS'group_name'
p22081
Nsa(dp22082
S'description'
p22083
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22084
sS'cpp_type'
p22085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22086
sS'default'
p22087
g3
sS'name'
p22088
S'boundary'
p22089
sS'required'
p22090
I00
sS'group_name'
p22091
Nsa(dp22092
S'description'
p22093
S'The FeatureFloodCount UserObject to get values from.\n'
p22094
sS'cpp_type'
p22095
S'UserObjectName'
p22096
sS'default'
p22097
g3
sS'name'
p22098
S'bubble_object'
p22099
sS'required'
p22100
I00
sS'group_name'
p22101
Nsa(dp22102
S'description'
p22103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22104
sS'cpp_type'
p22105
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22106
sS'default'
p22107
g3
sS'name'
p22108
S'control_tags'
p22109
sS'required'
p22110
I00
sS'group_name'
p22111
S'Advanced'
p22112
sa(dp22113
S'description'
p22114
S'Set the enabled status of the MooseObject.\n'
p22115
sS'cpp_type'
p22116
S'bool'
p22117
sS'default'
p22118
S'1'
p22119
sS'name'
p22120
S'enable'
p22121
sS'required'
p22122
I00
sS'group_name'
p22123
S'Advanced'
p22124
sa(dp22125
S'name'
p22126
S'execute_on'
p22127
sS'cpp_type'
p22128
S'MultiMooseEnum'
p22129
sS'default'
p22130
S'INITIAL TIMESTEP_END'
p22131
sS'description'
p22132
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22133
sS'required'
p22134
I00
sS'options'
p22135
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22136
sS'group_name'
p22137
Nsa(dp22138
S'name'
p22139
S'field_display'
p22140
sS'cpp_type'
p22141
S'MooseEnum'
p22142
sS'default'
p22143
S'UNIQUE_REGION'
p22144
sS'description'
p22145
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p22146
sS'required'
p22147
I00
sS'options'
p22148
S'UNIQUE_REGION VARIABLE_COLORING GHOSTED_ENTITIES HALOS CENTROID ACTIVE_BOUNDS'
p22149
sS'group_name'
p22150
Nsa(dp22151
S'description'
p22152
S'The FeatureFloodCount UserObject to get values from.\n'
p22153
sS'cpp_type'
p22154
S'UserObjectName'
p22155
sS'default'
p22156
g3
sS'name'
p22157
S'flood_counter'
p22158
sS'required'
p22159
I01
sS'group_name'
p22160
Nsa(dp22161
S'description'
p22162
S'The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n'
p22163
sS'cpp_type'
p22164
S'unsigned int'
p22165
sS'default'
p22166
g3
sS'name'
p22167
S'map_index'
p22168
sS'required'
p22169
I00
sS'group_name'
p22170
Nsa(dp22171
S'description'
p22172
S'The seed for the master random number generator\n'
p22173
sS'cpp_type'
p22174
S'unsigned int'
p22175
sS'default'
p22176
S'0'
p22177
sS'name'
p22178
S'seed'
p22179
sS'required'
p22180
I00
sS'group_name'
p22181
S'Advanced'
p22182
sa(dp22183
S'description'
p22184
g3
sS'cpp_type'
p22185
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22186
sS'default'
p22187
S'FeatureFloodCountAux'
p22188
sS'name'
p22189
S'type'
p22190
sS'required'
p22191
I00
sS'group_name'
p22192
Nsa(dp22193
S'description'
p22194
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22195
sS'cpp_type'
p22196
S'bool'
p22197
sS'default'
p22198
S'0'
p22199
sS'name'
p22200
S'use_displaced_mesh'
p22201
sS'required'
p22202
I00
sS'group_name'
p22203
S'Advanced'
p22204
sa(dp22205
S'description'
p22206
S'The name of the variable that this object applies to\n'
p22207
sS'cpp_type'
p22208
S'AuxVariableName'
p22209
sS'default'
p22210
g3
sS'name'
p22211
S'variable'
p22212
sS'required'
p22213
I01
sS'group_name'
p22214
NsasS'name'
p22215
S'/Bounds/FeatureFloodCountAux'
p22216
sa(dp22217
S'description'
p22218
g3
sS'subblocks'
p22219
NsS'parameters'
p22220
(lp22221
(dp22222
S'description'
p22223
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22224
sS'cpp_type'
p22225
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22226
sS'default'
p22227
g3
sS'name'
p22228
S'block'
p22229
sS'required'
p22230
I00
sS'group_name'
p22231
Nsa(dp22232
S'description'
p22233
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22234
sS'cpp_type'
p22235
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22236
sS'default'
p22237
g3
sS'name'
p22238
S'boundary'
p22239
sS'required'
p22240
I00
sS'group_name'
p22241
Nsa(dp22242
S'description'
p22243
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22244
sS'cpp_type'
p22245
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22246
sS'default'
p22247
g3
sS'name'
p22248
S'control_tags'
p22249
sS'required'
p22250
I00
sS'group_name'
p22251
S'Advanced'
p22252
sa(dp22253
S'description'
p22254
S'Set the enabled status of the MooseObject.\n'
p22255
sS'cpp_type'
p22256
S'bool'
p22257
sS'default'
p22258
S'1'
p22259
sS'name'
p22260
S'enable'
p22261
sS'required'
p22262
I00
sS'group_name'
p22263
S'Advanced'
p22264
sa(dp22265
S'name'
p22266
S'execute_on'
p22267
sS'cpp_type'
p22268
S'MultiMooseEnum'
p22269
sS'default'
p22270
S'LINEAR'
p22271
sS'description'
p22272
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22273
sS'required'
p22274
I00
sS'options'
p22275
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22276
sS'group_name'
p22277
Nsa(dp22278
S'description'
p22279
S'The function to use as the value\n'
p22280
sS'cpp_type'
p22281
S'FunctionName'
p22282
sS'default'
p22283
g3
sS'name'
p22284
S'function'
p22285
sS'required'
p22286
I01
sS'group_name'
p22287
Nsa(dp22288
S'description'
p22289
S'The seed for the master random number generator\n'
p22290
sS'cpp_type'
p22291
S'unsigned int'
p22292
sS'default'
p22293
S'0'
p22294
sS'name'
p22295
S'seed'
p22296
sS'required'
p22297
I00
sS'group_name'
p22298
S'Advanced'
p22299
sa(dp22300
S'description'
p22301
g3
sS'cpp_type'
p22302
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22303
sS'default'
p22304
S'FunctionAux'
p22305
sS'name'
p22306
S'type'
p22307
sS'required'
p22308
I00
sS'group_name'
p22309
Nsa(dp22310
S'description'
p22311
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22312
sS'cpp_type'
p22313
S'bool'
p22314
sS'default'
p22315
S'0'
p22316
sS'name'
p22317
S'use_displaced_mesh'
p22318
sS'required'
p22319
I00
sS'group_name'
p22320
S'Advanced'
p22321
sa(dp22322
S'description'
p22323
S'The name of the variable that this object applies to\n'
p22324
sS'cpp_type'
p22325
S'AuxVariableName'
p22326
sS'default'
p22327
g3
sS'name'
p22328
S'variable'
p22329
sS'required'
p22330
I01
sS'group_name'
p22331
NsasS'name'
p22332
S'/Bounds/FunctionAux'
p22333
sa(dp22334
S'description'
p22335
g3
sS'subblocks'
p22336
NsS'parameters'
p22337
(lp22338
(dp22339
S'description'
p22340
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22341
sS'cpp_type'
p22342
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22343
sS'default'
p22344
g3
sS'name'
p22345
S'block'
p22346
sS'required'
p22347
I00
sS'group_name'
p22348
Nsa(dp22349
S'description'
p22350
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22351
sS'cpp_type'
p22352
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22353
sS'default'
p22354
g3
sS'name'
p22355
S'boundary'
p22356
sS'required'
p22357
I00
sS'group_name'
p22358
Nsa(dp22359
S'description'
p22360
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22361
sS'cpp_type'
p22362
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22363
sS'default'
p22364
g3
sS'name'
p22365
S'control_tags'
p22366
sS'required'
p22367
I00
sS'group_name'
p22368
S'Advanced'
p22369
sa(dp22370
S'description'
p22371
S'Set the enabled status of the MooseObject.\n'
p22372
sS'cpp_type'
p22373
S'bool'
p22374
sS'default'
p22375
S'1'
p22376
sS'name'
p22377
S'enable'
p22378
sS'required'
p22379
I00
sS'group_name'
p22380
S'Advanced'
p22381
sa(dp22382
S'name'
p22383
S'execute_on'
p22384
sS'cpp_type'
p22385
S'MultiMooseEnum'
p22386
sS'default'
p22387
S'LINEAR'
p22388
sS'description'
p22389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22390
sS'required'
p22391
I00
sS'options'
p22392
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22393
sS'group_name'
p22394
Nsa(dp22395
S'description'
p22396
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p22397
sS'cpp_type'
p22398
S'double'
p22399
sS'default'
p22400
g3
sS'name'
p22401
S'normal_smoothing_distance'
p22402
sS'required'
p22403
I00
sS'group_name'
p22404
Nsa(dp22405
S'description'
p22406
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p22407
sS'cpp_type'
p22408
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22409
sS'default'
p22410
g3
sS'name'
p22411
S'normal_smoothing_method'
p22412
sS'required'
p22413
I00
sS'group_name'
p22414
Nsa(dp22415
S'name'
p22416
S'order'
p22417
sS'cpp_type'
p22418
S'MooseEnum'
p22419
sS'default'
p22420
S'FIRST'
p22421
sS'description'
p22422
S'The finite element order\n'
p22423
sS'required'
p22424
I00
sS'options'
p22425
S'FIRST SECOND THIRD FOURTH'
p22426
sS'group_name'
p22427
Nsa(dp22428
S'description'
p22429
S'The boundary on the other side of a gap.\n'
p22430
sS'cpp_type'
p22431
S'BoundaryName'
p22432
sS'default'
p22433
g3
sS'name'
p22434
S'paired_boundary'
p22435
sS'required'
p22436
I01
sS'group_name'
p22437
Nsa(dp22438
S'description'
p22439
S'The variable to get the value of.\n'
p22440
sS'cpp_type'
p22441
S'VariableName'
p22442
sS'default'
p22443
g3
sS'name'
p22444
S'paired_variable'
p22445
sS'required'
p22446
I01
sS'group_name'
p22447
Nsa(dp22448
S'description'
p22449
S'The seed for the master random number generator\n'
p22450
sS'cpp_type'
p22451
S'unsigned int'
p22452
sS'default'
p22453
S'0'
p22454
sS'name'
p22455
S'seed'
p22456
sS'required'
p22457
I00
sS'group_name'
p22458
S'Advanced'
p22459
sa(dp22460
S'description'
p22461
S'Tangential distance to extend edges of contact surfaces\n'
p22462
sS'cpp_type'
p22463
S'double'
p22464
sS'default'
p22465
g3
sS'name'
p22466
S'tangential_tolerance'
p22467
sS'required'
p22468
I00
sS'group_name'
p22469
Nsa(dp22470
S'description'
p22471
g3
sS'cpp_type'
p22472
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22473
sS'default'
p22474
S'GapValueAux'
p22475
sS'name'
p22476
S'type'
p22477
sS'required'
p22478
I00
sS'group_name'
p22479
Nsa(dp22480
S'description'
p22481
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22482
sS'cpp_type'
p22483
S'bool'
p22484
sS'default'
p22485
S'1'
p22486
sS'name'
p22487
S'use_displaced_mesh'
p22488
sS'required'
p22489
I00
sS'group_name'
p22490
S'Advanced'
p22491
sa(dp22492
S'description'
p22493
S'The name of the variable that this object applies to\n'
p22494
sS'cpp_type'
p22495
S'AuxVariableName'
p22496
sS'default'
p22497
g3
sS'name'
p22498
S'variable'
p22499
sS'required'
p22500
I01
sS'group_name'
p22501
Nsa(dp22502
S'description'
p22503
S'Whether to output warning messages concerning nodes not being found\n'
p22504
sS'cpp_type'
p22505
S'bool'
p22506
sS'default'
p22507
S'0'
p22508
sS'name'
p22509
S'warnings'
p22510
sS'required'
p22511
I00
sS'group_name'
p22512
NsasS'name'
p22513
S'/Bounds/GapValueAux'
p22514
sa(dp22515
S'description'
p22516
S'Calculates the advection velocity of grain due to rigid body translation and rotation\n'
p22517
sS'subblocks'
p22518
NsS'parameters'
p22519
(lp22520
(dp22521
S'description'
p22522
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22523
sS'cpp_type'
p22524
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22525
sS'default'
p22526
g3
sS'name'
p22527
S'block'
p22528
sS'required'
p22529
I00
sS'group_name'
p22530
Nsa(dp22531
S'description'
p22532
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22533
sS'cpp_type'
p22534
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22535
sS'default'
p22536
g3
sS'name'
p22537
S'boundary'
p22538
sS'required'
p22539
I00
sS'group_name'
p22540
Nsa(dp22541
S'name'
p22542
S'component'
p22543
sS'cpp_type'
p22544
S'MooseEnum'
p22545
sS'default'
p22546
g3
sS'description'
p22547
S'The gradient component to compute\n'
p22548
sS'required'
p22549
I00
sS'options'
p22550
S'x y z'
p22551
sS'group_name'
p22552
Nsa(dp22553
S'description'
p22554
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22555
sS'cpp_type'
p22556
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22557
sS'default'
p22558
g3
sS'name'
p22559
S'control_tags'
p22560
sS'required'
p22561
I00
sS'group_name'
p22562
S'Advanced'
p22563
sa(dp22564
S'description'
p22565
S'Set the enabled status of the MooseObject.\n'
p22566
sS'cpp_type'
p22567
S'bool'
p22568
sS'default'
p22569
S'1'
p22570
sS'name'
p22571
S'enable'
p22572
sS'required'
p22573
I00
sS'group_name'
p22574
S'Advanced'
p22575
sa(dp22576
S'name'
p22577
S'execute_on'
p22578
sS'cpp_type'
p22579
S'MultiMooseEnum'
p22580
sS'default'
p22581
S'LINEAR'
p22582
sS'description'
p22583
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22584
sS'required'
p22585
I00
sS'options'
p22586
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22587
sS'group_name'
p22588
Nsa(dp22589
S'description'
p22590
S'userobject for getting force and torque acting on grains\n'
p22591
sS'cpp_type'
p22592
S'UserObjectName'
p22593
sS'default'
p22594
g3
sS'name'
p22595
S'grain_force'
p22596
sS'required'
p22597
I00
sS'group_name'
p22598
Nsa(dp22599
S'description'
p22600
S'userobject for getting volume and center of mass of grains\n'
p22601
sS'cpp_type'
p22602
S'UserObjectName'
p22603
sS'default'
p22604
g3
sS'name'
p22605
S'grain_tracker_object'
p22606
sS'required'
p22607
I00
sS'group_name'
p22608
Nsa(dp22609
S'description'
p22610
S'The feature volume VectorPostprocessorValue.\n'
p22611
sS'cpp_type'
p22612
S'VectorPostprocessorName'
p22613
sS'default'
p22614
g3
sS'name'
p22615
S'grain_volumes'
p22616
sS'required'
p22617
I00
sS'group_name'
p22618
Nsa(dp22619
S'description'
p22620
S'constant value characterizing grain rotation\n'
p22621
sS'cpp_type'
p22622
S'double'
p22623
sS'default'
p22624
S'1'
p22625
sS'name'
p22626
S'rotation_constant'
p22627
sS'required'
p22628
I00
sS'group_name'
p22629
Nsa(dp22630
S'description'
p22631
S'The seed for the master random number generator\n'
p22632
sS'cpp_type'
p22633
S'unsigned int'
p22634
sS'default'
p22635
S'0'
p22636
sS'name'
p22637
S'seed'
p22638
sS'required'
p22639
I00
sS'group_name'
p22640
S'Advanced'
p22641
sa(dp22642
S'description'
p22643
S'constant value characterizing grain translation\n'
p22644
sS'cpp_type'
p22645
S'double'
p22646
sS'default'
p22647
S'1'
p22648
sS'name'
p22649
S'translation_constant'
p22650
sS'required'
p22651
I00
sS'group_name'
p22652
Nsa(dp22653
S'description'
p22654
g3
sS'cpp_type'
p22655
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22656
sS'default'
p22657
S'GrainAdvectionAux'
p22658
sS'name'
p22659
S'type'
p22660
sS'required'
p22661
I00
sS'group_name'
p22662
Nsa(dp22663
S'description'
p22664
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22665
sS'cpp_type'
p22666
S'bool'
p22667
sS'default'
p22668
S'0'
p22669
sS'name'
p22670
S'use_displaced_mesh'
p22671
sS'required'
p22672
I00
sS'group_name'
p22673
S'Advanced'
p22674
sa(dp22675
S'description'
p22676
S'The name of the variable that this object applies to\n'
p22677
sS'cpp_type'
p22678
S'AuxVariableName'
p22679
sS'default'
p22680
g3
sS'name'
p22681
S'variable'
p22682
sS'required'
p22683
I01
sS'group_name'
p22684
NsasS'name'
p22685
S'/Bounds/GrainAdvectionAux'
p22686
sa(dp22687
S'description'
p22688
S'Total free energy in KKS system, including chemical, barrier and gradient terms\n'
p22689
sS'subblocks'
p22690
NsS'parameters'
p22691
(lp22692
(dp22693
S'description'
p22694
S'Coupled variable holding additional free energy contributions to be summed up\n'
p22695
sS'cpp_type'
p22696
S'std::vector<VariableName>'
p22697
sS'default'
p22698
S'0'
p22699
sS'name'
p22700
S'additional_free_energy'
p22701
sS'required'
p22702
I00
sS'group_name'
p22703
Nsa(dp22704
S'description'
p22705
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22706
sS'cpp_type'
p22707
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22708
sS'default'
p22709
g3
sS'name'
p22710
S'block'
p22711
sS'required'
p22712
I00
sS'group_name'
p22713
Nsa(dp22714
S'description'
p22715
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22716
sS'cpp_type'
p22717
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22718
sS'default'
p22719
g3
sS'name'
p22720
S'boundary'
p22721
sS'required'
p22722
I00
sS'group_name'
p22723
Nsa(dp22724
S'description'
p22725
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22726
sS'cpp_type'
p22727
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22728
sS'default'
p22729
g3
sS'name'
p22730
S'control_tags'
p22731
sS'required'
p22732
I00
sS'group_name'
p22733
S'Advanced'
p22734
sa(dp22735
S'description'
p22736
S'Set the enabled status of the MooseObject.\n'
p22737
sS'cpp_type'
p22738
S'bool'
p22739
sS'default'
p22740
S'1'
p22741
sS'name'
p22742
S'enable'
p22743
sS'required'
p22744
I00
sS'group_name'
p22745
S'Advanced'
p22746
sa(dp22747
S'name'
p22748
S'execute_on'
p22749
sS'cpp_type'
p22750
S'MultiMooseEnum'
p22751
sS'default'
p22752
S'LINEAR'
p22753
sS'description'
p22754
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22755
sS'required'
p22756
I00
sS'options'
p22757
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22758
sS'group_name'
p22759
Nsa(dp22760
S'description'
p22761
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p22762
sS'cpp_type'
p22763
S'MaterialPropertyName'
p22764
sS'default'
p22765
g3
sS'name'
p22766
S'fa_name'
p22767
sS'required'
p22768
I01
sS'group_name'
p22769
Nsa(dp22770
S'description'
p22771
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p22772
sS'cpp_type'
p22773
S'MaterialPropertyName'
p22774
sS'default'
p22775
g3
sS'name'
p22776
S'fb_name'
p22777
sS'required'
p22778
I01
sS'group_name'
p22779
Nsa(dp22780
S'description'
p22781
S'Base name for the double well function g(eta)\n'
p22782
sS'cpp_type'
p22783
S'MaterialPropertyName'
p22784
sS'default'
p22785
S'g'
p22786
sS'name'
p22787
S'g_name'
p22788
sS'required'
p22789
I00
sS'group_name'
p22790
Nsa(dp22791
S'description'
p22792
S'Base name for the switching function h(eta)\n'
p22793
sS'cpp_type'
p22794
S'MaterialPropertyName'
p22795
sS'default'
p22796
S'h'
p22797
sS'name'
p22798
S'h_name'
p22799
sS'required'
p22800
I00
sS'group_name'
p22801
Nsa(dp22802
S'description'
p22803
S'Variable names that contribute to interfacial energy\n'
p22804
sS'cpp_type'
p22805
S'std::vector<VariableName>'
p22806
sS'default'
p22807
g3
sS'name'
p22808
S'interfacial_vars'
p22809
sS'required'
p22810
I00
sS'group_name'
p22811
Nsa(dp22812
S'description'
p22813
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order. For basic KKS, there is 1 kappa, 1 interfacial_var.\n'
p22814
sS'cpp_type'
p22815
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22816
sS'default'
p22817
g3
sS'name'
p22818
S'kappa_names'
p22819
sS'required'
p22820
I00
sS'group_name'
p22821
Nsa(dp22822
S'description'
p22823
S'The seed for the master random number generator\n'
p22824
sS'cpp_type'
p22825
S'unsigned int'
p22826
sS'default'
p22827
S'0'
p22828
sS'name'
p22829
S'seed'
p22830
sS'required'
p22831
I00
sS'group_name'
p22832
S'Advanced'
p22833
sa(dp22834
S'description'
p22835
g3
sS'cpp_type'
p22836
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22837
sS'default'
p22838
S'KKSGlobalFreeEnergy'
p22839
sS'name'
p22840
S'type'
p22841
sS'required'
p22842
I00
sS'group_name'
p22843
Nsa(dp22844
S'description'
p22845
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22846
sS'cpp_type'
p22847
S'bool'
p22848
sS'default'
p22849
S'0'
p22850
sS'name'
p22851
S'use_displaced_mesh'
p22852
sS'required'
p22853
I00
sS'group_name'
p22854
S'Advanced'
p22855
sa(dp22856
S'description'
p22857
S'The name of the variable that this object applies to\n'
p22858
sS'cpp_type'
p22859
S'AuxVariableName'
p22860
sS'default'
p22861
g3
sS'name'
p22862
S'variable'
p22863
sS'required'
p22864
I01
sS'group_name'
p22865
Nsa(dp22866
S'description'
p22867
S'Double well height parameter\n'
p22868
sS'cpp_type'
p22869
S'double'
p22870
sS'default'
p22871
g3
sS'name'
p22872
S'w'
p22873
sS'required'
p22874
I01
sS'group_name'
p22875
NsasS'name'
p22876
S'/Bounds/KKSGlobalFreeEnergy'
p22877
sa(dp22878
S'description'
p22879
S'Total free energy in multi-phase KKS system, including chemical, barrier and gradient terms\n'
p22880
sS'subblocks'
p22881
NsS'parameters'
p22882
(lp22883
(dp22884
S'description'
p22885
S'List of free energies for each phase. Place in same order as hj_names and gj_names!\n'
p22886
sS'cpp_type'
p22887
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22888
sS'default'
p22889
g3
sS'name'
p22890
S'Fj_names'
p22891
sS'required'
p22892
I01
sS'group_name'
p22893
Nsa(dp22894
S'description'
p22895
S'Coupled variable holding additional free energy contributions to be summed up\n'
p22896
sS'cpp_type'
p22897
S'std::vector<VariableName>'
p22898
sS'default'
p22899
S'0'
p22900
sS'name'
p22901
S'additional_free_energy'
p22902
sS'required'
p22903
I00
sS'group_name'
p22904
Nsa(dp22905
S'description'
p22906
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22907
sS'cpp_type'
p22908
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22909
sS'default'
p22910
g3
sS'name'
p22911
S'block'
p22912
sS'required'
p22913
I00
sS'group_name'
p22914
Nsa(dp22915
S'description'
p22916
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22917
sS'cpp_type'
p22918
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22919
sS'default'
p22920
g3
sS'name'
p22921
S'boundary'
p22922
sS'required'
p22923
I00
sS'group_name'
p22924
Nsa(dp22925
S'description'
p22926
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22927
sS'cpp_type'
p22928
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22929
sS'default'
p22930
g3
sS'name'
p22931
S'control_tags'
p22932
sS'required'
p22933
I00
sS'group_name'
p22934
S'Advanced'
p22935
sa(dp22936
S'description'
p22937
S'Set the enabled status of the MooseObject.\n'
p22938
sS'cpp_type'
p22939
S'bool'
p22940
sS'default'
p22941
S'1'
p22942
sS'name'
p22943
S'enable'
p22944
sS'required'
p22945
I00
sS'group_name'
p22946
S'Advanced'
p22947
sa(dp22948
S'name'
p22949
S'execute_on'
p22950
sS'cpp_type'
p22951
S'MultiMooseEnum'
p22952
sS'default'
p22953
S'LINEAR'
p22954
sS'description'
p22955
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22956
sS'required'
p22957
I00
sS'options'
p22958
S'none initial linear nonlinear timestep_end timestep_begin custom'
p22959
sS'group_name'
p22960
Nsa(dp22961
S'description'
p22962
S'Barrier Function Materials that provide g. Place in same order as Fj_names and hj_names!\n'
p22963
sS'cpp_type'
p22964
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22965
sS'default'
p22966
g3
sS'name'
p22967
S'gj_names'
p22968
sS'required'
p22969
I01
sS'group_name'
p22970
Nsa(dp22971
S'description'
p22972
S'Switching Function Materials that provide h. Place in same order as Fj_names and gj_names!\n'
p22973
sS'cpp_type'
p22974
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22975
sS'default'
p22976
g3
sS'name'
p22977
S'hj_names'
p22978
sS'required'
p22979
I01
sS'group_name'
p22980
Nsa(dp22981
S'description'
p22982
S'Variable names that contribute to interfacial energy\n'
p22983
sS'cpp_type'
p22984
S'std::vector<VariableName>'
p22985
sS'default'
p22986
g3
sS'name'
p22987
S'interfacial_vars'
p22988
sS'required'
p22989
I00
sS'group_name'
p22990
Nsa(dp22991
S'description'
p22992
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p22993
sS'cpp_type'
p22994
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p22995
sS'default'
p22996
g3
sS'name'
p22997
S'kappa_names'
p22998
sS'required'
p22999
I00
sS'group_name'
p23000
Nsa(dp23001
S'description'
p23002
S'The seed for the master random number generator\n'
p23003
sS'cpp_type'
p23004
S'unsigned int'
p23005
sS'default'
p23006
S'0'
p23007
sS'name'
p23008
S'seed'
p23009
sS'required'
p23010
I00
sS'group_name'
p23011
S'Advanced'
p23012
sa(dp23013
S'description'
p23014
g3
sS'cpp_type'
p23015
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23016
sS'default'
p23017
S'KKSMultiFreeEnergy'
p23018
sS'name'
p23019
S'type'
p23020
sS'required'
p23021
I00
sS'group_name'
p23022
Nsa(dp23023
S'description'
p23024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23025
sS'cpp_type'
p23026
S'bool'
p23027
sS'default'
p23028
S'0'
p23029
sS'name'
p23030
S'use_displaced_mesh'
p23031
sS'required'
p23032
I00
sS'group_name'
p23033
S'Advanced'
p23034
sa(dp23035
S'description'
p23036
S'The name of the variable that this object applies to\n'
p23037
sS'cpp_type'
p23038
S'AuxVariableName'
p23039
sS'default'
p23040
g3
sS'name'
p23041
S'variable'
p23042
sS'required'
p23043
I01
sS'group_name'
p23044
Nsa(dp23045
S'description'
p23046
S'Double well height parameter\n'
p23047
sS'cpp_type'
p23048
S'double'
p23049
sS'default'
p23050
g3
sS'name'
p23051
S'w'
p23052
sS'required'
p23053
I01
sS'group_name'
p23054
NsasS'name'
p23055
S'/Bounds/KKSMultiFreeEnergy'
p23056
sa(dp23057
S'description'
p23058
g3
sS'subblocks'
p23059
NsS'parameters'
p23060
(lp23061
(dp23062
S'description'
p23063
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23064
sS'cpp_type'
p23065
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23066
sS'default'
p23067
g3
sS'name'
p23068
S'block'
p23069
sS'required'
p23070
I00
sS'group_name'
p23071
Nsa(dp23072
S'description'
p23073
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23074
sS'cpp_type'
p23075
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23076
sS'default'
p23077
g3
sS'name'
p23078
S'boundary'
p23079
sS'required'
p23080
I00
sS'group_name'
p23081
Nsa(dp23082
S'description'
p23083
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23084
sS'cpp_type'
p23085
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23086
sS'default'
p23087
g3
sS'name'
p23088
S'control_tags'
p23089
sS'required'
p23090
I00
sS'group_name'
p23091
S'Advanced'
p23092
sa(dp23093
S'description'
p23094
S'Set the enabled status of the MooseObject.\n'
p23095
sS'cpp_type'
p23096
S'bool'
p23097
sS'default'
p23098
S'1'
p23099
sS'name'
p23100
S'enable'
p23101
sS'required'
p23102
I00
sS'group_name'
p23103
S'Advanced'
p23104
sa(dp23105
S'name'
p23106
S'execute_on'
p23107
sS'cpp_type'
p23108
S'MultiMooseEnum'
p23109
sS'default'
p23110
S'LINEAR'
p23111
sS'description'
p23112
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23113
sS'required'
p23114
I00
sS'options'
p23115
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23116
sS'group_name'
p23117
Nsa(dp23118
S'description'
p23119
S'The factor by which to multiply your material property for visualization\n'
p23120
sS'cpp_type'
p23121
S'double'
p23122
sS'default'
p23123
S'1'
p23124
sS'name'
p23125
S'factor'
p23126
sS'required'
p23127
I00
sS'group_name'
p23128
Nsa(dp23129
S'description'
p23130
S'The offset to add to your material property for visualization\n'
p23131
sS'cpp_type'
p23132
S'double'
p23133
sS'default'
p23134
S'0'
p23135
sS'name'
p23136
S'offset'
p23137
sS'required'
p23138
I00
sS'group_name'
p23139
Nsa(dp23140
S'description'
p23141
S'The scalar material property name\n'
p23142
sS'cpp_type'
p23143
S'MaterialPropertyName'
p23144
sS'default'
p23145
g3
sS'name'
p23146
S'property'
p23147
sS'required'
p23148
I01
sS'group_name'
p23149
Nsa(dp23150
S'description'
p23151
S'The seed for the master random number generator\n'
p23152
sS'cpp_type'
p23153
S'unsigned int'
p23154
sS'default'
p23155
S'0'
p23156
sS'name'
p23157
S'seed'
p23158
sS'required'
p23159
I00
sS'group_name'
p23160
S'Advanced'
p23161
sa(dp23162
S'description'
p23163
g3
sS'cpp_type'
p23164
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23165
sS'default'
p23166
S'MaterialRealAux'
p23167
sS'name'
p23168
S'type'
p23169
sS'required'
p23170
I00
sS'group_name'
p23171
Nsa(dp23172
S'description'
p23173
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23174
sS'cpp_type'
p23175
S'bool'
p23176
sS'default'
p23177
S'0'
p23178
sS'name'
p23179
S'use_displaced_mesh'
p23180
sS'required'
p23181
I00
sS'group_name'
p23182
S'Advanced'
p23183
sa(dp23184
S'description'
p23185
S'The name of the variable that this object applies to\n'
p23186
sS'cpp_type'
p23187
S'AuxVariableName'
p23188
sS'default'
p23189
g3
sS'name'
p23190
S'variable'
p23191
sS'required'
p23192
I01
sS'group_name'
p23193
NsasS'name'
p23194
S'/Bounds/MaterialRealAux'
p23195
sa(dp23196
S'description'
p23197
g3
sS'subblocks'
p23198
NsS'parameters'
p23199
(lp23200
(dp23201
S'description'
p23202
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23203
sS'cpp_type'
p23204
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23205
sS'default'
p23206
g3
sS'name'
p23207
S'block'
p23208
sS'required'
p23209
I00
sS'group_name'
p23210
Nsa(dp23211
S'description'
p23212
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23213
sS'cpp_type'
p23214
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23215
sS'default'
p23216
g3
sS'name'
p23217
S'boundary'
p23218
sS'required'
p23219
I00
sS'group_name'
p23220
Nsa(dp23221
S'description'
p23222
S'The column component to consider for this kernel\n'
p23223
sS'cpp_type'
p23224
S'unsigned int'
p23225
sS'default'
p23226
S'0'
p23227
sS'name'
p23228
S'column'
p23229
sS'required'
p23230
I00
sS'group_name'
p23231
Nsa(dp23232
S'description'
p23233
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23234
sS'cpp_type'
p23235
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23236
sS'default'
p23237
g3
sS'name'
p23238
S'control_tags'
p23239
sS'required'
p23240
I00
sS'group_name'
p23241
S'Advanced'
p23242
sa(dp23243
S'description'
p23244
S'Set the enabled status of the MooseObject.\n'
p23245
sS'cpp_type'
p23246
S'bool'
p23247
sS'default'
p23248
S'1'
p23249
sS'name'
p23250
S'enable'
p23251
sS'required'
p23252
I00
sS'group_name'
p23253
S'Advanced'
p23254
sa(dp23255
S'name'
p23256
S'execute_on'
p23257
sS'cpp_type'
p23258
S'MultiMooseEnum'
p23259
sS'default'
p23260
S'LINEAR'
p23261
sS'description'
p23262
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23263
sS'required'
p23264
I00
sS'options'
p23265
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23266
sS'group_name'
p23267
Nsa(dp23268
S'description'
p23269
S'The factor by which to multiply your material property for visualization\n'
p23270
sS'cpp_type'
p23271
S'double'
p23272
sS'default'
p23273
S'1'
p23274
sS'name'
p23275
S'factor'
p23276
sS'required'
p23277
I00
sS'group_name'
p23278
Nsa(dp23279
S'description'
p23280
S'The offset to add to your material property for visualization\n'
p23281
sS'cpp_type'
p23282
S'double'
p23283
sS'default'
p23284
S'0'
p23285
sS'name'
p23286
S'offset'
p23287
sS'required'
p23288
I00
sS'group_name'
p23289
Nsa(dp23290
S'description'
p23291
S'The scalar material property name\n'
p23292
sS'cpp_type'
p23293
S'MaterialPropertyName'
p23294
sS'default'
p23295
g3
sS'name'
p23296
S'property'
p23297
sS'required'
p23298
I01
sS'group_name'
p23299
Nsa(dp23300
S'description'
p23301
S'The row component to consider for this kernel\n'
p23302
sS'cpp_type'
p23303
S'unsigned int'
p23304
sS'default'
p23305
S'0'
p23306
sS'name'
p23307
S'row'
p23308
sS'required'
p23309
I00
sS'group_name'
p23310
Nsa(dp23311
S'description'
p23312
S'The seed for the master random number generator\n'
p23313
sS'cpp_type'
p23314
S'unsigned int'
p23315
sS'default'
p23316
S'0'
p23317
sS'name'
p23318
S'seed'
p23319
sS'required'
p23320
I00
sS'group_name'
p23321
S'Advanced'
p23322
sa(dp23323
S'description'
p23324
g3
sS'cpp_type'
p23325
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23326
sS'default'
p23327
S'MaterialRealDenseMatrixAux'
p23328
sS'name'
p23329
S'type'
p23330
sS'required'
p23331
I00
sS'group_name'
p23332
Nsa(dp23333
S'description'
p23334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23335
sS'cpp_type'
p23336
S'bool'
p23337
sS'default'
p23338
S'0'
p23339
sS'name'
p23340
S'use_displaced_mesh'
p23341
sS'required'
p23342
I00
sS'group_name'
p23343
S'Advanced'
p23344
sa(dp23345
S'description'
p23346
S'The name of the variable that this object applies to\n'
p23347
sS'cpp_type'
p23348
S'AuxVariableName'
p23349
sS'default'
p23350
g3
sS'name'
p23351
S'variable'
p23352
sS'required'
p23353
I01
sS'group_name'
p23354
NsasS'name'
p23355
S'/Bounds/MaterialRealDenseMatrixAux'
p23356
sa(dp23357
S'description'
p23358
g3
sS'subblocks'
p23359
NsS'parameters'
p23360
(lp23361
(dp23362
S'description'
p23363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23364
sS'cpp_type'
p23365
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23366
sS'default'
p23367
g3
sS'name'
p23368
S'block'
p23369
sS'required'
p23370
I00
sS'group_name'
p23371
Nsa(dp23372
S'description'
p23373
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23374
sS'cpp_type'
p23375
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23376
sS'default'
p23377
g3
sS'name'
p23378
S'boundary'
p23379
sS'required'
p23380
I00
sS'group_name'
p23381
Nsa(dp23382
S'description'
p23383
S'The column component to consider for this kernel\n'
p23384
sS'cpp_type'
p23385
S'unsigned int'
p23386
sS'default'
p23387
S'0'
p23388
sS'name'
p23389
S'column'
p23390
sS'required'
p23391
I00
sS'group_name'
p23392
Nsa(dp23393
S'description'
p23394
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23395
sS'cpp_type'
p23396
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23397
sS'default'
p23398
g3
sS'name'
p23399
S'control_tags'
p23400
sS'required'
p23401
I00
sS'group_name'
p23402
S'Advanced'
p23403
sa(dp23404
S'description'
p23405
S'Set the enabled status of the MooseObject.\n'
p23406
sS'cpp_type'
p23407
S'bool'
p23408
sS'default'
p23409
S'1'
p23410
sS'name'
p23411
S'enable'
p23412
sS'required'
p23413
I00
sS'group_name'
p23414
S'Advanced'
p23415
sa(dp23416
S'name'
p23417
S'execute_on'
p23418
sS'cpp_type'
p23419
S'MultiMooseEnum'
p23420
sS'default'
p23421
S'LINEAR'
p23422
sS'description'
p23423
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23424
sS'required'
p23425
I00
sS'options'
p23426
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23427
sS'group_name'
p23428
Nsa(dp23429
S'description'
p23430
S'The factor by which to multiply your material property for visualization\n'
p23431
sS'cpp_type'
p23432
S'double'
p23433
sS'default'
p23434
S'1'
p23435
sS'name'
p23436
S'factor'
p23437
sS'required'
p23438
I00
sS'group_name'
p23439
Nsa(dp23440
S'description'
p23441
S'The offset to add to your material property for visualization\n'
p23442
sS'cpp_type'
p23443
S'double'
p23444
sS'default'
p23445
S'0'
p23446
sS'name'
p23447
S'offset'
p23448
sS'required'
p23449
I00
sS'group_name'
p23450
Nsa(dp23451
S'description'
p23452
S'The scalar material property name\n'
p23453
sS'cpp_type'
p23454
S'MaterialPropertyName'
p23455
sS'default'
p23456
g3
sS'name'
p23457
S'property'
p23458
sS'required'
p23459
I01
sS'group_name'
p23460
Nsa(dp23461
S'description'
p23462
S'The row component to consider for this kernel\n'
p23463
sS'cpp_type'
p23464
S'unsigned int'
p23465
sS'default'
p23466
S'0'
p23467
sS'name'
p23468
S'row'
p23469
sS'required'
p23470
I00
sS'group_name'
p23471
Nsa(dp23472
S'description'
p23473
S'The seed for the master random number generator\n'
p23474
sS'cpp_type'
p23475
S'unsigned int'
p23476
sS'default'
p23477
S'0'
p23478
sS'name'
p23479
S'seed'
p23480
sS'required'
p23481
I00
sS'group_name'
p23482
S'Advanced'
p23483
sa(dp23484
S'description'
p23485
g3
sS'cpp_type'
p23486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23487
sS'default'
p23488
S'MaterialRealTensorValueAux'
p23489
sS'name'
p23490
S'type'
p23491
sS'required'
p23492
I00
sS'group_name'
p23493
Nsa(dp23494
S'description'
p23495
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23496
sS'cpp_type'
p23497
S'bool'
p23498
sS'default'
p23499
S'0'
p23500
sS'name'
p23501
S'use_displaced_mesh'
p23502
sS'required'
p23503
I00
sS'group_name'
p23504
S'Advanced'
p23505
sa(dp23506
S'description'
p23507
S'The name of the variable that this object applies to\n'
p23508
sS'cpp_type'
p23509
S'AuxVariableName'
p23510
sS'default'
p23511
g3
sS'name'
p23512
S'variable'
p23513
sS'required'
p23514
I01
sS'group_name'
p23515
NsasS'name'
p23516
S'/Bounds/MaterialRealTensorValueAux'
p23517
sa(dp23518
S'description'
p23519
g3
sS'subblocks'
p23520
NsS'parameters'
p23521
(lp23522
(dp23523
S'description'
p23524
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23525
sS'cpp_type'
p23526
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23527
sS'default'
p23528
g3
sS'name'
p23529
S'block'
p23530
sS'required'
p23531
I00
sS'group_name'
p23532
Nsa(dp23533
S'description'
p23534
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23535
sS'cpp_type'
p23536
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23537
sS'default'
p23538
g3
sS'name'
p23539
S'boundary'
p23540
sS'required'
p23541
I00
sS'group_name'
p23542
Nsa(dp23543
S'description'
p23544
S'The vector component to consider for this kernel\n'
p23545
sS'cpp_type'
p23546
S'unsigned int'
p23547
sS'default'
p23548
S'0'
p23549
sS'name'
p23550
S'component'
p23551
sS'required'
p23552
I00
sS'group_name'
p23553
Nsa(dp23554
S'description'
p23555
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23556
sS'cpp_type'
p23557
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23558
sS'default'
p23559
g3
sS'name'
p23560
S'control_tags'
p23561
sS'required'
p23562
I00
sS'group_name'
p23563
S'Advanced'
p23564
sa(dp23565
S'description'
p23566
S'Set the enabled status of the MooseObject.\n'
p23567
sS'cpp_type'
p23568
S'bool'
p23569
sS'default'
p23570
S'1'
p23571
sS'name'
p23572
S'enable'
p23573
sS'required'
p23574
I00
sS'group_name'
p23575
S'Advanced'
p23576
sa(dp23577
S'name'
p23578
S'execute_on'
p23579
sS'cpp_type'
p23580
S'MultiMooseEnum'
p23581
sS'default'
p23582
S'LINEAR'
p23583
sS'description'
p23584
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23585
sS'required'
p23586
I00
sS'options'
p23587
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23588
sS'group_name'
p23589
Nsa(dp23590
S'description'
p23591
S'The factor by which to multiply your material property for visualization\n'
p23592
sS'cpp_type'
p23593
S'double'
p23594
sS'default'
p23595
S'1'
p23596
sS'name'
p23597
S'factor'
p23598
sS'required'
p23599
I00
sS'group_name'
p23600
Nsa(dp23601
S'description'
p23602
S'The offset to add to your material property for visualization\n'
p23603
sS'cpp_type'
p23604
S'double'
p23605
sS'default'
p23606
S'0'
p23607
sS'name'
p23608
S'offset'
p23609
sS'required'
p23610
I00
sS'group_name'
p23611
Nsa(dp23612
S'description'
p23613
S'The scalar material property name\n'
p23614
sS'cpp_type'
p23615
S'MaterialPropertyName'
p23616
sS'default'
p23617
g3
sS'name'
p23618
S'property'
p23619
sS'required'
p23620
I01
sS'group_name'
p23621
Nsa(dp23622
S'description'
p23623
S'The seed for the master random number generator\n'
p23624
sS'cpp_type'
p23625
S'unsigned int'
p23626
sS'default'
p23627
S'0'
p23628
sS'name'
p23629
S'seed'
p23630
sS'required'
p23631
I00
sS'group_name'
p23632
S'Advanced'
p23633
sa(dp23634
S'description'
p23635
g3
sS'cpp_type'
p23636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23637
sS'default'
p23638
S'MaterialRealVectorValueAux'
p23639
sS'name'
p23640
S'type'
p23641
sS'required'
p23642
I00
sS'group_name'
p23643
Nsa(dp23644
S'description'
p23645
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23646
sS'cpp_type'
p23647
S'bool'
p23648
sS'default'
p23649
S'0'
p23650
sS'name'
p23651
S'use_displaced_mesh'
p23652
sS'required'
p23653
I00
sS'group_name'
p23654
S'Advanced'
p23655
sa(dp23656
S'description'
p23657
S'The name of the variable that this object applies to\n'
p23658
sS'cpp_type'
p23659
S'AuxVariableName'
p23660
sS'default'
p23661
g3
sS'name'
p23662
S'variable'
p23663
sS'required'
p23664
I01
sS'group_name'
p23665
NsasS'name'
p23666
S'/Bounds/MaterialRealVectorValueAux'
p23667
sa(dp23668
S'description'
p23669
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p23670
sS'subblocks'
p23671
NsS'parameters'
p23672
(lp23673
(dp23674
S'description'
p23675
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23676
sS'cpp_type'
p23677
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23678
sS'default'
p23679
g3
sS'name'
p23680
S'block'
p23681
sS'required'
p23682
I00
sS'group_name'
p23683
Nsa(dp23684
S'description'
p23685
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23686
sS'cpp_type'
p23687
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23688
sS'default'
p23689
g3
sS'name'
p23690
S'boundary'
p23691
sS'required'
p23692
I00
sS'group_name'
p23693
Nsa(dp23694
S'description'
p23695
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23696
sS'cpp_type'
p23697
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23698
sS'default'
p23699
g3
sS'name'
p23700
S'control_tags'
p23701
sS'required'
p23702
I00
sS'group_name'
p23703
S'Advanced'
p23704
sa(dp23705
S'description'
p23706
S'Set the enabled status of the MooseObject.\n'
p23707
sS'cpp_type'
p23708
S'bool'
p23709
sS'default'
p23710
S'1'
p23711
sS'name'
p23712
S'enable'
p23713
sS'required'
p23714
I00
sS'group_name'
p23715
S'Advanced'
p23716
sa(dp23717
S'name'
p23718
S'execute_on'
p23719
sS'cpp_type'
p23720
S'MultiMooseEnum'
p23721
sS'default'
p23722
S'LINEAR'
p23723
sS'description'
p23724
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23725
sS'required'
p23726
I00
sS'options'
p23727
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23728
sS'group_name'
p23729
Nsa(dp23730
S'description'
p23731
S'The factor by which to multiply your material property for visualization\n'
p23732
sS'cpp_type'
p23733
S'double'
p23734
sS'default'
p23735
S'1'
p23736
sS'name'
p23737
S'factor'
p23738
sS'required'
p23739
I00
sS'group_name'
p23740
Nsa(dp23741
S'description'
p23742
S'The index to consider for this kernel\n'
p23743
sS'cpp_type'
p23744
S'unsigned int'
p23745
sS'default'
p23746
S'0'
p23747
sS'name'
p23748
S'index'
p23749
sS'required'
p23750
I00
sS'group_name'
p23751
Nsa(dp23752
S'description'
p23753
S'The offset to add to your material property for visualization\n'
p23754
sS'cpp_type'
p23755
S'double'
p23756
sS'default'
p23757
S'0'
p23758
sS'name'
p23759
S'offset'
p23760
sS'required'
p23761
I00
sS'group_name'
p23762
Nsa(dp23763
S'description'
p23764
S'The scalar material property name\n'
p23765
sS'cpp_type'
p23766
S'MaterialPropertyName'
p23767
sS'default'
p23768
g3
sS'name'
p23769
S'property'
p23770
sS'required'
p23771
I01
sS'group_name'
p23772
Nsa(dp23773
S'description'
p23774
S'The seed for the master random number generator\n'
p23775
sS'cpp_type'
p23776
S'unsigned int'
p23777
sS'default'
p23778
S'0'
p23779
sS'name'
p23780
S'seed'
p23781
sS'required'
p23782
I00
sS'group_name'
p23783
S'Advanced'
p23784
sa(dp23785
S'description'
p23786
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p23787
sS'cpp_type'
p23788
S'unsigned int'
p23789
sS'default'
p23790
g3
sS'name'
p23791
S'selected_qp'
p23792
sS'required'
p23793
I00
sS'group_name'
p23794
S'Advanced'
p23795
sa(dp23796
S'description'
p23797
g3
sS'cpp_type'
p23798
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23799
sS'default'
p23800
S'MaterialStdVectorAux'
p23801
sS'name'
p23802
S'type'
p23803
sS'required'
p23804
I00
sS'group_name'
p23805
Nsa(dp23806
S'description'
p23807
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23808
sS'cpp_type'
p23809
S'bool'
p23810
sS'default'
p23811
S'0'
p23812
sS'name'
p23813
S'use_displaced_mesh'
p23814
sS'required'
p23815
I00
sS'group_name'
p23816
S'Advanced'
p23817
sa(dp23818
S'description'
p23819
S'The name of the variable that this object applies to\n'
p23820
sS'cpp_type'
p23821
S'AuxVariableName'
p23822
sS'default'
p23823
g3
sS'name'
p23824
S'variable'
p23825
sS'required'
p23826
I01
sS'group_name'
p23827
NsasS'name'
p23828
S'/Bounds/MaterialStdVectorAux'
p23829
sa(dp23830
S'description'
p23831
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p23832
sS'subblocks'
p23833
NsS'parameters'
p23834
(lp23835
(dp23836
S'description'
p23837
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23838
sS'cpp_type'
p23839
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p23840
sS'default'
p23841
g3
sS'name'
p23842
S'block'
p23843
sS'required'
p23844
I00
sS'group_name'
p23845
Nsa(dp23846
S'description'
p23847
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23848
sS'cpp_type'
p23849
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23850
sS'default'
p23851
g3
sS'name'
p23852
S'boundary'
p23853
sS'required'
p23854
I00
sS'group_name'
p23855
Nsa(dp23856
S'description'
p23857
S'The gradient component to be extracted for this kernel\n'
p23858
sS'cpp_type'
p23859
S'unsigned int'
p23860
sS'default'
p23861
S'0'
p23862
sS'name'
p23863
S'component'
p23864
sS'required'
p23865
I00
sS'group_name'
p23866
Nsa(dp23867
S'description'
p23868
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23869
sS'cpp_type'
p23870
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23871
sS'default'
p23872
g3
sS'name'
p23873
S'control_tags'
p23874
sS'required'
p23875
I00
sS'group_name'
p23876
S'Advanced'
p23877
sa(dp23878
S'description'
p23879
S'Set the enabled status of the MooseObject.\n'
p23880
sS'cpp_type'
p23881
S'bool'
p23882
sS'default'
p23883
S'1'
p23884
sS'name'
p23885
S'enable'
p23886
sS'required'
p23887
I00
sS'group_name'
p23888
S'Advanced'
p23889
sa(dp23890
S'name'
p23891
S'execute_on'
p23892
sS'cpp_type'
p23893
S'MultiMooseEnum'
p23894
sS'default'
p23895
S'LINEAR'
p23896
sS'description'
p23897
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p23898
sS'required'
p23899
I00
sS'options'
p23900
S'none initial linear nonlinear timestep_end timestep_begin custom'
p23901
sS'group_name'
p23902
Nsa(dp23903
S'description'
p23904
S'The factor by which to multiply your material property for visualization\n'
p23905
sS'cpp_type'
p23906
S'double'
p23907
sS'default'
p23908
S'1'
p23909
sS'name'
p23910
S'factor'
p23911
sS'required'
p23912
I00
sS'group_name'
p23913
Nsa(dp23914
S'description'
p23915
S'The index to consider for this kernel\n'
p23916
sS'cpp_type'
p23917
S'unsigned int'
p23918
sS'default'
p23919
S'0'
p23920
sS'name'
p23921
S'index'
p23922
sS'required'
p23923
I00
sS'group_name'
p23924
Nsa(dp23925
S'description'
p23926
S'The offset to add to your material property for visualization\n'
p23927
sS'cpp_type'
p23928
S'double'
p23929
sS'default'
p23930
S'0'
p23931
sS'name'
p23932
S'offset'
p23933
sS'required'
p23934
I00
sS'group_name'
p23935
Nsa(dp23936
S'description'
p23937
S'The scalar material property name\n'
p23938
sS'cpp_type'
p23939
S'MaterialPropertyName'
p23940
sS'default'
p23941
g3
sS'name'
p23942
S'property'
p23943
sS'required'
p23944
I01
sS'group_name'
p23945
Nsa(dp23946
S'description'
p23947
S'The seed for the master random number generator\n'
p23948
sS'cpp_type'
p23949
S'unsigned int'
p23950
sS'default'
p23951
S'0'
p23952
sS'name'
p23953
S'seed'
p23954
sS'required'
p23955
I00
sS'group_name'
p23956
S'Advanced'
p23957
sa(dp23958
S'description'
p23959
g3
sS'cpp_type'
p23960
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23961
sS'default'
p23962
S'MaterialStdVectorRealGradientAux'
p23963
sS'name'
p23964
S'type'
p23965
sS'required'
p23966
I00
sS'group_name'
p23967
Nsa(dp23968
S'description'
p23969
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23970
sS'cpp_type'
p23971
S'bool'
p23972
sS'default'
p23973
S'0'
p23974
sS'name'
p23975
S'use_displaced_mesh'
p23976
sS'required'
p23977
I00
sS'group_name'
p23978
S'Advanced'
p23979
sa(dp23980
S'description'
p23981
S'The name of the variable that this object applies to\n'
p23982
sS'cpp_type'
p23983
S'AuxVariableName'
p23984
sS'default'
p23985
g3
sS'name'
p23986
S'variable'
p23987
sS'required'
p23988
I01
sS'group_name'
p23989
NsasS'name'
p23990
S'/Bounds/MaterialStdVectorRealGradientAux'
p23991
sa(dp23992
S'description'
p23993
g3
sS'subblocks'
p23994
NsS'parameters'
p23995
(lp23996
(dp23997
S'description'
p23998
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23999
sS'cpp_type'
p24000
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24001
sS'default'
p24002
g3
sS'name'
p24003
S'block'
p24004
sS'required'
p24005
I00
sS'group_name'
p24006
Nsa(dp24007
S'description'
p24008
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24009
sS'cpp_type'
p24010
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24011
sS'default'
p24012
g3
sS'name'
p24013
S'boundary'
p24014
sS'required'
p24015
I00
sS'group_name'
p24016
Nsa(dp24017
S'description'
p24018
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24019
sS'cpp_type'
p24020
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24021
sS'default'
p24022
g3
sS'name'
p24023
S'control_tags'
p24024
sS'required'
p24025
I00
sS'group_name'
p24026
S'Advanced'
p24027
sa(dp24028
S'description'
p24029
S'Set the enabled status of the MooseObject.\n'
p24030
sS'cpp_type'
p24031
S'bool'
p24032
sS'default'
p24033
S'1'
p24034
sS'name'
p24035
S'enable'
p24036
sS'required'
p24037
I00
sS'group_name'
p24038
S'Advanced'
p24039
sa(dp24040
S'name'
p24041
S'execute_on'
p24042
sS'cpp_type'
p24043
S'MultiMooseEnum'
p24044
sS'default'
p24045
S'LINEAR'
p24046
sS'description'
p24047
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24048
sS'required'
p24049
I00
sS'options'
p24050
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24051
sS'group_name'
p24052
Nsa(dp24053
S'description'
p24054
S'The boundary to find the distance to.\n'
p24055
sS'cpp_type'
p24056
S'BoundaryName'
p24057
sS'default'
p24058
g3
sS'name'
p24059
S'paired_boundary'
p24060
sS'required'
p24061
I01
sS'group_name'
p24062
Nsa(dp24063
S'description'
p24064
S'The seed for the master random number generator\n'
p24065
sS'cpp_type'
p24066
S'unsigned int'
p24067
sS'default'
p24068
S'0'
p24069
sS'name'
p24070
S'seed'
p24071
sS'required'
p24072
I00
sS'group_name'
p24073
S'Advanced'
p24074
sa(dp24075
S'description'
p24076
g3
sS'cpp_type'
p24077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24078
sS'default'
p24079
S'NearestNodeDistanceAux'
p24080
sS'name'
p24081
S'type'
p24082
sS'required'
p24083
I00
sS'group_name'
p24084
Nsa(dp24085
S'description'
p24086
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24087
sS'cpp_type'
p24088
S'bool'
p24089
sS'default'
p24090
S'1'
p24091
sS'name'
p24092
S'use_displaced_mesh'
p24093
sS'required'
p24094
I00
sS'group_name'
p24095
S'Advanced'
p24096
sa(dp24097
S'description'
p24098
S'The name of the variable that this object applies to\n'
p24099
sS'cpp_type'
p24100
S'AuxVariableName'
p24101
sS'default'
p24102
g3
sS'name'
p24103
S'variable'
p24104
sS'required'
p24105
I01
sS'group_name'
p24106
NsasS'name'
p24107
S'/Bounds/NearestNodeDistanceAux'
p24108
sa(dp24109
S'description'
p24110
g3
sS'subblocks'
p24111
NsS'parameters'
p24112
(lp24113
(dp24114
S'description'
p24115
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24116
sS'cpp_type'
p24117
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24118
sS'default'
p24119
g3
sS'name'
p24120
S'block'
p24121
sS'required'
p24122
I00
sS'group_name'
p24123
Nsa(dp24124
S'description'
p24125
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24126
sS'cpp_type'
p24127
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24128
sS'default'
p24129
g3
sS'name'
p24130
S'boundary'
p24131
sS'required'
p24132
I00
sS'group_name'
p24133
Nsa(dp24134
S'description'
p24135
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24136
sS'cpp_type'
p24137
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24138
sS'default'
p24139
g3
sS'name'
p24140
S'control_tags'
p24141
sS'required'
p24142
I00
sS'group_name'
p24143
S'Advanced'
p24144
sa(dp24145
S'description'
p24146
S'Set the enabled status of the MooseObject.\n'
p24147
sS'cpp_type'
p24148
S'bool'
p24149
sS'default'
p24150
S'1'
p24151
sS'name'
p24152
S'enable'
p24153
sS'required'
p24154
I00
sS'group_name'
p24155
S'Advanced'
p24156
sa(dp24157
S'name'
p24158
S'execute_on'
p24159
sS'cpp_type'
p24160
S'MultiMooseEnum'
p24161
sS'default'
p24162
S'LINEAR'
p24163
sS'description'
p24164
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24165
sS'required'
p24166
I00
sS'options'
p24167
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24168
sS'group_name'
p24169
Nsa(dp24170
S'description'
p24171
S'The boundary to get the value from.\n'
p24172
sS'cpp_type'
p24173
S'BoundaryName'
p24174
sS'default'
p24175
g3
sS'name'
p24176
S'paired_boundary'
p24177
sS'required'
p24178
I01
sS'group_name'
p24179
Nsa(dp24180
S'description'
p24181
S'The variable to get the value of.\n'
p24182
sS'cpp_type'
p24183
S'std::vector<VariableName>'
p24184
sS'default'
p24185
g3
sS'name'
p24186
S'paired_variable'
p24187
sS'required'
p24188
I01
sS'group_name'
p24189
Nsa(dp24190
S'description'
p24191
S'The seed for the master random number generator\n'
p24192
sS'cpp_type'
p24193
S'unsigned int'
p24194
sS'default'
p24195
S'0'
p24196
sS'name'
p24197
S'seed'
p24198
sS'required'
p24199
I00
sS'group_name'
p24200
S'Advanced'
p24201
sa(dp24202
S'description'
p24203
g3
sS'cpp_type'
p24204
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24205
sS'default'
p24206
S'NearestNodeValueAux'
p24207
sS'name'
p24208
S'type'
p24209
sS'required'
p24210
I00
sS'group_name'
p24211
Nsa(dp24212
S'description'
p24213
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24214
sS'cpp_type'
p24215
S'bool'
p24216
sS'default'
p24217
S'1'
p24218
sS'name'
p24219
S'use_displaced_mesh'
p24220
sS'required'
p24221
I00
sS'group_name'
p24222
S'Advanced'
p24223
sa(dp24224
S'description'
p24225
S'The name of the variable that this object applies to\n'
p24226
sS'cpp_type'
p24227
S'AuxVariableName'
p24228
sS'default'
p24229
g3
sS'name'
p24230
S'variable'
p24231
sS'required'
p24232
I01
sS'group_name'
p24233
NsasS'name'
p24234
S'/Bounds/NearestNodeValueAux'
p24235
sa(dp24236
S'description'
p24237
g3
sS'subblocks'
p24238
NsS'parameters'
p24239
(lp24240
(dp24241
S'description'
p24242
S'beta parameter\n'
p24243
sS'cpp_type'
p24244
S'double'
p24245
sS'default'
p24246
g3
sS'name'
p24247
S'beta'
p24248
sS'required'
p24249
I01
sS'group_name'
p24250
Nsa(dp24251
S'description'
p24252
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24253
sS'cpp_type'
p24254
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24255
sS'default'
p24256
g3
sS'name'
p24257
S'block'
p24258
sS'required'
p24259
I00
sS'group_name'
p24260
Nsa(dp24261
S'description'
p24262
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24263
sS'cpp_type'
p24264
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24265
sS'default'
p24266
g3
sS'name'
p24267
S'boundary'
p24268
sS'required'
p24269
I00
sS'group_name'
p24270
Nsa(dp24271
S'description'
p24272
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24273
sS'cpp_type'
p24274
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24275
sS'default'
p24276
g3
sS'name'
p24277
S'control_tags'
p24278
sS'required'
p24279
I00
sS'group_name'
p24280
S'Advanced'
p24281
sa(dp24282
S'description'
p24283
S'displacement variable\n'
p24284
sS'cpp_type'
p24285
S'std::vector<VariableName>'
p24286
sS'default'
p24287
g3
sS'name'
p24288
S'displacement'
p24289
sS'required'
p24290
I01
sS'group_name'
p24291
Nsa(dp24292
S'description'
p24293
S'Set the enabled status of the MooseObject.\n'
p24294
sS'cpp_type'
p24295
S'bool'
p24296
sS'default'
p24297
S'1'
p24298
sS'name'
p24299
S'enable'
p24300
sS'required'
p24301
I00
sS'group_name'
p24302
S'Advanced'
p24303
sa(dp24304
S'name'
p24305
S'execute_on'
p24306
sS'cpp_type'
p24307
S'MultiMooseEnum'
p24308
sS'default'
p24309
S'LINEAR'
p24310
sS'description'
p24311
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24312
sS'required'
p24313
I00
sS'options'
p24314
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24315
sS'group_name'
p24316
Nsa(dp24317
S'description'
p24318
S'The seed for the master random number generator\n'
p24319
sS'cpp_type'
p24320
S'unsigned int'
p24321
sS'default'
p24322
S'0'
p24323
sS'name'
p24324
S'seed'
p24325
sS'required'
p24326
I00
sS'group_name'
p24327
S'Advanced'
p24328
sa(dp24329
S'description'
p24330
g3
sS'cpp_type'
p24331
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24332
sS'default'
p24333
S'NewmarkAccelAux'
p24334
sS'name'
p24335
S'type'
p24336
sS'required'
p24337
I00
sS'group_name'
p24338
Nsa(dp24339
S'description'
p24340
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24341
sS'cpp_type'
p24342
S'bool'
p24343
sS'default'
p24344
S'0'
p24345
sS'name'
p24346
S'use_displaced_mesh'
p24347
sS'required'
p24348
I00
sS'group_name'
p24349
S'Advanced'
p24350
sa(dp24351
S'description'
p24352
S'The name of the variable that this object applies to\n'
p24353
sS'cpp_type'
p24354
S'AuxVariableName'
p24355
sS'default'
p24356
g3
sS'name'
p24357
S'variable'
p24358
sS'required'
p24359
I01
sS'group_name'
p24360
Nsa(dp24361
S'description'
p24362
S'velocity variable\n'
p24363
sS'cpp_type'
p24364
S'std::vector<VariableName>'
p24365
sS'default'
p24366
g3
sS'name'
p24367
S'velocity'
p24368
sS'required'
p24369
I01
sS'group_name'
p24370
NsasS'name'
p24371
S'/Bounds/NewmarkAccelAux'
p24372
sa(dp24373
S'description'
p24374
g3
sS'subblocks'
p24375
NsS'parameters'
p24376
(lp24377
(dp24378
S'description'
p24379
S'acceleration variable\n'
p24380
sS'cpp_type'
p24381
S'std::vector<VariableName>'
p24382
sS'default'
p24383
g3
sS'name'
p24384
S'acceleration'
p24385
sS'required'
p24386
I01
sS'group_name'
p24387
Nsa(dp24388
S'description'
p24389
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24390
sS'cpp_type'
p24391
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24392
sS'default'
p24393
g3
sS'name'
p24394
S'block'
p24395
sS'required'
p24396
I00
sS'group_name'
p24397
Nsa(dp24398
S'description'
p24399
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24400
sS'cpp_type'
p24401
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24402
sS'default'
p24403
g3
sS'name'
p24404
S'boundary'
p24405
sS'required'
p24406
I00
sS'group_name'
p24407
Nsa(dp24408
S'description'
p24409
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24410
sS'cpp_type'
p24411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24412
sS'default'
p24413
g3
sS'name'
p24414
S'control_tags'
p24415
sS'required'
p24416
I00
sS'group_name'
p24417
S'Advanced'
p24418
sa(dp24419
S'description'
p24420
S'Set the enabled status of the MooseObject.\n'
p24421
sS'cpp_type'
p24422
S'bool'
p24423
sS'default'
p24424
S'1'
p24425
sS'name'
p24426
S'enable'
p24427
sS'required'
p24428
I00
sS'group_name'
p24429
S'Advanced'
p24430
sa(dp24431
S'name'
p24432
S'execute_on'
p24433
sS'cpp_type'
p24434
S'MultiMooseEnum'
p24435
sS'default'
p24436
S'LINEAR'
p24437
sS'description'
p24438
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24439
sS'required'
p24440
I00
sS'options'
p24441
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24442
sS'group_name'
p24443
Nsa(dp24444
S'description'
p24445
S'gamma parameter\n'
p24446
sS'cpp_type'
p24447
S'double'
p24448
sS'default'
p24449
g3
sS'name'
p24450
S'gamma'
p24451
sS'required'
p24452
I01
sS'group_name'
p24453
Nsa(dp24454
S'description'
p24455
S'The seed for the master random number generator\n'
p24456
sS'cpp_type'
p24457
S'unsigned int'
p24458
sS'default'
p24459
S'0'
p24460
sS'name'
p24461
S'seed'
p24462
sS'required'
p24463
I00
sS'group_name'
p24464
S'Advanced'
p24465
sa(dp24466
S'description'
p24467
g3
sS'cpp_type'
p24468
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24469
sS'default'
p24470
S'NewmarkVelAux'
p24471
sS'name'
p24472
S'type'
p24473
sS'required'
p24474
I00
sS'group_name'
p24475
Nsa(dp24476
S'description'
p24477
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24478
sS'cpp_type'
p24479
S'bool'
p24480
sS'default'
p24481
S'0'
p24482
sS'name'
p24483
S'use_displaced_mesh'
p24484
sS'required'
p24485
I00
sS'group_name'
p24486
S'Advanced'
p24487
sa(dp24488
S'description'
p24489
S'The name of the variable that this object applies to\n'
p24490
sS'cpp_type'
p24491
S'AuxVariableName'
p24492
sS'default'
p24493
g3
sS'name'
p24494
S'variable'
p24495
sS'required'
p24496
I01
sS'group_name'
p24497
NsasS'name'
p24498
S'/Bounds/NewmarkVelAux'
p24499
sa(dp24500
S'description'
p24501
g3
sS'subblocks'
p24502
NsS'parameters'
p24503
(lp24504
(dp24505
S'description'
p24506
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24507
sS'cpp_type'
p24508
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24509
sS'default'
p24510
g3
sS'name'
p24511
S'block'
p24512
sS'required'
p24513
I00
sS'group_name'
p24514
Nsa(dp24515
S'description'
p24516
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24517
sS'cpp_type'
p24518
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24519
sS'default'
p24520
g3
sS'name'
p24521
S'boundary'
p24522
sS'required'
p24523
I00
sS'group_name'
p24524
Nsa(dp24525
S'description'
p24526
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24527
sS'cpp_type'
p24528
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24529
sS'default'
p24530
g3
sS'name'
p24531
S'control_tags'
p24532
sS'required'
p24533
I00
sS'group_name'
p24534
S'Advanced'
p24535
sa(dp24536
S'description'
p24537
S'Set the enabled status of the MooseObject.\n'
p24538
sS'cpp_type'
p24539
S'bool'
p24540
sS'default'
p24541
S'1'
p24542
sS'name'
p24543
S'enable'
p24544
sS'required'
p24545
I00
sS'group_name'
p24546
S'Advanced'
p24547
sa(dp24548
S'name'
p24549
S'execute_on'
p24550
sS'cpp_type'
p24551
S'MultiMooseEnum'
p24552
sS'default'
p24553
S'LINEAR'
p24554
sS'description'
p24555
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24556
sS'required'
p24557
I00
sS'options'
p24558
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24559
sS'group_name'
p24560
Nsa(dp24561
S'description'
p24562
S'The normalization factor\n'
p24563
sS'cpp_type'
p24564
S'double'
p24565
sS'default'
p24566
S'1'
p24567
sS'name'
p24568
S'normal_factor'
p24569
sS'required'
p24570
I00
sS'group_name'
p24571
Nsa(dp24572
S'description'
p24573
S'The postprocessor on the source\n'
p24574
sS'cpp_type'
p24575
S'PostprocessorName'
p24576
sS'default'
p24577
g3
sS'name'
p24578
S'normalization'
p24579
sS'required'
p24580
I01
sS'group_name'
p24581
Nsa(dp24582
S'description'
p24583
S'The seed for the master random number generator\n'
p24584
sS'cpp_type'
p24585
S'unsigned int'
p24586
sS'default'
p24587
S'0'
p24588
sS'name'
p24589
S'seed'
p24590
sS'required'
p24591
I00
sS'group_name'
p24592
S'Advanced'
p24593
sa(dp24594
S'description'
p24595
S'The variable to be normalized\n'
p24596
sS'cpp_type'
p24597
S'std::vector<VariableName>'
p24598
sS'default'
p24599
g3
sS'name'
p24600
S'source_variable'
p24601
sS'required'
p24602
I01
sS'group_name'
p24603
Nsa(dp24604
S'description'
p24605
g3
sS'cpp_type'
p24606
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24607
sS'default'
p24608
S'NormalizationAux'
p24609
sS'name'
p24610
S'type'
p24611
sS'required'
p24612
I00
sS'group_name'
p24613
Nsa(dp24614
S'description'
p24615
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24616
sS'cpp_type'
p24617
S'bool'
p24618
sS'default'
p24619
S'0'
p24620
sS'name'
p24621
S'use_displaced_mesh'
p24622
sS'required'
p24623
I00
sS'group_name'
p24624
S'Advanced'
p24625
sa(dp24626
S'description'
p24627
S'The name of the variable that this object applies to\n'
p24628
sS'cpp_type'
p24629
S'AuxVariableName'
p24630
sS'default'
p24631
g3
sS'name'
p24632
S'variable'
p24633
sS'required'
p24634
I01
sS'group_name'
p24635
NsasS'name'
p24636
S'/Bounds/NormalizationAux'
p24637
sa(dp24638
S'description'
p24639
S'Output euler angles from user object to an AuxVariable.\n'
p24640
sS'subblocks'
p24641
NsS'parameters'
p24642
(lp24643
(dp24644
S'description'
p24645
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24646
sS'cpp_type'
p24647
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24648
sS'default'
p24649
g3
sS'name'
p24650
S'block'
p24651
sS'required'
p24652
I00
sS'group_name'
p24653
Nsa(dp24654
S'description'
p24655
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24656
sS'cpp_type'
p24657
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24658
sS'default'
p24659
g3
sS'name'
p24660
S'boundary'
p24661
sS'required'
p24662
I00
sS'group_name'
p24663
Nsa(dp24664
S'description'
p24665
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24666
sS'cpp_type'
p24667
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24668
sS'default'
p24669
g3
sS'name'
p24670
S'control_tags'
p24671
sS'required'
p24672
I00
sS'group_name'
p24673
S'Advanced'
p24674
sa(dp24675
S'description'
p24676
S'Set the enabled status of the MooseObject.\n'
p24677
sS'cpp_type'
p24678
S'bool'
p24679
sS'default'
p24680
S'1'
p24681
sS'name'
p24682
S'enable'
p24683
sS'required'
p24684
I00
sS'group_name'
p24685
S'Advanced'
p24686
sa(dp24687
S'description'
p24688
S'Name of Euler angle provider user object\n'
p24689
sS'cpp_type'
p24690
S'UserObjectName'
p24691
sS'default'
p24692
g3
sS'name'
p24693
S'euler_angle_provider'
p24694
sS'required'
p24695
I01
sS'group_name'
p24696
Nsa(dp24697
S'name'
p24698
S'execute_on'
p24699
sS'cpp_type'
p24700
S'MultiMooseEnum'
p24701
sS'default'
p24702
S'LINEAR'
p24703
sS'description'
p24704
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24705
sS'required'
p24706
I00
sS'options'
p24707
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24708
sS'group_name'
p24709
Nsa(dp24710
S'description'
p24711
S'The GrainTracker UserObject to get values from.\n'
p24712
sS'cpp_type'
p24713
S'UserObjectName'
p24714
sS'default'
p24715
g3
sS'name'
p24716
S'grain_tracker'
p24717
sS'required'
p24718
I01
sS'group_name'
p24719
Nsa(dp24720
S'name'
p24721
S'output_euler_angle'
p24722
sS'cpp_type'
p24723
S'MooseEnum'
p24724
sS'default'
p24725
g3
sS'description'
p24726
S'Euler angle to output\n'
p24727
sS'required'
p24728
I01
sS'options'
p24729
S'phi1 Phi phi2'
p24730
sS'group_name'
p24731
Nsa(dp24732
S'description'
p24733
S'The seed for the master random number generator\n'
p24734
sS'cpp_type'
p24735
S'unsigned int'
p24736
sS'default'
p24737
S'0'
p24738
sS'name'
p24739
S'seed'
p24740
sS'required'
p24741
I00
sS'group_name'
p24742
S'Advanced'
p24743
sa(dp24744
S'description'
p24745
g3
sS'cpp_type'
p24746
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24747
sS'default'
p24748
S'OutputEulerAngles'
p24749
sS'name'
p24750
S'type'
p24751
sS'required'
p24752
I00
sS'group_name'
p24753
Nsa(dp24754
S'description'
p24755
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24756
sS'cpp_type'
p24757
S'bool'
p24758
sS'default'
p24759
S'0'
p24760
sS'name'
p24761
S'use_displaced_mesh'
p24762
sS'required'
p24763
I00
sS'group_name'
p24764
S'Advanced'
p24765
sa(dp24766
S'description'
p24767
S'The name of the variable that this object applies to\n'
p24768
sS'cpp_type'
p24769
S'AuxVariableName'
p24770
sS'default'
p24771
g3
sS'name'
p24772
S'variable'
p24773
sS'required'
p24774
I01
sS'group_name'
p24775
NsasS'name'
p24776
S'/Bounds/OutputEulerAngles'
p24777
sa(dp24778
S'description'
p24779
g3
sS'subblocks'
p24780
NsS'parameters'
p24781
(lp24782
(dp24783
S'description'
p24784
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24785
sS'cpp_type'
p24786
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24787
sS'default'
p24788
g3
sS'name'
p24789
S'block'
p24790
sS'required'
p24791
I00
sS'group_name'
p24792
Nsa(dp24793
S'description'
p24794
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24795
sS'cpp_type'
p24796
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24797
sS'default'
p24798
g3
sS'name'
p24799
S'boundary'
p24800
sS'required'
p24801
I00
sS'group_name'
p24802
Nsa(dp24803
S'description'
p24804
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24805
sS'cpp_type'
p24806
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24807
sS'default'
p24808
g3
sS'name'
p24809
S'control_tags'
p24810
sS'required'
p24811
I00
sS'group_name'
p24812
S'Advanced'
p24813
sa(dp24814
S'description'
p24815
S'Set the enabled status of the MooseObject.\n'
p24816
sS'cpp_type'
p24817
S'bool'
p24818
sS'default'
p24819
S'1'
p24820
sS'name'
p24821
S'enable'
p24822
sS'required'
p24823
I00
sS'group_name'
p24824
S'Advanced'
p24825
sa(dp24826
S'name'
p24827
S'execute_on'
p24828
sS'cpp_type'
p24829
S'MultiMooseEnum'
p24830
sS'default'
p24831
S'LINEAR'
p24832
sS'description'
p24833
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24834
sS'required'
p24835
I00
sS'options'
p24836
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24837
sS'group_name'
p24838
Nsa(dp24839
S'description'
p24840
S'The seed for the master random number generator\n'
p24841
sS'cpp_type'
p24842
S'unsigned int'
p24843
sS'default'
p24844
S'0'
p24845
sS'name'
p24846
S'seed'
p24847
sS'required'
p24848
I00
sS'group_name'
p24849
S'Advanced'
p24850
sa(dp24851
S'description'
p24852
g3
sS'cpp_type'
p24853
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24854
sS'default'
p24855
S'PFCEnergyDensity'
p24856
sS'name'
p24857
S'type'
p24858
sS'required'
p24859
I00
sS'group_name'
p24860
Nsa(dp24861
S'description'
p24862
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24863
sS'cpp_type'
p24864
S'bool'
p24865
sS'default'
p24866
S'0'
p24867
sS'name'
p24868
S'use_displaced_mesh'
p24869
sS'required'
p24870
I00
sS'group_name'
p24871
S'Advanced'
p24872
sa(dp24873
S'description'
p24874
S'Array of coupled variables\n'
p24875
sS'cpp_type'
p24876
S'std::vector<VariableName>'
p24877
sS'default'
p24878
g3
sS'name'
p24879
S'v'
p24880
sS'required'
p24881
I01
sS'group_name'
p24882
Nsa(dp24883
S'description'
p24884
S'The name of the variable that this object applies to\n'
p24885
sS'cpp_type'
p24886
S'AuxVariableName'
p24887
sS'default'
p24888
g3
sS'name'
p24889
S'variable'
p24890
sS'required'
p24891
I01
sS'group_name'
p24892
NsasS'name'
p24893
S'/Bounds/PFCEnergyDensity'
p24894
sa(dp24895
S'description'
p24896
g3
sS'subblocks'
p24897
NsS'parameters'
p24898
(lp24899
(dp24900
S'description'
p24901
S'Modified Coefficent in Taylor Series Expanstion\n'
p24902
sS'cpp_type'
p24903
S'double'
p24904
sS'default'
p24905
S'1'
p24906
sS'name'
p24907
S'a'
p24908
sS'required'
p24909
I00
sS'group_name'
p24910
Nsa(dp24911
S'description'
p24912
S'Modified Coefficent in Taylor Series Expanstion\n'
p24913
sS'cpp_type'
p24914
S'double'
p24915
sS'default'
p24916
S'1'
p24917
sS'name'
p24918
S'b'
p24919
sS'required'
p24920
I00
sS'group_name'
p24921
Nsa(dp24922
S'description'
p24923
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24924
sS'cpp_type'
p24925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24926
sS'default'
p24927
g3
sS'name'
p24928
S'block'
p24929
sS'required'
p24930
I00
sS'group_name'
p24931
Nsa(dp24932
S'description'
p24933
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24934
sS'cpp_type'
p24935
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24936
sS'default'
p24937
g3
sS'name'
p24938
S'boundary'
p24939
sS'required'
p24940
I00
sS'group_name'
p24941
Nsa(dp24942
S'description'
p24943
S'Modified Coefficent in Taylor Series Expanstion\n'
p24944
sS'cpp_type'
p24945
S'double'
p24946
sS'default'
p24947
S'1'
p24948
sS'name'
p24949
S'c'
p24950
sS'required'
p24951
I00
sS'group_name'
p24952
Nsa(dp24953
S'description'
p24954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24955
sS'cpp_type'
p24956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24957
sS'default'
p24958
g3
sS'name'
p24959
S'control_tags'
p24960
sS'required'
p24961
I00
sS'group_name'
p24962
S'Advanced'
p24963
sa(dp24964
S'description'
p24965
S'Set the enabled status of the MooseObject.\n'
p24966
sS'cpp_type'
p24967
S'bool'
p24968
sS'default'
p24969
S'1'
p24970
sS'name'
p24971
S'enable'
p24972
sS'required'
p24973
I00
sS'group_name'
p24974
S'Advanced'
p24975
sa(dp24976
S'name'
p24977
S'execute_on'
p24978
sS'cpp_type'
p24979
S'MultiMooseEnum'
p24980
sS'default'
p24981
S'LINEAR'
p24982
sS'description'
p24983
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24984
sS'required'
p24985
I00
sS'options'
p24986
S'none initial linear nonlinear timestep_end timestep_begin custom'
p24987
sS'group_name'
p24988
Nsa(dp24989
S'name'
p24990
S'log_approach'
p24991
sS'cpp_type'
p24992
S'MooseEnum'
p24993
sS'default'
p24994
g3
sS'description'
p24995
S'Which approach will be used to handle the natural log\n'
p24996
sS'required'
p24997
I01
sS'options'
p24998
S'tolerance cancelation expansion nothing'
p24999
sS'group_name'
p25000
Nsa(dp25001
S'description'
p25002
S'This is the number of terms to use in the taylor series expansion\n'
p25003
sS'cpp_type'
p25004
S'unsigned int'
p25005
sS'default'
p25006
S'4'
p25007
sS'name'
p25008
S'num_exp_terms'
p25009
sS'required'
p25010
I00
sS'group_name'
p25011
Nsa(dp25012
S'description'
p25013
S'The seed for the master random number generator\n'
p25014
sS'cpp_type'
p25015
S'unsigned int'
p25016
sS'default'
p25017
S'0'
p25018
sS'name'
p25019
S'seed'
p25020
sS'required'
p25021
I00
sS'group_name'
p25022
S'Advanced'
p25023
sa(dp25024
S'description'
p25025
S'Tolerance used when the tolerance approach is chosen\n'
p25026
sS'cpp_type'
p25027
S'double'
p25028
sS'default'
p25029
S'1e-09'
p25030
sS'name'
p25031
S'tol'
p25032
sS'required'
p25033
I00
sS'group_name'
p25034
Nsa(dp25035
S'description'
p25036
g3
sS'cpp_type'
p25037
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25038
sS'default'
p25039
S'PFCRFFEnergyDensity'
p25040
sS'name'
p25041
S'type'
p25042
sS'required'
p25043
I00
sS'group_name'
p25044
Nsa(dp25045
S'description'
p25046
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25047
sS'cpp_type'
p25048
S'bool'
p25049
sS'default'
p25050
S'0'
p25051
sS'name'
p25052
S'use_displaced_mesh'
p25053
sS'required'
p25054
I00
sS'group_name'
p25055
S'Advanced'
p25056
sa(dp25057
S'description'
p25058
S'Array of coupled variables\n'
p25059
sS'cpp_type'
p25060
S'std::vector<VariableName>'
p25061
sS'default'
p25062
g3
sS'name'
p25063
S'v'
p25064
sS'required'
p25065
I01
sS'group_name'
p25066
Nsa(dp25067
S'description'
p25068
S'The name of the variable that this object applies to\n'
p25069
sS'cpp_type'
p25070
S'AuxVariableName'
p25071
sS'default'
p25072
g3
sS'name'
p25073
S'variable'
p25074
sS'required'
p25075
I01
sS'group_name'
p25076
NsasS'name'
p25077
S'/Bounds/PFCRFFEnergyDensity'
p25078
sa(dp25079
S'description'
p25080
S'Parsed function AuxKernel.\n'
p25081
sS'subblocks'
p25082
NsS'parameters'
p25083
(lp25084
(dp25085
S'description'
p25086
S'coupled variables\n'
p25087
sS'cpp_type'
p25088
S'std::vector<VariableName>'
p25089
sS'default'
p25090
g3
sS'name'
p25091
S'args'
p25092
sS'required'
p25093
I00
sS'group_name'
p25094
Nsa(dp25095
S'description'
p25096
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25097
sS'cpp_type'
p25098
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25099
sS'default'
p25100
g3
sS'name'
p25101
S'block'
p25102
sS'required'
p25103
I00
sS'group_name'
p25104
Nsa(dp25105
S'description'
p25106
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25107
sS'cpp_type'
p25108
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25109
sS'default'
p25110
g3
sS'name'
p25111
S'boundary'
p25112
sS'required'
p25113
I00
sS'group_name'
p25114
Nsa(dp25115
S'description'
p25116
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p25117
sS'cpp_type'
p25118
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25119
sS'default'
p25120
g3
sS'name'
p25121
S'constant_expressions'
p25122
sS'required'
p25123
I00
sS'group_name'
p25124
Nsa(dp25125
S'description'
p25126
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p25127
sS'cpp_type'
p25128
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25129
sS'default'
p25130
g3
sS'name'
p25131
S'constant_names'
p25132
sS'required'
p25133
I00
sS'group_name'
p25134
Nsa(dp25135
S'description'
p25136
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25137
sS'cpp_type'
p25138
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25139
sS'default'
p25140
g3
sS'name'
p25141
S'control_tags'
p25142
sS'required'
p25143
I00
sS'group_name'
p25144
S'Advanced'
p25145
sa(dp25146
S'description'
p25147
S'Disable the function parser algebraic optimizer\n'
p25148
sS'cpp_type'
p25149
S'bool'
p25150
sS'default'
p25151
S'0'
p25152
sS'name'
p25153
S'disable_fpoptimizer'
p25154
sS'required'
p25155
I00
sS'group_name'
p25156
S'Advanced'
p25157
sa(dp25158
S'description'
p25159
S'Set the enabled status of the MooseObject.\n'
p25160
sS'cpp_type'
p25161
S'bool'
p25162
sS'default'
p25163
S'1'
p25164
sS'name'
p25165
S'enable'
p25166
sS'required'
p25167
I00
sS'group_name'
p25168
S'Advanced'
p25169
sa(dp25170
S'description'
p25171
S'Enable cacheing of function derivatives for faster startup time\n'
p25172
sS'cpp_type'
p25173
S'bool'
p25174
sS'default'
p25175
S'1'
p25176
sS'name'
p25177
S'enable_ad_cache'
p25178
sS'required'
p25179
I00
sS'group_name'
p25180
S'Advanced'
p25181
sa(dp25182
S'description'
p25183
S'Enable automatic immediate optimization of derivatives\n'
p25184
sS'cpp_type'
p25185
S'bool'
p25186
sS'default'
p25187
S'1'
p25188
sS'name'
p25189
S'enable_auto_optimize'
p25190
sS'required'
p25191
I00
sS'group_name'
p25192
S'Advanced'
p25193
sa(dp25194
S'description'
p25195
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p25196
sS'cpp_type'
p25197
S'bool'
p25198
sS'default'
p25199
S'1'
p25200
sS'name'
p25201
S'enable_jit'
p25202
sS'required'
p25203
I00
sS'group_name'
p25204
S'Advanced'
p25205
sa(dp25206
S'name'
p25207
S'execute_on'
p25208
sS'cpp_type'
p25209
S'MultiMooseEnum'
p25210
sS'default'
p25211
S'LINEAR'
p25212
sS'description'
p25213
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25214
sS'required'
p25215
I00
sS'options'
p25216
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25217
sS'group_name'
p25218
Nsa(dp25219
S'description'
p25220
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p25221
sS'cpp_type'
p25222
S'bool'
p25223
sS'default'
p25224
S'0'
p25225
sS'name'
p25226
S'fail_on_evalerror'
p25227
sS'required'
p25228
I00
sS'group_name'
p25229
S'Advanced'
p25230
sa(dp25231
S'description'
p25232
S'function expression\n'
p25233
sS'cpp_type'
p25234
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25235
sS'default'
p25236
g3
sS'name'
p25237
S'function'
p25238
sS'required'
p25239
I01
sS'group_name'
p25240
Nsa(dp25241
S'description'
p25242
S'The seed for the master random number generator\n'
p25243
sS'cpp_type'
p25244
S'unsigned int'
p25245
sS'default'
p25246
S'0'
p25247
sS'name'
p25248
S'seed'
p25249
sS'required'
p25250
I00
sS'group_name'
p25251
S'Advanced'
p25252
sa(dp25253
S'description'
p25254
g3
sS'cpp_type'
p25255
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25256
sS'default'
p25257
S'ParsedAux'
p25258
sS'name'
p25259
S'type'
p25260
sS'required'
p25261
I00
sS'group_name'
p25262
Nsa(dp25263
S'description'
p25264
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25265
sS'cpp_type'
p25266
S'bool'
p25267
sS'default'
p25268
S'0'
p25269
sS'name'
p25270
S'use_displaced_mesh'
p25271
sS'required'
p25272
I00
sS'group_name'
p25273
S'Advanced'
p25274
sa(dp25275
S'description'
p25276
S'The name of the variable that this object applies to\n'
p25277
sS'cpp_type'
p25278
S'AuxVariableName'
p25279
sS'default'
p25280
g3
sS'name'
p25281
S'variable'
p25282
sS'required'
p25283
I01
sS'group_name'
p25284
NsasS'name'
p25285
S'/Bounds/ParsedAux'
p25286
sa(dp25287
S'description'
p25288
g3
sS'subblocks'
p25289
NsS'parameters'
p25290
(lp25291
(dp25292
S'description'
p25293
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25294
sS'cpp_type'
p25295
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25296
sS'default'
p25297
g3
sS'name'
p25298
S'block'
p25299
sS'required'
p25300
I00
sS'group_name'
p25301
Nsa(dp25302
S'description'
p25303
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25304
sS'cpp_type'
p25305
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25306
sS'default'
p25307
g3
sS'name'
p25308
S'boundary'
p25309
sS'required'
p25310
I00
sS'group_name'
p25311
Nsa(dp25312
S'description'
p25313
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25314
sS'cpp_type'
p25315
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25316
sS'default'
p25317
g3
sS'name'
p25318
S'control_tags'
p25319
sS'required'
p25320
I00
sS'group_name'
p25321
S'Advanced'
p25322
sa(dp25323
S'description'
p25324
S'Set the enabled status of the MooseObject.\n'
p25325
sS'cpp_type'
p25326
S'bool'
p25327
sS'default'
p25328
S'1'
p25329
sS'name'
p25330
S'enable'
p25331
sS'required'
p25332
I00
sS'group_name'
p25333
S'Advanced'
p25334
sa(dp25335
S'name'
p25336
S'execute_on'
p25337
sS'cpp_type'
p25338
S'MultiMooseEnum'
p25339
sS'default'
p25340
S'LINEAR'
p25341
sS'description'
p25342
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25343
sS'required'
p25344
I00
sS'options'
p25345
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25346
sS'group_name'
p25347
Nsa(dp25348
S'description'
p25349
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p25350
sS'cpp_type'
p25351
S'double'
p25352
sS'default'
p25353
g3
sS'name'
p25354
S'normal_smoothing_distance'
p25355
sS'required'
p25356
I00
sS'group_name'
p25357
Nsa(dp25358
S'description'
p25359
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p25360
sS'cpp_type'
p25361
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25362
sS'default'
p25363
g3
sS'name'
p25364
S'normal_smoothing_method'
p25365
sS'required'
p25366
I00
sS'group_name'
p25367
Nsa(dp25368
S'name'
p25369
S'order'
p25370
sS'cpp_type'
p25371
S'MooseEnum'
p25372
sS'default'
p25373
S'FIRST'
p25374
sS'description'
p25375
S'The finite element order\n'
p25376
sS'required'
p25377
I00
sS'options'
p25378
S'FIRST SECOND THIRD FOURTH'
p25379
sS'group_name'
p25380
Nsa(dp25381
S'description'
p25382
S'The boundary to be penetrated\n'
p25383
sS'cpp_type'
p25384
S'BoundaryName'
p25385
sS'default'
p25386
g3
sS'name'
p25387
S'paired_boundary'
p25388
sS'required'
p25389
I01
sS'group_name'
p25390
Nsa(dp25391
S'name'
p25392
S'quantity'
p25393
sS'cpp_type'
p25394
S'MooseEnum'
p25395
sS'default'
p25396
S'distance'
p25397
sS'description'
p25398
S'The quantity to recover from the available penetration information\n'
p25399
sS'required'
p25400
I00
sS'options'
p25401
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p25402
sS'group_name'
p25403
Nsa(dp25404
S'description'
p25405
S'The seed for the master random number generator\n'
p25406
sS'cpp_type'
p25407
S'unsigned int'
p25408
sS'default'
p25409
S'0'
p25410
sS'name'
p25411
S'seed'
p25412
sS'required'
p25413
I00
sS'group_name'
p25414
S'Advanced'
p25415
sa(dp25416
S'description'
p25417
S'Tangential distance to extend edges of contact surfaces\n'
p25418
sS'cpp_type'
p25419
S'double'
p25420
sS'default'
p25421
g3
sS'name'
p25422
S'tangential_tolerance'
p25423
sS'required'
p25424
I00
sS'group_name'
p25425
Nsa(dp25426
S'description'
p25427
g3
sS'cpp_type'
p25428
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25429
sS'default'
p25430
S'PenetrationAux'
p25431
sS'name'
p25432
S'type'
p25433
sS'required'
p25434
I00
sS'group_name'
p25435
Nsa(dp25436
S'description'
p25437
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25438
sS'cpp_type'
p25439
S'bool'
p25440
sS'default'
p25441
S'1'
p25442
sS'name'
p25443
S'use_displaced_mesh'
p25444
sS'required'
p25445
I00
sS'group_name'
p25446
S'Advanced'
p25447
sa(dp25448
S'description'
p25449
S'The name of the variable that this object applies to\n'
p25450
sS'cpp_type'
p25451
S'AuxVariableName'
p25452
sS'default'
p25453
g3
sS'name'
p25454
S'variable'
p25455
sS'required'
p25456
I01
sS'group_name'
p25457
NsasS'name'
p25458
S'/Bounds/PenetrationAux'
p25459
sa(dp25460
S'description'
p25461
g3
sS'subblocks'
p25462
NsS'parameters'
p25463
(lp25464
(dp25465
S'description'
p25466
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25467
sS'cpp_type'
p25468
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25469
sS'default'
p25470
g3
sS'name'
p25471
S'block'
p25472
sS'required'
p25473
I00
sS'group_name'
p25474
Nsa(dp25475
S'description'
p25476
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25477
sS'cpp_type'
p25478
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25479
sS'default'
p25480
g3
sS'name'
p25481
S'boundary'
p25482
sS'required'
p25483
I00
sS'group_name'
p25484
Nsa(dp25485
S'description'
p25486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25487
sS'cpp_type'
p25488
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25489
sS'default'
p25490
g3
sS'name'
p25491
S'control_tags'
p25492
sS'required'
p25493
I00
sS'group_name'
p25494
S'Advanced'
p25495
sa(dp25496
S'description'
p25497
S'Set the enabled status of the MooseObject.\n'
p25498
sS'cpp_type'
p25499
S'bool'
p25500
sS'default'
p25501
S'1'
p25502
sS'name'
p25503
S'enable'
p25504
sS'required'
p25505
I00
sS'group_name'
p25506
S'Advanced'
p25507
sa(dp25508
S'name'
p25509
S'execute_on'
p25510
sS'cpp_type'
p25511
S'MultiMooseEnum'
p25512
sS'default'
p25513
S'LINEAR'
p25514
sS'description'
p25515
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25516
sS'required'
p25517
I00
sS'options'
p25518
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25519
sS'group_name'
p25520
Nsa(dp25521
S'description'
p25522
S'The seed for the master random number generator\n'
p25523
sS'cpp_type'
p25524
S'unsigned int'
p25525
sS'default'
p25526
S'0'
p25527
sS'name'
p25528
S'seed'
p25529
sS'required'
p25530
I00
sS'group_name'
p25531
S'Advanced'
p25532
sa(dp25533
S'description'
p25534
g3
sS'cpp_type'
p25535
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25536
sS'default'
p25537
S'ProcessorIDAux'
p25538
sS'name'
p25539
S'type'
p25540
sS'required'
p25541
I00
sS'group_name'
p25542
Nsa(dp25543
S'description'
p25544
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25545
sS'cpp_type'
p25546
S'bool'
p25547
sS'default'
p25548
S'0'
p25549
sS'name'
p25550
S'use_displaced_mesh'
p25551
sS'required'
p25552
I00
sS'group_name'
p25553
S'Advanced'
p25554
sa(dp25555
S'description'
p25556
S'The name of the variable that this object applies to\n'
p25557
sS'cpp_type'
p25558
S'AuxVariableName'
p25559
sS'default'
p25560
g3
sS'name'
p25561
S'variable'
p25562
sS'required'
p25563
I01
sS'group_name'
p25564
NsasS'name'
p25565
S'/Bounds/ProcessorIDAux'
p25566
sa(dp25567
S'description'
p25568
g3
sS'subblocks'
p25569
NsS'parameters'
p25570
(lp25571
(dp25572
S'description'
p25573
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25574
sS'cpp_type'
p25575
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25576
sS'default'
p25577
g3
sS'name'
p25578
S'block'
p25579
sS'required'
p25580
I00
sS'group_name'
p25581
Nsa(dp25582
S'description'
p25583
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25584
sS'cpp_type'
p25585
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25586
sS'default'
p25587
g3
sS'name'
p25588
S'boundary'
p25589
sS'required'
p25590
I00
sS'group_name'
p25591
Nsa(dp25592
S'description'
p25593
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25594
sS'cpp_type'
p25595
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25596
sS'default'
p25597
g3
sS'name'
p25598
S'control_tags'
p25599
sS'required'
p25600
I00
sS'group_name'
p25601
S'Advanced'
p25602
sa(dp25603
S'description'
p25604
S'The downstairs of the quotient variable\n'
p25605
sS'cpp_type'
p25606
S'std::vector<VariableName>'
p25607
sS'default'
p25608
g3
sS'name'
p25609
S'denominator'
p25610
sS'required'
p25611
I00
sS'group_name'
p25612
Nsa(dp25613
S'description'
p25614
S'Set the enabled status of the MooseObject.\n'
p25615
sS'cpp_type'
p25616
S'bool'
p25617
sS'default'
p25618
S'1'
p25619
sS'name'
p25620
S'enable'
p25621
sS'required'
p25622
I00
sS'group_name'
p25623
S'Advanced'
p25624
sa(dp25625
S'name'
p25626
S'execute_on'
p25627
sS'cpp_type'
p25628
S'MultiMooseEnum'
p25629
sS'default'
p25630
S'LINEAR'
p25631
sS'description'
p25632
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25633
sS'required'
p25634
I00
sS'options'
p25635
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25636
sS'group_name'
p25637
Nsa(dp25638
S'description'
p25639
S'The upstairs of the quotient variable\n'
p25640
sS'cpp_type'
p25641
S'std::vector<VariableName>'
p25642
sS'default'
p25643
g3
sS'name'
p25644
S'numerator'
p25645
sS'required'
p25646
I00
sS'group_name'
p25647
Nsa(dp25648
S'description'
p25649
S'The seed for the master random number generator\n'
p25650
sS'cpp_type'
p25651
S'unsigned int'
p25652
sS'default'
p25653
S'0'
p25654
sS'name'
p25655
S'seed'
p25656
sS'required'
p25657
I00
sS'group_name'
p25658
S'Advanced'
p25659
sa(dp25660
S'description'
p25661
g3
sS'cpp_type'
p25662
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25663
sS'default'
p25664
S'QuotientAux'
p25665
sS'name'
p25666
S'type'
p25667
sS'required'
p25668
I00
sS'group_name'
p25669
Nsa(dp25670
S'description'
p25671
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25672
sS'cpp_type'
p25673
S'bool'
p25674
sS'default'
p25675
S'0'
p25676
sS'name'
p25677
S'use_displaced_mesh'
p25678
sS'required'
p25679
I00
sS'group_name'
p25680
S'Advanced'
p25681
sa(dp25682
S'description'
p25683
S'The name of the variable that this object applies to\n'
p25684
sS'cpp_type'
p25685
S'AuxVariableName'
p25686
sS'default'
p25687
g3
sS'name'
p25688
S'variable'
p25689
sS'required'
p25690
I01
sS'group_name'
p25691
NsasS'name'
p25692
S'/Bounds/QuotientAux'
p25693
sa(dp25694
S'description'
p25695
S'Compute the radial component of the displacement vector for cylindrical models.\n'
p25696
sS'subblocks'
p25697
NsS'parameters'
p25698
(lp25699
(dp25700
S'description'
p25701
S'Vector defining direction of cylindrical axis (3D Cartesian models)\n'
p25702
sS'cpp_type'
p25703
S'libMesh::VectorValue<double>'
p25704
sS'default'
p25705
g3
sS'name'
p25706
S'axis_vector'
p25707
sS'required'
p25708
I00
sS'group_name'
p25709
Nsa(dp25710
S'description'
p25711
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25712
sS'cpp_type'
p25713
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25714
sS'default'
p25715
g3
sS'name'
p25716
S'block'
p25717
sS'required'
p25718
I00
sS'group_name'
p25719
Nsa(dp25720
S'description'
p25721
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25722
sS'cpp_type'
p25723
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25724
sS'default'
p25725
g3
sS'name'
p25726
S'boundary'
p25727
sS'required'
p25728
I00
sS'group_name'
p25729
Nsa(dp25730
S'description'
p25731
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25732
sS'cpp_type'
p25733
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25734
sS'default'
p25735
g3
sS'name'
p25736
S'control_tags'
p25737
sS'required'
p25738
I00
sS'group_name'
p25739
S'Advanced'
p25740
sa(dp25741
S'description'
p25742
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p25743
sS'cpp_type'
p25744
S'std::vector<VariableName>'
p25745
sS'default'
p25746
g3
sS'name'
p25747
S'displacements'
p25748
sS'required'
p25749
I01
sS'group_name'
p25750
Nsa(dp25751
S'description'
p25752
S'Set the enabled status of the MooseObject.\n'
p25753
sS'cpp_type'
p25754
S'bool'
p25755
sS'default'
p25756
S'1'
p25757
sS'name'
p25758
S'enable'
p25759
sS'required'
p25760
I00
sS'group_name'
p25761
S'Advanced'
p25762
sa(dp25763
S'name'
p25764
S'execute_on'
p25765
sS'cpp_type'
p25766
S'MultiMooseEnum'
p25767
sS'default'
p25768
S'LINEAR'
p25769
sS'description'
p25770
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25771
sS'required'
p25772
I00
sS'options'
p25773
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25774
sS'group_name'
p25775
Nsa(dp25776
S'description'
p25777
S'Origin of cylinder axis of rotation for 2D and 3D Cartesian models\n'
p25778
sS'cpp_type'
p25779
S'libMesh::VectorValue<double>'
p25780
sS'default'
p25781
g3
sS'name'
p25782
S'origin'
p25783
sS'required'
p25784
I00
sS'group_name'
p25785
Nsa(dp25786
S'description'
p25787
S'The seed for the master random number generator\n'
p25788
sS'cpp_type'
p25789
S'unsigned int'
p25790
sS'default'
p25791
S'0'
p25792
sS'name'
p25793
S'seed'
p25794
sS'required'
p25795
I00
sS'group_name'
p25796
S'Advanced'
p25797
sa(dp25798
S'description'
p25799
g3
sS'cpp_type'
p25800
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25801
sS'default'
p25802
S'RadialDisplacementCylinderAux'
p25803
sS'name'
p25804
S'type'
p25805
sS'required'
p25806
I00
sS'group_name'
p25807
Nsa(dp25808
S'description'
p25809
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25810
sS'cpp_type'
p25811
S'bool'
p25812
sS'default'
p25813
S'0'
p25814
sS'name'
p25815
S'use_displaced_mesh'
p25816
sS'required'
p25817
I00
sS'group_name'
p25818
S'Advanced'
p25819
sa(dp25820
S'description'
p25821
S'The name of the variable that this object applies to\n'
p25822
sS'cpp_type'
p25823
S'AuxVariableName'
p25824
sS'default'
p25825
g3
sS'name'
p25826
S'variable'
p25827
sS'required'
p25828
I01
sS'group_name'
p25829
NsasS'name'
p25830
S'/Bounds/RadialDisplacementCylinderAux'
p25831
sa(dp25832
S'description'
p25833
S'Compute the radial component of the displacement vector for spherical models.\n'
p25834
sS'subblocks'
p25835
NsS'parameters'
p25836
(lp25837
(dp25838
S'description'
p25839
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25840
sS'cpp_type'
p25841
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25842
sS'default'
p25843
g3
sS'name'
p25844
S'block'
p25845
sS'required'
p25846
I00
sS'group_name'
p25847
Nsa(dp25848
S'description'
p25849
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25850
sS'cpp_type'
p25851
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25852
sS'default'
p25853
g3
sS'name'
p25854
S'boundary'
p25855
sS'required'
p25856
I00
sS'group_name'
p25857
Nsa(dp25858
S'description'
p25859
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25860
sS'cpp_type'
p25861
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25862
sS'default'
p25863
g3
sS'name'
p25864
S'control_tags'
p25865
sS'required'
p25866
I00
sS'group_name'
p25867
S'Advanced'
p25868
sa(dp25869
S'description'
p25870
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p25871
sS'cpp_type'
p25872
S'std::vector<VariableName>'
p25873
sS'default'
p25874
g3
sS'name'
p25875
S'displacements'
p25876
sS'required'
p25877
I01
sS'group_name'
p25878
Nsa(dp25879
S'description'
p25880
S'Set the enabled status of the MooseObject.\n'
p25881
sS'cpp_type'
p25882
S'bool'
p25883
sS'default'
p25884
S'1'
p25885
sS'name'
p25886
S'enable'
p25887
sS'required'
p25888
I00
sS'group_name'
p25889
S'Advanced'
p25890
sa(dp25891
S'name'
p25892
S'execute_on'
p25893
sS'cpp_type'
p25894
S'MultiMooseEnum'
p25895
sS'default'
p25896
S'LINEAR'
p25897
sS'description'
p25898
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25899
sS'required'
p25900
I00
sS'options'
p25901
S'none initial linear nonlinear timestep_end timestep_begin custom'
p25902
sS'group_name'
p25903
Nsa(dp25904
S'description'
p25905
S'Sphere origin for 3D Cartesian and 2D axisymmetric models\n'
p25906
sS'cpp_type'
p25907
S'libMesh::VectorValue<double>'
p25908
sS'default'
p25909
g3
sS'name'
p25910
S'origin'
p25911
sS'required'
p25912
I00
sS'group_name'
p25913
Nsa(dp25914
S'description'
p25915
S'The seed for the master random number generator\n'
p25916
sS'cpp_type'
p25917
S'unsigned int'
p25918
sS'default'
p25919
S'0'
p25920
sS'name'
p25921
S'seed'
p25922
sS'required'
p25923
I00
sS'group_name'
p25924
S'Advanced'
p25925
sa(dp25926
S'description'
p25927
g3
sS'cpp_type'
p25928
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25929
sS'default'
p25930
S'RadialDisplacementSphereAux'
p25931
sS'name'
p25932
S'type'
p25933
sS'required'
p25934
I00
sS'group_name'
p25935
Nsa(dp25936
S'description'
p25937
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25938
sS'cpp_type'
p25939
S'bool'
p25940
sS'default'
p25941
S'0'
p25942
sS'name'
p25943
S'use_displaced_mesh'
p25944
sS'required'
p25945
I00
sS'group_name'
p25946
S'Advanced'
p25947
sa(dp25948
S'description'
p25949
S'The name of the variable that this object applies to\n'
p25950
sS'cpp_type'
p25951
S'AuxVariableName'
p25952
sS'default'
p25953
g3
sS'name'
p25954
S'variable'
p25955
sS'required'
p25956
I01
sS'group_name'
p25957
NsasS'name'
p25958
S'/Bounds/RadialDisplacementSphereAux'
p25959
sa(dp25960
S'description'
p25961
S'Access a component of a RankFourTensor\n'
p25962
sS'subblocks'
p25963
NsS'parameters'
p25964
(lp25965
(dp25966
S'description'
p25967
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25968
sS'cpp_type'
p25969
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25970
sS'default'
p25971
g3
sS'name'
p25972
S'block'
p25973
sS'required'
p25974
I00
sS'group_name'
p25975
Nsa(dp25976
S'description'
p25977
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25978
sS'cpp_type'
p25979
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25980
sS'default'
p25981
g3
sS'name'
p25982
S'boundary'
p25983
sS'required'
p25984
I00
sS'group_name'
p25985
Nsa(dp25986
S'description'
p25987
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25988
sS'cpp_type'
p25989
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25990
sS'default'
p25991
g3
sS'name'
p25992
S'control_tags'
p25993
sS'required'
p25994
I00
sS'group_name'
p25995
S'Advanced'
p25996
sa(dp25997
S'description'
p25998
S'Set the enabled status of the MooseObject.\n'
p25999
sS'cpp_type'
p26000
S'bool'
p26001
sS'default'
p26002
S'1'
p26003
sS'name'
p26004
S'enable'
p26005
sS'required'
p26006
I00
sS'group_name'
p26007
S'Advanced'
p26008
sa(dp26009
S'name'
p26010
S'execute_on'
p26011
sS'cpp_type'
p26012
S'MultiMooseEnum'
p26013
sS'default'
p26014
S'LINEAR'
p26015
sS'description'
p26016
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26017
sS'required'
p26018
I00
sS'options'
p26019
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26020
sS'group_name'
p26021
Nsa(dp26022
S'description'
p26023
S'The index i of ijkl for the tensor to output (0, 1, 2)\n'
p26024
sS'cpp_type'
p26025
S'unsigned int'
p26026
sS'default'
p26027
g3
sS'name'
p26028
S'index_i'
p26029
sS'required'
p26030
I01
sS'group_name'
p26031
Nsa(dp26032
S'description'
p26033
S'The index j of ijkl for the tensor to output (0, 1, 2)\n'
p26034
sS'cpp_type'
p26035
S'unsigned int'
p26036
sS'default'
p26037
g3
sS'name'
p26038
S'index_j'
p26039
sS'required'
p26040
I01
sS'group_name'
p26041
Nsa(dp26042
S'description'
p26043
S'The index k of ijkl for the tensor to output (0, 1, 2)\n'
p26044
sS'cpp_type'
p26045
S'unsigned int'
p26046
sS'default'
p26047
g3
sS'name'
p26048
S'index_k'
p26049
sS'required'
p26050
I01
sS'group_name'
p26051
Nsa(dp26052
S'description'
p26053
S'The index l of ijkl for the tensor to output (0, 1, 2)\n'
p26054
sS'cpp_type'
p26055
S'unsigned int'
p26056
sS'default'
p26057
g3
sS'name'
p26058
S'index_l'
p26059
sS'required'
p26060
I01
sS'group_name'
p26061
Nsa(dp26062
S'description'
p26063
S'The rank four material tensor name\n'
p26064
sS'cpp_type'
p26065
S'MaterialPropertyName'
p26066
sS'default'
p26067
g3
sS'name'
p26068
S'rank_four_tensor'
p26069
sS'required'
p26070
I01
sS'group_name'
p26071
Nsa(dp26072
S'description'
p26073
S'The seed for the master random number generator\n'
p26074
sS'cpp_type'
p26075
S'unsigned int'
p26076
sS'default'
p26077
S'0'
p26078
sS'name'
p26079
S'seed'
p26080
sS'required'
p26081
I00
sS'group_name'
p26082
S'Advanced'
p26083
sa(dp26084
S'description'
p26085
g3
sS'cpp_type'
p26086
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26087
sS'default'
p26088
S'RankFourAux'
p26089
sS'name'
p26090
S'type'
p26091
sS'required'
p26092
I00
sS'group_name'
p26093
Nsa(dp26094
S'description'
p26095
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26096
sS'cpp_type'
p26097
S'bool'
p26098
sS'default'
p26099
S'0'
p26100
sS'name'
p26101
S'use_displaced_mesh'
p26102
sS'required'
p26103
I00
sS'group_name'
p26104
S'Advanced'
p26105
sa(dp26106
S'description'
p26107
S'The name of the variable that this object applies to\n'
p26108
sS'cpp_type'
p26109
S'AuxVariableName'
p26110
sS'default'
p26111
g3
sS'name'
p26112
S'variable'
p26113
sS'required'
p26114
I01
sS'group_name'
p26115
NsasS'name'
p26116
S'/Bounds/RankFourAux'
p26117
sa(dp26118
S'description'
p26119
S'Access a component of a RankTwoTensor\n'
p26120
sS'subblocks'
p26121
NsS'parameters'
p26122
(lp26123
(dp26124
S'description'
p26125
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26126
sS'cpp_type'
p26127
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26128
sS'default'
p26129
g3
sS'name'
p26130
S'block'
p26131
sS'required'
p26132
I00
sS'group_name'
p26133
Nsa(dp26134
S'description'
p26135
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26136
sS'cpp_type'
p26137
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26138
sS'default'
p26139
g3
sS'name'
p26140
S'boundary'
p26141
sS'required'
p26142
I00
sS'group_name'
p26143
Nsa(dp26144
S'description'
p26145
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26146
sS'cpp_type'
p26147
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26148
sS'default'
p26149
g3
sS'name'
p26150
S'control_tags'
p26151
sS'required'
p26152
I00
sS'group_name'
p26153
S'Advanced'
p26154
sa(dp26155
S'description'
p26156
S'Set the enabled status of the MooseObject.\n'
p26157
sS'cpp_type'
p26158
S'bool'
p26159
sS'default'
p26160
S'1'
p26161
sS'name'
p26162
S'enable'
p26163
sS'required'
p26164
I00
sS'group_name'
p26165
S'Advanced'
p26166
sa(dp26167
S'name'
p26168
S'execute_on'
p26169
sS'cpp_type'
p26170
S'MultiMooseEnum'
p26171
sS'default'
p26172
S'LINEAR'
p26173
sS'description'
p26174
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26175
sS'required'
p26176
I00
sS'options'
p26177
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26178
sS'group_name'
p26179
Nsa(dp26180
S'description'
p26181
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p26182
sS'cpp_type'
p26183
S'unsigned int'
p26184
sS'default'
p26185
g3
sS'name'
p26186
S'index_i'
p26187
sS'required'
p26188
I01
sS'group_name'
p26189
Nsa(dp26190
S'description'
p26191
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p26192
sS'cpp_type'
p26193
S'unsigned int'
p26194
sS'default'
p26195
g3
sS'name'
p26196
S'index_j'
p26197
sS'required'
p26198
I01
sS'group_name'
p26199
Nsa(dp26200
S'description'
p26201
S'The rank two material tensor name\n'
p26202
sS'cpp_type'
p26203
S'MaterialPropertyName'
p26204
sS'default'
p26205
g3
sS'name'
p26206
S'rank_two_tensor'
p26207
sS'required'
p26208
I01
sS'group_name'
p26209
Nsa(dp26210
S'description'
p26211
S'The seed for the master random number generator\n'
p26212
sS'cpp_type'
p26213
S'unsigned int'
p26214
sS'default'
p26215
S'0'
p26216
sS'name'
p26217
S'seed'
p26218
sS'required'
p26219
I00
sS'group_name'
p26220
S'Advanced'
p26221
sa(dp26222
S'description'
p26223
S'Evaluate the tensor at this specific quadpoint\n'
p26224
sS'cpp_type'
p26225
S'unsigned int'
p26226
sS'default'
p26227
g3
sS'name'
p26228
S'selected_qp'
p26229
sS'required'
p26230
I00
sS'group_name'
p26231
S'Advanced'
p26232
sa(dp26233
S'description'
p26234
g3
sS'cpp_type'
p26235
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26236
sS'default'
p26237
S'RankTwoAux'
p26238
sS'name'
p26239
S'type'
p26240
sS'required'
p26241
I00
sS'group_name'
p26242
Nsa(dp26243
S'description'
p26244
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26245
sS'cpp_type'
p26246
S'bool'
p26247
sS'default'
p26248
S'0'
p26249
sS'name'
p26250
S'use_displaced_mesh'
p26251
sS'required'
p26252
I00
sS'group_name'
p26253
S'Advanced'
p26254
sa(dp26255
S'description'
p26256
S'The name of the variable that this object applies to\n'
p26257
sS'cpp_type'
p26258
S'AuxVariableName'
p26259
sS'default'
p26260
g3
sS'name'
p26261
S'variable'
p26262
sS'required'
p26263
I01
sS'group_name'
p26264
NsasS'name'
p26265
S'/Bounds/RankTwoAux'
p26266
sa(dp26267
S'description'
p26268
S'Compute a scalar property of a RankTwoTensor\n'
p26269
sS'subblocks'
p26270
NsS'parameters'
p26271
(lp26272
(dp26273
S'description'
p26274
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26275
sS'cpp_type'
p26276
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26277
sS'default'
p26278
g3
sS'name'
p26279
S'block'
p26280
sS'required'
p26281
I00
sS'group_name'
p26282
Nsa(dp26283
S'description'
p26284
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26285
sS'cpp_type'
p26286
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26287
sS'default'
p26288
g3
sS'name'
p26289
S'boundary'
p26290
sS'required'
p26291
I00
sS'group_name'
p26292
Nsa(dp26293
S'description'
p26294
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26295
sS'cpp_type'
p26296
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26297
sS'default'
p26298
g3
sS'name'
p26299
S'control_tags'
p26300
sS'required'
p26301
I00
sS'group_name'
p26302
S'Advanced'
p26303
sa(dp26304
S'description'
p26305
S'Direction vector\n'
p26306
sS'cpp_type'
p26307
S'libMesh::Point'
p26308
sS'default'
p26309
S'0 0 1'
p26310
sS'name'
p26311
S'direction'
p26312
sS'required'
p26313
I00
sS'group_name'
p26314
Nsa(dp26315
S'description'
p26316
S'Set the enabled status of the MooseObject.\n'
p26317
sS'cpp_type'
p26318
S'bool'
p26319
sS'default'
p26320
S'1'
p26321
sS'name'
p26322
S'enable'
p26323
sS'required'
p26324
I00
sS'group_name'
p26325
S'Advanced'
p26326
sa(dp26327
S'name'
p26328
S'execute_on'
p26329
sS'cpp_type'
p26330
S'MultiMooseEnum'
p26331
sS'default'
p26332
S'LINEAR'
p26333
sS'description'
p26334
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26335
sS'required'
p26336
I00
sS'options'
p26337
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26338
sS'group_name'
p26339
Nsa(dp26340
S'description'
p26341
S'Start point for axis used to calculate some cylinderical material tensor quantities\n'
p26342
sS'cpp_type'
p26343
S'libMesh::Point'
p26344
sS'default'
p26345
S'0 0 0'
p26346
sS'name'
p26347
S'point1'
p26348
sS'required'
p26349
I00
sS'group_name'
p26350
Nsa(dp26351
S'description'
p26352
S'End point for axis used to calculate some material tensor quantities\n'
p26353
sS'cpp_type'
p26354
S'libMesh::Point'
p26355
sS'default'
p26356
S'0 1 0'
p26357
sS'name'
p26358
S'point2'
p26359
sS'required'
p26360
I00
sS'group_name'
p26361
Nsa(dp26362
S'description'
p26363
S'The rank two material tensor name\n'
p26364
sS'cpp_type'
p26365
S'MaterialPropertyName'
p26366
sS'default'
p26367
g3
sS'name'
p26368
S'rank_two_tensor'
p26369
sS'required'
p26370
I01
sS'group_name'
p26371
Nsa(dp26372
S'name'
p26373
S'scalar_type'
p26374
sS'cpp_type'
p26375
S'MooseEnum'
p26376
sS'default'
p26377
g3
sS'description'
p26378
S'Type of scalar output\n'
p26379
sS'required'
p26380
I00
sS'options'
p26381
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction'
p26382
sS'group_name'
p26383
Nsa(dp26384
S'description'
p26385
S'The seed for the master random number generator\n'
p26386
sS'cpp_type'
p26387
S'unsigned int'
p26388
sS'default'
p26389
S'0'
p26390
sS'name'
p26391
S'seed'
p26392
sS'required'
p26393
I00
sS'group_name'
p26394
S'Advanced'
p26395
sa(dp26396
S'description'
p26397
S'Evaluate the tensor at this quadpoint.  This option only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p26398
sS'cpp_type'
p26399
S'unsigned int'
p26400
sS'default'
p26401
g3
sS'name'
p26402
S'selected_qp'
p26403
sS'required'
p26404
I00
sS'group_name'
p26405
S'Advanced'
p26406
sa(dp26407
S'description'
p26408
g3
sS'cpp_type'
p26409
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26410
sS'default'
p26411
S'RankTwoScalarAux'
p26412
sS'name'
p26413
S'type'
p26414
sS'required'
p26415
I00
sS'group_name'
p26416
Nsa(dp26417
S'description'
p26418
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26419
sS'cpp_type'
p26420
S'bool'
p26421
sS'default'
p26422
S'0'
p26423
sS'name'
p26424
S'use_displaced_mesh'
p26425
sS'required'
p26426
I00
sS'group_name'
p26427
S'Advanced'
p26428
sa(dp26429
S'description'
p26430
S'The name of the variable that this object applies to\n'
p26431
sS'cpp_type'
p26432
S'AuxVariableName'
p26433
sS'default'
p26434
g3
sS'name'
p26435
S'variable'
p26436
sS'required'
p26437
I01
sS'group_name'
p26438
NsasS'name'
p26439
S'/Bounds/RankTwoScalarAux'
p26440
sa(dp26441
S'description'
p26442
g3
sS'subblocks'
p26443
NsS'parameters'
p26444
(lp26445
(dp26446
S'description'
p26447
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26448
sS'cpp_type'
p26449
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26450
sS'default'
p26451
g3
sS'name'
p26452
S'block'
p26453
sS'required'
p26454
I00
sS'group_name'
p26455
Nsa(dp26456
S'description'
p26457
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26458
sS'cpp_type'
p26459
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26460
sS'default'
p26461
g3
sS'name'
p26462
S'boundary'
p26463
sS'required'
p26464
I00
sS'group_name'
p26465
Nsa(dp26466
S'description'
p26467
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26468
sS'cpp_type'
p26469
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26470
sS'default'
p26471
g3
sS'name'
p26472
S'control_tags'
p26473
sS'required'
p26474
I00
sS'group_name'
p26475
S'Advanced'
p26476
sa(dp26477
S'description'
p26478
S'Set the enabled status of the MooseObject.\n'
p26479
sS'cpp_type'
p26480
S'bool'
p26481
sS'default'
p26482
S'1'
p26483
sS'name'
p26484
S'enable'
p26485
sS'required'
p26486
I00
sS'group_name'
p26487
S'Advanced'
p26488
sa(dp26489
S'name'
p26490
S'execute_on'
p26491
sS'cpp_type'
p26492
S'MultiMooseEnum'
p26493
sS'default'
p26494
S'LINEAR'
p26495
sS'description'
p26496
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26497
sS'required'
p26498
I00
sS'options'
p26499
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26500
sS'group_name'
p26501
Nsa(dp26502
S'description'
p26503
S'The seed for the master random number generator\n'
p26504
sS'cpp_type'
p26505
S'unsigned int'
p26506
sS'default'
p26507
S'0'
p26508
sS'name'
p26509
S'seed'
p26510
sS'required'
p26511
I00
sS'group_name'
p26512
S'Advanced'
p26513
sa(dp26514
S'description'
p26515
g3
sS'cpp_type'
p26516
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26517
sS'default'
p26518
S'SelfAux'
p26519
sS'name'
p26520
S'type'
p26521
sS'required'
p26522
I00
sS'group_name'
p26523
Nsa(dp26524
S'description'
p26525
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26526
sS'cpp_type'
p26527
S'bool'
p26528
sS'default'
p26529
S'0'
p26530
sS'name'
p26531
S'use_displaced_mesh'
p26532
sS'required'
p26533
I00
sS'group_name'
p26534
S'Advanced'
p26535
sa(dp26536
S'description'
p26537
S'The name of the variable that this object applies to\n'
p26538
sS'cpp_type'
p26539
S'AuxVariableName'
p26540
sS'default'
p26541
g3
sS'name'
p26542
S'variable'
p26543
sS'required'
p26544
I01
sS'group_name'
p26545
NsasS'name'
p26546
S'/Bounds/SelfAux'
p26547
sa(dp26548
S'description'
p26549
g3
sS'subblocks'
p26550
NsS'parameters'
p26551
(lp26552
(dp26553
S'description'
p26554
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p26555
sS'cpp_type'
p26556
S'double'
p26557
sS'default'
p26558
S'0'
p26559
sS'name'
p26560
S'add_factor'
p26561
sS'required'
p26562
I00
sS'group_name'
p26563
Nsa(dp26564
S'description'
p26565
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26566
sS'cpp_type'
p26567
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26568
sS'default'
p26569
g3
sS'name'
p26570
S'block'
p26571
sS'required'
p26572
I00
sS'group_name'
p26573
Nsa(dp26574
S'description'
p26575
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26576
sS'cpp_type'
p26577
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26578
sS'default'
p26579
g3
sS'name'
p26580
S'boundary'
p26581
sS'required'
p26582
I00
sS'group_name'
p26583
Nsa(dp26584
S'description'
p26585
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26586
sS'cpp_type'
p26587
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26588
sS'default'
p26589
g3
sS'name'
p26590
S'control_tags'
p26591
sS'required'
p26592
I00
sS'group_name'
p26593
S'Advanced'
p26594
sa(dp26595
S'description'
p26596
S'If true the meshes must be the same and then the values are simply copied over.\n'
p26597
sS'cpp_type'
p26598
S'bool'
p26599
sS'default'
p26600
S'0'
p26601
sS'name'
p26602
S'direct'
p26603
sS'required'
p26604
I00
sS'group_name'
p26605
Nsa(dp26606
S'description'
p26607
S'Set the enabled status of the MooseObject.\n'
p26608
sS'cpp_type'
p26609
S'bool'
p26610
sS'default'
p26611
S'1'
p26612
sS'name'
p26613
S'enable'
p26614
sS'required'
p26615
I00
sS'group_name'
p26616
S'Advanced'
p26617
sa(dp26618
S'name'
p26619
S'execute_on'
p26620
sS'cpp_type'
p26621
S'MultiMooseEnum'
p26622
sS'default'
p26623
S'LINEAR'
p26624
sS'description'
p26625
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26626
sS'required'
p26627
I00
sS'options'
p26628
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26629
sS'group_name'
p26630
Nsa(dp26631
S'description'
p26632
S'The name of the variable to extract from the file\n'
p26633
sS'cpp_type'
p26634
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26635
sS'default'
p26636
g3
sS'name'
p26637
S'from_variable'
p26638
sS'required'
p26639
I00
sS'group_name'
p26640
Nsa(dp26641
S'description'
p26642
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p26643
sS'cpp_type'
p26644
S'double'
p26645
sS'default'
p26646
S'1'
p26647
sS'name'
p26648
S'scale_factor'
p26649
sS'required'
p26650
I00
sS'group_name'
p26651
Nsa(dp26652
S'description'
p26653
S'The seed for the master random number generator\n'
p26654
sS'cpp_type'
p26655
S'unsigned int'
p26656
sS'default'
p26657
S'0'
p26658
sS'name'
p26659
S'seed'
p26660
sS'required'
p26661
I00
sS'group_name'
p26662
S'Advanced'
p26663
sa(dp26664
S'description'
p26665
S'The name of the SolutionUserObject\n'
p26666
sS'cpp_type'
p26667
S'UserObjectName'
p26668
sS'default'
p26669
g3
sS'name'
p26670
S'solution'
p26671
sS'required'
p26672
I01
sS'group_name'
p26673
Nsa(dp26674
S'description'
p26675
g3
sS'cpp_type'
p26676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26677
sS'default'
p26678
S'SolutionAux'
p26679
sS'name'
p26680
S'type'
p26681
sS'required'
p26682
I00
sS'group_name'
p26683
Nsa(dp26684
S'description'
p26685
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26686
sS'cpp_type'
p26687
S'bool'
p26688
sS'default'
p26689
S'0'
p26690
sS'name'
p26691
S'use_displaced_mesh'
p26692
sS'required'
p26693
I00
sS'group_name'
p26694
S'Advanced'
p26695
sa(dp26696
S'description'
p26697
S'The name of the variable that this object applies to\n'
p26698
sS'cpp_type'
p26699
S'AuxVariableName'
p26700
sS'default'
p26701
g3
sS'name'
p26702
S'variable'
p26703
sS'required'
p26704
I01
sS'group_name'
p26705
NsasS'name'
p26706
S'/Bounds/SolutionAux'
p26707
sa(dp26708
S'description'
p26709
g3
sS'subblocks'
p26710
NsS'parameters'
p26711
(lp26712
(dp26713
S'description'
p26714
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26715
sS'cpp_type'
p26716
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26717
sS'default'
p26718
g3
sS'name'
p26719
S'block'
p26720
sS'required'
p26721
I00
sS'group_name'
p26722
Nsa(dp26723
S'description'
p26724
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26725
sS'cpp_type'
p26726
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26727
sS'default'
p26728
g3
sS'name'
p26729
S'boundary'
p26730
sS'required'
p26731
I00
sS'group_name'
p26732
Nsa(dp26733
S'description'
p26734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26735
sS'cpp_type'
p26736
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26737
sS'default'
p26738
g3
sS'name'
p26739
S'control_tags'
p26740
sS'required'
p26741
I00
sS'group_name'
p26742
S'Advanced'
p26743
sa(dp26744
S'description'
p26745
S'Set the enabled status of the MooseObject.\n'
p26746
sS'cpp_type'
p26747
S'bool'
p26748
sS'default'
p26749
S'1'
p26750
sS'name'
p26751
S'enable'
p26752
sS'required'
p26753
I00
sS'group_name'
p26754
S'Advanced'
p26755
sa(dp26756
S'name'
p26757
S'execute_on'
p26758
sS'cpp_type'
p26759
S'MultiMooseEnum'
p26760
sS'default'
p26761
S'LINEAR'
p26762
sS'description'
p26763
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26764
sS'required'
p26765
I00
sS'options'
p26766
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26767
sS'group_name'
p26768
Nsa(dp26769
S'description'
p26770
S'The seed for the master random number generator\n'
p26771
sS'cpp_type'
p26772
S'unsigned int'
p26773
sS'default'
p26774
S'0'
p26775
sS'name'
p26776
S'seed'
p26777
sS'required'
p26778
I00
sS'group_name'
p26779
S'Advanced'
p26780
sa(dp26781
S'description'
p26782
g3
sS'cpp_type'
p26783
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26784
sS'default'
p26785
S'SpatialUserObjectAux'
p26786
sS'name'
p26787
S'type'
p26788
sS'required'
p26789
I00
sS'group_name'
p26790
Nsa(dp26791
S'description'
p26792
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26793
sS'cpp_type'
p26794
S'bool'
p26795
sS'default'
p26796
S'0'
p26797
sS'name'
p26798
S'use_displaced_mesh'
p26799
sS'required'
p26800
I00
sS'group_name'
p26801
S'Advanced'
p26802
sa(dp26803
S'description'
p26804
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p26805
sS'cpp_type'
p26806
S'UserObjectName'
p26807
sS'default'
p26808
g3
sS'name'
p26809
S'user_object'
p26810
sS'required'
p26811
I01
sS'group_name'
p26812
Nsa(dp26813
S'description'
p26814
S'The name of the variable that this object applies to\n'
p26815
sS'cpp_type'
p26816
S'AuxVariableName'
p26817
sS'default'
p26818
g3
sS'name'
p26819
S'variable'
p26820
sS'required'
p26821
I01
sS'group_name'
p26822
NsasS'name'
p26823
S'/Bounds/SpatialUserObjectAux'
p26824
sa(dp26825
S'description'
p26826
S'Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n'
p26827
sS'subblocks'
p26828
NsS'parameters'
p26829
(lp26830
(dp26831
S'description'
p26832
S'Coupled variable holding additional free energy contributions to be summed up\n'
p26833
sS'cpp_type'
p26834
S'std::vector<VariableName>'
p26835
sS'default'
p26836
S'0'
p26837
sS'name'
p26838
S'additional_free_energy'
p26839
sS'required'
p26840
I00
sS'group_name'
p26841
Nsa(dp26842
S'description'
p26843
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26844
sS'cpp_type'
p26845
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26846
sS'default'
p26847
g3
sS'name'
p26848
S'block'
p26849
sS'required'
p26850
I00
sS'group_name'
p26851
Nsa(dp26852
S'description'
p26853
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26854
sS'cpp_type'
p26855
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26856
sS'default'
p26857
g3
sS'name'
p26858
S'boundary'
p26859
sS'required'
p26860
I00
sS'group_name'
p26861
Nsa(dp26862
S'description'
p26863
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26864
sS'cpp_type'
p26865
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26866
sS'default'
p26867
g3
sS'name'
p26868
S'control_tags'
p26869
sS'required'
p26870
I00
sS'group_name'
p26871
S'Advanced'
p26872
sa(dp26873
S'description'
p26874
S'Set the enabled status of the MooseObject.\n'
p26875
sS'cpp_type'
p26876
S'bool'
p26877
sS'default'
p26878
S'1'
p26879
sS'name'
p26880
S'enable'
p26881
sS'required'
p26882
I00
sS'group_name'
p26883
S'Advanced'
p26884
sa(dp26885
S'name'
p26886
S'execute_on'
p26887
sS'cpp_type'
p26888
S'MultiMooseEnum'
p26889
sS'default'
p26890
S'LINEAR'
p26891
sS'description'
p26892
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26893
sS'required'
p26894
I00
sS'options'
p26895
S'none initial linear nonlinear timestep_end timestep_begin custom'
p26896
sS'group_name'
p26897
Nsa(dp26898
S'description'
p26899
S'Base name of the free energy function\n'
p26900
sS'cpp_type'
p26901
S'MaterialPropertyName'
p26902
sS'default'
p26903
S'F'
p26904
sS'name'
p26905
S'f_name'
p26906
sS'required'
p26907
I00
sS'group_name'
p26908
Nsa(dp26909
S'description'
p26910
S'Variable names that contribute to interfacial energy\n'
p26911
sS'cpp_type'
p26912
S'std::vector<VariableName>'
p26913
sS'default'
p26914
g3
sS'name'
p26915
S'interfacial_vars'
p26916
sS'required'
p26917
I00
sS'group_name'
p26918
Nsa(dp26919
S'description'
p26920
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p26921
sS'cpp_type'
p26922
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p26923
sS'default'
p26924
g3
sS'name'
p26925
S'kappa_names'
p26926
sS'required'
p26927
I00
sS'group_name'
p26928
Nsa(dp26929
S'description'
p26930
S'The seed for the master random number generator\n'
p26931
sS'cpp_type'
p26932
S'unsigned int'
p26933
sS'default'
p26934
S'0'
p26935
sS'name'
p26936
S'seed'
p26937
sS'required'
p26938
I00
sS'group_name'
p26939
S'Advanced'
p26940
sa(dp26941
S'description'
p26942
g3
sS'cpp_type'
p26943
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26944
sS'default'
p26945
S'TotalFreeEnergy'
p26946
sS'name'
p26947
S'type'
p26948
sS'required'
p26949
I00
sS'group_name'
p26950
Nsa(dp26951
S'description'
p26952
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26953
sS'cpp_type'
p26954
S'bool'
p26955
sS'default'
p26956
S'0'
p26957
sS'name'
p26958
S'use_displaced_mesh'
p26959
sS'required'
p26960
I00
sS'group_name'
p26961
S'Advanced'
p26962
sa(dp26963
S'description'
p26964
S'The name of the variable that this object applies to\n'
p26965
sS'cpp_type'
p26966
S'AuxVariableName'
p26967
sS'default'
p26968
g3
sS'name'
p26969
S'variable'
p26970
sS'required'
p26971
I01
sS'group_name'
p26972
NsasS'name'
p26973
S'/Bounds/TotalFreeEnergy'
p26974
sa(dp26975
S'description'
p26976
g3
sS'subblocks'
p26977
NsS'parameters'
p26978
(lp26979
(dp26980
S'description'
p26981
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26982
sS'cpp_type'
p26983
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26984
sS'default'
p26985
g3
sS'name'
p26986
S'block'
p26987
sS'required'
p26988
I00
sS'group_name'
p26989
Nsa(dp26990
S'description'
p26991
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26992
sS'cpp_type'
p26993
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26994
sS'default'
p26995
g3
sS'name'
p26996
S'boundary'
p26997
sS'required'
p26998
I00
sS'group_name'
p26999
Nsa(dp27000
S'name'
p27001
S'component'
p27002
sS'cpp_type'
p27003
S'MooseEnum'
p27004
sS'default'
p27005
g3
sS'description'
p27006
S'The gradient component to compute\n'
p27007
sS'required'
p27008
I00
sS'options'
p27009
S'x y z'
p27010
sS'group_name'
p27011
Nsa(dp27012
S'description'
p27013
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27014
sS'cpp_type'
p27015
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27016
sS'default'
p27017
g3
sS'name'
p27018
S'control_tags'
p27019
sS'required'
p27020
I00
sS'group_name'
p27021
S'Advanced'
p27022
sa(dp27023
S'description'
p27024
S'Set the enabled status of the MooseObject.\n'
p27025
sS'cpp_type'
p27026
S'bool'
p27027
sS'default'
p27028
S'1'
p27029
sS'name'
p27030
S'enable'
p27031
sS'required'
p27032
I00
sS'group_name'
p27033
S'Advanced'
p27034
sa(dp27035
S'name'
p27036
S'execute_on'
p27037
sS'cpp_type'
p27038
S'MultiMooseEnum'
p27039
sS'default'
p27040
S'LINEAR'
p27041
sS'description'
p27042
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27043
sS'required'
p27044
I00
sS'options'
p27045
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27046
sS'group_name'
p27047
Nsa(dp27048
S'description'
p27049
S'The variable from which to compute the gradient component\n'
p27050
sS'cpp_type'
p27051
S'std::vector<VariableName>'
p27052
sS'default'
p27053
g3
sS'name'
p27054
S'gradient_variable'
p27055
sS'required'
p27056
I01
sS'group_name'
p27057
Nsa(dp27058
S'description'
p27059
S'The seed for the master random number generator\n'
p27060
sS'cpp_type'
p27061
S'unsigned int'
p27062
sS'default'
p27063
S'0'
p27064
sS'name'
p27065
S'seed'
p27066
sS'required'
p27067
I00
sS'group_name'
p27068
S'Advanced'
p27069
sa(dp27070
S'description'
p27071
g3
sS'cpp_type'
p27072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27073
sS'default'
p27074
S'VariableGradientComponent'
p27075
sS'name'
p27076
S'type'
p27077
sS'required'
p27078
I00
sS'group_name'
p27079
Nsa(dp27080
S'description'
p27081
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27082
sS'cpp_type'
p27083
S'bool'
p27084
sS'default'
p27085
S'0'
p27086
sS'name'
p27087
S'use_displaced_mesh'
p27088
sS'required'
p27089
I00
sS'group_name'
p27090
S'Advanced'
p27091
sa(dp27092
S'description'
p27093
S'The name of the variable that this object applies to\n'
p27094
sS'cpp_type'
p27095
S'AuxVariableName'
p27096
sS'default'
p27097
g3
sS'name'
p27098
S'variable'
p27099
sS'required'
p27100
I01
sS'group_name'
p27101
NsasS'name'
p27102
S'/Bounds/VariableGradientComponent'
p27103
sa(dp27104
S'description'
p27105
g3
sS'subblocks'
p27106
NsS'parameters'
p27107
(lp27108
(dp27109
S'description'
p27110
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27111
sS'cpp_type'
p27112
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27113
sS'default'
p27114
g3
sS'name'
p27115
S'block'
p27116
sS'required'
p27117
I00
sS'group_name'
p27118
Nsa(dp27119
S'description'
p27120
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27121
sS'cpp_type'
p27122
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27123
sS'default'
p27124
g3
sS'name'
p27125
S'boundary'
p27126
sS'required'
p27127
I00
sS'group_name'
p27128
Nsa(dp27129
S'description'
p27130
S'A simple coefficient\n'
p27131
sS'cpp_type'
p27132
S'double'
p27133
sS'default'
p27134
S'1'
p27135
sS'name'
p27136
S'coefficient'
p27137
sS'required'
p27138
I00
sS'group_name'
p27139
Nsa(dp27140
S'description'
p27141
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27142
sS'cpp_type'
p27143
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27144
sS'default'
p27145
g3
sS'name'
p27146
S'control_tags'
p27147
sS'required'
p27148
I00
sS'group_name'
p27149
S'Advanced'
p27150
sa(dp27151
S'description'
p27152
S'Set the enabled status of the MooseObject.\n'
p27153
sS'cpp_type'
p27154
S'bool'
p27155
sS'default'
p27156
S'1'
p27157
sS'name'
p27158
S'enable'
p27159
sS'required'
p27160
I00
sS'group_name'
p27161
S'Advanced'
p27162
sa(dp27163
S'name'
p27164
S'execute_on'
p27165
sS'cpp_type'
p27166
S'MultiMooseEnum'
p27167
sS'default'
p27168
S'LINEAR'
p27169
sS'description'
p27170
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27171
sS'required'
p27172
I00
sS'options'
p27173
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27174
sS'group_name'
p27175
Nsa(dp27176
S'description'
p27177
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p27178
sS'cpp_type'
p27179
S'unsigned int'
p27180
sS'default'
p27181
S'2'
p27182
sS'name'
p27183
S'order'
p27184
sS'required'
p27185
I00
sS'group_name'
p27186
Nsa(dp27187
S'description'
p27188
S'The seed for the master random number generator\n'
p27189
sS'cpp_type'
p27190
S'unsigned int'
p27191
sS'default'
p27192
S'0'
p27193
sS'name'
p27194
S'seed'
p27195
sS'required'
p27196
I00
sS'group_name'
p27197
S'Advanced'
p27198
sa(dp27199
S'description'
p27200
g3
sS'cpp_type'
p27201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27202
sS'default'
p27203
S'VariableTimeIntegrationAux'
p27204
sS'name'
p27205
S'type'
p27206
sS'required'
p27207
I00
sS'group_name'
p27208
Nsa(dp27209
S'description'
p27210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27211
sS'cpp_type'
p27212
S'bool'
p27213
sS'default'
p27214
S'0'
p27215
sS'name'
p27216
S'use_displaced_mesh'
p27217
sS'required'
p27218
I00
sS'group_name'
p27219
S'Advanced'
p27220
sa(dp27221
S'description'
p27222
S'The name of the variable that this object applies to\n'
p27223
sS'cpp_type'
p27224
S'AuxVariableName'
p27225
sS'default'
p27226
g3
sS'name'
p27227
S'variable'
p27228
sS'required'
p27229
I01
sS'group_name'
p27230
Nsa(dp27231
S'description'
p27232
S'The variable to be integrated\n'
p27233
sS'cpp_type'
p27234
S'std::vector<VariableName>'
p27235
sS'default'
p27236
g3
sS'name'
p27237
S'variable_to_integrate'
p27238
sS'required'
p27239
I01
sS'group_name'
p27240
NsasS'name'
p27241
S'/Bounds/VariableTimeIntegrationAux'
p27242
sa(dp27243
S'description'
p27244
g3
sS'subblocks'
p27245
NsS'parameters'
p27246
(lp27247
(dp27248
S'description'
p27249
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27250
sS'cpp_type'
p27251
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27252
sS'default'
p27253
g3
sS'name'
p27254
S'block'
p27255
sS'required'
p27256
I00
sS'group_name'
p27257
Nsa(dp27258
S'description'
p27259
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27260
sS'cpp_type'
p27261
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27262
sS'default'
p27263
g3
sS'name'
p27264
S'boundary'
p27265
sS'required'
p27266
I00
sS'group_name'
p27267
Nsa(dp27268
S'description'
p27269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27270
sS'cpp_type'
p27271
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27272
sS'default'
p27273
g3
sS'name'
p27274
S'control_tags'
p27275
sS'required'
p27276
I00
sS'group_name'
p27277
S'Advanced'
p27278
sa(dp27279
S'description'
p27280
S'Set the enabled status of the MooseObject.\n'
p27281
sS'cpp_type'
p27282
S'bool'
p27283
sS'default'
p27284
S'1'
p27285
sS'name'
p27286
S'enable'
p27287
sS'required'
p27288
I00
sS'group_name'
p27289
S'Advanced'
p27290
sa(dp27291
S'name'
p27292
S'execute_on'
p27293
sS'cpp_type'
p27294
S'MultiMooseEnum'
p27295
sS'default'
p27296
S'LINEAR'
p27297
sS'description'
p27298
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27299
sS'required'
p27300
I00
sS'options'
p27301
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27302
sS'group_name'
p27303
Nsa(dp27304
S'description'
p27305
S'The seed for the master random number generator\n'
p27306
sS'cpp_type'
p27307
S'unsigned int'
p27308
sS'default'
p27309
S'0'
p27310
sS'name'
p27311
S'seed'
p27312
sS'required'
p27313
I00
sS'group_name'
p27314
S'Advanced'
p27315
sa(dp27316
S'description'
p27317
g3
sS'cpp_type'
p27318
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27319
sS'default'
p27320
S'VectorMagnitudeAux'
p27321
sS'name'
p27322
S'type'
p27323
sS'required'
p27324
I00
sS'group_name'
p27325
Nsa(dp27326
S'description'
p27327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27328
sS'cpp_type'
p27329
S'bool'
p27330
sS'default'
p27331
S'0'
p27332
sS'name'
p27333
S'use_displaced_mesh'
p27334
sS'required'
p27335
I00
sS'group_name'
p27336
S'Advanced'
p27337
sa(dp27338
S'description'
p27339
S'The name of the variable that this object applies to\n'
p27340
sS'cpp_type'
p27341
S'AuxVariableName'
p27342
sS'default'
p27343
g3
sS'name'
p27344
S'variable'
p27345
sS'required'
p27346
I01
sS'group_name'
p27347
Nsa(dp27348
S'description'
p27349
S'x-component of the vector\n'
p27350
sS'cpp_type'
p27351
S'std::vector<VariableName>'
p27352
sS'default'
p27353
g3
sS'name'
p27354
S'x'
p27355
sS'required'
p27356
I01
sS'group_name'
p27357
Nsa(dp27358
S'description'
p27359
S'y-component of the vector\n'
p27360
sS'cpp_type'
p27361
S'std::vector<VariableName>'
p27362
sS'default'
p27363
g3
sS'name'
p27364
S'y'
p27365
sS'required'
p27366
I00
sS'group_name'
p27367
Nsa(dp27368
S'description'
p27369
S'z-component of the vector\n'
p27370
sS'cpp_type'
p27371
S'std::vector<VariableName>'
p27372
sS'default'
p27373
g3
sS'name'
p27374
S'z'
p27375
sS'required'
p27376
I00
sS'group_name'
p27377
NsasS'name'
p27378
S'/Bounds/VectorMagnitudeAux'
p27379
sasS'parameters'
p27380
NsS'name'
p27381
S'/Bounds'
p27382
sa(dp27383
S'description'
p27384
g3
sS'subblocks'
p27385
(lp27386
(dp27387
S'description'
p27388
g3
sS'subblocks'
p27389
NsS'parameters'
p27390
(lp27391
(dp27392
S'description'
p27393
S'A string representing the Moose Object that will be built by this Action\n'
p27394
sS'cpp_type'
p27395
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27396
sS'default'
p27397
g3
sS'name'
p27398
S'type'
p27399
sS'required'
p27400
I01
sS'group_name'
p27401
NsasS'name'
p27402
S'/Constraints/*'
p27403
sa(dp27404
S'description'
p27405
g3
sS'subblocks'
p27406
NsS'parameters'
p27407
(lp27408
(dp27409
S'description'
p27410
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27411
sS'cpp_type'
p27412
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27413
sS'default'
p27414
g3
sS'name'
p27415
S'control_tags'
p27416
sS'required'
p27417
I00
sS'group_name'
p27418
S'Advanced'
p27419
sa(dp27420
S'description'
p27421
S'Set the enabled status of the MooseObject.\n'
p27422
sS'cpp_type'
p27423
S'bool'
p27424
sS'default'
p27425
S'1'
p27426
sS'name'
p27427
S'enable'
p27428
sS'required'
p27429
I00
sS'group_name'
p27430
S'Advanced'
p27431
sa(dp27432
S'name'
p27433
S'execute_on'
p27434
sS'cpp_type'
p27435
S'MultiMooseEnum'
p27436
sS'default'
p27437
S'LINEAR'
p27438
sS'description'
p27439
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27440
sS'required'
p27441
I00
sS'options'
p27442
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27443
sS'group_name'
p27444
Nsa(dp27445
S'description'
p27446
S'The boundary ID associated with the master side\n'
p27447
sS'cpp_type'
p27448
S'BoundaryName'
p27449
sS'default'
p27450
g3
sS'name'
p27451
S'master'
p27452
sS'required'
p27453
I01
sS'group_name'
p27454
Nsa(dp27455
S'description'
p27456
S'The variable on the master side of the domain\n'
p27457
sS'cpp_type'
p27458
S'std::vector<VariableName>'
p27459
sS'default'
p27460
g3
sS'name'
p27461
S'master_variable'
p27462
sS'required'
p27463
I01
sS'group_name'
p27464
Nsa(dp27465
S'description'
p27466
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p27467
sS'cpp_type'
p27468
S'double'
p27469
sS'default'
p27470
g3
sS'name'
p27471
S'normal_smoothing_distance'
p27472
sS'required'
p27473
I00
sS'group_name'
p27474
Nsa(dp27475
S'description'
p27476
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p27477
sS'cpp_type'
p27478
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27479
sS'default'
p27480
g3
sS'name'
p27481
S'normal_smoothing_method'
p27482
sS'required'
p27483
I00
sS'group_name'
p27484
Nsa(dp27485
S'name'
p27486
S'order'
p27487
sS'cpp_type'
p27488
S'MooseEnum'
p27489
sS'default'
p27490
S'FIRST'
p27491
sS'description'
p27492
S'The finite element order used for projections\n'
p27493
sS'required'
p27494
I00
sS'options'
p27495
S'FIRST SECOND THIRD FOURTH'
p27496
sS'group_name'
p27497
Nsa(dp27498
S'description'
p27499
S'scaling factor to be applied to constraint equations\n'
p27500
sS'cpp_type'
p27501
S'double'
p27502
sS'default'
p27503
S'1'
p27504
sS'name'
p27505
S'scaling'
p27506
sS'required'
p27507
I00
sS'group_name'
p27508
Nsa(dp27509
S'description'
p27510
S'The boundary ID associated with the slave side\n'
p27511
sS'cpp_type'
p27512
S'BoundaryName'
p27513
sS'default'
p27514
g3
sS'name'
p27515
S'slave'
p27516
sS'required'
p27517
I01
sS'group_name'
p27518
Nsa(dp27519
S'description'
p27520
S'Tangential distance to extend edges of contact surfaces\n'
p27521
sS'cpp_type'
p27522
S'double'
p27523
sS'default'
p27524
g3
sS'name'
p27525
S'tangential_tolerance'
p27526
sS'required'
p27527
I00
sS'group_name'
p27528
Nsa(dp27529
S'description'
p27530
g3
sS'cpp_type'
p27531
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27532
sS'default'
p27533
S'CoupledTiedValueConstraint'
p27534
sS'name'
p27535
S'type'
p27536
sS'required'
p27537
I00
sS'group_name'
p27538
Nsa(dp27539
S'description'
p27540
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27541
sS'cpp_type'
p27542
S'bool'
p27543
sS'default'
p27544
S'1'
p27545
sS'name'
p27546
S'use_displaced_mesh'
p27547
sS'required'
p27548
I00
sS'group_name'
p27549
S'Advanced'
p27550
sa(dp27551
S'description'
p27552
S'The name of the variable that this constraint is applied to.\n'
p27553
sS'cpp_type'
p27554
S'NonlinearVariableName'
p27555
sS'default'
p27556
g3
sS'name'
p27557
S'variable'
p27558
sS'required'
p27559
I01
sS'group_name'
p27560
NsasS'name'
p27561
S'/Constraints/CoupledTiedValueConstraint'
p27562
sa(dp27563
S'description'
p27564
g3
sS'subblocks'
p27565
NsS'parameters'
p27566
(lp27567
(dp27568
S'description'
p27569
S'Gradient component to constrain\n'
p27570
sS'cpp_type'
p27571
S'unsigned int'
p27572
sS'default'
p27573
g3
sS'name'
p27574
S'component'
p27575
sS'required'
p27576
I01
sS'group_name'
p27577
Nsa(dp27578
S'description'
p27579
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27580
sS'cpp_type'
p27581
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27582
sS'default'
p27583
g3
sS'name'
p27584
S'control_tags'
p27585
sS'required'
p27586
I00
sS'group_name'
p27587
S'Advanced'
p27588
sa(dp27589
S'description'
p27590
S'Set the enabled status of the MooseObject.\n'
p27591
sS'cpp_type'
p27592
S'bool'
p27593
sS'default'
p27594
S'1'
p27595
sS'name'
p27596
S'enable'
p27597
sS'required'
p27598
I00
sS'group_name'
p27599
S'Advanced'
p27600
sa(dp27601
S'name'
p27602
S'execute_on'
p27603
sS'cpp_type'
p27604
S'MultiMooseEnum'
p27605
sS'default'
p27606
S'LINEAR'
p27607
sS'description'
p27608
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27609
sS'required'
p27610
I00
sS'options'
p27611
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27612
sS'group_name'
p27613
Nsa(dp27614
S'description'
p27615
S'The name of the interface.\n'
p27616
sS'cpp_type'
p27617
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27618
sS'default'
p27619
g3
sS'name'
p27620
S'interface'
p27621
sS'required'
p27622
I01
sS'group_name'
p27623
Nsa(dp27624
S'description'
p27625
S'Variable on master surface\n'
p27626
sS'cpp_type'
p27627
S'VariableName'
p27628
sS'default'
p27629
g3
sS'name'
p27630
S'master_variable'
p27631
sS'required'
p27632
I01
sS'group_name'
p27633
Nsa(dp27634
S'description'
p27635
S'Variable on master surface\n'
p27636
sS'cpp_type'
p27637
S'VariableName'
p27638
sS'default'
p27639
g3
sS'name'
p27640
S'slave_variable'
p27641
sS'required'
p27642
I00
sS'group_name'
p27643
Nsa(dp27644
S'description'
p27645
g3
sS'cpp_type'
p27646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27647
sS'default'
p27648
S'EqualGradientConstraint'
p27649
sS'name'
p27650
S'type'
p27651
sS'required'
p27652
I00
sS'group_name'
p27653
Nsa(dp27654
S'description'
p27655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27656
sS'cpp_type'
p27657
S'bool'
p27658
sS'default'
p27659
S'0'
p27660
sS'name'
p27661
S'use_displaced_mesh'
p27662
sS'required'
p27663
I00
sS'group_name'
p27664
S'Advanced'
p27665
sa(dp27666
S'description'
p27667
S'The name of the variable that this constraint is applied to.\n'
p27668
sS'cpp_type'
p27669
S'NonlinearVariableName'
p27670
sS'default'
p27671
g3
sS'name'
p27672
S'variable'
p27673
sS'required'
p27674
I01
sS'group_name'
p27675
NsasS'name'
p27676
S'/Constraints/EqualGradientConstraint'
p27677
sa(dp27678
S'description'
p27679
g3
sS'subblocks'
p27680
NsS'parameters'
p27681
(lp27682
(dp27683
S'description'
p27684
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27685
sS'cpp_type'
p27686
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27687
sS'default'
p27688
g3
sS'name'
p27689
S'control_tags'
p27690
sS'required'
p27691
I00
sS'group_name'
p27692
S'Advanced'
p27693
sa(dp27694
S'description'
p27695
S'Set the enabled status of the MooseObject.\n'
p27696
sS'cpp_type'
p27697
S'bool'
p27698
sS'default'
p27699
S'1'
p27700
sS'name'
p27701
S'enable'
p27702
sS'required'
p27703
I00
sS'group_name'
p27704
S'Advanced'
p27705
sa(dp27706
S'name'
p27707
S'execute_on'
p27708
sS'cpp_type'
p27709
S'MultiMooseEnum'
p27710
sS'default'
p27711
S'LINEAR'
p27712
sS'description'
p27713
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27714
sS'required'
p27715
I00
sS'options'
p27716
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27717
sS'group_name'
p27718
Nsa(dp27719
S'name'
p27720
S'formulation'
p27721
sS'cpp_type'
p27722
S'MooseEnum'
p27723
sS'default'
p27724
S'penalty'
p27725
sS'description'
p27726
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p27727
sS'required'
p27728
I00
sS'options'
p27729
S'penalty kinematic'
p27730
sS'group_name'
p27731
Nsa(dp27732
S'description'
p27733
S'The ID of the master node. If no ID is provided, first node of slave set is chosen.\n'
p27734
sS'cpp_type'
p27735
S'unsigned int'
p27736
sS'default'
p27737
S'4294967295'
p27738
sS'name'
p27739
S'master'
p27740
sS'required'
p27741
I00
sS'group_name'
p27742
Nsa(dp27743
S'description'
p27744
S'The penalty used for the boundary term\n'
p27745
sS'cpp_type'
p27746
S'double'
p27747
sS'default'
p27748
g3
sS'name'
p27749
S'penalty'
p27750
sS'required'
p27751
I01
sS'group_name'
p27752
Nsa(dp27753
S'description'
p27754
S'The boundary ID associated with the slave side\n'
p27755
sS'cpp_type'
p27756
S'BoundaryName'
p27757
sS'default'
p27758
S'NaN'
p27759
sS'name'
p27760
S'slave'
p27761
sS'required'
p27762
I00
sS'group_name'
p27763
Nsa(dp27764
S'description'
p27765
S'The IDs of the slave node\n'
p27766
sS'cpp_type'
p27767
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p27768
sS'default'
p27769
g3
sS'name'
p27770
S'slave_node_ids'
p27771
sS'required'
p27772
I00
sS'group_name'
p27773
Nsa(dp27774
S'description'
p27775
g3
sS'cpp_type'
p27776
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27777
sS'default'
p27778
S'EqualValueBoundaryConstraint'
p27779
sS'name'
p27780
S'type'
p27781
sS'required'
p27782
I00
sS'group_name'
p27783
Nsa(dp27784
S'description'
p27785
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27786
sS'cpp_type'
p27787
S'bool'
p27788
sS'default'
p27789
S'0'
p27790
sS'name'
p27791
S'use_displaced_mesh'
p27792
sS'required'
p27793
I00
sS'group_name'
p27794
S'Advanced'
p27795
sa(dp27796
S'description'
p27797
S'The name of the variable that this constraint is applied to.\n'
p27798
sS'cpp_type'
p27799
S'NonlinearVariableName'
p27800
sS'default'
p27801
g3
sS'name'
p27802
S'variable'
p27803
sS'required'
p27804
I01
sS'group_name'
p27805
NsasS'name'
p27806
S'/Constraints/EqualValueBoundaryConstraint'
p27807
sa(dp27808
S'description'
p27809
g3
sS'subblocks'
p27810
NsS'parameters'
p27811
(lp27812
(dp27813
S'description'
p27814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27815
sS'cpp_type'
p27816
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27817
sS'default'
p27818
g3
sS'name'
p27819
S'control_tags'
p27820
sS'required'
p27821
I00
sS'group_name'
p27822
S'Advanced'
p27823
sa(dp27824
S'description'
p27825
S'Set the enabled status of the MooseObject.\n'
p27826
sS'cpp_type'
p27827
S'bool'
p27828
sS'default'
p27829
S'1'
p27830
sS'name'
p27831
S'enable'
p27832
sS'required'
p27833
I00
sS'group_name'
p27834
S'Advanced'
p27835
sa(dp27836
S'name'
p27837
S'execute_on'
p27838
sS'cpp_type'
p27839
S'MultiMooseEnum'
p27840
sS'default'
p27841
S'LINEAR'
p27842
sS'description'
p27843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27844
sS'required'
p27845
I00
sS'options'
p27846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27847
sS'group_name'
p27848
Nsa(dp27849
S'description'
p27850
S'The name of the interface.\n'
p27851
sS'cpp_type'
p27852
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27853
sS'default'
p27854
g3
sS'name'
p27855
S'interface'
p27856
sS'required'
p27857
I01
sS'group_name'
p27858
Nsa(dp27859
S'description'
p27860
S'Variable on master surface\n'
p27861
sS'cpp_type'
p27862
S'VariableName'
p27863
sS'default'
p27864
g3
sS'name'
p27865
S'master_variable'
p27866
sS'required'
p27867
I01
sS'group_name'
p27868
Nsa(dp27869
S'description'
p27870
S'Variable on master surface\n'
p27871
sS'cpp_type'
p27872
S'VariableName'
p27873
sS'default'
p27874
g3
sS'name'
p27875
S'slave_variable'
p27876
sS'required'
p27877
I00
sS'group_name'
p27878
Nsa(dp27879
S'description'
p27880
g3
sS'cpp_type'
p27881
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27882
sS'default'
p27883
S'EqualValueConstraint'
p27884
sS'name'
p27885
S'type'
p27886
sS'required'
p27887
I00
sS'group_name'
p27888
Nsa(dp27889
S'description'
p27890
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27891
sS'cpp_type'
p27892
S'bool'
p27893
sS'default'
p27894
S'0'
p27895
sS'name'
p27896
S'use_displaced_mesh'
p27897
sS'required'
p27898
I00
sS'group_name'
p27899
S'Advanced'
p27900
sa(dp27901
S'description'
p27902
S'The name of the variable that this constraint is applied to.\n'
p27903
sS'cpp_type'
p27904
S'NonlinearVariableName'
p27905
sS'default'
p27906
g3
sS'name'
p27907
S'variable'
p27908
sS'required'
p27909
I01
sS'group_name'
p27910
NsasS'name'
p27911
S'/Constraints/EqualValueConstraint'
p27912
sa(dp27913
S'description'
p27914
g3
sS'subblocks'
p27915
NsS'parameters'
p27916
(lp27917
(dp27918
S'description'
p27919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27920
sS'cpp_type'
p27921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27922
sS'default'
p27923
g3
sS'name'
p27924
S'control_tags'
p27925
sS'required'
p27926
I00
sS'group_name'
p27927
S'Advanced'
p27928
sa(dp27929
S'description'
p27930
S'Set the enabled status of the MooseObject.\n'
p27931
sS'cpp_type'
p27932
S'bool'
p27933
sS'default'
p27934
S'1'
p27935
sS'name'
p27936
S'enable'
p27937
sS'required'
p27938
I00
sS'group_name'
p27939
S'Advanced'
p27940
sa(dp27941
S'name'
p27942
S'execute_on'
p27943
sS'cpp_type'
p27944
S'MultiMooseEnum'
p27945
sS'default'
p27946
S'LINEAR'
p27947
sS'description'
p27948
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27949
sS'required'
p27950
I00
sS'options'
p27951
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27952
sS'group_name'
p27953
Nsa(dp27954
S'name'
p27955
S'formulation'
p27956
sS'cpp_type'
p27957
S'MooseEnum'
p27958
sS'default'
p27959
S'penalty'
p27960
sS'description'
p27961
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p27962
sS'required'
p27963
I00
sS'options'
p27964
S'penalty kinematic'
p27965
sS'group_name'
p27966
Nsa(dp27967
S'description'
p27968
S'The master node IDs.\n'
p27969
sS'cpp_type'
p27970
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p27971
sS'default'
p27972
g3
sS'name'
p27973
S'master'
p27974
sS'required'
p27975
I01
sS'group_name'
p27976
Nsa(dp27977
S'description'
p27978
S'The penalty used for the boundary term\n'
p27979
sS'cpp_type'
p27980
S'double'
p27981
sS'default'
p27982
g3
sS'name'
p27983
S'penalty'
p27984
sS'required'
p27985
I01
sS'group_name'
p27986
Nsa(dp27987
S'description'
p27988
S'The list of slave node ids\n'
p27989
sS'cpp_type'
p27990
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p27991
sS'default'
p27992
g3
sS'name'
p27993
S'slave_node_ids'
p27994
sS'required'
p27995
I00
sS'group_name'
p27996
Nsa(dp27997
S'description'
p27998
S'The boundary ID associated with the slave side\n'
p27999
sS'cpp_type'
p28000
S'BoundaryName'
p28001
sS'default'
p28002
S'NaN'
p28003
sS'name'
p28004
S'slave_node_set'
p28005
sS'required'
p28006
I00
sS'group_name'
p28007
Nsa(dp28008
S'description'
p28009
g3
sS'cpp_type'
p28010
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28011
sS'default'
p28012
S'LinearNodalConstraint'
p28013
sS'name'
p28014
S'type'
p28015
sS'required'
p28016
I00
sS'group_name'
p28017
Nsa(dp28018
S'description'
p28019
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28020
sS'cpp_type'
p28021
S'bool'
p28022
sS'default'
p28023
S'0'
p28024
sS'name'
p28025
S'use_displaced_mesh'
p28026
sS'required'
p28027
I00
sS'group_name'
p28028
S'Advanced'
p28029
sa(dp28030
S'description'
p28031
S'The name of the variable that this constraint is applied to.\n'
p28032
sS'cpp_type'
p28033
S'NonlinearVariableName'
p28034
sS'default'
p28035
g3
sS'name'
p28036
S'variable'
p28037
sS'required'
p28038
I01
sS'group_name'
p28039
Nsa(dp28040
S'description'
p28041
S'The weights associated with the master node ids. Must be of the same size as master nodes\n'
p28042
sS'cpp_type'
p28043
S'std::vector<double, std::allocator<double> >'
p28044
sS'default'
p28045
g3
sS'name'
p28046
S'weights'
p28047
sS'required'
p28048
I01
sS'group_name'
p28049
NsasS'name'
p28050
S'/Constraints/LinearNodalConstraint'
p28051
sa(dp28052
S'description'
p28053
g3
sS'subblocks'
p28054
NsS'parameters'
p28055
(lp28056
(dp28057
S'description'
p28058
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28059
sS'cpp_type'
p28060
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28061
sS'default'
p28062
g3
sS'name'
p28063
S'control_tags'
p28064
sS'required'
p28065
I00
sS'group_name'
p28066
S'Advanced'
p28067
sa(dp28068
S'description'
p28069
S'Set the enabled status of the MooseObject.\n'
p28070
sS'cpp_type'
p28071
S'bool'
p28072
sS'default'
p28073
S'1'
p28074
sS'name'
p28075
S'enable'
p28076
sS'required'
p28077
I00
sS'group_name'
p28078
S'Advanced'
p28079
sa(dp28080
S'name'
p28081
S'execute_on'
p28082
sS'cpp_type'
p28083
S'MultiMooseEnum'
p28084
sS'default'
p28085
S'LINEAR'
p28086
sS'description'
p28087
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28088
sS'required'
p28089
I00
sS'options'
p28090
S'none initial linear nonlinear timestep_end timestep_begin custom'
p28091
sS'group_name'
p28092
Nsa(dp28093
S'description'
p28094
S'The boundary ID associated with the master side\n'
p28095
sS'cpp_type'
p28096
S'BoundaryName'
p28097
sS'default'
p28098
g3
sS'name'
p28099
S'master'
p28100
sS'required'
p28101
I01
sS'group_name'
p28102
Nsa(dp28103
S'description'
p28104
S'The variable on the master side of the domain\n'
p28105
sS'cpp_type'
p28106
S'std::vector<VariableName>'
p28107
sS'default'
p28108
g3
sS'name'
p28109
S'master_variable'
p28110
sS'required'
p28111
I01
sS'group_name'
p28112
Nsa(dp28113
S'description'
p28114
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p28115
sS'cpp_type'
p28116
S'double'
p28117
sS'default'
p28118
g3
sS'name'
p28119
S'normal_smoothing_distance'
p28120
sS'required'
p28121
I00
sS'group_name'
p28122
Nsa(dp28123
S'description'
p28124
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p28125
sS'cpp_type'
p28126
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28127
sS'default'
p28128
g3
sS'name'
p28129
S'normal_smoothing_method'
p28130
sS'required'
p28131
I00
sS'group_name'
p28132
Nsa(dp28133
S'name'
p28134
S'order'
p28135
sS'cpp_type'
p28136
S'MooseEnum'
p28137
sS'default'
p28138
S'FIRST'
p28139
sS'description'
p28140
S'The finite element order used for projections\n'
p28141
sS'required'
p28142
I00
sS'options'
p28143
S'FIRST SECOND THIRD FOURTH'
p28144
sS'group_name'
p28145
Nsa(dp28146
S'description'
p28147
S'scaling factor to be applied to constraint equations\n'
p28148
sS'cpp_type'
p28149
S'double'
p28150
sS'default'
p28151
S'1'
p28152
sS'name'
p28153
S'scaling'
p28154
sS'required'
p28155
I00
sS'group_name'
p28156
Nsa(dp28157
S'description'
p28158
S'The boundary ID associated with the slave side\n'
p28159
sS'cpp_type'
p28160
S'BoundaryName'
p28161
sS'default'
p28162
g3
sS'name'
p28163
S'slave'
p28164
sS'required'
p28165
I01
sS'group_name'
p28166
Nsa(dp28167
S'description'
p28168
S'Tangential distance to extend edges of contact surfaces\n'
p28169
sS'cpp_type'
p28170
S'double'
p28171
sS'default'
p28172
g3
sS'name'
p28173
S'tangential_tolerance'
p28174
sS'required'
p28175
I00
sS'group_name'
p28176
Nsa(dp28177
S'description'
p28178
g3
sS'cpp_type'
p28179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28180
sS'default'
p28181
S'TiedValueConstraint'
p28182
sS'name'
p28183
S'type'
p28184
sS'required'
p28185
I00
sS'group_name'
p28186
Nsa(dp28187
S'description'
p28188
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28189
sS'cpp_type'
p28190
S'bool'
p28191
sS'default'
p28192
S'1'
p28193
sS'name'
p28194
S'use_displaced_mesh'
p28195
sS'required'
p28196
I00
sS'group_name'
p28197
S'Advanced'
p28198
sa(dp28199
S'description'
p28200
S'The name of the variable that this constraint is applied to.\n'
p28201
sS'cpp_type'
p28202
S'NonlinearVariableName'
p28203
sS'default'
p28204
g3
sS'name'
p28205
S'variable'
p28206
sS'required'
p28207
I01
sS'group_name'
p28208
NsasS'name'
p28209
S'/Constraints/TiedValueConstraint'
p28210
sasS'parameters'
p28211
NsS'name'
p28212
S'/Constraints'
p28213
sa(dp28214
S'description'
p28215
g3
sS'subblocks'
p28216
(lp28217
(dp28218
S'description'
p28219
g3
sS'subblocks'
p28220
NsS'parameters'
p28221
(lp28222
(dp28223
S'description'
p28224
S'A string representing the Moose Object that will be built by this Action\n'
p28225
sS'cpp_type'
p28226
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28227
sS'default'
p28228
g3
sS'name'
p28229
S'type'
p28230
sS'required'
p28231
I01
sS'group_name'
p28232
NsasS'name'
p28233
S'/Controls/*'
p28234
sa(dp28235
S'description'
p28236
g3
sS'subblocks'
p28237
NsS'parameters'
p28238
(lp28239
(dp28240
S'description'
p28241
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28242
sS'cpp_type'
p28243
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28244
sS'default'
p28245
g3
sS'name'
p28246
S'control_tags'
p28247
sS'required'
p28248
I00
sS'group_name'
p28249
S'Advanced'
p28250
sa(dp28251
S'description'
p28252
S'Set the enabled status of the MooseObject.\n'
p28253
sS'cpp_type'
p28254
S'bool'
p28255
sS'default'
p28256
S'1'
p28257
sS'name'
p28258
S'enable'
p28259
sS'required'
p28260
I00
sS'group_name'
p28261
S'Advanced'
p28262
sa(dp28263
S'name'
p28264
S'execute_on'
p28265
sS'cpp_type'
p28266
S'MultiMooseEnum'
p28267
sS'default'
p28268
S'INITIAL TIMESTEP_END'
p28269
sS'description'
p28270
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28271
sS'required'
p28272
I00
sS'options'
p28273
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p28274
sS'group_name'
p28275
Nsa(dp28276
S'description'
p28277
S'The function to use for controlling the specified parameter.\n'
p28278
sS'cpp_type'
p28279
S'FunctionName'
p28280
sS'default'
p28281
g3
sS'name'
p28282
S'function'
p28283
sS'required'
p28284
I01
sS'group_name'
p28285
Nsa(dp28286
S'description'
p28287
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28288
sS'cpp_type'
p28289
S'bool'
p28290
sS'default'
p28291
S'1'
p28292
sS'name'
p28293
S'implicit'
p28294
sS'required'
p28295
I00
sS'group_name'
p28296
S'Advanced'
p28297
sa(dp28298
S'description'
p28299
S'The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n'
p28300
sS'cpp_type'
p28301
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28302
sS'default'
p28303
g3
sS'name'
p28304
S'parameter'
p28305
sS'required'
p28306
I01
sS'group_name'
p28307
Nsa(dp28308
S'description'
p28309
g3
sS'cpp_type'
p28310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28311
sS'default'
p28312
S'RealFunctionControl'
p28313
sS'name'
p28314
S'type'
p28315
sS'required'
p28316
I00
sS'group_name'
p28317
NsasS'name'
p28318
S'/Controls/RealFunctionControl'
p28319
sa(dp28320
S'description'
p28321
g3
sS'subblocks'
p28322
NsS'parameters'
p28323
(lp28324
(dp28325
S'description'
p28326
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28327
sS'cpp_type'
p28328
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28329
sS'default'
p28330
g3
sS'name'
p28331
S'control_tags'
p28332
sS'required'
p28333
I00
sS'group_name'
p28334
S'Advanced'
p28335
sa(dp28336
S'description'
p28337
S'A list of object tags to disable.\n'
p28338
sS'cpp_type'
p28339
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28340
sS'default'
p28341
g3
sS'name'
p28342
S'disable_objects'
p28343
sS'required'
p28344
I00
sS'group_name'
p28345
Nsa(dp28346
S'description'
p28347
S'Set the enabled status of the MooseObject.\n'
p28348
sS'cpp_type'
p28349
S'bool'
p28350
sS'default'
p28351
S'1'
p28352
sS'name'
p28353
S'enable'
p28354
sS'required'
p28355
I00
sS'group_name'
p28356
S'Advanced'
p28357
sa(dp28358
S'description'
p28359
S'A list of object tags to enable.\n'
p28360
sS'cpp_type'
p28361
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28362
sS'default'
p28363
g3
sS'name'
p28364
S'enable_objects'
p28365
sS'required'
p28366
I00
sS'group_name'
p28367
Nsa(dp28368
S'description'
p28369
S'The time at which the objects are to be enable/disabled.\n'
p28370
sS'cpp_type'
p28371
S'std::vector<double, std::allocator<double> >'
p28372
sS'default'
p28373
g3
sS'name'
p28374
S'end_time'
p28375
sS'required'
p28376
I00
sS'group_name'
p28377
Nsa(dp28378
S'name'
p28379
S'execute_on'
p28380
sS'cpp_type'
p28381
S'MultiMooseEnum'
p28382
sS'default'
p28383
S'INITIAL TIMESTEP_END'
p28384
sS'description'
p28385
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28386
sS'required'
p28387
I00
sS'options'
p28388
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p28389
sS'group_name'
p28390
Nsa(dp28391
S'description'
p28392
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28393
sS'cpp_type'
p28394
S'bool'
p28395
sS'default'
p28396
S'1'
p28397
sS'name'
p28398
S'implicit'
p28399
sS'required'
p28400
I00
sS'group_name'
p28401
S'Advanced'
p28402
sa(dp28403
S'description'
p28404
S'When true the disable/enable lists are set to opposite values when outside of the given time range.\n'
p28405
sS'cpp_type'
p28406
S'bool'
p28407
sS'default'
p28408
S'1'
p28409
sS'name'
p28410
S'set_outside_of_range'
p28411
sS'required'
p28412
I00
sS'group_name'
p28413
Nsa(dp28414
S'description'
p28415
S'Set the start and end time as execute sync times.\n'
p28416
sS'cpp_type'
p28417
S'bool'
p28418
sS'default'
p28419
S'0'
p28420
sS'name'
p28421
S'set_sync_times'
p28422
sS'required'
p28423
I00
sS'group_name'
p28424
Nsa(dp28425
S'description'
p28426
S'The time at which the objects are to be enabled/disabled.\n'
p28427
sS'cpp_type'
p28428
S'std::vector<double, std::allocator<double> >'
p28429
sS'default'
p28430
g3
sS'name'
p28431
S'start_time'
p28432
sS'required'
p28433
I00
sS'group_name'
p28434
Nsa(dp28435
S'description'
p28436
g3
sS'cpp_type'
p28437
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28438
sS'default'
p28439
S'TimePeriod'
p28440
sS'name'
p28441
S'type'
p28442
sS'required'
p28443
I00
sS'group_name'
p28444
NsasS'name'
p28445
S'/Controls/TimePeriod'
p28446
sasS'parameters'
p28447
NsS'name'
p28448
S'/Controls'
p28449
sa(dp28450
S'description'
p28451
g3
sS'subblocks'
p28452
(lp28453
(dp28454
S'description'
p28455
g3
sS'subblocks'
p28456
NsS'parameters'
p28457
(lp28458
(dp28459
S'description'
p28460
S'A string representing the Moose Object that will be built by this Action\n'
p28461
sS'cpp_type'
p28462
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28463
sS'default'
p28464
g3
sS'name'
p28465
S'type'
p28466
sS'required'
p28467
I01
sS'group_name'
p28468
NsasS'name'
p28469
S'/DGKernels/*'
p28470
sa(dp28471
S'description'
p28472
S'DG upwinding for the convection\n'
p28473
sS'subblocks'
p28474
NsS'parameters'
p28475
(lp28476
(dp28477
S'description'
p28478
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28479
sS'cpp_type'
p28480
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28481
sS'default'
p28482
g3
sS'name'
p28483
S'block'
p28484
sS'required'
p28485
I00
sS'group_name'
p28486
Nsa(dp28487
S'description'
p28488
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28489
sS'cpp_type'
p28490
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28491
sS'default'
p28492
g3
sS'name'
p28493
S'boundary'
p28494
sS'required'
p28495
I00
sS'group_name'
p28496
Nsa(dp28497
S'description'
p28498
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28499
sS'cpp_type'
p28500
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28501
sS'default'
p28502
g3
sS'name'
p28503
S'control_tags'
p28504
sS'required'
p28505
I00
sS'group_name'
p28506
S'Advanced'
p28507
sa(dp28508
S'description'
p28509
S'Set the enabled status of the MooseObject.\n'
p28510
sS'cpp_type'
p28511
S'bool'
p28512
sS'default'
p28513
S'1'
p28514
sS'name'
p28515
S'enable'
p28516
sS'required'
p28517
I00
sS'group_name'
p28518
S'Advanced'
p28519
sa(dp28520
S'description'
p28521
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28522
sS'cpp_type'
p28523
S'bool'
p28524
sS'default'
p28525
S'1'
p28526
sS'name'
p28527
S'implicit'
p28528
sS'required'
p28529
I00
sS'group_name'
p28530
S'Advanced'
p28531
sa(dp28532
S'description'
p28533
g3
sS'cpp_type'
p28534
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28535
sS'default'
p28536
S'DGConvection'
p28537
sS'name'
p28538
S'type'
p28539
sS'required'
p28540
I00
sS'group_name'
p28541
Nsa(dp28542
S'description'
p28543
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28544
sS'cpp_type'
p28545
S'bool'
p28546
sS'default'
p28547
S'0'
p28548
sS'name'
p28549
S'use_displaced_mesh'
p28550
sS'required'
p28551
I00
sS'group_name'
p28552
S'Advanced'
p28553
sa(dp28554
S'description'
p28555
S'The name of the variable that this boundary condition applies to\n'
p28556
sS'cpp_type'
p28557
S'NonlinearVariableName'
p28558
sS'default'
p28559
g3
sS'name'
p28560
S'variable'
p28561
sS'required'
p28562
I01
sS'group_name'
p28563
Nsa(dp28564
S'description'
p28565
S'Velocity vector\n'
p28566
sS'cpp_type'
p28567
S'libMesh::VectorValue<double>'
p28568
sS'default'
p28569
g3
sS'name'
p28570
S'velocity'
p28571
sS'required'
p28572
I01
sS'group_name'
p28573
NsasS'name'
p28574
S'/DGKernels/DGConvection'
p28575
sa(dp28576
S'description'
p28577
g3
sS'subblocks'
p28578
NsS'parameters'
p28579
(lp28580
(dp28581
S'description'
p28582
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28583
sS'cpp_type'
p28584
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28585
sS'default'
p28586
g3
sS'name'
p28587
S'block'
p28588
sS'required'
p28589
I00
sS'group_name'
p28590
Nsa(dp28591
S'description'
p28592
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28593
sS'cpp_type'
p28594
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28595
sS'default'
p28596
g3
sS'name'
p28597
S'boundary'
p28598
sS'required'
p28599
I00
sS'group_name'
p28600
Nsa(dp28601
S'description'
p28602
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28603
sS'cpp_type'
p28604
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28605
sS'default'
p28606
g3
sS'name'
p28607
S'control_tags'
p28608
sS'required'
p28609
I00
sS'group_name'
p28610
S'Advanced'
p28611
sa(dp28612
S'description'
p28613
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p28614
sS'cpp_type'
p28615
S'MaterialPropertyName'
p28616
sS'default'
p28617
S'1'
p28618
sS'name'
p28619
S'diff'
p28620
sS'required'
p28621
I00
sS'group_name'
p28622
Nsa(dp28623
S'description'
p28624
S'Set the enabled status of the MooseObject.\n'
p28625
sS'cpp_type'
p28626
S'bool'
p28627
sS'default'
p28628
S'1'
p28629
sS'name'
p28630
S'enable'
p28631
sS'required'
p28632
I00
sS'group_name'
p28633
S'Advanced'
p28634
sa(dp28635
S'description'
p28636
S'epsilon\n'
p28637
sS'cpp_type'
p28638
S'double'
p28639
sS'default'
p28640
g3
sS'name'
p28641
S'epsilon'
p28642
sS'required'
p28643
I01
sS'group_name'
p28644
Nsa(dp28645
S'description'
p28646
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28647
sS'cpp_type'
p28648
S'bool'
p28649
sS'default'
p28650
S'1'
p28651
sS'name'
p28652
S'implicit'
p28653
sS'required'
p28654
I00
sS'group_name'
p28655
S'Advanced'
p28656
sa(dp28657
S'description'
p28658
S'sigma\n'
p28659
sS'cpp_type'
p28660
S'double'
p28661
sS'default'
p28662
g3
sS'name'
p28663
S'sigma'
p28664
sS'required'
p28665
I01
sS'group_name'
p28666
Nsa(dp28667
S'description'
p28668
g3
sS'cpp_type'
p28669
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28670
sS'default'
p28671
S'DGDiffusion'
p28672
sS'name'
p28673
S'type'
p28674
sS'required'
p28675
I00
sS'group_name'
p28676
Nsa(dp28677
S'description'
p28678
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28679
sS'cpp_type'
p28680
S'bool'
p28681
sS'default'
p28682
S'0'
p28683
sS'name'
p28684
S'use_displaced_mesh'
p28685
sS'required'
p28686
I00
sS'group_name'
p28687
S'Advanced'
p28688
sa(dp28689
S'description'
p28690
S'The name of the variable that this boundary condition applies to\n'
p28691
sS'cpp_type'
p28692
S'NonlinearVariableName'
p28693
sS'default'
p28694
g3
sS'name'
p28695
S'variable'
p28696
sS'required'
p28697
I01
sS'group_name'
p28698
NsasS'name'
p28699
S'/DGKernels/DGDiffusion'
p28700
sasS'parameters'
p28701
NsS'name'
p28702
S'/DGKernels'
p28703
sa(dp28704
S'description'
p28705
g3
sS'subblocks'
p28706
(lp28707
(dp28708
S'description'
p28709
g3
sS'subblocks'
p28710
NsS'parameters'
p28711
(lp28712
(dp28713
S'description'
p28714
S'A string representing the Moose Object that will be built by this Action\n'
p28715
sS'cpp_type'
p28716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28717
sS'default'
p28718
g3
sS'name'
p28719
S'type'
p28720
sS'required'
p28721
I01
sS'group_name'
p28722
NsasS'name'
p28723
S'/Dampers/*'
p28724
sa(dp28725
S'description'
p28726
g3
sS'subblocks'
p28727
NsS'parameters'
p28728
(lp28729
(dp28730
S'description'
p28731
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28732
sS'cpp_type'
p28733
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28734
sS'default'
p28735
g3
sS'name'
p28736
S'control_tags'
p28737
sS'required'
p28738
I00
sS'group_name'
p28739
S'Advanced'
p28740
sa(dp28741
S'description'
p28742
S'Set the enabled status of the MooseObject.\n'
p28743
sS'cpp_type'
p28744
S'bool'
p28745
sS'default'
p28746
S'1'
p28747
sS'name'
p28748
S'enable'
p28749
sS'required'
p28750
I00
sS'group_name'
p28751
S'Advanced'
p28752
sa(dp28753
S'description'
p28754
S'The maximum permissible iterative value for the variable.\n'
p28755
sS'cpp_type'
p28756
S'double'
p28757
sS'default'
p28758
S'1.79769e+308'
p28759
sS'name'
p28760
S'max_value'
p28761
sS'required'
p28762
I00
sS'group_name'
p28763
Nsa(dp28764
S'description'
p28765
S'The minimum permissible iterative value for the variable.\n'
p28766
sS'cpp_type'
p28767
S'double'
p28768
sS'default'
p28769
S'-1.79769e+308'
p28770
sS'name'
p28771
S'min_value'
p28772
sS'required'
p28773
I00
sS'group_name'
p28774
Nsa(dp28775
S'description'
p28776
g3
sS'cpp_type'
p28777
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28778
sS'default'
p28779
S'BoundingValueElementDamper'
p28780
sS'name'
p28781
S'type'
p28782
sS'required'
p28783
I00
sS'group_name'
p28784
Nsa(dp28785
S'description'
p28786
S'The name of the variable that this damper operates on\n'
p28787
sS'cpp_type'
p28788
S'NonlinearVariableName'
p28789
sS'default'
p28790
g3
sS'name'
p28791
S'variable'
p28792
sS'required'
p28793
I01
sS'group_name'
p28794
NsasS'name'
p28795
S'/Dampers/BoundingValueElementDamper'
p28796
sa(dp28797
S'description'
p28798
g3
sS'subblocks'
p28799
NsS'parameters'
p28800
(lp28801
(dp28802
S'description'
p28803
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28804
sS'cpp_type'
p28805
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28806
sS'default'
p28807
g3
sS'name'
p28808
S'control_tags'
p28809
sS'required'
p28810
I00
sS'group_name'
p28811
S'Advanced'
p28812
sa(dp28813
S'description'
p28814
S'Set the enabled status of the MooseObject.\n'
p28815
sS'cpp_type'
p28816
S'bool'
p28817
sS'default'
p28818
S'1'
p28819
sS'name'
p28820
S'enable'
p28821
sS'required'
p28822
I00
sS'group_name'
p28823
S'Advanced'
p28824
sa(dp28825
S'description'
p28826
S'The maximum permissible iterative value for the variable.\n'
p28827
sS'cpp_type'
p28828
S'double'
p28829
sS'default'
p28830
S'1.79769e+308'
p28831
sS'name'
p28832
S'max_value'
p28833
sS'required'
p28834
I00
sS'group_name'
p28835
Nsa(dp28836
S'description'
p28837
S'The minimum permissible iterative value for the variable.\n'
p28838
sS'cpp_type'
p28839
S'double'
p28840
sS'default'
p28841
S'-1.79769e+308'
p28842
sS'name'
p28843
S'min_value'
p28844
sS'required'
p28845
I00
sS'group_name'
p28846
Nsa(dp28847
S'description'
p28848
g3
sS'cpp_type'
p28849
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28850
sS'default'
p28851
S'BoundingValueNodalDamper'
p28852
sS'name'
p28853
S'type'
p28854
sS'required'
p28855
I00
sS'group_name'
p28856
Nsa(dp28857
S'description'
p28858
S'The name of the variable that this damper operates on\n'
p28859
sS'cpp_type'
p28860
S'NonlinearVariableName'
p28861
sS'default'
p28862
g3
sS'name'
p28863
S'variable'
p28864
sS'required'
p28865
I01
sS'group_name'
p28866
NsasS'name'
p28867
S'/Dampers/BoundingValueNodalDamper'
p28868
sa(dp28869
S'description'
p28870
g3
sS'subblocks'
p28871
NsS'parameters'
p28872
(lp28873
(dp28874
S'description'
p28875
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28876
sS'cpp_type'
p28877
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28878
sS'default'
p28879
g3
sS'name'
p28880
S'control_tags'
p28881
sS'required'
p28882
I00
sS'group_name'
p28883
S'Advanced'
p28884
sa(dp28885
S'description'
p28886
S'The percentage (between 0 and 1) of the newton update to take.\n'
p28887
sS'cpp_type'
p28888
S'double'
p28889
sS'default'
p28890
g3
sS'name'
p28891
S'damping'
p28892
sS'required'
p28893
I01
sS'group_name'
p28894
Nsa(dp28895
S'description'
p28896
S'Set the enabled status of the MooseObject.\n'
p28897
sS'cpp_type'
p28898
S'bool'
p28899
sS'default'
p28900
S'1'
p28901
sS'name'
p28902
S'enable'
p28903
sS'required'
p28904
I00
sS'group_name'
p28905
S'Advanced'
p28906
sa(dp28907
S'description'
p28908
g3
sS'cpp_type'
p28909
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28910
sS'default'
p28911
S'ConstantDamper'
p28912
sS'name'
p28913
S'type'
p28914
sS'required'
p28915
I00
sS'group_name'
p28916
NsasS'name'
p28917
S'/Dampers/ConstantDamper'
p28918
sa(dp28919
S'description'
p28920
S'Damper that limits the change in element Jacobians\n'
p28921
sS'subblocks'
p28922
NsS'parameters'
p28923
(lp28924
(dp28925
S'description'
p28926
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28927
sS'cpp_type'
p28928
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28929
sS'default'
p28930
g3
sS'name'
p28931
S'control_tags'
p28932
sS'required'
p28933
I00
sS'group_name'
p28934
S'Advanced'
p28935
sa(dp28936
S'description'
p28937
S'The nonlinear displacement variables\n'
p28938
sS'cpp_type'
p28939
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p28940
sS'default'
p28941
g3
sS'name'
p28942
S'displacements'
p28943
sS'required'
p28944
I00
sS'group_name'
p28945
Nsa(dp28946
S'description'
p28947
S'Set the enabled status of the MooseObject.\n'
p28948
sS'cpp_type'
p28949
S'bool'
p28950
sS'default'
p28951
S'1'
p28952
sS'name'
p28953
S'enable'
p28954
sS'required'
p28955
I00
sS'group_name'
p28956
S'Advanced'
p28957
sa(dp28958
S'description'
p28959
S'The maximum permissible relative increment in the Jacobian per Newton iteration\n'
p28960
sS'cpp_type'
p28961
S'double'
p28962
sS'default'
p28963
S'0.1'
p28964
sS'name'
p28965
S'max_increment'
p28966
sS'required'
p28967
I00
sS'group_name'
p28968
Nsa(dp28969
S'description'
p28970
g3
sS'cpp_type'
p28971
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28972
sS'default'
p28973
S'ElementJacobianDamper'
p28974
sS'name'
p28975
S'type'
p28976
sS'required'
p28977
I00
sS'group_name'
p28978
Nsa(dp28979
S'description'
p28980
g3
sS'cpp_type'
p28981
S'bool'
p28982
sS'default'
p28983
S'1'
p28984
sS'name'
p28985
S'use_displaced_mesh'
p28986
sS'required'
p28987
I00
sS'group_name'
p28988
NsasS'name'
p28989
S'/Dampers/ElementJacobianDamper'
p28990
sa(dp28991
S'description'
p28992
g3
sS'subblocks'
p28993
NsS'parameters'
p28994
(lp28995
(dp28996
S'description'
p28997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28998
sS'cpp_type'
p28999
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29000
sS'default'
p29001
g3
sS'name'
p29002
S'control_tags'
p29003
sS'required'
p29004
I00
sS'group_name'
p29005
S'Advanced'
p29006
sa(dp29007
S'description'
p29008
S'Set the enabled status of the MooseObject.\n'
p29009
sS'cpp_type'
p29010
S'bool'
p29011
sS'default'
p29012
S'1'
p29013
sS'name'
p29014
S'enable'
p29015
sS'required'
p29016
I00
sS'group_name'
p29017
S'Advanced'
p29018
sa(dp29019
S'description'
p29020
S'The maximum newton increment for the variable.\n'
p29021
sS'cpp_type'
p29022
S'double'
p29023
sS'default'
p29024
g3
sS'name'
p29025
S'max_increment'
p29026
sS'required'
p29027
I01
sS'group_name'
p29028
Nsa(dp29029
S'description'
p29030
g3
sS'cpp_type'
p29031
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29032
sS'default'
p29033
S'MaxIncrement'
p29034
sS'name'
p29035
S'type'
p29036
sS'required'
p29037
I00
sS'group_name'
p29038
Nsa(dp29039
S'description'
p29040
S'The name of the variable that this damper operates on\n'
p29041
sS'cpp_type'
p29042
S'NonlinearVariableName'
p29043
sS'default'
p29044
g3
sS'name'
p29045
S'variable'
p29046
sS'required'
p29047
I01
sS'group_name'
p29048
NsasS'name'
p29049
S'/Dampers/MaxIncrement'
p29050
sasS'parameters'
p29051
NsS'name'
p29052
S'/Dampers'
p29053
sa(dp29054
S'description'
p29055
g3
sS'subblocks'
p29056
NsS'parameters'
p29057
(lp29058
(dp29059
S'description'
p29060
S'Print out the actions being executed\n'
p29061
sS'cpp_type'
p29062
S'bool'
p29063
sS'default'
p29064
S'0'
p29065
sS'name'
p29066
S'show_actions'
p29067
sS'required'
p29068
I00
sS'group_name'
p29069
Nsa(dp29070
S'description'
p29071
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p29072
sS'cpp_type'
p29073
S'bool'
p29074
sS'default'
p29075
S'0'
p29076
sS'name'
p29077
S'show_material_props'
p29078
sS'required'
p29079
I00
sS'group_name'
p29080
Nsa(dp29081
S'description'
p29082
S'Shows parser block extraction and debugging information\n'
p29083
sS'cpp_type'
p29084
S'bool'
p29085
sS'default'
p29086
S'0'
p29087
sS'name'
p29088
S'show_parser'
p29089
sS'required'
p29090
I00
sS'group_name'
p29091
Nsa(dp29092
S'description'
p29093
S'The number of top residuals to print out (0 = no output)\n'
p29094
sS'cpp_type'
p29095
S'unsigned int'
p29096
sS'default'
p29097
S'0'
p29098
sS'name'
p29099
S'show_top_residuals'
p29100
sS'required'
p29101
I00
sS'group_name'
p29102
Nsa(dp29103
S'description'
p29104
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p29105
sS'cpp_type'
p29106
S'bool'
p29107
sS'default'
p29108
S'0'
p29109
sS'name'
p29110
S'show_var_residual_norms'
p29111
sS'required'
p29112
I00
sS'group_name'
p29113
Nsa(dp29114
S'description'
p29115
S'Variables for which residuals will be sent to the output file\n'
p29116
sS'cpp_type'
p29117
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p29118
sS'default'
p29119
g3
sS'name'
p29120
S'show_var_residual'
p29121
sS'required'
p29122
I00
sS'group_name'
p29123
NsasS'name'
p29124
S'/Debug'
p29125
sa(dp29126
S'description'
p29127
g3
sS'subblocks'
p29128
NsS'parameters'
p29129
(lp29130
(dp29131
S'description'
p29132
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p29133
sS'cpp_type'
p29134
S'bool'
p29135
sS'default'
p29136
g3
sS'name'
p29137
S'DEPRECATED'
p29138
sS'required'
p29139
I00
sS'group_name'
p29140
NsasS'name'
p29141
S'/DeprecatedBlock'
p29142
sa(dp29143
S'description'
p29144
g3
sS'subblocks'
p29145
(lp29146
(dp29147
S'description'
p29148
g3
sS'subblocks'
p29149
NsS'parameters'
p29150
(lp29151
(dp29152
S'description'
p29153
S'A string representing the Moose Object that will be built by this Action\n'
p29154
sS'cpp_type'
p29155
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29156
sS'default'
p29157
g3
sS'name'
p29158
S'type'
p29159
sS'required'
p29160
I01
sS'group_name'
p29161
NsasS'name'
p29162
S'/DiracKernels/*'
p29163
sa(dp29164
S'description'
p29165
g3
sS'subblocks'
p29166
NsS'parameters'
p29167
(lp29168
(dp29169
S'description'
p29170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29171
sS'cpp_type'
p29172
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29173
sS'default'
p29174
g3
sS'name'
p29175
S'control_tags'
p29176
sS'required'
p29177
I00
sS'group_name'
p29178
S'Advanced'
p29179
sa(dp29180
S'description'
p29181
S'By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n'
p29182
sS'cpp_type'
p29183
S'bool'
p29184
sS'default'
p29185
S'1'
p29186
sS'name'
p29187
S'drop_duplicate_points'
p29188
sS'required'
p29189
I00
sS'group_name'
p29190
S'Advanced'
p29191
sa(dp29192
S'description'
p29193
S'Set the enabled status of the MooseObject.\n'
p29194
sS'cpp_type'
p29195
S'bool'
p29196
sS'default'
p29197
S'1'
p29198
sS'name'
p29199
S'enable'
p29200
sS'required'
p29201
I00
sS'group_name'
p29202
S'Advanced'
p29203
sa(dp29204
S'description'
p29205
S'The x,y,z coordinates of the point\n'
p29206
sS'cpp_type'
p29207
S'std::vector<double, std::allocator<double> >'
p29208
sS'default'
p29209
g3
sS'name'
p29210
S'point'
p29211
sS'required'
p29212
I01
sS'group_name'
p29213
Nsa(dp29214
S'description'
p29215
g3
sS'cpp_type'
p29216
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29217
sS'default'
p29218
S'ConstantPointSource'
p29219
sS'name'
p29220
S'type'
p29221
sS'required'
p29222
I00
sS'group_name'
p29223
Nsa(dp29224
S'description'
p29225
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29226
sS'cpp_type'
p29227
S'bool'
p29228
sS'default'
p29229
S'0'
p29230
sS'name'
p29231
S'use_displaced_mesh'
p29232
sS'required'
p29233
I00
sS'group_name'
p29234
S'Advanced'
p29235
sa(dp29236
S'description'
p29237
S'The value of the point source\n'
p29238
sS'cpp_type'
p29239
S'double'
p29240
sS'default'
p29241
g3
sS'name'
p29242
S'value'
p29243
sS'required'
p29244
I01
sS'group_name'
p29245
Nsa(dp29246
S'description'
p29247
S'The name of the variable that this kernel operates on\n'
p29248
sS'cpp_type'
p29249
S'NonlinearVariableName'
p29250
sS'default'
p29251
g3
sS'name'
p29252
S'variable'
p29253
sS'required'
p29254
I01
sS'group_name'
p29255
NsasS'name'
p29256
S'/DiracKernels/ConstantPointSource'
p29257
sasS'parameters'
p29258
NsS'name'
p29259
S'/DiracKernels'
p29260
sa(dp29261
S'description'
p29262
g3
sS'subblocks'
p29263
(lp29264
(dp29265
S'description'
p29266
g3
sS'subblocks'
p29267
NsS'parameters'
p29268
(lp29269
(dp29270
S'description'
p29271
S'A string representing the Moose Object that will be built by this Action\n'
p29272
sS'cpp_type'
p29273
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29274
sS'default'
p29275
g3
sS'name'
p29276
S'type'
p29277
sS'required'
p29278
I01
sS'group_name'
p29279
NsasS'name'
p29280
S'/Distributions/*'
p29281
sasS'parameters'
p29282
NsS'name'
p29283
S'/Distributions'
p29284
sa(dp29285
S'description'
p29286
g3
sS'subblocks'
p29287
(lp29288
(dp29289
S'description'
p29290
g3
sS'subblocks'
p29291
(lp29292
(dp29293
S'description'
p29294
g3
sS'subblocks'
p29295
NsS'parameters'
p29296
(lp29297
(dp29298
S'description'
p29299
S'If Chebyshev acceleration is turned on\n'
p29300
sS'cpp_type'
p29301
S'bool'
p29302
sS'default'
p29303
S'1'
p29304
sS'name'
p29305
S'Chebyshev_acceleration_on'
p29306
sS'required'
p29307
I00
sS'group_name'
p29308
Nsa(dp29309
S'description'
p29310
S'True to ask the solver to set initial\n'
p29311
sS'cpp_type'
p29312
S'bool'
p29313
sS'default'
p29314
S'1'
p29315
sS'name'
p29316
S'auto_initialization'
p29317
sS'required'
p29318
I00
sS'group_name'
p29319
S'Advanced'
p29320
sa(dp29321
S'description'
p29322
S'To evaluate |Bx| for the eigenvalue\n'
p29323
sS'cpp_type'
p29324
S'PostprocessorName'
p29325
sS'default'
p29326
g3
sS'name'
p29327
S'bx_norm'
p29328
sS'required'
p29329
I01
sS'group_name'
p29330
Nsa(dp29331
S'description'
p29332
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p29333
sS'cpp_type'
p29334
S'bool'
p29335
sS'default'
p29336
S'0'
p29337
sS'name'
p29338
S'compute_initial_residual_before_preset_bcs'
p29339
sS'required'
p29340
I00
sS'group_name'
p29341
S'Solver'
p29342
sa(dp29343
S'description'
p29344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29345
sS'cpp_type'
p29346
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29347
sS'default'
p29348
g3
sS'name'
p29349
S'control_tags'
p29350
sS'required'
p29351
I00
sS'group_name'
p29352
S'Advanced'
p29353
sa(dp29354
S'description'
p29355
S'Eigenvalue convergence tolerance\n'
p29356
sS'cpp_type'
p29357
S'double'
p29358
sS'default'
p29359
S'1e-06'
p29360
sS'name'
p29361
S'eig_check_tol'
p29362
sS'required'
p29363
I00
sS'group_name'
p29364
Nsa(dp29365
S'description'
p29366
S'Set the enabled status of the MooseObject.\n'
p29367
sS'cpp_type'
p29368
S'bool'
p29369
sS'default'
p29370
S'1'
p29371
sS'name'
p29372
S'enable'
p29373
sS'required'
p29374
I00
sS'group_name'
p29375
S'Advanced'
p29376
sa(dp29377
S'description'
p29378
S'Initial guess of the eigenvalue\n'
p29379
sS'cpp_type'
p29380
S'double'
p29381
sS'default'
p29382
S'1'
p29383
sS'name'
p29384
S'k0'
p29385
sS'required'
p29386
I00
sS'group_name'
p29387
Nsa(dp29388
S'description'
p29389
S'Linear Absolute Step Tolerance\n'
p29390
sS'cpp_type'
p29391
S'double'
p29392
sS'default'
p29393
S'-1'
p29394
sS'name'
p29395
S'l_abs_step_tol'
p29396
sS'required'
p29397
I00
sS'group_name'
p29398
S'Solver'
p29399
sa(dp29400
S'description'
p29401
S'Max Linear Iterations\n'
p29402
sS'cpp_type'
p29403
S'unsigned int'
p29404
sS'default'
p29405
S'10000'
p29406
sS'name'
p29407
S'l_max_its'
p29408
sS'required'
p29409
I00
sS'group_name'
p29410
S'Solver'
p29411
sa(dp29412
S'description'
p29413
S'Linear Tolerance\n'
p29414
sS'cpp_type'
p29415
S'double'
p29416
sS'default'
p29417
S'1e-05'
p29418
sS'name'
p29419
S'l_tol'
p29420
sS'required'
p29421
I00
sS'group_name'
p29422
S'Solver'
p29423
sa(dp29424
S'name'
p29425
S'line_search'
p29426
sS'cpp_type'
p29427
S'MooseEnum'
p29428
sS'default'
p29429
S'default'
p29430
sS'description'
p29431
S'Specifies the line search type (Note: none = basic)\n'
p29432
sS'required'
p29433
I00
sS'options'
p29434
S'default shell none basic l2 bt cp'
p29435
sS'group_name'
p29436
Nsa(dp29437
S'description'
p29438
S'The maximum number of power iterations\n'
p29439
sS'cpp_type'
p29440
S'unsigned int'
p29441
sS'default'
p29442
S'300'
p29443
sS'name'
p29444
S'max_power_iterations'
p29445
sS'required'
p29446
I00
sS'group_name'
p29447
Nsa(dp29448
S'description'
p29449
S'Minimum number of power iterations\n'
p29450
sS'cpp_type'
p29451
S'unsigned int'
p29452
sS'default'
p29453
S'1'
p29454
sS'name'
p29455
S'min_power_iterations'
p29456
sS'required'
p29457
I00
sS'group_name'
p29458
Nsa(dp29459
S'description'
p29460
S'Nonlinear Absolute step Tolerance\n'
p29461
sS'cpp_type'
p29462
S'double'
p29463
sS'default'
p29464
S'1e-50'
p29465
sS'name'
p29466
S'nl_abs_step_tol'
p29467
sS'required'
p29468
I00
sS'group_name'
p29469
S'Solver'
p29470
sa(dp29471
S'description'
p29472
S'Nonlinear Absolute Tolerance\n'
p29473
sS'cpp_type'
p29474
S'double'
p29475
sS'default'
p29476
S'1e-50'
p29477
sS'name'
p29478
S'nl_abs_tol'
p29479
sS'required'
p29480
I00
sS'group_name'
p29481
S'Solver'
p29482
sa(dp29483
S'description'
p29484
S'Max Nonlinear solver function evaluations\n'
p29485
sS'cpp_type'
p29486
S'unsigned int'
p29487
sS'default'
p29488
S'10000'
p29489
sS'name'
p29490
S'nl_max_funcs'
p29491
sS'required'
p29492
I00
sS'group_name'
p29493
S'Solver'
p29494
sa(dp29495
S'description'
p29496
S'Max Nonlinear Iterations\n'
p29497
sS'cpp_type'
p29498
S'unsigned int'
p29499
sS'default'
p29500
S'50'
p29501
sS'name'
p29502
S'nl_max_its'
p29503
sS'required'
p29504
I00
sS'group_name'
p29505
S'Solver'
p29506
sa(dp29507
S'description'
p29508
S'Nonlinear Relative step Tolerance\n'
p29509
sS'cpp_type'
p29510
S'double'
p29511
sS'default'
p29512
S'1e-50'
p29513
sS'name'
p29514
S'nl_rel_step_tol'
p29515
sS'required'
p29516
I00
sS'group_name'
p29517
S'Solver'
p29518
sa(dp29519
S'description'
p29520
S'Nonlinear Relative Tolerance\n'
p29521
sS'cpp_type'
p29522
S'double'
p29523
sS'default'
p29524
S'1e-08'
p29525
sS'name'
p29526
S'nl_rel_tol'
p29527
sS'required'
p29528
I00
sS'group_name'
p29529
S'Solver'
p29530
sa(dp29531
S'description'
p29532
S'Specifies whether or not to reinitialize FEs\n'
p29533
sS'cpp_type'
p29534
S'bool'
p29535
sS'default'
p29536
S'0'
p29537
sS'name'
p29538
S'no_fe_reinit'
p29539
sS'required'
p29540
I00
sS'group_name'
p29541
S'Advanced'
p29542
sa(dp29543
S'description'
p29544
S'Normalize x to make |x| equal to this factor\n'
p29545
sS'cpp_type'
p29546
S'double'
p29547
sS'default'
p29548
g3
sS'name'
p29549
S'normal_factor'
p29550
sS'required'
p29551
I00
sS'group_name'
p29552
S'Normalization'
p29553
sa(dp29554
S'description'
p29555
S'To evaluate |x| for normalization\n'
p29556
sS'cpp_type'
p29557
S'PostprocessorName'
p29558
sS'default'
p29559
g3
sS'name'
p29560
S'normalization'
p29561
sS'required'
p29562
I00
sS'group_name'
p29563
S'Normalization'
p29564
sa(dp29565
S'description'
p29566
S'True to output a step before normalization\n'
p29567
sS'cpp_type'
p29568
S'bool'
p29569
sS'default'
p29570
S'1'
p29571
sS'name'
p29572
S'output_before_normalization'
p29573
sS'required'
p29574
I00
sS'group_name'
p29575
S'Normalization'
p29576
sa(dp29577
S'name'
p29578
S'petsc_options'
p29579
sS'cpp_type'
p29580
S'MultiMooseEnum'
p29581
sS'default'
p29582
g3
sS'description'
p29583
S'Singleton PETSc options\n'
p29584
sS'required'
p29585
I00
sS'options'
p29586
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p29587
sS'group_name'
p29588
Nsa(dp29589
S'name'
p29590
S'petsc_options_iname'
p29591
sS'cpp_type'
p29592
S'MultiMooseEnum'
p29593
sS'default'
p29594
g3
sS'description'
p29595
S'Names of PETSc name/value pairs\n'
p29596
sS'required'
p29597
I00
sS'options'
p29598
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p29599
sS'group_name'
p29600
Nsa(dp29601
S'description'
p29602
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p29603
sS'cpp_type'
p29604
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29605
sS'default'
p29606
g3
sS'name'
p29607
S'petsc_options_value'
p29608
sS'required'
p29609
I00
sS'group_name'
p29610
Nsa(dp29611
S'description'
p29612
S'Reduce residual norm per power iteration by this factor\n'
p29613
sS'cpp_type'
p29614
S'double'
p29615
sS'default'
p29616
S'0.01'
p29617
sS'name'
p29618
S'pfactor'
p29619
sS'required'
p29620
I00
sS'group_name'
p29621
Nsa(dp29622
S'description'
p29623
S'File base name used for restart\n'
p29624
sS'cpp_type'
p29625
S'FileNameNoExtension'
p29626
sS'default'
p29627
g3
sS'name'
p29628
S'restart_file_base'
p29629
sS'required'
p29630
I00
sS'group_name'
p29631
S'Restart'
p29632
sa(dp29633
S'description'
p29634
S'Convergence tolerance on |x-x_previous| when provided\n'
p29635
sS'cpp_type'
p29636
S'double'
p29637
sS'default'
p29638
S'1.79769e+308'
p29639
sS'name'
p29640
S'sol_check_tol'
p29641
sS'required'
p29642
I00
sS'group_name'
p29643
Nsa(dp29644
S'name'
p29645
S'solve_type'
p29646
sS'cpp_type'
p29647
S'MooseEnum'
p29648
sS'default'
p29649
g3
sS'description'
p29650
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p29651
sS'required'
p29652
I00
sS'options'
p29653
S'PJFNK JFNK NEWTON FD LINEAR'
p29654
sS'group_name'
p29655
Nsa(dp29656
S'description'
p29657
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p29658
sS'cpp_type'
p29659
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29660
sS'default'
p29661
g3
sS'name'
p29662
S'splitting'
p29663
sS'required'
p29664
I00
sS'group_name'
p29665
Nsa(dp29666
S'description'
p29667
S'System time\n'
p29668
sS'cpp_type'
p29669
S'double'
p29670
sS'default'
p29671
S'0'
p29672
sS'name'
p29673
S'time'
p29674
sS'required'
p29675
I00
sS'group_name'
p29676
S'Advanced'
p29677
sa(dp29678
S'description'
p29679
g3
sS'cpp_type'
p29680
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29681
sS'default'
p29682
S'InversePowerMethod'
p29683
sS'name'
p29684
S'type'
p29685
sS'required'
p29686
I00
sS'group_name'
p29687
Nsa(dp29688
S'description'
p29689
S'To evaluate |x-x_previous| for power iterations\n'
p29690
sS'cpp_type'
p29691
S'PostprocessorName'
p29692
sS'default'
p29693
g3
sS'name'
p29694
S'xdiff'
p29695
sS'required'
p29696
I00
sS'group_name'
p29697
NsasS'name'
p29698
S'/Executioner/<type>/InversePowerMethod'
p29699
sa(dp29700
S'description'
p29701
g3
sS'subblocks'
p29702
NsS'parameters'
p29703
(lp29704
(dp29705
S'description'
p29706
S'True to ask the solver to set initial\n'
p29707
sS'cpp_type'
p29708
S'bool'
p29709
sS'default'
p29710
S'1'
p29711
sS'name'
p29712
S'auto_initialization'
p29713
sS'required'
p29714
I00
sS'group_name'
p29715
S'Advanced'
p29716
sa(dp29717
S'description'
p29718
S'To evaluate |Bx| for the eigenvalue\n'
p29719
sS'cpp_type'
p29720
S'PostprocessorName'
p29721
sS'default'
p29722
g3
sS'name'
p29723
S'bx_norm'
p29724
sS'required'
p29725
I01
sS'group_name'
p29726
Nsa(dp29727
S'description'
p29728
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p29729
sS'cpp_type'
p29730
S'bool'
p29731
sS'default'
p29732
S'0'
p29733
sS'name'
p29734
S'compute_initial_residual_before_preset_bcs'
p29735
sS'required'
p29736
I00
sS'group_name'
p29737
S'Solver'
p29738
sa(dp29739
S'description'
p29740
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29741
sS'cpp_type'
p29742
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29743
sS'default'
p29744
g3
sS'name'
p29745
S'control_tags'
p29746
sS'required'
p29747
I00
sS'group_name'
p29748
S'Advanced'
p29749
sa(dp29750
S'description'
p29751
S'Set the enabled status of the MooseObject.\n'
p29752
sS'cpp_type'
p29753
S'bool'
p29754
sS'default'
p29755
S'1'
p29756
sS'name'
p29757
S'enable'
p29758
sS'required'
p29759
I00
sS'group_name'
p29760
S'Advanced'
p29761
sa(dp29762
S'description'
p29763
S'The number of free power iterations\n'
p29764
sS'cpp_type'
p29765
S'unsigned int'
p29766
sS'default'
p29767
S'4'
p29768
sS'name'
p29769
S'free_power_iterations'
p29770
sS'required'
p29771
I00
sS'group_name'
p29772
Nsa(dp29773
S'description'
p29774
S'Initial guess of the eigenvalue\n'
p29775
sS'cpp_type'
p29776
S'double'
p29777
sS'default'
p29778
S'1'
p29779
sS'name'
p29780
S'k0'
p29781
sS'required'
p29782
I00
sS'group_name'
p29783
Nsa(dp29784
S'description'
p29785
S'Linear Absolute Step Tolerance\n'
p29786
sS'cpp_type'
p29787
S'double'
p29788
sS'default'
p29789
S'-1'
p29790
sS'name'
p29791
S'l_abs_step_tol'
p29792
sS'required'
p29793
I00
sS'group_name'
p29794
S'Solver'
p29795
sa(dp29796
S'description'
p29797
S'Max Linear Iterations\n'
p29798
sS'cpp_type'
p29799
S'unsigned int'
p29800
sS'default'
p29801
S'10000'
p29802
sS'name'
p29803
S'l_max_its'
p29804
sS'required'
p29805
I00
sS'group_name'
p29806
S'Solver'
p29807
sa(dp29808
S'description'
p29809
S'Linear Tolerance\n'
p29810
sS'cpp_type'
p29811
S'double'
p29812
sS'default'
p29813
S'1e-05'
p29814
sS'name'
p29815
S'l_tol'
p29816
sS'required'
p29817
I00
sS'group_name'
p29818
S'Solver'
p29819
sa(dp29820
S'name'
p29821
S'line_search'
p29822
sS'cpp_type'
p29823
S'MooseEnum'
p29824
sS'default'
p29825
S'default'
p29826
sS'description'
p29827
S'Specifies the line search type (Note: none = basic)\n'
p29828
sS'required'
p29829
I00
sS'options'
p29830
S'default shell none basic l2 bt cp'
p29831
sS'group_name'
p29832
Nsa(dp29833
S'description'
p29834
S'Nonlinear Absolute step Tolerance\n'
p29835
sS'cpp_type'
p29836
S'double'
p29837
sS'default'
p29838
S'1e-50'
p29839
sS'name'
p29840
S'nl_abs_step_tol'
p29841
sS'required'
p29842
I00
sS'group_name'
p29843
S'Solver'
p29844
sa(dp29845
S'description'
p29846
S'Nonlinear Absolute Tolerance\n'
p29847
sS'cpp_type'
p29848
S'double'
p29849
sS'default'
p29850
S'1e-50'
p29851
sS'name'
p29852
S'nl_abs_tol'
p29853
sS'required'
p29854
I00
sS'group_name'
p29855
S'Solver'
p29856
sa(dp29857
S'description'
p29858
S'Max Nonlinear solver function evaluations\n'
p29859
sS'cpp_type'
p29860
S'unsigned int'
p29861
sS'default'
p29862
S'10000'
p29863
sS'name'
p29864
S'nl_max_funcs'
p29865
sS'required'
p29866
I00
sS'group_name'
p29867
S'Solver'
p29868
sa(dp29869
S'description'
p29870
S'Max Nonlinear Iterations\n'
p29871
sS'cpp_type'
p29872
S'unsigned int'
p29873
sS'default'
p29874
S'50'
p29875
sS'name'
p29876
S'nl_max_its'
p29877
sS'required'
p29878
I00
sS'group_name'
p29879
S'Solver'
p29880
sa(dp29881
S'description'
p29882
S'Nonlinear Relative step Tolerance\n'
p29883
sS'cpp_type'
p29884
S'double'
p29885
sS'default'
p29886
S'1e-50'
p29887
sS'name'
p29888
S'nl_rel_step_tol'
p29889
sS'required'
p29890
I00
sS'group_name'
p29891
S'Solver'
p29892
sa(dp29893
S'description'
p29894
S'Nonlinear Relative Tolerance\n'
p29895
sS'cpp_type'
p29896
S'double'
p29897
sS'default'
p29898
S'1e-08'
p29899
sS'name'
p29900
S'nl_rel_tol'
p29901
sS'required'
p29902
I00
sS'group_name'
p29903
S'Solver'
p29904
sa(dp29905
S'description'
p29906
S'Specifies whether or not to reinitialize FEs\n'
p29907
sS'cpp_type'
p29908
S'bool'
p29909
sS'default'
p29910
S'0'
p29911
sS'name'
p29912
S'no_fe_reinit'
p29913
sS'required'
p29914
I00
sS'group_name'
p29915
S'Advanced'
p29916
sa(dp29917
S'description'
p29918
S'Normalize x to make |x| equal to this factor\n'
p29919
sS'cpp_type'
p29920
S'double'
p29921
sS'default'
p29922
g3
sS'name'
p29923
S'normal_factor'
p29924
sS'required'
p29925
I00
sS'group_name'
p29926
S'Normalization'
p29927
sa(dp29928
S'description'
p29929
S'To evaluate |x| for normalization\n'
p29930
sS'cpp_type'
p29931
S'PostprocessorName'
p29932
sS'default'
p29933
g3
sS'name'
p29934
S'normalization'
p29935
sS'required'
p29936
I00
sS'group_name'
p29937
S'Normalization'
p29938
sa(dp29939
S'description'
p29940
S'True to output solution after free power iterations\n'
p29941
sS'cpp_type'
p29942
S'bool'
p29943
sS'default'
p29944
S'1'
p29945
sS'name'
p29946
S'output_after_power_iterations'
p29947
sS'required'
p29948
I00
sS'group_name'
p29949
Nsa(dp29950
S'description'
p29951
S'True to output a step before normalization\n'
p29952
sS'cpp_type'
p29953
S'bool'
p29954
sS'default'
p29955
S'1'
p29956
sS'name'
p29957
S'output_before_normalization'
p29958
sS'required'
p29959
I00
sS'group_name'
p29960
S'Normalization'
p29961
sa(dp29962
S'name'
p29963
S'petsc_options'
p29964
sS'cpp_type'
p29965
S'MultiMooseEnum'
p29966
sS'default'
p29967
g3
sS'description'
p29968
S'Singleton PETSc options\n'
p29969
sS'required'
p29970
I00
sS'options'
p29971
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p29972
sS'group_name'
p29973
Nsa(dp29974
S'name'
p29975
S'petsc_options_iname'
p29976
sS'cpp_type'
p29977
S'MultiMooseEnum'
p29978
sS'default'
p29979
g3
sS'description'
p29980
S'Names of PETSc name/value pairs\n'
p29981
sS'required'
p29982
I00
sS'options'
p29983
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p29984
sS'group_name'
p29985
Nsa(dp29986
S'description'
p29987
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p29988
sS'cpp_type'
p29989
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29990
sS'default'
p29991
g3
sS'name'
p29992
S'petsc_options_value'
p29993
sS'required'
p29994
I00
sS'group_name'
p29995
Nsa(dp29996
S'description'
p29997
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p29998
sS'cpp_type'
p29999
S'double'
p30000
sS'default'
p30001
S'0.01'
p30002
sS'name'
p30003
S'pfactor'
p30004
sS'required'
p30005
I00
sS'group_name'
p30006
Nsa(dp30007
S'description'
p30008
S'File base name used for restart\n'
p30009
sS'cpp_type'
p30010
S'FileNameNoExtension'
p30011
sS'default'
p30012
g3
sS'name'
p30013
S'restart_file_base'
p30014
sS'required'
p30015
I00
sS'group_name'
p30016
S'Restart'
p30017
sa(dp30018
S'name'
p30019
S'solve_type'
p30020
sS'cpp_type'
p30021
S'MooseEnum'
p30022
sS'default'
p30023
g3
sS'description'
p30024
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p30025
sS'required'
p30026
I00
sS'options'
p30027
S'PJFNK JFNK NEWTON FD LINEAR'
p30028
sS'group_name'
p30029
Nsa(dp30030
S'description'
p30031
S'Absolute tolernance on residual norm\n'
p30032
sS'cpp_type'
p30033
S'double'
p30034
sS'default'
p30035
S'1e-06'
p30036
sS'name'
p30037
S'source_abs_tol'
p30038
sS'required'
p30039
I00
sS'group_name'
p30040
Nsa(dp30041
S'description'
p30042
S'Relative tolernance on residual norm after free power iterations\n'
p30043
sS'cpp_type'
p30044
S'double'
p30045
sS'default'
p30046
S'1e-50'
p30047
sS'name'
p30048
S'source_rel_tol'
p30049
sS'required'
p30050
I00
sS'group_name'
p30051
Nsa(dp30052
S'description'
p30053
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p30054
sS'cpp_type'
p30055
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30056
sS'default'
p30057
g3
sS'name'
p30058
S'splitting'
p30059
sS'required'
p30060
I00
sS'group_name'
p30061
Nsa(dp30062
S'description'
p30063
S'System time\n'
p30064
sS'cpp_type'
p30065
S'double'
p30066
sS'default'
p30067
S'0'
p30068
sS'name'
p30069
S'time'
p30070
sS'required'
p30071
I00
sS'group_name'
p30072
S'Advanced'
p30073
sa(dp30074
S'description'
p30075
g3
sS'cpp_type'
p30076
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30077
sS'default'
p30078
S'NonlinearEigen'
p30079
sS'name'
p30080
S'type'
p30081
sS'required'
p30082
I00
sS'group_name'
p30083
NsasS'name'
p30084
S'/Executioner/<type>/NonlinearEigen'
p30085
sa(dp30086
S'description'
p30087
g3
sS'subblocks'
p30088
NsS'parameters'
p30089
(lp30090
(dp30091
S'description'
p30092
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p30093
sS'cpp_type'
p30094
S'bool'
p30095
sS'default'
p30096
S'0'
p30097
sS'name'
p30098
S'compute_initial_residual_before_preset_bcs'
p30099
sS'required'
p30100
I00
sS'group_name'
p30101
S'Solver'
p30102
sa(dp30103
S'description'
p30104
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30105
sS'cpp_type'
p30106
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30107
sS'default'
p30108
g3
sS'name'
p30109
S'control_tags'
p30110
sS'required'
p30111
I00
sS'group_name'
p30112
S'Advanced'
p30113
sa(dp30114
S'description'
p30115
S'Set the enabled status of the MooseObject.\n'
p30116
sS'cpp_type'
p30117
S'bool'
p30118
sS'default'
p30119
S'1'
p30120
sS'name'
p30121
S'enable'
p30122
sS'required'
p30123
I00
sS'group_name'
p30124
S'Advanced'
p30125
sa(dp30126
S'description'
p30127
S'Linear Absolute Step Tolerance\n'
p30128
sS'cpp_type'
p30129
S'double'
p30130
sS'default'
p30131
S'-1'
p30132
sS'name'
p30133
S'l_abs_step_tol'
p30134
sS'required'
p30135
I00
sS'group_name'
p30136
S'Solver'
p30137
sa(dp30138
S'description'
p30139
S'Max Linear Iterations\n'
p30140
sS'cpp_type'
p30141
S'unsigned int'
p30142
sS'default'
p30143
S'10000'
p30144
sS'name'
p30145
S'l_max_its'
p30146
sS'required'
p30147
I00
sS'group_name'
p30148
S'Solver'
p30149
sa(dp30150
S'description'
p30151
S'Linear Tolerance\n'
p30152
sS'cpp_type'
p30153
S'double'
p30154
sS'default'
p30155
S'1e-05'
p30156
sS'name'
p30157
S'l_tol'
p30158
sS'required'
p30159
I00
sS'group_name'
p30160
S'Solver'
p30161
sa(dp30162
S'name'
p30163
S'line_search'
p30164
sS'cpp_type'
p30165
S'MooseEnum'
p30166
sS'default'
p30167
S'default'
p30168
sS'description'
p30169
S'Specifies the line search type (Note: none = basic)\n'
p30170
sS'required'
p30171
I00
sS'options'
p30172
S'default shell none basic l2 bt cp'
p30173
sS'group_name'
p30174
Nsa(dp30175
S'description'
p30176
S'Nonlinear Absolute step Tolerance\n'
p30177
sS'cpp_type'
p30178
S'double'
p30179
sS'default'
p30180
S'1e-50'
p30181
sS'name'
p30182
S'nl_abs_step_tol'
p30183
sS'required'
p30184
I00
sS'group_name'
p30185
S'Solver'
p30186
sa(dp30187
S'description'
p30188
S'Nonlinear Absolute Tolerance\n'
p30189
sS'cpp_type'
p30190
S'double'
p30191
sS'default'
p30192
S'1e-50'
p30193
sS'name'
p30194
S'nl_abs_tol'
p30195
sS'required'
p30196
I00
sS'group_name'
p30197
S'Solver'
p30198
sa(dp30199
S'description'
p30200
S'Max Nonlinear solver function evaluations\n'
p30201
sS'cpp_type'
p30202
S'unsigned int'
p30203
sS'default'
p30204
S'10000'
p30205
sS'name'
p30206
S'nl_max_funcs'
p30207
sS'required'
p30208
I00
sS'group_name'
p30209
S'Solver'
p30210
sa(dp30211
S'description'
p30212
S'Max Nonlinear Iterations\n'
p30213
sS'cpp_type'
p30214
S'unsigned int'
p30215
sS'default'
p30216
S'50'
p30217
sS'name'
p30218
S'nl_max_its'
p30219
sS'required'
p30220
I00
sS'group_name'
p30221
S'Solver'
p30222
sa(dp30223
S'description'
p30224
S'Nonlinear Relative step Tolerance\n'
p30225
sS'cpp_type'
p30226
S'double'
p30227
sS'default'
p30228
S'1e-50'
p30229
sS'name'
p30230
S'nl_rel_step_tol'
p30231
sS'required'
p30232
I00
sS'group_name'
p30233
S'Solver'
p30234
sa(dp30235
S'description'
p30236
S'Nonlinear Relative Tolerance\n'
p30237
sS'cpp_type'
p30238
S'double'
p30239
sS'default'
p30240
S'1e-08'
p30241
sS'name'
p30242
S'nl_rel_tol'
p30243
sS'required'
p30244
I00
sS'group_name'
p30245
S'Solver'
p30246
sa(dp30247
S'description'
p30248
S'Specifies whether or not to reinitialize FEs\n'
p30249
sS'cpp_type'
p30250
S'bool'
p30251
sS'default'
p30252
S'0'
p30253
sS'name'
p30254
S'no_fe_reinit'
p30255
sS'required'
p30256
I00
sS'group_name'
p30257
S'Advanced'
p30258
sa(dp30259
S'name'
p30260
S'petsc_options'
p30261
sS'cpp_type'
p30262
S'MultiMooseEnum'
p30263
sS'default'
p30264
g3
sS'description'
p30265
S'Singleton PETSc options\n'
p30266
sS'required'
p30267
I00
sS'options'
p30268
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p30269
sS'group_name'
p30270
Nsa(dp30271
S'name'
p30272
S'petsc_options_iname'
p30273
sS'cpp_type'
p30274
S'MultiMooseEnum'
p30275
sS'default'
p30276
g3
sS'description'
p30277
S'Names of PETSc name/value pairs\n'
p30278
sS'required'
p30279
I00
sS'options'
p30280
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p30281
sS'group_name'
p30282
Nsa(dp30283
S'description'
p30284
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p30285
sS'cpp_type'
p30286
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30287
sS'default'
p30288
g3
sS'name'
p30289
S'petsc_options_value'
p30290
sS'required'
p30291
I00
sS'group_name'
p30292
Nsa(dp30293
S'description'
p30294
S'File base name used for restart\n'
p30295
sS'cpp_type'
p30296
S'FileNameNoExtension'
p30297
sS'default'
p30298
g3
sS'name'
p30299
S'restart_file_base'
p30300
sS'required'
p30301
I00
sS'group_name'
p30302
S'Restart'
p30303
sa(dp30304
S'name'
p30305
S'solve_type'
p30306
sS'cpp_type'
p30307
S'MooseEnum'
p30308
sS'default'
p30309
g3
sS'description'
p30310
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p30311
sS'required'
p30312
I00
sS'options'
p30313
S'PJFNK JFNK NEWTON FD LINEAR'
p30314
sS'group_name'
p30315
Nsa(dp30316
S'description'
p30317
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p30318
sS'cpp_type'
p30319
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30320
sS'default'
p30321
g3
sS'name'
p30322
S'splitting'
p30323
sS'required'
p30324
I00
sS'group_name'
p30325
Nsa(dp30326
S'description'
p30327
g3
sS'cpp_type'
p30328
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30329
sS'default'
p30330
S'Steady'
p30331
sS'name'
p30332
S'type'
p30333
sS'required'
p30334
I00
sS'group_name'
p30335
NsasS'name'
p30336
S'/Executioner/<type>/Steady'
p30337
sa(dp30338
S'description'
p30339
g3
sS'subblocks'
p30340
NsS'parameters'
p30341
(lp30342
(dp30343
S'description'
p30344
S'abort if solve not converged rather than cut timestep\n'
p30345
sS'cpp_type'
p30346
S'bool'
p30347
sS'default'
p30348
S'0'
p30349
sS'name'
p30350
S'abort_on_solve_fail'
p30351
sS'required'
p30352
I00
sS'group_name'
p30353
S'Advanced'
p30354
sa(dp30355
S'description'
p30356
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p30357
sS'cpp_type'
p30358
S'bool'
p30359
sS'default'
p30360
S'0'
p30361
sS'name'
p30362
S'compute_initial_residual_before_preset_bcs'
p30363
sS'required'
p30364
I00
sS'group_name'
p30365
S'Solver'
p30366
sa(dp30367
S'description'
p30368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30369
sS'cpp_type'
p30370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30371
sS'default'
p30372
g3
sS'name'
p30373
S'control_tags'
p30374
sS'required'
p30375
I00
sS'group_name'
p30376
S'Advanced'
p30377
sa(dp30378
S'description'
p30379
S'The timestep size between solves\n'
p30380
sS'cpp_type'
p30381
S'double'
p30382
sS'default'
p30383
S'1'
p30384
sS'name'
p30385
S'dt'
p30386
sS'required'
p30387
I00
sS'group_name'
p30388
Nsa(dp30389
S'description'
p30390
S'The maximum timestep size in an adaptive run\n'
p30391
sS'cpp_type'
p30392
S'double'
p30393
sS'default'
p30394
S'1e+30'
p30395
sS'name'
p30396
S'dtmax'
p30397
sS'required'
p30398
I00
sS'group_name'
p30399
S'Advanced'
p30400
sa(dp30401
S'description'
p30402
S'The minimum timestep size in an adaptive run\n'
p30403
sS'cpp_type'
p30404
S'double'
p30405
sS'default'
p30406
S'2e-14'
p30407
sS'name'
p30408
S'dtmin'
p30409
sS'required'
p30410
I00
sS'group_name'
p30411
S'Advanced'
p30412
sa(dp30413
S'description'
p30414
S'Set the enabled status of the MooseObject.\n'
p30415
sS'cpp_type'
p30416
S'bool'
p30417
sS'default'
p30418
S'1'
p30419
sS'name'
p30420
S'enable'
p30421
sS'required'
p30422
I00
sS'group_name'
p30423
S'Advanced'
p30424
sa(dp30425
S'description'
p30426
S'The end time of the simulation\n'
p30427
sS'cpp_type'
p30428
S'double'
p30429
sS'default'
p30430
S'1e+30'
p30431
sS'name'
p30432
S'end_time'
p30433
sS'required'
p30434
I00
sS'group_name'
p30435
Nsa(dp30436
S'description'
p30437
S'Linear Absolute Step Tolerance\n'
p30438
sS'cpp_type'
p30439
S'double'
p30440
sS'default'
p30441
S'-1'
p30442
sS'name'
p30443
S'l_abs_step_tol'
p30444
sS'required'
p30445
I00
sS'group_name'
p30446
S'Solver'
p30447
sa(dp30448
S'description'
p30449
S'Max Linear Iterations\n'
p30450
sS'cpp_type'
p30451
S'unsigned int'
p30452
sS'default'
p30453
S'10000'
p30454
sS'name'
p30455
S'l_max_its'
p30456
sS'required'
p30457
I00
sS'group_name'
p30458
S'Solver'
p30459
sa(dp30460
S'description'
p30461
S'Linear Tolerance\n'
p30462
sS'cpp_type'
p30463
S'double'
p30464
sS'default'
p30465
S'1e-05'
p30466
sS'name'
p30467
S'l_tol'
p30468
sS'required'
p30469
I00
sS'group_name'
p30470
S'Solver'
p30471
sa(dp30472
S'name'
p30473
S'line_search'
p30474
sS'cpp_type'
p30475
S'MooseEnum'
p30476
sS'default'
p30477
S'default'
p30478
sS'description'
p30479
S'Specifies the line search type (Note: none = basic)\n'
p30480
sS'required'
p30481
I00
sS'options'
p30482
S'default shell none basic l2 bt cp'
p30483
sS'group_name'
p30484
Nsa(dp30485
S'description'
p30486
S'Maximum number of times to update XFEM crack topology in a step due to evolving cracks\n'
p30487
sS'cpp_type'
p30488
S'unsigned int'
p30489
sS'default'
p30490
S'4294967295'
p30491
sS'name'
p30492
S'max_xfem_update'
p30493
sS'required'
p30494
I00
sS'group_name'
p30495
Nsa(dp30496
S'description'
p30497
S'The number of timesteps during startup\n'
p30498
sS'cpp_type'
p30499
S'int'
p30500
sS'default'
p30501
S'0'
p30502
sS'name'
p30503
S'n_startup_steps'
p30504
sS'required'
p30505
I00
sS'group_name'
p30506
S'Advanced'
p30507
sa(dp30508
S'description'
p30509
S'Nonlinear Absolute step Tolerance\n'
p30510
sS'cpp_type'
p30511
S'double'
p30512
sS'default'
p30513
S'1e-50'
p30514
sS'name'
p30515
S'nl_abs_step_tol'
p30516
sS'required'
p30517
I00
sS'group_name'
p30518
S'Solver'
p30519
sa(dp30520
S'description'
p30521
S'Nonlinear Absolute Tolerance\n'
p30522
sS'cpp_type'
p30523
S'double'
p30524
sS'default'
p30525
S'1e-50'
p30526
sS'name'
p30527
S'nl_abs_tol'
p30528
sS'required'
p30529
I00
sS'group_name'
p30530
S'Solver'
p30531
sa(dp30532
S'description'
p30533
S'Max Nonlinear solver function evaluations\n'
p30534
sS'cpp_type'
p30535
S'unsigned int'
p30536
sS'default'
p30537
S'10000'
p30538
sS'name'
p30539
S'nl_max_funcs'
p30540
sS'required'
p30541
I00
sS'group_name'
p30542
S'Solver'
p30543
sa(dp30544
S'description'
p30545
S'Max Nonlinear Iterations\n'
p30546
sS'cpp_type'
p30547
S'unsigned int'
p30548
sS'default'
p30549
S'50'
p30550
sS'name'
p30551
S'nl_max_its'
p30552
sS'required'
p30553
I00
sS'group_name'
p30554
S'Solver'
p30555
sa(dp30556
S'description'
p30557
S'Nonlinear Relative step Tolerance\n'
p30558
sS'cpp_type'
p30559
S'double'
p30560
sS'default'
p30561
S'1e-50'
p30562
sS'name'
p30563
S'nl_rel_step_tol'
p30564
sS'required'
p30565
I00
sS'group_name'
p30566
S'Solver'
p30567
sa(dp30568
S'description'
p30569
S'Nonlinear Relative Tolerance\n'
p30570
sS'cpp_type'
p30571
S'double'
p30572
sS'default'
p30573
S'1e-08'
p30574
sS'name'
p30575
S'nl_rel_tol'
p30576
sS'required'
p30577
I00
sS'group_name'
p30578
S'Solver'
p30579
sa(dp30580
S'description'
p30581
S'Specifies whether or not to reinitialize FEs\n'
p30582
sS'cpp_type'
p30583
S'bool'
p30584
sS'default'
p30585
S'0'
p30586
sS'name'
p30587
S'no_fe_reinit'
p30588
sS'required'
p30589
I00
sS'group_name'
p30590
S'Advanced'
p30591
sa(dp30592
S'description'
p30593
S'The number of timesteps in a transient run\n'
p30594
sS'cpp_type'
p30595
S'unsigned int'
p30596
sS'default'
p30597
S'4294967295'
p30598
sS'name'
p30599
S'num_steps'
p30600
sS'required'
p30601
I00
sS'group_name'
p30602
Nsa(dp30603
S'name'
p30604
S'petsc_options'
p30605
sS'cpp_type'
p30606
S'MultiMooseEnum'
p30607
sS'default'
p30608
g3
sS'description'
p30609
S'Singleton PETSc options\n'
p30610
sS'required'
p30611
I00
sS'options'
p30612
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p30613
sS'group_name'
p30614
Nsa(dp30615
S'name'
p30616
S'petsc_options_iname'
p30617
sS'cpp_type'
p30618
S'MultiMooseEnum'
p30619
sS'default'
p30620
g3
sS'description'
p30621
S'Names of PETSc name/value pairs\n'
p30622
sS'required'
p30623
I00
sS'options'
p30624
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p30625
sS'group_name'
p30626
Nsa(dp30627
S'description'
p30628
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p30629
sS'cpp_type'
p30630
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30631
sS'default'
p30632
g3
sS'name'
p30633
S'petsc_options_value'
p30634
sS'required'
p30635
I00
sS'group_name'
p30636
Nsa(dp30637
S'description'
p30638
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p30639
sS'cpp_type'
p30640
S'double'
p30641
sS'default'
p30642
S'1e-50'
p30643
sS'name'
p30644
S'picard_abs_tol'
p30645
sS'required'
p30646
I00
sS'group_name'
p30647
S'Picard'
p30648
sa(dp30649
S'description'
p30650
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p30651
sS'cpp_type'
p30652
S'unsigned int'
p30653
sS'default'
p30654
S'1'
p30655
sS'name'
p30656
S'picard_max_its'
p30657
sS'required'
p30658
I00
sS'group_name'
p30659
S'Picard'
p30660
sa(dp30661
S'description'
p30662
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p30663
sS'cpp_type'
p30664
S'double'
p30665
sS'default'
p30666
S'1e-08'
p30667
sS'name'
p30668
S'picard_rel_tol'
p30669
sS'required'
p30670
I00
sS'group_name'
p30671
S'Picard'
p30672
sa(dp30673
S'description'
p30674
S'Use when restarting a calculation to force a change in dt.\n'
p30675
sS'cpp_type'
p30676
S'bool'
p30677
sS'default'
p30678
S'0'
p30679
sS'name'
p30680
S'reset_dt'
p30681
sS'required'
p30682
I00
sS'group_name'
p30683
Nsa(dp30684
S'description'
p30685
S'File base name used for restart\n'
p30686
sS'cpp_type'
p30687
S'FileNameNoExtension'
p30688
sS'default'
p30689
g3
sS'name'
p30690
S'restart_file_base'
p30691
sS'required'
p30692
I00
sS'group_name'
p30693
S'Restart'
p30694
sa(dp30695
S'name'
p30696
S'scheme'
p30697
sS'cpp_type'
p30698
S'MooseEnum'
p30699
sS'default'
p30700
g3
sS'description'
p30701
S'Time integration scheme used.\n'
p30702
sS'required'
p30703
I00
sS'options'
p30704
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk explicit-tvd-rk-2'
p30705
sS'group_name'
p30706
Nsa(dp30707
S'name'
p30708
S'solve_type'
p30709
sS'cpp_type'
p30710
S'MooseEnum'
p30711
sS'default'
p30712
g3
sS'description'
p30713
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p30714
sS'required'
p30715
I00
sS'options'
p30716
S'PJFNK JFNK NEWTON FD LINEAR'
p30717
sS'group_name'
p30718
Nsa(dp30719
S'description'
p30720
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p30721
sS'cpp_type'
p30722
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30723
sS'default'
p30724
g3
sS'name'
p30725
S'splitting'
p30726
sS'required'
p30727
I00
sS'group_name'
p30728
Nsa(dp30729
S'description'
p30730
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p30731
sS'cpp_type'
p30732
S'double'
p30733
sS'default'
p30734
S'1e-08'
p30735
sS'name'
p30736
S'ss_check_tol'
p30737
sS'required'
p30738
I00
sS'group_name'
p30739
S'Advanced'
p30740
sa(dp30741
S'description'
p30742
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p30743
sS'cpp_type'
p30744
S'double'
p30745
sS'default'
p30746
S'0'
p30747
sS'name'
p30748
S'ss_tmin'
p30749
sS'required'
p30750
I00
sS'group_name'
p30751
S'Advanced'
p30752
sa(dp30753
S'description'
p30754
S'The start time of the simulation\n'
p30755
sS'cpp_type'
p30756
S'double'
p30757
sS'default'
p30758
S'0'
p30759
sS'name'
p30760
S'start_time'
p30761
sS'required'
p30762
I00
sS'group_name'
p30763
S'Advanced'
p30764
sa(dp30765
S'description'
p30766
S'The end times of time periods\n'
p30767
sS'cpp_type'
p30768
S'std::vector<double, std::allocator<double> >'
p30769
sS'default'
p30770
g3
sS'name'
p30771
S'time_period_ends'
p30772
sS'required'
p30773
I00
sS'group_name'
p30774
S'Time Periods'
p30775
sa(dp30776
S'description'
p30777
S'The start times of time periods\n'
p30778
sS'cpp_type'
p30779
S'std::vector<double, std::allocator<double> >'
p30780
sS'default'
p30781
g3
sS'name'
p30782
S'time_period_starts'
p30783
sS'required'
p30784
I00
sS'group_name'
p30785
S'Time Periods'
p30786
sa(dp30787
S'description'
p30788
S'The names of periods\n'
p30789
sS'cpp_type'
p30790
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30791
sS'default'
p30792
g3
sS'name'
p30793
S'time_periods'
p30794
sS'required'
p30795
I00
sS'group_name'
p30796
S'Time Periods'
p30797
sa(dp30798
S'description'
p30799
S'the tolerance setting for final timestep size and sync times\n'
p30800
sS'cpp_type'
p30801
S'double'
p30802
sS'default'
p30803
S'2e-14'
p30804
sS'name'
p30805
S'timestep_tolerance'
p30806
sS'required'
p30807
I00
sS'group_name'
p30808
S'Advanced'
p30809
sa(dp30810
S'description'
p30811
S'Whether or not to check for steady state conditions\n'
p30812
sS'cpp_type'
p30813
S'bool'
p30814
sS'default'
p30815
S'0'
p30816
sS'name'
p30817
S'trans_ss_check'
p30818
sS'required'
p30819
I00
sS'group_name'
p30820
S'Advanced'
p30821
sa(dp30822
S'description'
p30823
g3
sS'cpp_type'
p30824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30825
sS'default'
p30826
S'Transient'
p30827
sS'name'
p30828
S'type'
p30829
sS'required'
p30830
I00
sS'group_name'
p30831
Nsa(dp30832
S'description'
p30833
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p30834
sS'cpp_type'
p30835
S'bool'
p30836
sS'default'
p30837
S'0'
p30838
sS'name'
p30839
S'use_multiapp_dt'
p30840
sS'required'
p30841
I00
sS'group_name'
p30842
S'Advanced'
p30843
sa(dp30844
S'description'
p30845
S'Print detailed diagnostics on timestep calculation\n'
p30846
sS'cpp_type'
p30847
S'bool'
p30848
sS'default'
p30849
S'0'
p30850
sS'name'
p30851
S'verbose'
p30852
sS'required'
p30853
I00
sS'group_name'
p30854
NsasS'name'
p30855
S'/Executioner/<type>/Transient'
p30856
sasS'parameters'
p30857
NsS'name'
p30858
S'/Executioner/<type>'
p30859
sa(dp30860
S'description'
p30861
g3
sS'subblocks'
p30862
NsS'parameters'
p30863
(lp30864
(dp30865
S'description'
p30866
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p30867
sS'cpp_type'
p30868
S'double'
p30869
sS'default'
p30870
S'0'
p30871
sS'name'
p30872
S'coarsen_fraction'
p30873
sS'required'
p30874
I00
sS'group_name'
p30875
Nsa(dp30876
S'description'
p30877
S'The number of adaptivity cycles per step\n'
p30878
sS'cpp_type'
p30879
S'unsigned int'
p30880
sS'default'
p30881
S'1'
p30882
sS'name'
p30883
S'cycles_per_step'
p30884
sS'required'
p30885
I00
sS'group_name'
p30886
Nsa(dp30887
S'name'
p30888
S'error_estimator'
p30889
sS'cpp_type'
p30890
S'MooseEnum'
p30891
sS'default'
p30892
S'KellyErrorEstimator'
p30893
sS'description'
p30894
S'The class name of the error estimator you want to use.\n'
p30895
sS'required'
p30896
I00
sS'options'
p30897
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p30898
sS'group_name'
p30899
Nsa(dp30900
S'description'
p30901
S'The number of adaptivity steps to perform using the initial conditions\n'
p30902
sS'cpp_type'
p30903
S'unsigned int'
p30904
sS'default'
p30905
S'0'
p30906
sS'name'
p30907
S'initial_adaptivity'
p30908
sS'required'
p30909
I00
sS'group_name'
p30910
Nsa(dp30911
S'description'
p30912
S'The number of time steps betweeen each adaptivity phase\n'
p30913
sS'cpp_type'
p30914
S'unsigned int'
p30915
sS'default'
p30916
S'1'
p30917
sS'name'
p30918
S'interval'
p30919
sS'required'
p30920
I00
sS'group_name'
p30921
Nsa(dp30922
S'description'
p30923
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p30924
sS'cpp_type'
p30925
S'unsigned int'
p30926
sS'default'
p30927
S'0'
p30928
sS'name'
p30929
S'max_h_level'
p30930
sS'required'
p30931
I00
sS'group_name'
p30932
Nsa(dp30933
S'description'
p30934
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p30935
sS'cpp_type'
p30936
S'bool'
p30937
sS'default'
p30938
S'0'
p30939
sS'name'
p30940
S'print_changed_info'
p30941
sS'required'
p30942
I00
sS'group_name'
p30943
Nsa(dp30944
S'description'
p30945
S'Recompute markers during adaptivity cycles\n'
p30946
sS'cpp_type'
p30947
S'bool'
p30948
sS'default'
p30949
S'0'
p30950
sS'name'
p30951
S'recompute_markers_during_cycles'
p30952
sS'required'
p30953
I00
sS'group_name'
p30954
Nsa(dp30955
S'description'
p30956
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p30957
sS'cpp_type'
p30958
S'double'
p30959
sS'default'
p30960
S'0'
p30961
sS'name'
p30962
S'refine_fraction'
p30963
sS'required'
p30964
I00
sS'group_name'
p30965
Nsa(dp30966
S'description'
p30967
S'Show the progress of the initial adaptivity\n'
p30968
sS'cpp_type'
p30969
S'bool'
p30970
sS'default'
p30971
S'1'
p30972
sS'name'
p30973
S'show_initial_progress'
p30974
sS'required'
p30975
I00
sS'group_name'
p30976
Nsa(dp30977
S'description'
p30978
S'The time that adaptivity will be active after.\n'
p30979
sS'cpp_type'
p30980
S'double'
p30981
sS'default'
p30982
S'-1.79769e+308'
p30983
sS'name'
p30984
S'start_time'
p30985
sS'required'
p30986
I00
sS'group_name'
p30987
Nsa(dp30988
S'description'
p30989
S'The number of adaptivity steps to perform at any one time for steady state\n'
p30990
sS'cpp_type'
p30991
S'unsigned int'
p30992
sS'default'
p30993
S'0'
p30994
sS'name'
p30995
S'steps'
p30996
sS'required'
p30997
I00
sS'group_name'
p30998
Nsa(dp30999
S'description'
p31000
S'The time after which adaptivity will no longer be active.\n'
p31001
sS'cpp_type'
p31002
S'double'
p31003
sS'default'
p31004
S'1.79769e+308'
p31005
sS'name'
p31006
S'stop_time'
p31007
sS'required'
p31008
I00
sS'group_name'
p31009
Nsa(dp31010
S'description'
p31011
S'List of names of variables that will be associated with weight_values\n'
p31012
sS'cpp_type'
p31013
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31014
sS'default'
p31015
g3
sS'name'
p31016
S'weight_names'
p31017
sS'required'
p31018
I00
sS'group_name'
p31019
Nsa(dp31020
S'description'
p31021
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p31022
sS'cpp_type'
p31023
S'std::vector<double, std::allocator<double> >'
p31024
sS'default'
p31025
g3
sS'name'
p31026
S'weight_values'
p31027
sS'required'
p31028
I00
sS'group_name'
p31029
NsasS'name'
p31030
S'/Executioner/Adaptivity'
p31031
sa(dp31032
S'description'
p31033
g3
sS'subblocks'
p31034
(lp31035
(dp31036
S'description'
p31037
g3
sS'subblocks'
p31038
(lp31039
(dp31040
S'description'
p31041
g3
sS'subblocks'
p31042
NsS'parameters'
p31043
(lp31044
(dp31045
S'description'
p31046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31047
sS'cpp_type'
p31048
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31049
sS'default'
p31050
g3
sS'name'
p31051
S'control_tags'
p31052
sS'required'
p31053
I00
sS'group_name'
p31054
S'Advanced'
p31055
sa(dp31056
S'description'
p31057
S'Set the enabled status of the MooseObject.\n'
p31058
sS'cpp_type'
p31059
S'bool'
p31060
sS'default'
p31061
S'1'
p31062
sS'name'
p31063
S'enable'
p31064
sS'required'
p31065
I00
sS'group_name'
p31066
S'Advanced'
p31067
sa(dp31068
S'description'
p31069
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p31070
sS'cpp_type'
p31071
S'int'
p31072
sS'default'
p31073
S'2'
p31074
sS'name'
p31075
S'order'
p31076
sS'required'
p31077
I00
sS'group_name'
p31078
Nsa(dp31079
S'description'
p31080
S'The scale factor for the predictor (can range from 0 to 1)\n'
p31081
sS'cpp_type'
p31082
S'double'
p31083
sS'default'
p31084
g3
sS'name'
p31085
S'scale'
p31086
sS'required'
p31087
I01
sS'group_name'
p31088
Nsa(dp31089
S'description'
p31090
S'Skip the predictor if the current solution time is in this list of times\n'
p31091
sS'cpp_type'
p31092
S'std::vector<double, std::allocator<double> >'
p31093
sS'default'
p31094
g3
sS'name'
p31095
S'skip_times'
p31096
sS'required'
p31097
I00
sS'group_name'
p31098
Nsa(dp31099
S'description'
p31100
S'Skip the predictor if the previous solution time is in this list of times\n'
p31101
sS'cpp_type'
p31102
S'std::vector<double, std::allocator<double> >'
p31103
sS'default'
p31104
g3
sS'name'
p31105
S'skip_times_old'
p31106
sS'required'
p31107
I00
sS'group_name'
p31108
Nsa(dp31109
S'description'
p31110
g3
sS'cpp_type'
p31111
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31112
sS'default'
p31113
S'AdamsPredictor'
p31114
sS'name'
p31115
S'type'
p31116
sS'required'
p31117
I00
sS'group_name'
p31118
NsasS'name'
p31119
S'/Executioner/Predictor/<type>/AdamsPredictor'
p31120
sa(dp31121
S'description'
p31122
g3
sS'subblocks'
p31123
NsS'parameters'
p31124
(lp31125
(dp31126
S'description'
p31127
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31128
sS'cpp_type'
p31129
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31130
sS'default'
p31131
g3
sS'name'
p31132
S'control_tags'
p31133
sS'required'
p31134
I00
sS'group_name'
p31135
S'Advanced'
p31136
sa(dp31137
S'description'
p31138
S'Set the enabled status of the MooseObject.\n'
p31139
sS'cpp_type'
p31140
S'bool'
p31141
sS'default'
p31142
S'1'
p31143
sS'name'
p31144
S'enable'
p31145
sS'required'
p31146
I00
sS'group_name'
p31147
S'Advanced'
p31148
sa(dp31149
S'description'
p31150
S'The scale factor for the predictor (can range from 0 to 1)\n'
p31151
sS'cpp_type'
p31152
S'double'
p31153
sS'default'
p31154
g3
sS'name'
p31155
S'scale'
p31156
sS'required'
p31157
I01
sS'group_name'
p31158
Nsa(dp31159
S'description'
p31160
S'Skip the predictor if the current solution time is in this list of times\n'
p31161
sS'cpp_type'
p31162
S'std::vector<double, std::allocator<double> >'
p31163
sS'default'
p31164
g3
sS'name'
p31165
S'skip_times'
p31166
sS'required'
p31167
I00
sS'group_name'
p31168
Nsa(dp31169
S'description'
p31170
S'Skip the predictor if the previous solution time is in this list of times\n'
p31171
sS'cpp_type'
p31172
S'std::vector<double, std::allocator<double> >'
p31173
sS'default'
p31174
g3
sS'name'
p31175
S'skip_times_old'
p31176
sS'required'
p31177
I00
sS'group_name'
p31178
Nsa(dp31179
S'description'
p31180
g3
sS'cpp_type'
p31181
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31182
sS'default'
p31183
S'SimplePredictor'
p31184
sS'name'
p31185
S'type'
p31186
sS'required'
p31187
I00
sS'group_name'
p31188
NsasS'name'
p31189
S'/Executioner/Predictor/<type>/SimplePredictor'
p31190
sasS'parameters'
p31191
NsS'name'
p31192
S'/Executioner/Predictor/<type>'
p31193
sasS'parameters'
p31194
(lp31195
(dp31196
S'description'
p31197
S'A string representing the Moose Object that will be built by this Action\n'
p31198
sS'cpp_type'
p31199
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31200
sS'default'
p31201
g3
sS'name'
p31202
S'type'
p31203
sS'required'
p31204
I01
sS'group_name'
p31205
NsasS'name'
p31206
S'/Executioner/Predictor'
p31207
sa(dp31208
S'description'
p31209
g3
sS'subblocks'
p31210
NsS'parameters'
p31211
(lp31212
(dp31213
S'name'
p31214
S'element_order'
p31215
sS'cpp_type'
p31216
S'MooseEnum'
p31217
sS'default'
p31218
S'AUTO'
p31219
sS'description'
p31220
S'Order of the quadrature for elements\n'
p31221
sS'required'
p31222
I00
sS'options'
p31223
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p31224
sS'group_name'
p31225
Nsa(dp31226
S'name'
p31227
S'order'
p31228
sS'cpp_type'
p31229
S'MooseEnum'
p31230
sS'default'
p31231
S'AUTO'
p31232
sS'description'
p31233
S'Order of the quadrature\n'
p31234
sS'required'
p31235
I00
sS'options'
p31236
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p31237
sS'group_name'
p31238
Nsa(dp31239
S'name'
p31240
S'side_order'
p31241
sS'cpp_type'
p31242
S'MooseEnum'
p31243
sS'default'
p31244
S'AUTO'
p31245
sS'description'
p31246
S'Order of the quadrature for sides\n'
p31247
sS'required'
p31248
I00
sS'options'
p31249
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p31250
sS'group_name'
p31251
Nsa(dp31252
S'name'
p31253
S'type'
p31254
sS'cpp_type'
p31255
S'MooseEnum'
p31256
sS'default'
p31257
S'GAUSS'
p31258
sS'description'
p31259
S'Type of the quadrature rule\n'
p31260
sS'required'
p31261
I00
sS'options'
p31262
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p31263
sS'group_name'
p31264
NsasS'name'
p31265
S'/Executioner/Quadrature'
p31266
sa(dp31267
S'description'
p31268
g3
sS'subblocks'
p31269
(lp31270
(dp31271
S'description'
p31272
g3
sS'subblocks'
p31273
(lp31274
(dp31275
S'description'
p31276
g3
sS'subblocks'
p31277
NsS'parameters'
p31278
(lp31279
(dp31280
S'description'
p31281
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31282
sS'cpp_type'
p31283
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31284
sS'default'
p31285
g3
sS'name'
p31286
S'control_tags'
p31287
sS'required'
p31288
I00
sS'group_name'
p31289
S'Advanced'
p31290
sa(dp31291
S'description'
p31292
S'Set the enabled status of the MooseObject.\n'
p31293
sS'cpp_type'
p31294
S'bool'
p31295
sS'default'
p31296
S'1'
p31297
sS'name'
p31298
S'enable'
p31299
sS'required'
p31300
I00
sS'group_name'
p31301
S'Advanced'
p31302
sa(dp31303
S'description'
p31304
S'If true, use LStableDirk4 to bootstrap this method.\n'
p31305
sS'cpp_type'
p31306
S'bool'
p31307
sS'default'
p31308
S'1'
p31309
sS'name'
p31310
S'safe_start'
p31311
sS'required'
p31312
I00
sS'group_name'
p31313
Nsa(dp31314
S'description'
p31315
g3
sS'cpp_type'
p31316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31317
sS'default'
p31318
S'AStableDirk4'
p31319
sS'name'
p31320
S'type'
p31321
sS'required'
p31322
I00
sS'group_name'
p31323
NsasS'name'
p31324
S'/Executioner/TimeIntegrator/<type>/AStableDirk4'
p31325
sa(dp31326
S'description'
p31327
g3
sS'subblocks'
p31328
NsS'parameters'
p31329
(lp31330
(dp31331
S'description'
p31332
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31333
sS'cpp_type'
p31334
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31335
sS'default'
p31336
g3
sS'name'
p31337
S'control_tags'
p31338
sS'required'
p31339
I00
sS'group_name'
p31340
S'Advanced'
p31341
sa(dp31342
S'description'
p31343
S'Set the enabled status of the MooseObject.\n'
p31344
sS'cpp_type'
p31345
S'bool'
p31346
sS'default'
p31347
S'1'
p31348
sS'name'
p31349
S'enable'
p31350
sS'required'
p31351
I00
sS'group_name'
p31352
S'Advanced'
p31353
sa(dp31354
S'description'
p31355
g3
sS'cpp_type'
p31356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31357
sS'default'
p31358
S'BDF2'
p31359
sS'name'
p31360
S'type'
p31361
sS'required'
p31362
I00
sS'group_name'
p31363
NsasS'name'
p31364
S'/Executioner/TimeIntegrator/<type>/BDF2'
p31365
sa(dp31366
S'description'
p31367
g3
sS'subblocks'
p31368
NsS'parameters'
p31369
(lp31370
(dp31371
S'description'
p31372
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31373
sS'cpp_type'
p31374
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31375
sS'default'
p31376
g3
sS'name'
p31377
S'control_tags'
p31378
sS'required'
p31379
I00
sS'group_name'
p31380
S'Advanced'
p31381
sa(dp31382
S'description'
p31383
S'Set the enabled status of the MooseObject.\n'
p31384
sS'cpp_type'
p31385
S'bool'
p31386
sS'default'
p31387
S'1'
p31388
sS'name'
p31389
S'enable'
p31390
sS'required'
p31391
I00
sS'group_name'
p31392
S'Advanced'
p31393
sa(dp31394
S'description'
p31395
g3
sS'cpp_type'
p31396
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31397
sS'default'
p31398
S'CrankNicolson'
p31399
sS'name'
p31400
S'type'
p31401
sS'required'
p31402
I00
sS'group_name'
p31403
NsasS'name'
p31404
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p31405
sa(dp31406
S'description'
p31407
g3
sS'subblocks'
p31408
NsS'parameters'
p31409
(lp31410
(dp31411
S'description'
p31412
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31413
sS'cpp_type'
p31414
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31415
sS'default'
p31416
g3
sS'name'
p31417
S'control_tags'
p31418
sS'required'
p31419
I00
sS'group_name'
p31420
S'Advanced'
p31421
sa(dp31422
S'description'
p31423
S'Set the enabled status of the MooseObject.\n'
p31424
sS'cpp_type'
p31425
S'bool'
p31426
sS'default'
p31427
S'1'
p31428
sS'name'
p31429
S'enable'
p31430
sS'required'
p31431
I00
sS'group_name'
p31432
S'Advanced'
p31433
sa(dp31434
S'description'
p31435
g3
sS'cpp_type'
p31436
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31437
sS'default'
p31438
S'ExplicitEuler'
p31439
sS'name'
p31440
S'type'
p31441
sS'required'
p31442
I00
sS'group_name'
p31443
NsasS'name'
p31444
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p31445
sa(dp31446
S'description'
p31447
g3
sS'subblocks'
p31448
NsS'parameters'
p31449
(lp31450
(dp31451
S'description'
p31452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31453
sS'cpp_type'
p31454
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31455
sS'default'
p31456
g3
sS'name'
p31457
S'control_tags'
p31458
sS'required'
p31459
I00
sS'group_name'
p31460
S'Advanced'
p31461
sa(dp31462
S'description'
p31463
S'Set the enabled status of the MooseObject.\n'
p31464
sS'cpp_type'
p31465
S'bool'
p31466
sS'default'
p31467
S'1'
p31468
sS'name'
p31469
S'enable'
p31470
sS'required'
p31471
I00
sS'group_name'
p31472
S'Advanced'
p31473
sa(dp31474
S'description'
p31475
g3
sS'cpp_type'
p31476
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31477
sS'default'
p31478
S'ExplicitMidpoint'
p31479
sS'name'
p31480
S'type'
p31481
sS'required'
p31482
I00
sS'group_name'
p31483
NsasS'name'
p31484
S'/Executioner/TimeIntegrator/<type>/ExplicitMidpoint'
p31485
sa(dp31486
S'description'
p31487
g3
sS'subblocks'
p31488
NsS'parameters'
p31489
(lp31490
(dp31491
S'description'
p31492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31493
sS'cpp_type'
p31494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31495
sS'default'
p31496
g3
sS'name'
p31497
S'control_tags'
p31498
sS'required'
p31499
I00
sS'group_name'
p31500
S'Advanced'
p31501
sa(dp31502
S'description'
p31503
S'Set the enabled status of the MooseObject.\n'
p31504
sS'cpp_type'
p31505
S'bool'
p31506
sS'default'
p31507
S'1'
p31508
sS'name'
p31509
S'enable'
p31510
sS'required'
p31511
I00
sS'group_name'
p31512
S'Advanced'
p31513
sa(dp31514
S'description'
p31515
g3
sS'cpp_type'
p31516
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31517
sS'default'
p31518
S'ExplicitTVDRK2'
p31519
sS'name'
p31520
S'type'
p31521
sS'required'
p31522
I00
sS'group_name'
p31523
NsasS'name'
p31524
S'/Executioner/TimeIntegrator/<type>/ExplicitTVDRK2'
p31525
sa(dp31526
S'description'
p31527
g3
sS'subblocks'
p31528
NsS'parameters'
p31529
(lp31530
(dp31531
S'description'
p31532
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31533
sS'cpp_type'
p31534
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31535
sS'default'
p31536
g3
sS'name'
p31537
S'control_tags'
p31538
sS'required'
p31539
I00
sS'group_name'
p31540
S'Advanced'
p31541
sa(dp31542
S'description'
p31543
S'Set the enabled status of the MooseObject.\n'
p31544
sS'cpp_type'
p31545
S'bool'
p31546
sS'default'
p31547
S'1'
p31548
sS'name'
p31549
S'enable'
p31550
sS'required'
p31551
I00
sS'group_name'
p31552
S'Advanced'
p31553
sa(dp31554
S'description'
p31555
g3
sS'cpp_type'
p31556
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31557
sS'default'
p31558
S'Heun'
p31559
sS'name'
p31560
S'type'
p31561
sS'required'
p31562
I00
sS'group_name'
p31563
NsasS'name'
p31564
S'/Executioner/TimeIntegrator/<type>/Heun'
p31565
sa(dp31566
S'description'
p31567
g3
sS'subblocks'
p31568
NsS'parameters'
p31569
(lp31570
(dp31571
S'description'
p31572
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31573
sS'cpp_type'
p31574
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31575
sS'default'
p31576
g3
sS'name'
p31577
S'control_tags'
p31578
sS'required'
p31579
I00
sS'group_name'
p31580
S'Advanced'
p31581
sa(dp31582
S'description'
p31583
S'Set the enabled status of the MooseObject.\n'
p31584
sS'cpp_type'
p31585
S'bool'
p31586
sS'default'
p31587
S'1'
p31588
sS'name'
p31589
S'enable'
p31590
sS'required'
p31591
I00
sS'group_name'
p31592
S'Advanced'
p31593
sa(dp31594
S'description'
p31595
g3
sS'cpp_type'
p31596
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31597
sS'default'
p31598
S'ImplicitEuler'
p31599
sS'name'
p31600
S'type'
p31601
sS'required'
p31602
I00
sS'group_name'
p31603
NsasS'name'
p31604
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p31605
sa(dp31606
S'description'
p31607
g3
sS'subblocks'
p31608
NsS'parameters'
p31609
(lp31610
(dp31611
S'description'
p31612
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31613
sS'cpp_type'
p31614
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31615
sS'default'
p31616
g3
sS'name'
p31617
S'control_tags'
p31618
sS'required'
p31619
I00
sS'group_name'
p31620
S'Advanced'
p31621
sa(dp31622
S'description'
p31623
S'Set the enabled status of the MooseObject.\n'
p31624
sS'cpp_type'
p31625
S'bool'
p31626
sS'default'
p31627
S'1'
p31628
sS'name'
p31629
S'enable'
p31630
sS'required'
p31631
I00
sS'group_name'
p31632
S'Advanced'
p31633
sa(dp31634
S'description'
p31635
g3
sS'cpp_type'
p31636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31637
sS'default'
p31638
S'ImplicitMidpoint'
p31639
sS'name'
p31640
S'type'
p31641
sS'required'
p31642
I00
sS'group_name'
p31643
NsasS'name'
p31644
S'/Executioner/TimeIntegrator/<type>/ImplicitMidpoint'
p31645
sa(dp31646
S'description'
p31647
g3
sS'subblocks'
p31648
NsS'parameters'
p31649
(lp31650
(dp31651
S'description'
p31652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31653
sS'cpp_type'
p31654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31655
sS'default'
p31656
g3
sS'name'
p31657
S'control_tags'
p31658
sS'required'
p31659
I00
sS'group_name'
p31660
S'Advanced'
p31661
sa(dp31662
S'description'
p31663
S'Set the enabled status of the MooseObject.\n'
p31664
sS'cpp_type'
p31665
S'bool'
p31666
sS'default'
p31667
S'1'
p31668
sS'name'
p31669
S'enable'
p31670
sS'required'
p31671
I00
sS'group_name'
p31672
S'Advanced'
p31673
sa(dp31674
S'description'
p31675
g3
sS'cpp_type'
p31676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31677
sS'default'
p31678
S'LStableDirk2'
p31679
sS'name'
p31680
S'type'
p31681
sS'required'
p31682
I00
sS'group_name'
p31683
NsasS'name'
p31684
S'/Executioner/TimeIntegrator/<type>/LStableDirk2'
p31685
sa(dp31686
S'description'
p31687
g3
sS'subblocks'
p31688
NsS'parameters'
p31689
(lp31690
(dp31691
S'description'
p31692
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31693
sS'cpp_type'
p31694
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31695
sS'default'
p31696
g3
sS'name'
p31697
S'control_tags'
p31698
sS'required'
p31699
I00
sS'group_name'
p31700
S'Advanced'
p31701
sa(dp31702
S'description'
p31703
S'Set the enabled status of the MooseObject.\n'
p31704
sS'cpp_type'
p31705
S'bool'
p31706
sS'default'
p31707
S'1'
p31708
sS'name'
p31709
S'enable'
p31710
sS'required'
p31711
I00
sS'group_name'
p31712
S'Advanced'
p31713
sa(dp31714
S'description'
p31715
g3
sS'cpp_type'
p31716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31717
sS'default'
p31718
S'LStableDirk3'
p31719
sS'name'
p31720
S'type'
p31721
sS'required'
p31722
I00
sS'group_name'
p31723
NsasS'name'
p31724
S'/Executioner/TimeIntegrator/<type>/LStableDirk3'
p31725
sa(dp31726
S'description'
p31727
g3
sS'subblocks'
p31728
NsS'parameters'
p31729
(lp31730
(dp31731
S'description'
p31732
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31733
sS'cpp_type'
p31734
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31735
sS'default'
p31736
g3
sS'name'
p31737
S'control_tags'
p31738
sS'required'
p31739
I00
sS'group_name'
p31740
S'Advanced'
p31741
sa(dp31742
S'description'
p31743
S'Set the enabled status of the MooseObject.\n'
p31744
sS'cpp_type'
p31745
S'bool'
p31746
sS'default'
p31747
S'1'
p31748
sS'name'
p31749
S'enable'
p31750
sS'required'
p31751
I00
sS'group_name'
p31752
S'Advanced'
p31753
sa(dp31754
S'description'
p31755
g3
sS'cpp_type'
p31756
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31757
sS'default'
p31758
S'LStableDirk4'
p31759
sS'name'
p31760
S'type'
p31761
sS'required'
p31762
I00
sS'group_name'
p31763
NsasS'name'
p31764
S'/Executioner/TimeIntegrator/<type>/LStableDirk4'
p31765
sa(dp31766
S'description'
p31767
g3
sS'subblocks'
p31768
NsS'parameters'
p31769
(lp31770
(dp31771
S'description'
p31772
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31773
sS'cpp_type'
p31774
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31775
sS'default'
p31776
g3
sS'name'
p31777
S'control_tags'
p31778
sS'required'
p31779
I00
sS'group_name'
p31780
S'Advanced'
p31781
sa(dp31782
S'description'
p31783
S'Set the enabled status of the MooseObject.\n'
p31784
sS'cpp_type'
p31785
S'bool'
p31786
sS'default'
p31787
S'1'
p31788
sS'name'
p31789
S'enable'
p31790
sS'required'
p31791
I00
sS'group_name'
p31792
S'Advanced'
p31793
sa(dp31794
S'description'
p31795
g3
sS'cpp_type'
p31796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31797
sS'default'
p31798
S'Ralston'
p31799
sS'name'
p31800
S'type'
p31801
sS'required'
p31802
I00
sS'group_name'
p31803
NsasS'name'
p31804
S'/Executioner/TimeIntegrator/<type>/Ralston'
p31805
sa(dp31806
S'description'
p31807
g3
sS'subblocks'
p31808
NsS'parameters'
p31809
(lp31810
(dp31811
S'description'
p31812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31813
sS'cpp_type'
p31814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31815
sS'default'
p31816
g3
sS'name'
p31817
S'control_tags'
p31818
sS'required'
p31819
I00
sS'group_name'
p31820
S'Advanced'
p31821
sa(dp31822
S'description'
p31823
S'Set the enabled status of the MooseObject.\n'
p31824
sS'cpp_type'
p31825
S'bool'
p31826
sS'default'
p31827
S'1'
p31828
sS'name'
p31829
S'enable'
p31830
sS'required'
p31831
I00
sS'group_name'
p31832
S'Advanced'
p31833
sa(dp31834
S'description'
p31835
g3
sS'cpp_type'
p31836
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31837
sS'default'
p31838
S'SteadyState'
p31839
sS'name'
p31840
S'type'
p31841
sS'required'
p31842
I00
sS'group_name'
p31843
NsasS'name'
p31844
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p31845
sasS'parameters'
p31846
NsS'name'
p31847
S'/Executioner/TimeIntegrator/<type>'
p31848
sasS'parameters'
p31849
(lp31850
(dp31851
S'description'
p31852
S'A string representing the Moose Object that will be built by this Action\n'
p31853
sS'cpp_type'
p31854
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31855
sS'default'
p31856
g3
sS'name'
p31857
S'type'
p31858
sS'required'
p31859
I01
sS'group_name'
p31860
NsasS'name'
p31861
S'/Executioner/TimeIntegrator'
p31862
sa(dp31863
S'description'
p31864
g3
sS'subblocks'
p31865
(lp31866
(dp31867
S'description'
p31868
g3
sS'subblocks'
p31869
(lp31870
(dp31871
S'description'
p31872
g3
sS'subblocks'
p31873
NsS'parameters'
p31874
(lp31875
(dp31876
S'description'
p31877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31878
sS'cpp_type'
p31879
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31880
sS'default'
p31881
g3
sS'name'
p31882
S'control_tags'
p31883
sS'required'
p31884
I00
sS'group_name'
p31885
S'Advanced'
p31886
sa(dp31887
S'description'
p31888
S'Initial time step size\n'
p31889
sS'cpp_type'
p31890
S'double'
p31891
sS'default'
p31892
g3
sS'name'
p31893
S'dt'
p31894
sS'required'
p31895
I01
sS'group_name'
p31896
Nsa(dp31897
S'description'
p31898
S'Maximum acceptable error.\n'
p31899
sS'cpp_type'
p31900
S'double'
p31901
sS'default'
p31902
g3
sS'name'
p31903
S'e_max'
p31904
sS'required'
p31905
I01
sS'group_name'
p31906
Nsa(dp31907
S'description'
p31908
S'Target error tolerance.\n'
p31909
sS'cpp_type'
p31910
S'double'
p31911
sS'default'
p31912
g3
sS'name'
p31913
S'e_tol'
p31914
sS'required'
p31915
I01
sS'group_name'
p31916
Nsa(dp31917
S'description'
p31918
S'Set the enabled status of the MooseObject.\n'
p31919
sS'cpp_type'
p31920
S'bool'
p31921
sS'default'
p31922
S'1'
p31923
sS'name'
p31924
S'enable'
p31925
sS'required'
p31926
I00
sS'group_name'
p31927
S'Advanced'
p31928
sa(dp31929
S'description'
p31930
S'Maximum ratio that the time step can increase.\n'
p31931
sS'cpp_type'
p31932
S'double'
p31933
sS'default'
p31934
S'1e+09'
p31935
sS'name'
p31936
S'max_increase'
p31937
sS'required'
p31938
I00
sS'group_name'
p31939
Nsa(dp31940
S'description'
p31941
S'Use when restarting a calculation to force a change in dt.\n'
p31942
sS'cpp_type'
p31943
S'bool'
p31944
sS'default'
p31945
S'0'
p31946
sS'name'
p31947
S'reset_dt'
p31948
sS'required'
p31949
I00
sS'group_name'
p31950
Nsa(dp31951
S'description'
p31952
S'scaling parameter for dt selection\n'
p31953
sS'cpp_type'
p31954
S'double'
p31955
sS'default'
p31956
S'0.8'
p31957
sS'name'
p31958
S'scaling_parameter'
p31959
sS'required'
p31960
I00
sS'group_name'
p31961
Nsa(dp31962
S'description'
p31963
S'when to start taking adaptive time steps\n'
p31964
sS'cpp_type'
p31965
S'int'
p31966
sS'default'
p31967
S'2'
p31968
sS'name'
p31969
S'start_adapting'
p31970
sS'required'
p31971
I00
sS'group_name'
p31972
Nsa(dp31973
S'description'
p31974
S'the number of time steps before recalculating dt\n'
p31975
sS'cpp_type'
p31976
S'int'
p31977
sS'default'
p31978
S'1'
p31979
sS'name'
p31980
S'steps_between_increase'
p31981
sS'required'
p31982
I00
sS'group_name'
p31983
Nsa(dp31984
S'description'
p31985
g3
sS'cpp_type'
p31986
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31987
sS'default'
p31988
S'AB2PredictorCorrector'
p31989
sS'name'
p31990
S'type'
p31991
sS'required'
p31992
I00
sS'group_name'
p31993
NsasS'name'
p31994
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p31995
sa(dp31996
S'description'
p31997
g3
sS'subblocks'
p31998
NsS'parameters'
p31999
(lp32000
(dp32001
S'description'
p32002
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32003
sS'cpp_type'
p32004
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32005
sS'default'
p32006
g3
sS'name'
p32007
S'control_tags'
p32008
sS'required'
p32009
I00
sS'group_name'
p32010
S'Advanced'
p32011
sa(dp32012
S'description'
p32013
S'Size of the time step\n'
p32014
sS'cpp_type'
p32015
S'double'
p32016
sS'default'
p32017
g3
sS'name'
p32018
S'dt'
p32019
sS'required'
p32020
I01
sS'group_name'
p32021
Nsa(dp32022
S'description'
p32023
S'Set the enabled status of the MooseObject.\n'
p32024
sS'cpp_type'
p32025
S'bool'
p32026
sS'default'
p32027
S'1'
p32028
sS'name'
p32029
S'enable'
p32030
sS'required'
p32031
I00
sS'group_name'
p32032
S'Advanced'
p32033
sa(dp32034
S'description'
p32035
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p32036
sS'cpp_type'
p32037
S'double'
p32038
sS'default'
p32039
S'2'
p32040
sS'name'
p32041
S'growth_factor'
p32042
sS'required'
p32043
I00
sS'group_name'
p32044
Nsa(dp32045
S'description'
p32046
S'Use when restarting a calculation to force a change in dt.\n'
p32047
sS'cpp_type'
p32048
S'bool'
p32049
sS'default'
p32050
S'0'
p32051
sS'name'
p32052
S'reset_dt'
p32053
sS'required'
p32054
I00
sS'group_name'
p32055
Nsa(dp32056
S'description'
p32057
g3
sS'cpp_type'
p32058
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32059
sS'default'
p32060
S'ConstantDT'
p32061
sS'name'
p32062
S'type'
p32063
sS'required'
p32064
I00
sS'group_name'
p32065
NsasS'name'
p32066
S'/Executioner/TimeStepper/<type>/ConstantDT'
p32067
sa(dp32068
S'description'
p32069
g3
sS'subblocks'
p32070
NsS'parameters'
p32071
(lp32072
(dp32073
S'description'
p32074
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32075
sS'cpp_type'
p32076
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32077
sS'default'
p32078
g3
sS'name'
p32079
S'control_tags'
p32080
sS'required'
p32081
I00
sS'group_name'
p32082
S'Advanced'
p32083
sa(dp32084
S'description'
p32085
S'The initial time step size.\n'
p32086
sS'cpp_type'
p32087
S'double'
p32088
sS'default'
p32089
S'1'
p32090
sS'name'
p32091
S'dt'
p32092
sS'required'
p32093
I00
sS'group_name'
p32094
Nsa(dp32095
S'description'
p32096
S'Maximum acceptable error.\n'
p32097
sS'cpp_type'
p32098
S'double'
p32099
sS'default'
p32100
g3
sS'name'
p32101
S'e_max'
p32102
sS'required'
p32103
I01
sS'group_name'
p32104
Nsa(dp32105
S'description'
p32106
S'Target error tolerance.\n'
p32107
sS'cpp_type'
p32108
S'double'
p32109
sS'default'
p32110
g3
sS'name'
p32111
S'e_tol'
p32112
sS'required'
p32113
I01
sS'group_name'
p32114
Nsa(dp32115
S'description'
p32116
S'Set the enabled status of the MooseObject.\n'
p32117
sS'cpp_type'
p32118
S'bool'
p32119
sS'default'
p32120
S'1'
p32121
sS'name'
p32122
S'enable'
p32123
sS'required'
p32124
I00
sS'group_name'
p32125
S'Advanced'
p32126
sa(dp32127
S'description'
p32128
S'Maximum ratio that the time step can increase.\n'
p32129
sS'cpp_type'
p32130
S'double'
p32131
sS'default'
p32132
S'1e+09'
p32133
sS'name'
p32134
S'max_increase'
p32135
sS'required'
p32136
I00
sS'group_name'
p32137
Nsa(dp32138
S'description'
p32139
S'Use when restarting a calculation to force a change in dt.\n'
p32140
sS'cpp_type'
p32141
S'bool'
p32142
sS'default'
p32143
S'0'
p32144
sS'name'
p32145
S'reset_dt'
p32146
sS'required'
p32147
I00
sS'group_name'
p32148
Nsa(dp32149
S'description'
p32150
g3
sS'cpp_type'
p32151
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32152
sS'default'
p32153
S'DT2'
p32154
sS'name'
p32155
S'type'
p32156
sS'required'
p32157
I00
sS'group_name'
p32158
NsasS'name'
p32159
S'/Executioner/TimeStepper/<type>/DT2'
p32160
sa(dp32161
S'description'
p32162
S'Solves the Transient problem at a sequence of time points taken from a specified exodus file.\n'
p32163
sS'subblocks'
p32164
NsS'parameters'
p32165
(lp32166
(dp32167
S'description'
p32168
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32169
sS'cpp_type'
p32170
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32171
sS'default'
p32172
g3
sS'name'
p32173
S'control_tags'
p32174
sS'required'
p32175
I00
sS'group_name'
p32176
S'Advanced'
p32177
sa(dp32178
S'description'
p32179
S'Set the enabled status of the MooseObject.\n'
p32180
sS'cpp_type'
p32181
S'bool'
p32182
sS'default'
p32183
S'1'
p32184
sS'name'
p32185
S'enable'
p32186
sS'required'
p32187
I00
sS'group_name'
p32188
S'Advanced'
p32189
sa(dp32190
S'description'
p32191
S'The name of the mesh file to extract the time sequence from (must be an exodusII file).\n'
p32192
sS'cpp_type'
p32193
S'MeshFileName'
p32194
sS'default'
p32195
g3
sS'name'
p32196
S'mesh'
p32197
sS'required'
p32198
I01
sS'group_name'
p32199
Nsa(dp32200
S'description'
p32201
S'Use when restarting a calculation to force a change in dt.\n'
p32202
sS'cpp_type'
p32203
S'bool'
p32204
sS'default'
p32205
S'0'
p32206
sS'name'
p32207
S'reset_dt'
p32208
sS'required'
p32209
I00
sS'group_name'
p32210
Nsa(dp32211
S'description'
p32212
g3
sS'cpp_type'
p32213
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32214
sS'default'
p32215
S'ExodusTimeSequenceStepper'
p32216
sS'name'
p32217
S'type'
p32218
sS'required'
p32219
I00
sS'group_name'
p32220
NsasS'name'
p32221
S'/Executioner/TimeStepper/<type>/ExodusTimeSequenceStepper'
p32222
sa(dp32223
S'description'
p32224
g3
sS'subblocks'
p32225
NsS'parameters'
p32226
(lp32227
(dp32228
S'description'
p32229
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32230
sS'cpp_type'
p32231
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32232
sS'default'
p32233
g3
sS'name'
p32234
S'control_tags'
p32235
sS'required'
p32236
I00
sS'group_name'
p32237
S'Advanced'
p32238
sa(dp32239
S'description'
p32240
S'Set the enabled status of the MooseObject.\n'
p32241
sS'cpp_type'
p32242
S'bool'
p32243
sS'default'
p32244
S'1'
p32245
sS'name'
p32246
S'enable'
p32247
sS'required'
p32248
I00
sS'group_name'
p32249
S'Advanced'
p32250
sa(dp32251
S'description'
p32252
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p32253
sS'cpp_type'
p32254
S'double'
p32255
sS'default'
p32256
S'1.79769e+308'
p32257
sS'name'
p32258
S'growth_factor'
p32259
sS'required'
p32260
I00
sS'group_name'
p32261
Nsa(dp32262
S'description'
p32263
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p32264
sS'cpp_type'
p32265
S'bool'
p32266
sS'default'
p32267
S'1'
p32268
sS'name'
p32269
S'interpolate'
p32270
sS'required'
p32271
I00
sS'group_name'
p32272
Nsa(dp32273
S'description'
p32274
S'The minimal dt to take.\n'
p32275
sS'cpp_type'
p32276
S'double'
p32277
sS'default'
p32278
S'0'
p32279
sS'name'
p32280
S'min_dt'
p32281
sS'required'
p32282
I00
sS'group_name'
p32283
Nsa(dp32284
S'description'
p32285
S'Use when restarting a calculation to force a change in dt.\n'
p32286
sS'cpp_type'
p32287
S'bool'
p32288
sS'default'
p32289
S'0'
p32290
sS'name'
p32291
S'reset_dt'
p32292
sS'required'
p32293
I00
sS'group_name'
p32294
Nsa(dp32295
S'description'
p32296
S'The values of dt\n'
p32297
sS'cpp_type'
p32298
S'std::vector<double, std::allocator<double> >'
p32299
sS'default'
p32300
g3
sS'name'
p32301
S'time_dt'
p32302
sS'required'
p32303
I01
sS'group_name'
p32304
Nsa(dp32305
S'description'
p32306
S'The values of t\n'
p32307
sS'cpp_type'
p32308
S'std::vector<double, std::allocator<double> >'
p32309
sS'default'
p32310
g3
sS'name'
p32311
S'time_t'
p32312
sS'required'
p32313
I01
sS'group_name'
p32314
Nsa(dp32315
S'description'
p32316
g3
sS'cpp_type'
p32317
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32318
sS'default'
p32319
S'FunctionDT'
p32320
sS'name'
p32321
S'type'
p32322
sS'required'
p32323
I00
sS'group_name'
p32324
NsasS'name'
p32325
S'/Executioner/TimeStepper/<type>/FunctionDT'
p32326
sa(dp32327
S'description'
p32328
S'Adjust the timestep based on the number of iterations\n'
p32329
sS'subblocks'
p32330
NsS'parameters'
p32331
(lp32332
(dp32333
S'description'
p32334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32335
sS'cpp_type'
p32336
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32337
sS'default'
p32338
g3
sS'name'
p32339
S'control_tags'
p32340
sS'required'
p32341
I00
sS'group_name'
p32342
S'Advanced'
p32343
sa(dp32344
S'description'
p32345
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed\n"
p32346
sS'cpp_type'
p32347
S'double'
p32348
sS'default'
p32349
S'0.5'
p32350
sS'name'
p32351
S'cutback_factor'
p32352
sS'required'
p32353
I00
sS'group_name'
p32354
Nsa(dp32355
S'description'
p32356
S'The default timestep size between solves\n'
p32357
sS'cpp_type'
p32358
S'double'
p32359
sS'default'
p32360
g3
sS'name'
p32361
S'dt'
p32362
sS'required'
p32363
I01
sS'group_name'
p32364
Nsa(dp32365
S'description'
p32366
S'Set the enabled status of the MooseObject.\n'
p32367
sS'cpp_type'
p32368
S'bool'
p32369
sS'default'
p32370
S'1'
p32371
sS'name'
p32372
S'enable'
p32373
sS'required'
p32374
I00
sS'group_name'
p32375
S'Advanced'
p32376
sa(dp32377
S'description'
p32378
S'Forces the timestepper to take a step that is consistent with points defined in the function\n'
p32379
sS'cpp_type'
p32380
S'bool'
p32381
sS'default'
p32382
S'0'
p32383
sS'name'
p32384
S'force_step_every_function_point'
p32385
sS'required'
p32386
I00
sS'group_name'
p32387
Nsa(dp32388
S'description'
p32389
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p32390
sS'cpp_type'
p32391
S'double'
p32392
sS'default'
p32393
S'2'
p32394
sS'name'
p32395
S'growth_factor'
p32396
sS'required'
p32397
I00
sS'group_name'
p32398
Nsa(dp32399
S'description'
p32400
S"Attempt to grow/shrink timestep if the iteration count is below/above 'optimal_iterations plus/minus iteration_window' (default = optimal_iterations/5).\n"
p32401
sS'cpp_type'
p32402
S'int'
p32403
sS'default'
p32404
g3
sS'name'
p32405
S'iteration_window'
p32406
sS'required'
p32407
I00
sS'group_name'
p32408
Nsa(dp32409
S'description'
p32410
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p32411
sS'cpp_type'
p32412
S'unsigned int'
p32413
sS'default'
p32414
g3
sS'name'
p32415
S'linear_iteration_ratio'
p32416
sS'required'
p32417
I00
sS'group_name'
p32418
Nsa(dp32419
S'description'
p32420
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p32421
sS'cpp_type'
p32422
S'double'
p32423
sS'default'
p32424
g3
sS'name'
p32425
S'max_function_change'
p32426
sS'required'
p32427
I00
sS'group_name'
p32428
Nsa(dp32429
S'description'
p32430
S'The target number of nonlinear iterations for adaptive timestepping\n'
p32431
sS'cpp_type'
p32432
S'int'
p32433
sS'default'
p32434
g3
sS'name'
p32435
S'optimal_iterations'
p32436
sS'required'
p32437
I00
sS'group_name'
p32438
Nsa(dp32439
S'description'
p32440
S'If specified, the postprocessor value is used as an upper limit for the current time step length\n'
p32441
sS'cpp_type'
p32442
S'PostprocessorName'
p32443
sS'default'
p32444
g3
sS'name'
p32445
S'postprocessor_dtlim'
p32446
sS'required'
p32447
I00
sS'group_name'
p32448
Nsa(dp32449
S'description'
p32450
S'Use when restarting a calculation to force a change in dt.\n'
p32451
sS'cpp_type'
p32452
S'bool'
p32453
sS'default'
p32454
S'0'
p32455
sS'name'
p32456
S'reset_dt'
p32457
sS'required'
p32458
I00
sS'group_name'
p32459
Nsa(dp32460
S'description'
p32461
S'The values of dt\n'
p32462
sS'cpp_type'
p32463
S'std::vector<double, std::allocator<double> >'
p32464
sS'default'
p32465
g3
sS'name'
p32466
S'time_dt'
p32467
sS'required'
p32468
I00
sS'group_name'
p32469
Nsa(dp32470
S'description'
p32471
S'The values of t\n'
p32472
sS'cpp_type'
p32473
S'std::vector<double, std::allocator<double> >'
p32474
sS'default'
p32475
g3
sS'name'
p32476
S'time_t'
p32477
sS'required'
p32478
I00
sS'group_name'
p32479
Nsa(dp32480
S'description'
p32481
S"A 'Piecewise' type function used to control the timestep by limiting the change in the function over a timestep\n"
p32482
sS'cpp_type'
p32483
S'FunctionName'
p32484
sS'default'
p32485
g3
sS'name'
p32486
S'timestep_limiting_function'
p32487
sS'required'
p32488
I00
sS'group_name'
p32489
Nsa(dp32490
S'description'
p32491
g3
sS'cpp_type'
p32492
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32493
sS'default'
p32494
S'IterationAdaptiveDT'
p32495
sS'name'
p32496
S'type'
p32497
sS'required'
p32498
I00
sS'group_name'
p32499
NsasS'name'
p32500
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p32501
sa(dp32502
S'description'
p32503
g3
sS'subblocks'
p32504
NsS'parameters'
p32505
(lp32506
(dp32507
S'description'
p32508
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32509
sS'cpp_type'
p32510
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32511
sS'default'
p32512
g3
sS'name'
p32513
S'control_tags'
p32514
sS'required'
p32515
I00
sS'group_name'
p32516
S'Advanced'
p32517
sa(dp32518
S'description'
p32519
S'Initial value of dt\n'
p32520
sS'cpp_type'
p32521
S'double'
p32522
sS'default'
p32523
g3
sS'name'
p32524
S'dt'
p32525
sS'required'
p32526
I00
sS'group_name'
p32527
Nsa(dp32528
S'description'
p32529
S'Set the enabled status of the MooseObject.\n'
p32530
sS'cpp_type'
p32531
S'bool'
p32532
sS'default'
p32533
S'1'
p32534
sS'name'
p32535
S'enable'
p32536
sS'required'
p32537
I00
sS'group_name'
p32538
S'Advanced'
p32539
sa(dp32540
S'description'
p32541
S'Add a factor to the supplied postprocessor value.\n'
p32542
sS'cpp_type'
p32543
S'double'
p32544
sS'default'
p32545
S'0'
p32546
sS'name'
p32547
S'factor'
p32548
sS'required'
p32549
I00
sS'group_name'
p32550
Nsa(dp32551
S'description'
p32552
S'The name of the postprocessor that computes the dt\n'
p32553
sS'cpp_type'
p32554
S'PostprocessorName'
p32555
sS'default'
p32556
g3
sS'name'
p32557
S'postprocessor'
p32558
sS'required'
p32559
I01
sS'group_name'
p32560
Nsa(dp32561
S'description'
p32562
S'Use when restarting a calculation to force a change in dt.\n'
p32563
sS'cpp_type'
p32564
S'bool'
p32565
sS'default'
p32566
S'0'
p32567
sS'name'
p32568
S'reset_dt'
p32569
sS'required'
p32570
I00
sS'group_name'
p32571
Nsa(dp32572
S'description'
p32573
S'Multiple scale and supplied postprocessor value.\n'
p32574
sS'cpp_type'
p32575
S'double'
p32576
sS'default'
p32577
S'1'
p32578
sS'name'
p32579
S'scale'
p32580
sS'required'
p32581
I00
sS'group_name'
p32582
Nsa(dp32583
S'description'
p32584
g3
sS'cpp_type'
p32585
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32586
sS'default'
p32587
S'PostprocessorDT'
p32588
sS'name'
p32589
S'type'
p32590
sS'required'
p32591
I00
sS'group_name'
p32592
NsasS'name'
p32593
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p32594
sa(dp32595
S'description'
p32596
g3
sS'subblocks'
p32597
NsS'parameters'
p32598
(lp32599
(dp32600
S'description'
p32601
S'Output adaptive time step log\n'
p32602
sS'cpp_type'
p32603
S'bool'
p32604
sS'default'
p32605
S'0'
p32606
sS'name'
p32607
S'adapt_log'
p32608
sS'required'
p32609
I00
sS'group_name'
p32610
Nsa(dp32611
S'description'
p32612
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32613
sS'cpp_type'
p32614
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32615
sS'default'
p32616
g3
sS'name'
p32617
S'control_tags'
p32618
sS'required'
p32619
I00
sS'group_name'
p32620
S'Advanced'
p32621
sa(dp32622
S'description'
p32623
S'The timestep size between solves\n'
p32624
sS'cpp_type'
p32625
S'double'
p32626
sS'default'
p32627
g3
sS'name'
p32628
S'dt'
p32629
sS'required'
p32630
I01
sS'group_name'
p32631
Nsa(dp32632
S'description'
p32633
S'Set the enabled status of the MooseObject.\n'
p32634
sS'cpp_type'
p32635
S'bool'
p32636
sS'default'
p32637
S'1'
p32638
sS'name'
p32639
S'enable'
p32640
sS'required'
p32641
I00
sS'group_name'
p32642
S'Advanced'
p32643
sa(dp32644
S'description'
p32645
S'Direction for the first step.  1 for up... -1 for down. \n'
p32646
sS'cpp_type'
p32647
S'int'
p32648
sS'default'
p32649
S'1'
p32650
sS'name'
p32651
S'initial_direction'
p32652
sS'required'
p32653
I00
sS'group_name'
p32654
Nsa(dp32655
S'description'
p32656
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p32657
sS'cpp_type'
p32658
S'double'
p32659
sS'default'
p32660
S'0.1'
p32661
sS'name'
p32662
S'percent_change'
p32663
sS'required'
p32664
I00
sS'group_name'
p32665
Nsa(dp32666
S'description'
p32667
S'Use when restarting a calculation to force a change in dt.\n'
p32668
sS'cpp_type'
p32669
S'bool'
p32670
sS'default'
p32671
S'0'
p32672
sS'name'
p32673
S'reset_dt'
p32674
sS'required'
p32675
I00
sS'group_name'
p32676
Nsa(dp32677
S'description'
p32678
g3
sS'cpp_type'
p32679
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32680
sS'default'
p32681
S'SolutionTimeAdaptiveDT'
p32682
sS'name'
p32683
S'type'
p32684
sS'required'
p32685
I00
sS'group_name'
p32686
NsasS'name'
p32687
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p32688
sa(dp32689
S'description'
p32690
S'Solves the Transient problem at a sequence of given time points.\n'
p32691
sS'subblocks'
p32692
NsS'parameters'
p32693
(lp32694
(dp32695
S'description'
p32696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32697
sS'cpp_type'
p32698
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32699
sS'default'
p32700
g3
sS'name'
p32701
S'control_tags'
p32702
sS'required'
p32703
I00
sS'group_name'
p32704
S'Advanced'
p32705
sa(dp32706
S'description'
p32707
S'Set the enabled status of the MooseObject.\n'
p32708
sS'cpp_type'
p32709
S'bool'
p32710
sS'default'
p32711
S'1'
p32712
sS'name'
p32713
S'enable'
p32714
sS'required'
p32715
I00
sS'group_name'
p32716
S'Advanced'
p32717
sa(dp32718
S'description'
p32719
S'Use when restarting a calculation to force a change in dt.\n'
p32720
sS'cpp_type'
p32721
S'bool'
p32722
sS'default'
p32723
S'0'
p32724
sS'name'
p32725
S'reset_dt'
p32726
sS'required'
p32727
I00
sS'group_name'
p32728
Nsa(dp32729
S'description'
p32730
S'The values of t\n'
p32731
sS'cpp_type'
p32732
S'std::vector<double, std::allocator<double> >'
p32733
sS'default'
p32734
g3
sS'name'
p32735
S'time_sequence'
p32736
sS'required'
p32737
I01
sS'group_name'
p32738
Nsa(dp32739
S'description'
p32740
g3
sS'cpp_type'
p32741
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32742
sS'default'
p32743
S'TimeSequenceStepper'
p32744
sS'name'
p32745
S'type'
p32746
sS'required'
p32747
I00
sS'group_name'
p32748
NsasS'name'
p32749
S'/Executioner/TimeStepper/<type>/TimeSequenceStepper'
p32750
sasS'parameters'
p32751
NsS'name'
p32752
S'/Executioner/TimeStepper/<type>'
p32753
sasS'parameters'
p32754
(lp32755
(dp32756
S'description'
p32757
S'A string representing the Moose Object that will be built by this Action\n'
p32758
sS'cpp_type'
p32759
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32760
sS'default'
p32761
g3
sS'name'
p32762
S'type'
p32763
sS'required'
p32764
I01
sS'group_name'
p32765
NsasS'name'
p32766
S'/Executioner/TimeStepper'
p32767
sasS'parameters'
p32768
(lp32769
(dp32770
S'description'
p32771
S'A string representing the Moose Object that will be built by this Action\n'
p32772
sS'cpp_type'
p32773
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32774
sS'default'
p32775
g3
sS'name'
p32776
S'type'
p32777
sS'required'
p32778
I01
sS'group_name'
p32779
NsasS'name'
p32780
S'/Executioner'
p32781
sa(dp32782
S'description'
p32783
g3
sS'subblocks'
p32784
(lp32785
(dp32786
S'description'
p32787
g3
sS'subblocks'
p32788
NsS'parameters'
p32789
(lp32790
(dp32791
S'description'
p32792
S'A string representing the Moose Object that will be built by this Action\n'
p32793
sS'cpp_type'
p32794
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32795
sS'default'
p32796
g3
sS'name'
p32797
S'type'
p32798
sS'required'
p32799
I01
sS'group_name'
p32800
NsasS'name'
p32801
S'/Functions/*'
p32802
sa(dp32803
S'description'
p32804
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p32805
sS'subblocks'
p32806
NsS'parameters'
p32807
(lp32808
(dp32809
S'description'
p32810
S'Start point for axis of symmetry for the 2d model\n'
p32811
sS'cpp_type'
p32812
S'libMesh::VectorValue<double>'
p32813
sS'default'
p32814
S'0 0 0'
p32815
sS'name'
p32816
S'2d_axis_point1'
p32817
sS'required'
p32818
I00
sS'group_name'
p32819
Nsa(dp32820
S'description'
p32821
S'End point for axis of symmetry for the 2d model\n'
p32822
sS'cpp_type'
p32823
S'libMesh::VectorValue<double>'
p32824
sS'default'
p32825
S'0 1 0'
p32826
sS'name'
p32827
S'2d_axis_point2'
p32828
sS'required'
p32829
I00
sS'group_name'
p32830
Nsa(dp32831
S'description'
p32832
S'Start point for axis of symmetry for the 3d model\n'
p32833
sS'cpp_type'
p32834
S'libMesh::VectorValue<double>'
p32835
sS'default'
p32836
S'0 0 0'
p32837
sS'name'
p32838
S'3d_axis_point1'
p32839
sS'required'
p32840
I00
sS'group_name'
p32841
Nsa(dp32842
S'description'
p32843
S'End point for axis of symmetry for the 3d model\n'
p32844
sS'cpp_type'
p32845
S'libMesh::VectorValue<double>'
p32846
sS'default'
p32847
S'0 1 0'
p32848
sS'name'
p32849
S'3d_axis_point2'
p32850
sS'required'
p32851
I00
sS'group_name'
p32852
Nsa(dp32853
S'description'
p32854
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p32855
sS'cpp_type'
p32856
S'double'
p32857
sS'default'
p32858
S'0'
p32859
sS'name'
p32860
S'add_factor'
p32861
sS'required'
p32862
I00
sS'group_name'
p32863
Nsa(dp32864
S'description'
p32865
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p32866
sS'cpp_type'
p32867
S'double'
p32868
sS'default'
p32869
S'1'
p32870
sS'name'
p32871
S'axial_dimension_ratio'
p32872
sS'required'
p32873
I00
sS'group_name'
p32874
Nsa(dp32875
S'description'
p32876
S'Component of the variable to be computed if it is a vector\n'
p32877
sS'cpp_type'
p32878
S'unsigned int'
p32879
sS'default'
p32880
g3
sS'name'
p32881
S'component'
p32882
sS'required'
p32883
I00
sS'group_name'
p32884
Nsa(dp32885
S'description'
p32886
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32887
sS'cpp_type'
p32888
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32889
sS'default'
p32890
g3
sS'name'
p32891
S'control_tags'
p32892
sS'required'
p32893
I00
sS'group_name'
p32894
S'Advanced'
p32895
sa(dp32896
S'description'
p32897
S'Set the enabled status of the MooseObject.\n'
p32898
sS'cpp_type'
p32899
S'bool'
p32900
sS'default'
p32901
S'1'
p32902
sS'name'
p32903
S'enable'
p32904
sS'required'
p32905
I00
sS'group_name'
p32906
S'Advanced'
p32907
sa(dp32908
S'description'
p32909
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p32910
sS'cpp_type'
p32911
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32912
sS'default'
p32913
g3
sS'name'
p32914
S'from_variables'
p32915
sS'required'
p32916
I00
sS'group_name'
p32917
Nsa(dp32918
S'description'
p32919
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p32920
sS'cpp_type'
p32921
S'double'
p32922
sS'default'
p32923
S'1'
p32924
sS'name'
p32925
S'scale_factor'
p32926
sS'required'
p32927
I00
sS'group_name'
p32928
Nsa(dp32929
S'description'
p32930
S'The SolutionUserObject to extract data from.\n'
p32931
sS'cpp_type'
p32932
S'UserObjectName'
p32933
sS'default'
p32934
g3
sS'name'
p32935
S'solution'
p32936
sS'required'
p32937
I01
sS'group_name'
p32938
Nsa(dp32939
S'description'
p32940
g3
sS'cpp_type'
p32941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32942
sS'default'
p32943
S'Axisymmetric2D3DSolutionFunction'
p32944
sS'name'
p32945
S'type'
p32946
sS'required'
p32947
I00
sS'group_name'
p32948
NsasS'name'
p32949
S'/Functions/Axisymmetric2D3DSolutionFunction'
p32950
sa(dp32951
S'description'
p32952
g3
sS'subblocks'
p32953
NsS'parameters'
p32954
(lp32955
(dp32956
S'description'
p32957
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32958
sS'cpp_type'
p32959
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32960
sS'default'
p32961
g3
sS'name'
p32962
S'control_tags'
p32963
sS'required'
p32964
I00
sS'group_name'
p32965
S'Advanced'
p32966
sa(dp32967
S'description'
p32968
S'Set the enabled status of the MooseObject.\n'
p32969
sS'cpp_type'
p32970
S'bool'
p32971
sS'default'
p32972
S'1'
p32973
sS'name'
p32974
S'enable'
p32975
sS'required'
p32976
I00
sS'group_name'
p32977
S'Advanced'
p32978
sa(dp32979
S'description'
p32980
g3
sS'cpp_type'
p32981
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32982
sS'default'
p32983
S'BicubicSplineFunction'
p32984
sS'name'
p32985
S'type'
p32986
sS'required'
p32987
I00
sS'group_name'
p32988
Nsa(dp32989
S'description'
p32990
S'The first independent coordinate.\n'
p32991
sS'cpp_type'
p32992
S'std::vector<double, std::allocator<double> >'
p32993
sS'default'
p32994
g3
sS'name'
p32995
S'x1'
p32996
sS'required'
p32997
I01
sS'group_name'
p32998
Nsa(dp32999
S'description'
p33000
S'The second independent coordinate.\n'
p33001
sS'cpp_type'
p33002
S'std::vector<double, std::allocator<double> >'
p33003
sS'default'
p33004
g3
sS'name'
p33005
S'x2'
p33006
sS'required'
p33007
I01
sS'group_name'
p33008
Nsa(dp33009
S'description'
p33010
S'The dependent values\n'
p33011
sS'cpp_type'
p33012
S'std::vector<double, std::allocator<double> >'
p33013
sS'default'
p33014
g3
sS'name'
p33015
S'y'
p33016
sS'required'
p33017
I01
sS'group_name'
p33018
Nsa(dp33019
S'description'
p33020
S'The functional form of the derivative with respect to x1.\n'
p33021
sS'cpp_type'
p33022
S'FunctionName'
p33023
sS'default'
p33024
S'1e30'
p33025
sS'name'
p33026
S'yx1'
p33027
sS'required'
p33028
I00
sS'group_name'
p33029
Nsa(dp33030
S'description'
p33031
S'The values of the derivative wrt x1 on the lower interpolation grid points.\n'
p33032
sS'cpp_type'
p33033
S'std::vector<double, std::allocator<double> >'
p33034
sS'default'
p33035
g3
sS'name'
p33036
S'yx11'
p33037
sS'required'
p33038
I00
sS'group_name'
p33039
Nsa(dp33040
S'description'
p33041
S'The values of the derivative wrt x1 on the upper interpolation grid points.\n'
p33042
sS'cpp_type'
p33043
S'std::vector<double, std::allocator<double> >'
p33044
sS'default'
p33045
g3
sS'name'
p33046
S'yx1n'
p33047
sS'required'
p33048
I00
sS'group_name'
p33049
Nsa(dp33050
S'description'
p33051
S'The functional form of the derivative with respect to x2.\n'
p33052
sS'cpp_type'
p33053
S'FunctionName'
p33054
sS'default'
p33055
S'1e30'
p33056
sS'name'
p33057
S'yx2'
p33058
sS'required'
p33059
I00
sS'group_name'
p33060
Nsa(dp33061
S'description'
p33062
S'The values of the derivative wrt x2 on the lower interpolation grid points.\n'
p33063
sS'cpp_type'
p33064
S'std::vector<double, std::allocator<double> >'
p33065
sS'default'
p33066
g3
sS'name'
p33067
S'yx21'
p33068
sS'required'
p33069
I00
sS'group_name'
p33070
Nsa(dp33071
S'description'
p33072
S'The values of the derivative wrt x2 on the upper interpolation grid points.\n'
p33073
sS'cpp_type'
p33074
S'std::vector<double, std::allocator<double> >'
p33075
sS'default'
p33076
g3
sS'name'
p33077
S'yx2n'
p33078
sS'required'
p33079
I00
sS'group_name'
p33080
NsasS'name'
p33081
S'/Functions/BicubicSplineFunction'
p33082
sa(dp33083
S'description'
p33084
g3
sS'subblocks'
p33085
NsS'parameters'
p33086
(lp33087
(dp33088
S'description'
p33089
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33090
sS'cpp_type'
p33091
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33092
sS'default'
p33093
g3
sS'name'
p33094
S'control_tags'
p33095
sS'required'
p33096
I00
sS'group_name'
p33097
S'Advanced'
p33098
sa(dp33099
S'description'
p33100
S'Set the enabled status of the MooseObject.\n'
p33101
sS'cpp_type'
p33102
S'bool'
p33103
sS'default'
p33104
S'1'
p33105
sS'name'
p33106
S'enable'
p33107
sS'required'
p33108
I00
sS'group_name'
p33109
S'Advanced'
p33110
sa(dp33111
S'description'
p33112
S'The functions to be multiplied together.\n'
p33113
sS'cpp_type'
p33114
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p33115
sS'default'
p33116
g3
sS'name'
p33117
S'functions'
p33118
sS'required'
p33119
I00
sS'group_name'
p33120
Nsa(dp33121
S'description'
p33122
S'Scale factor to be applied to the ordinate values\n'
p33123
sS'cpp_type'
p33124
S'double'
p33125
sS'default'
p33126
S'1'
p33127
sS'name'
p33128
S'scale_factor'
p33129
sS'required'
p33130
I00
sS'group_name'
p33131
Nsa(dp33132
S'description'
p33133
g3
sS'cpp_type'
p33134
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33135
sS'default'
p33136
S'CompositeFunction'
p33137
sS'name'
p33138
S'type'
p33139
sS'required'
p33140
I00
sS'group_name'
p33141
NsasS'name'
p33142
S'/Functions/CompositeFunction'
p33143
sa(dp33144
S'description'
p33145
g3
sS'subblocks'
p33146
NsS'parameters'
p33147
(lp33148
(dp33149
S'description'
p33150
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33151
sS'cpp_type'
p33152
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33153
sS'default'
p33154
g3
sS'name'
p33155
S'control_tags'
p33156
sS'required'
p33157
I00
sS'group_name'
p33158
S'Advanced'
p33159
sa(dp33160
S'description'
p33161
S'Set the enabled status of the MooseObject.\n'
p33162
sS'cpp_type'
p33163
S'bool'
p33164
sS'default'
p33165
S'1'
p33166
sS'name'
p33167
S'enable'
p33168
sS'required'
p33169
I00
sS'group_name'
p33170
S'Advanced'
p33171
sa(dp33172
S'description'
p33173
g3
sS'cpp_type'
p33174
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33175
sS'default'
p33176
S'ConstantFunction'
p33177
sS'name'
p33178
S'type'
p33179
sS'required'
p33180
I00
sS'group_name'
p33181
Nsa(dp33182
S'description'
p33183
S'The constant value\n'
p33184
sS'cpp_type'
p33185
S'double'
p33186
sS'default'
p33187
S'0'
p33188
sS'name'
p33189
S'value'
p33190
sS'required'
p33191
I00
sS'group_name'
p33192
NsasS'name'
p33193
S'/Functions/ConstantFunction'
p33194
sa(dp33195
S'description'
p33196
S'Function with values sampled from a given image stack\n'
p33197
sS'subblocks'
p33198
NsS'parameters'
p33199
(lp33200
(dp33201
S'description'
p33202
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p33203
sS'cpp_type'
p33204
S'unsigned int'
p33205
sS'default'
p33206
g3
sS'name'
p33207
S'component'
p33208
sS'required'
p33209
I00
sS'group_name'
p33210
Nsa(dp33211
S'description'
p33212
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33213
sS'cpp_type'
p33214
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33215
sS'default'
p33216
g3
sS'name'
p33217
S'control_tags'
p33218
sS'required'
p33219
I00
sS'group_name'
p33220
S'Advanced'
p33221
sa(dp33222
S'description'
p33223
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p33224
sS'cpp_type'
p33225
S'libMesh::Point'
p33226
sS'default'
p33227
g3
sS'name'
p33228
S'dimensions'
p33229
sS'required'
p33230
I00
sS'group_name'
p33231
Nsa(dp33232
S'description'
p33233
S'Set the enabled status of the MooseObject.\n'
p33234
sS'cpp_type'
p33235
S'bool'
p33236
sS'default'
p33237
S'1'
p33238
sS'name'
p33239
S'enable'
p33240
sS'required'
p33241
I00
sS'group_name'
p33242
S'Advanced'
p33243
sa(dp33244
S'description'
p33245
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p33246
sS'cpp_type'
p33247
S'FileName'
p33248
sS'default'
p33249
g3
sS'name'
p33250
S'file'
p33251
sS'required'
p33252
I00
sS'group_name'
p33253
Nsa(dp33254
S'description'
p33255
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p33256
sS'cpp_type'
p33257
S'FileNameNoExtension'
p33258
sS'default'
p33259
g3
sS'name'
p33260
S'file_base'
p33261
sS'required'
p33262
I00
sS'group_name'
p33263
Nsa(dp33264
S'description'
p33265
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p33266
sS'cpp_type'
p33267
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p33268
sS'default'
p33269
g3
sS'name'
p33270
S'file_range'
p33271
sS'required'
p33272
I00
sS'group_name'
p33273
Nsa(dp33274
S'description'
p33275
S"Suffix of the file to open, e.g. 'png'\n"
p33276
sS'cpp_type'
p33277
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33278
sS'default'
p33279
g3
sS'name'
p33280
S'file_suffix'
p33281
sS'required'
p33282
I00
sS'group_name'
p33283
Nsa(dp33284
S'description'
p33285
S'Flip the image along the x-axis\n'
p33286
sS'cpp_type'
p33287
S'bool'
p33288
sS'default'
p33289
S'0'
p33290
sS'name'
p33291
S'flip_x'
p33292
sS'required'
p33293
I00
sS'group_name'
p33294
S'Flip'
p33295
sa(dp33296
S'description'
p33297
S'Flip the image along the y-axis\n'
p33298
sS'cpp_type'
p33299
S'bool'
p33300
sS'default'
p33301
S'0'
p33302
sS'name'
p33303
S'flip_y'
p33304
sS'required'
p33305
I00
sS'group_name'
p33306
S'Flip'
p33307
sa(dp33308
S'description'
p33309
S'Flip the image along the z-axis\n'
p33310
sS'cpp_type'
p33311
S'bool'
p33312
sS'default'
p33313
S'0'
p33314
sS'name'
p33315
S'flip_z'
p33316
sS'required'
p33317
I00
sS'group_name'
p33318
S'Flip'
p33319
sa(dp33320
S'description'
p33321
S'The value to set for data less than the threshold value\n'
p33322
sS'cpp_type'
p33323
S'double'
p33324
sS'default'
p33325
S'0'
p33326
sS'name'
p33327
S'lower_value'
p33328
sS'required'
p33329
I00
sS'group_name'
p33330
S'Threshold'
p33331
sa(dp33332
S'description'
p33333
S'Origin of the image (defaults to mesh origin)\n'
p33334
sS'cpp_type'
p33335
S'libMesh::Point'
p33336
sS'default'
p33337
g3
sS'name'
p33338
S'origin'
p33339
sS'required'
p33340
I00
sS'group_name'
p33341
Nsa(dp33342
S'description'
p33343
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p33344
sS'cpp_type'
p33345
S'double'
p33346
sS'default'
p33347
S'1'
p33348
sS'name'
p33349
S'scale'
p33350
sS'required'
p33351
I00
sS'group_name'
p33352
S'Rescale'
p33353
sa(dp33354
S'description'
p33355
S'Value to add to all pixels; occurs prior to scaling\n'
p33356
sS'cpp_type'
p33357
S'double'
p33358
sS'default'
p33359
S'0'
p33360
sS'name'
p33361
S'shift'
p33362
sS'required'
p33363
I00
sS'group_name'
p33364
S'Rescale'
p33365
sa(dp33366
S'description'
p33367
S'The threshold value\n'
p33368
sS'cpp_type'
p33369
S'double'
p33370
sS'default'
p33371
g3
sS'name'
p33372
S'threshold'
p33373
sS'required'
p33374
I00
sS'group_name'
p33375
S'Threshold'
p33376
sa(dp33377
S'description'
p33378
g3
sS'cpp_type'
p33379
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33380
sS'default'
p33381
S'ImageFunction'
p33382
sS'name'
p33383
S'type'
p33384
sS'required'
p33385
I00
sS'group_name'
p33386
Nsa(dp33387
S'description'
p33388
S'The value to set for data greater than the threshold value\n'
p33389
sS'cpp_type'
p33390
S'double'
p33391
sS'default'
p33392
S'1'
p33393
sS'name'
p33394
S'upper_value'
p33395
sS'required'
p33396
I00
sS'group_name'
p33397
S'Threshold'
p33398
sasS'name'
p33399
S'/Functions/ImageFunction'
p33400
sa(dp33401
S'description'
p33402
S'Returns the linear combination of the functions\n'
p33403
sS'subblocks'
p33404
NsS'parameters'
p33405
(lp33406
(dp33407
S'description'
p33408
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33409
sS'cpp_type'
p33410
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33411
sS'default'
p33412
g3
sS'name'
p33413
S'control_tags'
p33414
sS'required'
p33415
I00
sS'group_name'
p33416
S'Advanced'
p33417
sa(dp33418
S'description'
p33419
S'Set the enabled status of the MooseObject.\n'
p33420
sS'cpp_type'
p33421
S'bool'
p33422
sS'default'
p33423
S'1'
p33424
sS'name'
p33425
S'enable'
p33426
sS'required'
p33427
I00
sS'group_name'
p33428
S'Advanced'
p33429
sa(dp33430
S'description'
p33431
S'This function will return Sum_over_i(w_i * functions_i)\n'
p33432
sS'cpp_type'
p33433
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p33434
sS'default'
p33435
g3
sS'name'
p33436
S'functions'
p33437
sS'required'
p33438
I01
sS'group_name'
p33439
Nsa(dp33440
S'description'
p33441
g3
sS'cpp_type'
p33442
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33443
sS'default'
p33444
S'LinearCombinationFunction'
p33445
sS'name'
p33446
S'type'
p33447
sS'required'
p33448
I00
sS'group_name'
p33449
Nsa(dp33450
S'description'
p33451
S'This function will return Sum_over_i(w_i * functions_i)\n'
p33452
sS'cpp_type'
p33453
S'std::vector<double, std::allocator<double> >'
p33454
sS'default'
p33455
g3
sS'name'
p33456
S'w'
p33457
sS'required'
p33458
I01
sS'group_name'
p33459
NsasS'name'
p33460
S'/Functions/LinearCombinationFunction'
p33461
sa(dp33462
S'description'
p33463
g3
sS'subblocks'
p33464
NsS'parameters'
p33465
(lp33466
(dp33467
S'description'
p33468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33469
sS'cpp_type'
p33470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33471
sS'default'
p33472
g3
sS'name'
p33473
S'control_tags'
p33474
sS'required'
p33475
I00
sS'group_name'
p33476
S'Advanced'
p33477
sa(dp33478
S'description'
p33479
S'Set the enabled status of the MooseObject.\n'
p33480
sS'cpp_type'
p33481
S'bool'
p33482
sS'default'
p33483
S'1'
p33484
sS'name'
p33485
S'enable'
p33486
sS'required'
p33487
I00
sS'group_name'
p33488
S'Advanced'
p33489
sa(dp33490
S'description'
p33491
g3
sS'cpp_type'
p33492
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33493
sS'default'
p33494
S'ParsedFunction'
p33495
sS'name'
p33496
S'type'
p33497
sS'required'
p33498
I00
sS'group_name'
p33499
Nsa(dp33500
S'description'
p33501
S'Constant numeric values or postprocessor names for vars.\n'
p33502
sS'cpp_type'
p33503
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33504
sS'default'
p33505
g3
sS'name'
p33506
S'vals'
p33507
sS'required'
p33508
I00
sS'group_name'
p33509
Nsa(dp33510
S'description'
p33511
S'The user defined function.\n'
p33512
sS'cpp_type'
p33513
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33514
sS'default'
p33515
g3
sS'name'
p33516
S'value'
p33517
sS'required'
p33518
I01
sS'group_name'
p33519
Nsa(dp33520
S'description'
p33521
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p33522
sS'cpp_type'
p33523
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33524
sS'default'
p33525
g3
sS'name'
p33526
S'vars'
p33527
sS'required'
p33528
I00
sS'group_name'
p33529
NsasS'name'
p33530
S'/Functions/ParsedFunction'
p33531
sa(dp33532
S'description'
p33533
g3
sS'subblocks'
p33534
NsS'parameters'
p33535
(lp33536
(dp33537
S'description'
p33538
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33539
sS'cpp_type'
p33540
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33541
sS'default'
p33542
g3
sS'name'
p33543
S'control_tags'
p33544
sS'required'
p33545
I00
sS'group_name'
p33546
S'Advanced'
p33547
sa(dp33548
S'description'
p33549
S'Set the enabled status of the MooseObject.\n'
p33550
sS'cpp_type'
p33551
S'bool'
p33552
sS'default'
p33553
S'1'
p33554
sS'name'
p33555
S'enable'
p33556
sS'required'
p33557
I00
sS'group_name'
p33558
S'Advanced'
p33559
sa(dp33560
S'description'
p33561
S'Partial with respect to x.\n'
p33562
sS'cpp_type'
p33563
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33564
sS'default'
p33565
S'0'
p33566
sS'name'
p33567
S'grad_x'
p33568
sS'required'
p33569
I00
sS'group_name'
p33570
Nsa(dp33571
S'description'
p33572
S'Partial with respect to y.\n'
p33573
sS'cpp_type'
p33574
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33575
sS'default'
p33576
S'0'
p33577
sS'name'
p33578
S'grad_y'
p33579
sS'required'
p33580
I00
sS'group_name'
p33581
Nsa(dp33582
S'description'
p33583
S'Partial with respect to z.\n'
p33584
sS'cpp_type'
p33585
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33586
sS'default'
p33587
S'0'
p33588
sS'name'
p33589
S'grad_z'
p33590
sS'required'
p33591
I00
sS'group_name'
p33592
Nsa(dp33593
S'description'
p33594
g3
sS'cpp_type'
p33595
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33596
sS'default'
p33597
S'ParsedGradFunction'
p33598
sS'name'
p33599
S'type'
p33600
sS'required'
p33601
I00
sS'group_name'
p33602
Nsa(dp33603
S'description'
p33604
S'Constant numeric values or postprocessor names for vars.\n'
p33605
sS'cpp_type'
p33606
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33607
sS'default'
p33608
g3
sS'name'
p33609
S'vals'
p33610
sS'required'
p33611
I00
sS'group_name'
p33612
Nsa(dp33613
S'description'
p33614
S'User defined function.\n'
p33615
sS'cpp_type'
p33616
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33617
sS'default'
p33618
S'0'
p33619
sS'name'
p33620
S'value'
p33621
sS'required'
p33622
I00
sS'group_name'
p33623
Nsa(dp33624
S'description'
p33625
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p33626
sS'cpp_type'
p33627
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33628
sS'default'
p33629
g3
sS'name'
p33630
S'vars'
p33631
sS'required'
p33632
I00
sS'group_name'
p33633
NsasS'name'
p33634
S'/Functions/ParsedGradFunction'
p33635
sa(dp33636
S'description'
p33637
g3
sS'subblocks'
p33638
NsS'parameters'
p33639
(lp33640
(dp33641
S'description'
p33642
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33643
sS'cpp_type'
p33644
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33645
sS'default'
p33646
g3
sS'name'
p33647
S'control_tags'
p33648
sS'required'
p33649
I00
sS'group_name'
p33650
S'Advanced'
p33651
sa(dp33652
S'description'
p33653
S'Set the enabled status of the MooseObject.\n'
p33654
sS'cpp_type'
p33655
S'bool'
p33656
sS'default'
p33657
S'1'
p33658
sS'name'
p33659
S'enable'
p33660
sS'required'
p33661
I00
sS'group_name'
p33662
S'Advanced'
p33663
sa(dp33664
S'description'
p33665
g3
sS'cpp_type'
p33666
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33667
sS'default'
p33668
S'ParsedVectorFunction'
p33669
sS'name'
p33670
S'type'
p33671
sS'required'
p33672
I00
sS'group_name'
p33673
Nsa(dp33674
S'description'
p33675
S'Constant numeric values or postprocessor names for vars.\n'
p33676
sS'cpp_type'
p33677
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33678
sS'default'
p33679
g3
sS'name'
p33680
S'vals'
p33681
sS'required'
p33682
I00
sS'group_name'
p33683
Nsa(dp33684
S'description'
p33685
S'x-component of function.\n'
p33686
sS'cpp_type'
p33687
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33688
sS'default'
p33689
S'0'
p33690
sS'name'
p33691
S'value_x'
p33692
sS'required'
p33693
I00
sS'group_name'
p33694
Nsa(dp33695
S'description'
p33696
S'y-component of function.\n'
p33697
sS'cpp_type'
p33698
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33699
sS'default'
p33700
S'0'
p33701
sS'name'
p33702
S'value_y'
p33703
sS'required'
p33704
I00
sS'group_name'
p33705
Nsa(dp33706
S'description'
p33707
S'z-component of function.\n'
p33708
sS'cpp_type'
p33709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33710
sS'default'
p33711
S'0'
p33712
sS'name'
p33713
S'value_z'
p33714
sS'required'
p33715
I00
sS'group_name'
p33716
Nsa(dp33717
S'description'
p33718
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p33719
sS'cpp_type'
p33720
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33721
sS'default'
p33722
g3
sS'name'
p33723
S'vars'
p33724
sS'required'
p33725
I00
sS'group_name'
p33726
NsasS'name'
p33727
S'/Functions/ParsedVectorFunction'
p33728
sa(dp33729
S'description'
p33730
g3
sS'subblocks'
p33731
NsS'parameters'
p33732
(lp33733
(dp33734
S'description'
p33735
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p33736
sS'cpp_type'
p33737
S'int'
p33738
sS'default'
p33739
S'-1'
p33740
sS'name'
p33741
S'axis'
p33742
sS'required'
p33743
I00
sS'group_name'
p33744
Nsa(dp33745
S'description'
p33746
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33747
sS'cpp_type'
p33748
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33749
sS'default'
p33750
g3
sS'name'
p33751
S'control_tags'
p33752
sS'required'
p33753
I00
sS'group_name'
p33754
S'Advanced'
p33755
sa(dp33756
S'description'
p33757
S'File holding csv data for use with PiecewiseBilinear\n'
p33758
sS'cpp_type'
p33759
S'FileName'
p33760
sS'default'
p33761
g3
sS'name'
p33762
S'data_file'
p33763
sS'required'
p33764
I00
sS'group_name'
p33765
Nsa(dp33766
S'description'
p33767
S'Set the enabled status of the MooseObject.\n'
p33768
sS'cpp_type'
p33769
S'bool'
p33770
sS'default'
p33771
S'1'
p33772
sS'name'
p33773
S'enable'
p33774
sS'required'
p33775
I00
sS'group_name'
p33776
S'Advanced'
p33777
sa(dp33778
S'description'
p33779
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p33780
sS'cpp_type'
p33781
S'bool'
p33782
sS'default'
p33783
S'0'
p33784
sS'name'
p33785
S'radial'
p33786
sS'required'
p33787
I00
sS'group_name'
p33788
Nsa(dp33789
S'description'
p33790
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p33791
sS'cpp_type'
p33792
S'double'
p33793
sS'default'
p33794
S'1'
p33795
sS'name'
p33796
S'scale_factor'
p33797
sS'required'
p33798
I00
sS'group_name'
p33799
Nsa(dp33800
S'description'
p33801
g3
sS'cpp_type'
p33802
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33803
sS'default'
p33804
S'PiecewiseBilinear'
p33805
sS'name'
p33806
S'type'
p33807
sS'required'
p33808
I00
sS'group_name'
p33809
Nsa(dp33810
S'description'
p33811
S'The x abscissa values\n'
p33812
sS'cpp_type'
p33813
S'std::vector<double, std::allocator<double> >'
p33814
sS'default'
p33815
g3
sS'name'
p33816
S'x'
p33817
sS'required'
p33818
I00
sS'group_name'
p33819
Nsa(dp33820
S'description'
p33821
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p33822
sS'cpp_type'
p33823
S'int'
p33824
sS'default'
p33825
S'-1'
p33826
sS'name'
p33827
S'xaxis'
p33828
sS'required'
p33829
I00
sS'group_name'
p33830
Nsa(dp33831
S'description'
p33832
S'The y abscissa values\n'
p33833
sS'cpp_type'
p33834
S'std::vector<double, std::allocator<double> >'
p33835
sS'default'
p33836
g3
sS'name'
p33837
S'y'
p33838
sS'required'
p33839
I00
sS'group_name'
p33840
Nsa(dp33841
S'description'
p33842
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p33843
sS'cpp_type'
p33844
S'int'
p33845
sS'default'
p33846
S'-1'
p33847
sS'name'
p33848
S'yaxis'
p33849
sS'required'
p33850
I00
sS'group_name'
p33851
Nsa(dp33852
S'description'
p33853
S'The ordinate values\n'
p33854
sS'cpp_type'
p33855
S'std::vector<double, std::allocator<double> >'
p33856
sS'default'
p33857
g3
sS'name'
p33858
S'z'
p33859
sS'required'
p33860
I00
sS'group_name'
p33861
NsasS'name'
p33862
S'/Functions/PiecewiseBilinear'
p33863
sa(dp33864
S'description'
p33865
g3
sS'subblocks'
p33866
NsS'parameters'
p33867
(lp33868
(dp33869
S'description'
p33870
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p33871
sS'cpp_type'
p33872
S'int'
p33873
sS'default'
p33874
g3
sS'name'
p33875
S'axis'
p33876
sS'required'
p33877
I00
sS'group_name'
p33878
Nsa(dp33879
S'description'
p33880
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33881
sS'cpp_type'
p33882
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33883
sS'default'
p33884
g3
sS'name'
p33885
S'control_tags'
p33886
sS'required'
p33887
I00
sS'group_name'
p33888
S'Advanced'
p33889
sa(dp33890
S'description'
p33891
S'File holding csv data for use with Piecewise\n'
p33892
sS'cpp_type'
p33893
S'FileName'
p33894
sS'default'
p33895
g3
sS'name'
p33896
S'data_file'
p33897
sS'required'
p33898
I00
sS'group_name'
p33899
Nsa(dp33900
S'name'
p33901
S'direction'
p33902
sS'cpp_type'
p33903
S'MooseEnum'
p33904
sS'default'
p33905
S'left'
p33906
sS'description'
p33907
S'Direction to look to find value: left right\n'
p33908
sS'required'
p33909
I00
sS'options'
p33910
S'left right'
p33911
sS'group_name'
p33912
Nsa(dp33913
S'description'
p33914
S'Set the enabled status of the MooseObject.\n'
p33915
sS'cpp_type'
p33916
S'bool'
p33917
sS'default'
p33918
S'1'
p33919
sS'name'
p33920
S'enable'
p33921
sS'required'
p33922
I00
sS'group_name'
p33923
S'Advanced'
p33924
sa(dp33925
S'description'
p33926
S'Format of csv data file that is in either in columns or rows\n'
p33927
sS'cpp_type'
p33928
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33929
sS'default'
p33930
S'rows'
p33931
sS'name'
p33932
S'format'
p33933
sS'required'
p33934
I00
sS'group_name'
p33935
Nsa(dp33936
S'description'
p33937
S'Scale factor to be applied to the ordinate values\n'
p33938
sS'cpp_type'
p33939
S'double'
p33940
sS'default'
p33941
S'1'
p33942
sS'name'
p33943
S'scale_factor'
p33944
sS'required'
p33945
I00
sS'group_name'
p33946
Nsa(dp33947
S'description'
p33948
g3
sS'cpp_type'
p33949
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33950
sS'default'
p33951
S'PiecewiseConstant'
p33952
sS'name'
p33953
S'type'
p33954
sS'required'
p33955
I00
sS'group_name'
p33956
Nsa(dp33957
S'description'
p33958
S'The abscissa values\n'
p33959
sS'cpp_type'
p33960
S'std::vector<double, std::allocator<double> >'
p33961
sS'default'
p33962
g3
sS'name'
p33963
S'x'
p33964
sS'required'
p33965
I00
sS'group_name'
p33966
Nsa(dp33967
S'description'
p33968
S'The abscissa index in the data file\n'
p33969
sS'cpp_type'
p33970
S'unsigned int'
p33971
sS'default'
p33972
S'0'
p33973
sS'name'
p33974
S'x_index_in_file'
p33975
sS'required'
p33976
I00
sS'group_name'
p33977
Nsa(dp33978
S'description'
p33979
S'All function data, supplied in abscissa, ordinate pairs\n'
p33980
sS'cpp_type'
p33981
S'std::vector<double, std::allocator<double> >'
p33982
sS'default'
p33983
g3
sS'name'
p33984
S'xy_data'
p33985
sS'required'
p33986
I00
sS'group_name'
p33987
Nsa(dp33988
S'description'
p33989
S'If the data file only contains abscissa and ordinate data\n'
p33990
sS'cpp_type'
p33991
S'bool'
p33992
sS'default'
p33993
S'1'
p33994
sS'name'
p33995
S'xy_in_file_only'
p33996
sS'required'
p33997
I00
sS'group_name'
p33998
Nsa(dp33999
S'description'
p34000
S'The ordinate values\n'
p34001
sS'cpp_type'
p34002
S'std::vector<double, std::allocator<double> >'
p34003
sS'default'
p34004
g3
sS'name'
p34005
S'y'
p34006
sS'required'
p34007
I00
sS'group_name'
p34008
Nsa(dp34009
S'description'
p34010
S'The ordinate index in the data file\n'
p34011
sS'cpp_type'
p34012
S'unsigned int'
p34013
sS'default'
p34014
S'1'
p34015
sS'name'
p34016
S'y_index_in_file'
p34017
sS'required'
p34018
I00
sS'group_name'
p34019
NsasS'name'
p34020
S'/Functions/PiecewiseConstant'
p34021
sa(dp34022
S'description'
p34023
g3
sS'subblocks'
p34024
NsS'parameters'
p34025
(lp34026
(dp34027
S'description'
p34028
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p34029
sS'cpp_type'
p34030
S'int'
p34031
sS'default'
p34032
g3
sS'name'
p34033
S'axis'
p34034
sS'required'
p34035
I00
sS'group_name'
p34036
Nsa(dp34037
S'description'
p34038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34039
sS'cpp_type'
p34040
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34041
sS'default'
p34042
g3
sS'name'
p34043
S'control_tags'
p34044
sS'required'
p34045
I00
sS'group_name'
p34046
S'Advanced'
p34047
sa(dp34048
S'description'
p34049
S'File holding csv data for use with Piecewise\n'
p34050
sS'cpp_type'
p34051
S'FileName'
p34052
sS'default'
p34053
g3
sS'name'
p34054
S'data_file'
p34055
sS'required'
p34056
I00
sS'group_name'
p34057
Nsa(dp34058
S'description'
p34059
S'Set the enabled status of the MooseObject.\n'
p34060
sS'cpp_type'
p34061
S'bool'
p34062
sS'default'
p34063
S'1'
p34064
sS'name'
p34065
S'enable'
p34066
sS'required'
p34067
I00
sS'group_name'
p34068
S'Advanced'
p34069
sa(dp34070
S'description'
p34071
S'Format of csv data file that is in either in columns or rows\n'
p34072
sS'cpp_type'
p34073
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34074
sS'default'
p34075
S'rows'
p34076
sS'name'
p34077
S'format'
p34078
sS'required'
p34079
I00
sS'group_name'
p34080
Nsa(dp34081
S'description'
p34082
S'Scale factor to be applied to the ordinate values\n'
p34083
sS'cpp_type'
p34084
S'double'
p34085
sS'default'
p34086
S'1'
p34087
sS'name'
p34088
S'scale_factor'
p34089
sS'required'
p34090
I00
sS'group_name'
p34091
Nsa(dp34092
S'description'
p34093
g3
sS'cpp_type'
p34094
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34095
sS'default'
p34096
S'PiecewiseLinear'
p34097
sS'name'
p34098
S'type'
p34099
sS'required'
p34100
I00
sS'group_name'
p34101
Nsa(dp34102
S'description'
p34103
S'The abscissa values\n'
p34104
sS'cpp_type'
p34105
S'std::vector<double, std::allocator<double> >'
p34106
sS'default'
p34107
g3
sS'name'
p34108
S'x'
p34109
sS'required'
p34110
I00
sS'group_name'
p34111
Nsa(dp34112
S'description'
p34113
S'The abscissa index in the data file\n'
p34114
sS'cpp_type'
p34115
S'unsigned int'
p34116
sS'default'
p34117
S'0'
p34118
sS'name'
p34119
S'x_index_in_file'
p34120
sS'required'
p34121
I00
sS'group_name'
p34122
Nsa(dp34123
S'description'
p34124
S'All function data, supplied in abscissa, ordinate pairs\n'
p34125
sS'cpp_type'
p34126
S'std::vector<double, std::allocator<double> >'
p34127
sS'default'
p34128
g3
sS'name'
p34129
S'xy_data'
p34130
sS'required'
p34131
I00
sS'group_name'
p34132
Nsa(dp34133
S'description'
p34134
S'If the data file only contains abscissa and ordinate data\n'
p34135
sS'cpp_type'
p34136
S'bool'
p34137
sS'default'
p34138
S'1'
p34139
sS'name'
p34140
S'xy_in_file_only'
p34141
sS'required'
p34142
I00
sS'group_name'
p34143
Nsa(dp34144
S'description'
p34145
S'The ordinate values\n'
p34146
sS'cpp_type'
p34147
S'std::vector<double, std::allocator<double> >'
p34148
sS'default'
p34149
g3
sS'name'
p34150
S'y'
p34151
sS'required'
p34152
I00
sS'group_name'
p34153
Nsa(dp34154
S'description'
p34155
S'The ordinate index in the data file\n'
p34156
sS'cpp_type'
p34157
S'unsigned int'
p34158
sS'default'
p34159
S'1'
p34160
sS'name'
p34161
S'y_index_in_file'
p34162
sS'required'
p34163
I00
sS'group_name'
p34164
NsasS'name'
p34165
S'/Functions/PiecewiseLinear'
p34166
sa(dp34167
S'description'
p34168
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p34169
sS'subblocks'
p34170
NsS'parameters'
p34171
(lp34172
(dp34173
S'description'
p34174
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34175
sS'cpp_type'
p34176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34177
sS'default'
p34178
g3
sS'name'
p34179
S'control_tags'
p34180
sS'required'
p34181
I00
sS'group_name'
p34182
S'Advanced'
p34183
sa(dp34184
S'description'
p34185
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p34186
sS'cpp_type'
p34187
S'FileName'
p34188
sS'default'
p34189
g3
sS'name'
p34190
S'data_file'
p34191
sS'required'
p34192
I00
sS'group_name'
p34193
Nsa(dp34194
S'description'
p34195
S'Set the enabled status of the MooseObject.\n'
p34196
sS'cpp_type'
p34197
S'bool'
p34198
sS'default'
p34199
S'1'
p34200
sS'name'
p34201
S'enable'
p34202
sS'required'
p34203
I00
sS'group_name'
p34204
S'Advanced'
p34205
sa(dp34206
S'description'
p34207
g3
sS'cpp_type'
p34208
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34209
sS'default'
p34210
S'PiecewiseMultilinear'
p34211
sS'name'
p34212
S'type'
p34213
sS'required'
p34214
I00
sS'group_name'
p34215
NsasS'name'
p34216
S'/Functions/PiecewiseMultilinear'
p34217
sa(dp34218
S'description'
p34219
g3
sS'subblocks'
p34220
NsS'parameters'
p34221
(lp34222
(dp34223
S'description'
p34224
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p34225
sS'cpp_type'
p34226
S'double'
p34227
sS'default'
p34228
S'0'
p34229
sS'name'
p34230
S'add_factor'
p34231
sS'required'
p34232
I00
sS'group_name'
p34233
Nsa(dp34234
S'description'
p34235
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34236
sS'cpp_type'
p34237
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34238
sS'default'
p34239
g3
sS'name'
p34240
S'control_tags'
p34241
sS'required'
p34242
I00
sS'group_name'
p34243
S'Advanced'
p34244
sa(dp34245
S'description'
p34246
S'Set the enabled status of the MooseObject.\n'
p34247
sS'cpp_type'
p34248
S'bool'
p34249
sS'default'
p34250
S'1'
p34251
sS'name'
p34252
S'enable'
p34253
sS'required'
p34254
I00
sS'group_name'
p34255
S'Advanced'
p34256
sa(dp34257
S'description'
p34258
S'The name of the variable in the file that is to be extracted\n'
p34259
sS'cpp_type'
p34260
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34261
sS'default'
p34262
g3
sS'name'
p34263
S'from_variable'
p34264
sS'required'
p34265
I00
sS'group_name'
p34266
Nsa(dp34267
S'description'
p34268
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p34269
sS'cpp_type'
p34270
S'double'
p34271
sS'default'
p34272
S'1'
p34273
sS'name'
p34274
S'scale_factor'
p34275
sS'required'
p34276
I00
sS'group_name'
p34277
Nsa(dp34278
S'description'
p34279
S'The SolutionUserObject to extract data from.\n'
p34280
sS'cpp_type'
p34281
S'UserObjectName'
p34282
sS'default'
p34283
g3
sS'name'
p34284
S'solution'
p34285
sS'required'
p34286
I01
sS'group_name'
p34287
Nsa(dp34288
S'description'
p34289
g3
sS'cpp_type'
p34290
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34291
sS'default'
p34292
S'SolutionFunction'
p34293
sS'name'
p34294
S'type'
p34295
sS'required'
p34296
I00
sS'group_name'
p34297
NsasS'name'
p34298
S'/Functions/SolutionFunction'
p34299
sa(dp34300
S'description'
p34301
g3
sS'subblocks'
p34302
NsS'parameters'
p34303
(lp34304
(dp34305
S'description'
p34306
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34307
sS'cpp_type'
p34308
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34309
sS'default'
p34310
g3
sS'name'
p34311
S'control_tags'
p34312
sS'required'
p34313
I00
sS'group_name'
p34314
S'Advanced'
p34315
sa(dp34316
S'description'
p34317
S'Set the enabled status of the MooseObject.\n'
p34318
sS'cpp_type'
p34319
S'bool'
p34320
sS'default'
p34321
S'1'
p34322
sS'name'
p34323
S'enable'
p34324
sS'required'
p34325
I00
sS'group_name'
p34326
S'Advanced'
p34327
sa(dp34328
S'description'
p34329
g3
sS'cpp_type'
p34330
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34331
sS'default'
p34332
S'SplineFunction'
p34333
sS'name'
p34334
S'type'
p34335
sS'required'
p34336
I00
sS'group_name'
p34337
Nsa(dp34338
S'description'
p34339
S'The abscissa values\n'
p34340
sS'cpp_type'
p34341
S'std::vector<double, std::allocator<double> >'
p34342
sS'default'
p34343
g3
sS'name'
p34344
S'x'
p34345
sS'required'
p34346
I01
sS'group_name'
p34347
Nsa(dp34348
S'description'
p34349
S'The ordinate values\n'
p34350
sS'cpp_type'
p34351
S'std::vector<double, std::allocator<double> >'
p34352
sS'default'
p34353
g3
sS'name'
p34354
S'y'
p34355
sS'required'
p34356
I01
sS'group_name'
p34357
Nsa(dp34358
S'description'
p34359
S'The value of the first derivative of the interpolating function at point 1\n'
p34360
sS'cpp_type'
p34361
S'double'
p34362
sS'default'
p34363
S'1e+30'
p34364
sS'name'
p34365
S'yp1'
p34366
sS'required'
p34367
I00
sS'group_name'
p34368
Nsa(dp34369
S'description'
p34370
S'The value of the first derivative of the interpolating function at point n\n'
p34371
sS'cpp_type'
p34372
S'double'
p34373
sS'default'
p34374
S'1e+30'
p34375
sS'name'
p34376
S'ypn'
p34377
sS'required'
p34378
I00
sS'group_name'
p34379
NsasS'name'
p34380
S'/Functions/SplineFunction'
p34381
sa(dp34382
S'description'
p34383
g3
sS'subblocks'
p34384
NsS'parameters'
p34385
(lp34386
(dp34387
S'description'
p34388
S'VectorPostprocessor column tabulating the abscissa of the sampled function\n'
p34389
sS'cpp_type'
p34390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34391
sS'default'
p34392
g3
sS'name'
p34393
S'argument_column'
p34394
sS'required'
p34395
I01
sS'group_name'
p34396
Nsa(dp34397
S'description'
p34398
S'Component of the function evaluation point used to sample the VectorPostprocessor\n'
p34399
sS'cpp_type'
p34400
S'unsigned int'
p34401
sS'default'
p34402
g3
sS'name'
p34403
S'component'
p34404
sS'required'
p34405
I01
sS'group_name'
p34406
Nsa(dp34407
S'description'
p34408
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34409
sS'cpp_type'
p34410
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34411
sS'default'
p34412
g3
sS'name'
p34413
S'control_tags'
p34414
sS'required'
p34415
I00
sS'group_name'
p34416
S'Advanced'
p34417
sa(dp34418
S'description'
p34419
S'Set the enabled status of the MooseObject.\n'
p34420
sS'cpp_type'
p34421
S'bool'
p34422
sS'default'
p34423
S'1'
p34424
sS'name'
p34425
S'enable'
p34426
sS'required'
p34427
I00
sS'group_name'
p34428
S'Advanced'
p34429
sa(dp34430
S'description'
p34431
g3
sS'cpp_type'
p34432
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34433
sS'default'
p34434
S'VectorPostprocessorFunction'
p34435
sS'name'
p34436
S'type'
p34437
sS'required'
p34438
I00
sS'group_name'
p34439
Nsa(dp34440
S'description'
p34441
S'VectorPostprocessor column tabulating the ordinate (function values) of the sampled function\n'
p34442
sS'cpp_type'
p34443
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34444
sS'default'
p34445
g3
sS'name'
p34446
S'value_column'
p34447
sS'required'
p34448
I01
sS'group_name'
p34449
Nsa(dp34450
S'description'
p34451
S'The name of the PointValueSampler that you want to use\n'
p34452
sS'cpp_type'
p34453
S'VectorPostprocessorName'
p34454
sS'default'
p34455
g3
sS'name'
p34456
S'vectorpostprocessor_name'
p34457
sS'required'
p34458
I01
sS'group_name'
p34459
NsasS'name'
p34460
S'/Functions/VectorPostprocessorFunction'
p34461
sasS'parameters'
p34462
NsS'name'
p34463
S'/Functions'
p34464
sa(dp34465
S'description'
p34466
g3
sS'subblocks'
p34467
NsS'parameters'
p34468
NsS'name'
p34469
S'/GlobalParams'
p34470
sa(dp34471
S'description'
p34472
g3
sS'subblocks'
p34473
(lp34474
(dp34475
S'description'
p34476
g3
sS'subblocks'
p34477
NsS'parameters'
p34478
(lp34479
(dp34480
S'description'
p34481
S'A string representing the Moose Object that will be built by this Action\n'
p34482
sS'cpp_type'
p34483
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34484
sS'default'
p34485
g3
sS'name'
p34486
S'type'
p34487
sS'required'
p34488
I01
sS'group_name'
p34489
NsasS'name'
p34490
S'/ICs/*'
p34491
sa(dp34492
S'description'
p34493
S'Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n'
p34494
sS'subblocks'
p34495
NsS'parameters'
p34496
(lp34497
(dp34498
S'description'
p34499
S'Semiaxis a for each superellipsoid\n'
p34500
sS'cpp_type'
p34501
S'std::vector<double, std::allocator<double> >'
p34502
sS'default'
p34503
g3
sS'name'
p34504
S'as'
p34505
sS'required'
p34506
I01
sS'group_name'
p34507
Nsa(dp34508
S'description'
p34509
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34510
sS'cpp_type'
p34511
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34512
sS'default'
p34513
g3
sS'name'
p34514
S'block'
p34515
sS'required'
p34516
I00
sS'group_name'
p34517
Nsa(dp34518
S'description'
p34519
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34520
sS'cpp_type'
p34521
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34522
sS'default'
p34523
g3
sS'name'
p34524
S'boundary'
p34525
sS'required'
p34526
I00
sS'group_name'
p34527
Nsa(dp34528
S'description'
p34529
S'Semiaxis b for each superellipsoid\n'
p34530
sS'cpp_type'
p34531
S'std::vector<double, std::allocator<double> >'
p34532
sS'default'
p34533
g3
sS'name'
p34534
S'bs'
p34535
sS'required'
p34536
I01
sS'group_name'
p34537
Nsa(dp34538
S'description'
p34539
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34540
sS'cpp_type'
p34541
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34542
sS'default'
p34543
g3
sS'name'
p34544
S'control_tags'
p34545
sS'required'
p34546
I00
sS'group_name'
p34547
S'Advanced'
p34548
sa(dp34549
S'description'
p34550
S'Semiaxis c for each superellipsoid\n'
p34551
sS'cpp_type'
p34552
S'std::vector<double, std::allocator<double> >'
p34553
sS'default'
p34554
g3
sS'name'
p34555
S'cs'
p34556
sS'required'
p34557
I01
sS'group_name'
p34558
Nsa(dp34559
S'description'
p34560
S'Set the enabled status of the MooseObject.\n'
p34561
sS'cpp_type'
p34562
S'bool'
p34563
sS'default'
p34564
S'1'
p34565
sS'name'
p34566
S'enable'
p34567
sS'required'
p34568
I00
sS'group_name'
p34569
S'Advanced'
p34570
sa(dp34571
S'description'
p34572
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p34573
sS'cpp_type'
p34574
S'bool'
p34575
sS'default'
p34576
S'0'
p34577
sS'name'
p34578
S'ignore_uo_dependency'
p34579
sS'required'
p34580
I00
sS'group_name'
p34581
S'Advanced'
p34582
sa(dp34583
S'description'
p34584
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p34585
sS'cpp_type'
p34586
S'double'
p34587
sS'default'
p34588
S'0'
p34589
sS'name'
p34590
S'int_width'
p34591
sS'required'
p34592
I00
sS'group_name'
p34593
Nsa(dp34594
S'description'
p34595
S'The variable value inside the superellipsoid\n'
p34596
sS'cpp_type'
p34597
S'double'
p34598
sS'default'
p34599
g3
sS'name'
p34600
S'invalue'
p34601
sS'required'
p34602
I01
sS'group_name'
p34603
Nsa(dp34604
S'description'
p34605
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p34606
sS'cpp_type'
p34607
S'double'
p34608
sS'default'
p34609
g3
sS'name'
p34610
S'large_spac'
p34611
sS'required'
p34612
I01
sS'group_name'
p34613
Nsa(dp34614
S'description'
p34615
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p34616
sS'cpp_type'
p34617
S'double'
p34618
sS'default'
p34619
g3
sS'name'
p34620
S'nestedvalue'
p34621
sS'required'
p34622
I00
sS'group_name'
p34623
Nsa(dp34624
S'description'
p34625
S'The number of random (small) particles to place\n'
p34626
sS'cpp_type'
p34627
S'unsigned int'
p34628
sS'default'
p34629
g3
sS'name'
p34630
S'npart'
p34631
sS'required'
p34632
I01
sS'group_name'
p34633
Nsa(dp34634
S'description'
p34635
S'Exponent n for each superellipsoid\n'
p34636
sS'cpp_type'
p34637
S'std::vector<double, std::allocator<double> >'
p34638
sS'default'
p34639
g3
sS'name'
p34640
S'ns'
p34641
sS'required'
p34642
I01
sS'group_name'
p34643
Nsa(dp34644
S'description'
p34645
S'The number of tries to place the random particles\n'
p34646
sS'cpp_type'
p34647
S'unsigned int'
p34648
sS'default'
p34649
S'1000'
p34650
sS'name'
p34651
S'numtries'
p34652
sS'required'
p34653
I00
sS'group_name'
p34654
Nsa(dp34655
S'description'
p34656
S'The variable value outside the superellipsoid\n'
p34657
sS'cpp_type'
p34658
S'double'
p34659
sS'default'
p34660
g3
sS'name'
p34661
S'outvalue'
p34662
sS'required'
p34663
I01
sS'group_name'
p34664
Nsa(dp34665
S'description'
p34666
S'Seed value for the random number generator\n'
p34667
sS'cpp_type'
p34668
S'unsigned int'
p34669
sS'default'
p34670
S'12345'
p34671
sS'name'
p34672
S'rand_seed'
p34673
sS'required'
p34674
I00
sS'group_name'
p34675
Nsa(dp34676
S'description'
p34677
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p34678
sS'cpp_type'
p34679
S'double'
p34680
sS'default'
p34681
S'0'
p34682
sS'name'
p34683
S'size_variation'
p34684
sS'required'
p34685
I00
sS'group_name'
p34686
Nsa(dp34687
S'name'
p34688
S'size_variation_type'
p34689
sS'cpp_type'
p34690
S'MooseEnum'
p34691
sS'default'
p34692
S'none'
p34693
sS'description'
p34694
S'Type of distribution that random semiaxes will follow\n'
p34695
sS'required'
p34696
I00
sS'options'
p34697
S'uniform normal none'
p34698
sS'group_name'
p34699
Nsa(dp34700
S'description'
p34701
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p34702
sS'cpp_type'
p34703
S'double'
p34704
sS'default'
p34705
g3
sS'name'
p34706
S'small_a'
p34707
sS'required'
p34708
I01
sS'group_name'
p34709
Nsa(dp34710
S'description'
p34711
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p34712
sS'cpp_type'
p34713
S'double'
p34714
sS'default'
p34715
g3
sS'name'
p34716
S'small_b'
p34717
sS'required'
p34718
I01
sS'group_name'
p34719
Nsa(dp34720
S'description'
p34721
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p34722
sS'cpp_type'
p34723
S'double'
p34724
sS'default'
p34725
g3
sS'name'
p34726
S'small_c'
p34727
sS'required'
p34728
I01
sS'group_name'
p34729
Nsa(dp34730
S'description'
p34731
S'Exponent n for the randomly placed (small) superellipsoids\n'
p34732
sS'cpp_type'
p34733
S'double'
p34734
sS'default'
p34735
g3
sS'name'
p34736
S'small_n'
p34737
sS'required'
p34738
I01
sS'group_name'
p34739
Nsa(dp34740
S'description'
p34741
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p34742
sS'cpp_type'
p34743
S'double'
p34744
sS'default'
p34745
g3
sS'name'
p34746
S'small_spac'
p34747
sS'required'
p34748
I01
sS'group_name'
p34749
Nsa(dp34750
S'description'
p34751
g3
sS'cpp_type'
p34752
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34753
sS'default'
p34754
S'BimodalInverseSuperellipsoidsIC'
p34755
sS'name'
p34756
S'type'
p34757
sS'required'
p34758
I00
sS'group_name'
p34759
Nsa(dp34760
S'description'
p34761
S'The variable this initial condition is supposed to provide values for.\n'
p34762
sS'cpp_type'
p34763
S'VariableName'
p34764
sS'default'
p34765
g3
sS'name'
p34766
S'variable'
p34767
sS'required'
p34768
I01
sS'group_name'
p34769
Nsa(dp34770
S'description'
p34771
S'The x-coordinate for each superellipsoid center\n'
p34772
sS'cpp_type'
p34773
S'std::vector<double, std::allocator<double> >'
p34774
sS'default'
p34775
g3
sS'name'
p34776
S'x_positions'
p34777
sS'required'
p34778
I01
sS'group_name'
p34779
Nsa(dp34780
S'description'
p34781
S'The y-coordinate for each superellipsoid center\n'
p34782
sS'cpp_type'
p34783
S'std::vector<double, std::allocator<double> >'
p34784
sS'default'
p34785
g3
sS'name'
p34786
S'y_positions'
p34787
sS'required'
p34788
I01
sS'group_name'
p34789
Nsa(dp34790
S'description'
p34791
S'The z-coordinate for each superellipsoid center\n'
p34792
sS'cpp_type'
p34793
S'std::vector<double, std::allocator<double> >'
p34794
sS'default'
p34795
g3
sS'name'
p34796
S'z_positions'
p34797
sS'required'
p34798
I01
sS'group_name'
p34799
Nsa(dp34800
S'description'
p34801
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p34802
sS'cpp_type'
p34803
S'bool'
p34804
sS'default'
p34805
S'0'
p34806
sS'name'
p34807
S'zero_gradient'
p34808
sS'required'
p34809
I00
sS'group_name'
p34810
NsasS'name'
p34811
S'/ICs/BimodalInverseSuperellipsoidsIC'
p34812
sa(dp34813
S'description'
p34814
S'Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n'
p34815
sS'subblocks'
p34816
NsS'parameters'
p34817
(lp34818
(dp34819
S'description'
p34820
S'Semiaxis a for each superellipsoid\n'
p34821
sS'cpp_type'
p34822
S'std::vector<double, std::allocator<double> >'
p34823
sS'default'
p34824
g3
sS'name'
p34825
S'as'
p34826
sS'required'
p34827
I01
sS'group_name'
p34828
Nsa(dp34829
S'description'
p34830
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34831
sS'cpp_type'
p34832
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34833
sS'default'
p34834
g3
sS'name'
p34835
S'block'
p34836
sS'required'
p34837
I00
sS'group_name'
p34838
Nsa(dp34839
S'description'
p34840
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34841
sS'cpp_type'
p34842
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34843
sS'default'
p34844
g3
sS'name'
p34845
S'boundary'
p34846
sS'required'
p34847
I00
sS'group_name'
p34848
Nsa(dp34849
S'description'
p34850
S'Semiaxis b for each superellipsoid\n'
p34851
sS'cpp_type'
p34852
S'std::vector<double, std::allocator<double> >'
p34853
sS'default'
p34854
g3
sS'name'
p34855
S'bs'
p34856
sS'required'
p34857
I01
sS'group_name'
p34858
Nsa(dp34859
S'description'
p34860
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34861
sS'cpp_type'
p34862
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34863
sS'default'
p34864
g3
sS'name'
p34865
S'control_tags'
p34866
sS'required'
p34867
I00
sS'group_name'
p34868
S'Advanced'
p34869
sa(dp34870
S'description'
p34871
S'Semiaxis c for each superellipsoid\n'
p34872
sS'cpp_type'
p34873
S'std::vector<double, std::allocator<double> >'
p34874
sS'default'
p34875
g3
sS'name'
p34876
S'cs'
p34877
sS'required'
p34878
I01
sS'group_name'
p34879
Nsa(dp34880
S'description'
p34881
S'Set the enabled status of the MooseObject.\n'
p34882
sS'cpp_type'
p34883
S'bool'
p34884
sS'default'
p34885
S'1'
p34886
sS'name'
p34887
S'enable'
p34888
sS'required'
p34889
I00
sS'group_name'
p34890
S'Advanced'
p34891
sa(dp34892
S'description'
p34893
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p34894
sS'cpp_type'
p34895
S'bool'
p34896
sS'default'
p34897
S'0'
p34898
sS'name'
p34899
S'ignore_uo_dependency'
p34900
sS'required'
p34901
I00
sS'group_name'
p34902
S'Advanced'
p34903
sa(dp34904
S'description'
p34905
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p34906
sS'cpp_type'
p34907
S'double'
p34908
sS'default'
p34909
S'0'
p34910
sS'name'
p34911
S'int_width'
p34912
sS'required'
p34913
I00
sS'group_name'
p34914
Nsa(dp34915
S'description'
p34916
S'The variable value inside the superellipsoid\n'
p34917
sS'cpp_type'
p34918
S'double'
p34919
sS'default'
p34920
g3
sS'name'
p34921
S'invalue'
p34922
sS'required'
p34923
I01
sS'group_name'
p34924
Nsa(dp34925
S'description'
p34926
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p34927
sS'cpp_type'
p34928
S'double'
p34929
sS'default'
p34930
g3
sS'name'
p34931
S'large_spac'
p34932
sS'required'
p34933
I01
sS'group_name'
p34934
Nsa(dp34935
S'description'
p34936
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p34937
sS'cpp_type'
p34938
S'double'
p34939
sS'default'
p34940
g3
sS'name'
p34941
S'nestedvalue'
p34942
sS'required'
p34943
I00
sS'group_name'
p34944
Nsa(dp34945
S'description'
p34946
S'The number of random (small) particles to place\n'
p34947
sS'cpp_type'
p34948
S'unsigned int'
p34949
sS'default'
p34950
g3
sS'name'
p34951
S'npart'
p34952
sS'required'
p34953
I01
sS'group_name'
p34954
Nsa(dp34955
S'description'
p34956
S'Exponent n for each superellipsoid\n'
p34957
sS'cpp_type'
p34958
S'std::vector<double, std::allocator<double> >'
p34959
sS'default'
p34960
g3
sS'name'
p34961
S'ns'
p34962
sS'required'
p34963
I01
sS'group_name'
p34964
Nsa(dp34965
S'description'
p34966
S'The number of tries to place the random particles\n'
p34967
sS'cpp_type'
p34968
S'unsigned int'
p34969
sS'default'
p34970
S'1000'
p34971
sS'name'
p34972
S'numtries'
p34973
sS'required'
p34974
I00
sS'group_name'
p34975
Nsa(dp34976
S'description'
p34977
S'The variable value outside the superellipsoid\n'
p34978
sS'cpp_type'
p34979
S'double'
p34980
sS'default'
p34981
g3
sS'name'
p34982
S'outvalue'
p34983
sS'required'
p34984
I01
sS'group_name'
p34985
Nsa(dp34986
S'description'
p34987
S'Seed value for the random number generator\n'
p34988
sS'cpp_type'
p34989
S'unsigned int'
p34990
sS'default'
p34991
S'12345'
p34992
sS'name'
p34993
S'rand_seed'
p34994
sS'required'
p34995
I00
sS'group_name'
p34996
Nsa(dp34997
S'description'
p34998
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p34999
sS'cpp_type'
p35000
S'double'
p35001
sS'default'
p35002
S'0'
p35003
sS'name'
p35004
S'size_variation'
p35005
sS'required'
p35006
I00
sS'group_name'
p35007
Nsa(dp35008
S'name'
p35009
S'size_variation_type'
p35010
sS'cpp_type'
p35011
S'MooseEnum'
p35012
sS'default'
p35013
S'none'
p35014
sS'description'
p35015
S'Type of distribution that random semiaxes will follow\n'
p35016
sS'required'
p35017
I00
sS'options'
p35018
S'uniform normal none'
p35019
sS'group_name'
p35020
Nsa(dp35021
S'description'
p35022
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p35023
sS'cpp_type'
p35024
S'double'
p35025
sS'default'
p35026
g3
sS'name'
p35027
S'small_a'
p35028
sS'required'
p35029
I01
sS'group_name'
p35030
Nsa(dp35031
S'description'
p35032
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p35033
sS'cpp_type'
p35034
S'double'
p35035
sS'default'
p35036
g3
sS'name'
p35037
S'small_b'
p35038
sS'required'
p35039
I01
sS'group_name'
p35040
Nsa(dp35041
S'description'
p35042
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p35043
sS'cpp_type'
p35044
S'double'
p35045
sS'default'
p35046
g3
sS'name'
p35047
S'small_c'
p35048
sS'required'
p35049
I01
sS'group_name'
p35050
Nsa(dp35051
S'description'
p35052
S'Exponent n for the randomly placed (small) superellipsoids\n'
p35053
sS'cpp_type'
p35054
S'double'
p35055
sS'default'
p35056
g3
sS'name'
p35057
S'small_n'
p35058
sS'required'
p35059
I01
sS'group_name'
p35060
Nsa(dp35061
S'description'
p35062
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p35063
sS'cpp_type'
p35064
S'double'
p35065
sS'default'
p35066
g3
sS'name'
p35067
S'small_spac'
p35068
sS'required'
p35069
I01
sS'group_name'
p35070
Nsa(dp35071
S'description'
p35072
g3
sS'cpp_type'
p35073
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35074
sS'default'
p35075
S'BimodalSuperellipsoidsIC'
p35076
sS'name'
p35077
S'type'
p35078
sS'required'
p35079
I00
sS'group_name'
p35080
Nsa(dp35081
S'description'
p35082
S'The variable this initial condition is supposed to provide values for.\n'
p35083
sS'cpp_type'
p35084
S'VariableName'
p35085
sS'default'
p35086
g3
sS'name'
p35087
S'variable'
p35088
sS'required'
p35089
I01
sS'group_name'
p35090
Nsa(dp35091
S'description'
p35092
S'The x-coordinate for each superellipsoid center\n'
p35093
sS'cpp_type'
p35094
S'std::vector<double, std::allocator<double> >'
p35095
sS'default'
p35096
g3
sS'name'
p35097
S'x_positions'
p35098
sS'required'
p35099
I01
sS'group_name'
p35100
Nsa(dp35101
S'description'
p35102
S'The y-coordinate for each superellipsoid center\n'
p35103
sS'cpp_type'
p35104
S'std::vector<double, std::allocator<double> >'
p35105
sS'default'
p35106
g3
sS'name'
p35107
S'y_positions'
p35108
sS'required'
p35109
I01
sS'group_name'
p35110
Nsa(dp35111
S'description'
p35112
S'The z-coordinate for each superellipsoid center\n'
p35113
sS'cpp_type'
p35114
S'std::vector<double, std::allocator<double> >'
p35115
sS'default'
p35116
g3
sS'name'
p35117
S'z_positions'
p35118
sS'required'
p35119
I01
sS'group_name'
p35120
Nsa(dp35121
S'description'
p35122
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p35123
sS'cpp_type'
p35124
S'bool'
p35125
sS'default'
p35126
S'0'
p35127
sS'name'
p35128
S'zero_gradient'
p35129
sS'required'
p35130
I00
sS'group_name'
p35131
NsasS'name'
p35132
S'/ICs/BimodalSuperellipsoidsIC'
p35133
sa(dp35134
S'description'
p35135
g3
sS'subblocks'
p35136
NsS'parameters'
p35137
(lp35138
(dp35139
S'description'
p35140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35141
sS'cpp_type'
p35142
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35143
sS'default'
p35144
g3
sS'name'
p35145
S'block'
p35146
sS'required'
p35147
I00
sS'group_name'
p35148
Nsa(dp35149
S'description'
p35150
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35151
sS'cpp_type'
p35152
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35153
sS'default'
p35154
g3
sS'name'
p35155
S'boundary'
p35156
sS'required'
p35157
I00
sS'group_name'
p35158
Nsa(dp35159
S'description'
p35160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35161
sS'cpp_type'
p35162
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35163
sS'default'
p35164
g3
sS'name'
p35165
S'control_tags'
p35166
sS'required'
p35167
I00
sS'group_name'
p35168
S'Advanced'
p35169
sa(dp35170
S'description'
p35171
S'Set the enabled status of the MooseObject.\n'
p35172
sS'cpp_type'
p35173
S'bool'
p35174
sS'default'
p35175
S'1'
p35176
sS'name'
p35177
S'enable'
p35178
sS'required'
p35179
I00
sS'group_name'
p35180
S'Advanced'
p35181
sa(dp35182
S'description'
p35183
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35184
sS'cpp_type'
p35185
S'bool'
p35186
sS'default'
p35187
S'0'
p35188
sS'name'
p35189
S'ignore_uo_dependency'
p35190
sS'required'
p35191
I00
sS'group_name'
p35192
S'Advanced'
p35193
sa(dp35194
S'description'
p35195
S'The value of the variable inside the box\n'
p35196
sS'cpp_type'
p35197
S'double'
p35198
sS'default'
p35199
S'0'
p35200
sS'name'
p35201
S'inside'
p35202
sS'required'
p35203
I00
sS'group_name'
p35204
Nsa(dp35205
S'description'
p35206
S'The value of the variable outside the box\n'
p35207
sS'cpp_type'
p35208
S'double'
p35209
sS'default'
p35210
S'0'
p35211
sS'name'
p35212
S'outside'
p35213
sS'required'
p35214
I00
sS'group_name'
p35215
Nsa(dp35216
S'description'
p35217
g3
sS'cpp_type'
p35218
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35219
sS'default'
p35220
S'BoundingBoxIC'
p35221
sS'name'
p35222
S'type'
p35223
sS'required'
p35224
I00
sS'group_name'
p35225
Nsa(dp35226
S'description'
p35227
S'The variable this initial condition is supposed to provide values for.\n'
p35228
sS'cpp_type'
p35229
S'VariableName'
p35230
sS'default'
p35231
g3
sS'name'
p35232
S'variable'
p35233
sS'required'
p35234
I01
sS'group_name'
p35235
Nsa(dp35236
S'description'
p35237
S'The x coordinate of the lower left-hand corner of the box\n'
p35238
sS'cpp_type'
p35239
S'double'
p35240
sS'default'
p35241
g3
sS'name'
p35242
S'x1'
p35243
sS'required'
p35244
I01
sS'group_name'
p35245
Nsa(dp35246
S'description'
p35247
S'The x coordinate of the upper right-hand corner of the box\n'
p35248
sS'cpp_type'
p35249
S'double'
p35250
sS'default'
p35251
g3
sS'name'
p35252
S'x2'
p35253
sS'required'
p35254
I01
sS'group_name'
p35255
Nsa(dp35256
S'description'
p35257
S'The y coordinate of the lower left-hand corner of the box\n'
p35258
sS'cpp_type'
p35259
S'double'
p35260
sS'default'
p35261
g3
sS'name'
p35262
S'y1'
p35263
sS'required'
p35264
I01
sS'group_name'
p35265
Nsa(dp35266
S'description'
p35267
S'The y coordinate of the upper right-hand corner of the box\n'
p35268
sS'cpp_type'
p35269
S'double'
p35270
sS'default'
p35271
g3
sS'name'
p35272
S'y2'
p35273
sS'required'
p35274
I01
sS'group_name'
p35275
Nsa(dp35276
S'description'
p35277
S'The z coordinate of the lower left-hand corner of the box\n'
p35278
sS'cpp_type'
p35279
S'double'
p35280
sS'default'
p35281
S'0'
p35282
sS'name'
p35283
S'z1'
p35284
sS'required'
p35285
I00
sS'group_name'
p35286
Nsa(dp35287
S'description'
p35288
S'The z coordinate of the upper right-hand corner of the box\n'
p35289
sS'cpp_type'
p35290
S'double'
p35291
sS'default'
p35292
S'0'
p35293
sS'name'
p35294
S'z2'
p35295
sS'required'
p35296
I00
sS'group_name'
p35297
NsasS'name'
p35298
S'/ICs/BoundingBoxIC'
p35299
sa(dp35300
S'description'
p35301
S'Close packed arrangement of smooth circles\n'
p35302
sS'subblocks'
p35303
NsS'parameters'
p35304
(lp35305
(dp35306
S'description'
p35307
S'in 3D, whether the objects are spheres or columns\n'
p35308
sS'cpp_type'
p35309
S'bool'
p35310
sS'default'
p35311
S'1'
p35312
sS'name'
p35313
S'3D_spheres'
p35314
sS'required'
p35315
I00
sS'group_name'
p35316
Nsa(dp35317
S'description'
p35318
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35319
sS'cpp_type'
p35320
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35321
sS'default'
p35322
g3
sS'name'
p35323
S'block'
p35324
sS'required'
p35325
I00
sS'group_name'
p35326
Nsa(dp35327
S'description'
p35328
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35329
sS'cpp_type'
p35330
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35331
sS'default'
p35332
g3
sS'name'
p35333
S'boundary'
p35334
sS'required'
p35335
I00
sS'group_name'
p35336
Nsa(dp35337
S'description'
p35338
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35339
sS'cpp_type'
p35340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35341
sS'default'
p35342
g3
sS'name'
p35343
S'control_tags'
p35344
sS'required'
p35345
I00
sS'group_name'
p35346
S'Advanced'
p35347
sa(dp35348
S'description'
p35349
S'Set the enabled status of the MooseObject.\n'
p35350
sS'cpp_type'
p35351
S'bool'
p35352
sS'default'
p35353
S'1'
p35354
sS'name'
p35355
S'enable'
p35356
sS'required'
p35357
I00
sS'group_name'
p35358
S'Advanced'
p35359
sa(dp35360
S'description'
p35361
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35362
sS'cpp_type'
p35363
S'bool'
p35364
sS'default'
p35365
S'0'
p35366
sS'name'
p35367
S'ignore_uo_dependency'
p35368
sS'required'
p35369
I00
sS'group_name'
p35370
S'Advanced'
p35371
sa(dp35372
S'description'
p35373
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p35374
sS'cpp_type'
p35375
S'double'
p35376
sS'default'
p35377
S'0'
p35378
sS'name'
p35379
S'int_width'
p35380
sS'required'
p35381
I00
sS'group_name'
p35382
Nsa(dp35383
S'description'
p35384
S'The variable value inside the circle\n'
p35385
sS'cpp_type'
p35386
S'double'
p35387
sS'default'
p35388
g3
sS'name'
p35389
S'invalue'
p35390
sS'required'
p35391
I01
sS'group_name'
p35392
Nsa(dp35393
S'description'
p35394
S'The variable value outside the circle\n'
p35395
sS'cpp_type'
p35396
S'double'
p35397
sS'default'
p35398
g3
sS'name'
p35399
S'outvalue'
p35400
sS'required'
p35401
I01
sS'group_name'
p35402
Nsa(dp35403
S'description'
p35404
S'The radius of a circle\n'
p35405
sS'cpp_type'
p35406
S'double'
p35407
sS'default'
p35408
g3
sS'name'
p35409
S'radius'
p35410
sS'required'
p35411
I01
sS'group_name'
p35412
Nsa(dp35413
S'description'
p35414
S'Seed value for the random number generator\n'
p35415
sS'cpp_type'
p35416
S'unsigned int'
p35417
sS'default'
p35418
S'12345'
p35419
sS'name'
p35420
S'rand_seed'
p35421
sS'required'
p35422
I00
sS'group_name'
p35423
Nsa(dp35424
S'description'
p35425
g3
sS'cpp_type'
p35426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35427
sS'default'
p35428
S'ClosePackIC'
p35429
sS'name'
p35430
S'type'
p35431
sS'required'
p35432
I00
sS'group_name'
p35433
Nsa(dp35434
S'description'
p35435
S'The variable this initial condition is supposed to provide values for.\n'
p35436
sS'cpp_type'
p35437
S'VariableName'
p35438
sS'default'
p35439
g3
sS'name'
p35440
S'variable'
p35441
sS'required'
p35442
I01
sS'group_name'
p35443
Nsa(dp35444
S'description'
p35445
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p35446
sS'cpp_type'
p35447
S'bool'
p35448
sS'default'
p35449
S'0'
p35450
sS'name'
p35451
S'zero_gradient'
p35452
sS'required'
p35453
I00
sS'group_name'
p35454
NsasS'name'
p35455
S'/ICs/ClosePackIC'
p35456
sa(dp35457
S'description'
p35458
g3
sS'subblocks'
p35459
NsS'parameters'
p35460
(lp35461
(dp35462
S'description'
p35463
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35464
sS'cpp_type'
p35465
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35466
sS'default'
p35467
g3
sS'name'
p35468
S'block'
p35469
sS'required'
p35470
I00
sS'group_name'
p35471
Nsa(dp35472
S'description'
p35473
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35474
sS'cpp_type'
p35475
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35476
sS'default'
p35477
g3
sS'name'
p35478
S'boundary'
p35479
sS'required'
p35480
I00
sS'group_name'
p35481
Nsa(dp35482
S'description'
p35483
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35484
sS'cpp_type'
p35485
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35486
sS'default'
p35487
g3
sS'name'
p35488
S'control_tags'
p35489
sS'required'
p35490
I00
sS'group_name'
p35491
S'Advanced'
p35492
sa(dp35493
S'description'
p35494
S'Set the enabled status of the MooseObject.\n'
p35495
sS'cpp_type'
p35496
S'bool'
p35497
sS'default'
p35498
S'1'
p35499
sS'name'
p35500
S'enable'
p35501
sS'required'
p35502
I00
sS'group_name'
p35503
S'Advanced'
p35504
sa(dp35505
S'description'
p35506
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35507
sS'cpp_type'
p35508
S'bool'
p35509
sS'default'
p35510
S'0'
p35511
sS'name'
p35512
S'ignore_uo_dependency'
p35513
sS'required'
p35514
I00
sS'group_name'
p35515
S'Advanced'
p35516
sa(dp35517
S'description'
p35518
g3
sS'cpp_type'
p35519
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35520
sS'default'
p35521
S'ConstantIC'
p35522
sS'name'
p35523
S'type'
p35524
sS'required'
p35525
I00
sS'group_name'
p35526
Nsa(dp35527
S'description'
p35528
S'The value to be set in IC\n'
p35529
sS'cpp_type'
p35530
S'double'
p35531
sS'default'
p35532
g3
sS'name'
p35533
S'value'
p35534
sS'required'
p35535
I01
sS'group_name'
p35536
Nsa(dp35537
S'description'
p35538
S'The variable this initial condition is supposed to provide values for.\n'
p35539
sS'cpp_type'
p35540
S'VariableName'
p35541
sS'default'
p35542
g3
sS'name'
p35543
S'variable'
p35544
sS'required'
p35545
I01
sS'group_name'
p35546
NsasS'name'
p35547
S'/ICs/ConstantIC'
p35548
sa(dp35549
S'description'
p35550
S'Cross-shaped initial condition\n'
p35551
sS'subblocks'
p35552
NsS'parameters'
p35553
(lp35554
(dp35555
S'description'
p35556
S'The amplitude\n'
p35557
sS'cpp_type'
p35558
S'double'
p35559
sS'default'
p35560
S'1'
p35561
sS'name'
p35562
S'amplitude'
p35563
sS'required'
p35564
I00
sS'group_name'
p35565
Nsa(dp35566
S'description'
p35567
S'The average value\n'
p35568
sS'cpp_type'
p35569
S'double'
p35570
sS'default'
p35571
S'0'
p35572
sS'name'
p35573
S'average'
p35574
sS'required'
p35575
I00
sS'group_name'
p35576
Nsa(dp35577
S'description'
p35578
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35579
sS'cpp_type'
p35580
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35581
sS'default'
p35582
g3
sS'name'
p35583
S'block'
p35584
sS'required'
p35585
I00
sS'group_name'
p35586
Nsa(dp35587
S'description'
p35588
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35589
sS'cpp_type'
p35590
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35591
sS'default'
p35592
g3
sS'name'
p35593
S'boundary'
p35594
sS'required'
p35595
I00
sS'group_name'
p35596
Nsa(dp35597
S'description'
p35598
S'A small area between the max value and the interface\n'
p35599
sS'cpp_type'
p35600
S'double'
p35601
sS'default'
p35602
S'0.03125'
p35603
sS'name'
p35604
S'buffer'
p35605
sS'required'
p35606
I00
sS'group_name'
p35607
Nsa(dp35608
S'description'
p35609
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35610
sS'cpp_type'
p35611
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35612
sS'default'
p35613
g3
sS'name'
p35614
S'control_tags'
p35615
sS'required'
p35616
I00
sS'group_name'
p35617
S'Advanced'
p35618
sa(dp35619
S'description'
p35620
S'Set the enabled status of the MooseObject.\n'
p35621
sS'cpp_type'
p35622
S'bool'
p35623
sS'default'
p35624
S'1'
p35625
sS'name'
p35626
S'enable'
p35627
sS'required'
p35628
I00
sS'group_name'
p35629
S'Advanced'
p35630
sa(dp35631
S'description'
p35632
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35633
sS'cpp_type'
p35634
S'bool'
p35635
sS'default'
p35636
S'0'
p35637
sS'name'
p35638
S'ignore_uo_dependency'
p35639
sS'required'
p35640
I00
sS'group_name'
p35641
S'Advanced'
p35642
sa(dp35643
S'description'
p35644
S'The interface width\n'
p35645
sS'cpp_type'
p35646
S'double'
p35647
sS'default'
p35648
S'0.03125'
p35649
sS'name'
p35650
S'interface'
p35651
sS'required'
p35652
I00
sS'group_name'
p35653
Nsa(dp35654
S'description'
p35655
S'The length\n'
p35656
sS'cpp_type'
p35657
S'double'
p35658
sS'default'
p35659
S'0.75'
p35660
sS'name'
p35661
S'length'
p35662
sS'required'
p35663
I00
sS'group_name'
p35664
Nsa(dp35665
S'description'
p35666
g3
sS'cpp_type'
p35667
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35668
sS'default'
p35669
S'CrossIC'
p35670
sS'name'
p35671
S'type'
p35672
sS'required'
p35673
I00
sS'group_name'
p35674
Nsa(dp35675
S'description'
p35676
S'The variable this initial condition is supposed to provide values for.\n'
p35677
sS'cpp_type'
p35678
S'VariableName'
p35679
sS'default'
p35680
g3
sS'name'
p35681
S'variable'
p35682
sS'required'
p35683
I01
sS'group_name'
p35684
Nsa(dp35685
S'description'
p35686
S'The width\n'
p35687
sS'cpp_type'
p35688
S'double'
p35689
sS'default'
p35690
S'0.125'
p35691
sS'name'
p35692
S'width'
p35693
sS'required'
p35694
I00
sS'group_name'
p35695
Nsa(dp35696
S'description'
p35697
S'The x coordinate of the lower left-hand corner of the box\n'
p35698
sS'cpp_type'
p35699
S'double'
p35700
sS'default'
p35701
S'0'
p35702
sS'name'
p35703
S'x1'
p35704
sS'required'
p35705
I00
sS'group_name'
p35706
Nsa(dp35707
S'description'
p35708
S'The x coordinate of the upper right-hand corner of the box\n'
p35709
sS'cpp_type'
p35710
S'double'
p35711
sS'default'
p35712
S'1'
p35713
sS'name'
p35714
S'x2'
p35715
sS'required'
p35716
I00
sS'group_name'
p35717
Nsa(dp35718
S'description'
p35719
S'The y coordinate of the lower left-hand corner of the box\n'
p35720
sS'cpp_type'
p35721
S'double'
p35722
sS'default'
p35723
S'0'
p35724
sS'name'
p35725
S'y1'
p35726
sS'required'
p35727
I00
sS'group_name'
p35728
Nsa(dp35729
S'description'
p35730
S'The y coordinate of the upper right-hand corner of the box\n'
p35731
sS'cpp_type'
p35732
S'double'
p35733
sS'default'
p35734
S'1'
p35735
sS'name'
p35736
S'y2'
p35737
sS'required'
p35738
I00
sS'group_name'
p35739
NsasS'name'
p35740
S'/ICs/CrossIC'
p35741
sa(dp35742
S'description'
p35743
g3
sS'subblocks'
p35744
NsS'parameters'
p35745
(lp35746
(dp35747
S'description'
p35748
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35749
sS'cpp_type'
p35750
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35751
sS'default'
p35752
g3
sS'name'
p35753
S'block'
p35754
sS'required'
p35755
I00
sS'group_name'
p35756
Nsa(dp35757
S'description'
p35758
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35759
sS'cpp_type'
p35760
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35761
sS'default'
p35762
g3
sS'name'
p35763
S'boundary'
p35764
sS'required'
p35765
I00
sS'group_name'
p35766
Nsa(dp35767
S'description'
p35768
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35769
sS'cpp_type'
p35770
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35771
sS'default'
p35772
g3
sS'name'
p35773
S'control_tags'
p35774
sS'required'
p35775
I00
sS'group_name'
p35776
S'Advanced'
p35777
sa(dp35778
S'description'
p35779
S'Set the enabled status of the MooseObject.\n'
p35780
sS'cpp_type'
p35781
S'bool'
p35782
sS'default'
p35783
S'1'
p35784
sS'name'
p35785
S'enable'
p35786
sS'required'
p35787
I00
sS'group_name'
p35788
S'Advanced'
p35789
sa(dp35790
S'description'
p35791
S'The initial condition function.\n'
p35792
sS'cpp_type'
p35793
S'FunctionName'
p35794
sS'default'
p35795
g3
sS'name'
p35796
S'function'
p35797
sS'required'
p35798
I01
sS'group_name'
p35799
Nsa(dp35800
S'description'
p35801
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35802
sS'cpp_type'
p35803
S'bool'
p35804
sS'default'
p35805
S'0'
p35806
sS'name'
p35807
S'ignore_uo_dependency'
p35808
sS'required'
p35809
I00
sS'group_name'
p35810
S'Advanced'
p35811
sa(dp35812
S'description'
p35813
g3
sS'cpp_type'
p35814
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35815
sS'default'
p35816
S'FunctionIC'
p35817
sS'name'
p35818
S'type'
p35819
sS'required'
p35820
I00
sS'group_name'
p35821
Nsa(dp35822
S'description'
p35823
S'The variable this initial condition is supposed to provide values for.\n'
p35824
sS'cpp_type'
p35825
S'VariableName'
p35826
sS'default'
p35827
g3
sS'name'
p35828
S'variable'
p35829
sS'required'
p35830
I01
sS'group_name'
p35831
NsasS'name'
p35832
S'/ICs/FunctionIC'
p35833
sa(dp35834
S'description'
p35835
g3
sS'subblocks'
p35836
NsS'parameters'
p35837
(lp35838
(dp35839
S'description'
p35840
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35841
sS'cpp_type'
p35842
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35843
sS'default'
p35844
g3
sS'name'
p35845
S'control_tags'
p35846
sS'required'
p35847
I00
sS'group_name'
p35848
S'Advanced'
p35849
sa(dp35850
S'description'
p35851
S'Set the enabled status of the MooseObject.\n'
p35852
sS'cpp_type'
p35853
S'bool'
p35854
sS'default'
p35855
S'1'
p35856
sS'name'
p35857
S'enable'
p35858
sS'required'
p35859
I00
sS'group_name'
p35860
S'Advanced'
p35861
sa(dp35862
S'description'
p35863
S'The initial condition function.\n'
p35864
sS'cpp_type'
p35865
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p35866
sS'default'
p35867
g3
sS'name'
p35868
S'function'
p35869
sS'required'
p35870
I01
sS'group_name'
p35871
Nsa(dp35872
S'description'
p35873
g3
sS'cpp_type'
p35874
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35875
sS'default'
p35876
S'FunctionScalarIC'
p35877
sS'name'
p35878
S'type'
p35879
sS'required'
p35880
I00
sS'group_name'
p35881
Nsa(dp35882
S'description'
p35883
S'The variable this initial condition is supposed to provide values for.\n'
p35884
sS'cpp_type'
p35885
S'VariableName'
p35886
sS'default'
p35887
g3
sS'name'
p35888
S'variable'
p35889
sS'required'
p35890
I00
sS'group_name'
p35891
NsasS'name'
p35892
S'/ICs/FunctionScalarIC'
p35893
sa(dp35894
S'description'
p35895
S'Perturbed hexagonal polycrystal\n'
p35896
sS'subblocks'
p35897
NsS'parameters'
p35898
(lp35899
(dp35900
S'description'
p35901
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35902
sS'cpp_type'
p35903
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35904
sS'default'
p35905
g3
sS'name'
p35906
S'block'
p35907
sS'required'
p35908
I00
sS'group_name'
p35909
Nsa(dp35910
S'description'
p35911
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35912
sS'cpp_type'
p35913
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35914
sS'default'
p35915
g3
sS'name'
p35916
S'boundary'
p35917
sS'required'
p35918
I00
sS'group_name'
p35919
Nsa(dp35920
S'name'
p35921
S'coloring_algorithm'
p35922
sS'cpp_type'
p35923
S'MooseEnum'
p35924
sS'default'
p35925
S'legacy'
p35926
sS'description'
p35927
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p35928
sS'required'
p35929
I00
sS'options'
p35930
S'legacy bt jp power greedy'
p35931
sS'group_name'
p35932
Nsa(dp35933
S'description'
p35934
S'3D microstructure will be columnar in the z-direction?\n'
p35935
sS'cpp_type'
p35936
S'bool'
p35937
sS'default'
p35938
S'0'
p35939
sS'name'
p35940
S'columnar_3D'
p35941
sS'required'
p35942
I00
sS'group_name'
p35943
Nsa(dp35944
S'description'
p35945
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35946
sS'cpp_type'
p35947
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35948
sS'default'
p35949
g3
sS'name'
p35950
S'control_tags'
p35951
sS'required'
p35952
I00
sS'group_name'
p35953
S'Advanced'
p35954
sa(dp35955
S'description'
p35956
S'Set the enabled status of the MooseObject.\n'
p35957
sS'cpp_type'
p35958
S'bool'
p35959
sS'default'
p35960
S'1'
p35961
sS'name'
p35962
S'enable'
p35963
sS'required'
p35964
I00
sS'group_name'
p35965
S'Advanced'
p35966
sa(dp35967
S'description'
p35968
S'Number of grains being represented by the order parameters\n'
p35969
sS'cpp_type'
p35970
S'unsigned int'
p35971
sS'default'
p35972
g3
sS'name'
p35973
S'grain_num'
p35974
sS'required'
p35975
I01
sS'group_name'
p35976
Nsa(dp35977
S'description'
p35978
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p35979
sS'cpp_type'
p35980
S'bool'
p35981
sS'default'
p35982
S'0'
p35983
sS'name'
p35984
S'ignore_uo_dependency'
p35985
sS'required'
p35986
I00
sS'group_name'
p35987
S'Advanced'
p35988
sa(dp35989
S'description'
p35990
S'The index for the current order parameter\n'
p35991
sS'cpp_type'
p35992
S'unsigned int'
p35993
sS'default'
p35994
g3
sS'name'
p35995
S'op_index'
p35996
sS'required'
p35997
I01
sS'group_name'
p35998
Nsa(dp35999
S'description'
p36000
S'Number of order parameters\n'
p36001
sS'cpp_type'
p36002
S'unsigned int'
p36003
sS'default'
p36004
g3
sS'name'
p36005
S'op_num'
p36006
sS'required'
p36007
I01
sS'group_name'
p36008
Nsa(dp36009
S'description'
p36010
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p36011
sS'cpp_type'
p36012
S'double'
p36013
sS'default'
p36014
S'0'
p36015
sS'name'
p36016
S'perturbation_percent'
p36017
sS'required'
p36018
I00
sS'group_name'
p36019
Nsa(dp36020
S'description'
p36021
S'The random seed\n'
p36022
sS'cpp_type'
p36023
S'unsigned int'
p36024
sS'default'
p36025
S'12444'
p36026
sS'name'
p36027
S'rand_seed'
p36028
sS'required'
p36029
I00
sS'group_name'
p36030
Nsa(dp36031
S'description'
p36032
g3
sS'cpp_type'
p36033
S'int'
p36034
sS'default'
p36035
S'1'
p36036
sS'name'
p36037
S'typ'
p36038
sS'required'
p36039
I00
sS'group_name'
p36040
Nsa(dp36041
S'description'
p36042
g3
sS'cpp_type'
p36043
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36044
sS'default'
p36045
S'HexPolycrystalIC'
p36046
sS'name'
p36047
S'type'
p36048
sS'required'
p36049
I00
sS'group_name'
p36050
Nsa(dp36051
S'description'
p36052
S'The variable this initial condition is supposed to provide values for.\n'
p36053
sS'cpp_type'
p36054
S'VariableName'
p36055
sS'default'
p36056
g3
sS'name'
p36057
S'variable'
p36058
sS'required'
p36059
I01
sS'group_name'
p36060
Nsa(dp36061
S'description'
p36062
S'Specifies offset of hexagon grid in x-direction\n'
p36063
sS'cpp_type'
p36064
S'double'
p36065
sS'default'
p36066
S'0.5'
p36067
sS'name'
p36068
S'x_offset'
p36069
sS'required'
p36070
I00
sS'group_name'
p36071
NsasS'name'
p36072
S'/ICs/HexPolycrystalIC'
p36073
sa(dp36074
S'description'
p36075
S'Perturbed square lattice of smooth circles\n'
p36076
sS'subblocks'
p36077
NsS'parameters'
p36078
(lp36079
(dp36080
S'description'
p36081
S'in 3D, whether the objects are spheres or columns\n'
p36082
sS'cpp_type'
p36083
S'bool'
p36084
sS'default'
p36085
S'1'
p36086
sS'name'
p36087
S'3D_spheres'
p36088
sS'required'
p36089
I00
sS'group_name'
p36090
Nsa(dp36091
S'description'
p36092
S'Variation from central lattice position\n'
p36093
sS'cpp_type'
p36094
S'double'
p36095
sS'default'
p36096
g3
sS'name'
p36097
S'Rnd_variation'
p36098
sS'required'
p36099
I00
sS'group_name'
p36100
Nsa(dp36101
S'description'
p36102
S"Don't place any bubbles on the simulation cell boundaries\n"
p36103
sS'cpp_type'
p36104
S'bool'
p36105
sS'default'
p36106
S'1'
p36107
sS'name'
p36108
S'avoid_bounds'
p36109
sS'required'
p36110
I00
sS'group_name'
p36111
Nsa(dp36112
S'description'
p36113
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36114
sS'cpp_type'
p36115
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36116
sS'default'
p36117
g3
sS'name'
p36118
S'block'
p36119
sS'required'
p36120
I00
sS'group_name'
p36121
Nsa(dp36122
S'description'
p36123
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36124
sS'cpp_type'
p36125
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36126
sS'default'
p36127
g3
sS'name'
p36128
S'boundary'
p36129
sS'required'
p36130
I00
sS'group_name'
p36131
Nsa(dp36132
S'description'
p36133
S'Vector containing the number of bubbles along each side\n'
p36134
sS'cpp_type'
p36135
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p36136
sS'default'
p36137
g3
sS'name'
p36138
S'circles_per_side'
p36139
sS'required'
p36140
I01
sS'group_name'
p36141
Nsa(dp36142
S'description'
p36143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36144
sS'cpp_type'
p36145
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36146
sS'default'
p36147
g3
sS'name'
p36148
S'control_tags'
p36149
sS'required'
p36150
I00
sS'group_name'
p36151
S'Advanced'
p36152
sa(dp36153
S'description'
p36154
S'Set the enabled status of the MooseObject.\n'
p36155
sS'cpp_type'
p36156
S'bool'
p36157
sS'default'
p36158
S'1'
p36159
sS'name'
p36160
S'enable'
p36161
sS'required'
p36162
I00
sS'group_name'
p36163
S'Advanced'
p36164
sa(dp36165
S'description'
p36166
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36167
sS'cpp_type'
p36168
S'bool'
p36169
sS'default'
p36170
S'0'
p36171
sS'name'
p36172
S'ignore_uo_dependency'
p36173
sS'required'
p36174
I00
sS'group_name'
p36175
S'Advanced'
p36176
sa(dp36177
S'description'
p36178
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p36179
sS'cpp_type'
p36180
S'double'
p36181
sS'default'
p36182
S'0'
p36183
sS'name'
p36184
S'int_width'
p36185
sS'required'
p36186
I00
sS'group_name'
p36187
Nsa(dp36188
S'description'
p36189
S'The variable value inside the circle\n'
p36190
sS'cpp_type'
p36191
S'double'
p36192
sS'default'
p36193
g3
sS'name'
p36194
S'invalue'
p36195
sS'required'
p36196
I01
sS'group_name'
p36197
Nsa(dp36198
S'description'
p36199
S'The variable value outside the circle\n'
p36200
sS'cpp_type'
p36201
S'double'
p36202
sS'default'
p36203
g3
sS'name'
p36204
S'outvalue'
p36205
sS'required'
p36206
I01
sS'group_name'
p36207
Nsa(dp36208
S'description'
p36209
S'Variation from central lattice position\n'
p36210
sS'cpp_type'
p36211
S'double'
p36212
sS'default'
p36213
S'0'
p36214
sS'name'
p36215
S'pos_variation'
p36216
sS'required'
p36217
I00
sS'group_name'
p36218
Nsa(dp36219
S'description'
p36220
S'Mean radius value for the circels\n'
p36221
sS'cpp_type'
p36222
S'double'
p36223
sS'default'
p36224
g3
sS'name'
p36225
S'radius'
p36226
sS'required'
p36227
I01
sS'group_name'
p36228
Nsa(dp36229
S'description'
p36230
S'Plus or minus fraction of random variation in the bubble radius\n'
p36231
sS'cpp_type'
p36232
S'double'
p36233
sS'default'
p36234
S'0'
p36235
sS'name'
p36236
S'radius_variation'
p36237
sS'required'
p36238
I00
sS'group_name'
p36239
Nsa(dp36240
S'name'
p36241
S'radius_variation_type'
p36242
sS'cpp_type'
p36243
S'MooseEnum'
p36244
sS'default'
p36245
S'none'
p36246
sS'description'
p36247
S'Type of distribution that random circle radii will follow\n'
p36248
sS'required'
p36249
I00
sS'options'
p36250
S'uniform normal none'
p36251
sS'group_name'
p36252
Nsa(dp36253
S'description'
p36254
S'random seed\n'
p36255
sS'cpp_type'
p36256
S'unsigned int'
p36257
sS'default'
p36258
S'2000'
p36259
sS'name'
p36260
S'rand_seed'
p36261
sS'required'
p36262
I00
sS'group_name'
p36263
Nsa(dp36264
S'description'
p36265
g3
sS'cpp_type'
p36266
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36267
sS'default'
p36268
S'LatticeSmoothCircleIC'
p36269
sS'name'
p36270
S'type'
p36271
sS'required'
p36272
I00
sS'group_name'
p36273
Nsa(dp36274
S'description'
p36275
S'The variable this initial condition is supposed to provide values for.\n'
p36276
sS'cpp_type'
p36277
S'VariableName'
p36278
sS'default'
p36279
g3
sS'name'
p36280
S'variable'
p36281
sS'required'
p36282
I01
sS'group_name'
p36283
Nsa(dp36284
S'description'
p36285
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p36286
sS'cpp_type'
p36287
S'bool'
p36288
sS'default'
p36289
S'0'
p36290
sS'name'
p36291
S'zero_gradient'
p36292
sS'required'
p36293
I00
sS'group_name'
p36294
NsasS'name'
p36295
S'/ICs/LatticeSmoothCircleIC'
p36296
sa(dp36297
S'description'
p36298
S'Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n'
p36299
sS'subblocks'
p36300
NsS'parameters'
p36301
(lp36302
(dp36303
S'description'
p36304
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36305
sS'cpp_type'
p36306
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36307
sS'default'
p36308
g3
sS'name'
p36309
S'block'
p36310
sS'required'
p36311
I00
sS'group_name'
p36312
Nsa(dp36313
S'description'
p36314
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36315
sS'cpp_type'
p36316
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36317
sS'default'
p36318
g3
sS'name'
p36319
S'boundary'
p36320
sS'required'
p36321
I00
sS'group_name'
p36322
Nsa(dp36323
S'description'
p36324
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36325
sS'cpp_type'
p36326
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36327
sS'default'
p36328
g3
sS'name'
p36329
S'control_tags'
p36330
sS'required'
p36331
I00
sS'group_name'
p36332
S'Advanced'
p36333
sa(dp36334
S'description'
p36335
S'The corner coordinates boxes\n'
p36336
sS'cpp_type'
p36337
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p36338
sS'default'
p36339
g3
sS'name'
p36340
S'corners'
p36341
sS'required'
p36342
I01
sS'group_name'
p36343
Nsa(dp36344
S'description'
p36345
S'Set the enabled status of the MooseObject.\n'
p36346
sS'cpp_type'
p36347
S'bool'
p36348
sS'default'
p36349
S'1'
p36350
sS'name'
p36351
S'enable'
p36352
sS'required'
p36353
I00
sS'group_name'
p36354
S'Advanced'
p36355
sa(dp36356
S'description'
p36357
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36358
sS'cpp_type'
p36359
S'bool'
p36360
sS'default'
p36361
S'0'
p36362
sS'name'
p36363
S'ignore_uo_dependency'
p36364
sS'required'
p36365
I00
sS'group_name'
p36366
S'Advanced'
p36367
sa(dp36368
S'description'
p36369
S'The value of the variable inside each box (one value per box or a single value for all boxes)\n'
p36370
sS'cpp_type'
p36371
S'std::vector<double, std::allocator<double> >'
p36372
sS'default'
p36373
g3
sS'name'
p36374
S'inside'
p36375
sS'required'
p36376
I01
sS'group_name'
p36377
Nsa(dp36378
S'description'
p36379
S'The coordinates of the opposite corners of the boxes\n'
p36380
sS'cpp_type'
p36381
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p36382
sS'default'
p36383
g3
sS'name'
p36384
S'opposite_corners'
p36385
sS'required'
p36386
I01
sS'group_name'
p36387
Nsa(dp36388
S'description'
p36389
S'The value of the variable outside the box\n'
p36390
sS'cpp_type'
p36391
S'double'
p36392
sS'default'
p36393
S'0'
p36394
sS'name'
p36395
S'outside'
p36396
sS'required'
p36397
I00
sS'group_name'
p36398
Nsa(dp36399
S'description'
p36400
g3
sS'cpp_type'
p36401
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36402
sS'default'
p36403
S'MultiBoundingBoxIC'
p36404
sS'name'
p36405
S'type'
p36406
sS'required'
p36407
I00
sS'group_name'
p36408
Nsa(dp36409
S'description'
p36410
S'The variable this initial condition is supposed to provide values for.\n'
p36411
sS'cpp_type'
p36412
S'VariableName'
p36413
sS'default'
p36414
g3
sS'name'
p36415
S'variable'
p36416
sS'required'
p36417
I01
sS'group_name'
p36418
NsasS'name'
p36419
S'/ICs/MultiBoundingBoxIC'
p36420
sa(dp36421
S'description'
p36422
S'Random distribution of smooth circles with given minimum spacing\n'
p36423
sS'subblocks'
p36424
NsS'parameters'
p36425
(lp36426
(dp36427
S'description'
p36428
S'in 3D, whether the objects are spheres or columns\n'
p36429
sS'cpp_type'
p36430
S'bool'
p36431
sS'default'
p36432
S'1'
p36433
sS'name'
p36434
S'3D_spheres'
p36435
sS'required'
p36436
I00
sS'group_name'
p36437
Nsa(dp36438
S'description'
p36439
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36440
sS'cpp_type'
p36441
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36442
sS'default'
p36443
g3
sS'name'
p36444
S'block'
p36445
sS'required'
p36446
I00
sS'group_name'
p36447
Nsa(dp36448
S'description'
p36449
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36450
sS'cpp_type'
p36451
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36452
sS'default'
p36453
g3
sS'name'
p36454
S'boundary'
p36455
sS'required'
p36456
I00
sS'group_name'
p36457
Nsa(dp36458
S'description'
p36459
S'minimum spacing of bubbles, measured from center to center\n'
p36460
sS'cpp_type'
p36461
S'double'
p36462
sS'default'
p36463
g3
sS'name'
p36464
S'bubspac'
p36465
sS'required'
p36466
I01
sS'group_name'
p36467
Nsa(dp36468
S'description'
p36469
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36470
sS'cpp_type'
p36471
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36472
sS'default'
p36473
g3
sS'name'
p36474
S'control_tags'
p36475
sS'required'
p36476
I00
sS'group_name'
p36477
S'Advanced'
p36478
sa(dp36479
S'description'
p36480
S'Set the enabled status of the MooseObject.\n'
p36481
sS'cpp_type'
p36482
S'bool'
p36483
sS'default'
p36484
S'1'
p36485
sS'name'
p36486
S'enable'
p36487
sS'required'
p36488
I00
sS'group_name'
p36489
S'Advanced'
p36490
sa(dp36491
S'description'
p36492
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36493
sS'cpp_type'
p36494
S'bool'
p36495
sS'default'
p36496
S'0'
p36497
sS'name'
p36498
S'ignore_uo_dependency'
p36499
sS'required'
p36500
I00
sS'group_name'
p36501
S'Advanced'
p36502
sa(dp36503
S'description'
p36504
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p36505
sS'cpp_type'
p36506
S'double'
p36507
sS'default'
p36508
S'0'
p36509
sS'name'
p36510
S'int_width'
p36511
sS'required'
p36512
I00
sS'group_name'
p36513
Nsa(dp36514
S'description'
p36515
S'The variable value inside the circle\n'
p36516
sS'cpp_type'
p36517
S'double'
p36518
sS'default'
p36519
g3
sS'name'
p36520
S'invalue'
p36521
sS'required'
p36522
I01
sS'group_name'
p36523
Nsa(dp36524
S'description'
p36525
S'The number of bubbles to place\n'
p36526
sS'cpp_type'
p36527
S'unsigned int'
p36528
sS'default'
p36529
g3
sS'name'
p36530
S'numbub'
p36531
sS'required'
p36532
I01
sS'group_name'
p36533
Nsa(dp36534
S'description'
p36535
S'The number of tries\n'
p36536
sS'cpp_type'
p36537
S'unsigned int'
p36538
sS'default'
p36539
S'1000'
p36540
sS'name'
p36541
S'numtries'
p36542
sS'required'
p36543
I00
sS'group_name'
p36544
Nsa(dp36545
S'description'
p36546
S'The variable value outside the circle\n'
p36547
sS'cpp_type'
p36548
S'double'
p36549
sS'default'
p36550
g3
sS'name'
p36551
S'outvalue'
p36552
sS'required'
p36553
I01
sS'group_name'
p36554
Nsa(dp36555
S'description'
p36556
S'Mean radius value for the circles\n'
p36557
sS'cpp_type'
p36558
S'double'
p36559
sS'default'
p36560
g3
sS'name'
p36561
S'radius'
p36562
sS'required'
p36563
I01
sS'group_name'
p36564
Nsa(dp36565
S'description'
p36566
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p36567
sS'cpp_type'
p36568
S'double'
p36569
sS'default'
p36570
S'0'
p36571
sS'name'
p36572
S'radius_variation'
p36573
sS'required'
p36574
I00
sS'group_name'
p36575
Nsa(dp36576
S'name'
p36577
S'radius_variation_type'
p36578
sS'cpp_type'
p36579
S'MooseEnum'
p36580
sS'default'
p36581
S'none'
p36582
sS'description'
p36583
S'Type of distribution that random circle radii will follow\n'
p36584
sS'required'
p36585
I00
sS'options'
p36586
S'uniform normal none'
p36587
sS'group_name'
p36588
Nsa(dp36589
S'description'
p36590
S'Seed value for the random number generator\n'
p36591
sS'cpp_type'
p36592
S'unsigned int'
p36593
sS'default'
p36594
S'12345'
p36595
sS'name'
p36596
S'rand_seed'
p36597
sS'required'
p36598
I00
sS'group_name'
p36599
Nsa(dp36600
S'description'
p36601
g3
sS'cpp_type'
p36602
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36603
sS'default'
p36604
S'MultiSmoothCircleIC'
p36605
sS'name'
p36606
S'type'
p36607
sS'required'
p36608
I00
sS'group_name'
p36609
Nsa(dp36610
S'description'
p36611
S'The variable this initial condition is supposed to provide values for.\n'
p36612
sS'cpp_type'
p36613
S'VariableName'
p36614
sS'default'
p36615
g3
sS'name'
p36616
S'variable'
p36617
sS'required'
p36618
I01
sS'group_name'
p36619
Nsa(dp36620
S'description'
p36621
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p36622
sS'cpp_type'
p36623
S'bool'
p36624
sS'default'
p36625
S'0'
p36626
sS'name'
p36627
S'zero_gradient'
p36628
sS'required'
p36629
I00
sS'group_name'
p36630
NsasS'name'
p36631
S'/ICs/MultiSmoothCircleIC'
p36632
sa(dp36633
S'description'
p36634
S'Random distribution of smooth ellipse with given minimum spacing\n'
p36635
sS'subblocks'
p36636
NsS'parameters'
p36637
(lp36638
(dp36639
S'description'
p36640
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36641
sS'cpp_type'
p36642
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36643
sS'default'
p36644
g3
sS'name'
p36645
S'block'
p36646
sS'required'
p36647
I00
sS'group_name'
p36648
Nsa(dp36649
S'description'
p36650
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36651
sS'cpp_type'
p36652
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36653
sS'default'
p36654
g3
sS'name'
p36655
S'boundary'
p36656
sS'required'
p36657
I00
sS'group_name'
p36658
Nsa(dp36659
S'description'
p36660
S'Vector of the minimum spacing of bubbles of one type, measured from center to center\n'
p36661
sS'cpp_type'
p36662
S'std::vector<double, std::allocator<double> >'
p36663
sS'default'
p36664
g3
sS'name'
p36665
S'bubspac'
p36666
sS'required'
p36667
I01
sS'group_name'
p36668
Nsa(dp36669
S'description'
p36670
S'Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n'
p36671
sS'cpp_type'
p36672
S'bool'
p36673
sS'default'
p36674
S'0'
p36675
sS'name'
p36676
S'check_extremes'
p36677
sS'required'
p36678
I00
sS'group_name'
p36679
Nsa(dp36680
S'description'
p36681
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36682
sS'cpp_type'
p36683
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36684
sS'default'
p36685
g3
sS'name'
p36686
S'control_tags'
p36687
sS'required'
p36688
I00
sS'group_name'
p36689
S'Advanced'
p36690
sa(dp36691
S'description'
p36692
S'Set the enabled status of the MooseObject.\n'
p36693
sS'cpp_type'
p36694
S'bool'
p36695
sS'default'
p36696
S'1'
p36697
sS'name'
p36698
S'enable'
p36699
sS'required'
p36700
I00
sS'group_name'
p36701
S'Advanced'
p36702
sa(dp36703
S'description'
p36704
S'Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n'
p36705
sS'cpp_type'
p36706
S'std::vector<double, std::allocator<double> >'
p36707
sS'default'
p36708
g3
sS'name'
p36709
S'exponent'
p36710
sS'required'
p36711
I00
sS'group_name'
p36712
Nsa(dp36713
S'description'
p36714
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36715
sS'cpp_type'
p36716
S'bool'
p36717
sS'default'
p36718
S'0'
p36719
sS'name'
p36720
S'ignore_uo_dependency'
p36721
sS'required'
p36722
I00
sS'group_name'
p36723
S'Advanced'
p36724
sa(dp36725
S'description'
p36726
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p36727
sS'cpp_type'
p36728
S'double'
p36729
sS'default'
p36730
S'0'
p36731
sS'name'
p36732
S'int_width'
p36733
sS'required'
p36734
I00
sS'group_name'
p36735
Nsa(dp36736
S'description'
p36737
S'The variable value inside the superellipsoid\n'
p36738
sS'cpp_type'
p36739
S'double'
p36740
sS'default'
p36741
g3
sS'name'
p36742
S'invalue'
p36743
sS'required'
p36744
I01
sS'group_name'
p36745
Nsa(dp36746
S'description'
p36747
S'The number of tries\n'
p36748
sS'cpp_type'
p36749
S'unsigned int'
p36750
sS'default'
p36751
S'1000'
p36752
sS'name'
p36753
S'max_num_tries'
p36754
sS'required'
p36755
I00
sS'group_name'
p36756
Nsa(dp36757
S'description'
p36758
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p36759
sS'cpp_type'
p36760
S'double'
p36761
sS'default'
p36762
g3
sS'name'
p36763
S'nestedvalue'
p36764
sS'required'
p36765
I00
sS'group_name'
p36766
Nsa(dp36767
S'description'
p36768
S'Vector of the number of bubbles to place\n'
p36769
sS'cpp_type'
p36770
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p36771
sS'default'
p36772
g3
sS'name'
p36773
S'numbub'
p36774
sS'required'
p36775
I01
sS'group_name'
p36776
Nsa(dp36777
S'description'
p36778
S'The variable value outside the superellipsoid\n'
p36779
sS'cpp_type'
p36780
S'double'
p36781
sS'default'
p36782
g3
sS'name'
p36783
S'outvalue'
p36784
sS'required'
p36785
I01
sS'group_name'
p36786
Nsa(dp36787
S'description'
p36788
S'Check all Superellipsoid centers for overlap with other Superellipsoids.\n'
p36789
sS'cpp_type'
p36790
S'bool'
p36791
sS'default'
p36792
S'0'
p36793
sS'name'
p36794
S'prevent_overlap'
p36795
sS'required'
p36796
I00
sS'group_name'
p36797
Nsa(dp36798
S'description'
p36799
S'Seed value for the random number generator\n'
p36800
sS'cpp_type'
p36801
S'unsigned int'
p36802
sS'default'
p36803
S'12345'
p36804
sS'name'
p36805
S'rand_seed'
p36806
sS'required'
p36807
I00
sS'group_name'
p36808
Nsa(dp36809
S'description'
p36810
S'Vector of mean semiaxis values in the x direction for the ellipse\n'
p36811
sS'cpp_type'
p36812
S'std::vector<double, std::allocator<double> >'
p36813
sS'default'
p36814
g3
sS'name'
p36815
S'semiaxis_a'
p36816
sS'required'
p36817
I01
sS'group_name'
p36818
Nsa(dp36819
S'description'
p36820
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n'
p36821
sS'cpp_type'
p36822
S'std::vector<double, std::allocator<double> >'
p36823
sS'default'
p36824
g3
sS'name'
p36825
S'semiaxis_a_variation'
p36826
sS'required'
p36827
I00
sS'group_name'
p36828
Nsa(dp36829
S'description'
p36830
S'Vector of mean semiaxis values in the y direction for the ellipse\n'
p36831
sS'cpp_type'
p36832
S'std::vector<double, std::allocator<double> >'
p36833
sS'default'
p36834
g3
sS'name'
p36835
S'semiaxis_b'
p36836
sS'required'
p36837
I01
sS'group_name'
p36838
Nsa(dp36839
S'description'
p36840
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n'
p36841
sS'cpp_type'
p36842
S'std::vector<double, std::allocator<double> >'
p36843
sS'default'
p36844
g3
sS'name'
p36845
S'semiaxis_b_variation'
p36846
sS'required'
p36847
I00
sS'group_name'
p36848
Nsa(dp36849
S'description'
p36850
S'Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n'
p36851
sS'cpp_type'
p36852
S'std::vector<double, std::allocator<double> >'
p36853
sS'default'
p36854
g3
sS'name'
p36855
S'semiaxis_c'
p36856
sS'required'
p36857
I01
sS'group_name'
p36858
Nsa(dp36859
S'description'
p36860
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n'
p36861
sS'cpp_type'
p36862
S'std::vector<double, std::allocator<double> >'
p36863
sS'default'
p36864
g3
sS'name'
p36865
S'semiaxis_c_variation'
p36866
sS'required'
p36867
I00
sS'group_name'
p36868
Nsa(dp36869
S'name'
p36870
S'semiaxis_variation_type'
p36871
sS'cpp_type'
p36872
S'MooseEnum'
p36873
sS'default'
p36874
S'none'
p36875
sS'description'
p36876
S'Type of distribution that random superellipsoid semiaxes will follow\n'
p36877
sS'required'
p36878
I00
sS'options'
p36879
S'uniform normal none'
p36880
sS'group_name'
p36881
Nsa(dp36882
S'description'
p36883
g3
sS'cpp_type'
p36884
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36885
sS'default'
p36886
S'MultiSmoothSuperellipsoidIC'
p36887
sS'name'
p36888
S'type'
p36889
sS'required'
p36890
I00
sS'group_name'
p36891
Nsa(dp36892
S'description'
p36893
S'The variable this initial condition is supposed to provide values for.\n'
p36894
sS'cpp_type'
p36895
S'VariableName'
p36896
sS'default'
p36897
g3
sS'name'
p36898
S'variable'
p36899
sS'required'
p36900
I01
sS'group_name'
p36901
Nsa(dp36902
S'description'
p36903
S'If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n'
p36904
sS'cpp_type'
p36905
S'bool'
p36906
sS'default'
p36907
S'1'
p36908
sS'name'
p36909
S'vary_axes_independently'
p36910
sS'required'
p36911
I00
sS'group_name'
p36912
Nsa(dp36913
S'description'
p36914
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p36915
sS'cpp_type'
p36916
S'bool'
p36917
sS'default'
p36918
S'0'
p36919
sS'name'
p36920
S'zero_gradient'
p36921
sS'required'
p36922
I00
sS'group_name'
p36923
NsasS'name'
p36924
S'/ICs/MultiSmoothSuperellipsoidIC'
p36925
sa(dp36926
S'description'
p36927
g3
sS'subblocks'
p36928
NsS'parameters'
p36929
(lp36930
(dp36931
S'description'
p36932
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36933
sS'cpp_type'
p36934
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36935
sS'default'
p36936
g3
sS'name'
p36937
S'block'
p36938
sS'required'
p36939
I00
sS'group_name'
p36940
Nsa(dp36941
S'description'
p36942
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36943
sS'cpp_type'
p36944
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36945
sS'default'
p36946
g3
sS'name'
p36947
S'boundary'
p36948
sS'required'
p36949
I00
sS'group_name'
p36950
Nsa(dp36951
S'description'
p36952
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36953
sS'cpp_type'
p36954
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36955
sS'default'
p36956
g3
sS'name'
p36957
S'control_tags'
p36958
sS'required'
p36959
I00
sS'group_name'
p36960
S'Advanced'
p36961
sa(dp36962
S'name'
p36963
S'crystal_structure'
p36964
sS'cpp_type'
p36965
S'MooseEnum'
p36966
sS'default'
p36967
g3
sS'description'
p36968
S'The type of crystal structure\n'
p36969
sS'required'
p36970
I00
sS'options'
p36971
S'FCC BCC'
p36972
sS'group_name'
p36973
Nsa(dp36974
S'description'
p36975
S'Set the enabled status of the MooseObject.\n'
p36976
sS'cpp_type'
p36977
S'bool'
p36978
sS'default'
p36979
S'1'
p36980
sS'name'
p36981
S'enable'
p36982
sS'required'
p36983
I00
sS'group_name'
p36984
S'Advanced'
p36985
sa(dp36986
S'description'
p36987
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p36988
sS'cpp_type'
p36989
S'bool'
p36990
sS'default'
p36991
S'0'
p36992
sS'name'
p36993
S'ignore_uo_dependency'
p36994
sS'required'
p36995
I00
sS'group_name'
p36996
S'Advanced'
p36997
sa(dp36998
S'description'
p36999
S'Value inside sinusoids\n'
p37000
sS'cpp_type'
p37001
S'double'
p37002
sS'default'
p37003
S'1'
p37004
sS'name'
p37005
S'inside'
p37006
sS'required'
p37007
I00
sS'group_name'
p37008
Nsa(dp37009
S'description'
p37010
S'The lattice constant off the crystal structure\n'
p37011
sS'cpp_type'
p37012
S'double'
p37013
sS'default'
p37014
g3
sS'name'
p37015
S'lc'
p37016
sS'required'
p37017
I01
sS'group_name'
p37018
Nsa(dp37019
S'description'
p37020
S'Upper bound of the randomly generated values\n'
p37021
sS'cpp_type'
p37022
S'double'
p37023
sS'default'
p37024
S'1'
p37025
sS'name'
p37026
S'max'
p37027
sS'required'
p37028
I00
sS'group_name'
p37029
Nsa(dp37030
S'description'
p37031
S'Lower bound of the randomly generated values\n'
p37032
sS'cpp_type'
p37033
S'double'
p37034
sS'default'
p37035
S'0'
p37036
sS'name'
p37037
S'min'
p37038
sS'required'
p37039
I00
sS'group_name'
p37040
Nsa(dp37041
S'description'
p37042
S'Value outside sinusoids\n'
p37043
sS'cpp_type'
p37044
S'double'
p37045
sS'default'
p37046
S'0'
p37047
sS'name'
p37048
S'outside'
p37049
sS'required'
p37050
I00
sS'group_name'
p37051
Nsa(dp37052
S'description'
p37053
S'Seed value for the random number generator\n'
p37054
sS'cpp_type'
p37055
S'unsigned int'
p37056
sS'default'
p37057
S'0'
p37058
sS'name'
p37059
S'seed'
p37060
sS'required'
p37061
I00
sS'group_name'
p37062
Nsa(dp37063
S'description'
p37064
g3
sS'cpp_type'
p37065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37066
sS'default'
p37067
S'PFCFreezingIC'
p37068
sS'name'
p37069
S'type'
p37070
sS'required'
p37071
I00
sS'group_name'
p37072
Nsa(dp37073
S'description'
p37074
S'The variable this initial condition is supposed to provide values for.\n'
p37075
sS'cpp_type'
p37076
S'VariableName'
p37077
sS'default'
p37078
g3
sS'name'
p37079
S'variable'
p37080
sS'required'
p37081
I01
sS'group_name'
p37082
Nsa(dp37083
S'description'
p37084
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p37085
sS'cpp_type'
p37086
S'double'
p37087
sS'default'
p37088
g3
sS'name'
p37089
S'x1'
p37090
sS'required'
p37091
I01
sS'group_name'
p37092
Nsa(dp37093
S'description'
p37094
S'The x coordinate of the upper right-hand corner of the box\n'
p37095
sS'cpp_type'
p37096
S'double'
p37097
sS'default'
p37098
g3
sS'name'
p37099
S'x2'
p37100
sS'required'
p37101
I01
sS'group_name'
p37102
Nsa(dp37103
S'description'
p37104
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p37105
sS'cpp_type'
p37106
S'double'
p37107
sS'default'
p37108
g3
sS'name'
p37109
S'y1'
p37110
sS'required'
p37111
I01
sS'group_name'
p37112
Nsa(dp37113
S'description'
p37114
S'The y coordinate of the upper right-hand corner of the box\n'
p37115
sS'cpp_type'
p37116
S'double'
p37117
sS'default'
p37118
g3
sS'name'
p37119
S'y2'
p37120
sS'required'
p37121
I01
sS'group_name'
p37122
Nsa(dp37123
S'description'
p37124
S'The z coordinate of the lower left-hand corner of the box\n'
p37125
sS'cpp_type'
p37126
S'double'
p37127
sS'default'
p37128
S'0'
p37129
sS'name'
p37130
S'z1'
p37131
sS'required'
p37132
I00
sS'group_name'
p37133
Nsa(dp37134
S'description'
p37135
S'The z coordinate of the upper right-hand corner of the box\n'
p37136
sS'cpp_type'
p37137
S'double'
p37138
sS'default'
p37139
S'0'
p37140
sS'name'
p37141
S'z2'
p37142
sS'required'
p37143
I00
sS'group_name'
p37144
NsasS'name'
p37145
S'/ICs/PFCFreezingIC'
p37146
sa(dp37147
S'description'
p37148
g3
sS'subblocks'
p37149
(lp37150
(dp37151
S'description'
p37152
g3
sS'subblocks'
p37153
NsS'parameters'
p37154
(lp37155
(dp37156
S'description'
p37157
S'Number of grains, should be 2\n'
p37158
sS'cpp_type'
p37159
S'unsigned int'
p37160
sS'default'
p37161
g3
sS'name'
p37162
S'op_num'
p37163
sS'required'
p37164
I01
sS'group_name'
p37165
Nsa(dp37166
S'description'
p37167
S'specifies the base name of the variables\n'
p37168
sS'cpp_type'
p37169
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37170
sS'default'
p37171
g3
sS'name'
p37172
S'var_name_base'
p37173
sS'required'
p37174
I01
sS'group_name'
p37175
Nsa(dp37176
S'description'
p37177
S'The x coordinate of the lower left-hand corner of the box\n'
p37178
sS'cpp_type'
p37179
S'double'
p37180
sS'default'
p37181
g3
sS'name'
p37182
S'x1'
p37183
sS'required'
p37184
I01
sS'group_name'
p37185
Nsa(dp37186
S'description'
p37187
S'The x coordinate of the upper right-hand corner of the box\n'
p37188
sS'cpp_type'
p37189
S'double'
p37190
sS'default'
p37191
g3
sS'name'
p37192
S'x2'
p37193
sS'required'
p37194
I01
sS'group_name'
p37195
Nsa(dp37196
S'description'
p37197
S'The y coordinate of the lower left-hand corner of the box\n'
p37198
sS'cpp_type'
p37199
S'double'
p37200
sS'default'
p37201
g3
sS'name'
p37202
S'y1'
p37203
sS'required'
p37204
I01
sS'group_name'
p37205
Nsa(dp37206
S'description'
p37207
S'The y coordinate of the upper right-hand corner of the box\n'
p37208
sS'cpp_type'
p37209
S'double'
p37210
sS'default'
p37211
g3
sS'name'
p37212
S'y2'
p37213
sS'required'
p37214
I01
sS'group_name'
p37215
Nsa(dp37216
S'description'
p37217
S'The z coordinate of the lower left-hand corner of the box\n'
p37218
sS'cpp_type'
p37219
S'double'
p37220
sS'default'
p37221
S'0'
p37222
sS'name'
p37223
S'z1'
p37224
sS'required'
p37225
I00
sS'group_name'
p37226
Nsa(dp37227
S'description'
p37228
S'The z coordinate of the upper right-hand corner of the box\n'
p37229
sS'cpp_type'
p37230
S'double'
p37231
sS'default'
p37232
S'0'
p37233
sS'name'
p37234
S'z2'
p37235
sS'required'
p37236
I00
sS'group_name'
p37237
NsasS'name'
p37238
S'/ICs/PolycrystalICs/BicrystalBoundingBoxIC'
p37239
sa(dp37240
S'description'
p37241
g3
sS'subblocks'
p37242
NsS'parameters'
p37243
(lp37244
(dp37245
S'description'
p37246
S'in 3D, whether the smaller grain is a spheres or columnar grain\n'
p37247
sS'cpp_type'
p37248
S'bool'
p37249
sS'default'
p37250
S'1'
p37251
sS'name'
p37252
S'3D_sphere'
p37253
sS'required'
p37254
I00
sS'group_name'
p37255
Nsa(dp37256
S'description'
p37257
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p37258
sS'cpp_type'
p37259
S'double'
p37260
sS'default'
p37261
S'0'
p37262
sS'name'
p37263
S'int_width'
p37264
sS'required'
p37265
I00
sS'group_name'
p37266
Nsa(dp37267
S'description'
p37268
S'Number of grains, should be 2\n'
p37269
sS'cpp_type'
p37270
S'unsigned int'
p37271
sS'default'
p37272
g3
sS'name'
p37273
S'op_num'
p37274
sS'required'
p37275
I01
sS'group_name'
p37276
Nsa(dp37277
S'description'
p37278
S'Void radius\n'
p37279
sS'cpp_type'
p37280
S'double'
p37281
sS'default'
p37282
g3
sS'name'
p37283
S'radius'
p37284
sS'required'
p37285
I01
sS'group_name'
p37286
Nsa(dp37287
S'description'
p37288
S'specifies the base name of the variables\n'
p37289
sS'cpp_type'
p37290
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37291
sS'default'
p37292
g3
sS'name'
p37293
S'var_name_base'
p37294
sS'required'
p37295
I01
sS'group_name'
p37296
Nsa(dp37297
S'description'
p37298
S'The x coordinate of the circle grain center\n'
p37299
sS'cpp_type'
p37300
S'double'
p37301
sS'default'
p37302
g3
sS'name'
p37303
S'x'
p37304
sS'required'
p37305
I01
sS'group_name'
p37306
Nsa(dp37307
S'description'
p37308
S'The y coordinate of the circle grain center\n'
p37309
sS'cpp_type'
p37310
S'double'
p37311
sS'default'
p37312
g3
sS'name'
p37313
S'y'
p37314
sS'required'
p37315
I01
sS'group_name'
p37316
Nsa(dp37317
S'description'
p37318
S'The z coordinate of the circle grain center\n'
p37319
sS'cpp_type'
p37320
S'double'
p37321
sS'default'
p37322
S'0'
p37323
sS'name'
p37324
S'z'
p37325
sS'required'
p37326
I00
sS'group_name'
p37327
NsasS'name'
p37328
S'/ICs/PolycrystalICs/BicrystalCircleGrainIC'
p37329
sa(dp37330
S'description'
p37331
g3
sS'subblocks'
p37332
NsS'parameters'
p37333
(lp37334
(dp37335
S'description'
p37336
S'Number of grains, must be a square (4, 9, 16, etc)\n'
p37337
sS'cpp_type'
p37338
S'unsigned int'
p37339
sS'default'
p37340
g3
sS'name'
p37341
S'grain_num'
p37342
sS'required'
p37343
I01
sS'group_name'
p37344
Nsa(dp37345
S'description'
p37346
S'Number of order parameters\n'
p37347
sS'cpp_type'
p37348
S'unsigned int'
p37349
sS'default'
p37350
g3
sS'name'
p37351
S'op_num'
p37352
sS'required'
p37353
I01
sS'group_name'
p37354
Nsa(dp37355
S'description'
p37356
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p37357
sS'cpp_type'
p37358
S'double'
p37359
sS'default'
p37360
S'0'
p37361
sS'name'
p37362
S'perturbation_percent'
p37363
sS'required'
p37364
I00
sS'group_name'
p37365
Nsa(dp37366
S'description'
p37367
S'The random seed\n'
p37368
sS'cpp_type'
p37369
S'unsigned int'
p37370
sS'default'
p37371
S'12444'
p37372
sS'name'
p37373
S'rand_seed'
p37374
sS'required'
p37375
I00
sS'group_name'
p37376
Nsa(dp37377
S'description'
p37378
S'specifies the base name of the variables\n'
p37379
sS'cpp_type'
p37380
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37381
sS'default'
p37382
g3
sS'name'
p37383
S'var_name_base'
p37384
sS'required'
p37385
I01
sS'group_name'
p37386
Nsa(dp37387
S'description'
p37388
S'Specifies offset of hexagon grid in x-direction\n'
p37389
sS'cpp_type'
p37390
S'double'
p37391
sS'default'
p37392
S'0.5'
p37393
sS'name'
p37394
S'x_offset'
p37395
sS'required'
p37396
I00
sS'group_name'
p37397
NsasS'name'
p37398
S'/ICs/PolycrystalICs/PolycrystalHexGrainIC'
p37399
sa(dp37400
S'description'
p37401
g3
sS'subblocks'
p37402
NsS'parameters'
p37403
(lp37404
(dp37405
S'description'
p37406
S'number of order parameters to create\n'
p37407
sS'cpp_type'
p37408
S'unsigned int'
p37409
sS'default'
p37410
g3
sS'name'
p37411
S'op_num'
p37412
sS'required'
p37413
I01
sS'group_name'
p37414
Nsa(dp37415
S'name'
p37416
S'random_type'
p37417
sS'cpp_type'
p37418
S'MooseEnum'
p37419
sS'default'
p37420
g3
sS'description'
p37421
S'The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n'
p37422
sS'required'
p37423
I00
sS'options'
p37424
S'continuous discrete'
p37425
sS'group_name'
p37426
Nsa(dp37427
S'description'
p37428
S'specifies the base name of the variables\n'
p37429
sS'cpp_type'
p37430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37431
sS'default'
p37432
g3
sS'name'
p37433
S'var_name_base'
p37434
sS'required'
p37435
I01
sS'group_name'
p37436
NsasS'name'
p37437
S'/ICs/PolycrystalICs/PolycrystalRandomIC'
p37438
sa(dp37439
S'description'
p37440
g3
sS'subblocks'
p37441
NsS'parameters'
p37442
(lp37443
(dp37444
S'name'
p37445
S'coloring_algorithm'
p37446
sS'cpp_type'
p37447
S'MooseEnum'
p37448
sS'default'
p37449
S'legacy'
p37450
sS'description'
p37451
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p37452
sS'required'
p37453
I00
sS'options'
p37454
S'legacy bt jp power greedy'
p37455
sS'group_name'
p37456
Nsa(dp37457
S'description'
p37458
S'3D microstructure will be columnar in the z-direction?\n'
p37459
sS'cpp_type'
p37460
S'bool'
p37461
sS'default'
p37462
S'0'
p37463
sS'name'
p37464
S'columnar_3D'
p37465
sS'required'
p37466
I00
sS'group_name'
p37467
Nsa(dp37468
S'description'
p37469
S'number of grains to create, if it is going to greater than op_num\n'
p37470
sS'cpp_type'
p37471
S'unsigned int'
p37472
sS'default'
p37473
g3
sS'name'
p37474
S'grain_num'
p37475
sS'required'
p37476
I01
sS'group_name'
p37477
Nsa(dp37478
S'description'
p37479
S'number of order parameters to create\n'
p37480
sS'cpp_type'
p37481
S'unsigned int'
p37482
sS'default'
p37483
g3
sS'name'
p37484
S'op_num'
p37485
sS'required'
p37486
I01
sS'group_name'
p37487
Nsa(dp37488
S'description'
p37489
S'The random seed\n'
p37490
sS'cpp_type'
p37491
S'unsigned int'
p37492
sS'default'
p37493
S'12444'
p37494
sS'name'
p37495
S'rand_seed'
p37496
sS'required'
p37497
I00
sS'group_name'
p37498
Nsa(dp37499
S'description'
p37500
S'specifies the base name of the variables\n'
p37501
sS'cpp_type'
p37502
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37503
sS'default'
p37504
g3
sS'name'
p37505
S'var_name_base'
p37506
sS'required'
p37507
I01
sS'group_name'
p37508
NsasS'name'
p37509
S'/ICs/PolycrystalICs/PolycrystalVoronoiIC'
p37510
sa(dp37511
S'description'
p37512
g3
sS'subblocks'
p37513
NsS'parameters'
p37514
(lp37515
(dp37516
S'description'
p37517
S'in 3D, whether the objects are spheres or columns\n'
p37518
sS'cpp_type'
p37519
S'bool'
p37520
sS'default'
p37521
S'1'
p37522
sS'name'
p37523
S'3D_spheres'
p37524
sS'required'
p37525
I00
sS'group_name'
p37526
Nsa(dp37527
S'description'
p37528
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37529
sS'cpp_type'
p37530
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37531
sS'default'
p37532
g3
sS'name'
p37533
S'block'
p37534
sS'required'
p37535
I00
sS'group_name'
p37536
Nsa(dp37537
S'description'
p37538
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37539
sS'cpp_type'
p37540
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37541
sS'default'
p37542
g3
sS'name'
p37543
S'boundary'
p37544
sS'required'
p37545
I00
sS'group_name'
p37546
Nsa(dp37547
S'description'
p37548
S'minimum spacing of bubbles, measured from center to center\n'
p37549
sS'cpp_type'
p37550
S'double'
p37551
sS'default'
p37552
g3
sS'name'
p37553
S'bubspac'
p37554
sS'required'
p37555
I01
sS'group_name'
p37556
Nsa(dp37557
S'description'
p37558
S'3D microstructure will be columnar in the z-direction?\n'
p37559
sS'cpp_type'
p37560
S'bool'
p37561
sS'default'
p37562
S'0'
p37563
sS'name'
p37564
S'columnar_3D'
p37565
sS'required'
p37566
I00
sS'group_name'
p37567
Nsa(dp37568
S'description'
p37569
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37570
sS'cpp_type'
p37571
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37572
sS'default'
p37573
g3
sS'name'
p37574
S'control_tags'
p37575
sS'required'
p37576
I00
sS'group_name'
p37577
S'Advanced'
p37578
sa(dp37579
S'description'
p37580
S'Set the enabled status of the MooseObject.\n'
p37581
sS'cpp_type'
p37582
S'bool'
p37583
sS'default'
p37584
S'1'
p37585
sS'name'
p37586
S'enable'
p37587
sS'required'
p37588
I00
sS'group_name'
p37589
S'Advanced'
p37590
sa(dp37591
S'description'
p37592
S'Number of grains being represented by the order parameters\n'
p37593
sS'cpp_type'
p37594
S'unsigned int'
p37595
sS'default'
p37596
g3
sS'name'
p37597
S'grain_num'
p37598
sS'required'
p37599
I01
sS'group_name'
p37600
Nsa(dp37601
S'description'
p37602
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p37603
sS'cpp_type'
p37604
S'bool'
p37605
sS'default'
p37606
S'0'
p37607
sS'name'
p37608
S'ignore_uo_dependency'
p37609
sS'required'
p37610
I00
sS'group_name'
p37611
S'Advanced'
p37612
sa(dp37613
S'description'
p37614
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p37615
sS'cpp_type'
p37616
S'double'
p37617
sS'default'
p37618
S'0'
p37619
sS'name'
p37620
S'int_width'
p37621
sS'required'
p37622
I00
sS'group_name'
p37623
Nsa(dp37624
S'description'
p37625
S'The variable value inside the circle\n'
p37626
sS'cpp_type'
p37627
S'double'
p37628
sS'default'
p37629
g3
sS'name'
p37630
S'invalue'
p37631
sS'required'
p37632
I01
sS'group_name'
p37633
Nsa(dp37634
S'description'
p37635
S'The number of bubbles to place\n'
p37636
sS'cpp_type'
p37637
S'unsigned int'
p37638
sS'default'
p37639
g3
sS'name'
p37640
S'numbub'
p37641
sS'required'
p37642
I01
sS'group_name'
p37643
Nsa(dp37644
S'description'
p37645
S'The number of tries\n'
p37646
sS'cpp_type'
p37647
S'unsigned int'
p37648
sS'default'
p37649
S'1000'
p37650
sS'name'
p37651
S'numtries'
p37652
sS'required'
p37653
I00
sS'group_name'
p37654
Nsa(dp37655
S'description'
p37656
S'Number of order parameters\n'
p37657
sS'cpp_type'
p37658
S'unsigned int'
p37659
sS'default'
p37660
g3
sS'name'
p37661
S'op_num'
p37662
sS'required'
p37663
I01
sS'group_name'
p37664
Nsa(dp37665
S'description'
p37666
S'The variable value outside the circle\n'
p37667
sS'cpp_type'
p37668
S'double'
p37669
sS'default'
p37670
g3
sS'name'
p37671
S'outvalue'
p37672
sS'required'
p37673
I01
sS'group_name'
p37674
Nsa(dp37675
S'description'
p37676
S'Mean radius value for the circles\n'
p37677
sS'cpp_type'
p37678
S'double'
p37679
sS'default'
p37680
g3
sS'name'
p37681
S'radius'
p37682
sS'required'
p37683
I01
sS'group_name'
p37684
Nsa(dp37685
S'description'
p37686
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p37687
sS'cpp_type'
p37688
S'double'
p37689
sS'default'
p37690
S'0'
p37691
sS'name'
p37692
S'radius_variation'
p37693
sS'required'
p37694
I00
sS'group_name'
p37695
Nsa(dp37696
S'name'
p37697
S'radius_variation_type'
p37698
sS'cpp_type'
p37699
S'MooseEnum'
p37700
sS'default'
p37701
S'none'
p37702
sS'description'
p37703
S'Type of distribution that random circle radii will follow\n'
p37704
sS'required'
p37705
I00
sS'options'
p37706
S'uniform normal none'
p37707
sS'group_name'
p37708
Nsa(dp37709
S'description'
p37710
S'The random seed\n'
p37711
sS'cpp_type'
p37712
S'unsigned int'
p37713
sS'default'
p37714
S'12444'
p37715
sS'name'
p37716
S'rand_seed'
p37717
sS'required'
p37718
I00
sS'group_name'
p37719
Nsa(dp37720
S'description'
p37721
S'specifies the base name of the variables\n'
p37722
sS'cpp_type'
p37723
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37724
sS'default'
p37725
g3
sS'name'
p37726
S'var_name_base'
p37727
sS'required'
p37728
I01
sS'group_name'
p37729
Nsa(dp37730
S'description'
p37731
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p37732
sS'cpp_type'
p37733
S'bool'
p37734
sS'default'
p37735
S'0'
p37736
sS'name'
p37737
S'zero_gradient'
p37738
sS'required'
p37739
I00
sS'group_name'
p37740
NsasS'name'
p37741
S'/ICs/PolycrystalICs/PolycrystalVoronoiVoidIC'
p37742
sa(dp37743
S'description'
p37744
g3
sS'subblocks'
p37745
NsS'parameters'
p37746
(lp37747
(dp37748
S'name'
p37749
S'coloring_algorithm'
p37750
sS'cpp_type'
p37751
S'MooseEnum'
p37752
sS'default'
p37753
S'legacy'
p37754
sS'description'
p37755
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p37756
sS'required'
p37757
I00
sS'options'
p37758
S'legacy bt jp power greedy'
p37759
sS'group_name'
p37760
Nsa(dp37761
S'description'
p37762
S'The EBSDReader GeneralUserObject\n'
p37763
sS'cpp_type'
p37764
S'UserObjectName'
p37765
sS'default'
p37766
g3
sS'name'
p37767
S'ebsd_reader'
p37768
sS'required'
p37769
I01
sS'group_name'
p37770
Nsa(dp37771
S'description'
p37772
S'Specifies the number of order parameters to create\n'
p37773
sS'cpp_type'
p37774
S'unsigned int'
p37775
sS'default'
p37776
g3
sS'name'
p37777
S'op_num'
p37778
sS'required'
p37779
I01
sS'group_name'
p37780
Nsa(dp37781
S'description'
p37782
S'EBSD phase number to be assigned to this grain\n'
p37783
sS'cpp_type'
p37784
S'unsigned int'
p37785
sS'default'
p37786
g3
sS'name'
p37787
S'phase'
p37788
sS'required'
p37789
I00
sS'group_name'
p37790
Nsa(dp37791
S'description'
p37792
S'specifies the base name of the variables\n'
p37793
sS'cpp_type'
p37794
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37795
sS'default'
p37796
g3
sS'name'
p37797
S'var_name_base'
p37798
sS'required'
p37799
I01
sS'group_name'
p37800
NsasS'name'
p37801
S'/ICs/PolycrystalICs/ReconVarIC'
p37802
sa(dp37803
S'description'
p37804
g3
sS'subblocks'
p37805
NsS'parameters'
p37806
(lp37807
(dp37808
S'description'
p37809
S'number of order parameters to create\n'
p37810
sS'cpp_type'
p37811
S'unsigned int'
p37812
sS'default'
p37813
g3
sS'name'
p37814
S'op_num'
p37815
sS'required'
p37816
I01
sS'group_name'
p37817
Nsa(dp37818
S'description'
p37819
S'specifies the base name of the variables\n'
p37820
sS'cpp_type'
p37821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37822
sS'default'
p37823
g3
sS'name'
p37824
S'var_name_base'
p37825
sS'required'
p37826
I01
sS'group_name'
p37827
NsasS'name'
p37828
S'/ICs/PolycrystalICs/Tricrystal2CircleGrainsIC'
p37829
sasS'parameters'
p37830
NsS'name'
p37831
S'/ICs/PolycrystalICs'
p37832
sa(dp37833
S'description'
p37834
S'Random initial condition for a polycrystalline material\n'
p37835
sS'subblocks'
p37836
NsS'parameters'
p37837
(lp37838
(dp37839
S'description'
p37840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37841
sS'cpp_type'
p37842
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37843
sS'default'
p37844
g3
sS'name'
p37845
S'block'
p37846
sS'required'
p37847
I00
sS'group_name'
p37848
Nsa(dp37849
S'description'
p37850
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37851
sS'cpp_type'
p37852
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37853
sS'default'
p37854
g3
sS'name'
p37855
S'boundary'
p37856
sS'required'
p37857
I00
sS'group_name'
p37858
Nsa(dp37859
S'description'
p37860
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37861
sS'cpp_type'
p37862
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37863
sS'default'
p37864
g3
sS'name'
p37865
S'control_tags'
p37866
sS'required'
p37867
I00
sS'group_name'
p37868
S'Advanced'
p37869
sa(dp37870
S'description'
p37871
S'Set the enabled status of the MooseObject.\n'
p37872
sS'cpp_type'
p37873
S'bool'
p37874
sS'default'
p37875
S'1'
p37876
sS'name'
p37877
S'enable'
p37878
sS'required'
p37879
I00
sS'group_name'
p37880
S'Advanced'
p37881
sa(dp37882
S'description'
p37883
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p37884
sS'cpp_type'
p37885
S'bool'
p37886
sS'default'
p37887
S'0'
p37888
sS'name'
p37889
S'ignore_uo_dependency'
p37890
sS'required'
p37891
I00
sS'group_name'
p37892
S'Advanced'
p37893
sa(dp37894
S'description'
p37895
S'The index for the current order parameter\n'
p37896
sS'cpp_type'
p37897
S'unsigned int'
p37898
sS'default'
p37899
g3
sS'name'
p37900
S'op_index'
p37901
sS'required'
p37902
I01
sS'group_name'
p37903
Nsa(dp37904
S'description'
p37905
S'Number of order parameters\n'
p37906
sS'cpp_type'
p37907
S'unsigned int'
p37908
sS'default'
p37909
g3
sS'name'
p37910
S'op_num'
p37911
sS'required'
p37912
I01
sS'group_name'
p37913
Nsa(dp37914
S'description'
p37915
S'Type of random grain structure\n'
p37916
sS'cpp_type'
p37917
S'unsigned int'
p37918
sS'default'
p37919
g3
sS'name'
p37920
S'typ'
p37921
sS'required'
p37922
I01
sS'group_name'
p37923
Nsa(dp37924
S'description'
p37925
g3
sS'cpp_type'
p37926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37927
sS'default'
p37928
S'PolycrystalRandomIC'
p37929
sS'name'
p37930
S'type'
p37931
sS'required'
p37932
I00
sS'group_name'
p37933
Nsa(dp37934
S'description'
p37935
S'The variable this initial condition is supposed to provide values for.\n'
p37936
sS'cpp_type'
p37937
S'VariableName'
p37938
sS'default'
p37939
g3
sS'name'
p37940
S'variable'
p37941
sS'required'
p37942
I01
sS'group_name'
p37943
NsasS'name'
p37944
S'/ICs/PolycrystalRandomIC'
p37945
sa(dp37946
S'description'
p37947
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p37948
sS'subblocks'
p37949
NsS'parameters'
p37950
(lp37951
(dp37952
S'description'
p37953
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37954
sS'cpp_type'
p37955
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37956
sS'default'
p37957
g3
sS'name'
p37958
S'block'
p37959
sS'required'
p37960
I00
sS'group_name'
p37961
Nsa(dp37962
S'description'
p37963
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37964
sS'cpp_type'
p37965
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37966
sS'default'
p37967
g3
sS'name'
p37968
S'boundary'
p37969
sS'required'
p37970
I00
sS'group_name'
p37971
Nsa(dp37972
S'name'
p37973
S'coloring_algorithm'
p37974
sS'cpp_type'
p37975
S'MooseEnum'
p37976
sS'default'
p37977
S'legacy'
p37978
sS'description'
p37979
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p37980
sS'required'
p37981
I00
sS'options'
p37982
S'legacy bt jp power greedy'
p37983
sS'group_name'
p37984
Nsa(dp37985
S'description'
p37986
S'3D microstructure will be columnar in the z-direction?\n'
p37987
sS'cpp_type'
p37988
S'bool'
p37989
sS'default'
p37990
S'0'
p37991
sS'name'
p37992
S'columnar_3D'
p37993
sS'required'
p37994
I00
sS'group_name'
p37995
Nsa(dp37996
S'description'
p37997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37998
sS'cpp_type'
p37999
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38000
sS'default'
p38001
g3
sS'name'
p38002
S'control_tags'
p38003
sS'required'
p38004
I00
sS'group_name'
p38005
S'Advanced'
p38006
sa(dp38007
S'description'
p38008
S'Set the enabled status of the MooseObject.\n'
p38009
sS'cpp_type'
p38010
S'bool'
p38011
sS'default'
p38012
S'1'
p38013
sS'name'
p38014
S'enable'
p38015
sS'required'
p38016
I00
sS'group_name'
p38017
S'Advanced'
p38018
sa(dp38019
S'description'
p38020
S'Number of grains being represented by the order parameters\n'
p38021
sS'cpp_type'
p38022
S'unsigned int'
p38023
sS'default'
p38024
g3
sS'name'
p38025
S'grain_num'
p38026
sS'required'
p38027
I01
sS'group_name'
p38028
Nsa(dp38029
S'description'
p38030
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38031
sS'cpp_type'
p38032
S'bool'
p38033
sS'default'
p38034
S'0'
p38035
sS'name'
p38036
S'ignore_uo_dependency'
p38037
sS'required'
p38038
I00
sS'group_name'
p38039
S'Advanced'
p38040
sa(dp38041
S'description'
p38042
S'The index for the current order parameter\n'
p38043
sS'cpp_type'
p38044
S'unsigned int'
p38045
sS'default'
p38046
g3
sS'name'
p38047
S'op_index'
p38048
sS'required'
p38049
I01
sS'group_name'
p38050
Nsa(dp38051
S'description'
p38052
S'Number of order parameters\n'
p38053
sS'cpp_type'
p38054
S'unsigned int'
p38055
sS'default'
p38056
g3
sS'name'
p38057
S'op_num'
p38058
sS'required'
p38059
I01
sS'group_name'
p38060
Nsa(dp38061
S'description'
p38062
S'The random seed\n'
p38063
sS'cpp_type'
p38064
S'unsigned int'
p38065
sS'default'
p38066
S'12444'
p38067
sS'name'
p38068
S'rand_seed'
p38069
sS'required'
p38070
I00
sS'group_name'
p38071
Nsa(dp38072
S'description'
p38073
g3
sS'cpp_type'
p38074
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38075
sS'default'
p38076
S'PolycrystalReducedIC'
p38077
sS'name'
p38078
S'type'
p38079
sS'required'
p38080
I00
sS'group_name'
p38081
Nsa(dp38082
S'description'
p38083
S'The variable this initial condition is supposed to provide values for.\n'
p38084
sS'cpp_type'
p38085
S'VariableName'
p38086
sS'default'
p38087
g3
sS'name'
p38088
S'variable'
p38089
sS'required'
p38090
I01
sS'group_name'
p38091
NsasS'name'
p38092
S'/ICs/PolycrystalReducedIC'
p38093
sa(dp38094
S'description'
p38095
S'Random distribution of smooth circles with given minimum spacing\n'
p38096
sS'subblocks'
p38097
NsS'parameters'
p38098
(lp38099
(dp38100
S'description'
p38101
S'in 3D, whether the objects are spheres or columns\n'
p38102
sS'cpp_type'
p38103
S'bool'
p38104
sS'default'
p38105
S'1'
p38106
sS'name'
p38107
S'3D_spheres'
p38108
sS'required'
p38109
I00
sS'group_name'
p38110
Nsa(dp38111
S'description'
p38112
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38113
sS'cpp_type'
p38114
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38115
sS'default'
p38116
g3
sS'name'
p38117
S'block'
p38118
sS'required'
p38119
I00
sS'group_name'
p38120
Nsa(dp38121
S'description'
p38122
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38123
sS'cpp_type'
p38124
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38125
sS'default'
p38126
g3
sS'name'
p38127
S'boundary'
p38128
sS'required'
p38129
I00
sS'group_name'
p38130
Nsa(dp38131
S'description'
p38132
S'minimum spacing of bubbles, measured from center to center\n'
p38133
sS'cpp_type'
p38134
S'double'
p38135
sS'default'
p38136
g3
sS'name'
p38137
S'bubspac'
p38138
sS'required'
p38139
I01
sS'group_name'
p38140
Nsa(dp38141
S'description'
p38142
S'3D microstructure will be columnar in the z-direction?\n'
p38143
sS'cpp_type'
p38144
S'bool'
p38145
sS'default'
p38146
S'0'
p38147
sS'name'
p38148
S'columnar_3D'
p38149
sS'required'
p38150
I00
sS'group_name'
p38151
Nsa(dp38152
S'description'
p38153
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38154
sS'cpp_type'
p38155
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38156
sS'default'
p38157
g3
sS'name'
p38158
S'control_tags'
p38159
sS'required'
p38160
I00
sS'group_name'
p38161
S'Advanced'
p38162
sa(dp38163
S'description'
p38164
S'Set the enabled status of the MooseObject.\n'
p38165
sS'cpp_type'
p38166
S'bool'
p38167
sS'default'
p38168
S'1'
p38169
sS'name'
p38170
S'enable'
p38171
sS'required'
p38172
I00
sS'group_name'
p38173
S'Advanced'
p38174
sa(dp38175
S'description'
p38176
S'Number of grains being represented by the order parameters\n'
p38177
sS'cpp_type'
p38178
S'unsigned int'
p38179
sS'default'
p38180
g3
sS'name'
p38181
S'grain_num'
p38182
sS'required'
p38183
I01
sS'group_name'
p38184
Nsa(dp38185
S'description'
p38186
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38187
sS'cpp_type'
p38188
S'bool'
p38189
sS'default'
p38190
S'0'
p38191
sS'name'
p38192
S'ignore_uo_dependency'
p38193
sS'required'
p38194
I00
sS'group_name'
p38195
S'Advanced'
p38196
sa(dp38197
S'description'
p38198
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p38199
sS'cpp_type'
p38200
S'double'
p38201
sS'default'
p38202
S'0'
p38203
sS'name'
p38204
S'int_width'
p38205
sS'required'
p38206
I00
sS'group_name'
p38207
Nsa(dp38208
S'description'
p38209
S'The variable value inside the circle\n'
p38210
sS'cpp_type'
p38211
S'double'
p38212
sS'default'
p38213
g3
sS'name'
p38214
S'invalue'
p38215
sS'required'
p38216
I01
sS'group_name'
p38217
Nsa(dp38218
S'description'
p38219
S'The number of bubbles to place\n'
p38220
sS'cpp_type'
p38221
S'unsigned int'
p38222
sS'default'
p38223
g3
sS'name'
p38224
S'numbub'
p38225
sS'required'
p38226
I01
sS'group_name'
p38227
Nsa(dp38228
S'description'
p38229
S'The number of tries\n'
p38230
sS'cpp_type'
p38231
S'unsigned int'
p38232
sS'default'
p38233
S'1000'
p38234
sS'name'
p38235
S'numtries'
p38236
sS'required'
p38237
I00
sS'group_name'
p38238
Nsa(dp38239
S'description'
p38240
S'The index for the current order parameter, not needed if structure_type = voids\n'
p38241
sS'cpp_type'
p38242
S'unsigned int'
p38243
sS'default'
p38244
S'0'
p38245
sS'name'
p38246
S'op_index'
p38247
sS'required'
p38248
I00
sS'group_name'
p38249
Nsa(dp38250
S'description'
p38251
S'Number of order parameters\n'
p38252
sS'cpp_type'
p38253
S'unsigned int'
p38254
sS'default'
p38255
g3
sS'name'
p38256
S'op_num'
p38257
sS'required'
p38258
I01
sS'group_name'
p38259
Nsa(dp38260
S'description'
p38261
S'The variable value outside the circle\n'
p38262
sS'cpp_type'
p38263
S'double'
p38264
sS'default'
p38265
g3
sS'name'
p38266
S'outvalue'
p38267
sS'required'
p38268
I01
sS'group_name'
p38269
Nsa(dp38270
S'description'
p38271
S'Mean radius value for the circles\n'
p38272
sS'cpp_type'
p38273
S'double'
p38274
sS'default'
p38275
g3
sS'name'
p38276
S'radius'
p38277
sS'required'
p38278
I01
sS'group_name'
p38279
Nsa(dp38280
S'description'
p38281
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p38282
sS'cpp_type'
p38283
S'double'
p38284
sS'default'
p38285
S'0'
p38286
sS'name'
p38287
S'radius_variation'
p38288
sS'required'
p38289
I00
sS'group_name'
p38290
Nsa(dp38291
S'name'
p38292
S'radius_variation_type'
p38293
sS'cpp_type'
p38294
S'MooseEnum'
p38295
sS'default'
p38296
S'none'
p38297
sS'description'
p38298
S'Type of distribution that random circle radii will follow\n'
p38299
sS'required'
p38300
I00
sS'options'
p38301
S'uniform normal none'
p38302
sS'group_name'
p38303
Nsa(dp38304
S'description'
p38305
S'The random seed\n'
p38306
sS'cpp_type'
p38307
S'unsigned int'
p38308
sS'default'
p38309
S'12444'
p38310
sS'name'
p38311
S'rand_seed'
p38312
sS'required'
p38313
I00
sS'group_name'
p38314
Nsa(dp38315
S'name'
p38316
S'structure_type'
p38317
sS'cpp_type'
p38318
S'MooseEnum'
p38319
sS'default'
p38320
g3
sS'description'
p38321
S'Which structure type is being initialized, grains or voids\n'
p38322
sS'required'
p38323
I01
sS'options'
p38324
S'grains voids'
p38325
sS'group_name'
p38326
Nsa(dp38327
S'description'
p38328
g3
sS'cpp_type'
p38329
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38330
sS'default'
p38331
S'PolycrystalVoronoiVoidIC'
p38332
sS'name'
p38333
S'type'
p38334
sS'required'
p38335
I00
sS'group_name'
p38336
Nsa(dp38337
S'description'
p38338
S'The variable this initial condition is supposed to provide values for.\n'
p38339
sS'cpp_type'
p38340
S'VariableName'
p38341
sS'default'
p38342
g3
sS'name'
p38343
S'variable'
p38344
sS'required'
p38345
I01
sS'group_name'
p38346
Nsa(dp38347
S'description'
p38348
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p38349
sS'cpp_type'
p38350
S'bool'
p38351
sS'default'
p38352
S'0'
p38353
sS'name'
p38354
S'zero_gradient'
p38355
sS'required'
p38356
I00
sS'group_name'
p38357
NsasS'name'
p38358
S'/ICs/PolycrystalVoronoiVoidIC'
p38359
sa(dp38360
S'description'
p38361
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p38362
sS'subblocks'
p38363
NsS'parameters'
p38364
(lp38365
(dp38366
S'description'
p38367
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38368
sS'cpp_type'
p38369
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38370
sS'default'
p38371
g3
sS'name'
p38372
S'block'
p38373
sS'required'
p38374
I00
sS'group_name'
p38375
Nsa(dp38376
S'description'
p38377
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38378
sS'cpp_type'
p38379
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38380
sS'default'
p38381
g3
sS'name'
p38382
S'boundary'
p38383
sS'required'
p38384
I00
sS'group_name'
p38385
Nsa(dp38386
S'description'
p38387
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38388
sS'cpp_type'
p38389
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38390
sS'default'
p38391
g3
sS'name'
p38392
S'control_tags'
p38393
sS'required'
p38394
I00
sS'group_name'
p38395
S'Advanced'
p38396
sa(dp38397
S'description'
p38398
S'Set the enabled status of the MooseObject.\n'
p38399
sS'cpp_type'
p38400
S'bool'
p38401
sS'default'
p38402
S'1'
p38403
sS'name'
p38404
S'enable'
p38405
sS'required'
p38406
I00
sS'group_name'
p38407
S'Advanced'
p38408
sa(dp38409
S'description'
p38410
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38411
sS'cpp_type'
p38412
S'bool'
p38413
sS'default'
p38414
S'0'
p38415
sS'name'
p38416
S'ignore_uo_dependency'
p38417
sS'required'
p38418
I00
sS'group_name'
p38419
S'Advanced'
p38420
sa(dp38421
S'description'
p38422
g3
sS'cpp_type'
p38423
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38424
sS'default'
p38425
S'RampIC'
p38426
sS'name'
p38427
S'type'
p38428
sS'required'
p38429
I00
sS'group_name'
p38430
Nsa(dp38431
S'description'
p38432
S'The value on left (xmin) boundary.\n'
p38433
sS'cpp_type'
p38434
S'double'
p38435
sS'default'
p38436
g3
sS'name'
p38437
S'value_left'
p38438
sS'required'
p38439
I01
sS'group_name'
p38440
Nsa(dp38441
S'description'
p38442
S'The value on right (xmax) boundary.\n'
p38443
sS'cpp_type'
p38444
S'double'
p38445
sS'default'
p38446
g3
sS'name'
p38447
S'value_right'
p38448
sS'required'
p38449
I01
sS'group_name'
p38450
Nsa(dp38451
S'description'
p38452
S'The variable this initial condition is supposed to provide values for.\n'
p38453
sS'cpp_type'
p38454
S'VariableName'
p38455
sS'default'
p38456
g3
sS'name'
p38457
S'variable'
p38458
sS'required'
p38459
I01
sS'group_name'
p38460
NsasS'name'
p38461
S'/ICs/RampIC'
p38462
sa(dp38463
S'description'
p38464
g3
sS'subblocks'
p38465
NsS'parameters'
p38466
(lp38467
(dp38468
S'description'
p38469
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38470
sS'cpp_type'
p38471
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38472
sS'default'
p38473
g3
sS'name'
p38474
S'block'
p38475
sS'required'
p38476
I00
sS'group_name'
p38477
Nsa(dp38478
S'description'
p38479
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38480
sS'cpp_type'
p38481
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38482
sS'default'
p38483
g3
sS'name'
p38484
S'boundary'
p38485
sS'required'
p38486
I00
sS'group_name'
p38487
Nsa(dp38488
S'description'
p38489
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38490
sS'cpp_type'
p38491
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38492
sS'default'
p38493
g3
sS'name'
p38494
S'control_tags'
p38495
sS'required'
p38496
I00
sS'group_name'
p38497
S'Advanced'
p38498
sa(dp38499
S'description'
p38500
S'Set the enabled status of the MooseObject.\n'
p38501
sS'cpp_type'
p38502
S'bool'
p38503
sS'default'
p38504
S'1'
p38505
sS'name'
p38506
S'enable'
p38507
sS'required'
p38508
I00
sS'group_name'
p38509
S'Advanced'
p38510
sa(dp38511
S'description'
p38512
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38513
sS'cpp_type'
p38514
S'bool'
p38515
sS'default'
p38516
S'0'
p38517
sS'name'
p38518
S'ignore_uo_dependency'
p38519
sS'required'
p38520
I00
sS'group_name'
p38521
S'Advanced'
p38522
sa(dp38523
S'description'
p38524
S'Upper bound of the randomly generated values\n'
p38525
sS'cpp_type'
p38526
S'double'
p38527
sS'default'
p38528
S'1'
p38529
sS'name'
p38530
S'max'
p38531
sS'required'
p38532
I00
sS'group_name'
p38533
Nsa(dp38534
S'description'
p38535
S'Lower bound of the randomly generated values\n'
p38536
sS'cpp_type'
p38537
S'double'
p38538
sS'default'
p38539
S'0'
p38540
sS'name'
p38541
S'min'
p38542
sS'required'
p38543
I00
sS'group_name'
p38544
Nsa(dp38545
S'description'
p38546
S'Seed value for the random number generator\n'
p38547
sS'cpp_type'
p38548
S'unsigned int'
p38549
sS'default'
p38550
S'0'
p38551
sS'name'
p38552
S'seed'
p38553
sS'required'
p38554
I00
sS'group_name'
p38555
Nsa(dp38556
S'description'
p38557
g3
sS'cpp_type'
p38558
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38559
sS'default'
p38560
S'RandomIC'
p38561
sS'name'
p38562
S'type'
p38563
sS'required'
p38564
I00
sS'group_name'
p38565
Nsa(dp38566
S'description'
p38567
S'The variable this initial condition is supposed to provide values for.\n'
p38568
sS'cpp_type'
p38569
S'VariableName'
p38570
sS'default'
p38571
g3
sS'name'
p38572
S'variable'
p38573
sS'required'
p38574
I01
sS'group_name'
p38575
NsasS'name'
p38576
S'/ICs/RandomIC'
p38577
sa(dp38578
S'description'
p38579
g3
sS'subblocks'
p38580
NsS'parameters'
p38581
(lp38582
(dp38583
S'description'
p38584
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38585
sS'cpp_type'
p38586
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38587
sS'default'
p38588
g3
sS'name'
p38589
S'block'
p38590
sS'required'
p38591
I00
sS'group_name'
p38592
Nsa(dp38593
S'description'
p38594
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38595
sS'cpp_type'
p38596
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38597
sS'default'
p38598
g3
sS'name'
p38599
S'boundary'
p38600
sS'required'
p38601
I00
sS'group_name'
p38602
Nsa(dp38603
S'description'
p38604
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38605
sS'cpp_type'
p38606
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38607
sS'default'
p38608
g3
sS'name'
p38609
S'control_tags'
p38610
sS'required'
p38611
I00
sS'group_name'
p38612
S'Advanced'
p38613
sa(dp38614
S'description'
p38615
S'The EBSDReader object holding the EBSD data\n'
p38616
sS'cpp_type'
p38617
S'UserObjectName'
p38618
sS'default'
p38619
g3
sS'name'
p38620
S'ebsd_reader'
p38621
sS'required'
p38622
I01
sS'group_name'
p38623
Nsa(dp38624
S'description'
p38625
S'Set the enabled status of the MooseObject.\n'
p38626
sS'cpp_type'
p38627
S'bool'
p38628
sS'default'
p38629
S'1'
p38630
sS'name'
p38631
S'enable'
p38632
sS'required'
p38633
I00
sS'group_name'
p38634
S'Advanced'
p38635
sa(dp38636
S'description'
p38637
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38638
sS'cpp_type'
p38639
S'bool'
p38640
sS'default'
p38641
S'0'
p38642
sS'name'
p38643
S'ignore_uo_dependency'
p38644
sS'required'
p38645
I00
sS'group_name'
p38646
S'Advanced'
p38647
sa(dp38648
S'description'
p38649
S'EBSD phase number this variable is to represent\n'
p38650
sS'cpp_type'
p38651
S'unsigned int'
p38652
sS'default'
p38653
g3
sS'name'
p38654
S'phase'
p38655
sS'required'
p38656
I01
sS'group_name'
p38657
Nsa(dp38658
S'description'
p38659
g3
sS'cpp_type'
p38660
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38661
sS'default'
p38662
S'ReconPhaseVarIC'
p38663
sS'name'
p38664
S'type'
p38665
sS'required'
p38666
I00
sS'group_name'
p38667
Nsa(dp38668
S'description'
p38669
S'The variable this initial condition is supposed to provide values for.\n'
p38670
sS'cpp_type'
p38671
S'VariableName'
p38672
sS'default'
p38673
g3
sS'name'
p38674
S'variable'
p38675
sS'required'
p38676
I01
sS'group_name'
p38677
NsasS'name'
p38678
S'/ICs/ReconPhaseVarIC'
p38679
sa(dp38680
S'description'
p38681
g3
sS'subblocks'
p38682
NsS'parameters'
p38683
(lp38684
(dp38685
S'description'
p38686
g3
sS'cpp_type'
p38687
S'bool'
p38688
sS'default'
p38689
S'0'
p38690
sS'name'
p38691
S'all_op_elemental'
p38692
sS'required'
p38693
I00
sS'group_name'
p38694
Nsa(dp38695
S'description'
p38696
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38697
sS'cpp_type'
p38698
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38699
sS'default'
p38700
g3
sS'name'
p38701
S'block'
p38702
sS'required'
p38703
I00
sS'group_name'
p38704
Nsa(dp38705
S'description'
p38706
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38707
sS'cpp_type'
p38708
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38709
sS'default'
p38710
g3
sS'name'
p38711
S'boundary'
p38712
sS'required'
p38713
I00
sS'group_name'
p38714
Nsa(dp38715
S'name'
p38716
S'coloring_algorithm'
p38717
sS'cpp_type'
p38718
S'MooseEnum'
p38719
sS'default'
p38720
S'legacy'
p38721
sS'description'
p38722
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p38723
sS'required'
p38724
I00
sS'options'
p38725
S'legacy bt jp power greedy'
p38726
sS'group_name'
p38727
Nsa(dp38728
S'description'
p38729
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38730
sS'cpp_type'
p38731
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38732
sS'default'
p38733
g3
sS'name'
p38734
S'control_tags'
p38735
sS'required'
p38736
I00
sS'group_name'
p38737
S'Advanced'
p38738
sa(dp38739
S'description'
p38740
S'The EBSDReader GeneralUserObject\n'
p38741
sS'cpp_type'
p38742
S'UserObjectName'
p38743
sS'default'
p38744
g3
sS'name'
p38745
S'ebsd_reader'
p38746
sS'required'
p38747
I01
sS'group_name'
p38748
Nsa(dp38749
S'description'
p38750
S'Set the enabled status of the MooseObject.\n'
p38751
sS'cpp_type'
p38752
S'bool'
p38753
sS'default'
p38754
S'1'
p38755
sS'name'
p38756
S'enable'
p38757
sS'required'
p38758
I00
sS'group_name'
p38759
S'Advanced'
p38760
sa(dp38761
S'description'
p38762
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38763
sS'cpp_type'
p38764
S'bool'
p38765
sS'default'
p38766
S'0'
p38767
sS'name'
p38768
S'ignore_uo_dependency'
p38769
sS'required'
p38770
I00
sS'group_name'
p38771
S'Advanced'
p38772
sa(dp38773
S'description'
p38774
S'The index for the current order parameter\n'
p38775
sS'cpp_type'
p38776
S'unsigned int'
p38777
sS'default'
p38778
g3
sS'name'
p38779
S'op_index'
p38780
sS'required'
p38781
I01
sS'group_name'
p38782
Nsa(dp38783
S'description'
p38784
S'Specifies the number of order parameters to create\n'
p38785
sS'cpp_type'
p38786
S'unsigned int'
p38787
sS'default'
p38788
g3
sS'name'
p38789
S'op_num'
p38790
sS'required'
p38791
I01
sS'group_name'
p38792
Nsa(dp38793
S'description'
p38794
S'EBSD phase number to be assigned to this grain\n'
p38795
sS'cpp_type'
p38796
S'unsigned int'
p38797
sS'default'
p38798
g3
sS'name'
p38799
S'phase'
p38800
sS'required'
p38801
I00
sS'group_name'
p38802
Nsa(dp38803
S'description'
p38804
g3
sS'cpp_type'
p38805
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38806
sS'default'
p38807
S'ReconVarIC'
p38808
sS'name'
p38809
S'type'
p38810
sS'required'
p38811
I00
sS'group_name'
p38812
Nsa(dp38813
S'description'
p38814
S'The variable this initial condition is supposed to provide values for.\n'
p38815
sS'cpp_type'
p38816
S'VariableName'
p38817
sS'default'
p38818
g3
sS'name'
p38819
S'variable'
p38820
sS'required'
p38821
I01
sS'group_name'
p38822
NsasS'name'
p38823
S'/ICs/ReconVarIC'
p38824
sa(dp38825
S'description'
p38826
S'Random noise with different min/max inside/outside of a bounding box\n'
p38827
sS'subblocks'
p38828
NsS'parameters'
p38829
(lp38830
(dp38831
S'description'
p38832
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38833
sS'cpp_type'
p38834
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38835
sS'default'
p38836
g3
sS'name'
p38837
S'block'
p38838
sS'required'
p38839
I00
sS'group_name'
p38840
Nsa(dp38841
S'description'
p38842
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38843
sS'cpp_type'
p38844
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38845
sS'default'
p38846
g3
sS'name'
p38847
S'boundary'
p38848
sS'required'
p38849
I00
sS'group_name'
p38850
Nsa(dp38851
S'description'
p38852
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38853
sS'cpp_type'
p38854
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38855
sS'default'
p38856
g3
sS'name'
p38857
S'control_tags'
p38858
sS'required'
p38859
I00
sS'group_name'
p38860
S'Advanced'
p38861
sa(dp38862
S'description'
p38863
S'Set the enabled status of the MooseObject.\n'
p38864
sS'cpp_type'
p38865
S'bool'
p38866
sS'default'
p38867
S'1'
p38868
sS'name'
p38869
S'enable'
p38870
sS'required'
p38871
I00
sS'group_name'
p38872
S'Advanced'
p38873
sa(dp38874
S'description'
p38875
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p38876
sS'cpp_type'
p38877
S'bool'
p38878
sS'default'
p38879
S'0'
p38880
sS'name'
p38881
S'ignore_uo_dependency'
p38882
sS'required'
p38883
I00
sS'group_name'
p38884
S'Advanced'
p38885
sa(dp38886
S'description'
p38887
S'The min value of the variable invalue the box\n'
p38888
sS'cpp_type'
p38889
S'double'
p38890
sS'default'
p38891
S'0'
p38892
sS'name'
p38893
S'mn_invalue'
p38894
sS'required'
p38895
I00
sS'group_name'
p38896
Nsa(dp38897
S'description'
p38898
S'The min value of the variable outvalue the box\n'
p38899
sS'cpp_type'
p38900
S'double'
p38901
sS'default'
p38902
S'0'
p38903
sS'name'
p38904
S'mn_outvalue'
p38905
sS'required'
p38906
I00
sS'group_name'
p38907
Nsa(dp38908
S'description'
p38909
S'The max value of the variable invalue the box\n'
p38910
sS'cpp_type'
p38911
S'double'
p38912
sS'default'
p38913
g3
sS'name'
p38914
S'mx_invalue'
p38915
sS'required'
p38916
I01
sS'group_name'
p38917
Nsa(dp38918
S'description'
p38919
S'The max value of the variable outvalue the box\n'
p38920
sS'cpp_type'
p38921
S'double'
p38922
sS'default'
p38923
g3
sS'name'
p38924
S'mx_outvalue'
p38925
sS'required'
p38926
I01
sS'group_name'
p38927
Nsa(dp38928
S'description'
p38929
g3
sS'cpp_type'
p38930
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38931
sS'default'
p38932
S'RndBoundingBoxIC'
p38933
sS'name'
p38934
S'type'
p38935
sS'required'
p38936
I00
sS'group_name'
p38937
Nsa(dp38938
S'description'
p38939
S'The variable this initial condition is supposed to provide values for.\n'
p38940
sS'cpp_type'
p38941
S'VariableName'
p38942
sS'default'
p38943
g3
sS'name'
p38944
S'variable'
p38945
sS'required'
p38946
I01
sS'group_name'
p38947
Nsa(dp38948
S'description'
p38949
S'The x coordinate of the lower left-hand corner of the box\n'
p38950
sS'cpp_type'
p38951
S'double'
p38952
sS'default'
p38953
g3
sS'name'
p38954
S'x1'
p38955
sS'required'
p38956
I01
sS'group_name'
p38957
Nsa(dp38958
S'description'
p38959
S'The x coordinate of the upper right-hand corner of the box\n'
p38960
sS'cpp_type'
p38961
S'double'
p38962
sS'default'
p38963
g3
sS'name'
p38964
S'x2'
p38965
sS'required'
p38966
I01
sS'group_name'
p38967
Nsa(dp38968
S'description'
p38969
S'The y coordinate of the lower left-hand corner of the box\n'
p38970
sS'cpp_type'
p38971
S'double'
p38972
sS'default'
p38973
g3
sS'name'
p38974
S'y1'
p38975
sS'required'
p38976
I01
sS'group_name'
p38977
Nsa(dp38978
S'description'
p38979
S'The y coordinate of the upper right-hand corner of the box\n'
p38980
sS'cpp_type'
p38981
S'double'
p38982
sS'default'
p38983
g3
sS'name'
p38984
S'y2'
p38985
sS'required'
p38986
I01
sS'group_name'
p38987
Nsa(dp38988
S'description'
p38989
S'The z coordinate of the lower left-hand corner of the box\n'
p38990
sS'cpp_type'
p38991
S'double'
p38992
sS'default'
p38993
S'0'
p38994
sS'name'
p38995
S'z1'
p38996
sS'required'
p38997
I00
sS'group_name'
p38998
Nsa(dp38999
S'description'
p39000
S'The z coordinate of the upper right-hand corner of the box\n'
p39001
sS'cpp_type'
p39002
S'double'
p39003
sS'default'
p39004
S'0'
p39005
sS'name'
p39006
S'z2'
p39007
sS'required'
p39008
I00
sS'group_name'
p39009
NsasS'name'
p39010
S'/ICs/RndBoundingBoxIC'
p39011
sa(dp39012
S'description'
p39013
S'Random noise with different min/max inside/outside of a smooth circle\n'
p39014
sS'subblocks'
p39015
NsS'parameters'
p39016
(lp39017
(dp39018
S'description'
p39019
S'in 3D, whether the objects are spheres or columns\n'
p39020
sS'cpp_type'
p39021
S'bool'
p39022
sS'default'
p39023
S'1'
p39024
sS'name'
p39025
S'3D_spheres'
p39026
sS'required'
p39027
I00
sS'group_name'
p39028
Nsa(dp39029
S'description'
p39030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39031
sS'cpp_type'
p39032
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39033
sS'default'
p39034
g3
sS'name'
p39035
S'block'
p39036
sS'required'
p39037
I00
sS'group_name'
p39038
Nsa(dp39039
S'description'
p39040
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39041
sS'cpp_type'
p39042
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39043
sS'default'
p39044
g3
sS'name'
p39045
S'boundary'
p39046
sS'required'
p39047
I00
sS'group_name'
p39048
Nsa(dp39049
S'description'
p39050
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39051
sS'cpp_type'
p39052
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39053
sS'default'
p39054
g3
sS'name'
p39055
S'control_tags'
p39056
sS'required'
p39057
I00
sS'group_name'
p39058
S'Advanced'
p39059
sa(dp39060
S'description'
p39061
S'Set the enabled status of the MooseObject.\n'
p39062
sS'cpp_type'
p39063
S'bool'
p39064
sS'default'
p39065
S'1'
p39066
sS'name'
p39067
S'enable'
p39068
sS'required'
p39069
I00
sS'group_name'
p39070
S'Advanced'
p39071
sa(dp39072
S'description'
p39073
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39074
sS'cpp_type'
p39075
S'bool'
p39076
sS'default'
p39077
S'0'
p39078
sS'name'
p39079
S'ignore_uo_dependency'
p39080
sS'required'
p39081
I00
sS'group_name'
p39082
S'Advanced'
p39083
sa(dp39084
S'description'
p39085
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39086
sS'cpp_type'
p39087
S'double'
p39088
sS'default'
p39089
S'0'
p39090
sS'name'
p39091
S'int_width'
p39092
sS'required'
p39093
I00
sS'group_name'
p39094
Nsa(dp39095
S'description'
p39096
S'The variable value inside the circle\n'
p39097
sS'cpp_type'
p39098
S'double'
p39099
sS'default'
p39100
g3
sS'name'
p39101
S'invalue'
p39102
sS'required'
p39103
I01
sS'group_name'
p39104
Nsa(dp39105
S'description'
p39106
S'The variable value outside the circle\n'
p39107
sS'cpp_type'
p39108
S'double'
p39109
sS'default'
p39110
g3
sS'name'
p39111
S'outvalue'
p39112
sS'required'
p39113
I01
sS'group_name'
p39114
Nsa(dp39115
S'description'
p39116
S'The radius of a circle\n'
p39117
sS'cpp_type'
p39118
S'double'
p39119
sS'default'
p39120
g3
sS'name'
p39121
S'radius'
p39122
sS'required'
p39123
I01
sS'group_name'
p39124
Nsa(dp39125
S'description'
p39126
S'Seed value for the random number generator\n'
p39127
sS'cpp_type'
p39128
S'unsigned int'
p39129
sS'default'
p39130
S'12345'
p39131
sS'name'
p39132
S'rand_seed'
p39133
sS'required'
p39134
I00
sS'group_name'
p39135
Nsa(dp39136
S'description'
p39137
g3
sS'cpp_type'
p39138
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39139
sS'default'
p39140
S'RndSmoothCircleIC'
p39141
sS'name'
p39142
S'type'
p39143
sS'required'
p39144
I00
sS'group_name'
p39145
Nsa(dp39146
S'description'
p39147
S'The variable this initial condition is supposed to provide values for.\n'
p39148
sS'cpp_type'
p39149
S'VariableName'
p39150
sS'default'
p39151
g3
sS'name'
p39152
S'variable'
p39153
sS'required'
p39154
I01
sS'group_name'
p39155
Nsa(dp39156
S'description'
p39157
S'Plus or minus this amount on the invalue\n'
p39158
sS'cpp_type'
p39159
S'double'
p39160
sS'default'
p39161
g3
sS'name'
p39162
S'variation_invalue'
p39163
sS'required'
p39164
I01
sS'group_name'
p39165
Nsa(dp39166
S'description'
p39167
S'Plus or minus this amount on the outvalue\n'
p39168
sS'cpp_type'
p39169
S'double'
p39170
sS'default'
p39171
g3
sS'name'
p39172
S'variation_outvalue'
p39173
sS'required'
p39174
I01
sS'group_name'
p39175
Nsa(dp39176
S'description'
p39177
S'The x coordinate of the circle center\n'
p39178
sS'cpp_type'
p39179
S'double'
p39180
sS'default'
p39181
g3
sS'name'
p39182
S'x1'
p39183
sS'required'
p39184
I01
sS'group_name'
p39185
Nsa(dp39186
S'description'
p39187
S'The y coordinate of the circle center\n'
p39188
sS'cpp_type'
p39189
S'double'
p39190
sS'default'
p39191
g3
sS'name'
p39192
S'y1'
p39193
sS'required'
p39194
I01
sS'group_name'
p39195
Nsa(dp39196
S'description'
p39197
S'The z coordinate of the circle center\n'
p39198
sS'cpp_type'
p39199
S'double'
p39200
sS'default'
p39201
S'0'
p39202
sS'name'
p39203
S'z1'
p39204
sS'required'
p39205
I00
sS'group_name'
p39206
Nsa(dp39207
S'description'
p39208
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p39209
sS'cpp_type'
p39210
S'bool'
p39211
sS'default'
p39212
S'0'
p39213
sS'name'
p39214
S'zero_gradient'
p39215
sS'required'
p39216
I00
sS'group_name'
p39217
NsasS'name'
p39218
S'/ICs/RndSmoothCircleIC'
p39219
sa(dp39220
S'description'
p39221
g3
sS'subblocks'
p39222
NsS'parameters'
p39223
(lp39224
(dp39225
S'description'
p39226
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39227
sS'cpp_type'
p39228
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39229
sS'default'
p39230
g3
sS'name'
p39231
S'control_tags'
p39232
sS'required'
p39233
I00
sS'group_name'
p39234
S'Advanced'
p39235
sa(dp39236
S'description'
p39237
S'Set the enabled status of the MooseObject.\n'
p39238
sS'cpp_type'
p39239
S'bool'
p39240
sS'default'
p39241
S'1'
p39242
sS'name'
p39243
S'enable'
p39244
sS'required'
p39245
I00
sS'group_name'
p39246
S'Advanced'
p39247
sa(dp39248
S'description'
p39249
g3
sS'cpp_type'
p39250
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39251
sS'default'
p39252
S'ScalarComponentIC'
p39253
sS'name'
p39254
S'type'
p39255
sS'required'
p39256
I00
sS'group_name'
p39257
Nsa(dp39258
S'description'
p39259
S'Initial values to initialize the scalar variable.\n'
p39260
sS'cpp_type'
p39261
S'std::vector<double, std::allocator<double> >'
p39262
sS'default'
p39263
g3
sS'name'
p39264
S'values'
p39265
sS'required'
p39266
I01
sS'group_name'
p39267
Nsa(dp39268
S'description'
p39269
S'The variable this initial condition is supposed to provide values for.\n'
p39270
sS'cpp_type'
p39271
S'VariableName'
p39272
sS'default'
p39273
g3
sS'name'
p39274
S'variable'
p39275
sS'required'
p39276
I00
sS'group_name'
p39277
NsasS'name'
p39278
S'/ICs/ScalarComponentIC'
p39279
sa(dp39280
S'description'
p39281
g3
sS'subblocks'
p39282
NsS'parameters'
p39283
(lp39284
(dp39285
S'description'
p39286
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39287
sS'cpp_type'
p39288
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39289
sS'default'
p39290
g3
sS'name'
p39291
S'control_tags'
p39292
sS'required'
p39293
I00
sS'group_name'
p39294
S'Advanced'
p39295
sa(dp39296
S'description'
p39297
S'Set the enabled status of the MooseObject.\n'
p39298
sS'cpp_type'
p39299
S'bool'
p39300
sS'default'
p39301
S'1'
p39302
sS'name'
p39303
S'enable'
p39304
sS'required'
p39305
I00
sS'group_name'
p39306
S'Advanced'
p39307
sa(dp39308
S'description'
p39309
g3
sS'cpp_type'
p39310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39311
sS'default'
p39312
S'ScalarConstantIC'
p39313
sS'name'
p39314
S'type'
p39315
sS'required'
p39316
I00
sS'group_name'
p39317
Nsa(dp39318
S'description'
p39319
g3
sS'cpp_type'
p39320
S'double'
p39321
sS'default'
p39322
S'0'
p39323
sS'name'
p39324
S'value'
p39325
sS'required'
p39326
I00
sS'group_name'
p39327
Nsa(dp39328
S'description'
p39329
S'The variable this initial condition is supposed to provide values for.\n'
p39330
sS'cpp_type'
p39331
S'VariableName'
p39332
sS'default'
p39333
g3
sS'name'
p39334
S'variable'
p39335
sS'required'
p39336
I00
sS'group_name'
p39337
NsasS'name'
p39338
S'/ICs/ScalarConstantIC'
p39339
sa(dp39340
S'description'
p39341
S'Circle with a smooth interface\n'
p39342
sS'subblocks'
p39343
NsS'parameters'
p39344
(lp39345
(dp39346
S'description'
p39347
S'in 3D, whether the objects are spheres or columns\n'
p39348
sS'cpp_type'
p39349
S'bool'
p39350
sS'default'
p39351
S'1'
p39352
sS'name'
p39353
S'3D_spheres'
p39354
sS'required'
p39355
I00
sS'group_name'
p39356
Nsa(dp39357
S'description'
p39358
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39359
sS'cpp_type'
p39360
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39361
sS'default'
p39362
g3
sS'name'
p39363
S'block'
p39364
sS'required'
p39365
I00
sS'group_name'
p39366
Nsa(dp39367
S'description'
p39368
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39369
sS'cpp_type'
p39370
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39371
sS'default'
p39372
g3
sS'name'
p39373
S'boundary'
p39374
sS'required'
p39375
I00
sS'group_name'
p39376
Nsa(dp39377
S'description'
p39378
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39379
sS'cpp_type'
p39380
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39381
sS'default'
p39382
g3
sS'name'
p39383
S'control_tags'
p39384
sS'required'
p39385
I00
sS'group_name'
p39386
S'Advanced'
p39387
sa(dp39388
S'description'
p39389
S'Set the enabled status of the MooseObject.\n'
p39390
sS'cpp_type'
p39391
S'bool'
p39392
sS'default'
p39393
S'1'
p39394
sS'name'
p39395
S'enable'
p39396
sS'required'
p39397
I00
sS'group_name'
p39398
S'Advanced'
p39399
sa(dp39400
S'description'
p39401
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39402
sS'cpp_type'
p39403
S'bool'
p39404
sS'default'
p39405
S'0'
p39406
sS'name'
p39407
S'ignore_uo_dependency'
p39408
sS'required'
p39409
I00
sS'group_name'
p39410
S'Advanced'
p39411
sa(dp39412
S'description'
p39413
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39414
sS'cpp_type'
p39415
S'double'
p39416
sS'default'
p39417
S'0'
p39418
sS'name'
p39419
S'int_width'
p39420
sS'required'
p39421
I00
sS'group_name'
p39422
Nsa(dp39423
S'description'
p39424
S'The variable value inside the circle\n'
p39425
sS'cpp_type'
p39426
S'double'
p39427
sS'default'
p39428
g3
sS'name'
p39429
S'invalue'
p39430
sS'required'
p39431
I01
sS'group_name'
p39432
Nsa(dp39433
S'description'
p39434
S'The variable value outside the circle\n'
p39435
sS'cpp_type'
p39436
S'double'
p39437
sS'default'
p39438
g3
sS'name'
p39439
S'outvalue'
p39440
sS'required'
p39441
I01
sS'group_name'
p39442
Nsa(dp39443
S'description'
p39444
S'The radius of a circle\n'
p39445
sS'cpp_type'
p39446
S'double'
p39447
sS'default'
p39448
g3
sS'name'
p39449
S'radius'
p39450
sS'required'
p39451
I01
sS'group_name'
p39452
Nsa(dp39453
S'description'
p39454
S'Seed value for the random number generator\n'
p39455
sS'cpp_type'
p39456
S'unsigned int'
p39457
sS'default'
p39458
S'12345'
p39459
sS'name'
p39460
S'rand_seed'
p39461
sS'required'
p39462
I00
sS'group_name'
p39463
Nsa(dp39464
S'description'
p39465
g3
sS'cpp_type'
p39466
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39467
sS'default'
p39468
S'SmoothCircleIC'
p39469
sS'name'
p39470
S'type'
p39471
sS'required'
p39472
I00
sS'group_name'
p39473
Nsa(dp39474
S'description'
p39475
S'The variable this initial condition is supposed to provide values for.\n'
p39476
sS'cpp_type'
p39477
S'VariableName'
p39478
sS'default'
p39479
g3
sS'name'
p39480
S'variable'
p39481
sS'required'
p39482
I01
sS'group_name'
p39483
Nsa(dp39484
S'description'
p39485
S'The x coordinate of the circle center\n'
p39486
sS'cpp_type'
p39487
S'double'
p39488
sS'default'
p39489
g3
sS'name'
p39490
S'x1'
p39491
sS'required'
p39492
I01
sS'group_name'
p39493
Nsa(dp39494
S'description'
p39495
S'The y coordinate of the circle center\n'
p39496
sS'cpp_type'
p39497
S'double'
p39498
sS'default'
p39499
g3
sS'name'
p39500
S'y1'
p39501
sS'required'
p39502
I01
sS'group_name'
p39503
Nsa(dp39504
S'description'
p39505
S'The z coordinate of the circle center\n'
p39506
sS'cpp_type'
p39507
S'double'
p39508
sS'default'
p39509
S'0'
p39510
sS'name'
p39511
S'z1'
p39512
sS'required'
p39513
I00
sS'group_name'
p39514
Nsa(dp39515
S'description'
p39516
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p39517
sS'cpp_type'
p39518
S'bool'
p39519
sS'default'
p39520
S'0'
p39521
sS'name'
p39522
S'zero_gradient'
p39523
sS'required'
p39524
I00
sS'group_name'
p39525
NsasS'name'
p39526
S'/ICs/SmoothCircleIC'
p39527
sa(dp39528
S'description'
p39529
S'Superellipsoid with a smooth interface\n'
p39530
sS'subblocks'
p39531
NsS'parameters'
p39532
(lp39533
(dp39534
S'description'
p39535
S'Semiaxis a of the superellipsoid\n'
p39536
sS'cpp_type'
p39537
S'double'
p39538
sS'default'
p39539
g3
sS'name'
p39540
S'a'
p39541
sS'required'
p39542
I01
sS'group_name'
p39543
Nsa(dp39544
S'description'
p39545
S'Semiaxis b of the superellipsoid\n'
p39546
sS'cpp_type'
p39547
S'double'
p39548
sS'default'
p39549
g3
sS'name'
p39550
S'b'
p39551
sS'required'
p39552
I01
sS'group_name'
p39553
Nsa(dp39554
S'description'
p39555
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39556
sS'cpp_type'
p39557
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39558
sS'default'
p39559
g3
sS'name'
p39560
S'block'
p39561
sS'required'
p39562
I00
sS'group_name'
p39563
Nsa(dp39564
S'description'
p39565
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39566
sS'cpp_type'
p39567
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39568
sS'default'
p39569
g3
sS'name'
p39570
S'boundary'
p39571
sS'required'
p39572
I00
sS'group_name'
p39573
Nsa(dp39574
S'description'
p39575
S'Semiaxis c of the superellipsoid\n'
p39576
sS'cpp_type'
p39577
S'double'
p39578
sS'default'
p39579
S'1'
p39580
sS'name'
p39581
S'c'
p39582
sS'required'
p39583
I00
sS'group_name'
p39584
Nsa(dp39585
S'description'
p39586
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39587
sS'cpp_type'
p39588
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39589
sS'default'
p39590
g3
sS'name'
p39591
S'control_tags'
p39592
sS'required'
p39593
I00
sS'group_name'
p39594
S'Advanced'
p39595
sa(dp39596
S'description'
p39597
S'Set the enabled status of the MooseObject.\n'
p39598
sS'cpp_type'
p39599
S'bool'
p39600
sS'default'
p39601
S'1'
p39602
sS'name'
p39603
S'enable'
p39604
sS'required'
p39605
I00
sS'group_name'
p39606
S'Advanced'
p39607
sa(dp39608
S'description'
p39609
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39610
sS'cpp_type'
p39611
S'bool'
p39612
sS'default'
p39613
S'0'
p39614
sS'name'
p39615
S'ignore_uo_dependency'
p39616
sS'required'
p39617
I00
sS'group_name'
p39618
S'Advanced'
p39619
sa(dp39620
S'description'
p39621
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39622
sS'cpp_type'
p39623
S'double'
p39624
sS'default'
p39625
S'0'
p39626
sS'name'
p39627
S'int_width'
p39628
sS'required'
p39629
I00
sS'group_name'
p39630
Nsa(dp39631
S'description'
p39632
S'The variable value inside the superellipsoid\n'
p39633
sS'cpp_type'
p39634
S'double'
p39635
sS'default'
p39636
g3
sS'name'
p39637
S'invalue'
p39638
sS'required'
p39639
I01
sS'group_name'
p39640
Nsa(dp39641
S'description'
p39642
S'Exponent n of the superellipsoid\n'
p39643
sS'cpp_type'
p39644
S'double'
p39645
sS'default'
p39646
g3
sS'name'
p39647
S'n'
p39648
sS'required'
p39649
I01
sS'group_name'
p39650
Nsa(dp39651
S'description'
p39652
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p39653
sS'cpp_type'
p39654
S'double'
p39655
sS'default'
p39656
g3
sS'name'
p39657
S'nestedvalue'
p39658
sS'required'
p39659
I00
sS'group_name'
p39660
Nsa(dp39661
S'description'
p39662
S'The variable value outside the superellipsoid\n'
p39663
sS'cpp_type'
p39664
S'double'
p39665
sS'default'
p39666
g3
sS'name'
p39667
S'outvalue'
p39668
sS'required'
p39669
I01
sS'group_name'
p39670
Nsa(dp39671
S'description'
p39672
S'Seed value for the random number generator\n'
p39673
sS'cpp_type'
p39674
S'unsigned int'
p39675
sS'default'
p39676
S'12345'
p39677
sS'name'
p39678
S'rand_seed'
p39679
sS'required'
p39680
I00
sS'group_name'
p39681
Nsa(dp39682
S'description'
p39683
g3
sS'cpp_type'
p39684
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39685
sS'default'
p39686
S'SmoothSuperellipsoidIC'
p39687
sS'name'
p39688
S'type'
p39689
sS'required'
p39690
I00
sS'group_name'
p39691
Nsa(dp39692
S'description'
p39693
S'The variable this initial condition is supposed to provide values for.\n'
p39694
sS'cpp_type'
p39695
S'VariableName'
p39696
sS'default'
p39697
g3
sS'name'
p39698
S'variable'
p39699
sS'required'
p39700
I01
sS'group_name'
p39701
Nsa(dp39702
S'description'
p39703
S'The x coordinate of the superellipsoid center\n'
p39704
sS'cpp_type'
p39705
S'double'
p39706
sS'default'
p39707
g3
sS'name'
p39708
S'x1'
p39709
sS'required'
p39710
I01
sS'group_name'
p39711
Nsa(dp39712
S'description'
p39713
S'The y coordinate of the superellipsoid center\n'
p39714
sS'cpp_type'
p39715
S'double'
p39716
sS'default'
p39717
g3
sS'name'
p39718
S'y1'
p39719
sS'required'
p39720
I01
sS'group_name'
p39721
Nsa(dp39722
S'description'
p39723
S'The z coordinate of the superellipsoid center\n'
p39724
sS'cpp_type'
p39725
S'double'
p39726
sS'default'
p39727
S'0'
p39728
sS'name'
p39729
S'z1'
p39730
sS'required'
p39731
I00
sS'group_name'
p39732
Nsa(dp39733
S'description'
p39734
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p39735
sS'cpp_type'
p39736
S'bool'
p39737
sS'default'
p39738
S'0'
p39739
sS'name'
p39740
S'zero_gradient'
p39741
sS'required'
p39742
I00
sS'group_name'
p39743
NsasS'name'
p39744
S'/ICs/SmoothSuperellipsoidIC'
p39745
sa(dp39746
S'description'
p39747
S'Multiple smooth circles with manually specified radii and center points\n'
p39748
sS'subblocks'
p39749
NsS'parameters'
p39750
(lp39751
(dp39752
S'description'
p39753
S'in 3D, whether the objects are spheres or columns\n'
p39754
sS'cpp_type'
p39755
S'bool'
p39756
sS'default'
p39757
S'1'
p39758
sS'name'
p39759
S'3D_spheres'
p39760
sS'required'
p39761
I00
sS'group_name'
p39762
Nsa(dp39763
S'description'
p39764
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39765
sS'cpp_type'
p39766
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39767
sS'default'
p39768
g3
sS'name'
p39769
S'block'
p39770
sS'required'
p39771
I00
sS'group_name'
p39772
Nsa(dp39773
S'description'
p39774
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39775
sS'cpp_type'
p39776
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39777
sS'default'
p39778
g3
sS'name'
p39779
S'boundary'
p39780
sS'required'
p39781
I00
sS'group_name'
p39782
Nsa(dp39783
S'description'
p39784
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39785
sS'cpp_type'
p39786
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39787
sS'default'
p39788
g3
sS'name'
p39789
S'control_tags'
p39790
sS'required'
p39791
I00
sS'group_name'
p39792
S'Advanced'
p39793
sa(dp39794
S'description'
p39795
S'Set the enabled status of the MooseObject.\n'
p39796
sS'cpp_type'
p39797
S'bool'
p39798
sS'default'
p39799
S'1'
p39800
sS'name'
p39801
S'enable'
p39802
sS'required'
p39803
I00
sS'group_name'
p39804
S'Advanced'
p39805
sa(dp39806
S'description'
p39807
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p39808
sS'cpp_type'
p39809
S'bool'
p39810
sS'default'
p39811
S'0'
p39812
sS'name'
p39813
S'ignore_uo_dependency'
p39814
sS'required'
p39815
I00
sS'group_name'
p39816
S'Advanced'
p39817
sa(dp39818
S'description'
p39819
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39820
sS'cpp_type'
p39821
S'double'
p39822
sS'default'
p39823
S'0'
p39824
sS'name'
p39825
S'int_width'
p39826
sS'required'
p39827
I00
sS'group_name'
p39828
Nsa(dp39829
S'description'
p39830
S'The variable value inside the circle\n'
p39831
sS'cpp_type'
p39832
S'double'
p39833
sS'default'
p39834
g3
sS'name'
p39835
S'invalue'
p39836
sS'required'
p39837
I01
sS'group_name'
p39838
Nsa(dp39839
S'description'
p39840
S'The variable value outside the circle\n'
p39841
sS'cpp_type'
p39842
S'double'
p39843
sS'default'
p39844
g3
sS'name'
p39845
S'outvalue'
p39846
sS'required'
p39847
I01
sS'group_name'
p39848
Nsa(dp39849
S'description'
p39850
S'The radius for each circle\n'
p39851
sS'cpp_type'
p39852
S'std::vector<double, std::allocator<double> >'
p39853
sS'default'
p39854
g3
sS'name'
p39855
S'radii'
p39856
sS'required'
p39857
I01
sS'group_name'
p39858
Nsa(dp39859
S'description'
p39860
S'Seed value for the random number generator\n'
p39861
sS'cpp_type'
p39862
S'unsigned int'
p39863
sS'default'
p39864
S'12345'
p39865
sS'name'
p39866
S'rand_seed'
p39867
sS'required'
p39868
I00
sS'group_name'
p39869
Nsa(dp39870
S'description'
p39871
g3
sS'cpp_type'
p39872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39873
sS'default'
p39874
S'SpecifiedSmoothCircleIC'
p39875
sS'name'
p39876
S'type'
p39877
sS'required'
p39878
I00
sS'group_name'
p39879
Nsa(dp39880
S'description'
p39881
S'The variable this initial condition is supposed to provide values for.\n'
p39882
sS'cpp_type'
p39883
S'VariableName'
p39884
sS'default'
p39885
g3
sS'name'
p39886
S'variable'
p39887
sS'required'
p39888
I01
sS'group_name'
p39889
Nsa(dp39890
S'description'
p39891
S'The x-coordinate for each circle center\n'
p39892
sS'cpp_type'
p39893
S'std::vector<double, std::allocator<double> >'
p39894
sS'default'
p39895
g3
sS'name'
p39896
S'x_positions'
p39897
sS'required'
p39898
I01
sS'group_name'
p39899
Nsa(dp39900
S'description'
p39901
S'The y-coordinate for each circle center\n'
p39902
sS'cpp_type'
p39903
S'std::vector<double, std::allocator<double> >'
p39904
sS'default'
p39905
g3
sS'name'
p39906
S'y_positions'
p39907
sS'required'
p39908
I01
sS'group_name'
p39909
Nsa(dp39910
S'description'
p39911
S'The z-coordinate for each circle center\n'
p39912
sS'cpp_type'
p39913
S'std::vector<double, std::allocator<double> >'
p39914
sS'default'
p39915
g3
sS'name'
p39916
S'z_positions'
p39917
sS'required'
p39918
I01
sS'group_name'
p39919
Nsa(dp39920
S'description'
p39921
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p39922
sS'cpp_type'
p39923
S'bool'
p39924
sS'default'
p39925
S'0'
p39926
sS'name'
p39927
S'zero_gradient'
p39928
sS'required'
p39929
I00
sS'group_name'
p39930
NsasS'name'
p39931
S'/ICs/SpecifiedSmoothCircleIC'
p39932
sa(dp39933
S'description'
p39934
S'Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n'
p39935
sS'subblocks'
p39936
NsS'parameters'
p39937
(lp39938
(dp39939
S'description'
p39940
S'Semiaxis a for each superellipsoid\n'
p39941
sS'cpp_type'
p39942
S'std::vector<double, std::allocator<double> >'
p39943
sS'default'
p39944
g3
sS'name'
p39945
S'as'
p39946
sS'required'
p39947
I01
sS'group_name'
p39948
Nsa(dp39949
S'description'
p39950
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39951
sS'cpp_type'
p39952
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39953
sS'default'
p39954
g3
sS'name'
p39955
S'block'
p39956
sS'required'
p39957
I00
sS'group_name'
p39958
Nsa(dp39959
S'description'
p39960
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39961
sS'cpp_type'
p39962
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39963
sS'default'
p39964
g3
sS'name'
p39965
S'boundary'
p39966
sS'required'
p39967
I00
sS'group_name'
p39968
Nsa(dp39969
S'description'
p39970
S'Semiaxis b for each superellipsoid\n'
p39971
sS'cpp_type'
p39972
S'std::vector<double, std::allocator<double> >'
p39973
sS'default'
p39974
g3
sS'name'
p39975
S'bs'
p39976
sS'required'
p39977
I01
sS'group_name'
p39978
Nsa(dp39979
S'description'
p39980
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39981
sS'cpp_type'
p39982
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39983
sS'default'
p39984
g3
sS'name'
p39985
S'control_tags'
p39986
sS'required'
p39987
I00
sS'group_name'
p39988
S'Advanced'
p39989
sa(dp39990
S'description'
p39991
S'Semiaxis c for each superellipsoid\n'
p39992
sS'cpp_type'
p39993
S'std::vector<double, std::allocator<double> >'
p39994
sS'default'
p39995
g3
sS'name'
p39996
S'cs'
p39997
sS'required'
p39998
I01
sS'group_name'
p39999
Nsa(dp40000
S'description'
p40001
S'Set the enabled status of the MooseObject.\n'
p40002
sS'cpp_type'
p40003
S'bool'
p40004
sS'default'
p40005
S'1'
p40006
sS'name'
p40007
S'enable'
p40008
sS'required'
p40009
I00
sS'group_name'
p40010
S'Advanced'
p40011
sa(dp40012
S'description'
p40013
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40014
sS'cpp_type'
p40015
S'bool'
p40016
sS'default'
p40017
S'0'
p40018
sS'name'
p40019
S'ignore_uo_dependency'
p40020
sS'required'
p40021
I00
sS'group_name'
p40022
S'Advanced'
p40023
sa(dp40024
S'description'
p40025
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p40026
sS'cpp_type'
p40027
S'double'
p40028
sS'default'
p40029
S'0'
p40030
sS'name'
p40031
S'int_width'
p40032
sS'required'
p40033
I00
sS'group_name'
p40034
Nsa(dp40035
S'description'
p40036
S'The variable value inside the superellipsoid\n'
p40037
sS'cpp_type'
p40038
S'double'
p40039
sS'default'
p40040
g3
sS'name'
p40041
S'invalue'
p40042
sS'required'
p40043
I01
sS'group_name'
p40044
Nsa(dp40045
S'description'
p40046
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p40047
sS'cpp_type'
p40048
S'double'
p40049
sS'default'
p40050
g3
sS'name'
p40051
S'nestedvalue'
p40052
sS'required'
p40053
I00
sS'group_name'
p40054
Nsa(dp40055
S'description'
p40056
S'Exponent n for each superellipsoid\n'
p40057
sS'cpp_type'
p40058
S'std::vector<double, std::allocator<double> >'
p40059
sS'default'
p40060
g3
sS'name'
p40061
S'ns'
p40062
sS'required'
p40063
I01
sS'group_name'
p40064
Nsa(dp40065
S'description'
p40066
S'The variable value outside the superellipsoid\n'
p40067
sS'cpp_type'
p40068
S'double'
p40069
sS'default'
p40070
g3
sS'name'
p40071
S'outvalue'
p40072
sS'required'
p40073
I01
sS'group_name'
p40074
Nsa(dp40075
S'description'
p40076
S'Seed value for the random number generator\n'
p40077
sS'cpp_type'
p40078
S'unsigned int'
p40079
sS'default'
p40080
S'12345'
p40081
sS'name'
p40082
S'rand_seed'
p40083
sS'required'
p40084
I00
sS'group_name'
p40085
Nsa(dp40086
S'description'
p40087
g3
sS'cpp_type'
p40088
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40089
sS'default'
p40090
S'SpecifiedSmoothSuperellipsoidIC'
p40091
sS'name'
p40092
S'type'
p40093
sS'required'
p40094
I00
sS'group_name'
p40095
Nsa(dp40096
S'description'
p40097
S'The variable this initial condition is supposed to provide values for.\n'
p40098
sS'cpp_type'
p40099
S'VariableName'
p40100
sS'default'
p40101
g3
sS'name'
p40102
S'variable'
p40103
sS'required'
p40104
I01
sS'group_name'
p40105
Nsa(dp40106
S'description'
p40107
S'The x-coordinate for each superellipsoid center\n'
p40108
sS'cpp_type'
p40109
S'std::vector<double, std::allocator<double> >'
p40110
sS'default'
p40111
g3
sS'name'
p40112
S'x_positions'
p40113
sS'required'
p40114
I01
sS'group_name'
p40115
Nsa(dp40116
S'description'
p40117
S'The y-coordinate for each superellipsoid center\n'
p40118
sS'cpp_type'
p40119
S'std::vector<double, std::allocator<double> >'
p40120
sS'default'
p40121
g3
sS'name'
p40122
S'y_positions'
p40123
sS'required'
p40124
I01
sS'group_name'
p40125
Nsa(dp40126
S'description'
p40127
S'The z-coordinate for each superellipsoid center\n'
p40128
sS'cpp_type'
p40129
S'std::vector<double, std::allocator<double> >'
p40130
sS'default'
p40131
g3
sS'name'
p40132
S'z_positions'
p40133
sS'required'
p40134
I01
sS'group_name'
p40135
Nsa(dp40136
S'description'
p40137
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p40138
sS'cpp_type'
p40139
S'bool'
p40140
sS'default'
p40141
S'0'
p40142
sS'name'
p40143
S'zero_gradient'
p40144
sS'required'
p40145
I00
sS'group_name'
p40146
NsasS'name'
p40147
S'/ICs/SpecifiedSmoothSuperellipsoidIC'
p40148
sa(dp40149
S'description'
p40150
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p40151
sS'subblocks'
p40152
NsS'parameters'
p40153
(lp40154
(dp40155
S'description'
p40156
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40157
sS'cpp_type'
p40158
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40159
sS'default'
p40160
g3
sS'name'
p40161
S'block'
p40162
sS'required'
p40163
I00
sS'group_name'
p40164
Nsa(dp40165
S'description'
p40166
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40167
sS'cpp_type'
p40168
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40169
sS'default'
p40170
g3
sS'name'
p40171
S'boundary'
p40172
sS'required'
p40173
I00
sS'group_name'
p40174
Nsa(dp40175
S'description'
p40176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40177
sS'cpp_type'
p40178
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40179
sS'default'
p40180
g3
sS'name'
p40181
S'control_tags'
p40182
sS'required'
p40183
I00
sS'group_name'
p40184
S'Advanced'
p40185
sa(dp40186
S'description'
p40187
S'Set the enabled status of the MooseObject.\n'
p40188
sS'cpp_type'
p40189
S'bool'
p40190
sS'default'
p40191
S'1'
p40192
sS'name'
p40193
S'enable'
p40194
sS'required'
p40195
I00
sS'group_name'
p40196
S'Advanced'
p40197
sa(dp40198
S'description'
p40199
S'The z coordinate of the circle center\n'
p40200
sS'cpp_type'
p40201
S'double'
p40202
sS'default'
p40203
g3
sS'name'
p40204
S'height'
p40205
sS'required'
p40206
I01
sS'group_name'
p40207
Nsa(dp40208
S'description'
p40209
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40210
sS'cpp_type'
p40211
S'bool'
p40212
sS'default'
p40213
S'0'
p40214
sS'name'
p40215
S'ignore_uo_dependency'
p40216
sS'required'
p40217
I00
sS'group_name'
p40218
S'Advanced'
p40219
sa(dp40220
S'description'
p40221
S'The variable value inside the circle\n'
p40222
sS'cpp_type'
p40223
S'double'
p40224
sS'default'
p40225
g3
sS'name'
p40226
S'invalue'
p40227
sS'required'
p40228
I01
sS'group_name'
p40229
Nsa(dp40230
S'description'
p40231
S'The variable value outside the circle\n'
p40232
sS'cpp_type'
p40233
S'double'
p40234
sS'default'
p40235
g3
sS'name'
p40236
S'outvalue'
p40237
sS'required'
p40238
I01
sS'group_name'
p40239
Nsa(dp40240
S'description'
p40241
g3
sS'cpp_type'
p40242
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40243
sS'default'
p40244
S'ThumbIC'
p40245
sS'name'
p40246
S'type'
p40247
sS'required'
p40248
I00
sS'group_name'
p40249
Nsa(dp40250
S'description'
p40251
S'The variable this initial condition is supposed to provide values for.\n'
p40252
sS'cpp_type'
p40253
S'VariableName'
p40254
sS'default'
p40255
g3
sS'name'
p40256
S'variable'
p40257
sS'required'
p40258
I01
sS'group_name'
p40259
Nsa(dp40260
S'description'
p40261
S'The y coordinate of the circle center\n'
p40262
sS'cpp_type'
p40263
S'double'
p40264
sS'default'
p40265
g3
sS'name'
p40266
S'width'
p40267
sS'required'
p40268
I01
sS'group_name'
p40269
Nsa(dp40270
S'description'
p40271
S'The x coordinate of the circle center\n'
p40272
sS'cpp_type'
p40273
S'double'
p40274
sS'default'
p40275
g3
sS'name'
p40276
S'xcoord'
p40277
sS'required'
p40278
I01
sS'group_name'
p40279
NsasS'name'
p40280
S'/ICs/ThumbIC'
p40281
sa(dp40282
S'description'
p40283
S'Tricrystal with two circles/bubbles\n'
p40284
sS'subblocks'
p40285
NsS'parameters'
p40286
(lp40287
(dp40288
S'description'
p40289
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40290
sS'cpp_type'
p40291
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40292
sS'default'
p40293
g3
sS'name'
p40294
S'block'
p40295
sS'required'
p40296
I00
sS'group_name'
p40297
Nsa(dp40298
S'description'
p40299
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40300
sS'cpp_type'
p40301
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40302
sS'default'
p40303
g3
sS'name'
p40304
S'boundary'
p40305
sS'required'
p40306
I00
sS'group_name'
p40307
Nsa(dp40308
S'description'
p40309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40310
sS'cpp_type'
p40311
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40312
sS'default'
p40313
g3
sS'name'
p40314
S'control_tags'
p40315
sS'required'
p40316
I00
sS'group_name'
p40317
S'Advanced'
p40318
sa(dp40319
S'description'
p40320
S'Set the enabled status of the MooseObject.\n'
p40321
sS'cpp_type'
p40322
S'bool'
p40323
sS'default'
p40324
S'1'
p40325
sS'name'
p40326
S'enable'
p40327
sS'required'
p40328
I00
sS'group_name'
p40329
S'Advanced'
p40330
sa(dp40331
S'description'
p40332
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40333
sS'cpp_type'
p40334
S'bool'
p40335
sS'default'
p40336
S'0'
p40337
sS'name'
p40338
S'ignore_uo_dependency'
p40339
sS'required'
p40340
I00
sS'group_name'
p40341
S'Advanced'
p40342
sa(dp40343
S'description'
p40344
S'Index for the current grain order parameter\n'
p40345
sS'cpp_type'
p40346
S'unsigned int'
p40347
sS'default'
p40348
g3
sS'name'
p40349
S'op_index'
p40350
sS'required'
p40351
I01
sS'group_name'
p40352
Nsa(dp40353
S'description'
p40354
S'Number of grain order parameters\n'
p40355
sS'cpp_type'
p40356
S'unsigned int'
p40357
sS'default'
p40358
g3
sS'name'
p40359
S'op_num'
p40360
sS'required'
p40361
I01
sS'group_name'
p40362
Nsa(dp40363
S'description'
p40364
g3
sS'cpp_type'
p40365
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40366
sS'default'
p40367
S'Tricrystal2CircleGrainsIC'
p40368
sS'name'
p40369
S'type'
p40370
sS'required'
p40371
I00
sS'group_name'
p40372
Nsa(dp40373
S'description'
p40374
S'The variable this initial condition is supposed to provide values for.\n'
p40375
sS'cpp_type'
p40376
S'VariableName'
p40377
sS'default'
p40378
g3
sS'name'
p40379
S'variable'
p40380
sS'required'
p40381
I01
sS'group_name'
p40382
NsasS'name'
p40383
S'/ICs/Tricrystal2CircleGrainsIC'
p40384
sa(dp40385
S'description'
p40386
S'Tricrystal with a triple junction\n'
p40387
sS'subblocks'
p40388
NsS'parameters'
p40389
(lp40390
(dp40391
S'description'
p40392
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40393
sS'cpp_type'
p40394
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40395
sS'default'
p40396
g3
sS'name'
p40397
S'block'
p40398
sS'required'
p40399
I00
sS'group_name'
p40400
Nsa(dp40401
S'description'
p40402
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40403
sS'cpp_type'
p40404
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40405
sS'default'
p40406
g3
sS'name'
p40407
S'boundary'
p40408
sS'required'
p40409
I00
sS'group_name'
p40410
Nsa(dp40411
S'description'
p40412
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40413
sS'cpp_type'
p40414
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40415
sS'default'
p40416
g3
sS'name'
p40417
S'control_tags'
p40418
sS'required'
p40419
I00
sS'group_name'
p40420
S'Advanced'
p40421
sa(dp40422
S'description'
p40423
S'Set the enabled status of the MooseObject.\n'
p40424
sS'cpp_type'
p40425
S'bool'
p40426
sS'default'
p40427
S'1'
p40428
sS'name'
p40429
S'enable'
p40430
sS'required'
p40431
I00
sS'group_name'
p40432
S'Advanced'
p40433
sa(dp40434
S'description'
p40435
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40436
sS'cpp_type'
p40437
S'bool'
p40438
sS'default'
p40439
S'0'
p40440
sS'name'
p40441
S'ignore_uo_dependency'
p40442
sS'required'
p40443
I00
sS'group_name'
p40444
S'Advanced'
p40445
sa(dp40446
S'description'
p40447
S'The point where the triple junction is located. Default is the center of the mesh\n'
p40448
sS'cpp_type'
p40449
S'libMesh::Point'
p40450
sS'default'
p40451
g3
sS'name'
p40452
S'junction'
p40453
sS'required'
p40454
I00
sS'group_name'
p40455
Nsa(dp40456
S'description'
p40457
S'Index for the current grain order parameter\n'
p40458
sS'cpp_type'
p40459
S'unsigned int'
p40460
sS'default'
p40461
g3
sS'name'
p40462
S'op_index'
p40463
sS'required'
p40464
I01
sS'group_name'
p40465
Nsa(dp40466
S'description'
p40467
S'Number of grain order parameters\n'
p40468
sS'cpp_type'
p40469
S'unsigned int'
p40470
sS'default'
p40471
g3
sS'name'
p40472
S'op_num'
p40473
sS'required'
p40474
I01
sS'group_name'
p40475
Nsa(dp40476
S'description'
p40477
S'Angle of first grain at triple junction in degrees\n'
p40478
sS'cpp_type'
p40479
S'double'
p40480
sS'default'
p40481
S'135'
p40482
sS'name'
p40483
S'theta1'
p40484
sS'required'
p40485
I00
sS'group_name'
p40486
Nsa(dp40487
S'description'
p40488
S'Angle of second grain at triple junction in degrees\n'
p40489
sS'cpp_type'
p40490
S'double'
p40491
sS'default'
p40492
S'135'
p40493
sS'name'
p40494
S'theta2'
p40495
sS'required'
p40496
I00
sS'group_name'
p40497
Nsa(dp40498
S'description'
p40499
g3
sS'cpp_type'
p40500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40501
sS'default'
p40502
S'TricrystalTripleJunctionIC'
p40503
sS'name'
p40504
S'type'
p40505
sS'required'
p40506
I00
sS'group_name'
p40507
Nsa(dp40508
S'description'
p40509
S'The variable this initial condition is supposed to provide values for.\n'
p40510
sS'cpp_type'
p40511
S'VariableName'
p40512
sS'default'
p40513
g3
sS'name'
p40514
S'variable'
p40515
sS'required'
p40516
I01
sS'group_name'
p40517
NsasS'name'
p40518
S'/ICs/TricrystalTripleJunctionIC'
p40519
sa(dp40520
S'description'
p40521
g3
sS'subblocks'
p40522
NsS'parameters'
p40523
(lp40524
(dp40525
S'description'
p40526
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40527
sS'cpp_type'
p40528
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40529
sS'default'
p40530
g3
sS'name'
p40531
S'block'
p40532
sS'required'
p40533
I00
sS'group_name'
p40534
Nsa(dp40535
S'description'
p40536
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40537
sS'cpp_type'
p40538
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40539
sS'default'
p40540
g3
sS'name'
p40541
S'boundary'
p40542
sS'required'
p40543
I00
sS'group_name'
p40544
Nsa(dp40545
S'description'
p40546
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40547
sS'cpp_type'
p40548
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40549
sS'default'
p40550
g3
sS'name'
p40551
S'control_tags'
p40552
sS'required'
p40553
I00
sS'group_name'
p40554
S'Advanced'
p40555
sa(dp40556
S'description'
p40557
S'Set the enabled status of the MooseObject.\n'
p40558
sS'cpp_type'
p40559
S'bool'
p40560
sS'default'
p40561
S'1'
p40562
sS'name'
p40563
S'enable'
p40564
sS'required'
p40565
I00
sS'group_name'
p40566
S'Advanced'
p40567
sa(dp40568
S'description'
p40569
S'Vector of order parameters\n'
p40570
sS'cpp_type'
p40571
S'std::vector<VariableName>'
p40572
sS'default'
p40573
g3
sS'name'
p40574
S'etas'
p40575
sS'required'
p40576
I01
sS'group_name'
p40577
Nsa(dp40578
S'description'
p40579
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40580
sS'cpp_type'
p40581
S'bool'
p40582
sS'default'
p40583
S'0'
p40584
sS'name'
p40585
S'ignore_uo_dependency'
p40586
sS'required'
p40587
I00
sS'group_name'
p40588
S'Advanced'
p40589
sa(dp40590
S'description'
p40591
g3
sS'cpp_type'
p40592
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40593
sS'default'
p40594
S'UnitySubVarIC'
p40595
sS'name'
p40596
S'type'
p40597
sS'required'
p40598
I00
sS'group_name'
p40599
Nsa(dp40600
S'description'
p40601
S'Turns on/off y_threshold\n'
p40602
sS'cpp_type'
p40603
S'bool'
p40604
sS'default'
p40605
S'0'
p40606
sS'name'
p40607
S'use_threshold'
p40608
sS'required'
p40609
I00
sS'group_name'
p40610
Nsa(dp40611
S'description'
p40612
S'The variable this initial condition is supposed to provide values for.\n'
p40613
sS'cpp_type'
p40614
S'VariableName'
p40615
sS'default'
p40616
g3
sS'name'
p40617
S'variable'
p40618
sS'required'
p40619
I01
sS'group_name'
p40620
Nsa(dp40621
S'description'
p40622
S'Sets variable to 0 at y coordinates below this value\n'
p40623
sS'cpp_type'
p40624
S'double'
p40625
sS'default'
p40626
S'0'
p40627
sS'name'
p40628
S'y_threshold'
p40629
sS'required'
p40630
I00
sS'group_name'
p40631
NsasS'name'
p40632
S'/ICs/UnitySubVarIC'
p40633
sa(dp40634
S'description'
p40635
g3
sS'subblocks'
p40636
NsS'parameters'
p40637
(lp40638
(dp40639
S'description'
p40640
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40641
sS'cpp_type'
p40642
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40643
sS'default'
p40644
g3
sS'name'
p40645
S'block'
p40646
sS'required'
p40647
I00
sS'group_name'
p40648
Nsa(dp40649
S'description'
p40650
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40651
sS'cpp_type'
p40652
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40653
sS'default'
p40654
g3
sS'name'
p40655
S'boundary'
p40656
sS'required'
p40657
I00
sS'group_name'
p40658
Nsa(dp40659
S'description'
p40660
S'Vector of phase concentrations (must be the same lenght as etas)\n'
p40661
sS'cpp_type'
p40662
S'std::vector<VariableName>'
p40663
sS'default'
p40664
g3
sS'name'
p40665
S'cis'
p40666
sS'required'
p40667
I01
sS'group_name'
p40668
Nsa(dp40669
S'description'
p40670
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40671
sS'cpp_type'
p40672
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40673
sS'default'
p40674
g3
sS'name'
p40675
S'control_tags'
p40676
sS'required'
p40677
I00
sS'group_name'
p40678
S'Advanced'
p40679
sa(dp40680
S'description'
p40681
S'Set the enabled status of the MooseObject.\n'
p40682
sS'cpp_type'
p40683
S'bool'
p40684
sS'default'
p40685
S'1'
p40686
sS'name'
p40687
S'enable'
p40688
sS'required'
p40689
I00
sS'group_name'
p40690
S'Advanced'
p40691
sa(dp40692
S'description'
p40693
S'Vector of order parameters\n'
p40694
sS'cpp_type'
p40695
S'std::vector<VariableName>'
p40696
sS'default'
p40697
g3
sS'name'
p40698
S'etas'
p40699
sS'required'
p40700
I01
sS'group_name'
p40701
Nsa(dp40702
S'description'
p40703
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p40704
sS'cpp_type'
p40705
S'bool'
p40706
sS'default'
p40707
S'0'
p40708
sS'name'
p40709
S'ignore_uo_dependency'
p40710
sS'required'
p40711
I00
sS'group_name'
p40712
S'Advanced'
p40713
sa(dp40714
S'description'
p40715
g3
sS'cpp_type'
p40716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40717
sS'default'
p40718
S'VarDepIC'
p40719
sS'name'
p40720
S'type'
p40721
sS'required'
p40722
I00
sS'group_name'
p40723
Nsa(dp40724
S'description'
p40725
S'The variable this initial condition is supposed to provide values for.\n'
p40726
sS'cpp_type'
p40727
S'VariableName'
p40728
sS'default'
p40729
g3
sS'name'
p40730
S'variable'
p40731
sS'required'
p40732
I01
sS'group_name'
p40733
NsasS'name'
p40734
S'/ICs/VarDepIC'
p40735
sasS'parameters'
p40736
NsS'name'
p40737
S'/ICs'
p40738
sa(dp40739
S'description'
p40740
g3
sS'subblocks'
p40741
(lp40742
(dp40743
S'description'
p40744
g3
sS'subblocks'
p40745
NsS'parameters'
p40746
(lp40747
(dp40748
S'description'
p40749
S'A string representing the Moose Object that will be built by this Action\n'
p40750
sS'cpp_type'
p40751
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40752
sS'default'
p40753
g3
sS'name'
p40754
S'type'
p40755
sS'required'
p40756
I01
sS'group_name'
p40757
NsasS'name'
p40758
S'/InterfaceKernels/*'
p40759
sa(dp40760
S'description'
p40761
S'Enforce componentwise gradient continuity between two different variables across a subdomain boundary using a Lagrange multiplier\n'
p40762
sS'subblocks'
p40763
NsS'parameters'
p40764
(lp40765
(dp40766
S'description'
p40767
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40768
sS'cpp_type'
p40769
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40770
sS'default'
p40771
g3
sS'name'
p40772
S'block'
p40773
sS'required'
p40774
I00
sS'group_name'
p40775
Nsa(dp40776
S'description'
p40777
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40778
sS'cpp_type'
p40779
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40780
sS'default'
p40781
g3
sS'name'
p40782
S'boundary'
p40783
sS'required'
p40784
I00
sS'group_name'
p40785
Nsa(dp40786
S'description'
p40787
S'Gradient component to constrain\n'
p40788
sS'cpp_type'
p40789
S'unsigned int'
p40790
sS'default'
p40791
g3
sS'name'
p40792
S'component'
p40793
sS'required'
p40794
I01
sS'group_name'
p40795
Nsa(dp40796
S'description'
p40797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40798
sS'cpp_type'
p40799
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40800
sS'default'
p40801
g3
sS'name'
p40802
S'control_tags'
p40803
sS'required'
p40804
I00
sS'group_name'
p40805
S'Advanced'
p40806
sa(dp40807
S'description'
p40808
S'Set the enabled status of the MooseObject.\n'
p40809
sS'cpp_type'
p40810
S'bool'
p40811
sS'default'
p40812
S'1'
p40813
sS'name'
p40814
S'enable'
p40815
sS'required'
p40816
I00
sS'group_name'
p40817
S'Advanced'
p40818
sa(dp40819
S'description'
p40820
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40821
sS'cpp_type'
p40822
S'bool'
p40823
sS'default'
p40824
S'1'
p40825
sS'name'
p40826
S'implicit'
p40827
sS'required'
p40828
I00
sS'group_name'
p40829
S'Advanced'
p40830
sa(dp40831
S'description'
p40832
S'The gradient constrained variable on this side of the interface.\n'
p40833
sS'cpp_type'
p40834
S'std::vector<VariableName>'
p40835
sS'default'
p40836
g3
sS'name'
p40837
S'lambda'
p40838
sS'required'
p40839
I00
sS'group_name'
p40840
Nsa(dp40841
S'description'
p40842
S'The variable on the other side of the interface.\n'
p40843
sS'cpp_type'
p40844
S'std::vector<VariableName>'
p40845
sS'default'
p40846
g3
sS'name'
p40847
S'neighbor_var'
p40848
sS'required'
p40849
I01
sS'group_name'
p40850
Nsa(dp40851
S'description'
p40852
g3
sS'cpp_type'
p40853
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40854
sS'default'
p40855
S'EqualGradientLagrangeInterface'
p40856
sS'name'
p40857
S'type'
p40858
sS'required'
p40859
I00
sS'group_name'
p40860
Nsa(dp40861
S'description'
p40862
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40863
sS'cpp_type'
p40864
S'bool'
p40865
sS'default'
p40866
S'0'
p40867
sS'name'
p40868
S'use_displaced_mesh'
p40869
sS'required'
p40870
I00
sS'group_name'
p40871
S'Advanced'
p40872
sa(dp40873
S'description'
p40874
S'The name of the variable that this boundary condition applies to\n'
p40875
sS'cpp_type'
p40876
S'NonlinearVariableName'
p40877
sS'default'
p40878
g3
sS'name'
p40879
S'variable'
p40880
sS'required'
p40881
I01
sS'group_name'
p40882
NsasS'name'
p40883
S'/InterfaceKernels/EqualGradientLagrangeInterface'
p40884
sa(dp40885
S'description'
p40886
S'Lagrange multiplier kernel for EqualGradientLagrangeInterface.\n'
p40887
sS'subblocks'
p40888
NsS'parameters'
p40889
(lp40890
(dp40891
S'description'
p40892
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40893
sS'cpp_type'
p40894
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40895
sS'default'
p40896
g3
sS'name'
p40897
S'block'
p40898
sS'required'
p40899
I00
sS'group_name'
p40900
Nsa(dp40901
S'description'
p40902
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40903
sS'cpp_type'
p40904
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40905
sS'default'
p40906
g3
sS'name'
p40907
S'boundary'
p40908
sS'required'
p40909
I00
sS'group_name'
p40910
Nsa(dp40911
S'description'
p40912
S'Gradient component to constrain\n'
p40913
sS'cpp_type'
p40914
S'unsigned int'
p40915
sS'default'
p40916
g3
sS'name'
p40917
S'component'
p40918
sS'required'
p40919
I01
sS'group_name'
p40920
Nsa(dp40921
S'description'
p40922
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40923
sS'cpp_type'
p40924
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40925
sS'default'
p40926
g3
sS'name'
p40927
S'control_tags'
p40928
sS'required'
p40929
I00
sS'group_name'
p40930
S'Advanced'
p40931
sa(dp40932
S'description'
p40933
S'The gradient constrained variable on this side of the interface.\n'
p40934
sS'cpp_type'
p40935
S'std::vector<VariableName>'
p40936
sS'default'
p40937
g3
sS'name'
p40938
S'element_var'
p40939
sS'required'
p40940
I00
sS'group_name'
p40941
Nsa(dp40942
S'description'
p40943
S'Set the enabled status of the MooseObject.\n'
p40944
sS'cpp_type'
p40945
S'bool'
p40946
sS'default'
p40947
S'1'
p40948
sS'name'
p40949
S'enable'
p40950
sS'required'
p40951
I00
sS'group_name'
p40952
S'Advanced'
p40953
sa(dp40954
S'description'
p40955
S'Determines whether this object is calculated using an implicit or explicit form\n'
p40956
sS'cpp_type'
p40957
S'bool'
p40958
sS'default'
p40959
S'1'
p40960
sS'name'
p40961
S'implicit'
p40962
sS'required'
p40963
I00
sS'group_name'
p40964
S'Advanced'
p40965
sa(dp40966
S'description'
p40967
S'Compensate on diagonal Jacobian fill term when using a NullKernel on the Lagrange multiplier variable\n'
p40968
sS'cpp_type'
p40969
S'double'
p40970
sS'default'
p40971
S'0'
p40972
sS'name'
p40973
S'jacobian_fill'
p40974
sS'required'
p40975
I00
sS'group_name'
p40976
Nsa(dp40977
S'description'
p40978
S'The variable on the other side of the interface.\n'
p40979
sS'cpp_type'
p40980
S'std::vector<VariableName>'
p40981
sS'default'
p40982
g3
sS'name'
p40983
S'neighbor_var'
p40984
sS'required'
p40985
I01
sS'group_name'
p40986
Nsa(dp40987
S'description'
p40988
g3
sS'cpp_type'
p40989
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40990
sS'default'
p40991
S'EqualGradientLagrangeMultiplier'
p40992
sS'name'
p40993
S'type'
p40994
sS'required'
p40995
I00
sS'group_name'
p40996
Nsa(dp40997
S'description'
p40998
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40999
sS'cpp_type'
p41000
S'bool'
p41001
sS'default'
p41002
S'0'
p41003
sS'name'
p41004
S'use_displaced_mesh'
p41005
sS'required'
p41006
I00
sS'group_name'
p41007
S'Advanced'
p41008
sa(dp41009
S'description'
p41010
S'The name of the variable that this boundary condition applies to\n'
p41011
sS'cpp_type'
p41012
S'NonlinearVariableName'
p41013
sS'default'
p41014
g3
sS'name'
p41015
S'variable'
p41016
sS'required'
p41017
I01
sS'group_name'
p41018
NsasS'name'
p41019
S'/InterfaceKernels/EqualGradientLagrangeMultiplier'
p41020
sa(dp41021
S'description'
p41022
S'Add weak form surface terms of the Diffusion equation for two different variables across a subdomain boundary\n'
p41023
sS'subblocks'
p41024
NsS'parameters'
p41025
(lp41026
(dp41027
S'description'
p41028
S'Diffusion coefficient\n'
p41029
sS'cpp_type'
p41030
S'double'
p41031
sS'default'
p41032
S'1'
p41033
sS'name'
p41034
S'D'
p41035
sS'required'
p41036
I00
sS'group_name'
p41037
Nsa(dp41038
S'description'
p41039
S'Neighbor variable diffusion coefficient\n'
p41040
sS'cpp_type'
p41041
S'double'
p41042
sS'default'
p41043
S'1'
p41044
sS'name'
p41045
S'D_neighbor'
p41046
sS'required'
p41047
I00
sS'group_name'
p41048
Nsa(dp41049
S'description'
p41050
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41051
sS'cpp_type'
p41052
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41053
sS'default'
p41054
g3
sS'name'
p41055
S'block'
p41056
sS'required'
p41057
I00
sS'group_name'
p41058
Nsa(dp41059
S'description'
p41060
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41061
sS'cpp_type'
p41062
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p41063
sS'default'
p41064
g3
sS'name'
p41065
S'boundary'
p41066
sS'required'
p41067
I00
sS'group_name'
p41068
Nsa(dp41069
S'description'
p41070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41071
sS'cpp_type'
p41072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41073
sS'default'
p41074
g3
sS'name'
p41075
S'control_tags'
p41076
sS'required'
p41077
I00
sS'group_name'
p41078
S'Advanced'
p41079
sa(dp41080
S'description'
p41081
S'Set the enabled status of the MooseObject.\n'
p41082
sS'cpp_type'
p41083
S'bool'
p41084
sS'default'
p41085
S'1'
p41086
sS'name'
p41087
S'enable'
p41088
sS'required'
p41089
I00
sS'group_name'
p41090
S'Advanced'
p41091
sa(dp41092
S'description'
p41093
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41094
sS'cpp_type'
p41095
S'bool'
p41096
sS'default'
p41097
S'1'
p41098
sS'name'
p41099
S'implicit'
p41100
sS'required'
p41101
I00
sS'group_name'
p41102
S'Advanced'
p41103
sa(dp41104
S'description'
p41105
S'The variable on the other side of the interface.\n'
p41106
sS'cpp_type'
p41107
S'std::vector<VariableName>'
p41108
sS'default'
p41109
g3
sS'name'
p41110
S'neighbor_var'
p41111
sS'required'
p41112
I01
sS'group_name'
p41113
Nsa(dp41114
S'description'
p41115
g3
sS'cpp_type'
p41116
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41117
sS'default'
p41118
S'InterfaceDiffusionBoundaryTerm'
p41119
sS'name'
p41120
S'type'
p41121
sS'required'
p41122
I00
sS'group_name'
p41123
Nsa(dp41124
S'description'
p41125
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41126
sS'cpp_type'
p41127
S'bool'
p41128
sS'default'
p41129
S'0'
p41130
sS'name'
p41131
S'use_displaced_mesh'
p41132
sS'required'
p41133
I00
sS'group_name'
p41134
S'Advanced'
p41135
sa(dp41136
S'description'
p41137
S'The name of the variable that this boundary condition applies to\n'
p41138
sS'cpp_type'
p41139
S'NonlinearVariableName'
p41140
sS'default'
p41141
g3
sS'name'
p41142
S'variable'
p41143
sS'required'
p41144
I01
sS'group_name'
p41145
NsasS'name'
p41146
S'/InterfaceKernels/InterfaceDiffusionBoundaryTerm'
p41147
sa(dp41148
S'description'
p41149
S'Enforce flux continuity between two different variables across a subdomain boundary\n'
p41150
sS'subblocks'
p41151
NsS'parameters'
p41152
(lp41153
(dp41154
S'description'
p41155
S'Diffusion coefficient\n'
p41156
sS'cpp_type'
p41157
S'double'
p41158
sS'default'
p41159
S'1'
p41160
sS'name'
p41161
S'D'
p41162
sS'required'
p41163
I00
sS'group_name'
p41164
Nsa(dp41165
S'description'
p41166
S'Neighbor variable diffusion coefficient\n'
p41167
sS'cpp_type'
p41168
S'double'
p41169
sS'default'
p41170
S'1'
p41171
sS'name'
p41172
S'D_neighbor'
p41173
sS'required'
p41174
I00
sS'group_name'
p41175
Nsa(dp41176
S'description'
p41177
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41178
sS'cpp_type'
p41179
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41180
sS'default'
p41181
g3
sS'name'
p41182
S'block'
p41183
sS'required'
p41184
I00
sS'group_name'
p41185
Nsa(dp41186
S'description'
p41187
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41188
sS'cpp_type'
p41189
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p41190
sS'default'
p41191
g3
sS'name'
p41192
S'boundary'
p41193
sS'required'
p41194
I00
sS'group_name'
p41195
Nsa(dp41196
S'description'
p41197
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41198
sS'cpp_type'
p41199
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41200
sS'default'
p41201
g3
sS'name'
p41202
S'control_tags'
p41203
sS'required'
p41204
I00
sS'group_name'
p41205
S'Advanced'
p41206
sa(dp41207
S'description'
p41208
S'Set the enabled status of the MooseObject.\n'
p41209
sS'cpp_type'
p41210
S'bool'
p41211
sS'default'
p41212
S'1'
p41213
sS'name'
p41214
S'enable'
p41215
sS'required'
p41216
I00
sS'group_name'
p41217
S'Advanced'
p41218
sa(dp41219
S'description'
p41220
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41221
sS'cpp_type'
p41222
S'bool'
p41223
sS'default'
p41224
S'1'
p41225
sS'name'
p41226
S'implicit'
p41227
sS'required'
p41228
I00
sS'group_name'
p41229
S'Advanced'
p41230
sa(dp41231
S'description'
p41232
S'The variable on the other side of the interface.\n'
p41233
sS'cpp_type'
p41234
S'std::vector<VariableName>'
p41235
sS'default'
p41236
g3
sS'name'
p41237
S'neighbor_var'
p41238
sS'required'
p41239
I01
sS'group_name'
p41240
Nsa(dp41241
S'description'
p41242
g3
sS'cpp_type'
p41243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41244
sS'default'
p41245
S'InterfaceDiffusionFluxMatch'
p41246
sS'name'
p41247
S'type'
p41248
sS'required'
p41249
I00
sS'group_name'
p41250
Nsa(dp41251
S'description'
p41252
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41253
sS'cpp_type'
p41254
S'bool'
p41255
sS'default'
p41256
S'0'
p41257
sS'name'
p41258
S'use_displaced_mesh'
p41259
sS'required'
p41260
I00
sS'group_name'
p41261
S'Advanced'
p41262
sa(dp41263
S'description'
p41264
S'The name of the variable that this boundary condition applies to\n'
p41265
sS'cpp_type'
p41266
S'NonlinearVariableName'
p41267
sS'default'
p41268
g3
sS'name'
p41269
S'variable'
p41270
sS'required'
p41271
I01
sS'group_name'
p41272
NsasS'name'
p41273
S'/InterfaceKernels/InterfaceDiffusionFluxMatch'
p41274
sasS'parameters'
p41275
NsS'name'
p41276
S'/InterfaceKernels'
p41277
sa(dp41278
S'description'
p41279
g3
sS'subblocks'
p41280
(lp41281
(dp41282
S'description'
p41283
g3
sS'subblocks'
p41284
NsS'parameters'
p41285
(lp41286
(dp41287
S'description'
p41288
S'A string representing the Moose Object that will be built by this Action\n'
p41289
sS'cpp_type'
p41290
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41291
sS'default'
p41292
g3
sS'name'
p41293
S'type'
p41294
sS'required'
p41295
I01
sS'group_name'
p41296
NsasS'name'
p41297
S'/Kernels/*'
p41298
sa(dp41299
S'description'
p41300
S'Grain-Boundary model concentration dependent residual\n'
p41301
sS'subblocks'
p41302
NsS'parameters'
p41303
(lp41304
(dp41305
S'description'
p41306
S'Vector of arguments of the mobility\n'
p41307
sS'cpp_type'
p41308
S'std::vector<VariableName>'
p41309
sS'default'
p41310
g3
sS'name'
p41311
S'args'
p41312
sS'required'
p41313
I00
sS'group_name'
p41314
Nsa(dp41315
S'description'
p41316
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41317
sS'cpp_type'
p41318
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41319
sS'default'
p41320
g3
sS'name'
p41321
S'block'
p41322
sS'required'
p41323
I00
sS'group_name'
p41324
Nsa(dp41325
S'description'
p41326
S'Other species concentration\n'
p41327
sS'cpp_type'
p41328
S'std::vector<VariableName>'
p41329
sS'default'
p41330
g3
sS'name'
p41331
S'c'
p41332
sS'required'
p41333
I01
sS'group_name'
p41334
Nsa(dp41335
S'description'
p41336
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41337
sS'cpp_type'
p41338
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41339
sS'default'
p41340
g3
sS'name'
p41341
S'control_tags'
p41342
sS'required'
p41343
I00
sS'group_name'
p41344
S'Advanced'
p41345
sa(dp41346
S'description'
p41347
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41348
sS'cpp_type'
p41349
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41350
sS'default'
p41351
g3
sS'name'
p41352
S'diag_save_in'
p41353
sS'required'
p41354
I00
sS'group_name'
p41355
S'Advanced'
p41356
sa(dp41357
S'description'
p41358
S'Whether or not this kernel will be used as an eigen kernel\n'
p41359
sS'cpp_type'
p41360
S'bool'
p41361
sS'default'
p41362
S'0'
p41363
sS'name'
p41364
S'eigen_kernel'
p41365
sS'required'
p41366
I00
sS'group_name'
p41367
Nsa(dp41368
S'description'
p41369
S'Ratio of surface energy to GB energy\n'
p41370
sS'cpp_type'
p41371
S'double'
p41372
sS'default'
p41373
S'1'
p41374
sS'name'
p41375
S'en_ratio'
p41376
sS'required'
p41377
I00
sS'group_name'
p41378
Nsa(dp41379
S'description'
p41380
S'Set the enabled status of the MooseObject.\n'
p41381
sS'cpp_type'
p41382
S'bool'
p41383
sS'default'
p41384
S'1'
p41385
sS'name'
p41386
S'enable'
p41387
sS'required'
p41388
I00
sS'group_name'
p41389
S'Advanced'
p41390
sa(dp41391
S'description'
p41392
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41393
sS'cpp_type'
p41394
S'bool'
p41395
sS'default'
p41396
S'1'
p41397
sS'name'
p41398
S'implicit'
p41399
sS'required'
p41400
I00
sS'group_name'
p41401
S'Advanced'
p41402
sa(dp41403
S'description'
p41404
S'The mobility used with the kernel\n'
p41405
sS'cpp_type'
p41406
S'MaterialPropertyName'
p41407
sS'default'
p41408
S'L'
p41409
sS'name'
p41410
S'mob_name'
p41411
sS'required'
p41412
I00
sS'group_name'
p41413
Nsa(dp41414
S'description'
p41415
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41416
sS'cpp_type'
p41417
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41418
sS'default'
p41419
g3
sS'name'
p41420
S'save_in'
p41421
sS'required'
p41422
I00
sS'group_name'
p41423
S'Advanced'
p41424
sa(dp41425
S'description'
p41426
S'The seed for the master random number generator\n'
p41427
sS'cpp_type'
p41428
S'unsigned int'
p41429
sS'default'
p41430
S'0'
p41431
sS'name'
p41432
S'seed'
p41433
sS'required'
p41434
I00
sS'group_name'
p41435
S'Advanced'
p41436
sa(dp41437
S'description'
p41438
g3
sS'cpp_type'
p41439
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41440
sS'default'
p41441
S'ACGBPoly'
p41442
sS'name'
p41443
S'type'
p41444
sS'required'
p41445
I00
sS'group_name'
p41446
Nsa(dp41447
S'description'
p41448
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41449
sS'cpp_type'
p41450
S'bool'
p41451
sS'default'
p41452
S'0'
p41453
sS'name'
p41454
S'use_displaced_mesh'
p41455
sS'required'
p41456
I00
sS'group_name'
p41457
S'Advanced'
p41458
sa(dp41459
S'description'
p41460
S'The name of the variable that this Kernel operates on\n'
p41461
sS'cpp_type'
p41462
S'NonlinearVariableName'
p41463
sS'default'
p41464
g3
sS'name'
p41465
S'variable'
p41466
sS'required'
p41467
I01
sS'group_name'
p41468
NsasS'name'
p41469
S'/Kernels/ACGBPoly'
p41470
sa(dp41471
S'description'
p41472
S'Adds elastic energy contribution to the Allen-Cahn equation\n'
p41473
sS'subblocks'
p41474
NsS'parameters'
p41475
(lp41476
(dp41477
S'description'
p41478
S'The elastic tensor derivative for the specific order parameter\n'
p41479
sS'cpp_type'
p41480
S'MaterialPropertyName'
p41481
sS'default'
p41482
g3
sS'name'
p41483
S'D_tensor_name'
p41484
sS'required'
p41485
I01
sS'group_name'
p41486
Nsa(dp41487
S'description'
p41488
S'Vector of arguments of the mobility\n'
p41489
sS'cpp_type'
p41490
S'std::vector<VariableName>'
p41491
sS'default'
p41492
g3
sS'name'
p41493
S'args'
p41494
sS'required'
p41495
I00
sS'group_name'
p41496
Nsa(dp41497
S'description'
p41498
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41499
sS'cpp_type'
p41500
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41501
sS'default'
p41502
g3
sS'name'
p41503
S'block'
p41504
sS'required'
p41505
I00
sS'group_name'
p41506
Nsa(dp41507
S'description'
p41508
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41509
sS'cpp_type'
p41510
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41511
sS'default'
p41512
g3
sS'name'
p41513
S'control_tags'
p41514
sS'required'
p41515
I00
sS'group_name'
p41516
S'Advanced'
p41517
sa(dp41518
S'description'
p41519
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41520
sS'cpp_type'
p41521
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41522
sS'default'
p41523
g3
sS'name'
p41524
S'diag_save_in'
p41525
sS'required'
p41526
I00
sS'group_name'
p41527
S'Advanced'
p41528
sa(dp41529
S'description'
p41530
S'Whether or not this kernel will be used as an eigen kernel\n'
p41531
sS'cpp_type'
p41532
S'bool'
p41533
sS'default'
p41534
S'0'
p41535
sS'name'
p41536
S'eigen_kernel'
p41537
sS'required'
p41538
I00
sS'group_name'
p41539
Nsa(dp41540
S'description'
p41541
S'Set the enabled status of the MooseObject.\n'
p41542
sS'cpp_type'
p41543
S'bool'
p41544
sS'default'
p41545
S'1'
p41546
sS'name'
p41547
S'enable'
p41548
sS'required'
p41549
I00
sS'group_name'
p41550
S'Advanced'
p41551
sa(dp41552
S'description'
p41553
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41554
sS'cpp_type'
p41555
S'bool'
p41556
sS'default'
p41557
S'1'
p41558
sS'name'
p41559
S'implicit'
p41560
sS'required'
p41561
I00
sS'group_name'
p41562
S'Advanced'
p41563
sa(dp41564
S'description'
p41565
S'The mobility used with the kernel\n'
p41566
sS'cpp_type'
p41567
S'MaterialPropertyName'
p41568
sS'default'
p41569
S'L'
p41570
sS'name'
p41571
S'mob_name'
p41572
sS'required'
p41573
I00
sS'group_name'
p41574
Nsa(dp41575
S'description'
p41576
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41577
sS'cpp_type'
p41578
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41579
sS'default'
p41580
g3
sS'name'
p41581
S'save_in'
p41582
sS'required'
p41583
I00
sS'group_name'
p41584
S'Advanced'
p41585
sa(dp41586
S'description'
p41587
S'The seed for the master random number generator\n'
p41588
sS'cpp_type'
p41589
S'unsigned int'
p41590
sS'default'
p41591
S'0'
p41592
sS'name'
p41593
S'seed'
p41594
sS'required'
p41595
I00
sS'group_name'
p41596
S'Advanced'
p41597
sa(dp41598
S'description'
p41599
g3
sS'cpp_type'
p41600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41601
sS'default'
p41602
S'ACGrGrElasticDrivingForce'
p41603
sS'name'
p41604
S'type'
p41605
sS'required'
p41606
I00
sS'group_name'
p41607
Nsa(dp41608
S'description'
p41609
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41610
sS'cpp_type'
p41611
S'bool'
p41612
sS'default'
p41613
S'0'
p41614
sS'name'
p41615
S'use_displaced_mesh'
p41616
sS'required'
p41617
I00
sS'group_name'
p41618
S'Advanced'
p41619
sa(dp41620
S'description'
p41621
S'The name of the variable that this Kernel operates on\n'
p41622
sS'cpp_type'
p41623
S'NonlinearVariableName'
p41624
sS'default'
p41625
g3
sS'name'
p41626
S'variable'
p41627
sS'required'
p41628
I01
sS'group_name'
p41629
NsasS'name'
p41630
S'/Kernels/ACGrGrElasticDrivingForce'
p41631
sa(dp41632
S'description'
p41633
S'Multi-phase poly-crystaline Allen-Cahn Kernel\n'
p41634
sS'subblocks'
p41635
NsS'parameters'
p41636
(lp41637
(dp41638
S'description'
p41639
S'temperature\n'
p41640
sS'cpp_type'
p41641
S'std::vector<VariableName>'
p41642
sS'default'
p41643
g3
sS'name'
p41644
S'T'
p41645
sS'required'
p41646
I00
sS'group_name'
p41647
Nsa(dp41648
S'description'
p41649
S'Vector of arguments of the mobility\n'
p41650
sS'cpp_type'
p41651
S'std::vector<VariableName>'
p41652
sS'default'
p41653
g3
sS'name'
p41654
S'args'
p41655
sS'required'
p41656
I00
sS'group_name'
p41657
Nsa(dp41658
S'description'
p41659
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41660
sS'cpp_type'
p41661
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41662
sS'default'
p41663
g3
sS'name'
p41664
S'block'
p41665
sS'required'
p41666
I00
sS'group_name'
p41667
Nsa(dp41668
S'description'
p41669
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41670
sS'cpp_type'
p41671
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41672
sS'default'
p41673
g3
sS'name'
p41674
S'control_tags'
p41675
sS'required'
p41676
I00
sS'group_name'
p41677
S'Advanced'
p41678
sa(dp41679
S'description'
p41680
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41681
sS'cpp_type'
p41682
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41683
sS'default'
p41684
g3
sS'name'
p41685
S'diag_save_in'
p41686
sS'required'
p41687
I00
sS'group_name'
p41688
S'Advanced'
p41689
sa(dp41690
S'description'
p41691
S'Whether or not this kernel will be used as an eigen kernel\n'
p41692
sS'cpp_type'
p41693
S'bool'
p41694
sS'default'
p41695
S'0'
p41696
sS'name'
p41697
S'eigen_kernel'
p41698
sS'required'
p41699
I00
sS'group_name'
p41700
Nsa(dp41701
S'description'
p41702
S'Set the enabled status of the MooseObject.\n'
p41703
sS'cpp_type'
p41704
S'bool'
p41705
sS'default'
p41706
S'1'
p41707
sS'name'
p41708
S'enable'
p41709
sS'required'
p41710
I00
sS'group_name'
p41711
S'Advanced'
p41712
sa(dp41713
S'description'
p41714
S'List of gamma material property names for each other order parameter. Place in same order as order parameters (v)!\n'
p41715
sS'cpp_type'
p41716
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p41717
sS'default'
p41718
g3
sS'name'
p41719
S'gamma_names'
p41720
sS'required'
p41721
I01
sS'group_name'
p41722
Nsa(dp41723
S'description'
p41724
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41725
sS'cpp_type'
p41726
S'bool'
p41727
sS'default'
p41728
S'1'
p41729
sS'name'
p41730
S'implicit'
p41731
sS'required'
p41732
I00
sS'group_name'
p41733
S'Advanced'
p41734
sa(dp41735
S'description'
p41736
S'The mobility used with the kernel\n'
p41737
sS'cpp_type'
p41738
S'MaterialPropertyName'
p41739
sS'default'
p41740
S'L'
p41741
sS'name'
p41742
S'mob_name'
p41743
sS'required'
p41744
I00
sS'group_name'
p41745
Nsa(dp41746
S'description'
p41747
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41748
sS'cpp_type'
p41749
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41750
sS'default'
p41751
g3
sS'name'
p41752
S'save_in'
p41753
sS'required'
p41754
I00
sS'group_name'
p41755
S'Advanced'
p41756
sa(dp41757
S'description'
p41758
S'The seed for the master random number generator\n'
p41759
sS'cpp_type'
p41760
S'unsigned int'
p41761
sS'default'
p41762
S'0'
p41763
sS'name'
p41764
S'seed'
p41765
sS'required'
p41766
I00
sS'group_name'
p41767
S'Advanced'
p41768
sa(dp41769
S'description'
p41770
g3
sS'cpp_type'
p41771
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41772
sS'default'
p41773
S'ACGrGrMulti'
p41774
sS'name'
p41775
S'type'
p41776
sS'required'
p41777
I00
sS'group_name'
p41778
Nsa(dp41779
S'description'
p41780
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41781
sS'cpp_type'
p41782
S'bool'
p41783
sS'default'
p41784
S'0'
p41785
sS'name'
p41786
S'use_displaced_mesh'
p41787
sS'required'
p41788
I00
sS'group_name'
p41789
S'Advanced'
p41790
sa(dp41791
S'description'
p41792
S'Array of coupled order paramter names for other order parameters\n'
p41793
sS'cpp_type'
p41794
S'std::vector<VariableName>'
p41795
sS'default'
p41796
g3
sS'name'
p41797
S'v'
p41798
sS'required'
p41799
I01
sS'group_name'
p41800
Nsa(dp41801
S'description'
p41802
S'The name of the variable that this Kernel operates on\n'
p41803
sS'cpp_type'
p41804
S'NonlinearVariableName'
p41805
sS'default'
p41806
g3
sS'name'
p41807
S'variable'
p41808
sS'required'
p41809
I01
sS'group_name'
p41810
NsasS'name'
p41811
S'/Kernels/ACGrGrMulti'
p41812
sa(dp41813
S'description'
p41814
S'Grain-Boundary model poly-crystaline interface Allen-Cahn Kernel\n'
p41815
sS'subblocks'
p41816
NsS'parameters'
p41817
(lp41818
(dp41819
S'description'
p41820
S'temperature\n'
p41821
sS'cpp_type'
p41822
S'std::vector<VariableName>'
p41823
sS'default'
p41824
g3
sS'name'
p41825
S'T'
p41826
sS'required'
p41827
I00
sS'group_name'
p41828
Nsa(dp41829
S'description'
p41830
S'Vector of arguments of the mobility\n'
p41831
sS'cpp_type'
p41832
S'std::vector<VariableName>'
p41833
sS'default'
p41834
g3
sS'name'
p41835
S'args'
p41836
sS'required'
p41837
I00
sS'group_name'
p41838
Nsa(dp41839
S'description'
p41840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41841
sS'cpp_type'
p41842
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41843
sS'default'
p41844
g3
sS'name'
p41845
S'block'
p41846
sS'required'
p41847
I00
sS'group_name'
p41848
Nsa(dp41849
S'description'
p41850
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41851
sS'cpp_type'
p41852
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41853
sS'default'
p41854
g3
sS'name'
p41855
S'control_tags'
p41856
sS'required'
p41857
I00
sS'group_name'
p41858
S'Advanced'
p41859
sa(dp41860
S'description'
p41861
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41862
sS'cpp_type'
p41863
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41864
sS'default'
p41865
g3
sS'name'
p41866
S'diag_save_in'
p41867
sS'required'
p41868
I00
sS'group_name'
p41869
S'Advanced'
p41870
sa(dp41871
S'description'
p41872
S'Whether or not this kernel will be used as an eigen kernel\n'
p41873
sS'cpp_type'
p41874
S'bool'
p41875
sS'default'
p41876
S'0'
p41877
sS'name'
p41878
S'eigen_kernel'
p41879
sS'required'
p41880
I00
sS'group_name'
p41881
Nsa(dp41882
S'description'
p41883
S'Set the enabled status of the MooseObject.\n'
p41884
sS'cpp_type'
p41885
S'bool'
p41886
sS'default'
p41887
S'1'
p41888
sS'name'
p41889
S'enable'
p41890
sS'required'
p41891
I00
sS'group_name'
p41892
S'Advanced'
p41893
sa(dp41894
S'description'
p41895
S'Determines whether this object is calculated using an implicit or explicit form\n'
p41896
sS'cpp_type'
p41897
S'bool'
p41898
sS'default'
p41899
S'1'
p41900
sS'name'
p41901
S'implicit'
p41902
sS'required'
p41903
I00
sS'group_name'
p41904
S'Advanced'
p41905
sa(dp41906
S'description'
p41907
S'The mobility used with the kernel\n'
p41908
sS'cpp_type'
p41909
S'MaterialPropertyName'
p41910
sS'default'
p41911
S'L'
p41912
sS'name'
p41913
S'mob_name'
p41914
sS'required'
p41915
I00
sS'group_name'
p41916
Nsa(dp41917
S'description'
p41918
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p41919
sS'cpp_type'
p41920
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p41921
sS'default'
p41922
g3
sS'name'
p41923
S'save_in'
p41924
sS'required'
p41925
I00
sS'group_name'
p41926
S'Advanced'
p41927
sa(dp41928
S'description'
p41929
S'The seed for the master random number generator\n'
p41930
sS'cpp_type'
p41931
S'unsigned int'
p41932
sS'default'
p41933
S'0'
p41934
sS'name'
p41935
S'seed'
p41936
sS'required'
p41937
I00
sS'group_name'
p41938
S'Advanced'
p41939
sa(dp41940
S'description'
p41941
g3
sS'cpp_type'
p41942
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41943
sS'default'
p41944
S'ACGrGrPoly'
p41945
sS'name'
p41946
S'type'
p41947
sS'required'
p41948
I00
sS'group_name'
p41949
Nsa(dp41950
S'description'
p41951
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41952
sS'cpp_type'
p41953
S'bool'
p41954
sS'default'
p41955
S'0'
p41956
sS'name'
p41957
S'use_displaced_mesh'
p41958
sS'required'
p41959
I00
sS'group_name'
p41960
S'Advanced'
p41961
sa(dp41962
S'description'
p41963
S'Array of coupled order paramter names for other order parameters\n'
p41964
sS'cpp_type'
p41965
S'std::vector<VariableName>'
p41966
sS'default'
p41967
g3
sS'name'
p41968
S'v'
p41969
sS'required'
p41970
I01
sS'group_name'
p41971
Nsa(dp41972
S'description'
p41973
S'The name of the variable that this Kernel operates on\n'
p41974
sS'cpp_type'
p41975
S'NonlinearVariableName'
p41976
sS'default'
p41977
g3
sS'name'
p41978
S'variable'
p41979
sS'required'
p41980
I01
sS'group_name'
p41981
NsasS'name'
p41982
S'/Kernels/ACGrGrPoly'
p41983
sa(dp41984
S'description'
p41985
S'Gradient energy Allen-Cahn Kernel\n'
p41986
sS'subblocks'
p41987
NsS'parameters'
p41988
(lp41989
(dp41990
S'description'
p41991
S'Vector of nonlinear variable arguments this object depends on\n'
p41992
sS'cpp_type'
p41993
S'std::vector<VariableName>'
p41994
sS'default'
p41995
g3
sS'name'
p41996
S'args'
p41997
sS'required'
p41998
I00
sS'group_name'
p41999
Nsa(dp42000
S'description'
p42001
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42002
sS'cpp_type'
p42003
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42004
sS'default'
p42005
g3
sS'name'
p42006
S'block'
p42007
sS'required'
p42008
I00
sS'group_name'
p42009
Nsa(dp42010
S'description'
p42011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42012
sS'cpp_type'
p42013
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42014
sS'default'
p42015
g3
sS'name'
p42016
S'control_tags'
p42017
sS'required'
p42018
I00
sS'group_name'
p42019
S'Advanced'
p42020
sa(dp42021
S'description'
p42022
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42023
sS'cpp_type'
p42024
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42025
sS'default'
p42026
g3
sS'name'
p42027
S'diag_save_in'
p42028
sS'required'
p42029
I00
sS'group_name'
p42030
S'Advanced'
p42031
sa(dp42032
S'description'
p42033
S'Whether or not this kernel will be used as an eigen kernel\n'
p42034
sS'cpp_type'
p42035
S'bool'
p42036
sS'default'
p42037
S'0'
p42038
sS'name'
p42039
S'eigen_kernel'
p42040
sS'required'
p42041
I00
sS'group_name'
p42042
Nsa(dp42043
S'description'
p42044
S'Set the enabled status of the MooseObject.\n'
p42045
sS'cpp_type'
p42046
S'bool'
p42047
sS'default'
p42048
S'1'
p42049
sS'name'
p42050
S'enable'
p42051
sS'required'
p42052
I00
sS'group_name'
p42053
S'Advanced'
p42054
sa(dp42055
S'description'
p42056
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42057
sS'cpp_type'
p42058
S'bool'
p42059
sS'default'
p42060
S'1'
p42061
sS'name'
p42062
S'implicit'
p42063
sS'required'
p42064
I00
sS'group_name'
p42065
S'Advanced'
p42066
sa(dp42067
S'description'
p42068
S'The kappa used with the kernel\n'
p42069
sS'cpp_type'
p42070
S'MaterialPropertyName'
p42071
sS'default'
p42072
S'kappa_op'
p42073
sS'name'
p42074
S'kappa_name'
p42075
sS'required'
p42076
I00
sS'group_name'
p42077
Nsa(dp42078
S'description'
p42079
S'The mobility used with the kernel\n'
p42080
sS'cpp_type'
p42081
S'MaterialPropertyName'
p42082
sS'default'
p42083
S'L'
p42084
sS'name'
p42085
S'mob_name'
p42086
sS'required'
p42087
I00
sS'group_name'
p42088
Nsa(dp42089
S'description'
p42090
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42091
sS'cpp_type'
p42092
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42093
sS'default'
p42094
g3
sS'name'
p42095
S'save_in'
p42096
sS'required'
p42097
I00
sS'group_name'
p42098
S'Advanced'
p42099
sa(dp42100
S'description'
p42101
S'The seed for the master random number generator\n'
p42102
sS'cpp_type'
p42103
S'unsigned int'
p42104
sS'default'
p42105
S'0'
p42106
sS'name'
p42107
S'seed'
p42108
sS'required'
p42109
I00
sS'group_name'
p42110
S'Advanced'
p42111
sa(dp42112
S'description'
p42113
g3
sS'cpp_type'
p42114
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42115
sS'default'
p42116
S'ACInterface'
p42117
sS'name'
p42118
S'type'
p42119
sS'required'
p42120
I00
sS'group_name'
p42121
Nsa(dp42122
S'description'
p42123
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42124
sS'cpp_type'
p42125
S'bool'
p42126
sS'default'
p42127
S'0'
p42128
sS'name'
p42129
S'use_displaced_mesh'
p42130
sS'required'
p42131
I00
sS'group_name'
p42132
S'Advanced'
p42133
sa(dp42134
S'description'
p42135
S'The name of the variable that this Kernel operates on\n'
p42136
sS'cpp_type'
p42137
S'NonlinearVariableName'
p42138
sS'default'
p42139
g3
sS'name'
p42140
S'variable'
p42141
sS'required'
p42142
I01
sS'group_name'
p42143
Nsa(dp42144
S'description'
p42145
S'The mobility is a function of any MOOSE variable (if this is set to false L must be constant over the entire domain!)\n'
p42146
sS'cpp_type'
p42147
S'bool'
p42148
sS'default'
p42149
S'1'
p42150
sS'name'
p42151
S'variable_L'
p42152
sS'required'
p42153
I00
sS'group_name'
p42154
NsasS'name'
p42155
S'/Kernels/ACInterface'
p42156
sa(dp42157
S'description'
p42158
S'Anisotropic gradient energy Allen-Cahn Kernel Part 1\n'
p42159
sS'subblocks'
p42160
NsS'parameters'
p42161
(lp42162
(dp42163
S'description'
p42164
S'Vector of nonlinear variable arguments this object depends on\n'
p42165
sS'cpp_type'
p42166
S'std::vector<VariableName>'
p42167
sS'default'
p42168
g3
sS'name'
p42169
S'args'
p42170
sS'required'
p42171
I00
sS'group_name'
p42172
Nsa(dp42173
S'description'
p42174
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42175
sS'cpp_type'
p42176
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42177
sS'default'
p42178
g3
sS'name'
p42179
S'block'
p42180
sS'required'
p42181
I00
sS'group_name'
p42182
Nsa(dp42183
S'description'
p42184
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42185
sS'cpp_type'
p42186
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42187
sS'default'
p42188
g3
sS'name'
p42189
S'control_tags'
p42190
sS'required'
p42191
I00
sS'group_name'
p42192
S'Advanced'
p42193
sa(dp42194
S'description'
p42195
S'The derivative of deps with respect to grad_op\n'
p42196
sS'cpp_type'
p42197
S'MaterialPropertyName'
p42198
sS'default'
p42199
S'ddepsdgrad_op'
p42200
sS'name'
p42201
S'ddepsdgrad_op_name'
p42202
sS'required'
p42203
I00
sS'group_name'
p42204
Nsa(dp42205
S'description'
p42206
S'The derivative of the anisotropic interface parameter with respect to angle\n'
p42207
sS'cpp_type'
p42208
S'MaterialPropertyName'
p42209
sS'default'
p42210
S'deps'
p42211
sS'name'
p42212
S'deps_name'
p42213
sS'required'
p42214
I00
sS'group_name'
p42215
Nsa(dp42216
S'description'
p42217
S'The derivative of the anisotropic interface parameter eps with respect to grad_op\n'
p42218
sS'cpp_type'
p42219
S'MaterialPropertyName'
p42220
sS'default'
p42221
S'depsdgrad_op'
p42222
sS'name'
p42223
S'depsdgrad_op_name'
p42224
sS'required'
p42225
I00
sS'group_name'
p42226
Nsa(dp42227
S'description'
p42228
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42229
sS'cpp_type'
p42230
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42231
sS'default'
p42232
g3
sS'name'
p42233
S'diag_save_in'
p42234
sS'required'
p42235
I00
sS'group_name'
p42236
S'Advanced'
p42237
sa(dp42238
S'description'
p42239
S'Whether or not this kernel will be used as an eigen kernel\n'
p42240
sS'cpp_type'
p42241
S'bool'
p42242
sS'default'
p42243
S'0'
p42244
sS'name'
p42245
S'eigen_kernel'
p42246
sS'required'
p42247
I00
sS'group_name'
p42248
Nsa(dp42249
S'description'
p42250
S'Set the enabled status of the MooseObject.\n'
p42251
sS'cpp_type'
p42252
S'bool'
p42253
sS'default'
p42254
S'1'
p42255
sS'name'
p42256
S'enable'
p42257
sS'required'
p42258
I00
sS'group_name'
p42259
S'Advanced'
p42260
sa(dp42261
S'description'
p42262
S'The anisotropic interface parameter\n'
p42263
sS'cpp_type'
p42264
S'MaterialPropertyName'
p42265
sS'default'
p42266
S'eps'
p42267
sS'name'
p42268
S'eps_name'
p42269
sS'required'
p42270
I00
sS'group_name'
p42271
Nsa(dp42272
S'description'
p42273
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42274
sS'cpp_type'
p42275
S'bool'
p42276
sS'default'
p42277
S'1'
p42278
sS'name'
p42279
S'implicit'
p42280
sS'required'
p42281
I00
sS'group_name'
p42282
S'Advanced'
p42283
sa(dp42284
S'description'
p42285
S'The mobility used with the kernel\n'
p42286
sS'cpp_type'
p42287
S'MaterialPropertyName'
p42288
sS'default'
p42289
S'L'
p42290
sS'name'
p42291
S'mob_name'
p42292
sS'required'
p42293
I00
sS'group_name'
p42294
Nsa(dp42295
S'description'
p42296
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42297
sS'cpp_type'
p42298
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42299
sS'default'
p42300
g3
sS'name'
p42301
S'save_in'
p42302
sS'required'
p42303
I00
sS'group_name'
p42304
S'Advanced'
p42305
sa(dp42306
S'description'
p42307
S'The seed for the master random number generator\n'
p42308
sS'cpp_type'
p42309
S'unsigned int'
p42310
sS'default'
p42311
S'0'
p42312
sS'name'
p42313
S'seed'
p42314
sS'required'
p42315
I00
sS'group_name'
p42316
S'Advanced'
p42317
sa(dp42318
S'description'
p42319
g3
sS'cpp_type'
p42320
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42321
sS'default'
p42322
S'ACInterfaceKobayashi1'
p42323
sS'name'
p42324
S'type'
p42325
sS'required'
p42326
I00
sS'group_name'
p42327
Nsa(dp42328
S'description'
p42329
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42330
sS'cpp_type'
p42331
S'bool'
p42332
sS'default'
p42333
S'0'
p42334
sS'name'
p42335
S'use_displaced_mesh'
p42336
sS'required'
p42337
I00
sS'group_name'
p42338
S'Advanced'
p42339
sa(dp42340
S'description'
p42341
S'The name of the variable that this Kernel operates on\n'
p42342
sS'cpp_type'
p42343
S'NonlinearVariableName'
p42344
sS'default'
p42345
g3
sS'name'
p42346
S'variable'
p42347
sS'required'
p42348
I01
sS'group_name'
p42349
NsasS'name'
p42350
S'/Kernels/ACInterfaceKobayashi1'
p42351
sa(dp42352
S'description'
p42353
S'Anisotropic Gradient energy Allen-Cahn Kernel Part 2\n'
p42354
sS'subblocks'
p42355
NsS'parameters'
p42356
(lp42357
(dp42358
S'description'
p42359
S'Vector of nonlinear variable arguments this object depends on\n'
p42360
sS'cpp_type'
p42361
S'std::vector<VariableName>'
p42362
sS'default'
p42363
g3
sS'name'
p42364
S'args'
p42365
sS'required'
p42366
I00
sS'group_name'
p42367
Nsa(dp42368
S'description'
p42369
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42370
sS'cpp_type'
p42371
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42372
sS'default'
p42373
g3
sS'name'
p42374
S'block'
p42375
sS'required'
p42376
I00
sS'group_name'
p42377
Nsa(dp42378
S'description'
p42379
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42380
sS'cpp_type'
p42381
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42382
sS'default'
p42383
g3
sS'name'
p42384
S'control_tags'
p42385
sS'required'
p42386
I00
sS'group_name'
p42387
S'Advanced'
p42388
sa(dp42389
S'description'
p42390
S'The derivative of the anisotropic interface parameter eps with respect to grad_op\n'
p42391
sS'cpp_type'
p42392
S'MaterialPropertyName'
p42393
sS'default'
p42394
S'depsdgrad_op'
p42395
sS'name'
p42396
S'depsdgrad_op_name'
p42397
sS'required'
p42398
I00
sS'group_name'
p42399
Nsa(dp42400
S'description'
p42401
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42402
sS'cpp_type'
p42403
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42404
sS'default'
p42405
g3
sS'name'
p42406
S'diag_save_in'
p42407
sS'required'
p42408
I00
sS'group_name'
p42409
S'Advanced'
p42410
sa(dp42411
S'description'
p42412
S'Whether or not this kernel will be used as an eigen kernel\n'
p42413
sS'cpp_type'
p42414
S'bool'
p42415
sS'default'
p42416
S'0'
p42417
sS'name'
p42418
S'eigen_kernel'
p42419
sS'required'
p42420
I00
sS'group_name'
p42421
Nsa(dp42422
S'description'
p42423
S'Set the enabled status of the MooseObject.\n'
p42424
sS'cpp_type'
p42425
S'bool'
p42426
sS'default'
p42427
S'1'
p42428
sS'name'
p42429
S'enable'
p42430
sS'required'
p42431
I00
sS'group_name'
p42432
S'Advanced'
p42433
sa(dp42434
S'description'
p42435
S'The anisotropic parameter\n'
p42436
sS'cpp_type'
p42437
S'MaterialPropertyName'
p42438
sS'default'
p42439
S'eps'
p42440
sS'name'
p42441
S'eps_name'
p42442
sS'required'
p42443
I00
sS'group_name'
p42444
Nsa(dp42445
S'description'
p42446
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42447
sS'cpp_type'
p42448
S'bool'
p42449
sS'default'
p42450
S'1'
p42451
sS'name'
p42452
S'implicit'
p42453
sS'required'
p42454
I00
sS'group_name'
p42455
S'Advanced'
p42456
sa(dp42457
S'description'
p42458
S'The mobility used with the kernel\n'
p42459
sS'cpp_type'
p42460
S'MaterialPropertyName'
p42461
sS'default'
p42462
S'L'
p42463
sS'name'
p42464
S'mob_name'
p42465
sS'required'
p42466
I00
sS'group_name'
p42467
Nsa(dp42468
S'description'
p42469
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42470
sS'cpp_type'
p42471
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42472
sS'default'
p42473
g3
sS'name'
p42474
S'save_in'
p42475
sS'required'
p42476
I00
sS'group_name'
p42477
S'Advanced'
p42478
sa(dp42479
S'description'
p42480
S'The seed for the master random number generator\n'
p42481
sS'cpp_type'
p42482
S'unsigned int'
p42483
sS'default'
p42484
S'0'
p42485
sS'name'
p42486
S'seed'
p42487
sS'required'
p42488
I00
sS'group_name'
p42489
S'Advanced'
p42490
sa(dp42491
S'description'
p42492
g3
sS'cpp_type'
p42493
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42494
sS'default'
p42495
S'ACInterfaceKobayashi2'
p42496
sS'name'
p42497
S'type'
p42498
sS'required'
p42499
I00
sS'group_name'
p42500
Nsa(dp42501
S'description'
p42502
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42503
sS'cpp_type'
p42504
S'bool'
p42505
sS'default'
p42506
S'0'
p42507
sS'name'
p42508
S'use_displaced_mesh'
p42509
sS'required'
p42510
I00
sS'group_name'
p42511
S'Advanced'
p42512
sa(dp42513
S'description'
p42514
S'The name of the variable that this Kernel operates on\n'
p42515
sS'cpp_type'
p42516
S'NonlinearVariableName'
p42517
sS'default'
p42518
g3
sS'name'
p42519
S'variable'
p42520
sS'required'
p42521
I01
sS'group_name'
p42522
NsasS'name'
p42523
S'/Kernels/ACInterfaceKobayashi2'
p42524
sa(dp42525
S'description'
p42526
S'Gradient energy Allen-Cahn Kernel with cross terms\n'
p42527
sS'subblocks'
p42528
NsS'parameters'
p42529
(lp42530
(dp42531
S'description'
p42532
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42533
sS'cpp_type'
p42534
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42535
sS'default'
p42536
g3
sS'name'
p42537
S'block'
p42538
sS'required'
p42539
I00
sS'group_name'
p42540
Nsa(dp42541
S'description'
p42542
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42543
sS'cpp_type'
p42544
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42545
sS'default'
p42546
g3
sS'name'
p42547
S'control_tags'
p42548
sS'required'
p42549
I00
sS'group_name'
p42550
S'Advanced'
p42551
sa(dp42552
S'description'
p42553
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42554
sS'cpp_type'
p42555
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42556
sS'default'
p42557
g3
sS'name'
p42558
S'diag_save_in'
p42559
sS'required'
p42560
I00
sS'group_name'
p42561
S'Advanced'
p42562
sa(dp42563
S'description'
p42564
S'Whether or not this kernel will be used as an eigen kernel\n'
p42565
sS'cpp_type'
p42566
S'bool'
p42567
sS'default'
p42568
S'0'
p42569
sS'name'
p42570
S'eigen_kernel'
p42571
sS'required'
p42572
I00
sS'group_name'
p42573
Nsa(dp42574
S'description'
p42575
S'Set the enabled status of the MooseObject.\n'
p42576
sS'cpp_type'
p42577
S'bool'
p42578
sS'default'
p42579
S'1'
p42580
sS'name'
p42581
S'enable'
p42582
sS'required'
p42583
I00
sS'group_name'
p42584
S'Advanced'
p42585
sa(dp42586
S'description'
p42587
S'All eta_i order parameters of the multiphase problem\n'
p42588
sS'cpp_type'
p42589
S'std::vector<VariableName>'
p42590
sS'default'
p42591
g3
sS'name'
p42592
S'etas'
p42593
sS'required'
p42594
I01
sS'group_name'
p42595
Nsa(dp42596
S'description'
p42597
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42598
sS'cpp_type'
p42599
S'bool'
p42600
sS'default'
p42601
S'1'
p42602
sS'name'
p42603
S'implicit'
p42604
sS'required'
p42605
I00
sS'group_name'
p42606
S'Advanced'
p42607
sa(dp42608
S'description'
p42609
S'The kappa used with the kernel\n'
p42610
sS'cpp_type'
p42611
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p42612
sS'default'
p42613
g3
sS'name'
p42614
S'kappa_names'
p42615
sS'required'
p42616
I01
sS'group_name'
p42617
Nsa(dp42618
S'description'
p42619
S'The mobility used with the kernel\n'
p42620
sS'cpp_type'
p42621
S'MaterialPropertyName'
p42622
sS'default'
p42623
S'L'
p42624
sS'name'
p42625
S'mob_name'
p42626
sS'required'
p42627
I00
sS'group_name'
p42628
Nsa(dp42629
S'description'
p42630
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42631
sS'cpp_type'
p42632
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42633
sS'default'
p42634
g3
sS'name'
p42635
S'save_in'
p42636
sS'required'
p42637
I00
sS'group_name'
p42638
S'Advanced'
p42639
sa(dp42640
S'description'
p42641
S'The seed for the master random number generator\n'
p42642
sS'cpp_type'
p42643
S'unsigned int'
p42644
sS'default'
p42645
S'0'
p42646
sS'name'
p42647
S'seed'
p42648
sS'required'
p42649
I00
sS'group_name'
p42650
S'Advanced'
p42651
sa(dp42652
S'description'
p42653
g3
sS'cpp_type'
p42654
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42655
sS'default'
p42656
S'ACMultiInterface'
p42657
sS'name'
p42658
S'type'
p42659
sS'required'
p42660
I00
sS'group_name'
p42661
Nsa(dp42662
S'description'
p42663
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42664
sS'cpp_type'
p42665
S'bool'
p42666
sS'default'
p42667
S'0'
p42668
sS'name'
p42669
S'use_displaced_mesh'
p42670
sS'required'
p42671
I00
sS'group_name'
p42672
S'Advanced'
p42673
sa(dp42674
S'description'
p42675
S'The name of the variable that this Kernel operates on\n'
p42676
sS'cpp_type'
p42677
S'NonlinearVariableName'
p42678
sS'default'
p42679
g3
sS'name'
p42680
S'variable'
p42681
sS'required'
p42682
I01
sS'group_name'
p42683
NsasS'name'
p42684
S'/Kernels/ACMultiInterface'
p42685
sa(dp42686
S'description'
p42687
S'Stored Energy contribution to grain growth\n'
p42688
sS'subblocks'
p42689
NsS'parameters'
p42690
(lp42691
(dp42692
S'description'
p42693
S'Vector of arguments of the mobility\n'
p42694
sS'cpp_type'
p42695
S'std::vector<VariableName>'
p42696
sS'default'
p42697
g3
sS'name'
p42698
S'args'
p42699
sS'required'
p42700
I00
sS'group_name'
p42701
Nsa(dp42702
S'description'
p42703
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42704
sS'cpp_type'
p42705
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42706
sS'default'
p42707
g3
sS'name'
p42708
S'block'
p42709
sS'required'
p42710
I00
sS'group_name'
p42711
Nsa(dp42712
S'description'
p42713
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42714
sS'cpp_type'
p42715
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42716
sS'default'
p42717
g3
sS'name'
p42718
S'control_tags'
p42719
sS'required'
p42720
I00
sS'group_name'
p42721
S'Advanced'
p42722
sa(dp42723
S'description'
p42724
S'Number of OP representing deformed grains\n'
p42725
sS'cpp_type'
p42726
S'unsigned int'
p42727
sS'default'
p42728
g3
sS'name'
p42729
S'deformed_grain_num'
p42730
sS'required'
p42731
I01
sS'group_name'
p42732
Nsa(dp42733
S'description'
p42734
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42735
sS'cpp_type'
p42736
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42737
sS'default'
p42738
g3
sS'name'
p42739
S'diag_save_in'
p42740
sS'required'
p42741
I00
sS'group_name'
p42742
S'Advanced'
p42743
sa(dp42744
S'description'
p42745
S'Whether or not this kernel will be used as an eigen kernel\n'
p42746
sS'cpp_type'
p42747
S'bool'
p42748
sS'default'
p42749
S'0'
p42750
sS'name'
p42751
S'eigen_kernel'
p42752
sS'required'
p42753
I00
sS'group_name'
p42754
Nsa(dp42755
S'description'
p42756
S'Set the enabled status of the MooseObject.\n'
p42757
sS'cpp_type'
p42758
S'bool'
p42759
sS'default'
p42760
S'1'
p42761
sS'name'
p42762
S'enable'
p42763
sS'required'
p42764
I00
sS'group_name'
p42765
S'Advanced'
p42766
sa(dp42767
S'description'
p42768
S'The GrainTracker UserObject to get values from.\n'
p42769
sS'cpp_type'
p42770
S'UserObjectName'
p42771
sS'default'
p42772
g3
sS'name'
p42773
S'grain_tracker'
p42774
sS'required'
p42775
I01
sS'group_name'
p42776
Nsa(dp42777
S'description'
p42778
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42779
sS'cpp_type'
p42780
S'bool'
p42781
sS'default'
p42782
S'1'
p42783
sS'name'
p42784
S'implicit'
p42785
sS'required'
p42786
I00
sS'group_name'
p42787
S'Advanced'
p42788
sa(dp42789
S'description'
p42790
S'The mobility used with the kernel\n'
p42791
sS'cpp_type'
p42792
S'MaterialPropertyName'
p42793
sS'default'
p42794
S'L'
p42795
sS'name'
p42796
S'mob_name'
p42797
sS'required'
p42798
I00
sS'group_name'
p42799
Nsa(dp42800
S'description'
p42801
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42802
sS'cpp_type'
p42803
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42804
sS'default'
p42805
g3
sS'name'
p42806
S'save_in'
p42807
sS'required'
p42808
I00
sS'group_name'
p42809
S'Advanced'
p42810
sa(dp42811
S'description'
p42812
S'The seed for the master random number generator\n'
p42813
sS'cpp_type'
p42814
S'unsigned int'
p42815
sS'default'
p42816
S'0'
p42817
sS'name'
p42818
S'seed'
p42819
sS'required'
p42820
I00
sS'group_name'
p42821
S'Advanced'
p42822
sa(dp42823
S'description'
p42824
g3
sS'cpp_type'
p42825
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42826
sS'default'
p42827
S'ACSEDGPoly'
p42828
sS'name'
p42829
S'type'
p42830
sS'required'
p42831
I00
sS'group_name'
p42832
Nsa(dp42833
S'description'
p42834
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42835
sS'cpp_type'
p42836
S'bool'
p42837
sS'default'
p42838
S'0'
p42839
sS'name'
p42840
S'use_displaced_mesh'
p42841
sS'required'
p42842
I00
sS'group_name'
p42843
S'Advanced'
p42844
sa(dp42845
S'description'
p42846
S'Array of coupled variable names\n'
p42847
sS'cpp_type'
p42848
S'std::vector<VariableName>'
p42849
sS'default'
p42850
g3
sS'name'
p42851
S'v'
p42852
sS'required'
p42853
I01
sS'group_name'
p42854
Nsa(dp42855
S'description'
p42856
S'The name of the variable that this Kernel operates on\n'
p42857
sS'cpp_type'
p42858
S'NonlinearVariableName'
p42859
sS'default'
p42860
g3
sS'name'
p42861
S'variable'
p42862
sS'required'
p42863
I01
sS'group_name'
p42864
NsasS'name'
p42865
S'/Kernels/ACSEDGPoly'
p42866
sa(dp42867
S'description'
p42868
S'Kernel for Allen-Cahn equation that adds derivatives of switching functions * energies\n'
p42869
sS'subblocks'
p42870
NsS'parameters'
p42871
(lp42872
(dp42873
S'description'
p42874
S'List of free energies for each phase. Place in same order as hj_names!\n'
p42875
sS'cpp_type'
p42876
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p42877
sS'default'
p42878
g3
sS'name'
p42879
S'Fj_names'
p42880
sS'required'
p42881
I01
sS'group_name'
p42882
Nsa(dp42883
S'description'
p42884
S'Vector of arguments of the mobility\n'
p42885
sS'cpp_type'
p42886
S'std::vector<VariableName>'
p42887
sS'default'
p42888
g3
sS'name'
p42889
S'args'
p42890
sS'required'
p42891
I00
sS'group_name'
p42892
Nsa(dp42893
S'description'
p42894
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42895
sS'cpp_type'
p42896
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42897
sS'default'
p42898
g3
sS'name'
p42899
S'block'
p42900
sS'required'
p42901
I00
sS'group_name'
p42902
Nsa(dp42903
S'description'
p42904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42905
sS'cpp_type'
p42906
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42907
sS'default'
p42908
g3
sS'name'
p42909
S'control_tags'
p42910
sS'required'
p42911
I00
sS'group_name'
p42912
S'Advanced'
p42913
sa(dp42914
S'description'
p42915
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42916
sS'cpp_type'
p42917
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42918
sS'default'
p42919
g3
sS'name'
p42920
S'diag_save_in'
p42921
sS'required'
p42922
I00
sS'group_name'
p42923
S'Advanced'
p42924
sa(dp42925
S'description'
p42926
S'Whether or not this kernel will be used as an eigen kernel\n'
p42927
sS'cpp_type'
p42928
S'bool'
p42929
sS'default'
p42930
S'0'
p42931
sS'name'
p42932
S'eigen_kernel'
p42933
sS'required'
p42934
I00
sS'group_name'
p42935
Nsa(dp42936
S'description'
p42937
S'Set the enabled status of the MooseObject.\n'
p42938
sS'cpp_type'
p42939
S'bool'
p42940
sS'default'
p42941
S'1'
p42942
sS'name'
p42943
S'enable'
p42944
sS'required'
p42945
I00
sS'group_name'
p42946
S'Advanced'
p42947
sa(dp42948
S'description'
p42949
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p42950
sS'cpp_type'
p42951
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p42952
sS'default'
p42953
g3
sS'name'
p42954
S'hj_names'
p42955
sS'required'
p42956
I01
sS'group_name'
p42957
Nsa(dp42958
S'description'
p42959
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42960
sS'cpp_type'
p42961
S'bool'
p42962
sS'default'
p42963
S'1'
p42964
sS'name'
p42965
S'implicit'
p42966
sS'required'
p42967
I00
sS'group_name'
p42968
S'Advanced'
p42969
sa(dp42970
S'description'
p42971
S'The mobility used with the kernel\n'
p42972
sS'cpp_type'
p42973
S'MaterialPropertyName'
p42974
sS'default'
p42975
S'L'
p42976
sS'name'
p42977
S'mob_name'
p42978
sS'required'
p42979
I00
sS'group_name'
p42980
Nsa(dp42981
S'description'
p42982
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p42983
sS'cpp_type'
p42984
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p42985
sS'default'
p42986
g3
sS'name'
p42987
S'save_in'
p42988
sS'required'
p42989
I00
sS'group_name'
p42990
S'Advanced'
p42991
sa(dp42992
S'description'
p42993
S'The seed for the master random number generator\n'
p42994
sS'cpp_type'
p42995
S'unsigned int'
p42996
sS'default'
p42997
S'0'
p42998
sS'name'
p42999
S'seed'
p43000
sS'required'
p43001
I00
sS'group_name'
p43002
S'Advanced'
p43003
sa(dp43004
S'description'
p43005
g3
sS'cpp_type'
p43006
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43007
sS'default'
p43008
S'ACSwitching'
p43009
sS'name'
p43010
S'type'
p43011
sS'required'
p43012
I00
sS'group_name'
p43013
Nsa(dp43014
S'description'
p43015
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43016
sS'cpp_type'
p43017
S'bool'
p43018
sS'default'
p43019
S'0'
p43020
sS'name'
p43021
S'use_displaced_mesh'
p43022
sS'required'
p43023
I00
sS'group_name'
p43024
S'Advanced'
p43025
sa(dp43026
S'description'
p43027
S'The name of the variable that this Kernel operates on\n'
p43028
sS'cpp_type'
p43029
S'NonlinearVariableName'
p43030
sS'default'
p43031
g3
sS'name'
p43032
S'variable'
p43033
sS'required'
p43034
I01
sS'group_name'
p43035
NsasS'name'
p43036
S'/Kernels/ACSwitching'
p43037
sa(dp43038
S'description'
p43039
S'Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n'
p43040
sS'subblocks'
p43041
NsS'parameters'
p43042
(lp43043
(dp43044
S'description'
p43045
S'Vector of arguments of the mobility\n'
p43046
sS'cpp_type'
p43047
S'std::vector<VariableName>'
p43048
sS'default'
p43049
g3
sS'name'
p43050
S'args'
p43051
sS'required'
p43052
I00
sS'group_name'
p43053
Nsa(dp43054
S'description'
p43055
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43056
sS'cpp_type'
p43057
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43058
sS'default'
p43059
g3
sS'name'
p43060
S'block'
p43061
sS'required'
p43062
I00
sS'group_name'
p43063
Nsa(dp43064
S'description'
p43065
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43066
sS'cpp_type'
p43067
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43068
sS'default'
p43069
g3
sS'name'
p43070
S'control_tags'
p43071
sS'required'
p43072
I00
sS'group_name'
p43073
S'Advanced'
p43074
sa(dp43075
S'description'
p43076
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43077
sS'cpp_type'
p43078
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43079
sS'default'
p43080
g3
sS'name'
p43081
S'diag_save_in'
p43082
sS'required'
p43083
I00
sS'group_name'
p43084
S'Advanced'
p43085
sa(dp43086
S'description'
p43087
S'Whether or not this kernel will be used as an eigen kernel\n'
p43088
sS'cpp_type'
p43089
S'bool'
p43090
sS'default'
p43091
S'0'
p43092
sS'name'
p43093
S'eigen_kernel'
p43094
sS'required'
p43095
I00
sS'group_name'
p43096
Nsa(dp43097
S'description'
p43098
S'Set the enabled status of the MooseObject.\n'
p43099
sS'cpp_type'
p43100
S'bool'
p43101
sS'default'
p43102
S'1'
p43103
sS'name'
p43104
S'enable'
p43105
sS'required'
p43106
I00
sS'group_name'
p43107
S'Advanced'
p43108
sa(dp43109
S'description'
p43110
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p43111
sS'cpp_type'
p43112
S'MaterialPropertyName'
p43113
sS'default'
p43114
g3
sS'name'
p43115
S'f_name'
p43116
sS'required'
p43117
I01
sS'group_name'
p43118
Nsa(dp43119
S'description'
p43120
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43121
sS'cpp_type'
p43122
S'bool'
p43123
sS'default'
p43124
S'1'
p43125
sS'name'
p43126
S'implicit'
p43127
sS'required'
p43128
I00
sS'group_name'
p43129
S'Advanced'
p43130
sa(dp43131
S'description'
p43132
S'The mobility used with the kernel\n'
p43133
sS'cpp_type'
p43134
S'MaterialPropertyName'
p43135
sS'default'
p43136
S'L'
p43137
sS'name'
p43138
S'mob_name'
p43139
sS'required'
p43140
I00
sS'group_name'
p43141
Nsa(dp43142
S'description'
p43143
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43144
sS'cpp_type'
p43145
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43146
sS'default'
p43147
g3
sS'name'
p43148
S'save_in'
p43149
sS'required'
p43150
I00
sS'group_name'
p43151
S'Advanced'
p43152
sa(dp43153
S'description'
p43154
S'The seed for the master random number generator\n'
p43155
sS'cpp_type'
p43156
S'unsigned int'
p43157
sS'default'
p43158
S'0'
p43159
sS'name'
p43160
S'seed'
p43161
sS'required'
p43162
I00
sS'group_name'
p43163
S'Advanced'
p43164
sa(dp43165
S'description'
p43166
g3
sS'cpp_type'
p43167
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43168
sS'default'
p43169
S'AllenCahn'
p43170
sS'name'
p43171
S'type'
p43172
sS'required'
p43173
I00
sS'group_name'
p43174
Nsa(dp43175
S'description'
p43176
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43177
sS'cpp_type'
p43178
S'bool'
p43179
sS'default'
p43180
S'0'
p43181
sS'name'
p43182
S'use_displaced_mesh'
p43183
sS'required'
p43184
I00
sS'group_name'
p43185
S'Advanced'
p43186
sa(dp43187
S'description'
p43188
S'The name of the variable that this Kernel operates on\n'
p43189
sS'cpp_type'
p43190
S'NonlinearVariableName'
p43191
sS'default'
p43192
g3
sS'name'
p43193
S'variable'
p43194
sS'required'
p43195
I01
sS'group_name'
p43196
NsasS'name'
p43197
S'/Kernels/AllenCahn'
p43198
sa(dp43199
S'description'
p43200
S'Kernel to compute bulk energy contribution to damage order parameter residual equation\n'
p43201
sS'subblocks'
p43202
NsS'parameters'
p43203
(lp43204
(dp43205
S'description'
p43206
S'Name of material property storing the elastic energy\n'
p43207
sS'cpp_type'
p43208
S'MaterialPropertyName'
p43209
sS'default'
p43210
S'E_el'
p43211
sS'name'
p43212
S'F_name'
p43213
sS'required'
p43214
I00
sS'group_name'
p43215
Nsa(dp43216
S'description'
p43217
S'Variable storing the laplacian of c\n'
p43218
sS'cpp_type'
p43219
S'std::vector<VariableName>'
p43220
sS'default'
p43221
g3
sS'name'
p43222
S'beta'
p43223
sS'required'
p43224
I01
sS'group_name'
p43225
Nsa(dp43226
S'description'
p43227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43228
sS'cpp_type'
p43229
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43230
sS'default'
p43231
g3
sS'name'
p43232
S'block'
p43233
sS'required'
p43234
I00
sS'group_name'
p43235
Nsa(dp43236
S'description'
p43237
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43238
sS'cpp_type'
p43239
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43240
sS'default'
p43241
g3
sS'name'
p43242
S'control_tags'
p43243
sS'required'
p43244
I00
sS'group_name'
p43245
S'Advanced'
p43246
sa(dp43247
S'description'
p43248
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43249
sS'cpp_type'
p43250
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43251
sS'default'
p43252
g3
sS'name'
p43253
S'diag_save_in'
p43254
sS'required'
p43255
I00
sS'group_name'
p43256
S'Advanced'
p43257
sa(dp43258
S'description'
p43259
S'The string of displacements suitable for the problem statement\n'
p43260
sS'cpp_type'
p43261
S'std::vector<VariableName>'
p43262
sS'default'
p43263
g3
sS'name'
p43264
S'displacements'
p43265
sS'required'
p43266
I00
sS'group_name'
p43267
Nsa(dp43268
S'description'
p43269
S'Whether or not this kernel will be used as an eigen kernel\n'
p43270
sS'cpp_type'
p43271
S'bool'
p43272
sS'default'
p43273
S'0'
p43274
sS'name'
p43275
S'eigen_kernel'
p43276
sS'required'
p43277
I00
sS'group_name'
p43278
Nsa(dp43279
S'description'
p43280
S'Set the enabled status of the MooseObject.\n'
p43281
sS'cpp_type'
p43282
S'bool'
p43283
sS'default'
p43284
S'1'
p43285
sS'name'
p43286
S'enable'
p43287
sS'required'
p43288
I00
sS'group_name'
p43289
S'Advanced'
p43290
sa(dp43291
S'description'
p43292
S'Critical fracture energy density\n'
p43293
sS'cpp_type'
p43294
S'MaterialPropertyName'
p43295
sS'default'
p43296
S'gc_prop'
p43297
sS'name'
p43298
S'gc'
p43299
sS'required'
p43300
I00
sS'group_name'
p43301
Nsa(dp43302
S'description'
p43303
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43304
sS'cpp_type'
p43305
S'bool'
p43306
sS'default'
p43307
S'1'
p43308
sS'name'
p43309
S'implicit'
p43310
sS'required'
p43311
I00
sS'group_name'
p43312
S'Advanced'
p43313
sa(dp43314
S'description'
p43315
S'Interface width\n'
p43316
sS'cpp_type'
p43317
S'MaterialPropertyName'
p43318
sS'default'
p43319
S'l'
p43320
sS'name'
p43321
S'l_name'
p43322
sS'required'
p43323
I00
sS'group_name'
p43324
Nsa(dp43325
S'description'
p43326
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43327
sS'cpp_type'
p43328
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43329
sS'default'
p43330
g3
sS'name'
p43331
S'save_in'
p43332
sS'required'
p43333
I00
sS'group_name'
p43334
S'Advanced'
p43335
sa(dp43336
S'description'
p43337
S'The seed for the master random number generator\n'
p43338
sS'cpp_type'
p43339
S'unsigned int'
p43340
sS'default'
p43341
S'0'
p43342
sS'name'
p43343
S'seed'
p43344
sS'required'
p43345
I00
sS'group_name'
p43346
S'Advanced'
p43347
sa(dp43348
S'description'
p43349
g3
sS'cpp_type'
p43350
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43351
sS'default'
p43352
S'AllenCahnPFFracture'
p43353
sS'name'
p43354
S'type'
p43355
sS'required'
p43356
I00
sS'group_name'
p43357
Nsa(dp43358
S'description'
p43359
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43360
sS'cpp_type'
p43361
S'bool'
p43362
sS'default'
p43363
S'0'
p43364
sS'name'
p43365
S'use_displaced_mesh'
p43366
sS'required'
p43367
I00
sS'group_name'
p43368
S'Advanced'
p43369
sa(dp43370
S'description'
p43371
S'The name of the variable that this Kernel operates on\n'
p43372
sS'cpp_type'
p43373
S'NonlinearVariableName'
p43374
sS'default'
p43375
g3
sS'name'
p43376
S'variable'
p43377
sS'required'
p43378
I01
sS'group_name'
p43379
Nsa(dp43380
S'description'
p43381
S'Viscosity parameter\n'
p43382
sS'cpp_type'
p43383
S'MaterialPropertyName'
p43384
sS'default'
p43385
S'visco'
p43386
sS'name'
p43387
S'visco_name'
p43388
sS'required'
p43389
I00
sS'group_name'
p43390
NsasS'name'
p43391
S'/Kernels/AllenCahnPFFracture'
p43392
sa(dp43393
S'description'
p43394
g3
sS'subblocks'
p43395
NsS'parameters'
p43396
(lp43397
(dp43398
S'description'
p43399
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43400
sS'cpp_type'
p43401
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43402
sS'default'
p43403
g3
sS'name'
p43404
S'block'
p43405
sS'required'
p43406
I00
sS'group_name'
p43407
Nsa(dp43408
S'description'
p43409
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43410
sS'cpp_type'
p43411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43412
sS'default'
p43413
g3
sS'name'
p43414
S'control_tags'
p43415
sS'required'
p43416
I00
sS'group_name'
p43417
S'Advanced'
p43418
sa(dp43419
S'description'
p43420
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43421
sS'cpp_type'
p43422
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43423
sS'default'
p43424
g3
sS'name'
p43425
S'diag_save_in'
p43426
sS'required'
p43427
I00
sS'group_name'
p43428
S'Advanced'
p43429
sa(dp43430
S'description'
p43431
S'Whether or not this kernel will be used as an eigen kernel\n'
p43432
sS'cpp_type'
p43433
S'bool'
p43434
sS'default'
p43435
S'0'
p43436
sS'name'
p43437
S'eigen_kernel'
p43438
sS'required'
p43439
I00
sS'group_name'
p43440
Nsa(dp43441
S'description'
p43442
S'Set the enabled status of the MooseObject.\n'
p43443
sS'cpp_type'
p43444
S'bool'
p43445
sS'default'
p43446
S'1'
p43447
sS'name'
p43448
S'enable'
p43449
sS'required'
p43450
I00
sS'group_name'
p43451
S'Advanced'
p43452
sa(dp43453
S'description'
p43454
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43455
sS'cpp_type'
p43456
S'bool'
p43457
sS'default'
p43458
S'1'
p43459
sS'name'
p43460
S'implicit'
p43461
sS'required'
p43462
I00
sS'group_name'
p43463
S'Advanced'
p43464
sa(dp43465
S'description'
p43466
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43467
sS'cpp_type'
p43468
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43469
sS'default'
p43470
g3
sS'name'
p43471
S'save_in'
p43472
sS'required'
p43473
I00
sS'group_name'
p43474
S'Advanced'
p43475
sa(dp43476
S'description'
p43477
S'The seed for the master random number generator\n'
p43478
sS'cpp_type'
p43479
S'unsigned int'
p43480
sS'default'
p43481
S'0'
p43482
sS'name'
p43483
S'seed'
p43484
sS'required'
p43485
I00
sS'group_name'
p43486
S'Advanced'
p43487
sa(dp43488
S'description'
p43489
S'The Tensor to multiply the Diffusion operator by\n'
p43490
sS'cpp_type'
p43491
S'libMesh::TensorValue<double>'
p43492
sS'default'
p43493
g3
sS'name'
p43494
S'tensor_coeff'
p43495
sS'required'
p43496
I01
sS'group_name'
p43497
Nsa(dp43498
S'description'
p43499
g3
sS'cpp_type'
p43500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43501
sS'default'
p43502
S'AnisotropicDiffusion'
p43503
sS'name'
p43504
S'type'
p43505
sS'required'
p43506
I00
sS'group_name'
p43507
Nsa(dp43508
S'description'
p43509
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43510
sS'cpp_type'
p43511
S'bool'
p43512
sS'default'
p43513
S'0'
p43514
sS'name'
p43515
S'use_displaced_mesh'
p43516
sS'required'
p43517
I00
sS'group_name'
p43518
S'Advanced'
p43519
sa(dp43520
S'description'
p43521
S'The name of the variable that this Kernel operates on\n'
p43522
sS'cpp_type'
p43523
S'NonlinearVariableName'
p43524
sS'default'
p43525
g3
sS'name'
p43526
S'variable'
p43527
sS'required'
p43528
I01
sS'group_name'
p43529
NsasS'name'
p43530
S'/Kernels/AnisotropicDiffusion'
p43531
sa(dp43532
S'description'
p43533
g3
sS'subblocks'
p43534
NsS'parameters'
p43535
(lp43536
(dp43537
S'description'
p43538
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43539
sS'cpp_type'
p43540
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43541
sS'default'
p43542
g3
sS'name'
p43543
S'block'
p43544
sS'required'
p43545
I00
sS'group_name'
p43546
Nsa(dp43547
S'description'
p43548
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43549
sS'cpp_type'
p43550
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43551
sS'default'
p43552
g3
sS'name'
p43553
S'control_tags'
p43554
sS'required'
p43555
I00
sS'group_name'
p43556
S'Advanced'
p43557
sa(dp43558
S'description'
p43559
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43560
sS'cpp_type'
p43561
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43562
sS'default'
p43563
g3
sS'name'
p43564
S'diag_save_in'
p43565
sS'required'
p43566
I00
sS'group_name'
p43567
S'Advanced'
p43568
sa(dp43569
S'description'
p43570
S'Whether or not this kernel will be used as an eigen kernel\n'
p43571
sS'cpp_type'
p43572
S'bool'
p43573
sS'default'
p43574
S'0'
p43575
sS'name'
p43576
S'eigen_kernel'
p43577
sS'required'
p43578
I00
sS'group_name'
p43579
Nsa(dp43580
S'description'
p43581
S'Set the enabled status of the MooseObject.\n'
p43582
sS'cpp_type'
p43583
S'bool'
p43584
sS'default'
p43585
S'1'
p43586
sS'name'
p43587
S'enable'
p43588
sS'required'
p43589
I00
sS'group_name'
p43590
S'Advanced'
p43591
sa(dp43592
S'description'
p43593
S'A function that describes the body force\n'
p43594
sS'cpp_type'
p43595
S'FunctionName'
p43596
sS'default'
p43597
S'1'
p43598
sS'name'
p43599
S'function'
p43600
sS'required'
p43601
I00
sS'group_name'
p43602
Nsa(dp43603
S'description'
p43604
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43605
sS'cpp_type'
p43606
S'bool'
p43607
sS'default'
p43608
S'1'
p43609
sS'name'
p43610
S'implicit'
p43611
sS'required'
p43612
I00
sS'group_name'
p43613
S'Advanced'
p43614
sa(dp43615
S'description'
p43616
S'A postprocessor whose value is multiplied by the body force\n'
p43617
sS'cpp_type'
p43618
S'PostprocessorName'
p43619
sS'default'
p43620
g3
sS'name'
p43621
S'postprocessor'
p43622
sS'required'
p43623
I00
sS'group_name'
p43624
Nsa(dp43625
S'description'
p43626
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43627
sS'cpp_type'
p43628
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43629
sS'default'
p43630
g3
sS'name'
p43631
S'save_in'
p43632
sS'required'
p43633
I00
sS'group_name'
p43634
S'Advanced'
p43635
sa(dp43636
S'description'
p43637
S'The seed for the master random number generator\n'
p43638
sS'cpp_type'
p43639
S'unsigned int'
p43640
sS'default'
p43641
S'0'
p43642
sS'name'
p43643
S'seed'
p43644
sS'required'
p43645
I00
sS'group_name'
p43646
S'Advanced'
p43647
sa(dp43648
S'description'
p43649
g3
sS'cpp_type'
p43650
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43651
sS'default'
p43652
S'BodyForce'
p43653
sS'name'
p43654
S'type'
p43655
sS'required'
p43656
I00
sS'group_name'
p43657
Nsa(dp43658
S'description'
p43659
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43660
sS'cpp_type'
p43661
S'bool'
p43662
sS'default'
p43663
S'0'
p43664
sS'name'
p43665
S'use_displaced_mesh'
p43666
sS'required'
p43667
I00
sS'group_name'
p43668
S'Advanced'
p43669
sa(dp43670
S'description'
p43671
S'Coefficent to multiply by the body force term\n'
p43672
sS'cpp_type'
p43673
S'double'
p43674
sS'default'
p43675
S'1'
p43676
sS'name'
p43677
S'value'
p43678
sS'required'
p43679
I00
sS'group_name'
p43680
Nsa(dp43681
S'description'
p43682
S'The name of the variable that this Kernel operates on\n'
p43683
sS'cpp_type'
p43684
S'NonlinearVariableName'
p43685
sS'default'
p43686
g3
sS'name'
p43687
S'variable'
p43688
sS'required'
p43689
I01
sS'group_name'
p43690
NsasS'name'
p43691
S'/Kernels/BodyForce'
p43692
sa(dp43693
S'description'
p43694
S'Cahn-Hilliard base Kernel\n'
p43695
sS'subblocks'
p43696
NsS'parameters'
p43697
(lp43698
(dp43699
S'description'
p43700
S'Vector of arguments of the mobility\n'
p43701
sS'cpp_type'
p43702
S'std::vector<VariableName>'
p43703
sS'default'
p43704
g3
sS'name'
p43705
S'args'
p43706
sS'required'
p43707
I00
sS'group_name'
p43708
Nsa(dp43709
S'description'
p43710
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43711
sS'cpp_type'
p43712
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43713
sS'default'
p43714
g3
sS'name'
p43715
S'block'
p43716
sS'required'
p43717
I00
sS'group_name'
p43718
Nsa(dp43719
S'description'
p43720
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43721
sS'cpp_type'
p43722
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43723
sS'default'
p43724
g3
sS'name'
p43725
S'control_tags'
p43726
sS'required'
p43727
I00
sS'group_name'
p43728
S'Advanced'
p43729
sa(dp43730
S'description'
p43731
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43732
sS'cpp_type'
p43733
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43734
sS'default'
p43735
g3
sS'name'
p43736
S'diag_save_in'
p43737
sS'required'
p43738
I00
sS'group_name'
p43739
S'Advanced'
p43740
sa(dp43741
S'description'
p43742
S'Whether or not this kernel will be used as an eigen kernel\n'
p43743
sS'cpp_type'
p43744
S'bool'
p43745
sS'default'
p43746
S'0'
p43747
sS'name'
p43748
S'eigen_kernel'
p43749
sS'required'
p43750
I00
sS'group_name'
p43751
Nsa(dp43752
S'description'
p43753
S'Set the enabled status of the MooseObject.\n'
p43754
sS'cpp_type'
p43755
S'bool'
p43756
sS'default'
p43757
S'1'
p43758
sS'name'
p43759
S'enable'
p43760
sS'required'
p43761
I00
sS'group_name'
p43762
S'Advanced'
p43763
sa(dp43764
S'description'
p43765
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43766
sS'cpp_type'
p43767
S'bool'
p43768
sS'default'
p43769
S'1'
p43770
sS'name'
p43771
S'implicit'
p43772
sS'required'
p43773
I00
sS'group_name'
p43774
S'Advanced'
p43775
sa(dp43776
S'description'
p43777
S'The mobility used with the kernel\n'
p43778
sS'cpp_type'
p43779
S'MaterialPropertyName'
p43780
sS'default'
p43781
S'M'
p43782
sS'name'
p43783
S'mob_name'
p43784
sS'required'
p43785
I00
sS'group_name'
p43786
Nsa(dp43787
S'description'
p43788
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43789
sS'cpp_type'
p43790
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43791
sS'default'
p43792
g3
sS'name'
p43793
S'save_in'
p43794
sS'required'
p43795
I00
sS'group_name'
p43796
S'Advanced'
p43797
sa(dp43798
S'description'
p43799
S'The seed for the master random number generator\n'
p43800
sS'cpp_type'
p43801
S'unsigned int'
p43802
sS'default'
p43803
S'0'
p43804
sS'name'
p43805
S'seed'
p43806
sS'required'
p43807
I00
sS'group_name'
p43808
S'Advanced'
p43809
sa(dp43810
S'description'
p43811
g3
sS'cpp_type'
p43812
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43813
sS'default'
p43814
S'CHBulkPFCTrad'
p43815
sS'name'
p43816
S'type'
p43817
sS'required'
p43818
I00
sS'group_name'
p43819
Nsa(dp43820
S'description'
p43821
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43822
sS'cpp_type'
p43823
S'bool'
p43824
sS'default'
p43825
S'0'
p43826
sS'name'
p43827
S'use_displaced_mesh'
p43828
sS'required'
p43829
I00
sS'group_name'
p43830
S'Advanced'
p43831
sa(dp43832
S'description'
p43833
S'The name of the variable that this Kernel operates on\n'
p43834
sS'cpp_type'
p43835
S'NonlinearVariableName'
p43836
sS'default'
p43837
g3
sS'name'
p43838
S'variable'
p43839
sS'required'
p43840
I01
sS'group_name'
p43841
NsasS'name'
p43842
S'/Kernels/CHBulkPFCTrad'
p43843
sa(dp43844
S'description'
p43845
S'Split with a variable that holds the Laplacian of a phase field variable.\n'
p43846
sS'subblocks'
p43847
NsS'parameters'
p43848
(lp43849
(dp43850
S'description'
p43851
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43852
sS'cpp_type'
p43853
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43854
sS'default'
p43855
g3
sS'name'
p43856
S'block'
p43857
sS'required'
p43858
I00
sS'group_name'
p43859
Nsa(dp43860
S'description'
p43861
S'Field variable to take the Laplacian of\n'
p43862
sS'cpp_type'
p43863
S'std::vector<VariableName>'
p43864
sS'default'
p43865
g3
sS'name'
p43866
S'c'
p43867
sS'required'
p43868
I01
sS'group_name'
p43869
Nsa(dp43870
S'description'
p43871
S'Name of coefficient\n'
p43872
sS'cpp_type'
p43873
S'MaterialPropertyName'
p43874
sS'default'
p43875
g3
sS'name'
p43876
S'coeff_name'
p43877
sS'required'
p43878
I01
sS'group_name'
p43879
Nsa(dp43880
S'description'
p43881
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43882
sS'cpp_type'
p43883
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43884
sS'default'
p43885
g3
sS'name'
p43886
S'control_tags'
p43887
sS'required'
p43888
I00
sS'group_name'
p43889
S'Advanced'
p43890
sa(dp43891
S'description'
p43892
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43893
sS'cpp_type'
p43894
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43895
sS'default'
p43896
g3
sS'name'
p43897
S'diag_save_in'
p43898
sS'required'
p43899
I00
sS'group_name'
p43900
S'Advanced'
p43901
sa(dp43902
S'description'
p43903
S'Whether or not this kernel will be used as an eigen kernel\n'
p43904
sS'cpp_type'
p43905
S'bool'
p43906
sS'default'
p43907
S'0'
p43908
sS'name'
p43909
S'eigen_kernel'
p43910
sS'required'
p43911
I00
sS'group_name'
p43912
Nsa(dp43913
S'description'
p43914
S'Set the enabled status of the MooseObject.\n'
p43915
sS'cpp_type'
p43916
S'bool'
p43917
sS'default'
p43918
S'1'
p43919
sS'name'
p43920
S'enable'
p43921
sS'required'
p43922
I00
sS'group_name'
p43923
S'Advanced'
p43924
sa(dp43925
S'description'
p43926
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43927
sS'cpp_type'
p43928
S'bool'
p43929
sS'default'
p43930
S'1'
p43931
sS'name'
p43932
S'implicit'
p43933
sS'required'
p43934
I00
sS'group_name'
p43935
S'Advanced'
p43936
sa(dp43937
S'description'
p43938
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p43939
sS'cpp_type'
p43940
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p43941
sS'default'
p43942
g3
sS'name'
p43943
S'save_in'
p43944
sS'required'
p43945
I00
sS'group_name'
p43946
S'Advanced'
p43947
sa(dp43948
S'description'
p43949
S'The seed for the master random number generator\n'
p43950
sS'cpp_type'
p43951
S'unsigned int'
p43952
sS'default'
p43953
S'0'
p43954
sS'name'
p43955
S'seed'
p43956
sS'required'
p43957
I00
sS'group_name'
p43958
S'Advanced'
p43959
sa(dp43960
S'description'
p43961
g3
sS'cpp_type'
p43962
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43963
sS'default'
p43964
S'CHCpldPFCTrad'
p43965
sS'name'
p43966
S'type'
p43967
sS'required'
p43968
I00
sS'group_name'
p43969
Nsa(dp43970
S'description'
p43971
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43972
sS'cpp_type'
p43973
S'bool'
p43974
sS'default'
p43975
S'0'
p43976
sS'name'
p43977
S'use_displaced_mesh'
p43978
sS'required'
p43979
I00
sS'group_name'
p43980
S'Advanced'
p43981
sa(dp43982
S'description'
p43983
S'The name of the variable that this Kernel operates on\n'
p43984
sS'cpp_type'
p43985
S'NonlinearVariableName'
p43986
sS'default'
p43987
g3
sS'name'
p43988
S'variable'
p43989
sS'required'
p43990
I01
sS'group_name'
p43991
NsasS'name'
p43992
S'/Kernels/CHCpldPFCTrad'
p43993
sa(dp43994
S'description'
p43995
S'Gradient energy Cahn-Hilliard Kernel with a scalar (isotropic) mobility\n'
p43996
sS'subblocks'
p43997
NsS'parameters'
p43998
(lp43999
(dp44000
S'description'
p44001
S'Vector of arguments of the mobility\n'
p44002
sS'cpp_type'
p44003
S'std::vector<VariableName>'
p44004
sS'default'
p44005
g3
sS'name'
p44006
S'args'
p44007
sS'required'
p44008
I00
sS'group_name'
p44009
Nsa(dp44010
S'description'
p44011
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44012
sS'cpp_type'
p44013
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44014
sS'default'
p44015
g3
sS'name'
p44016
S'block'
p44017
sS'required'
p44018
I00
sS'group_name'
p44019
Nsa(dp44020
S'description'
p44021
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44022
sS'cpp_type'
p44023
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44024
sS'default'
p44025
g3
sS'name'
p44026
S'control_tags'
p44027
sS'required'
p44028
I00
sS'group_name'
p44029
S'Advanced'
p44030
sa(dp44031
S'description'
p44032
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44033
sS'cpp_type'
p44034
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44035
sS'default'
p44036
g3
sS'name'
p44037
S'diag_save_in'
p44038
sS'required'
p44039
I00
sS'group_name'
p44040
S'Advanced'
p44041
sa(dp44042
S'description'
p44043
S'Whether or not this kernel will be used as an eigen kernel\n'
p44044
sS'cpp_type'
p44045
S'bool'
p44046
sS'default'
p44047
S'0'
p44048
sS'name'
p44049
S'eigen_kernel'
p44050
sS'required'
p44051
I00
sS'group_name'
p44052
Nsa(dp44053
S'description'
p44054
S'Set the enabled status of the MooseObject.\n'
p44055
sS'cpp_type'
p44056
S'bool'
p44057
sS'default'
p44058
S'1'
p44059
sS'name'
p44060
S'enable'
p44061
sS'required'
p44062
I00
sS'group_name'
p44063
S'Advanced'
p44064
sa(dp44065
S'description'
p44066
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44067
sS'cpp_type'
p44068
S'bool'
p44069
sS'default'
p44070
S'1'
p44071
sS'name'
p44072
S'implicit'
p44073
sS'required'
p44074
I00
sS'group_name'
p44075
S'Advanced'
p44076
sa(dp44077
S'description'
p44078
S'The kappa used with the kernel\n'
p44079
sS'cpp_type'
p44080
S'MaterialPropertyName'
p44081
sS'default'
p44082
g3
sS'name'
p44083
S'kappa_name'
p44084
sS'required'
p44085
I01
sS'group_name'
p44086
Nsa(dp44087
S'description'
p44088
S'The mobility used with the kernel\n'
p44089
sS'cpp_type'
p44090
S'MaterialPropertyName'
p44091
sS'default'
p44092
g3
sS'name'
p44093
S'mob_name'
p44094
sS'required'
p44095
I01
sS'group_name'
p44096
Nsa(dp44097
S'description'
p44098
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44099
sS'cpp_type'
p44100
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44101
sS'default'
p44102
g3
sS'name'
p44103
S'save_in'
p44104
sS'required'
p44105
I00
sS'group_name'
p44106
S'Advanced'
p44107
sa(dp44108
S'description'
p44109
S'The seed for the master random number generator\n'
p44110
sS'cpp_type'
p44111
S'unsigned int'
p44112
sS'default'
p44113
S'0'
p44114
sS'name'
p44115
S'seed'
p44116
sS'required'
p44117
I00
sS'group_name'
p44118
S'Advanced'
p44119
sa(dp44120
S'description'
p44121
g3
sS'cpp_type'
p44122
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44123
sS'default'
p44124
S'CHInterface'
p44125
sS'name'
p44126
S'type'
p44127
sS'required'
p44128
I00
sS'group_name'
p44129
Nsa(dp44130
S'description'
p44131
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44132
sS'cpp_type'
p44133
S'bool'
p44134
sS'default'
p44135
S'0'
p44136
sS'name'
p44137
S'use_displaced_mesh'
p44138
sS'required'
p44139
I00
sS'group_name'
p44140
S'Advanced'
p44141
sa(dp44142
S'description'
p44143
S'The name of the variable that this Kernel operates on\n'
p44144
sS'cpp_type'
p44145
S'NonlinearVariableName'
p44146
sS'default'
p44147
g3
sS'name'
p44148
S'variable'
p44149
sS'required'
p44150
I01
sS'group_name'
p44151
NsasS'name'
p44152
S'/Kernels/CHInterface'
p44153
sa(dp44154
S'description'
p44155
S'Gradient energy Cahn-Hilliard Kernel with a tensor (anisotropic) mobility\n'
p44156
sS'subblocks'
p44157
NsS'parameters'
p44158
(lp44159
(dp44160
S'description'
p44161
S'Vector of arguments of the mobility\n'
p44162
sS'cpp_type'
p44163
S'std::vector<VariableName>'
p44164
sS'default'
p44165
g3
sS'name'
p44166
S'args'
p44167
sS'required'
p44168
I00
sS'group_name'
p44169
Nsa(dp44170
S'description'
p44171
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44172
sS'cpp_type'
p44173
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44174
sS'default'
p44175
g3
sS'name'
p44176
S'block'
p44177
sS'required'
p44178
I00
sS'group_name'
p44179
Nsa(dp44180
S'description'
p44181
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44182
sS'cpp_type'
p44183
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44184
sS'default'
p44185
g3
sS'name'
p44186
S'control_tags'
p44187
sS'required'
p44188
I00
sS'group_name'
p44189
S'Advanced'
p44190
sa(dp44191
S'description'
p44192
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44193
sS'cpp_type'
p44194
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44195
sS'default'
p44196
g3
sS'name'
p44197
S'diag_save_in'
p44198
sS'required'
p44199
I00
sS'group_name'
p44200
S'Advanced'
p44201
sa(dp44202
S'description'
p44203
S'Whether or not this kernel will be used as an eigen kernel\n'
p44204
sS'cpp_type'
p44205
S'bool'
p44206
sS'default'
p44207
S'0'
p44208
sS'name'
p44209
S'eigen_kernel'
p44210
sS'required'
p44211
I00
sS'group_name'
p44212
Nsa(dp44213
S'description'
p44214
S'Set the enabled status of the MooseObject.\n'
p44215
sS'cpp_type'
p44216
S'bool'
p44217
sS'default'
p44218
S'1'
p44219
sS'name'
p44220
S'enable'
p44221
sS'required'
p44222
I00
sS'group_name'
p44223
S'Advanced'
p44224
sa(dp44225
S'description'
p44226
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44227
sS'cpp_type'
p44228
S'bool'
p44229
sS'default'
p44230
S'1'
p44231
sS'name'
p44232
S'implicit'
p44233
sS'required'
p44234
I00
sS'group_name'
p44235
S'Advanced'
p44236
sa(dp44237
S'description'
p44238
S'The kappa used with the kernel\n'
p44239
sS'cpp_type'
p44240
S'MaterialPropertyName'
p44241
sS'default'
p44242
g3
sS'name'
p44243
S'kappa_name'
p44244
sS'required'
p44245
I01
sS'group_name'
p44246
Nsa(dp44247
S'description'
p44248
S'The mobility used with the kernel\n'
p44249
sS'cpp_type'
p44250
S'MaterialPropertyName'
p44251
sS'default'
p44252
g3
sS'name'
p44253
S'mob_name'
p44254
sS'required'
p44255
I01
sS'group_name'
p44256
Nsa(dp44257
S'description'
p44258
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44259
sS'cpp_type'
p44260
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44261
sS'default'
p44262
g3
sS'name'
p44263
S'save_in'
p44264
sS'required'
p44265
I00
sS'group_name'
p44266
S'Advanced'
p44267
sa(dp44268
S'description'
p44269
S'The seed for the master random number generator\n'
p44270
sS'cpp_type'
p44271
S'unsigned int'
p44272
sS'default'
p44273
S'0'
p44274
sS'name'
p44275
S'seed'
p44276
sS'required'
p44277
I00
sS'group_name'
p44278
S'Advanced'
p44279
sa(dp44280
S'description'
p44281
g3
sS'cpp_type'
p44282
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44283
sS'default'
p44284
S'CHInterfaceAniso'
p44285
sS'name'
p44286
S'type'
p44287
sS'required'
p44288
I00
sS'group_name'
p44289
Nsa(dp44290
S'description'
p44291
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44292
sS'cpp_type'
p44293
S'bool'
p44294
sS'default'
p44295
S'0'
p44296
sS'name'
p44297
S'use_displaced_mesh'
p44298
sS'required'
p44299
I00
sS'group_name'
p44300
S'Advanced'
p44301
sa(dp44302
S'description'
p44303
S'The name of the variable that this Kernel operates on\n'
p44304
sS'cpp_type'
p44305
S'NonlinearVariableName'
p44306
sS'default'
p44307
g3
sS'name'
p44308
S'variable'
p44309
sS'required'
p44310
I01
sS'group_name'
p44311
NsasS'name'
p44312
S'/Kernels/CHInterfaceAniso'
p44313
sa(dp44314
S'description'
p44315
S'Simple demonstration Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p44316
sS'subblocks'
p44317
NsS'parameters'
p44318
(lp44319
(dp44320
S'description'
p44321
S'Vector of arguments of the mobility\n'
p44322
sS'cpp_type'
p44323
S'std::vector<VariableName>'
p44324
sS'default'
p44325
g3
sS'name'
p44326
S'args'
p44327
sS'required'
p44328
I00
sS'group_name'
p44329
Nsa(dp44330
S'description'
p44331
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44332
sS'cpp_type'
p44333
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44334
sS'default'
p44335
g3
sS'name'
p44336
S'block'
p44337
sS'required'
p44338
I00
sS'group_name'
p44339
Nsa(dp44340
S'description'
p44341
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44342
sS'cpp_type'
p44343
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44344
sS'default'
p44345
g3
sS'name'
p44346
S'control_tags'
p44347
sS'required'
p44348
I00
sS'group_name'
p44349
S'Advanced'
p44350
sa(dp44351
S'description'
p44352
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44353
sS'cpp_type'
p44354
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44355
sS'default'
p44356
g3
sS'name'
p44357
S'diag_save_in'
p44358
sS'required'
p44359
I00
sS'group_name'
p44360
S'Advanced'
p44361
sa(dp44362
S'description'
p44363
S'Whether or not this kernel will be used as an eigen kernel\n'
p44364
sS'cpp_type'
p44365
S'bool'
p44366
sS'default'
p44367
S'0'
p44368
sS'name'
p44369
S'eigen_kernel'
p44370
sS'required'
p44371
I00
sS'group_name'
p44372
Nsa(dp44373
S'description'
p44374
S'Set the enabled status of the MooseObject.\n'
p44375
sS'cpp_type'
p44376
S'bool'
p44377
sS'default'
p44378
S'1'
p44379
sS'name'
p44380
S'enable'
p44381
sS'required'
p44382
I00
sS'group_name'
p44383
S'Advanced'
p44384
sa(dp44385
S'description'
p44386
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44387
sS'cpp_type'
p44388
S'bool'
p44389
sS'default'
p44390
S'1'
p44391
sS'name'
p44392
S'implicit'
p44393
sS'required'
p44394
I00
sS'group_name'
p44395
S'Advanced'
p44396
sa(dp44397
S'description'
p44398
S'The mobility used with the kernel\n'
p44399
sS'cpp_type'
p44400
S'MaterialPropertyName'
p44401
sS'default'
p44402
S'M'
p44403
sS'name'
p44404
S'mob_name'
p44405
sS'required'
p44406
I00
sS'group_name'
p44407
Nsa(dp44408
S'description'
p44409
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44410
sS'cpp_type'
p44411
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44412
sS'default'
p44413
g3
sS'name'
p44414
S'save_in'
p44415
sS'required'
p44416
I00
sS'group_name'
p44417
S'Advanced'
p44418
sa(dp44419
S'description'
p44420
S'The seed for the master random number generator\n'
p44421
sS'cpp_type'
p44422
S'unsigned int'
p44423
sS'default'
p44424
S'0'
p44425
sS'name'
p44426
S'seed'
p44427
sS'required'
p44428
I00
sS'group_name'
p44429
S'Advanced'
p44430
sa(dp44431
S'description'
p44432
g3
sS'cpp_type'
p44433
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44434
sS'default'
p44435
S'CHMath'
p44436
sS'name'
p44437
S'type'
p44438
sS'required'
p44439
I00
sS'group_name'
p44440
Nsa(dp44441
S'description'
p44442
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44443
sS'cpp_type'
p44444
S'bool'
p44445
sS'default'
p44446
S'0'
p44447
sS'name'
p44448
S'use_displaced_mesh'
p44449
sS'required'
p44450
I00
sS'group_name'
p44451
S'Advanced'
p44452
sa(dp44453
S'description'
p44454
S'The name of the variable that this Kernel operates on\n'
p44455
sS'cpp_type'
p44456
S'NonlinearVariableName'
p44457
sS'default'
p44458
g3
sS'name'
p44459
S'variable'
p44460
sS'required'
p44461
I01
sS'group_name'
p44462
NsasS'name'
p44463
S'/Kernels/CHMath'
p44464
sa(dp44465
S'description'
p44466
S'Cahn-Hilliard residual for the RFF form of the phase field crystal model\n'
p44467
sS'subblocks'
p44468
NsS'parameters'
p44469
(lp44470
(dp44471
S'description'
p44472
S'The D mobility used with the kernel\n'
p44473
sS'cpp_type'
p44474
S'MaterialPropertyName'
p44475
sS'default'
p44476
S'DM'
p44477
sS'name'
p44478
S'Dmob_name'
p44479
sS'required'
p44480
I00
sS'group_name'
p44481
Nsa(dp44482
S'description'
p44483
S'Constants on Taylor Series\n'
p44484
sS'cpp_type'
p44485
S'double'
p44486
sS'default'
p44487
S'1'
p44488
sS'name'
p44489
S'a'
p44490
sS'required'
p44491
I00
sS'group_name'
p44492
Nsa(dp44493
S'description'
p44494
S'Constants on Taylor Series\n'
p44495
sS'cpp_type'
p44496
S'double'
p44497
sS'default'
p44498
S'1'
p44499
sS'name'
p44500
S'b'
p44501
sS'required'
p44502
I00
sS'group_name'
p44503
Nsa(dp44504
S'description'
p44505
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44506
sS'cpp_type'
p44507
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44508
sS'default'
p44509
g3
sS'name'
p44510
S'block'
p44511
sS'required'
p44512
I00
sS'group_name'
p44513
Nsa(dp44514
S'description'
p44515
S'Constants on Taylor Series\n'
p44516
sS'cpp_type'
p44517
S'double'
p44518
sS'default'
p44519
S'1'
p44520
sS'name'
p44521
S'c'
p44522
sS'required'
p44523
I00
sS'group_name'
p44524
Nsa(dp44525
S'description'
p44526
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44527
sS'cpp_type'
p44528
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44529
sS'default'
p44530
g3
sS'name'
p44531
S'control_tags'
p44532
sS'required'
p44533
I00
sS'group_name'
p44534
S'Advanced'
p44535
sa(dp44536
S'description'
p44537
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44538
sS'cpp_type'
p44539
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44540
sS'default'
p44541
g3
sS'name'
p44542
S'diag_save_in'
p44543
sS'required'
p44544
I00
sS'group_name'
p44545
S'Advanced'
p44546
sa(dp44547
S'description'
p44548
S'Whether or not this kernel will be used as an eigen kernel\n'
p44549
sS'cpp_type'
p44550
S'bool'
p44551
sS'default'
p44552
S'0'
p44553
sS'name'
p44554
S'eigen_kernel'
p44555
sS'required'
p44556
I00
sS'group_name'
p44557
Nsa(dp44558
S'description'
p44559
S'Set the enabled status of the MooseObject.\n'
p44560
sS'cpp_type'
p44561
S'bool'
p44562
sS'default'
p44563
S'1'
p44564
sS'name'
p44565
S'enable'
p44566
sS'required'
p44567
I00
sS'group_name'
p44568
S'Advanced'
p44569
sa(dp44570
S'description'
p44571
S'Jacobian information for the mobility is defined\n'
p44572
sS'cpp_type'
p44573
S'bool'
p44574
sS'default'
p44575
S'0'
p44576
sS'name'
p44577
S'has_MJac'
p44578
sS'required'
p44579
I00
sS'group_name'
p44580
Nsa(dp44581
S'description'
p44582
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44583
sS'cpp_type'
p44584
S'bool'
p44585
sS'default'
p44586
S'1'
p44587
sS'name'
p44588
S'implicit'
p44589
sS'required'
p44590
I00
sS'group_name'
p44591
S'Advanced'
p44592
sa(dp44593
S'name'
p44594
S'log_approach'
p44595
sS'cpp_type'
p44596
S'MooseEnum'
p44597
sS'default'
p44598
g3
sS'description'
p44599
S'Which approach will be used to handle the natural log\n'
p44600
sS'required'
p44601
I01
sS'options'
p44602
S'tolerance cancelation expansion nothing'
p44603
sS'group_name'
p44604
Nsa(dp44605
S'description'
p44606
S'The mobility used with the kernel\n'
p44607
sS'cpp_type'
p44608
S'MaterialPropertyName'
p44609
sS'default'
p44610
S'M'
p44611
sS'name'
p44612
S'mob_name'
p44613
sS'required'
p44614
I00
sS'group_name'
p44615
Nsa(dp44616
S'description'
p44617
S'Number of terms used in the Taylor expansion of the natural log term\n'
p44618
sS'cpp_type'
p44619
S'double'
p44620
sS'default'
p44621
S'4'
p44622
sS'name'
p44623
S'n_exp_terms'
p44624
sS'required'
p44625
I00
sS'group_name'
p44626
Nsa(dp44627
S'description'
p44628
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44629
sS'cpp_type'
p44630
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44631
sS'default'
p44632
g3
sS'name'
p44633
S'save_in'
p44634
sS'required'
p44635
I00
sS'group_name'
p44636
S'Advanced'
p44637
sa(dp44638
S'description'
p44639
S'The seed for the master random number generator\n'
p44640
sS'cpp_type'
p44641
S'unsigned int'
p44642
sS'default'
p44643
S'0'
p44644
sS'name'
p44645
S'seed'
p44646
sS'required'
p44647
I00
sS'group_name'
p44648
S'Advanced'
p44649
sa(dp44650
S'description'
p44651
S'Tolerance used when the tolerance approach is chosen\n'
p44652
sS'cpp_type'
p44653
S'double'
p44654
sS'default'
p44655
S'1e-09'
p44656
sS'name'
p44657
S'tol'
p44658
sS'required'
p44659
I00
sS'group_name'
p44660
Nsa(dp44661
S'description'
p44662
g3
sS'cpp_type'
p44663
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44664
sS'default'
p44665
S'CHPFCRFF'
p44666
sS'name'
p44667
S'type'
p44668
sS'required'
p44669
I00
sS'group_name'
p44670
Nsa(dp44671
S'description'
p44672
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44673
sS'cpp_type'
p44674
S'bool'
p44675
sS'default'
p44676
S'0'
p44677
sS'name'
p44678
S'use_displaced_mesh'
p44679
sS'required'
p44680
I00
sS'group_name'
p44681
S'Advanced'
p44682
sa(dp44683
S'description'
p44684
S'Array of names of the real parts of the L variables\n'
p44685
sS'cpp_type'
p44686
S'std::vector<VariableName>'
p44687
sS'default'
p44688
g3
sS'name'
p44689
S'v'
p44690
sS'required'
p44691
I01
sS'group_name'
p44692
Nsa(dp44693
S'description'
p44694
S'The name of the variable that this Kernel operates on\n'
p44695
sS'cpp_type'
p44696
S'NonlinearVariableName'
p44697
sS'default'
p44698
g3
sS'name'
p44699
S'variable'
p44700
sS'required'
p44701
I01
sS'group_name'
p44702
NsasS'name'
p44703
S'/Kernels/CHPFCRFF'
p44704
sa(dp44705
S'description'
p44706
g3
sS'subblocks'
p44707
NsS'parameters'
p44708
(lp44709
(dp44710
S'description'
p44711
S'Base name for the complex L variables\n'
p44712
sS'cpp_type'
p44713
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44714
sS'default'
p44715
g3
sS'name'
p44716
S'L_name_base'
p44717
sS'required'
p44718
I01
sS'group_name'
p44719
Nsa(dp44720
S'name'
p44721
S'log_approach'
p44722
sS'cpp_type'
p44723
S'MooseEnum'
p44724
sS'default'
p44725
g3
sS'description'
p44726
S'Which approach will be used to handle the natural log\n'
p44727
sS'required'
p44728
I01
sS'options'
p44729
S'tolerance cancelation expansion'
p44730
sS'group_name'
p44731
Nsa(dp44732
S'description'
p44733
S'The mobility used for n in this model\n'
p44734
sS'cpp_type'
p44735
S'MaterialPropertyName'
p44736
sS'default'
p44737
S'M'
p44738
sS'name'
p44739
S'mob_name'
p44740
sS'required'
p44741
I00
sS'group_name'
p44742
Nsa(dp44743
S'description'
p44744
S'Number of terms used in the Taylor expansion of the natural log term\n'
p44745
sS'cpp_type'
p44746
S'double'
p44747
sS'default'
p44748
S'4'
p44749
sS'name'
p44750
S'n_exp_terms'
p44751
sS'required'
p44752
I00
sS'group_name'
p44753
Nsa(dp44754
S'description'
p44755
S'Variable name used for the n variable\n'
p44756
sS'cpp_type'
p44757
S'NonlinearVariableName'
p44758
sS'default'
p44759
g3
sS'name'
p44760
S'n_name'
p44761
sS'required'
p44762
I01
sS'group_name'
p44763
Nsa(dp44764
S'description'
p44765
S'specifies the number of complex L variables will be solved for\n'
p44766
sS'cpp_type'
p44767
S'unsigned int'
p44768
sS'default'
p44769
g3
sS'name'
p44770
S'num_L'
p44771
sS'required'
p44772
I01
sS'group_name'
p44773
Nsa(dp44774
S'description'
p44775
S'Tolerance used when the tolerance approach is chosen\n'
p44776
sS'cpp_type'
p44777
S'double'
p44778
sS'default'
p44779
S'1e-09'
p44780
sS'name'
p44781
S'tol'
p44782
sS'required'
p44783
I00
sS'group_name'
p44784
Nsa(dp44785
S'description'
p44786
S'Whether to use displaced mesh in the kernels\n'
p44787
sS'cpp_type'
p44788
S'bool'
p44789
sS'default'
p44790
S'0'
p44791
sS'name'
p44792
S'use_displaced_mesh'
p44793
sS'required'
p44794
I00
sS'group_name'
p44795
NsasS'name'
p44796
S'/Kernels/CHPFCRFFSplitKernel'
p44797
sa(dp44798
S'description'
p44799
S'Chemical potential kernel in Split Cahn-Hilliard that solves chemical potential in a weak form\n'
p44800
sS'subblocks'
p44801
NsS'parameters'
p44802
(lp44803
(dp44804
S'description'
p44805
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44806
sS'cpp_type'
p44807
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44808
sS'default'
p44809
g3
sS'name'
p44810
S'block'
p44811
sS'required'
p44812
I00
sS'group_name'
p44813
Nsa(dp44814
S'description'
p44815
S'Concentration\n'
p44816
sS'cpp_type'
p44817
S'std::vector<VariableName>'
p44818
sS'default'
p44819
g3
sS'name'
p44820
S'c'
p44821
sS'required'
p44822
I01
sS'group_name'
p44823
Nsa(dp44824
S'description'
p44825
S'Chemical potential property name\n'
p44826
sS'cpp_type'
p44827
S'MaterialPropertyName'
p44828
sS'default'
p44829
g3
sS'name'
p44830
S'chemical_potential_prop'
p44831
sS'required'
p44832
I01
sS'group_name'
p44833
Nsa(dp44834
S'description'
p44835
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44836
sS'cpp_type'
p44837
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44838
sS'default'
p44839
g3
sS'name'
p44840
S'control_tags'
p44841
sS'required'
p44842
I00
sS'group_name'
p44843
S'Advanced'
p44844
sa(dp44845
S'description'
p44846
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44847
sS'cpp_type'
p44848
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44849
sS'default'
p44850
g3
sS'name'
p44851
S'diag_save_in'
p44852
sS'required'
p44853
I00
sS'group_name'
p44854
S'Advanced'
p44855
sa(dp44856
S'description'
p44857
S'Whether or not this kernel will be used as an eigen kernel\n'
p44858
sS'cpp_type'
p44859
S'bool'
p44860
sS'default'
p44861
S'0'
p44862
sS'name'
p44863
S'eigen_kernel'
p44864
sS'required'
p44865
I00
sS'group_name'
p44866
Nsa(dp44867
S'description'
p44868
S'Set the enabled status of the MooseObject.\n'
p44869
sS'cpp_type'
p44870
S'bool'
p44871
sS'default'
p44872
S'1'
p44873
sS'name'
p44874
S'enable'
p44875
sS'required'
p44876
I00
sS'group_name'
p44877
S'Advanced'
p44878
sa(dp44879
S'description'
p44880
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44881
sS'cpp_type'
p44882
S'bool'
p44883
sS'default'
p44884
S'1'
p44885
sS'name'
p44886
S'implicit'
p44887
sS'required'
p44888
I00
sS'group_name'
p44889
S'Advanced'
p44890
sa(dp44891
S'description'
p44892
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44893
sS'cpp_type'
p44894
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44895
sS'default'
p44896
g3
sS'name'
p44897
S'save_in'
p44898
sS'required'
p44899
I00
sS'group_name'
p44900
S'Advanced'
p44901
sa(dp44902
S'description'
p44903
S'The seed for the master random number generator\n'
p44904
sS'cpp_type'
p44905
S'unsigned int'
p44906
sS'default'
p44907
S'0'
p44908
sS'name'
p44909
S'seed'
p44910
sS'required'
p44911
I00
sS'group_name'
p44912
S'Advanced'
p44913
sa(dp44914
S'description'
p44915
g3
sS'cpp_type'
p44916
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44917
sS'default'
p44918
S'CHSplitChemicalPotential'
p44919
sS'name'
p44920
S'type'
p44921
sS'required'
p44922
I00
sS'group_name'
p44923
Nsa(dp44924
S'description'
p44925
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44926
sS'cpp_type'
p44927
S'bool'
p44928
sS'default'
p44929
S'0'
p44930
sS'name'
p44931
S'use_displaced_mesh'
p44932
sS'required'
p44933
I00
sS'group_name'
p44934
S'Advanced'
p44935
sa(dp44936
S'description'
p44937
S'The name of the variable that this Kernel operates on\n'
p44938
sS'cpp_type'
p44939
S'NonlinearVariableName'
p44940
sS'default'
p44941
g3
sS'name'
p44942
S'variable'
p44943
sS'required'
p44944
I01
sS'group_name'
p44945
NsasS'name'
p44946
S'/Kernels/CHSplitChemicalPotential'
p44947
sa(dp44948
S'description'
p44949
S'Concentration kernel in Split Cahn-Hilliard that solves chemical potential in a weak form\n'
p44950
sS'subblocks'
p44951
NsS'parameters'
p44952
(lp44953
(dp44954
S'description'
p44955
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44956
sS'cpp_type'
p44957
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44958
sS'default'
p44959
g3
sS'name'
p44960
S'block'
p44961
sS'required'
p44962
I00
sS'group_name'
p44963
Nsa(dp44964
S'description'
p44965
S'Chemical potential variable\n'
p44966
sS'cpp_type'
p44967
S'std::vector<VariableName>'
p44968
sS'default'
p44969
g3
sS'name'
p44970
S'chemical_potential_var'
p44971
sS'required'
p44972
I01
sS'group_name'
p44973
Nsa(dp44974
S'description'
p44975
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44976
sS'cpp_type'
p44977
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44978
sS'default'
p44979
g3
sS'name'
p44980
S'control_tags'
p44981
sS'required'
p44982
I00
sS'group_name'
p44983
S'Advanced'
p44984
sa(dp44985
S'description'
p44986
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44987
sS'cpp_type'
p44988
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44989
sS'default'
p44990
g3
sS'name'
p44991
S'diag_save_in'
p44992
sS'required'
p44993
I00
sS'group_name'
p44994
S'Advanced'
p44995
sa(dp44996
S'description'
p44997
S'Whether or not this kernel will be used as an eigen kernel\n'
p44998
sS'cpp_type'
p44999
S'bool'
p45000
sS'default'
p45001
S'0'
p45002
sS'name'
p45003
S'eigen_kernel'
p45004
sS'required'
p45005
I00
sS'group_name'
p45006
Nsa(dp45007
S'description'
p45008
S'Set the enabled status of the MooseObject.\n'
p45009
sS'cpp_type'
p45010
S'bool'
p45011
sS'default'
p45012
S'1'
p45013
sS'name'
p45014
S'enable'
p45015
sS'required'
p45016
I00
sS'group_name'
p45017
S'Advanced'
p45018
sa(dp45019
S'description'
p45020
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45021
sS'cpp_type'
p45022
S'bool'
p45023
sS'default'
p45024
S'1'
p45025
sS'name'
p45026
S'implicit'
p45027
sS'required'
p45028
I00
sS'group_name'
p45029
S'Advanced'
p45030
sa(dp45031
S'description'
p45032
S'Mobility property name\n'
p45033
sS'cpp_type'
p45034
S'MaterialPropertyName'
p45035
sS'default'
p45036
g3
sS'name'
p45037
S'mobility'
p45038
sS'required'
p45039
I01
sS'group_name'
p45040
Nsa(dp45041
S'description'
p45042
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45043
sS'cpp_type'
p45044
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45045
sS'default'
p45046
g3
sS'name'
p45047
S'save_in'
p45048
sS'required'
p45049
I00
sS'group_name'
p45050
S'Advanced'
p45051
sa(dp45052
S'description'
p45053
S'The seed for the master random number generator\n'
p45054
sS'cpp_type'
p45055
S'unsigned int'
p45056
sS'default'
p45057
S'0'
p45058
sS'name'
p45059
S'seed'
p45060
sS'required'
p45061
I00
sS'group_name'
p45062
S'Advanced'
p45063
sa(dp45064
S'description'
p45065
g3
sS'cpp_type'
p45066
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45067
sS'default'
p45068
S'CHSplitConcentration'
p45069
sS'name'
p45070
S'type'
p45071
sS'required'
p45072
I00
sS'group_name'
p45073
Nsa(dp45074
S'description'
p45075
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45076
sS'cpp_type'
p45077
S'bool'
p45078
sS'default'
p45079
S'0'
p45080
sS'name'
p45081
S'use_displaced_mesh'
p45082
sS'required'
p45083
I00
sS'group_name'
p45084
S'Advanced'
p45085
sa(dp45086
S'description'
p45087
S'The name of the variable that this Kernel operates on\n'
p45088
sS'cpp_type'
p45089
S'NonlinearVariableName'
p45090
sS'default'
p45091
g3
sS'name'
p45092
S'variable'
p45093
sS'required'
p45094
I01
sS'group_name'
p45095
NsasS'name'
p45096
S'/Kernels/CHSplitConcentration'
p45097
sa(dp45098
S'description'
p45099
S'Computes flux as nodal variable - flux = -mobility * grad(chemical_potential)\n'
p45100
sS'subblocks'
p45101
NsS'parameters'
p45102
(lp45103
(dp45104
S'description'
p45105
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45106
sS'cpp_type'
p45107
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45108
sS'default'
p45109
g3
sS'name'
p45110
S'block'
p45111
sS'required'
p45112
I00
sS'group_name'
p45113
Nsa(dp45114
S'description'
p45115
S'Concentration\n'
p45116
sS'cpp_type'
p45117
S'std::vector<VariableName>'
p45118
sS'default'
p45119
g3
sS'name'
p45120
S'c'
p45121
sS'required'
p45122
I00
sS'group_name'
p45123
Nsa(dp45124
S'description'
p45125
S'Flux component\n'
p45126
sS'cpp_type'
p45127
S'unsigned int'
p45128
sS'default'
p45129
g3
sS'name'
p45130
S'component'
p45131
sS'required'
p45132
I01
sS'group_name'
p45133
Nsa(dp45134
S'description'
p45135
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45136
sS'cpp_type'
p45137
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45138
sS'default'
p45139
g3
sS'name'
p45140
S'control_tags'
p45141
sS'required'
p45142
I00
sS'group_name'
p45143
S'Advanced'
p45144
sa(dp45145
S'description'
p45146
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45147
sS'cpp_type'
p45148
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45149
sS'default'
p45150
g3
sS'name'
p45151
S'diag_save_in'
p45152
sS'required'
p45153
I00
sS'group_name'
p45154
S'Advanced'
p45155
sa(dp45156
S'description'
p45157
S'Whether or not this kernel will be used as an eigen kernel\n'
p45158
sS'cpp_type'
p45159
S'bool'
p45160
sS'default'
p45161
S'0'
p45162
sS'name'
p45163
S'eigen_kernel'
p45164
sS'required'
p45165
I00
sS'group_name'
p45166
Nsa(dp45167
S'description'
p45168
S'Set the enabled status of the MooseObject.\n'
p45169
sS'cpp_type'
p45170
S'bool'
p45171
sS'default'
p45172
S'1'
p45173
sS'name'
p45174
S'enable'
p45175
sS'required'
p45176
I00
sS'group_name'
p45177
S'Advanced'
p45178
sa(dp45179
S'description'
p45180
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45181
sS'cpp_type'
p45182
S'bool'
p45183
sS'default'
p45184
S'1'
p45185
sS'name'
p45186
S'implicit'
p45187
sS'required'
p45188
I00
sS'group_name'
p45189
S'Advanced'
p45190
sa(dp45191
S'description'
p45192
S'Mobility property name\n'
p45193
sS'cpp_type'
p45194
S'MaterialPropertyName'
p45195
sS'default'
p45196
g3
sS'name'
p45197
S'mobility_name'
p45198
sS'required'
p45199
I01
sS'group_name'
p45200
Nsa(dp45201
S'description'
p45202
S'Chemical Potential\n'
p45203
sS'cpp_type'
p45204
S'std::vector<VariableName>'
p45205
sS'default'
p45206
g3
sS'name'
p45207
S'mu'
p45208
sS'required'
p45209
I01
sS'group_name'
p45210
Nsa(dp45211
S'description'
p45212
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45213
sS'cpp_type'
p45214
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45215
sS'default'
p45216
g3
sS'name'
p45217
S'save_in'
p45218
sS'required'
p45219
I00
sS'group_name'
p45220
S'Advanced'
p45221
sa(dp45222
S'description'
p45223
S'The seed for the master random number generator\n'
p45224
sS'cpp_type'
p45225
S'unsigned int'
p45226
sS'default'
p45227
S'0'
p45228
sS'name'
p45229
S'seed'
p45230
sS'required'
p45231
I00
sS'group_name'
p45232
S'Advanced'
p45233
sa(dp45234
S'description'
p45235
g3
sS'cpp_type'
p45236
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45237
sS'default'
p45238
S'CHSplitFlux'
p45239
sS'name'
p45240
S'type'
p45241
sS'required'
p45242
I00
sS'group_name'
p45243
Nsa(dp45244
S'description'
p45245
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45246
sS'cpp_type'
p45247
S'bool'
p45248
sS'default'
p45249
S'0'
p45250
sS'name'
p45251
S'use_displaced_mesh'
p45252
sS'required'
p45253
I00
sS'group_name'
p45254
S'Advanced'
p45255
sa(dp45256
S'description'
p45257
S'The name of the variable that this Kernel operates on\n'
p45258
sS'cpp_type'
p45259
S'NonlinearVariableName'
p45260
sS'default'
p45261
g3
sS'name'
p45262
S'variable'
p45263
sS'required'
p45264
I01
sS'group_name'
p45265
NsasS'name'
p45266
S'/Kernels/CHSplitFlux'
p45267
sa(dp45268
S'description'
p45269
S'Split with a variable that holds the Laplacian of a phase field variable.\n'
p45270
sS'subblocks'
p45271
NsS'parameters'
p45272
(lp45273
(dp45274
S'description'
p45275
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45276
sS'cpp_type'
p45277
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45278
sS'default'
p45279
g3
sS'name'
p45280
S'block'
p45281
sS'required'
p45282
I00
sS'group_name'
p45283
Nsa(dp45284
S'description'
p45285
S'Field variable to take the Laplacian of\n'
p45286
sS'cpp_type'
p45287
S'std::vector<VariableName>'
p45288
sS'default'
p45289
g3
sS'name'
p45290
S'c'
p45291
sS'required'
p45292
I01
sS'group_name'
p45293
Nsa(dp45294
S'description'
p45295
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45296
sS'cpp_type'
p45297
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45298
sS'default'
p45299
g3
sS'name'
p45300
S'control_tags'
p45301
sS'required'
p45302
I00
sS'group_name'
p45303
S'Advanced'
p45304
sa(dp45305
S'description'
p45306
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45307
sS'cpp_type'
p45308
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45309
sS'default'
p45310
g3
sS'name'
p45311
S'diag_save_in'
p45312
sS'required'
p45313
I00
sS'group_name'
p45314
S'Advanced'
p45315
sa(dp45316
S'description'
p45317
S'Whether or not this kernel will be used as an eigen kernel\n'
p45318
sS'cpp_type'
p45319
S'bool'
p45320
sS'default'
p45321
S'0'
p45322
sS'name'
p45323
S'eigen_kernel'
p45324
sS'required'
p45325
I00
sS'group_name'
p45326
Nsa(dp45327
S'description'
p45328
S'Set the enabled status of the MooseObject.\n'
p45329
sS'cpp_type'
p45330
S'bool'
p45331
sS'default'
p45332
S'1'
p45333
sS'name'
p45334
S'enable'
p45335
sS'required'
p45336
I00
sS'group_name'
p45337
S'Advanced'
p45338
sa(dp45339
S'description'
p45340
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45341
sS'cpp_type'
p45342
S'bool'
p45343
sS'default'
p45344
S'1'
p45345
sS'name'
p45346
S'implicit'
p45347
sS'required'
p45348
I00
sS'group_name'
p45349
S'Advanced'
p45350
sa(dp45351
S'description'
p45352
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45353
sS'cpp_type'
p45354
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45355
sS'default'
p45356
g3
sS'name'
p45357
S'save_in'
p45358
sS'required'
p45359
I00
sS'group_name'
p45360
S'Advanced'
p45361
sa(dp45362
S'description'
p45363
S'The seed for the master random number generator\n'
p45364
sS'cpp_type'
p45365
S'unsigned int'
p45366
sS'default'
p45367
S'0'
p45368
sS'name'
p45369
S'seed'
p45370
sS'required'
p45371
I00
sS'group_name'
p45372
S'Advanced'
p45373
sa(dp45374
S'description'
p45375
g3
sS'cpp_type'
p45376
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45377
sS'default'
p45378
S'CHSplitVar'
p45379
sS'name'
p45380
S'type'
p45381
sS'required'
p45382
I00
sS'group_name'
p45383
Nsa(dp45384
S'description'
p45385
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45386
sS'cpp_type'
p45387
S'bool'
p45388
sS'default'
p45389
S'0'
p45390
sS'name'
p45391
S'use_displaced_mesh'
p45392
sS'required'
p45393
I00
sS'group_name'
p45394
S'Advanced'
p45395
sa(dp45396
S'description'
p45397
S'The name of the variable that this Kernel operates on\n'
p45398
sS'cpp_type'
p45399
S'NonlinearVariableName'
p45400
sS'default'
p45401
g3
sS'name'
p45402
S'variable'
p45403
sS'required'
p45404
I01
sS'group_name'
p45405
NsasS'name'
p45406
S'/Kernels/CHSplitVar'
p45407
sa(dp45408
S'description'
p45409
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n'
p45410
sS'subblocks'
p45411
NsS'parameters'
p45412
(lp45413
(dp45414
S'description'
p45415
S'Vector of arguments of the mobility\n'
p45416
sS'cpp_type'
p45417
S'std::vector<VariableName>'
p45418
sS'default'
p45419
g3
sS'name'
p45420
S'args'
p45421
sS'required'
p45422
I00
sS'group_name'
p45423
Nsa(dp45424
S'description'
p45425
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45426
sS'cpp_type'
p45427
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45428
sS'default'
p45429
g3
sS'name'
p45430
S'block'
p45431
sS'required'
p45432
I00
sS'group_name'
p45433
Nsa(dp45434
S'description'
p45435
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45436
sS'cpp_type'
p45437
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45438
sS'default'
p45439
g3
sS'name'
p45440
S'control_tags'
p45441
sS'required'
p45442
I00
sS'group_name'
p45443
S'Advanced'
p45444
sa(dp45445
S'description'
p45446
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45447
sS'cpp_type'
p45448
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45449
sS'default'
p45450
g3
sS'name'
p45451
S'diag_save_in'
p45452
sS'required'
p45453
I00
sS'group_name'
p45454
S'Advanced'
p45455
sa(dp45456
S'description'
p45457
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p45458
sS'cpp_type'
p45459
S'std::vector<VariableName>'
p45460
sS'default'
p45461
g3
sS'name'
p45462
S'displacement_gradients'
p45463
sS'required'
p45464
I00
sS'group_name'
p45465
Nsa(dp45466
S'description'
p45467
S'Whether or not this kernel will be used as an eigen kernel\n'
p45468
sS'cpp_type'
p45469
S'bool'
p45470
sS'default'
p45471
S'0'
p45472
sS'name'
p45473
S'eigen_kernel'
p45474
sS'required'
p45475
I00
sS'group_name'
p45476
Nsa(dp45477
S'description'
p45478
S'Set the enabled status of the MooseObject.\n'
p45479
sS'cpp_type'
p45480
S'bool'
p45481
sS'default'
p45482
S'1'
p45483
sS'name'
p45484
S'enable'
p45485
sS'required'
p45486
I00
sS'group_name'
p45487
S'Advanced'
p45488
sa(dp45489
S'description'
p45490
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p45491
sS'cpp_type'
p45492
S'MaterialPropertyName'
p45493
sS'default'
p45494
g3
sS'name'
p45495
S'f_name'
p45496
sS'required'
p45497
I01
sS'group_name'
p45498
Nsa(dp45499
S'description'
p45500
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45501
sS'cpp_type'
p45502
S'bool'
p45503
sS'default'
p45504
S'1'
p45505
sS'name'
p45506
S'implicit'
p45507
sS'required'
p45508
I00
sS'group_name'
p45509
S'Advanced'
p45510
sa(dp45511
S'description'
p45512
S'The mobility used with the kernel\n'
p45513
sS'cpp_type'
p45514
S'MaterialPropertyName'
p45515
sS'default'
p45516
S'M'
p45517
sS'name'
p45518
S'mob_name'
p45519
sS'required'
p45520
I00
sS'group_name'
p45521
Nsa(dp45522
S'description'
p45523
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45524
sS'cpp_type'
p45525
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45526
sS'default'
p45527
g3
sS'name'
p45528
S'save_in'
p45529
sS'required'
p45530
I00
sS'group_name'
p45531
S'Advanced'
p45532
sa(dp45533
S'description'
p45534
S'The seed for the master random number generator\n'
p45535
sS'cpp_type'
p45536
S'unsigned int'
p45537
sS'default'
p45538
S'0'
p45539
sS'name'
p45540
S'seed'
p45541
sS'required'
p45542
I00
sS'group_name'
p45543
S'Advanced'
p45544
sa(dp45545
S'description'
p45546
g3
sS'cpp_type'
p45547
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45548
sS'default'
p45549
S'CahnHilliard'
p45550
sS'name'
p45551
S'type'
p45552
sS'required'
p45553
I00
sS'group_name'
p45554
Nsa(dp45555
S'description'
p45556
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45557
sS'cpp_type'
p45558
S'bool'
p45559
sS'default'
p45560
S'0'
p45561
sS'name'
p45562
S'use_displaced_mesh'
p45563
sS'required'
p45564
I00
sS'group_name'
p45565
S'Advanced'
p45566
sa(dp45567
S'description'
p45568
S'The name of the variable that this Kernel operates on\n'
p45569
sS'cpp_type'
p45570
S'NonlinearVariableName'
p45571
sS'default'
p45572
g3
sS'name'
p45573
S'variable'
p45574
sS'required'
p45575
I01
sS'group_name'
p45576
NsasS'name'
p45577
S'/Kernels/CahnHilliard'
p45578
sa(dp45579
S'description'
p45580
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a tensor (anisotropic) mobility\n'
p45581
sS'subblocks'
p45582
NsS'parameters'
p45583
(lp45584
(dp45585
S'description'
p45586
S'Vector of arguments of the mobility\n'
p45587
sS'cpp_type'
p45588
S'std::vector<VariableName>'
p45589
sS'default'
p45590
g3
sS'name'
p45591
S'args'
p45592
sS'required'
p45593
I00
sS'group_name'
p45594
Nsa(dp45595
S'description'
p45596
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45597
sS'cpp_type'
p45598
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45599
sS'default'
p45600
g3
sS'name'
p45601
S'block'
p45602
sS'required'
p45603
I00
sS'group_name'
p45604
Nsa(dp45605
S'description'
p45606
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45607
sS'cpp_type'
p45608
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45609
sS'default'
p45610
g3
sS'name'
p45611
S'control_tags'
p45612
sS'required'
p45613
I00
sS'group_name'
p45614
S'Advanced'
p45615
sa(dp45616
S'description'
p45617
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45618
sS'cpp_type'
p45619
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45620
sS'default'
p45621
g3
sS'name'
p45622
S'diag_save_in'
p45623
sS'required'
p45624
I00
sS'group_name'
p45625
S'Advanced'
p45626
sa(dp45627
S'description'
p45628
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p45629
sS'cpp_type'
p45630
S'std::vector<VariableName>'
p45631
sS'default'
p45632
g3
sS'name'
p45633
S'displacement_gradients'
p45634
sS'required'
p45635
I00
sS'group_name'
p45636
Nsa(dp45637
S'description'
p45638
S'Whether or not this kernel will be used as an eigen kernel\n'
p45639
sS'cpp_type'
p45640
S'bool'
p45641
sS'default'
p45642
S'0'
p45643
sS'name'
p45644
S'eigen_kernel'
p45645
sS'required'
p45646
I00
sS'group_name'
p45647
Nsa(dp45648
S'description'
p45649
S'Set the enabled status of the MooseObject.\n'
p45650
sS'cpp_type'
p45651
S'bool'
p45652
sS'default'
p45653
S'1'
p45654
sS'name'
p45655
S'enable'
p45656
sS'required'
p45657
I00
sS'group_name'
p45658
S'Advanced'
p45659
sa(dp45660
S'description'
p45661
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p45662
sS'cpp_type'
p45663
S'MaterialPropertyName'
p45664
sS'default'
p45665
g3
sS'name'
p45666
S'f_name'
p45667
sS'required'
p45668
I01
sS'group_name'
p45669
Nsa(dp45670
S'description'
p45671
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45672
sS'cpp_type'
p45673
S'bool'
p45674
sS'default'
p45675
S'1'
p45676
sS'name'
p45677
S'implicit'
p45678
sS'required'
p45679
I00
sS'group_name'
p45680
S'Advanced'
p45681
sa(dp45682
S'description'
p45683
S'The mobility used with the kernel\n'
p45684
sS'cpp_type'
p45685
S'MaterialPropertyName'
p45686
sS'default'
p45687
S'M'
p45688
sS'name'
p45689
S'mob_name'
p45690
sS'required'
p45691
I00
sS'group_name'
p45692
Nsa(dp45693
S'description'
p45694
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45695
sS'cpp_type'
p45696
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45697
sS'default'
p45698
g3
sS'name'
p45699
S'save_in'
p45700
sS'required'
p45701
I00
sS'group_name'
p45702
S'Advanced'
p45703
sa(dp45704
S'description'
p45705
S'The seed for the master random number generator\n'
p45706
sS'cpp_type'
p45707
S'unsigned int'
p45708
sS'default'
p45709
S'0'
p45710
sS'name'
p45711
S'seed'
p45712
sS'required'
p45713
I00
sS'group_name'
p45714
S'Advanced'
p45715
sa(dp45716
S'description'
p45717
g3
sS'cpp_type'
p45718
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45719
sS'default'
p45720
S'CahnHilliardAniso'
p45721
sS'name'
p45722
S'type'
p45723
sS'required'
p45724
I00
sS'group_name'
p45725
Nsa(dp45726
S'description'
p45727
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45728
sS'cpp_type'
p45729
S'bool'
p45730
sS'default'
p45731
S'0'
p45732
sS'name'
p45733
S'use_displaced_mesh'
p45734
sS'required'
p45735
I00
sS'group_name'
p45736
S'Advanced'
p45737
sa(dp45738
S'description'
p45739
S'The name of the variable that this Kernel operates on\n'
p45740
sS'cpp_type'
p45741
S'NonlinearVariableName'
p45742
sS'default'
p45743
g3
sS'name'
p45744
S'variable'
p45745
sS'required'
p45746
I01
sS'group_name'
p45747
NsasS'name'
p45748
S'/Kernels/CahnHilliardAniso'
p45749
sa(dp45750
S'description'
p45751
S'Scaled time derivative Kernel that acts on a coupled variable\n'
p45752
sS'subblocks'
p45753
NsS'parameters'
p45754
(lp45755
(dp45756
S'description'
p45757
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45758
sS'cpp_type'
p45759
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45760
sS'default'
p45761
g3
sS'name'
p45762
S'block'
p45763
sS'required'
p45764
I00
sS'group_name'
p45765
Nsa(dp45766
S'description'
p45767
S'Coefficient\n'
p45768
sS'cpp_type'
p45769
S'double'
p45770
sS'default'
p45771
g3
sS'name'
p45772
S'coef'
p45773
sS'required'
p45774
I01
sS'group_name'
p45775
Nsa(dp45776
S'description'
p45777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45778
sS'cpp_type'
p45779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45780
sS'default'
p45781
g3
sS'name'
p45782
S'control_tags'
p45783
sS'required'
p45784
I00
sS'group_name'
p45785
S'Advanced'
p45786
sa(dp45787
S'description'
p45788
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45789
sS'cpp_type'
p45790
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45791
sS'default'
p45792
g3
sS'name'
p45793
S'diag_save_in'
p45794
sS'required'
p45795
I00
sS'group_name'
p45796
S'Advanced'
p45797
sa(dp45798
S'description'
p45799
S'Whether or not this kernel will be used as an eigen kernel\n'
p45800
sS'cpp_type'
p45801
S'bool'
p45802
sS'default'
p45803
S'0'
p45804
sS'name'
p45805
S'eigen_kernel'
p45806
sS'required'
p45807
I00
sS'group_name'
p45808
Nsa(dp45809
S'description'
p45810
S'Set the enabled status of the MooseObject.\n'
p45811
sS'cpp_type'
p45812
S'bool'
p45813
sS'default'
p45814
S'1'
p45815
sS'name'
p45816
S'enable'
p45817
sS'required'
p45818
I00
sS'group_name'
p45819
S'Advanced'
p45820
sa(dp45821
S'description'
p45822
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45823
sS'cpp_type'
p45824
S'bool'
p45825
sS'default'
p45826
S'1'
p45827
sS'name'
p45828
S'implicit'
p45829
sS'required'
p45830
I00
sS'group_name'
p45831
S'Advanced'
p45832
sa(dp45833
S'description'
p45834
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45835
sS'cpp_type'
p45836
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45837
sS'default'
p45838
g3
sS'name'
p45839
S'save_in'
p45840
sS'required'
p45841
I00
sS'group_name'
p45842
S'Advanced'
p45843
sa(dp45844
S'description'
p45845
S'The seed for the master random number generator\n'
p45846
sS'cpp_type'
p45847
S'unsigned int'
p45848
sS'default'
p45849
S'0'
p45850
sS'name'
p45851
S'seed'
p45852
sS'required'
p45853
I00
sS'group_name'
p45854
S'Advanced'
p45855
sa(dp45856
S'description'
p45857
g3
sS'cpp_type'
p45858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45859
sS'default'
p45860
S'CoefCoupledTimeDerivative'
p45861
sS'name'
p45862
S'type'
p45863
sS'required'
p45864
I00
sS'group_name'
p45865
Nsa(dp45866
S'description'
p45867
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45868
sS'cpp_type'
p45869
S'bool'
p45870
sS'default'
p45871
S'0'
p45872
sS'name'
p45873
S'use_displaced_mesh'
p45874
sS'required'
p45875
I00
sS'group_name'
p45876
S'Advanced'
p45877
sa(dp45878
S'description'
p45879
S'Coupled variable\n'
p45880
sS'cpp_type'
p45881
S'std::vector<VariableName>'
p45882
sS'default'
p45883
g3
sS'name'
p45884
S'v'
p45885
sS'required'
p45886
I01
sS'group_name'
p45887
Nsa(dp45888
S'description'
p45889
S'The name of the variable that this Kernel operates on\n'
p45890
sS'cpp_type'
p45891
S'NonlinearVariableName'
p45892
sS'default'
p45893
g3
sS'name'
p45894
S'variable'
p45895
sS'required'
p45896
I01
sS'group_name'
p45897
NsasS'name'
p45898
S'/Kernels/CoefCoupledTimeDerivative'
p45899
sa(dp45900
S'description'
p45901
g3
sS'subblocks'
p45902
NsS'parameters'
p45903
(lp45904
(dp45905
S'description'
p45906
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45907
sS'cpp_type'
p45908
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45909
sS'default'
p45910
g3
sS'name'
p45911
S'block'
p45912
sS'required'
p45913
I00
sS'group_name'
p45914
Nsa(dp45915
S'description'
p45916
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45917
sS'cpp_type'
p45918
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45919
sS'default'
p45920
g3
sS'name'
p45921
S'control_tags'
p45922
sS'required'
p45923
I00
sS'group_name'
p45924
S'Advanced'
p45925
sa(dp45926
S'description'
p45927
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45928
sS'cpp_type'
p45929
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45930
sS'default'
p45931
g3
sS'name'
p45932
S'diag_save_in'
p45933
sS'required'
p45934
I00
sS'group_name'
p45935
S'Advanced'
p45936
sa(dp45937
S'description'
p45938
S'Whether or not this kernel will be used as an eigen kernel\n'
p45939
sS'cpp_type'
p45940
S'bool'
p45941
sS'default'
p45942
S'0'
p45943
sS'name'
p45944
S'eigen_kernel'
p45945
sS'required'
p45946
I00
sS'group_name'
p45947
Nsa(dp45948
S'description'
p45949
S'Set the enabled status of the MooseObject.\n'
p45950
sS'cpp_type'
p45951
S'bool'
p45952
sS'default'
p45953
S'1'
p45954
sS'name'
p45955
S'enable'
p45956
sS'required'
p45957
I00
sS'group_name'
p45958
S'Advanced'
p45959
sa(dp45960
S'description'
p45961
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45962
sS'cpp_type'
p45963
S'bool'
p45964
sS'default'
p45965
S'1'
p45966
sS'name'
p45967
S'implicit'
p45968
sS'required'
p45969
I00
sS'group_name'
p45970
S'Advanced'
p45971
sa(dp45972
S'description'
p45973
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45974
sS'cpp_type'
p45975
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45976
sS'default'
p45977
g3
sS'name'
p45978
S'save_in'
p45979
sS'required'
p45980
I00
sS'group_name'
p45981
S'Advanced'
p45982
sa(dp45983
S'description'
p45984
S'The seed for the master random number generator\n'
p45985
sS'cpp_type'
p45986
S'unsigned int'
p45987
sS'default'
p45988
S'0'
p45989
sS'name'
p45990
S'seed'
p45991
sS'required'
p45992
I00
sS'group_name'
p45993
S'Advanced'
p45994
sa(dp45995
S'description'
p45996
g3
sS'cpp_type'
p45997
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45998
sS'default'
p45999
S'ConservativeAdvection'
p46000
sS'name'
p46001
S'type'
p46002
sS'required'
p46003
I00
sS'group_name'
p46004
Nsa(dp46005
S'description'
p46006
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46007
sS'cpp_type'
p46008
S'bool'
p46009
sS'default'
p46010
S'0'
p46011
sS'name'
p46012
S'use_displaced_mesh'
p46013
sS'required'
p46014
I00
sS'group_name'
p46015
S'Advanced'
p46016
sa(dp46017
S'description'
p46018
S'The name of the variable that this Kernel operates on\n'
p46019
sS'cpp_type'
p46020
S'NonlinearVariableName'
p46021
sS'default'
p46022
g3
sS'name'
p46023
S'variable'
p46024
sS'required'
p46025
I01
sS'group_name'
p46026
Nsa(dp46027
S'description'
p46028
S'Velocity vector\n'
p46029
sS'cpp_type'
p46030
S'libMesh::VectorValue<double>'
p46031
sS'default'
p46032
g3
sS'name'
p46033
S'velocity'
p46034
sS'required'
p46035
I01
sS'group_name'
p46036
NsasS'name'
p46037
S'/Kernels/ConservativeAdvection'
p46038
sa(dp46039
S'description'
p46040
S'Source term for noise from a ConservativeNoise userobject\n'
p46041
sS'subblocks'
p46042
NsS'parameters'
p46043
(lp46044
(dp46045
S'description'
p46046
S'Amplitude\n'
p46047
sS'cpp_type'
p46048
S'double'
p46049
sS'default'
p46050
g3
sS'name'
p46051
S'amplitude'
p46052
sS'required'
p46053
I01
sS'group_name'
p46054
Nsa(dp46055
S'description'
p46056
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46057
sS'cpp_type'
p46058
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46059
sS'default'
p46060
g3
sS'name'
p46061
S'block'
p46062
sS'required'
p46063
I00
sS'group_name'
p46064
Nsa(dp46065
S'description'
p46066
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46067
sS'cpp_type'
p46068
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46069
sS'default'
p46070
g3
sS'name'
p46071
S'control_tags'
p46072
sS'required'
p46073
I00
sS'group_name'
p46074
S'Advanced'
p46075
sa(dp46076
S'description'
p46077
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46078
sS'cpp_type'
p46079
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46080
sS'default'
p46081
g3
sS'name'
p46082
S'diag_save_in'
p46083
sS'required'
p46084
I00
sS'group_name'
p46085
S'Advanced'
p46086
sa(dp46087
S'description'
p46088
S'Whether or not this kernel will be used as an eigen kernel\n'
p46089
sS'cpp_type'
p46090
S'bool'
p46091
sS'default'
p46092
S'0'
p46093
sS'name'
p46094
S'eigen_kernel'
p46095
sS'required'
p46096
I00
sS'group_name'
p46097
Nsa(dp46098
S'description'
p46099
S'Set the enabled status of the MooseObject.\n'
p46100
sS'cpp_type'
p46101
S'bool'
p46102
sS'default'
p46103
S'1'
p46104
sS'name'
p46105
S'enable'
p46106
sS'required'
p46107
I00
sS'group_name'
p46108
S'Advanced'
p46109
sa(dp46110
S'description'
p46111
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46112
sS'cpp_type'
p46113
S'bool'
p46114
sS'default'
p46115
S'1'
p46116
sS'name'
p46117
S'implicit'
p46118
sS'required'
p46119
I00
sS'group_name'
p46120
S'Advanced'
p46121
sa(dp46122
S'description'
p46123
S'Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n'
p46124
sS'cpp_type'
p46125
S'MaterialPropertyName'
p46126
sS'default'
p46127
S'1'
p46128
sS'name'
p46129
S'multiplier'
p46130
sS'required'
p46131
I00
sS'group_name'
p46132
Nsa(dp46133
S'description'
p46134
S'ConservativeNoise userobject that produces the random numbers\n'
p46135
sS'cpp_type'
p46136
S'UserObjectName'
p46137
sS'default'
p46138
g3
sS'name'
p46139
S'noise'
p46140
sS'required'
p46141
I01
sS'group_name'
p46142
Nsa(dp46143
S'description'
p46144
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46145
sS'cpp_type'
p46146
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46147
sS'default'
p46148
g3
sS'name'
p46149
S'save_in'
p46150
sS'required'
p46151
I00
sS'group_name'
p46152
S'Advanced'
p46153
sa(dp46154
S'description'
p46155
S'The seed for the master random number generator\n'
p46156
sS'cpp_type'
p46157
S'unsigned int'
p46158
sS'default'
p46159
S'0'
p46160
sS'name'
p46161
S'seed'
p46162
sS'required'
p46163
I00
sS'group_name'
p46164
S'Advanced'
p46165
sa(dp46166
S'description'
p46167
g3
sS'cpp_type'
p46168
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46169
sS'default'
p46170
S'ConservedLangevinNoise'
p46171
sS'name'
p46172
S'type'
p46173
sS'required'
p46174
I00
sS'group_name'
p46175
Nsa(dp46176
S'description'
p46177
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46178
sS'cpp_type'
p46179
S'bool'
p46180
sS'default'
p46181
S'0'
p46182
sS'name'
p46183
S'use_displaced_mesh'
p46184
sS'required'
p46185
I00
sS'group_name'
p46186
S'Advanced'
p46187
sa(dp46188
S'description'
p46189
S'The name of the variable that this Kernel operates on\n'
p46190
sS'cpp_type'
p46191
S'NonlinearVariableName'
p46192
sS'default'
p46193
g3
sS'name'
p46194
S'variable'
p46195
sS'required'
p46196
I01
sS'group_name'
p46197
NsasS'name'
p46198
S'/Kernels/ConservedLangevinNoise'
p46199
sa(dp46200
S'description'
p46201
S'Stress divergence kernel for the Cartesian coordinate system\n'
p46202
sS'subblocks'
p46203
NsS'parameters'
p46204
(lp46205
(dp46206
S'description'
p46207
S'The 3 Cosserat rotation variables\n'
p46208
sS'cpp_type'
p46209
S'std::vector<VariableName>'
p46210
sS'default'
p46211
g3
sS'name'
p46212
S'Cosserat_rotations'
p46213
sS'required'
p46214
I01
sS'group_name'
p46215
Nsa(dp46216
S'description'
p46217
S'Material property base name\n'
p46218
sS'cpp_type'
p46219
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46220
sS'default'
p46221
g3
sS'name'
p46222
S'base_name'
p46223
sS'required'
p46224
I00
sS'group_name'
p46225
Nsa(dp46226
S'description'
p46227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46228
sS'cpp_type'
p46229
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46230
sS'default'
p46231
g3
sS'name'
p46232
S'block'
p46233
sS'required'
p46234
I00
sS'group_name'
p46235
Nsa(dp46236
S'description'
p46237
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p46238
sS'cpp_type'
p46239
S'unsigned int'
p46240
sS'default'
p46241
g3
sS'name'
p46242
S'component'
p46243
sS'required'
p46244
I01
sS'group_name'
p46245
Nsa(dp46246
S'description'
p46247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46248
sS'cpp_type'
p46249
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46250
sS'default'
p46251
g3
sS'name'
p46252
S'control_tags'
p46253
sS'required'
p46254
I00
sS'group_name'
p46255
S'Advanced'
p46256
sa(dp46257
S'description'
p46258
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46259
sS'cpp_type'
p46260
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46261
sS'default'
p46262
g3
sS'name'
p46263
S'diag_save_in'
p46264
sS'required'
p46265
I00
sS'group_name'
p46266
S'Advanced'
p46267
sa(dp46268
S'description'
p46269
S'The string of displacements suitable for the problem statement\n'
p46270
sS'cpp_type'
p46271
S'std::vector<VariableName>'
p46272
sS'default'
p46273
g3
sS'name'
p46274
S'displacements'
p46275
sS'required'
p46276
I01
sS'group_name'
p46277
Nsa(dp46278
S'description'
p46279
S'Whether or not this kernel will be used as an eigen kernel\n'
p46280
sS'cpp_type'
p46281
S'bool'
p46282
sS'default'
p46283
S'0'
p46284
sS'name'
p46285
S'eigen_kernel'
p46286
sS'required'
p46287
I00
sS'group_name'
p46288
Nsa(dp46289
S'description'
p46290
S'Set the enabled status of the MooseObject.\n'
p46291
sS'cpp_type'
p46292
S'bool'
p46293
sS'default'
p46294
S'1'
p46295
sS'name'
p46296
S'enable'
p46297
sS'required'
p46298
I00
sS'group_name'
p46299
S'Advanced'
p46300
sa(dp46301
S'description'
p46302
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46303
sS'cpp_type'
p46304
S'bool'
p46305
sS'default'
p46306
S'1'
p46307
sS'name'
p46308
S'implicit'
p46309
sS'required'
p46310
I00
sS'group_name'
p46311
S'Advanced'
p46312
sa(dp46313
S'description'
p46314
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46315
sS'cpp_type'
p46316
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46317
sS'default'
p46318
g3
sS'name'
p46319
S'save_in'
p46320
sS'required'
p46321
I00
sS'group_name'
p46322
S'Advanced'
p46323
sa(dp46324
S'description'
p46325
S'The seed for the master random number generator\n'
p46326
sS'cpp_type'
p46327
S'unsigned int'
p46328
sS'default'
p46329
S'0'
p46330
sS'name'
p46331
S'seed'
p46332
sS'required'
p46333
I00
sS'group_name'
p46334
S'Advanced'
p46335
sa(dp46336
S'description'
p46337
S'The temperature\n'
p46338
sS'cpp_type'
p46339
S'std::vector<VariableName>'
p46340
sS'default'
p46341
g3
sS'name'
p46342
S'temp'
p46343
sS'required'
p46344
I00
sS'group_name'
p46345
Nsa(dp46346
S'description'
p46347
S'The temperature\n'
p46348
sS'cpp_type'
p46349
S'std::vector<VariableName>'
p46350
sS'default'
p46351
g3
sS'name'
p46352
S'temperature'
p46353
sS'required'
p46354
I00
sS'group_name'
p46355
Nsa(dp46356
S'description'
p46357
g3
sS'cpp_type'
p46358
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46359
sS'default'
p46360
S'CosseratStressDivergenceTensors'
p46361
sS'name'
p46362
S'type'
p46363
sS'required'
p46364
I00
sS'group_name'
p46365
Nsa(dp46366
S'description'
p46367
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46368
sS'cpp_type'
p46369
S'bool'
p46370
sS'default'
p46371
S'0'
p46372
sS'name'
p46373
S'use_displaced_mesh'
p46374
sS'required'
p46375
I00
sS'group_name'
p46376
S'Advanced'
p46377
sa(dp46378
S'description'
p46379
S'Jacobian for corotational finite strain\n'
p46380
sS'cpp_type'
p46381
S'bool'
p46382
sS'default'
p46383
S'0'
p46384
sS'name'
p46385
S'use_finite_deform_jacobian'
p46386
sS'required'
p46387
I00
sS'group_name'
p46388
Nsa(dp46389
S'description'
p46390
S'The name of the variable that this Kernel operates on\n'
p46391
sS'cpp_type'
p46392
S'NonlinearVariableName'
p46393
sS'default'
p46394
g3
sS'name'
p46395
S'variable'
p46396
sS'required'
p46397
I01
sS'group_name'
p46398
Nsa(dp46399
S'description'
p46400
S'Set to false to turn off volumetric locking correction\n'
p46401
sS'cpp_type'
p46402
S'bool'
p46403
sS'default'
p46404
S'0'
p46405
sS'name'
p46406
S'volumetric_locking_correction'
p46407
sS'required'
p46408
I00
sS'group_name'
p46409
NsasS'name'
p46410
S'/Kernels/CosseratStressDivergenceTensors'
p46411
sa(dp46412
S'description'
p46413
S'Coupled Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n'
p46414
sS'subblocks'
p46415
NsS'parameters'
p46416
(lp46417
(dp46418
S'description'
p46419
S'Vector of arguments of the mobility\n'
p46420
sS'cpp_type'
p46421
S'std::vector<VariableName>'
p46422
sS'default'
p46423
g3
sS'name'
p46424
S'args'
p46425
sS'required'
p46426
I00
sS'group_name'
p46427
Nsa(dp46428
S'description'
p46429
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46430
sS'cpp_type'
p46431
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46432
sS'default'
p46433
g3
sS'name'
p46434
S'block'
p46435
sS'required'
p46436
I00
sS'group_name'
p46437
Nsa(dp46438
S'description'
p46439
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46440
sS'cpp_type'
p46441
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46442
sS'default'
p46443
g3
sS'name'
p46444
S'control_tags'
p46445
sS'required'
p46446
I00
sS'group_name'
p46447
S'Advanced'
p46448
sa(dp46449
S'description'
p46450
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46451
sS'cpp_type'
p46452
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46453
sS'default'
p46454
g3
sS'name'
p46455
S'diag_save_in'
p46456
sS'required'
p46457
I00
sS'group_name'
p46458
S'Advanced'
p46459
sa(dp46460
S'description'
p46461
S'Whether or not this kernel will be used as an eigen kernel\n'
p46462
sS'cpp_type'
p46463
S'bool'
p46464
sS'default'
p46465
S'0'
p46466
sS'name'
p46467
S'eigen_kernel'
p46468
sS'required'
p46469
I00
sS'group_name'
p46470
Nsa(dp46471
S'description'
p46472
S'Set the enabled status of the MooseObject.\n'
p46473
sS'cpp_type'
p46474
S'bool'
p46475
sS'default'
p46476
S'1'
p46477
sS'name'
p46478
S'enable'
p46479
sS'required'
p46480
I00
sS'group_name'
p46481
S'Advanced'
p46482
sa(dp46483
S'description'
p46484
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p46485
sS'cpp_type'
p46486
S'MaterialPropertyName'
p46487
sS'default'
p46488
g3
sS'name'
p46489
S'f_name'
p46490
sS'required'
p46491
I01
sS'group_name'
p46492
Nsa(dp46493
S'description'
p46494
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46495
sS'cpp_type'
p46496
S'bool'
p46497
sS'default'
p46498
S'1'
p46499
sS'name'
p46500
S'implicit'
p46501
sS'required'
p46502
I00
sS'group_name'
p46503
S'Advanced'
p46504
sa(dp46505
S'description'
p46506
S'The mobility used with the kernel\n'
p46507
sS'cpp_type'
p46508
S'MaterialPropertyName'
p46509
sS'default'
p46510
S'L'
p46511
sS'name'
p46512
S'mob_name'
p46513
sS'required'
p46514
I00
sS'group_name'
p46515
Nsa(dp46516
S'description'
p46517
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46518
sS'cpp_type'
p46519
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46520
sS'default'
p46521
g3
sS'name'
p46522
S'save_in'
p46523
sS'required'
p46524
I00
sS'group_name'
p46525
S'Advanced'
p46526
sa(dp46527
S'description'
p46528
S'The seed for the master random number generator\n'
p46529
sS'cpp_type'
p46530
S'unsigned int'
p46531
sS'default'
p46532
S'0'
p46533
sS'name'
p46534
S'seed'
p46535
sS'required'
p46536
I00
sS'group_name'
p46537
S'Advanced'
p46538
sa(dp46539
S'description'
p46540
g3
sS'cpp_type'
p46541
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46542
sS'default'
p46543
S'CoupledAllenCahn'
p46544
sS'name'
p46545
S'type'
p46546
sS'required'
p46547
I00
sS'group_name'
p46548
Nsa(dp46549
S'description'
p46550
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46551
sS'cpp_type'
p46552
S'bool'
p46553
sS'default'
p46554
S'0'
p46555
sS'name'
p46556
S'use_displaced_mesh'
p46557
sS'required'
p46558
I00
sS'group_name'
p46559
S'Advanced'
p46560
sa(dp46561
S'description'
p46562
S'Coupled variable\n'
p46563
sS'cpp_type'
p46564
S'std::vector<VariableName>'
p46565
sS'default'
p46566
g3
sS'name'
p46567
S'v'
p46568
sS'required'
p46569
I01
sS'group_name'
p46570
Nsa(dp46571
S'description'
p46572
S'The name of the variable that this Kernel operates on\n'
p46573
sS'cpp_type'
p46574
S'NonlinearVariableName'
p46575
sS'default'
p46576
g3
sS'name'
p46577
S'variable'
p46578
sS'required'
p46579
I01
sS'group_name'
p46580
NsasS'name'
p46581
S'/Kernels/CoupledAllenCahn'
p46582
sa(dp46583
S'description'
p46584
g3
sS'subblocks'
p46585
NsS'parameters'
p46586
(lp46587
(dp46588
S'description'
p46589
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46590
sS'cpp_type'
p46591
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46592
sS'default'
p46593
g3
sS'name'
p46594
S'block'
p46595
sS'required'
p46596
I00
sS'group_name'
p46597
Nsa(dp46598
S'description'
p46599
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46600
sS'cpp_type'
p46601
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46602
sS'default'
p46603
g3
sS'name'
p46604
S'control_tags'
p46605
sS'required'
p46606
I00
sS'group_name'
p46607
S'Advanced'
p46608
sa(dp46609
S'description'
p46610
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46611
sS'cpp_type'
p46612
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46613
sS'default'
p46614
g3
sS'name'
p46615
S'diag_save_in'
p46616
sS'required'
p46617
I00
sS'group_name'
p46618
S'Advanced'
p46619
sa(dp46620
S'description'
p46621
S'Whether or not this kernel will be used as an eigen kernel\n'
p46622
sS'cpp_type'
p46623
S'bool'
p46624
sS'default'
p46625
S'0'
p46626
sS'name'
p46627
S'eigen_kernel'
p46628
sS'required'
p46629
I00
sS'group_name'
p46630
Nsa(dp46631
S'description'
p46632
S'Set the enabled status of the MooseObject.\n'
p46633
sS'cpp_type'
p46634
S'bool'
p46635
sS'default'
p46636
S'1'
p46637
sS'name'
p46638
S'enable'
p46639
sS'required'
p46640
I00
sS'group_name'
p46641
S'Advanced'
p46642
sa(dp46643
S'description'
p46644
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46645
sS'cpp_type'
p46646
S'bool'
p46647
sS'default'
p46648
S'1'
p46649
sS'name'
p46650
S'implicit'
p46651
sS'required'
p46652
I00
sS'group_name'
p46653
S'Advanced'
p46654
sa(dp46655
S'description'
p46656
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46657
sS'cpp_type'
p46658
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46659
sS'default'
p46660
g3
sS'name'
p46661
S'save_in'
p46662
sS'required'
p46663
I00
sS'group_name'
p46664
S'Advanced'
p46665
sa(dp46666
S'description'
p46667
S'The seed for the master random number generator\n'
p46668
sS'cpp_type'
p46669
S'unsigned int'
p46670
sS'default'
p46671
S'0'
p46672
sS'name'
p46673
S'seed'
p46674
sS'required'
p46675
I00
sS'group_name'
p46676
S'Advanced'
p46677
sa(dp46678
S'description'
p46679
g3
sS'cpp_type'
p46680
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46681
sS'default'
p46682
S'CoupledForce'
p46683
sS'name'
p46684
S'type'
p46685
sS'required'
p46686
I00
sS'group_name'
p46687
Nsa(dp46688
S'description'
p46689
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46690
sS'cpp_type'
p46691
S'bool'
p46692
sS'default'
p46693
S'0'
p46694
sS'name'
p46695
S'use_displaced_mesh'
p46696
sS'required'
p46697
I00
sS'group_name'
p46698
S'Advanced'
p46699
sa(dp46700
S'description'
p46701
S'The coupled variable which provides the force\n'
p46702
sS'cpp_type'
p46703
S'std::vector<VariableName>'
p46704
sS'default'
p46705
g3
sS'name'
p46706
S'v'
p46707
sS'required'
p46708
I01
sS'group_name'
p46709
Nsa(dp46710
S'description'
p46711
S'The name of the variable that this Kernel operates on\n'
p46712
sS'cpp_type'
p46713
S'NonlinearVariableName'
p46714
sS'default'
p46715
g3
sS'name'
p46716
S'variable'
p46717
sS'required'
p46718
I01
sS'group_name'
p46719
NsasS'name'
p46720
S'/Kernels/CoupledForce'
p46721
sa(dp46722
S'description'
p46723
S'A modified coupled time derivative Kernel that multiply the time derivative of a coupled variable by a function of the variables\n'
p46724
sS'subblocks'
p46725
NsS'parameters'
p46726
(lp46727
(dp46728
S'description'
p46729
S'Vector of arguments of the susceptibility\n'
p46730
sS'cpp_type'
p46731
S'std::vector<VariableName>'
p46732
sS'default'
p46733
g3
sS'name'
p46734
S'args'
p46735
sS'required'
p46736
I00
sS'group_name'
p46737
Nsa(dp46738
S'description'
p46739
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46740
sS'cpp_type'
p46741
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46742
sS'default'
p46743
g3
sS'name'
p46744
S'block'
p46745
sS'required'
p46746
I00
sS'group_name'
p46747
Nsa(dp46748
S'description'
p46749
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46750
sS'cpp_type'
p46751
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46752
sS'default'
p46753
g3
sS'name'
p46754
S'control_tags'
p46755
sS'required'
p46756
I00
sS'group_name'
p46757
S'Advanced'
p46758
sa(dp46759
S'description'
p46760
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46761
sS'cpp_type'
p46762
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46763
sS'default'
p46764
g3
sS'name'
p46765
S'diag_save_in'
p46766
sS'required'
p46767
I00
sS'group_name'
p46768
S'Advanced'
p46769
sa(dp46770
S'description'
p46771
S'Whether or not this kernel will be used as an eigen kernel\n'
p46772
sS'cpp_type'
p46773
S'bool'
p46774
sS'default'
p46775
S'0'
p46776
sS'name'
p46777
S'eigen_kernel'
p46778
sS'required'
p46779
I00
sS'group_name'
p46780
Nsa(dp46781
S'description'
p46782
S'Set the enabled status of the MooseObject.\n'
p46783
sS'cpp_type'
p46784
S'bool'
p46785
sS'default'
p46786
S'1'
p46787
sS'name'
p46788
S'enable'
p46789
sS'required'
p46790
I00
sS'group_name'
p46791
S'Advanced'
p46792
sa(dp46793
S'description'
p46794
S'Base name of the function F defined in a DerivativeParsedMaterial\n'
p46795
sS'cpp_type'
p46796
S'MaterialPropertyName'
p46797
sS'default'
p46798
g3
sS'name'
p46799
S'f_name'
p46800
sS'required'
p46801
I01
sS'group_name'
p46802
Nsa(dp46803
S'description'
p46804
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46805
sS'cpp_type'
p46806
S'bool'
p46807
sS'default'
p46808
S'1'
p46809
sS'name'
p46810
S'implicit'
p46811
sS'required'
p46812
I00
sS'group_name'
p46813
S'Advanced'
p46814
sa(dp46815
S'description'
p46816
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46817
sS'cpp_type'
p46818
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46819
sS'default'
p46820
g3
sS'name'
p46821
S'save_in'
p46822
sS'required'
p46823
I00
sS'group_name'
p46824
S'Advanced'
p46825
sa(dp46826
S'description'
p46827
S'The seed for the master random number generator\n'
p46828
sS'cpp_type'
p46829
S'unsigned int'
p46830
sS'default'
p46831
S'0'
p46832
sS'name'
p46833
S'seed'
p46834
sS'required'
p46835
I00
sS'group_name'
p46836
S'Advanced'
p46837
sa(dp46838
S'description'
p46839
g3
sS'cpp_type'
p46840
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46841
sS'default'
p46842
S'CoupledSusceptibilityTimeDerivative'
p46843
sS'name'
p46844
S'type'
p46845
sS'required'
p46846
I00
sS'group_name'
p46847
Nsa(dp46848
S'description'
p46849
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46850
sS'cpp_type'
p46851
S'bool'
p46852
sS'default'
p46853
S'0'
p46854
sS'name'
p46855
S'use_displaced_mesh'
p46856
sS'required'
p46857
I00
sS'group_name'
p46858
S'Advanced'
p46859
sa(dp46860
S'description'
p46861
S'Coupled variable\n'
p46862
sS'cpp_type'
p46863
S'std::vector<VariableName>'
p46864
sS'default'
p46865
g3
sS'name'
p46866
S'v'
p46867
sS'required'
p46868
I01
sS'group_name'
p46869
Nsa(dp46870
S'description'
p46871
S'The name of the variable that this Kernel operates on\n'
p46872
sS'cpp_type'
p46873
S'NonlinearVariableName'
p46874
sS'default'
p46875
g3
sS'name'
p46876
S'variable'
p46877
sS'required'
p46878
I01
sS'group_name'
p46879
NsasS'name'
p46880
S'/Kernels/CoupledSusceptibilityTimeDerivative'
p46881
sa(dp46882
S'description'
p46883
S'Coupled time derivative Kernel that multiplies time derivative by (dh_a/deta_i * Fa + dh_b/deta_i * Fb + ..)\n'
p46884
sS'subblocks'
p46885
NsS'parameters'
p46886
(lp46887
(dp46888
S'description'
p46889
S'List of functions for each phase. Place in same order as hj_names!\n'
p46890
sS'cpp_type'
p46891
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p46892
sS'default'
p46893
g3
sS'name'
p46894
S'Fj_names'
p46895
sS'required'
p46896
I01
sS'group_name'
p46897
Nsa(dp46898
S'description'
p46899
S'Vector of arguments of Fj and hj\n'
p46900
sS'cpp_type'
p46901
S'std::vector<VariableName>'
p46902
sS'default'
p46903
g3
sS'name'
p46904
S'args'
p46905
sS'required'
p46906
I00
sS'group_name'
p46907
Nsa(dp46908
S'description'
p46909
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46910
sS'cpp_type'
p46911
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46912
sS'default'
p46913
g3
sS'name'
p46914
S'block'
p46915
sS'required'
p46916
I00
sS'group_name'
p46917
Nsa(dp46918
S'description'
p46919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46920
sS'cpp_type'
p46921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46922
sS'default'
p46923
g3
sS'name'
p46924
S'control_tags'
p46925
sS'required'
p46926
I00
sS'group_name'
p46927
S'Advanced'
p46928
sa(dp46929
S'description'
p46930
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46931
sS'cpp_type'
p46932
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46933
sS'default'
p46934
g3
sS'name'
p46935
S'diag_save_in'
p46936
sS'required'
p46937
I00
sS'group_name'
p46938
S'Advanced'
p46939
sa(dp46940
S'description'
p46941
S'Whether or not this kernel will be used as an eigen kernel\n'
p46942
sS'cpp_type'
p46943
S'bool'
p46944
sS'default'
p46945
S'0'
p46946
sS'name'
p46947
S'eigen_kernel'
p46948
sS'required'
p46949
I00
sS'group_name'
p46950
Nsa(dp46951
S'description'
p46952
S'Set the enabled status of the MooseObject.\n'
p46953
sS'cpp_type'
p46954
S'bool'
p46955
sS'default'
p46956
S'1'
p46957
sS'name'
p46958
S'enable'
p46959
sS'required'
p46960
I00
sS'group_name'
p46961
S'Advanced'
p46962
sa(dp46963
S'description'
p46964
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p46965
sS'cpp_type'
p46966
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p46967
sS'default'
p46968
g3
sS'name'
p46969
S'hj_names'
p46970
sS'required'
p46971
I01
sS'group_name'
p46972
Nsa(dp46973
S'description'
p46974
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46975
sS'cpp_type'
p46976
S'bool'
p46977
sS'default'
p46978
S'1'
p46979
sS'name'
p46980
S'implicit'
p46981
sS'required'
p46982
I00
sS'group_name'
p46983
S'Advanced'
p46984
sa(dp46985
S'description'
p46986
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46987
sS'cpp_type'
p46988
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46989
sS'default'
p46990
g3
sS'name'
p46991
S'save_in'
p46992
sS'required'
p46993
I00
sS'group_name'
p46994
S'Advanced'
p46995
sa(dp46996
S'description'
p46997
S'The seed for the master random number generator\n'
p46998
sS'cpp_type'
p46999
S'unsigned int'
p47000
sS'default'
p47001
S'0'
p47002
sS'name'
p47003
S'seed'
p47004
sS'required'
p47005
I00
sS'group_name'
p47006
S'Advanced'
p47007
sa(dp47008
S'description'
p47009
g3
sS'cpp_type'
p47010
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47011
sS'default'
p47012
S'CoupledSwitchingTimeDerivative'
p47013
sS'name'
p47014
S'type'
p47015
sS'required'
p47016
I00
sS'group_name'
p47017
Nsa(dp47018
S'description'
p47019
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47020
sS'cpp_type'
p47021
S'bool'
p47022
sS'default'
p47023
S'0'
p47024
sS'name'
p47025
S'use_displaced_mesh'
p47026
sS'required'
p47027
I00
sS'group_name'
p47028
S'Advanced'
p47029
sa(dp47030
S'description'
p47031
S'Coupled variable\n'
p47032
sS'cpp_type'
p47033
S'std::vector<VariableName>'
p47034
sS'default'
p47035
g3
sS'name'
p47036
S'v'
p47037
sS'required'
p47038
I01
sS'group_name'
p47039
Nsa(dp47040
S'description'
p47041
S'The name of the variable that this Kernel operates on\n'
p47042
sS'cpp_type'
p47043
S'NonlinearVariableName'
p47044
sS'default'
p47045
g3
sS'name'
p47046
S'variable'
p47047
sS'required'
p47048
I01
sS'group_name'
p47049
NsasS'name'
p47050
S'/Kernels/CoupledSwitchingTimeDerivative'
p47051
sa(dp47052
S'description'
p47053
S'Time derivative Kernel that acts on a coupled variable\n'
p47054
sS'subblocks'
p47055
NsS'parameters'
p47056
(lp47057
(dp47058
S'description'
p47059
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47060
sS'cpp_type'
p47061
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47062
sS'default'
p47063
g3
sS'name'
p47064
S'block'
p47065
sS'required'
p47066
I00
sS'group_name'
p47067
Nsa(dp47068
S'description'
p47069
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47070
sS'cpp_type'
p47071
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47072
sS'default'
p47073
g3
sS'name'
p47074
S'control_tags'
p47075
sS'required'
p47076
I00
sS'group_name'
p47077
S'Advanced'
p47078
sa(dp47079
S'description'
p47080
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47081
sS'cpp_type'
p47082
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47083
sS'default'
p47084
g3
sS'name'
p47085
S'diag_save_in'
p47086
sS'required'
p47087
I00
sS'group_name'
p47088
S'Advanced'
p47089
sa(dp47090
S'description'
p47091
S'Whether or not this kernel will be used as an eigen kernel\n'
p47092
sS'cpp_type'
p47093
S'bool'
p47094
sS'default'
p47095
S'0'
p47096
sS'name'
p47097
S'eigen_kernel'
p47098
sS'required'
p47099
I00
sS'group_name'
p47100
Nsa(dp47101
S'description'
p47102
S'Set the enabled status of the MooseObject.\n'
p47103
sS'cpp_type'
p47104
S'bool'
p47105
sS'default'
p47106
S'1'
p47107
sS'name'
p47108
S'enable'
p47109
sS'required'
p47110
I00
sS'group_name'
p47111
S'Advanced'
p47112
sa(dp47113
S'description'
p47114
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47115
sS'cpp_type'
p47116
S'bool'
p47117
sS'default'
p47118
S'1'
p47119
sS'name'
p47120
S'implicit'
p47121
sS'required'
p47122
I00
sS'group_name'
p47123
S'Advanced'
p47124
sa(dp47125
S'description'
p47126
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47127
sS'cpp_type'
p47128
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47129
sS'default'
p47130
g3
sS'name'
p47131
S'save_in'
p47132
sS'required'
p47133
I00
sS'group_name'
p47134
S'Advanced'
p47135
sa(dp47136
S'description'
p47137
S'The seed for the master random number generator\n'
p47138
sS'cpp_type'
p47139
S'unsigned int'
p47140
sS'default'
p47141
S'0'
p47142
sS'name'
p47143
S'seed'
p47144
sS'required'
p47145
I00
sS'group_name'
p47146
S'Advanced'
p47147
sa(dp47148
S'description'
p47149
g3
sS'cpp_type'
p47150
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47151
sS'default'
p47152
S'CoupledTimeDerivative'
p47153
sS'name'
p47154
S'type'
p47155
sS'required'
p47156
I00
sS'group_name'
p47157
Nsa(dp47158
S'description'
p47159
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47160
sS'cpp_type'
p47161
S'bool'
p47162
sS'default'
p47163
S'0'
p47164
sS'name'
p47165
S'use_displaced_mesh'
p47166
sS'required'
p47167
I00
sS'group_name'
p47168
S'Advanced'
p47169
sa(dp47170
S'description'
p47171
S'Coupled variable\n'
p47172
sS'cpp_type'
p47173
S'std::vector<VariableName>'
p47174
sS'default'
p47175
g3
sS'name'
p47176
S'v'
p47177
sS'required'
p47178
I01
sS'group_name'
p47179
Nsa(dp47180
S'description'
p47181
S'The name of the variable that this Kernel operates on\n'
p47182
sS'cpp_type'
p47183
S'NonlinearVariableName'
p47184
sS'default'
p47185
g3
sS'name'
p47186
S'variable'
p47187
sS'required'
p47188
I01
sS'group_name'
p47189
NsasS'name'
p47190
S'/Kernels/CoupledTimeDerivative'
p47191
sa(dp47192
S'description'
p47193
S'The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak form of $(\\nabla \\phi_i, \\nabla u_h)$.\n'
p47194
sS'subblocks'
p47195
NsS'parameters'
p47196
(lp47197
(dp47198
S'description'
p47199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47200
sS'cpp_type'
p47201
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47202
sS'default'
p47203
g3
sS'name'
p47204
S'block'
p47205
sS'required'
p47206
I00
sS'group_name'
p47207
Nsa(dp47208
S'description'
p47209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47210
sS'cpp_type'
p47211
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47212
sS'default'
p47213
g3
sS'name'
p47214
S'control_tags'
p47215
sS'required'
p47216
I00
sS'group_name'
p47217
S'Advanced'
p47218
sa(dp47219
S'description'
p47220
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47221
sS'cpp_type'
p47222
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47223
sS'default'
p47224
g3
sS'name'
p47225
S'diag_save_in'
p47226
sS'required'
p47227
I00
sS'group_name'
p47228
S'Advanced'
p47229
sa(dp47230
S'description'
p47231
S'Whether or not this kernel will be used as an eigen kernel\n'
p47232
sS'cpp_type'
p47233
S'bool'
p47234
sS'default'
p47235
S'0'
p47236
sS'name'
p47237
S'eigen_kernel'
p47238
sS'required'
p47239
I00
sS'group_name'
p47240
Nsa(dp47241
S'description'
p47242
S'Set the enabled status of the MooseObject.\n'
p47243
sS'cpp_type'
p47244
S'bool'
p47245
sS'default'
p47246
S'1'
p47247
sS'name'
p47248
S'enable'
p47249
sS'required'
p47250
I00
sS'group_name'
p47251
S'Advanced'
p47252
sa(dp47253
S'description'
p47254
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47255
sS'cpp_type'
p47256
S'bool'
p47257
sS'default'
p47258
S'1'
p47259
sS'name'
p47260
S'implicit'
p47261
sS'required'
p47262
I00
sS'group_name'
p47263
S'Advanced'
p47264
sa(dp47265
S'description'
p47266
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47267
sS'cpp_type'
p47268
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47269
sS'default'
p47270
g3
sS'name'
p47271
S'save_in'
p47272
sS'required'
p47273
I00
sS'group_name'
p47274
S'Advanced'
p47275
sa(dp47276
S'description'
p47277
S'The seed for the master random number generator\n'
p47278
sS'cpp_type'
p47279
S'unsigned int'
p47280
sS'default'
p47281
S'0'
p47282
sS'name'
p47283
S'seed'
p47284
sS'required'
p47285
I00
sS'group_name'
p47286
S'Advanced'
p47287
sa(dp47288
S'description'
p47289
g3
sS'cpp_type'
p47290
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47291
sS'default'
p47292
S'Diffusion'
p47293
sS'name'
p47294
S'type'
p47295
sS'required'
p47296
I00
sS'group_name'
p47297
Nsa(dp47298
S'description'
p47299
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47300
sS'cpp_type'
p47301
S'bool'
p47302
sS'default'
p47303
S'0'
p47304
sS'name'
p47305
S'use_displaced_mesh'
p47306
sS'required'
p47307
I00
sS'group_name'
p47308
S'Advanced'
p47309
sa(dp47310
S'description'
p47311
S'The name of the variable that this Kernel operates on\n'
p47312
sS'cpp_type'
p47313
S'NonlinearVariableName'
p47314
sS'default'
p47315
g3
sS'name'
p47316
S'variable'
p47317
sS'required'
p47318
I01
sS'group_name'
p47319
NsasS'name'
p47320
S'/Kernels/Diffusion'
p47321
sa(dp47322
S'description'
p47323
S'Residual due to stress related Rayleigh damping and HHT time integration terms \n'
p47324
sS'subblocks'
p47325
NsS'parameters'
p47326
(lp47327
(dp47328
S'description'
p47329
S'alpha parameter for HHT time integration\n'
p47330
sS'cpp_type'
p47331
S'double'
p47332
sS'default'
p47333
S'0'
p47334
sS'name'
p47335
S'alpha'
p47336
sS'required'
p47337
I00
sS'group_name'
p47338
Nsa(dp47339
S'description'
p47340
S'Material property base name\n'
p47341
sS'cpp_type'
p47342
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47343
sS'default'
p47344
g3
sS'name'
p47345
S'base_name'
p47346
sS'required'
p47347
I00
sS'group_name'
p47348
Nsa(dp47349
S'description'
p47350
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47351
sS'cpp_type'
p47352
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47353
sS'default'
p47354
g3
sS'name'
p47355
S'block'
p47356
sS'required'
p47357
I00
sS'group_name'
p47358
Nsa(dp47359
S'description'
p47360
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p47361
sS'cpp_type'
p47362
S'unsigned int'
p47363
sS'default'
p47364
g3
sS'name'
p47365
S'component'
p47366
sS'required'
p47367
I01
sS'group_name'
p47368
Nsa(dp47369
S'description'
p47370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47371
sS'cpp_type'
p47372
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47373
sS'default'
p47374
g3
sS'name'
p47375
S'control_tags'
p47376
sS'required'
p47377
I00
sS'group_name'
p47378
S'Advanced'
p47379
sa(dp47380
S'description'
p47381
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47382
sS'cpp_type'
p47383
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47384
sS'default'
p47385
g3
sS'name'
p47386
S'diag_save_in'
p47387
sS'required'
p47388
I00
sS'group_name'
p47389
S'Advanced'
p47390
sa(dp47391
S'description'
p47392
S'The string of displacements suitable for the problem statement\n'
p47393
sS'cpp_type'
p47394
S'std::vector<VariableName>'
p47395
sS'default'
p47396
g3
sS'name'
p47397
S'displacements'
p47398
sS'required'
p47399
I01
sS'group_name'
p47400
Nsa(dp47401
S'description'
p47402
S'Whether or not this kernel will be used as an eigen kernel\n'
p47403
sS'cpp_type'
p47404
S'bool'
p47405
sS'default'
p47406
S'0'
p47407
sS'name'
p47408
S'eigen_kernel'
p47409
sS'required'
p47410
I00
sS'group_name'
p47411
Nsa(dp47412
S'description'
p47413
S'Set the enabled status of the MooseObject.\n'
p47414
sS'cpp_type'
p47415
S'bool'
p47416
sS'default'
p47417
S'1'
p47418
sS'name'
p47419
S'enable'
p47420
sS'required'
p47421
I00
sS'group_name'
p47422
S'Advanced'
p47423
sa(dp47424
S'description'
p47425
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47426
sS'cpp_type'
p47427
S'bool'
p47428
sS'default'
p47429
S'1'
p47430
sS'name'
p47431
S'implicit'
p47432
sS'required'
p47433
I00
sS'group_name'
p47434
S'Advanced'
p47435
sa(dp47436
S'description'
p47437
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47438
sS'cpp_type'
p47439
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47440
sS'default'
p47441
g3
sS'name'
p47442
S'save_in'
p47443
sS'required'
p47444
I00
sS'group_name'
p47445
S'Advanced'
p47446
sa(dp47447
S'description'
p47448
S'The seed for the master random number generator\n'
p47449
sS'cpp_type'
p47450
S'unsigned int'
p47451
sS'default'
p47452
S'0'
p47453
sS'name'
p47454
S'seed'
p47455
sS'required'
p47456
I00
sS'group_name'
p47457
S'Advanced'
p47458
sa(dp47459
S'description'
p47460
S'Set to true to get the system to equillibrium under gravity by running a quasi-static analysis (by solving Ku = F) in the first time step\n'
p47461
sS'cpp_type'
p47462
S'bool'
p47463
sS'default'
p47464
S'0'
p47465
sS'name'
p47466
S'static_initialization'
p47467
sS'required'
p47468
I00
sS'group_name'
p47469
Nsa(dp47470
S'description'
p47471
S'The temperature\n'
p47472
sS'cpp_type'
p47473
S'std::vector<VariableName>'
p47474
sS'default'
p47475
g3
sS'name'
p47476
S'temp'
p47477
sS'required'
p47478
I00
sS'group_name'
p47479
Nsa(dp47480
S'description'
p47481
S'The temperature\n'
p47482
sS'cpp_type'
p47483
S'std::vector<VariableName>'
p47484
sS'default'
p47485
g3
sS'name'
p47486
S'temperature'
p47487
sS'required'
p47488
I00
sS'group_name'
p47489
Nsa(dp47490
S'description'
p47491
g3
sS'cpp_type'
p47492
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47493
sS'default'
p47494
S'DynamicStressDivergenceTensors'
p47495
sS'name'
p47496
S'type'
p47497
sS'required'
p47498
I00
sS'group_name'
p47499
Nsa(dp47500
S'description'
p47501
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47502
sS'cpp_type'
p47503
S'bool'
p47504
sS'default'
p47505
S'0'
p47506
sS'name'
p47507
S'use_displaced_mesh'
p47508
sS'required'
p47509
I00
sS'group_name'
p47510
S'Advanced'
p47511
sa(dp47512
S'description'
p47513
S'Jacobian for corotational finite strain\n'
p47514
sS'cpp_type'
p47515
S'bool'
p47516
sS'default'
p47517
S'0'
p47518
sS'name'
p47519
S'use_finite_deform_jacobian'
p47520
sS'required'
p47521
I00
sS'group_name'
p47522
Nsa(dp47523
S'description'
p47524
S'The name of the variable that this Kernel operates on\n'
p47525
sS'cpp_type'
p47526
S'NonlinearVariableName'
p47527
sS'default'
p47528
g3
sS'name'
p47529
S'variable'
p47530
sS'required'
p47531
I01
sS'group_name'
p47532
Nsa(dp47533
S'description'
p47534
S'Set to false to turn off volumetric locking correction\n'
p47535
sS'cpp_type'
p47536
S'bool'
p47537
sS'default'
p47538
S'0'
p47539
sS'name'
p47540
S'volumetric_locking_correction'
p47541
sS'required'
p47542
I00
sS'group_name'
p47543
Nsa(dp47544
S'description'
p47545
S'Name of material property or a constant real number defining the zeta parameter for the Rayleigh damping.\n'
p47546
sS'cpp_type'
p47547
S'MaterialPropertyName'
p47548
sS'default'
p47549
S'0'
p47550
sS'name'
p47551
S'zeta'
p47552
sS'required'
p47553
I00
sS'group_name'
p47554
NsasS'name'
p47555
S'/Kernels/DynamicStressDivergenceTensors'
p47556
sa(dp47557
S'description'
p47558
g3
sS'subblocks'
p47559
NsS'parameters'
p47560
(lp47561
(dp47562
S'description'
p47563
S'Add the displacement variables\n'
p47564
sS'cpp_type'
p47565
S'bool'
p47566
sS'default'
p47567
S'0'
p47568
sS'name'
p47569
S'add_variables'
p47570
sS'required'
p47571
I00
sS'group_name'
p47572
Nsa(dp47573
S'name'
p47574
S'additional_generate_output'
p47575
sS'cpp_type'
p47576
S'MultiMooseEnum'
p47577
sS'default'
p47578
g3
sS'description'
p47579
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p47580
sS'required'
p47581
I00
sS'options'
p47582
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p47583
sS'group_name'
p47584
S'Output'
p47585
sa(dp47586
S'description'
p47587
S'alpha parameter for HHT time integration\n'
p47588
sS'cpp_type'
p47589
S'double'
p47590
sS'default'
p47591
S'0'
p47592
sS'name'
p47593
S'alpha'
p47594
sS'required'
p47595
I00
sS'group_name'
p47596
Nsa(dp47597
S'description'
p47598
S'Material property base name\n'
p47599
sS'cpp_type'
p47600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47601
sS'default'
p47602
g3
sS'name'
p47603
S'base_name'
p47604
sS'required'
p47605
I00
sS'group_name'
p47606
Nsa(dp47607
S'description'
p47608
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p47609
sS'cpp_type'
p47610
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47611
sS'default'
p47612
g3
sS'name'
p47613
S'block'
p47614
sS'required'
p47615
I00
sS'group_name'
p47616
S'Advanced'
p47617
sa(dp47618
S'name'
p47619
S'decomposition_method'
p47620
sS'cpp_type'
p47621
S'MooseEnum'
p47622
sS'default'
p47623
S'TaylorExpansion'
p47624
sS'description'
p47625
S'Methods to calculate the finite strain and rotation increments\n'
p47626
sS'required'
p47627
I00
sS'options'
p47628
S'TaylorExpansion EigenSolution'
p47629
sS'group_name'
p47630
Nsa(dp47631
S'description'
p47632
S'The displacement diagonal preconditioner terms\n'
p47633
sS'cpp_type'
p47634
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47635
sS'default'
p47636
g3
sS'name'
p47637
S'diag_save_in'
p47638
sS'required'
p47639
I00
sS'group_name'
p47640
S'Advanced'
p47641
sa(dp47642
S'description'
p47643
S'The nonlinear displacement variables for the problem\n'
p47644
sS'cpp_type'
p47645
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p47646
sS'default'
p47647
g3
sS'name'
p47648
S'displacements'
p47649
sS'required'
p47650
I01
sS'group_name'
p47651
Nsa(dp47652
S'description'
p47653
S'List of eigenstrains to be applied in this strain calculation\n'
p47654
sS'cpp_type'
p47655
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p47656
sS'default'
p47657
g3
sS'name'
p47658
S'eigenstrain_names'
p47659
sS'required'
p47660
I00
sS'group_name'
p47661
Nsa(dp47662
S'name'
p47663
S'generate_output'
p47664
sS'cpp_type'
p47665
S'MultiMooseEnum'
p47666
sS'default'
p47667
g3
sS'description'
p47668
S'Add scalar quantity output for stress and/or strain\n'
p47669
sS'required'
p47670
I00
sS'options'
p47671
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p47672
sS'group_name'
p47673
S'Output'
p47674
sa(dp47675
S'description'
p47676
S'Use incremental or total strain\n'
p47677
sS'cpp_type'
p47678
S'bool'
p47679
sS'default'
p47680
g3
sS'name'
p47681
S'incremental'
p47682
sS'required'
p47683
I00
sS'group_name'
p47684
Nsa(dp47685
S'description'
p47686
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p47687
sS'cpp_type'
p47688
S'FunctionName'
p47689
sS'default'
p47690
S'0'
p47691
sS'name'
p47692
S'out_of_plane_pressure'
p47693
sS'required'
p47694
I00
sS'group_name'
p47695
S'Out-of-plane stress/strain'
p47696
sa(dp47697
S'name'
p47698
S'planar_formulation'
p47699
sS'cpp_type'
p47700
S'MooseEnum'
p47701
sS'default'
p47702
S'NONE'
p47703
sS'description'
p47704
S'Out-of-plane stress/strain formulation\n'
p47705
sS'required'
p47706
I00
sS'options'
p47707
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p47708
sS'group_name'
p47709
S'Out-of-plane stress/strain'
p47710
sa(dp47711
S'description'
p47712
S'Scale factor applied to prescribed pressure\n'
p47713
sS'cpp_type'
p47714
S'double'
p47715
sS'default'
p47716
S'1'
p47717
sS'name'
p47718
S'pressure_factor'
p47719
sS'required'
p47720
I00
sS'group_name'
p47721
S'Out-of-plane stress/strain'
p47722
sa(dp47723
S'description'
p47724
S'The displacement residuals\n'
p47725
sS'cpp_type'
p47726
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47727
sS'default'
p47728
g3
sS'name'
p47729
S'save_in'
p47730
sS'required'
p47731
I00
sS'group_name'
p47732
S'Advanced'
p47733
sa(dp47734
S'description'
p47735
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p47736
sS'cpp_type'
p47737
S'NonlinearVariableName'
p47738
sS'default'
p47739
g3
sS'name'
p47740
S'scalar_out_of_plane_strain'
p47741
sS'required'
p47742
I00
sS'group_name'
p47743
S'Out-of-plane stress/strain'
p47744
sa(dp47745
S'description'
p47746
S'Set to true get the system to equillibrium under gravity by running a quasi-static analysis (by solving Ku = F) in the first time step.\n'
p47747
sS'cpp_type'
p47748
S'bool'
p47749
sS'default'
p47750
S'0'
p47751
sS'name'
p47752
S'static_initialization'
p47753
sS'required'
p47754
I00
sS'group_name'
p47755
Nsa(dp47756
S'name'
p47757
S'strain'
p47758
sS'cpp_type'
p47759
S'MooseEnum'
p47760
sS'default'
p47761
S'SMALL'
p47762
sS'description'
p47763
S'Strain formulation\n'
p47764
sS'required'
p47765
I00
sS'options'
p47766
S'SMALL FINITE'
p47767
sS'group_name'
p47768
Nsa(dp47769
S'description'
p47770
S'The temperature\n'
p47771
sS'cpp_type'
p47772
S'NonlinearVariableName'
p47773
sS'default'
p47774
g3
sS'name'
p47775
S'temp'
p47776
sS'required'
p47777
I00
sS'group_name'
p47778
Nsa(dp47779
S'description'
p47780
S'The temperature\n'
p47781
sS'cpp_type'
p47782
S'NonlinearVariableName'
p47783
sS'default'
p47784
g3
sS'name'
p47785
S'temperature'
p47786
sS'required'
p47787
I00
sS'group_name'
p47788
Nsa(dp47789
S'description'
p47790
S'Whether to use displaced mesh in the kernels\n'
p47791
sS'cpp_type'
p47792
S'bool'
p47793
sS'default'
p47794
S'0'
p47795
sS'name'
p47796
S'use_displaced_mesh'
p47797
sS'required'
p47798
I00
sS'group_name'
p47799
Nsa(dp47800
S'description'
p47801
S'Jacobian for corrotational finite strain\n'
p47802
sS'cpp_type'
p47803
S'bool'
p47804
sS'default'
p47805
S'0'
p47806
sS'name'
p47807
S'use_finite_deform_jacobian'
p47808
sS'required'
p47809
I00
sS'group_name'
p47810
Nsa(dp47811
S'description'
p47812
S'Flag to correct volumetric locking\n'
p47813
sS'cpp_type'
p47814
S'bool'
p47815
sS'default'
p47816
S'0'
p47817
sS'name'
p47818
S'volumetric_locking_correction'
p47819
sS'required'
p47820
I00
sS'group_name'
p47821
Nsa(dp47822
S'description'
p47823
S'Name of material property or a constant real number defining the zeta parameter for the Rayleigh damping.\n'
p47824
sS'cpp_type'
p47825
S'MaterialPropertyName'
p47826
sS'default'
p47827
S'0'
p47828
sS'name'
p47829
S'zeta'
p47830
sS'required'
p47831
I00
sS'group_name'
p47832
NsasS'name'
p47833
S'/Kernels/DynamicTensorMechanics'
p47834
sa(dp47835
S'description'
p47836
S'Generalized Plane Strain kernel to provide contribution of the out-of-plane strain to other kernels\n'
p47837
sS'subblocks'
p47838
NsS'parameters'
p47839
(lp47840
(dp47841
S'description'
p47842
S'Material property base name\n'
p47843
sS'cpp_type'
p47844
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47845
sS'default'
p47846
g3
sS'name'
p47847
S'base_name'
p47848
sS'required'
p47849
I00
sS'group_name'
p47850
Nsa(dp47851
S'description'
p47852
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47853
sS'cpp_type'
p47854
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47855
sS'default'
p47856
g3
sS'name'
p47857
S'block'
p47858
sS'required'
p47859
I00
sS'group_name'
p47860
Nsa(dp47861
S'description'
p47862
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47863
sS'cpp_type'
p47864
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47865
sS'default'
p47866
g3
sS'name'
p47867
S'control_tags'
p47868
sS'required'
p47869
I00
sS'group_name'
p47870
S'Advanced'
p47871
sa(dp47872
S'description'
p47873
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47874
sS'cpp_type'
p47875
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47876
sS'default'
p47877
g3
sS'name'
p47878
S'diag_save_in'
p47879
sS'required'
p47880
I00
sS'group_name'
p47881
S'Advanced'
p47882
sa(dp47883
S'description'
p47884
S'Variable for the displacements\n'
p47885
sS'cpp_type'
p47886
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p47887
sS'default'
p47888
g3
sS'name'
p47889
S'displacements'
p47890
sS'required'
p47891
I01
sS'group_name'
p47892
Nsa(dp47893
S'description'
p47894
S'Whether or not this kernel will be used as an eigen kernel\n'
p47895
sS'cpp_type'
p47896
S'bool'
p47897
sS'default'
p47898
S'0'
p47899
sS'name'
p47900
S'eigen_kernel'
p47901
sS'required'
p47902
I00
sS'group_name'
p47903
Nsa(dp47904
S'description'
p47905
S'List of eigenstrains to be applied in this strain calculation\n'
p47906
sS'cpp_type'
p47907
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p47908
sS'default'
p47909
g3
sS'name'
p47910
S'eigenstrain_names'
p47911
sS'required'
p47912
I00
sS'group_name'
p47913
Nsa(dp47914
S'description'
p47915
S'Set the enabled status of the MooseObject.\n'
p47916
sS'cpp_type'
p47917
S'bool'
p47918
sS'default'
p47919
S'1'
p47920
sS'name'
p47921
S'enable'
p47922
sS'required'
p47923
I00
sS'group_name'
p47924
S'Advanced'
p47925
sa(dp47926
S'description'
p47927
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47928
sS'cpp_type'
p47929
S'bool'
p47930
sS'default'
p47931
S'1'
p47932
sS'name'
p47933
S'implicit'
p47934
sS'required'
p47935
I00
sS'group_name'
p47936
S'Advanced'
p47937
sa(dp47938
S'description'
p47939
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47940
sS'cpp_type'
p47941
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47942
sS'default'
p47943
g3
sS'name'
p47944
S'save_in'
p47945
sS'required'
p47946
I00
sS'group_name'
p47947
S'Advanced'
p47948
sa(dp47949
S'description'
p47950
S'Scalar variable for generalized plane strain\n'
p47951
sS'cpp_type'
p47952
S'std::vector<VariableName>'
p47953
sS'default'
p47954
g3
sS'name'
p47955
S'scalar_out_of_plane_strain'
p47956
sS'required'
p47957
I00
sS'group_name'
p47958
Nsa(dp47959
S'description'
p47960
S'The seed for the master random number generator\n'
p47961
sS'cpp_type'
p47962
S'unsigned int'
p47963
sS'default'
p47964
S'0'
p47965
sS'name'
p47966
S'seed'
p47967
sS'required'
p47968
I00
sS'group_name'
p47969
S'Advanced'
p47970
sa(dp47971
S'description'
p47972
S'Variable for the temperature\n'
p47973
sS'cpp_type'
p47974
S'NonlinearVariableName'
p47975
sS'default'
p47976
g3
sS'name'
p47977
S'temperature'
p47978
sS'required'
p47979
I00
sS'group_name'
p47980
Nsa(dp47981
S'description'
p47982
g3
sS'cpp_type'
p47983
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47984
sS'default'
p47985
S'GeneralizedPlaneStrainOffDiag'
p47986
sS'name'
p47987
S'type'
p47988
sS'required'
p47989
I00
sS'group_name'
p47990
Nsa(dp47991
S'description'
p47992
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47993
sS'cpp_type'
p47994
S'bool'
p47995
sS'default'
p47996
S'0'
p47997
sS'name'
p47998
S'use_displaced_mesh'
p47999
sS'required'
p48000
I00
sS'group_name'
p48001
S'Advanced'
p48002
sa(dp48003
S'description'
p48004
S'The name of the variable that this Kernel operates on\n'
p48005
sS'cpp_type'
p48006
S'NonlinearVariableName'
p48007
sS'default'
p48008
g3
sS'name'
p48009
S'variable'
p48010
sS'required'
p48011
I01
sS'group_name'
p48012
NsasS'name'
p48013
S'/Kernels/GeneralizedPlaneStrainOffDiag'
p48014
sa(dp48015
S'description'
p48016
S'Set the kernel variable to a specified component of the gradient of a coupled variable.\n'
p48017
sS'subblocks'
p48018
NsS'parameters'
p48019
(lp48020
(dp48021
S'description'
p48022
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48023
sS'cpp_type'
p48024
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48025
sS'default'
p48026
g3
sS'name'
p48027
S'block'
p48028
sS'required'
p48029
I00
sS'group_name'
p48030
Nsa(dp48031
S'description'
p48032
S'Component of the gradient of the coupled variable v\n'
p48033
sS'cpp_type'
p48034
S'unsigned int'
p48035
sS'default'
p48036
g3
sS'name'
p48037
S'component'
p48038
sS'required'
p48039
I01
sS'group_name'
p48040
Nsa(dp48041
S'description'
p48042
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48043
sS'cpp_type'
p48044
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48045
sS'default'
p48046
g3
sS'name'
p48047
S'control_tags'
p48048
sS'required'
p48049
I00
sS'group_name'
p48050
S'Advanced'
p48051
sa(dp48052
S'description'
p48053
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48054
sS'cpp_type'
p48055
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48056
sS'default'
p48057
g3
sS'name'
p48058
S'diag_save_in'
p48059
sS'required'
p48060
I00
sS'group_name'
p48061
S'Advanced'
p48062
sa(dp48063
S'description'
p48064
S'Whether or not this kernel will be used as an eigen kernel\n'
p48065
sS'cpp_type'
p48066
S'bool'
p48067
sS'default'
p48068
S'0'
p48069
sS'name'
p48070
S'eigen_kernel'
p48071
sS'required'
p48072
I00
sS'group_name'
p48073
Nsa(dp48074
S'description'
p48075
S'Set the enabled status of the MooseObject.\n'
p48076
sS'cpp_type'
p48077
S'bool'
p48078
sS'default'
p48079
S'1'
p48080
sS'name'
p48081
S'enable'
p48082
sS'required'
p48083
I00
sS'group_name'
p48084
S'Advanced'
p48085
sa(dp48086
S'description'
p48087
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48088
sS'cpp_type'
p48089
S'bool'
p48090
sS'default'
p48091
S'1'
p48092
sS'name'
p48093
S'implicit'
p48094
sS'required'
p48095
I00
sS'group_name'
p48096
S'Advanced'
p48097
sa(dp48098
S'description'
p48099
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48100
sS'cpp_type'
p48101
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48102
sS'default'
p48103
g3
sS'name'
p48104
S'save_in'
p48105
sS'required'
p48106
I00
sS'group_name'
p48107
S'Advanced'
p48108
sa(dp48109
S'description'
p48110
S'The seed for the master random number generator\n'
p48111
sS'cpp_type'
p48112
S'unsigned int'
p48113
sS'default'
p48114
S'0'
p48115
sS'name'
p48116
S'seed'
p48117
sS'required'
p48118
I00
sS'group_name'
p48119
S'Advanced'
p48120
sa(dp48121
S'description'
p48122
g3
sS'cpp_type'
p48123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48124
sS'default'
p48125
S'GradientComponent'
p48126
sS'name'
p48127
S'type'
p48128
sS'required'
p48129
I00
sS'group_name'
p48130
Nsa(dp48131
S'description'
p48132
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48133
sS'cpp_type'
p48134
S'bool'
p48135
sS'default'
p48136
S'0'
p48137
sS'name'
p48138
S'use_displaced_mesh'
p48139
sS'required'
p48140
I00
sS'group_name'
p48141
S'Advanced'
p48142
sa(dp48143
S'description'
p48144
S'Coupled variable to match gradient component of\n'
p48145
sS'cpp_type'
p48146
S'std::vector<VariableName>'
p48147
sS'default'
p48148
g3
sS'name'
p48149
S'v'
p48150
sS'required'
p48151
I01
sS'group_name'
p48152
Nsa(dp48153
S'description'
p48154
S'The name of the variable that this Kernel operates on\n'
p48155
sS'cpp_type'
p48156
S'NonlinearVariableName'
p48157
sS'default'
p48158
g3
sS'name'
p48159
S'variable'
p48160
sS'required'
p48161
I01
sS'group_name'
p48162
NsasS'name'
p48163
S'/Kernels/GradientComponent'
p48164
sa(dp48165
S'description'
p48166
S'Apply gravity. Value is in units of acceleration.\n'
p48167
sS'subblocks'
p48168
NsS'parameters'
p48169
(lp48170
(dp48171
S'description'
p48172
S'alpha parameter required for HHT time integration scheme\n'
p48173
sS'cpp_type'
p48174
S'double'
p48175
sS'default'
p48176
S'0'
p48177
sS'name'
p48178
S'alpha'
p48179
sS'required'
p48180
I00
sS'group_name'
p48181
Nsa(dp48182
S'description'
p48183
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48184
sS'cpp_type'
p48185
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48186
sS'default'
p48187
g3
sS'name'
p48188
S'block'
p48189
sS'required'
p48190
I00
sS'group_name'
p48191
Nsa(dp48192
S'description'
p48193
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48194
sS'cpp_type'
p48195
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48196
sS'default'
p48197
g3
sS'name'
p48198
S'control_tags'
p48199
sS'required'
p48200
I00
sS'group_name'
p48201
S'Advanced'
p48202
sa(dp48203
S'description'
p48204
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48205
sS'cpp_type'
p48206
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48207
sS'default'
p48208
g3
sS'name'
p48209
S'diag_save_in'
p48210
sS'required'
p48211
I00
sS'group_name'
p48212
S'Advanced'
p48213
sa(dp48214
S'description'
p48215
S'Whether or not this kernel will be used as an eigen kernel\n'
p48216
sS'cpp_type'
p48217
S'bool'
p48218
sS'default'
p48219
S'0'
p48220
sS'name'
p48221
S'eigen_kernel'
p48222
sS'required'
p48223
I00
sS'group_name'
p48224
Nsa(dp48225
S'description'
p48226
S'Set the enabled status of the MooseObject.\n'
p48227
sS'cpp_type'
p48228
S'bool'
p48229
sS'default'
p48230
S'1'
p48231
sS'name'
p48232
S'enable'
p48233
sS'required'
p48234
I00
sS'group_name'
p48235
S'Advanced'
p48236
sa(dp48237
S'description'
p48238
S'A function that describes the gravitational force\n'
p48239
sS'cpp_type'
p48240
S'FunctionName'
p48241
sS'default'
p48242
S'1'
p48243
sS'name'
p48244
S'function'
p48245
sS'required'
p48246
I00
sS'group_name'
p48247
Nsa(dp48248
S'description'
p48249
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48250
sS'cpp_type'
p48251
S'bool'
p48252
sS'default'
p48253
S'1'
p48254
sS'name'
p48255
S'implicit'
p48256
sS'required'
p48257
I00
sS'group_name'
p48258
S'Advanced'
p48259
sa(dp48260
S'description'
p48261
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48262
sS'cpp_type'
p48263
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48264
sS'default'
p48265
g3
sS'name'
p48266
S'save_in'
p48267
sS'required'
p48268
I00
sS'group_name'
p48269
S'Advanced'
p48270
sa(dp48271
S'description'
p48272
S'The seed for the master random number generator\n'
p48273
sS'cpp_type'
p48274
S'unsigned int'
p48275
sS'default'
p48276
S'0'
p48277
sS'name'
p48278
S'seed'
p48279
sS'required'
p48280
I00
sS'group_name'
p48281
S'Advanced'
p48282
sa(dp48283
S'description'
p48284
g3
sS'cpp_type'
p48285
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48286
sS'default'
p48287
S'Gravity'
p48288
sS'name'
p48289
S'type'
p48290
sS'required'
p48291
I00
sS'group_name'
p48292
Nsa(dp48293
S'description'
p48294
S'Displaced mesh defaults to true\n'
p48295
sS'cpp_type'
p48296
S'bool'
p48297
sS'default'
p48298
S'1'
p48299
sS'name'
p48300
S'use_displaced_mesh'
p48301
sS'required'
p48302
I00
sS'group_name'
p48303
S'Advanced'
p48304
sa(dp48305
S'description'
p48306
g3
sS'cpp_type'
p48307
S'double'
p48308
sS'default'
p48309
S'0'
p48310
sS'name'
p48311
S'value'
p48312
sS'required'
p48313
I00
sS'group_name'
p48314
Nsa(dp48315
S'description'
p48316
S'The name of the variable that this Kernel operates on\n'
p48317
sS'cpp_type'
p48318
S'NonlinearVariableName'
p48319
sS'default'
p48320
g3
sS'name'
p48321
S'variable'
p48322
sS'required'
p48323
I01
sS'group_name'
p48324
NsasS'name'
p48325
S'/Kernels/Gravity'
p48326
sa(dp48327
S'description'
p48328
g3
sS'subblocks'
p48329
NsS'parameters'
p48330
(lp48331
(dp48332
S'description'
p48333
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48334
sS'cpp_type'
p48335
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48336
sS'default'
p48337
g3
sS'name'
p48338
S'block'
p48339
sS'required'
p48340
I00
sS'group_name'
p48341
Nsa(dp48342
S'description'
p48343
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48344
sS'cpp_type'
p48345
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48346
sS'default'
p48347
g3
sS'name'
p48348
S'control_tags'
p48349
sS'required'
p48350
I00
sS'group_name'
p48351
S'Advanced'
p48352
sa(dp48353
S'description'
p48354
S'The name of the coupled variable, if one is used in the kernel\n'
p48355
sS'cpp_type'
p48356
S'std::vector<VariableName>'
p48357
sS'default'
p48358
g3
sS'name'
p48359
S'coupled_var'
p48360
sS'required'
p48361
I00
sS'group_name'
p48362
Nsa(dp48363
S'description'
p48364
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48365
sS'cpp_type'
p48366
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48367
sS'default'
p48368
g3
sS'name'
p48369
S'diag_save_in'
p48370
sS'required'
p48371
I00
sS'group_name'
p48372
S'Advanced'
p48373
sa(dp48374
S'description'
p48375
S'Whether or not this kernel will be used as an eigen kernel\n'
p48376
sS'cpp_type'
p48377
S'bool'
p48378
sS'default'
p48379
S'0'
p48380
sS'name'
p48381
S'eigen_kernel'
p48382
sS'required'
p48383
I00
sS'group_name'
p48384
Nsa(dp48385
S'description'
p48386
S'Set the enabled status of the MooseObject.\n'
p48387
sS'cpp_type'
p48388
S'bool'
p48389
sS'default'
p48390
S'1'
p48391
sS'name'
p48392
S'enable'
p48393
sS'required'
p48394
I00
sS'group_name'
p48395
S'Advanced'
p48396
sa(dp48397
S'description'
p48398
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48399
sS'cpp_type'
p48400
S'bool'
p48401
sS'default'
p48402
S'1'
p48403
sS'name'
p48404
S'implicit'
p48405
sS'required'
p48406
I00
sS'group_name'
p48407
S'Advanced'
p48408
sa(dp48409
S'description'
p48410
S'If the kernel is positive, this is true, if negative, it is false\n'
p48411
sS'cpp_type'
p48412
S'bool'
p48413
sS'default'
p48414
g3
sS'name'
p48415
S'positive'
p48416
sS'required'
p48417
I01
sS'group_name'
p48418
Nsa(dp48419
S'description'
p48420
S'Name of material property to be used in the kernel\n'
p48421
sS'cpp_type'
p48422
S'MaterialPropertyName'
p48423
sS'default'
p48424
g3
sS'name'
p48425
S'prop_name'
p48426
sS'required'
p48427
I01
sS'group_name'
p48428
Nsa(dp48429
S'description'
p48430
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48431
sS'cpp_type'
p48432
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48433
sS'default'
p48434
g3
sS'name'
p48435
S'save_in'
p48436
sS'required'
p48437
I00
sS'group_name'
p48438
S'Advanced'
p48439
sa(dp48440
S'description'
p48441
S'The seed for the master random number generator\n'
p48442
sS'cpp_type'
p48443
S'unsigned int'
p48444
sS'default'
p48445
S'0'
p48446
sS'name'
p48447
S'seed'
p48448
sS'required'
p48449
I00
sS'group_name'
p48450
S'Advanced'
p48451
sa(dp48452
S'description'
p48453
g3
sS'cpp_type'
p48454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48455
sS'default'
p48456
S'HHPFCRFF'
p48457
sS'name'
p48458
S'type'
p48459
sS'required'
p48460
I00
sS'group_name'
p48461
Nsa(dp48462
S'description'
p48463
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48464
sS'cpp_type'
p48465
S'bool'
p48466
sS'default'
p48467
S'0'
p48468
sS'name'
p48469
S'use_displaced_mesh'
p48470
sS'required'
p48471
I00
sS'group_name'
p48472
S'Advanced'
p48473
sa(dp48474
S'description'
p48475
S'The name of the variable that this Kernel operates on\n'
p48476
sS'cpp_type'
p48477
S'NonlinearVariableName'
p48478
sS'default'
p48479
g3
sS'name'
p48480
S'variable'
p48481
sS'required'
p48482
I01
sS'group_name'
p48483
NsasS'name'
p48484
S'/Kernels/HHPFCRFF'
p48485
sa(dp48486
S'description'
p48487
g3
sS'subblocks'
p48488
NsS'parameters'
p48489
(lp48490
(dp48491
S'description'
p48492
S'Base name for the complex L variables\n'
p48493
sS'cpp_type'
p48494
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48495
sS'default'
p48496
g3
sS'name'
p48497
S'L_name_base'
p48498
sS'required'
p48499
I01
sS'group_name'
p48500
Nsa(dp48501
S'name'
p48502
S'log_approach'
p48503
sS'cpp_type'
p48504
S'MooseEnum'
p48505
sS'default'
p48506
g3
sS'description'
p48507
S'Which approach will be used to handle the natural log\n'
p48508
sS'required'
p48509
I01
sS'options'
p48510
S'tolerance cancelation expansion'
p48511
sS'group_name'
p48512
Nsa(dp48513
S'description'
p48514
S'The mobility used for n in this model\n'
p48515
sS'cpp_type'
p48516
S'MaterialPropertyName'
p48517
sS'default'
p48518
S'M'
p48519
sS'name'
p48520
S'mob_name'
p48521
sS'required'
p48522
I00
sS'group_name'
p48523
Nsa(dp48524
S'description'
p48525
S'Number of terms used in the Taylor expansion of the natural log term\n'
p48526
sS'cpp_type'
p48527
S'double'
p48528
sS'default'
p48529
S'4'
p48530
sS'name'
p48531
S'n_exp_terms'
p48532
sS'required'
p48533
I00
sS'group_name'
p48534
Nsa(dp48535
S'description'
p48536
S'Variable name used for the n variable\n'
p48537
sS'cpp_type'
p48538
S'VariableName'
p48539
sS'default'
p48540
g3
sS'name'
p48541
S'n_name'
p48542
sS'required'
p48543
I01
sS'group_name'
p48544
Nsa(dp48545
S'description'
p48546
S'specifies the number of complex L variables will be solved for\n'
p48547
sS'cpp_type'
p48548
S'unsigned int'
p48549
sS'default'
p48550
g3
sS'name'
p48551
S'num_L'
p48552
sS'required'
p48553
I01
sS'group_name'
p48554
Nsa(dp48555
S'description'
p48556
S'Tolerance used when the tolerance approach is chosen\n'
p48557
sS'cpp_type'
p48558
S'double'
p48559
sS'default'
p48560
S'1e-09'
p48561
sS'name'
p48562
S'tol'
p48563
sS'required'
p48564
I00
sS'group_name'
p48565
Nsa(dp48566
S'description'
p48567
S'Whether to use displaced mesh in the kernels\n'
p48568
sS'cpp_type'
p48569
S'bool'
p48570
sS'default'
p48571
S'0'
p48572
sS'name'
p48573
S'use_displaced_mesh'
p48574
sS'required'
p48575
I00
sS'group_name'
p48576
NsasS'name'
p48577
S'/Kernels/HHPFCRFFSplitKernel'
p48578
sa(dp48579
S'description'
p48580
S'Calculates the residual for the interial force (M*accel) and the contribution of mass dependent Rayleigh damping and HHT time integration scheme [eta*M*((1+alpha)vel-alpha*vel_old)]\n'
p48581
sS'subblocks'
p48582
NsS'parameters'
p48583
(lp48584
(dp48585
S'description'
p48586
S'acceleration variable\n'
p48587
sS'cpp_type'
p48588
S'std::vector<VariableName>'
p48589
sS'default'
p48590
g3
sS'name'
p48591
S'acceleration'
p48592
sS'required'
p48593
I01
sS'group_name'
p48594
Nsa(dp48595
S'description'
p48596
S'alpha parameter for mass dependent numerical damping induced by HHT time integration scheme\n'
p48597
sS'cpp_type'
p48598
S'double'
p48599
sS'default'
p48600
S'0'
p48601
sS'name'
p48602
S'alpha'
p48603
sS'required'
p48604
I00
sS'group_name'
p48605
Nsa(dp48606
S'description'
p48607
S'beta parameter for Newmark Time integration\n'
p48608
sS'cpp_type'
p48609
S'double'
p48610
sS'default'
p48611
g3
sS'name'
p48612
S'beta'
p48613
sS'required'
p48614
I01
sS'group_name'
p48615
Nsa(dp48616
S'description'
p48617
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48618
sS'cpp_type'
p48619
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48620
sS'default'
p48621
g3
sS'name'
p48622
S'block'
p48623
sS'required'
p48624
I00
sS'group_name'
p48625
Nsa(dp48626
S'description'
p48627
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48628
sS'cpp_type'
p48629
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48630
sS'default'
p48631
g3
sS'name'
p48632
S'control_tags'
p48633
sS'required'
p48634
I00
sS'group_name'
p48635
S'Advanced'
p48636
sa(dp48637
S'description'
p48638
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48639
sS'cpp_type'
p48640
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48641
sS'default'
p48642
g3
sS'name'
p48643
S'diag_save_in'
p48644
sS'required'
p48645
I00
sS'group_name'
p48646
S'Advanced'
p48647
sa(dp48648
S'description'
p48649
S'Whether or not this kernel will be used as an eigen kernel\n'
p48650
sS'cpp_type'
p48651
S'bool'
p48652
sS'default'
p48653
S'0'
p48654
sS'name'
p48655
S'eigen_kernel'
p48656
sS'required'
p48657
I00
sS'group_name'
p48658
Nsa(dp48659
S'description'
p48660
S'Set the enabled status of the MooseObject.\n'
p48661
sS'cpp_type'
p48662
S'bool'
p48663
sS'default'
p48664
S'1'
p48665
sS'name'
p48666
S'enable'
p48667
sS'required'
p48668
I00
sS'group_name'
p48669
S'Advanced'
p48670
sa(dp48671
S'description'
p48672
S'Name of material property or a constant real number defining the eta parameter for the Rayleigh damping.\n'
p48673
sS'cpp_type'
p48674
S'MaterialPropertyName'
p48675
sS'default'
p48676
S'0'
p48677
sS'name'
p48678
S'eta'
p48679
sS'required'
p48680
I00
sS'group_name'
p48681
Nsa(dp48682
S'description'
p48683
S'gamma parameter for Newmark Time integration\n'
p48684
sS'cpp_type'
p48685
S'double'
p48686
sS'default'
p48687
g3
sS'name'
p48688
S'gamma'
p48689
sS'required'
p48690
I01
sS'group_name'
p48691
Nsa(dp48692
S'description'
p48693
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48694
sS'cpp_type'
p48695
S'bool'
p48696
sS'default'
p48697
S'1'
p48698
sS'name'
p48699
S'implicit'
p48700
sS'required'
p48701
I00
sS'group_name'
p48702
S'Advanced'
p48703
sa(dp48704
S'description'
p48705
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48706
sS'cpp_type'
p48707
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48708
sS'default'
p48709
g3
sS'name'
p48710
S'save_in'
p48711
sS'required'
p48712
I00
sS'group_name'
p48713
S'Advanced'
p48714
sa(dp48715
S'description'
p48716
S'The seed for the master random number generator\n'
p48717
sS'cpp_type'
p48718
S'unsigned int'
p48719
sS'default'
p48720
S'0'
p48721
sS'name'
p48722
S'seed'
p48723
sS'required'
p48724
I00
sS'group_name'
p48725
S'Advanced'
p48726
sa(dp48727
S'description'
p48728
g3
sS'cpp_type'
p48729
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48730
sS'default'
p48731
S'InertialForce'
p48732
sS'name'
p48733
S'type'
p48734
sS'required'
p48735
I00
sS'group_name'
p48736
Nsa(dp48737
S'description'
p48738
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48739
sS'cpp_type'
p48740
S'bool'
p48741
sS'default'
p48742
S'1'
p48743
sS'name'
p48744
S'use_displaced_mesh'
p48745
sS'required'
p48746
I00
sS'group_name'
p48747
S'Advanced'
p48748
sa(dp48749
S'description'
p48750
S'The name of the variable that this Kernel operates on\n'
p48751
sS'cpp_type'
p48752
S'NonlinearVariableName'
p48753
sS'default'
p48754
g3
sS'name'
p48755
S'variable'
p48756
sS'required'
p48757
I01
sS'group_name'
p48758
Nsa(dp48759
S'description'
p48760
S'velocity variable\n'
p48761
sS'cpp_type'
p48762
S'std::vector<VariableName>'
p48763
sS'default'
p48764
g3
sS'name'
p48765
S'velocity'
p48766
sS'required'
p48767
I01
sS'group_name'
p48768
NsasS'name'
p48769
S'/Kernels/InertialForce'
p48770
sa(dp48771
S'description'
p48772
S'KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n'
p48773
sS'subblocks'
p48774
NsS'parameters'
p48775
(lp48776
(dp48777
S'description'
p48778
S'Vector of arguments of the mobility\n'
p48779
sS'cpp_type'
p48780
S'std::vector<VariableName>'
p48781
sS'default'
p48782
g3
sS'name'
p48783
S'args'
p48784
sS'required'
p48785
I00
sS'group_name'
p48786
Nsa(dp48787
S'description'
p48788
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48789
sS'cpp_type'
p48790
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48791
sS'default'
p48792
g3
sS'name'
p48793
S'block'
p48794
sS'required'
p48795
I00
sS'group_name'
p48796
Nsa(dp48797
S'description'
p48798
S'a-phase concentration\n'
p48799
sS'cpp_type'
p48800
S'std::vector<VariableName>'
p48801
sS'default'
p48802
g3
sS'name'
p48803
S'ca'
p48804
sS'required'
p48805
I01
sS'group_name'
p48806
Nsa(dp48807
S'description'
p48808
S'b-phase concentration\n'
p48809
sS'cpp_type'
p48810
S'std::vector<VariableName>'
p48811
sS'default'
p48812
g3
sS'name'
p48813
S'cb'
p48814
sS'required'
p48815
I01
sS'group_name'
p48816
Nsa(dp48817
S'description'
p48818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48819
sS'cpp_type'
p48820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48821
sS'default'
p48822
g3
sS'name'
p48823
S'control_tags'
p48824
sS'required'
p48825
I00
sS'group_name'
p48826
S'Advanced'
p48827
sa(dp48828
S'description'
p48829
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48830
sS'cpp_type'
p48831
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48832
sS'default'
p48833
g3
sS'name'
p48834
S'diag_save_in'
p48835
sS'required'
p48836
I00
sS'group_name'
p48837
S'Advanced'
p48838
sa(dp48839
S'description'
p48840
S'Whether or not this kernel will be used as an eigen kernel\n'
p48841
sS'cpp_type'
p48842
S'bool'
p48843
sS'default'
p48844
S'0'
p48845
sS'name'
p48846
S'eigen_kernel'
p48847
sS'required'
p48848
I00
sS'group_name'
p48849
Nsa(dp48850
S'description'
p48851
S'Set the enabled status of the MooseObject.\n'
p48852
sS'cpp_type'
p48853
S'bool'
p48854
sS'default'
p48855
S'1'
p48856
sS'name'
p48857
S'enable'
p48858
sS'required'
p48859
I00
sS'group_name'
p48860
S'Advanced'
p48861
sa(dp48862
S'description'
p48863
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p48864
sS'cpp_type'
p48865
S'MaterialPropertyName'
p48866
sS'default'
p48867
g3
sS'name'
p48868
S'fa_name'
p48869
sS'required'
p48870
I01
sS'group_name'
p48871
Nsa(dp48872
S'description'
p48873
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p48874
sS'cpp_type'
p48875
S'MaterialPropertyName'
p48876
sS'default'
p48877
g3
sS'name'
p48878
S'fb_name'
p48879
sS'required'
p48880
I01
sS'group_name'
p48881
Nsa(dp48882
S'description'
p48883
S'Base name for the switching function h(eta)\n'
p48884
sS'cpp_type'
p48885
S'MaterialPropertyName'
p48886
sS'default'
p48887
S'h'
p48888
sS'name'
p48889
S'h_name'
p48890
sS'required'
p48891
I00
sS'group_name'
p48892
Nsa(dp48893
S'description'
p48894
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48895
sS'cpp_type'
p48896
S'bool'
p48897
sS'default'
p48898
S'1'
p48899
sS'name'
p48900
S'implicit'
p48901
sS'required'
p48902
I00
sS'group_name'
p48903
S'Advanced'
p48904
sa(dp48905
S'description'
p48906
S'The mobility used with the kernel\n'
p48907
sS'cpp_type'
p48908
S'MaterialPropertyName'
p48909
sS'default'
p48910
S'L'
p48911
sS'name'
p48912
S'mob_name'
p48913
sS'required'
p48914
I00
sS'group_name'
p48915
Nsa(dp48916
S'description'
p48917
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48918
sS'cpp_type'
p48919
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48920
sS'default'
p48921
g3
sS'name'
p48922
S'save_in'
p48923
sS'required'
p48924
I00
sS'group_name'
p48925
S'Advanced'
p48926
sa(dp48927
S'description'
p48928
S'The seed for the master random number generator\n'
p48929
sS'cpp_type'
p48930
S'unsigned int'
p48931
sS'default'
p48932
S'0'
p48933
sS'name'
p48934
S'seed'
p48935
sS'required'
p48936
I00
sS'group_name'
p48937
S'Advanced'
p48938
sa(dp48939
S'description'
p48940
g3
sS'cpp_type'
p48941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48942
sS'default'
p48943
S'KKSACBulkC'
p48944
sS'name'
p48945
S'type'
p48946
sS'required'
p48947
I00
sS'group_name'
p48948
Nsa(dp48949
S'description'
p48950
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48951
sS'cpp_type'
p48952
S'bool'
p48953
sS'default'
p48954
S'0'
p48955
sS'name'
p48956
S'use_displaced_mesh'
p48957
sS'required'
p48958
I00
sS'group_name'
p48959
S'Advanced'
p48960
sa(dp48961
S'description'
p48962
S'The name of the variable that this Kernel operates on\n'
p48963
sS'cpp_type'
p48964
S'NonlinearVariableName'
p48965
sS'default'
p48966
g3
sS'name'
p48967
S'variable'
p48968
sS'required'
p48969
I01
sS'group_name'
p48970
NsasS'name'
p48971
S'/Kernels/KKSACBulkC'
p48972
sa(dp48973
S'description'
p48974
S'KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n'
p48975
sS'subblocks'
p48976
NsS'parameters'
p48977
(lp48978
(dp48979
S'description'
p48980
S'Vector of arguments of the mobility\n'
p48981
sS'cpp_type'
p48982
S'std::vector<VariableName>'
p48983
sS'default'
p48984
g3
sS'name'
p48985
S'args'
p48986
sS'required'
p48987
I00
sS'group_name'
p48988
Nsa(dp48989
S'description'
p48990
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48991
sS'cpp_type'
p48992
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48993
sS'default'
p48994
g3
sS'name'
p48995
S'block'
p48996
sS'required'
p48997
I00
sS'group_name'
p48998
Nsa(dp48999
S'description'
p49000
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49001
sS'cpp_type'
p49002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49003
sS'default'
p49004
g3
sS'name'
p49005
S'control_tags'
p49006
sS'required'
p49007
I00
sS'group_name'
p49008
S'Advanced'
p49009
sa(dp49010
S'description'
p49011
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49012
sS'cpp_type'
p49013
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49014
sS'default'
p49015
g3
sS'name'
p49016
S'diag_save_in'
p49017
sS'required'
p49018
I00
sS'group_name'
p49019
S'Advanced'
p49020
sa(dp49021
S'description'
p49022
S'Whether or not this kernel will be used as an eigen kernel\n'
p49023
sS'cpp_type'
p49024
S'bool'
p49025
sS'default'
p49026
S'0'
p49027
sS'name'
p49028
S'eigen_kernel'
p49029
sS'required'
p49030
I00
sS'group_name'
p49031
Nsa(dp49032
S'description'
p49033
S'Set the enabled status of the MooseObject.\n'
p49034
sS'cpp_type'
p49035
S'bool'
p49036
sS'default'
p49037
S'1'
p49038
sS'name'
p49039
S'enable'
p49040
sS'required'
p49041
I00
sS'group_name'
p49042
S'Advanced'
p49043
sa(dp49044
S'description'
p49045
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p49046
sS'cpp_type'
p49047
S'MaterialPropertyName'
p49048
sS'default'
p49049
g3
sS'name'
p49050
S'fa_name'
p49051
sS'required'
p49052
I01
sS'group_name'
p49053
Nsa(dp49054
S'description'
p49055
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p49056
sS'cpp_type'
p49057
S'MaterialPropertyName'
p49058
sS'default'
p49059
g3
sS'name'
p49060
S'fb_name'
p49061
sS'required'
p49062
I01
sS'group_name'
p49063
Nsa(dp49064
S'description'
p49065
S'Base name for the double well function g(eta)\n'
p49066
sS'cpp_type'
p49067
S'MaterialPropertyName'
p49068
sS'default'
p49069
S'g'
p49070
sS'name'
p49071
S'g_name'
p49072
sS'required'
p49073
I00
sS'group_name'
p49074
Nsa(dp49075
S'description'
p49076
S'Base name for the switching function h(eta)\n'
p49077
sS'cpp_type'
p49078
S'MaterialPropertyName'
p49079
sS'default'
p49080
S'h'
p49081
sS'name'
p49082
S'h_name'
p49083
sS'required'
p49084
I00
sS'group_name'
p49085
Nsa(dp49086
S'description'
p49087
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49088
sS'cpp_type'
p49089
S'bool'
p49090
sS'default'
p49091
S'1'
p49092
sS'name'
p49093
S'implicit'
p49094
sS'required'
p49095
I00
sS'group_name'
p49096
S'Advanced'
p49097
sa(dp49098
S'description'
p49099
S'The mobility used with the kernel\n'
p49100
sS'cpp_type'
p49101
S'MaterialPropertyName'
p49102
sS'default'
p49103
S'L'
p49104
sS'name'
p49105
S'mob_name'
p49106
sS'required'
p49107
I00
sS'group_name'
p49108
Nsa(dp49109
S'description'
p49110
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49111
sS'cpp_type'
p49112
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49113
sS'default'
p49114
g3
sS'name'
p49115
S'save_in'
p49116
sS'required'
p49117
I00
sS'group_name'
p49118
S'Advanced'
p49119
sa(dp49120
S'description'
p49121
S'The seed for the master random number generator\n'
p49122
sS'cpp_type'
p49123
S'unsigned int'
p49124
sS'default'
p49125
S'0'
p49126
sS'name'
p49127
S'seed'
p49128
sS'required'
p49129
I00
sS'group_name'
p49130
S'Advanced'
p49131
sa(dp49132
S'description'
p49133
g3
sS'cpp_type'
p49134
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49135
sS'default'
p49136
S'KKSACBulkF'
p49137
sS'name'
p49138
S'type'
p49139
sS'required'
p49140
I00
sS'group_name'
p49141
Nsa(dp49142
S'description'
p49143
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49144
sS'cpp_type'
p49145
S'bool'
p49146
sS'default'
p49147
S'0'
p49148
sS'name'
p49149
S'use_displaced_mesh'
p49150
sS'required'
p49151
I00
sS'group_name'
p49152
S'Advanced'
p49153
sa(dp49154
S'description'
p49155
S'The name of the variable that this Kernel operates on\n'
p49156
sS'cpp_type'
p49157
S'NonlinearVariableName'
p49158
sS'default'
p49159
g3
sS'name'
p49160
S'variable'
p49161
sS'required'
p49162
I01
sS'group_name'
p49163
Nsa(dp49164
S'description'
p49165
S'Double well height parameter\n'
p49166
sS'cpp_type'
p49167
S'double'
p49168
sS'default'
p49169
g3
sS'name'
p49170
S'w'
p49171
sS'required'
p49172
I01
sS'group_name'
p49173
NsasS'name'
p49174
S'/Kernels/KKSACBulkF'
p49175
sa(dp49176
S'description'
p49177
S"KKS model kernel for the Bulk Cahn-Hilliard term. This operates on the concentration 'c' as the non-linear variable\n"
p49178
sS'subblocks'
p49179
NsS'parameters'
p49180
(lp49181
(dp49182
S'description'
p49183
S'Vector of arguments of the mobility\n'
p49184
sS'cpp_type'
p49185
S'std::vector<VariableName>'
p49186
sS'default'
p49187
g3
sS'name'
p49188
S'args'
p49189
sS'required'
p49190
I00
sS'group_name'
p49191
Nsa(dp49192
S'description'
p49193
S'Vector of additional arguments to Fa\n'
p49194
sS'cpp_type'
p49195
S'std::vector<VariableName>'
p49196
sS'default'
p49197
g3
sS'name'
p49198
S'args_a'
p49199
sS'required'
p49200
I00
sS'group_name'
p49201
Nsa(dp49202
S'description'
p49203
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49204
sS'cpp_type'
p49205
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49206
sS'default'
p49207
g3
sS'name'
p49208
S'block'
p49209
sS'required'
p49210
I00
sS'group_name'
p49211
Nsa(dp49212
S'description'
p49213
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p49214
sS'cpp_type'
p49215
S'std::vector<VariableName>'
p49216
sS'default'
p49217
g3
sS'name'
p49218
S'ca'
p49219
sS'required'
p49220
I01
sS'group_name'
p49221
Nsa(dp49222
S'description'
p49223
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p49224
sS'cpp_type'
p49225
S'std::vector<VariableName>'
p49226
sS'default'
p49227
g3
sS'name'
p49228
S'cb'
p49229
sS'required'
p49230
I01
sS'group_name'
p49231
Nsa(dp49232
S'description'
p49233
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49234
sS'cpp_type'
p49235
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49236
sS'default'
p49237
g3
sS'name'
p49238
S'control_tags'
p49239
sS'required'
p49240
I00
sS'group_name'
p49241
S'Advanced'
p49242
sa(dp49243
S'description'
p49244
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49245
sS'cpp_type'
p49246
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49247
sS'default'
p49248
g3
sS'name'
p49249
S'diag_save_in'
p49250
sS'required'
p49251
I00
sS'group_name'
p49252
S'Advanced'
p49253
sa(dp49254
S'description'
p49255
S'Whether or not this kernel will be used as an eigen kernel\n'
p49256
sS'cpp_type'
p49257
S'bool'
p49258
sS'default'
p49259
S'0'
p49260
sS'name'
p49261
S'eigen_kernel'
p49262
sS'required'
p49263
I00
sS'group_name'
p49264
Nsa(dp49265
S'description'
p49266
S'Set the enabled status of the MooseObject.\n'
p49267
sS'cpp_type'
p49268
S'bool'
p49269
sS'default'
p49270
S'1'
p49271
sS'name'
p49272
S'enable'
p49273
sS'required'
p49274
I00
sS'group_name'
p49275
S'Advanced'
p49276
sa(dp49277
S'description'
p49278
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p49279
sS'cpp_type'
p49280
S'MaterialPropertyName'
p49281
sS'default'
p49282
g3
sS'name'
p49283
S'fa_name'
p49284
sS'required'
p49285
I01
sS'group_name'
p49286
Nsa(dp49287
S'description'
p49288
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p49289
sS'cpp_type'
p49290
S'MaterialPropertyName'
p49291
sS'default'
p49292
g3
sS'name'
p49293
S'fb_name'
p49294
sS'required'
p49295
I01
sS'group_name'
p49296
Nsa(dp49297
S'description'
p49298
S'Base name for the switching function h(eta)\n'
p49299
sS'cpp_type'
p49300
S'MaterialPropertyName'
p49301
sS'default'
p49302
S'h'
p49303
sS'name'
p49304
S'h_name'
p49305
sS'required'
p49306
I00
sS'group_name'
p49307
Nsa(dp49308
S'description'
p49309
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49310
sS'cpp_type'
p49311
S'bool'
p49312
sS'default'
p49313
S'1'
p49314
sS'name'
p49315
S'implicit'
p49316
sS'required'
p49317
I00
sS'group_name'
p49318
S'Advanced'
p49319
sa(dp49320
S'description'
p49321
S'The mobility used with the kernel\n'
p49322
sS'cpp_type'
p49323
S'MaterialPropertyName'
p49324
sS'default'
p49325
S'M'
p49326
sS'name'
p49327
S'mob_name'
p49328
sS'required'
p49329
I00
sS'group_name'
p49330
Nsa(dp49331
S'description'
p49332
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49333
sS'cpp_type'
p49334
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49335
sS'default'
p49336
g3
sS'name'
p49337
S'save_in'
p49338
sS'required'
p49339
I00
sS'group_name'
p49340
S'Advanced'
p49341
sa(dp49342
S'description'
p49343
S'The seed for the master random number generator\n'
p49344
sS'cpp_type'
p49345
S'unsigned int'
p49346
sS'default'
p49347
S'0'
p49348
sS'name'
p49349
S'seed'
p49350
sS'required'
p49351
I00
sS'group_name'
p49352
S'Advanced'
p49353
sa(dp49354
S'description'
p49355
g3
sS'cpp_type'
p49356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49357
sS'default'
p49358
S'KKSCHBulk'
p49359
sS'name'
p49360
S'type'
p49361
sS'required'
p49362
I00
sS'group_name'
p49363
Nsa(dp49364
S'description'
p49365
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49366
sS'cpp_type'
p49367
S'bool'
p49368
sS'default'
p49369
S'0'
p49370
sS'name'
p49371
S'use_displaced_mesh'
p49372
sS'required'
p49373
I00
sS'group_name'
p49374
S'Advanced'
p49375
sa(dp49376
S'description'
p49377
S'The name of the variable that this Kernel operates on\n'
p49378
sS'cpp_type'
p49379
S'NonlinearVariableName'
p49380
sS'default'
p49381
g3
sS'name'
p49382
S'variable'
p49383
sS'required'
p49384
I01
sS'group_name'
p49385
NsasS'name'
p49386
S'/Kernels/KKSCHBulk'
p49387
sa(dp49388
S'description'
p49389
S'Multi-phase KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n'
p49390
sS'subblocks'
p49391
NsS'parameters'
p49392
(lp49393
(dp49394
S'description'
p49395
S'List of free energies for each phase. Place in same order as hj_names!\n'
p49396
sS'cpp_type'
p49397
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49398
sS'default'
p49399
g3
sS'name'
p49400
S'Fj_names'
p49401
sS'required'
p49402
I01
sS'group_name'
p49403
Nsa(dp49404
S'description'
p49405
S'Vector of arguments of the mobility\n'
p49406
sS'cpp_type'
p49407
S'std::vector<VariableName>'
p49408
sS'default'
p49409
g3
sS'name'
p49410
S'args'
p49411
sS'required'
p49412
I00
sS'group_name'
p49413
Nsa(dp49414
S'description'
p49415
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49416
sS'cpp_type'
p49417
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49418
sS'default'
p49419
g3
sS'name'
p49420
S'block'
p49421
sS'required'
p49422
I00
sS'group_name'
p49423
Nsa(dp49424
S'description'
p49425
S'Array of phase concentrations cj. Place in same order as Fj_names!\n'
p49426
sS'cpp_type'
p49427
S'std::vector<VariableName>'
p49428
sS'default'
p49429
g3
sS'name'
p49430
S'cj_names'
p49431
sS'required'
p49432
I01
sS'group_name'
p49433
Nsa(dp49434
S'description'
p49435
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49436
sS'cpp_type'
p49437
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49438
sS'default'
p49439
g3
sS'name'
p49440
S'control_tags'
p49441
sS'required'
p49442
I00
sS'group_name'
p49443
S'Advanced'
p49444
sa(dp49445
S'description'
p49446
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49447
sS'cpp_type'
p49448
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49449
sS'default'
p49450
g3
sS'name'
p49451
S'diag_save_in'
p49452
sS'required'
p49453
I00
sS'group_name'
p49454
S'Advanced'
p49455
sa(dp49456
S'description'
p49457
S'Whether or not this kernel will be used as an eigen kernel\n'
p49458
sS'cpp_type'
p49459
S'bool'
p49460
sS'default'
p49461
S'0'
p49462
sS'name'
p49463
S'eigen_kernel'
p49464
sS'required'
p49465
I00
sS'group_name'
p49466
Nsa(dp49467
S'description'
p49468
S'Set the enabled status of the MooseObject.\n'
p49469
sS'cpp_type'
p49470
S'bool'
p49471
sS'default'
p49472
S'1'
p49473
sS'name'
p49474
S'enable'
p49475
sS'required'
p49476
I00
sS'group_name'
p49477
S'Advanced'
p49478
sa(dp49479
S'description'
p49480
S'Order parameter that derivatives are taken with respect to\n'
p49481
sS'cpp_type'
p49482
S'std::vector<VariableName>'
p49483
sS'default'
p49484
g3
sS'name'
p49485
S'eta_i'
p49486
sS'required'
p49487
I01
sS'group_name'
p49488
Nsa(dp49489
S'description'
p49490
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p49491
sS'cpp_type'
p49492
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49493
sS'default'
p49494
g3
sS'name'
p49495
S'hj_names'
p49496
sS'required'
p49497
I01
sS'group_name'
p49498
Nsa(dp49499
S'description'
p49500
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49501
sS'cpp_type'
p49502
S'bool'
p49503
sS'default'
p49504
S'1'
p49505
sS'name'
p49506
S'implicit'
p49507
sS'required'
p49508
I00
sS'group_name'
p49509
S'Advanced'
p49510
sa(dp49511
S'description'
p49512
S'The mobility used with the kernel\n'
p49513
sS'cpp_type'
p49514
S'MaterialPropertyName'
p49515
sS'default'
p49516
S'L'
p49517
sS'name'
p49518
S'mob_name'
p49519
sS'required'
p49520
I00
sS'group_name'
p49521
Nsa(dp49522
S'description'
p49523
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49524
sS'cpp_type'
p49525
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49526
sS'default'
p49527
g3
sS'name'
p49528
S'save_in'
p49529
sS'required'
p49530
I00
sS'group_name'
p49531
S'Advanced'
p49532
sa(dp49533
S'description'
p49534
S'The seed for the master random number generator\n'
p49535
sS'cpp_type'
p49536
S'unsigned int'
p49537
sS'default'
p49538
S'0'
p49539
sS'name'
p49540
S'seed'
p49541
sS'required'
p49542
I00
sS'group_name'
p49543
S'Advanced'
p49544
sa(dp49545
S'description'
p49546
g3
sS'cpp_type'
p49547
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49548
sS'default'
p49549
S'KKSMultiACBulkC'
p49550
sS'name'
p49551
S'type'
p49552
sS'required'
p49553
I00
sS'group_name'
p49554
Nsa(dp49555
S'description'
p49556
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49557
sS'cpp_type'
p49558
S'bool'
p49559
sS'default'
p49560
S'0'
p49561
sS'name'
p49562
S'use_displaced_mesh'
p49563
sS'required'
p49564
I00
sS'group_name'
p49565
S'Advanced'
p49566
sa(dp49567
S'description'
p49568
S'The name of the variable that this Kernel operates on\n'
p49569
sS'cpp_type'
p49570
S'NonlinearVariableName'
p49571
sS'default'
p49572
g3
sS'name'
p49573
S'variable'
p49574
sS'required'
p49575
I01
sS'group_name'
p49576
NsasS'name'
p49577
S'/Kernels/KKSMultiACBulkC'
p49578
sa(dp49579
S'description'
p49580
S'KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n'
p49581
sS'subblocks'
p49582
NsS'parameters'
p49583
(lp49584
(dp49585
S'description'
p49586
S'List of free energies for each phase. Place in same order as hj_names!\n'
p49587
sS'cpp_type'
p49588
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49589
sS'default'
p49590
g3
sS'name'
p49591
S'Fj_names'
p49592
sS'required'
p49593
I01
sS'group_name'
p49594
Nsa(dp49595
S'description'
p49596
S'Vector of arguments of the mobility\n'
p49597
sS'cpp_type'
p49598
S'std::vector<VariableName>'
p49599
sS'default'
p49600
g3
sS'name'
p49601
S'args'
p49602
sS'required'
p49603
I00
sS'group_name'
p49604
Nsa(dp49605
S'description'
p49606
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49607
sS'cpp_type'
p49608
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49609
sS'default'
p49610
g3
sS'name'
p49611
S'block'
p49612
sS'required'
p49613
I00
sS'group_name'
p49614
Nsa(dp49615
S'description'
p49616
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49617
sS'cpp_type'
p49618
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49619
sS'default'
p49620
g3
sS'name'
p49621
S'control_tags'
p49622
sS'required'
p49623
I00
sS'group_name'
p49624
S'Advanced'
p49625
sa(dp49626
S'description'
p49627
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49628
sS'cpp_type'
p49629
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49630
sS'default'
p49631
g3
sS'name'
p49632
S'diag_save_in'
p49633
sS'required'
p49634
I00
sS'group_name'
p49635
S'Advanced'
p49636
sa(dp49637
S'description'
p49638
S'Whether or not this kernel will be used as an eigen kernel\n'
p49639
sS'cpp_type'
p49640
S'bool'
p49641
sS'default'
p49642
S'0'
p49643
sS'name'
p49644
S'eigen_kernel'
p49645
sS'required'
p49646
I00
sS'group_name'
p49647
Nsa(dp49648
S'description'
p49649
S'Set the enabled status of the MooseObject.\n'
p49650
sS'cpp_type'
p49651
S'bool'
p49652
sS'default'
p49653
S'1'
p49654
sS'name'
p49655
S'enable'
p49656
sS'required'
p49657
I00
sS'group_name'
p49658
S'Advanced'
p49659
sa(dp49660
S'description'
p49661
S'Order parameter that derivatives are taken with respect to\n'
p49662
sS'cpp_type'
p49663
S'std::vector<VariableName>'
p49664
sS'default'
p49665
g3
sS'name'
p49666
S'eta_i'
p49667
sS'required'
p49668
I01
sS'group_name'
p49669
Nsa(dp49670
S'description'
p49671
S'Base name for the double well function g_i(eta_i)\n'
p49672
sS'cpp_type'
p49673
S'MaterialPropertyName'
p49674
sS'default'
p49675
g3
sS'name'
p49676
S'gi_name'
p49677
sS'required'
p49678
I01
sS'group_name'
p49679
Nsa(dp49680
S'description'
p49681
S'Switching Function Materials that provide h. Place in same order as Fj_names!\n'
p49682
sS'cpp_type'
p49683
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p49684
sS'default'
p49685
g3
sS'name'
p49686
S'hj_names'
p49687
sS'required'
p49688
I01
sS'group_name'
p49689
Nsa(dp49690
S'description'
p49691
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49692
sS'cpp_type'
p49693
S'bool'
p49694
sS'default'
p49695
S'1'
p49696
sS'name'
p49697
S'implicit'
p49698
sS'required'
p49699
I00
sS'group_name'
p49700
S'Advanced'
p49701
sa(dp49702
S'description'
p49703
S'The mobility used with the kernel\n'
p49704
sS'cpp_type'
p49705
S'MaterialPropertyName'
p49706
sS'default'
p49707
S'L'
p49708
sS'name'
p49709
S'mob_name'
p49710
sS'required'
p49711
I00
sS'group_name'
p49712
Nsa(dp49713
S'description'
p49714
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49715
sS'cpp_type'
p49716
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49717
sS'default'
p49718
g3
sS'name'
p49719
S'save_in'
p49720
sS'required'
p49721
I00
sS'group_name'
p49722
S'Advanced'
p49723
sa(dp49724
S'description'
p49725
S'The seed for the master random number generator\n'
p49726
sS'cpp_type'
p49727
S'unsigned int'
p49728
sS'default'
p49729
S'0'
p49730
sS'name'
p49731
S'seed'
p49732
sS'required'
p49733
I00
sS'group_name'
p49734
S'Advanced'
p49735
sa(dp49736
S'description'
p49737
g3
sS'cpp_type'
p49738
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49739
sS'default'
p49740
S'KKSMultiACBulkF'
p49741
sS'name'
p49742
S'type'
p49743
sS'required'
p49744
I00
sS'group_name'
p49745
Nsa(dp49746
S'description'
p49747
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49748
sS'cpp_type'
p49749
S'bool'
p49750
sS'default'
p49751
S'0'
p49752
sS'name'
p49753
S'use_displaced_mesh'
p49754
sS'required'
p49755
I00
sS'group_name'
p49756
S'Advanced'
p49757
sa(dp49758
S'description'
p49759
S'The name of the variable that this Kernel operates on\n'
p49760
sS'cpp_type'
p49761
S'NonlinearVariableName'
p49762
sS'default'
p49763
g3
sS'name'
p49764
S'variable'
p49765
sS'required'
p49766
I01
sS'group_name'
p49767
Nsa(dp49768
S'description'
p49769
S'Double well height parameter\n'
p49770
sS'cpp_type'
p49771
S'double'
p49772
sS'default'
p49773
g3
sS'name'
p49774
S'wi'
p49775
sS'required'
p49776
I01
sS'group_name'
p49777
NsasS'name'
p49778
S'/Kernels/KKSMultiACBulkF'
p49779
sa(dp49780
S'description'
p49781
g3
sS'subblocks'
p49782
NsS'parameters'
p49783
(lp49784
(dp49785
S'description'
p49786
S'specifies the base name of the phase concentrations\n'
p49787
sS'cpp_type'
p49788
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49789
sS'default'
p49790
g3
sS'name'
p49791
S'ci_name_base'
p49792
sS'required'
p49793
I01
sS'group_name'
p49794
Nsa(dp49795
S'description'
p49796
S'specifies the base name of the chemical energy\n'
p49797
sS'cpp_type'
p49798
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49799
sS'default'
p49800
S'fch'
p49801
sS'name'
p49802
S'fch_name_base'
p49803
sS'required'
p49804
I00
sS'group_name'
p49805
Nsa(dp49806
S'description'
p49807
S'specifies the base name of the barrier functions\n'
p49808
sS'cpp_type'
p49809
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49810
sS'default'
p49811
S'g'
p49812
sS'name'
p49813
S'g_name_base'
p49814
sS'required'
p49815
I00
sS'group_name'
p49816
Nsa(dp49817
S'description'
p49818
S'gamma (only works for constant gamma)\n'
p49819
sS'cpp_type'
p49820
S'MaterialPropertyName'
p49821
sS'default'
p49822
S'gamma'
p49823
sS'name'
p49824
S'gamma'
p49825
sS'required'
p49826
I00
sS'group_name'
p49827
Nsa(dp49828
S'description'
p49829
S'specifies the base name of the switching functions\n'
p49830
sS'cpp_type'
p49831
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49832
sS'default'
p49833
S'h'
p49834
sS'name'
p49835
S'h_name_base'
p49836
sS'required'
p49837
I00
sS'group_name'
p49838
Nsa(dp49839
S'description'
p49840
S'Whether kernels are implicit or not\n'
p49841
sS'cpp_type'
p49842
S'bool'
p49843
sS'default'
p49844
S'1'
p49845
sS'name'
p49846
S'implicit'
p49847
sS'required'
p49848
I00
sS'group_name'
p49849
Nsa(dp49850
S'description'
p49851
S'kappa\n'
p49852
sS'cpp_type'
p49853
S'MaterialPropertyName'
p49854
sS'default'
p49855
S'kappa'
p49856
sS'name'
p49857
S'kappa'
p49858
sS'required'
p49859
I00
sS'group_name'
p49860
Nsa(dp49861
S'description'
p49862
S'Mobility material for AC equations\n'
p49863
sS'cpp_type'
p49864
S'MaterialPropertyName'
p49865
sS'default'
p49866
S'L'
p49867
sS'name'
p49868
S'mob_name'
p49869
sS'required'
p49870
I00
sS'group_name'
p49871
Nsa(dp49872
S'description'
p49873
S'specifies the base name of the order parameters\n'
p49874
sS'cpp_type'
p49875
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49876
sS'default'
p49877
g3
sS'name'
p49878
S'op_name_base'
p49879
sS'required'
p49880
I01
sS'group_name'
p49881
Nsa(dp49882
S'description'
p49883
S'specifies the total number of order parameters\n'
p49884
sS'cpp_type'
p49885
S'unsigned int'
p49886
sS'default'
p49887
g3
sS'name'
p49888
S'op_num'
p49889
sS'required'
p49890
I01
sS'group_name'
p49891
Nsa(dp49892
S'description'
p49893
S'Whether to use displaced mesh in the kernels\n'
p49894
sS'cpp_type'
p49895
S'bool'
p49896
sS'default'
p49897
S'0'
p49898
sS'name'
p49899
S'use_displaced_mesh'
p49900
sS'required'
p49901
I00
sS'group_name'
p49902
Nsa(dp49903
S'description'
p49904
S'Height of double well\n'
p49905
sS'cpp_type'
p49906
S'double'
p49907
sS'default'
p49908
S'0'
p49909
sS'name'
p49910
S'wi'
p49911
sS'required'
p49912
I00
sS'group_name'
p49913
NsasS'name'
p49914
S'/Kernels/KKSMultiACKernel'
p49915
sa(dp49916
S'description'
p49917
S'KKS multi-phase model kernel to enforce (c = h1*c1 + h2*c2 + h3*c3 +.. The non-linear variable of this kernel is cn, the final phase concenration in the list.\n'
p49918
sS'subblocks'
p49919
NsS'parameters'
p49920
(lp49921
(dp49922
S'description'
p49923
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49924
sS'cpp_type'
p49925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49926
sS'default'
p49927
g3
sS'name'
p49928
S'block'
p49929
sS'required'
p49930
I00
sS'group_name'
p49931
Nsa(dp49932
S'description'
p49933
S'Physical concentration\n'
p49934
sS'cpp_type'
p49935
S'std::vector<VariableName>'
p49936
sS'default'
p49937
g3
sS'name'
p49938
S'c'
p49939
sS'required'
p49940
I01
sS'group_name'
p49941
Nsa(dp49942
S'description'
p49943
S'Array of phase concentrations cj. Place in same order as hj_names!\n'
p49944
sS'cpp_type'
p49945
S'std::vector<VariableName>'
p49946
sS'default'
p49947
g3
sS'name'
p49948
S'cj'
p49949
sS'required'
p49950
I01
sS'group_name'
p49951
Nsa(dp49952
S'description'
p49953
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49954
sS'cpp_type'
p49955
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49956
sS'default'
p49957
g3
sS'name'
p49958
S'control_tags'
p49959
sS'required'
p49960
I00
sS'group_name'
p49961
S'Advanced'
p49962
sa(dp49963
S'description'
p49964
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49965
sS'cpp_type'
p49966
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49967
sS'default'
p49968
g3
sS'name'
p49969
S'diag_save_in'
p49970
sS'required'
p49971
I00
sS'group_name'
p49972
S'Advanced'
p49973
sa(dp49974
S'description'
p49975
S'Whether or not this kernel will be used as an eigen kernel\n'
p49976
sS'cpp_type'
p49977
S'bool'
p49978
sS'default'
p49979
S'0'
p49980
sS'name'
p49981
S'eigen_kernel'
p49982
sS'required'
p49983
I00
sS'group_name'
p49984
Nsa(dp49985
S'description'
p49986
S'Set the enabled status of the MooseObject.\n'
p49987
sS'cpp_type'
p49988
S'bool'
p49989
sS'default'
p49990
S'1'
p49991
sS'name'
p49992
S'enable'
p49993
sS'required'
p49994
I00
sS'group_name'
p49995
S'Advanced'
p49996
sa(dp49997
S'description'
p49998
S'Order parameters for all phases\n'
p49999
sS'cpp_type'
p50000
S'std::vector<VariableName>'
p50001
sS'default'
p50002
g3
sS'name'
p50003
S'etas'
p50004
sS'required'
p50005
I00
sS'group_name'
p50006
Nsa(dp50007
S'description'
p50008
S'Switching Function Materials that provide h(eta_1, eta_2,...)\n'
p50009
sS'cpp_type'
p50010
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p50011
sS'default'
p50012
g3
sS'name'
p50013
S'hj_names'
p50014
sS'required'
p50015
I01
sS'group_name'
p50016
Nsa(dp50017
S'description'
p50018
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50019
sS'cpp_type'
p50020
S'bool'
p50021
sS'default'
p50022
S'1'
p50023
sS'name'
p50024
S'implicit'
p50025
sS'required'
p50026
I00
sS'group_name'
p50027
S'Advanced'
p50028
sa(dp50029
S'description'
p50030
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50031
sS'cpp_type'
p50032
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50033
sS'default'
p50034
g3
sS'name'
p50035
S'save_in'
p50036
sS'required'
p50037
I00
sS'group_name'
p50038
S'Advanced'
p50039
sa(dp50040
S'description'
p50041
S'The seed for the master random number generator\n'
p50042
sS'cpp_type'
p50043
S'unsigned int'
p50044
sS'default'
p50045
S'0'
p50046
sS'name'
p50047
S'seed'
p50048
sS'required'
p50049
I00
sS'group_name'
p50050
S'Advanced'
p50051
sa(dp50052
S'description'
p50053
g3
sS'cpp_type'
p50054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50055
sS'default'
p50056
S'KKSMultiPhaseConcentration'
p50057
sS'name'
p50058
S'type'
p50059
sS'required'
p50060
I00
sS'group_name'
p50061
Nsa(dp50062
S'description'
p50063
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50064
sS'cpp_type'
p50065
S'bool'
p50066
sS'default'
p50067
S'0'
p50068
sS'name'
p50069
S'use_displaced_mesh'
p50070
sS'required'
p50071
I00
sS'group_name'
p50072
S'Advanced'
p50073
sa(dp50074
S'description'
p50075
S'The name of the variable that this Kernel operates on\n'
p50076
sS'cpp_type'
p50077
S'NonlinearVariableName'
p50078
sS'default'
p50079
g3
sS'name'
p50080
S'variable'
p50081
sS'required'
p50082
I01
sS'group_name'
p50083
NsasS'name'
p50084
S'/Kernels/KKSMultiPhaseConcentration'
p50085
sa(dp50086
S'description'
p50087
S'KKS model kernel to enforce the pointwise equality of phase chemical potentials  dFa/dca = dFb/dcb. The non-linear variable of this kernel is ca.\n'
p50088
sS'subblocks'
p50089
NsS'parameters'
p50090
(lp50091
(dp50092
S'description'
p50093
S'Vector of further parameters to Fa (optional, to add in second cross derivatives of Fa)\n'
p50094
sS'cpp_type'
p50095
S'std::vector<VariableName>'
p50096
sS'default'
p50097
g3
sS'name'
p50098
S'args_a'
p50099
sS'required'
p50100
I00
sS'group_name'
p50101
Nsa(dp50102
S'description'
p50103
S'Vector of further parameters to Fb (optional, to add in second cross derivatives of Fb)\n'
p50104
sS'cpp_type'
p50105
S'std::vector<VariableName>'
p50106
sS'default'
p50107
g3
sS'name'
p50108
S'args_b'
p50109
sS'required'
p50110
I00
sS'group_name'
p50111
Nsa(dp50112
S'description'
p50113
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50114
sS'cpp_type'
p50115
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50116
sS'default'
p50117
g3
sS'name'
p50118
S'block'
p50119
sS'required'
p50120
I00
sS'group_name'
p50121
Nsa(dp50122
S'description'
p50123
S'Phase b concentration\n'
p50124
sS'cpp_type'
p50125
S'std::vector<VariableName>'
p50126
sS'default'
p50127
g3
sS'name'
p50128
S'cb'
p50129
sS'required'
p50130
I01
sS'group_name'
p50131
Nsa(dp50132
S'description'
p50133
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50134
sS'cpp_type'
p50135
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50136
sS'default'
p50137
g3
sS'name'
p50138
S'control_tags'
p50139
sS'required'
p50140
I00
sS'group_name'
p50141
S'Advanced'
p50142
sa(dp50143
S'description'
p50144
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50145
sS'cpp_type'
p50146
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50147
sS'default'
p50148
g3
sS'name'
p50149
S'diag_save_in'
p50150
sS'required'
p50151
I00
sS'group_name'
p50152
S'Advanced'
p50153
sa(dp50154
S'description'
p50155
S'Whether or not this kernel will be used as an eigen kernel\n'
p50156
sS'cpp_type'
p50157
S'bool'
p50158
sS'default'
p50159
S'0'
p50160
sS'name'
p50161
S'eigen_kernel'
p50162
sS'required'
p50163
I00
sS'group_name'
p50164
Nsa(dp50165
S'description'
p50166
S'Set the enabled status of the MooseObject.\n'
p50167
sS'cpp_type'
p50168
S'bool'
p50169
sS'default'
p50170
S'1'
p50171
sS'name'
p50172
S'enable'
p50173
sS'required'
p50174
I00
sS'group_name'
p50175
S'Advanced'
p50176
sa(dp50177
S'description'
p50178
S'Base name of the free energy function Fa (f_name in the corresponding derivative function material)\n'
p50179
sS'cpp_type'
p50180
S'MaterialPropertyName'
p50181
sS'default'
p50182
g3
sS'name'
p50183
S'fa_name'
p50184
sS'required'
p50185
I01
sS'group_name'
p50186
Nsa(dp50187
S'description'
p50188
S'Base name of the free energy function Fb (f_name in the corresponding derivative function material)\n'
p50189
sS'cpp_type'
p50190
S'MaterialPropertyName'
p50191
sS'default'
p50192
g3
sS'name'
p50193
S'fb_name'
p50194
sS'required'
p50195
I01
sS'group_name'
p50196
Nsa(dp50197
S'description'
p50198
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50199
sS'cpp_type'
p50200
S'bool'
p50201
sS'default'
p50202
S'1'
p50203
sS'name'
p50204
S'implicit'
p50205
sS'required'
p50206
I00
sS'group_name'
p50207
S'Advanced'
p50208
sa(dp50209
S'description'
p50210
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50211
sS'cpp_type'
p50212
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50213
sS'default'
p50214
g3
sS'name'
p50215
S'save_in'
p50216
sS'required'
p50217
I00
sS'group_name'
p50218
S'Advanced'
p50219
sa(dp50220
S'description'
p50221
S'The seed for the master random number generator\n'
p50222
sS'cpp_type'
p50223
S'unsigned int'
p50224
sS'default'
p50225
S'0'
p50226
sS'name'
p50227
S'seed'
p50228
sS'required'
p50229
I00
sS'group_name'
p50230
S'Advanced'
p50231
sa(dp50232
S'description'
p50233
g3
sS'cpp_type'
p50234
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50235
sS'default'
p50236
S'KKSPhaseChemicalPotential'
p50237
sS'name'
p50238
S'type'
p50239
sS'required'
p50240
I00
sS'group_name'
p50241
Nsa(dp50242
S'description'
p50243
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50244
sS'cpp_type'
p50245
S'bool'
p50246
sS'default'
p50247
S'0'
p50248
sS'name'
p50249
S'use_displaced_mesh'
p50250
sS'required'
p50251
I00
sS'group_name'
p50252
S'Advanced'
p50253
sa(dp50254
S'description'
p50255
S'The name of the variable that this Kernel operates on\n'
p50256
sS'cpp_type'
p50257
S'NonlinearVariableName'
p50258
sS'default'
p50259
g3
sS'name'
p50260
S'variable'
p50261
sS'required'
p50262
I01
sS'group_name'
p50263
NsasS'name'
p50264
S'/Kernels/KKSPhaseChemicalPotential'
p50265
sa(dp50266
S'description'
p50267
S'KKS model kernel to enforce the decomposition of concentration into phase concentration  (1-h(eta))*ca + h(eta)*cb - c = 0. The non-linear variable of this kernel is cb.\n'
p50268
sS'subblocks'
p50269
NsS'parameters'
p50270
(lp50271
(dp50272
S'description'
p50273
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50274
sS'cpp_type'
p50275
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50276
sS'default'
p50277
g3
sS'name'
p50278
S'block'
p50279
sS'required'
p50280
I00
sS'group_name'
p50281
Nsa(dp50282
S'description'
p50283
S'Real concentration\n'
p50284
sS'cpp_type'
p50285
S'std::vector<VariableName>'
p50286
sS'default'
p50287
g3
sS'name'
p50288
S'c'
p50289
sS'required'
p50290
I01
sS'group_name'
p50291
Nsa(dp50292
S'description'
p50293
S'Phase a concentration\n'
p50294
sS'cpp_type'
p50295
S'std::vector<VariableName>'
p50296
sS'default'
p50297
g3
sS'name'
p50298
S'ca'
p50299
sS'required'
p50300
I01
sS'group_name'
p50301
Nsa(dp50302
S'description'
p50303
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50304
sS'cpp_type'
p50305
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50306
sS'default'
p50307
g3
sS'name'
p50308
S'control_tags'
p50309
sS'required'
p50310
I00
sS'group_name'
p50311
S'Advanced'
p50312
sa(dp50313
S'description'
p50314
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50315
sS'cpp_type'
p50316
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50317
sS'default'
p50318
g3
sS'name'
p50319
S'diag_save_in'
p50320
sS'required'
p50321
I00
sS'group_name'
p50322
S'Advanced'
p50323
sa(dp50324
S'description'
p50325
S'Whether or not this kernel will be used as an eigen kernel\n'
p50326
sS'cpp_type'
p50327
S'bool'
p50328
sS'default'
p50329
S'0'
p50330
sS'name'
p50331
S'eigen_kernel'
p50332
sS'required'
p50333
I00
sS'group_name'
p50334
Nsa(dp50335
S'description'
p50336
S'Set the enabled status of the MooseObject.\n'
p50337
sS'cpp_type'
p50338
S'bool'
p50339
sS'default'
p50340
S'1'
p50341
sS'name'
p50342
S'enable'
p50343
sS'required'
p50344
I00
sS'group_name'
p50345
S'Advanced'
p50346
sa(dp50347
S'description'
p50348
S'Phase a/b order parameter\n'
p50349
sS'cpp_type'
p50350
S'std::vector<VariableName>'
p50351
sS'default'
p50352
g3
sS'name'
p50353
S'eta'
p50354
sS'required'
p50355
I01
sS'group_name'
p50356
Nsa(dp50357
S'description'
p50358
S'Base name for the switching function h(eta)\n'
p50359
sS'cpp_type'
p50360
S'MaterialPropertyName'
p50361
sS'default'
p50362
S'h'
p50363
sS'name'
p50364
S'h_name'
p50365
sS'required'
p50366
I00
sS'group_name'
p50367
Nsa(dp50368
S'description'
p50369
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50370
sS'cpp_type'
p50371
S'bool'
p50372
sS'default'
p50373
S'1'
p50374
sS'name'
p50375
S'implicit'
p50376
sS'required'
p50377
I00
sS'group_name'
p50378
S'Advanced'
p50379
sa(dp50380
S'description'
p50381
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50382
sS'cpp_type'
p50383
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50384
sS'default'
p50385
g3
sS'name'
p50386
S'save_in'
p50387
sS'required'
p50388
I00
sS'group_name'
p50389
S'Advanced'
p50390
sa(dp50391
S'description'
p50392
S'The seed for the master random number generator\n'
p50393
sS'cpp_type'
p50394
S'unsigned int'
p50395
sS'default'
p50396
S'0'
p50397
sS'name'
p50398
S'seed'
p50399
sS'required'
p50400
I00
sS'group_name'
p50401
S'Advanced'
p50402
sa(dp50403
S'description'
p50404
g3
sS'cpp_type'
p50405
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50406
sS'default'
p50407
S'KKSPhaseConcentration'
p50408
sS'name'
p50409
S'type'
p50410
sS'required'
p50411
I00
sS'group_name'
p50412
Nsa(dp50413
S'description'
p50414
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50415
sS'cpp_type'
p50416
S'bool'
p50417
sS'default'
p50418
S'0'
p50419
sS'name'
p50420
S'use_displaced_mesh'
p50421
sS'required'
p50422
I00
sS'group_name'
p50423
S'Advanced'
p50424
sa(dp50425
S'description'
p50426
S'The name of the variable that this Kernel operates on\n'
p50427
sS'cpp_type'
p50428
S'NonlinearVariableName'
p50429
sS'default'
p50430
g3
sS'name'
p50431
S'variable'
p50432
sS'required'
p50433
I01
sS'group_name'
p50434
NsasS'name'
p50435
S'/Kernels/KKSPhaseConcentration'
p50436
sa(dp50437
S'description'
p50438
S"KKS model kernel for the split Bulk Cahn-Hilliard term. This operates on the chemical potential 'c' as the non-linear variable\n"
p50439
sS'subblocks'
p50440
NsS'parameters'
p50441
(lp50442
(dp50443
S'description'
p50444
S'Vector of additional arguments to Fa\n'
p50445
sS'cpp_type'
p50446
S'std::vector<VariableName>'
p50447
sS'default'
p50448
g3
sS'name'
p50449
S'args_a'
p50450
sS'required'
p50451
I00
sS'group_name'
p50452
Nsa(dp50453
S'description'
p50454
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50455
sS'cpp_type'
p50456
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50457
sS'default'
p50458
g3
sS'name'
p50459
S'block'
p50460
sS'required'
p50461
I00
sS'group_name'
p50462
Nsa(dp50463
S'description'
p50464
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p50465
sS'cpp_type'
p50466
S'std::vector<VariableName>'
p50467
sS'default'
p50468
g3
sS'name'
p50469
S'ca'
p50470
sS'required'
p50471
I01
sS'group_name'
p50472
Nsa(dp50473
S'description'
p50474
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p50475
sS'cpp_type'
p50476
S'std::vector<VariableName>'
p50477
sS'default'
p50478
g3
sS'name'
p50479
S'cb'
p50480
sS'required'
p50481
I01
sS'group_name'
p50482
Nsa(dp50483
S'description'
p50484
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50485
sS'cpp_type'
p50486
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50487
sS'default'
p50488
g3
sS'name'
p50489
S'control_tags'
p50490
sS'required'
p50491
I00
sS'group_name'
p50492
S'Advanced'
p50493
sa(dp50494
S'description'
p50495
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50496
sS'cpp_type'
p50497
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50498
sS'default'
p50499
g3
sS'name'
p50500
S'diag_save_in'
p50501
sS'required'
p50502
I00
sS'group_name'
p50503
S'Advanced'
p50504
sa(dp50505
S'description'
p50506
S'Whether or not this kernel will be used as an eigen kernel\n'
p50507
sS'cpp_type'
p50508
S'bool'
p50509
sS'default'
p50510
S'0'
p50511
sS'name'
p50512
S'eigen_kernel'
p50513
sS'required'
p50514
I00
sS'group_name'
p50515
Nsa(dp50516
S'description'
p50517
S'Set the enabled status of the MooseObject.\n'
p50518
sS'cpp_type'
p50519
S'bool'
p50520
sS'default'
p50521
S'1'
p50522
sS'name'
p50523
S'enable'
p50524
sS'required'
p50525
I00
sS'group_name'
p50526
S'Advanced'
p50527
sa(dp50528
S'description'
p50529
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p50530
sS'cpp_type'
p50531
S'MaterialPropertyName'
p50532
sS'default'
p50533
g3
sS'name'
p50534
S'fa_name'
p50535
sS'required'
p50536
I01
sS'group_name'
p50537
Nsa(dp50538
S'description'
p50539
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p50540
sS'cpp_type'
p50541
S'MaterialPropertyName'
p50542
sS'default'
p50543
g3
sS'name'
p50544
S'fb_name'
p50545
sS'required'
p50546
I01
sS'group_name'
p50547
Nsa(dp50548
S'description'
p50549
S'Base name for the switching function h(eta)\n'
p50550
sS'cpp_type'
p50551
S'MaterialPropertyName'
p50552
sS'default'
p50553
S'h'
p50554
sS'name'
p50555
S'h_name'
p50556
sS'required'
p50557
I00
sS'group_name'
p50558
Nsa(dp50559
S'description'
p50560
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50561
sS'cpp_type'
p50562
S'bool'
p50563
sS'default'
p50564
S'1'
p50565
sS'name'
p50566
S'implicit'
p50567
sS'required'
p50568
I00
sS'group_name'
p50569
S'Advanced'
p50570
sa(dp50571
S'description'
p50572
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50573
sS'cpp_type'
p50574
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50575
sS'default'
p50576
g3
sS'name'
p50577
S'save_in'
p50578
sS'required'
p50579
I00
sS'group_name'
p50580
S'Advanced'
p50581
sa(dp50582
S'description'
p50583
S'The seed for the master random number generator\n'
p50584
sS'cpp_type'
p50585
S'unsigned int'
p50586
sS'default'
p50587
S'0'
p50588
sS'name'
p50589
S'seed'
p50590
sS'required'
p50591
I00
sS'group_name'
p50592
S'Advanced'
p50593
sa(dp50594
S'description'
p50595
g3
sS'cpp_type'
p50596
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50597
sS'default'
p50598
S'KKSSplitCHCRes'
p50599
sS'name'
p50600
S'type'
p50601
sS'required'
p50602
I00
sS'group_name'
p50603
Nsa(dp50604
S'description'
p50605
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50606
sS'cpp_type'
p50607
S'bool'
p50608
sS'default'
p50609
S'0'
p50610
sS'name'
p50611
S'use_displaced_mesh'
p50612
sS'required'
p50613
I00
sS'group_name'
p50614
S'Advanced'
p50615
sa(dp50616
S'description'
p50617
S'The name of the variable that this Kernel operates on\n'
p50618
sS'cpp_type'
p50619
S'NonlinearVariableName'
p50620
sS'default'
p50621
g3
sS'name'
p50622
S'variable'
p50623
sS'required'
p50624
I01
sS'group_name'
p50625
Nsa(dp50626
S'description'
p50627
S'Chemical potenial non-linear helper variable for the split solve\n'
p50628
sS'cpp_type'
p50629
S'std::vector<VariableName>'
p50630
sS'default'
p50631
g3
sS'name'
p50632
S'w'
p50633
sS'required'
p50634
I01
sS'group_name'
p50635
NsasS'name'
p50636
S'/Kernels/KKSSplitCHCRes'
p50637
sa(dp50638
S'description'
p50639
S'Source term for non-conserved Langevin noise\n'
p50640
sS'subblocks'
p50641
NsS'parameters'
p50642
(lp50643
(dp50644
S'description'
p50645
S'Amplitude\n'
p50646
sS'cpp_type'
p50647
S'double'
p50648
sS'default'
p50649
g3
sS'name'
p50650
S'amplitude'
p50651
sS'required'
p50652
I01
sS'group_name'
p50653
Nsa(dp50654
S'description'
p50655
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50656
sS'cpp_type'
p50657
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50658
sS'default'
p50659
g3
sS'name'
p50660
S'block'
p50661
sS'required'
p50662
I00
sS'group_name'
p50663
Nsa(dp50664
S'description'
p50665
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50666
sS'cpp_type'
p50667
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50668
sS'default'
p50669
g3
sS'name'
p50670
S'control_tags'
p50671
sS'required'
p50672
I00
sS'group_name'
p50673
S'Advanced'
p50674
sa(dp50675
S'description'
p50676
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50677
sS'cpp_type'
p50678
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50679
sS'default'
p50680
g3
sS'name'
p50681
S'diag_save_in'
p50682
sS'required'
p50683
I00
sS'group_name'
p50684
S'Advanced'
p50685
sa(dp50686
S'description'
p50687
S'Whether or not this kernel will be used as an eigen kernel\n'
p50688
sS'cpp_type'
p50689
S'bool'
p50690
sS'default'
p50691
S'0'
p50692
sS'name'
p50693
S'eigen_kernel'
p50694
sS'required'
p50695
I00
sS'group_name'
p50696
Nsa(dp50697
S'description'
p50698
S'Set the enabled status of the MooseObject.\n'
p50699
sS'cpp_type'
p50700
S'bool'
p50701
sS'default'
p50702
S'1'
p50703
sS'name'
p50704
S'enable'
p50705
sS'required'
p50706
I00
sS'group_name'
p50707
S'Advanced'
p50708
sa(dp50709
S'description'
p50710
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50711
sS'cpp_type'
p50712
S'bool'
p50713
sS'default'
p50714
S'1'
p50715
sS'name'
p50716
S'implicit'
p50717
sS'required'
p50718
I00
sS'group_name'
p50719
S'Advanced'
p50720
sa(dp50721
S'description'
p50722
S'Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n'
p50723
sS'cpp_type'
p50724
S'MaterialPropertyName'
p50725
sS'default'
p50726
S'1'
p50727
sS'name'
p50728
S'multiplier'
p50729
sS'required'
p50730
I00
sS'group_name'
p50731
Nsa(dp50732
S'description'
p50733
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50734
sS'cpp_type'
p50735
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50736
sS'default'
p50737
g3
sS'name'
p50738
S'save_in'
p50739
sS'required'
p50740
I00
sS'group_name'
p50741
S'Advanced'
p50742
sa(dp50743
S'description'
p50744
S'The seed for the master random number generator\n'
p50745
sS'cpp_type'
p50746
S'unsigned int'
p50747
sS'default'
p50748
S'0'
p50749
sS'name'
p50750
S'seed'
p50751
sS'required'
p50752
I00
sS'group_name'
p50753
S'Advanced'
p50754
sa(dp50755
S'description'
p50756
g3
sS'cpp_type'
p50757
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50758
sS'default'
p50759
S'LangevinNoise'
p50760
sS'name'
p50761
S'type'
p50762
sS'required'
p50763
I00
sS'group_name'
p50764
Nsa(dp50765
S'description'
p50766
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50767
sS'cpp_type'
p50768
S'bool'
p50769
sS'default'
p50770
S'0'
p50771
sS'name'
p50772
S'use_displaced_mesh'
p50773
sS'required'
p50774
I00
sS'group_name'
p50775
S'Advanced'
p50776
sa(dp50777
S'description'
p50778
S'The name of the variable that this Kernel operates on\n'
p50779
sS'cpp_type'
p50780
S'NonlinearVariableName'
p50781
sS'default'
p50782
g3
sS'name'
p50783
S'variable'
p50784
sS'required'
p50785
I01
sS'group_name'
p50786
NsasS'name'
p50787
S'/Kernels/LangevinNoise'
p50788
sa(dp50789
S'description'
p50790
S'Split with a variable that holds the Laplacian of a phase field variable.\n'
p50791
sS'subblocks'
p50792
NsS'parameters'
p50793
(lp50794
(dp50795
S'description'
p50796
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50797
sS'cpp_type'
p50798
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50799
sS'default'
p50800
g3
sS'name'
p50801
S'block'
p50802
sS'required'
p50803
I00
sS'group_name'
p50804
Nsa(dp50805
S'description'
p50806
S'Field variable to take the Laplacian of\n'
p50807
sS'cpp_type'
p50808
S'std::vector<VariableName>'
p50809
sS'default'
p50810
g3
sS'name'
p50811
S'c'
p50812
sS'required'
p50813
I01
sS'group_name'
p50814
Nsa(dp50815
S'description'
p50816
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50817
sS'cpp_type'
p50818
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50819
sS'default'
p50820
g3
sS'name'
p50821
S'control_tags'
p50822
sS'required'
p50823
I00
sS'group_name'
p50824
S'Advanced'
p50825
sa(dp50826
S'description'
p50827
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50828
sS'cpp_type'
p50829
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50830
sS'default'
p50831
g3
sS'name'
p50832
S'diag_save_in'
p50833
sS'required'
p50834
I00
sS'group_name'
p50835
S'Advanced'
p50836
sa(dp50837
S'description'
p50838
S'Whether or not this kernel will be used as an eigen kernel\n'
p50839
sS'cpp_type'
p50840
S'bool'
p50841
sS'default'
p50842
S'0'
p50843
sS'name'
p50844
S'eigen_kernel'
p50845
sS'required'
p50846
I00
sS'group_name'
p50847
Nsa(dp50848
S'description'
p50849
S'Set the enabled status of the MooseObject.\n'
p50850
sS'cpp_type'
p50851
S'bool'
p50852
sS'default'
p50853
S'1'
p50854
sS'name'
p50855
S'enable'
p50856
sS'required'
p50857
I00
sS'group_name'
p50858
S'Advanced'
p50859
sa(dp50860
S'description'
p50861
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50862
sS'cpp_type'
p50863
S'bool'
p50864
sS'default'
p50865
S'1'
p50866
sS'name'
p50867
S'implicit'
p50868
sS'required'
p50869
I00
sS'group_name'
p50870
S'Advanced'
p50871
sa(dp50872
S'description'
p50873
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50874
sS'cpp_type'
p50875
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50876
sS'default'
p50877
g3
sS'name'
p50878
S'save_in'
p50879
sS'required'
p50880
I00
sS'group_name'
p50881
S'Advanced'
p50882
sa(dp50883
S'description'
p50884
S'The seed for the master random number generator\n'
p50885
sS'cpp_type'
p50886
S'unsigned int'
p50887
sS'default'
p50888
S'0'
p50889
sS'name'
p50890
S'seed'
p50891
sS'required'
p50892
I00
sS'group_name'
p50893
S'Advanced'
p50894
sa(dp50895
S'description'
p50896
g3
sS'cpp_type'
p50897
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50898
sS'default'
p50899
S'LaplacianSplit'
p50900
sS'name'
p50901
S'type'
p50902
sS'required'
p50903
I00
sS'group_name'
p50904
Nsa(dp50905
S'description'
p50906
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50907
sS'cpp_type'
p50908
S'bool'
p50909
sS'default'
p50910
S'0'
p50911
sS'name'
p50912
S'use_displaced_mesh'
p50913
sS'required'
p50914
I00
sS'group_name'
p50915
S'Advanced'
p50916
sa(dp50917
S'description'
p50918
S'The name of the variable that this Kernel operates on\n'
p50919
sS'cpp_type'
p50920
S'NonlinearVariableName'
p50921
sS'default'
p50922
g3
sS'name'
p50923
S'variable'
p50924
sS'required'
p50925
I01
sS'group_name'
p50926
NsasS'name'
p50927
S'/Kernels/LaplacianSplit'
p50928
sa(dp50929
S'description'
p50930
S'Kernel that defines a body force modified by a material mask\n'
p50931
sS'subblocks'
p50932
NsS'parameters'
p50933
(lp50934
(dp50935
S'description'
p50936
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50937
sS'cpp_type'
p50938
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50939
sS'default'
p50940
g3
sS'name'
p50941
S'block'
p50942
sS'required'
p50943
I00
sS'group_name'
p50944
Nsa(dp50945
S'description'
p50946
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50947
sS'cpp_type'
p50948
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50949
sS'default'
p50950
g3
sS'name'
p50951
S'control_tags'
p50952
sS'required'
p50953
I00
sS'group_name'
p50954
S'Advanced'
p50955
sa(dp50956
S'description'
p50957
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50958
sS'cpp_type'
p50959
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50960
sS'default'
p50961
g3
sS'name'
p50962
S'diag_save_in'
p50963
sS'required'
p50964
I00
sS'group_name'
p50965
S'Advanced'
p50966
sa(dp50967
S'description'
p50968
S'Whether or not this kernel will be used as an eigen kernel\n'
p50969
sS'cpp_type'
p50970
S'bool'
p50971
sS'default'
p50972
S'0'
p50973
sS'name'
p50974
S'eigen_kernel'
p50975
sS'required'
p50976
I00
sS'group_name'
p50977
Nsa(dp50978
S'description'
p50979
S'Set the enabled status of the MooseObject.\n'
p50980
sS'cpp_type'
p50981
S'bool'
p50982
sS'default'
p50983
S'1'
p50984
sS'name'
p50985
S'enable'
p50986
sS'required'
p50987
I00
sS'group_name'
p50988
S'Advanced'
p50989
sa(dp50990
S'description'
p50991
S'A function that describes the body force\n'
p50992
sS'cpp_type'
p50993
S'FunctionName'
p50994
sS'default'
p50995
S'1'
p50996
sS'name'
p50997
S'function'
p50998
sS'required'
p50999
I00
sS'group_name'
p51000
Nsa(dp51001
S'description'
p51002
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51003
sS'cpp_type'
p51004
S'bool'
p51005
sS'default'
p51006
S'1'
p51007
sS'name'
p51008
S'implicit'
p51009
sS'required'
p51010
I00
sS'group_name'
p51011
S'Advanced'
p51012
sa(dp51013
S'description'
p51014
S'Material property defining the mask\n'
p51015
sS'cpp_type'
p51016
S'MaterialPropertyName'
p51017
sS'default'
p51018
g3
sS'name'
p51019
S'mask'
p51020
sS'required'
p51021
I00
sS'group_name'
p51022
Nsa(dp51023
S'description'
p51024
S'A postprocessor whose value is multiplied by the body force\n'
p51025
sS'cpp_type'
p51026
S'PostprocessorName'
p51027
sS'default'
p51028
g3
sS'name'
p51029
S'postprocessor'
p51030
sS'required'
p51031
I00
sS'group_name'
p51032
Nsa(dp51033
S'description'
p51034
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51035
sS'cpp_type'
p51036
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51037
sS'default'
p51038
g3
sS'name'
p51039
S'save_in'
p51040
sS'required'
p51041
I00
sS'group_name'
p51042
S'Advanced'
p51043
sa(dp51044
S'description'
p51045
S'The seed for the master random number generator\n'
p51046
sS'cpp_type'
p51047
S'unsigned int'
p51048
sS'default'
p51049
S'0'
p51050
sS'name'
p51051
S'seed'
p51052
sS'required'
p51053
I00
sS'group_name'
p51054
S'Advanced'
p51055
sa(dp51056
S'description'
p51057
g3
sS'cpp_type'
p51058
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51059
sS'default'
p51060
S'MaskedBodyForce'
p51061
sS'name'
p51062
S'type'
p51063
sS'required'
p51064
I00
sS'group_name'
p51065
Nsa(dp51066
S'description'
p51067
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51068
sS'cpp_type'
p51069
S'bool'
p51070
sS'default'
p51071
S'0'
p51072
sS'name'
p51073
S'use_displaced_mesh'
p51074
sS'required'
p51075
I00
sS'group_name'
p51076
S'Advanced'
p51077
sa(dp51078
S'description'
p51079
S'Coefficent to multiply by the body force term\n'
p51080
sS'cpp_type'
p51081
S'double'
p51082
sS'default'
p51083
S'1'
p51084
sS'name'
p51085
S'value'
p51086
sS'required'
p51087
I00
sS'group_name'
p51088
Nsa(dp51089
S'description'
p51090
S'The name of the variable that this Kernel operates on\n'
p51091
sS'cpp_type'
p51092
S'NonlinearVariableName'
p51093
sS'default'
p51094
g3
sS'name'
p51095
S'variable'
p51096
sS'required'
p51097
I01
sS'group_name'
p51098
NsasS'name'
p51099
S'/Kernels/MaskedBodyForce'
p51100
sa(dp51101
S'description'
p51102
g3
sS'subblocks'
p51103
NsS'parameters'
p51104
(lp51105
(dp51106
S'description'
p51107
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51108
sS'cpp_type'
p51109
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51110
sS'default'
p51111
g3
sS'name'
p51112
S'block'
p51113
sS'required'
p51114
I00
sS'group_name'
p51115
Nsa(dp51116
S'description'
p51117
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51118
sS'cpp_type'
p51119
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51120
sS'default'
p51121
g3
sS'name'
p51122
S'control_tags'
p51123
sS'required'
p51124
I00
sS'group_name'
p51125
S'Advanced'
p51126
sa(dp51127
S'description'
p51128
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51129
sS'cpp_type'
p51130
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51131
sS'default'
p51132
g3
sS'name'
p51133
S'diag_save_in'
p51134
sS'required'
p51135
I00
sS'group_name'
p51136
S'Advanced'
p51137
sa(dp51138
S'description'
p51139
S'Use for eigenvalue problem (true) or source problem (false)\n'
p51140
sS'cpp_type'
p51141
S'bool'
p51142
sS'default'
p51143
S'1'
p51144
sS'name'
p51145
S'eigen'
p51146
sS'required'
p51147
I00
sS'group_name'
p51148
Nsa(dp51149
S'description'
p51150
S'Whether or not this kernel will be used as an eigen kernel\n'
p51151
sS'cpp_type'
p51152
S'bool'
p51153
sS'default'
p51154
S'0'
p51155
sS'name'
p51156
S'eigen_kernel'
p51157
sS'required'
p51158
I00
sS'group_name'
p51159
Nsa(dp51160
S'description'
p51161
S'The name of the postprocessor that provides the eigenvalue.\n'
p51162
sS'cpp_type'
p51163
S'PostprocessorName'
p51164
sS'default'
p51165
S'1'
p51166
sS'name'
p51167
S'eigen_postprocessor'
p51168
sS'required'
p51169
I00
sS'group_name'
p51170
Nsa(dp51171
S'description'
p51172
S'Set the enabled status of the MooseObject.\n'
p51173
sS'cpp_type'
p51174
S'bool'
p51175
sS'default'
p51176
S'1'
p51177
sS'name'
p51178
S'enable'
p51179
sS'required'
p51180
I00
sS'group_name'
p51181
S'Advanced'
p51182
sa(dp51183
S'description'
p51184
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51185
sS'cpp_type'
p51186
S'bool'
p51187
sS'default'
p51188
S'1'
p51189
sS'name'
p51190
S'implicit'
p51191
sS'required'
p51192
I00
sS'group_name'
p51193
S'Advanced'
p51194
sa(dp51195
S'description'
p51196
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51197
sS'cpp_type'
p51198
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51199
sS'default'
p51200
g3
sS'name'
p51201
S'save_in'
p51202
sS'required'
p51203
I00
sS'group_name'
p51204
S'Advanced'
p51205
sa(dp51206
S'description'
p51207
S'The seed for the master random number generator\n'
p51208
sS'cpp_type'
p51209
S'unsigned int'
p51210
sS'default'
p51211
S'0'
p51212
sS'name'
p51213
S'seed'
p51214
sS'required'
p51215
I00
sS'group_name'
p51216
S'Advanced'
p51217
sa(dp51218
S'description'
p51219
g3
sS'cpp_type'
p51220
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51221
sS'default'
p51222
S'MassEigenKernel'
p51223
sS'name'
p51224
S'type'
p51225
sS'required'
p51226
I00
sS'group_name'
p51227
Nsa(dp51228
S'description'
p51229
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51230
sS'cpp_type'
p51231
S'bool'
p51232
sS'default'
p51233
S'0'
p51234
sS'name'
p51235
S'use_displaced_mesh'
p51236
sS'required'
p51237
I00
sS'group_name'
p51238
S'Advanced'
p51239
sa(dp51240
S'description'
p51241
S'The name of the variable that this Kernel operates on\n'
p51242
sS'cpp_type'
p51243
S'NonlinearVariableName'
p51244
sS'default'
p51245
g3
sS'name'
p51246
S'variable'
p51247
sS'required'
p51248
I01
sS'group_name'
p51249
NsasS'name'
p51250
S'/Kernels/MassEigenKernel'
p51251
sa(dp51252
S'description'
p51253
g3
sS'subblocks'
p51254
NsS'parameters'
p51255
(lp51256
(dp51257
S'description'
p51258
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51259
sS'cpp_type'
p51260
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51261
sS'default'
p51262
g3
sS'name'
p51263
S'block'
p51264
sS'required'
p51265
I00
sS'group_name'
p51266
Nsa(dp51267
S'description'
p51268
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51269
sS'cpp_type'
p51270
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51271
sS'default'
p51272
g3
sS'name'
p51273
S'control_tags'
p51274
sS'required'
p51275
I00
sS'group_name'
p51276
S'Advanced'
p51277
sa(dp51278
S'description'
p51279
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51280
sS'cpp_type'
p51281
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51282
sS'default'
p51283
g3
sS'name'
p51284
S'diag_save_in'
p51285
sS'required'
p51286
I00
sS'group_name'
p51287
S'Advanced'
p51288
sa(dp51289
S'description'
p51290
S'Whether or not this kernel will be used as an eigen kernel\n'
p51291
sS'cpp_type'
p51292
S'bool'
p51293
sS'default'
p51294
S'0'
p51295
sS'name'
p51296
S'eigen_kernel'
p51297
sS'required'
p51298
I00
sS'group_name'
p51299
Nsa(dp51300
S'description'
p51301
S'Set the enabled status of the MooseObject.\n'
p51302
sS'cpp_type'
p51303
S'bool'
p51304
sS'default'
p51305
S'1'
p51306
sS'name'
p51307
S'enable'
p51308
sS'required'
p51309
I00
sS'group_name'
p51310
S'Advanced'
p51311
sa(dp51312
S'description'
p51313
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51314
sS'cpp_type'
p51315
S'bool'
p51316
sS'default'
p51317
S'1'
p51318
sS'name'
p51319
S'implicit'
p51320
sS'required'
p51321
I00
sS'group_name'
p51322
S'Advanced'
p51323
sa(dp51324
S'description'
p51325
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51326
sS'cpp_type'
p51327
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51328
sS'default'
p51329
g3
sS'name'
p51330
S'save_in'
p51331
sS'required'
p51332
I00
sS'group_name'
p51333
S'Advanced'
p51334
sa(dp51335
S'description'
p51336
S'The seed for the master random number generator\n'
p51337
sS'cpp_type'
p51338
S'unsigned int'
p51339
sS'default'
p51340
S'0'
p51341
sS'name'
p51342
S'seed'
p51343
sS'required'
p51344
I00
sS'group_name'
p51345
S'Advanced'
p51346
sa(dp51347
S'description'
p51348
g3
sS'cpp_type'
p51349
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51350
sS'default'
p51351
S'MassLumpedTimeDerivative'
p51352
sS'name'
p51353
S'type'
p51354
sS'required'
p51355
I00
sS'group_name'
p51356
Nsa(dp51357
S'description'
p51358
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51359
sS'cpp_type'
p51360
S'bool'
p51361
sS'default'
p51362
S'0'
p51363
sS'name'
p51364
S'use_displaced_mesh'
p51365
sS'required'
p51366
I00
sS'group_name'
p51367
S'Advanced'
p51368
sa(dp51369
S'description'
p51370
S'The name of the variable that this Kernel operates on\n'
p51371
sS'cpp_type'
p51372
S'NonlinearVariableName'
p51373
sS'default'
p51374
g3
sS'name'
p51375
S'variable'
p51376
sS'required'
p51377
I01
sS'group_name'
p51378
NsasS'name'
p51379
S'/Kernels/MassLumpedTimeDerivative'
p51380
sa(dp51381
S'description'
p51382
S'Diffusion equation Kernel that takes an anisotropic Diffusivity from a material property\n'
p51383
sS'subblocks'
p51384
NsS'parameters'
p51385
(lp51386
(dp51387
S'description'
p51388
S'The name of the diffusivity\n'
p51389
sS'cpp_type'
p51390
S'MaterialPropertyName'
p51391
sS'default'
p51392
S'D'
p51393
sS'name'
p51394
S'D_name'
p51395
sS'required'
p51396
I00
sS'group_name'
p51397
Nsa(dp51398
S'description'
p51399
S'Vector of arguments of the diffusivity\n'
p51400
sS'cpp_type'
p51401
S'std::vector<VariableName>'
p51402
sS'default'
p51403
g3
sS'name'
p51404
S'args'
p51405
sS'required'
p51406
I00
sS'group_name'
p51407
Nsa(dp51408
S'description'
p51409
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51410
sS'cpp_type'
p51411
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51412
sS'default'
p51413
g3
sS'name'
p51414
S'block'
p51415
sS'required'
p51416
I00
sS'group_name'
p51417
Nsa(dp51418
S'description'
p51419
S"Coupled concentration variable for kernel to operate on; if this is not specified, the kernel's nonlinear variable will be used as usual\n"
p51420
sS'cpp_type'
p51421
S'std::vector<VariableName>'
p51422
sS'default'
p51423
g3
sS'name'
p51424
S'conc'
p51425
sS'required'
p51426
I00
sS'group_name'
p51427
Nsa(dp51428
S'description'
p51429
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51430
sS'cpp_type'
p51431
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51432
sS'default'
p51433
g3
sS'name'
p51434
S'control_tags'
p51435
sS'required'
p51436
I00
sS'group_name'
p51437
S'Advanced'
p51438
sa(dp51439
S'description'
p51440
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51441
sS'cpp_type'
p51442
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51443
sS'default'
p51444
g3
sS'name'
p51445
S'diag_save_in'
p51446
sS'required'
p51447
I00
sS'group_name'
p51448
S'Advanced'
p51449
sa(dp51450
S'description'
p51451
S'Whether or not this kernel will be used as an eigen kernel\n'
p51452
sS'cpp_type'
p51453
S'bool'
p51454
sS'default'
p51455
S'0'
p51456
sS'name'
p51457
S'eigen_kernel'
p51458
sS'required'
p51459
I00
sS'group_name'
p51460
Nsa(dp51461
S'description'
p51462
S'Set the enabled status of the MooseObject.\n'
p51463
sS'cpp_type'
p51464
S'bool'
p51465
sS'default'
p51466
S'1'
p51467
sS'name'
p51468
S'enable'
p51469
sS'required'
p51470
I00
sS'group_name'
p51471
S'Advanced'
p51472
sa(dp51473
S'description'
p51474
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51475
sS'cpp_type'
p51476
S'bool'
p51477
sS'default'
p51478
S'1'
p51479
sS'name'
p51480
S'implicit'
p51481
sS'required'
p51482
I00
sS'group_name'
p51483
S'Advanced'
p51484
sa(dp51485
S'description'
p51486
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51487
sS'cpp_type'
p51488
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51489
sS'default'
p51490
g3
sS'name'
p51491
S'save_in'
p51492
sS'required'
p51493
I00
sS'group_name'
p51494
S'Advanced'
p51495
sa(dp51496
S'description'
p51497
S'The seed for the master random number generator\n'
p51498
sS'cpp_type'
p51499
S'unsigned int'
p51500
sS'default'
p51501
S'0'
p51502
sS'name'
p51503
S'seed'
p51504
sS'required'
p51505
I00
sS'group_name'
p51506
S'Advanced'
p51507
sa(dp51508
S'description'
p51509
g3
sS'cpp_type'
p51510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51511
sS'default'
p51512
S'MatAnisoDiffusion'
p51513
sS'name'
p51514
S'type'
p51515
sS'required'
p51516
I00
sS'group_name'
p51517
Nsa(dp51518
S'description'
p51519
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51520
sS'cpp_type'
p51521
S'bool'
p51522
sS'default'
p51523
S'0'
p51524
sS'name'
p51525
S'use_displaced_mesh'
p51526
sS'required'
p51527
I00
sS'group_name'
p51528
S'Advanced'
p51529
sa(dp51530
S'description'
p51531
S'The name of the variable that this Kernel operates on\n'
p51532
sS'cpp_type'
p51533
S'NonlinearVariableName'
p51534
sS'default'
p51535
g3
sS'name'
p51536
S'variable'
p51537
sS'required'
p51538
I01
sS'group_name'
p51539
NsasS'name'
p51540
S'/Kernels/MatAnisoDiffusion'
p51541
sa(dp51542
S'description'
p51543
S'Diffusion equation Kernel that takes an isotropic Diffusivity from a material property\n'
p51544
sS'subblocks'
p51545
NsS'parameters'
p51546
(lp51547
(dp51548
S'description'
p51549
S'The name of the diffusivity\n'
p51550
sS'cpp_type'
p51551
S'MaterialPropertyName'
p51552
sS'default'
p51553
S'D'
p51554
sS'name'
p51555
S'D_name'
p51556
sS'required'
p51557
I00
sS'group_name'
p51558
Nsa(dp51559
S'description'
p51560
S'Vector of arguments of the diffusivity\n'
p51561
sS'cpp_type'
p51562
S'std::vector<VariableName>'
p51563
sS'default'
p51564
g3
sS'name'
p51565
S'args'
p51566
sS'required'
p51567
I00
sS'group_name'
p51568
Nsa(dp51569
S'description'
p51570
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51571
sS'cpp_type'
p51572
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51573
sS'default'
p51574
g3
sS'name'
p51575
S'block'
p51576
sS'required'
p51577
I00
sS'group_name'
p51578
Nsa(dp51579
S'description'
p51580
S"Coupled concentration variable for kernel to operate on; if this is not specified, the kernel's nonlinear variable will be used as usual\n"
p51581
sS'cpp_type'
p51582
S'std::vector<VariableName>'
p51583
sS'default'
p51584
g3
sS'name'
p51585
S'conc'
p51586
sS'required'
p51587
I00
sS'group_name'
p51588
Nsa(dp51589
S'description'
p51590
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51591
sS'cpp_type'
p51592
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51593
sS'default'
p51594
g3
sS'name'
p51595
S'control_tags'
p51596
sS'required'
p51597
I00
sS'group_name'
p51598
S'Advanced'
p51599
sa(dp51600
S'description'
p51601
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51602
sS'cpp_type'
p51603
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51604
sS'default'
p51605
g3
sS'name'
p51606
S'diag_save_in'
p51607
sS'required'
p51608
I00
sS'group_name'
p51609
S'Advanced'
p51610
sa(dp51611
S'description'
p51612
S'Whether or not this kernel will be used as an eigen kernel\n'
p51613
sS'cpp_type'
p51614
S'bool'
p51615
sS'default'
p51616
S'0'
p51617
sS'name'
p51618
S'eigen_kernel'
p51619
sS'required'
p51620
I00
sS'group_name'
p51621
Nsa(dp51622
S'description'
p51623
S'Set the enabled status of the MooseObject.\n'
p51624
sS'cpp_type'
p51625
S'bool'
p51626
sS'default'
p51627
S'1'
p51628
sS'name'
p51629
S'enable'
p51630
sS'required'
p51631
I00
sS'group_name'
p51632
S'Advanced'
p51633
sa(dp51634
S'description'
p51635
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51636
sS'cpp_type'
p51637
S'bool'
p51638
sS'default'
p51639
S'1'
p51640
sS'name'
p51641
S'implicit'
p51642
sS'required'
p51643
I00
sS'group_name'
p51644
S'Advanced'
p51645
sa(dp51646
S'description'
p51647
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51648
sS'cpp_type'
p51649
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51650
sS'default'
p51651
g3
sS'name'
p51652
S'save_in'
p51653
sS'required'
p51654
I00
sS'group_name'
p51655
S'Advanced'
p51656
sa(dp51657
S'description'
p51658
S'The seed for the master random number generator\n'
p51659
sS'cpp_type'
p51660
S'unsigned int'
p51661
sS'default'
p51662
S'0'
p51663
sS'name'
p51664
S'seed'
p51665
sS'required'
p51666
I00
sS'group_name'
p51667
S'Advanced'
p51668
sa(dp51669
S'description'
p51670
g3
sS'cpp_type'
p51671
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51672
sS'default'
p51673
S'MatDiffusion'
p51674
sS'name'
p51675
S'type'
p51676
sS'required'
p51677
I00
sS'group_name'
p51678
Nsa(dp51679
S'description'
p51680
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51681
sS'cpp_type'
p51682
S'bool'
p51683
sS'default'
p51684
S'0'
p51685
sS'name'
p51686
S'use_displaced_mesh'
p51687
sS'required'
p51688
I00
sS'group_name'
p51689
S'Advanced'
p51690
sa(dp51691
S'description'
p51692
S'The name of the variable that this Kernel operates on\n'
p51693
sS'cpp_type'
p51694
S'NonlinearVariableName'
p51695
sS'default'
p51696
g3
sS'name'
p51697
S'variable'
p51698
sS'required'
p51699
I01
sS'group_name'
p51700
NsasS'name'
p51701
S'/Kernels/MatDiffusion'
p51702
sa(dp51703
S'description'
p51704
S'Kernel to add -L*v, where L=reaction rate, v=variable\n'
p51705
sS'subblocks'
p51706
NsS'parameters'
p51707
(lp51708
(dp51709
S'description'
p51710
S'Vector of nonlinear variable arguments this object depends on\n'
p51711
sS'cpp_type'
p51712
S'std::vector<VariableName>'
p51713
sS'default'
p51714
g3
sS'name'
p51715
S'args'
p51716
sS'required'
p51717
I00
sS'group_name'
p51718
Nsa(dp51719
S'description'
p51720
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51721
sS'cpp_type'
p51722
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51723
sS'default'
p51724
g3
sS'name'
p51725
S'block'
p51726
sS'required'
p51727
I00
sS'group_name'
p51728
Nsa(dp51729
S'description'
p51730
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51731
sS'cpp_type'
p51732
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51733
sS'default'
p51734
g3
sS'name'
p51735
S'control_tags'
p51736
sS'required'
p51737
I00
sS'group_name'
p51738
S'Advanced'
p51739
sa(dp51740
S'description'
p51741
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51742
sS'cpp_type'
p51743
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51744
sS'default'
p51745
g3
sS'name'
p51746
S'diag_save_in'
p51747
sS'required'
p51748
I00
sS'group_name'
p51749
S'Advanced'
p51750
sa(dp51751
S'description'
p51752
S'Whether or not this kernel will be used as an eigen kernel\n'
p51753
sS'cpp_type'
p51754
S'bool'
p51755
sS'default'
p51756
S'0'
p51757
sS'name'
p51758
S'eigen_kernel'
p51759
sS'required'
p51760
I00
sS'group_name'
p51761
Nsa(dp51762
S'description'
p51763
S'Set the enabled status of the MooseObject.\n'
p51764
sS'cpp_type'
p51765
S'bool'
p51766
sS'default'
p51767
S'1'
p51768
sS'name'
p51769
S'enable'
p51770
sS'required'
p51771
I00
sS'group_name'
p51772
S'Advanced'
p51773
sa(dp51774
S'description'
p51775
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51776
sS'cpp_type'
p51777
S'bool'
p51778
sS'default'
p51779
S'1'
p51780
sS'name'
p51781
S'implicit'
p51782
sS'required'
p51783
I00
sS'group_name'
p51784
S'Advanced'
p51785
sa(dp51786
S'description'
p51787
S'The reaction rate used with the kernel\n'
p51788
sS'cpp_type'
p51789
S'MaterialPropertyName'
p51790
sS'default'
p51791
S'L'
p51792
sS'name'
p51793
S'mob_name'
p51794
sS'required'
p51795
I00
sS'group_name'
p51796
Nsa(dp51797
S'description'
p51798
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51799
sS'cpp_type'
p51800
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51801
sS'default'
p51802
g3
sS'name'
p51803
S'save_in'
p51804
sS'required'
p51805
I00
sS'group_name'
p51806
S'Advanced'
p51807
sa(dp51808
S'description'
p51809
S'The seed for the master random number generator\n'
p51810
sS'cpp_type'
p51811
S'unsigned int'
p51812
sS'default'
p51813
S'0'
p51814
sS'name'
p51815
S'seed'
p51816
sS'required'
p51817
I00
sS'group_name'
p51818
S'Advanced'
p51819
sa(dp51820
S'description'
p51821
g3
sS'cpp_type'
p51822
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51823
sS'default'
p51824
S'MatReaction'
p51825
sS'name'
p51826
S'type'
p51827
sS'required'
p51828
I00
sS'group_name'
p51829
Nsa(dp51830
S'description'
p51831
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51832
sS'cpp_type'
p51833
S'bool'
p51834
sS'default'
p51835
S'0'
p51836
sS'name'
p51837
S'use_displaced_mesh'
p51838
sS'required'
p51839
I00
sS'group_name'
p51840
S'Advanced'
p51841
sa(dp51842
S'description'
p51843
S"Set this to make v a coupled variable, otherwise it will use the kernel's nonlinear variable for v\n"
p51844
sS'cpp_type'
p51845
S'std::vector<VariableName>'
p51846
sS'default'
p51847
g3
sS'name'
p51848
S'v'
p51849
sS'required'
p51850
I00
sS'group_name'
p51851
Nsa(dp51852
S'description'
p51853
S'The name of the variable that this Kernel operates on\n'
p51854
sS'cpp_type'
p51855
S'NonlinearVariableName'
p51856
sS'default'
p51857
g3
sS'name'
p51858
S'variable'
p51859
sS'required'
p51860
I01
sS'group_name'
p51861
NsasS'name'
p51862
S'/Kernels/MatReaction'
p51863
sa(dp51864
S'description'
p51865
S'Class used for testing derivatives of a material property.\n'
p51866
sS'subblocks'
p51867
NsS'parameters'
p51868
(lp51869
(dp51870
S'description'
p51871
S'List of variables the material property depends on\n'
p51872
sS'cpp_type'
p51873
S'std::vector<VariableName>'
p51874
sS'default'
p51875
g3
sS'name'
p51876
S'args'
p51877
sS'required'
p51878
I01
sS'group_name'
p51879
Nsa(dp51880
S'description'
p51881
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51882
sS'cpp_type'
p51883
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51884
sS'default'
p51885
g3
sS'name'
p51886
S'block'
p51887
sS'required'
p51888
I00
sS'group_name'
p51889
Nsa(dp51890
S'description'
p51891
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51892
sS'cpp_type'
p51893
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51894
sS'default'
p51895
g3
sS'name'
p51896
S'control_tags'
p51897
sS'required'
p51898
I00
sS'group_name'
p51899
S'Advanced'
p51900
sa(dp51901
S'description'
p51902
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51903
sS'cpp_type'
p51904
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51905
sS'default'
p51906
g3
sS'name'
p51907
S'diag_save_in'
p51908
sS'required'
p51909
I00
sS'group_name'
p51910
S'Advanced'
p51911
sa(dp51912
S'description'
p51913
S'Whether or not this kernel will be used as an eigen kernel\n'
p51914
sS'cpp_type'
p51915
S'bool'
p51916
sS'default'
p51917
S'0'
p51918
sS'name'
p51919
S'eigen_kernel'
p51920
sS'required'
p51921
I00
sS'group_name'
p51922
Nsa(dp51923
S'description'
p51924
S'Set the enabled status of the MooseObject.\n'
p51925
sS'cpp_type'
p51926
S'bool'
p51927
sS'default'
p51928
S'1'
p51929
sS'name'
p51930
S'enable'
p51931
sS'required'
p51932
I00
sS'group_name'
p51933
S'Advanced'
p51934
sa(dp51935
S'description'
p51936
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51937
sS'cpp_type'
p51938
S'bool'
p51939
sS'default'
p51940
S'1'
p51941
sS'name'
p51942
S'implicit'
p51943
sS'required'
p51944
I00
sS'group_name'
p51945
S'Advanced'
p51946
sa(dp51947
S'description'
p51948
S'Name of material property for which derivatives are to be tested.\n'
p51949
sS'cpp_type'
p51950
S'MaterialPropertyName'
p51951
sS'default'
p51952
g3
sS'name'
p51953
S'material_property'
p51954
sS'required'
p51955
I01
sS'group_name'
p51956
Nsa(dp51957
S'description'
p51958
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51959
sS'cpp_type'
p51960
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51961
sS'default'
p51962
g3
sS'name'
p51963
S'save_in'
p51964
sS'required'
p51965
I00
sS'group_name'
p51966
S'Advanced'
p51967
sa(dp51968
S'description'
p51969
S'The seed for the master random number generator\n'
p51970
sS'cpp_type'
p51971
S'unsigned int'
p51972
sS'default'
p51973
S'0'
p51974
sS'name'
p51975
S'seed'
p51976
sS'required'
p51977
I00
sS'group_name'
p51978
S'Advanced'
p51979
sa(dp51980
S'description'
p51981
g3
sS'cpp_type'
p51982
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51983
sS'default'
p51984
S'MaterialDerivativeTestKernel'
p51985
sS'name'
p51986
S'type'
p51987
sS'required'
p51988
I00
sS'group_name'
p51989
Nsa(dp51990
S'description'
p51991
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51992
sS'cpp_type'
p51993
S'bool'
p51994
sS'default'
p51995
S'0'
p51996
sS'name'
p51997
S'use_displaced_mesh'
p51998
sS'required'
p51999
I00
sS'group_name'
p52000
S'Advanced'
p52001
sa(dp52002
S'description'
p52003
S'The name of the variable that this Kernel operates on\n'
p52004
sS'cpp_type'
p52005
S'NonlinearVariableName'
p52006
sS'default'
p52007
g3
sS'name'
p52008
S'variable'
p52009
sS'required'
p52010
I01
sS'group_name'
p52011
NsasS'name'
p52012
S'/Kernels/MaterialDerivativeTestKernel'
p52013
sa(dp52014
S'description'
p52015
g3
sS'subblocks'
p52016
NsS'parameters'
p52017
(lp52018
(dp52019
S'description'
p52020
S'The 3 Cosserat rotation variables\n'
p52021
sS'cpp_type'
p52022
S'std::vector<VariableName>'
p52023
sS'default'
p52024
g3
sS'name'
p52025
S'Cosserat_rotations'
p52026
sS'required'
p52027
I01
sS'group_name'
p52028
Nsa(dp52029
S'description'
p52030
S'Name appended to material properties to make them unique\n'
p52031
sS'cpp_type'
p52032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52033
sS'default'
p52034
g3
sS'name'
p52035
S'appended_property_name'
p52036
sS'required'
p52037
I00
sS'group_name'
p52038
Nsa(dp52039
S'description'
p52040
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52041
sS'cpp_type'
p52042
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52043
sS'default'
p52044
g3
sS'name'
p52045
S'block'
p52046
sS'required'
p52047
I00
sS'group_name'
p52048
Nsa(dp52049
S'description'
p52050
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p52051
sS'cpp_type'
p52052
S'unsigned int'
p52053
sS'default'
p52054
g3
sS'name'
p52055
S'component'
p52056
sS'required'
p52057
I01
sS'group_name'
p52058
Nsa(dp52059
S'description'
p52060
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52061
sS'cpp_type'
p52062
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52063
sS'default'
p52064
g3
sS'name'
p52065
S'control_tags'
p52066
sS'required'
p52067
I00
sS'group_name'
p52068
S'Advanced'
p52069
sa(dp52070
S'description'
p52071
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52072
sS'cpp_type'
p52073
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52074
sS'default'
p52075
g3
sS'name'
p52076
S'diag_save_in'
p52077
sS'required'
p52078
I00
sS'group_name'
p52079
S'Advanced'
p52080
sa(dp52081
S'description'
p52082
S'The 3 displacement variables\n'
p52083
sS'cpp_type'
p52084
S'std::vector<VariableName>'
p52085
sS'default'
p52086
g3
sS'name'
p52087
S'displacements'
p52088
sS'required'
p52089
I01
sS'group_name'
p52090
Nsa(dp52091
S'description'
p52092
S'Whether or not this kernel will be used as an eigen kernel\n'
p52093
sS'cpp_type'
p52094
S'bool'
p52095
sS'default'
p52096
S'0'
p52097
sS'name'
p52098
S'eigen_kernel'
p52099
sS'required'
p52100
I00
sS'group_name'
p52101
Nsa(dp52102
S'description'
p52103
S'Set the enabled status of the MooseObject.\n'
p52104
sS'cpp_type'
p52105
S'bool'
p52106
sS'default'
p52107
S'1'
p52108
sS'name'
p52109
S'enable'
p52110
sS'required'
p52111
I00
sS'group_name'
p52112
S'Advanced'
p52113
sa(dp52114
S'description'
p52115
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52116
sS'cpp_type'
p52117
S'bool'
p52118
sS'default'
p52119
S'1'
p52120
sS'name'
p52121
S'implicit'
p52122
sS'required'
p52123
I00
sS'group_name'
p52124
S'Advanced'
p52125
sa(dp52126
S'description'
p52127
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52128
sS'cpp_type'
p52129
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52130
sS'default'
p52131
g3
sS'name'
p52132
S'save_in'
p52133
sS'required'
p52134
I00
sS'group_name'
p52135
S'Advanced'
p52136
sa(dp52137
S'description'
p52138
S'The seed for the master random number generator\n'
p52139
sS'cpp_type'
p52140
S'unsigned int'
p52141
sS'default'
p52142
S'0'
p52143
sS'name'
p52144
S'seed'
p52145
sS'required'
p52146
I00
sS'group_name'
p52147
S'Advanced'
p52148
sa(dp52149
S'description'
p52150
g3
sS'cpp_type'
p52151
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52152
sS'default'
p52153
S'MomentBalancing'
p52154
sS'name'
p52155
S'type'
p52156
sS'required'
p52157
I00
sS'group_name'
p52158
Nsa(dp52159
S'description'
p52160
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52161
sS'cpp_type'
p52162
S'bool'
p52163
sS'default'
p52164
S'0'
p52165
sS'name'
p52166
S'use_displaced_mesh'
p52167
sS'required'
p52168
I00
sS'group_name'
p52169
S'Advanced'
p52170
sa(dp52171
S'description'
p52172
S'The name of the variable that this Kernel operates on\n'
p52173
sS'cpp_type'
p52174
S'NonlinearVariableName'
p52175
sS'default'
p52176
g3
sS'name'
p52177
S'variable'
p52178
sS'required'
p52179
I01
sS'group_name'
p52180
NsasS'name'
p52181
S'/Kernels/MomentBalancing'
p52182
sa(dp52183
S'description'
p52184
S'Adds rigid mody motion to grains\n'
p52185
sS'subblocks'
p52186
NsS'parameters'
p52187
(lp52188
(dp52189
S'description'
p52190
S'Optional parameter that allows the user to define type of force density under consideration\n'
p52191
sS'cpp_type'
p52192
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52193
sS'default'
p52194
g3
sS'name'
p52195
S'base_name'
p52196
sS'required'
p52197
I00
sS'group_name'
p52198
Nsa(dp52199
S'description'
p52200
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52201
sS'cpp_type'
p52202
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52203
sS'default'
p52204
g3
sS'name'
p52205
S'block'
p52206
sS'required'
p52207
I00
sS'group_name'
p52208
Nsa(dp52209
S'description'
p52210
S'Concentration\n'
p52211
sS'cpp_type'
p52212
S'std::vector<VariableName>'
p52213
sS'default'
p52214
g3
sS'name'
p52215
S'c'
p52216
sS'required'
p52217
I01
sS'group_name'
p52218
Nsa(dp52219
S'description'
p52220
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52221
sS'cpp_type'
p52222
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52223
sS'default'
p52224
g3
sS'name'
p52225
S'control_tags'
p52226
sS'required'
p52227
I00
sS'group_name'
p52228
S'Advanced'
p52229
sa(dp52230
S'description'
p52231
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52232
sS'cpp_type'
p52233
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52234
sS'default'
p52235
g3
sS'name'
p52236
S'diag_save_in'
p52237
sS'required'
p52238
I00
sS'group_name'
p52239
S'Advanced'
p52240
sa(dp52241
S'description'
p52242
S'Whether or not this kernel will be used as an eigen kernel\n'
p52243
sS'cpp_type'
p52244
S'bool'
p52245
sS'default'
p52246
S'0'
p52247
sS'name'
p52248
S'eigen_kernel'
p52249
sS'required'
p52250
I00
sS'group_name'
p52251
Nsa(dp52252
S'description'
p52253
S'Set the enabled status of the MooseObject.\n'
p52254
sS'cpp_type'
p52255
S'bool'
p52256
sS'default'
p52257
S'1'
p52258
sS'name'
p52259
S'enable'
p52260
sS'required'
p52261
I00
sS'group_name'
p52262
S'Advanced'
p52263
sa(dp52264
S'description'
p52265
S'UserObject for getting force and torque acting on grains\n'
p52266
sS'cpp_type'
p52267
S'UserObjectName'
p52268
sS'default'
p52269
g3
sS'name'
p52270
S'grain_force'
p52271
sS'required'
p52272
I01
sS'group_name'
p52273
Nsa(dp52274
S'description'
p52275
S'The FeatureFloodCount UserObject to get values from.\n'
p52276
sS'cpp_type'
p52277
S'UserObjectName'
p52278
sS'default'
p52279
g3
sS'name'
p52280
S'grain_tracker_object'
p52281
sS'required'
p52282
I01
sS'group_name'
p52283
Nsa(dp52284
S'description'
p52285
S'The feature volume VectorPostprocessorValue.\n'
p52286
sS'cpp_type'
p52287
S'VectorPostprocessorName'
p52288
sS'default'
p52289
g3
sS'name'
p52290
S'grain_volumes'
p52291
sS'required'
p52292
I01
sS'group_name'
p52293
Nsa(dp52294
S'description'
p52295
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52296
sS'cpp_type'
p52297
S'bool'
p52298
sS'default'
p52299
S'1'
p52300
sS'name'
p52301
S'implicit'
p52302
sS'required'
p52303
I00
sS'group_name'
p52304
S'Advanced'
p52305
sa(dp52306
S'description'
p52307
S'Array of coupled variable names (num_name)\n'
p52308
sS'cpp_type'
p52309
S'unsigned int'
p52310
sS'default'
p52311
g3
sS'name'
p52312
S'op_num'
p52313
sS'required'
p52314
I00
sS'group_name'
p52315
Nsa(dp52316
S'description'
p52317
S'constant value characterizing grain rotation\n'
p52318
sS'cpp_type'
p52319
S'double'
p52320
sS'default'
p52321
S'1'
p52322
sS'name'
p52323
S'rotation_constant'
p52324
sS'required'
p52325
I00
sS'group_name'
p52326
Nsa(dp52327
S'description'
p52328
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52329
sS'cpp_type'
p52330
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52331
sS'default'
p52332
g3
sS'name'
p52333
S'save_in'
p52334
sS'required'
p52335
I00
sS'group_name'
p52336
S'Advanced'
p52337
sa(dp52338
S'description'
p52339
S'The seed for the master random number generator\n'
p52340
sS'cpp_type'
p52341
S'unsigned int'
p52342
sS'default'
p52343
S'0'
p52344
sS'name'
p52345
S'seed'
p52346
sS'required'
p52347
I00
sS'group_name'
p52348
S'Advanced'
p52349
sa(dp52350
S'description'
p52351
S'constant value characterizing grain translation\n'
p52352
sS'cpp_type'
p52353
S'double'
p52354
sS'default'
p52355
S'500'
p52356
sS'name'
p52357
S'translation_constant'
p52358
sS'required'
p52359
I00
sS'group_name'
p52360
Nsa(dp52361
S'description'
p52362
g3
sS'cpp_type'
p52363
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52364
sS'default'
p52365
S'MultiGrainRigidBodyMotion'
p52366
sS'name'
p52367
S'type'
p52368
sS'required'
p52369
I00
sS'group_name'
p52370
Nsa(dp52371
S'description'
p52372
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52373
sS'cpp_type'
p52374
S'bool'
p52375
sS'default'
p52376
S'0'
p52377
sS'name'
p52378
S'use_displaced_mesh'
p52379
sS'required'
p52380
I00
sS'group_name'
p52381
S'Advanced'
p52382
sa(dp52383
S'description'
p52384
S'Array of coupled variable names\n'
p52385
sS'cpp_type'
p52386
S'std::vector<VariableName>'
p52387
sS'default'
p52388
g3
sS'name'
p52389
S'v'
p52390
sS'required'
p52391
I01
sS'group_name'
p52392
Nsa(dp52393
S'description'
p52394
S'Array of coupled variable names (base_name)\n'
p52395
sS'cpp_type'
p52396
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52397
sS'default'
p52398
g3
sS'name'
p52399
S'var_name_base'
p52400
sS'required'
p52401
I00
sS'group_name'
p52402
Nsa(dp52403
S'description'
p52404
S'The name of the variable that this Kernel operates on\n'
p52405
sS'cpp_type'
p52406
S'NonlinearVariableName'
p52407
sS'default'
p52408
g3
sS'name'
p52409
S'variable'
p52410
sS'required'
p52411
I01
sS'group_name'
p52412
NsasS'name'
p52413
S'/Kernels/MultiGrainRigidBodyMotion'
p52414
sa(dp52415
S'description'
p52416
S'Kernel that sets a zero residual.\n'
p52417
sS'subblocks'
p52418
NsS'parameters'
p52419
(lp52420
(dp52421
S'description'
p52422
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52423
sS'cpp_type'
p52424
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52425
sS'default'
p52426
g3
sS'name'
p52427
S'block'
p52428
sS'required'
p52429
I00
sS'group_name'
p52430
Nsa(dp52431
S'description'
p52432
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52433
sS'cpp_type'
p52434
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52435
sS'default'
p52436
g3
sS'name'
p52437
S'control_tags'
p52438
sS'required'
p52439
I00
sS'group_name'
p52440
S'Advanced'
p52441
sa(dp52442
S'description'
p52443
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52444
sS'cpp_type'
p52445
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52446
sS'default'
p52447
g3
sS'name'
p52448
S'diag_save_in'
p52449
sS'required'
p52450
I00
sS'group_name'
p52451
S'Advanced'
p52452
sa(dp52453
S'description'
p52454
S'Whether or not this kernel will be used as an eigen kernel\n'
p52455
sS'cpp_type'
p52456
S'bool'
p52457
sS'default'
p52458
S'0'
p52459
sS'name'
p52460
S'eigen_kernel'
p52461
sS'required'
p52462
I00
sS'group_name'
p52463
Nsa(dp52464
S'description'
p52465
S'Set the enabled status of the MooseObject.\n'
p52466
sS'cpp_type'
p52467
S'bool'
p52468
sS'default'
p52469
S'1'
p52470
sS'name'
p52471
S'enable'
p52472
sS'required'
p52473
I00
sS'group_name'
p52474
S'Advanced'
p52475
sa(dp52476
S'description'
p52477
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52478
sS'cpp_type'
p52479
S'bool'
p52480
sS'default'
p52481
S'1'
p52482
sS'name'
p52483
S'implicit'
p52484
sS'required'
p52485
I00
sS'group_name'
p52486
S'Advanced'
p52487
sa(dp52488
S'description'
p52489
S'On diagonal Jacobian fill term to retain an invertable matrix for the preconditioner\n'
p52490
sS'cpp_type'
p52491
S'double'
p52492
sS'default'
p52493
S'1e-09'
p52494
sS'name'
p52495
S'jacobian_fill'
p52496
sS'required'
p52497
I00
sS'group_name'
p52498
Nsa(dp52499
S'description'
p52500
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52501
sS'cpp_type'
p52502
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52503
sS'default'
p52504
g3
sS'name'
p52505
S'save_in'
p52506
sS'required'
p52507
I00
sS'group_name'
p52508
S'Advanced'
p52509
sa(dp52510
S'description'
p52511
S'The seed for the master random number generator\n'
p52512
sS'cpp_type'
p52513
S'unsigned int'
p52514
sS'default'
p52515
S'0'
p52516
sS'name'
p52517
S'seed'
p52518
sS'required'
p52519
I00
sS'group_name'
p52520
S'Advanced'
p52521
sa(dp52522
S'description'
p52523
g3
sS'cpp_type'
p52524
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52525
sS'default'
p52526
S'NullKernel'
p52527
sS'name'
p52528
S'type'
p52529
sS'required'
p52530
I00
sS'group_name'
p52531
Nsa(dp52532
S'description'
p52533
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52534
sS'cpp_type'
p52535
S'bool'
p52536
sS'default'
p52537
S'0'
p52538
sS'name'
p52539
S'use_displaced_mesh'
p52540
sS'required'
p52541
I00
sS'group_name'
p52542
S'Advanced'
p52543
sa(dp52544
S'description'
p52545
S'The name of the variable that this Kernel operates on\n'
p52546
sS'cpp_type'
p52547
S'NonlinearVariableName'
p52548
sS'default'
p52549
g3
sS'name'
p52550
S'variable'
p52551
sS'required'
p52552
I01
sS'group_name'
p52553
NsasS'name'
p52554
S'/Kernels/NullKernel'
p52555
sa(dp52556
S'description'
p52557
S'Apply pressure in the out-of-plane direction in 2D plane stress or generalized plane strain models \n'
p52558
sS'subblocks'
p52559
NsS'parameters'
p52560
(lp52561
(dp52562
S'description'
p52563
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52564
sS'cpp_type'
p52565
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52566
sS'default'
p52567
g3
sS'name'
p52568
S'block'
p52569
sS'required'
p52570
I00
sS'group_name'
p52571
Nsa(dp52572
S'description'
p52573
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52574
sS'cpp_type'
p52575
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52576
sS'default'
p52577
g3
sS'name'
p52578
S'control_tags'
p52579
sS'required'
p52580
I00
sS'group_name'
p52581
S'Advanced'
p52582
sa(dp52583
S'description'
p52584
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52585
sS'cpp_type'
p52586
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52587
sS'default'
p52588
g3
sS'name'
p52589
S'diag_save_in'
p52590
sS'required'
p52591
I00
sS'group_name'
p52592
S'Advanced'
p52593
sa(dp52594
S'description'
p52595
S'Whether or not this kernel will be used as an eigen kernel\n'
p52596
sS'cpp_type'
p52597
S'bool'
p52598
sS'default'
p52599
S'0'
p52600
sS'name'
p52601
S'eigen_kernel'
p52602
sS'required'
p52603
I00
sS'group_name'
p52604
Nsa(dp52605
S'description'
p52606
S'Set the enabled status of the MooseObject.\n'
p52607
sS'cpp_type'
p52608
S'bool'
p52609
sS'default'
p52610
S'1'
p52611
sS'name'
p52612
S'enable'
p52613
sS'required'
p52614
I00
sS'group_name'
p52615
S'Advanced'
p52616
sa(dp52617
S'description'
p52618
S'Scale factor applied to prescribed pressure\n'
p52619
sS'cpp_type'
p52620
S'double'
p52621
sS'default'
p52622
S'1'
p52623
sS'name'
p52624
S'factor'
p52625
sS'required'
p52626
I00
sS'group_name'
p52627
Nsa(dp52628
S'description'
p52629
S'Function used to prescribe pressure\n'
p52630
sS'cpp_type'
p52631
S'FunctionName'
p52632
sS'default'
p52633
S'1.0'
p52634
sS'name'
p52635
S'function'
p52636
sS'required'
p52637
I00
sS'group_name'
p52638
Nsa(dp52639
S'description'
p52640
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52641
sS'cpp_type'
p52642
S'bool'
p52643
sS'default'
p52644
S'1'
p52645
sS'name'
p52646
S'implicit'
p52647
sS'required'
p52648
I00
sS'group_name'
p52649
S'Advanced'
p52650
sa(dp52651
S'description'
p52652
S'Postprocessor used to prescribe pressure\n'
p52653
sS'cpp_type'
p52654
S'PostprocessorName'
p52655
sS'default'
p52656
g3
sS'name'
p52657
S'postprocessor'
p52658
sS'required'
p52659
I00
sS'group_name'
p52660
Nsa(dp52661
S'description'
p52662
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52663
sS'cpp_type'
p52664
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52665
sS'default'
p52666
g3
sS'name'
p52667
S'save_in'
p52668
sS'required'
p52669
I00
sS'group_name'
p52670
S'Advanced'
p52671
sa(dp52672
S'description'
p52673
S'The seed for the master random number generator\n'
p52674
sS'cpp_type'
p52675
S'unsigned int'
p52676
sS'default'
p52677
S'0'
p52678
sS'name'
p52679
S'seed'
p52680
sS'required'
p52681
I00
sS'group_name'
p52682
S'Advanced'
p52683
sa(dp52684
S'description'
p52685
g3
sS'cpp_type'
p52686
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52687
sS'default'
p52688
S'OutOfPlanePressure'
p52689
sS'name'
p52690
S'type'
p52691
sS'required'
p52692
I00
sS'group_name'
p52693
Nsa(dp52694
S'description'
p52695
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52696
sS'cpp_type'
p52697
S'bool'
p52698
sS'default'
p52699
S'1'
p52700
sS'name'
p52701
S'use_displaced_mesh'
p52702
sS'required'
p52703
I00
sS'group_name'
p52704
S'Advanced'
p52705
sa(dp52706
S'description'
p52707
S'The name of the variable that this Kernel operates on\n'
p52708
sS'cpp_type'
p52709
S'NonlinearVariableName'
p52710
sS'default'
p52711
g3
sS'name'
p52712
S'variable'
p52713
sS'required'
p52714
I01
sS'group_name'
p52715
NsasS'name'
p52716
S'/Kernels/OutOfPlanePressure'
p52717
sa(dp52718
S'description'
p52719
g3
sS'subblocks'
p52720
NsS'parameters'
p52721
(lp52722
(dp52723
S'description'
p52724
S'Base name for the complex L variables\n'
p52725
sS'cpp_type'
p52726
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52727
sS'default'
p52728
g3
sS'name'
p52729
S'L_name_base'
p52730
sS'required'
p52731
I01
sS'group_name'
p52732
Nsa(dp52733
S'description'
p52734
S'Parameter in the Taylor series expansion\n'
p52735
sS'cpp_type'
p52736
S'double'
p52737
sS'default'
p52738
S'1'
p52739
sS'name'
p52740
S'a'
p52741
sS'required'
p52742
I00
sS'group_name'
p52743
Nsa(dp52744
S'description'
p52745
S'Parameter in the Taylor series expansion\n'
p52746
sS'cpp_type'
p52747
S'double'
p52748
sS'default'
p52749
S'1'
p52750
sS'name'
p52751
S'b'
p52752
sS'required'
p52753
I00
sS'group_name'
p52754
Nsa(dp52755
S'description'
p52756
S'Parameter in the Taylor series expansion\n'
p52757
sS'cpp_type'
p52758
S'double'
p52759
sS'default'
p52760
S'1'
p52761
sS'name'
p52762
S'c'
p52763
sS'required'
p52764
I00
sS'group_name'
p52765
Nsa(dp52766
S'name'
p52767
S'log_approach'
p52768
sS'cpp_type'
p52769
S'MooseEnum'
p52770
sS'default'
p52771
g3
sS'description'
p52772
S'Which approach will be used to handle the natural log\n'
p52773
sS'required'
p52774
I01
sS'options'
p52775
S'tolerance cancelation expansion'
p52776
sS'group_name'
p52777
Nsa(dp52778
S'description'
p52779
S'The mobility used for n in this model\n'
p52780
sS'cpp_type'
p52781
S'MaterialPropertyName'
p52782
sS'default'
p52783
S'M'
p52784
sS'name'
p52785
S'mob_name'
p52786
sS'required'
p52787
I00
sS'group_name'
p52788
Nsa(dp52789
S'description'
p52790
S'Number of terms used in the Taylor expansion of the natural log term\n'
p52791
sS'cpp_type'
p52792
S'double'
p52793
sS'default'
p52794
S'4'
p52795
sS'name'
p52796
S'n_exp_terms'
p52797
sS'required'
p52798
I00
sS'group_name'
p52799
Nsa(dp52800
S'description'
p52801
S'Variable name used for the n variable\n'
p52802
sS'cpp_type'
p52803
S'VariableName'
p52804
sS'default'
p52805
g3
sS'name'
p52806
S'n_name'
p52807
sS'required'
p52808
I01
sS'group_name'
p52809
Nsa(dp52810
S'description'
p52811
S'specifies the number of complex L variables will be solved for\n'
p52812
sS'cpp_type'
p52813
S'unsigned int'
p52814
sS'default'
p52815
g3
sS'name'
p52816
S'num_L'
p52817
sS'required'
p52818
I01
sS'group_name'
p52819
Nsa(dp52820
S'description'
p52821
S'Tolerance used when the tolerance approach is chosen\n'
p52822
sS'cpp_type'
p52823
S'double'
p52824
sS'default'
p52825
S'1e-09'
p52826
sS'name'
p52827
S'tol'
p52828
sS'required'
p52829
I00
sS'group_name'
p52830
Nsa(dp52831
S'description'
p52832
S'Whether to use displaced mesh in the kernels\n'
p52833
sS'cpp_type'
p52834
S'bool'
p52835
sS'default'
p52836
S'0'
p52837
sS'name'
p52838
S'use_displaced_mesh'
p52839
sS'required'
p52840
I00
sS'group_name'
p52841
NsasS'name'
p52842
S'/Kernels/PFCRFFKernel'
p52843
sa(dp52844
S'description'
p52845
S'Kernel to compute bulk energy contribution to damage order parameter residual equation\n'
p52846
sS'subblocks'
p52847
NsS'parameters'
p52848
(lp52849
(dp52850
S'description'
p52851
S'Material property name with undamaged strain energy driving damage (G0_pos)\n'
p52852
sS'cpp_type'
p52853
S'MaterialPropertyName'
p52854
sS'default'
p52855
g3
sS'name'
p52856
S'G0_var'
p52857
sS'required'
p52858
I01
sS'group_name'
p52859
Nsa(dp52860
S'description'
p52861
S'Material property base name\n'
p52862
sS'cpp_type'
p52863
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52864
sS'default'
p52865
g3
sS'name'
p52866
S'base_name'
p52867
sS'required'
p52868
I00
sS'group_name'
p52869
Nsa(dp52870
S'description'
p52871
S'Auxiliary variable\n'
p52872
sS'cpp_type'
p52873
S'std::vector<VariableName>'
p52874
sS'default'
p52875
g3
sS'name'
p52876
S'beta'
p52877
sS'required'
p52878
I01
sS'group_name'
p52879
Nsa(dp52880
S'description'
p52881
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52882
sS'cpp_type'
p52883
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52884
sS'default'
p52885
g3
sS'name'
p52886
S'block'
p52887
sS'required'
p52888
I00
sS'group_name'
p52889
Nsa(dp52890
S'description'
p52891
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52892
sS'cpp_type'
p52893
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52894
sS'default'
p52895
g3
sS'name'
p52896
S'control_tags'
p52897
sS'required'
p52898
I00
sS'group_name'
p52899
S'Advanced'
p52900
sa(dp52901
S'description'
p52902
S'Material property name with derivative of G0_pos with strain\n'
p52903
sS'cpp_type'
p52904
S'MaterialPropertyName'
p52905
sS'default'
p52906
g3
sS'name'
p52907
S'dG0_dstrain_var'
p52908
sS'required'
p52909
I00
sS'group_name'
p52910
Nsa(dp52911
S'description'
p52912
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52913
sS'cpp_type'
p52914
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52915
sS'default'
p52916
g3
sS'name'
p52917
S'diag_save_in'
p52918
sS'required'
p52919
I00
sS'group_name'
p52920
S'Advanced'
p52921
sa(dp52922
S'description'
p52923
S'The string of displacements suitable for the problem statement\n'
p52924
sS'cpp_type'
p52925
S'std::vector<VariableName>'
p52926
sS'default'
p52927
g3
sS'name'
p52928
S'displacements'
p52929
sS'required'
p52930
I00
sS'group_name'
p52931
Nsa(dp52932
S'description'
p52933
S'Whether or not this kernel will be used as an eigen kernel\n'
p52934
sS'cpp_type'
p52935
S'bool'
p52936
sS'default'
p52937
S'0'
p52938
sS'name'
p52939
S'eigen_kernel'
p52940
sS'required'
p52941
I00
sS'group_name'
p52942
Nsa(dp52943
S'description'
p52944
S'Set the enabled status of the MooseObject.\n'
p52945
sS'cpp_type'
p52946
S'bool'
p52947
sS'default'
p52948
S'1'
p52949
sS'name'
p52950
S'enable'
p52951
sS'required'
p52952
I00
sS'group_name'
p52953
S'Advanced'
p52954
sa(dp52955
S'description'
p52956
S'Material property name with gc value\n'
p52957
sS'cpp_type'
p52958
S'MaterialPropertyName'
p52959
sS'default'
p52960
g3
sS'name'
p52961
S'gc_prop_var'
p52962
sS'required'
p52963
I01
sS'group_name'
p52964
Nsa(dp52965
S'description'
p52966
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52967
sS'cpp_type'
p52968
S'bool'
p52969
sS'default'
p52970
S'1'
p52971
sS'name'
p52972
S'implicit'
p52973
sS'required'
p52974
I00
sS'group_name'
p52975
S'Advanced'
p52976
sa(dp52977
S'description'
p52978
S'Interface width\n'
p52979
sS'cpp_type'
p52980
S'double'
p52981
sS'default'
p52982
g3
sS'name'
p52983
S'l'
p52984
sS'required'
p52985
I01
sS'group_name'
p52986
Nsa(dp52987
S'description'
p52988
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52989
sS'cpp_type'
p52990
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52991
sS'default'
p52992
g3
sS'name'
p52993
S'save_in'
p52994
sS'required'
p52995
I00
sS'group_name'
p52996
S'Advanced'
p52997
sa(dp52998
S'description'
p52999
S'The seed for the master random number generator\n'
p53000
sS'cpp_type'
p53001
S'unsigned int'
p53002
sS'default'
p53003
S'0'
p53004
sS'name'
p53005
S'seed'
p53006
sS'required'
p53007
I00
sS'group_name'
p53008
S'Advanced'
p53009
sa(dp53010
S'description'
p53011
g3
sS'cpp_type'
p53012
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53013
sS'default'
p53014
S'PFFracBulkRate'
p53015
sS'name'
p53016
S'type'
p53017
sS'required'
p53018
I00
sS'group_name'
p53019
Nsa(dp53020
S'description'
p53021
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53022
sS'cpp_type'
p53023
S'bool'
p53024
sS'default'
p53025
S'0'
p53026
sS'name'
p53027
S'use_displaced_mesh'
p53028
sS'required'
p53029
I00
sS'group_name'
p53030
S'Advanced'
p53031
sa(dp53032
S'description'
p53033
S'The name of the variable that this Kernel operates on\n'
p53034
sS'cpp_type'
p53035
S'NonlinearVariableName'
p53036
sS'default'
p53037
g3
sS'name'
p53038
S'variable'
p53039
sS'required'
p53040
I01
sS'group_name'
p53041
Nsa(dp53042
S'description'
p53043
S'Viscosity parameter\n'
p53044
sS'cpp_type'
p53045
S'double'
p53046
sS'default'
p53047
g3
sS'name'
p53048
S'visco'
p53049
sS'required'
p53050
I01
sS'group_name'
p53051
NsasS'name'
p53052
S'/Kernels/PFFracBulkRate'
p53053
sa(dp53054
S'description'
p53055
S'Phase-field fracture residual for beta variable: Contribution from gradient of damage order parameter\n'
p53056
sS'subblocks'
p53057
NsS'parameters'
p53058
(lp53059
(dp53060
S'description'
p53061
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53062
sS'cpp_type'
p53063
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53064
sS'default'
p53065
g3
sS'name'
p53066
S'block'
p53067
sS'required'
p53068
I00
sS'group_name'
p53069
Nsa(dp53070
S'description'
p53071
S'Order parameter for damage\n'
p53072
sS'cpp_type'
p53073
S'std::vector<VariableName>'
p53074
sS'default'
p53075
g3
sS'name'
p53076
S'c'
p53077
sS'required'
p53078
I01
sS'group_name'
p53079
Nsa(dp53080
S'description'
p53081
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53082
sS'cpp_type'
p53083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53084
sS'default'
p53085
g3
sS'name'
p53086
S'control_tags'
p53087
sS'required'
p53088
I00
sS'group_name'
p53089
S'Advanced'
p53090
sa(dp53091
S'description'
p53092
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53093
sS'cpp_type'
p53094
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53095
sS'default'
p53096
g3
sS'name'
p53097
S'diag_save_in'
p53098
sS'required'
p53099
I00
sS'group_name'
p53100
S'Advanced'
p53101
sa(dp53102
S'description'
p53103
S'Whether or not this kernel will be used as an eigen kernel\n'
p53104
sS'cpp_type'
p53105
S'bool'
p53106
sS'default'
p53107
S'0'
p53108
sS'name'
p53109
S'eigen_kernel'
p53110
sS'required'
p53111
I00
sS'group_name'
p53112
Nsa(dp53113
S'description'
p53114
S'Set the enabled status of the MooseObject.\n'
p53115
sS'cpp_type'
p53116
S'bool'
p53117
sS'default'
p53118
S'1'
p53119
sS'name'
p53120
S'enable'
p53121
sS'required'
p53122
I00
sS'group_name'
p53123
S'Advanced'
p53124
sa(dp53125
S'description'
p53126
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53127
sS'cpp_type'
p53128
S'bool'
p53129
sS'default'
p53130
S'1'
p53131
sS'name'
p53132
S'implicit'
p53133
sS'required'
p53134
I00
sS'group_name'
p53135
S'Advanced'
p53136
sa(dp53137
S'description'
p53138
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53139
sS'cpp_type'
p53140
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53141
sS'default'
p53142
g3
sS'name'
p53143
S'save_in'
p53144
sS'required'
p53145
I00
sS'group_name'
p53146
S'Advanced'
p53147
sa(dp53148
S'description'
p53149
S'The seed for the master random number generator\n'
p53150
sS'cpp_type'
p53151
S'unsigned int'
p53152
sS'default'
p53153
S'0'
p53154
sS'name'
p53155
S'seed'
p53156
sS'required'
p53157
I00
sS'group_name'
p53158
S'Advanced'
p53159
sa(dp53160
S'description'
p53161
g3
sS'cpp_type'
p53162
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53163
sS'default'
p53164
S'PFFracCoupledInterface'
p53165
sS'name'
p53166
S'type'
p53167
sS'required'
p53168
I00
sS'group_name'
p53169
Nsa(dp53170
S'description'
p53171
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53172
sS'cpp_type'
p53173
S'bool'
p53174
sS'default'
p53175
S'0'
p53176
sS'name'
p53177
S'use_displaced_mesh'
p53178
sS'required'
p53179
I00
sS'group_name'
p53180
S'Advanced'
p53181
sa(dp53182
S'description'
p53183
S'The name of the variable that this Kernel operates on\n'
p53184
sS'cpp_type'
p53185
S'NonlinearVariableName'
p53186
sS'default'
p53187
g3
sS'name'
p53188
S'variable'
p53189
sS'required'
p53190
I01
sS'group_name'
p53191
NsasS'name'
p53192
S'/Kernels/PFFracCoupledInterface'
p53193
sa(dp53194
S'description'
p53195
S'Stress divergence kernel for phase-field fracture: Computes off diagonal damage dependent Jacobian components. To be used with StressDivergenceTensors or DynamicStressDivergenceTensors.\n'
p53196
sS'subblocks'
p53197
NsS'parameters'
p53198
(lp53199
(dp53200
S'description'
p53201
S'Material property base name\n'
p53202
sS'cpp_type'
p53203
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53204
sS'default'
p53205
g3
sS'name'
p53206
S'base_name'
p53207
sS'required'
p53208
I00
sS'group_name'
p53209
Nsa(dp53210
S'description'
p53211
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53212
sS'cpp_type'
p53213
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53214
sS'default'
p53215
g3
sS'name'
p53216
S'block'
p53217
sS'required'
p53218
I00
sS'group_name'
p53219
Nsa(dp53220
S'description'
p53221
S'Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n'
p53222
sS'cpp_type'
p53223
S'std::vector<VariableName>'
p53224
sS'default'
p53225
g3
sS'name'
p53226
S'c'
p53227
sS'required'
p53228
I00
sS'group_name'
p53229
Nsa(dp53230
S'description'
p53231
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p53232
sS'cpp_type'
p53233
S'unsigned int'
p53234
sS'default'
p53235
g3
sS'name'
p53236
S'component'
p53237
sS'required'
p53238
I01
sS'group_name'
p53239
Nsa(dp53240
S'description'
p53241
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53242
sS'cpp_type'
p53243
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53244
sS'default'
p53245
g3
sS'name'
p53246
S'control_tags'
p53247
sS'required'
p53248
I00
sS'group_name'
p53249
S'Advanced'
p53250
sa(dp53251
S'description'
p53252
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53253
sS'cpp_type'
p53254
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53255
sS'default'
p53256
g3
sS'name'
p53257
S'diag_save_in'
p53258
sS'required'
p53259
I00
sS'group_name'
p53260
S'Advanced'
p53261
sa(dp53262
S'description'
p53263
S'Whether or not this kernel will be used as an eigen kernel\n'
p53264
sS'cpp_type'
p53265
S'bool'
p53266
sS'default'
p53267
S'0'
p53268
sS'name'
p53269
S'eigen_kernel'
p53270
sS'required'
p53271
I00
sS'group_name'
p53272
Nsa(dp53273
S'description'
p53274
S'Set the enabled status of the MooseObject.\n'
p53275
sS'cpp_type'
p53276
S'bool'
p53277
sS'default'
p53278
S'1'
p53279
sS'name'
p53280
S'enable'
p53281
sS'required'
p53282
I00
sS'group_name'
p53283
S'Advanced'
p53284
sa(dp53285
S'description'
p53286
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53287
sS'cpp_type'
p53288
S'bool'
p53289
sS'default'
p53290
S'1'
p53291
sS'name'
p53292
S'implicit'
p53293
sS'required'
p53294
I00
sS'group_name'
p53295
S'Advanced'
p53296
sa(dp53297
S'description'
p53298
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53299
sS'cpp_type'
p53300
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53301
sS'default'
p53302
g3
sS'name'
p53303
S'save_in'
p53304
sS'required'
p53305
I00
sS'group_name'
p53306
S'Advanced'
p53307
sa(dp53308
S'description'
p53309
S'The seed for the master random number generator\n'
p53310
sS'cpp_type'
p53311
S'unsigned int'
p53312
sS'default'
p53313
S'0'
p53314
sS'name'
p53315
S'seed'
p53316
sS'required'
p53317
I00
sS'group_name'
p53318
S'Advanced'
p53319
sa(dp53320
S'description'
p53321
g3
sS'cpp_type'
p53322
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53323
sS'default'
p53324
S'PhaseFieldFractureMechanicsOffDiag'
p53325
sS'name'
p53326
S'type'
p53327
sS'required'
p53328
I00
sS'group_name'
p53329
Nsa(dp53330
S'description'
p53331
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53332
sS'cpp_type'
p53333
S'bool'
p53334
sS'default'
p53335
S'0'
p53336
sS'name'
p53337
S'use_displaced_mesh'
p53338
sS'required'
p53339
I00
sS'group_name'
p53340
S'Advanced'
p53341
sa(dp53342
S'description'
p53343
S'The name of the variable that this Kernel operates on\n'
p53344
sS'cpp_type'
p53345
S'NonlinearVariableName'
p53346
sS'default'
p53347
g3
sS'name'
p53348
S'variable'
p53349
sS'required'
p53350
I01
sS'group_name'
p53351
NsasS'name'
p53352
S'/Kernels/PhaseFieldFractureMechanicsOffDiag'
p53353
sa(dp53354
S'description'
p53355
S'Plastic heat energy density = coeff * stress * plastic_strain_rate\n'
p53356
sS'subblocks'
p53357
NsS'parameters'
p53358
(lp53359
(dp53360
S'description'
p53361
S'Material property base name\n'
p53362
sS'cpp_type'
p53363
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53364
sS'default'
p53365
g3
sS'name'
p53366
S'base_name'
p53367
sS'required'
p53368
I00
sS'group_name'
p53369
Nsa(dp53370
S'description'
p53371
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53372
sS'cpp_type'
p53373
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53374
sS'default'
p53375
g3
sS'name'
p53376
S'block'
p53377
sS'required'
p53378
I00
sS'group_name'
p53379
Nsa(dp53380
S'description'
p53381
S'Heat energy density = coeff * stress * plastic_strain_rate\n'
p53382
sS'cpp_type'
p53383
S'double'
p53384
sS'default'
p53385
S'1'
p53386
sS'name'
p53387
S'coeff'
p53388
sS'required'
p53389
I00
sS'group_name'
p53390
Nsa(dp53391
S'description'
p53392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53393
sS'cpp_type'
p53394
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53395
sS'default'
p53396
g3
sS'name'
p53397
S'control_tags'
p53398
sS'required'
p53399
I00
sS'group_name'
p53400
S'Advanced'
p53401
sa(dp53402
S'description'
p53403
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53404
sS'cpp_type'
p53405
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53406
sS'default'
p53407
g3
sS'name'
p53408
S'diag_save_in'
p53409
sS'required'
p53410
I00
sS'group_name'
p53411
S'Advanced'
p53412
sa(dp53413
S'description'
p53414
S'The string of displacements suitable for the problem statement\n'
p53415
sS'cpp_type'
p53416
S'std::vector<VariableName>'
p53417
sS'default'
p53418
g3
sS'name'
p53419
S'displacements'
p53420
sS'required'
p53421
I01
sS'group_name'
p53422
Nsa(dp53423
S'description'
p53424
S'Whether or not this kernel will be used as an eigen kernel\n'
p53425
sS'cpp_type'
p53426
S'bool'
p53427
sS'default'
p53428
S'0'
p53429
sS'name'
p53430
S'eigen_kernel'
p53431
sS'required'
p53432
I00
sS'group_name'
p53433
Nsa(dp53434
S'description'
p53435
S'Set the enabled status of the MooseObject.\n'
p53436
sS'cpp_type'
p53437
S'bool'
p53438
sS'default'
p53439
S'1'
p53440
sS'name'
p53441
S'enable'
p53442
sS'required'
p53443
I00
sS'group_name'
p53444
S'Advanced'
p53445
sa(dp53446
S'description'
p53447
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53448
sS'cpp_type'
p53449
S'bool'
p53450
sS'default'
p53451
S'1'
p53452
sS'name'
p53453
S'implicit'
p53454
sS'required'
p53455
I00
sS'group_name'
p53456
S'Advanced'
p53457
sa(dp53458
S'description'
p53459
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53460
sS'cpp_type'
p53461
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53462
sS'default'
p53463
g3
sS'name'
p53464
S'save_in'
p53465
sS'required'
p53466
I00
sS'group_name'
p53467
S'Advanced'
p53468
sa(dp53469
S'description'
p53470
S'The seed for the master random number generator\n'
p53471
sS'cpp_type'
p53472
S'unsigned int'
p53473
sS'default'
p53474
S'0'
p53475
sS'name'
p53476
S'seed'
p53477
sS'required'
p53478
I00
sS'group_name'
p53479
S'Advanced'
p53480
sa(dp53481
S'description'
p53482
g3
sS'cpp_type'
p53483
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53484
sS'default'
p53485
S'PlasticHeatEnergy'
p53486
sS'name'
p53487
S'type'
p53488
sS'required'
p53489
I00
sS'group_name'
p53490
Nsa(dp53491
S'description'
p53492
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53493
sS'cpp_type'
p53494
S'bool'
p53495
sS'default'
p53496
S'0'
p53497
sS'name'
p53498
S'use_displaced_mesh'
p53499
sS'required'
p53500
I00
sS'group_name'
p53501
S'Advanced'
p53502
sa(dp53503
S'description'
p53504
S'The name of the variable that this Kernel operates on\n'
p53505
sS'cpp_type'
p53506
S'NonlinearVariableName'
p53507
sS'default'
p53508
g3
sS'name'
p53509
S'variable'
p53510
sS'required'
p53511
I01
sS'group_name'
p53512
NsasS'name'
p53513
S'/Kernels/PlasticHeatEnergy'
p53514
sa(dp53515
S'description'
p53516
g3
sS'subblocks'
p53517
NsS'parameters'
p53518
(lp53519
(dp53520
S'description'
p53521
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p53522
sS'cpp_type'
p53523
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53524
sS'default'
p53525
g3
sS'name'
p53526
S'base_name'
p53527
sS'required'
p53528
I00
sS'group_name'
p53529
Nsa(dp53530
S'description'
p53531
S'specifies the number of grains to create\n'
p53532
sS'cpp_type'
p53533
S'unsigned int'
p53534
sS'default'
p53535
g3
sS'name'
p53536
S'op_num'
p53537
sS'required'
p53538
I01
sS'group_name'
p53539
Nsa(dp53540
S'description'
p53541
S'Whether to use displaced mesh in the kernels\n'
p53542
sS'cpp_type'
p53543
S'bool'
p53544
sS'default'
p53545
S'0'
p53546
sS'name'
p53547
S'use_displaced_mesh'
p53548
sS'required'
p53549
I00
sS'group_name'
p53550
Nsa(dp53551
S'description'
p53552
S'specifies the base name of the variables\n'
p53553
sS'cpp_type'
p53554
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53555
sS'default'
p53556
g3
sS'name'
p53557
S'var_name_base'
p53558
sS'required'
p53559
I01
sS'group_name'
p53560
NsasS'name'
p53561
S'/Kernels/PolycrystalElasticDrivingForce'
p53562
sa(dp53563
S'description'
p53564
g3
sS'subblocks'
p53565
NsS'parameters'
p53566
(lp53567
(dp53568
S'description'
p53569
S'Name of temperature variable\n'
p53570
sS'cpp_type'
p53571
S'VariableName'
p53572
sS'default'
p53573
g3
sS'name'
p53574
S'T'
p53575
sS'required'
p53576
I00
sS'group_name'
p53577
Nsa(dp53578
S'description'
p53579
S'Name of coupled concentration variable\n'
p53580
sS'cpp_type'
p53581
S'VariableName'
p53582
sS'default'
p53583
g3
sS'name'
p53584
S'c'
p53585
sS'required'
p53586
I00
sS'group_name'
p53587
Nsa(dp53588
S'description'
p53589
S'Ratio of surface to GB energy\n'
p53590
sS'cpp_type'
p53591
S'double'
p53592
sS'default'
p53593
S'1'
p53594
sS'name'
p53595
S'en_ratio'
p53596
sS'required'
p53597
I00
sS'group_name'
p53598
Nsa(dp53599
S'description'
p53600
S'Whether kernels are implicit or not\n'
p53601
sS'cpp_type'
p53602
S'bool'
p53603
sS'default'
p53604
S'1'
p53605
sS'name'
p53606
S'implicit'
p53607
sS'required'
p53608
I00
sS'group_name'
p53609
Nsa(dp53610
S'description'
p53611
S'specifies the number of deformed grains to create\n'
p53612
sS'cpp_type'
p53613
S'unsigned int'
p53614
sS'default'
p53615
S'0'
p53616
sS'name'
p53617
S'ndef'
p53618
sS'required'
p53619
I00
sS'group_name'
p53620
Nsa(dp53621
S'description'
p53622
S'specifies the total number of grains (deformed + recrystallized) to create\n'
p53623
sS'cpp_type'
p53624
S'unsigned int'
p53625
sS'default'
p53626
g3
sS'name'
p53627
S'op_num'
p53628
sS'required'
p53629
I01
sS'group_name'
p53630
Nsa(dp53631
S'description'
p53632
S'Whether to use displaced mesh in the kernels\n'
p53633
sS'cpp_type'
p53634
S'bool'
p53635
sS'default'
p53636
S'0'
p53637
sS'name'
p53638
S'use_displaced_mesh'
p53639
sS'required'
p53640
I00
sS'group_name'
p53641
Nsa(dp53642
S'description'
p53643
S'specifies the base name of the variables\n'
p53644
sS'cpp_type'
p53645
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53646
sS'default'
p53647
g3
sS'name'
p53648
S'var_name_base'
p53649
sS'required'
p53650
I01
sS'group_name'
p53651
NsasS'name'
p53652
S'/Kernels/PolycrystalKernel'
p53653
sa(dp53654
S'description'
p53655
g3
sS'subblocks'
p53656
NsS'parameters'
p53657
(lp53658
(dp53659
S'description'
p53660
S'Name of temperature variable\n'
p53661
sS'cpp_type'
p53662
S'VariableName'
p53663
sS'default'
p53664
g3
sS'name'
p53665
S'T'
p53666
sS'required'
p53667
I00
sS'group_name'
p53668
Nsa(dp53669
S'description'
p53670
S'Name of coupled concentration variable\n'
p53671
sS'cpp_type'
p53672
S'VariableName'
p53673
sS'default'
p53674
g3
sS'name'
p53675
S'c'
p53676
sS'required'
p53677
I00
sS'group_name'
p53678
Nsa(dp53679
S'description'
p53680
S'specifies the number of deformed grains to create\n'
p53681
sS'cpp_type'
p53682
S'unsigned int'
p53683
sS'default'
p53684
g3
sS'name'
p53685
S'deformed_grain_num'
p53686
sS'required'
p53687
I01
sS'group_name'
p53688
Nsa(dp53689
S'description'
p53690
S'The GrainTracker UserObject to get values from.\n'
p53691
sS'cpp_type'
p53692
S'UserObjectName'
p53693
sS'default'
p53694
g3
sS'name'
p53695
S'grain_tracker'
p53696
sS'required'
p53697
I01
sS'group_name'
p53698
Nsa(dp53699
S'description'
p53700
S'specifies the total number of OPs representing all grains (deformed + undeformed (recrystallized)) to create\n'
p53701
sS'cpp_type'
p53702
S'unsigned int'
p53703
sS'default'
p53704
g3
sS'name'
p53705
S'op_num'
p53706
sS'required'
p53707
I01
sS'group_name'
p53708
Nsa(dp53709
S'description'
p53710
S'Whether to use displaced mesh in the kernels\n'
p53711
sS'cpp_type'
p53712
S'bool'
p53713
sS'default'
p53714
S'0'
p53715
sS'name'
p53716
S'use_displaced_mesh'
p53717
sS'required'
p53718
I00
sS'group_name'
p53719
Nsa(dp53720
S'description'
p53721
S'specifies the base name of the variables\n'
p53722
sS'cpp_type'
p53723
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53724
sS'default'
p53725
g3
sS'name'
p53726
S'var_name_base'
p53727
sS'required'
p53728
I01
sS'group_name'
p53729
NsasS'name'
p53730
S'/Kernels/PolycrystalStoredEnergy'
p53731
sa(dp53732
S'description'
p53733
g3
sS'subblocks'
p53734
NsS'parameters'
p53735
(lp53736
(dp53737
S'description'
p53738
S'Add the displacement variables\n'
p53739
sS'cpp_type'
p53740
S'bool'
p53741
sS'default'
p53742
S'0'
p53743
sS'name'
p53744
S'add_variables'
p53745
sS'required'
p53746
I00
sS'group_name'
p53747
Nsa(dp53748
S'name'
p53749
S'additional_generate_output'
p53750
sS'cpp_type'
p53751
S'MultiMooseEnum'
p53752
sS'default'
p53753
g3
sS'description'
p53754
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p53755
sS'required'
p53756
I00
sS'options'
p53757
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p53758
sS'group_name'
p53759
S'Output'
p53760
sa(dp53761
S'description'
p53762
S'Material property base name\n'
p53763
sS'cpp_type'
p53764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53765
sS'default'
p53766
g3
sS'name'
p53767
S'base_name'
p53768
sS'required'
p53769
I00
sS'group_name'
p53770
Nsa(dp53771
S'description'
p53772
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p53773
sS'cpp_type'
p53774
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53775
sS'default'
p53776
g3
sS'name'
p53777
S'block'
p53778
sS'required'
p53779
I00
sS'group_name'
p53780
S'Advanced'
p53781
sa(dp53782
S'name'
p53783
S'decomposition_method'
p53784
sS'cpp_type'
p53785
S'MooseEnum'
p53786
sS'default'
p53787
S'TaylorExpansion'
p53788
sS'description'
p53789
S'Methods to calculate the finite strain and rotation increments\n'
p53790
sS'required'
p53791
I00
sS'options'
p53792
S'TaylorExpansion EigenSolution'
p53793
sS'group_name'
p53794
Nsa(dp53795
S'description'
p53796
S'The displacement diagonal preconditioner terms\n'
p53797
sS'cpp_type'
p53798
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53799
sS'default'
p53800
g3
sS'name'
p53801
S'diag_save_in'
p53802
sS'required'
p53803
I00
sS'group_name'
p53804
S'Advanced'
p53805
sa(dp53806
S'description'
p53807
S'The nonlinear displacement variables for the problem\n'
p53808
sS'cpp_type'
p53809
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p53810
sS'default'
p53811
g3
sS'name'
p53812
S'displacements'
p53813
sS'required'
p53814
I01
sS'group_name'
p53815
Nsa(dp53816
S'description'
p53817
S'List of eigenstrains to be applied in this strain calculation\n'
p53818
sS'cpp_type'
p53819
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p53820
sS'default'
p53821
g3
sS'name'
p53822
S'eigenstrain_names'
p53823
sS'required'
p53824
I00
sS'group_name'
p53825
Nsa(dp53826
S'name'
p53827
S'generate_output'
p53828
sS'cpp_type'
p53829
S'MultiMooseEnum'
p53830
sS'default'
p53831
g3
sS'description'
p53832
S'Add scalar quantity output for stress and/or strain\n'
p53833
sS'required'
p53834
I00
sS'options'
p53835
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p53836
sS'group_name'
p53837
S'Output'
p53838
sa(dp53839
S'description'
p53840
S'Use incremental or total strain\n'
p53841
sS'cpp_type'
p53842
S'bool'
p53843
sS'default'
p53844
g3
sS'name'
p53845
S'incremental'
p53846
sS'required'
p53847
I00
sS'group_name'
p53848
Nsa(dp53849
S'description'
p53850
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p53851
sS'cpp_type'
p53852
S'FunctionName'
p53853
sS'default'
p53854
S'0'
p53855
sS'name'
p53856
S'out_of_plane_pressure'
p53857
sS'required'
p53858
I00
sS'group_name'
p53859
S'Out-of-plane stress/strain'
p53860
sa(dp53861
S'name'
p53862
S'planar_formulation'
p53863
sS'cpp_type'
p53864
S'MooseEnum'
p53865
sS'default'
p53866
S'NONE'
p53867
sS'description'
p53868
S'Out-of-plane stress/strain formulation\n'
p53869
sS'required'
p53870
I00
sS'options'
p53871
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p53872
sS'group_name'
p53873
S'Out-of-plane stress/strain'
p53874
sa(dp53875
S'description'
p53876
S'The porepressure variable\n'
p53877
sS'cpp_type'
p53878
S'NonlinearVariableName'
p53879
sS'default'
p53880
g3
sS'name'
p53881
S'porepressure'
p53882
sS'required'
p53883
I01
sS'group_name'
p53884
Nsa(dp53885
S'description'
p53886
S'Scale factor applied to prescribed pressure\n'
p53887
sS'cpp_type'
p53888
S'double'
p53889
sS'default'
p53890
S'1'
p53891
sS'name'
p53892
S'pressure_factor'
p53893
sS'required'
p53894
I00
sS'group_name'
p53895
S'Out-of-plane stress/strain'
p53896
sa(dp53897
S'description'
p53898
S'The displacement residuals\n'
p53899
sS'cpp_type'
p53900
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53901
sS'default'
p53902
g3
sS'name'
p53903
S'save_in'
p53904
sS'required'
p53905
I00
sS'group_name'
p53906
S'Advanced'
p53907
sa(dp53908
S'description'
p53909
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p53910
sS'cpp_type'
p53911
S'NonlinearVariableName'
p53912
sS'default'
p53913
g3
sS'name'
p53914
S'scalar_out_of_plane_strain'
p53915
sS'required'
p53916
I00
sS'group_name'
p53917
S'Out-of-plane stress/strain'
p53918
sa(dp53919
S'name'
p53920
S'strain'
p53921
sS'cpp_type'
p53922
S'MooseEnum'
p53923
sS'default'
p53924
S'SMALL'
p53925
sS'description'
p53926
S'Strain formulation\n'
p53927
sS'required'
p53928
I00
sS'options'
p53929
S'SMALL FINITE'
p53930
sS'group_name'
p53931
Nsa(dp53932
S'description'
p53933
S'The temperature\n'
p53934
sS'cpp_type'
p53935
S'NonlinearVariableName'
p53936
sS'default'
p53937
g3
sS'name'
p53938
S'temp'
p53939
sS'required'
p53940
I00
sS'group_name'
p53941
Nsa(dp53942
S'description'
p53943
S'The temperature\n'
p53944
sS'cpp_type'
p53945
S'NonlinearVariableName'
p53946
sS'default'
p53947
g3
sS'name'
p53948
S'temperature'
p53949
sS'required'
p53950
I00
sS'group_name'
p53951
Nsa(dp53952
S'description'
p53953
S'Whether to use displaced mesh in the kernels\n'
p53954
sS'cpp_type'
p53955
S'bool'
p53956
sS'default'
p53957
S'0'
p53958
sS'name'
p53959
S'use_displaced_mesh'
p53960
sS'required'
p53961
I00
sS'group_name'
p53962
Nsa(dp53963
S'description'
p53964
S'Jacobian for corrotational finite strain\n'
p53965
sS'cpp_type'
p53966
S'bool'
p53967
sS'default'
p53968
S'0'
p53969
sS'name'
p53970
S'use_finite_deform_jacobian'
p53971
sS'required'
p53972
I00
sS'group_name'
p53973
Nsa(dp53974
S'description'
p53975
S'Flag to correct volumetric locking\n'
p53976
sS'cpp_type'
p53977
S'bool'
p53978
sS'default'
p53979
S'0'
p53980
sS'name'
p53981
S'volumetric_locking_correction'
p53982
sS'required'
p53983
I00
sS'group_name'
p53984
NsasS'name'
p53985
S'/Kernels/PoroMechanics'
p53986
sa(dp53987
S'description'
p53988
S'Adds -BiotCoefficient*porepressure*grad_test[component]\n'
p53989
sS'subblocks'
p53990
NsS'parameters'
p53991
(lp53992
(dp53993
S'description'
p53994
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53995
sS'cpp_type'
p53996
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53997
sS'default'
p53998
g3
sS'name'
p53999
S'block'
p54000
sS'required'
p54001
I00
sS'group_name'
p54002
Nsa(dp54003
S'description'
p54004
S'The gradient direction (0 for x, 1 for y and 2 for z)\n'
p54005
sS'cpp_type'
p54006
S'unsigned int'
p54007
sS'default'
p54008
g3
sS'name'
p54009
S'component'
p54010
sS'required'
p54011
I01
sS'group_name'
p54012
Nsa(dp54013
S'description'
p54014
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54015
sS'cpp_type'
p54016
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54017
sS'default'
p54018
g3
sS'name'
p54019
S'control_tags'
p54020
sS'required'
p54021
I00
sS'group_name'
p54022
S'Advanced'
p54023
sa(dp54024
S'description'
p54025
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54026
sS'cpp_type'
p54027
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54028
sS'default'
p54029
g3
sS'name'
p54030
S'diag_save_in'
p54031
sS'required'
p54032
I00
sS'group_name'
p54033
S'Advanced'
p54034
sa(dp54035
S'description'
p54036
S'Whether or not this kernel will be used as an eigen kernel\n'
p54037
sS'cpp_type'
p54038
S'bool'
p54039
sS'default'
p54040
S'0'
p54041
sS'name'
p54042
S'eigen_kernel'
p54043
sS'required'
p54044
I00
sS'group_name'
p54045
Nsa(dp54046
S'description'
p54047
S'Set the enabled status of the MooseObject.\n'
p54048
sS'cpp_type'
p54049
S'bool'
p54050
sS'default'
p54051
S'1'
p54052
sS'name'
p54053
S'enable'
p54054
sS'required'
p54055
I00
sS'group_name'
p54056
S'Advanced'
p54057
sa(dp54058
S'description'
p54059
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54060
sS'cpp_type'
p54061
S'bool'
p54062
sS'default'
p54063
S'1'
p54064
sS'name'
p54065
S'implicit'
p54066
sS'required'
p54067
I00
sS'group_name'
p54068
S'Advanced'
p54069
sa(dp54070
S'description'
p54071
S'Porepressure.  This kernel adds -BiotCoefficient*porepressure*grad_test[component]\n'
p54072
sS'cpp_type'
p54073
S'std::vector<VariableName>'
p54074
sS'default'
p54075
g3
sS'name'
p54076
S'porepressure'
p54077
sS'required'
p54078
I01
sS'group_name'
p54079
Nsa(dp54080
S'description'
p54081
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54082
sS'cpp_type'
p54083
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54084
sS'default'
p54085
g3
sS'name'
p54086
S'save_in'
p54087
sS'required'
p54088
I00
sS'group_name'
p54089
S'Advanced'
p54090
sa(dp54091
S'description'
p54092
S'The seed for the master random number generator\n'
p54093
sS'cpp_type'
p54094
S'unsigned int'
p54095
sS'default'
p54096
S'0'
p54097
sS'name'
p54098
S'seed'
p54099
sS'required'
p54100
I00
sS'group_name'
p54101
S'Advanced'
p54102
sa(dp54103
S'description'
p54104
g3
sS'cpp_type'
p54105
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54106
sS'default'
p54107
S'PoroMechanicsCoupling'
p54108
sS'name'
p54109
S'type'
p54110
sS'required'
p54111
I00
sS'group_name'
p54112
Nsa(dp54113
S'description'
p54114
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54115
sS'cpp_type'
p54116
S'bool'
p54117
sS'default'
p54118
S'0'
p54119
sS'name'
p54120
S'use_displaced_mesh'
p54121
sS'required'
p54122
I00
sS'group_name'
p54123
S'Advanced'
p54124
sa(dp54125
S'description'
p54126
S'The name of the variable that this Kernel operates on\n'
p54127
sS'cpp_type'
p54128
S'NonlinearVariableName'
p54129
sS'default'
p54130
g3
sS'name'
p54131
S'variable'
p54132
sS'required'
p54133
I01
sS'group_name'
p54134
NsasS'name'
p54135
S'/Kernels/PoroMechanicsCoupling'
p54136
sa(dp54137
S'description'
p54138
g3
sS'subblocks'
p54139
NsS'parameters'
p54140
(lp54141
(dp54142
S'description'
p54143
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54144
sS'cpp_type'
p54145
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54146
sS'default'
p54147
g3
sS'name'
p54148
S'block'
p54149
sS'required'
p54150
I00
sS'group_name'
p54151
Nsa(dp54152
S'description'
p54153
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54154
sS'cpp_type'
p54155
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54156
sS'default'
p54157
g3
sS'name'
p54158
S'control_tags'
p54159
sS'required'
p54160
I00
sS'group_name'
p54161
S'Advanced'
p54162
sa(dp54163
S'description'
p54164
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54165
sS'cpp_type'
p54166
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54167
sS'default'
p54168
g3
sS'name'
p54169
S'diag_save_in'
p54170
sS'required'
p54171
I00
sS'group_name'
p54172
S'Advanced'
p54173
sa(dp54174
S'description'
p54175
S'Whether or not this kernel will be used as an eigen kernel\n'
p54176
sS'cpp_type'
p54177
S'bool'
p54178
sS'default'
p54179
S'0'
p54180
sS'name'
p54181
S'eigen_kernel'
p54182
sS'required'
p54183
I00
sS'group_name'
p54184
Nsa(dp54185
S'description'
p54186
S'Set the enabled status of the MooseObject.\n'
p54187
sS'cpp_type'
p54188
S'bool'
p54189
sS'default'
p54190
S'1'
p54191
sS'name'
p54192
S'enable'
p54193
sS'required'
p54194
I00
sS'group_name'
p54195
S'Advanced'
p54196
sa(dp54197
S'description'
p54198
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54199
sS'cpp_type'
p54200
S'bool'
p54201
sS'default'
p54202
S'1'
p54203
sS'name'
p54204
S'implicit'
p54205
sS'required'
p54206
I00
sS'group_name'
p54207
S'Advanced'
p54208
sa(dp54209
S'description'
p54210
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54211
sS'cpp_type'
p54212
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54213
sS'default'
p54214
g3
sS'name'
p54215
S'save_in'
p54216
sS'required'
p54217
I00
sS'group_name'
p54218
S'Advanced'
p54219
sa(dp54220
S'description'
p54221
S'The seed for the master random number generator\n'
p54222
sS'cpp_type'
p54223
S'unsigned int'
p54224
sS'default'
p54225
S'0'
p54226
sS'name'
p54227
S'seed'
p54228
sS'required'
p54229
I00
sS'group_name'
p54230
S'Advanced'
p54231
sa(dp54232
S'description'
p54233
g3
sS'cpp_type'
p54234
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54235
sS'default'
p54236
S'Reaction'
p54237
sS'name'
p54238
S'type'
p54239
sS'required'
p54240
I00
sS'group_name'
p54241
Nsa(dp54242
S'description'
p54243
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54244
sS'cpp_type'
p54245
S'bool'
p54246
sS'default'
p54247
S'0'
p54248
sS'name'
p54249
S'use_displaced_mesh'
p54250
sS'required'
p54251
I00
sS'group_name'
p54252
S'Advanced'
p54253
sa(dp54254
S'description'
p54255
S'The name of the variable that this Kernel operates on\n'
p54256
sS'cpp_type'
p54257
S'NonlinearVariableName'
p54258
sS'default'
p54259
g3
sS'name'
p54260
S'variable'
p54261
sS'required'
p54262
I01
sS'group_name'
p54263
NsasS'name'
p54264
S'/Kernels/Reaction'
p54265
sa(dp54266
S'description'
p54267
g3
sS'subblocks'
p54268
NsS'parameters'
p54269
(lp54270
(dp54271
S'description'
p54272
S'Optional parameter that allows the user to define type of force density under consideration\n'
p54273
sS'cpp_type'
p54274
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54275
sS'default'
p54276
g3
sS'name'
p54277
S'base_name'
p54278
sS'required'
p54279
I00
sS'group_name'
p54280
Nsa(dp54281
S'description'
p54282
S'Name of coupled concentration variable\n'
p54283
sS'cpp_type'
p54284
S'VariableName'
p54285
sS'default'
p54286
g3
sS'name'
p54287
S'c'
p54288
sS'required'
p54289
I00
sS'group_name'
p54290
Nsa(dp54291
S'description'
p54292
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p54293
sS'cpp_type'
p54294
S'MaterialPropertyName'
p54295
sS'default'
p54296
g3
sS'name'
p54297
S'f_name'
p54298
sS'required'
p54299
I00
sS'group_name'
p54300
Nsa(dp54301
S'description'
p54302
S'userobject for getting force and torque acting on grains\n'
p54303
sS'cpp_type'
p54304
S'UserObjectName'
p54305
sS'default'
p54306
g3
sS'name'
p54307
S'grain_force'
p54308
sS'required'
p54309
I01
sS'group_name'
p54310
Nsa(dp54311
S'description'
p54312
S'The FeatureFloodCount UserObject to get values from.\n'
p54313
sS'cpp_type'
p54314
S'UserObjectName'
p54315
sS'default'
p54316
g3
sS'name'
p54317
S'grain_tracker_object'
p54318
sS'required'
p54319
I01
sS'group_name'
p54320
Nsa(dp54321
S'description'
p54322
S'The feature volume VectorPostprocessorValue.\n'
p54323
sS'cpp_type'
p54324
S'VectorPostprocessorName'
p54325
sS'default'
p54326
g3
sS'name'
p54327
S'grain_volumes'
p54328
sS'required'
p54329
I01
sS'group_name'
p54330
Nsa(dp54331
S'description'
p54332
S'Whether kernels are implicit or not\n'
p54333
sS'cpp_type'
p54334
S'bool'
p54335
sS'default'
p54336
S'1'
p54337
sS'name'
p54338
S'implicit'
p54339
sS'required'
p54340
I00
sS'group_name'
p54341
Nsa(dp54342
S'description'
p54343
S'The kappa used with the kernel\n'
p54344
sS'cpp_type'
p54345
S'MaterialPropertyName'
p54346
sS'default'
p54347
S'kappa_op'
p54348
sS'name'
p54349
S'kappa_name'
p54350
sS'required'
p54351
I00
sS'group_name'
p54352
Nsa(dp54353
S'description'
p54354
S'The mobility used with the kernel\n'
p54355
sS'cpp_type'
p54356
S'MaterialPropertyName'
p54357
sS'default'
p54358
S'L'
p54359
sS'name'
p54360
S'mob_name'
p54361
sS'required'
p54362
I00
sS'group_name'
p54363
Nsa(dp54364
S'description'
p54365
S'specifies the number of grains to create\n'
p54366
sS'cpp_type'
p54367
S'unsigned int'
p54368
sS'default'
p54369
g3
sS'name'
p54370
S'op_num'
p54371
sS'required'
p54372
I01
sS'group_name'
p54373
Nsa(dp54374
S'description'
p54375
S'constant value characterizing grain rotation\n'
p54376
sS'cpp_type'
p54377
S'double'
p54378
sS'default'
p54379
S'1'
p54380
sS'name'
p54381
S'rotation_constant'
p54382
sS'required'
p54383
I00
sS'group_name'
p54384
Nsa(dp54385
S'description'
p54386
S'constant value characterizing grain translation\n'
p54387
sS'cpp_type'
p54388
S'double'
p54389
sS'default'
p54390
S'500'
p54391
sS'name'
p54392
S'translation_constant'
p54393
sS'required'
p54394
I00
sS'group_name'
p54395
Nsa(dp54396
S'description'
p54397
S'Whether to use displaced mesh in the kernels\n'
p54398
sS'cpp_type'
p54399
S'bool'
p54400
sS'default'
p54401
S'0'
p54402
sS'name'
p54403
S'use_displaced_mesh'
p54404
sS'required'
p54405
I00
sS'group_name'
p54406
Nsa(dp54407
S'description'
p54408
S'specifies the base name of the variables\n'
p54409
sS'cpp_type'
p54410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54411
sS'default'
p54412
g3
sS'name'
p54413
S'var_name_base'
p54414
sS'required'
p54415
I01
sS'group_name'
p54416
NsasS'name'
p54417
S'/Kernels/RigidBodyMultiKernel'
p54418
sa(dp54419
S'description'
p54420
S'Gradient energy for Allen-Cahn Kernel with constant Mobility and Interfacial parameter\n'
p54421
sS'subblocks'
p54422
NsS'parameters'
p54423
(lp54424
(dp54425
S'description'
p54426
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54427
sS'cpp_type'
p54428
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54429
sS'default'
p54430
g3
sS'name'
p54431
S'block'
p54432
sS'required'
p54433
I00
sS'group_name'
p54434
Nsa(dp54435
S'description'
p54436
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54437
sS'cpp_type'
p54438
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54439
sS'default'
p54440
g3
sS'name'
p54441
S'control_tags'
p54442
sS'required'
p54443
I00
sS'group_name'
p54444
S'Advanced'
p54445
sa(dp54446
S'description'
p54447
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54448
sS'cpp_type'
p54449
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54450
sS'default'
p54451
g3
sS'name'
p54452
S'diag_save_in'
p54453
sS'required'
p54454
I00
sS'group_name'
p54455
S'Advanced'
p54456
sa(dp54457
S'description'
p54458
S'Whether or not this kernel will be used as an eigen kernel\n'
p54459
sS'cpp_type'
p54460
S'bool'
p54461
sS'default'
p54462
S'0'
p54463
sS'name'
p54464
S'eigen_kernel'
p54465
sS'required'
p54466
I00
sS'group_name'
p54467
Nsa(dp54468
S'description'
p54469
S'Set the enabled status of the MooseObject.\n'
p54470
sS'cpp_type'
p54471
S'bool'
p54472
sS'default'
p54473
S'1'
p54474
sS'name'
p54475
S'enable'
p54476
sS'required'
p54477
I00
sS'group_name'
p54478
S'Advanced'
p54479
sa(dp54480
S'description'
p54481
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54482
sS'cpp_type'
p54483
S'bool'
p54484
sS'default'
p54485
S'1'
p54486
sS'name'
p54487
S'implicit'
p54488
sS'required'
p54489
I00
sS'group_name'
p54490
S'Advanced'
p54491
sa(dp54492
S'description'
p54493
S'The kappa used with the kernel\n'
p54494
sS'cpp_type'
p54495
S'MaterialPropertyName'
p54496
sS'default'
p54497
S'kappa_op'
p54498
sS'name'
p54499
S'kappa_name'
p54500
sS'required'
p54501
I00
sS'group_name'
p54502
Nsa(dp54503
S'description'
p54504
S'The mobility used with the kernel\n'
p54505
sS'cpp_type'
p54506
S'MaterialPropertyName'
p54507
sS'default'
p54508
S'L'
p54509
sS'name'
p54510
S'mob_name'
p54511
sS'required'
p54512
I00
sS'group_name'
p54513
Nsa(dp54514
S'description'
p54515
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54516
sS'cpp_type'
p54517
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54518
sS'default'
p54519
g3
sS'name'
p54520
S'save_in'
p54521
sS'required'
p54522
I00
sS'group_name'
p54523
S'Advanced'
p54524
sa(dp54525
S'description'
p54526
S'The seed for the master random number generator\n'
p54527
sS'cpp_type'
p54528
S'unsigned int'
p54529
sS'default'
p54530
S'0'
p54531
sS'name'
p54532
S'seed'
p54533
sS'required'
p54534
I00
sS'group_name'
p54535
S'Advanced'
p54536
sa(dp54537
S'description'
p54538
g3
sS'cpp_type'
p54539
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54540
sS'default'
p54541
S'SimpleACInterface'
p54542
sS'name'
p54543
S'type'
p54544
sS'required'
p54545
I00
sS'group_name'
p54546
Nsa(dp54547
S'description'
p54548
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54549
sS'cpp_type'
p54550
S'bool'
p54551
sS'default'
p54552
S'0'
p54553
sS'name'
p54554
S'use_displaced_mesh'
p54555
sS'required'
p54556
I00
sS'group_name'
p54557
S'Advanced'
p54558
sa(dp54559
S'description'
p54560
S'The name of the variable that this Kernel operates on\n'
p54561
sS'cpp_type'
p54562
S'NonlinearVariableName'
p54563
sS'default'
p54564
g3
sS'name'
p54565
S'variable'
p54566
sS'required'
p54567
I01
sS'group_name'
p54568
NsasS'name'
p54569
S'/Kernels/SimpleACInterface'
p54570
sa(dp54571
S'description'
p54572
S'Gradient energy for Cahn-Hilliard equation with constant Mobility and Interfacial parameter\n'
p54573
sS'subblocks'
p54574
NsS'parameters'
p54575
(lp54576
(dp54577
S'description'
p54578
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54579
sS'cpp_type'
p54580
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54581
sS'default'
p54582
g3
sS'name'
p54583
S'block'
p54584
sS'required'
p54585
I00
sS'group_name'
p54586
Nsa(dp54587
S'description'
p54588
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54589
sS'cpp_type'
p54590
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54591
sS'default'
p54592
g3
sS'name'
p54593
S'control_tags'
p54594
sS'required'
p54595
I00
sS'group_name'
p54596
S'Advanced'
p54597
sa(dp54598
S'description'
p54599
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54600
sS'cpp_type'
p54601
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54602
sS'default'
p54603
g3
sS'name'
p54604
S'diag_save_in'
p54605
sS'required'
p54606
I00
sS'group_name'
p54607
S'Advanced'
p54608
sa(dp54609
S'description'
p54610
S'Whether or not this kernel will be used as an eigen kernel\n'
p54611
sS'cpp_type'
p54612
S'bool'
p54613
sS'default'
p54614
S'0'
p54615
sS'name'
p54616
S'eigen_kernel'
p54617
sS'required'
p54618
I00
sS'group_name'
p54619
Nsa(dp54620
S'description'
p54621
S'Set the enabled status of the MooseObject.\n'
p54622
sS'cpp_type'
p54623
S'bool'
p54624
sS'default'
p54625
S'1'
p54626
sS'name'
p54627
S'enable'
p54628
sS'required'
p54629
I00
sS'group_name'
p54630
S'Advanced'
p54631
sa(dp54632
S'description'
p54633
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54634
sS'cpp_type'
p54635
S'bool'
p54636
sS'default'
p54637
S'1'
p54638
sS'name'
p54639
S'implicit'
p54640
sS'required'
p54641
I00
sS'group_name'
p54642
S'Advanced'
p54643
sa(dp54644
S'description'
p54645
S'The kappa used with the kernel, should be constant value\n'
p54646
sS'cpp_type'
p54647
S'MaterialPropertyName'
p54648
sS'default'
p54649
g3
sS'name'
p54650
S'kappa_name'
p54651
sS'required'
p54652
I01
sS'group_name'
p54653
Nsa(dp54654
S'description'
p54655
S'The mobility used with the kernel, should be constant value\n'
p54656
sS'cpp_type'
p54657
S'MaterialPropertyName'
p54658
sS'default'
p54659
g3
sS'name'
p54660
S'mob_name'
p54661
sS'required'
p54662
I01
sS'group_name'
p54663
Nsa(dp54664
S'description'
p54665
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54666
sS'cpp_type'
p54667
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54668
sS'default'
p54669
g3
sS'name'
p54670
S'save_in'
p54671
sS'required'
p54672
I00
sS'group_name'
p54673
S'Advanced'
p54674
sa(dp54675
S'description'
p54676
S'The seed for the master random number generator\n'
p54677
sS'cpp_type'
p54678
S'unsigned int'
p54679
sS'default'
p54680
S'0'
p54681
sS'name'
p54682
S'seed'
p54683
sS'required'
p54684
I00
sS'group_name'
p54685
S'Advanced'
p54686
sa(dp54687
S'description'
p54688
g3
sS'cpp_type'
p54689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54690
sS'default'
p54691
S'SimpleCHInterface'
p54692
sS'name'
p54693
S'type'
p54694
sS'required'
p54695
I00
sS'group_name'
p54696
Nsa(dp54697
S'description'
p54698
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54699
sS'cpp_type'
p54700
S'bool'
p54701
sS'default'
p54702
S'0'
p54703
sS'name'
p54704
S'use_displaced_mesh'
p54705
sS'required'
p54706
I00
sS'group_name'
p54707
S'Advanced'
p54708
sa(dp54709
S'description'
p54710
S'The name of the variable that this Kernel operates on\n'
p54711
sS'cpp_type'
p54712
S'NonlinearVariableName'
p54713
sS'default'
p54714
g3
sS'name'
p54715
S'variable'
p54716
sS'required'
p54717
I01
sS'group_name'
p54718
NsasS'name'
p54719
S'/Kernels/SimpleCHInterface'
p54720
sa(dp54721
S'description'
p54722
S'Gradient energy for Allen-Cahn Kernel with constant Mobility and Interfacial parameter\n'
p54723
sS'subblocks'
p54724
NsS'parameters'
p54725
(lp54726
(dp54727
S'description'
p54728
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54729
sS'cpp_type'
p54730
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54731
sS'default'
p54732
g3
sS'name'
p54733
S'block'
p54734
sS'required'
p54735
I00
sS'group_name'
p54736
Nsa(dp54737
S'description'
p54738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54739
sS'cpp_type'
p54740
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54741
sS'default'
p54742
g3
sS'name'
p54743
S'control_tags'
p54744
sS'required'
p54745
I00
sS'group_name'
p54746
S'Advanced'
p54747
sa(dp54748
S'description'
p54749
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54750
sS'cpp_type'
p54751
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54752
sS'default'
p54753
g3
sS'name'
p54754
S'diag_save_in'
p54755
sS'required'
p54756
I00
sS'group_name'
p54757
S'Advanced'
p54758
sa(dp54759
S'description'
p54760
S'Whether or not this kernel will be used as an eigen kernel\n'
p54761
sS'cpp_type'
p54762
S'bool'
p54763
sS'default'
p54764
S'0'
p54765
sS'name'
p54766
S'eigen_kernel'
p54767
sS'required'
p54768
I00
sS'group_name'
p54769
Nsa(dp54770
S'description'
p54771
S'Set the enabled status of the MooseObject.\n'
p54772
sS'cpp_type'
p54773
S'bool'
p54774
sS'default'
p54775
S'1'
p54776
sS'name'
p54777
S'enable'
p54778
sS'required'
p54779
I00
sS'group_name'
p54780
S'Advanced'
p54781
sa(dp54782
S'description'
p54783
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54784
sS'cpp_type'
p54785
S'bool'
p54786
sS'default'
p54787
S'1'
p54788
sS'name'
p54789
S'implicit'
p54790
sS'required'
p54791
I00
sS'group_name'
p54792
S'Advanced'
p54793
sa(dp54794
S'description'
p54795
S'The kappa used with the kernel\n'
p54796
sS'cpp_type'
p54797
S'MaterialPropertyName'
p54798
sS'default'
p54799
S'kappa_op'
p54800
sS'name'
p54801
S'kappa_name'
p54802
sS'required'
p54803
I00
sS'group_name'
p54804
Nsa(dp54805
S'description'
p54806
S'The mobility used with the kernel\n'
p54807
sS'cpp_type'
p54808
S'MaterialPropertyName'
p54809
sS'default'
p54810
S'L'
p54811
sS'name'
p54812
S'mob_name'
p54813
sS'required'
p54814
I00
sS'group_name'
p54815
Nsa(dp54816
S'description'
p54817
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54818
sS'cpp_type'
p54819
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54820
sS'default'
p54821
g3
sS'name'
p54822
S'save_in'
p54823
sS'required'
p54824
I00
sS'group_name'
p54825
S'Advanced'
p54826
sa(dp54827
S'description'
p54828
S'The seed for the master random number generator\n'
p54829
sS'cpp_type'
p54830
S'unsigned int'
p54831
sS'default'
p54832
S'0'
p54833
sS'name'
p54834
S'seed'
p54835
sS'required'
p54836
I00
sS'group_name'
p54837
S'Advanced'
p54838
sa(dp54839
S'description'
p54840
g3
sS'cpp_type'
p54841
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54842
sS'default'
p54843
S'SimpleCoupledACInterface'
p54844
sS'name'
p54845
S'type'
p54846
sS'required'
p54847
I00
sS'group_name'
p54848
Nsa(dp54849
S'description'
p54850
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54851
sS'cpp_type'
p54852
S'bool'
p54853
sS'default'
p54854
S'0'
p54855
sS'name'
p54856
S'use_displaced_mesh'
p54857
sS'required'
p54858
I00
sS'group_name'
p54859
S'Advanced'
p54860
sa(dp54861
S'description'
p54862
S'Coupled variable that the Laplacian is taken of\n'
p54863
sS'cpp_type'
p54864
S'std::vector<VariableName>'
p54865
sS'default'
p54866
g3
sS'name'
p54867
S'v'
p54868
sS'required'
p54869
I01
sS'group_name'
p54870
Nsa(dp54871
S'description'
p54872
S'The name of the variable that this Kernel operates on\n'
p54873
sS'cpp_type'
p54874
S'NonlinearVariableName'
p54875
sS'default'
p54876
g3
sS'name'
p54877
S'variable'
p54878
sS'required'
p54879
I01
sS'group_name'
p54880
NsasS'name'
p54881
S'/Kernels/SimpleCoupledACInterface'
p54882
sa(dp54883
S'description'
p54884
S'Gradient energy for split Cahn-Hilliard equation with constant Mobility\n'
p54885
sS'subblocks'
p54886
NsS'parameters'
p54887
(lp54888
(dp54889
S'description'
p54890
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54891
sS'cpp_type'
p54892
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54893
sS'default'
p54894
g3
sS'name'
p54895
S'block'
p54896
sS'required'
p54897
I00
sS'group_name'
p54898
Nsa(dp54899
S'description'
p54900
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54901
sS'cpp_type'
p54902
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54903
sS'default'
p54904
g3
sS'name'
p54905
S'control_tags'
p54906
sS'required'
p54907
I00
sS'group_name'
p54908
S'Advanced'
p54909
sa(dp54910
S'description'
p54911
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54912
sS'cpp_type'
p54913
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54914
sS'default'
p54915
g3
sS'name'
p54916
S'diag_save_in'
p54917
sS'required'
p54918
I00
sS'group_name'
p54919
S'Advanced'
p54920
sa(dp54921
S'description'
p54922
S'Whether or not this kernel will be used as an eigen kernel\n'
p54923
sS'cpp_type'
p54924
S'bool'
p54925
sS'default'
p54926
S'0'
p54927
sS'name'
p54928
S'eigen_kernel'
p54929
sS'required'
p54930
I00
sS'group_name'
p54931
Nsa(dp54932
S'description'
p54933
S'Set the enabled status of the MooseObject.\n'
p54934
sS'cpp_type'
p54935
S'bool'
p54936
sS'default'
p54937
S'1'
p54938
sS'name'
p54939
S'enable'
p54940
sS'required'
p54941
I00
sS'group_name'
p54942
S'Advanced'
p54943
sa(dp54944
S'description'
p54945
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54946
sS'cpp_type'
p54947
S'bool'
p54948
sS'default'
p54949
S'1'
p54950
sS'name'
p54951
S'implicit'
p54952
sS'required'
p54953
I00
sS'group_name'
p54954
S'Advanced'
p54955
sa(dp54956
S'description'
p54957
S'The mobility used with the kernel, should be a constant value\n'
p54958
sS'cpp_type'
p54959
S'MaterialPropertyName'
p54960
sS'default'
p54961
S'M'
p54962
sS'name'
p54963
S'mob_name'
p54964
sS'required'
p54965
I00
sS'group_name'
p54966
Nsa(dp54967
S'description'
p54968
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54969
sS'cpp_type'
p54970
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54971
sS'default'
p54972
g3
sS'name'
p54973
S'save_in'
p54974
sS'required'
p54975
I00
sS'group_name'
p54976
S'Advanced'
p54977
sa(dp54978
S'description'
p54979
S'The seed for the master random number generator\n'
p54980
sS'cpp_type'
p54981
S'unsigned int'
p54982
sS'default'
p54983
S'0'
p54984
sS'name'
p54985
S'seed'
p54986
sS'required'
p54987
I00
sS'group_name'
p54988
S'Advanced'
p54989
sa(dp54990
S'description'
p54991
g3
sS'cpp_type'
p54992
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54993
sS'default'
p54994
S'SimpleSplitCHWRes'
p54995
sS'name'
p54996
S'type'
p54997
sS'required'
p54998
I00
sS'group_name'
p54999
Nsa(dp55000
S'description'
p55001
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55002
sS'cpp_type'
p55003
S'bool'
p55004
sS'default'
p55005
S'0'
p55006
sS'name'
p55007
S'use_displaced_mesh'
p55008
sS'required'
p55009
I00
sS'group_name'
p55010
S'Advanced'
p55011
sa(dp55012
S'description'
p55013
S'The name of the variable that this Kernel operates on\n'
p55014
sS'cpp_type'
p55015
S'NonlinearVariableName'
p55016
sS'default'
p55017
g3
sS'name'
p55018
S'variable'
p55019
sS'required'
p55020
I01
sS'group_name'
p55021
NsasS'name'
p55022
S'/Kernels/SimpleSplitCHWRes'
p55023
sa(dp55024
S'description'
p55025
S'Adds rigid mody motion to a single grain\n'
p55026
sS'subblocks'
p55027
NsS'parameters'
p55028
(lp55029
(dp55030
S'description'
p55031
S'Optional parameter that allows the user to define type of force density under consideration\n'
p55032
sS'cpp_type'
p55033
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55034
sS'default'
p55035
g3
sS'name'
p55036
S'base_name'
p55037
sS'required'
p55038
I00
sS'group_name'
p55039
Nsa(dp55040
S'description'
p55041
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55042
sS'cpp_type'
p55043
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55044
sS'default'
p55045
g3
sS'name'
p55046
S'block'
p55047
sS'required'
p55048
I00
sS'group_name'
p55049
Nsa(dp55050
S'description'
p55051
S'Concentration\n'
p55052
sS'cpp_type'
p55053
S'std::vector<VariableName>'
p55054
sS'default'
p55055
g3
sS'name'
p55056
S'c'
p55057
sS'required'
p55058
I01
sS'group_name'
p55059
Nsa(dp55060
S'description'
p55061
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55062
sS'cpp_type'
p55063
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55064
sS'default'
p55065
g3
sS'name'
p55066
S'control_tags'
p55067
sS'required'
p55068
I00
sS'group_name'
p55069
S'Advanced'
p55070
sa(dp55071
S'description'
p55072
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55073
sS'cpp_type'
p55074
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55075
sS'default'
p55076
g3
sS'name'
p55077
S'diag_save_in'
p55078
sS'required'
p55079
I00
sS'group_name'
p55080
S'Advanced'
p55081
sa(dp55082
S'description'
p55083
S'Whether or not this kernel will be used as an eigen kernel\n'
p55084
sS'cpp_type'
p55085
S'bool'
p55086
sS'default'
p55087
S'0'
p55088
sS'name'
p55089
S'eigen_kernel'
p55090
sS'required'
p55091
I00
sS'group_name'
p55092
Nsa(dp55093
S'description'
p55094
S'Set the enabled status of the MooseObject.\n'
p55095
sS'cpp_type'
p55096
S'bool'
p55097
sS'default'
p55098
S'1'
p55099
sS'name'
p55100
S'enable'
p55101
sS'required'
p55102
I00
sS'group_name'
p55103
S'Advanced'
p55104
sa(dp55105
S'description'
p55106
S'UserObject for getting force and torque acting on grains\n'
p55107
sS'cpp_type'
p55108
S'UserObjectName'
p55109
sS'default'
p55110
g3
sS'name'
p55111
S'grain_force'
p55112
sS'required'
p55113
I01
sS'group_name'
p55114
Nsa(dp55115
S'description'
p55116
S'The FeatureFloodCount UserObject to get values from.\n'
p55117
sS'cpp_type'
p55118
S'UserObjectName'
p55119
sS'default'
p55120
g3
sS'name'
p55121
S'grain_tracker_object'
p55122
sS'required'
p55123
I01
sS'group_name'
p55124
Nsa(dp55125
S'description'
p55126
S'The feature volume VectorPostprocessorValue.\n'
p55127
sS'cpp_type'
p55128
S'VectorPostprocessorName'
p55129
sS'default'
p55130
g3
sS'name'
p55131
S'grain_volumes'
p55132
sS'required'
p55133
I01
sS'group_name'
p55134
Nsa(dp55135
S'description'
p55136
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55137
sS'cpp_type'
p55138
S'bool'
p55139
sS'default'
p55140
S'1'
p55141
sS'name'
p55142
S'implicit'
p55143
sS'required'
p55144
I00
sS'group_name'
p55145
S'Advanced'
p55146
sa(dp55147
S'description'
p55148
S'Grain number for the kernel to be applied\n'
p55149
sS'cpp_type'
p55150
S'unsigned int'
p55151
sS'default'
p55152
S'0'
p55153
sS'name'
p55154
S'op_index'
p55155
sS'required'
p55156
I00
sS'group_name'
p55157
Nsa(dp55158
S'description'
p55159
S'Array of coupled variable names (num_name)\n'
p55160
sS'cpp_type'
p55161
S'unsigned int'
p55162
sS'default'
p55163
g3
sS'name'
p55164
S'op_num'
p55165
sS'required'
p55166
I00
sS'group_name'
p55167
Nsa(dp55168
S'description'
p55169
S'constant value characterizing grain rotation\n'
p55170
sS'cpp_type'
p55171
S'double'
p55172
sS'default'
p55173
S'1'
p55174
sS'name'
p55175
S'rotation_constant'
p55176
sS'required'
p55177
I00
sS'group_name'
p55178
Nsa(dp55179
S'description'
p55180
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55181
sS'cpp_type'
p55182
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55183
sS'default'
p55184
g3
sS'name'
p55185
S'save_in'
p55186
sS'required'
p55187
I00
sS'group_name'
p55188
S'Advanced'
p55189
sa(dp55190
S'description'
p55191
S'The seed for the master random number generator\n'
p55192
sS'cpp_type'
p55193
S'unsigned int'
p55194
sS'default'
p55195
S'0'
p55196
sS'name'
p55197
S'seed'
p55198
sS'required'
p55199
I00
sS'group_name'
p55200
S'Advanced'
p55201
sa(dp55202
S'description'
p55203
S'constant value characterizing grain translation\n'
p55204
sS'cpp_type'
p55205
S'double'
p55206
sS'default'
p55207
S'500'
p55208
sS'name'
p55209
S'translation_constant'
p55210
sS'required'
p55211
I00
sS'group_name'
p55212
Nsa(dp55213
S'description'
p55214
g3
sS'cpp_type'
p55215
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55216
sS'default'
p55217
S'SingleGrainRigidBodyMotion'
p55218
sS'name'
p55219
S'type'
p55220
sS'required'
p55221
I00
sS'group_name'
p55222
Nsa(dp55223
S'description'
p55224
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55225
sS'cpp_type'
p55226
S'bool'
p55227
sS'default'
p55228
S'0'
p55229
sS'name'
p55230
S'use_displaced_mesh'
p55231
sS'required'
p55232
I00
sS'group_name'
p55233
S'Advanced'
p55234
sa(dp55235
S'description'
p55236
S'Array of coupled variable names\n'
p55237
sS'cpp_type'
p55238
S'std::vector<VariableName>'
p55239
sS'default'
p55240
g3
sS'name'
p55241
S'v'
p55242
sS'required'
p55243
I01
sS'group_name'
p55244
Nsa(dp55245
S'description'
p55246
S'Array of coupled variable names (base_name)\n'
p55247
sS'cpp_type'
p55248
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55249
sS'default'
p55250
g3
sS'name'
p55251
S'var_name_base'
p55252
sS'required'
p55253
I00
sS'group_name'
p55254
Nsa(dp55255
S'description'
p55256
S'The name of the variable that this Kernel operates on\n'
p55257
sS'cpp_type'
p55258
S'NonlinearVariableName'
p55259
sS'default'
p55260
g3
sS'name'
p55261
S'variable'
p55262
sS'required'
p55263
I01
sS'group_name'
p55264
NsasS'name'
p55265
S'/Kernels/SingleGrainRigidBodyMotion'
p55266
sa(dp55267
S'description'
p55268
S'Add Soret effect to Split formulation Cahn-Hilliard Kernel\n'
p55269
sS'subblocks'
p55270
NsS'parameters'
p55271
(lp55272
(dp55273
S'description'
p55274
S'The material name for the heat of transport\n'
p55275
sS'cpp_type'
p55276
S'MaterialPropertyName'
p55277
sS'default'
p55278
S'Qheat'
p55279
sS'name'
p55280
S'Q_name'
p55281
sS'required'
p55282
I00
sS'group_name'
p55283
Nsa(dp55284
S'description'
p55285
S'Temperature\n'
p55286
sS'cpp_type'
p55287
S'std::vector<VariableName>'
p55288
sS'default'
p55289
g3
sS'name'
p55290
S'T'
p55291
sS'required'
p55292
I01
sS'group_name'
p55293
Nsa(dp55294
S'description'
p55295
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55296
sS'cpp_type'
p55297
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55298
sS'default'
p55299
g3
sS'name'
p55300
S'block'
p55301
sS'required'
p55302
I00
sS'group_name'
p55303
Nsa(dp55304
S'description'
p55305
S'Concentration\n'
p55306
sS'cpp_type'
p55307
S'std::vector<VariableName>'
p55308
sS'default'
p55309
g3
sS'name'
p55310
S'c'
p55311
sS'required'
p55312
I00
sS'group_name'
p55313
Nsa(dp55314
S'description'
p55315
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55316
sS'cpp_type'
p55317
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55318
sS'default'
p55319
g3
sS'name'
p55320
S'control_tags'
p55321
sS'required'
p55322
I00
sS'group_name'
p55323
S'Advanced'
p55324
sa(dp55325
S'description'
p55326
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55327
sS'cpp_type'
p55328
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55329
sS'default'
p55330
g3
sS'name'
p55331
S'diag_save_in'
p55332
sS'required'
p55333
I00
sS'group_name'
p55334
S'Advanced'
p55335
sa(dp55336
S'description'
p55337
S'The diffusivity used with the kernel\n'
p55338
sS'cpp_type'
p55339
S'MaterialPropertyName'
p55340
sS'default'
p55341
g3
sS'name'
p55342
S'diff_name'
p55343
sS'required'
p55344
I01
sS'group_name'
p55345
Nsa(dp55346
S'description'
p55347
S'Whether or not this kernel will be used as an eigen kernel\n'
p55348
sS'cpp_type'
p55349
S'bool'
p55350
sS'default'
p55351
S'0'
p55352
sS'name'
p55353
S'eigen_kernel'
p55354
sS'required'
p55355
I00
sS'group_name'
p55356
Nsa(dp55357
S'description'
p55358
S'Set the enabled status of the MooseObject.\n'
p55359
sS'cpp_type'
p55360
S'bool'
p55361
sS'default'
p55362
S'1'
p55363
sS'name'
p55364
S'enable'
p55365
sS'required'
p55366
I00
sS'group_name'
p55367
S'Advanced'
p55368
sa(dp55369
S'description'
p55370
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55371
sS'cpp_type'
p55372
S'bool'
p55373
sS'default'
p55374
S'1'
p55375
sS'name'
p55376
S'implicit'
p55377
sS'required'
p55378
I00
sS'group_name'
p55379
S'Advanced'
p55380
sa(dp55381
S'description'
p55382
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55383
sS'cpp_type'
p55384
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55385
sS'default'
p55386
g3
sS'name'
p55387
S'save_in'
p55388
sS'required'
p55389
I00
sS'group_name'
p55390
S'Advanced'
p55391
sa(dp55392
S'description'
p55393
S'The seed for the master random number generator\n'
p55394
sS'cpp_type'
p55395
S'unsigned int'
p55396
sS'default'
p55397
S'0'
p55398
sS'name'
p55399
S'seed'
p55400
sS'required'
p55401
I00
sS'group_name'
p55402
S'Advanced'
p55403
sa(dp55404
S'description'
p55405
g3
sS'cpp_type'
p55406
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55407
sS'default'
p55408
S'SoretDiffusion'
p55409
sS'name'
p55410
S'type'
p55411
sS'required'
p55412
I00
sS'group_name'
p55413
Nsa(dp55414
S'description'
p55415
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55416
sS'cpp_type'
p55417
S'bool'
p55418
sS'default'
p55419
S'0'
p55420
sS'name'
p55421
S'use_displaced_mesh'
p55422
sS'required'
p55423
I00
sS'group_name'
p55424
S'Advanced'
p55425
sa(dp55426
S'description'
p55427
S'The name of the variable that this Kernel operates on\n'
p55428
sS'cpp_type'
p55429
S'NonlinearVariableName'
p55430
sS'default'
p55431
g3
sS'name'
p55432
S'variable'
p55433
sS'required'
p55434
I01
sS'group_name'
p55435
NsasS'name'
p55436
S'/Kernels/SoretDiffusion'
p55437
sa(dp55438
S'description'
p55439
S'Simple demonstration split formulation Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p55440
sS'subblocks'
p55441
NsS'parameters'
p55442
(lp55443
(dp55444
S'description'
p55445
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55446
sS'cpp_type'
p55447
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55448
sS'default'
p55449
g3
sS'name'
p55450
S'block'
p55451
sS'required'
p55452
I00
sS'group_name'
p55453
Nsa(dp55454
S'description'
p55455
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55456
sS'cpp_type'
p55457
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55458
sS'default'
p55459
g3
sS'name'
p55460
S'control_tags'
p55461
sS'required'
p55462
I00
sS'group_name'
p55463
S'Advanced'
p55464
sa(dp55465
S'description'
p55466
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55467
sS'cpp_type'
p55468
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55469
sS'default'
p55470
g3
sS'name'
p55471
S'diag_save_in'
p55472
sS'required'
p55473
I00
sS'group_name'
p55474
S'Advanced'
p55475
sa(dp55476
S'description'
p55477
S'Whether or not this kernel will be used as an eigen kernel\n'
p55478
sS'cpp_type'
p55479
S'bool'
p55480
sS'default'
p55481
S'0'
p55482
sS'name'
p55483
S'eigen_kernel'
p55484
sS'required'
p55485
I00
sS'group_name'
p55486
Nsa(dp55487
S'description'
p55488
S'Set the enabled status of the MooseObject.\n'
p55489
sS'cpp_type'
p55490
S'bool'
p55491
sS'default'
p55492
S'1'
p55493
sS'name'
p55494
S'enable'
p55495
sS'required'
p55496
I00
sS'group_name'
p55497
S'Advanced'
p55498
sa(dp55499
S'description'
p55500
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55501
sS'cpp_type'
p55502
S'bool'
p55503
sS'default'
p55504
S'1'
p55505
sS'name'
p55506
S'implicit'
p55507
sS'required'
p55508
I00
sS'group_name'
p55509
S'Advanced'
p55510
sa(dp55511
S'description'
p55512
S'The kappa used with the kernel\n'
p55513
sS'cpp_type'
p55514
S'MaterialPropertyName'
p55515
sS'default'
p55516
g3
sS'name'
p55517
S'kappa_name'
p55518
sS'required'
p55519
I01
sS'group_name'
p55520
Nsa(dp55521
S'description'
p55522
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55523
sS'cpp_type'
p55524
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55525
sS'default'
p55526
g3
sS'name'
p55527
S'save_in'
p55528
sS'required'
p55529
I00
sS'group_name'
p55530
S'Advanced'
p55531
sa(dp55532
S'description'
p55533
S'The seed for the master random number generator\n'
p55534
sS'cpp_type'
p55535
S'unsigned int'
p55536
sS'default'
p55537
S'0'
p55538
sS'name'
p55539
S'seed'
p55540
sS'required'
p55541
I00
sS'group_name'
p55542
S'Advanced'
p55543
sa(dp55544
S'description'
p55545
g3
sS'cpp_type'
p55546
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55547
sS'default'
p55548
S'SplitCHMath'
p55549
sS'name'
p55550
S'type'
p55551
sS'required'
p55552
I00
sS'group_name'
p55553
Nsa(dp55554
S'description'
p55555
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55556
sS'cpp_type'
p55557
S'bool'
p55558
sS'default'
p55559
S'0'
p55560
sS'name'
p55561
S'use_displaced_mesh'
p55562
sS'required'
p55563
I00
sS'group_name'
p55564
S'Advanced'
p55565
sa(dp55566
S'description'
p55567
S'The name of the variable that this Kernel operates on\n'
p55568
sS'cpp_type'
p55569
S'NonlinearVariableName'
p55570
sS'default'
p55571
g3
sS'name'
p55572
S'variable'
p55573
sS'required'
p55574
I01
sS'group_name'
p55575
Nsa(dp55576
S'description'
p55577
S'chem poten\n'
p55578
sS'cpp_type'
p55579
S'std::vector<VariableName>'
p55580
sS'default'
p55581
g3
sS'name'
p55582
S'w'
p55583
sS'required'
p55584
I01
sS'group_name'
p55585
NsasS'name'
p55586
S'/Kernels/SplitCHMath'
p55587
sa(dp55588
S'description'
p55589
S'Split formulation Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy\n'
p55590
sS'subblocks'
p55591
NsS'parameters'
p55592
(lp55593
(dp55594
S'description'
p55595
S'Vector of additional arguments to F\n'
p55596
sS'cpp_type'
p55597
S'std::vector<VariableName>'
p55598
sS'default'
p55599
g3
sS'name'
p55600
S'args'
p55601
sS'required'
p55602
I00
sS'group_name'
p55603
Nsa(dp55604
S'description'
p55605
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55606
sS'cpp_type'
p55607
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55608
sS'default'
p55609
g3
sS'name'
p55610
S'block'
p55611
sS'required'
p55612
I00
sS'group_name'
p55613
Nsa(dp55614
S'description'
p55615
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55616
sS'cpp_type'
p55617
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55618
sS'default'
p55619
g3
sS'name'
p55620
S'control_tags'
p55621
sS'required'
p55622
I00
sS'group_name'
p55623
S'Advanced'
p55624
sa(dp55625
S'description'
p55626
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55627
sS'cpp_type'
p55628
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55629
sS'default'
p55630
g3
sS'name'
p55631
S'diag_save_in'
p55632
sS'required'
p55633
I00
sS'group_name'
p55634
S'Advanced'
p55635
sa(dp55636
S'description'
p55637
S'Whether or not this kernel will be used as an eigen kernel\n'
p55638
sS'cpp_type'
p55639
S'bool'
p55640
sS'default'
p55641
S'0'
p55642
sS'name'
p55643
S'eigen_kernel'
p55644
sS'required'
p55645
I00
sS'group_name'
p55646
Nsa(dp55647
S'description'
p55648
S'Set the enabled status of the MooseObject.\n'
p55649
sS'cpp_type'
p55650
S'bool'
p55651
sS'default'
p55652
S'1'
p55653
sS'name'
p55654
S'enable'
p55655
sS'required'
p55656
I00
sS'group_name'
p55657
S'Advanced'
p55658
sa(dp55659
S'description'
p55660
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p55661
sS'cpp_type'
p55662
S'MaterialPropertyName'
p55663
sS'default'
p55664
g3
sS'name'
p55665
S'f_name'
p55666
sS'required'
p55667
I01
sS'group_name'
p55668
Nsa(dp55669
S'description'
p55670
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55671
sS'cpp_type'
p55672
S'bool'
p55673
sS'default'
p55674
S'1'
p55675
sS'name'
p55676
S'implicit'
p55677
sS'required'
p55678
I00
sS'group_name'
p55679
S'Advanced'
p55680
sa(dp55681
S'description'
p55682
S'The kappa used with the kernel\n'
p55683
sS'cpp_type'
p55684
S'MaterialPropertyName'
p55685
sS'default'
p55686
g3
sS'name'
p55687
S'kappa_name'
p55688
sS'required'
p55689
I01
sS'group_name'
p55690
Nsa(dp55691
S'description'
p55692
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55693
sS'cpp_type'
p55694
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55695
sS'default'
p55696
g3
sS'name'
p55697
S'save_in'
p55698
sS'required'
p55699
I00
sS'group_name'
p55700
S'Advanced'
p55701
sa(dp55702
S'description'
p55703
S'The seed for the master random number generator\n'
p55704
sS'cpp_type'
p55705
S'unsigned int'
p55706
sS'default'
p55707
S'0'
p55708
sS'name'
p55709
S'seed'
p55710
sS'required'
p55711
I00
sS'group_name'
p55712
S'Advanced'
p55713
sa(dp55714
S'description'
p55715
g3
sS'cpp_type'
p55716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55717
sS'default'
p55718
S'SplitCHParsed'
p55719
sS'name'
p55720
S'type'
p55721
sS'required'
p55722
I00
sS'group_name'
p55723
Nsa(dp55724
S'description'
p55725
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55726
sS'cpp_type'
p55727
S'bool'
p55728
sS'default'
p55729
S'0'
p55730
sS'name'
p55731
S'use_displaced_mesh'
p55732
sS'required'
p55733
I00
sS'group_name'
p55734
S'Advanced'
p55735
sa(dp55736
S'description'
p55737
S'The name of the variable that this Kernel operates on\n'
p55738
sS'cpp_type'
p55739
S'NonlinearVariableName'
p55740
sS'default'
p55741
g3
sS'name'
p55742
S'variable'
p55743
sS'required'
p55744
I01
sS'group_name'
p55745
Nsa(dp55746
S'description'
p55747
S'chem poten\n'
p55748
sS'cpp_type'
p55749
S'std::vector<VariableName>'
p55750
sS'default'
p55751
g3
sS'name'
p55752
S'w'
p55753
sS'required'
p55754
I01
sS'group_name'
p55755
NsasS'name'
p55756
S'/Kernels/SplitCHParsed'
p55757
sa(dp55758
S'description'
p55759
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a scalar (isotropic) mobility\n'
p55760
sS'subblocks'
p55761
NsS'parameters'
p55762
(lp55763
(dp55764
S'description'
p55765
S'Vector of arguments of the mobility\n'
p55766
sS'cpp_type'
p55767
S'std::vector<VariableName>'
p55768
sS'default'
p55769
g3
sS'name'
p55770
S'args'
p55771
sS'required'
p55772
I00
sS'group_name'
p55773
Nsa(dp55774
S'description'
p55775
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55776
sS'cpp_type'
p55777
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55778
sS'default'
p55779
g3
sS'name'
p55780
S'block'
p55781
sS'required'
p55782
I00
sS'group_name'
p55783
Nsa(dp55784
S'description'
p55785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55786
sS'cpp_type'
p55787
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55788
sS'default'
p55789
g3
sS'name'
p55790
S'control_tags'
p55791
sS'required'
p55792
I00
sS'group_name'
p55793
S'Advanced'
p55794
sa(dp55795
S'description'
p55796
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55797
sS'cpp_type'
p55798
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55799
sS'default'
p55800
g3
sS'name'
p55801
S'diag_save_in'
p55802
sS'required'
p55803
I00
sS'group_name'
p55804
S'Advanced'
p55805
sa(dp55806
S'description'
p55807
S'Whether or not this kernel will be used as an eigen kernel\n'
p55808
sS'cpp_type'
p55809
S'bool'
p55810
sS'default'
p55811
S'0'
p55812
sS'name'
p55813
S'eigen_kernel'
p55814
sS'required'
p55815
I00
sS'group_name'
p55816
Nsa(dp55817
S'description'
p55818
S'Set the enabled status of the MooseObject.\n'
p55819
sS'cpp_type'
p55820
S'bool'
p55821
sS'default'
p55822
S'1'
p55823
sS'name'
p55824
S'enable'
p55825
sS'required'
p55826
I00
sS'group_name'
p55827
S'Advanced'
p55828
sa(dp55829
S'description'
p55830
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55831
sS'cpp_type'
p55832
S'bool'
p55833
sS'default'
p55834
S'1'
p55835
sS'name'
p55836
S'implicit'
p55837
sS'required'
p55838
I00
sS'group_name'
p55839
S'Advanced'
p55840
sa(dp55841
S'description'
p55842
S'The mobility used with the kernel\n'
p55843
sS'cpp_type'
p55844
S'MaterialPropertyName'
p55845
sS'default'
p55846
S'mobtemp'
p55847
sS'name'
p55848
S'mob_name'
p55849
sS'required'
p55850
I00
sS'group_name'
p55851
Nsa(dp55852
S'description'
p55853
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55854
sS'cpp_type'
p55855
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55856
sS'default'
p55857
g3
sS'name'
p55858
S'save_in'
p55859
sS'required'
p55860
I00
sS'group_name'
p55861
S'Advanced'
p55862
sa(dp55863
S'description'
p55864
S'The seed for the master random number generator\n'
p55865
sS'cpp_type'
p55866
S'unsigned int'
p55867
sS'default'
p55868
S'0'
p55869
sS'name'
p55870
S'seed'
p55871
sS'required'
p55872
I00
sS'group_name'
p55873
S'Advanced'
p55874
sa(dp55875
S'description'
p55876
g3
sS'cpp_type'
p55877
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55878
sS'default'
p55879
S'SplitCHWRes'
p55880
sS'name'
p55881
S'type'
p55882
sS'required'
p55883
I00
sS'group_name'
p55884
Nsa(dp55885
S'description'
p55886
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55887
sS'cpp_type'
p55888
S'bool'
p55889
sS'default'
p55890
S'0'
p55891
sS'name'
p55892
S'use_displaced_mesh'
p55893
sS'required'
p55894
I00
sS'group_name'
p55895
S'Advanced'
p55896
sa(dp55897
S'description'
p55898
S'The name of the variable that this Kernel operates on\n'
p55899
sS'cpp_type'
p55900
S'NonlinearVariableName'
p55901
sS'default'
p55902
g3
sS'name'
p55903
S'variable'
p55904
sS'required'
p55905
I01
sS'group_name'
p55906
NsasS'name'
p55907
S'/Kernels/SplitCHWRes'
p55908
sa(dp55909
S'description'
p55910
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a tensor (anisotropic) mobility\n'
p55911
sS'subblocks'
p55912
NsS'parameters'
p55913
(lp55914
(dp55915
S'description'
p55916
S'Vector of arguments of the mobility\n'
p55917
sS'cpp_type'
p55918
S'std::vector<VariableName>'
p55919
sS'default'
p55920
g3
sS'name'
p55921
S'args'
p55922
sS'required'
p55923
I00
sS'group_name'
p55924
Nsa(dp55925
S'description'
p55926
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55927
sS'cpp_type'
p55928
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55929
sS'default'
p55930
g3
sS'name'
p55931
S'block'
p55932
sS'required'
p55933
I00
sS'group_name'
p55934
Nsa(dp55935
S'description'
p55936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55937
sS'cpp_type'
p55938
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55939
sS'default'
p55940
g3
sS'name'
p55941
S'control_tags'
p55942
sS'required'
p55943
I00
sS'group_name'
p55944
S'Advanced'
p55945
sa(dp55946
S'description'
p55947
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55948
sS'cpp_type'
p55949
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55950
sS'default'
p55951
g3
sS'name'
p55952
S'diag_save_in'
p55953
sS'required'
p55954
I00
sS'group_name'
p55955
S'Advanced'
p55956
sa(dp55957
S'description'
p55958
S'Whether or not this kernel will be used as an eigen kernel\n'
p55959
sS'cpp_type'
p55960
S'bool'
p55961
sS'default'
p55962
S'0'
p55963
sS'name'
p55964
S'eigen_kernel'
p55965
sS'required'
p55966
I00
sS'group_name'
p55967
Nsa(dp55968
S'description'
p55969
S'Set the enabled status of the MooseObject.\n'
p55970
sS'cpp_type'
p55971
S'bool'
p55972
sS'default'
p55973
S'1'
p55974
sS'name'
p55975
S'enable'
p55976
sS'required'
p55977
I00
sS'group_name'
p55978
S'Advanced'
p55979
sa(dp55980
S'description'
p55981
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55982
sS'cpp_type'
p55983
S'bool'
p55984
sS'default'
p55985
S'1'
p55986
sS'name'
p55987
S'implicit'
p55988
sS'required'
p55989
I00
sS'group_name'
p55990
S'Advanced'
p55991
sa(dp55992
S'description'
p55993
S'The mobility used with the kernel\n'
p55994
sS'cpp_type'
p55995
S'MaterialPropertyName'
p55996
sS'default'
p55997
S'mobtemp'
p55998
sS'name'
p55999
S'mob_name'
p56000
sS'required'
p56001
I00
sS'group_name'
p56002
Nsa(dp56003
S'description'
p56004
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56005
sS'cpp_type'
p56006
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56007
sS'default'
p56008
g3
sS'name'
p56009
S'save_in'
p56010
sS'required'
p56011
I00
sS'group_name'
p56012
S'Advanced'
p56013
sa(dp56014
S'description'
p56015
S'The seed for the master random number generator\n'
p56016
sS'cpp_type'
p56017
S'unsigned int'
p56018
sS'default'
p56019
S'0'
p56020
sS'name'
p56021
S'seed'
p56022
sS'required'
p56023
I00
sS'group_name'
p56024
S'Advanced'
p56025
sa(dp56026
S'description'
p56027
g3
sS'cpp_type'
p56028
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56029
sS'default'
p56030
S'SplitCHWResAniso'
p56031
sS'name'
p56032
S'type'
p56033
sS'required'
p56034
I00
sS'group_name'
p56035
Nsa(dp56036
S'description'
p56037
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56038
sS'cpp_type'
p56039
S'bool'
p56040
sS'default'
p56041
S'0'
p56042
sS'name'
p56043
S'use_displaced_mesh'
p56044
sS'required'
p56045
I00
sS'group_name'
p56046
S'Advanced'
p56047
sa(dp56048
S'description'
p56049
S'The name of the variable that this Kernel operates on\n'
p56050
sS'cpp_type'
p56051
S'NonlinearVariableName'
p56052
sS'default'
p56053
g3
sS'name'
p56054
S'variable'
p56055
sS'required'
p56056
I01
sS'group_name'
p56057
NsasS'name'
p56058
S'/Kernels/SplitCHWResAniso'
p56059
sa(dp56060
S'description'
p56061
S'Stress divergence kernel for phase-field fracture: Additionally computes off diagonal damage dependent Jacobian components\n'
p56062
sS'subblocks'
p56063
NsS'parameters'
p56064
(lp56065
(dp56066
S'description'
p56067
S'Material property base name\n'
p56068
sS'cpp_type'
p56069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56070
sS'default'
p56071
g3
sS'name'
p56072
S'base_name'
p56073
sS'required'
p56074
I00
sS'group_name'
p56075
Nsa(dp56076
S'description'
p56077
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56078
sS'cpp_type'
p56079
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56080
sS'default'
p56081
g3
sS'name'
p56082
S'block'
p56083
sS'required'
p56084
I00
sS'group_name'
p56085
Nsa(dp56086
S'description'
p56087
S'Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n'
p56088
sS'cpp_type'
p56089
S'std::vector<VariableName>'
p56090
sS'default'
p56091
g3
sS'name'
p56092
S'c'
p56093
sS'required'
p56094
I00
sS'group_name'
p56095
Nsa(dp56096
S'description'
p56097
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p56098
sS'cpp_type'
p56099
S'unsigned int'
p56100
sS'default'
p56101
g3
sS'name'
p56102
S'component'
p56103
sS'required'
p56104
I01
sS'group_name'
p56105
Nsa(dp56106
S'description'
p56107
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56108
sS'cpp_type'
p56109
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56110
sS'default'
p56111
g3
sS'name'
p56112
S'control_tags'
p56113
sS'required'
p56114
I00
sS'group_name'
p56115
S'Advanced'
p56116
sa(dp56117
S'description'
p56118
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56119
sS'cpp_type'
p56120
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56121
sS'default'
p56122
g3
sS'name'
p56123
S'diag_save_in'
p56124
sS'required'
p56125
I00
sS'group_name'
p56126
S'Advanced'
p56127
sa(dp56128
S'description'
p56129
S'The string of displacements suitable for the problem statement\n'
p56130
sS'cpp_type'
p56131
S'std::vector<VariableName>'
p56132
sS'default'
p56133
g3
sS'name'
p56134
S'displacements'
p56135
sS'required'
p56136
I01
sS'group_name'
p56137
Nsa(dp56138
S'description'
p56139
S'Whether or not this kernel will be used as an eigen kernel\n'
p56140
sS'cpp_type'
p56141
S'bool'
p56142
sS'default'
p56143
S'0'
p56144
sS'name'
p56145
S'eigen_kernel'
p56146
sS'required'
p56147
I00
sS'group_name'
p56148
Nsa(dp56149
S'description'
p56150
S'Set the enabled status of the MooseObject.\n'
p56151
sS'cpp_type'
p56152
S'bool'
p56153
sS'default'
p56154
S'1'
p56155
sS'name'
p56156
S'enable'
p56157
sS'required'
p56158
I00
sS'group_name'
p56159
S'Advanced'
p56160
sa(dp56161
S'description'
p56162
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56163
sS'cpp_type'
p56164
S'bool'
p56165
sS'default'
p56166
S'1'
p56167
sS'name'
p56168
S'implicit'
p56169
sS'required'
p56170
I00
sS'group_name'
p56171
S'Advanced'
p56172
sa(dp56173
S'description'
p56174
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56175
sS'cpp_type'
p56176
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56177
sS'default'
p56178
g3
sS'name'
p56179
S'save_in'
p56180
sS'required'
p56181
I00
sS'group_name'
p56182
S'Advanced'
p56183
sa(dp56184
S'description'
p56185
S'The seed for the master random number generator\n'
p56186
sS'cpp_type'
p56187
S'unsigned int'
p56188
sS'default'
p56189
S'0'
p56190
sS'name'
p56191
S'seed'
p56192
sS'required'
p56193
I00
sS'group_name'
p56194
S'Advanced'
p56195
sa(dp56196
S'description'
p56197
S'The temperature\n'
p56198
sS'cpp_type'
p56199
S'std::vector<VariableName>'
p56200
sS'default'
p56201
g3
sS'name'
p56202
S'temp'
p56203
sS'required'
p56204
I00
sS'group_name'
p56205
Nsa(dp56206
S'description'
p56207
S'The temperature\n'
p56208
sS'cpp_type'
p56209
S'std::vector<VariableName>'
p56210
sS'default'
p56211
g3
sS'name'
p56212
S'temperature'
p56213
sS'required'
p56214
I00
sS'group_name'
p56215
Nsa(dp56216
S'description'
p56217
g3
sS'cpp_type'
p56218
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56219
sS'default'
p56220
S'StressDivergencePFFracTensors'
p56221
sS'name'
p56222
S'type'
p56223
sS'required'
p56224
I00
sS'group_name'
p56225
Nsa(dp56226
S'description'
p56227
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56228
sS'cpp_type'
p56229
S'bool'
p56230
sS'default'
p56231
S'0'
p56232
sS'name'
p56233
S'use_displaced_mesh'
p56234
sS'required'
p56235
I00
sS'group_name'
p56236
S'Advanced'
p56237
sa(dp56238
S'description'
p56239
S'Jacobian for corotational finite strain\n'
p56240
sS'cpp_type'
p56241
S'bool'
p56242
sS'default'
p56243
S'0'
p56244
sS'name'
p56245
S'use_finite_deform_jacobian'
p56246
sS'required'
p56247
I00
sS'group_name'
p56248
Nsa(dp56249
S'description'
p56250
S'The name of the variable that this Kernel operates on\n'
p56251
sS'cpp_type'
p56252
S'NonlinearVariableName'
p56253
sS'default'
p56254
g3
sS'name'
p56255
S'variable'
p56256
sS'required'
p56257
I01
sS'group_name'
p56258
Nsa(dp56259
S'description'
p56260
S'Set to false to turn off volumetric locking correction\n'
p56261
sS'cpp_type'
p56262
S'bool'
p56263
sS'default'
p56264
S'0'
p56265
sS'name'
p56266
S'volumetric_locking_correction'
p56267
sS'required'
p56268
I00
sS'group_name'
p56269
NsasS'name'
p56270
S'/Kernels/StressDivergencePFFracTensors'
p56271
sa(dp56272
S'description'
p56273
S'Calculate stress divergence for an spherically symmetric 1D problem in polar coordinates.\n'
p56274
sS'subblocks'
p56275
NsS'parameters'
p56276
(lp56277
(dp56278
S'description'
p56279
S'Material property base name\n'
p56280
sS'cpp_type'
p56281
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56282
sS'default'
p56283
g3
sS'name'
p56284
S'base_name'
p56285
sS'required'
p56286
I00
sS'group_name'
p56287
Nsa(dp56288
S'description'
p56289
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56290
sS'cpp_type'
p56291
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56292
sS'default'
p56293
g3
sS'name'
p56294
S'block'
p56295
sS'required'
p56296
I00
sS'group_name'
p56297
Nsa(dp56298
S'description'
p56299
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n'
p56300
sS'cpp_type'
p56301
S'unsigned int'
p56302
sS'default'
p56303
g3
sS'name'
p56304
S'component'
p56305
sS'required'
p56306
I01
sS'group_name'
p56307
Nsa(dp56308
S'description'
p56309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56310
sS'cpp_type'
p56311
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56312
sS'default'
p56313
g3
sS'name'
p56314
S'control_tags'
p56315
sS'required'
p56316
I00
sS'group_name'
p56317
S'Advanced'
p56318
sa(dp56319
S'description'
p56320
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56321
sS'cpp_type'
p56322
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56323
sS'default'
p56324
g3
sS'name'
p56325
S'diag_save_in'
p56326
sS'required'
p56327
I00
sS'group_name'
p56328
S'Advanced'
p56329
sa(dp56330
S'description'
p56331
S'The string of displacements suitable for the problem statement\n'
p56332
sS'cpp_type'
p56333
S'std::vector<VariableName>'
p56334
sS'default'
p56335
g3
sS'name'
p56336
S'displacements'
p56337
sS'required'
p56338
I01
sS'group_name'
p56339
Nsa(dp56340
S'description'
p56341
S'Whether or not this kernel will be used as an eigen kernel\n'
p56342
sS'cpp_type'
p56343
S'bool'
p56344
sS'default'
p56345
S'0'
p56346
sS'name'
p56347
S'eigen_kernel'
p56348
sS'required'
p56349
I00
sS'group_name'
p56350
Nsa(dp56351
S'description'
p56352
S'Set the enabled status of the MooseObject.\n'
p56353
sS'cpp_type'
p56354
S'bool'
p56355
sS'default'
p56356
S'1'
p56357
sS'name'
p56358
S'enable'
p56359
sS'required'
p56360
I00
sS'group_name'
p56361
S'Advanced'
p56362
sa(dp56363
S'description'
p56364
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56365
sS'cpp_type'
p56366
S'bool'
p56367
sS'default'
p56368
S'1'
p56369
sS'name'
p56370
S'implicit'
p56371
sS'required'
p56372
I00
sS'group_name'
p56373
S'Advanced'
p56374
sa(dp56375
S'description'
p56376
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56377
sS'cpp_type'
p56378
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56379
sS'default'
p56380
g3
sS'name'
p56381
S'save_in'
p56382
sS'required'
p56383
I00
sS'group_name'
p56384
S'Advanced'
p56385
sa(dp56386
S'description'
p56387
S'The seed for the master random number generator\n'
p56388
sS'cpp_type'
p56389
S'unsigned int'
p56390
sS'default'
p56391
S'0'
p56392
sS'name'
p56393
S'seed'
p56394
sS'required'
p56395
I00
sS'group_name'
p56396
S'Advanced'
p56397
sa(dp56398
S'description'
p56399
S'The temperature\n'
p56400
sS'cpp_type'
p56401
S'std::vector<VariableName>'
p56402
sS'default'
p56403
g3
sS'name'
p56404
S'temp'
p56405
sS'required'
p56406
I00
sS'group_name'
p56407
Nsa(dp56408
S'description'
p56409
S'The temperature\n'
p56410
sS'cpp_type'
p56411
S'std::vector<VariableName>'
p56412
sS'default'
p56413
g3
sS'name'
p56414
S'temperature'
p56415
sS'required'
p56416
I00
sS'group_name'
p56417
Nsa(dp56418
S'description'
p56419
g3
sS'cpp_type'
p56420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56421
sS'default'
p56422
S'StressDivergenceRSphericalTensors'
p56423
sS'name'
p56424
S'type'
p56425
sS'required'
p56426
I00
sS'group_name'
p56427
Nsa(dp56428
S'description'
p56429
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56430
sS'cpp_type'
p56431
S'bool'
p56432
sS'default'
p56433
S'1'
p56434
sS'name'
p56435
S'use_displaced_mesh'
p56436
sS'required'
p56437
I00
sS'group_name'
p56438
S'Advanced'
p56439
sa(dp56440
S'description'
p56441
S'Jacobian for corotational finite strain\n'
p56442
sS'cpp_type'
p56443
S'bool'
p56444
sS'default'
p56445
S'0'
p56446
sS'name'
p56447
S'use_finite_deform_jacobian'
p56448
sS'required'
p56449
I00
sS'group_name'
p56450
Nsa(dp56451
S'description'
p56452
S'The name of the variable that this Kernel operates on\n'
p56453
sS'cpp_type'
p56454
S'NonlinearVariableName'
p56455
sS'default'
p56456
g3
sS'name'
p56457
S'variable'
p56458
sS'required'
p56459
I01
sS'group_name'
p56460
Nsa(dp56461
S'description'
p56462
S'Set to false to turn off volumetric locking correction\n'
p56463
sS'cpp_type'
p56464
S'bool'
p56465
sS'default'
p56466
S'0'
p56467
sS'name'
p56468
S'volumetric_locking_correction'
p56469
sS'required'
p56470
I00
sS'group_name'
p56471
NsasS'name'
p56472
S'/Kernels/StressDivergenceRSphericalTensors'
p56473
sa(dp56474
S'description'
p56475
S'Calculate stress divergence for an axisymmetric problem in cylinderical coordinates.\n'
p56476
sS'subblocks'
p56477
NsS'parameters'
p56478
(lp56479
(dp56480
S'description'
p56481
S'Material property base name\n'
p56482
sS'cpp_type'
p56483
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56484
sS'default'
p56485
g3
sS'name'
p56486
S'base_name'
p56487
sS'required'
p56488
I00
sS'group_name'
p56489
Nsa(dp56490
S'description'
p56491
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56492
sS'cpp_type'
p56493
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56494
sS'default'
p56495
g3
sS'name'
p56496
S'block'
p56497
sS'required'
p56498
I00
sS'group_name'
p56499
Nsa(dp56500
S'description'
p56501
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n'
p56502
sS'cpp_type'
p56503
S'unsigned int'
p56504
sS'default'
p56505
g3
sS'name'
p56506
S'component'
p56507
sS'required'
p56508
I01
sS'group_name'
p56509
Nsa(dp56510
S'description'
p56511
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56512
sS'cpp_type'
p56513
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56514
sS'default'
p56515
g3
sS'name'
p56516
S'control_tags'
p56517
sS'required'
p56518
I00
sS'group_name'
p56519
S'Advanced'
p56520
sa(dp56521
S'description'
p56522
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56523
sS'cpp_type'
p56524
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56525
sS'default'
p56526
g3
sS'name'
p56527
S'diag_save_in'
p56528
sS'required'
p56529
I00
sS'group_name'
p56530
S'Advanced'
p56531
sa(dp56532
S'description'
p56533
S'The string of displacements suitable for the problem statement\n'
p56534
sS'cpp_type'
p56535
S'std::vector<VariableName>'
p56536
sS'default'
p56537
g3
sS'name'
p56538
S'displacements'
p56539
sS'required'
p56540
I01
sS'group_name'
p56541
Nsa(dp56542
S'description'
p56543
S'Whether or not this kernel will be used as an eigen kernel\n'
p56544
sS'cpp_type'
p56545
S'bool'
p56546
sS'default'
p56547
S'0'
p56548
sS'name'
p56549
S'eigen_kernel'
p56550
sS'required'
p56551
I00
sS'group_name'
p56552
Nsa(dp56553
S'description'
p56554
S'Set the enabled status of the MooseObject.\n'
p56555
sS'cpp_type'
p56556
S'bool'
p56557
sS'default'
p56558
S'1'
p56559
sS'name'
p56560
S'enable'
p56561
sS'required'
p56562
I00
sS'group_name'
p56563
S'Advanced'
p56564
sa(dp56565
S'description'
p56566
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56567
sS'cpp_type'
p56568
S'bool'
p56569
sS'default'
p56570
S'1'
p56571
sS'name'
p56572
S'implicit'
p56573
sS'required'
p56574
I00
sS'group_name'
p56575
S'Advanced'
p56576
sa(dp56577
S'description'
p56578
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56579
sS'cpp_type'
p56580
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56581
sS'default'
p56582
g3
sS'name'
p56583
S'save_in'
p56584
sS'required'
p56585
I00
sS'group_name'
p56586
S'Advanced'
p56587
sa(dp56588
S'description'
p56589
S'The seed for the master random number generator\n'
p56590
sS'cpp_type'
p56591
S'unsigned int'
p56592
sS'default'
p56593
S'0'
p56594
sS'name'
p56595
S'seed'
p56596
sS'required'
p56597
I00
sS'group_name'
p56598
S'Advanced'
p56599
sa(dp56600
S'description'
p56601
S'The temperature\n'
p56602
sS'cpp_type'
p56603
S'std::vector<VariableName>'
p56604
sS'default'
p56605
g3
sS'name'
p56606
S'temp'
p56607
sS'required'
p56608
I00
sS'group_name'
p56609
Nsa(dp56610
S'description'
p56611
S'The temperature\n'
p56612
sS'cpp_type'
p56613
S'std::vector<VariableName>'
p56614
sS'default'
p56615
g3
sS'name'
p56616
S'temperature'
p56617
sS'required'
p56618
I00
sS'group_name'
p56619
Nsa(dp56620
S'description'
p56621
g3
sS'cpp_type'
p56622
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56623
sS'default'
p56624
S'StressDivergenceRZTensors'
p56625
sS'name'
p56626
S'type'
p56627
sS'required'
p56628
I00
sS'group_name'
p56629
Nsa(dp56630
S'description'
p56631
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56632
sS'cpp_type'
p56633
S'bool'
p56634
sS'default'
p56635
S'1'
p56636
sS'name'
p56637
S'use_displaced_mesh'
p56638
sS'required'
p56639
I00
sS'group_name'
p56640
S'Advanced'
p56641
sa(dp56642
S'description'
p56643
S'Jacobian for corotational finite strain\n'
p56644
sS'cpp_type'
p56645
S'bool'
p56646
sS'default'
p56647
S'0'
p56648
sS'name'
p56649
S'use_finite_deform_jacobian'
p56650
sS'required'
p56651
I00
sS'group_name'
p56652
Nsa(dp56653
S'description'
p56654
S'The name of the variable that this Kernel operates on\n'
p56655
sS'cpp_type'
p56656
S'NonlinearVariableName'
p56657
sS'default'
p56658
g3
sS'name'
p56659
S'variable'
p56660
sS'required'
p56661
I01
sS'group_name'
p56662
Nsa(dp56663
S'description'
p56664
S'Set to false to turn off volumetric locking correction\n'
p56665
sS'cpp_type'
p56666
S'bool'
p56667
sS'default'
p56668
S'0'
p56669
sS'name'
p56670
S'volumetric_locking_correction'
p56671
sS'required'
p56672
I00
sS'group_name'
p56673
NsasS'name'
p56674
S'/Kernels/StressDivergenceRZTensors'
p56675
sa(dp56676
S'description'
p56677
S'Stress divergence kernel for the Cartesian coordinate system\n'
p56678
sS'subblocks'
p56679
NsS'parameters'
p56680
(lp56681
(dp56682
S'description'
p56683
S'Material property base name\n'
p56684
sS'cpp_type'
p56685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56686
sS'default'
p56687
g3
sS'name'
p56688
S'base_name'
p56689
sS'required'
p56690
I00
sS'group_name'
p56691
Nsa(dp56692
S'description'
p56693
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56694
sS'cpp_type'
p56695
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56696
sS'default'
p56697
g3
sS'name'
p56698
S'block'
p56699
sS'required'
p56700
I00
sS'group_name'
p56701
Nsa(dp56702
S'description'
p56703
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p56704
sS'cpp_type'
p56705
S'unsigned int'
p56706
sS'default'
p56707
g3
sS'name'
p56708
S'component'
p56709
sS'required'
p56710
I01
sS'group_name'
p56711
Nsa(dp56712
S'description'
p56713
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56714
sS'cpp_type'
p56715
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56716
sS'default'
p56717
g3
sS'name'
p56718
S'control_tags'
p56719
sS'required'
p56720
I00
sS'group_name'
p56721
S'Advanced'
p56722
sa(dp56723
S'description'
p56724
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56725
sS'cpp_type'
p56726
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56727
sS'default'
p56728
g3
sS'name'
p56729
S'diag_save_in'
p56730
sS'required'
p56731
I00
sS'group_name'
p56732
S'Advanced'
p56733
sa(dp56734
S'description'
p56735
S'The string of displacements suitable for the problem statement\n'
p56736
sS'cpp_type'
p56737
S'std::vector<VariableName>'
p56738
sS'default'
p56739
g3
sS'name'
p56740
S'displacements'
p56741
sS'required'
p56742
I01
sS'group_name'
p56743
Nsa(dp56744
S'description'
p56745
S'Whether or not this kernel will be used as an eigen kernel\n'
p56746
sS'cpp_type'
p56747
S'bool'
p56748
sS'default'
p56749
S'0'
p56750
sS'name'
p56751
S'eigen_kernel'
p56752
sS'required'
p56753
I00
sS'group_name'
p56754
Nsa(dp56755
S'description'
p56756
S'Set the enabled status of the MooseObject.\n'
p56757
sS'cpp_type'
p56758
S'bool'
p56759
sS'default'
p56760
S'1'
p56761
sS'name'
p56762
S'enable'
p56763
sS'required'
p56764
I00
sS'group_name'
p56765
S'Advanced'
p56766
sa(dp56767
S'description'
p56768
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56769
sS'cpp_type'
p56770
S'bool'
p56771
sS'default'
p56772
S'1'
p56773
sS'name'
p56774
S'implicit'
p56775
sS'required'
p56776
I00
sS'group_name'
p56777
S'Advanced'
p56778
sa(dp56779
S'description'
p56780
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56781
sS'cpp_type'
p56782
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56783
sS'default'
p56784
g3
sS'name'
p56785
S'save_in'
p56786
sS'required'
p56787
I00
sS'group_name'
p56788
S'Advanced'
p56789
sa(dp56790
S'description'
p56791
S'The seed for the master random number generator\n'
p56792
sS'cpp_type'
p56793
S'unsigned int'
p56794
sS'default'
p56795
S'0'
p56796
sS'name'
p56797
S'seed'
p56798
sS'required'
p56799
I00
sS'group_name'
p56800
S'Advanced'
p56801
sa(dp56802
S'description'
p56803
S'The temperature\n'
p56804
sS'cpp_type'
p56805
S'std::vector<VariableName>'
p56806
sS'default'
p56807
g3
sS'name'
p56808
S'temp'
p56809
sS'required'
p56810
I00
sS'group_name'
p56811
Nsa(dp56812
S'description'
p56813
S'The temperature\n'
p56814
sS'cpp_type'
p56815
S'std::vector<VariableName>'
p56816
sS'default'
p56817
g3
sS'name'
p56818
S'temperature'
p56819
sS'required'
p56820
I00
sS'group_name'
p56821
Nsa(dp56822
S'description'
p56823
g3
sS'cpp_type'
p56824
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56825
sS'default'
p56826
S'StressDivergenceTensors'
p56827
sS'name'
p56828
S'type'
p56829
sS'required'
p56830
I00
sS'group_name'
p56831
Nsa(dp56832
S'description'
p56833
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56834
sS'cpp_type'
p56835
S'bool'
p56836
sS'default'
p56837
S'0'
p56838
sS'name'
p56839
S'use_displaced_mesh'
p56840
sS'required'
p56841
I00
sS'group_name'
p56842
S'Advanced'
p56843
sa(dp56844
S'description'
p56845
S'Jacobian for corotational finite strain\n'
p56846
sS'cpp_type'
p56847
S'bool'
p56848
sS'default'
p56849
S'0'
p56850
sS'name'
p56851
S'use_finite_deform_jacobian'
p56852
sS'required'
p56853
I00
sS'group_name'
p56854
Nsa(dp56855
S'description'
p56856
S'The name of the variable that this Kernel operates on\n'
p56857
sS'cpp_type'
p56858
S'NonlinearVariableName'
p56859
sS'default'
p56860
g3
sS'name'
p56861
S'variable'
p56862
sS'required'
p56863
I01
sS'group_name'
p56864
Nsa(dp56865
S'description'
p56866
S'Set to false to turn off volumetric locking correction\n'
p56867
sS'cpp_type'
p56868
S'bool'
p56869
sS'default'
p56870
S'0'
p56871
sS'name'
p56872
S'volumetric_locking_correction'
p56873
sS'required'
p56874
I00
sS'group_name'
p56875
NsasS'name'
p56876
S'/Kernels/StressDivergenceTensors'
p56877
sa(dp56878
S'description'
p56879
S'Kernel for truss element\n'
p56880
sS'subblocks'
p56881
NsS'parameters'
p56882
(lp56883
(dp56884
S'description'
p56885
S'Cross-sectional area of truss element\n'
p56886
sS'cpp_type'
p56887
S'std::vector<VariableName>'
p56888
sS'default'
p56889
g3
sS'name'
p56890
S'area'
p56891
sS'required'
p56892
I00
sS'group_name'
p56893
Nsa(dp56894
S'description'
p56895
S'Material property base name\n'
p56896
sS'cpp_type'
p56897
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56898
sS'default'
p56899
g3
sS'name'
p56900
S'base_name'
p56901
sS'required'
p56902
I00
sS'group_name'
p56903
Nsa(dp56904
S'description'
p56905
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56906
sS'cpp_type'
p56907
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56908
sS'default'
p56909
g3
sS'name'
p56910
S'block'
p56911
sS'required'
p56912
I00
sS'group_name'
p56913
Nsa(dp56914
S'description'
p56915
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p56916
sS'cpp_type'
p56917
S'unsigned int'
p56918
sS'default'
p56919
g3
sS'name'
p56920
S'component'
p56921
sS'required'
p56922
I01
sS'group_name'
p56923
Nsa(dp56924
S'description'
p56925
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56926
sS'cpp_type'
p56927
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56928
sS'default'
p56929
g3
sS'name'
p56930
S'control_tags'
p56931
sS'required'
p56932
I00
sS'group_name'
p56933
S'Advanced'
p56934
sa(dp56935
S'description'
p56936
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56937
sS'cpp_type'
p56938
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56939
sS'default'
p56940
g3
sS'name'
p56941
S'diag_save_in'
p56942
sS'required'
p56943
I00
sS'group_name'
p56944
S'Advanced'
p56945
sa(dp56946
S'description'
p56947
S'The string of displacements suitable for the problem statement\n'
p56948
sS'cpp_type'
p56949
S'std::vector<VariableName>'
p56950
sS'default'
p56951
g3
sS'name'
p56952
S'displacements'
p56953
sS'required'
p56954
I00
sS'group_name'
p56955
Nsa(dp56956
S'description'
p56957
S'Whether or not this kernel will be used as an eigen kernel\n'
p56958
sS'cpp_type'
p56959
S'bool'
p56960
sS'default'
p56961
S'0'
p56962
sS'name'
p56963
S'eigen_kernel'
p56964
sS'required'
p56965
I00
sS'group_name'
p56966
Nsa(dp56967
S'description'
p56968
S'Set the enabled status of the MooseObject.\n'
p56969
sS'cpp_type'
p56970
S'bool'
p56971
sS'default'
p56972
S'1'
p56973
sS'name'
p56974
S'enable'
p56975
sS'required'
p56976
I00
sS'group_name'
p56977
S'Advanced'
p56978
sa(dp56979
S'description'
p56980
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56981
sS'cpp_type'
p56982
S'bool'
p56983
sS'default'
p56984
S'1'
p56985
sS'name'
p56986
S'implicit'
p56987
sS'required'
p56988
I00
sS'group_name'
p56989
S'Advanced'
p56990
sa(dp56991
S'description'
p56992
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56993
sS'cpp_type'
p56994
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56995
sS'default'
p56996
g3
sS'name'
p56997
S'save_in'
p56998
sS'required'
p56999
I00
sS'group_name'
p57000
S'Advanced'
p57001
sa(dp57002
S'description'
p57003
S'The seed for the master random number generator\n'
p57004
sS'cpp_type'
p57005
S'unsigned int'
p57006
sS'default'
p57007
S'0'
p57008
sS'name'
p57009
S'seed'
p57010
sS'required'
p57011
I00
sS'group_name'
p57012
S'Advanced'
p57013
sa(dp57014
S'description'
p57015
S'The temperature\n'
p57016
sS'cpp_type'
p57017
S'std::vector<VariableName>'
p57018
sS'default'
p57019
g3
sS'name'
p57020
S'temp'
p57021
sS'required'
p57022
I00
sS'group_name'
p57023
Nsa(dp57024
S'description'
p57025
S'The temperature\n'
p57026
sS'cpp_type'
p57027
S'std::vector<VariableName>'
p57028
sS'default'
p57029
g3
sS'name'
p57030
S'temperature'
p57031
sS'required'
p57032
I00
sS'group_name'
p57033
Nsa(dp57034
S'description'
p57035
g3
sS'cpp_type'
p57036
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57037
sS'default'
p57038
S'StressDivergenceTensorsTruss'
p57039
sS'name'
p57040
S'type'
p57041
sS'required'
p57042
I00
sS'group_name'
p57043
Nsa(dp57044
S'description'
p57045
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57046
sS'cpp_type'
p57047
S'bool'
p57048
sS'default'
p57049
S'1'
p57050
sS'name'
p57051
S'use_displaced_mesh'
p57052
sS'required'
p57053
I00
sS'group_name'
p57054
S'Advanced'
p57055
sa(dp57056
S'description'
p57057
S'The name of the variable that this Kernel operates on\n'
p57058
sS'cpp_type'
p57059
S'NonlinearVariableName'
p57060
sS'default'
p57061
g3
sS'name'
p57062
S'variable'
p57063
sS'required'
p57064
I01
sS'group_name'
p57065
NsasS'name'
p57066
S'/Kernels/StressDivergenceTensorsTruss'
p57067
sa(dp57068
S'description'
p57069
S'A modified time derivative Kernel that multiply the time derivative of a variable by a generalized susceptibility\n'
p57070
sS'subblocks'
p57071
NsS'parameters'
p57072
(lp57073
(dp57074
S'description'
p57075
S'Vector of arguments of the susceptibility\n'
p57076
sS'cpp_type'
p57077
S'std::vector<VariableName>'
p57078
sS'default'
p57079
g3
sS'name'
p57080
S'args'
p57081
sS'required'
p57082
I00
sS'group_name'
p57083
Nsa(dp57084
S'description'
p57085
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57086
sS'cpp_type'
p57087
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57088
sS'default'
p57089
g3
sS'name'
p57090
S'block'
p57091
sS'required'
p57092
I00
sS'group_name'
p57093
Nsa(dp57094
S'description'
p57095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57096
sS'cpp_type'
p57097
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57098
sS'default'
p57099
g3
sS'name'
p57100
S'control_tags'
p57101
sS'required'
p57102
I00
sS'group_name'
p57103
S'Advanced'
p57104
sa(dp57105
S'description'
p57106
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57107
sS'cpp_type'
p57108
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57109
sS'default'
p57110
g3
sS'name'
p57111
S'diag_save_in'
p57112
sS'required'
p57113
I00
sS'group_name'
p57114
S'Advanced'
p57115
sa(dp57116
S'description'
p57117
S'Whether or not this kernel will be used as an eigen kernel\n'
p57118
sS'cpp_type'
p57119
S'bool'
p57120
sS'default'
p57121
S'0'
p57122
sS'name'
p57123
S'eigen_kernel'
p57124
sS'required'
p57125
I00
sS'group_name'
p57126
Nsa(dp57127
S'description'
p57128
S'Set the enabled status of the MooseObject.\n'
p57129
sS'cpp_type'
p57130
S'bool'
p57131
sS'default'
p57132
S'1'
p57133
sS'name'
p57134
S'enable'
p57135
sS'required'
p57136
I00
sS'group_name'
p57137
S'Advanced'
p57138
sa(dp57139
S'description'
p57140
S'Base name of the susceptibility function F defined in a DerivativeParsedMaterial\n'
p57141
sS'cpp_type'
p57142
S'MaterialPropertyName'
p57143
sS'default'
p57144
g3
sS'name'
p57145
S'f_name'
p57146
sS'required'
p57147
I01
sS'group_name'
p57148
Nsa(dp57149
S'description'
p57150
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57151
sS'cpp_type'
p57152
S'bool'
p57153
sS'default'
p57154
S'1'
p57155
sS'name'
p57156
S'implicit'
p57157
sS'required'
p57158
I00
sS'group_name'
p57159
S'Advanced'
p57160
sa(dp57161
S'description'
p57162
S'True for mass matrix lumping, false otherwise\n'
p57163
sS'cpp_type'
p57164
S'bool'
p57165
sS'default'
p57166
S'0'
p57167
sS'name'
p57168
S'lumping'
p57169
sS'required'
p57170
I00
sS'group_name'
p57171
Nsa(dp57172
S'description'
p57173
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57174
sS'cpp_type'
p57175
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57176
sS'default'
p57177
g3
sS'name'
p57178
S'save_in'
p57179
sS'required'
p57180
I00
sS'group_name'
p57181
S'Advanced'
p57182
sa(dp57183
S'description'
p57184
S'The seed for the master random number generator\n'
p57185
sS'cpp_type'
p57186
S'unsigned int'
p57187
sS'default'
p57188
S'0'
p57189
sS'name'
p57190
S'seed'
p57191
sS'required'
p57192
I00
sS'group_name'
p57193
S'Advanced'
p57194
sa(dp57195
S'description'
p57196
g3
sS'cpp_type'
p57197
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57198
sS'default'
p57199
S'SusceptibilityTimeDerivative'
p57200
sS'name'
p57201
S'type'
p57202
sS'required'
p57203
I00
sS'group_name'
p57204
Nsa(dp57205
S'description'
p57206
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57207
sS'cpp_type'
p57208
S'bool'
p57209
sS'default'
p57210
S'0'
p57211
sS'name'
p57212
S'use_displaced_mesh'
p57213
sS'required'
p57214
I00
sS'group_name'
p57215
S'Advanced'
p57216
sa(dp57217
S'description'
p57218
S'The name of the variable that this Kernel operates on\n'
p57219
sS'cpp_type'
p57220
S'NonlinearVariableName'
p57221
sS'default'
p57222
g3
sS'name'
p57223
S'variable'
p57224
sS'required'
p57225
I01
sS'group_name'
p57226
NsasS'name'
p57227
S'/Kernels/SusceptibilityTimeDerivative'
p57228
sa(dp57229
S'description'
p57230
S'Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on a non-conserved order parameter eta_i.\n'
p57231
sS'subblocks'
p57232
NsS'parameters'
p57233
(lp57234
(dp57235
S'description'
p57236
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57237
sS'cpp_type'
p57238
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57239
sS'default'
p57240
g3
sS'name'
p57241
S'block'
p57242
sS'required'
p57243
I00
sS'group_name'
p57244
Nsa(dp57245
S'description'
p57246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57247
sS'cpp_type'
p57248
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57249
sS'default'
p57250
g3
sS'name'
p57251
S'control_tags'
p57252
sS'required'
p57253
I00
sS'group_name'
p57254
S'Advanced'
p57255
sa(dp57256
S'description'
p57257
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57258
sS'cpp_type'
p57259
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57260
sS'default'
p57261
g3
sS'name'
p57262
S'diag_save_in'
p57263
sS'required'
p57264
I00
sS'group_name'
p57265
S'Advanced'
p57266
sa(dp57267
S'description'
p57268
S'Whether or not this kernel will be used as an eigen kernel\n'
p57269
sS'cpp_type'
p57270
S'bool'
p57271
sS'default'
p57272
S'0'
p57273
sS'name'
p57274
S'eigen_kernel'
p57275
sS'required'
p57276
I00
sS'group_name'
p57277
Nsa(dp57278
S'description'
p57279
S'Set the enabled status of the MooseObject.\n'
p57280
sS'cpp_type'
p57281
S'bool'
p57282
sS'default'
p57283
S'1'
p57284
sS'name'
p57285
S'enable'
p57286
sS'required'
p57287
I00
sS'group_name'
p57288
S'Advanced'
p57289
sa(dp57290
S'description'
p57291
S'Switching Function Materials that provides h(eta_i)\n'
p57292
sS'cpp_type'
p57293
S'MaterialPropertyName'
p57294
sS'default'
p57295
g3
sS'name'
p57296
S'h_name'
p57297
sS'required'
p57298
I00
sS'group_name'
p57299
Nsa(dp57300
S'description'
p57301
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57302
sS'cpp_type'
p57303
S'bool'
p57304
sS'default'
p57305
S'1'
p57306
sS'name'
p57307
S'implicit'
p57308
sS'required'
p57309
I00
sS'group_name'
p57310
S'Advanced'
p57311
sa(dp57312
S'description'
p57313
S'Lagrange multiplier\n'
p57314
sS'cpp_type'
p57315
S'std::vector<VariableName>'
p57316
sS'default'
p57317
g3
sS'name'
p57318
S'lambda'
p57319
sS'required'
p57320
I01
sS'group_name'
p57321
Nsa(dp57322
S'description'
p57323
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57324
sS'cpp_type'
p57325
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57326
sS'default'
p57327
g3
sS'name'
p57328
S'save_in'
p57329
sS'required'
p57330
I00
sS'group_name'
p57331
S'Advanced'
p57332
sa(dp57333
S'description'
p57334
S'The seed for the master random number generator\n'
p57335
sS'cpp_type'
p57336
S'unsigned int'
p57337
sS'default'
p57338
S'0'
p57339
sS'name'
p57340
S'seed'
p57341
sS'required'
p57342
I00
sS'group_name'
p57343
S'Advanced'
p57344
sa(dp57345
S'description'
p57346
g3
sS'cpp_type'
p57347
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57348
sS'default'
p57349
S'SwitchingFunctionConstraintEta'
p57350
sS'name'
p57351
S'type'
p57352
sS'required'
p57353
I00
sS'group_name'
p57354
Nsa(dp57355
S'description'
p57356
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57357
sS'cpp_type'
p57358
S'bool'
p57359
sS'default'
p57360
S'0'
p57361
sS'name'
p57362
S'use_displaced_mesh'
p57363
sS'required'
p57364
I00
sS'group_name'
p57365
S'Advanced'
p57366
sa(dp57367
S'description'
p57368
S'The name of the variable that this Kernel operates on\n'
p57369
sS'cpp_type'
p57370
S'NonlinearVariableName'
p57371
sS'default'
p57372
g3
sS'name'
p57373
S'variable'
p57374
sS'required'
p57375
I01
sS'group_name'
p57376
NsasS'name'
p57377
S'/Kernels/SwitchingFunctionConstraintEta'
p57378
sa(dp57379
S'description'
p57380
S'Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on the lagrange multiplier variable.\n'
p57381
sS'subblocks'
p57382
NsS'parameters'
p57383
(lp57384
(dp57385
S'description'
p57386
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57387
sS'cpp_type'
p57388
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57389
sS'default'
p57390
g3
sS'name'
p57391
S'block'
p57392
sS'required'
p57393
I00
sS'group_name'
p57394
Nsa(dp57395
S'description'
p57396
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57397
sS'cpp_type'
p57398
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57399
sS'default'
p57400
g3
sS'name'
p57401
S'control_tags'
p57402
sS'required'
p57403
I00
sS'group_name'
p57404
S'Advanced'
p57405
sa(dp57406
S'description'
p57407
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57408
sS'cpp_type'
p57409
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57410
sS'default'
p57411
g3
sS'name'
p57412
S'diag_save_in'
p57413
sS'required'
p57414
I00
sS'group_name'
p57415
S'Advanced'
p57416
sa(dp57417
S'description'
p57418
S'Whether or not this kernel will be used as an eigen kernel\n'
p57419
sS'cpp_type'
p57420
S'bool'
p57421
sS'default'
p57422
S'0'
p57423
sS'name'
p57424
S'eigen_kernel'
p57425
sS'required'
p57426
I00
sS'group_name'
p57427
Nsa(dp57428
S'description'
p57429
S'Set the enabled status of the MooseObject.\n'
p57430
sS'cpp_type'
p57431
S'bool'
p57432
sS'default'
p57433
S'1'
p57434
sS'name'
p57435
S'enable'
p57436
sS'required'
p57437
I00
sS'group_name'
p57438
S'Advanced'
p57439
sa(dp57440
S'description'
p57441
S'Shift factor to avoid a zero pivot\n'
p57442
sS'cpp_type'
p57443
S'double'
p57444
sS'default'
p57445
S'1e-09'
p57446
sS'name'
p57447
S'epsilon'
p57448
sS'required'
p57449
I00
sS'group_name'
p57450
Nsa(dp57451
S'description'
p57452
S'eta_i order parameters, one for each h\n'
p57453
sS'cpp_type'
p57454
S'std::vector<VariableName>'
p57455
sS'default'
p57456
g3
sS'name'
p57457
S'etas'
p57458
sS'required'
p57459
I01
sS'group_name'
p57460
Nsa(dp57461
S'description'
p57462
S'Switching Function Materials that provide h(eta_i)\n'
p57463
sS'cpp_type'
p57464
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p57465
sS'default'
p57466
g3
sS'name'
p57467
S'h_names'
p57468
sS'required'
p57469
I00
sS'group_name'
p57470
Nsa(dp57471
S'description'
p57472
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57473
sS'cpp_type'
p57474
S'bool'
p57475
sS'default'
p57476
S'1'
p57477
sS'name'
p57478
S'implicit'
p57479
sS'required'
p57480
I00
sS'group_name'
p57481
S'Advanced'
p57482
sa(dp57483
S'description'
p57484
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57485
sS'cpp_type'
p57486
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57487
sS'default'
p57488
g3
sS'name'
p57489
S'save_in'
p57490
sS'required'
p57491
I00
sS'group_name'
p57492
S'Advanced'
p57493
sa(dp57494
S'description'
p57495
S'The seed for the master random number generator\n'
p57496
sS'cpp_type'
p57497
S'unsigned int'
p57498
sS'default'
p57499
S'0'
p57500
sS'name'
p57501
S'seed'
p57502
sS'required'
p57503
I00
sS'group_name'
p57504
S'Advanced'
p57505
sa(dp57506
S'description'
p57507
g3
sS'cpp_type'
p57508
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57509
sS'default'
p57510
S'SwitchingFunctionConstraintLagrange'
p57511
sS'name'
p57512
S'type'
p57513
sS'required'
p57514
I00
sS'group_name'
p57515
Nsa(dp57516
S'description'
p57517
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57518
sS'cpp_type'
p57519
S'bool'
p57520
sS'default'
p57521
S'0'
p57522
sS'name'
p57523
S'use_displaced_mesh'
p57524
sS'required'
p57525
I00
sS'group_name'
p57526
S'Advanced'
p57527
sa(dp57528
S'description'
p57529
S'The name of the variable that this Kernel operates on\n'
p57530
sS'cpp_type'
p57531
S'NonlinearVariableName'
p57532
sS'default'
p57533
g3
sS'name'
p57534
S'variable'
p57535
sS'required'
p57536
I01
sS'group_name'
p57537
NsasS'name'
p57538
S'/Kernels/SwitchingFunctionConstraintLagrange'
p57539
sa(dp57540
S'description'
p57541
S'Penalty kernel to constrain the sum of all switching functions in a multiphase system.\n'
p57542
sS'subblocks'
p57543
NsS'parameters'
p57544
(lp57545
(dp57546
S'description'
p57547
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57548
sS'cpp_type'
p57549
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57550
sS'default'
p57551
g3
sS'name'
p57552
S'block'
p57553
sS'required'
p57554
I00
sS'group_name'
p57555
Nsa(dp57556
S'description'
p57557
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57558
sS'cpp_type'
p57559
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57560
sS'default'
p57561
g3
sS'name'
p57562
S'control_tags'
p57563
sS'required'
p57564
I00
sS'group_name'
p57565
S'Advanced'
p57566
sa(dp57567
S'description'
p57568
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57569
sS'cpp_type'
p57570
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57571
sS'default'
p57572
g3
sS'name'
p57573
S'diag_save_in'
p57574
sS'required'
p57575
I00
sS'group_name'
p57576
S'Advanced'
p57577
sa(dp57578
S'description'
p57579
S'Whether or not this kernel will be used as an eigen kernel\n'
p57580
sS'cpp_type'
p57581
S'bool'
p57582
sS'default'
p57583
S'0'
p57584
sS'name'
p57585
S'eigen_kernel'
p57586
sS'required'
p57587
I00
sS'group_name'
p57588
Nsa(dp57589
S'description'
p57590
S'Set the enabled status of the MooseObject.\n'
p57591
sS'cpp_type'
p57592
S'bool'
p57593
sS'default'
p57594
S'1'
p57595
sS'name'
p57596
S'enable'
p57597
sS'required'
p57598
I00
sS'group_name'
p57599
S'Advanced'
p57600
sa(dp57601
S'description'
p57602
S'eta_i order parameters, one for each h\n'
p57603
sS'cpp_type'
p57604
S'std::vector<VariableName>'
p57605
sS'default'
p57606
g3
sS'name'
p57607
S'etas'
p57608
sS'required'
p57609
I01
sS'group_name'
p57610
Nsa(dp57611
S'description'
p57612
S'Switching Function Materials that provide h(eta_i)\n'
p57613
sS'cpp_type'
p57614
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p57615
sS'default'
p57616
g3
sS'name'
p57617
S'h_names'
p57618
sS'required'
p57619
I00
sS'group_name'
p57620
Nsa(dp57621
S'description'
p57622
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57623
sS'cpp_type'
p57624
S'bool'
p57625
sS'default'
p57626
S'1'
p57627
sS'name'
p57628
S'implicit'
p57629
sS'required'
p57630
I00
sS'group_name'
p57631
S'Advanced'
p57632
sa(dp57633
S'description'
p57634
S'Penalty scaling factor\n'
p57635
sS'cpp_type'
p57636
S'double'
p57637
sS'default'
p57638
S'1'
p57639
sS'name'
p57640
S'penalty'
p57641
sS'required'
p57642
I00
sS'group_name'
p57643
Nsa(dp57644
S'description'
p57645
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57646
sS'cpp_type'
p57647
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57648
sS'default'
p57649
g3
sS'name'
p57650
S'save_in'
p57651
sS'required'
p57652
I00
sS'group_name'
p57653
S'Advanced'
p57654
sa(dp57655
S'description'
p57656
S'The seed for the master random number generator\n'
p57657
sS'cpp_type'
p57658
S'unsigned int'
p57659
sS'default'
p57660
S'0'
p57661
sS'name'
p57662
S'seed'
p57663
sS'required'
p57664
I00
sS'group_name'
p57665
S'Advanced'
p57666
sa(dp57667
S'description'
p57668
g3
sS'cpp_type'
p57669
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57670
sS'default'
p57671
S'SwitchingFunctionPenalty'
p57672
sS'name'
p57673
S'type'
p57674
sS'required'
p57675
I00
sS'group_name'
p57676
Nsa(dp57677
S'description'
p57678
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57679
sS'cpp_type'
p57680
S'bool'
p57681
sS'default'
p57682
S'0'
p57683
sS'name'
p57684
S'use_displaced_mesh'
p57685
sS'required'
p57686
I00
sS'group_name'
p57687
S'Advanced'
p57688
sa(dp57689
S'description'
p57690
S'The name of the variable that this Kernel operates on\n'
p57691
sS'cpp_type'
p57692
S'NonlinearVariableName'
p57693
sS'default'
p57694
g3
sS'name'
p57695
S'variable'
p57696
sS'required'
p57697
I01
sS'group_name'
p57698
NsasS'name'
p57699
S'/Kernels/SwitchingFunctionPenalty'
p57700
sa(dp57701
S'description'
p57702
g3
sS'subblocks'
p57703
NsS'parameters'
p57704
(lp57705
(dp57706
S'description'
p57707
S'Add the displacement variables\n'
p57708
sS'cpp_type'
p57709
S'bool'
p57710
sS'default'
p57711
S'0'
p57712
sS'name'
p57713
S'add_variables'
p57714
sS'required'
p57715
I00
sS'group_name'
p57716
Nsa(dp57717
S'name'
p57718
S'additional_generate_output'
p57719
sS'cpp_type'
p57720
S'MultiMooseEnum'
p57721
sS'default'
p57722
g3
sS'description'
p57723
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p57724
sS'required'
p57725
I00
sS'options'
p57726
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p57727
sS'group_name'
p57728
S'Output'
p57729
sa(dp57730
S'description'
p57731
S'Material property base name\n'
p57732
sS'cpp_type'
p57733
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57734
sS'default'
p57735
g3
sS'name'
p57736
S'base_name'
p57737
sS'required'
p57738
I00
sS'group_name'
p57739
Nsa(dp57740
S'description'
p57741
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p57742
sS'cpp_type'
p57743
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57744
sS'default'
p57745
g3
sS'name'
p57746
S'block'
p57747
sS'required'
p57748
I00
sS'group_name'
p57749
S'Advanced'
p57750
sa(dp57751
S'name'
p57752
S'decomposition_method'
p57753
sS'cpp_type'
p57754
S'MooseEnum'
p57755
sS'default'
p57756
S'TaylorExpansion'
p57757
sS'description'
p57758
S'Methods to calculate the finite strain and rotation increments\n'
p57759
sS'required'
p57760
I00
sS'options'
p57761
S'TaylorExpansion EigenSolution'
p57762
sS'group_name'
p57763
Nsa(dp57764
S'description'
p57765
S'The displacement diagonal preconditioner terms\n'
p57766
sS'cpp_type'
p57767
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57768
sS'default'
p57769
g3
sS'name'
p57770
S'diag_save_in'
p57771
sS'required'
p57772
I00
sS'group_name'
p57773
S'Advanced'
p57774
sa(dp57775
S'description'
p57776
S'The nonlinear displacement variables for the problem\n'
p57777
sS'cpp_type'
p57778
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p57779
sS'default'
p57780
g3
sS'name'
p57781
S'displacements'
p57782
sS'required'
p57783
I01
sS'group_name'
p57784
Nsa(dp57785
S'description'
p57786
S'List of eigenstrains to be applied in this strain calculation\n'
p57787
sS'cpp_type'
p57788
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p57789
sS'default'
p57790
g3
sS'name'
p57791
S'eigenstrain_names'
p57792
sS'required'
p57793
I00
sS'group_name'
p57794
Nsa(dp57795
S'name'
p57796
S'generate_output'
p57797
sS'cpp_type'
p57798
S'MultiMooseEnum'
p57799
sS'default'
p57800
g3
sS'description'
p57801
S'Add scalar quantity output for stress and/or strain\n'
p57802
sS'required'
p57803
I00
sS'options'
p57804
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p57805
sS'group_name'
p57806
S'Output'
p57807
sa(dp57808
S'description'
p57809
S'Use incremental or total strain\n'
p57810
sS'cpp_type'
p57811
S'bool'
p57812
sS'default'
p57813
g3
sS'name'
p57814
S'incremental'
p57815
sS'required'
p57816
I00
sS'group_name'
p57817
Nsa(dp57818
S'description'
p57819
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p57820
sS'cpp_type'
p57821
S'FunctionName'
p57822
sS'default'
p57823
S'0'
p57824
sS'name'
p57825
S'out_of_plane_pressure'
p57826
sS'required'
p57827
I00
sS'group_name'
p57828
S'Out-of-plane stress/strain'
p57829
sa(dp57830
S'name'
p57831
S'planar_formulation'
p57832
sS'cpp_type'
p57833
S'MooseEnum'
p57834
sS'default'
p57835
S'NONE'
p57836
sS'description'
p57837
S'Out-of-plane stress/strain formulation\n'
p57838
sS'required'
p57839
I00
sS'options'
p57840
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p57841
sS'group_name'
p57842
S'Out-of-plane stress/strain'
p57843
sa(dp57844
S'description'
p57845
S'Scale factor applied to prescribed pressure\n'
p57846
sS'cpp_type'
p57847
S'double'
p57848
sS'default'
p57849
S'1'
p57850
sS'name'
p57851
S'pressure_factor'
p57852
sS'required'
p57853
I00
sS'group_name'
p57854
S'Out-of-plane stress/strain'
p57855
sa(dp57856
S'description'
p57857
S'The displacement residuals\n'
p57858
sS'cpp_type'
p57859
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57860
sS'default'
p57861
g3
sS'name'
p57862
S'save_in'
p57863
sS'required'
p57864
I00
sS'group_name'
p57865
S'Advanced'
p57866
sa(dp57867
S'description'
p57868
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p57869
sS'cpp_type'
p57870
S'NonlinearVariableName'
p57871
sS'default'
p57872
g3
sS'name'
p57873
S'scalar_out_of_plane_strain'
p57874
sS'required'
p57875
I00
sS'group_name'
p57876
S'Out-of-plane stress/strain'
p57877
sa(dp57878
S'name'
p57879
S'strain'
p57880
sS'cpp_type'
p57881
S'MooseEnum'
p57882
sS'default'
p57883
S'SMALL'
p57884
sS'description'
p57885
S'Strain formulation\n'
p57886
sS'required'
p57887
I00
sS'options'
p57888
S'SMALL FINITE'
p57889
sS'group_name'
p57890
Nsa(dp57891
S'description'
p57892
S'The temperature\n'
p57893
sS'cpp_type'
p57894
S'NonlinearVariableName'
p57895
sS'default'
p57896
g3
sS'name'
p57897
S'temp'
p57898
sS'required'
p57899
I00
sS'group_name'
p57900
Nsa(dp57901
S'description'
p57902
S'The temperature\n'
p57903
sS'cpp_type'
p57904
S'NonlinearVariableName'
p57905
sS'default'
p57906
g3
sS'name'
p57907
S'temperature'
p57908
sS'required'
p57909
I00
sS'group_name'
p57910
Nsa(dp57911
S'description'
p57912
S'Whether to use displaced mesh in the kernels\n'
p57913
sS'cpp_type'
p57914
S'bool'
p57915
sS'default'
p57916
S'0'
p57917
sS'name'
p57918
S'use_displaced_mesh'
p57919
sS'required'
p57920
I00
sS'group_name'
p57921
Nsa(dp57922
S'description'
p57923
S'Jacobian for corrotational finite strain\n'
p57924
sS'cpp_type'
p57925
S'bool'
p57926
sS'default'
p57927
S'0'
p57928
sS'name'
p57929
S'use_finite_deform_jacobian'
p57930
sS'required'
p57931
I00
sS'group_name'
p57932
Nsa(dp57933
S'description'
p57934
S'Flag to correct volumetric locking\n'
p57935
sS'cpp_type'
p57936
S'bool'
p57937
sS'default'
p57938
S'0'
p57939
sS'name'
p57940
S'volumetric_locking_correction'
p57941
sS'required'
p57942
I00
sS'group_name'
p57943
NsasS'name'
p57944
S'/Kernels/TensorMechanics'
p57945
sa(dp57946
S'description'
p57947
g3
sS'subblocks'
p57948
NsS'parameters'
p57949
(lp57950
(dp57951
S'description'
p57952
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57953
sS'cpp_type'
p57954
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57955
sS'default'
p57956
g3
sS'name'
p57957
S'block'
p57958
sS'required'
p57959
I00
sS'group_name'
p57960
Nsa(dp57961
S'description'
p57962
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57963
sS'cpp_type'
p57964
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57965
sS'default'
p57966
g3
sS'name'
p57967
S'control_tags'
p57968
sS'required'
p57969
I00
sS'group_name'
p57970
S'Advanced'
p57971
sa(dp57972
S'description'
p57973
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57974
sS'cpp_type'
p57975
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57976
sS'default'
p57977
g3
sS'name'
p57978
S'diag_save_in'
p57979
sS'required'
p57980
I00
sS'group_name'
p57981
S'Advanced'
p57982
sa(dp57983
S'description'
p57984
S'Whether or not this kernel will be used as an eigen kernel\n'
p57985
sS'cpp_type'
p57986
S'bool'
p57987
sS'default'
p57988
S'0'
p57989
sS'name'
p57990
S'eigen_kernel'
p57991
sS'required'
p57992
I00
sS'group_name'
p57993
Nsa(dp57994
S'description'
p57995
S'Set the enabled status of the MooseObject.\n'
p57996
sS'cpp_type'
p57997
S'bool'
p57998
sS'default'
p57999
S'1'
p58000
sS'name'
p58001
S'enable'
p58002
sS'required'
p58003
I00
sS'group_name'
p58004
S'Advanced'
p58005
sa(dp58006
S'description'
p58007
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58008
sS'cpp_type'
p58009
S'bool'
p58010
sS'default'
p58011
S'1'
p58012
sS'name'
p58013
S'implicit'
p58014
sS'required'
p58015
I00
sS'group_name'
p58016
S'Advanced'
p58017
sa(dp58018
S'description'
p58019
S'True for mass matrix lumping, false otherwise\n'
p58020
sS'cpp_type'
p58021
S'bool'
p58022
sS'default'
p58023
S'0'
p58024
sS'name'
p58025
S'lumping'
p58026
sS'required'
p58027
I00
sS'group_name'
p58028
Nsa(dp58029
S'description'
p58030
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58031
sS'cpp_type'
p58032
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58033
sS'default'
p58034
g3
sS'name'
p58035
S'save_in'
p58036
sS'required'
p58037
I00
sS'group_name'
p58038
S'Advanced'
p58039
sa(dp58040
S'description'
p58041
S'The seed for the master random number generator\n'
p58042
sS'cpp_type'
p58043
S'unsigned int'
p58044
sS'default'
p58045
S'0'
p58046
sS'name'
p58047
S'seed'
p58048
sS'required'
p58049
I00
sS'group_name'
p58050
S'Advanced'
p58051
sa(dp58052
S'description'
p58053
g3
sS'cpp_type'
p58054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58055
sS'default'
p58056
S'TimeDerivative'
p58057
sS'name'
p58058
S'type'
p58059
sS'required'
p58060
I00
sS'group_name'
p58061
Nsa(dp58062
S'description'
p58063
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58064
sS'cpp_type'
p58065
S'bool'
p58066
sS'default'
p58067
S'0'
p58068
sS'name'
p58069
S'use_displaced_mesh'
p58070
sS'required'
p58071
I00
sS'group_name'
p58072
S'Advanced'
p58073
sa(dp58074
S'description'
p58075
S'The name of the variable that this Kernel operates on\n'
p58076
sS'cpp_type'
p58077
S'NonlinearVariableName'
p58078
sS'default'
p58079
g3
sS'name'
p58080
S'variable'
p58081
sS'required'
p58082
I01
sS'group_name'
p58083
NsasS'name'
p58084
S'/Kernels/TimeDerivative'
p58085
sa(dp58086
S'description'
p58087
g3
sS'subblocks'
p58088
NsS'parameters'
p58089
(lp58090
(dp58091
S'description'
p58092
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58093
sS'cpp_type'
p58094
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58095
sS'default'
p58096
g3
sS'name'
p58097
S'block'
p58098
sS'required'
p58099
I00
sS'group_name'
p58100
Nsa(dp58101
S'description'
p58102
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58103
sS'cpp_type'
p58104
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58105
sS'default'
p58106
g3
sS'name'
p58107
S'control_tags'
p58108
sS'required'
p58109
I00
sS'group_name'
p58110
S'Advanced'
p58111
sa(dp58112
S'description'
p58113
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58114
sS'cpp_type'
p58115
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58116
sS'default'
p58117
g3
sS'name'
p58118
S'diag_save_in'
p58119
sS'required'
p58120
I00
sS'group_name'
p58121
S'Advanced'
p58122
sa(dp58123
S'description'
p58124
S'Whether or not this kernel will be used as an eigen kernel\n'
p58125
sS'cpp_type'
p58126
S'bool'
p58127
sS'default'
p58128
S'0'
p58129
sS'name'
p58130
S'eigen_kernel'
p58131
sS'required'
p58132
I00
sS'group_name'
p58133
Nsa(dp58134
S'description'
p58135
S'Set the enabled status of the MooseObject.\n'
p58136
sS'cpp_type'
p58137
S'bool'
p58138
sS'default'
p58139
S'1'
p58140
sS'name'
p58141
S'enable'
p58142
sS'required'
p58143
I00
sS'group_name'
p58144
S'Advanced'
p58145
sa(dp58146
S'description'
p58147
S'The forcing function\n'
p58148
sS'cpp_type'
p58149
S'FunctionName'
p58150
sS'default'
p58151
g3
sS'name'
p58152
S'function'
p58153
sS'required'
p58154
I01
sS'group_name'
p58155
Nsa(dp58156
S'description'
p58157
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58158
sS'cpp_type'
p58159
S'bool'
p58160
sS'default'
p58161
S'1'
p58162
sS'name'
p58163
S'implicit'
p58164
sS'required'
p58165
I00
sS'group_name'
p58166
S'Advanced'
p58167
sa(dp58168
S'description'
p58169
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58170
sS'cpp_type'
p58171
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58172
sS'default'
p58173
g3
sS'name'
p58174
S'save_in'
p58175
sS'required'
p58176
I00
sS'group_name'
p58177
S'Advanced'
p58178
sa(dp58179
S'description'
p58180
S'The seed for the master random number generator\n'
p58181
sS'cpp_type'
p58182
S'unsigned int'
p58183
sS'default'
p58184
S'0'
p58185
sS'name'
p58186
S'seed'
p58187
sS'required'
p58188
I00
sS'group_name'
p58189
S'Advanced'
p58190
sa(dp58191
S'description'
p58192
g3
sS'cpp_type'
p58193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58194
sS'default'
p58195
S'UserForcingFunction'
p58196
sS'name'
p58197
S'type'
p58198
sS'required'
p58199
I00
sS'group_name'
p58200
Nsa(dp58201
S'description'
p58202
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58203
sS'cpp_type'
p58204
S'bool'
p58205
sS'default'
p58206
S'0'
p58207
sS'name'
p58208
S'use_displaced_mesh'
p58209
sS'required'
p58210
I00
sS'group_name'
p58211
S'Advanced'
p58212
sa(dp58213
S'description'
p58214
S'The name of the variable that this Kernel operates on\n'
p58215
sS'cpp_type'
p58216
S'NonlinearVariableName'
p58217
sS'default'
p58218
g3
sS'name'
p58219
S'variable'
p58220
sS'required'
p58221
I01
sS'group_name'
p58222
NsasS'name'
p58223
S'/Kernels/UserForcingFunction'
p58224
sa(dp58225
S'description'
p58226
S'Plane stress kernel to provide out-of-plane strain contribution\n'
p58227
sS'subblocks'
p58228
NsS'parameters'
p58229
(lp58230
(dp58231
S'description'
p58232
S'Material property base name\n'
p58233
sS'cpp_type'
p58234
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58235
sS'default'
p58236
g3
sS'name'
p58237
S'base_name'
p58238
sS'required'
p58239
I00
sS'group_name'
p58240
Nsa(dp58241
S'description'
p58242
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58243
sS'cpp_type'
p58244
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58245
sS'default'
p58246
g3
sS'name'
p58247
S'block'
p58248
sS'required'
p58249
I00
sS'group_name'
p58250
Nsa(dp58251
S'description'
p58252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58253
sS'cpp_type'
p58254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58255
sS'default'
p58256
g3
sS'name'
p58257
S'control_tags'
p58258
sS'required'
p58259
I00
sS'group_name'
p58260
S'Advanced'
p58261
sa(dp58262
S'description'
p58263
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58264
sS'cpp_type'
p58265
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58266
sS'default'
p58267
g3
sS'name'
p58268
S'diag_save_in'
p58269
sS'required'
p58270
I00
sS'group_name'
p58271
S'Advanced'
p58272
sa(dp58273
S'name'
p58274
S'direction'
p58275
sS'cpp_type'
p58276
S'MooseEnum'
p58277
sS'default'
p58278
S'z'
p58279
sS'description'
p58280
S'The out of plane direction\n'
p58281
sS'required'
p58282
I00
sS'options'
p58283
S'x y z'
p58284
sS'group_name'
p58285
Nsa(dp58286
S'description'
p58287
S'Whether or not this kernel will be used as an eigen kernel\n'
p58288
sS'cpp_type'
p58289
S'bool'
p58290
sS'default'
p58291
S'0'
p58292
sS'name'
p58293
S'eigen_kernel'
p58294
sS'required'
p58295
I00
sS'group_name'
p58296
Nsa(dp58297
S'description'
p58298
S'Set the enabled status of the MooseObject.\n'
p58299
sS'cpp_type'
p58300
S'bool'
p58301
sS'default'
p58302
S'1'
p58303
sS'name'
p58304
S'enable'
p58305
sS'required'
p58306
I00
sS'group_name'
p58307
S'Advanced'
p58308
sa(dp58309
S'description'
p58310
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58311
sS'cpp_type'
p58312
S'bool'
p58313
sS'default'
p58314
S'1'
p58315
sS'name'
p58316
S'implicit'
p58317
sS'required'
p58318
I00
sS'group_name'
p58319
S'Advanced'
p58320
sa(dp58321
S'description'
p58322
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58323
sS'cpp_type'
p58324
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58325
sS'default'
p58326
g3
sS'name'
p58327
S'save_in'
p58328
sS'required'
p58329
I00
sS'group_name'
p58330
S'Advanced'
p58331
sa(dp58332
S'description'
p58333
S'The seed for the master random number generator\n'
p58334
sS'cpp_type'
p58335
S'unsigned int'
p58336
sS'default'
p58337
S'0'
p58338
sS'name'
p58339
S'seed'
p58340
sS'required'
p58341
I00
sS'group_name'
p58342
S'Advanced'
p58343
sa(dp58344
S'description'
p58345
g3
sS'cpp_type'
p58346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58347
sS'default'
p58348
S'WeakPlaneStress'
p58349
sS'name'
p58350
S'type'
p58351
sS'required'
p58352
I00
sS'group_name'
p58353
Nsa(dp58354
S'description'
p58355
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58356
sS'cpp_type'
p58357
S'bool'
p58358
sS'default'
p58359
S'0'
p58360
sS'name'
p58361
S'use_displaced_mesh'
p58362
sS'required'
p58363
I00
sS'group_name'
p58364
S'Advanced'
p58365
sa(dp58366
S'description'
p58367
S'The name of the variable that this Kernel operates on\n'
p58368
sS'cpp_type'
p58369
S'NonlinearVariableName'
p58370
sS'default'
p58371
g3
sS'name'
p58372
S'variable'
p58373
sS'required'
p58374
I01
sS'group_name'
p58375
NsasS'name'
p58376
S'/Kernels/WeakPlaneStress'
p58377
sasS'parameters'
p58378
NsS'name'
p58379
S'/Kernels'
p58380
sa(dp58381
S'description'
p58382
g3
sS'subblocks'
p58383
(lp58384
(dp58385
S'description'
p58386
g3
sS'subblocks'
p58387
NsS'parameters'
p58388
(lp58389
(dp58390
S'description'
p58391
S'A string representing the Moose Object that will be built by this Action\n'
p58392
sS'cpp_type'
p58393
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58394
sS'default'
p58395
g3
sS'name'
p58396
S'type'
p58397
sS'required'
p58398
I01
sS'group_name'
p58399
NsasS'name'
p58400
S'/Materials/*'
p58401
sa(dp58402
S'description'
p58403
S'Free energy contribution asymmetric across interfaces between arbitrary pairs of phases.\n'
p58404
sS'subblocks'
p58405
NsS'parameters'
p58406
(lp58407
(dp58408
S'description'
p58409
S'Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n'
p58410
sS'cpp_type'
p58411
S'std::vector<double, std::allocator<double> >'
p58412
sS'default'
p58413
g3
sS'name'
p58414
S'W_ij'
p58415
sS'required'
p58416
I01
sS'group_name'
p58417
Nsa(dp58418
S'description'
p58419
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58420
sS'cpp_type'
p58421
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58422
sS'default'
p58423
g3
sS'name'
p58424
S'block'
p58425
sS'required'
p58426
I00
sS'group_name'
p58427
Nsa(dp58428
S'description'
p58429
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58430
sS'cpp_type'
p58431
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58432
sS'default'
p58433
g3
sS'name'
p58434
S'boundary'
p58435
sS'required'
p58436
I00
sS'group_name'
p58437
Nsa(dp58438
S'description'
p58439
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58440
sS'cpp_type'
p58441
S'bool'
p58442
sS'default'
p58443
S'1'
p58444
sS'name'
p58445
S'compute'
p58446
sS'required'
p58447
I00
sS'group_name'
p58448
Nsa(dp58449
S'description'
p58450
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58451
sS'cpp_type'
p58452
S'bool'
p58453
sS'default'
p58454
S'0'
p58455
sS'name'
p58456
S'constant_on_elem'
p58457
sS'required'
p58458
I00
sS'group_name'
p58459
S'Advanced'
p58460
sa(dp58461
S'description'
p58462
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58463
sS'cpp_type'
p58464
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58465
sS'default'
p58466
g3
sS'name'
p58467
S'control_tags'
p58468
sS'required'
p58469
I00
sS'group_name'
p58470
S'Advanced'
p58471
sa(dp58472
S'description'
p58473
S'Set the enabled status of the MooseObject.\n'
p58474
sS'cpp_type'
p58475
S'bool'
p58476
sS'default'
p58477
S'1'
p58478
sS'name'
p58479
S'enable'
p58480
sS'required'
p58481
I00
sS'group_name'
p58482
S'Advanced'
p58483
sa(dp58484
S'description'
p58485
S'eta_i order parameters, one for each h\n'
p58486
sS'cpp_type'
p58487
S'std::vector<VariableName>'
p58488
sS'default'
p58489
g3
sS'name'
p58490
S'etas'
p58491
sS'required'
p58492
I01
sS'group_name'
p58493
Nsa(dp58494
S'description'
p58495
S'actual name for g(eta_i)\n'
p58496
sS'cpp_type'
p58497
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58498
sS'default'
p58499
S'g'
p58500
sS'name'
p58501
S'function_name'
p58502
sS'required'
p58503
I00
sS'group_name'
p58504
Nsa(dp58505
S'name'
p58506
S'g_order'
p58507
sS'cpp_type'
p58508
S'MooseEnum'
p58509
sS'default'
p58510
S'SIMPLE'
p58511
sS'description'
p58512
S'Polynomial order of the barrier function g(eta)\n'
p58513
sS'required'
p58514
I00
sS'options'
p58515
S'SIMPLE LOW'
p58516
sS'group_name'
p58517
Nsa(dp58518
S'description'
p58519
S'Switching Function Materials that provide h(eta_i)\n'
p58520
sS'cpp_type'
p58521
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58522
sS'default'
p58523
g3
sS'name'
p58524
S'hi_names'
p58525
sS'required'
p58526
I00
sS'group_name'
p58527
Nsa(dp58528
S'description'
p58529
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58530
sS'cpp_type'
p58531
S'bool'
p58532
sS'default'
p58533
S'1'
p58534
sS'name'
p58535
S'implicit'
p58536
sS'required'
p58537
I00
sS'group_name'
p58538
S'Advanced'
p58539
sa(dp58540
S'description'
p58541
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58542
sS'cpp_type'
p58543
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58544
sS'default'
p58545
g3
sS'name'
p58546
S'output_properties'
p58547
sS'required'
p58548
I00
sS'group_name'
p58549
S'Outputs'
p58550
sa(dp58551
S'description'
p58552
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58553
sS'cpp_type'
p58554
S'std::vector<OutputName, std::allocator<OutputName> >'
p58555
sS'default'
p58556
S'none'
p58557
sS'name'
p58558
S'outputs'
p58559
sS'required'
p58560
I00
sS'group_name'
p58561
S'Outputs'
p58562
sa(dp58563
S'description'
p58564
S'The seed for the master random number generator\n'
p58565
sS'cpp_type'
p58566
S'unsigned int'
p58567
sS'default'
p58568
S'0'
p58569
sS'name'
p58570
S'seed'
p58571
sS'required'
p58572
I00
sS'group_name'
p58573
S'Advanced'
p58574
sa(dp58575
S'description'
p58576
g3
sS'cpp_type'
p58577
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58578
sS'default'
p58579
S'AsymmetricCrossTermBarrierFunctionMaterial'
p58580
sS'name'
p58581
S'type'
p58582
sS'required'
p58583
I00
sS'group_name'
p58584
Nsa(dp58585
S'description'
p58586
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58587
sS'cpp_type'
p58588
S'bool'
p58589
sS'default'
p58590
S'0'
p58591
sS'name'
p58592
S'use_displaced_mesh'
p58593
sS'required'
p58594
I00
sS'group_name'
p58595
S'Advanced'
p58596
sasS'name'
p58597
S'/Materials/AsymmetricCrossTermBarrierFunctionMaterial'
p58598
sa(dp58599
S'description'
p58600
S'Helper material to provide g(eta) and its derivative in a polynomial.\\nSIMPLE: eta^2*(1-eta)^2\\nLOW: eta*(1-eta)\n'
p58601
sS'subblocks'
p58602
NsS'parameters'
p58603
(lp58604
(dp58605
S'description'
p58606
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58607
sS'cpp_type'
p58608
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58609
sS'default'
p58610
g3
sS'name'
p58611
S'block'
p58612
sS'required'
p58613
I00
sS'group_name'
p58614
Nsa(dp58615
S'description'
p58616
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58617
sS'cpp_type'
p58618
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58619
sS'default'
p58620
g3
sS'name'
p58621
S'boundary'
p58622
sS'required'
p58623
I00
sS'group_name'
p58624
Nsa(dp58625
S'description'
p58626
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58627
sS'cpp_type'
p58628
S'bool'
p58629
sS'default'
p58630
S'1'
p58631
sS'name'
p58632
S'compute'
p58633
sS'required'
p58634
I00
sS'group_name'
p58635
Nsa(dp58636
S'description'
p58637
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58638
sS'cpp_type'
p58639
S'bool'
p58640
sS'default'
p58641
S'0'
p58642
sS'name'
p58643
S'constant_on_elem'
p58644
sS'required'
p58645
I00
sS'group_name'
p58646
S'Advanced'
p58647
sa(dp58648
S'description'
p58649
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58650
sS'cpp_type'
p58651
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58652
sS'default'
p58653
g3
sS'name'
p58654
S'control_tags'
p58655
sS'required'
p58656
I00
sS'group_name'
p58657
S'Advanced'
p58658
sa(dp58659
S'description'
p58660
S'Set the enabled status of the MooseObject.\n'
p58661
sS'cpp_type'
p58662
S'bool'
p58663
sS'default'
p58664
S'1'
p58665
sS'name'
p58666
S'enable'
p58667
sS'required'
p58668
I00
sS'group_name'
p58669
S'Advanced'
p58670
sa(dp58671
S'description'
p58672
S'Order parameter variable\n'
p58673
sS'cpp_type'
p58674
S'std::vector<VariableName>'
p58675
sS'default'
p58676
g3
sS'name'
p58677
S'eta'
p58678
sS'required'
p58679
I00
sS'group_name'
p58680
Nsa(dp58681
S'description'
p58682
S"actual name for f(eta), i.e. 'h' or 'g'\n"
p58683
sS'cpp_type'
p58684
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58685
sS'default'
p58686
S'g'
p58687
sS'name'
p58688
S'function_name'
p58689
sS'required'
p58690
I00
sS'group_name'
p58691
Nsa(dp58692
S'name'
p58693
S'g_order'
p58694
sS'cpp_type'
p58695
S'MooseEnum'
p58696
sS'default'
p58697
S'SIMPLE'
p58698
sS'description'
p58699
S'Polynomial order of the barrier function g(eta)\n'
p58700
sS'required'
p58701
I00
sS'options'
p58702
S'SIMPLE LOW'
p58703
sS'group_name'
p58704
Nsa(dp58705
S'description'
p58706
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58707
sS'cpp_type'
p58708
S'bool'
p58709
sS'default'
p58710
S'1'
p58711
sS'name'
p58712
S'implicit'
p58713
sS'required'
p58714
I00
sS'group_name'
p58715
S'Advanced'
p58716
sa(dp58717
S'description'
p58718
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58719
sS'cpp_type'
p58720
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58721
sS'default'
p58722
g3
sS'name'
p58723
S'output_properties'
p58724
sS'required'
p58725
I00
sS'group_name'
p58726
S'Outputs'
p58727
sa(dp58728
S'description'
p58729
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58730
sS'cpp_type'
p58731
S'std::vector<OutputName, std::allocator<OutputName> >'
p58732
sS'default'
p58733
S'none'
p58734
sS'name'
p58735
S'outputs'
p58736
sS'required'
p58737
I00
sS'group_name'
p58738
S'Outputs'
p58739
sa(dp58740
S'description'
p58741
S'The seed for the master random number generator\n'
p58742
sS'cpp_type'
p58743
S'unsigned int'
p58744
sS'default'
p58745
S'0'
p58746
sS'name'
p58747
S'seed'
p58748
sS'required'
p58749
I00
sS'group_name'
p58750
S'Advanced'
p58751
sa(dp58752
S'description'
p58753
g3
sS'cpp_type'
p58754
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58755
sS'default'
p58756
S'BarrierFunctionMaterial'
p58757
sS'name'
p58758
S'type'
p58759
sS'required'
p58760
I00
sS'group_name'
p58761
Nsa(dp58762
S'description'
p58763
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58764
sS'cpp_type'
p58765
S'bool'
p58766
sS'default'
p58767
S'0'
p58768
sS'name'
p58769
S'use_displaced_mesh'
p58770
sS'required'
p58771
I00
sS'group_name'
p58772
S'Advanced'
p58773
sa(dp58774
S'description'
p58775
S'Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n'
p58776
sS'cpp_type'
p58777
S'bool'
p58778
sS'default'
p58779
S'0'
p58780
sS'name'
p58781
S'well_only'
p58782
sS'required'
p58783
I00
sS'group_name'
p58784
NsasS'name'
p58785
S'/Materials/BarrierFunctionMaterial'
p58786
sa(dp58787
S'description'
p58788
S'Assemble an Eigenstrain tensor from multiple tensor contributions weighted by material properties\n'
p58789
sS'subblocks'
p58790
NsS'parameters'
p58791
(lp58792
(dp58793
S'description'
p58794
S'variable dependencies for the prefactor\n'
p58795
sS'cpp_type'
p58796
S'std::vector<VariableName>'
p58797
sS'default'
p58798
g3
sS'name'
p58799
S'args'
p58800
sS'required'
p58801
I01
sS'group_name'
p58802
Nsa(dp58803
S'description'
p58804
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p58805
sS'cpp_type'
p58806
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58807
sS'default'
p58808
g3
sS'name'
p58809
S'base_name'
p58810
sS'required'
p58811
I00
sS'group_name'
p58812
Nsa(dp58813
S'description'
p58814
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58815
sS'cpp_type'
p58816
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58817
sS'default'
p58818
g3
sS'name'
p58819
S'block'
p58820
sS'required'
p58821
I00
sS'group_name'
p58822
Nsa(dp58823
S'description'
p58824
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p58825
sS'cpp_type'
p58826
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p58827
sS'default'
p58828
g3
sS'name'
p58829
S'boundary'
p58830
sS'required'
p58831
I00
sS'group_name'
p58832
Nsa(dp58833
S'description'
p58834
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p58835
sS'cpp_type'
p58836
S'bool'
p58837
sS'default'
p58838
S'1'
p58839
sS'name'
p58840
S'compute'
p58841
sS'required'
p58842
I00
sS'group_name'
p58843
Nsa(dp58844
S'description'
p58845
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p58846
sS'cpp_type'
p58847
S'bool'
p58848
sS'default'
p58849
S'0'
p58850
sS'name'
p58851
S'constant_on_elem'
p58852
sS'required'
p58853
I00
sS'group_name'
p58854
S'Advanced'
p58855
sa(dp58856
S'description'
p58857
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58858
sS'cpp_type'
p58859
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58860
sS'default'
p58861
g3
sS'name'
p58862
S'control_tags'
p58863
sS'required'
p58864
I00
sS'group_name'
p58865
S'Advanced'
p58866
sa(dp58867
S'description'
p58868
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p58869
sS'cpp_type'
p58870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58871
sS'default'
p58872
g3
sS'name'
p58873
S'eigenstrain_name'
p58874
sS'required'
p58875
I01
sS'group_name'
p58876
Nsa(dp58877
S'description'
p58878
S'Set the enabled status of the MooseObject.\n'
p58879
sS'cpp_type'
p58880
S'bool'
p58881
sS'default'
p58882
S'1'
p58883
sS'name'
p58884
S'enable'
p58885
sS'required'
p58886
I00
sS'group_name'
p58887
S'Advanced'
p58888
sa(dp58889
S'description'
p58890
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58891
sS'cpp_type'
p58892
S'bool'
p58893
sS'default'
p58894
S'1'
p58895
sS'name'
p58896
S'implicit'
p58897
sS'required'
p58898
I00
sS'group_name'
p58899
S'Advanced'
p58900
sa(dp58901
S'description'
p58902
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p58903
sS'cpp_type'
p58904
S'bool'
p58905
sS'default'
p58906
S'0'
p58907
sS'name'
p58908
S'incremental_form'
p58909
sS'required'
p58910
I00
sS'group_name'
p58911
Nsa(dp58912
S'description'
p58913
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p58914
sS'cpp_type'
p58915
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58916
sS'default'
p58917
g3
sS'name'
p58918
S'output_properties'
p58919
sS'required'
p58920
I00
sS'group_name'
p58921
S'Outputs'
p58922
sa(dp58923
S'description'
p58924
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p58925
sS'cpp_type'
p58926
S'std::vector<OutputName, std::allocator<OutputName> >'
p58927
sS'default'
p58928
S'none'
p58929
sS'name'
p58930
S'outputs'
p58931
sS'required'
p58932
I00
sS'group_name'
p58933
S'Outputs'
p58934
sa(dp58935
S'description'
p58936
S'The seed for the master random number generator\n'
p58937
sS'cpp_type'
p58938
S'unsigned int'
p58939
sS'default'
p58940
S'0'
p58941
sS'name'
p58942
S'seed'
p58943
sS'required'
p58944
I00
sS'group_name'
p58945
S'Advanced'
p58946
sa(dp58947
S'description'
p58948
S'Component tensors\n'
p58949
sS'cpp_type'
p58950
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58951
sS'default'
p58952
g3
sS'name'
p58953
S'tensors'
p58954
sS'required'
p58955
I01
sS'group_name'
p58956
Nsa(dp58957
S'description'
p58958
g3
sS'cpp_type'
p58959
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58960
sS'default'
p58961
S'CompositeEigenstrain'
p58962
sS'name'
p58963
S'type'
p58964
sS'required'
p58965
I00
sS'group_name'
p58966
Nsa(dp58967
S'description'
p58968
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58969
sS'cpp_type'
p58970
S'bool'
p58971
sS'default'
p58972
S'0'
p58973
sS'name'
p58974
S'use_displaced_mesh'
p58975
sS'required'
p58976
I00
sS'group_name'
p58977
S'Advanced'
p58978
sa(dp58979
S'description'
p58980
S'Component weights\n'
p58981
sS'cpp_type'
p58982
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p58983
sS'default'
p58984
g3
sS'name'
p58985
S'weights'
p58986
sS'required'
p58987
I01
sS'group_name'
p58988
NsasS'name'
p58989
S'/Materials/CompositeEigenstrain'
p58990
sa(dp58991
S'description'
p58992
S'Assemble an elasticity tensor from multiple tensor contributions weighted by material properties\n'
p58993
sS'subblocks'
p58994
NsS'parameters'
p58995
(lp58996
(dp58997
S'description'
p58998
S'variable dependencies for the prefactor\n'
p58999
sS'cpp_type'
p59000
S'std::vector<VariableName>'
p59001
sS'default'
p59002
g3
sS'name'
p59003
S'args'
p59004
sS'required'
p59005
I01
sS'group_name'
p59006
Nsa(dp59007
S'description'
p59008
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59009
sS'cpp_type'
p59010
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59011
sS'default'
p59012
g3
sS'name'
p59013
S'base_name'
p59014
sS'required'
p59015
I00
sS'group_name'
p59016
Nsa(dp59017
S'description'
p59018
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59019
sS'cpp_type'
p59020
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59021
sS'default'
p59022
g3
sS'name'
p59023
S'block'
p59024
sS'required'
p59025
I00
sS'group_name'
p59026
Nsa(dp59027
S'description'
p59028
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59029
sS'cpp_type'
p59030
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59031
sS'default'
p59032
g3
sS'name'
p59033
S'boundary'
p59034
sS'required'
p59035
I00
sS'group_name'
p59036
Nsa(dp59037
S'description'
p59038
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59039
sS'cpp_type'
p59040
S'bool'
p59041
sS'default'
p59042
S'1'
p59043
sS'name'
p59044
S'compute'
p59045
sS'required'
p59046
I00
sS'group_name'
p59047
Nsa(dp59048
S'description'
p59049
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59050
sS'cpp_type'
p59051
S'bool'
p59052
sS'default'
p59053
S'0'
p59054
sS'name'
p59055
S'constant_on_elem'
p59056
sS'required'
p59057
I00
sS'group_name'
p59058
S'Advanced'
p59059
sa(dp59060
S'description'
p59061
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59062
sS'cpp_type'
p59063
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59064
sS'default'
p59065
g3
sS'name'
p59066
S'control_tags'
p59067
sS'required'
p59068
I00
sS'group_name'
p59069
S'Advanced'
p59070
sa(dp59071
S'description'
p59072
S'Set the enabled status of the MooseObject.\n'
p59073
sS'cpp_type'
p59074
S'bool'
p59075
sS'default'
p59076
S'1'
p59077
sS'name'
p59078
S'enable'
p59079
sS'required'
p59080
I00
sS'group_name'
p59081
S'Advanced'
p59082
sa(dp59083
S'description'
p59084
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59085
sS'cpp_type'
p59086
S'bool'
p59087
sS'default'
p59088
S'1'
p59089
sS'name'
p59090
S'implicit'
p59091
sS'required'
p59092
I00
sS'group_name'
p59093
S'Advanced'
p59094
sa(dp59095
S'description'
p59096
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59097
sS'cpp_type'
p59098
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59099
sS'default'
p59100
g3
sS'name'
p59101
S'output_properties'
p59102
sS'required'
p59103
I00
sS'group_name'
p59104
S'Outputs'
p59105
sa(dp59106
S'description'
p59107
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59108
sS'cpp_type'
p59109
S'std::vector<OutputName, std::allocator<OutputName> >'
p59110
sS'default'
p59111
S'none'
p59112
sS'name'
p59113
S'outputs'
p59114
sS'required'
p59115
I00
sS'group_name'
p59116
S'Outputs'
p59117
sa(dp59118
S'description'
p59119
S'The seed for the master random number generator\n'
p59120
sS'cpp_type'
p59121
S'unsigned int'
p59122
sS'default'
p59123
S'0'
p59124
sS'name'
p59125
S'seed'
p59126
sS'required'
p59127
I00
sS'group_name'
p59128
S'Advanced'
p59129
sa(dp59130
S'description'
p59131
S'Component tensors\n'
p59132
sS'cpp_type'
p59133
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59134
sS'default'
p59135
g3
sS'name'
p59136
S'tensors'
p59137
sS'required'
p59138
I01
sS'group_name'
p59139
Nsa(dp59140
S'description'
p59141
g3
sS'cpp_type'
p59142
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59143
sS'default'
p59144
S'CompositeElasticityTensor'
p59145
sS'name'
p59146
S'type'
p59147
sS'required'
p59148
I00
sS'group_name'
p59149
Nsa(dp59150
S'description'
p59151
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59152
sS'cpp_type'
p59153
S'bool'
p59154
sS'default'
p59155
S'0'
p59156
sS'name'
p59157
S'use_displaced_mesh'
p59158
sS'required'
p59159
I00
sS'group_name'
p59160
S'Advanced'
p59161
sa(dp59162
S'description'
p59163
S'Component weights\n'
p59164
sS'cpp_type'
p59165
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59166
sS'default'
p59167
g3
sS'name'
p59168
S'weights'
p59169
sS'required'
p59170
I01
sS'group_name'
p59171
NsasS'name'
p59172
S'/Materials/CompositeElasticityTensor'
p59173
sa(dp59174
S'description'
p59175
S'Assemble a mobility tensor from multiple tensor contributions weighted by material properties\n'
p59176
sS'subblocks'
p59177
NsS'parameters'
p59178
(lp59179
(dp59180
S'description'
p59181
S'Name of the mobility tensor property to generate\n'
p59182
sS'cpp_type'
p59183
S'MaterialPropertyName'
p59184
sS'default'
p59185
g3
sS'name'
p59186
S'M_name'
p59187
sS'required'
p59188
I01
sS'group_name'
p59189
Nsa(dp59190
S'description'
p59191
S'variable dependencies for the prefactor\n'
p59192
sS'cpp_type'
p59193
S'std::vector<VariableName>'
p59194
sS'default'
p59195
g3
sS'name'
p59196
S'args'
p59197
sS'required'
p59198
I01
sS'group_name'
p59199
Nsa(dp59200
S'description'
p59201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59202
sS'cpp_type'
p59203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59204
sS'default'
p59205
g3
sS'name'
p59206
S'block'
p59207
sS'required'
p59208
I00
sS'group_name'
p59209
Nsa(dp59210
S'description'
p59211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59212
sS'cpp_type'
p59213
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59214
sS'default'
p59215
g3
sS'name'
p59216
S'boundary'
p59217
sS'required'
p59218
I00
sS'group_name'
p59219
Nsa(dp59220
S'description'
p59221
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59222
sS'cpp_type'
p59223
S'bool'
p59224
sS'default'
p59225
S'1'
p59226
sS'name'
p59227
S'compute'
p59228
sS'required'
p59229
I00
sS'group_name'
p59230
Nsa(dp59231
S'description'
p59232
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59233
sS'cpp_type'
p59234
S'bool'
p59235
sS'default'
p59236
S'0'
p59237
sS'name'
p59238
S'constant_on_elem'
p59239
sS'required'
p59240
I00
sS'group_name'
p59241
S'Advanced'
p59242
sa(dp59243
S'description'
p59244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59245
sS'cpp_type'
p59246
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59247
sS'default'
p59248
g3
sS'name'
p59249
S'control_tags'
p59250
sS'required'
p59251
I00
sS'group_name'
p59252
S'Advanced'
p59253
sa(dp59254
S'description'
p59255
S'Set the enabled status of the MooseObject.\n'
p59256
sS'cpp_type'
p59257
S'bool'
p59258
sS'default'
p59259
S'1'
p59260
sS'name'
p59261
S'enable'
p59262
sS'required'
p59263
I00
sS'group_name'
p59264
S'Advanced'
p59265
sa(dp59266
S'description'
p59267
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59268
sS'cpp_type'
p59269
S'bool'
p59270
sS'default'
p59271
S'1'
p59272
sS'name'
p59273
S'implicit'
p59274
sS'required'
p59275
I00
sS'group_name'
p59276
S'Advanced'
p59277
sa(dp59278
S'description'
p59279
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59280
sS'cpp_type'
p59281
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59282
sS'default'
p59283
g3
sS'name'
p59284
S'output_properties'
p59285
sS'required'
p59286
I00
sS'group_name'
p59287
S'Outputs'
p59288
sa(dp59289
S'description'
p59290
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59291
sS'cpp_type'
p59292
S'std::vector<OutputName, std::allocator<OutputName> >'
p59293
sS'default'
p59294
S'none'
p59295
sS'name'
p59296
S'outputs'
p59297
sS'required'
p59298
I00
sS'group_name'
p59299
S'Outputs'
p59300
sa(dp59301
S'description'
p59302
S'The seed for the master random number generator\n'
p59303
sS'cpp_type'
p59304
S'unsigned int'
p59305
sS'default'
p59306
S'0'
p59307
sS'name'
p59308
S'seed'
p59309
sS'required'
p59310
I00
sS'group_name'
p59311
S'Advanced'
p59312
sa(dp59313
S'description'
p59314
S'Component tensors\n'
p59315
sS'cpp_type'
p59316
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59317
sS'default'
p59318
g3
sS'name'
p59319
S'tensors'
p59320
sS'required'
p59321
I01
sS'group_name'
p59322
Nsa(dp59323
S'description'
p59324
g3
sS'cpp_type'
p59325
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59326
sS'default'
p59327
S'CompositeMobilityTensor'
p59328
sS'name'
p59329
S'type'
p59330
sS'required'
p59331
I00
sS'group_name'
p59332
Nsa(dp59333
S'description'
p59334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59335
sS'cpp_type'
p59336
S'bool'
p59337
sS'default'
p59338
S'0'
p59339
sS'name'
p59340
S'use_displaced_mesh'
p59341
sS'required'
p59342
I00
sS'group_name'
p59343
S'Advanced'
p59344
sa(dp59345
S'description'
p59346
S'Component weights\n'
p59347
sS'cpp_type'
p59348
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59349
sS'default'
p59350
g3
sS'name'
p59351
S'weights'
p59352
sS'required'
p59353
I01
sS'group_name'
p59354
NsasS'name'
p59355
S'/Materials/CompositeMobilityTensor'
p59356
sa(dp59357
S'description'
p59358
S'Compute a strain increment and rotation increment for finite strains in an axisymmetric 1D problem\n'
p59359
sS'subblocks'
p59360
NsS'parameters'
p59361
(lp59362
(dp59363
S'description'
p59364
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59365
sS'cpp_type'
p59366
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59367
sS'default'
p59368
g3
sS'name'
p59369
S'base_name'
p59370
sS'required'
p59371
I00
sS'group_name'
p59372
Nsa(dp59373
S'description'
p59374
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59375
sS'cpp_type'
p59376
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59377
sS'default'
p59378
g3
sS'name'
p59379
S'block'
p59380
sS'required'
p59381
I00
sS'group_name'
p59382
Nsa(dp59383
S'description'
p59384
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59385
sS'cpp_type'
p59386
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59387
sS'default'
p59388
g3
sS'name'
p59389
S'boundary'
p59390
sS'required'
p59391
I00
sS'group_name'
p59392
Nsa(dp59393
S'description'
p59394
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59395
sS'cpp_type'
p59396
S'bool'
p59397
sS'default'
p59398
S'1'
p59399
sS'name'
p59400
S'compute'
p59401
sS'required'
p59402
I00
sS'group_name'
p59403
Nsa(dp59404
S'description'
p59405
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59406
sS'cpp_type'
p59407
S'bool'
p59408
sS'default'
p59409
S'0'
p59410
sS'name'
p59411
S'constant_on_elem'
p59412
sS'required'
p59413
I00
sS'group_name'
p59414
S'Advanced'
p59415
sa(dp59416
S'description'
p59417
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59418
sS'cpp_type'
p59419
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59420
sS'default'
p59421
g3
sS'name'
p59422
S'control_tags'
p59423
sS'required'
p59424
I00
sS'group_name'
p59425
S'Advanced'
p59426
sa(dp59427
S'name'
p59428
S'decomposition_method'
p59429
sS'cpp_type'
p59430
S'MooseEnum'
p59431
sS'default'
p59432
S'TaylorExpansion'
p59433
sS'description'
p59434
S'Methods to calculate the strain and rotation increments\n'
p59435
sS'required'
p59436
I00
sS'options'
p59437
S'TaylorExpansion EigenSolution'
p59438
sS'group_name'
p59439
Nsa(dp59440
S'description'
p59441
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59442
sS'cpp_type'
p59443
S'std::vector<VariableName>'
p59444
sS'default'
p59445
g3
sS'name'
p59446
S'displacements'
p59447
sS'required'
p59448
I01
sS'group_name'
p59449
Nsa(dp59450
S'description'
p59451
S'List of eigenstrains to be applied in this strain calculation\n'
p59452
sS'cpp_type'
p59453
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59454
sS'default'
p59455
g3
sS'name'
p59456
S'eigenstrain_names'
p59457
sS'required'
p59458
I00
sS'group_name'
p59459
Nsa(dp59460
S'description'
p59461
S'Set the enabled status of the MooseObject.\n'
p59462
sS'cpp_type'
p59463
S'bool'
p59464
sS'default'
p59465
S'1'
p59466
sS'name'
p59467
S'enable'
p59468
sS'required'
p59469
I00
sS'group_name'
p59470
S'Advanced'
p59471
sa(dp59472
S'description'
p59473
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59474
sS'cpp_type'
p59475
S'bool'
p59476
sS'default'
p59477
S'1'
p59478
sS'name'
p59479
S'implicit'
p59480
sS'required'
p59481
I00
sS'group_name'
p59482
S'Advanced'
p59483
sa(dp59484
S'description'
p59485
S'Nonlinear variable for axisymmetric 1D problem\n'
p59486
sS'cpp_type'
p59487
S'std::vector<VariableName>'
p59488
sS'default'
p59489
g3
sS'name'
p59490
S'out_of_plane_strain'
p59491
sS'required'
p59492
I00
sS'group_name'
p59493
Nsa(dp59494
S'description'
p59495
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59496
sS'cpp_type'
p59497
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59498
sS'default'
p59499
g3
sS'name'
p59500
S'output_properties'
p59501
sS'required'
p59502
I00
sS'group_name'
p59503
S'Outputs'
p59504
sa(dp59505
S'description'
p59506
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59507
sS'cpp_type'
p59508
S'std::vector<OutputName, std::allocator<OutputName> >'
p59509
sS'default'
p59510
S'none'
p59511
sS'name'
p59512
S'outputs'
p59513
sS'required'
p59514
I00
sS'group_name'
p59515
S'Outputs'
p59516
sa(dp59517
S'description'
p59518
S'Scalar variable for axisymmetric 1D problem\n'
p59519
sS'cpp_type'
p59520
S'std::vector<VariableName>'
p59521
sS'default'
p59522
g3
sS'name'
p59523
S'scalar_out_of_plane_strain'
p59524
sS'required'
p59525
I00
sS'group_name'
p59526
Nsa(dp59527
S'description'
p59528
S'The seed for the master random number generator\n'
p59529
sS'cpp_type'
p59530
S'unsigned int'
p59531
sS'default'
p59532
S'0'
p59533
sS'name'
p59534
S'seed'
p59535
sS'required'
p59536
I00
sS'group_name'
p59537
S'Advanced'
p59538
sa(dp59539
S'description'
p59540
g3
sS'cpp_type'
p59541
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59542
sS'default'
p59543
S'ComputeAxisymmetric1DFiniteStrain'
p59544
sS'name'
p59545
S'type'
p59546
sS'required'
p59547
I00
sS'group_name'
p59548
Nsa(dp59549
S'description'
p59550
S'Flag to correct volumetric locking\n'
p59551
sS'cpp_type'
p59552
S'bool'
p59553
sS'default'
p59554
S'0'
p59555
sS'name'
p59556
S'volumetric_locking_correction'
p59557
sS'required'
p59558
I00
sS'group_name'
p59559
NsasS'name'
p59560
S'/Materials/ComputeAxisymmetric1DFiniteStrain'
p59561
sa(dp59562
S'description'
p59563
S'Compute strain increment for small strains in an axisymmetric 1D problem\n'
p59564
sS'subblocks'
p59565
NsS'parameters'
p59566
(lp59567
(dp59568
S'description'
p59569
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59570
sS'cpp_type'
p59571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59572
sS'default'
p59573
g3
sS'name'
p59574
S'base_name'
p59575
sS'required'
p59576
I00
sS'group_name'
p59577
Nsa(dp59578
S'description'
p59579
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59580
sS'cpp_type'
p59581
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59582
sS'default'
p59583
g3
sS'name'
p59584
S'block'
p59585
sS'required'
p59586
I00
sS'group_name'
p59587
Nsa(dp59588
S'description'
p59589
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59590
sS'cpp_type'
p59591
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59592
sS'default'
p59593
g3
sS'name'
p59594
S'boundary'
p59595
sS'required'
p59596
I00
sS'group_name'
p59597
Nsa(dp59598
S'description'
p59599
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59600
sS'cpp_type'
p59601
S'bool'
p59602
sS'default'
p59603
S'1'
p59604
sS'name'
p59605
S'compute'
p59606
sS'required'
p59607
I00
sS'group_name'
p59608
Nsa(dp59609
S'description'
p59610
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59611
sS'cpp_type'
p59612
S'bool'
p59613
sS'default'
p59614
S'0'
p59615
sS'name'
p59616
S'constant_on_elem'
p59617
sS'required'
p59618
I00
sS'group_name'
p59619
S'Advanced'
p59620
sa(dp59621
S'description'
p59622
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59623
sS'cpp_type'
p59624
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59625
sS'default'
p59626
g3
sS'name'
p59627
S'control_tags'
p59628
sS'required'
p59629
I00
sS'group_name'
p59630
S'Advanced'
p59631
sa(dp59632
S'description'
p59633
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59634
sS'cpp_type'
p59635
S'std::vector<VariableName>'
p59636
sS'default'
p59637
g3
sS'name'
p59638
S'displacements'
p59639
sS'required'
p59640
I01
sS'group_name'
p59641
Nsa(dp59642
S'description'
p59643
S'List of eigenstrains to be applied in this strain calculation\n'
p59644
sS'cpp_type'
p59645
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59646
sS'default'
p59647
g3
sS'name'
p59648
S'eigenstrain_names'
p59649
sS'required'
p59650
I00
sS'group_name'
p59651
Nsa(dp59652
S'description'
p59653
S'Set the enabled status of the MooseObject.\n'
p59654
sS'cpp_type'
p59655
S'bool'
p59656
sS'default'
p59657
S'1'
p59658
sS'name'
p59659
S'enable'
p59660
sS'required'
p59661
I00
sS'group_name'
p59662
S'Advanced'
p59663
sa(dp59664
S'description'
p59665
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59666
sS'cpp_type'
p59667
S'bool'
p59668
sS'default'
p59669
S'1'
p59670
sS'name'
p59671
S'implicit'
p59672
sS'required'
p59673
I00
sS'group_name'
p59674
S'Advanced'
p59675
sa(dp59676
S'description'
p59677
S'Nonlinear variable for axisymmetric 1D problem\n'
p59678
sS'cpp_type'
p59679
S'std::vector<VariableName>'
p59680
sS'default'
p59681
g3
sS'name'
p59682
S'out_of_plane_strain'
p59683
sS'required'
p59684
I00
sS'group_name'
p59685
Nsa(dp59686
S'description'
p59687
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59688
sS'cpp_type'
p59689
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59690
sS'default'
p59691
g3
sS'name'
p59692
S'output_properties'
p59693
sS'required'
p59694
I00
sS'group_name'
p59695
S'Outputs'
p59696
sa(dp59697
S'description'
p59698
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59699
sS'cpp_type'
p59700
S'std::vector<OutputName, std::allocator<OutputName> >'
p59701
sS'default'
p59702
S'none'
p59703
sS'name'
p59704
S'outputs'
p59705
sS'required'
p59706
I00
sS'group_name'
p59707
S'Outputs'
p59708
sa(dp59709
S'description'
p59710
S'Scalar variable for axisymmetric 1D problem\n'
p59711
sS'cpp_type'
p59712
S'std::vector<VariableName>'
p59713
sS'default'
p59714
g3
sS'name'
p59715
S'scalar_out_of_plane_strain'
p59716
sS'required'
p59717
I00
sS'group_name'
p59718
Nsa(dp59719
S'description'
p59720
S'The seed for the master random number generator\n'
p59721
sS'cpp_type'
p59722
S'unsigned int'
p59723
sS'default'
p59724
S'0'
p59725
sS'name'
p59726
S'seed'
p59727
sS'required'
p59728
I00
sS'group_name'
p59729
S'Advanced'
p59730
sa(dp59731
S'description'
p59732
g3
sS'cpp_type'
p59733
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59734
sS'default'
p59735
S'ComputeAxisymmetric1DIncrementalStrain'
p59736
sS'name'
p59737
S'type'
p59738
sS'required'
p59739
I00
sS'group_name'
p59740
Nsa(dp59741
S'description'
p59742
S'Flag to correct volumetric locking\n'
p59743
sS'cpp_type'
p59744
S'bool'
p59745
sS'default'
p59746
S'0'
p59747
sS'name'
p59748
S'volumetric_locking_correction'
p59749
sS'required'
p59750
I00
sS'group_name'
p59751
NsasS'name'
p59752
S'/Materials/ComputeAxisymmetric1DIncrementalStrain'
p59753
sa(dp59754
S'description'
p59755
S'Compute a small strain in an Axisymmetric 1D problem\n'
p59756
sS'subblocks'
p59757
NsS'parameters'
p59758
(lp59759
(dp59760
S'description'
p59761
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59762
sS'cpp_type'
p59763
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59764
sS'default'
p59765
g3
sS'name'
p59766
S'base_name'
p59767
sS'required'
p59768
I00
sS'group_name'
p59769
Nsa(dp59770
S'description'
p59771
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59772
sS'cpp_type'
p59773
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59774
sS'default'
p59775
g3
sS'name'
p59776
S'block'
p59777
sS'required'
p59778
I00
sS'group_name'
p59779
Nsa(dp59780
S'description'
p59781
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59782
sS'cpp_type'
p59783
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59784
sS'default'
p59785
g3
sS'name'
p59786
S'boundary'
p59787
sS'required'
p59788
I00
sS'group_name'
p59789
Nsa(dp59790
S'description'
p59791
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59792
sS'cpp_type'
p59793
S'bool'
p59794
sS'default'
p59795
S'1'
p59796
sS'name'
p59797
S'compute'
p59798
sS'required'
p59799
I00
sS'group_name'
p59800
Nsa(dp59801
S'description'
p59802
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59803
sS'cpp_type'
p59804
S'bool'
p59805
sS'default'
p59806
S'0'
p59807
sS'name'
p59808
S'constant_on_elem'
p59809
sS'required'
p59810
I00
sS'group_name'
p59811
S'Advanced'
p59812
sa(dp59813
S'description'
p59814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59815
sS'cpp_type'
p59816
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59817
sS'default'
p59818
g3
sS'name'
p59819
S'control_tags'
p59820
sS'required'
p59821
I00
sS'group_name'
p59822
S'Advanced'
p59823
sa(dp59824
S'description'
p59825
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59826
sS'cpp_type'
p59827
S'std::vector<VariableName>'
p59828
sS'default'
p59829
g3
sS'name'
p59830
S'displacements'
p59831
sS'required'
p59832
I01
sS'group_name'
p59833
Nsa(dp59834
S'description'
p59835
S'List of eigenstrains to be applied in this strain calculation\n'
p59836
sS'cpp_type'
p59837
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p59838
sS'default'
p59839
g3
sS'name'
p59840
S'eigenstrain_names'
p59841
sS'required'
p59842
I00
sS'group_name'
p59843
Nsa(dp59844
S'description'
p59845
S'Set the enabled status of the MooseObject.\n'
p59846
sS'cpp_type'
p59847
S'bool'
p59848
sS'default'
p59849
S'1'
p59850
sS'name'
p59851
S'enable'
p59852
sS'required'
p59853
I00
sS'group_name'
p59854
S'Advanced'
p59855
sa(dp59856
S'description'
p59857
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59858
sS'cpp_type'
p59859
S'bool'
p59860
sS'default'
p59861
S'1'
p59862
sS'name'
p59863
S'implicit'
p59864
sS'required'
p59865
I00
sS'group_name'
p59866
S'Advanced'
p59867
sa(dp59868
S'description'
p59869
S'Nonlinear variable for axisymmetric 1D problem\n'
p59870
sS'cpp_type'
p59871
S'std::vector<VariableName>'
p59872
sS'default'
p59873
g3
sS'name'
p59874
S'out_of_plane_strain'
p59875
sS'required'
p59876
I00
sS'group_name'
p59877
Nsa(dp59878
S'description'
p59879
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p59880
sS'cpp_type'
p59881
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59882
sS'default'
p59883
g3
sS'name'
p59884
S'output_properties'
p59885
sS'required'
p59886
I00
sS'group_name'
p59887
S'Outputs'
p59888
sa(dp59889
S'description'
p59890
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p59891
sS'cpp_type'
p59892
S'std::vector<OutputName, std::allocator<OutputName> >'
p59893
sS'default'
p59894
S'none'
p59895
sS'name'
p59896
S'outputs'
p59897
sS'required'
p59898
I00
sS'group_name'
p59899
S'Outputs'
p59900
sa(dp59901
S'description'
p59902
S'Scalar variable for axisymmetric 1D problem\n'
p59903
sS'cpp_type'
p59904
S'std::vector<VariableName>'
p59905
sS'default'
p59906
g3
sS'name'
p59907
S'scalar_out_of_plane_strain'
p59908
sS'required'
p59909
I00
sS'group_name'
p59910
Nsa(dp59911
S'description'
p59912
S'The seed for the master random number generator\n'
p59913
sS'cpp_type'
p59914
S'unsigned int'
p59915
sS'default'
p59916
S'0'
p59917
sS'name'
p59918
S'seed'
p59919
sS'required'
p59920
I00
sS'group_name'
p59921
S'Advanced'
p59922
sa(dp59923
S'description'
p59924
g3
sS'cpp_type'
p59925
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59926
sS'default'
p59927
S'ComputeAxisymmetric1DSmallStrain'
p59928
sS'name'
p59929
S'type'
p59930
sS'required'
p59931
I00
sS'group_name'
p59932
Nsa(dp59933
S'description'
p59934
S'Flag to correct volumetric locking\n'
p59935
sS'cpp_type'
p59936
S'bool'
p59937
sS'default'
p59938
S'0'
p59939
sS'name'
p59940
S'volumetric_locking_correction'
p59941
sS'required'
p59942
I00
sS'group_name'
p59943
NsasS'name'
p59944
S'/Materials/ComputeAxisymmetric1DSmallStrain'
p59945
sa(dp59946
S'description'
p59947
S'Compute a strain increment for finite strains under axisymmetric assumptions.\n'
p59948
sS'subblocks'
p59949
NsS'parameters'
p59950
(lp59951
(dp59952
S'description'
p59953
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59954
sS'cpp_type'
p59955
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59956
sS'default'
p59957
g3
sS'name'
p59958
S'base_name'
p59959
sS'required'
p59960
I00
sS'group_name'
p59961
Nsa(dp59962
S'description'
p59963
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59964
sS'cpp_type'
p59965
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59966
sS'default'
p59967
g3
sS'name'
p59968
S'block'
p59969
sS'required'
p59970
I00
sS'group_name'
p59971
Nsa(dp59972
S'description'
p59973
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p59974
sS'cpp_type'
p59975
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p59976
sS'default'
p59977
g3
sS'name'
p59978
S'boundary'
p59979
sS'required'
p59980
I00
sS'group_name'
p59981
Nsa(dp59982
S'description'
p59983
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p59984
sS'cpp_type'
p59985
S'bool'
p59986
sS'default'
p59987
S'1'
p59988
sS'name'
p59989
S'compute'
p59990
sS'required'
p59991
I00
sS'group_name'
p59992
Nsa(dp59993
S'description'
p59994
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p59995
sS'cpp_type'
p59996
S'bool'
p59997
sS'default'
p59998
S'0'
p59999
sS'name'
p60000
S'constant_on_elem'
p60001
sS'required'
p60002
I00
sS'group_name'
p60003
S'Advanced'
p60004
sa(dp60005
S'description'
p60006
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60007
sS'cpp_type'
p60008
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60009
sS'default'
p60010
g3
sS'name'
p60011
S'control_tags'
p60012
sS'required'
p60013
I00
sS'group_name'
p60014
S'Advanced'
p60015
sa(dp60016
S'name'
p60017
S'decomposition_method'
p60018
sS'cpp_type'
p60019
S'MooseEnum'
p60020
sS'default'
p60021
S'TaylorExpansion'
p60022
sS'description'
p60023
S'Methods to calculate the strain and rotation increments\n'
p60024
sS'required'
p60025
I00
sS'options'
p60026
S'TaylorExpansion EigenSolution'
p60027
sS'group_name'
p60028
Nsa(dp60029
S'description'
p60030
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p60031
sS'cpp_type'
p60032
S'std::vector<VariableName>'
p60033
sS'default'
p60034
g3
sS'name'
p60035
S'displacements'
p60036
sS'required'
p60037
I01
sS'group_name'
p60038
Nsa(dp60039
S'description'
p60040
S'List of eigenstrains to be applied in this strain calculation\n'
p60041
sS'cpp_type'
p60042
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p60043
sS'default'
p60044
g3
sS'name'
p60045
S'eigenstrain_names'
p60046
sS'required'
p60047
I00
sS'group_name'
p60048
Nsa(dp60049
S'description'
p60050
S'Set the enabled status of the MooseObject.\n'
p60051
sS'cpp_type'
p60052
S'bool'
p60053
sS'default'
p60054
S'1'
p60055
sS'name'
p60056
S'enable'
p60057
sS'required'
p60058
I00
sS'group_name'
p60059
S'Advanced'
p60060
sa(dp60061
S'description'
p60062
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60063
sS'cpp_type'
p60064
S'bool'
p60065
sS'default'
p60066
S'1'
p60067
sS'name'
p60068
S'implicit'
p60069
sS'required'
p60070
I00
sS'group_name'
p60071
S'Advanced'
p60072
sa(dp60073
S'description'
p60074
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60075
sS'cpp_type'
p60076
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60077
sS'default'
p60078
g3
sS'name'
p60079
S'output_properties'
p60080
sS'required'
p60081
I00
sS'group_name'
p60082
S'Outputs'
p60083
sa(dp60084
S'description'
p60085
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60086
sS'cpp_type'
p60087
S'std::vector<OutputName, std::allocator<OutputName> >'
p60088
sS'default'
p60089
S'none'
p60090
sS'name'
p60091
S'outputs'
p60092
sS'required'
p60093
I00
sS'group_name'
p60094
S'Outputs'
p60095
sa(dp60096
S'description'
p60097
S'The seed for the master random number generator\n'
p60098
sS'cpp_type'
p60099
S'unsigned int'
p60100
sS'default'
p60101
S'0'
p60102
sS'name'
p60103
S'seed'
p60104
sS'required'
p60105
I00
sS'group_name'
p60106
S'Advanced'
p60107
sa(dp60108
S'description'
p60109
g3
sS'cpp_type'
p60110
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60111
sS'default'
p60112
S'ComputeAxisymmetricRZFiniteStrain'
p60113
sS'name'
p60114
S'type'
p60115
sS'required'
p60116
I00
sS'group_name'
p60117
Nsa(dp60118
S'description'
p60119
S'Flag to correct volumetric locking\n'
p60120
sS'cpp_type'
p60121
S'bool'
p60122
sS'default'
p60123
S'0'
p60124
sS'name'
p60125
S'volumetric_locking_correction'
p60126
sS'required'
p60127
I00
sS'group_name'
p60128
NsasS'name'
p60129
S'/Materials/ComputeAxisymmetricRZFiniteStrain'
p60130
sa(dp60131
S'description'
p60132
S'Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n'
p60133
sS'subblocks'
p60134
NsS'parameters'
p60135
(lp60136
(dp60137
S'description'
p60138
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60139
sS'cpp_type'
p60140
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60141
sS'default'
p60142
g3
sS'name'
p60143
S'base_name'
p60144
sS'required'
p60145
I00
sS'group_name'
p60146
Nsa(dp60147
S'description'
p60148
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60149
sS'cpp_type'
p60150
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60151
sS'default'
p60152
g3
sS'name'
p60153
S'block'
p60154
sS'required'
p60155
I00
sS'group_name'
p60156
Nsa(dp60157
S'description'
p60158
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60159
sS'cpp_type'
p60160
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60161
sS'default'
p60162
g3
sS'name'
p60163
S'boundary'
p60164
sS'required'
p60165
I00
sS'group_name'
p60166
Nsa(dp60167
S'description'
p60168
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60169
sS'cpp_type'
p60170
S'bool'
p60171
sS'default'
p60172
S'1'
p60173
sS'name'
p60174
S'compute'
p60175
sS'required'
p60176
I00
sS'group_name'
p60177
Nsa(dp60178
S'description'
p60179
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60180
sS'cpp_type'
p60181
S'bool'
p60182
sS'default'
p60183
S'0'
p60184
sS'name'
p60185
S'constant_on_elem'
p60186
sS'required'
p60187
I00
sS'group_name'
p60188
S'Advanced'
p60189
sa(dp60190
S'description'
p60191
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60192
sS'cpp_type'
p60193
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60194
sS'default'
p60195
g3
sS'name'
p60196
S'control_tags'
p60197
sS'required'
p60198
I00
sS'group_name'
p60199
S'Advanced'
p60200
sa(dp60201
S'description'
p60202
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p60203
sS'cpp_type'
p60204
S'std::vector<VariableName>'
p60205
sS'default'
p60206
g3
sS'name'
p60207
S'displacements'
p60208
sS'required'
p60209
I01
sS'group_name'
p60210
Nsa(dp60211
S'description'
p60212
S'List of eigenstrains to be applied in this strain calculation\n'
p60213
sS'cpp_type'
p60214
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p60215
sS'default'
p60216
g3
sS'name'
p60217
S'eigenstrain_names'
p60218
sS'required'
p60219
I00
sS'group_name'
p60220
Nsa(dp60221
S'description'
p60222
S'Set the enabled status of the MooseObject.\n'
p60223
sS'cpp_type'
p60224
S'bool'
p60225
sS'default'
p60226
S'1'
p60227
sS'name'
p60228
S'enable'
p60229
sS'required'
p60230
I00
sS'group_name'
p60231
S'Advanced'
p60232
sa(dp60233
S'description'
p60234
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60235
sS'cpp_type'
p60236
S'bool'
p60237
sS'default'
p60238
S'1'
p60239
sS'name'
p60240
S'implicit'
p60241
sS'required'
p60242
I00
sS'group_name'
p60243
S'Advanced'
p60244
sa(dp60245
S'description'
p60246
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60247
sS'cpp_type'
p60248
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60249
sS'default'
p60250
g3
sS'name'
p60251
S'output_properties'
p60252
sS'required'
p60253
I00
sS'group_name'
p60254
S'Outputs'
p60255
sa(dp60256
S'description'
p60257
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60258
sS'cpp_type'
p60259
S'std::vector<OutputName, std::allocator<OutputName> >'
p60260
sS'default'
p60261
S'none'
p60262
sS'name'
p60263
S'outputs'
p60264
sS'required'
p60265
I00
sS'group_name'
p60266
S'Outputs'
p60267
sa(dp60268
S'description'
p60269
S'The seed for the master random number generator\n'
p60270
sS'cpp_type'
p60271
S'unsigned int'
p60272
sS'default'
p60273
S'0'
p60274
sS'name'
p60275
S'seed'
p60276
sS'required'
p60277
I00
sS'group_name'
p60278
S'Advanced'
p60279
sa(dp60280
S'description'
p60281
g3
sS'cpp_type'
p60282
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60283
sS'default'
p60284
S'ComputeAxisymmetricRZIncrementalStrain'
p60285
sS'name'
p60286
S'type'
p60287
sS'required'
p60288
I00
sS'group_name'
p60289
Nsa(dp60290
S'description'
p60291
S'Flag to correct volumetric locking\n'
p60292
sS'cpp_type'
p60293
S'bool'
p60294
sS'default'
p60295
S'0'
p60296
sS'name'
p60297
S'volumetric_locking_correction'
p60298
sS'required'
p60299
I00
sS'group_name'
p60300
NsasS'name'
p60301
S'/Materials/ComputeAxisymmetricRZIncrementalStrain'
p60302
sa(dp60303
S'description'
p60304
S'Compute a small strain in an Axisymmetric geometry\n'
p60305
sS'subblocks'
p60306
NsS'parameters'
p60307
(lp60308
(dp60309
S'description'
p60310
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60311
sS'cpp_type'
p60312
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60313
sS'default'
p60314
g3
sS'name'
p60315
S'base_name'
p60316
sS'required'
p60317
I00
sS'group_name'
p60318
Nsa(dp60319
S'description'
p60320
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60321
sS'cpp_type'
p60322
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60323
sS'default'
p60324
g3
sS'name'
p60325
S'block'
p60326
sS'required'
p60327
I00
sS'group_name'
p60328
Nsa(dp60329
S'description'
p60330
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60331
sS'cpp_type'
p60332
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60333
sS'default'
p60334
g3
sS'name'
p60335
S'boundary'
p60336
sS'required'
p60337
I00
sS'group_name'
p60338
Nsa(dp60339
S'description'
p60340
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60341
sS'cpp_type'
p60342
S'bool'
p60343
sS'default'
p60344
S'1'
p60345
sS'name'
p60346
S'compute'
p60347
sS'required'
p60348
I00
sS'group_name'
p60349
Nsa(dp60350
S'description'
p60351
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60352
sS'cpp_type'
p60353
S'bool'
p60354
sS'default'
p60355
S'0'
p60356
sS'name'
p60357
S'constant_on_elem'
p60358
sS'required'
p60359
I00
sS'group_name'
p60360
S'Advanced'
p60361
sa(dp60362
S'description'
p60363
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60364
sS'cpp_type'
p60365
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60366
sS'default'
p60367
g3
sS'name'
p60368
S'control_tags'
p60369
sS'required'
p60370
I00
sS'group_name'
p60371
S'Advanced'
p60372
sa(dp60373
S'description'
p60374
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p60375
sS'cpp_type'
p60376
S'std::vector<VariableName>'
p60377
sS'default'
p60378
g3
sS'name'
p60379
S'displacements'
p60380
sS'required'
p60381
I01
sS'group_name'
p60382
Nsa(dp60383
S'description'
p60384
S'List of eigenstrains to be applied in this strain calculation\n'
p60385
sS'cpp_type'
p60386
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p60387
sS'default'
p60388
g3
sS'name'
p60389
S'eigenstrain_names'
p60390
sS'required'
p60391
I00
sS'group_name'
p60392
Nsa(dp60393
S'description'
p60394
S'Set the enabled status of the MooseObject.\n'
p60395
sS'cpp_type'
p60396
S'bool'
p60397
sS'default'
p60398
S'1'
p60399
sS'name'
p60400
S'enable'
p60401
sS'required'
p60402
I00
sS'group_name'
p60403
S'Advanced'
p60404
sa(dp60405
S'description'
p60406
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60407
sS'cpp_type'
p60408
S'bool'
p60409
sS'default'
p60410
S'1'
p60411
sS'name'
p60412
S'implicit'
p60413
sS'required'
p60414
I00
sS'group_name'
p60415
S'Advanced'
p60416
sa(dp60417
S'description'
p60418
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60419
sS'cpp_type'
p60420
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60421
sS'default'
p60422
g3
sS'name'
p60423
S'output_properties'
p60424
sS'required'
p60425
I00
sS'group_name'
p60426
S'Outputs'
p60427
sa(dp60428
S'description'
p60429
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60430
sS'cpp_type'
p60431
S'std::vector<OutputName, std::allocator<OutputName> >'
p60432
sS'default'
p60433
S'none'
p60434
sS'name'
p60435
S'outputs'
p60436
sS'required'
p60437
I00
sS'group_name'
p60438
S'Outputs'
p60439
sa(dp60440
S'description'
p60441
S'The seed for the master random number generator\n'
p60442
sS'cpp_type'
p60443
S'unsigned int'
p60444
sS'default'
p60445
S'0'
p60446
sS'name'
p60447
S'seed'
p60448
sS'required'
p60449
I00
sS'group_name'
p60450
S'Advanced'
p60451
sa(dp60452
S'description'
p60453
g3
sS'cpp_type'
p60454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60455
sS'default'
p60456
S'ComputeAxisymmetricRZSmallStrain'
p60457
sS'name'
p60458
S'type'
p60459
sS'required'
p60460
I00
sS'group_name'
p60461
Nsa(dp60462
S'description'
p60463
S'Flag to correct volumetric locking\n'
p60464
sS'cpp_type'
p60465
S'bool'
p60466
sS'default'
p60467
S'0'
p60468
sS'name'
p60469
S'volumetric_locking_correction'
p60470
sS'required'
p60471
I00
sS'group_name'
p60472
NsasS'name'
p60473
S'/Materials/ComputeAxisymmetricRZSmallStrain'
p60474
sa(dp60475
S'description'
p60476
S'Capped Drucker-Prager plasticity stress calculator\n'
p60477
sS'subblocks'
p60478
NsS'parameters'
p60479
(lp60480
(dp60481
S'description'
p60482
S'A TensorMechanicsPlasticDruckerPrager UserObject that defines the Drucker-Prager parameters (cohesion, friction angle and dilation angle)\n'
p60483
sS'cpp_type'
p60484
S'UserObjectName'
p60485
sS'default'
p60486
g3
sS'name'
p60487
S'DP_model'
p60488
sS'required'
p60489
I01
sS'group_name'
p60490
Nsa(dp60491
S'description'
p60492
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60493
sS'cpp_type'
p60494
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60495
sS'default'
p60496
g3
sS'name'
p60497
S'base_name'
p60498
sS'required'
p60499
I00
sS'group_name'
p60500
Nsa(dp60501
S'description'
p60502
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60503
sS'cpp_type'
p60504
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60505
sS'default'
p60506
g3
sS'name'
p60507
S'block'
p60508
sS'required'
p60509
I00
sS'group_name'
p60510
Nsa(dp60511
S'description'
p60512
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60513
sS'cpp_type'
p60514
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60515
sS'default'
p60516
g3
sS'name'
p60517
S'boundary'
p60518
sS'required'
p60519
I00
sS'group_name'
p60520
Nsa(dp60521
S'description'
p60522
S'A TensorMechanicsHardening UserObject that defines hardening of the compressive strength.  In physical situations this is positive.\n'
p60523
sS'cpp_type'
p60524
S'UserObjectName'
p60525
sS'default'
p60526
g3
sS'name'
p60527
S'compressive_strength'
p60528
sS'required'
p60529
I01
sS'group_name'
p60530
Nsa(dp60531
S'description'
p60532
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60533
sS'cpp_type'
p60534
S'bool'
p60535
sS'default'
p60536
S'1'
p60537
sS'name'
p60538
S'compute'
p60539
sS'required'
p60540
I00
sS'group_name'
p60541
Nsa(dp60542
S'description'
p60543
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60544
sS'cpp_type'
p60545
S'bool'
p60546
sS'default'
p60547
S'0'
p60548
sS'name'
p60549
S'constant_on_elem'
p60550
sS'required'
p60551
I00
sS'group_name'
p60552
S'Advanced'
p60553
sa(dp60554
S'description'
p60555
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60556
sS'cpp_type'
p60557
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60558
sS'default'
p60559
g3
sS'name'
p60560
S'control_tags'
p60561
sS'required'
p60562
I00
sS'group_name'
p60563
S'Advanced'
p60564
sa(dp60565
S'description'
p60566
S'Set the enabled status of the MooseObject.\n'
p60567
sS'cpp_type'
p60568
S'bool'
p60569
sS'default'
p60570
S'1'
p60571
sS'name'
p60572
S'enable'
p60573
sS'required'
p60574
I00
sS'group_name'
p60575
S'Advanced'
p60576
sa(dp60577
S'description'
p60578
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60579
sS'cpp_type'
p60580
S'bool'
p60581
sS'default'
p60582
S'1'
p60583
sS'name'
p60584
S'implicit'
p60585
sS'required'
p60586
I00
sS'group_name'
p60587
S'Advanced'
p60588
sa(dp60589
S'description'
p60590
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p60591
sS'cpp_type'
p60592
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p60593
sS'default'
p60594
g3
sS'name'
p60595
S'initial_stress'
p60596
sS'required'
p60597
I00
sS'group_name'
p60598
Nsa(dp60599
S'description'
p60600
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p60601
sS'cpp_type'
p60602
S'unsigned int'
p60603
sS'default'
p60604
S'20'
p60605
sS'name'
p60606
S'max_NR_iterations'
p60607
sS'required'
p60608
I00
sS'group_name'
p60609
Nsa(dp60610
S'description'
p60611
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p60612
sS'cpp_type'
p60613
S'double'
p60614
sS'default'
p60615
S'1'
p60616
sS'name'
p60617
S'min_step_size'
p60618
sS'required'
p60619
I00
sS'group_name'
p60620
Nsa(dp60621
S'description'
p60622
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60623
sS'cpp_type'
p60624
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60625
sS'default'
p60626
g3
sS'name'
p60627
S'output_properties'
p60628
sS'required'
p60629
I00
sS'group_name'
p60630
S'Outputs'
p60631
sa(dp60632
S'description'
p60633
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60634
sS'cpp_type'
p60635
S'std::vector<OutputName, std::allocator<OutputName> >'
p60636
sS'default'
p60637
S'none'
p60638
sS'name'
p60639
S'outputs'
p60640
sS'required'
p60641
I00
sS'group_name'
p60642
S'Outputs'
p60643
sa(dp60644
S'description'
p60645
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p60646
sS'cpp_type'
p60647
S'bool'
p60648
sS'default'
p60649
S'1'
p60650
sS'name'
p60651
S'perfect_guess'
p60652
sS'required'
p60653
I00
sS'group_name'
p60654
Nsa(dp60655
S'description'
p60656
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p60657
sS'cpp_type'
p60658
S'bool'
p60659
sS'default'
p60660
S'0'
p60661
sS'name'
p60662
S'perform_finite_strain_rotations'
p60663
sS'required'
p60664
I00
sS'group_name'
p60665
Nsa(dp60666
S'description'
p60667
S'The seed for the master random number generator\n'
p60668
sS'cpp_type'
p60669
S'unsigned int'
p60670
sS'default'
p60671
S'0'
p60672
sS'name'
p60673
S'seed'
p60674
sS'required'
p60675
I00
sS'group_name'
p60676
S'Advanced'
p60677
sa(dp60678
S'description'
p60679
S'If true, and if the trial stress exceeds the tensile strength, then the user gaurantees that the returned stress will be independent of the compressive strength.\n'
p60680
sS'cpp_type'
p60681
S'bool'
p60682
sS'default'
p60683
S'1'
p60684
sS'name'
p60685
S'small_dilation'
p60686
sS'required'
p60687
I00
sS'group_name'
p60688
Nsa(dp60689
S'description'
p60690
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p60691
sS'cpp_type'
p60692
S'double'
p60693
sS'default'
p60694
g3
sS'name'
p60695
S'smoothing_tol'
p60696
sS'required'
p60697
I01
sS'group_name'
p60698
Nsa(dp60699
S'description'
p60700
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p60701
sS'cpp_type'
p60702
S'bool'
p60703
sS'default'
p60704
S'0'
p60705
sS'name'
p60706
S'store_stress_old'
p60707
sS'required'
p60708
I00
sS'group_name'
p60709
Nsa(dp60710
S'name'
p60711
S'tangent_operator'
p60712
sS'cpp_type'
p60713
S'MooseEnum'
p60714
sS'default'
p60715
S'nonlinear'
p60716
sS'description'
p60717
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p60718
sS'required'
p60719
I00
sS'options'
p60720
S'elastic nonlinear'
p60721
sS'group_name'
p60722
Nsa(dp60723
S'description'
p60724
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p60725
sS'cpp_type'
p60726
S'UserObjectName'
p60727
sS'default'
p60728
g3
sS'name'
p60729
S'tensile_strength'
p60730
sS'required'
p60731
I01
sS'group_name'
p60732
Nsa(dp60733
S'description'
p60734
S'The cone vertex at J2 = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p60735
sS'cpp_type'
p60736
S'double'
p60737
sS'default'
p60738
g3
sS'name'
p60739
S'tip_smoother'
p60740
sS'required'
p60741
I01
sS'group_name'
p60742
Nsa(dp60743
S'description'
p60744
g3
sS'cpp_type'
p60745
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60746
sS'default'
p60747
S'ComputeCappedDruckerPragerStress'
p60748
sS'name'
p60749
S'type'
p60750
sS'required'
p60751
I00
sS'group_name'
p60752
Nsa(dp60753
S'description'
p60754
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p60755
sS'cpp_type'
p60756
S'bool'
p60757
sS'default'
p60758
S'0'
p60759
sS'name'
p60760
S'warn_about_precision_loss'
p60761
sS'required'
p60762
I00
sS'group_name'
p60763
Nsa(dp60764
S'description'
p60765
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p60766
sS'cpp_type'
p60767
S'double'
p60768
sS'default'
p60769
g3
sS'name'
p60770
S'yield_function_tol'
p60771
sS'required'
p60772
I01
sS'group_name'
p60773
NsasS'name'
p60774
S'/Materials/ComputeCappedDruckerPragerStress'
p60775
sa(dp60776
S'description'
p60777
S'Capped weak inclined plane plasticity stress calculator\n'
p60778
sS'subblocks'
p60779
NsS'parameters'
p60780
(lp60781
(dp60782
S'description'
p60783
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p60784
sS'cpp_type'
p60785
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60786
sS'default'
p60787
g3
sS'name'
p60788
S'base_name'
p60789
sS'required'
p60790
I00
sS'group_name'
p60791
Nsa(dp60792
S'description'
p60793
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60794
sS'cpp_type'
p60795
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60796
sS'default'
p60797
g3
sS'name'
p60798
S'block'
p60799
sS'required'
p60800
I00
sS'group_name'
p60801
Nsa(dp60802
S'description'
p60803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p60804
sS'cpp_type'
p60805
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p60806
sS'default'
p60807
g3
sS'name'
p60808
S'boundary'
p60809
sS'required'
p60810
I00
sS'group_name'
p60811
Nsa(dp60812
S'description'
p60813
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p60814
sS'cpp_type'
p60815
S'UserObjectName'
p60816
sS'default'
p60817
g3
sS'name'
p60818
S'cohesion'
p60819
sS'required'
p60820
I01
sS'group_name'
p60821
Nsa(dp60822
S'description'
p60823
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n'
p60824
sS'cpp_type'
p60825
S'UserObjectName'
p60826
sS'default'
p60827
g3
sS'name'
p60828
S'compressive_strength'
p60829
sS'required'
p60830
I01
sS'group_name'
p60831
Nsa(dp60832
S'description'
p60833
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p60834
sS'cpp_type'
p60835
S'bool'
p60836
sS'default'
p60837
S'1'
p60838
sS'name'
p60839
S'compute'
p60840
sS'required'
p60841
I00
sS'group_name'
p60842
Nsa(dp60843
S'description'
p60844
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p60845
sS'cpp_type'
p60846
S'bool'
p60847
sS'default'
p60848
S'0'
p60849
sS'name'
p60850
S'constant_on_elem'
p60851
sS'required'
p60852
I00
sS'group_name'
p60853
S'Advanced'
p60854
sa(dp60855
S'description'
p60856
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60857
sS'cpp_type'
p60858
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60859
sS'default'
p60860
g3
sS'name'
p60861
S'control_tags'
p60862
sS'required'
p60863
I00
sS'group_name'
p60864
S'Advanced'
p60865
sa(dp60866
S'description'
p60867
S'Set the enabled status of the MooseObject.\n'
p60868
sS'cpp_type'
p60869
S'bool'
p60870
sS'default'
p60871
S'1'
p60872
sS'name'
p60873
S'enable'
p60874
sS'required'
p60875
I00
sS'group_name'
p60876
S'Advanced'
p60877
sa(dp60878
S'description'
p60879
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60880
sS'cpp_type'
p60881
S'bool'
p60882
sS'default'
p60883
S'1'
p60884
sS'name'
p60885
S'implicit'
p60886
sS'required'
p60887
I00
sS'group_name'
p60888
S'Advanced'
p60889
sa(dp60890
S'description'
p60891
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p60892
sS'cpp_type'
p60893
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p60894
sS'default'
p60895
g3
sS'name'
p60896
S'initial_stress'
p60897
sS'required'
p60898
I00
sS'group_name'
p60899
Nsa(dp60900
S'description'
p60901
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p60902
sS'cpp_type'
p60903
S'unsigned int'
p60904
sS'default'
p60905
S'20'
p60906
sS'name'
p60907
S'max_NR_iterations'
p60908
sS'required'
p60909
I00
sS'group_name'
p60910
Nsa(dp60911
S'description'
p60912
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p60913
sS'cpp_type'
p60914
S'double'
p60915
sS'default'
p60916
S'1'
p60917
sS'name'
p60918
S'min_step_size'
p60919
sS'required'
p60920
I00
sS'group_name'
p60921
Nsa(dp60922
S'description'
p60923
S'The normal vector to the weak plane\n'
p60924
sS'cpp_type'
p60925
S'libMesh::VectorValue<double>'
p60926
sS'default'
p60927
g3
sS'name'
p60928
S'normal_vector'
p60929
sS'required'
p60930
I01
sS'group_name'
p60931
Nsa(dp60932
S'description'
p60933
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p60934
sS'cpp_type'
p60935
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60936
sS'default'
p60937
g3
sS'name'
p60938
S'output_properties'
p60939
sS'required'
p60940
I00
sS'group_name'
p60941
S'Outputs'
p60942
sa(dp60943
S'description'
p60944
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p60945
sS'cpp_type'
p60946
S'std::vector<OutputName, std::allocator<OutputName> >'
p60947
sS'default'
p60948
S'none'
p60949
sS'name'
p60950
S'outputs'
p60951
sS'required'
p60952
I00
sS'group_name'
p60953
S'Outputs'
p60954
sa(dp60955
S'description'
p60956
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p60957
sS'cpp_type'
p60958
S'bool'
p60959
sS'default'
p60960
S'1'
p60961
sS'name'
p60962
S'perfect_guess'
p60963
sS'required'
p60964
I00
sS'group_name'
p60965
Nsa(dp60966
S'description'
p60967
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p60968
sS'cpp_type'
p60969
S'bool'
p60970
sS'default'
p60971
S'0'
p60972
sS'name'
p60973
S'perform_finite_strain_rotations'
p60974
sS'required'
p60975
I00
sS'group_name'
p60976
Nsa(dp60977
S'description'
p60978
S'The seed for the master random number generator\n'
p60979
sS'cpp_type'
p60980
S'unsigned int'
p60981
sS'default'
p60982
S'0'
p60983
sS'name'
p60984
S'seed'
p60985
sS'required'
p60986
I00
sS'group_name'
p60987
S'Advanced'
p60988
sa(dp60989
S'description'
p60990
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p60991
sS'cpp_type'
p60992
S'double'
p60993
sS'default'
p60994
g3
sS'name'
p60995
S'smoothing_tol'
p60996
sS'required'
p60997
I01
sS'group_name'
p60998
Nsa(dp60999
S'description'
p61000
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p61001
sS'cpp_type'
p61002
S'bool'
p61003
sS'default'
p61004
S'0'
p61005
sS'name'
p61006
S'store_stress_old'
p61007
sS'required'
p61008
I00
sS'group_name'
p61009
Nsa(dp61010
S'description'
p61011
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p61012
sS'cpp_type'
p61013
S'UserObjectName'
p61014
sS'default'
p61015
g3
sS'name'
p61016
S'tan_dilation_angle'
p61017
sS'required'
p61018
I01
sS'group_name'
p61019
Nsa(dp61020
S'description'
p61021
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p61022
sS'cpp_type'
p61023
S'UserObjectName'
p61024
sS'default'
p61025
g3
sS'name'
p61026
S'tan_friction_angle'
p61027
sS'required'
p61028
I01
sS'group_name'
p61029
Nsa(dp61030
S'name'
p61031
S'tangent_operator'
p61032
sS'cpp_type'
p61033
S'MooseEnum'
p61034
sS'default'
p61035
S'nonlinear'
p61036
sS'description'
p61037
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p61038
sS'required'
p61039
I00
sS'options'
p61040
S'elastic nonlinear'
p61041
sS'group_name'
p61042
Nsa(dp61043
S'description'
p61044
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p61045
sS'cpp_type'
p61046
S'UserObjectName'
p61047
sS'default'
p61048
g3
sS'name'
p61049
S'tensile_strength'
p61050
sS'required'
p61051
I01
sS'group_name'
p61052
Nsa(dp61053
S'description'
p61054
S'The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p61055
sS'cpp_type'
p61056
S'double'
p61057
sS'default'
p61058
g3
sS'name'
p61059
S'tip_smoother'
p61060
sS'required'
p61061
I01
sS'group_name'
p61062
Nsa(dp61063
S'description'
p61064
g3
sS'cpp_type'
p61065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61066
sS'default'
p61067
S'ComputeCappedWeakInclinedPlaneStress'
p61068
sS'name'
p61069
S'type'
p61070
sS'required'
p61071
I00
sS'group_name'
p61072
Nsa(dp61073
S'description'
p61074
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p61075
sS'cpp_type'
p61076
S'bool'
p61077
sS'default'
p61078
S'0'
p61079
sS'name'
p61080
S'warn_about_precision_loss'
p61081
sS'required'
p61082
I00
sS'group_name'
p61083
Nsa(dp61084
S'description'
p61085
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p61086
sS'cpp_type'
p61087
S'double'
p61088
sS'default'
p61089
g3
sS'name'
p61090
S'yield_function_tol'
p61091
sS'required'
p61092
I01
sS'group_name'
p61093
NsasS'name'
p61094
S'/Materials/ComputeCappedWeakInclinedPlaneStress'
p61095
sa(dp61096
S'description'
p61097
S'Capped weak-plane plasticity Cosserat stress calculator\n'
p61098
sS'subblocks'
p61099
NsS'parameters'
p61100
(lp61101
(dp61102
S'description'
p61103
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61104
sS'cpp_type'
p61105
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61106
sS'default'
p61107
g3
sS'name'
p61108
S'base_name'
p61109
sS'required'
p61110
I00
sS'group_name'
p61111
Nsa(dp61112
S'description'
p61113
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61114
sS'cpp_type'
p61115
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61116
sS'default'
p61117
g3
sS'name'
p61118
S'block'
p61119
sS'required'
p61120
I00
sS'group_name'
p61121
Nsa(dp61122
S'description'
p61123
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61124
sS'cpp_type'
p61125
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61126
sS'default'
p61127
g3
sS'name'
p61128
S'boundary'
p61129
sS'required'
p61130
I00
sS'group_name'
p61131
Nsa(dp61132
S'description'
p61133
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p61134
sS'cpp_type'
p61135
S'UserObjectName'
p61136
sS'default'
p61137
g3
sS'name'
p61138
S'cohesion'
p61139
sS'required'
p61140
I01
sS'group_name'
p61141
Nsa(dp61142
S'description'
p61143
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n'
p61144
sS'cpp_type'
p61145
S'UserObjectName'
p61146
sS'default'
p61147
g3
sS'name'
p61148
S'compressive_strength'
p61149
sS'required'
p61150
I01
sS'group_name'
p61151
Nsa(dp61152
S'description'
p61153
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61154
sS'cpp_type'
p61155
S'bool'
p61156
sS'default'
p61157
S'1'
p61158
sS'name'
p61159
S'compute'
p61160
sS'required'
p61161
I00
sS'group_name'
p61162
Nsa(dp61163
S'description'
p61164
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61165
sS'cpp_type'
p61166
S'bool'
p61167
sS'default'
p61168
S'0'
p61169
sS'name'
p61170
S'constant_on_elem'
p61171
sS'required'
p61172
I00
sS'group_name'
p61173
S'Advanced'
p61174
sa(dp61175
S'description'
p61176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61177
sS'cpp_type'
p61178
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61179
sS'default'
p61180
g3
sS'name'
p61181
S'control_tags'
p61182
sS'required'
p61183
I00
sS'group_name'
p61184
S'Advanced'
p61185
sa(dp61186
S'description'
p61187
S'Set the enabled status of the MooseObject.\n'
p61188
sS'cpp_type'
p61189
S'bool'
p61190
sS'default'
p61191
S'1'
p61192
sS'name'
p61193
S'enable'
p61194
sS'required'
p61195
I00
sS'group_name'
p61196
S'Advanced'
p61197
sa(dp61198
S'description'
p61199
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61200
sS'cpp_type'
p61201
S'bool'
p61202
sS'default'
p61203
S'1'
p61204
sS'name'
p61205
S'implicit'
p61206
sS'required'
p61207
I00
sS'group_name'
p61208
S'Advanced'
p61209
sa(dp61210
S'description'
p61211
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p61212
sS'cpp_type'
p61213
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p61214
sS'default'
p61215
g3
sS'name'
p61216
S'initial_stress'
p61217
sS'required'
p61218
I00
sS'group_name'
p61219
Nsa(dp61220
S'description'
p61221
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p61222
sS'cpp_type'
p61223
S'unsigned int'
p61224
sS'default'
p61225
S'20'
p61226
sS'name'
p61227
S'max_NR_iterations'
p61228
sS'required'
p61229
I00
sS'group_name'
p61230
Nsa(dp61231
S'description'
p61232
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p61233
sS'cpp_type'
p61234
S'double'
p61235
sS'default'
p61236
S'1'
p61237
sS'name'
p61238
S'min_step_size'
p61239
sS'required'
p61240
I00
sS'group_name'
p61241
Nsa(dp61242
S'description'
p61243
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61244
sS'cpp_type'
p61245
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61246
sS'default'
p61247
g3
sS'name'
p61248
S'output_properties'
p61249
sS'required'
p61250
I00
sS'group_name'
p61251
S'Outputs'
p61252
sa(dp61253
S'description'
p61254
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61255
sS'cpp_type'
p61256
S'std::vector<OutputName, std::allocator<OutputName> >'
p61257
sS'default'
p61258
S'none'
p61259
sS'name'
p61260
S'outputs'
p61261
sS'required'
p61262
I00
sS'group_name'
p61263
S'Outputs'
p61264
sa(dp61265
S'description'
p61266
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p61267
sS'cpp_type'
p61268
S'bool'
p61269
sS'default'
p61270
S'1'
p61271
sS'name'
p61272
S'perfect_guess'
p61273
sS'required'
p61274
I00
sS'group_name'
p61275
Nsa(dp61276
S'description'
p61277
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p61278
sS'cpp_type'
p61279
S'bool'
p61280
sS'default'
p61281
S'0'
p61282
sS'name'
p61283
S'perform_finite_strain_rotations'
p61284
sS'required'
p61285
I00
sS'group_name'
p61286
Nsa(dp61287
S'description'
p61288
S'The seed for the master random number generator\n'
p61289
sS'cpp_type'
p61290
S'unsigned int'
p61291
sS'default'
p61292
S'0'
p61293
sS'name'
p61294
S'seed'
p61295
sS'required'
p61296
I00
sS'group_name'
p61297
S'Advanced'
p61298
sa(dp61299
S'description'
p61300
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p61301
sS'cpp_type'
p61302
S'double'
p61303
sS'default'
p61304
g3
sS'name'
p61305
S'smoothing_tol'
p61306
sS'required'
p61307
I01
sS'group_name'
p61308
Nsa(dp61309
S'description'
p61310
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p61311
sS'cpp_type'
p61312
S'bool'
p61313
sS'default'
p61314
S'0'
p61315
sS'name'
p61316
S'store_stress_old'
p61317
sS'required'
p61318
I00
sS'group_name'
p61319
Nsa(dp61320
S'description'
p61321
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p61322
sS'cpp_type'
p61323
S'UserObjectName'
p61324
sS'default'
p61325
g3
sS'name'
p61326
S'tan_dilation_angle'
p61327
sS'required'
p61328
I01
sS'group_name'
p61329
Nsa(dp61330
S'description'
p61331
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p61332
sS'cpp_type'
p61333
S'UserObjectName'
p61334
sS'default'
p61335
g3
sS'name'
p61336
S'tan_friction_angle'
p61337
sS'required'
p61338
I01
sS'group_name'
p61339
Nsa(dp61340
S'name'
p61341
S'tangent_operator'
p61342
sS'cpp_type'
p61343
S'MooseEnum'
p61344
sS'default'
p61345
S'nonlinear'
p61346
sS'description'
p61347
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p61348
sS'required'
p61349
I00
sS'options'
p61350
S'elastic nonlinear'
p61351
sS'group_name'
p61352
Nsa(dp61353
S'description'
p61354
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p61355
sS'cpp_type'
p61356
S'UserObjectName'
p61357
sS'default'
p61358
g3
sS'name'
p61359
S'tensile_strength'
p61360
sS'required'
p61361
I01
sS'group_name'
p61362
Nsa(dp61363
S'description'
p61364
S'The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p61365
sS'cpp_type'
p61366
S'double'
p61367
sS'default'
p61368
g3
sS'name'
p61369
S'tip_smoother'
p61370
sS'required'
p61371
I01
sS'group_name'
p61372
Nsa(dp61373
S'description'
p61374
g3
sS'cpp_type'
p61375
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61376
sS'default'
p61377
S'ComputeCappedWeakPlaneCosseratStress'
p61378
sS'name'
p61379
S'type'
p61380
sS'required'
p61381
I00
sS'group_name'
p61382
Nsa(dp61383
S'description'
p61384
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p61385
sS'cpp_type'
p61386
S'bool'
p61387
sS'default'
p61388
S'0'
p61389
sS'name'
p61390
S'warn_about_precision_loss'
p61391
sS'required'
p61392
I00
sS'group_name'
p61393
Nsa(dp61394
S'description'
p61395
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p61396
sS'cpp_type'
p61397
S'double'
p61398
sS'default'
p61399
g3
sS'name'
p61400
S'yield_function_tol'
p61401
sS'required'
p61402
I01
sS'group_name'
p61403
NsasS'name'
p61404
S'/Materials/ComputeCappedWeakPlaneCosseratStress'
p61405
sa(dp61406
S'description'
p61407
S'Capped weak-plane plasticity stress calculator\n'
p61408
sS'subblocks'
p61409
NsS'parameters'
p61410
(lp61411
(dp61412
S'description'
p61413
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61414
sS'cpp_type'
p61415
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61416
sS'default'
p61417
g3
sS'name'
p61418
S'base_name'
p61419
sS'required'
p61420
I00
sS'group_name'
p61421
Nsa(dp61422
S'description'
p61423
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61424
sS'cpp_type'
p61425
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61426
sS'default'
p61427
g3
sS'name'
p61428
S'block'
p61429
sS'required'
p61430
I00
sS'group_name'
p61431
Nsa(dp61432
S'description'
p61433
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61434
sS'cpp_type'
p61435
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61436
sS'default'
p61437
g3
sS'name'
p61438
S'boundary'
p61439
sS'required'
p61440
I00
sS'group_name'
p61441
Nsa(dp61442
S'description'
p61443
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p61444
sS'cpp_type'
p61445
S'UserObjectName'
p61446
sS'default'
p61447
g3
sS'name'
p61448
S'cohesion'
p61449
sS'required'
p61450
I01
sS'group_name'
p61451
Nsa(dp61452
S'description'
p61453
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n'
p61454
sS'cpp_type'
p61455
S'UserObjectName'
p61456
sS'default'
p61457
g3
sS'name'
p61458
S'compressive_strength'
p61459
sS'required'
p61460
I01
sS'group_name'
p61461
Nsa(dp61462
S'description'
p61463
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61464
sS'cpp_type'
p61465
S'bool'
p61466
sS'default'
p61467
S'1'
p61468
sS'name'
p61469
S'compute'
p61470
sS'required'
p61471
I00
sS'group_name'
p61472
Nsa(dp61473
S'description'
p61474
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61475
sS'cpp_type'
p61476
S'bool'
p61477
sS'default'
p61478
S'0'
p61479
sS'name'
p61480
S'constant_on_elem'
p61481
sS'required'
p61482
I00
sS'group_name'
p61483
S'Advanced'
p61484
sa(dp61485
S'description'
p61486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61487
sS'cpp_type'
p61488
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61489
sS'default'
p61490
g3
sS'name'
p61491
S'control_tags'
p61492
sS'required'
p61493
I00
sS'group_name'
p61494
S'Advanced'
p61495
sa(dp61496
S'description'
p61497
S'Set the enabled status of the MooseObject.\n'
p61498
sS'cpp_type'
p61499
S'bool'
p61500
sS'default'
p61501
S'1'
p61502
sS'name'
p61503
S'enable'
p61504
sS'required'
p61505
I00
sS'group_name'
p61506
S'Advanced'
p61507
sa(dp61508
S'description'
p61509
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61510
sS'cpp_type'
p61511
S'bool'
p61512
sS'default'
p61513
S'1'
p61514
sS'name'
p61515
S'implicit'
p61516
sS'required'
p61517
I00
sS'group_name'
p61518
S'Advanced'
p61519
sa(dp61520
S'description'
p61521
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p61522
sS'cpp_type'
p61523
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p61524
sS'default'
p61525
g3
sS'name'
p61526
S'initial_stress'
p61527
sS'required'
p61528
I00
sS'group_name'
p61529
Nsa(dp61530
S'description'
p61531
S'Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n'
p61532
sS'cpp_type'
p61533
S'unsigned int'
p61534
sS'default'
p61535
S'20'
p61536
sS'name'
p61537
S'max_NR_iterations'
p61538
sS'required'
p61539
I00
sS'group_name'
p61540
Nsa(dp61541
S'description'
p61542
S"In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose's nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n"
p61543
sS'cpp_type'
p61544
S'double'
p61545
sS'default'
p61546
S'1'
p61547
sS'name'
p61548
S'min_step_size'
p61549
sS'required'
p61550
I00
sS'group_name'
p61551
Nsa(dp61552
S'description'
p61553
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61554
sS'cpp_type'
p61555
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61556
sS'default'
p61557
g3
sS'name'
p61558
S'output_properties'
p61559
sS'required'
p61560
I00
sS'group_name'
p61561
S'Outputs'
p61562
sa(dp61563
S'description'
p61564
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61565
sS'cpp_type'
p61566
S'std::vector<OutputName, std::allocator<OutputName> >'
p61567
sS'default'
p61568
S'none'
p61569
sS'name'
p61570
S'outputs'
p61571
sS'required'
p61572
I00
sS'group_name'
p61573
S'Outputs'
p61574
sa(dp61575
S'description'
p61576
S'Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n'
p61577
sS'cpp_type'
p61578
S'bool'
p61579
sS'default'
p61580
S'1'
p61581
sS'name'
p61582
S'perfect_guess'
p61583
sS'required'
p61584
I00
sS'group_name'
p61585
Nsa(dp61586
S'description'
p61587
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p61588
sS'cpp_type'
p61589
S'bool'
p61590
sS'default'
p61591
S'0'
p61592
sS'name'
p61593
S'perform_finite_strain_rotations'
p61594
sS'required'
p61595
I00
sS'group_name'
p61596
Nsa(dp61597
S'description'
p61598
S'The seed for the master random number generator\n'
p61599
sS'cpp_type'
p61600
S'unsigned int'
p61601
sS'default'
p61602
S'0'
p61603
sS'name'
p61604
S'seed'
p61605
sS'required'
p61606
I00
sS'group_name'
p61607
S'Advanced'
p61608
sa(dp61609
S'description'
p61610
S'Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n'
p61611
sS'cpp_type'
p61612
S'double'
p61613
sS'default'
p61614
g3
sS'name'
p61615
S'smoothing_tol'
p61616
sS'required'
p61617
I01
sS'group_name'
p61618
Nsa(dp61619
S'description'
p61620
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p61621
sS'cpp_type'
p61622
S'bool'
p61623
sS'default'
p61624
S'0'
p61625
sS'name'
p61626
S'store_stress_old'
p61627
sS'required'
p61628
I00
sS'group_name'
p61629
Nsa(dp61630
S'description'
p61631
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p61632
sS'cpp_type'
p61633
S'UserObjectName'
p61634
sS'default'
p61635
g3
sS'name'
p61636
S'tan_dilation_angle'
p61637
sS'required'
p61638
I01
sS'group_name'
p61639
Nsa(dp61640
S'description'
p61641
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p61642
sS'cpp_type'
p61643
S'UserObjectName'
p61644
sS'default'
p61645
g3
sS'name'
p61646
S'tan_friction_angle'
p61647
sS'required'
p61648
I01
sS'group_name'
p61649
Nsa(dp61650
S'name'
p61651
S'tangent_operator'
p61652
sS'cpp_type'
p61653
S'MooseEnum'
p61654
sS'default'
p61655
S'nonlinear'
p61656
sS'description'
p61657
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'nonlinear': return the full consistent tangent operator.\n"
p61658
sS'required'
p61659
I00
sS'options'
p61660
S'elastic nonlinear'
p61661
sS'group_name'
p61662
Nsa(dp61663
S'description'
p61664
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n'
p61665
sS'cpp_type'
p61666
S'UserObjectName'
p61667
sS'default'
p61668
g3
sS'name'
p61669
S'tensile_strength'
p61670
sS'required'
p61671
I01
sS'group_name'
p61672
Nsa(dp61673
S'description'
p61674
S'The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p61675
sS'cpp_type'
p61676
S'double'
p61677
sS'default'
p61678
g3
sS'name'
p61679
S'tip_smoother'
p61680
sS'required'
p61681
I01
sS'group_name'
p61682
Nsa(dp61683
S'description'
p61684
g3
sS'cpp_type'
p61685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61686
sS'default'
p61687
S'ComputeCappedWeakPlaneStress'
p61688
sS'name'
p61689
S'type'
p61690
sS'required'
p61691
I00
sS'group_name'
p61692
Nsa(dp61693
S'description'
p61694
S'Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n'
p61695
sS'cpp_type'
p61696
S'bool'
p61697
sS'default'
p61698
S'0'
p61699
sS'name'
p61700
S'warn_about_precision_loss'
p61701
sS'required'
p61702
I00
sS'group_name'
p61703
Nsa(dp61704
S'description'
p61705
S'The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n'
p61706
sS'cpp_type'
p61707
S'double'
p61708
sS'default'
p61709
g3
sS'name'
p61710
S'yield_function_tol'
p61711
sS'required'
p61712
I01
sS'group_name'
p61713
NsasS'name'
p61714
S'/Materials/ComputeCappedWeakPlaneStress'
p61715
sa(dp61716
S'description'
p61717
S'Compute concentration dependent elasticity tensor.\n'
p61718
sS'subblocks'
p61719
NsS'parameters'
p61720
(lp61721
(dp61722
S'description'
p61723
S'Stiffness tensor for zero concentration phase\n'
p61724
sS'cpp_type'
p61725
S'std::vector<double, std::allocator<double> >'
p61726
sS'default'
p61727
g3
sS'name'
p61728
S'C0_ijkl'
p61729
sS'required'
p61730
I01
sS'group_name'
p61731
Nsa(dp61732
S'description'
p61733
S'Stiffness tensor for phase having concentration 1.0\n'
p61734
sS'cpp_type'
p61735
S'std::vector<double, std::allocator<double> >'
p61736
sS'default'
p61737
g3
sS'name'
p61738
S'C1_ijkl'
p61739
sS'required'
p61740
I01
sS'group_name'
p61741
Nsa(dp61742
S'description'
p61743
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61744
sS'cpp_type'
p61745
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61746
sS'default'
p61747
g3
sS'name'
p61748
S'base_name'
p61749
sS'required'
p61750
I00
sS'group_name'
p61751
Nsa(dp61752
S'description'
p61753
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61754
sS'cpp_type'
p61755
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61756
sS'default'
p61757
g3
sS'name'
p61758
S'block'
p61759
sS'required'
p61760
I00
sS'group_name'
p61761
Nsa(dp61762
S'description'
p61763
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p61764
sS'cpp_type'
p61765
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p61766
sS'default'
p61767
g3
sS'name'
p61768
S'boundary'
p61769
sS'required'
p61770
I00
sS'group_name'
p61771
Nsa(dp61772
S'description'
p61773
S'Concentration\n'
p61774
sS'cpp_type'
p61775
S'std::vector<VariableName>'
p61776
sS'default'
p61777
g3
sS'name'
p61778
S'c'
p61779
sS'required'
p61780
I01
sS'group_name'
p61781
Nsa(dp61782
S'description'
p61783
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p61784
sS'cpp_type'
p61785
S'bool'
p61786
sS'default'
p61787
S'1'
p61788
sS'name'
p61789
S'compute'
p61790
sS'required'
p61791
I00
sS'group_name'
p61792
Nsa(dp61793
S'description'
p61794
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p61795
sS'cpp_type'
p61796
S'bool'
p61797
sS'default'
p61798
S'0'
p61799
sS'name'
p61800
S'constant_on_elem'
p61801
sS'required'
p61802
I00
sS'group_name'
p61803
S'Advanced'
p61804
sa(dp61805
S'description'
p61806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61807
sS'cpp_type'
p61808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61809
sS'default'
p61810
g3
sS'name'
p61811
S'control_tags'
p61812
sS'required'
p61813
I00
sS'group_name'
p61814
S'Advanced'
p61815
sa(dp61816
S'description'
p61817
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p61818
sS'cpp_type'
p61819
S'FunctionName'
p61820
sS'default'
p61821
g3
sS'name'
p61822
S'elasticity_tensor_prefactor'
p61823
sS'required'
p61824
I00
sS'group_name'
p61825
Nsa(dp61826
S'description'
p61827
S'Set the enabled status of the MooseObject.\n'
p61828
sS'cpp_type'
p61829
S'bool'
p61830
sS'default'
p61831
S'1'
p61832
sS'name'
p61833
S'enable'
p61834
sS'required'
p61835
I00
sS'group_name'
p61836
S'Advanced'
p61837
sa(dp61838
S'description'
p61839
S'Euler angle in direction 1\n'
p61840
sS'cpp_type'
p61841
S'double'
p61842
sS'default'
p61843
S'0'
p61844
sS'name'
p61845
S'euler_angle_1'
p61846
sS'required'
p61847
I00
sS'group_name'
p61848
Nsa(dp61849
S'description'
p61850
S'Euler angle in direction 2\n'
p61851
sS'cpp_type'
p61852
S'double'
p61853
sS'default'
p61854
S'0'
p61855
sS'name'
p61856
S'euler_angle_2'
p61857
sS'required'
p61858
I00
sS'group_name'
p61859
Nsa(dp61860
S'description'
p61861
S'Euler angle in direction 3\n'
p61862
sS'cpp_type'
p61863
S'double'
p61864
sS'default'
p61865
S'0'
p61866
sS'name'
p61867
S'euler_angle_3'
p61868
sS'required'
p61869
I00
sS'group_name'
p61870
Nsa(dp61871
S'name'
p61872
S'fill_method0'
p61873
sS'cpp_type'
p61874
S'MooseEnum'
p61875
sS'default'
p61876
S'symmetric9'
p61877
sS'description'
p61878
S'The fill method\n'
p61879
sS'required'
p61880
I00
sS'options'
p61881
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p61882
sS'group_name'
p61883
Nsa(dp61884
S'name'
p61885
S'fill_method1'
p61886
sS'cpp_type'
p61887
S'MooseEnum'
p61888
sS'default'
p61889
S'symmetric9'
p61890
sS'description'
p61891
S'The fill method\n'
p61892
sS'required'
p61893
I00
sS'options'
p61894
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p61895
sS'group_name'
p61896
Nsa(dp61897
S'description'
p61898
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61899
sS'cpp_type'
p61900
S'bool'
p61901
sS'default'
p61902
S'1'
p61903
sS'name'
p61904
S'implicit'
p61905
sS'required'
p61906
I00
sS'group_name'
p61907
S'Advanced'
p61908
sa(dp61909
S'description'
p61910
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p61911
sS'cpp_type'
p61912
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61913
sS'default'
p61914
g3
sS'name'
p61915
S'output_properties'
p61916
sS'required'
p61917
I00
sS'group_name'
p61918
S'Outputs'
p61919
sa(dp61920
S'description'
p61921
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p61922
sS'cpp_type'
p61923
S'std::vector<OutputName, std::allocator<OutputName> >'
p61924
sS'default'
p61925
S'none'
p61926
sS'name'
p61927
S'outputs'
p61928
sS'required'
p61929
I00
sS'group_name'
p61930
S'Outputs'
p61931
sa(dp61932
S'description'
p61933
S'The seed for the master random number generator\n'
p61934
sS'cpp_type'
p61935
S'unsigned int'
p61936
sS'default'
p61937
S'0'
p61938
sS'name'
p61939
S'seed'
p61940
sS'required'
p61941
I00
sS'group_name'
p61942
S'Advanced'
p61943
sa(dp61944
S'description'
p61945
g3
sS'cpp_type'
p61946
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61947
sS'default'
p61948
S'ComputeConcentrationDependentElasticityTensor'
p61949
sS'name'
p61950
S'type'
p61951
sS'required'
p61952
I00
sS'group_name'
p61953
Nsa(dp61954
S'description'
p61955
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61956
sS'cpp_type'
p61957
S'bool'
p61958
sS'default'
p61959
S'0'
p61960
sS'name'
p61961
S'use_displaced_mesh'
p61962
sS'required'
p61963
I00
sS'group_name'
p61964
S'Advanced'
p61965
sasS'name'
p61966
S'/Materials/ComputeConcentrationDependentElasticityTensor'
p61967
sa(dp61968
S'description'
p61969
S'Compute Cosserat elasticity and flexural bending rigidity tensors\n'
p61970
sS'subblocks'
p61971
NsS'parameters'
p61972
(lp61973
(dp61974
S'description'
p61975
S'Flexural bending rigidity tensor.\n'
p61976
sS'cpp_type'
p61977
S'std::vector<double, std::allocator<double> >'
p61978
sS'default'
p61979
g3
sS'name'
p61980
S'B_ijkl'
p61981
sS'required'
p61982
I01
sS'group_name'
p61983
Nsa(dp61984
S'description'
p61985
S'Elastic stiffness tensor for material\n'
p61986
sS'cpp_type'
p61987
S'std::vector<double, std::allocator<double> >'
p61988
sS'default'
p61989
g3
sS'name'
p61990
S'E_ijkl'
p61991
sS'required'
p61992
I01
sS'group_name'
p61993
Nsa(dp61994
S'description'
p61995
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p61996
sS'cpp_type'
p61997
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61998
sS'default'
p61999
g3
sS'name'
p62000
S'base_name'
p62001
sS'required'
p62002
I00
sS'group_name'
p62003
Nsa(dp62004
S'description'
p62005
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62006
sS'cpp_type'
p62007
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62008
sS'default'
p62009
g3
sS'name'
p62010
S'block'
p62011
sS'required'
p62012
I00
sS'group_name'
p62013
Nsa(dp62014
S'description'
p62015
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62016
sS'cpp_type'
p62017
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62018
sS'default'
p62019
g3
sS'name'
p62020
S'boundary'
p62021
sS'required'
p62022
I00
sS'group_name'
p62023
Nsa(dp62024
S'description'
p62025
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62026
sS'cpp_type'
p62027
S'bool'
p62028
sS'default'
p62029
S'1'
p62030
sS'name'
p62031
S'compute'
p62032
sS'required'
p62033
I00
sS'group_name'
p62034
Nsa(dp62035
S'description'
p62036
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62037
sS'cpp_type'
p62038
S'bool'
p62039
sS'default'
p62040
S'0'
p62041
sS'name'
p62042
S'constant_on_elem'
p62043
sS'required'
p62044
I00
sS'group_name'
p62045
S'Advanced'
p62046
sa(dp62047
S'description'
p62048
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62049
sS'cpp_type'
p62050
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62051
sS'default'
p62052
g3
sS'name'
p62053
S'control_tags'
p62054
sS'required'
p62055
I00
sS'group_name'
p62056
S'Advanced'
p62057
sa(dp62058
S'description'
p62059
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p62060
sS'cpp_type'
p62061
S'FunctionName'
p62062
sS'default'
p62063
g3
sS'name'
p62064
S'elasticity_tensor_prefactor'
p62065
sS'required'
p62066
I00
sS'group_name'
p62067
Nsa(dp62068
S'description'
p62069
S'Set the enabled status of the MooseObject.\n'
p62070
sS'cpp_type'
p62071
S'bool'
p62072
sS'default'
p62073
S'1'
p62074
sS'name'
p62075
S'enable'
p62076
sS'required'
p62077
I00
sS'group_name'
p62078
S'Advanced'
p62079
sa(dp62080
S'name'
p62081
S'fill_method'
p62082
sS'cpp_type'
p62083
S'MooseEnum'
p62084
sS'default'
p62085
S'symmetric9'
p62086
sS'description'
p62087
S'The fill method\n'
p62088
sS'required'
p62089
I00
sS'options'
p62090
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p62091
sS'group_name'
p62092
Nsa(dp62093
S'name'
p62094
S'fill_method_bending'
p62095
sS'cpp_type'
p62096
S'MooseEnum'
p62097
sS'default'
p62098
S'antisymmetric_isotropic'
p62099
sS'description'
p62100
S"The fill method for the 'bending' tensor.\n"
p62101
sS'required'
p62102
I00
sS'options'
p62103
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p62104
sS'group_name'
p62105
Nsa(dp62106
S'description'
p62107
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62108
sS'cpp_type'
p62109
S'bool'
p62110
sS'default'
p62111
S'1'
p62112
sS'name'
p62113
S'implicit'
p62114
sS'required'
p62115
I00
sS'group_name'
p62116
S'Advanced'
p62117
sa(dp62118
S'description'
p62119
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62120
sS'cpp_type'
p62121
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62122
sS'default'
p62123
g3
sS'name'
p62124
S'output_properties'
p62125
sS'required'
p62126
I00
sS'group_name'
p62127
S'Outputs'
p62128
sa(dp62129
S'description'
p62130
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62131
sS'cpp_type'
p62132
S'std::vector<OutputName, std::allocator<OutputName> >'
p62133
sS'default'
p62134
S'none'
p62135
sS'name'
p62136
S'outputs'
p62137
sS'required'
p62138
I00
sS'group_name'
p62139
S'Outputs'
p62140
sa(dp62141
S'description'
p62142
S'The seed for the master random number generator\n'
p62143
sS'cpp_type'
p62144
S'unsigned int'
p62145
sS'default'
p62146
S'0'
p62147
sS'name'
p62148
S'seed'
p62149
sS'required'
p62150
I00
sS'group_name'
p62151
S'Advanced'
p62152
sa(dp62153
S'description'
p62154
g3
sS'cpp_type'
p62155
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62156
sS'default'
p62157
S'ComputeCosseratElasticityTensor'
p62158
sS'name'
p62159
S'type'
p62160
sS'required'
p62161
I00
sS'group_name'
p62162
Nsa(dp62163
S'description'
p62164
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62165
sS'cpp_type'
p62166
S'bool'
p62167
sS'default'
p62168
S'0'
p62169
sS'name'
p62170
S'use_displaced_mesh'
p62171
sS'required'
p62172
I00
sS'group_name'
p62173
S'Advanced'
p62174
sasS'name'
p62175
S'/Materials/ComputeCosseratElasticityTensor'
p62176
sa(dp62177
S'description'
p62178
S'Compute incremental small Cosserat strains\n'
p62179
sS'subblocks'
p62180
NsS'parameters'
p62181
(lp62182
(dp62183
S'description'
p62184
S'The 3 Cosserat rotation variables\n'
p62185
sS'cpp_type'
p62186
S'std::vector<VariableName>'
p62187
sS'default'
p62188
g3
sS'name'
p62189
S'Cosserat_rotations'
p62190
sS'required'
p62191
I01
sS'group_name'
p62192
Nsa(dp62193
S'description'
p62194
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62195
sS'cpp_type'
p62196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62197
sS'default'
p62198
g3
sS'name'
p62199
S'base_name'
p62200
sS'required'
p62201
I00
sS'group_name'
p62202
Nsa(dp62203
S'description'
p62204
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62205
sS'cpp_type'
p62206
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62207
sS'default'
p62208
g3
sS'name'
p62209
S'block'
p62210
sS'required'
p62211
I00
sS'group_name'
p62212
Nsa(dp62213
S'description'
p62214
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62215
sS'cpp_type'
p62216
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62217
sS'default'
p62218
g3
sS'name'
p62219
S'boundary'
p62220
sS'required'
p62221
I00
sS'group_name'
p62222
Nsa(dp62223
S'description'
p62224
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62225
sS'cpp_type'
p62226
S'bool'
p62227
sS'default'
p62228
S'1'
p62229
sS'name'
p62230
S'compute'
p62231
sS'required'
p62232
I00
sS'group_name'
p62233
Nsa(dp62234
S'description'
p62235
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62236
sS'cpp_type'
p62237
S'bool'
p62238
sS'default'
p62239
S'0'
p62240
sS'name'
p62241
S'constant_on_elem'
p62242
sS'required'
p62243
I00
sS'group_name'
p62244
S'Advanced'
p62245
sa(dp62246
S'description'
p62247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62248
sS'cpp_type'
p62249
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62250
sS'default'
p62251
g3
sS'name'
p62252
S'control_tags'
p62253
sS'required'
p62254
I00
sS'group_name'
p62255
S'Advanced'
p62256
sa(dp62257
S'description'
p62258
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p62259
sS'cpp_type'
p62260
S'std::vector<VariableName>'
p62261
sS'default'
p62262
g3
sS'name'
p62263
S'displacements'
p62264
sS'required'
p62265
I01
sS'group_name'
p62266
Nsa(dp62267
S'description'
p62268
S'List of eigenstrains to be applied in this strain calculation\n'
p62269
sS'cpp_type'
p62270
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p62271
sS'default'
p62272
g3
sS'name'
p62273
S'eigenstrain_names'
p62274
sS'required'
p62275
I00
sS'group_name'
p62276
Nsa(dp62277
S'description'
p62278
S'Set the enabled status of the MooseObject.\n'
p62279
sS'cpp_type'
p62280
S'bool'
p62281
sS'default'
p62282
S'1'
p62283
sS'name'
p62284
S'enable'
p62285
sS'required'
p62286
I00
sS'group_name'
p62287
S'Advanced'
p62288
sa(dp62289
S'description'
p62290
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62291
sS'cpp_type'
p62292
S'bool'
p62293
sS'default'
p62294
S'1'
p62295
sS'name'
p62296
S'implicit'
p62297
sS'required'
p62298
I00
sS'group_name'
p62299
S'Advanced'
p62300
sa(dp62301
S'description'
p62302
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62303
sS'cpp_type'
p62304
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62305
sS'default'
p62306
g3
sS'name'
p62307
S'output_properties'
p62308
sS'required'
p62309
I00
sS'group_name'
p62310
S'Outputs'
p62311
sa(dp62312
S'description'
p62313
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62314
sS'cpp_type'
p62315
S'std::vector<OutputName, std::allocator<OutputName> >'
p62316
sS'default'
p62317
S'none'
p62318
sS'name'
p62319
S'outputs'
p62320
sS'required'
p62321
I00
sS'group_name'
p62322
S'Outputs'
p62323
sa(dp62324
S'description'
p62325
S'The seed for the master random number generator\n'
p62326
sS'cpp_type'
p62327
S'unsigned int'
p62328
sS'default'
p62329
S'0'
p62330
sS'name'
p62331
S'seed'
p62332
sS'required'
p62333
I00
sS'group_name'
p62334
S'Advanced'
p62335
sa(dp62336
S'description'
p62337
g3
sS'cpp_type'
p62338
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62339
sS'default'
p62340
S'ComputeCosseratIncrementalSmallStrain'
p62341
sS'name'
p62342
S'type'
p62343
sS'required'
p62344
I00
sS'group_name'
p62345
Nsa(dp62346
S'description'
p62347
S'Flag to correct volumetric locking\n'
p62348
sS'cpp_type'
p62349
S'bool'
p62350
sS'default'
p62351
S'0'
p62352
sS'name'
p62353
S'volumetric_locking_correction'
p62354
sS'required'
p62355
I00
sS'group_name'
p62356
NsasS'name'
p62357
S'/Materials/ComputeCosseratIncrementalSmallStrain'
p62358
sa(dp62359
S'description'
p62360
S'Compute Cosserat stress and couple-stress elasticity for small strains\n'
p62361
sS'subblocks'
p62362
NsS'parameters'
p62363
(lp62364
(dp62365
S'description'
p62366
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62367
sS'cpp_type'
p62368
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62369
sS'default'
p62370
g3
sS'name'
p62371
S'base_name'
p62372
sS'required'
p62373
I00
sS'group_name'
p62374
Nsa(dp62375
S'description'
p62376
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62377
sS'cpp_type'
p62378
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62379
sS'default'
p62380
g3
sS'name'
p62381
S'block'
p62382
sS'required'
p62383
I00
sS'group_name'
p62384
Nsa(dp62385
S'description'
p62386
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62387
sS'cpp_type'
p62388
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62389
sS'default'
p62390
g3
sS'name'
p62391
S'boundary'
p62392
sS'required'
p62393
I00
sS'group_name'
p62394
Nsa(dp62395
S'description'
p62396
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62397
sS'cpp_type'
p62398
S'bool'
p62399
sS'default'
p62400
S'1'
p62401
sS'name'
p62402
S'compute'
p62403
sS'required'
p62404
I00
sS'group_name'
p62405
Nsa(dp62406
S'description'
p62407
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62408
sS'cpp_type'
p62409
S'bool'
p62410
sS'default'
p62411
S'0'
p62412
sS'name'
p62413
S'constant_on_elem'
p62414
sS'required'
p62415
I00
sS'group_name'
p62416
S'Advanced'
p62417
sa(dp62418
S'description'
p62419
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62420
sS'cpp_type'
p62421
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62422
sS'default'
p62423
g3
sS'name'
p62424
S'control_tags'
p62425
sS'required'
p62426
I00
sS'group_name'
p62427
S'Advanced'
p62428
sa(dp62429
S'description'
p62430
S'Set the enabled status of the MooseObject.\n'
p62431
sS'cpp_type'
p62432
S'bool'
p62433
sS'default'
p62434
S'1'
p62435
sS'name'
p62436
S'enable'
p62437
sS'required'
p62438
I00
sS'group_name'
p62439
S'Advanced'
p62440
sa(dp62441
S'description'
p62442
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62443
sS'cpp_type'
p62444
S'bool'
p62445
sS'default'
p62446
S'1'
p62447
sS'name'
p62448
S'implicit'
p62449
sS'required'
p62450
I00
sS'group_name'
p62451
S'Advanced'
p62452
sa(dp62453
S'description'
p62454
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p62455
sS'cpp_type'
p62456
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p62457
sS'default'
p62458
g3
sS'name'
p62459
S'initial_stress'
p62460
sS'required'
p62461
I00
sS'group_name'
p62462
Nsa(dp62463
S'description'
p62464
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62465
sS'cpp_type'
p62466
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62467
sS'default'
p62468
g3
sS'name'
p62469
S'output_properties'
p62470
sS'required'
p62471
I00
sS'group_name'
p62472
S'Outputs'
p62473
sa(dp62474
S'description'
p62475
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62476
sS'cpp_type'
p62477
S'std::vector<OutputName, std::allocator<OutputName> >'
p62478
sS'default'
p62479
S'none'
p62480
sS'name'
p62481
S'outputs'
p62482
sS'required'
p62483
I00
sS'group_name'
p62484
S'Outputs'
p62485
sa(dp62486
S'description'
p62487
S'The seed for the master random number generator\n'
p62488
sS'cpp_type'
p62489
S'unsigned int'
p62490
sS'default'
p62491
S'0'
p62492
sS'name'
p62493
S'seed'
p62494
sS'required'
p62495
I00
sS'group_name'
p62496
S'Advanced'
p62497
sa(dp62498
S'description'
p62499
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p62500
sS'cpp_type'
p62501
S'bool'
p62502
sS'default'
p62503
S'0'
p62504
sS'name'
p62505
S'store_stress_old'
p62506
sS'required'
p62507
I00
sS'group_name'
p62508
Nsa(dp62509
S'description'
p62510
g3
sS'cpp_type'
p62511
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62512
sS'default'
p62513
S'ComputeCosseratLinearElasticStress'
p62514
sS'name'
p62515
S'type'
p62516
sS'required'
p62517
I00
sS'group_name'
p62518
NsasS'name'
p62519
S'/Materials/ComputeCosseratLinearElasticStress'
p62520
sa(dp62521
S'description'
p62522
S'Compute small Cosserat strains\n'
p62523
sS'subblocks'
p62524
NsS'parameters'
p62525
(lp62526
(dp62527
S'description'
p62528
S'The 3 Cosserat rotation variables\n'
p62529
sS'cpp_type'
p62530
S'std::vector<VariableName>'
p62531
sS'default'
p62532
g3
sS'name'
p62533
S'Cosserat_rotations'
p62534
sS'required'
p62535
I01
sS'group_name'
p62536
Nsa(dp62537
S'description'
p62538
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62539
sS'cpp_type'
p62540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62541
sS'default'
p62542
g3
sS'name'
p62543
S'base_name'
p62544
sS'required'
p62545
I00
sS'group_name'
p62546
Nsa(dp62547
S'description'
p62548
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62549
sS'cpp_type'
p62550
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62551
sS'default'
p62552
g3
sS'name'
p62553
S'block'
p62554
sS'required'
p62555
I00
sS'group_name'
p62556
Nsa(dp62557
S'description'
p62558
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62559
sS'cpp_type'
p62560
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62561
sS'default'
p62562
g3
sS'name'
p62563
S'boundary'
p62564
sS'required'
p62565
I00
sS'group_name'
p62566
Nsa(dp62567
S'description'
p62568
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62569
sS'cpp_type'
p62570
S'bool'
p62571
sS'default'
p62572
S'1'
p62573
sS'name'
p62574
S'compute'
p62575
sS'required'
p62576
I00
sS'group_name'
p62577
Nsa(dp62578
S'description'
p62579
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62580
sS'cpp_type'
p62581
S'bool'
p62582
sS'default'
p62583
S'0'
p62584
sS'name'
p62585
S'constant_on_elem'
p62586
sS'required'
p62587
I00
sS'group_name'
p62588
S'Advanced'
p62589
sa(dp62590
S'description'
p62591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62592
sS'cpp_type'
p62593
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62594
sS'default'
p62595
g3
sS'name'
p62596
S'control_tags'
p62597
sS'required'
p62598
I00
sS'group_name'
p62599
S'Advanced'
p62600
sa(dp62601
S'description'
p62602
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p62603
sS'cpp_type'
p62604
S'std::vector<VariableName>'
p62605
sS'default'
p62606
g3
sS'name'
p62607
S'displacements'
p62608
sS'required'
p62609
I01
sS'group_name'
p62610
Nsa(dp62611
S'description'
p62612
S'List of eigenstrains to be applied in this strain calculation\n'
p62613
sS'cpp_type'
p62614
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p62615
sS'default'
p62616
g3
sS'name'
p62617
S'eigenstrain_names'
p62618
sS'required'
p62619
I00
sS'group_name'
p62620
Nsa(dp62621
S'description'
p62622
S'Set the enabled status of the MooseObject.\n'
p62623
sS'cpp_type'
p62624
S'bool'
p62625
sS'default'
p62626
S'1'
p62627
sS'name'
p62628
S'enable'
p62629
sS'required'
p62630
I00
sS'group_name'
p62631
S'Advanced'
p62632
sa(dp62633
S'description'
p62634
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62635
sS'cpp_type'
p62636
S'bool'
p62637
sS'default'
p62638
S'1'
p62639
sS'name'
p62640
S'implicit'
p62641
sS'required'
p62642
I00
sS'group_name'
p62643
S'Advanced'
p62644
sa(dp62645
S'description'
p62646
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62647
sS'cpp_type'
p62648
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62649
sS'default'
p62650
g3
sS'name'
p62651
S'output_properties'
p62652
sS'required'
p62653
I00
sS'group_name'
p62654
S'Outputs'
p62655
sa(dp62656
S'description'
p62657
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62658
sS'cpp_type'
p62659
S'std::vector<OutputName, std::allocator<OutputName> >'
p62660
sS'default'
p62661
S'none'
p62662
sS'name'
p62663
S'outputs'
p62664
sS'required'
p62665
I00
sS'group_name'
p62666
S'Outputs'
p62667
sa(dp62668
S'description'
p62669
S'The seed for the master random number generator\n'
p62670
sS'cpp_type'
p62671
S'unsigned int'
p62672
sS'default'
p62673
S'0'
p62674
sS'name'
p62675
S'seed'
p62676
sS'required'
p62677
I00
sS'group_name'
p62678
S'Advanced'
p62679
sa(dp62680
S'description'
p62681
g3
sS'cpp_type'
p62682
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62683
sS'default'
p62684
S'ComputeCosseratSmallStrain'
p62685
sS'name'
p62686
S'type'
p62687
sS'required'
p62688
I00
sS'group_name'
p62689
Nsa(dp62690
S'description'
p62691
S'Flag to correct volumetric locking\n'
p62692
sS'cpp_type'
p62693
S'bool'
p62694
sS'default'
p62695
S'0'
p62696
sS'name'
p62697
S'volumetric_locking_correction'
p62698
sS'required'
p62699
I00
sS'group_name'
p62700
NsasS'name'
p62701
S'/Materials/ComputeCosseratSmallStrain'
p62702
sa(dp62703
S'description'
p62704
S'Computes stress based on lagrangian strain\n'
p62705
sS'subblocks'
p62706
NsS'parameters'
p62707
(lp62708
(dp62709
S'description'
p62710
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62711
sS'cpp_type'
p62712
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62713
sS'default'
p62714
g3
sS'name'
p62715
S'block'
p62716
sS'required'
p62717
I00
sS'group_name'
p62718
Nsa(dp62719
S'description'
p62720
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62721
sS'cpp_type'
p62722
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62723
sS'default'
p62724
g3
sS'name'
p62725
S'boundary'
p62726
sS'required'
p62727
I00
sS'group_name'
p62728
Nsa(dp62729
S'description'
p62730
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62731
sS'cpp_type'
p62732
S'bool'
p62733
sS'default'
p62734
S'1'
p62735
sS'name'
p62736
S'compute'
p62737
sS'required'
p62738
I00
sS'group_name'
p62739
Nsa(dp62740
S'description'
p62741
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62742
sS'cpp_type'
p62743
S'bool'
p62744
sS'default'
p62745
S'0'
p62746
sS'name'
p62747
S'constant_on_elem'
p62748
sS'required'
p62749
I00
sS'group_name'
p62750
S'Advanced'
p62751
sa(dp62752
S'description'
p62753
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62754
sS'cpp_type'
p62755
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62756
sS'default'
p62757
g3
sS'name'
p62758
S'control_tags'
p62759
sS'required'
p62760
I00
sS'group_name'
p62761
S'Advanced'
p62762
sa(dp62763
S'description'
p62764
S'Name of deformation gradient variable\n'
p62765
sS'cpp_type'
p62766
S'MaterialPropertyName'
p62767
sS'default'
p62768
g3
sS'name'
p62769
S'deform_grad_name'
p62770
sS'required'
p62771
I01
sS'group_name'
p62772
Nsa(dp62773
S'description'
p62774
S'Name of elasticity tensor variable\n'
p62775
sS'cpp_type'
p62776
S'MaterialPropertyName'
p62777
sS'default'
p62778
g3
sS'name'
p62779
S'elasticity_tensor_name'
p62780
sS'required'
p62781
I01
sS'group_name'
p62782
Nsa(dp62783
S'description'
p62784
S'Set the enabled status of the MooseObject.\n'
p62785
sS'cpp_type'
p62786
S'bool'
p62787
sS'default'
p62788
S'1'
p62789
sS'name'
p62790
S'enable'
p62791
sS'required'
p62792
I00
sS'group_name'
p62793
S'Advanced'
p62794
sa(dp62795
S'description'
p62796
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62797
sS'cpp_type'
p62798
S'bool'
p62799
sS'default'
p62800
S'1'
p62801
sS'name'
p62802
S'implicit'
p62803
sS'required'
p62804
I00
sS'group_name'
p62805
S'Advanced'
p62806
sa(dp62807
S'description'
p62808
S'Name of jacobian variable\n'
p62809
sS'cpp_type'
p62810
S'MaterialPropertyName'
p62811
sS'default'
p62812
g3
sS'name'
p62813
S'jacobian_name'
p62814
sS'required'
p62815
I01
sS'group_name'
p62816
Nsa(dp62817
S'description'
p62818
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p62819
sS'cpp_type'
p62820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62821
sS'default'
p62822
g3
sS'name'
p62823
S'output_properties'
p62824
sS'required'
p62825
I00
sS'group_name'
p62826
S'Outputs'
p62827
sa(dp62828
S'description'
p62829
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p62830
sS'cpp_type'
p62831
S'std::vector<OutputName, std::allocator<OutputName> >'
p62832
sS'default'
p62833
S'none'
p62834
sS'name'
p62835
S'outputs'
p62836
sS'required'
p62837
I00
sS'group_name'
p62838
S'Outputs'
p62839
sa(dp62840
S'description'
p62841
S'The seed for the master random number generator\n'
p62842
sS'cpp_type'
p62843
S'unsigned int'
p62844
sS'default'
p62845
S'0'
p62846
sS'name'
p62847
S'seed'
p62848
sS'required'
p62849
I00
sS'group_name'
p62850
S'Advanced'
p62851
sa(dp62852
S'description'
p62853
S'Name of stress variable\n'
p62854
sS'cpp_type'
p62855
S'MaterialPropertyName'
p62856
sS'default'
p62857
g3
sS'name'
p62858
S'stress_name'
p62859
sS'required'
p62860
I01
sS'group_name'
p62861
Nsa(dp62862
S'description'
p62863
g3
sS'cpp_type'
p62864
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62865
sS'default'
p62866
S'ComputeDeformGradBasedStress'
p62867
sS'name'
p62868
S'type'
p62869
sS'required'
p62870
I00
sS'group_name'
p62871
Nsa(dp62872
S'description'
p62873
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62874
sS'cpp_type'
p62875
S'bool'
p62876
sS'default'
p62877
S'0'
p62878
sS'name'
p62879
S'use_displaced_mesh'
p62880
sS'required'
p62881
I00
sS'group_name'
p62882
S'Advanced'
p62883
sasS'name'
p62884
S'/Materials/ComputeDeformGradBasedStress'
p62885
sa(dp62886
S'description'
p62887
S'Computes a constant Eigenstrain\n'
p62888
sS'subblocks'
p62889
NsS'parameters'
p62890
(lp62891
(dp62892
S'description'
p62893
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p62894
sS'cpp_type'
p62895
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62896
sS'default'
p62897
g3
sS'name'
p62898
S'base_name'
p62899
sS'required'
p62900
I00
sS'group_name'
p62901
Nsa(dp62902
S'description'
p62903
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62904
sS'cpp_type'
p62905
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62906
sS'default'
p62907
g3
sS'name'
p62908
S'block'
p62909
sS'required'
p62910
I00
sS'group_name'
p62911
Nsa(dp62912
S'description'
p62913
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p62914
sS'cpp_type'
p62915
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p62916
sS'default'
p62917
g3
sS'name'
p62918
S'boundary'
p62919
sS'required'
p62920
I00
sS'group_name'
p62921
Nsa(dp62922
S'description'
p62923
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p62924
sS'cpp_type'
p62925
S'bool'
p62926
sS'default'
p62927
S'1'
p62928
sS'name'
p62929
S'compute'
p62930
sS'required'
p62931
I00
sS'group_name'
p62932
Nsa(dp62933
S'description'
p62934
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p62935
sS'cpp_type'
p62936
S'bool'
p62937
sS'default'
p62938
S'0'
p62939
sS'name'
p62940
S'constant_on_elem'
p62941
sS'required'
p62942
I00
sS'group_name'
p62943
S'Advanced'
p62944
sa(dp62945
S'description'
p62946
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62947
sS'cpp_type'
p62948
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62949
sS'default'
p62950
g3
sS'name'
p62951
S'control_tags'
p62952
sS'required'
p62953
I00
sS'group_name'
p62954
S'Advanced'
p62955
sa(dp62956
S'description'
p62957
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p62958
sS'cpp_type'
p62959
S'std::vector<double, std::allocator<double> >'
p62960
sS'default'
p62961
g3
sS'name'
p62962
S'eigen_base'
p62963
sS'required'
p62964
I01
sS'group_name'
p62965
Nsa(dp62966
S'description'
p62967
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p62968
sS'cpp_type'
p62969
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62970
sS'default'
p62971
g3
sS'name'
p62972
S'eigenstrain_name'
p62973
sS'required'
p62974
I01
sS'group_name'
p62975
Nsa(dp62976
S'description'
p62977
S'Set the enabled status of the MooseObject.\n'
p62978
sS'cpp_type'
p62979
S'bool'
p62980
sS'default'
p62981
S'1'
p62982
sS'name'
p62983
S'enable'
p62984
sS'required'
p62985
I00
sS'group_name'
p62986
S'Advanced'
p62987
sa(dp62988
S'description'
p62989
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62990
sS'cpp_type'
p62991
S'bool'
p62992
sS'default'
p62993
S'1'
p62994
sS'name'
p62995
S'implicit'
p62996
sS'required'
p62997
I00
sS'group_name'
p62998
S'Advanced'
p62999
sa(dp63000
S'description'
p63001
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p63002
sS'cpp_type'
p63003
S'bool'
p63004
sS'default'
p63005
S'0'
p63006
sS'name'
p63007
S'incremental_form'
p63008
sS'required'
p63009
I00
sS'group_name'
p63010
Nsa(dp63011
S'description'
p63012
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63013
sS'cpp_type'
p63014
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63015
sS'default'
p63016
g3
sS'name'
p63017
S'output_properties'
p63018
sS'required'
p63019
I00
sS'group_name'
p63020
S'Outputs'
p63021
sa(dp63022
S'description'
p63023
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63024
sS'cpp_type'
p63025
S'std::vector<OutputName, std::allocator<OutputName> >'
p63026
sS'default'
p63027
S'none'
p63028
sS'name'
p63029
S'outputs'
p63030
sS'required'
p63031
I00
sS'group_name'
p63032
S'Outputs'
p63033
sa(dp63034
S'description'
p63035
S'Name of material defining the variable dependence\n'
p63036
sS'cpp_type'
p63037
S'MaterialPropertyName'
p63038
sS'default'
p63039
S'1'
p63040
sS'name'
p63041
S'prefactor'
p63042
sS'required'
p63043
I00
sS'group_name'
p63044
Nsa(dp63045
S'description'
p63046
S'The seed for the master random number generator\n'
p63047
sS'cpp_type'
p63048
S'unsigned int'
p63049
sS'default'
p63050
S'0'
p63051
sS'name'
p63052
S'seed'
p63053
sS'required'
p63054
I00
sS'group_name'
p63055
S'Advanced'
p63056
sa(dp63057
S'description'
p63058
g3
sS'cpp_type'
p63059
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63060
sS'default'
p63061
S'ComputeEigenstrain'
p63062
sS'name'
p63063
S'type'
p63064
sS'required'
p63065
I00
sS'group_name'
p63066
Nsa(dp63067
S'description'
p63068
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63069
sS'cpp_type'
p63070
S'bool'
p63071
sS'default'
p63072
S'0'
p63073
sS'name'
p63074
S'use_displaced_mesh'
p63075
sS'required'
p63076
I00
sS'group_name'
p63077
S'Advanced'
p63078
sasS'name'
p63079
S'/Materials/ComputeEigenstrain'
p63080
sa(dp63081
S'description'
p63082
S'Compute stress using elasticity for finite strains\n'
p63083
sS'subblocks'
p63084
NsS'parameters'
p63085
(lp63086
(dp63087
S'description'
p63088
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p63089
sS'cpp_type'
p63090
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p63091
sS'default'
p63092
g3
sS'name'
p63093
S'active_crack_planes'
p63094
sS'required'
p63095
I00
sS'group_name'
p63096
Nsa(dp63097
S'description'
p63098
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63099
sS'cpp_type'
p63100
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63101
sS'default'
p63102
g3
sS'name'
p63103
S'base_name'
p63104
sS'required'
p63105
I00
sS'group_name'
p63106
Nsa(dp63107
S'description'
p63108
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63109
sS'cpp_type'
p63110
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63111
sS'default'
p63112
g3
sS'name'
p63113
S'block'
p63114
sS'required'
p63115
I00
sS'group_name'
p63116
Nsa(dp63117
S'description'
p63118
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63119
sS'cpp_type'
p63120
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63121
sS'default'
p63122
g3
sS'name'
p63123
S'boundary'
p63124
sS'required'
p63125
I00
sS'group_name'
p63126
Nsa(dp63127
S'description'
p63128
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63129
sS'cpp_type'
p63130
S'bool'
p63131
sS'default'
p63132
S'1'
p63133
sS'name'
p63134
S'compute'
p63135
sS'required'
p63136
I00
sS'group_name'
p63137
Nsa(dp63138
S'description'
p63139
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63140
sS'cpp_type'
p63141
S'bool'
p63142
sS'default'
p63143
S'0'
p63144
sS'name'
p63145
S'constant_on_elem'
p63146
sS'required'
p63147
I00
sS'group_name'
p63148
S'Advanced'
p63149
sa(dp63150
S'description'
p63151
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63152
sS'cpp_type'
p63153
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63154
sS'default'
p63155
g3
sS'name'
p63156
S'control_tags'
p63157
sS'required'
p63158
I00
sS'group_name'
p63159
S'Advanced'
p63160
sa(dp63161
S'description'
p63162
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p63163
sS'cpp_type'
p63164
S'double'
p63165
sS'default'
p63166
S'0'
p63167
sS'name'
p63168
S'cracking_neg_fraction'
p63169
sS'required'
p63170
I00
sS'group_name'
p63171
Nsa(dp63172
S'description'
p63173
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p63174
sS'cpp_type'
p63175
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63176
sS'default'
p63177
S'abrupt'
p63178
sS'name'
p63179
S'cracking_release'
p63180
sS'required'
p63181
I00
sS'group_name'
p63182
Nsa(dp63183
S'description'
p63184
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p63185
sS'cpp_type'
p63186
S'double'
p63187
sS'default'
p63188
S'0'
p63189
sS'name'
p63190
S'cracking_residual_stress'
p63191
sS'required'
p63192
I00
sS'group_name'
p63193
Nsa(dp63194
S'description'
p63195
S'The stress threshold beyond which cracking occurs. Negative values prevent cracking.\n'
p63196
sS'cpp_type'
p63197
S'FunctionName'
p63198
sS'default'
p63199
g3
sS'name'
p63200
S'cracking_stress'
p63201
sS'required'
p63202
I01
sS'group_name'
p63203
Nsa(dp63204
S'description'
p63205
S'Set the enabled status of the MooseObject.\n'
p63206
sS'cpp_type'
p63207
S'bool'
p63208
sS'default'
p63209
S'1'
p63210
sS'name'
p63211
S'enable'
p63212
sS'required'
p63213
I00
sS'group_name'
p63214
S'Advanced'
p63215
sa(dp63216
S'description'
p63217
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63218
sS'cpp_type'
p63219
S'bool'
p63220
sS'default'
p63221
S'1'
p63222
sS'name'
p63223
S'implicit'
p63224
sS'required'
p63225
I00
sS'group_name'
p63226
S'Advanced'
p63227
sa(dp63228
S'description'
p63229
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p63230
sS'cpp_type'
p63231
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p63232
sS'default'
p63233
g3
sS'name'
p63234
S'initial_stress'
p63235
sS'required'
p63236
I00
sS'group_name'
p63237
Nsa(dp63238
S'description'
p63239
S'The maximum number of cracks allowed at a material point.\n'
p63240
sS'cpp_type'
p63241
S'unsigned int'
p63242
sS'default'
p63243
S'3'
p63244
sS'name'
p63245
S'max_cracks'
p63246
sS'required'
p63247
I00
sS'group_name'
p63248
Nsa(dp63249
S'description'
p63250
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63251
sS'cpp_type'
p63252
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63253
sS'default'
p63254
g3
sS'name'
p63255
S'output_properties'
p63256
sS'required'
p63257
I00
sS'group_name'
p63258
S'Outputs'
p63259
sa(dp63260
S'description'
p63261
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63262
sS'cpp_type'
p63263
S'std::vector<OutputName, std::allocator<OutputName> >'
p63264
sS'default'
p63265
S'none'
p63266
sS'name'
p63267
S'outputs'
p63268
sS'required'
p63269
I00
sS'group_name'
p63270
S'Outputs'
p63271
sa(dp63272
S'description'
p63273
S'The seed for the master random number generator\n'
p63274
sS'cpp_type'
p63275
S'unsigned int'
p63276
sS'default'
p63277
S'0'
p63278
sS'name'
p63279
S'seed'
p63280
sS'required'
p63281
I00
sS'group_name'
p63282
S'Advanced'
p63283
sa(dp63284
S'description'
p63285
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p63286
sS'cpp_type'
p63287
S'bool'
p63288
sS'default'
p63289
S'0'
p63290
sS'name'
p63291
S'store_stress_old'
p63292
sS'required'
p63293
I00
sS'group_name'
p63294
Nsa(dp63295
S'description'
p63296
g3
sS'cpp_type'
p63297
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63298
sS'default'
p63299
S'ComputeElasticSmearedCrackingStress'
p63300
sS'name'
p63301
S'type'
p63302
sS'required'
p63303
I00
sS'group_name'
p63304
NsasS'name'
p63305
S'/Materials/ComputeElasticSmearedCrackingStress'
p63306
sa(dp63307
S'description'
p63308
S'Compute an elasticity tensor.\n'
p63309
sS'subblocks'
p63310
NsS'parameters'
p63311
(lp63312
(dp63313
S'description'
p63314
S'Stiffness tensor for material\n'
p63315
sS'cpp_type'
p63316
S'std::vector<double, std::allocator<double> >'
p63317
sS'default'
p63318
g3
sS'name'
p63319
S'C_ijkl'
p63320
sS'required'
p63321
I01
sS'group_name'
p63322
Nsa(dp63323
S'description'
p63324
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63325
sS'cpp_type'
p63326
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63327
sS'default'
p63328
g3
sS'name'
p63329
S'base_name'
p63330
sS'required'
p63331
I00
sS'group_name'
p63332
Nsa(dp63333
S'description'
p63334
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63335
sS'cpp_type'
p63336
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63337
sS'default'
p63338
g3
sS'name'
p63339
S'block'
p63340
sS'required'
p63341
I00
sS'group_name'
p63342
Nsa(dp63343
S'description'
p63344
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63345
sS'cpp_type'
p63346
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63347
sS'default'
p63348
g3
sS'name'
p63349
S'boundary'
p63350
sS'required'
p63351
I00
sS'group_name'
p63352
Nsa(dp63353
S'description'
p63354
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63355
sS'cpp_type'
p63356
S'bool'
p63357
sS'default'
p63358
S'1'
p63359
sS'name'
p63360
S'compute'
p63361
sS'required'
p63362
I00
sS'group_name'
p63363
Nsa(dp63364
S'description'
p63365
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63366
sS'cpp_type'
p63367
S'bool'
p63368
sS'default'
p63369
S'0'
p63370
sS'name'
p63371
S'constant_on_elem'
p63372
sS'required'
p63373
I00
sS'group_name'
p63374
S'Advanced'
p63375
sa(dp63376
S'description'
p63377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63378
sS'cpp_type'
p63379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63380
sS'default'
p63381
g3
sS'name'
p63382
S'control_tags'
p63383
sS'required'
p63384
I00
sS'group_name'
p63385
S'Advanced'
p63386
sa(dp63387
S'description'
p63388
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p63389
sS'cpp_type'
p63390
S'FunctionName'
p63391
sS'default'
p63392
g3
sS'name'
p63393
S'elasticity_tensor_prefactor'
p63394
sS'required'
p63395
I00
sS'group_name'
p63396
Nsa(dp63397
S'description'
p63398
S'Set the enabled status of the MooseObject.\n'
p63399
sS'cpp_type'
p63400
S'bool'
p63401
sS'default'
p63402
S'1'
p63403
sS'name'
p63404
S'enable'
p63405
sS'required'
p63406
I00
sS'group_name'
p63407
S'Advanced'
p63408
sa(dp63409
S'description'
p63410
S'Euler angle in direction 1\n'
p63411
sS'cpp_type'
p63412
S'double'
p63413
sS'default'
p63414
S'0'
p63415
sS'name'
p63416
S'euler_angle_1'
p63417
sS'required'
p63418
I00
sS'group_name'
p63419
Nsa(dp63420
S'description'
p63421
S'Euler angle in direction 2\n'
p63422
sS'cpp_type'
p63423
S'double'
p63424
sS'default'
p63425
S'0'
p63426
sS'name'
p63427
S'euler_angle_2'
p63428
sS'required'
p63429
I00
sS'group_name'
p63430
Nsa(dp63431
S'description'
p63432
S'Euler angle in direction 3\n'
p63433
sS'cpp_type'
p63434
S'double'
p63435
sS'default'
p63436
S'0'
p63437
sS'name'
p63438
S'euler_angle_3'
p63439
sS'required'
p63440
I00
sS'group_name'
p63441
Nsa(dp63442
S'name'
p63443
S'fill_method'
p63444
sS'cpp_type'
p63445
S'MooseEnum'
p63446
sS'default'
p63447
S'symmetric9'
p63448
sS'description'
p63449
S'The fill method\n'
p63450
sS'required'
p63451
I00
sS'options'
p63452
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p63453
sS'group_name'
p63454
Nsa(dp63455
S'description'
p63456
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63457
sS'cpp_type'
p63458
S'bool'
p63459
sS'default'
p63460
S'1'
p63461
sS'name'
p63462
S'implicit'
p63463
sS'required'
p63464
I00
sS'group_name'
p63465
S'Advanced'
p63466
sa(dp63467
S'description'
p63468
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63469
sS'cpp_type'
p63470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63471
sS'default'
p63472
g3
sS'name'
p63473
S'output_properties'
p63474
sS'required'
p63475
I00
sS'group_name'
p63476
S'Outputs'
p63477
sa(dp63478
S'description'
p63479
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63480
sS'cpp_type'
p63481
S'std::vector<OutputName, std::allocator<OutputName> >'
p63482
sS'default'
p63483
S'none'
p63484
sS'name'
p63485
S'outputs'
p63486
sS'required'
p63487
I00
sS'group_name'
p63488
S'Outputs'
p63489
sa(dp63490
S'description'
p63491
S'The seed for the master random number generator\n'
p63492
sS'cpp_type'
p63493
S'unsigned int'
p63494
sS'default'
p63495
S'0'
p63496
sS'name'
p63497
S'seed'
p63498
sS'required'
p63499
I00
sS'group_name'
p63500
S'Advanced'
p63501
sa(dp63502
S'description'
p63503
g3
sS'cpp_type'
p63504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63505
sS'default'
p63506
S'ComputeElasticityTensor'
p63507
sS'name'
p63508
S'type'
p63509
sS'required'
p63510
I00
sS'group_name'
p63511
Nsa(dp63512
S'description'
p63513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63514
sS'cpp_type'
p63515
S'bool'
p63516
sS'default'
p63517
S'0'
p63518
sS'name'
p63519
S'use_displaced_mesh'
p63520
sS'required'
p63521
I00
sS'group_name'
p63522
S'Advanced'
p63523
sasS'name'
p63524
S'/Materials/ComputeElasticityTensor'
p63525
sa(dp63526
S'description'
p63527
S'Compute an elasticity tensor for crystal plasticity.\n'
p63528
sS'subblocks'
p63529
NsS'parameters'
p63530
(lp63531
(dp63532
S'description'
p63533
S'Stiffness tensor for material\n'
p63534
sS'cpp_type'
p63535
S'std::vector<double, std::allocator<double> >'
p63536
sS'default'
p63537
g3
sS'name'
p63538
S'C_ijkl'
p63539
sS'required'
p63540
I01
sS'group_name'
p63541
Nsa(dp63542
S'description'
p63543
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63544
sS'cpp_type'
p63545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63546
sS'default'
p63547
g3
sS'name'
p63548
S'base_name'
p63549
sS'required'
p63550
I00
sS'group_name'
p63551
Nsa(dp63552
S'description'
p63553
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63554
sS'cpp_type'
p63555
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63556
sS'default'
p63557
g3
sS'name'
p63558
S'block'
p63559
sS'required'
p63560
I00
sS'group_name'
p63561
Nsa(dp63562
S'description'
p63563
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63564
sS'cpp_type'
p63565
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63566
sS'default'
p63567
g3
sS'name'
p63568
S'boundary'
p63569
sS'required'
p63570
I00
sS'group_name'
p63571
Nsa(dp63572
S'description'
p63573
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63574
sS'cpp_type'
p63575
S'bool'
p63576
sS'default'
p63577
S'1'
p63578
sS'name'
p63579
S'compute'
p63580
sS'required'
p63581
I00
sS'group_name'
p63582
Nsa(dp63583
S'description'
p63584
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63585
sS'cpp_type'
p63586
S'bool'
p63587
sS'default'
p63588
S'0'
p63589
sS'name'
p63590
S'constant_on_elem'
p63591
sS'required'
p63592
I00
sS'group_name'
p63593
S'Advanced'
p63594
sa(dp63595
S'description'
p63596
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63597
sS'cpp_type'
p63598
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63599
sS'default'
p63600
g3
sS'name'
p63601
S'control_tags'
p63602
sS'required'
p63603
I00
sS'group_name'
p63604
S'Advanced'
p63605
sa(dp63606
S'description'
p63607
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p63608
sS'cpp_type'
p63609
S'FunctionName'
p63610
sS'default'
p63611
g3
sS'name'
p63612
S'elasticity_tensor_prefactor'
p63613
sS'required'
p63614
I00
sS'group_name'
p63615
Nsa(dp63616
S'description'
p63617
S'Set the enabled status of the MooseObject.\n'
p63618
sS'cpp_type'
p63619
S'bool'
p63620
sS'default'
p63621
S'1'
p63622
sS'name'
p63623
S'enable'
p63624
sS'required'
p63625
I00
sS'group_name'
p63626
S'Advanced'
p63627
sa(dp63628
S'description'
p63629
S'Euler angle in direction 1\n'
p63630
sS'cpp_type'
p63631
S'double'
p63632
sS'default'
p63633
S'0'
p63634
sS'name'
p63635
S'euler_angle_1'
p63636
sS'required'
p63637
I00
sS'group_name'
p63638
Nsa(dp63639
S'description'
p63640
S'Euler angle in direction 2\n'
p63641
sS'cpp_type'
p63642
S'double'
p63643
sS'default'
p63644
S'0'
p63645
sS'name'
p63646
S'euler_angle_2'
p63647
sS'required'
p63648
I00
sS'group_name'
p63649
Nsa(dp63650
S'description'
p63651
S'Euler angle in direction 3\n'
p63652
sS'cpp_type'
p63653
S'double'
p63654
sS'default'
p63655
S'0'
p63656
sS'name'
p63657
S'euler_angle_3'
p63658
sS'required'
p63659
I00
sS'group_name'
p63660
Nsa(dp63661
S'name'
p63662
S'fill_method'
p63663
sS'cpp_type'
p63664
S'MooseEnum'
p63665
sS'default'
p63666
S'symmetric9'
p63667
sS'description'
p63668
S'The fill method\n'
p63669
sS'required'
p63670
I00
sS'options'
p63671
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p63672
sS'group_name'
p63673
Nsa(dp63674
S'description'
p63675
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63676
sS'cpp_type'
p63677
S'bool'
p63678
sS'default'
p63679
S'1'
p63680
sS'name'
p63681
S'implicit'
p63682
sS'required'
p63683
I00
sS'group_name'
p63684
S'Advanced'
p63685
sa(dp63686
S'description'
p63687
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63688
sS'cpp_type'
p63689
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63690
sS'default'
p63691
g3
sS'name'
p63692
S'output_properties'
p63693
sS'required'
p63694
I00
sS'group_name'
p63695
S'Outputs'
p63696
sa(dp63697
S'description'
p63698
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63699
sS'cpp_type'
p63700
S'std::vector<OutputName, std::allocator<OutputName> >'
p63701
sS'default'
p63702
S'none'
p63703
sS'name'
p63704
S'outputs'
p63705
sS'required'
p63706
I00
sS'group_name'
p63707
S'Outputs'
p63708
sa(dp63709
S'description'
p63710
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p63711
sS'cpp_type'
p63712
S'UserObjectName'
p63713
sS'default'
p63714
g3
sS'name'
p63715
S'read_prop_user_object'
p63716
sS'required'
p63717
I00
sS'group_name'
p63718
Nsa(dp63719
S'description'
p63720
S'The seed for the master random number generator\n'
p63721
sS'cpp_type'
p63722
S'unsigned int'
p63723
sS'default'
p63724
S'0'
p63725
sS'name'
p63726
S'seed'
p63727
sS'required'
p63728
I00
sS'group_name'
p63729
S'Advanced'
p63730
sa(dp63731
S'description'
p63732
g3
sS'cpp_type'
p63733
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63734
sS'default'
p63735
S'ComputeElasticityTensorCP'
p63736
sS'name'
p63737
S'type'
p63738
sS'required'
p63739
I00
sS'group_name'
p63740
Nsa(dp63741
S'description'
p63742
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63743
sS'cpp_type'
p63744
S'bool'
p63745
sS'default'
p63746
S'0'
p63747
sS'name'
p63748
S'use_displaced_mesh'
p63749
sS'required'
p63750
I00
sS'group_name'
p63751
S'Advanced'
p63752
sasS'name'
p63753
S'/Materials/ComputeElasticityTensorCP'
p63754
sa(dp63755
S'description'
p63756
S'Computes a constant extra stress that is added to the stress calculated by the constitutive model\n'
p63757
sS'subblocks'
p63758
NsS'parameters'
p63759
(lp63760
(dp63761
S'description'
p63762
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63763
sS'cpp_type'
p63764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63765
sS'default'
p63766
g3
sS'name'
p63767
S'base_name'
p63768
sS'required'
p63769
I00
sS'group_name'
p63770
Nsa(dp63771
S'description'
p63772
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63773
sS'cpp_type'
p63774
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63775
sS'default'
p63776
g3
sS'name'
p63777
S'block'
p63778
sS'required'
p63779
I00
sS'group_name'
p63780
Nsa(dp63781
S'description'
p63782
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63783
sS'cpp_type'
p63784
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63785
sS'default'
p63786
g3
sS'name'
p63787
S'boundary'
p63788
sS'required'
p63789
I00
sS'group_name'
p63790
Nsa(dp63791
S'description'
p63792
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63793
sS'cpp_type'
p63794
S'bool'
p63795
sS'default'
p63796
S'1'
p63797
sS'name'
p63798
S'compute'
p63799
sS'required'
p63800
I00
sS'group_name'
p63801
Nsa(dp63802
S'description'
p63803
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63804
sS'cpp_type'
p63805
S'bool'
p63806
sS'default'
p63807
S'0'
p63808
sS'name'
p63809
S'constant_on_elem'
p63810
sS'required'
p63811
I00
sS'group_name'
p63812
S'Advanced'
p63813
sa(dp63814
S'description'
p63815
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63816
sS'cpp_type'
p63817
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63818
sS'default'
p63819
g3
sS'name'
p63820
S'control_tags'
p63821
sS'required'
p63822
I00
sS'group_name'
p63823
S'Advanced'
p63824
sa(dp63825
S'description'
p63826
S'Set the enabled status of the MooseObject.\n'
p63827
sS'cpp_type'
p63828
S'bool'
p63829
sS'default'
p63830
S'1'
p63831
sS'name'
p63832
S'enable'
p63833
sS'required'
p63834
I00
sS'group_name'
p63835
S'Advanced'
p63836
sa(dp63837
S'description'
p63838
S'Vector of values defining the constant extra stress to add, in order 11, 22, 33, 23, 13, 12\n'
p63839
sS'cpp_type'
p63840
S'std::vector<double, std::allocator<double> >'
p63841
sS'default'
p63842
g3
sS'name'
p63843
S'extra_stress_tensor'
p63844
sS'required'
p63845
I01
sS'group_name'
p63846
Nsa(dp63847
S'description'
p63848
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63849
sS'cpp_type'
p63850
S'bool'
p63851
sS'default'
p63852
S'1'
p63853
sS'name'
p63854
S'implicit'
p63855
sS'required'
p63856
I00
sS'group_name'
p63857
S'Advanced'
p63858
sa(dp63859
S'description'
p63860
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p63861
sS'cpp_type'
p63862
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63863
sS'default'
p63864
g3
sS'name'
p63865
S'output_properties'
p63866
sS'required'
p63867
I00
sS'group_name'
p63868
S'Outputs'
p63869
sa(dp63870
S'description'
p63871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p63872
sS'cpp_type'
p63873
S'std::vector<OutputName, std::allocator<OutputName> >'
p63874
sS'default'
p63875
S'none'
p63876
sS'name'
p63877
S'outputs'
p63878
sS'required'
p63879
I00
sS'group_name'
p63880
S'Outputs'
p63881
sa(dp63882
S'description'
p63883
S'Name of material defining additional constant prefactor\n'
p63884
sS'cpp_type'
p63885
S'MaterialPropertyName'
p63886
sS'default'
p63887
S'1'
p63888
sS'name'
p63889
S'prefactor'
p63890
sS'required'
p63891
I00
sS'group_name'
p63892
Nsa(dp63893
S'description'
p63894
S'The seed for the master random number generator\n'
p63895
sS'cpp_type'
p63896
S'unsigned int'
p63897
sS'default'
p63898
S'0'
p63899
sS'name'
p63900
S'seed'
p63901
sS'required'
p63902
I00
sS'group_name'
p63903
S'Advanced'
p63904
sa(dp63905
S'description'
p63906
g3
sS'cpp_type'
p63907
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63908
sS'default'
p63909
S'ComputeExtraStressConstant'
p63910
sS'name'
p63911
S'type'
p63912
sS'required'
p63913
I00
sS'group_name'
p63914
Nsa(dp63915
S'description'
p63916
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63917
sS'cpp_type'
p63918
S'bool'
p63919
sS'default'
p63920
S'0'
p63921
sS'name'
p63922
S'use_displaced_mesh'
p63923
sS'required'
p63924
I00
sS'group_name'
p63925
S'Advanced'
p63926
sasS'name'
p63927
S'/Materials/ComputeExtraStressConstant'
p63928
sa(dp63929
S'description'
p63930
S'Compute a strain increment and rotation increment for finite strains.\n'
p63931
sS'subblocks'
p63932
NsS'parameters'
p63933
(lp63934
(dp63935
S'description'
p63936
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p63937
sS'cpp_type'
p63938
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63939
sS'default'
p63940
g3
sS'name'
p63941
S'base_name'
p63942
sS'required'
p63943
I00
sS'group_name'
p63944
Nsa(dp63945
S'description'
p63946
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63947
sS'cpp_type'
p63948
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63949
sS'default'
p63950
g3
sS'name'
p63951
S'block'
p63952
sS'required'
p63953
I00
sS'group_name'
p63954
Nsa(dp63955
S'description'
p63956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p63957
sS'cpp_type'
p63958
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p63959
sS'default'
p63960
g3
sS'name'
p63961
S'boundary'
p63962
sS'required'
p63963
I00
sS'group_name'
p63964
Nsa(dp63965
S'description'
p63966
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p63967
sS'cpp_type'
p63968
S'bool'
p63969
sS'default'
p63970
S'1'
p63971
sS'name'
p63972
S'compute'
p63973
sS'required'
p63974
I00
sS'group_name'
p63975
Nsa(dp63976
S'description'
p63977
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p63978
sS'cpp_type'
p63979
S'bool'
p63980
sS'default'
p63981
S'0'
p63982
sS'name'
p63983
S'constant_on_elem'
p63984
sS'required'
p63985
I00
sS'group_name'
p63986
S'Advanced'
p63987
sa(dp63988
S'description'
p63989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63990
sS'cpp_type'
p63991
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63992
sS'default'
p63993
g3
sS'name'
p63994
S'control_tags'
p63995
sS'required'
p63996
I00
sS'group_name'
p63997
S'Advanced'
p63998
sa(dp63999
S'name'
p64000
S'decomposition_method'
p64001
sS'cpp_type'
p64002
S'MooseEnum'
p64003
sS'default'
p64004
S'TaylorExpansion'
p64005
sS'description'
p64006
S'Methods to calculate the strain and rotation increments\n'
p64007
sS'required'
p64008
I00
sS'options'
p64009
S'TaylorExpansion EigenSolution'
p64010
sS'group_name'
p64011
Nsa(dp64012
S'description'
p64013
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p64014
sS'cpp_type'
p64015
S'std::vector<VariableName>'
p64016
sS'default'
p64017
g3
sS'name'
p64018
S'displacements'
p64019
sS'required'
p64020
I01
sS'group_name'
p64021
Nsa(dp64022
S'description'
p64023
S'List of eigenstrains to be applied in this strain calculation\n'
p64024
sS'cpp_type'
p64025
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p64026
sS'default'
p64027
g3
sS'name'
p64028
S'eigenstrain_names'
p64029
sS'required'
p64030
I00
sS'group_name'
p64031
Nsa(dp64032
S'description'
p64033
S'Set the enabled status of the MooseObject.\n'
p64034
sS'cpp_type'
p64035
S'bool'
p64036
sS'default'
p64037
S'1'
p64038
sS'name'
p64039
S'enable'
p64040
sS'required'
p64041
I00
sS'group_name'
p64042
S'Advanced'
p64043
sa(dp64044
S'description'
p64045
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64046
sS'cpp_type'
p64047
S'bool'
p64048
sS'default'
p64049
S'1'
p64050
sS'name'
p64051
S'implicit'
p64052
sS'required'
p64053
I00
sS'group_name'
p64054
S'Advanced'
p64055
sa(dp64056
S'description'
p64057
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64058
sS'cpp_type'
p64059
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64060
sS'default'
p64061
g3
sS'name'
p64062
S'output_properties'
p64063
sS'required'
p64064
I00
sS'group_name'
p64065
S'Outputs'
p64066
sa(dp64067
S'description'
p64068
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64069
sS'cpp_type'
p64070
S'std::vector<OutputName, std::allocator<OutputName> >'
p64071
sS'default'
p64072
S'none'
p64073
sS'name'
p64074
S'outputs'
p64075
sS'required'
p64076
I00
sS'group_name'
p64077
S'Outputs'
p64078
sa(dp64079
S'description'
p64080
S'The seed for the master random number generator\n'
p64081
sS'cpp_type'
p64082
S'unsigned int'
p64083
sS'default'
p64084
S'0'
p64085
sS'name'
p64086
S'seed'
p64087
sS'required'
p64088
I00
sS'group_name'
p64089
S'Advanced'
p64090
sa(dp64091
S'description'
p64092
g3
sS'cpp_type'
p64093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64094
sS'default'
p64095
S'ComputeFiniteStrain'
p64096
sS'name'
p64097
S'type'
p64098
sS'required'
p64099
I00
sS'group_name'
p64100
Nsa(dp64101
S'description'
p64102
S'Flag to correct volumetric locking\n'
p64103
sS'cpp_type'
p64104
S'bool'
p64105
sS'default'
p64106
S'0'
p64107
sS'name'
p64108
S'volumetric_locking_correction'
p64109
sS'required'
p64110
I00
sS'group_name'
p64111
NsasS'name'
p64112
S'/Materials/ComputeFiniteStrain'
p64113
sa(dp64114
S'description'
p64115
S'Compute stress using elasticity for finite strains\n'
p64116
sS'subblocks'
p64117
NsS'parameters'
p64118
(lp64119
(dp64120
S'description'
p64121
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64122
sS'cpp_type'
p64123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64124
sS'default'
p64125
g3
sS'name'
p64126
S'base_name'
p64127
sS'required'
p64128
I00
sS'group_name'
p64129
Nsa(dp64130
S'description'
p64131
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64132
sS'cpp_type'
p64133
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64134
sS'default'
p64135
g3
sS'name'
p64136
S'block'
p64137
sS'required'
p64138
I00
sS'group_name'
p64139
Nsa(dp64140
S'description'
p64141
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64142
sS'cpp_type'
p64143
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64144
sS'default'
p64145
g3
sS'name'
p64146
S'boundary'
p64147
sS'required'
p64148
I00
sS'group_name'
p64149
Nsa(dp64150
S'description'
p64151
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64152
sS'cpp_type'
p64153
S'bool'
p64154
sS'default'
p64155
S'1'
p64156
sS'name'
p64157
S'compute'
p64158
sS'required'
p64159
I00
sS'group_name'
p64160
Nsa(dp64161
S'description'
p64162
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64163
sS'cpp_type'
p64164
S'bool'
p64165
sS'default'
p64166
S'0'
p64167
sS'name'
p64168
S'constant_on_elem'
p64169
sS'required'
p64170
I00
sS'group_name'
p64171
S'Advanced'
p64172
sa(dp64173
S'description'
p64174
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64175
sS'cpp_type'
p64176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64177
sS'default'
p64178
g3
sS'name'
p64179
S'control_tags'
p64180
sS'required'
p64181
I00
sS'group_name'
p64182
S'Advanced'
p64183
sa(dp64184
S'description'
p64185
S'Set the enabled status of the MooseObject.\n'
p64186
sS'cpp_type'
p64187
S'bool'
p64188
sS'default'
p64189
S'1'
p64190
sS'name'
p64191
S'enable'
p64192
sS'required'
p64193
I00
sS'group_name'
p64194
S'Advanced'
p64195
sa(dp64196
S'description'
p64197
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64198
sS'cpp_type'
p64199
S'bool'
p64200
sS'default'
p64201
S'1'
p64202
sS'name'
p64203
S'implicit'
p64204
sS'required'
p64205
I00
sS'group_name'
p64206
S'Advanced'
p64207
sa(dp64208
S'description'
p64209
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p64210
sS'cpp_type'
p64211
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p64212
sS'default'
p64213
g3
sS'name'
p64214
S'initial_stress'
p64215
sS'required'
p64216
I00
sS'group_name'
p64217
Nsa(dp64218
S'description'
p64219
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64220
sS'cpp_type'
p64221
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64222
sS'default'
p64223
g3
sS'name'
p64224
S'output_properties'
p64225
sS'required'
p64226
I00
sS'group_name'
p64227
S'Outputs'
p64228
sa(dp64229
S'description'
p64230
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64231
sS'cpp_type'
p64232
S'std::vector<OutputName, std::allocator<OutputName> >'
p64233
sS'default'
p64234
S'none'
p64235
sS'name'
p64236
S'outputs'
p64237
sS'required'
p64238
I00
sS'group_name'
p64239
S'Outputs'
p64240
sa(dp64241
S'description'
p64242
S'The seed for the master random number generator\n'
p64243
sS'cpp_type'
p64244
S'unsigned int'
p64245
sS'default'
p64246
S'0'
p64247
sS'name'
p64248
S'seed'
p64249
sS'required'
p64250
I00
sS'group_name'
p64251
S'Advanced'
p64252
sa(dp64253
S'description'
p64254
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p64255
sS'cpp_type'
p64256
S'bool'
p64257
sS'default'
p64258
S'0'
p64259
sS'name'
p64260
S'store_stress_old'
p64261
sS'required'
p64262
I00
sS'group_name'
p64263
Nsa(dp64264
S'description'
p64265
g3
sS'cpp_type'
p64266
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64267
sS'default'
p64268
S'ComputeFiniteStrainElasticStress'
p64269
sS'name'
p64270
S'type'
p64271
sS'required'
p64272
I00
sS'group_name'
p64273
NsasS'name'
p64274
S'/Materials/ComputeFiniteStrainElasticStress'
p64275
sa(dp64276
S'description'
p64277
S'Compute a strain increment and rotation increment for small strains.\n'
p64278
sS'subblocks'
p64279
NsS'parameters'
p64280
(lp64281
(dp64282
S'description'
p64283
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64284
sS'cpp_type'
p64285
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64286
sS'default'
p64287
g3
sS'name'
p64288
S'base_name'
p64289
sS'required'
p64290
I00
sS'group_name'
p64291
Nsa(dp64292
S'description'
p64293
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64294
sS'cpp_type'
p64295
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64296
sS'default'
p64297
g3
sS'name'
p64298
S'block'
p64299
sS'required'
p64300
I00
sS'group_name'
p64301
Nsa(dp64302
S'description'
p64303
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64304
sS'cpp_type'
p64305
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64306
sS'default'
p64307
g3
sS'name'
p64308
S'boundary'
p64309
sS'required'
p64310
I00
sS'group_name'
p64311
Nsa(dp64312
S'description'
p64313
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64314
sS'cpp_type'
p64315
S'bool'
p64316
sS'default'
p64317
S'1'
p64318
sS'name'
p64319
S'compute'
p64320
sS'required'
p64321
I00
sS'group_name'
p64322
Nsa(dp64323
S'description'
p64324
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64325
sS'cpp_type'
p64326
S'bool'
p64327
sS'default'
p64328
S'0'
p64329
sS'name'
p64330
S'constant_on_elem'
p64331
sS'required'
p64332
I00
sS'group_name'
p64333
S'Advanced'
p64334
sa(dp64335
S'description'
p64336
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64337
sS'cpp_type'
p64338
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64339
sS'default'
p64340
g3
sS'name'
p64341
S'control_tags'
p64342
sS'required'
p64343
I00
sS'group_name'
p64344
S'Advanced'
p64345
sa(dp64346
S'description'
p64347
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p64348
sS'cpp_type'
p64349
S'std::vector<VariableName>'
p64350
sS'default'
p64351
g3
sS'name'
p64352
S'displacements'
p64353
sS'required'
p64354
I01
sS'group_name'
p64355
Nsa(dp64356
S'description'
p64357
S'List of eigenstrains to be applied in this strain calculation\n'
p64358
sS'cpp_type'
p64359
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p64360
sS'default'
p64361
g3
sS'name'
p64362
S'eigenstrain_names'
p64363
sS'required'
p64364
I00
sS'group_name'
p64365
Nsa(dp64366
S'description'
p64367
S'Set the enabled status of the MooseObject.\n'
p64368
sS'cpp_type'
p64369
S'bool'
p64370
sS'default'
p64371
S'1'
p64372
sS'name'
p64373
S'enable'
p64374
sS'required'
p64375
I00
sS'group_name'
p64376
S'Advanced'
p64377
sa(dp64378
S'description'
p64379
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64380
sS'cpp_type'
p64381
S'bool'
p64382
sS'default'
p64383
S'1'
p64384
sS'name'
p64385
S'implicit'
p64386
sS'required'
p64387
I00
sS'group_name'
p64388
S'Advanced'
p64389
sa(dp64390
S'description'
p64391
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64392
sS'cpp_type'
p64393
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64394
sS'default'
p64395
g3
sS'name'
p64396
S'output_properties'
p64397
sS'required'
p64398
I00
sS'group_name'
p64399
S'Outputs'
p64400
sa(dp64401
S'description'
p64402
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64403
sS'cpp_type'
p64404
S'std::vector<OutputName, std::allocator<OutputName> >'
p64405
sS'default'
p64406
S'none'
p64407
sS'name'
p64408
S'outputs'
p64409
sS'required'
p64410
I00
sS'group_name'
p64411
S'Outputs'
p64412
sa(dp64413
S'description'
p64414
S'The seed for the master random number generator\n'
p64415
sS'cpp_type'
p64416
S'unsigned int'
p64417
sS'default'
p64418
S'0'
p64419
sS'name'
p64420
S'seed'
p64421
sS'required'
p64422
I00
sS'group_name'
p64423
S'Advanced'
p64424
sa(dp64425
S'description'
p64426
g3
sS'cpp_type'
p64427
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64428
sS'default'
p64429
S'ComputeIncrementalSmallStrain'
p64430
sS'name'
p64431
S'type'
p64432
sS'required'
p64433
I00
sS'group_name'
p64434
Nsa(dp64435
S'description'
p64436
S'Flag to correct volumetric locking\n'
p64437
sS'cpp_type'
p64438
S'bool'
p64439
sS'default'
p64440
S'0'
p64441
sS'name'
p64442
S'volumetric_locking_correction'
p64443
sS'required'
p64444
I00
sS'group_name'
p64445
NsasS'name'
p64446
S'/Materials/ComputeIncrementalSmallStrain'
p64447
sa(dp64448
S'description'
p64449
S'Computes eigenstrain due to thermal expansion using a function that describes the instantaneous thermal expansion as a function of temperature\n'
p64450
sS'subblocks'
p64451
NsS'parameters'
p64452
(lp64453
(dp64454
S'description'
p64455
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64456
sS'cpp_type'
p64457
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64458
sS'default'
p64459
g3
sS'name'
p64460
S'base_name'
p64461
sS'required'
p64462
I00
sS'group_name'
p64463
Nsa(dp64464
S'description'
p64465
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64466
sS'cpp_type'
p64467
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64468
sS'default'
p64469
g3
sS'name'
p64470
S'block'
p64471
sS'required'
p64472
I00
sS'group_name'
p64473
Nsa(dp64474
S'description'
p64475
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64476
sS'cpp_type'
p64477
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64478
sS'default'
p64479
g3
sS'name'
p64480
S'boundary'
p64481
sS'required'
p64482
I00
sS'group_name'
p64483
Nsa(dp64484
S'description'
p64485
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64486
sS'cpp_type'
p64487
S'bool'
p64488
sS'default'
p64489
S'1'
p64490
sS'name'
p64491
S'compute'
p64492
sS'required'
p64493
I00
sS'group_name'
p64494
Nsa(dp64495
S'description'
p64496
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64497
sS'cpp_type'
p64498
S'bool'
p64499
sS'default'
p64500
S'0'
p64501
sS'name'
p64502
S'constant_on_elem'
p64503
sS'required'
p64504
I00
sS'group_name'
p64505
S'Advanced'
p64506
sa(dp64507
S'description'
p64508
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64509
sS'cpp_type'
p64510
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64511
sS'default'
p64512
g3
sS'name'
p64513
S'control_tags'
p64514
sS'required'
p64515
I00
sS'group_name'
p64516
S'Advanced'
p64517
sa(dp64518
S'description'
p64519
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p64520
sS'cpp_type'
p64521
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64522
sS'default'
p64523
g3
sS'name'
p64524
S'eigenstrain_name'
p64525
sS'required'
p64526
I01
sS'group_name'
p64527
Nsa(dp64528
S'description'
p64529
S'Set the enabled status of the MooseObject.\n'
p64530
sS'cpp_type'
p64531
S'bool'
p64532
sS'default'
p64533
S'1'
p64534
sS'name'
p64535
S'enable'
p64536
sS'required'
p64537
I00
sS'group_name'
p64538
S'Advanced'
p64539
sa(dp64540
S'description'
p64541
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64542
sS'cpp_type'
p64543
S'bool'
p64544
sS'default'
p64545
S'1'
p64546
sS'name'
p64547
S'implicit'
p64548
sS'required'
p64549
I00
sS'group_name'
p64550
S'Advanced'
p64551
sa(dp64552
S'description'
p64553
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p64554
sS'cpp_type'
p64555
S'bool'
p64556
sS'default'
p64557
S'1'
p64558
sS'name'
p64559
S'incremental_form'
p64560
sS'required'
p64561
I00
sS'group_name'
p64562
Nsa(dp64563
S'description'
p64564
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64565
sS'cpp_type'
p64566
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64567
sS'default'
p64568
g3
sS'name'
p64569
S'output_properties'
p64570
sS'required'
p64571
I00
sS'group_name'
p64572
S'Outputs'
p64573
sa(dp64574
S'description'
p64575
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64576
sS'cpp_type'
p64577
S'std::vector<OutputName, std::allocator<OutputName> >'
p64578
sS'default'
p64579
S'none'
p64580
sS'name'
p64581
S'outputs'
p64582
sS'required'
p64583
I00
sS'group_name'
p64584
S'Outputs'
p64585
sa(dp64586
S'description'
p64587
S'The seed for the master random number generator\n'
p64588
sS'cpp_type'
p64589
S'unsigned int'
p64590
sS'default'
p64591
S'0'
p64592
sS'name'
p64593
S'seed'
p64594
sS'required'
p64595
I00
sS'group_name'
p64596
S'Advanced'
p64597
sa(dp64598
S'description'
p64599
S'Reference temperature for thermal eigenstrain calculation\n'
p64600
sS'cpp_type'
p64601
S'double'
p64602
sS'default'
p64603
g3
sS'name'
p64604
S'stress_free_reference_temperature'
p64605
sS'required'
p64606
I00
sS'group_name'
p64607
Nsa(dp64608
S'description'
p64609
S'Reference temperature for thermal eigenstrain calculation\n'
p64610
sS'cpp_type'
p64611
S'double'
p64612
sS'default'
p64613
g3
sS'name'
p64614
S'stress_free_temperature'
p64615
sS'required'
p64616
I00
sS'group_name'
p64617
Nsa(dp64618
S'description'
p64619
S'Coupled temperature\n'
p64620
sS'cpp_type'
p64621
S'std::vector<VariableName>'
p64622
sS'default'
p64623
g3
sS'name'
p64624
S'temperature'
p64625
sS'required'
p64626
I00
sS'group_name'
p64627
Nsa(dp64628
S'description'
p64629
S'Function describing the instantaneous thermal expansion coefficient as a function of temperature\n'
p64630
sS'cpp_type'
p64631
S'FunctionName'
p64632
sS'default'
p64633
g3
sS'name'
p64634
S'thermal_expansion_function'
p64635
sS'required'
p64636
I01
sS'group_name'
p64637
Nsa(dp64638
S'description'
p64639
g3
sS'cpp_type'
p64640
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64641
sS'default'
p64642
S'ComputeInstantaneousThermalExpansionFunctionEigenstrain'
p64643
sS'name'
p64644
S'type'
p64645
sS'required'
p64646
I00
sS'group_name'
p64647
Nsa(dp64648
S'description'
p64649
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64650
sS'cpp_type'
p64651
S'bool'
p64652
sS'default'
p64653
S'0'
p64654
sS'name'
p64655
S'use_displaced_mesh'
p64656
sS'required'
p64657
I00
sS'group_name'
p64658
S'Advanced'
p64659
sasS'name'
p64660
S'/Materials/ComputeInstantaneousThermalExpansionFunctionEigenstrain'
p64661
sa(dp64662
S'description'
p64663
S'Compute an isotropic elasticity tensor.\n'
p64664
sS'subblocks'
p64665
NsS'parameters'
p64666
(lp64667
(dp64668
S'description'
p64669
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64670
sS'cpp_type'
p64671
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64672
sS'default'
p64673
g3
sS'name'
p64674
S'base_name'
p64675
sS'required'
p64676
I00
sS'group_name'
p64677
Nsa(dp64678
S'description'
p64679
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64680
sS'cpp_type'
p64681
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64682
sS'default'
p64683
g3
sS'name'
p64684
S'block'
p64685
sS'required'
p64686
I00
sS'group_name'
p64687
Nsa(dp64688
S'description'
p64689
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64690
sS'cpp_type'
p64691
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64692
sS'default'
p64693
g3
sS'name'
p64694
S'boundary'
p64695
sS'required'
p64696
I00
sS'group_name'
p64697
Nsa(dp64698
S'description'
p64699
S'The bulk modulus for the material.\n'
p64700
sS'cpp_type'
p64701
S'double'
p64702
sS'default'
p64703
g3
sS'name'
p64704
S'bulk_modulus'
p64705
sS'required'
p64706
I00
sS'group_name'
p64707
Nsa(dp64708
S'description'
p64709
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64710
sS'cpp_type'
p64711
S'bool'
p64712
sS'default'
p64713
S'1'
p64714
sS'name'
p64715
S'compute'
p64716
sS'required'
p64717
I00
sS'group_name'
p64718
Nsa(dp64719
S'description'
p64720
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64721
sS'cpp_type'
p64722
S'bool'
p64723
sS'default'
p64724
S'0'
p64725
sS'name'
p64726
S'constant_on_elem'
p64727
sS'required'
p64728
I00
sS'group_name'
p64729
S'Advanced'
p64730
sa(dp64731
S'description'
p64732
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64733
sS'cpp_type'
p64734
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64735
sS'default'
p64736
g3
sS'name'
p64737
S'control_tags'
p64738
sS'required'
p64739
I00
sS'group_name'
p64740
S'Advanced'
p64741
sa(dp64742
S'description'
p64743
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p64744
sS'cpp_type'
p64745
S'FunctionName'
p64746
sS'default'
p64747
g3
sS'name'
p64748
S'elasticity_tensor_prefactor'
p64749
sS'required'
p64750
I00
sS'group_name'
p64751
Nsa(dp64752
S'description'
p64753
S'Set the enabled status of the MooseObject.\n'
p64754
sS'cpp_type'
p64755
S'bool'
p64756
sS'default'
p64757
S'1'
p64758
sS'name'
p64759
S'enable'
p64760
sS'required'
p64761
I00
sS'group_name'
p64762
S'Advanced'
p64763
sa(dp64764
S'description'
p64765
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64766
sS'cpp_type'
p64767
S'bool'
p64768
sS'default'
p64769
S'1'
p64770
sS'name'
p64771
S'implicit'
p64772
sS'required'
p64773
I00
sS'group_name'
p64774
S'Advanced'
p64775
sa(dp64776
S'description'
p64777
S"Lame's first constant for the material.\n"
p64778
sS'cpp_type'
p64779
S'double'
p64780
sS'default'
p64781
g3
sS'name'
p64782
S'lambda'
p64783
sS'required'
p64784
I00
sS'group_name'
p64785
Nsa(dp64786
S'description'
p64787
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p64788
sS'cpp_type'
p64789
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64790
sS'default'
p64791
g3
sS'name'
p64792
S'output_properties'
p64793
sS'required'
p64794
I00
sS'group_name'
p64795
S'Outputs'
p64796
sa(dp64797
S'description'
p64798
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p64799
sS'cpp_type'
p64800
S'std::vector<OutputName, std::allocator<OutputName> >'
p64801
sS'default'
p64802
S'none'
p64803
sS'name'
p64804
S'outputs'
p64805
sS'required'
p64806
I00
sS'group_name'
p64807
S'Outputs'
p64808
sa(dp64809
S'description'
p64810
S"Poisson's ratio for the material.\n"
p64811
sS'cpp_type'
p64812
S'double'
p64813
sS'default'
p64814
g3
sS'name'
p64815
S'poissons_ratio'
p64816
sS'required'
p64817
I00
sS'group_name'
p64818
Nsa(dp64819
S'description'
p64820
S'The seed for the master random number generator\n'
p64821
sS'cpp_type'
p64822
S'unsigned int'
p64823
sS'default'
p64824
S'0'
p64825
sS'name'
p64826
S'seed'
p64827
sS'required'
p64828
I00
sS'group_name'
p64829
S'Advanced'
p64830
sa(dp64831
S'description'
p64832
S'The shear modulus of the material.\n'
p64833
sS'cpp_type'
p64834
S'double'
p64835
sS'default'
p64836
g3
sS'name'
p64837
S'shear_modulus'
p64838
sS'required'
p64839
I00
sS'group_name'
p64840
Nsa(dp64841
S'description'
p64842
g3
sS'cpp_type'
p64843
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64844
sS'default'
p64845
S'ComputeIsotropicElasticityTensor'
p64846
sS'name'
p64847
S'type'
p64848
sS'required'
p64849
I00
sS'group_name'
p64850
Nsa(dp64851
S'description'
p64852
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64853
sS'cpp_type'
p64854
S'bool'
p64855
sS'default'
p64856
S'0'
p64857
sS'name'
p64858
S'use_displaced_mesh'
p64859
sS'required'
p64860
I00
sS'group_name'
p64861
S'Advanced'
p64862
sa(dp64863
S'description'
p64864
S"Young's modulus of the material.\n"
p64865
sS'cpp_type'
p64866
S'double'
p64867
sS'default'
p64868
g3
sS'name'
p64869
S'youngs_modulus'
p64870
sS'required'
p64871
I00
sS'group_name'
p64872
NsasS'name'
p64873
S'/Materials/ComputeIsotropicElasticityTensor'
p64874
sa(dp64875
S'description'
p64876
S"Computes Cosserat elasticity and flexural bending rigidity tensors relevant for simulations with layered materials.  The layering direction is assumed to be perpendicular to the 'z' direction.\n"
p64877
sS'subblocks'
p64878
NsS'parameters'
p64879
(lp64880
(dp64881
S'description'
p64882
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p64883
sS'cpp_type'
p64884
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64885
sS'default'
p64886
g3
sS'name'
p64887
S'base_name'
p64888
sS'required'
p64889
I00
sS'group_name'
p64890
Nsa(dp64891
S'description'
p64892
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64893
sS'cpp_type'
p64894
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64895
sS'default'
p64896
g3
sS'name'
p64897
S'block'
p64898
sS'required'
p64899
I00
sS'group_name'
p64900
Nsa(dp64901
S'description'
p64902
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p64903
sS'cpp_type'
p64904
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p64905
sS'default'
p64906
g3
sS'name'
p64907
S'boundary'
p64908
sS'required'
p64909
I00
sS'group_name'
p64910
Nsa(dp64911
S'description'
p64912
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p64913
sS'cpp_type'
p64914
S'bool'
p64915
sS'default'
p64916
S'1'
p64917
sS'name'
p64918
S'compute'
p64919
sS'required'
p64920
I00
sS'group_name'
p64921
Nsa(dp64922
S'description'
p64923
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p64924
sS'cpp_type'
p64925
S'bool'
p64926
sS'default'
p64927
S'0'
p64928
sS'name'
p64929
S'constant_on_elem'
p64930
sS'required'
p64931
I00
sS'group_name'
p64932
S'Advanced'
p64933
sa(dp64934
S'description'
p64935
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64936
sS'cpp_type'
p64937
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64938
sS'default'
p64939
g3
sS'name'
p64940
S'control_tags'
p64941
sS'required'
p64942
I00
sS'group_name'
p64943
S'Advanced'
p64944
sa(dp64945
S'description'
p64946
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p64947
sS'cpp_type'
p64948
S'FunctionName'
p64949
sS'default'
p64950
g3
sS'name'
p64951
S'elasticity_tensor_prefactor'
p64952
sS'required'
p64953
I00
sS'group_name'
p64954
Nsa(dp64955
S'description'
p64956
S'Set the enabled status of the MooseObject.\n'
p64957
sS'cpp_type'
p64958
S'bool'
p64959
sS'default'
p64960
S'1'
p64961
sS'name'
p64962
S'enable'
p64963
sS'required'
p64964
I00
sS'group_name'
p64965
S'Advanced'
p64966
sa(dp64967
S'description'
p64968
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64969
sS'cpp_type'
p64970
S'bool'
p64971
sS'default'
p64972
S'1'
p64973
sS'name'
p64974
S'implicit'
p64975
sS'required'
p64976
I00
sS'group_name'
p64977
S'Advanced'
p64978
sa(dp64979
S'description'
p64980
S'The joint normal stiffness\n'
p64981
sS'cpp_type'
p64982
S'double'
p64983
sS'default'
p64984
g3
sS'name'
p64985
S'joint_normal_stiffness'
p64986
sS'required'
p64987
I01
sS'group_name'
p64988
Nsa(dp64989
S'description'
p64990
S'The joint shear stiffness\n'
p64991
sS'cpp_type'
p64992
S'double'
p64993
sS'default'
p64994
g3
sS'name'
p64995
S'joint_shear_stiffness'
p64996
sS'required'
p64997
I01
sS'group_name'
p64998
Nsa(dp64999
S'description'
p65000
S'The layer thickness\n'
p65001
sS'cpp_type'
p65002
S'double'
p65003
sS'default'
p65004
g3
sS'name'
p65005
S'layer_thickness'
p65006
sS'required'
p65007
I01
sS'group_name'
p65008
Nsa(dp65009
S'description'
p65010
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65011
sS'cpp_type'
p65012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65013
sS'default'
p65014
g3
sS'name'
p65015
S'output_properties'
p65016
sS'required'
p65017
I00
sS'group_name'
p65018
S'Outputs'
p65019
sa(dp65020
S'description'
p65021
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65022
sS'cpp_type'
p65023
S'std::vector<OutputName, std::allocator<OutputName> >'
p65024
sS'default'
p65025
S'none'
p65026
sS'name'
p65027
S'outputs'
p65028
sS'required'
p65029
I00
sS'group_name'
p65030
S'Outputs'
p65031
sa(dp65032
S'description'
p65033
S"The Poisson's ratio\n"
p65034
sS'cpp_type'
p65035
S'double'
p65036
sS'default'
p65037
g3
sS'name'
p65038
S'poisson'
p65039
sS'required'
p65040
I01
sS'group_name'
p65041
Nsa(dp65042
S'description'
p65043
S'The seed for the master random number generator\n'
p65044
sS'cpp_type'
p65045
S'unsigned int'
p65046
sS'default'
p65047
S'0'
p65048
sS'name'
p65049
S'seed'
p65050
sS'required'
p65051
I00
sS'group_name'
p65052
S'Advanced'
p65053
sa(dp65054
S'description'
p65055
g3
sS'cpp_type'
p65056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65057
sS'default'
p65058
S'ComputeLayeredCosseratElasticityTensor'
p65059
sS'name'
p65060
S'type'
p65061
sS'required'
p65062
I00
sS'group_name'
p65063
Nsa(dp65064
S'description'
p65065
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65066
sS'cpp_type'
p65067
S'bool'
p65068
sS'default'
p65069
S'0'
p65070
sS'name'
p65071
S'use_displaced_mesh'
p65072
sS'required'
p65073
I00
sS'group_name'
p65074
S'Advanced'
p65075
sa(dp65076
S'description'
p65077
S"The Young's modulus\n"
p65078
sS'cpp_type'
p65079
S'double'
p65080
sS'default'
p65081
g3
sS'name'
p65082
S'young'
p65083
sS'required'
p65084
I01
sS'group_name'
p65085
NsasS'name'
p65086
S'/Materials/ComputeLayeredCosseratElasticityTensor'
p65087
sa(dp65088
S'description'
p65089
S'Phase-field fracture model energy contribution to fracture for elasticity and undamaged stress under compressive strain\n'
p65090
sS'subblocks'
p65091
NsS'parameters'
p65092
(lp65093
(dp65094
S'description'
p65095
S'Name of material property storing the elastic energy\n'
p65096
sS'cpp_type'
p65097
S'MaterialPropertyName'
p65098
sS'default'
p65099
S'E_el'
p65100
sS'name'
p65101
S'F_name'
p65102
sS'required'
p65103
I00
sS'group_name'
p65104
Nsa(dp65105
S'description'
p65106
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65107
sS'cpp_type'
p65108
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65109
sS'default'
p65110
g3
sS'name'
p65111
S'base_name'
p65112
sS'required'
p65113
I00
sS'group_name'
p65114
Nsa(dp65115
S'description'
p65116
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65117
sS'cpp_type'
p65118
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65119
sS'default'
p65120
g3
sS'name'
p65121
S'block'
p65122
sS'required'
p65123
I00
sS'group_name'
p65124
Nsa(dp65125
S'description'
p65126
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65127
sS'cpp_type'
p65128
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65129
sS'default'
p65130
g3
sS'name'
p65131
S'boundary'
p65132
sS'required'
p65133
I00
sS'group_name'
p65134
Nsa(dp65135
S'description'
p65136
S'Order parameter for damage\n'
p65137
sS'cpp_type'
p65138
S'std::vector<VariableName>'
p65139
sS'default'
p65140
g3
sS'name'
p65141
S'c'
p65142
sS'required'
p65143
I01
sS'group_name'
p65144
Nsa(dp65145
S'description'
p65146
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65147
sS'cpp_type'
p65148
S'bool'
p65149
sS'default'
p65150
S'1'
p65151
sS'name'
p65152
S'compute'
p65153
sS'required'
p65154
I00
sS'group_name'
p65155
Nsa(dp65156
S'description'
p65157
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65158
sS'cpp_type'
p65159
S'bool'
p65160
sS'default'
p65161
S'0'
p65162
sS'name'
p65163
S'constant_on_elem'
p65164
sS'required'
p65165
I00
sS'group_name'
p65166
S'Advanced'
p65167
sa(dp65168
S'description'
p65169
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65170
sS'cpp_type'
p65171
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65172
sS'default'
p65173
g3
sS'name'
p65174
S'control_tags'
p65175
sS'required'
p65176
I00
sS'group_name'
p65177
S'Advanced'
p65178
sa(dp65179
S'description'
p65180
S'Set the enabled status of the MooseObject.\n'
p65181
sS'cpp_type'
p65182
S'bool'
p65183
sS'default'
p65184
S'1'
p65185
sS'name'
p65186
S'enable'
p65187
sS'required'
p65188
I00
sS'group_name'
p65189
S'Advanced'
p65190
sa(dp65191
S'description'
p65192
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65193
sS'cpp_type'
p65194
S'bool'
p65195
sS'default'
p65196
S'1'
p65197
sS'name'
p65198
S'implicit'
p65199
sS'required'
p65200
I00
sS'group_name'
p65201
S'Advanced'
p65202
sa(dp65203
S'description'
p65204
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p65205
sS'cpp_type'
p65206
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p65207
sS'default'
p65208
g3
sS'name'
p65209
S'initial_stress'
p65210
sS'required'
p65211
I00
sS'group_name'
p65212
Nsa(dp65213
S'description'
p65214
S'Stiffness of damaged matrix\n'
p65215
sS'cpp_type'
p65216
S'double'
p65217
sS'default'
p65218
S'1e-06'
p65219
sS'name'
p65220
S'kdamage'
p65221
sS'required'
p65222
I00
sS'group_name'
p65223
Nsa(dp65224
S'description'
p65225
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65226
sS'cpp_type'
p65227
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65228
sS'default'
p65229
g3
sS'name'
p65230
S'output_properties'
p65231
sS'required'
p65232
I00
sS'group_name'
p65233
S'Outputs'
p65234
sa(dp65235
S'description'
p65236
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65237
sS'cpp_type'
p65238
S'std::vector<OutputName, std::allocator<OutputName> >'
p65239
sS'default'
p65240
S'none'
p65241
sS'name'
p65242
S'outputs'
p65243
sS'required'
p65244
I00
sS'group_name'
p65245
S'Outputs'
p65246
sa(dp65247
S'description'
p65248
S'The seed for the master random number generator\n'
p65249
sS'cpp_type'
p65250
S'unsigned int'
p65251
sS'default'
p65252
S'0'
p65253
sS'name'
p65254
S'seed'
p65255
sS'required'
p65256
I00
sS'group_name'
p65257
S'Advanced'
p65258
sa(dp65259
S'description'
p65260
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p65261
sS'cpp_type'
p65262
S'bool'
p65263
sS'default'
p65264
S'0'
p65265
sS'name'
p65266
S'store_stress_old'
p65267
sS'required'
p65268
I00
sS'group_name'
p65269
Nsa(dp65270
S'description'
p65271
g3
sS'cpp_type'
p65272
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65273
sS'default'
p65274
S'ComputeLinearElasticPFFractureStress'
p65275
sS'name'
p65276
S'type'
p65277
sS'required'
p65278
I00
sS'group_name'
p65279
NsasS'name'
p65280
S'/Materials/ComputeLinearElasticPFFractureStress'
p65281
sa(dp65282
S'description'
p65283
S'Compute stress using elasticity for small strains\n'
p65284
sS'subblocks'
p65285
NsS'parameters'
p65286
(lp65287
(dp65288
S'description'
p65289
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65290
sS'cpp_type'
p65291
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65292
sS'default'
p65293
g3
sS'name'
p65294
S'base_name'
p65295
sS'required'
p65296
I00
sS'group_name'
p65297
Nsa(dp65298
S'description'
p65299
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65300
sS'cpp_type'
p65301
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65302
sS'default'
p65303
g3
sS'name'
p65304
S'block'
p65305
sS'required'
p65306
I00
sS'group_name'
p65307
Nsa(dp65308
S'description'
p65309
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65310
sS'cpp_type'
p65311
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65312
sS'default'
p65313
g3
sS'name'
p65314
S'boundary'
p65315
sS'required'
p65316
I00
sS'group_name'
p65317
Nsa(dp65318
S'description'
p65319
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65320
sS'cpp_type'
p65321
S'bool'
p65322
sS'default'
p65323
S'1'
p65324
sS'name'
p65325
S'compute'
p65326
sS'required'
p65327
I00
sS'group_name'
p65328
Nsa(dp65329
S'description'
p65330
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65331
sS'cpp_type'
p65332
S'bool'
p65333
sS'default'
p65334
S'0'
p65335
sS'name'
p65336
S'constant_on_elem'
p65337
sS'required'
p65338
I00
sS'group_name'
p65339
S'Advanced'
p65340
sa(dp65341
S'description'
p65342
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65343
sS'cpp_type'
p65344
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65345
sS'default'
p65346
g3
sS'name'
p65347
S'control_tags'
p65348
sS'required'
p65349
I00
sS'group_name'
p65350
S'Advanced'
p65351
sa(dp65352
S'description'
p65353
S'Set the enabled status of the MooseObject.\n'
p65354
sS'cpp_type'
p65355
S'bool'
p65356
sS'default'
p65357
S'1'
p65358
sS'name'
p65359
S'enable'
p65360
sS'required'
p65361
I00
sS'group_name'
p65362
S'Advanced'
p65363
sa(dp65364
S'description'
p65365
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65366
sS'cpp_type'
p65367
S'bool'
p65368
sS'default'
p65369
S'1'
p65370
sS'name'
p65371
S'implicit'
p65372
sS'required'
p65373
I00
sS'group_name'
p65374
S'Advanced'
p65375
sa(dp65376
S'description'
p65377
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p65378
sS'cpp_type'
p65379
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p65380
sS'default'
p65381
g3
sS'name'
p65382
S'initial_stress'
p65383
sS'required'
p65384
I00
sS'group_name'
p65385
Nsa(dp65386
S'description'
p65387
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65388
sS'cpp_type'
p65389
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65390
sS'default'
p65391
g3
sS'name'
p65392
S'output_properties'
p65393
sS'required'
p65394
I00
sS'group_name'
p65395
S'Outputs'
p65396
sa(dp65397
S'description'
p65398
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65399
sS'cpp_type'
p65400
S'std::vector<OutputName, std::allocator<OutputName> >'
p65401
sS'default'
p65402
S'none'
p65403
sS'name'
p65404
S'outputs'
p65405
sS'required'
p65406
I00
sS'group_name'
p65407
S'Outputs'
p65408
sa(dp65409
S'description'
p65410
S'The seed for the master random number generator\n'
p65411
sS'cpp_type'
p65412
S'unsigned int'
p65413
sS'default'
p65414
S'0'
p65415
sS'name'
p65416
S'seed'
p65417
sS'required'
p65418
I00
sS'group_name'
p65419
S'Advanced'
p65420
sa(dp65421
S'description'
p65422
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p65423
sS'cpp_type'
p65424
S'bool'
p65425
sS'default'
p65426
S'0'
p65427
sS'name'
p65428
S'store_stress_old'
p65429
sS'required'
p65430
I00
sS'group_name'
p65431
Nsa(dp65432
S'description'
p65433
g3
sS'cpp_type'
p65434
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65435
sS'default'
p65436
S'ComputeLinearElasticStress'
p65437
sS'name'
p65438
S'type'
p65439
sS'required'
p65440
I00
sS'group_name'
p65441
NsasS'name'
p65442
S'/Materials/ComputeLinearElasticStress'
p65443
sa(dp65444
S'description'
p65445
S'Computes eigenstrain due to thermal expansion using a function that describes the mean thermal expansion as a function of temperature\n'
p65446
sS'subblocks'
p65447
NsS'parameters'
p65448
(lp65449
(dp65450
S'description'
p65451
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65452
sS'cpp_type'
p65453
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65454
sS'default'
p65455
g3
sS'name'
p65456
S'base_name'
p65457
sS'required'
p65458
I00
sS'group_name'
p65459
Nsa(dp65460
S'description'
p65461
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65462
sS'cpp_type'
p65463
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65464
sS'default'
p65465
g3
sS'name'
p65466
S'block'
p65467
sS'required'
p65468
I00
sS'group_name'
p65469
Nsa(dp65470
S'description'
p65471
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65472
sS'cpp_type'
p65473
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65474
sS'default'
p65475
g3
sS'name'
p65476
S'boundary'
p65477
sS'required'
p65478
I00
sS'group_name'
p65479
Nsa(dp65480
S'description'
p65481
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65482
sS'cpp_type'
p65483
S'bool'
p65484
sS'default'
p65485
S'1'
p65486
sS'name'
p65487
S'compute'
p65488
sS'required'
p65489
I00
sS'group_name'
p65490
Nsa(dp65491
S'description'
p65492
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65493
sS'cpp_type'
p65494
S'bool'
p65495
sS'default'
p65496
S'0'
p65497
sS'name'
p65498
S'constant_on_elem'
p65499
sS'required'
p65500
I00
sS'group_name'
p65501
S'Advanced'
p65502
sa(dp65503
S'description'
p65504
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65505
sS'cpp_type'
p65506
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65507
sS'default'
p65508
g3
sS'name'
p65509
S'control_tags'
p65510
sS'required'
p65511
I00
sS'group_name'
p65512
S'Advanced'
p65513
sa(dp65514
S'description'
p65515
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p65516
sS'cpp_type'
p65517
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65518
sS'default'
p65519
g3
sS'name'
p65520
S'eigenstrain_name'
p65521
sS'required'
p65522
I01
sS'group_name'
p65523
Nsa(dp65524
S'description'
p65525
S'Set the enabled status of the MooseObject.\n'
p65526
sS'cpp_type'
p65527
S'bool'
p65528
sS'default'
p65529
S'1'
p65530
sS'name'
p65531
S'enable'
p65532
sS'required'
p65533
I00
sS'group_name'
p65534
S'Advanced'
p65535
sa(dp65536
S'description'
p65537
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65538
sS'cpp_type'
p65539
S'bool'
p65540
sS'default'
p65541
S'1'
p65542
sS'name'
p65543
S'implicit'
p65544
sS'required'
p65545
I00
sS'group_name'
p65546
S'Advanced'
p65547
sa(dp65548
S'description'
p65549
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p65550
sS'cpp_type'
p65551
S'bool'
p65552
sS'default'
p65553
S'0'
p65554
sS'name'
p65555
S'incremental_form'
p65556
sS'required'
p65557
I00
sS'group_name'
p65558
Nsa(dp65559
S'description'
p65560
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65561
sS'cpp_type'
p65562
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65563
sS'default'
p65564
g3
sS'name'
p65565
S'output_properties'
p65566
sS'required'
p65567
I00
sS'group_name'
p65568
S'Outputs'
p65569
sa(dp65570
S'description'
p65571
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65572
sS'cpp_type'
p65573
S'std::vector<OutputName, std::allocator<OutputName> >'
p65574
sS'default'
p65575
S'none'
p65576
sS'name'
p65577
S'outputs'
p65578
sS'required'
p65579
I00
sS'group_name'
p65580
S'Outputs'
p65581
sa(dp65582
S'description'
p65583
S'The seed for the master random number generator\n'
p65584
sS'cpp_type'
p65585
S'unsigned int'
p65586
sS'default'
p65587
S'0'
p65588
sS'name'
p65589
S'seed'
p65590
sS'required'
p65591
I00
sS'group_name'
p65592
S'Advanced'
p65593
sa(dp65594
S'description'
p65595
S'Reference temperature for thermal eigenstrain calculation\n'
p65596
sS'cpp_type'
p65597
S'double'
p65598
sS'default'
p65599
g3
sS'name'
p65600
S'stress_free_reference_temperature'
p65601
sS'required'
p65602
I00
sS'group_name'
p65603
Nsa(dp65604
S'description'
p65605
S'Reference temperature for thermal eigenstrain calculation\n'
p65606
sS'cpp_type'
p65607
S'double'
p65608
sS'default'
p65609
g3
sS'name'
p65610
S'stress_free_temperature'
p65611
sS'required'
p65612
I00
sS'group_name'
p65613
Nsa(dp65614
S'description'
p65615
S'Coupled temperature\n'
p65616
sS'cpp_type'
p65617
S'std::vector<VariableName>'
p65618
sS'default'
p65619
g3
sS'name'
p65620
S'temperature'
p65621
sS'required'
p65622
I00
sS'group_name'
p65623
Nsa(dp65624
S'description'
p65625
S'Function describing the mean thermal expansion as a function of temperature\n'
p65626
sS'cpp_type'
p65627
S'FunctionName'
p65628
sS'default'
p65629
g3
sS'name'
p65630
S'thermal_expansion_function'
p65631
sS'required'
p65632
I01
sS'group_name'
p65633
Nsa(dp65634
S'description'
p65635
S'Reference temperature for thermal_exansion_function (IMPORTANT: this is different in general from the stress_free_temperature)\n'
p65636
sS'cpp_type'
p65637
S'double'
p65638
sS'default'
p65639
g3
sS'name'
p65640
S'thermal_expansion_function_reference_temperature'
p65641
sS'required'
p65642
I01
sS'group_name'
p65643
Nsa(dp65644
S'description'
p65645
g3
sS'cpp_type'
p65646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65647
sS'default'
p65648
S'ComputeMeanThermalExpansionFunctionEigenstrain'
p65649
sS'name'
p65650
S'type'
p65651
sS'required'
p65652
I00
sS'group_name'
p65653
Nsa(dp65654
S'description'
p65655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65656
sS'cpp_type'
p65657
S'bool'
p65658
sS'default'
p65659
S'0'
p65660
sS'name'
p65661
S'use_displaced_mesh'
p65662
sS'required'
p65663
I00
sS'group_name'
p65664
S'Advanced'
p65665
sasS'name'
p65666
S'/Materials/ComputeMeanThermalExpansionFunctionEigenstrain'
p65667
sa(dp65668
S'description'
p65669
S'Material for multi-surface finite-strain plasticity\n'
p65670
sS'subblocks'
p65671
NsS'parameters'
p65672
(lp65673
(dp65674
S'description'
p65675
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p65676
sS'cpp_type'
p65677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65678
sS'default'
p65679
g3
sS'name'
p65680
S'base_name'
p65681
sS'required'
p65682
I00
sS'group_name'
p65683
Nsa(dp65684
S'description'
p65685
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65686
sS'cpp_type'
p65687
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65688
sS'default'
p65689
g3
sS'name'
p65690
S'block'
p65691
sS'required'
p65692
I00
sS'group_name'
p65693
Nsa(dp65694
S'description'
p65695
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65696
sS'cpp_type'
p65697
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65698
sS'default'
p65699
g3
sS'name'
p65700
S'boundary'
p65701
sS'required'
p65702
I00
sS'group_name'
p65703
Nsa(dp65704
S'description'
p65705
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p65706
sS'cpp_type'
p65707
S'bool'
p65708
sS'default'
p65709
S'1'
p65710
sS'name'
p65711
S'compute'
p65712
sS'required'
p65713
I00
sS'group_name'
p65714
Nsa(dp65715
S'description'
p65716
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p65717
sS'cpp_type'
p65718
S'bool'
p65719
sS'default'
p65720
S'0'
p65721
sS'name'
p65722
S'constant_on_elem'
p65723
sS'required'
p65724
I00
sS'group_name'
p65725
S'Advanced'
p65726
sa(dp65727
S'description'
p65728
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65729
sS'cpp_type'
p65730
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65731
sS'default'
p65732
g3
sS'name'
p65733
S'control_tags'
p65734
sS'required'
p65735
I00
sS'group_name'
p65736
S'Advanced'
p65737
sa(dp65738
S'name'
p65739
S'deactivation_scheme'
p65740
sS'cpp_type'
p65741
S'MooseEnum'
p65742
sS'default'
p65743
S'optimized'
p65744
sS'description'
p65745
S"Scheme by which constraints are deactivated.  (NOTE: This is irrelevant if there is only one yield surface.)  safe: return to the yield surface and then deactivate constraints with negative plasticity multipliers.  optimized: deactivate a constraint as soon as its plasticity multiplier becomes negative.  dumb: iteratively try all combinations of active constraints until the solution is found.  You may specify fall-back options.  Eg optimized_to_safe: first use 'optimized', and if that fails, try the return with 'safe'.\n"
p65746
sS'required'
p65747
I00
sS'options'
p65748
S'optimized safe dumb optimized_to_safe safe_to_dumb optimized_to_safe_to_dumb optimized_to_dumb'
p65749
sS'group_name'
p65750
Nsa(dp65751
S'name'
p65752
S'debug_fspb'
p65753
sS'cpp_type'
p65754
S'MooseEnum'
p65755
sS'default'
p65756
S'none'
p65757
sS'description'
p65758
S'Debug types for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian, and check Ax=b\n'
p65759
sS'required'
p65760
I00
sS'options'
p65761
S'none crash jacobian jacobian_and_linear_system'
p65762
sS'group_name'
p65763
Nsa(dp65764
S'description'
p65765
S'Debug finite differencing parameters for the internal parameters\n'
p65766
sS'cpp_type'
p65767
S'std::vector<double, std::allocator<double> >'
p65768
sS'default'
p65769
g3
sS'name'
p65770
S'debug_intnl_change'
p65771
sS'required'
p65772
I00
sS'group_name'
p65773
Nsa(dp65774
S'description'
p65775
S'Debug Jacobian entries at these internal parameters\n'
p65776
sS'cpp_type'
p65777
S'std::vector<double, std::allocator<double> >'
p65778
sS'default'
p65779
g3
sS'name'
p65780
S'debug_jac_at_intnl'
p65781
sS'required'
p65782
I00
sS'group_name'
p65783
Nsa(dp65784
S'description'
p65785
S'Debug Jacobian entries at these plastic multipliers\n'
p65786
sS'cpp_type'
p65787
S'std::vector<double, std::allocator<double> >'
p65788
sS'default'
p65789
g3
sS'name'
p65790
S'debug_jac_at_pm'
p65791
sS'required'
p65792
I00
sS'group_name'
p65793
Nsa(dp65794
S'description'
p65795
S'Debug Jacobian entries at this stress.  For use by developers\n'
p65796
sS'cpp_type'
p65797
S'libMesh::TensorValue<double>'
p65798
sS'default'
p65799
S'(xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0)'
p65800
sS'name'
p65801
S'debug_jac_at_stress'
p65802
sS'required'
p65803
I00
sS'group_name'
p65804
Nsa(dp65805
S'description'
p65806
S'Debug finite differencing parameters for the plastic multipliers\n'
p65807
sS'cpp_type'
p65808
S'std::vector<double, std::allocator<double> >'
p65809
sS'default'
p65810
g3
sS'name'
p65811
S'debug_pm_change'
p65812
sS'required'
p65813
I00
sS'group_name'
p65814
Nsa(dp65815
S'description'
p65816
S'Debug finite differencing parameter for the stress\n'
p65817
sS'cpp_type'
p65818
S'double'
p65819
sS'default'
p65820
S'1'
p65821
sS'name'
p65822
S'debug_stress_change'
p65823
sS'required'
p65824
I00
sS'group_name'
p65825
Nsa(dp65826
S'description'
p65827
S'Set the enabled status of the MooseObject.\n'
p65828
sS'cpp_type'
p65829
S'bool'
p65830
sS'default'
p65831
S'1'
p65832
sS'name'
p65833
S'enable'
p65834
sS'required'
p65835
I00
sS'group_name'
p65836
S'Advanced'
p65837
sa(dp65838
S'description'
p65839
S'The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n'
p65840
sS'cpp_type'
p65841
S'double'
p65842
sS'default'
p65843
g3
sS'name'
p65844
S'ep_plastic_tolerance'
p65845
sS'required'
p65846
I01
sS'group_name'
p65847
Nsa(dp65848
S'description'
p65849
S"The return-map algorithm will return with the best admissible stresses and internal parameters that it can, even if they don't fully correspond to the applied strain increment.  To speed computations, this flag can be set to true, the max_NR_iterations set small, and the min_stepsize large.\n"
p65850
sS'cpp_type'
p65851
S'bool'
p65852
sS'default'
p65853
S'0'
p65854
sS'name'
p65855
S'ignore_failures'
p65856
sS'required'
p65857
I00
sS'group_name'
p65858
Nsa(dp65859
S'description'
p65860
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65861
sS'cpp_type'
p65862
S'bool'
p65863
sS'default'
p65864
S'1'
p65865
sS'name'
p65866
S'implicit'
p65867
sS'required'
p65868
I00
sS'group_name'
p65869
S'Advanced'
p65870
sa(dp65871
S'description'
p65872
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p65873
sS'cpp_type'
p65874
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p65875
sS'default'
p65876
g3
sS'name'
p65877
S'initial_stress'
p65878
sS'required'
p65879
I00
sS'group_name'
p65880
Nsa(dp65881
S'description'
p65882
S'Flow directions are considered linearly dependent if the smallest singular value is less than linear_dependent times the largest singular value\n'
p65883
sS'cpp_type'
p65884
S'double'
p65885
sS'default'
p65886
S'0.0001'
p65887
sS'name'
p65888
S'linear_dependent'
p65889
sS'required'
p65890
I00
sS'group_name'
p65891
Nsa(dp65892
S'description'
p65893
S'Maximum number of Newton-Raphson iterations allowed\n'
p65894
sS'cpp_type'
p65895
S'unsigned int'
p65896
sS'default'
p65897
S'20'
p65898
sS'name'
p65899
S'max_NR_iterations'
p65900
sS'required'
p65901
I00
sS'group_name'
p65902
Nsa(dp65903
S'description'
p65904
S"If your deactivation_scheme is 'something_to_dumb', then 'dumb' will only be used if the stepsize falls below this value.  This parameter is useful because the 'dumb' scheme is computationally expensive\n"
p65905
sS'cpp_type'
p65906
S'double'
p65907
sS'default'
p65908
S'0.01'
p65909
sS'name'
p65910
S'max_stepsize_for_dumb'
p65911
sS'required'
p65912
I00
sS'group_name'
p65913
Nsa(dp65914
S'description'
p65915
S'If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the minimum fraction of applied strain increment that may be applied before the algorithm gives up entirely\n'
p65916
sS'cpp_type'
p65917
S'double'
p65918
sS'default'
p65919
S'0.01'
p65920
sS'name'
p65921
S'min_stepsize'
p65922
sS'required'
p65923
I00
sS'group_name'
p65924
Nsa(dp65925
S'description'
p65926
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65927
sS'cpp_type'
p65928
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65929
sS'default'
p65930
g3
sS'name'
p65931
S'output_properties'
p65932
sS'required'
p65933
I00
sS'group_name'
p65934
S'Outputs'
p65935
sa(dp65936
S'description'
p65937
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65938
sS'cpp_type'
p65939
S'std::vector<OutputName, std::allocator<OutputName> >'
p65940
sS'default'
p65941
S'none'
p65942
sS'name'
p65943
S'outputs'
p65944
sS'required'
p65945
I00
sS'group_name'
p65946
S'Outputs'
p65947
sa(dp65948
S'description'
p65949
S"Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to 'false' if you are only ever using small strains\n"
p65950
sS'cpp_type'
p65951
S'bool'
p65952
sS'default'
p65953
S'1'
p65954
sS'name'
p65955
S'perform_finite_strain_rotations'
p65956
sS'required'
p65957
I00
sS'group_name'
p65958
Nsa(dp65959
S'description'
p65960
S'List of names of user objects that define the plastic models that could be active for this material.  If no plastic_models are provided, only elasticity will be used.\n'
p65961
sS'cpp_type'
p65962
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p65963
sS'default'
p65964
g3
sS'name'
p65965
S'plastic_models'
p65966
sS'required'
p65967
I00
sS'group_name'
p65968
Nsa(dp65969
S'description'
p65970
S'The seed for the master random number generator\n'
p65971
sS'cpp_type'
p65972
S'unsigned int'
p65973
sS'default'
p65974
S'0'
p65975
sS'name'
p65976
S'seed'
p65977
sS'required'
p65978
I00
sS'group_name'
p65979
S'Advanced'
p65980
sa(dp65981
S'name'
p65982
S'specialIC'
p65983
sS'cpp_type'
p65984
S'MooseEnum'
p65985
sS'default'
p65986
S'none'
p65987
sS'description'
p65988
S"For certain combinations of plastic models, the set of active constraints can be initialized optimally.  'none': no special initialization is performed.  For all other choices, the plastic_models must be chosen to have the following types.  'rock': 'TensileMulti MohrCoulombMulti'.  'joint': 'WeakPlaneTensile WeakPlaneShear'.\n"
p65989
sS'required'
p65990
I00
sS'options'
p65991
S'none rock joint'
p65992
sS'group_name'
p65993
Nsa(dp65994
S'description'
p65995
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p65996
sS'cpp_type'
p65997
S'bool'
p65998
sS'default'
p65999
S'0'
p66000
sS'name'
p66001
S'store_stress_old'
p66002
sS'required'
p66003
I00
sS'group_name'
p66004
Nsa(dp66005
S'name'
p66006
S'tangent_operator'
p66007
sS'cpp_type'
p66008
S'MooseEnum'
p66009
sS'default'
p66010
S'nonlinear'
p66011
sS'description'
p66012
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'linear': return the consistent tangent operator that is correct for plasticity with yield functions linear in stress.  'nonlinear': return the full, general consistent tangent operator.  The calculations assume the hardening potentials are independent of stress and hardening parameters.\n"
p66013
sS'required'
p66014
I00
sS'options'
p66015
S'elastic linear nonlinear'
p66016
sS'group_name'
p66017
Nsa(dp66018
S'description'
p66019
S"If this parameter is provided, before the return-map algorithm is called a rotation is performed so that the 'z' axis in the new frame lies along the transverse_direction in the original frame.  After returning, the inverse rotation is performed.  The transverse_direction will itself rotate with large strains.  This is so that transversely-isotropic plasticity models may be easily defined in the frame where the isotropy holds in the x-y plane.\n"
p66020
sS'cpp_type'
p66021
S'libMesh::VectorValue<double>'
p66022
sS'default'
p66023
g3
sS'name'
p66024
S'transverse_direction'
p66025
sS'required'
p66026
I00
sS'group_name'
p66027
Nsa(dp66028
S'description'
p66029
g3
sS'cpp_type'
p66030
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66031
sS'default'
p66032
S'ComputeMultiPlasticityStress'
p66033
sS'name'
p66034
S'type'
p66035
sS'required'
p66036
I00
sS'group_name'
p66037
NsasS'name'
p66038
S'/Materials/ComputeMultiPlasticityStress'
p66039
sa(dp66040
S'description'
p66041
S'Compute strain increment and rotation increment for finite strain under 2D planar assumptions.\n'
p66042
sS'subblocks'
p66043
NsS'parameters'
p66044
(lp66045
(dp66046
S'description'
p66047
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66048
sS'cpp_type'
p66049
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66050
sS'default'
p66051
g3
sS'name'
p66052
S'base_name'
p66053
sS'required'
p66054
I00
sS'group_name'
p66055
Nsa(dp66056
S'description'
p66057
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66058
sS'cpp_type'
p66059
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66060
sS'default'
p66061
g3
sS'name'
p66062
S'block'
p66063
sS'required'
p66064
I00
sS'group_name'
p66065
Nsa(dp66066
S'description'
p66067
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66068
sS'cpp_type'
p66069
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66070
sS'default'
p66071
g3
sS'name'
p66072
S'boundary'
p66073
sS'required'
p66074
I00
sS'group_name'
p66075
Nsa(dp66076
S'description'
p66077
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66078
sS'cpp_type'
p66079
S'bool'
p66080
sS'default'
p66081
S'1'
p66082
sS'name'
p66083
S'compute'
p66084
sS'required'
p66085
I00
sS'group_name'
p66086
Nsa(dp66087
S'description'
p66088
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66089
sS'cpp_type'
p66090
S'bool'
p66091
sS'default'
p66092
S'0'
p66093
sS'name'
p66094
S'constant_on_elem'
p66095
sS'required'
p66096
I00
sS'group_name'
p66097
S'Advanced'
p66098
sa(dp66099
S'description'
p66100
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66101
sS'cpp_type'
p66102
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66103
sS'default'
p66104
g3
sS'name'
p66105
S'control_tags'
p66106
sS'required'
p66107
I00
sS'group_name'
p66108
S'Advanced'
p66109
sa(dp66110
S'name'
p66111
S'decomposition_method'
p66112
sS'cpp_type'
p66113
S'MooseEnum'
p66114
sS'default'
p66115
S'TaylorExpansion'
p66116
sS'description'
p66117
S'Methods to calculate the strain and rotation increments\n'
p66118
sS'required'
p66119
I00
sS'options'
p66120
S'TaylorExpansion EigenSolution'
p66121
sS'group_name'
p66122
Nsa(dp66123
S'description'
p66124
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p66125
sS'cpp_type'
p66126
S'std::vector<VariableName>'
p66127
sS'default'
p66128
g3
sS'name'
p66129
S'displacements'
p66130
sS'required'
p66131
I01
sS'group_name'
p66132
Nsa(dp66133
S'description'
p66134
S'List of eigenstrains to be applied in this strain calculation\n'
p66135
sS'cpp_type'
p66136
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p66137
sS'default'
p66138
g3
sS'name'
p66139
S'eigenstrain_names'
p66140
sS'required'
p66141
I00
sS'group_name'
p66142
Nsa(dp66143
S'description'
p66144
S'Set the enabled status of the MooseObject.\n'
p66145
sS'cpp_type'
p66146
S'bool'
p66147
sS'default'
p66148
S'1'
p66149
sS'name'
p66150
S'enable'
p66151
sS'required'
p66152
I00
sS'group_name'
p66153
S'Advanced'
p66154
sa(dp66155
S'description'
p66156
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66157
sS'cpp_type'
p66158
S'bool'
p66159
sS'default'
p66160
S'1'
p66161
sS'name'
p66162
S'implicit'
p66163
sS'required'
p66164
I00
sS'group_name'
p66165
S'Advanced'
p66166
sa(dp66167
S'description'
p66168
S'Nonlinear variable for plane stress condition\n'
p66169
sS'cpp_type'
p66170
S'std::vector<VariableName>'
p66171
sS'default'
p66172
g3
sS'name'
p66173
S'out_of_plane_strain'
p66174
sS'required'
p66175
I00
sS'group_name'
p66176
Nsa(dp66177
S'description'
p66178
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66179
sS'cpp_type'
p66180
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66181
sS'default'
p66182
g3
sS'name'
p66183
S'output_properties'
p66184
sS'required'
p66185
I00
sS'group_name'
p66186
S'Outputs'
p66187
sa(dp66188
S'description'
p66189
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66190
sS'cpp_type'
p66191
S'std::vector<OutputName, std::allocator<OutputName> >'
p66192
sS'default'
p66193
S'none'
p66194
sS'name'
p66195
S'outputs'
p66196
sS'required'
p66197
I00
sS'group_name'
p66198
S'Outputs'
p66199
sa(dp66200
S'description'
p66201
S'Scalar variable for generalized plane strain\n'
p66202
sS'cpp_type'
p66203
S'std::vector<VariableName>'
p66204
sS'default'
p66205
g3
sS'name'
p66206
S'scalar_out_of_plane_strain'
p66207
sS'required'
p66208
I00
sS'group_name'
p66209
Nsa(dp66210
S'description'
p66211
S'The seed for the master random number generator\n'
p66212
sS'cpp_type'
p66213
S'unsigned int'
p66214
sS'default'
p66215
S'0'
p66216
sS'name'
p66217
S'seed'
p66218
sS'required'
p66219
I00
sS'group_name'
p66220
S'Advanced'
p66221
sa(dp66222
S'description'
p66223
g3
sS'cpp_type'
p66224
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66225
sS'default'
p66226
S'ComputePlaneFiniteStrain'
p66227
sS'name'
p66228
S'type'
p66229
sS'required'
p66230
I00
sS'group_name'
p66231
Nsa(dp66232
S'description'
p66233
S'Flag to correct volumetric locking\n'
p66234
sS'cpp_type'
p66235
S'bool'
p66236
sS'default'
p66237
S'0'
p66238
sS'name'
p66239
S'volumetric_locking_correction'
p66240
sS'required'
p66241
I00
sS'group_name'
p66242
NsasS'name'
p66243
S'/Materials/ComputePlaneFiniteStrain'
p66244
sa(dp66245
S'description'
p66246
S'Compute strain increment for small strain under 2D planar assumptions.\n'
p66247
sS'subblocks'
p66248
NsS'parameters'
p66249
(lp66250
(dp66251
S'description'
p66252
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66253
sS'cpp_type'
p66254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66255
sS'default'
p66256
g3
sS'name'
p66257
S'base_name'
p66258
sS'required'
p66259
I00
sS'group_name'
p66260
Nsa(dp66261
S'description'
p66262
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66263
sS'cpp_type'
p66264
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66265
sS'default'
p66266
g3
sS'name'
p66267
S'block'
p66268
sS'required'
p66269
I00
sS'group_name'
p66270
Nsa(dp66271
S'description'
p66272
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66273
sS'cpp_type'
p66274
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66275
sS'default'
p66276
g3
sS'name'
p66277
S'boundary'
p66278
sS'required'
p66279
I00
sS'group_name'
p66280
Nsa(dp66281
S'description'
p66282
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66283
sS'cpp_type'
p66284
S'bool'
p66285
sS'default'
p66286
S'1'
p66287
sS'name'
p66288
S'compute'
p66289
sS'required'
p66290
I00
sS'group_name'
p66291
Nsa(dp66292
S'description'
p66293
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66294
sS'cpp_type'
p66295
S'bool'
p66296
sS'default'
p66297
S'0'
p66298
sS'name'
p66299
S'constant_on_elem'
p66300
sS'required'
p66301
I00
sS'group_name'
p66302
S'Advanced'
p66303
sa(dp66304
S'description'
p66305
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66306
sS'cpp_type'
p66307
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66308
sS'default'
p66309
g3
sS'name'
p66310
S'control_tags'
p66311
sS'required'
p66312
I00
sS'group_name'
p66313
S'Advanced'
p66314
sa(dp66315
S'description'
p66316
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p66317
sS'cpp_type'
p66318
S'std::vector<VariableName>'
p66319
sS'default'
p66320
g3
sS'name'
p66321
S'displacements'
p66322
sS'required'
p66323
I01
sS'group_name'
p66324
Nsa(dp66325
S'description'
p66326
S'List of eigenstrains to be applied in this strain calculation\n'
p66327
sS'cpp_type'
p66328
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p66329
sS'default'
p66330
g3
sS'name'
p66331
S'eigenstrain_names'
p66332
sS'required'
p66333
I00
sS'group_name'
p66334
Nsa(dp66335
S'description'
p66336
S'Set the enabled status of the MooseObject.\n'
p66337
sS'cpp_type'
p66338
S'bool'
p66339
sS'default'
p66340
S'1'
p66341
sS'name'
p66342
S'enable'
p66343
sS'required'
p66344
I00
sS'group_name'
p66345
S'Advanced'
p66346
sa(dp66347
S'description'
p66348
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66349
sS'cpp_type'
p66350
S'bool'
p66351
sS'default'
p66352
S'1'
p66353
sS'name'
p66354
S'implicit'
p66355
sS'required'
p66356
I00
sS'group_name'
p66357
S'Advanced'
p66358
sa(dp66359
S'description'
p66360
S'Nonlinear variable for plane stress condition\n'
p66361
sS'cpp_type'
p66362
S'std::vector<VariableName>'
p66363
sS'default'
p66364
g3
sS'name'
p66365
S'out_of_plane_strain'
p66366
sS'required'
p66367
I00
sS'group_name'
p66368
Nsa(dp66369
S'description'
p66370
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66371
sS'cpp_type'
p66372
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66373
sS'default'
p66374
g3
sS'name'
p66375
S'output_properties'
p66376
sS'required'
p66377
I00
sS'group_name'
p66378
S'Outputs'
p66379
sa(dp66380
S'description'
p66381
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66382
sS'cpp_type'
p66383
S'std::vector<OutputName, std::allocator<OutputName> >'
p66384
sS'default'
p66385
S'none'
p66386
sS'name'
p66387
S'outputs'
p66388
sS'required'
p66389
I00
sS'group_name'
p66390
S'Outputs'
p66391
sa(dp66392
S'description'
p66393
S'Scalar variable for generalized plane strain\n'
p66394
sS'cpp_type'
p66395
S'std::vector<VariableName>'
p66396
sS'default'
p66397
g3
sS'name'
p66398
S'scalar_out_of_plane_strain'
p66399
sS'required'
p66400
I00
sS'group_name'
p66401
Nsa(dp66402
S'description'
p66403
S'The seed for the master random number generator\n'
p66404
sS'cpp_type'
p66405
S'unsigned int'
p66406
sS'default'
p66407
S'0'
p66408
sS'name'
p66409
S'seed'
p66410
sS'required'
p66411
I00
sS'group_name'
p66412
S'Advanced'
p66413
sa(dp66414
S'description'
p66415
g3
sS'cpp_type'
p66416
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66417
sS'default'
p66418
S'ComputePlaneIncrementalStrain'
p66419
sS'name'
p66420
S'type'
p66421
sS'required'
p66422
I00
sS'group_name'
p66423
Nsa(dp66424
S'description'
p66425
S'Flag to correct volumetric locking\n'
p66426
sS'cpp_type'
p66427
S'bool'
p66428
sS'default'
p66429
S'0'
p66430
sS'name'
p66431
S'volumetric_locking_correction'
p66432
sS'required'
p66433
I00
sS'group_name'
p66434
NsasS'name'
p66435
S'/Materials/ComputePlaneIncrementalStrain'
p66436
sa(dp66437
S'description'
p66438
S'Compute a small strain under generalized plane strain assumptions where the out of plane strain is generally nonzero.\n'
p66439
sS'subblocks'
p66440
NsS'parameters'
p66441
(lp66442
(dp66443
S'description'
p66444
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66445
sS'cpp_type'
p66446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66447
sS'default'
p66448
g3
sS'name'
p66449
S'base_name'
p66450
sS'required'
p66451
I00
sS'group_name'
p66452
Nsa(dp66453
S'description'
p66454
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66455
sS'cpp_type'
p66456
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66457
sS'default'
p66458
g3
sS'name'
p66459
S'block'
p66460
sS'required'
p66461
I00
sS'group_name'
p66462
Nsa(dp66463
S'description'
p66464
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66465
sS'cpp_type'
p66466
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66467
sS'default'
p66468
g3
sS'name'
p66469
S'boundary'
p66470
sS'required'
p66471
I00
sS'group_name'
p66472
Nsa(dp66473
S'description'
p66474
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66475
sS'cpp_type'
p66476
S'bool'
p66477
sS'default'
p66478
S'1'
p66479
sS'name'
p66480
S'compute'
p66481
sS'required'
p66482
I00
sS'group_name'
p66483
Nsa(dp66484
S'description'
p66485
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66486
sS'cpp_type'
p66487
S'bool'
p66488
sS'default'
p66489
S'0'
p66490
sS'name'
p66491
S'constant_on_elem'
p66492
sS'required'
p66493
I00
sS'group_name'
p66494
S'Advanced'
p66495
sa(dp66496
S'description'
p66497
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66498
sS'cpp_type'
p66499
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66500
sS'default'
p66501
g3
sS'name'
p66502
S'control_tags'
p66503
sS'required'
p66504
I00
sS'group_name'
p66505
S'Advanced'
p66506
sa(dp66507
S'description'
p66508
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p66509
sS'cpp_type'
p66510
S'std::vector<VariableName>'
p66511
sS'default'
p66512
g3
sS'name'
p66513
S'displacements'
p66514
sS'required'
p66515
I01
sS'group_name'
p66516
Nsa(dp66517
S'description'
p66518
S'List of eigenstrains to be applied in this strain calculation\n'
p66519
sS'cpp_type'
p66520
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p66521
sS'default'
p66522
g3
sS'name'
p66523
S'eigenstrain_names'
p66524
sS'required'
p66525
I00
sS'group_name'
p66526
Nsa(dp66527
S'description'
p66528
S'Set the enabled status of the MooseObject.\n'
p66529
sS'cpp_type'
p66530
S'bool'
p66531
sS'default'
p66532
S'1'
p66533
sS'name'
p66534
S'enable'
p66535
sS'required'
p66536
I00
sS'group_name'
p66537
S'Advanced'
p66538
sa(dp66539
S'description'
p66540
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66541
sS'cpp_type'
p66542
S'bool'
p66543
sS'default'
p66544
S'1'
p66545
sS'name'
p66546
S'implicit'
p66547
sS'required'
p66548
I00
sS'group_name'
p66549
S'Advanced'
p66550
sa(dp66551
S'description'
p66552
S'Nonlinear variable for plane stress condition\n'
p66553
sS'cpp_type'
p66554
S'std::vector<VariableName>'
p66555
sS'default'
p66556
g3
sS'name'
p66557
S'out_of_plane_strain'
p66558
sS'required'
p66559
I00
sS'group_name'
p66560
Nsa(dp66561
S'description'
p66562
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66563
sS'cpp_type'
p66564
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66565
sS'default'
p66566
g3
sS'name'
p66567
S'output_properties'
p66568
sS'required'
p66569
I00
sS'group_name'
p66570
S'Outputs'
p66571
sa(dp66572
S'description'
p66573
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66574
sS'cpp_type'
p66575
S'std::vector<OutputName, std::allocator<OutputName> >'
p66576
sS'default'
p66577
S'none'
p66578
sS'name'
p66579
S'outputs'
p66580
sS'required'
p66581
I00
sS'group_name'
p66582
S'Outputs'
p66583
sa(dp66584
S'description'
p66585
S'Scalar variable for generalized plane strain\n'
p66586
sS'cpp_type'
p66587
S'std::vector<VariableName>'
p66588
sS'default'
p66589
g3
sS'name'
p66590
S'scalar_out_of_plane_strain'
p66591
sS'required'
p66592
I00
sS'group_name'
p66593
Nsa(dp66594
S'description'
p66595
S'The seed for the master random number generator\n'
p66596
sS'cpp_type'
p66597
S'unsigned int'
p66598
sS'default'
p66599
S'0'
p66600
sS'name'
p66601
S'seed'
p66602
sS'required'
p66603
I00
sS'group_name'
p66604
S'Advanced'
p66605
sa(dp66606
S'description'
p66607
g3
sS'cpp_type'
p66608
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66609
sS'default'
p66610
S'ComputePlaneSmallStrain'
p66611
sS'name'
p66612
S'type'
p66613
sS'required'
p66614
I00
sS'group_name'
p66615
Nsa(dp66616
S'description'
p66617
S'Flag to correct volumetric locking\n'
p66618
sS'cpp_type'
p66619
S'bool'
p66620
sS'default'
p66621
S'0'
p66622
sS'name'
p66623
S'volumetric_locking_correction'
p66624
sS'required'
p66625
I00
sS'group_name'
p66626
NsasS'name'
p66627
S'/Materials/ComputePlaneSmallStrain'
p66628
sa(dp66629
S'description'
p66630
S'Plastic heat energy density = stress * plastic_strain_rate\n'
p66631
sS'subblocks'
p66632
NsS'parameters'
p66633
(lp66634
(dp66635
S'description'
p66636
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66637
sS'cpp_type'
p66638
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66639
sS'default'
p66640
g3
sS'name'
p66641
S'base_name'
p66642
sS'required'
p66643
I00
sS'group_name'
p66644
Nsa(dp66645
S'description'
p66646
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66647
sS'cpp_type'
p66648
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66649
sS'default'
p66650
g3
sS'name'
p66651
S'block'
p66652
sS'required'
p66653
I00
sS'group_name'
p66654
Nsa(dp66655
S'description'
p66656
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66657
sS'cpp_type'
p66658
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66659
sS'default'
p66660
g3
sS'name'
p66661
S'boundary'
p66662
sS'required'
p66663
I00
sS'group_name'
p66664
Nsa(dp66665
S'description'
p66666
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66667
sS'cpp_type'
p66668
S'bool'
p66669
sS'default'
p66670
S'1'
p66671
sS'name'
p66672
S'compute'
p66673
sS'required'
p66674
I00
sS'group_name'
p66675
Nsa(dp66676
S'description'
p66677
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66678
sS'cpp_type'
p66679
S'bool'
p66680
sS'default'
p66681
S'0'
p66682
sS'name'
p66683
S'constant_on_elem'
p66684
sS'required'
p66685
I00
sS'group_name'
p66686
S'Advanced'
p66687
sa(dp66688
S'description'
p66689
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66690
sS'cpp_type'
p66691
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66692
sS'default'
p66693
g3
sS'name'
p66694
S'control_tags'
p66695
sS'required'
p66696
I00
sS'group_name'
p66697
S'Advanced'
p66698
sa(dp66699
S'description'
p66700
S'Set the enabled status of the MooseObject.\n'
p66701
sS'cpp_type'
p66702
S'bool'
p66703
sS'default'
p66704
S'1'
p66705
sS'name'
p66706
S'enable'
p66707
sS'required'
p66708
I00
sS'group_name'
p66709
S'Advanced'
p66710
sa(dp66711
S'description'
p66712
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66713
sS'cpp_type'
p66714
S'bool'
p66715
sS'default'
p66716
S'1'
p66717
sS'name'
p66718
S'implicit'
p66719
sS'required'
p66720
I00
sS'group_name'
p66721
S'Advanced'
p66722
sa(dp66723
S'description'
p66724
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66725
sS'cpp_type'
p66726
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66727
sS'default'
p66728
g3
sS'name'
p66729
S'output_properties'
p66730
sS'required'
p66731
I00
sS'group_name'
p66732
S'Outputs'
p66733
sa(dp66734
S'description'
p66735
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66736
sS'cpp_type'
p66737
S'std::vector<OutputName, std::allocator<OutputName> >'
p66738
sS'default'
p66739
S'none'
p66740
sS'name'
p66741
S'outputs'
p66742
sS'required'
p66743
I00
sS'group_name'
p66744
S'Outputs'
p66745
sa(dp66746
S'description'
p66747
S'The seed for the master random number generator\n'
p66748
sS'cpp_type'
p66749
S'unsigned int'
p66750
sS'default'
p66751
S'0'
p66752
sS'name'
p66753
S'seed'
p66754
sS'required'
p66755
I00
sS'group_name'
p66756
S'Advanced'
p66757
sa(dp66758
S'description'
p66759
g3
sS'cpp_type'
p66760
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66761
sS'default'
p66762
S'ComputePlasticHeatEnergy'
p66763
sS'name'
p66764
S'type'
p66765
sS'required'
p66766
I00
sS'group_name'
p66767
Nsa(dp66768
S'description'
p66769
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66770
sS'cpp_type'
p66771
S'bool'
p66772
sS'default'
p66773
S'0'
p66774
sS'name'
p66775
S'use_displaced_mesh'
p66776
sS'required'
p66777
I00
sS'group_name'
p66778
S'Advanced'
p66779
sasS'name'
p66780
S'/Materials/ComputePlasticHeatEnergy'
p66781
sa(dp66782
S'description'
p66783
S'Compute an evolving elasticity tensor coupled to a grain growth phase field model.\n'
p66784
sS'subblocks'
p66785
NsS'parameters'
p66786
(lp66787
(dp66788
S'description'
p66789
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p66790
sS'cpp_type'
p66791
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66792
sS'default'
p66793
g3
sS'name'
p66794
S'base_name'
p66795
sS'required'
p66796
I00
sS'group_name'
p66797
Nsa(dp66798
S'description'
p66799
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66800
sS'cpp_type'
p66801
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66802
sS'default'
p66803
g3
sS'name'
p66804
S'block'
p66805
sS'required'
p66806
I00
sS'group_name'
p66807
Nsa(dp66808
S'description'
p66809
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66810
sS'cpp_type'
p66811
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66812
sS'default'
p66813
g3
sS'name'
p66814
S'boundary'
p66815
sS'required'
p66816
I00
sS'group_name'
p66817
Nsa(dp66818
S'description'
p66819
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p66820
sS'cpp_type'
p66821
S'bool'
p66822
sS'default'
p66823
S'1'
p66824
sS'name'
p66825
S'compute'
p66826
sS'required'
p66827
I00
sS'group_name'
p66828
Nsa(dp66829
S'description'
p66830
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p66831
sS'cpp_type'
p66832
S'bool'
p66833
sS'default'
p66834
S'0'
p66835
sS'name'
p66836
S'constant_on_elem'
p66837
sS'required'
p66838
I00
sS'group_name'
p66839
S'Advanced'
p66840
sa(dp66841
S'description'
p66842
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66843
sS'cpp_type'
p66844
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66845
sS'default'
p66846
g3
sS'name'
p66847
S'control_tags'
p66848
sS'required'
p66849
I00
sS'group_name'
p66850
S'Advanced'
p66851
sa(dp66852
S'description'
p66853
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p66854
sS'cpp_type'
p66855
S'FunctionName'
p66856
sS'default'
p66857
g3
sS'name'
p66858
S'elasticity_tensor_prefactor'
p66859
sS'required'
p66860
I00
sS'group_name'
p66861
Nsa(dp66862
S'description'
p66863
S'Set the enabled status of the MooseObject.\n'
p66864
sS'cpp_type'
p66865
S'bool'
p66866
sS'default'
p66867
S'1'
p66868
sS'name'
p66869
S'enable'
p66870
sS'required'
p66871
I00
sS'group_name'
p66872
S'Advanced'
p66873
sa(dp66874
S'description'
p66875
S'Name of GrainTracker user object that provides RankFourTensors\n'
p66876
sS'cpp_type'
p66877
S'UserObjectName'
p66878
sS'default'
p66879
g3
sS'name'
p66880
S'grain_tracker'
p66881
sS'required'
p66882
I01
sS'group_name'
p66883
Nsa(dp66884
S'description'
p66885
S'Determines whether this object is calculated using an implicit or explicit form\n'
p66886
sS'cpp_type'
p66887
S'bool'
p66888
sS'default'
p66889
S'1'
p66890
sS'name'
p66891
S'implicit'
p66892
sS'required'
p66893
I00
sS'group_name'
p66894
S'Advanced'
p66895
sa(dp66896
S'description'
p66897
S'Lengthscale of the problem, in meters\n'
p66898
sS'cpp_type'
p66899
S'double'
p66900
sS'default'
p66901
S'1e-09'
p66902
sS'name'
p66903
S'length_scale'
p66904
sS'required'
p66905
I00
sS'group_name'
p66906
Nsa(dp66907
S'description'
p66908
S'Array of coupled variables (num_name)\n'
p66909
sS'cpp_type'
p66910
S'unsigned int'
p66911
sS'default'
p66912
g3
sS'name'
p66913
S'op_num'
p66914
sS'required'
p66915
I00
sS'group_name'
p66916
Nsa(dp66917
S'description'
p66918
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66919
sS'cpp_type'
p66920
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66921
sS'default'
p66922
g3
sS'name'
p66923
S'output_properties'
p66924
sS'required'
p66925
I00
sS'group_name'
p66926
S'Outputs'
p66927
sa(dp66928
S'description'
p66929
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66930
sS'cpp_type'
p66931
S'std::vector<OutputName, std::allocator<OutputName> >'
p66932
sS'default'
p66933
S'none'
p66934
sS'name'
p66935
S'outputs'
p66936
sS'required'
p66937
I00
sS'group_name'
p66938
S'Outputs'
p66939
sa(dp66940
S'description'
p66941
S'Pressure scale of the problem, in pa\n'
p66942
sS'cpp_type'
p66943
S'double'
p66944
sS'default'
p66945
S'1e+06'
p66946
sS'name'
p66947
S'pressure_scale'
p66948
sS'required'
p66949
I00
sS'group_name'
p66950
Nsa(dp66951
S'description'
p66952
S'The seed for the master random number generator\n'
p66953
sS'cpp_type'
p66954
S'unsigned int'
p66955
sS'default'
p66956
S'0'
p66957
sS'name'
p66958
S'seed'
p66959
sS'required'
p66960
I00
sS'group_name'
p66961
S'Advanced'
p66962
sa(dp66963
S'description'
p66964
g3
sS'cpp_type'
p66965
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66966
sS'default'
p66967
S'ComputePolycrystalElasticityTensor'
p66968
sS'name'
p66969
S'type'
p66970
sS'required'
p66971
I00
sS'group_name'
p66972
Nsa(dp66973
S'description'
p66974
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66975
sS'cpp_type'
p66976
S'bool'
p66977
sS'default'
p66978
S'0'
p66979
sS'name'
p66980
S'use_displaced_mesh'
p66981
sS'required'
p66982
I00
sS'group_name'
p66983
S'Advanced'
p66984
sa(dp66985
S'description'
p66986
S'Array of coupled variables\n'
p66987
sS'cpp_type'
p66988
S'std::vector<VariableName>'
p66989
sS'default'
p66990
g3
sS'name'
p66991
S'v'
p66992
sS'required'
p66993
I01
sS'group_name'
p66994
Nsa(dp66995
S'description'
p66996
S'Array of coupled variables (base_name)\n'
p66997
sS'cpp_type'
p66998
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66999
sS'default'
p67000
g3
sS'name'
p67001
S'var_name_base'
p67002
sS'required'
p67003
I00
sS'group_name'
p67004
NsasS'name'
p67005
S'/Materials/ComputePolycrystalElasticityTensor'
p67006
sa(dp67007
S'description'
p67008
S'Compute a strain increment and rotation increment for finite strains in 1D spherical symmetry problems.\n'
p67009
sS'subblocks'
p67010
NsS'parameters'
p67011
(lp67012
(dp67013
S'description'
p67014
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67015
sS'cpp_type'
p67016
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67017
sS'default'
p67018
g3
sS'name'
p67019
S'base_name'
p67020
sS'required'
p67021
I00
sS'group_name'
p67022
Nsa(dp67023
S'description'
p67024
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67025
sS'cpp_type'
p67026
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67027
sS'default'
p67028
g3
sS'name'
p67029
S'block'
p67030
sS'required'
p67031
I00
sS'group_name'
p67032
Nsa(dp67033
S'description'
p67034
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67035
sS'cpp_type'
p67036
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67037
sS'default'
p67038
g3
sS'name'
p67039
S'boundary'
p67040
sS'required'
p67041
I00
sS'group_name'
p67042
Nsa(dp67043
S'description'
p67044
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67045
sS'cpp_type'
p67046
S'bool'
p67047
sS'default'
p67048
S'1'
p67049
sS'name'
p67050
S'compute'
p67051
sS'required'
p67052
I00
sS'group_name'
p67053
Nsa(dp67054
S'description'
p67055
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67056
sS'cpp_type'
p67057
S'bool'
p67058
sS'default'
p67059
S'0'
p67060
sS'name'
p67061
S'constant_on_elem'
p67062
sS'required'
p67063
I00
sS'group_name'
p67064
S'Advanced'
p67065
sa(dp67066
S'description'
p67067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67068
sS'cpp_type'
p67069
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67070
sS'default'
p67071
g3
sS'name'
p67072
S'control_tags'
p67073
sS'required'
p67074
I00
sS'group_name'
p67075
S'Advanced'
p67076
sa(dp67077
S'name'
p67078
S'decomposition_method'
p67079
sS'cpp_type'
p67080
S'MooseEnum'
p67081
sS'default'
p67082
S'TaylorExpansion'
p67083
sS'description'
p67084
S'Methods to calculate the strain and rotation increments\n'
p67085
sS'required'
p67086
I00
sS'options'
p67087
S'TaylorExpansion EigenSolution'
p67088
sS'group_name'
p67089
Nsa(dp67090
S'description'
p67091
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p67092
sS'cpp_type'
p67093
S'std::vector<VariableName>'
p67094
sS'default'
p67095
g3
sS'name'
p67096
S'displacements'
p67097
sS'required'
p67098
I01
sS'group_name'
p67099
Nsa(dp67100
S'description'
p67101
S'List of eigenstrains to be applied in this strain calculation\n'
p67102
sS'cpp_type'
p67103
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67104
sS'default'
p67105
g3
sS'name'
p67106
S'eigenstrain_names'
p67107
sS'required'
p67108
I00
sS'group_name'
p67109
Nsa(dp67110
S'description'
p67111
S'Set the enabled status of the MooseObject.\n'
p67112
sS'cpp_type'
p67113
S'bool'
p67114
sS'default'
p67115
S'1'
p67116
sS'name'
p67117
S'enable'
p67118
sS'required'
p67119
I00
sS'group_name'
p67120
S'Advanced'
p67121
sa(dp67122
S'description'
p67123
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67124
sS'cpp_type'
p67125
S'bool'
p67126
sS'default'
p67127
S'1'
p67128
sS'name'
p67129
S'implicit'
p67130
sS'required'
p67131
I00
sS'group_name'
p67132
S'Advanced'
p67133
sa(dp67134
S'description'
p67135
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67136
sS'cpp_type'
p67137
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67138
sS'default'
p67139
g3
sS'name'
p67140
S'output_properties'
p67141
sS'required'
p67142
I00
sS'group_name'
p67143
S'Outputs'
p67144
sa(dp67145
S'description'
p67146
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67147
sS'cpp_type'
p67148
S'std::vector<OutputName, std::allocator<OutputName> >'
p67149
sS'default'
p67150
S'none'
p67151
sS'name'
p67152
S'outputs'
p67153
sS'required'
p67154
I00
sS'group_name'
p67155
S'Outputs'
p67156
sa(dp67157
S'description'
p67158
S'The seed for the master random number generator\n'
p67159
sS'cpp_type'
p67160
S'unsigned int'
p67161
sS'default'
p67162
S'0'
p67163
sS'name'
p67164
S'seed'
p67165
sS'required'
p67166
I00
sS'group_name'
p67167
S'Advanced'
p67168
sa(dp67169
S'description'
p67170
g3
sS'cpp_type'
p67171
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67172
sS'default'
p67173
S'ComputeRSphericalFiniteStrain'
p67174
sS'name'
p67175
S'type'
p67176
sS'required'
p67177
I00
sS'group_name'
p67178
Nsa(dp67179
S'description'
p67180
S'Flag to correct volumetric locking\n'
p67181
sS'cpp_type'
p67182
S'bool'
p67183
sS'default'
p67184
S'0'
p67185
sS'name'
p67186
S'volumetric_locking_correction'
p67187
sS'required'
p67188
I00
sS'group_name'
p67189
NsasS'name'
p67190
S'/Materials/ComputeRSphericalFiniteStrain'
p67191
sa(dp67192
S'description'
p67193
S'Compute a strain increment for incremental strains in 1D spherical symmetry problems.\n'
p67194
sS'subblocks'
p67195
NsS'parameters'
p67196
(lp67197
(dp67198
S'description'
p67199
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67200
sS'cpp_type'
p67201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67202
sS'default'
p67203
g3
sS'name'
p67204
S'base_name'
p67205
sS'required'
p67206
I00
sS'group_name'
p67207
Nsa(dp67208
S'description'
p67209
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67210
sS'cpp_type'
p67211
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67212
sS'default'
p67213
g3
sS'name'
p67214
S'block'
p67215
sS'required'
p67216
I00
sS'group_name'
p67217
Nsa(dp67218
S'description'
p67219
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67220
sS'cpp_type'
p67221
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67222
sS'default'
p67223
g3
sS'name'
p67224
S'boundary'
p67225
sS'required'
p67226
I00
sS'group_name'
p67227
Nsa(dp67228
S'description'
p67229
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67230
sS'cpp_type'
p67231
S'bool'
p67232
sS'default'
p67233
S'1'
p67234
sS'name'
p67235
S'compute'
p67236
sS'required'
p67237
I00
sS'group_name'
p67238
Nsa(dp67239
S'description'
p67240
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67241
sS'cpp_type'
p67242
S'bool'
p67243
sS'default'
p67244
S'0'
p67245
sS'name'
p67246
S'constant_on_elem'
p67247
sS'required'
p67248
I00
sS'group_name'
p67249
S'Advanced'
p67250
sa(dp67251
S'description'
p67252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67253
sS'cpp_type'
p67254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67255
sS'default'
p67256
g3
sS'name'
p67257
S'control_tags'
p67258
sS'required'
p67259
I00
sS'group_name'
p67260
S'Advanced'
p67261
sa(dp67262
S'description'
p67263
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p67264
sS'cpp_type'
p67265
S'std::vector<VariableName>'
p67266
sS'default'
p67267
g3
sS'name'
p67268
S'displacements'
p67269
sS'required'
p67270
I01
sS'group_name'
p67271
Nsa(dp67272
S'description'
p67273
S'List of eigenstrains to be applied in this strain calculation\n'
p67274
sS'cpp_type'
p67275
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67276
sS'default'
p67277
g3
sS'name'
p67278
S'eigenstrain_names'
p67279
sS'required'
p67280
I00
sS'group_name'
p67281
Nsa(dp67282
S'description'
p67283
S'Set the enabled status of the MooseObject.\n'
p67284
sS'cpp_type'
p67285
S'bool'
p67286
sS'default'
p67287
S'1'
p67288
sS'name'
p67289
S'enable'
p67290
sS'required'
p67291
I00
sS'group_name'
p67292
S'Advanced'
p67293
sa(dp67294
S'description'
p67295
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67296
sS'cpp_type'
p67297
S'bool'
p67298
sS'default'
p67299
S'1'
p67300
sS'name'
p67301
S'implicit'
p67302
sS'required'
p67303
I00
sS'group_name'
p67304
S'Advanced'
p67305
sa(dp67306
S'description'
p67307
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67308
sS'cpp_type'
p67309
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67310
sS'default'
p67311
g3
sS'name'
p67312
S'output_properties'
p67313
sS'required'
p67314
I00
sS'group_name'
p67315
S'Outputs'
p67316
sa(dp67317
S'description'
p67318
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67319
sS'cpp_type'
p67320
S'std::vector<OutputName, std::allocator<OutputName> >'
p67321
sS'default'
p67322
S'none'
p67323
sS'name'
p67324
S'outputs'
p67325
sS'required'
p67326
I00
sS'group_name'
p67327
S'Outputs'
p67328
sa(dp67329
S'description'
p67330
S'The seed for the master random number generator\n'
p67331
sS'cpp_type'
p67332
S'unsigned int'
p67333
sS'default'
p67334
S'0'
p67335
sS'name'
p67336
S'seed'
p67337
sS'required'
p67338
I00
sS'group_name'
p67339
S'Advanced'
p67340
sa(dp67341
S'description'
p67342
g3
sS'cpp_type'
p67343
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67344
sS'default'
p67345
S'ComputeRSphericalIncrementalStrain'
p67346
sS'name'
p67347
S'type'
p67348
sS'required'
p67349
I00
sS'group_name'
p67350
Nsa(dp67351
S'description'
p67352
S'Flag to correct volumetric locking\n'
p67353
sS'cpp_type'
p67354
S'bool'
p67355
sS'default'
p67356
S'0'
p67357
sS'name'
p67358
S'volumetric_locking_correction'
p67359
sS'required'
p67360
I00
sS'group_name'
p67361
NsasS'name'
p67362
S'/Materials/ComputeRSphericalIncrementalStrain'
p67363
sa(dp67364
S'description'
p67365
S'Compute a small strain 1D spherical symmetry case.\n'
p67366
sS'subblocks'
p67367
NsS'parameters'
p67368
(lp67369
(dp67370
S'description'
p67371
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67372
sS'cpp_type'
p67373
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67374
sS'default'
p67375
g3
sS'name'
p67376
S'base_name'
p67377
sS'required'
p67378
I00
sS'group_name'
p67379
Nsa(dp67380
S'description'
p67381
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67382
sS'cpp_type'
p67383
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67384
sS'default'
p67385
g3
sS'name'
p67386
S'block'
p67387
sS'required'
p67388
I00
sS'group_name'
p67389
Nsa(dp67390
S'description'
p67391
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67392
sS'cpp_type'
p67393
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67394
sS'default'
p67395
g3
sS'name'
p67396
S'boundary'
p67397
sS'required'
p67398
I00
sS'group_name'
p67399
Nsa(dp67400
S'description'
p67401
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67402
sS'cpp_type'
p67403
S'bool'
p67404
sS'default'
p67405
S'1'
p67406
sS'name'
p67407
S'compute'
p67408
sS'required'
p67409
I00
sS'group_name'
p67410
Nsa(dp67411
S'description'
p67412
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67413
sS'cpp_type'
p67414
S'bool'
p67415
sS'default'
p67416
S'0'
p67417
sS'name'
p67418
S'constant_on_elem'
p67419
sS'required'
p67420
I00
sS'group_name'
p67421
S'Advanced'
p67422
sa(dp67423
S'description'
p67424
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67425
sS'cpp_type'
p67426
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67427
sS'default'
p67428
g3
sS'name'
p67429
S'control_tags'
p67430
sS'required'
p67431
I00
sS'group_name'
p67432
S'Advanced'
p67433
sa(dp67434
S'description'
p67435
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p67436
sS'cpp_type'
p67437
S'std::vector<VariableName>'
p67438
sS'default'
p67439
g3
sS'name'
p67440
S'displacements'
p67441
sS'required'
p67442
I01
sS'group_name'
p67443
Nsa(dp67444
S'description'
p67445
S'List of eigenstrains to be applied in this strain calculation\n'
p67446
sS'cpp_type'
p67447
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67448
sS'default'
p67449
g3
sS'name'
p67450
S'eigenstrain_names'
p67451
sS'required'
p67452
I00
sS'group_name'
p67453
Nsa(dp67454
S'description'
p67455
S'Set the enabled status of the MooseObject.\n'
p67456
sS'cpp_type'
p67457
S'bool'
p67458
sS'default'
p67459
S'1'
p67460
sS'name'
p67461
S'enable'
p67462
sS'required'
p67463
I00
sS'group_name'
p67464
S'Advanced'
p67465
sa(dp67466
S'description'
p67467
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67468
sS'cpp_type'
p67469
S'bool'
p67470
sS'default'
p67471
S'1'
p67472
sS'name'
p67473
S'implicit'
p67474
sS'required'
p67475
I00
sS'group_name'
p67476
S'Advanced'
p67477
sa(dp67478
S'description'
p67479
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67480
sS'cpp_type'
p67481
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67482
sS'default'
p67483
g3
sS'name'
p67484
S'output_properties'
p67485
sS'required'
p67486
I00
sS'group_name'
p67487
S'Outputs'
p67488
sa(dp67489
S'description'
p67490
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67491
sS'cpp_type'
p67492
S'std::vector<OutputName, std::allocator<OutputName> >'
p67493
sS'default'
p67494
S'none'
p67495
sS'name'
p67496
S'outputs'
p67497
sS'required'
p67498
I00
sS'group_name'
p67499
S'Outputs'
p67500
sa(dp67501
S'description'
p67502
S'The seed for the master random number generator\n'
p67503
sS'cpp_type'
p67504
S'unsigned int'
p67505
sS'default'
p67506
S'0'
p67507
sS'name'
p67508
S'seed'
p67509
sS'required'
p67510
I00
sS'group_name'
p67511
S'Advanced'
p67512
sa(dp67513
S'description'
p67514
g3
sS'cpp_type'
p67515
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67516
sS'default'
p67517
S'ComputeRSphericalSmallStrain'
p67518
sS'name'
p67519
S'type'
p67520
sS'required'
p67521
I00
sS'group_name'
p67522
Nsa(dp67523
S'description'
p67524
S'Flag to correct volumetric locking\n'
p67525
sS'cpp_type'
p67526
S'bool'
p67527
sS'default'
p67528
S'0'
p67529
sS'name'
p67530
S'volumetric_locking_correction'
p67531
sS'required'
p67532
I00
sS'group_name'
p67533
NsasS'name'
p67534
S'/Materials/ComputeRSphericalSmallStrain'
p67535
sa(dp67536
S'description'
p67537
S'Compute stress using a radial return mapping implementation for creep or creep combined with plasticity\n'
p67538
sS'subblocks'
p67539
NsS'parameters'
p67540
(lp67541
(dp67542
S'description'
p67543
S'Absolute convergence tolerance for the stress update iterations over the stress change after all update materials are called\n'
p67544
sS'cpp_type'
p67545
S'double'
p67546
sS'default'
p67547
S'1e-05'
p67548
sS'name'
p67549
S'absolute_tolerance'
p67550
sS'required'
p67551
I00
sS'group_name'
p67552
Nsa(dp67553
S'description'
p67554
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67555
sS'cpp_type'
p67556
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67557
sS'default'
p67558
g3
sS'name'
p67559
S'base_name'
p67560
sS'required'
p67561
I00
sS'group_name'
p67562
Nsa(dp67563
S'description'
p67564
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67565
sS'cpp_type'
p67566
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67567
sS'default'
p67568
g3
sS'name'
p67569
S'block'
p67570
sS'required'
p67571
I00
sS'group_name'
p67572
Nsa(dp67573
S'description'
p67574
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67575
sS'cpp_type'
p67576
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67577
sS'default'
p67578
g3
sS'name'
p67579
S'boundary'
p67580
sS'required'
p67581
I00
sS'group_name'
p67582
Nsa(dp67583
S'description'
p67584
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67585
sS'cpp_type'
p67586
S'bool'
p67587
sS'default'
p67588
S'1'
p67589
sS'name'
p67590
S'compute'
p67591
sS'required'
p67592
I00
sS'group_name'
p67593
Nsa(dp67594
S'description'
p67595
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67596
sS'cpp_type'
p67597
S'bool'
p67598
sS'default'
p67599
S'0'
p67600
sS'name'
p67601
S'constant_on_elem'
p67602
sS'required'
p67603
I00
sS'group_name'
p67604
S'Advanced'
p67605
sa(dp67606
S'description'
p67607
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67608
sS'cpp_type'
p67609
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67610
sS'default'
p67611
g3
sS'name'
p67612
S'control_tags'
p67613
sS'required'
p67614
I00
sS'group_name'
p67615
S'Advanced'
p67616
sa(dp67617
S'description'
p67618
S'Set the enabled status of the MooseObject.\n'
p67619
sS'cpp_type'
p67620
S'bool'
p67621
sS'default'
p67622
S'1'
p67623
sS'name'
p67624
S'enable'
p67625
sS'required'
p67626
I00
sS'group_name'
p67627
S'Advanced'
p67628
sa(dp67629
S'description'
p67630
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67631
sS'cpp_type'
p67632
S'bool'
p67633
sS'default'
p67634
S'1'
p67635
sS'name'
p67636
S'implicit'
p67637
sS'required'
p67638
I00
sS'group_name'
p67639
S'Advanced'
p67640
sa(dp67641
S'description'
p67642
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p67643
sS'cpp_type'
p67644
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p67645
sS'default'
p67646
g3
sS'name'
p67647
S'initial_stress'
p67648
sS'required'
p67649
I00
sS'group_name'
p67650
Nsa(dp67651
S'description'
p67652
S'Maximum number of the stress update iterations over the stress change after all update materials are called\n'
p67653
sS'cpp_type'
p67654
S'unsigned int'
p67655
sS'default'
p67656
S'30'
p67657
sS'name'
p67658
S'max_iterations'
p67659
sS'required'
p67660
I00
sS'group_name'
p67661
Nsa(dp67662
S'description'
p67663
S'Set to true to output stress update iteration information over the stress change\n'
p67664
sS'cpp_type'
p67665
S'bool'
p67666
sS'default'
p67667
S'0'
p67668
sS'name'
p67669
S'output_iteration_info'
p67670
sS'required'
p67671
I00
sS'group_name'
p67672
Nsa(dp67673
S'description'
p67674
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67675
sS'cpp_type'
p67676
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67677
sS'default'
p67678
g3
sS'name'
p67679
S'output_properties'
p67680
sS'required'
p67681
I00
sS'group_name'
p67682
S'Outputs'
p67683
sa(dp67684
S'description'
p67685
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67686
sS'cpp_type'
p67687
S'std::vector<OutputName, std::allocator<OutputName> >'
p67688
sS'default'
p67689
S'none'
p67690
sS'name'
p67691
S'outputs'
p67692
sS'required'
p67693
I00
sS'group_name'
p67694
S'Outputs'
p67695
sa(dp67696
S'description'
p67697
S'Relative convergence tolerance for the stress update iterations over the stress change after all update materials are called\n'
p67698
sS'cpp_type'
p67699
S'double'
p67700
sS'default'
p67701
S'1e-05'
p67702
sS'name'
p67703
S'relative_tolerance'
p67704
sS'required'
p67705
I00
sS'group_name'
p67706
Nsa(dp67707
S'description'
p67708
S'The material objects to use to calculate stress. Note: specify creep models first and plasticity models second.\n'
p67709
sS'cpp_type'
p67710
S'std::vector<MaterialName, std::allocator<MaterialName> >'
p67711
sS'default'
p67712
g3
sS'name'
p67713
S'return_mapping_models'
p67714
sS'required'
p67715
I01
sS'group_name'
p67716
Nsa(dp67717
S'description'
p67718
S'The seed for the master random number generator\n'
p67719
sS'cpp_type'
p67720
S'unsigned int'
p67721
sS'default'
p67722
S'0'
p67723
sS'name'
p67724
S'seed'
p67725
sS'required'
p67726
I00
sS'group_name'
p67727
S'Advanced'
p67728
sa(dp67729
S'description'
p67730
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p67731
sS'cpp_type'
p67732
S'bool'
p67733
sS'default'
p67734
S'0'
p67735
sS'name'
p67736
S'store_stress_old'
p67737
sS'required'
p67738
I00
sS'group_name'
p67739
Nsa(dp67740
S'description'
p67741
g3
sS'cpp_type'
p67742
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67743
sS'default'
p67744
S'ComputeReturnMappingStress'
p67745
sS'name'
p67746
S'type'
p67747
sS'required'
p67748
I00
sS'group_name'
p67749
NsasS'name'
p67750
S'/Materials/ComputeReturnMappingStress'
p67751
sa(dp67752
S'description'
p67753
S'Compute a small strain.\n'
p67754
sS'subblocks'
p67755
NsS'parameters'
p67756
(lp67757
(dp67758
S'description'
p67759
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67760
sS'cpp_type'
p67761
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67762
sS'default'
p67763
g3
sS'name'
p67764
S'base_name'
p67765
sS'required'
p67766
I00
sS'group_name'
p67767
Nsa(dp67768
S'description'
p67769
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67770
sS'cpp_type'
p67771
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67772
sS'default'
p67773
g3
sS'name'
p67774
S'block'
p67775
sS'required'
p67776
I00
sS'group_name'
p67777
Nsa(dp67778
S'description'
p67779
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67780
sS'cpp_type'
p67781
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67782
sS'default'
p67783
g3
sS'name'
p67784
S'boundary'
p67785
sS'required'
p67786
I00
sS'group_name'
p67787
Nsa(dp67788
S'description'
p67789
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67790
sS'cpp_type'
p67791
S'bool'
p67792
sS'default'
p67793
S'1'
p67794
sS'name'
p67795
S'compute'
p67796
sS'required'
p67797
I00
sS'group_name'
p67798
Nsa(dp67799
S'description'
p67800
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67801
sS'cpp_type'
p67802
S'bool'
p67803
sS'default'
p67804
S'0'
p67805
sS'name'
p67806
S'constant_on_elem'
p67807
sS'required'
p67808
I00
sS'group_name'
p67809
S'Advanced'
p67810
sa(dp67811
S'description'
p67812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67813
sS'cpp_type'
p67814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67815
sS'default'
p67816
g3
sS'name'
p67817
S'control_tags'
p67818
sS'required'
p67819
I00
sS'group_name'
p67820
S'Advanced'
p67821
sa(dp67822
S'description'
p67823
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p67824
sS'cpp_type'
p67825
S'std::vector<VariableName>'
p67826
sS'default'
p67827
g3
sS'name'
p67828
S'displacements'
p67829
sS'required'
p67830
I01
sS'group_name'
p67831
Nsa(dp67832
S'description'
p67833
S'List of eigenstrains to be applied in this strain calculation\n'
p67834
sS'cpp_type'
p67835
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67836
sS'default'
p67837
g3
sS'name'
p67838
S'eigenstrain_names'
p67839
sS'required'
p67840
I00
sS'group_name'
p67841
Nsa(dp67842
S'description'
p67843
S'Set the enabled status of the MooseObject.\n'
p67844
sS'cpp_type'
p67845
S'bool'
p67846
sS'default'
p67847
S'1'
p67848
sS'name'
p67849
S'enable'
p67850
sS'required'
p67851
I00
sS'group_name'
p67852
S'Advanced'
p67853
sa(dp67854
S'description'
p67855
S'Determines whether this object is calculated using an implicit or explicit form\n'
p67856
sS'cpp_type'
p67857
S'bool'
p67858
sS'default'
p67859
S'1'
p67860
sS'name'
p67861
S'implicit'
p67862
sS'required'
p67863
I00
sS'group_name'
p67864
S'Advanced'
p67865
sa(dp67866
S'description'
p67867
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67868
sS'cpp_type'
p67869
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67870
sS'default'
p67871
g3
sS'name'
p67872
S'output_properties'
p67873
sS'required'
p67874
I00
sS'group_name'
p67875
S'Outputs'
p67876
sa(dp67877
S'description'
p67878
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67879
sS'cpp_type'
p67880
S'std::vector<OutputName, std::allocator<OutputName> >'
p67881
sS'default'
p67882
S'none'
p67883
sS'name'
p67884
S'outputs'
p67885
sS'required'
p67886
I00
sS'group_name'
p67887
S'Outputs'
p67888
sa(dp67889
S'description'
p67890
S'The seed for the master random number generator\n'
p67891
sS'cpp_type'
p67892
S'unsigned int'
p67893
sS'default'
p67894
S'0'
p67895
sS'name'
p67896
S'seed'
p67897
sS'required'
p67898
I00
sS'group_name'
p67899
S'Advanced'
p67900
sa(dp67901
S'description'
p67902
g3
sS'cpp_type'
p67903
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67904
sS'default'
p67905
S'ComputeSmallStrain'
p67906
sS'name'
p67907
S'type'
p67908
sS'required'
p67909
I00
sS'group_name'
p67910
Nsa(dp67911
S'description'
p67912
S'Flag to correct volumetric locking\n'
p67913
sS'cpp_type'
p67914
S'bool'
p67915
sS'default'
p67916
S'0'
p67917
sS'name'
p67918
S'volumetric_locking_correction'
p67919
sS'required'
p67920
I00
sS'group_name'
p67921
NsasS'name'
p67922
S'/Materials/ComputeSmallStrain'
p67923
sa(dp67924
S'description'
p67925
S'Compute stress after subtracting inelastic strain increments\n'
p67926
sS'subblocks'
p67927
NsS'parameters'
p67928
(lp67929
(dp67930
S'description'
p67931
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67932
sS'cpp_type'
p67933
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67934
sS'default'
p67935
g3
sS'name'
p67936
S'base_name'
p67937
sS'required'
p67938
I00
sS'group_name'
p67939
Nsa(dp67940
S'description'
p67941
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67942
sS'cpp_type'
p67943
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67944
sS'default'
p67945
g3
sS'name'
p67946
S'block'
p67947
sS'required'
p67948
I00
sS'group_name'
p67949
Nsa(dp67950
S'description'
p67951
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67952
sS'cpp_type'
p67953
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67954
sS'default'
p67955
g3
sS'name'
p67956
S'boundary'
p67957
sS'required'
p67958
I00
sS'group_name'
p67959
Nsa(dp67960
S'description'
p67961
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p67962
sS'cpp_type'
p67963
S'bool'
p67964
sS'default'
p67965
S'1'
p67966
sS'name'
p67967
S'compute'
p67968
sS'required'
p67969
I00
sS'group_name'
p67970
Nsa(dp67971
S'description'
p67972
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p67973
sS'cpp_type'
p67974
S'bool'
p67975
sS'default'
p67976
S'0'
p67977
sS'name'
p67978
S'constant_on_elem'
p67979
sS'required'
p67980
I00
sS'group_name'
p67981
S'Advanced'
p67982
sa(dp67983
S'description'
p67984
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67985
sS'cpp_type'
p67986
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67987
sS'default'
p67988
g3
sS'name'
p67989
S'control_tags'
p67990
sS'required'
p67991
I00
sS'group_name'
p67992
S'Advanced'
p67993
sa(dp67994
S'description'
p67995
S'Set the enabled status of the MooseObject.\n'
p67996
sS'cpp_type'
p67997
S'bool'
p67998
sS'default'
p67999
S'1'
p68000
sS'name'
p68001
S'enable'
p68002
sS'required'
p68003
I00
sS'group_name'
p68004
S'Advanced'
p68005
sa(dp68006
S'description'
p68007
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68008
sS'cpp_type'
p68009
S'bool'
p68010
sS'default'
p68011
S'1'
p68012
sS'name'
p68013
S'implicit'
p68014
sS'required'
p68015
I00
sS'group_name'
p68016
S'Advanced'
p68017
sa(dp68018
S'description'
p68019
S'Names of inelastic strain properties\n'
p68020
sS'cpp_type'
p68021
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p68022
sS'default'
p68023
g3
sS'name'
p68024
S'inelastic_strain_names'
p68025
sS'required'
p68026
I00
sS'group_name'
p68027
Nsa(dp68028
S'description'
p68029
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p68030
sS'cpp_type'
p68031
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p68032
sS'default'
p68033
g3
sS'name'
p68034
S'initial_stress'
p68035
sS'required'
p68036
I00
sS'group_name'
p68037
Nsa(dp68038
S'description'
p68039
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68040
sS'cpp_type'
p68041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68042
sS'default'
p68043
g3
sS'name'
p68044
S'output_properties'
p68045
sS'required'
p68046
I00
sS'group_name'
p68047
S'Outputs'
p68048
sa(dp68049
S'description'
p68050
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68051
sS'cpp_type'
p68052
S'std::vector<OutputName, std::allocator<OutputName> >'
p68053
sS'default'
p68054
S'none'
p68055
sS'name'
p68056
S'outputs'
p68057
sS'required'
p68058
I00
sS'group_name'
p68059
S'Outputs'
p68060
sa(dp68061
S'description'
p68062
S'The seed for the master random number generator\n'
p68063
sS'cpp_type'
p68064
S'unsigned int'
p68065
sS'default'
p68066
S'0'
p68067
sS'name'
p68068
S'seed'
p68069
sS'required'
p68070
I00
sS'group_name'
p68071
S'Advanced'
p68072
sa(dp68073
S'description'
p68074
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p68075
sS'cpp_type'
p68076
S'bool'
p68077
sS'default'
p68078
S'0'
p68079
sS'name'
p68080
S'store_stress_old'
p68081
sS'required'
p68082
I00
sS'group_name'
p68083
Nsa(dp68084
S'description'
p68085
g3
sS'cpp_type'
p68086
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68087
sS'default'
p68088
S'ComputeStrainIncrementBasedStress'
p68089
sS'name'
p68090
S'type'
p68091
sS'required'
p68092
I00
sS'group_name'
p68093
NsasS'name'
p68094
S'/Materials/ComputeStrainIncrementBasedStress'
p68095
sa(dp68096
S'description'
p68097
S'Computes eigenstrain due to thermal expansion with a constant coefficient\n'
p68098
sS'subblocks'
p68099
NsS'parameters'
p68100
(lp68101
(dp68102
S'description'
p68103
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68104
sS'cpp_type'
p68105
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68106
sS'default'
p68107
g3
sS'name'
p68108
S'base_name'
p68109
sS'required'
p68110
I00
sS'group_name'
p68111
Nsa(dp68112
S'description'
p68113
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68114
sS'cpp_type'
p68115
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68116
sS'default'
p68117
g3
sS'name'
p68118
S'block'
p68119
sS'required'
p68120
I00
sS'group_name'
p68121
Nsa(dp68122
S'description'
p68123
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68124
sS'cpp_type'
p68125
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68126
sS'default'
p68127
g3
sS'name'
p68128
S'boundary'
p68129
sS'required'
p68130
I00
sS'group_name'
p68131
Nsa(dp68132
S'description'
p68133
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68134
sS'cpp_type'
p68135
S'bool'
p68136
sS'default'
p68137
S'1'
p68138
sS'name'
p68139
S'compute'
p68140
sS'required'
p68141
I00
sS'group_name'
p68142
Nsa(dp68143
S'description'
p68144
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68145
sS'cpp_type'
p68146
S'bool'
p68147
sS'default'
p68148
S'0'
p68149
sS'name'
p68150
S'constant_on_elem'
p68151
sS'required'
p68152
I00
sS'group_name'
p68153
S'Advanced'
p68154
sa(dp68155
S'description'
p68156
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68157
sS'cpp_type'
p68158
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68159
sS'default'
p68160
g3
sS'name'
p68161
S'control_tags'
p68162
sS'required'
p68163
I00
sS'group_name'
p68164
S'Advanced'
p68165
sa(dp68166
S'description'
p68167
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68168
sS'cpp_type'
p68169
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68170
sS'default'
p68171
g3
sS'name'
p68172
S'eigenstrain_name'
p68173
sS'required'
p68174
I01
sS'group_name'
p68175
Nsa(dp68176
S'description'
p68177
S'Set the enabled status of the MooseObject.\n'
p68178
sS'cpp_type'
p68179
S'bool'
p68180
sS'default'
p68181
S'1'
p68182
sS'name'
p68183
S'enable'
p68184
sS'required'
p68185
I00
sS'group_name'
p68186
S'Advanced'
p68187
sa(dp68188
S'description'
p68189
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68190
sS'cpp_type'
p68191
S'bool'
p68192
sS'default'
p68193
S'1'
p68194
sS'name'
p68195
S'implicit'
p68196
sS'required'
p68197
I00
sS'group_name'
p68198
S'Advanced'
p68199
sa(dp68200
S'description'
p68201
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p68202
sS'cpp_type'
p68203
S'bool'
p68204
sS'default'
p68205
S'0'
p68206
sS'name'
p68207
S'incremental_form'
p68208
sS'required'
p68209
I00
sS'group_name'
p68210
Nsa(dp68211
S'description'
p68212
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68213
sS'cpp_type'
p68214
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68215
sS'default'
p68216
g3
sS'name'
p68217
S'output_properties'
p68218
sS'required'
p68219
I00
sS'group_name'
p68220
S'Outputs'
p68221
sa(dp68222
S'description'
p68223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68224
sS'cpp_type'
p68225
S'std::vector<OutputName, std::allocator<OutputName> >'
p68226
sS'default'
p68227
S'none'
p68228
sS'name'
p68229
S'outputs'
p68230
sS'required'
p68231
I00
sS'group_name'
p68232
S'Outputs'
p68233
sa(dp68234
S'description'
p68235
S'The seed for the master random number generator\n'
p68236
sS'cpp_type'
p68237
S'unsigned int'
p68238
sS'default'
p68239
S'0'
p68240
sS'name'
p68241
S'seed'
p68242
sS'required'
p68243
I00
sS'group_name'
p68244
S'Advanced'
p68245
sa(dp68246
S'description'
p68247
S'Reference temperature for thermal eigenstrain calculation\n'
p68248
sS'cpp_type'
p68249
S'double'
p68250
sS'default'
p68251
g3
sS'name'
p68252
S'stress_free_reference_temperature'
p68253
sS'required'
p68254
I00
sS'group_name'
p68255
Nsa(dp68256
S'description'
p68257
S'Reference temperature for thermal eigenstrain calculation\n'
p68258
sS'cpp_type'
p68259
S'double'
p68260
sS'default'
p68261
g3
sS'name'
p68262
S'stress_free_temperature'
p68263
sS'required'
p68264
I00
sS'group_name'
p68265
Nsa(dp68266
S'description'
p68267
S'Coupled temperature\n'
p68268
sS'cpp_type'
p68269
S'std::vector<VariableName>'
p68270
sS'default'
p68271
g3
sS'name'
p68272
S'temperature'
p68273
sS'required'
p68274
I00
sS'group_name'
p68275
Nsa(dp68276
S'description'
p68277
S'Thermal expansion coefficient\n'
p68278
sS'cpp_type'
p68279
S'double'
p68280
sS'default'
p68281
g3
sS'name'
p68282
S'thermal_expansion_coeff'
p68283
sS'required'
p68284
I00
sS'group_name'
p68285
Nsa(dp68286
S'description'
p68287
g3
sS'cpp_type'
p68288
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68289
sS'default'
p68290
S'ComputeThermalExpansionEigenStrain'
p68291
sS'name'
p68292
S'type'
p68293
sS'required'
p68294
I00
sS'group_name'
p68295
Nsa(dp68296
S'description'
p68297
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68298
sS'cpp_type'
p68299
S'bool'
p68300
sS'default'
p68301
S'0'
p68302
sS'name'
p68303
S'use_displaced_mesh'
p68304
sS'required'
p68305
I00
sS'group_name'
p68306
S'Advanced'
p68307
sasS'name'
p68308
S'/Materials/ComputeThermalExpansionEigenStrain'
p68309
sa(dp68310
S'description'
p68311
S'Computes eigenstrain due to thermal expansion with a constant coefficient\n'
p68312
sS'subblocks'
p68313
NsS'parameters'
p68314
(lp68315
(dp68316
S'description'
p68317
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68318
sS'cpp_type'
p68319
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68320
sS'default'
p68321
g3
sS'name'
p68322
S'base_name'
p68323
sS'required'
p68324
I00
sS'group_name'
p68325
Nsa(dp68326
S'description'
p68327
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68328
sS'cpp_type'
p68329
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68330
sS'default'
p68331
g3
sS'name'
p68332
S'block'
p68333
sS'required'
p68334
I00
sS'group_name'
p68335
Nsa(dp68336
S'description'
p68337
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68338
sS'cpp_type'
p68339
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68340
sS'default'
p68341
g3
sS'name'
p68342
S'boundary'
p68343
sS'required'
p68344
I00
sS'group_name'
p68345
Nsa(dp68346
S'description'
p68347
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68348
sS'cpp_type'
p68349
S'bool'
p68350
sS'default'
p68351
S'1'
p68352
sS'name'
p68353
S'compute'
p68354
sS'required'
p68355
I00
sS'group_name'
p68356
Nsa(dp68357
S'description'
p68358
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68359
sS'cpp_type'
p68360
S'bool'
p68361
sS'default'
p68362
S'0'
p68363
sS'name'
p68364
S'constant_on_elem'
p68365
sS'required'
p68366
I00
sS'group_name'
p68367
S'Advanced'
p68368
sa(dp68369
S'description'
p68370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68371
sS'cpp_type'
p68372
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68373
sS'default'
p68374
g3
sS'name'
p68375
S'control_tags'
p68376
sS'required'
p68377
I00
sS'group_name'
p68378
S'Advanced'
p68379
sa(dp68380
S'description'
p68381
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68382
sS'cpp_type'
p68383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68384
sS'default'
p68385
g3
sS'name'
p68386
S'eigenstrain_name'
p68387
sS'required'
p68388
I01
sS'group_name'
p68389
Nsa(dp68390
S'description'
p68391
S'Set the enabled status of the MooseObject.\n'
p68392
sS'cpp_type'
p68393
S'bool'
p68394
sS'default'
p68395
S'1'
p68396
sS'name'
p68397
S'enable'
p68398
sS'required'
p68399
I00
sS'group_name'
p68400
S'Advanced'
p68401
sa(dp68402
S'description'
p68403
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68404
sS'cpp_type'
p68405
S'bool'
p68406
sS'default'
p68407
S'1'
p68408
sS'name'
p68409
S'implicit'
p68410
sS'required'
p68411
I00
sS'group_name'
p68412
S'Advanced'
p68413
sa(dp68414
S'description'
p68415
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p68416
sS'cpp_type'
p68417
S'bool'
p68418
sS'default'
p68419
S'0'
p68420
sS'name'
p68421
S'incremental_form'
p68422
sS'required'
p68423
I00
sS'group_name'
p68424
Nsa(dp68425
S'description'
p68426
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68427
sS'cpp_type'
p68428
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68429
sS'default'
p68430
g3
sS'name'
p68431
S'output_properties'
p68432
sS'required'
p68433
I00
sS'group_name'
p68434
S'Outputs'
p68435
sa(dp68436
S'description'
p68437
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68438
sS'cpp_type'
p68439
S'std::vector<OutputName, std::allocator<OutputName> >'
p68440
sS'default'
p68441
S'none'
p68442
sS'name'
p68443
S'outputs'
p68444
sS'required'
p68445
I00
sS'group_name'
p68446
S'Outputs'
p68447
sa(dp68448
S'description'
p68449
S'The seed for the master random number generator\n'
p68450
sS'cpp_type'
p68451
S'unsigned int'
p68452
sS'default'
p68453
S'0'
p68454
sS'name'
p68455
S'seed'
p68456
sS'required'
p68457
I00
sS'group_name'
p68458
S'Advanced'
p68459
sa(dp68460
S'description'
p68461
S'Reference temperature for thermal eigenstrain calculation\n'
p68462
sS'cpp_type'
p68463
S'double'
p68464
sS'default'
p68465
g3
sS'name'
p68466
S'stress_free_reference_temperature'
p68467
sS'required'
p68468
I00
sS'group_name'
p68469
Nsa(dp68470
S'description'
p68471
S'Reference temperature for thermal eigenstrain calculation\n'
p68472
sS'cpp_type'
p68473
S'double'
p68474
sS'default'
p68475
g3
sS'name'
p68476
S'stress_free_temperature'
p68477
sS'required'
p68478
I00
sS'group_name'
p68479
Nsa(dp68480
S'description'
p68481
S'Coupled temperature\n'
p68482
sS'cpp_type'
p68483
S'std::vector<VariableName>'
p68484
sS'default'
p68485
g3
sS'name'
p68486
S'temperature'
p68487
sS'required'
p68488
I00
sS'group_name'
p68489
Nsa(dp68490
S'description'
p68491
S'Thermal expansion coefficient\n'
p68492
sS'cpp_type'
p68493
S'double'
p68494
sS'default'
p68495
g3
sS'name'
p68496
S'thermal_expansion_coeff'
p68497
sS'required'
p68498
I00
sS'group_name'
p68499
Nsa(dp68500
S'description'
p68501
g3
sS'cpp_type'
p68502
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68503
sS'default'
p68504
S'ComputeThermalExpansionEigenstrain'
p68505
sS'name'
p68506
S'type'
p68507
sS'required'
p68508
I00
sS'group_name'
p68509
Nsa(dp68510
S'description'
p68511
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68512
sS'cpp_type'
p68513
S'bool'
p68514
sS'default'
p68515
S'0'
p68516
sS'name'
p68517
S'use_displaced_mesh'
p68518
sS'required'
p68519
I00
sS'group_name'
p68520
S'Advanced'
p68521
sasS'name'
p68522
S'/Materials/ComputeThermalExpansionEigenstrain'
p68523
sa(dp68524
S'description'
p68525
S'Computes Eigenstrain based on material property tensor base\n'
p68526
sS'subblocks'
p68527
NsS'parameters'
p68528
(lp68529
(dp68530
S'description'
p68531
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68532
sS'cpp_type'
p68533
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68534
sS'default'
p68535
g3
sS'name'
p68536
S'base_name'
p68537
sS'required'
p68538
I00
sS'group_name'
p68539
Nsa(dp68540
S'description'
p68541
S'Name of base tensor property\n'
p68542
sS'cpp_type'
p68543
S'MaterialPropertyName'
p68544
sS'default'
p68545
g3
sS'name'
p68546
S'base_tensor_property_name'
p68547
sS'required'
p68548
I01
sS'group_name'
p68549
Nsa(dp68550
S'description'
p68551
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68552
sS'cpp_type'
p68553
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68554
sS'default'
p68555
g3
sS'name'
p68556
S'block'
p68557
sS'required'
p68558
I00
sS'group_name'
p68559
Nsa(dp68560
S'description'
p68561
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68562
sS'cpp_type'
p68563
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68564
sS'default'
p68565
g3
sS'name'
p68566
S'boundary'
p68567
sS'required'
p68568
I00
sS'group_name'
p68569
Nsa(dp68570
S'description'
p68571
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68572
sS'cpp_type'
p68573
S'bool'
p68574
sS'default'
p68575
S'1'
p68576
sS'name'
p68577
S'compute'
p68578
sS'required'
p68579
I00
sS'group_name'
p68580
Nsa(dp68581
S'description'
p68582
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68583
sS'cpp_type'
p68584
S'bool'
p68585
sS'default'
p68586
S'0'
p68587
sS'name'
p68588
S'constant_on_elem'
p68589
sS'required'
p68590
I00
sS'group_name'
p68591
S'Advanced'
p68592
sa(dp68593
S'description'
p68594
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68595
sS'cpp_type'
p68596
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68597
sS'default'
p68598
g3
sS'name'
p68599
S'control_tags'
p68600
sS'required'
p68601
I00
sS'group_name'
p68602
S'Advanced'
p68603
sa(dp68604
S'description'
p68605
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68606
sS'cpp_type'
p68607
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68608
sS'default'
p68609
g3
sS'name'
p68610
S'eigenstrain_name'
p68611
sS'required'
p68612
I01
sS'group_name'
p68613
Nsa(dp68614
S'description'
p68615
S'Set the enabled status of the MooseObject.\n'
p68616
sS'cpp_type'
p68617
S'bool'
p68618
sS'default'
p68619
S'1'
p68620
sS'name'
p68621
S'enable'
p68622
sS'required'
p68623
I00
sS'group_name'
p68624
S'Advanced'
p68625
sa(dp68626
S'description'
p68627
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68628
sS'cpp_type'
p68629
S'bool'
p68630
sS'default'
p68631
S'1'
p68632
sS'name'
p68633
S'implicit'
p68634
sS'required'
p68635
I00
sS'group_name'
p68636
S'Advanced'
p68637
sa(dp68638
S'description'
p68639
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p68640
sS'cpp_type'
p68641
S'bool'
p68642
sS'default'
p68643
S'0'
p68644
sS'name'
p68645
S'incremental_form'
p68646
sS'required'
p68647
I00
sS'group_name'
p68648
Nsa(dp68649
S'description'
p68650
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p68651
sS'cpp_type'
p68652
S'std::vector<double, std::allocator<double> >'
p68653
sS'default'
p68654
g3
sS'name'
p68655
S'offset_tensor'
p68656
sS'required'
p68657
I00
sS'group_name'
p68658
Nsa(dp68659
S'description'
p68660
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68661
sS'cpp_type'
p68662
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68663
sS'default'
p68664
g3
sS'name'
p68665
S'output_properties'
p68666
sS'required'
p68667
I00
sS'group_name'
p68668
S'Outputs'
p68669
sa(dp68670
S'description'
p68671
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68672
sS'cpp_type'
p68673
S'std::vector<OutputName, std::allocator<OutputName> >'
p68674
sS'default'
p68675
S'none'
p68676
sS'name'
p68677
S'outputs'
p68678
sS'required'
p68679
I00
sS'group_name'
p68680
S'Outputs'
p68681
sa(dp68682
S'description'
p68683
S'Name of material defining the variable dependence\n'
p68684
sS'cpp_type'
p68685
S'MaterialPropertyName'
p68686
sS'default'
p68687
S'1'
p68688
sS'name'
p68689
S'prefactor'
p68690
sS'required'
p68691
I00
sS'group_name'
p68692
Nsa(dp68693
S'description'
p68694
S'The seed for the master random number generator\n'
p68695
sS'cpp_type'
p68696
S'unsigned int'
p68697
sS'default'
p68698
S'0'
p68699
sS'name'
p68700
S'seed'
p68701
sS'required'
p68702
I00
sS'group_name'
p68703
S'Advanced'
p68704
sa(dp68705
S'description'
p68706
g3
sS'cpp_type'
p68707
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68708
sS'default'
p68709
S'ComputeVariableBaseEigenStrain'
p68710
sS'name'
p68711
S'type'
p68712
sS'required'
p68713
I00
sS'group_name'
p68714
Nsa(dp68715
S'description'
p68716
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68717
sS'cpp_type'
p68718
S'bool'
p68719
sS'default'
p68720
S'0'
p68721
sS'name'
p68722
S'use_displaced_mesh'
p68723
sS'required'
p68724
I00
sS'group_name'
p68725
S'Advanced'
p68726
sasS'name'
p68727
S'/Materials/ComputeVariableBaseEigenStrain'
p68728
sa(dp68729
S'description'
p68730
S'Computes an Eigenstrain and its derivatives that is a function of multiple variables, where the prefactor is defined in a derivative material\n'
p68731
sS'subblocks'
p68732
NsS'parameters'
p68733
(lp68734
(dp68735
S'description'
p68736
S'variable dependencies for the prefactor\n'
p68737
sS'cpp_type'
p68738
S'std::vector<VariableName>'
p68739
sS'default'
p68740
g3
sS'name'
p68741
S'args'
p68742
sS'required'
p68743
I01
sS'group_name'
p68744
Nsa(dp68745
S'description'
p68746
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68747
sS'cpp_type'
p68748
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68749
sS'default'
p68750
g3
sS'name'
p68751
S'base_name'
p68752
sS'required'
p68753
I00
sS'group_name'
p68754
Nsa(dp68755
S'description'
p68756
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68757
sS'cpp_type'
p68758
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68759
sS'default'
p68760
g3
sS'name'
p68761
S'block'
p68762
sS'required'
p68763
I00
sS'group_name'
p68764
Nsa(dp68765
S'description'
p68766
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68767
sS'cpp_type'
p68768
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68769
sS'default'
p68770
g3
sS'name'
p68771
S'boundary'
p68772
sS'required'
p68773
I00
sS'group_name'
p68774
Nsa(dp68775
S'description'
p68776
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68777
sS'cpp_type'
p68778
S'bool'
p68779
sS'default'
p68780
S'1'
p68781
sS'name'
p68782
S'compute'
p68783
sS'required'
p68784
I00
sS'group_name'
p68785
Nsa(dp68786
S'description'
p68787
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68788
sS'cpp_type'
p68789
S'bool'
p68790
sS'default'
p68791
S'0'
p68792
sS'name'
p68793
S'constant_on_elem'
p68794
sS'required'
p68795
I00
sS'group_name'
p68796
S'Advanced'
p68797
sa(dp68798
S'description'
p68799
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68800
sS'cpp_type'
p68801
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68802
sS'default'
p68803
g3
sS'name'
p68804
S'control_tags'
p68805
sS'required'
p68806
I00
sS'group_name'
p68807
S'Advanced'
p68808
sa(dp68809
S'description'
p68810
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p68811
sS'cpp_type'
p68812
S'std::vector<double, std::allocator<double> >'
p68813
sS'default'
p68814
g3
sS'name'
p68815
S'eigen_base'
p68816
sS'required'
p68817
I01
sS'group_name'
p68818
Nsa(dp68819
S'description'
p68820
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p68821
sS'cpp_type'
p68822
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68823
sS'default'
p68824
g3
sS'name'
p68825
S'eigenstrain_name'
p68826
sS'required'
p68827
I01
sS'group_name'
p68828
Nsa(dp68829
S'description'
p68830
S'Set the enabled status of the MooseObject.\n'
p68831
sS'cpp_type'
p68832
S'bool'
p68833
sS'default'
p68834
S'1'
p68835
sS'name'
p68836
S'enable'
p68837
sS'required'
p68838
I00
sS'group_name'
p68839
S'Advanced'
p68840
sa(dp68841
S'description'
p68842
S'Determines whether this object is calculated using an implicit or explicit form\n'
p68843
sS'cpp_type'
p68844
S'bool'
p68845
sS'default'
p68846
S'1'
p68847
sS'name'
p68848
S'implicit'
p68849
sS'required'
p68850
I00
sS'group_name'
p68851
S'Advanced'
p68852
sa(dp68853
S'description'
p68854
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p68855
sS'cpp_type'
p68856
S'bool'
p68857
sS'default'
p68858
S'0'
p68859
sS'name'
p68860
S'incremental_form'
p68861
sS'required'
p68862
I00
sS'group_name'
p68863
Nsa(dp68864
S'description'
p68865
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68866
sS'cpp_type'
p68867
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68868
sS'default'
p68869
g3
sS'name'
p68870
S'output_properties'
p68871
sS'required'
p68872
I00
sS'group_name'
p68873
S'Outputs'
p68874
sa(dp68875
S'description'
p68876
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68877
sS'cpp_type'
p68878
S'std::vector<OutputName, std::allocator<OutputName> >'
p68879
sS'default'
p68880
S'none'
p68881
sS'name'
p68882
S'outputs'
p68883
sS'required'
p68884
I00
sS'group_name'
p68885
S'Outputs'
p68886
sa(dp68887
S'description'
p68888
S'Name of material defining the variable dependence\n'
p68889
sS'cpp_type'
p68890
S'MaterialPropertyName'
p68891
sS'default'
p68892
S'1'
p68893
sS'name'
p68894
S'prefactor'
p68895
sS'required'
p68896
I00
sS'group_name'
p68897
Nsa(dp68898
S'description'
p68899
S'The seed for the master random number generator\n'
p68900
sS'cpp_type'
p68901
S'unsigned int'
p68902
sS'default'
p68903
S'0'
p68904
sS'name'
p68905
S'seed'
p68906
sS'required'
p68907
I00
sS'group_name'
p68908
S'Advanced'
p68909
sa(dp68910
S'description'
p68911
g3
sS'cpp_type'
p68912
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68913
sS'default'
p68914
S'ComputeVariableEigenstrain'
p68915
sS'name'
p68916
S'type'
p68917
sS'required'
p68918
I00
sS'group_name'
p68919
Nsa(dp68920
S'description'
p68921
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68922
sS'cpp_type'
p68923
S'bool'
p68924
sS'default'
p68925
S'0'
p68926
sS'name'
p68927
S'use_displaced_mesh'
p68928
sS'required'
p68929
I00
sS'group_name'
p68930
S'Advanced'
p68931
sasS'name'
p68932
S'/Materials/ComputeVariableEigenstrain'
p68933
sa(dp68934
S'description'
p68935
S'Compute elastic stress for finite strains when the elasticity tensor components change, e.g. the elastic constants are a function of temperature\n'
p68936
sS'subblocks'
p68937
NsS'parameters'
p68938
(lp68939
(dp68940
S'description'
p68941
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68942
sS'cpp_type'
p68943
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68944
sS'default'
p68945
g3
sS'name'
p68946
S'base_name'
p68947
sS'required'
p68948
I00
sS'group_name'
p68949
Nsa(dp68950
S'description'
p68951
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68952
sS'cpp_type'
p68953
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68954
sS'default'
p68955
g3
sS'name'
p68956
S'block'
p68957
sS'required'
p68958
I00
sS'group_name'
p68959
Nsa(dp68960
S'description'
p68961
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68962
sS'cpp_type'
p68963
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68964
sS'default'
p68965
g3
sS'name'
p68966
S'boundary'
p68967
sS'required'
p68968
I00
sS'group_name'
p68969
Nsa(dp68970
S'description'
p68971
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p68972
sS'cpp_type'
p68973
S'bool'
p68974
sS'default'
p68975
S'1'
p68976
sS'name'
p68977
S'compute'
p68978
sS'required'
p68979
I00
sS'group_name'
p68980
Nsa(dp68981
S'description'
p68982
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p68983
sS'cpp_type'
p68984
S'bool'
p68985
sS'default'
p68986
S'0'
p68987
sS'name'
p68988
S'constant_on_elem'
p68989
sS'required'
p68990
I00
sS'group_name'
p68991
S'Advanced'
p68992
sa(dp68993
S'description'
p68994
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68995
sS'cpp_type'
p68996
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68997
sS'default'
p68998
g3
sS'name'
p68999
S'control_tags'
p69000
sS'required'
p69001
I00
sS'group_name'
p69002
S'Advanced'
p69003
sa(dp69004
S'description'
p69005
S'Set the enabled status of the MooseObject.\n'
p69006
sS'cpp_type'
p69007
S'bool'
p69008
sS'default'
p69009
S'1'
p69010
sS'name'
p69011
S'enable'
p69012
sS'required'
p69013
I00
sS'group_name'
p69014
S'Advanced'
p69015
sa(dp69016
S'description'
p69017
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69018
sS'cpp_type'
p69019
S'bool'
p69020
sS'default'
p69021
S'1'
p69022
sS'name'
p69023
S'implicit'
p69024
sS'required'
p69025
I00
sS'group_name'
p69026
S'Advanced'
p69027
sa(dp69028
S'description'
p69029
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p69030
sS'cpp_type'
p69031
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p69032
sS'default'
p69033
g3
sS'name'
p69034
S'initial_stress'
p69035
sS'required'
p69036
I00
sS'group_name'
p69037
Nsa(dp69038
S'description'
p69039
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69040
sS'cpp_type'
p69041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69042
sS'default'
p69043
g3
sS'name'
p69044
S'output_properties'
p69045
sS'required'
p69046
I00
sS'group_name'
p69047
S'Outputs'
p69048
sa(dp69049
S'description'
p69050
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69051
sS'cpp_type'
p69052
S'std::vector<OutputName, std::allocator<OutputName> >'
p69053
sS'default'
p69054
S'none'
p69055
sS'name'
p69056
S'outputs'
p69057
sS'required'
p69058
I00
sS'group_name'
p69059
S'Outputs'
p69060
sa(dp69061
S'description'
p69062
S'The seed for the master random number generator\n'
p69063
sS'cpp_type'
p69064
S'unsigned int'
p69065
sS'default'
p69066
S'0'
p69067
sS'name'
p69068
S'seed'
p69069
sS'required'
p69070
I00
sS'group_name'
p69071
S'Advanced'
p69072
sa(dp69073
S'description'
p69074
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p69075
sS'cpp_type'
p69076
S'bool'
p69077
sS'default'
p69078
S'0'
p69079
sS'name'
p69080
S'store_stress_old'
p69081
sS'required'
p69082
I00
sS'group_name'
p69083
Nsa(dp69084
S'description'
p69085
g3
sS'cpp_type'
p69086
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69087
sS'default'
p69088
S'ComputeVariableElasticConstantStress'
p69089
sS'name'
p69090
S'type'
p69091
sS'required'
p69092
I00
sS'group_name'
p69093
NsasS'name'
p69094
S'/Materials/ComputeVariableElasticConstantStress'
p69095
sa(dp69096
S'description'
p69097
S'Compute an isotropic elasticity tensor for elastic constants that change as a function of material properties\n'
p69098
sS'subblocks'
p69099
NsS'parameters'
p69100
(lp69101
(dp69102
S'description'
p69103
S"Variable dependence for the Young's Modulus and Poisson's Ratio materials\n"
p69104
sS'cpp_type'
p69105
S'std::vector<VariableName>'
p69106
sS'default'
p69107
g3
sS'name'
p69108
S'args'
p69109
sS'required'
p69110
I01
sS'group_name'
p69111
Nsa(dp69112
S'description'
p69113
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69114
sS'cpp_type'
p69115
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69116
sS'default'
p69117
g3
sS'name'
p69118
S'base_name'
p69119
sS'required'
p69120
I00
sS'group_name'
p69121
Nsa(dp69122
S'description'
p69123
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69124
sS'cpp_type'
p69125
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69126
sS'default'
p69127
g3
sS'name'
p69128
S'block'
p69129
sS'required'
p69130
I00
sS'group_name'
p69131
Nsa(dp69132
S'description'
p69133
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69134
sS'cpp_type'
p69135
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69136
sS'default'
p69137
g3
sS'name'
p69138
S'boundary'
p69139
sS'required'
p69140
I00
sS'group_name'
p69141
Nsa(dp69142
S'description'
p69143
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69144
sS'cpp_type'
p69145
S'bool'
p69146
sS'default'
p69147
S'1'
p69148
sS'name'
p69149
S'compute'
p69150
sS'required'
p69151
I00
sS'group_name'
p69152
Nsa(dp69153
S'description'
p69154
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69155
sS'cpp_type'
p69156
S'bool'
p69157
sS'default'
p69158
S'0'
p69159
sS'name'
p69160
S'constant_on_elem'
p69161
sS'required'
p69162
I00
sS'group_name'
p69163
S'Advanced'
p69164
sa(dp69165
S'description'
p69166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69167
sS'cpp_type'
p69168
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69169
sS'default'
p69170
g3
sS'name'
p69171
S'control_tags'
p69172
sS'required'
p69173
I00
sS'group_name'
p69174
S'Advanced'
p69175
sa(dp69176
S'description'
p69177
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p69178
sS'cpp_type'
p69179
S'FunctionName'
p69180
sS'default'
p69181
g3
sS'name'
p69182
S'elasticity_tensor_prefactor'
p69183
sS'required'
p69184
I00
sS'group_name'
p69185
Nsa(dp69186
S'description'
p69187
S'Set the enabled status of the MooseObject.\n'
p69188
sS'cpp_type'
p69189
S'bool'
p69190
sS'default'
p69191
S'1'
p69192
sS'name'
p69193
S'enable'
p69194
sS'required'
p69195
I00
sS'group_name'
p69196
S'Advanced'
p69197
sa(dp69198
S'description'
p69199
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69200
sS'cpp_type'
p69201
S'bool'
p69202
sS'default'
p69203
S'1'
p69204
sS'name'
p69205
S'implicit'
p69206
sS'required'
p69207
I00
sS'group_name'
p69208
S'Advanced'
p69209
sa(dp69210
S'description'
p69211
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69212
sS'cpp_type'
p69213
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69214
sS'default'
p69215
g3
sS'name'
p69216
S'output_properties'
p69217
sS'required'
p69218
I00
sS'group_name'
p69219
S'Outputs'
p69220
sa(dp69221
S'description'
p69222
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69223
sS'cpp_type'
p69224
S'std::vector<OutputName, std::allocator<OutputName> >'
p69225
sS'default'
p69226
S'none'
p69227
sS'name'
p69228
S'outputs'
p69229
sS'required'
p69230
I00
sS'group_name'
p69231
S'Outputs'
p69232
sa(dp69233
S'description'
p69234
S"Name of material defining the Poisson's Ratio\n"
p69235
sS'cpp_type'
p69236
S'MaterialPropertyName'
p69237
sS'default'
p69238
g3
sS'name'
p69239
S'poissons_ratio'
p69240
sS'required'
p69241
I01
sS'group_name'
p69242
Nsa(dp69243
S'description'
p69244
S'The seed for the master random number generator\n'
p69245
sS'cpp_type'
p69246
S'unsigned int'
p69247
sS'default'
p69248
S'0'
p69249
sS'name'
p69250
S'seed'
p69251
sS'required'
p69252
I00
sS'group_name'
p69253
S'Advanced'
p69254
sa(dp69255
S'description'
p69256
g3
sS'cpp_type'
p69257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69258
sS'default'
p69259
S'ComputeVariableIsotropicElasticityTensor'
p69260
sS'name'
p69261
S'type'
p69262
sS'required'
p69263
I00
sS'group_name'
p69264
Nsa(dp69265
S'description'
p69266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69267
sS'cpp_type'
p69268
S'bool'
p69269
sS'default'
p69270
S'0'
p69271
sS'name'
p69272
S'use_displaced_mesh'
p69273
sS'required'
p69274
I00
sS'group_name'
p69275
S'Advanced'
p69276
sa(dp69277
S'description'
p69278
S"Name of material defining the Young's Modulus\n"
p69279
sS'cpp_type'
p69280
S'MaterialPropertyName'
p69281
sS'default'
p69282
g3
sS'name'
p69283
S'youngs_modulus'
p69284
sS'required'
p69285
I01
sS'group_name'
p69286
NsasS'name'
p69287
S'/Materials/ComputeVariableIsotropicElasticityTensor'
p69288
sa(dp69289
S'description'
p69290
S'Computes volumetric deformation gradient and adjusts the total deformation gradient\n'
p69291
sS'subblocks'
p69292
NsS'parameters'
p69293
(lp69294
(dp69295
S'description'
p69296
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69297
sS'cpp_type'
p69298
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69299
sS'default'
p69300
g3
sS'name'
p69301
S'block'
p69302
sS'required'
p69303
I00
sS'group_name'
p69304
Nsa(dp69305
S'description'
p69306
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69307
sS'cpp_type'
p69308
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69309
sS'default'
p69310
g3
sS'name'
p69311
S'boundary'
p69312
sS'required'
p69313
I00
sS'group_name'
p69314
Nsa(dp69315
S'description'
p69316
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69317
sS'cpp_type'
p69318
S'bool'
p69319
sS'default'
p69320
S'1'
p69321
sS'name'
p69322
S'compute'
p69323
sS'required'
p69324
I00
sS'group_name'
p69325
Nsa(dp69326
S'description'
p69327
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69328
sS'cpp_type'
p69329
S'bool'
p69330
sS'default'
p69331
S'0'
p69332
sS'name'
p69333
S'constant_on_elem'
p69334
sS'required'
p69335
I00
sS'group_name'
p69336
S'Advanced'
p69337
sa(dp69338
S'description'
p69339
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69340
sS'cpp_type'
p69341
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69342
sS'default'
p69343
g3
sS'name'
p69344
S'control_tags'
p69345
sS'required'
p69346
I00
sS'group_name'
p69347
S'Advanced'
p69348
sa(dp69349
S'description'
p69350
S'Set the enabled status of the MooseObject.\n'
p69351
sS'cpp_type'
p69352
S'bool'
p69353
sS'default'
p69354
S'1'
p69355
sS'name'
p69356
S'enable'
p69357
sS'required'
p69358
I00
sS'group_name'
p69359
S'Advanced'
p69360
sa(dp69361
S'description'
p69362
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69363
sS'cpp_type'
p69364
S'bool'
p69365
sS'default'
p69366
S'1'
p69367
sS'name'
p69368
S'implicit'
p69369
sS'required'
p69370
I00
sS'group_name'
p69371
S'Advanced'
p69372
sa(dp69373
S'description'
p69374
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69375
sS'cpp_type'
p69376
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69377
sS'default'
p69378
g3
sS'name'
p69379
S'output_properties'
p69380
sS'required'
p69381
I00
sS'group_name'
p69382
S'Outputs'
p69383
sa(dp69384
S'description'
p69385
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69386
sS'cpp_type'
p69387
S'std::vector<OutputName, std::allocator<OutputName> >'
p69388
sS'default'
p69389
S'none'
p69390
sS'name'
p69391
S'outputs'
p69392
sS'required'
p69393
I00
sS'group_name'
p69394
S'Outputs'
p69395
sa(dp69396
S'description'
p69397
S'Name of adjusted deformation gradient variable\n'
p69398
sS'cpp_type'
p69399
S'MaterialPropertyName'
p69400
sS'default'
p69401
g3
sS'name'
p69402
S'post_deform_grad_name'
p69403
sS'required'
p69404
I01
sS'group_name'
p69405
Nsa(dp69406
S'description'
p69407
S'Name of pre-adjusted deformation gradient variable\n'
p69408
sS'cpp_type'
p69409
S'MaterialPropertyName'
p69410
sS'default'
p69411
g3
sS'name'
p69412
S'pre_deform_grad_name'
p69413
sS'required'
p69414
I01
sS'group_name'
p69415
Nsa(dp69416
S'description'
p69417
S'The seed for the master random number generator\n'
p69418
sS'cpp_type'
p69419
S'unsigned int'
p69420
sS'default'
p69421
S'0'
p69422
sS'name'
p69423
S'seed'
p69424
sS'required'
p69425
I00
sS'group_name'
p69426
S'Advanced'
p69427
sa(dp69428
S'description'
p69429
g3
sS'cpp_type'
p69430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69431
sS'default'
p69432
S'ComputeVolumetricDeformGrad'
p69433
sS'name'
p69434
S'type'
p69435
sS'required'
p69436
I00
sS'group_name'
p69437
Nsa(dp69438
S'description'
p69439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69440
sS'cpp_type'
p69441
S'bool'
p69442
sS'default'
p69443
S'0'
p69444
sS'name'
p69445
S'use_displaced_mesh'
p69446
sS'required'
p69447
I00
sS'group_name'
p69448
S'Advanced'
p69449
sa(dp69450
S'description'
p69451
S'Name of volumetric deformation gradient variable\n'
p69452
sS'cpp_type'
p69453
S'MaterialPropertyName'
p69454
sS'default'
p69455
g3
sS'name'
p69456
S'volumetric_deform_grad_name'
p69457
sS'required'
p69458
I01
sS'group_name'
p69459
NsasS'name'
p69460
S'/Materials/ComputeVolumetricDeformGrad'
p69461
sa(dp69462
S'description'
p69463
S'Computes an eigenstrain that is defined by a set of scalar material properties that summed together define the volumetric change.  This also computes the derivatives of that eigenstrain with respect to a supplied set of variable dependencies.\n'
p69464
sS'subblocks'
p69465
NsS'parameters'
p69466
(lp69467
(dp69468
S'description'
p69469
S'variable dependencies for the volumetric_expansion\n'
p69470
sS'cpp_type'
p69471
S'std::vector<VariableName>'
p69472
sS'default'
p69473
g3
sS'name'
p69474
S'args'
p69475
sS'required'
p69476
I01
sS'group_name'
p69477
Nsa(dp69478
S'description'
p69479
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69480
sS'cpp_type'
p69481
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69482
sS'default'
p69483
g3
sS'name'
p69484
S'base_name'
p69485
sS'required'
p69486
I00
sS'group_name'
p69487
Nsa(dp69488
S'description'
p69489
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69490
sS'cpp_type'
p69491
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69492
sS'default'
p69493
g3
sS'name'
p69494
S'block'
p69495
sS'required'
p69496
I00
sS'group_name'
p69497
Nsa(dp69498
S'description'
p69499
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69500
sS'cpp_type'
p69501
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69502
sS'default'
p69503
g3
sS'name'
p69504
S'boundary'
p69505
sS'required'
p69506
I00
sS'group_name'
p69507
Nsa(dp69508
S'description'
p69509
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69510
sS'cpp_type'
p69511
S'bool'
p69512
sS'default'
p69513
S'1'
p69514
sS'name'
p69515
S'compute'
p69516
sS'required'
p69517
I00
sS'group_name'
p69518
Nsa(dp69519
S'description'
p69520
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69521
sS'cpp_type'
p69522
S'bool'
p69523
sS'default'
p69524
S'0'
p69525
sS'name'
p69526
S'constant_on_elem'
p69527
sS'required'
p69528
I00
sS'group_name'
p69529
S'Advanced'
p69530
sa(dp69531
S'description'
p69532
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69533
sS'cpp_type'
p69534
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69535
sS'default'
p69536
g3
sS'name'
p69537
S'control_tags'
p69538
sS'required'
p69539
I00
sS'group_name'
p69540
S'Advanced'
p69541
sa(dp69542
S'description'
p69543
S'Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n'
p69544
sS'cpp_type'
p69545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69546
sS'default'
p69547
g3
sS'name'
p69548
S'eigenstrain_name'
p69549
sS'required'
p69550
I01
sS'group_name'
p69551
Nsa(dp69552
S'description'
p69553
S'Set the enabled status of the MooseObject.\n'
p69554
sS'cpp_type'
p69555
S'bool'
p69556
sS'default'
p69557
S'1'
p69558
sS'name'
p69559
S'enable'
p69560
sS'required'
p69561
I00
sS'group_name'
p69562
S'Advanced'
p69563
sa(dp69564
S'description'
p69565
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69566
sS'cpp_type'
p69567
S'bool'
p69568
sS'default'
p69569
S'1'
p69570
sS'name'
p69571
S'implicit'
p69572
sS'required'
p69573
I00
sS'group_name'
p69574
S'Advanced'
p69575
sa(dp69576
S'description'
p69577
S'Should the eigenstrain be in incremental form (for incremental models)?\n'
p69578
sS'cpp_type'
p69579
S'bool'
p69580
sS'default'
p69581
S'0'
p69582
sS'name'
p69583
S'incremental_form'
p69584
sS'required'
p69585
I00
sS'group_name'
p69586
Nsa(dp69587
S'description'
p69588
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69589
sS'cpp_type'
p69590
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69591
sS'default'
p69592
g3
sS'name'
p69593
S'output_properties'
p69594
sS'required'
p69595
I00
sS'group_name'
p69596
S'Outputs'
p69597
sa(dp69598
S'description'
p69599
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69600
sS'cpp_type'
p69601
S'std::vector<OutputName, std::allocator<OutputName> >'
p69602
sS'default'
p69603
S'none'
p69604
sS'name'
p69605
S'outputs'
p69606
sS'required'
p69607
I00
sS'group_name'
p69608
S'Outputs'
p69609
sa(dp69610
S'description'
p69611
S'The seed for the master random number generator\n'
p69612
sS'cpp_type'
p69613
S'unsigned int'
p69614
sS'default'
p69615
S'0'
p69616
sS'name'
p69617
S'seed'
p69618
sS'required'
p69619
I00
sS'group_name'
p69620
S'Advanced'
p69621
sa(dp69622
S'description'
p69623
g3
sS'cpp_type'
p69624
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69625
sS'default'
p69626
S'ComputeVolumetricEigenstrain'
p69627
sS'name'
p69628
S'type'
p69629
sS'required'
p69630
I00
sS'group_name'
p69631
Nsa(dp69632
S'description'
p69633
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69634
sS'cpp_type'
p69635
S'bool'
p69636
sS'default'
p69637
S'0'
p69638
sS'name'
p69639
S'use_displaced_mesh'
p69640
sS'required'
p69641
I00
sS'group_name'
p69642
S'Advanced'
p69643
sa(dp69644
S'description'
p69645
S'List of scalar materials defining the volumetric change\n'
p69646
sS'cpp_type'
p69647
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p69648
sS'default'
p69649
g3
sS'name'
p69650
S'volumetric_materials'
p69651
sS'required'
p69652
I01
sS'group_name'
p69653
NsasS'name'
p69654
S'/Materials/ComputeVolumetricEigenstrain'
p69655
sa(dp69656
S'description'
p69657
S'Provide a constant mobility tensor value\n'
p69658
sS'subblocks'
p69659
NsS'parameters'
p69660
(lp69661
(dp69662
S'description'
p69663
S'Name of the mobility tensor porperty to generate\n'
p69664
sS'cpp_type'
p69665
S'MaterialPropertyName'
p69666
sS'default'
p69667
g3
sS'name'
p69668
S'M_name'
p69669
sS'required'
p69670
I01
sS'group_name'
p69671
Nsa(dp69672
S'description'
p69673
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69674
sS'cpp_type'
p69675
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69676
sS'default'
p69677
g3
sS'name'
p69678
S'block'
p69679
sS'required'
p69680
I00
sS'group_name'
p69681
Nsa(dp69682
S'description'
p69683
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69684
sS'cpp_type'
p69685
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69686
sS'default'
p69687
g3
sS'name'
p69688
S'boundary'
p69689
sS'required'
p69690
I00
sS'group_name'
p69691
Nsa(dp69692
S'description'
p69693
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69694
sS'cpp_type'
p69695
S'bool'
p69696
sS'default'
p69697
S'1'
p69698
sS'name'
p69699
S'compute'
p69700
sS'required'
p69701
I00
sS'group_name'
p69702
Nsa(dp69703
S'description'
p69704
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69705
sS'cpp_type'
p69706
S'bool'
p69707
sS'default'
p69708
S'0'
p69709
sS'name'
p69710
S'constant_on_elem'
p69711
sS'required'
p69712
I00
sS'group_name'
p69713
S'Advanced'
p69714
sa(dp69715
S'description'
p69716
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69717
sS'cpp_type'
p69718
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69719
sS'default'
p69720
g3
sS'name'
p69721
S'control_tags'
p69722
sS'required'
p69723
I00
sS'group_name'
p69724
S'Advanced'
p69725
sa(dp69726
S'description'
p69727
S'Set the enabled status of the MooseObject.\n'
p69728
sS'cpp_type'
p69729
S'bool'
p69730
sS'default'
p69731
S'1'
p69732
sS'name'
p69733
S'enable'
p69734
sS'required'
p69735
I00
sS'group_name'
p69736
S'Advanced'
p69737
sa(dp69738
S'description'
p69739
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69740
sS'cpp_type'
p69741
S'bool'
p69742
sS'default'
p69743
S'1'
p69744
sS'name'
p69745
S'implicit'
p69746
sS'required'
p69747
I00
sS'group_name'
p69748
S'Advanced'
p69749
sa(dp69750
S'description'
p69751
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69752
sS'cpp_type'
p69753
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69754
sS'default'
p69755
g3
sS'name'
p69756
S'output_properties'
p69757
sS'required'
p69758
I00
sS'group_name'
p69759
S'Outputs'
p69760
sa(dp69761
S'description'
p69762
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69763
sS'cpp_type'
p69764
S'std::vector<OutputName, std::allocator<OutputName> >'
p69765
sS'default'
p69766
S'none'
p69767
sS'name'
p69768
S'outputs'
p69769
sS'required'
p69770
I00
sS'group_name'
p69771
S'Outputs'
p69772
sa(dp69773
S'description'
p69774
S'The seed for the master random number generator\n'
p69775
sS'cpp_type'
p69776
S'unsigned int'
p69777
sS'default'
p69778
S'0'
p69779
sS'name'
p69780
S'seed'
p69781
sS'required'
p69782
I00
sS'group_name'
p69783
S'Advanced'
p69784
sa(dp69785
S'description'
p69786
S'Tensor values\n'
p69787
sS'cpp_type'
p69788
S'std::vector<double, std::allocator<double> >'
p69789
sS'default'
p69790
g3
sS'name'
p69791
S'tensor'
p69792
sS'required'
p69793
I01
sS'group_name'
p69794
Nsa(dp69795
S'description'
p69796
g3
sS'cpp_type'
p69797
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69798
sS'default'
p69799
S'ConstantAnisotropicMobility'
p69800
sS'name'
p69801
S'type'
p69802
sS'required'
p69803
I00
sS'group_name'
p69804
Nsa(dp69805
S'description'
p69806
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69807
sS'cpp_type'
p69808
S'bool'
p69809
sS'default'
p69810
S'0'
p69811
sS'name'
p69812
S'use_displaced_mesh'
p69813
sS'required'
p69814
I00
sS'group_name'
p69815
S'Advanced'
p69816
sasS'name'
p69817
S'/Materials/ConstantAnisotropicMobility'
p69818
sa(dp69819
S'description'
p69820
S'Free energy contribution symmetric across interfaces between arbitrary pairs of phases.\n'
p69821
sS'subblocks'
p69822
NsS'parameters'
p69823
(lp69824
(dp69825
S'description'
p69826
S'Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n'
p69827
sS'cpp_type'
p69828
S'std::vector<double, std::allocator<double> >'
p69829
sS'default'
p69830
g3
sS'name'
p69831
S'W_ij'
p69832
sS'required'
p69833
I01
sS'group_name'
p69834
Nsa(dp69835
S'description'
p69836
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69837
sS'cpp_type'
p69838
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69839
sS'default'
p69840
g3
sS'name'
p69841
S'block'
p69842
sS'required'
p69843
I00
sS'group_name'
p69844
Nsa(dp69845
S'description'
p69846
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69847
sS'cpp_type'
p69848
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69849
sS'default'
p69850
g3
sS'name'
p69851
S'boundary'
p69852
sS'required'
p69853
I00
sS'group_name'
p69854
Nsa(dp69855
S'description'
p69856
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p69857
sS'cpp_type'
p69858
S'bool'
p69859
sS'default'
p69860
S'1'
p69861
sS'name'
p69862
S'compute'
p69863
sS'required'
p69864
I00
sS'group_name'
p69865
Nsa(dp69866
S'description'
p69867
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p69868
sS'cpp_type'
p69869
S'bool'
p69870
sS'default'
p69871
S'0'
p69872
sS'name'
p69873
S'constant_on_elem'
p69874
sS'required'
p69875
I00
sS'group_name'
p69876
S'Advanced'
p69877
sa(dp69878
S'description'
p69879
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69880
sS'cpp_type'
p69881
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69882
sS'default'
p69883
g3
sS'name'
p69884
S'control_tags'
p69885
sS'required'
p69886
I00
sS'group_name'
p69887
S'Advanced'
p69888
sa(dp69889
S'description'
p69890
S'Set the enabled status of the MooseObject.\n'
p69891
sS'cpp_type'
p69892
S'bool'
p69893
sS'default'
p69894
S'1'
p69895
sS'name'
p69896
S'enable'
p69897
sS'required'
p69898
I00
sS'group_name'
p69899
S'Advanced'
p69900
sa(dp69901
S'description'
p69902
S'eta_i order parameters, one for each h\n'
p69903
sS'cpp_type'
p69904
S'std::vector<VariableName>'
p69905
sS'default'
p69906
g3
sS'name'
p69907
S'etas'
p69908
sS'required'
p69909
I01
sS'group_name'
p69910
Nsa(dp69911
S'description'
p69912
S'actual name for g(eta_i)\n'
p69913
sS'cpp_type'
p69914
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69915
sS'default'
p69916
S'g'
p69917
sS'name'
p69918
S'function_name'
p69919
sS'required'
p69920
I00
sS'group_name'
p69921
Nsa(dp69922
S'name'
p69923
S'g_order'
p69924
sS'cpp_type'
p69925
S'MooseEnum'
p69926
sS'default'
p69927
S'SIMPLE'
p69928
sS'description'
p69929
S'Polynomial order of the barrier function g(eta)\n'
p69930
sS'required'
p69931
I00
sS'options'
p69932
S'SIMPLE LOW'
p69933
sS'group_name'
p69934
Nsa(dp69935
S'description'
p69936
S'Determines whether this object is calculated using an implicit or explicit form\n'
p69937
sS'cpp_type'
p69938
S'bool'
p69939
sS'default'
p69940
S'1'
p69941
sS'name'
p69942
S'implicit'
p69943
sS'required'
p69944
I00
sS'group_name'
p69945
S'Advanced'
p69946
sa(dp69947
S'description'
p69948
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69949
sS'cpp_type'
p69950
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69951
sS'default'
p69952
g3
sS'name'
p69953
S'output_properties'
p69954
sS'required'
p69955
I00
sS'group_name'
p69956
S'Outputs'
p69957
sa(dp69958
S'description'
p69959
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69960
sS'cpp_type'
p69961
S'std::vector<OutputName, std::allocator<OutputName> >'
p69962
sS'default'
p69963
S'none'
p69964
sS'name'
p69965
S'outputs'
p69966
sS'required'
p69967
I00
sS'group_name'
p69968
S'Outputs'
p69969
sa(dp69970
S'description'
p69971
S'The seed for the master random number generator\n'
p69972
sS'cpp_type'
p69973
S'unsigned int'
p69974
sS'default'
p69975
S'0'
p69976
sS'name'
p69977
S'seed'
p69978
sS'required'
p69979
I00
sS'group_name'
p69980
S'Advanced'
p69981
sa(dp69982
S'description'
p69983
g3
sS'cpp_type'
p69984
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69985
sS'default'
p69986
S'CrossTermBarrierFunctionMaterial'
p69987
sS'name'
p69988
S'type'
p69989
sS'required'
p69990
I00
sS'group_name'
p69991
Nsa(dp69992
S'description'
p69993
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69994
sS'cpp_type'
p69995
S'bool'
p69996
sS'default'
p69997
S'0'
p69998
sS'name'
p69999
S'use_displaced_mesh'
p70000
sS'required'
p70001
I00
sS'group_name'
p70002
S'Advanced'
p70003
sasS'name'
p70004
S'/Materials/CrossTermBarrierFunctionMaterial'
p70005
sa(dp70006
S'description'
p70007
g3
sS'subblocks'
p70008
NsS'parameters'
p70009
(lp70010
(dp70011
S'description'
p70012
S'Length of Burger Vector in m\n'
p70013
sS'cpp_type'
p70014
S'double'
p70015
sS'default'
p70016
S'3e-10'
p70017
sS'name'
p70018
S'Burg_vec'
p70019
sS'required'
p70020
I00
sS'group_name'
p70021
Nsa(dp70022
S'description'
p70023
S'Dislocation Density in m^-2\n'
p70024
sS'cpp_type'
p70025
S'double'
p70026
sS'default'
p70027
S'9e+15'
p70028
sS'name'
p70029
S'Disloc_Den'
p70030
sS'required'
p70031
I00
sS'group_name'
p70032
Nsa(dp70033
S'description'
p70034
S'Elastic Modulus in J/m^3\n'
p70035
sS'cpp_type'
p70036
S'double'
p70037
sS'default'
p70038
S'2.5e+10'
p70039
sS'name'
p70040
S'Elas_Mod'
p70041
sS'required'
p70042
I00
sS'group_name'
p70043
Nsa(dp70044
S'description'
p70045
S'Grain boundary energy in J/m^2\n'
p70046
sS'cpp_type'
p70047
S'double'
p70048
sS'default'
p70049
S'1'
p70050
sS'name'
p70051
S'GBE'
p70052
sS'required'
p70053
I00
sS'group_name'
p70054
Nsa(dp70055
S'description'
p70056
S'GB mobility input in m^4/(J*s)\n'
p70057
sS'cpp_type'
p70058
S'double'
p70059
sS'default'
p70060
S'2e-13'
p70061
sS'name'
p70062
S'GBMobility'
p70063
sS'required'
p70064
I00
sS'group_name'
p70065
Nsa(dp70066
S'description'
p70067
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70068
sS'cpp_type'
p70069
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70070
sS'default'
p70071
g3
sS'name'
p70072
S'block'
p70073
sS'required'
p70074
I00
sS'group_name'
p70075
Nsa(dp70076
S'description'
p70077
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70078
sS'cpp_type'
p70079
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70080
sS'default'
p70081
g3
sS'name'
p70082
S'boundary'
p70083
sS'required'
p70084
I00
sS'group_name'
p70085
Nsa(dp70086
S'description'
p70087
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70088
sS'cpp_type'
p70089
S'bool'
p70090
sS'default'
p70091
S'1'
p70092
sS'name'
p70093
S'compute'
p70094
sS'required'
p70095
I00
sS'group_name'
p70096
Nsa(dp70097
S'description'
p70098
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70099
sS'cpp_type'
p70100
S'bool'
p70101
sS'default'
p70102
S'0'
p70103
sS'name'
p70104
S'constant_on_elem'
p70105
sS'required'
p70106
I00
sS'group_name'
p70107
S'Advanced'
p70108
sa(dp70109
S'description'
p70110
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70111
sS'cpp_type'
p70112
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70113
sS'default'
p70114
g3
sS'name'
p70115
S'control_tags'
p70116
sS'required'
p70117
I00
sS'group_name'
p70118
S'Advanced'
p70119
sa(dp70120
S'description'
p70121
S'Number of OP representing deformed grains\n'
p70122
sS'cpp_type'
p70123
S'unsigned int'
p70124
sS'default'
p70125
g3
sS'name'
p70126
S'deformed_grain_num'
p70127
sS'required'
p70128
I01
sS'group_name'
p70129
Nsa(dp70130
S'description'
p70131
S'Set the enabled status of the MooseObject.\n'
p70132
sS'cpp_type'
p70133
S'bool'
p70134
sS'default'
p70135
S'1'
p70136
sS'name'
p70137
S'enable'
p70138
sS'required'
p70139
I00
sS'group_name'
p70140
S'Advanced'
p70141
sa(dp70142
S'description'
p70143
S'The GrainTracker UserObject to get values from.\n'
p70144
sS'cpp_type'
p70145
S'UserObjectName'
p70146
sS'default'
p70147
g3
sS'name'
p70148
S'grain_tracker'
p70149
sS'required'
p70150
I01
sS'group_name'
p70151
Nsa(dp70152
S'description'
p70153
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70154
sS'cpp_type'
p70155
S'bool'
p70156
sS'default'
p70157
S'1'
p70158
sS'name'
p70159
S'implicit'
p70160
sS'required'
p70161
I00
sS'group_name'
p70162
S'Advanced'
p70163
sa(dp70164
S'description'
p70165
S'Diffuse Interface width in length_scale unit\n'
p70166
sS'cpp_type'
p70167
S'double'
p70168
sS'default'
p70169
S'4'
p70170
sS'name'
p70171
S'int_width'
p70172
sS'required'
p70173
I00
sS'group_name'
p70174
Nsa(dp70175
S'description'
p70176
S'Length scale in m, where default is nm\n'
p70177
sS'cpp_type'
p70178
S'double'
p70179
sS'default'
p70180
S'1e-09'
p70181
sS'name'
p70182
S'length_scale'
p70183
sS'required'
p70184
I00
sS'group_name'
p70185
Nsa(dp70186
S'description'
p70187
S'Array of coupled variables (num_name)\n'
p70188
sS'cpp_type'
p70189
S'unsigned int'
p70190
sS'default'
p70191
g3
sS'name'
p70192
S'op_num'
p70193
sS'required'
p70194
I00
sS'group_name'
p70195
Nsa(dp70196
S'description'
p70197
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70198
sS'cpp_type'
p70199
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70200
sS'default'
p70201
g3
sS'name'
p70202
S'output_properties'
p70203
sS'required'
p70204
I00
sS'group_name'
p70205
S'Outputs'
p70206
sa(dp70207
S'description'
p70208
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70209
sS'cpp_type'
p70210
S'std::vector<OutputName, std::allocator<OutputName> >'
p70211
sS'default'
p70212
S'none'
p70213
sS'name'
p70214
S'outputs'
p70215
sS'required'
p70216
I00
sS'group_name'
p70217
S'Outputs'
p70218
sa(dp70219
S'description'
p70220
S'The seed for the master random number generator\n'
p70221
sS'cpp_type'
p70222
S'unsigned int'
p70223
sS'default'
p70224
S'0'
p70225
sS'name'
p70226
S'seed'
p70227
sS'required'
p70228
I00
sS'group_name'
p70229
S'Advanced'
p70230
sa(dp70231
S'description'
p70232
S'Time scale in sec, where default is micro sec\n'
p70233
sS'cpp_type'
p70234
S'double'
p70235
sS'default'
p70236
S'1e-06'
p70237
sS'name'
p70238
S'time_scale'
p70239
sS'required'
p70240
I00
sS'group_name'
p70241
Nsa(dp70242
S'description'
p70243
g3
sS'cpp_type'
p70244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70245
sS'default'
p70246
S'DeformedGrainMaterial'
p70247
sS'name'
p70248
S'type'
p70249
sS'required'
p70250
I00
sS'group_name'
p70251
Nsa(dp70252
S'description'
p70253
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70254
sS'cpp_type'
p70255
S'bool'
p70256
sS'default'
p70257
S'0'
p70258
sS'name'
p70259
S'use_displaced_mesh'
p70260
sS'required'
p70261
I00
sS'group_name'
p70262
S'Advanced'
p70263
sa(dp70264
S'description'
p70265
S'Array of coupled variables\n'
p70266
sS'cpp_type'
p70267
S'std::vector<VariableName>'
p70268
sS'default'
p70269
g3
sS'name'
p70270
S'v'
p70271
sS'required'
p70272
I01
sS'group_name'
p70273
Nsa(dp70274
S'description'
p70275
S'Array of coupled variables (base_name)\n'
p70276
sS'cpp_type'
p70277
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70278
sS'default'
p70279
g3
sS'name'
p70280
S'var_name_base'
p70281
sS'required'
p70282
I00
sS'group_name'
p70283
NsasS'name'
p70284
S'/Materials/DeformedGrainMaterial'
p70285
sa(dp70286
S'description'
p70287
S'Two phase material that combines n phase materials using a switching function with and n nonconserved order parameters (to be used with SwitchingFunctionConstraint*).\n'
p70288
sS'subblocks'
p70289
NsS'parameters'
p70290
(lp70291
(dp70292
S'description'
p70293
S'Energy barrier for the phase transformation from A to B\n'
p70294
sS'cpp_type'
p70295
S'double'
p70296
sS'default'
p70297
S'0'
p70298
sS'name'
p70299
S'W'
p70300
sS'required'
p70301
I00
sS'group_name'
p70302
Nsa(dp70303
S'description'
p70304
S'Arguments of the fi free energies - use vector coupling\n'
p70305
sS'cpp_type'
p70306
S'std::vector<VariableName>'
p70307
sS'default'
p70308
g3
sS'name'
p70309
S'args'
p70310
sS'required'
p70311
I00
sS'group_name'
p70312
Nsa(dp70313
S'description'
p70314
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70315
sS'cpp_type'
p70316
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70317
sS'default'
p70318
g3
sS'name'
p70319
S'block'
p70320
sS'required'
p70321
I00
sS'group_name'
p70322
Nsa(dp70323
S'description'
p70324
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70325
sS'cpp_type'
p70326
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70327
sS'default'
p70328
g3
sS'name'
p70329
S'boundary'
p70330
sS'required'
p70331
I00
sS'group_name'
p70332
Nsa(dp70333
S'description'
p70334
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70335
sS'cpp_type'
p70336
S'bool'
p70337
sS'default'
p70338
S'1'
p70339
sS'name'
p70340
S'compute'
p70341
sS'required'
p70342
I00
sS'group_name'
p70343
Nsa(dp70344
S'description'
p70345
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70346
sS'cpp_type'
p70347
S'bool'
p70348
sS'default'
p70349
S'0'
p70350
sS'name'
p70351
S'constant_on_elem'
p70352
sS'required'
p70353
I00
sS'group_name'
p70354
S'Advanced'
p70355
sa(dp70356
S'description'
p70357
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70358
sS'cpp_type'
p70359
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70360
sS'default'
p70361
g3
sS'name'
p70362
S'control_tags'
p70363
sS'required'
p70364
I00
sS'group_name'
p70365
S'Advanced'
p70366
sa(dp70367
S'description'
p70368
S'Maximum order of derivatives taken (2 or 3)\n'
p70369
sS'cpp_type'
p70370
S'unsigned int'
p70371
sS'default'
p70372
S'3'
p70373
sS'name'
p70374
S'derivative_order'
p70375
sS'required'
p70376
I00
sS'group_name'
p70377
Nsa(dp70378
S'description'
p70379
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p70380
sS'cpp_type'
p70381
S'std::vector<VariableName>'
p70382
sS'default'
p70383
g3
sS'name'
p70384
S'displacement_gradients'
p70385
sS'required'
p70386
I00
sS'group_name'
p70387
Nsa(dp70388
S'description'
p70389
S'Set the enabled status of the MooseObject.\n'
p70390
sS'cpp_type'
p70391
S'bool'
p70392
sS'default'
p70393
S'1'
p70394
sS'name'
p70395
S'enable'
p70396
sS'required'
p70397
I00
sS'group_name'
p70398
S'Advanced'
p70399
sa(dp70400
S'description'
p70401
S'Order parameters for all phases.\n'
p70402
sS'cpp_type'
p70403
S'std::vector<VariableName>'
p70404
sS'default'
p70405
g3
sS'name'
p70406
S'etas'
p70407
sS'required'
p70408
I00
sS'group_name'
p70409
Nsa(dp70410
S'description'
p70411
S'Base name of the free energy function (used to name the material properties)\n'
p70412
sS'cpp_type'
p70413
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70414
sS'default'
p70415
S'F'
p70416
sS'name'
p70417
S'f_name'
p70418
sS'required'
p70419
I00
sS'group_name'
p70420
Nsa(dp70421
S'description'
p70422
S'List of free energies for the n phases\n'
p70423
sS'cpp_type'
p70424
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p70425
sS'default'
p70426
g3
sS'name'
p70427
S'fi_names'
p70428
sS'required'
p70429
I01
sS'group_name'
p70430
Nsa(dp70431
S'description'
p70432
S'Barrier Function Material that provides g(eta_i)\n'
p70433
sS'cpp_type'
p70434
S'MaterialPropertyName'
p70435
sS'default'
p70436
S'g'
p70437
sS'name'
p70438
S'g'
p70439
sS'required'
p70440
I00
sS'group_name'
p70441
Nsa(dp70442
S'description'
p70443
S'Switching Function Materials that provide h(eta_i)\n'
p70444
sS'cpp_type'
p70445
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p70446
sS'default'
p70447
g3
sS'name'
p70448
S'hi_names'
p70449
sS'required'
p70450
I00
sS'group_name'
p70451
Nsa(dp70452
S'description'
p70453
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70454
sS'cpp_type'
p70455
S'bool'
p70456
sS'default'
p70457
S'1'
p70458
sS'name'
p70459
S'implicit'
p70460
sS'required'
p70461
I00
sS'group_name'
p70462
S'Advanced'
p70463
sa(dp70464
S'description'
p70465
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70466
sS'cpp_type'
p70467
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70468
sS'default'
p70469
g3
sS'name'
p70470
S'output_properties'
p70471
sS'required'
p70472
I00
sS'group_name'
p70473
S'Outputs'
p70474
sa(dp70475
S'description'
p70476
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70477
sS'cpp_type'
p70478
S'std::vector<OutputName, std::allocator<OutputName> >'
p70479
sS'default'
p70480
S'none'
p70481
sS'name'
p70482
S'outputs'
p70483
sS'required'
p70484
I00
sS'group_name'
p70485
S'Outputs'
p70486
sa(dp70487
S'description'
p70488
S'The seed for the master random number generator\n'
p70489
sS'cpp_type'
p70490
S'unsigned int'
p70491
sS'default'
p70492
S'0'
p70493
sS'name'
p70494
S'seed'
p70495
sS'required'
p70496
I00
sS'group_name'
p70497
S'Advanced'
p70498
sa(dp70499
S'description'
p70500
S'Flag to indicate if third derivatives are needed\n'
p70501
sS'cpp_type'
p70502
S'bool'
p70503
sS'default'
p70504
g3
sS'name'
p70505
S'third_derivatives'
p70506
sS'required'
p70507
I00
sS'group_name'
p70508
Nsa(dp70509
S'description'
p70510
g3
sS'cpp_type'
p70511
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70512
sS'default'
p70513
S'DerivativeMultiPhaseMaterial'
p70514
sS'name'
p70515
S'type'
p70516
sS'required'
p70517
I00
sS'group_name'
p70518
Nsa(dp70519
S'description'
p70520
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70521
sS'cpp_type'
p70522
S'bool'
p70523
sS'default'
p70524
S'0'
p70525
sS'name'
p70526
S'use_displaced_mesh'
p70527
sS'required'
p70528
I00
sS'group_name'
p70529
S'Advanced'
p70530
sasS'name'
p70531
S'/Materials/DerivativeMultiPhaseMaterial'
p70532
sa(dp70533
S'description'
p70534
S'Parsed Function Material with automatic derivatives.\n'
p70535
sS'subblocks'
p70536
NsS'parameters'
p70537
(lp70538
(dp70539
S'description'
p70540
S'Arguments of F() - use vector coupling\n'
p70541
sS'cpp_type'
p70542
S'std::vector<VariableName>'
p70543
sS'default'
p70544
g3
sS'name'
p70545
S'args'
p70546
sS'required'
p70547
I00
sS'group_name'
p70548
Nsa(dp70549
S'description'
p70550
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70551
sS'cpp_type'
p70552
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70553
sS'default'
p70554
g3
sS'name'
p70555
S'block'
p70556
sS'required'
p70557
I00
sS'group_name'
p70558
Nsa(dp70559
S'description'
p70560
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70561
sS'cpp_type'
p70562
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70563
sS'default'
p70564
g3
sS'name'
p70565
S'boundary'
p70566
sS'required'
p70567
I00
sS'group_name'
p70568
Nsa(dp70569
S'description'
p70570
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70571
sS'cpp_type'
p70572
S'bool'
p70573
sS'default'
p70574
S'1'
p70575
sS'name'
p70576
S'compute'
p70577
sS'required'
p70578
I00
sS'group_name'
p70579
Nsa(dp70580
S'description'
p70581
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p70582
sS'cpp_type'
p70583
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70584
sS'default'
p70585
g3
sS'name'
p70586
S'constant_expressions'
p70587
sS'required'
p70588
I00
sS'group_name'
p70589
Nsa(dp70590
S'description'
p70591
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p70592
sS'cpp_type'
p70593
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70594
sS'default'
p70595
g3
sS'name'
p70596
S'constant_names'
p70597
sS'required'
p70598
I00
sS'group_name'
p70599
Nsa(dp70600
S'description'
p70601
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70602
sS'cpp_type'
p70603
S'bool'
p70604
sS'default'
p70605
S'0'
p70606
sS'name'
p70607
S'constant_on_elem'
p70608
sS'required'
p70609
I00
sS'group_name'
p70610
S'Advanced'
p70611
sa(dp70612
S'description'
p70613
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70614
sS'cpp_type'
p70615
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70616
sS'default'
p70617
g3
sS'name'
p70618
S'control_tags'
p70619
sS'required'
p70620
I00
sS'group_name'
p70621
S'Advanced'
p70622
sa(dp70623
S'description'
p70624
S'Maximum order of derivatives taken\n'
p70625
sS'cpp_type'
p70626
S'unsigned int'
p70627
sS'default'
p70628
S'3'
p70629
sS'name'
p70630
S'derivative_order'
p70631
sS'required'
p70632
I00
sS'group_name'
p70633
Nsa(dp70634
S'description'
p70635
S'Disable the function parser algebraic optimizer\n'
p70636
sS'cpp_type'
p70637
S'bool'
p70638
sS'default'
p70639
S'0'
p70640
sS'name'
p70641
S'disable_fpoptimizer'
p70642
sS'required'
p70643
I00
sS'group_name'
p70644
S'Advanced'
p70645
sa(dp70646
S'description'
p70647
S'Set the enabled status of the MooseObject.\n'
p70648
sS'cpp_type'
p70649
S'bool'
p70650
sS'default'
p70651
S'1'
p70652
sS'name'
p70653
S'enable'
p70654
sS'required'
p70655
I00
sS'group_name'
p70656
S'Advanced'
p70657
sa(dp70658
S'description'
p70659
S'Enable cacheing of function derivatives for faster startup time\n'
p70660
sS'cpp_type'
p70661
S'bool'
p70662
sS'default'
p70663
S'1'
p70664
sS'name'
p70665
S'enable_ad_cache'
p70666
sS'required'
p70667
I00
sS'group_name'
p70668
S'Advanced'
p70669
sa(dp70670
S'description'
p70671
S'Enable automatic immediate optimization of derivatives\n'
p70672
sS'cpp_type'
p70673
S'bool'
p70674
sS'default'
p70675
S'1'
p70676
sS'name'
p70677
S'enable_auto_optimize'
p70678
sS'required'
p70679
I00
sS'group_name'
p70680
S'Advanced'
p70681
sa(dp70682
S'description'
p70683
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p70684
sS'cpp_type'
p70685
S'bool'
p70686
sS'default'
p70687
S'1'
p70688
sS'name'
p70689
S'enable_jit'
p70690
sS'required'
p70691
I00
sS'group_name'
p70692
S'Advanced'
p70693
sa(dp70694
S'description'
p70695
S'Base name of the free energy function (used to name the material properties)\n'
p70696
sS'cpp_type'
p70697
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70698
sS'default'
p70699
S'F'
p70700
sS'name'
p70701
S'f_name'
p70702
sS'required'
p70703
I00
sS'group_name'
p70704
Nsa(dp70705
S'description'
p70706
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p70707
sS'cpp_type'
p70708
S'bool'
p70709
sS'default'
p70710
S'0'
p70711
sS'name'
p70712
S'fail_on_evalerror'
p70713
sS'required'
p70714
I00
sS'group_name'
p70715
S'Advanced'
p70716
sa(dp70717
S'description'
p70718
S'FParser function expression for the phase free energy\n'
p70719
sS'cpp_type'
p70720
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70721
sS'default'
p70722
g3
sS'name'
p70723
S'function'
p70724
sS'required'
p70725
I01
sS'group_name'
p70726
Nsa(dp70727
S'description'
p70728
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70729
sS'cpp_type'
p70730
S'bool'
p70731
sS'default'
p70732
S'1'
p70733
sS'name'
p70734
S'implicit'
p70735
sS'required'
p70736
I00
sS'group_name'
p70737
S'Advanced'
p70738
sa(dp70739
S'description'
p70740
S'Vector of material properties used in the parsed function\n'
p70741
sS'cpp_type'
p70742
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70743
sS'default'
p70744
g3
sS'name'
p70745
S'material_property_names'
p70746
sS'required'
p70747
I00
sS'group_name'
p70748
Nsa(dp70749
S'description'
p70750
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70751
sS'cpp_type'
p70752
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70753
sS'default'
p70754
g3
sS'name'
p70755
S'output_properties'
p70756
sS'required'
p70757
I00
sS'group_name'
p70758
S'Outputs'
p70759
sa(dp70760
S'description'
p70761
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70762
sS'cpp_type'
p70763
S'std::vector<OutputName, std::allocator<OutputName> >'
p70764
sS'default'
p70765
S'none'
p70766
sS'name'
p70767
S'outputs'
p70768
sS'required'
p70769
I00
sS'group_name'
p70770
S'Outputs'
p70771
sa(dp70772
S'description'
p70773
S'The seed for the master random number generator\n'
p70774
sS'cpp_type'
p70775
S'unsigned int'
p70776
sS'default'
p70777
S'0'
p70778
sS'name'
p70779
S'seed'
p70780
sS'required'
p70781
I00
sS'group_name'
p70782
S'Advanced'
p70783
sa(dp70784
S'description'
p70785
S'Flag to indicate if third derivatives are needed\n'
p70786
sS'cpp_type'
p70787
S'bool'
p70788
sS'default'
p70789
g3
sS'name'
p70790
S'third_derivatives'
p70791
sS'required'
p70792
I00
sS'group_name'
p70793
Nsa(dp70794
S'description'
p70795
S'Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n'
p70796
sS'cpp_type'
p70797
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70798
sS'default'
p70799
g3
sS'name'
p70800
S'tol_names'
p70801
sS'required'
p70802
I00
sS'group_name'
p70803
Nsa(dp70804
S'description'
p70805
S'Vector of tolerance values for the variables in tol_names\n'
p70806
sS'cpp_type'
p70807
S'std::vector<double, std::allocator<double> >'
p70808
sS'default'
p70809
g3
sS'name'
p70810
S'tol_values'
p70811
sS'required'
p70812
I00
sS'group_name'
p70813
Nsa(dp70814
S'description'
p70815
g3
sS'cpp_type'
p70816
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70817
sS'default'
p70818
S'DerivativeParsedMaterial'
p70819
sS'name'
p70820
S'type'
p70821
sS'required'
p70822
I00
sS'group_name'
p70823
Nsa(dp70824
S'description'
p70825
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70826
sS'cpp_type'
p70827
S'bool'
p70828
sS'default'
p70829
S'0'
p70830
sS'name'
p70831
S'use_displaced_mesh'
p70832
sS'required'
p70833
I00
sS'group_name'
p70834
S'Advanced'
p70835
sasS'name'
p70836
S'/Materials/DerivativeParsedMaterial'
p70837
sa(dp70838
S'description'
p70839
S'Meta-material to sum up multiple derivative materials\n'
p70840
sS'subblocks'
p70841
NsS'parameters'
p70842
(lp70843
(dp70844
S'description'
p70845
S'Arguments of the free energy functions being summed - use vector coupling\n'
p70846
sS'cpp_type'
p70847
S'std::vector<VariableName>'
p70848
sS'default'
p70849
g3
sS'name'
p70850
S'args'
p70851
sS'required'
p70852
I01
sS'group_name'
p70853
Nsa(dp70854
S'description'
p70855
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70856
sS'cpp_type'
p70857
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70858
sS'default'
p70859
g3
sS'name'
p70860
S'block'
p70861
sS'required'
p70862
I00
sS'group_name'
p70863
Nsa(dp70864
S'description'
p70865
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70866
sS'cpp_type'
p70867
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70868
sS'default'
p70869
g3
sS'name'
p70870
S'boundary'
p70871
sS'required'
p70872
I00
sS'group_name'
p70873
Nsa(dp70874
S'description'
p70875
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p70876
sS'cpp_type'
p70877
S'bool'
p70878
sS'default'
p70879
S'1'
p70880
sS'name'
p70881
S'compute'
p70882
sS'required'
p70883
I00
sS'group_name'
p70884
Nsa(dp70885
S'description'
p70886
S'Constant to be added to the prefactor multiplied sum.\n'
p70887
sS'cpp_type'
p70888
S'double'
p70889
sS'default'
p70890
S'0'
p70891
sS'name'
p70892
S'constant'
p70893
sS'required'
p70894
I00
sS'group_name'
p70895
S'Advanced'
p70896
sa(dp70897
S'description'
p70898
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p70899
sS'cpp_type'
p70900
S'bool'
p70901
sS'default'
p70902
S'0'
p70903
sS'name'
p70904
S'constant_on_elem'
p70905
sS'required'
p70906
I00
sS'group_name'
p70907
S'Advanced'
p70908
sa(dp70909
S'description'
p70910
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70911
sS'cpp_type'
p70912
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70913
sS'default'
p70914
g3
sS'name'
p70915
S'control_tags'
p70916
sS'required'
p70917
I00
sS'group_name'
p70918
S'Advanced'
p70919
sa(dp70920
S'description'
p70921
S'Maximum order of derivatives taken (2 or 3)\n'
p70922
sS'cpp_type'
p70923
S'unsigned int'
p70924
sS'default'
p70925
S'3'
p70926
sS'name'
p70927
S'derivative_order'
p70928
sS'required'
p70929
I00
sS'group_name'
p70930
Nsa(dp70931
S'description'
p70932
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p70933
sS'cpp_type'
p70934
S'std::vector<VariableName>'
p70935
sS'default'
p70936
g3
sS'name'
p70937
S'displacement_gradients'
p70938
sS'required'
p70939
I00
sS'group_name'
p70940
Nsa(dp70941
S'description'
p70942
S'Set the enabled status of the MooseObject.\n'
p70943
sS'cpp_type'
p70944
S'bool'
p70945
sS'default'
p70946
S'1'
p70947
sS'name'
p70948
S'enable'
p70949
sS'required'
p70950
I00
sS'group_name'
p70951
S'Advanced'
p70952
sa(dp70953
S'description'
p70954
S'Base name of the free energy function (used to name the material properties)\n'
p70955
sS'cpp_type'
p70956
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70957
sS'default'
p70958
S'F'
p70959
sS'name'
p70960
S'f_name'
p70961
sS'required'
p70962
I00
sS'group_name'
p70963
Nsa(dp70964
S'description'
p70965
S'Determines whether this object is calculated using an implicit or explicit form\n'
p70966
sS'cpp_type'
p70967
S'bool'
p70968
sS'default'
p70969
S'1'
p70970
sS'name'
p70971
S'implicit'
p70972
sS'required'
p70973
I00
sS'group_name'
p70974
S'Advanced'
p70975
sa(dp70976
S'description'
p70977
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70978
sS'cpp_type'
p70979
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70980
sS'default'
p70981
g3
sS'name'
p70982
S'output_properties'
p70983
sS'required'
p70984
I00
sS'group_name'
p70985
S'Outputs'
p70986
sa(dp70987
S'description'
p70988
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70989
sS'cpp_type'
p70990
S'std::vector<OutputName, std::allocator<OutputName> >'
p70991
sS'default'
p70992
S'none'
p70993
sS'name'
p70994
S'outputs'
p70995
sS'required'
p70996
I00
sS'group_name'
p70997
S'Outputs'
p70998
sa(dp70999
S'description'
p71000
S'Prefactor to multiply the sum term with.\n'
p71001
sS'cpp_type'
p71002
S'std::vector<double, std::allocator<double> >'
p71003
sS'default'
p71004
g3
sS'name'
p71005
S'prefactor'
p71006
sS'required'
p71007
I00
sS'group_name'
p71008
S'Advanced'
p71009
sa(dp71010
S'description'
p71011
S'The seed for the master random number generator\n'
p71012
sS'cpp_type'
p71013
S'unsigned int'
p71014
sS'default'
p71015
S'0'
p71016
sS'name'
p71017
S'seed'
p71018
sS'required'
p71019
I00
sS'group_name'
p71020
S'Advanced'
p71021
sa(dp71022
S'description'
p71023
S'Base name of the free energy function (used to name the material properties)\n'
p71024
sS'cpp_type'
p71025
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71026
sS'default'
p71027
g3
sS'name'
p71028
S'sum_materials'
p71029
sS'required'
p71030
I00
sS'group_name'
p71031
Nsa(dp71032
S'description'
p71033
S'Flag to indicate if third derivatives are needed\n'
p71034
sS'cpp_type'
p71035
S'bool'
p71036
sS'default'
p71037
g3
sS'name'
p71038
S'third_derivatives'
p71039
sS'required'
p71040
I00
sS'group_name'
p71041
Nsa(dp71042
S'description'
p71043
g3
sS'cpp_type'
p71044
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71045
sS'default'
p71046
S'DerivativeSumMaterial'
p71047
sS'name'
p71048
S'type'
p71049
sS'required'
p71050
I00
sS'group_name'
p71051
Nsa(dp71052
S'description'
p71053
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71054
sS'cpp_type'
p71055
S'bool'
p71056
sS'default'
p71057
S'0'
p71058
sS'name'
p71059
S'use_displaced_mesh'
p71060
sS'required'
p71061
I00
sS'group_name'
p71062
S'Advanced'
p71063
sasS'name'
p71064
S'/Materials/DerivativeSumMaterial'
p71065
sa(dp71066
S'description'
p71067
S'Two phase material that combines two single phase materials using a switching function.\n'
p71068
sS'subblocks'
p71069
NsS'parameters'
p71070
(lp71071
(dp71072
S'description'
p71073
S'Energy barrier for the phase transformation from A to B\n'
p71074
sS'cpp_type'
p71075
S'double'
p71076
sS'default'
p71077
S'0'
p71078
sS'name'
p71079
S'W'
p71080
sS'required'
p71081
I00
sS'group_name'
p71082
Nsa(dp71083
S'description'
p71084
S'Arguments of fa and fb - use vector coupling\n'
p71085
sS'cpp_type'
p71086
S'std::vector<VariableName>'
p71087
sS'default'
p71088
g3
sS'name'
p71089
S'args'
p71090
sS'required'
p71091
I00
sS'group_name'
p71092
Nsa(dp71093
S'description'
p71094
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71095
sS'cpp_type'
p71096
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71097
sS'default'
p71098
g3
sS'name'
p71099
S'block'
p71100
sS'required'
p71101
I00
sS'group_name'
p71102
Nsa(dp71103
S'description'
p71104
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71105
sS'cpp_type'
p71106
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71107
sS'default'
p71108
g3
sS'name'
p71109
S'boundary'
p71110
sS'required'
p71111
I00
sS'group_name'
p71112
Nsa(dp71113
S'description'
p71114
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71115
sS'cpp_type'
p71116
S'bool'
p71117
sS'default'
p71118
S'1'
p71119
sS'name'
p71120
S'compute'
p71121
sS'required'
p71122
I00
sS'group_name'
p71123
Nsa(dp71124
S'description'
p71125
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71126
sS'cpp_type'
p71127
S'bool'
p71128
sS'default'
p71129
S'0'
p71130
sS'name'
p71131
S'constant_on_elem'
p71132
sS'required'
p71133
I00
sS'group_name'
p71134
S'Advanced'
p71135
sa(dp71136
S'description'
p71137
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71138
sS'cpp_type'
p71139
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71140
sS'default'
p71141
g3
sS'name'
p71142
S'control_tags'
p71143
sS'required'
p71144
I00
sS'group_name'
p71145
S'Advanced'
p71146
sa(dp71147
S'description'
p71148
S'Maximum order of derivatives taken (2 or 3)\n'
p71149
sS'cpp_type'
p71150
S'unsigned int'
p71151
sS'default'
p71152
S'3'
p71153
sS'name'
p71154
S'derivative_order'
p71155
sS'required'
p71156
I00
sS'group_name'
p71157
Nsa(dp71158
S'description'
p71159
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p71160
sS'cpp_type'
p71161
S'std::vector<VariableName>'
p71162
sS'default'
p71163
g3
sS'name'
p71164
S'displacement_gradients'
p71165
sS'required'
p71166
I00
sS'group_name'
p71167
Nsa(dp71168
S'description'
p71169
S'Set the enabled status of the MooseObject.\n'
p71170
sS'cpp_type'
p71171
S'bool'
p71172
sS'default'
p71173
S'1'
p71174
sS'name'
p71175
S'enable'
p71176
sS'required'
p71177
I00
sS'group_name'
p71178
S'Advanced'
p71179
sa(dp71180
S'description'
p71181
S'Order parameter\n'
p71182
sS'cpp_type'
p71183
S'std::vector<VariableName>'
p71184
sS'default'
p71185
g3
sS'name'
p71186
S'eta'
p71187
sS'required'
p71188
I01
sS'group_name'
p71189
Nsa(dp71190
S'description'
p71191
S'Base name of the free energy function (used to name the material properties)\n'
p71192
sS'cpp_type'
p71193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71194
sS'default'
p71195
S'F'
p71196
sS'name'
p71197
S'f_name'
p71198
sS'required'
p71199
I00
sS'group_name'
p71200
Nsa(dp71201
S'description'
p71202
S'Phase A material (at eta=0)\n'
p71203
sS'cpp_type'
p71204
S'MaterialPropertyName'
p71205
sS'default'
p71206
g3
sS'name'
p71207
S'fa_name'
p71208
sS'required'
p71209
I01
sS'group_name'
p71210
Nsa(dp71211
S'description'
p71212
S'Phase A material (at eta=1)\n'
p71213
sS'cpp_type'
p71214
S'MaterialPropertyName'
p71215
sS'default'
p71216
g3
sS'name'
p71217
S'fb_name'
p71218
sS'required'
p71219
I01
sS'group_name'
p71220
Nsa(dp71221
S'description'
p71222
S'Barrier Function Material that provides g(eta)\n'
p71223
sS'cpp_type'
p71224
S'MaterialPropertyName'
p71225
sS'default'
p71226
S'g'
p71227
sS'name'
p71228
S'g'
p71229
sS'required'
p71230
I00
sS'group_name'
p71231
Nsa(dp71232
S'description'
p71233
S'Switching Function Material that provides h(eta)\n'
p71234
sS'cpp_type'
p71235
S'MaterialPropertyName'
p71236
sS'default'
p71237
S'h'
p71238
sS'name'
p71239
S'h'
p71240
sS'required'
p71241
I00
sS'group_name'
p71242
Nsa(dp71243
S'description'
p71244
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71245
sS'cpp_type'
p71246
S'bool'
p71247
sS'default'
p71248
S'1'
p71249
sS'name'
p71250
S'implicit'
p71251
sS'required'
p71252
I00
sS'group_name'
p71253
S'Advanced'
p71254
sa(dp71255
S'description'
p71256
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71257
sS'cpp_type'
p71258
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71259
sS'default'
p71260
g3
sS'name'
p71261
S'output_properties'
p71262
sS'required'
p71263
I00
sS'group_name'
p71264
S'Outputs'
p71265
sa(dp71266
S'description'
p71267
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71268
sS'cpp_type'
p71269
S'std::vector<OutputName, std::allocator<OutputName> >'
p71270
sS'default'
p71271
S'none'
p71272
sS'name'
p71273
S'outputs'
p71274
sS'required'
p71275
I00
sS'group_name'
p71276
S'Outputs'
p71277
sa(dp71278
S'description'
p71279
S'The seed for the master random number generator\n'
p71280
sS'cpp_type'
p71281
S'unsigned int'
p71282
sS'default'
p71283
S'0'
p71284
sS'name'
p71285
S'seed'
p71286
sS'required'
p71287
I00
sS'group_name'
p71288
S'Advanced'
p71289
sa(dp71290
S'description'
p71291
S'Flag to indicate if third derivatives are needed\n'
p71292
sS'cpp_type'
p71293
S'bool'
p71294
sS'default'
p71295
g3
sS'name'
p71296
S'third_derivatives'
p71297
sS'required'
p71298
I00
sS'group_name'
p71299
Nsa(dp71300
S'description'
p71301
g3
sS'cpp_type'
p71302
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71303
sS'default'
p71304
S'DerivativeTwoPhaseMaterial'
p71305
sS'name'
p71306
S'type'
p71307
sS'required'
p71308
I00
sS'group_name'
p71309
Nsa(dp71310
S'description'
p71311
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71312
sS'cpp_type'
p71313
S'bool'
p71314
sS'default'
p71315
S'0'
p71316
sS'name'
p71317
S'use_displaced_mesh'
p71318
sS'required'
p71319
I00
sS'group_name'
p71320
S'Advanced'
p71321
sasS'name'
p71322
S'/Materials/DerivativeTwoPhaseMaterial'
p71323
sa(dp71324
S'description'
p71325
S'Free energy contribution for nucleating discrete particles\n'
p71326
sS'subblocks'
p71327
NsS'parameters'
p71328
(lp71329
(dp71330
S'description'
p71331
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71332
sS'cpp_type'
p71333
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71334
sS'default'
p71335
g3
sS'name'
p71336
S'block'
p71337
sS'required'
p71338
I00
sS'group_name'
p71339
Nsa(dp71340
S'description'
p71341
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71342
sS'cpp_type'
p71343
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71344
sS'default'
p71345
g3
sS'name'
p71346
S'boundary'
p71347
sS'required'
p71348
I00
sS'group_name'
p71349
Nsa(dp71350
S'description'
p71351
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71352
sS'cpp_type'
p71353
S'bool'
p71354
sS'default'
p71355
S'1'
p71356
sS'name'
p71357
S'compute'
p71358
sS'required'
p71359
I00
sS'group_name'
p71360
Nsa(dp71361
S'description'
p71362
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71363
sS'cpp_type'
p71364
S'bool'
p71365
sS'default'
p71366
S'0'
p71367
sS'name'
p71368
S'constant_on_elem'
p71369
sS'required'
p71370
I00
sS'group_name'
p71371
S'Advanced'
p71372
sa(dp71373
S'description'
p71374
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71375
sS'cpp_type'
p71376
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71377
sS'default'
p71378
g3
sS'name'
p71379
S'control_tags'
p71380
sS'required'
p71381
I00
sS'group_name'
p71382
S'Advanced'
p71383
sa(dp71384
S'description'
p71385
S'Maximum order of derivatives taken (2 or 3)\n'
p71386
sS'cpp_type'
p71387
S'unsigned int'
p71388
sS'default'
p71389
S'3'
p71390
sS'name'
p71391
S'derivative_order'
p71392
sS'required'
p71393
I00
sS'group_name'
p71394
Nsa(dp71395
S'description'
p71396
S'Set the enabled status of the MooseObject.\n'
p71397
sS'cpp_type'
p71398
S'bool'
p71399
sS'default'
p71400
S'1'
p71401
sS'name'
p71402
S'enable'
p71403
sS'required'
p71404
I00
sS'group_name'
p71405
S'Advanced'
p71406
sa(dp71407
S'description'
p71408
S'Base name of the free energy function (used to name the material properties)\n'
p71409
sS'cpp_type'
p71410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71411
sS'default'
p71412
S'F'
p71413
sS'name'
p71414
S'f_name'
p71415
sS'required'
p71416
I00
sS'group_name'
p71417
Nsa(dp71418
S'description'
p71419
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71420
sS'cpp_type'
p71421
S'bool'
p71422
sS'default'
p71423
S'1'
p71424
sS'name'
p71425
S'implicit'
p71426
sS'required'
p71427
I00
sS'group_name'
p71428
S'Advanced'
p71429
sa(dp71430
S'description'
p71431
S'DiscreteNucleationMap user object\n'
p71432
sS'cpp_type'
p71433
S'UserObjectName'
p71434
sS'default'
p71435
g3
sS'name'
p71436
S'map'
p71437
sS'required'
p71438
I01
sS'group_name'
p71439
Nsa(dp71440
S'description'
p71441
S'List of variables to force to a target concentration value\n'
p71442
sS'cpp_type'
p71443
S'std::vector<VariableName>'
p71444
sS'default'
p71445
g3
sS'name'
p71446
S'op_names'
p71447
sS'required'
p71448
I01
sS'group_name'
p71449
Nsa(dp71450
S'description'
p71451
S'List of target concentration values\n'
p71452
sS'cpp_type'
p71453
S'std::vector<double, std::allocator<double> >'
p71454
sS'default'
p71455
g3
sS'name'
p71456
S'op_values'
p71457
sS'required'
p71458
I01
sS'group_name'
p71459
Nsa(dp71460
S'description'
p71461
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71462
sS'cpp_type'
p71463
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71464
sS'default'
p71465
g3
sS'name'
p71466
S'output_properties'
p71467
sS'required'
p71468
I00
sS'group_name'
p71469
S'Outputs'
p71470
sa(dp71471
S'description'
p71472
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71473
sS'cpp_type'
p71474
S'std::vector<OutputName, std::allocator<OutputName> >'
p71475
sS'default'
p71476
S'none'
p71477
sS'name'
p71478
S'outputs'
p71479
sS'required'
p71480
I00
sS'group_name'
p71481
S'Outputs'
p71482
sa(dp71483
S'description'
p71484
S'Penalty factor for enforcing the target concentrations\n'
p71485
sS'cpp_type'
p71486
S'double'
p71487
sS'default'
p71488
S'20'
p71489
sS'name'
p71490
S'penalty'
p71491
sS'required'
p71492
I00
sS'group_name'
p71493
Nsa(dp71494
S'name'
p71495
S'penalty_mode'
p71496
sS'cpp_type'
p71497
S'MooseEnum'
p71498
sS'default'
p71499
S'MATCH'
p71500
sS'description'
p71501
S'Match the target concentration or take it as a minimum or maximum concentration target\n'
p71502
sS'required'
p71503
I00
sS'options'
p71504
S'MATCH MIN MAX'
p71505
sS'group_name'
p71506
Nsa(dp71507
S'description'
p71508
S'The seed for the master random number generator\n'
p71509
sS'cpp_type'
p71510
S'unsigned int'
p71511
sS'default'
p71512
S'0'
p71513
sS'name'
p71514
S'seed'
p71515
sS'required'
p71516
I00
sS'group_name'
p71517
S'Advanced'
p71518
sa(dp71519
S'description'
p71520
S'Flag to indicate if third derivatives are needed\n'
p71521
sS'cpp_type'
p71522
S'bool'
p71523
sS'default'
p71524
g3
sS'name'
p71525
S'third_derivatives'
p71526
sS'required'
p71527
I00
sS'group_name'
p71528
Nsa(dp71529
S'description'
p71530
g3
sS'cpp_type'
p71531
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71532
sS'default'
p71533
S'DiscreteNucleation'
p71534
sS'name'
p71535
S'type'
p71536
sS'required'
p71537
I00
sS'group_name'
p71538
Nsa(dp71539
S'description'
p71540
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71541
sS'cpp_type'
p71542
S'bool'
p71543
sS'default'
p71544
S'0'
p71545
sS'name'
p71546
S'use_displaced_mesh'
p71547
sS'required'
p71548
I00
sS'group_name'
p71549
S'Advanced'
p71550
sasS'name'
p71551
S'/Materials/DiscreteNucleation'
p71552
sa(dp71553
S'description'
p71554
S'Free energy material for the elastic energy contributions.\n'
p71555
sS'subblocks'
p71556
NsS'parameters'
p71557
(lp71558
(dp71559
S'description'
p71560
S'Arguments of F() - use vector coupling\n'
p71561
sS'cpp_type'
p71562
S'std::vector<VariableName>'
p71563
sS'default'
p71564
g3
sS'name'
p71565
S'args'
p71566
sS'required'
p71567
I01
sS'group_name'
p71568
Nsa(dp71569
S'description'
p71570
S'Material property base name\n'
p71571
sS'cpp_type'
p71572
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71573
sS'default'
p71574
g3
sS'name'
p71575
S'base_name'
p71576
sS'required'
p71577
I00
sS'group_name'
p71578
Nsa(dp71579
S'description'
p71580
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71581
sS'cpp_type'
p71582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71583
sS'default'
p71584
g3
sS'name'
p71585
S'block'
p71586
sS'required'
p71587
I00
sS'group_name'
p71588
Nsa(dp71589
S'description'
p71590
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71591
sS'cpp_type'
p71592
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71593
sS'default'
p71594
g3
sS'name'
p71595
S'boundary'
p71596
sS'required'
p71597
I00
sS'group_name'
p71598
Nsa(dp71599
S'description'
p71600
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71601
sS'cpp_type'
p71602
S'bool'
p71603
sS'default'
p71604
S'1'
p71605
sS'name'
p71606
S'compute'
p71607
sS'required'
p71608
I00
sS'group_name'
p71609
Nsa(dp71610
S'description'
p71611
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71612
sS'cpp_type'
p71613
S'bool'
p71614
sS'default'
p71615
S'0'
p71616
sS'name'
p71617
S'constant_on_elem'
p71618
sS'required'
p71619
I00
sS'group_name'
p71620
S'Advanced'
p71621
sa(dp71622
S'description'
p71623
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71624
sS'cpp_type'
p71625
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71626
sS'default'
p71627
g3
sS'name'
p71628
S'control_tags'
p71629
sS'required'
p71630
I00
sS'group_name'
p71631
S'Advanced'
p71632
sa(dp71633
S'description'
p71634
S'Maximum order of derivatives taken (2 or 3)\n'
p71635
sS'cpp_type'
p71636
S'unsigned int'
p71637
sS'default'
p71638
S'3'
p71639
sS'name'
p71640
S'derivative_order'
p71641
sS'required'
p71642
I00
sS'group_name'
p71643
Nsa(dp71644
S'description'
p71645
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p71646
sS'cpp_type'
p71647
S'std::vector<VariableName>'
p71648
sS'default'
p71649
g3
sS'name'
p71650
S'displacement_gradients'
p71651
sS'required'
p71652
I00
sS'group_name'
p71653
Nsa(dp71654
S'description'
p71655
S'Set the enabled status of the MooseObject.\n'
p71656
sS'cpp_type'
p71657
S'bool'
p71658
sS'default'
p71659
S'1'
p71660
sS'name'
p71661
S'enable'
p71662
sS'required'
p71663
I00
sS'group_name'
p71664
S'Advanced'
p71665
sa(dp71666
S'description'
p71667
S'Base name of the free energy function (used to name the material properties)\n'
p71668
sS'cpp_type'
p71669
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71670
sS'default'
p71671
S'F'
p71672
sS'name'
p71673
S'f_name'
p71674
sS'required'
p71675
I00
sS'group_name'
p71676
Nsa(dp71677
S'description'
p71678
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71679
sS'cpp_type'
p71680
S'bool'
p71681
sS'default'
p71682
S'1'
p71683
sS'name'
p71684
S'implicit'
p71685
sS'required'
p71686
I00
sS'group_name'
p71687
S'Advanced'
p71688
sa(dp71689
S'description'
p71690
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71691
sS'cpp_type'
p71692
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71693
sS'default'
p71694
g3
sS'name'
p71695
S'output_properties'
p71696
sS'required'
p71697
I00
sS'group_name'
p71698
S'Outputs'
p71699
sa(dp71700
S'description'
p71701
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71702
sS'cpp_type'
p71703
S'std::vector<OutputName, std::allocator<OutputName> >'
p71704
sS'default'
p71705
S'none'
p71706
sS'name'
p71707
S'outputs'
p71708
sS'required'
p71709
I00
sS'group_name'
p71710
S'Outputs'
p71711
sa(dp71712
S'description'
p71713
S'The seed for the master random number generator\n'
p71714
sS'cpp_type'
p71715
S'unsigned int'
p71716
sS'default'
p71717
S'0'
p71718
sS'name'
p71719
S'seed'
p71720
sS'required'
p71721
I00
sS'group_name'
p71722
S'Advanced'
p71723
sa(dp71724
S'description'
p71725
S'Flag to indicate if third derivatives are needed\n'
p71726
sS'cpp_type'
p71727
S'bool'
p71728
sS'default'
p71729
g3
sS'name'
p71730
S'third_derivatives'
p71731
sS'required'
p71732
I00
sS'group_name'
p71733
Nsa(dp71734
S'description'
p71735
g3
sS'cpp_type'
p71736
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71737
sS'default'
p71738
S'ElasticEnergyMaterial'
p71739
sS'name'
p71740
S'type'
p71741
sS'required'
p71742
I00
sS'group_name'
p71743
Nsa(dp71744
S'description'
p71745
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71746
sS'cpp_type'
p71747
S'bool'
p71748
sS'default'
p71749
S'0'
p71750
sS'name'
p71751
S'use_displaced_mesh'
p71752
sS'required'
p71753
I00
sS'group_name'
p71754
S'Advanced'
p71755
sasS'name'
p71756
S'/Materials/ElasticEnergyMaterial'
p71757
sa(dp71758
S'description'
p71759
S'Providing external applied force density to grains\n'
p71760
sS'subblocks'
p71761
NsS'parameters'
p71762
(lp71763
(dp71764
S'description'
p71765
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71766
sS'cpp_type'
p71767
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71768
sS'default'
p71769
g3
sS'name'
p71770
S'block'
p71771
sS'required'
p71772
I00
sS'group_name'
p71773
Nsa(dp71774
S'description'
p71775
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71776
sS'cpp_type'
p71777
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71778
sS'default'
p71779
g3
sS'name'
p71780
S'boundary'
p71781
sS'required'
p71782
I00
sS'group_name'
p71783
Nsa(dp71784
S'description'
p71785
S'Concentration field\n'
p71786
sS'cpp_type'
p71787
S'std::vector<VariableName>'
p71788
sS'default'
p71789
g3
sS'name'
p71790
S'c'
p71791
sS'required'
p71792
I00
sS'group_name'
p71793
Nsa(dp71794
S'description'
p71795
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p71796
sS'cpp_type'
p71797
S'bool'
p71798
sS'default'
p71799
S'1'
p71800
sS'name'
p71801
S'compute'
p71802
sS'required'
p71803
I00
sS'group_name'
p71804
Nsa(dp71805
S'description'
p71806
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p71807
sS'cpp_type'
p71808
S'bool'
p71809
sS'default'
p71810
S'0'
p71811
sS'name'
p71812
S'constant_on_elem'
p71813
sS'required'
p71814
I00
sS'group_name'
p71815
S'Advanced'
p71816
sa(dp71817
S'description'
p71818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71819
sS'cpp_type'
p71820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71821
sS'default'
p71822
g3
sS'name'
p71823
S'control_tags'
p71824
sS'required'
p71825
I00
sS'group_name'
p71826
S'Advanced'
p71827
sa(dp71828
S'description'
p71829
S'Set the enabled status of the MooseObject.\n'
p71830
sS'cpp_type'
p71831
S'bool'
p71832
sS'default'
p71833
S'1'
p71834
sS'name'
p71835
S'enable'
p71836
sS'required'
p71837
I00
sS'group_name'
p71838
S'Advanced'
p71839
sa(dp71840
S'description'
p71841
S'Array of coupled order parameters\n'
p71842
sS'cpp_type'
p71843
S'std::vector<VariableName>'
p71844
sS'default'
p71845
g3
sS'name'
p71846
S'etas'
p71847
sS'required'
p71848
I01
sS'group_name'
p71849
Nsa(dp71850
S'description'
p71851
S'The forcing function in x direction.\n'
p71852
sS'cpp_type'
p71853
S'FunctionName'
p71854
sS'default'
p71855
S'0'
p71856
sS'name'
p71857
S'force_x'
p71858
sS'required'
p71859
I00
sS'group_name'
p71860
Nsa(dp71861
S'description'
p71862
S'The forcing function in y direction.\n'
p71863
sS'cpp_type'
p71864
S'FunctionName'
p71865
sS'default'
p71866
S'0'
p71867
sS'name'
p71868
S'force_y'
p71869
sS'required'
p71870
I00
sS'group_name'
p71871
Nsa(dp71872
S'description'
p71873
S'The forcing function in z direction.\n'
p71874
sS'cpp_type'
p71875
S'FunctionName'
p71876
sS'default'
p71877
S'0'
p71878
sS'name'
p71879
S'force_z'
p71880
sS'required'
p71881
I00
sS'group_name'
p71882
Nsa(dp71883
S'description'
p71884
S'Determines whether this object is calculated using an implicit or explicit form\n'
p71885
sS'cpp_type'
p71886
S'bool'
p71887
sS'default'
p71888
S'1'
p71889
sS'name'
p71890
S'implicit'
p71891
sS'required'
p71892
I00
sS'group_name'
p71893
S'Advanced'
p71894
sa(dp71895
S'description'
p71896
S'stiffness constant multiplier\n'
p71897
sS'cpp_type'
p71898
S'double'
p71899
sS'default'
p71900
S'1'
p71901
sS'name'
p71902
S'k'
p71903
sS'required'
p71904
I00
sS'group_name'
p71905
Nsa(dp71906
S'description'
p71907
S'Array of coupled order parameters (num_name)\n'
p71908
sS'cpp_type'
p71909
S'unsigned int'
p71910
sS'default'
p71911
g3
sS'name'
p71912
S'op_num'
p71913
sS'required'
p71914
I00
sS'group_name'
p71915
Nsa(dp71916
S'description'
p71917
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71918
sS'cpp_type'
p71919
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71920
sS'default'
p71921
g3
sS'name'
p71922
S'output_properties'
p71923
sS'required'
p71924
I00
sS'group_name'
p71925
S'Outputs'
p71926
sa(dp71927
S'description'
p71928
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71929
sS'cpp_type'
p71930
S'std::vector<OutputName, std::allocator<OutputName> >'
p71931
sS'default'
p71932
S'none'
p71933
sS'name'
p71934
S'outputs'
p71935
sS'required'
p71936
I00
sS'group_name'
p71937
S'Outputs'
p71938
sa(dp71939
S'description'
p71940
S'The seed for the master random number generator\n'
p71941
sS'cpp_type'
p71942
S'unsigned int'
p71943
sS'default'
p71944
S'0'
p71945
sS'name'
p71946
S'seed'
p71947
sS'required'
p71948
I00
sS'group_name'
p71949
S'Advanced'
p71950
sa(dp71951
S'description'
p71952
g3
sS'cpp_type'
p71953
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71954
sS'default'
p71955
S'ExternalForceDensityMaterial'
p71956
sS'name'
p71957
S'type'
p71958
sS'required'
p71959
I00
sS'group_name'
p71960
Nsa(dp71961
S'description'
p71962
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71963
sS'cpp_type'
p71964
S'bool'
p71965
sS'default'
p71966
S'0'
p71967
sS'name'
p71968
S'use_displaced_mesh'
p71969
sS'required'
p71970
I00
sS'group_name'
p71971
S'Advanced'
p71972
sa(dp71973
S'description'
p71974
S'Array of coupled order parameters (base_name)\n'
p71975
sS'cpp_type'
p71976
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71977
sS'default'
p71978
g3
sS'name'
p71979
S'var_name_base'
p71980
sS'required'
p71981
I00
sS'group_name'
p71982
NsasS'name'
p71983
S'/Materials/ExternalForceDensityMaterial'
p71984
sa(dp71985
S'description'
p71986
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p71987
sS'subblocks'
p71988
NsS'parameters'
p71989
(lp71990
(dp71991
S'description'
p71992
S'Constitutive stress residue absolute tolerance\n'
p71993
sS'cpp_type'
p71994
S'double'
p71995
sS'default'
p71996
S'1e-06'
p71997
sS'name'
p71998
S'abs_tol'
p71999
sS'required'
p72000
I00
sS'group_name'
p72001
Nsa(dp72002
S'description'
p72003
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p72004
sS'cpp_type'
p72005
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72006
sS'default'
p72007
g3
sS'name'
p72008
S'base_name'
p72009
sS'required'
p72010
I00
sS'group_name'
p72011
Nsa(dp72012
S'description'
p72013
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72014
sS'cpp_type'
p72015
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72016
sS'default'
p72017
g3
sS'name'
p72018
S'block'
p72019
sS'required'
p72020
I00
sS'group_name'
p72021
Nsa(dp72022
S'description'
p72023
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72024
sS'cpp_type'
p72025
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72026
sS'default'
p72027
g3
sS'name'
p72028
S'boundary'
p72029
sS'required'
p72030
I00
sS'group_name'
p72031
Nsa(dp72032
S'description'
p72033
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p72034
sS'cpp_type'
p72035
S'bool'
p72036
sS'default'
p72037
S'1'
p72038
sS'name'
p72039
S'compute'
p72040
sS'required'
p72041
I00
sS'group_name'
p72042
Nsa(dp72043
S'description'
p72044
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p72045
sS'cpp_type'
p72046
S'bool'
p72047
sS'default'
p72048
S'0'
p72049
sS'name'
p72050
S'constant_on_elem'
p72051
sS'required'
p72052
I00
sS'group_name'
p72053
S'Advanced'
p72054
sa(dp72055
S'description'
p72056
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72057
sS'cpp_type'
p72058
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72059
sS'default'
p72060
g3
sS'name'
p72061
S'control_tags'
p72062
sS'required'
p72063
I00
sS'group_name'
p72064
S'Advanced'
p72065
sa(dp72066
S'description'
p72067
S'Set the enabled status of the MooseObject.\n'
p72068
sS'cpp_type'
p72069
S'bool'
p72070
sS'default'
p72071
S'1'
p72072
sS'name'
p72073
S'enable'
p72074
sS'required'
p72075
I00
sS'group_name'
p72076
S'Advanced'
p72077
sa(dp72078
S'description'
p72079
S'Parameters used in slip rate equations\n'
p72080
sS'cpp_type'
p72081
S'std::vector<double, std::allocator<double> >'
p72082
sS'default'
p72083
g3
sS'name'
p72084
S'flowprops'
p72085
sS'required'
p72086
I00
sS'group_name'
p72087
Nsa(dp72088
S'description'
p72089
S'Flag to generate random stress to perform time cutback on constitutive failure\n'
p72090
sS'cpp_type'
p72091
S'bool'
p72092
sS'default'
p72093
S'0'
p72094
sS'name'
p72095
S'gen_random_stress_flag'
p72096
sS'required'
p72097
I00
sS'group_name'
p72098
Nsa(dp72099
S'description'
p72100
S'Initial values of slip system resistances\n'
p72101
sS'cpp_type'
p72102
S'std::vector<double, std::allocator<double> >'
p72103
sS'default'
p72104
g3
sS'name'
p72105
S'gprops'
p72106
sS'required'
p72107
I00
sS'group_name'
p72108
Nsa(dp72109
S'description'
p72110
S'Constitutive slip system resistance residual tolerance\n'
p72111
sS'cpp_type'
p72112
S'double'
p72113
sS'default'
p72114
S'100'
p72115
sS'name'
p72116
S'gtol'
p72117
sS'required'
p72118
I00
sS'group_name'
p72119
Nsa(dp72120
S'description'
p72121
S'Hardening properties\n'
p72122
sS'cpp_type'
p72123
S'std::vector<double, std::allocator<double> >'
p72124
sS'default'
p72125
g3
sS'name'
p72126
S'hprops'
p72127
sS'required'
p72128
I00
sS'group_name'
p72129
Nsa(dp72130
S'description'
p72131
S'Determines whether this object is calculated using an implicit or explicit form\n'
p72132
sS'cpp_type'
p72133
S'bool'
p72134
sS'default'
p72135
S'1'
p72136
sS'name'
p72137
S'implicit'
p72138
sS'required'
p72139
I00
sS'group_name'
p72140
S'Advanced'
p72141
sa(dp72142
S'description'
p72143
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p72144
sS'cpp_type'
p72145
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p72146
sS'default'
p72147
g3
sS'name'
p72148
S'initial_stress'
p72149
sS'required'
p72150
I00
sS'group_name'
p72151
Nsa(dp72152
S'description'
p72153
S'Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n'
p72154
sS'cpp_type'
p72155
S'bool'
p72156
sS'default'
p72157
S'0'
p72158
sS'name'
p72159
S'input_random_scaling_var'
p72160
sS'required'
p72161
I00
sS'group_name'
p72162
Nsa(dp72163
S'name'
p72164
S'intvar_read_type'
p72165
sS'cpp_type'
p72166
S'MooseEnum'
p72167
sS'default'
p72168
S'none'
p72169
sS'description'
p72170
S'Read from options for initial value of internal variables: Default from .i file\n'
p72171
sS'required'
p72172
I00
sS'options'
p72173
S'slip_sys_file slip_sys_res_file none'
p72174
sS'group_name'
p72175
Nsa(dp72176
S'description'
p72177
S'Line search bisection method maximum number of iteration\n'
p72178
sS'cpp_type'
p72179
S'unsigned int'
p72180
sS'default'
p72181
S'20'
p72182
sS'name'
p72183
S'line_search_maxiter'
p72184
sS'required'
p72185
I00
sS'group_name'
p72186
Nsa(dp72187
S'name'
p72188
S'line_search_method'
p72189
sS'cpp_type'
p72190
S'MooseEnum'
p72191
sS'default'
p72192
S'CUT_HALF'
p72193
sS'description'
p72194
S'The method used in line search\n'
p72195
sS'required'
p72196
I00
sS'options'
p72197
S'CUT_HALF BISECTION'
p72198
sS'group_name'
p72199
Nsa(dp72200
S'description'
p72201
S'Line search bisection method tolerance\n'
p72202
sS'cpp_type'
p72203
S'double'
p72204
sS'default'
p72205
S'0.5'
p72206
sS'name'
p72207
S'line_search_tol'
p72208
sS'required'
p72209
I00
sS'group_name'
p72210
Nsa(dp72211
S'description'
p72212
S'Maximum number of substep iteration\n'
p72213
sS'cpp_type'
p72214
S'unsigned int'
p72215
sS'default'
p72216
S'1'
p72217
sS'name'
p72218
S'maximum_substep_iteration'
p72219
sS'required'
p72220
I00
sS'group_name'
p72221
Nsa(dp72222
S'description'
p72223
S'Maximum number of iterations for stress update\n'
p72224
sS'cpp_type'
p72225
S'unsigned int'
p72226
sS'default'
p72227
S'100'
p72228
sS'name'
p72229
S'maxiter'
p72230
sS'required'
p72231
I00
sS'group_name'
p72232
Nsa(dp72233
S'description'
p72234
S'Maximum number of iterations for slip system resistance update\n'
p72235
sS'cpp_type'
p72236
S'unsigned int'
p72237
sS'default'
p72238
S'100'
p72239
sS'name'
p72240
S'maxitergss'
p72241
sS'required'
p72242
I00
sS'group_name'
p72243
Nsa(dp72244
S'description'
p72245
S'Minimum line search step size\n'
p72246
sS'cpp_type'
p72247
S'double'
p72248
sS'default'
p72249
S'0.01'
p72250
sS'name'
p72251
S'min_line_search_step_size'
p72252
sS'required'
p72253
I00
sS'group_name'
p72254
Nsa(dp72255
S'description'
p72256
S'Number of slip systems\n'
p72257
sS'cpp_type'
p72258
S'int'
p72259
sS'default'
p72260
g3
sS'name'
p72261
S'nss'
p72262
sS'required'
p72263
I01
sS'group_name'
p72264
Nsa(dp72265
S'description'
p72266
S'Number of flow rate properties for a slip system\n'
p72267
sS'cpp_type'
p72268
S'unsigned int'
p72269
sS'default'
p72270
S'2'
p72271
sS'name'
p72272
S'num_slip_sys_flowrate_props'
p72273
sS'required'
p72274
I00
sS'group_name'
p72275
Nsa(dp72276
S'description'
p72277
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p72278
sS'cpp_type'
p72279
S'unsigned int'
p72280
sS'default'
p72281
S'0'
p72282
sS'name'
p72283
S'num_slip_sys_props'
p72284
sS'required'
p72285
I00
sS'group_name'
p72286
Nsa(dp72287
S'description'
p72288
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72289
sS'cpp_type'
p72290
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72291
sS'default'
p72292
g3
sS'name'
p72293
S'output_properties'
p72294
sS'required'
p72295
I00
sS'group_name'
p72296
S'Outputs'
p72297
sa(dp72298
S'description'
p72299
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72300
sS'cpp_type'
p72301
S'std::vector<OutputName, std::allocator<OutputName> >'
p72302
sS'default'
p72303
S'none'
p72304
sS'name'
p72305
S'outputs'
p72306
sS'required'
p72307
I00
sS'group_name'
p72308
S'Outputs'
p72309
sa(dp72310
S'description'
p72311
S'Random scaling variable: Large value can cause non-positive definiteness\n'
p72312
sS'cpp_type'
p72313
S'double'
p72314
sS'default'
p72315
S'1e+09'
p72316
sS'name'
p72317
S'random_scaling_var'
p72318
sS'required'
p72319
I00
sS'group_name'
p72320
Nsa(dp72321
S'description'
p72322
S'Random integer used to generate random stress when constitutive failure occurs\n'
p72323
sS'cpp_type'
p72324
S'unsigned int'
p72325
sS'default'
p72326
S'2000'
p72327
sS'name'
p72328
S'random_seed'
p72329
sS'required'
p72330
I00
sS'group_name'
p72331
Nsa(dp72332
S'description'
p72333
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p72334
sS'cpp_type'
p72335
S'UserObjectName'
p72336
sS'default'
p72337
g3
sS'name'
p72338
S'read_prop_user_object'
p72339
sS'required'
p72340
I00
sS'group_name'
p72341
Nsa(dp72342
S'description'
p72343
S'Constitutive stress residue relative tolerance\n'
p72344
sS'cpp_type'
p72345
S'double'
p72346
sS'default'
p72347
S'1e-06'
p72348
sS'name'
p72349
S'rtol'
p72350
sS'required'
p72351
I00
sS'group_name'
p72352
Nsa(dp72353
S'description'
p72354
S'The seed for the master random number generator\n'
p72355
sS'cpp_type'
p72356
S'unsigned int'
p72357
sS'default'
p72358
S'0'
p72359
sS'name'
p72360
S'seed'
p72361
sS'required'
p72362
I00
sS'group_name'
p72363
S'Advanced'
p72364
sa(dp72365
S'description'
p72366
S'Maximum allowable slip in an increment\n'
p72367
sS'cpp_type'
p72368
S'double'
p72369
sS'default'
p72370
S'0.02'
p72371
sS'name'
p72372
S'slip_incr_tol'
p72373
sS'required'
p72374
I00
sS'group_name'
p72375
Nsa(dp72376
S'description'
p72377
S'Name of the file containing the slip system\n'
p72378
sS'cpp_type'
p72379
S'FileName'
p72380
sS'default'
p72381
g3
sS'name'
p72382
S'slip_sys_file_name'
p72383
sS'required'
p72384
I01
sS'group_name'
p72385
Nsa(dp72386
S'description'
p72387
S'Name of the file containing the values of slip rate equation parameters\n'
p72388
sS'cpp_type'
p72389
S'FileName'
p72390
sS'default'
p72391
g3
sS'name'
p72392
S'slip_sys_flow_prop_file_name'
p72393
sS'required'
p72394
I00
sS'group_name'
p72395
Nsa(dp72396
S'description'
p72397
S'Name of the file containing the values of hardness evolution parameters\n'
p72398
sS'cpp_type'
p72399
S'FileName'
p72400
sS'default'
p72401
g3
sS'name'
p72402
S'slip_sys_hard_prop_file_name'
p72403
sS'required'
p72404
I00
sS'group_name'
p72405
Nsa(dp72406
S'description'
p72407
S'Name of the file containing the initial values of slip system resistances\n'
p72408
sS'cpp_type'
p72409
S'FileName'
p72410
sS'default'
p72411
g3
sS'name'
p72412
S'slip_sys_res_prop_file_name'
p72413
sS'required'
p72414
I00
sS'group_name'
p72415
Nsa(dp72416
S'description'
p72417
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p72418
sS'cpp_type'
p72419
S'bool'
p72420
sS'default'
p72421
S'0'
p72422
sS'name'
p72423
S'store_stress_old'
p72424
sS'required'
p72425
I00
sS'group_name'
p72426
Nsa(dp72427
S'name'
p72428
S'tan_mod_type'
p72429
sS'cpp_type'
p72430
S'MooseEnum'
p72431
sS'default'
p72432
S'none'
p72433
sS'description'
p72434
S'Type of tangent moduli for preconditioner: default elastic\n'
p72435
sS'required'
p72436
I00
sS'options'
p72437
S'exact none'
p72438
sS'group_name'
p72439
Nsa(dp72440
S'description'
p72441
g3
sS'cpp_type'
p72442
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72443
sS'default'
p72444
S'FiniteStrainCPSlipRateRes'
p72445
sS'name'
p72446
S'type'
p72447
sS'required'
p72448
I00
sS'group_name'
p72449
Nsa(dp72450
S'description'
p72451
S'Use line search in constitutive update\n'
p72452
sS'cpp_type'
p72453
S'bool'
p72454
sS'default'
p72455
S'0'
p72456
sS'name'
p72457
S'use_line_search'
p72458
sS'required'
p72459
I00
sS'group_name'
p72460
NsasS'name'
p72461
S'/Materials/FiniteStrainCPSlipRateRes'
p72462
sa(dp72463
S'description'
p72464
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p72465
sS'subblocks'
p72466
NsS'parameters'
p72467
(lp72468
(dp72469
S'description'
p72470
S'Constitutive stress residue absolute tolerance\n'
p72471
sS'cpp_type'
p72472
S'double'
p72473
sS'default'
p72474
S'1e-06'
p72475
sS'name'
p72476
S'abs_tol'
p72477
sS'required'
p72478
I00
sS'group_name'
p72479
Nsa(dp72480
S'description'
p72481
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p72482
sS'cpp_type'
p72483
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72484
sS'default'
p72485
g3
sS'name'
p72486
S'base_name'
p72487
sS'required'
p72488
I00
sS'group_name'
p72489
Nsa(dp72490
S'description'
p72491
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72492
sS'cpp_type'
p72493
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72494
sS'default'
p72495
g3
sS'name'
p72496
S'block'
p72497
sS'required'
p72498
I00
sS'group_name'
p72499
Nsa(dp72500
S'description'
p72501
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72502
sS'cpp_type'
p72503
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72504
sS'default'
p72505
g3
sS'name'
p72506
S'boundary'
p72507
sS'required'
p72508
I00
sS'group_name'
p72509
Nsa(dp72510
S'description'
p72511
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p72512
sS'cpp_type'
p72513
S'bool'
p72514
sS'default'
p72515
S'1'
p72516
sS'name'
p72517
S'compute'
p72518
sS'required'
p72519
I00
sS'group_name'
p72520
Nsa(dp72521
S'description'
p72522
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p72523
sS'cpp_type'
p72524
S'bool'
p72525
sS'default'
p72526
S'0'
p72527
sS'name'
p72528
S'constant_on_elem'
p72529
sS'required'
p72530
I00
sS'group_name'
p72531
S'Advanced'
p72532
sa(dp72533
S'description'
p72534
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72535
sS'cpp_type'
p72536
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72537
sS'default'
p72538
g3
sS'name'
p72539
S'control_tags'
p72540
sS'required'
p72541
I00
sS'group_name'
p72542
S'Advanced'
p72543
sa(dp72544
S'description'
p72545
S'Set the enabled status of the MooseObject.\n'
p72546
sS'cpp_type'
p72547
S'bool'
p72548
sS'default'
p72549
S'1'
p72550
sS'name'
p72551
S'enable'
p72552
sS'required'
p72553
I00
sS'group_name'
p72554
S'Advanced'
p72555
sa(dp72556
S'description'
p72557
S'Parameters used in slip rate equations\n'
p72558
sS'cpp_type'
p72559
S'std::vector<double, std::allocator<double> >'
p72560
sS'default'
p72561
g3
sS'name'
p72562
S'flowprops'
p72563
sS'required'
p72564
I00
sS'group_name'
p72565
Nsa(dp72566
S'description'
p72567
S'Flag to generate random stress to perform time cutback on constitutive failure\n'
p72568
sS'cpp_type'
p72569
S'bool'
p72570
sS'default'
p72571
S'0'
p72572
sS'name'
p72573
S'gen_random_stress_flag'
p72574
sS'required'
p72575
I00
sS'group_name'
p72576
Nsa(dp72577
S'description'
p72578
S'Initial values of slip system resistances\n'
p72579
sS'cpp_type'
p72580
S'std::vector<double, std::allocator<double> >'
p72581
sS'default'
p72582
g3
sS'name'
p72583
S'gprops'
p72584
sS'required'
p72585
I00
sS'group_name'
p72586
Nsa(dp72587
S'description'
p72588
S'Constitutive slip system resistance residual tolerance\n'
p72589
sS'cpp_type'
p72590
S'double'
p72591
sS'default'
p72592
S'100'
p72593
sS'name'
p72594
S'gtol'
p72595
sS'required'
p72596
I00
sS'group_name'
p72597
Nsa(dp72598
S'description'
p72599
S'Hardening properties\n'
p72600
sS'cpp_type'
p72601
S'std::vector<double, std::allocator<double> >'
p72602
sS'default'
p72603
g3
sS'name'
p72604
S'hprops'
p72605
sS'required'
p72606
I00
sS'group_name'
p72607
Nsa(dp72608
S'description'
p72609
S'Determines whether this object is calculated using an implicit or explicit form\n'
p72610
sS'cpp_type'
p72611
S'bool'
p72612
sS'default'
p72613
S'1'
p72614
sS'name'
p72615
S'implicit'
p72616
sS'required'
p72617
I00
sS'group_name'
p72618
S'Advanced'
p72619
sa(dp72620
S'description'
p72621
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p72622
sS'cpp_type'
p72623
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p72624
sS'default'
p72625
g3
sS'name'
p72626
S'initial_stress'
p72627
sS'required'
p72628
I00
sS'group_name'
p72629
Nsa(dp72630
S'description'
p72631
S'Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n'
p72632
sS'cpp_type'
p72633
S'bool'
p72634
sS'default'
p72635
S'0'
p72636
sS'name'
p72637
S'input_random_scaling_var'
p72638
sS'required'
p72639
I00
sS'group_name'
p72640
Nsa(dp72641
S'name'
p72642
S'intvar_read_type'
p72643
sS'cpp_type'
p72644
S'MooseEnum'
p72645
sS'default'
p72646
S'none'
p72647
sS'description'
p72648
S'Read from options for initial value of internal variables: Default from .i file\n'
p72649
sS'required'
p72650
I00
sS'options'
p72651
S'slip_sys_file slip_sys_res_file none'
p72652
sS'group_name'
p72653
Nsa(dp72654
S'description'
p72655
S'Line search bisection method maximum number of iteration\n'
p72656
sS'cpp_type'
p72657
S'unsigned int'
p72658
sS'default'
p72659
S'20'
p72660
sS'name'
p72661
S'line_search_maxiter'
p72662
sS'required'
p72663
I00
sS'group_name'
p72664
Nsa(dp72665
S'name'
p72666
S'line_search_method'
p72667
sS'cpp_type'
p72668
S'MooseEnum'
p72669
sS'default'
p72670
S'CUT_HALF'
p72671
sS'description'
p72672
S'The method used in line search\n'
p72673
sS'required'
p72674
I00
sS'options'
p72675
S'CUT_HALF BISECTION'
p72676
sS'group_name'
p72677
Nsa(dp72678
S'description'
p72679
S'Line search bisection method tolerance\n'
p72680
sS'cpp_type'
p72681
S'double'
p72682
sS'default'
p72683
S'0.5'
p72684
sS'name'
p72685
S'line_search_tol'
p72686
sS'required'
p72687
I00
sS'group_name'
p72688
Nsa(dp72689
S'description'
p72690
S'Maximum number of substep iteration\n'
p72691
sS'cpp_type'
p72692
S'unsigned int'
p72693
sS'default'
p72694
S'1'
p72695
sS'name'
p72696
S'maximum_substep_iteration'
p72697
sS'required'
p72698
I00
sS'group_name'
p72699
Nsa(dp72700
S'description'
p72701
S'Maximum number of iterations for stress update\n'
p72702
sS'cpp_type'
p72703
S'unsigned int'
p72704
sS'default'
p72705
S'100'
p72706
sS'name'
p72707
S'maxiter'
p72708
sS'required'
p72709
I00
sS'group_name'
p72710
Nsa(dp72711
S'description'
p72712
S'Maximum number of iterations for slip system resistance update\n'
p72713
sS'cpp_type'
p72714
S'unsigned int'
p72715
sS'default'
p72716
S'100'
p72717
sS'name'
p72718
S'maxitergss'
p72719
sS'required'
p72720
I00
sS'group_name'
p72721
Nsa(dp72722
S'description'
p72723
S'Minimum line search step size\n'
p72724
sS'cpp_type'
p72725
S'double'
p72726
sS'default'
p72727
S'0.01'
p72728
sS'name'
p72729
S'min_line_search_step_size'
p72730
sS'required'
p72731
I00
sS'group_name'
p72732
Nsa(dp72733
S'description'
p72734
S'Number of slip systems\n'
p72735
sS'cpp_type'
p72736
S'int'
p72737
sS'default'
p72738
g3
sS'name'
p72739
S'nss'
p72740
sS'required'
p72741
I01
sS'group_name'
p72742
Nsa(dp72743
S'description'
p72744
S'Number of flow rate properties for a slip system\n'
p72745
sS'cpp_type'
p72746
S'unsigned int'
p72747
sS'default'
p72748
S'2'
p72749
sS'name'
p72750
S'num_slip_sys_flowrate_props'
p72751
sS'required'
p72752
I00
sS'group_name'
p72753
Nsa(dp72754
S'description'
p72755
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p72756
sS'cpp_type'
p72757
S'unsigned int'
p72758
sS'default'
p72759
S'0'
p72760
sS'name'
p72761
S'num_slip_sys_props'
p72762
sS'required'
p72763
I00
sS'group_name'
p72764
Nsa(dp72765
S'description'
p72766
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72767
sS'cpp_type'
p72768
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72769
sS'default'
p72770
g3
sS'name'
p72771
S'output_properties'
p72772
sS'required'
p72773
I00
sS'group_name'
p72774
S'Outputs'
p72775
sa(dp72776
S'description'
p72777
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72778
sS'cpp_type'
p72779
S'std::vector<OutputName, std::allocator<OutputName> >'
p72780
sS'default'
p72781
S'none'
p72782
sS'name'
p72783
S'outputs'
p72784
sS'required'
p72785
I00
sS'group_name'
p72786
S'Outputs'
p72787
sa(dp72788
S'description'
p72789
S'Random scaling variable: Large value can cause non-positive definiteness\n'
p72790
sS'cpp_type'
p72791
S'double'
p72792
sS'default'
p72793
S'1e+09'
p72794
sS'name'
p72795
S'random_scaling_var'
p72796
sS'required'
p72797
I00
sS'group_name'
p72798
Nsa(dp72799
S'description'
p72800
S'Random integer used to generate random stress when constitutive failure occurs\n'
p72801
sS'cpp_type'
p72802
S'unsigned int'
p72803
sS'default'
p72804
S'2000'
p72805
sS'name'
p72806
S'random_seed'
p72807
sS'required'
p72808
I00
sS'group_name'
p72809
Nsa(dp72810
S'description'
p72811
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p72812
sS'cpp_type'
p72813
S'UserObjectName'
p72814
sS'default'
p72815
g3
sS'name'
p72816
S'read_prop_user_object'
p72817
sS'required'
p72818
I00
sS'group_name'
p72819
Nsa(dp72820
S'description'
p72821
S'Constitutive stress residue relative tolerance\n'
p72822
sS'cpp_type'
p72823
S'double'
p72824
sS'default'
p72825
S'1e-06'
p72826
sS'name'
p72827
S'rtol'
p72828
sS'required'
p72829
I00
sS'group_name'
p72830
Nsa(dp72831
S'description'
p72832
S'The seed for the master random number generator\n'
p72833
sS'cpp_type'
p72834
S'unsigned int'
p72835
sS'default'
p72836
S'0'
p72837
sS'name'
p72838
S'seed'
p72839
sS'required'
p72840
I00
sS'group_name'
p72841
S'Advanced'
p72842
sa(dp72843
S'description'
p72844
S'Maximum allowable slip in an increment\n'
p72845
sS'cpp_type'
p72846
S'double'
p72847
sS'default'
p72848
S'0.02'
p72849
sS'name'
p72850
S'slip_incr_tol'
p72851
sS'required'
p72852
I00
sS'group_name'
p72853
Nsa(dp72854
S'description'
p72855
S'Name of the file containing the slip system\n'
p72856
sS'cpp_type'
p72857
S'FileName'
p72858
sS'default'
p72859
g3
sS'name'
p72860
S'slip_sys_file_name'
p72861
sS'required'
p72862
I01
sS'group_name'
p72863
Nsa(dp72864
S'description'
p72865
S'Name of the file containing the values of slip rate equation parameters\n'
p72866
sS'cpp_type'
p72867
S'FileName'
p72868
sS'default'
p72869
g3
sS'name'
p72870
S'slip_sys_flow_prop_file_name'
p72871
sS'required'
p72872
I00
sS'group_name'
p72873
Nsa(dp72874
S'description'
p72875
S'Name of the file containing the values of hardness evolution parameters\n'
p72876
sS'cpp_type'
p72877
S'FileName'
p72878
sS'default'
p72879
g3
sS'name'
p72880
S'slip_sys_hard_prop_file_name'
p72881
sS'required'
p72882
I00
sS'group_name'
p72883
Nsa(dp72884
S'description'
p72885
S'Name of the file containing the initial values of slip system resistances\n'
p72886
sS'cpp_type'
p72887
S'FileName'
p72888
sS'default'
p72889
g3
sS'name'
p72890
S'slip_sys_res_prop_file_name'
p72891
sS'required'
p72892
I00
sS'group_name'
p72893
Nsa(dp72894
S'description'
p72895
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p72896
sS'cpp_type'
p72897
S'bool'
p72898
sS'default'
p72899
S'0'
p72900
sS'name'
p72901
S'store_stress_old'
p72902
sS'required'
p72903
I00
sS'group_name'
p72904
Nsa(dp72905
S'name'
p72906
S'tan_mod_type'
p72907
sS'cpp_type'
p72908
S'MooseEnum'
p72909
sS'default'
p72910
S'none'
p72911
sS'description'
p72912
S'Type of tangent moduli for preconditioner: default elastic\n'
p72913
sS'required'
p72914
I00
sS'options'
p72915
S'exact none'
p72916
sS'group_name'
p72917
Nsa(dp72918
S'description'
p72919
g3
sS'cpp_type'
p72920
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72921
sS'default'
p72922
S'FiniteStrainCrystalPlasticity'
p72923
sS'name'
p72924
S'type'
p72925
sS'required'
p72926
I00
sS'group_name'
p72927
Nsa(dp72928
S'description'
p72929
S'Use line search in constitutive update\n'
p72930
sS'cpp_type'
p72931
S'bool'
p72932
sS'default'
p72933
S'0'
p72934
sS'name'
p72935
S'use_line_search'
p72936
sS'required'
p72937
I00
sS'group_name'
p72938
NsasS'name'
p72939
S'/Materials/FiniteStrainCrystalPlasticity'
p72940
sa(dp72941
S'description'
p72942
S'Material class for hyper-elastic visco-platic flow: Can handle multiple flow models defined by flowratemodel type user objects\n'
p72943
sS'subblocks'
p72944
NsS'parameters'
p72945
(lp72946
(dp72947
S'description'
p72948
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p72949
sS'cpp_type'
p72950
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72951
sS'default'
p72952
g3
sS'name'
p72953
S'base_name'
p72954
sS'required'
p72955
I00
sS'group_name'
p72956
Nsa(dp72957
S'description'
p72958
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72959
sS'cpp_type'
p72960
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72961
sS'default'
p72962
g3
sS'name'
p72963
S'block'
p72964
sS'required'
p72965
I00
sS'group_name'
p72966
Nsa(dp72967
S'description'
p72968
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72969
sS'cpp_type'
p72970
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72971
sS'default'
p72972
g3
sS'name'
p72973
S'boundary'
p72974
sS'required'
p72975
I00
sS'group_name'
p72976
Nsa(dp72977
S'description'
p72978
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p72979
sS'cpp_type'
p72980
S'bool'
p72981
sS'default'
p72982
S'1'
p72983
sS'name'
p72984
S'compute'
p72985
sS'required'
p72986
I00
sS'group_name'
p72987
Nsa(dp72988
S'description'
p72989
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p72990
sS'cpp_type'
p72991
S'bool'
p72992
sS'default'
p72993
S'0'
p72994
sS'name'
p72995
S'constant_on_elem'
p72996
sS'required'
p72997
I00
sS'group_name'
p72998
S'Advanced'
p72999
sa(dp73000
S'description'
p73001
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73002
sS'cpp_type'
p73003
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73004
sS'default'
p73005
g3
sS'name'
p73006
S'control_tags'
p73007
sS'required'
p73008
I00
sS'group_name'
p73009
S'Advanced'
p73010
sa(dp73011
S'description'
p73012
S'Set the enabled status of the MooseObject.\n'
p73013
sS'cpp_type'
p73014
S'bool'
p73015
sS'default'
p73016
S'1'
p73017
sS'name'
p73018
S'enable'
p73019
sS'required'
p73020
I00
sS'group_name'
p73021
S'Advanced'
p73022
sa(dp73023
S'description'
p73024
S'List of User object names that computes flow rate and derivatives\n'
p73025
sS'cpp_type'
p73026
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73027
sS'default'
p73028
g3
sS'name'
p73029
S'flow_rate_user_objects'
p73030
sS'required'
p73031
I00
sS'group_name'
p73032
Nsa(dp73033
S'description'
p73034
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73035
sS'cpp_type'
p73036
S'bool'
p73037
sS'default'
p73038
S'1'
p73039
sS'name'
p73040
S'implicit'
p73041
sS'required'
p73042
I00
sS'group_name'
p73043
S'Advanced'
p73044
sa(dp73045
S'description'
p73046
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p73047
sS'cpp_type'
p73048
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p73049
sS'default'
p73050
g3
sS'name'
p73051
S'initial_stress'
p73052
sS'required'
p73053
I00
sS'group_name'
p73054
Nsa(dp73055
S'description'
p73056
S'List of User object names that computes internal variable rates and derivatives\n'
p73057
sS'cpp_type'
p73058
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73059
sS'default'
p73060
g3
sS'name'
p73061
S'internal_var_rate_user_objects'
p73062
sS'required'
p73063
I00
sS'group_name'
p73064
Nsa(dp73065
S'description'
p73066
S'List of User object names that integrates internal variables and computes derivatives\n'
p73067
sS'cpp_type'
p73068
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73069
sS'default'
p73070
g3
sS'name'
p73071
S'internal_var_user_objects'
p73072
sS'required'
p73073
I00
sS'group_name'
p73074
Nsa(dp73075
S'description'
p73076
S'Maximum number of substep iteration\n'
p73077
sS'cpp_type'
p73078
S'unsigned int'
p73079
sS'default'
p73080
S'1'
p73081
sS'name'
p73082
S'max_substep_iteration'
p73083
sS'required'
p73084
I00
sS'group_name'
p73085
Nsa(dp73086
S'description'
p73087
S'Maximum iteration for flow rate update\n'
p73088
sS'cpp_type'
p73089
S'unsigned int'
p73090
sS'default'
p73091
S'50'
p73092
sS'name'
p73093
S'maxiters'
p73094
sS'required'
p73095
I00
sS'group_name'
p73096
Nsa(dp73097
S'description'
p73098
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73099
sS'cpp_type'
p73100
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73101
sS'default'
p73102
g3
sS'name'
p73103
S'output_properties'
p73104
sS'required'
p73105
I00
sS'group_name'
p73106
S'Outputs'
p73107
sa(dp73108
S'description'
p73109
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73110
sS'cpp_type'
p73111
S'std::vector<OutputName, std::allocator<OutputName> >'
p73112
sS'default'
p73113
S'none'
p73114
sS'name'
p73115
S'outputs'
p73116
sS'required'
p73117
I00
sS'group_name'
p73118
S'Outputs'
p73119
sa(dp73120
S'description'
p73121
S'Absolute Tolerance for flow rate residual equation\n'
p73122
sS'cpp_type'
p73123
S'double'
p73124
sS'default'
p73125
S'1e-10'
p73126
sS'name'
p73127
S'resid_abs_tol'
p73128
sS'required'
p73129
I00
sS'group_name'
p73130
Nsa(dp73131
S'description'
p73132
S'Relative Tolerance for flow rate residual equation\n'
p73133
sS'cpp_type'
p73134
S'double'
p73135
sS'default'
p73136
S'1e-06'
p73137
sS'name'
p73138
S'resid_rel_tol'
p73139
sS'required'
p73140
I00
sS'group_name'
p73141
Nsa(dp73142
S'description'
p73143
S'The seed for the master random number generator\n'
p73144
sS'cpp_type'
p73145
S'unsigned int'
p73146
sS'default'
p73147
S'0'
p73148
sS'name'
p73149
S'seed'
p73150
sS'required'
p73151
I00
sS'group_name'
p73152
S'Advanced'
p73153
sa(dp73154
S'description'
p73155
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p73156
sS'cpp_type'
p73157
S'bool'
p73158
sS'default'
p73159
S'0'
p73160
sS'name'
p73161
S'store_stress_old'
p73162
sS'required'
p73163
I00
sS'group_name'
p73164
Nsa(dp73165
S'description'
p73166
S'List of User object names that computes strength variables and derivatives\n'
p73167
sS'cpp_type'
p73168
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73169
sS'default'
p73170
g3
sS'name'
p73171
S'strength_user_objects'
p73172
sS'required'
p73173
I00
sS'group_name'
p73174
Nsa(dp73175
S'description'
p73176
g3
sS'cpp_type'
p73177
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73178
sS'default'
p73179
S'FiniteStrainHyperElasticViscoPlastic'
p73180
sS'name'
p73181
S'type'
p73182
sS'required'
p73183
I00
sS'group_name'
p73184
NsasS'name'
p73185
S'/Materials/FiniteStrainHyperElasticViscoPlastic'
p73186
sa(dp73187
S'description'
p73188
S'Associative J2 plasticity with isotropic hardening.\n'
p73189
sS'subblocks'
p73190
NsS'parameters'
p73191
(lp73192
(dp73193
S'description'
p73194
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p73195
sS'cpp_type'
p73196
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73197
sS'default'
p73198
g3
sS'name'
p73199
S'base_name'
p73200
sS'required'
p73201
I00
sS'group_name'
p73202
Nsa(dp73203
S'description'
p73204
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73205
sS'cpp_type'
p73206
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73207
sS'default'
p73208
g3
sS'name'
p73209
S'block'
p73210
sS'required'
p73211
I00
sS'group_name'
p73212
Nsa(dp73213
S'description'
p73214
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73215
sS'cpp_type'
p73216
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73217
sS'default'
p73218
g3
sS'name'
p73219
S'boundary'
p73220
sS'required'
p73221
I00
sS'group_name'
p73222
Nsa(dp73223
S'description'
p73224
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73225
sS'cpp_type'
p73226
S'bool'
p73227
sS'default'
p73228
S'1'
p73229
sS'name'
p73230
S'compute'
p73231
sS'required'
p73232
I00
sS'group_name'
p73233
Nsa(dp73234
S'description'
p73235
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73236
sS'cpp_type'
p73237
S'bool'
p73238
sS'default'
p73239
S'0'
p73240
sS'name'
p73241
S'constant_on_elem'
p73242
sS'required'
p73243
I00
sS'group_name'
p73244
S'Advanced'
p73245
sa(dp73246
S'description'
p73247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73248
sS'cpp_type'
p73249
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73250
sS'default'
p73251
g3
sS'name'
p73252
S'control_tags'
p73253
sS'required'
p73254
I00
sS'group_name'
p73255
S'Advanced'
p73256
sa(dp73257
S'description'
p73258
S'Set the enabled status of the MooseObject.\n'
p73259
sS'cpp_type'
p73260
S'bool'
p73261
sS'default'
p73262
S'1'
p73263
sS'name'
p73264
S'enable'
p73265
sS'required'
p73266
I00
sS'group_name'
p73267
S'Advanced'
p73268
sa(dp73269
S'description'
p73270
S'Equivalent plastic strain NR tolerance\n'
p73271
sS'cpp_type'
p73272
S'double'
p73273
sS'default'
p73274
S'1e-07'
p73275
sS'name'
p73276
S'eptol'
p73277
sS'required'
p73278
I00
sS'group_name'
p73279
Nsa(dp73280
S'description'
p73281
S'Consistency condition NR tolerance\n'
p73282
sS'cpp_type'
p73283
S'double'
p73284
sS'default'
p73285
S'0.0001'
p73286
sS'name'
p73287
S'ftol'
p73288
sS'required'
p73289
I00
sS'group_name'
p73290
Nsa(dp73291
S'description'
p73292
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73293
sS'cpp_type'
p73294
S'bool'
p73295
sS'default'
p73296
S'1'
p73297
sS'name'
p73298
S'implicit'
p73299
sS'required'
p73300
I00
sS'group_name'
p73301
S'Advanced'
p73302
sa(dp73303
S'description'
p73304
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p73305
sS'cpp_type'
p73306
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p73307
sS'default'
p73308
g3
sS'name'
p73309
S'initial_stress'
p73310
sS'required'
p73311
I00
sS'group_name'
p73312
Nsa(dp73313
S'description'
p73314
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73315
sS'cpp_type'
p73316
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73317
sS'default'
p73318
g3
sS'name'
p73319
S'output_properties'
p73320
sS'required'
p73321
I00
sS'group_name'
p73322
S'Outputs'
p73323
sa(dp73324
S'description'
p73325
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73326
sS'cpp_type'
p73327
S'std::vector<OutputName, std::allocator<OutputName> >'
p73328
sS'default'
p73329
S'none'
p73330
sS'name'
p73331
S'outputs'
p73332
sS'required'
p73333
I00
sS'group_name'
p73334
S'Outputs'
p73335
sa(dp73336
S'description'
p73337
S'Plastic strain NR tolerance\n'
p73338
sS'cpp_type'
p73339
S'double'
p73340
sS'default'
p73341
S'1e-08'
p73342
sS'name'
p73343
S'rtol'
p73344
sS'required'
p73345
I00
sS'group_name'
p73346
Nsa(dp73347
S'description'
p73348
S'The seed for the master random number generator\n'
p73349
sS'cpp_type'
p73350
S'unsigned int'
p73351
sS'default'
p73352
S'0'
p73353
sS'name'
p73354
S'seed'
p73355
sS'required'
p73356
I00
sS'group_name'
p73357
S'Advanced'
p73358
sa(dp73359
S'description'
p73360
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p73361
sS'cpp_type'
p73362
S'bool'
p73363
sS'default'
p73364
S'0'
p73365
sS'name'
p73366
S'store_stress_old'
p73367
sS'required'
p73368
I00
sS'group_name'
p73369
Nsa(dp73370
S'description'
p73371
g3
sS'cpp_type'
p73372
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73373
sS'default'
p73374
S'FiniteStrainPlasticMaterial'
p73375
sS'name'
p73376
S'type'
p73377
sS'required'
p73378
I00
sS'group_name'
p73379
Nsa(dp73380
S'description'
p73381
S'Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n'
p73382
sS'cpp_type'
p73383
S'std::vector<double, std::allocator<double> >'
p73384
sS'default'
p73385
g3
sS'name'
p73386
S'yield_stress'
p73387
sS'required'
p73388
I01
sS'group_name'
p73389
NsasS'name'
p73390
S'/Materials/FiniteStrainPlasticMaterial'
p73391
sa(dp73392
S'description'
p73393
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p73394
sS'subblocks'
p73395
NsS'parameters'
p73396
(lp73397
(dp73398
S'description'
p73399
S'Constitutive stress residue absolute tolerance\n'
p73400
sS'cpp_type'
p73401
S'double'
p73402
sS'default'
p73403
S'1e-06'
p73404
sS'name'
p73405
S'abs_tol'
p73406
sS'required'
p73407
I00
sS'group_name'
p73408
Nsa(dp73409
S'description'
p73410
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p73411
sS'cpp_type'
p73412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73413
sS'default'
p73414
g3
sS'name'
p73415
S'base_name'
p73416
sS'required'
p73417
I00
sS'group_name'
p73418
Nsa(dp73419
S'description'
p73420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73421
sS'cpp_type'
p73422
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73423
sS'default'
p73424
g3
sS'name'
p73425
S'block'
p73426
sS'required'
p73427
I00
sS'group_name'
p73428
Nsa(dp73429
S'description'
p73430
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73431
sS'cpp_type'
p73432
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73433
sS'default'
p73434
g3
sS'name'
p73435
S'boundary'
p73436
sS'required'
p73437
I00
sS'group_name'
p73438
Nsa(dp73439
S'description'
p73440
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73441
sS'cpp_type'
p73442
S'bool'
p73443
sS'default'
p73444
S'1'
p73445
sS'name'
p73446
S'compute'
p73447
sS'required'
p73448
I00
sS'group_name'
p73449
Nsa(dp73450
S'description'
p73451
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73452
sS'cpp_type'
p73453
S'bool'
p73454
sS'default'
p73455
S'0'
p73456
sS'name'
p73457
S'constant_on_elem'
p73458
sS'required'
p73459
I00
sS'group_name'
p73460
S'Advanced'
p73461
sa(dp73462
S'description'
p73463
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73464
sS'cpp_type'
p73465
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73466
sS'default'
p73467
g3
sS'name'
p73468
S'control_tags'
p73469
sS'required'
p73470
I00
sS'group_name'
p73471
S'Advanced'
p73472
sa(dp73473
S'description'
p73474
S'Set the enabled status of the MooseObject.\n'
p73475
sS'cpp_type'
p73476
S'bool'
p73477
sS'default'
p73478
S'1'
p73479
sS'name'
p73480
S'enable'
p73481
sS'required'
p73482
I00
sS'group_name'
p73483
S'Advanced'
p73484
sa(dp73485
S'description'
p73486
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73487
sS'cpp_type'
p73488
S'bool'
p73489
sS'default'
p73490
S'1'
p73491
sS'name'
p73492
S'implicit'
p73493
sS'required'
p73494
I00
sS'group_name'
p73495
S'Advanced'
p73496
sa(dp73497
S'description'
p73498
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p73499
sS'cpp_type'
p73500
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p73501
sS'default'
p73502
g3
sS'name'
p73503
S'initial_stress'
p73504
sS'required'
p73505
I00
sS'group_name'
p73506
Nsa(dp73507
S'description'
p73508
S'Line search bisection method maximum number of iteration\n'
p73509
sS'cpp_type'
p73510
S'unsigned int'
p73511
sS'default'
p73512
S'20'
p73513
sS'name'
p73514
S'line_search_maxiter'
p73515
sS'required'
p73516
I00
sS'group_name'
p73517
Nsa(dp73518
S'name'
p73519
S'line_search_method'
p73520
sS'cpp_type'
p73521
S'MooseEnum'
p73522
sS'default'
p73523
S'CUT_HALF'
p73524
sS'description'
p73525
S'The method used in line search\n'
p73526
sS'required'
p73527
I00
sS'options'
p73528
S'CUT_HALF BISECTION'
p73529
sS'group_name'
p73530
Nsa(dp73531
S'description'
p73532
S'Line search bisection method tolerance\n'
p73533
sS'cpp_type'
p73534
S'double'
p73535
sS'default'
p73536
S'0.5'
p73537
sS'name'
p73538
S'line_search_tol'
p73539
sS'required'
p73540
I00
sS'group_name'
p73541
Nsa(dp73542
S'description'
p73543
S'Maximum number of substep iteration\n'
p73544
sS'cpp_type'
p73545
S'unsigned int'
p73546
sS'default'
p73547
S'1'
p73548
sS'name'
p73549
S'maximum_substep_iteration'
p73550
sS'required'
p73551
I00
sS'group_name'
p73552
Nsa(dp73553
S'description'
p73554
S'Maximum number of iterations for stress update\n'
p73555
sS'cpp_type'
p73556
S'unsigned int'
p73557
sS'default'
p73558
S'100'
p73559
sS'name'
p73560
S'maxiter'
p73561
sS'required'
p73562
I00
sS'group_name'
p73563
Nsa(dp73564
S'description'
p73565
S'Maximum number of iterations for state variable update\n'
p73566
sS'cpp_type'
p73567
S'unsigned int'
p73568
sS'default'
p73569
S'100'
p73570
sS'name'
p73571
S'maxiter_state_variable'
p73572
sS'required'
p73573
I00
sS'group_name'
p73574
Nsa(dp73575
S'description'
p73576
S'Minimum line search step size\n'
p73577
sS'cpp_type'
p73578
S'double'
p73579
sS'default'
p73580
S'0.01'
p73581
sS'name'
p73582
S'min_line_search_step_size'
p73583
sS'required'
p73584
I00
sS'group_name'
p73585
Nsa(dp73586
S'description'
p73587
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73588
sS'cpp_type'
p73589
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73590
sS'default'
p73591
g3
sS'name'
p73592
S'output_properties'
p73593
sS'required'
p73594
I00
sS'group_name'
p73595
S'Outputs'
p73596
sa(dp73597
S'description'
p73598
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73599
sS'cpp_type'
p73600
S'std::vector<OutputName, std::allocator<OutputName> >'
p73601
sS'default'
p73602
S'none'
p73603
sS'name'
p73604
S'outputs'
p73605
sS'required'
p73606
I00
sS'group_name'
p73607
S'Outputs'
p73608
sa(dp73609
S'description'
p73610
S'Constitutive stress residue relative tolerance\n'
p73611
sS'cpp_type'
p73612
S'double'
p73613
sS'default'
p73614
S'1e-06'
p73615
sS'name'
p73616
S'rtol'
p73617
sS'required'
p73618
I00
sS'group_name'
p73619
Nsa(dp73620
S'description'
p73621
S'The seed for the master random number generator\n'
p73622
sS'cpp_type'
p73623
S'unsigned int'
p73624
sS'default'
p73625
S'0'
p73626
sS'name'
p73627
S'seed'
p73628
sS'required'
p73629
I00
sS'group_name'
p73630
S'Advanced'
p73631
sa(dp73632
S'description'
p73633
S'Constitutive slip system resistance relative residual tolerance\n'
p73634
sS'cpp_type'
p73635
S'double'
p73636
sS'default'
p73637
S'0.01'
p73638
sS'name'
p73639
S'stol'
p73640
sS'required'
p73641
I00
sS'group_name'
p73642
Nsa(dp73643
S'description'
p73644
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p73645
sS'cpp_type'
p73646
S'bool'
p73647
sS'default'
p73648
S'0'
p73649
sS'name'
p73650
S'store_stress_old'
p73651
sS'required'
p73652
I00
sS'group_name'
p73653
Nsa(dp73654
S'name'
p73655
S'tan_mod_type'
p73656
sS'cpp_type'
p73657
S'MooseEnum'
p73658
sS'default'
p73659
S'none'
p73660
sS'description'
p73661
S'Type of tangent moduli for preconditioner: default elastic\n'
p73662
sS'required'
p73663
I00
sS'options'
p73664
S'exact none'
p73665
sS'group_name'
p73666
Nsa(dp73667
S'description'
p73668
g3
sS'cpp_type'
p73669
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73670
sS'default'
p73671
S'FiniteStrainUObasedCP'
p73672
sS'name'
p73673
S'type'
p73674
sS'required'
p73675
I00
sS'group_name'
p73676
Nsa(dp73677
S'description'
p73678
S'List of names of user objects that define the slip rates for this material.\n'
p73679
sS'cpp_type'
p73680
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73681
sS'default'
p73682
g3
sS'name'
p73683
S'uo_slip_rates'
p73684
sS'required'
p73685
I01
sS'group_name'
p73686
Nsa(dp73687
S'description'
p73688
S'List of names of user objects that define the slip resistances for this material.\n'
p73689
sS'cpp_type'
p73690
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73691
sS'default'
p73692
g3
sS'name'
p73693
S'uo_slip_resistances'
p73694
sS'required'
p73695
I01
sS'group_name'
p73696
Nsa(dp73697
S'description'
p73698
S'List of names of user objects that define the state variable evolution rate components for this material.\n'
p73699
sS'cpp_type'
p73700
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73701
sS'default'
p73702
g3
sS'name'
p73703
S'uo_state_var_evol_rate_comps'
p73704
sS'required'
p73705
I01
sS'group_name'
p73706
Nsa(dp73707
S'description'
p73708
S'List of names of user objects that define the state variable for this material.\n'
p73709
sS'cpp_type'
p73710
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p73711
sS'default'
p73712
g3
sS'name'
p73713
S'uo_state_vars'
p73714
sS'required'
p73715
I01
sS'group_name'
p73716
Nsa(dp73717
S'description'
p73718
S'Use line search in constitutive update\n'
p73719
sS'cpp_type'
p73720
S'bool'
p73721
sS'default'
p73722
S'0'
p73723
sS'name'
p73724
S'use_line_search'
p73725
sS'required'
p73726
I00
sS'group_name'
p73727
Nsa(dp73728
S'description'
p73729
S'Tolerance for residual check when variable value is zero\n'
p73730
sS'cpp_type'
p73731
S'double'
p73732
sS'default'
p73733
S'1e-12'
p73734
sS'name'
p73735
S'zero_tol'
p73736
sS'required'
p73737
I00
sS'group_name'
p73738
NsasS'name'
p73739
S'/Materials/FiniteStrainUObasedCP'
p73740
sa(dp73741
S'description'
p73742
S'Compute strain increment based on flux\n'
p73743
sS'subblocks'
p73744
NsS'parameters'
p73745
(lp73746
(dp73747
S'description'
p73748
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73749
sS'cpp_type'
p73750
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73751
sS'default'
p73752
g3
sS'name'
p73753
S'block'
p73754
sS'required'
p73755
I00
sS'group_name'
p73756
Nsa(dp73757
S'description'
p73758
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73759
sS'cpp_type'
p73760
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73761
sS'default'
p73762
g3
sS'name'
p73763
S'boundary'
p73764
sS'required'
p73765
I00
sS'group_name'
p73766
Nsa(dp73767
S'description'
p73768
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73769
sS'cpp_type'
p73770
S'bool'
p73771
sS'default'
p73772
S'1'
p73773
sS'name'
p73774
S'compute'
p73775
sS'required'
p73776
I00
sS'group_name'
p73777
Nsa(dp73778
S'description'
p73779
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p73780
sS'cpp_type'
p73781
S'bool'
p73782
sS'default'
p73783
S'0'
p73784
sS'name'
p73785
S'constant_on_elem'
p73786
sS'required'
p73787
I00
sS'group_name'
p73788
S'Advanced'
p73789
sa(dp73790
S'description'
p73791
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73792
sS'cpp_type'
p73793
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73794
sS'default'
p73795
g3
sS'name'
p73796
S'control_tags'
p73797
sS'required'
p73798
I00
sS'group_name'
p73799
S'Advanced'
p73800
sa(dp73801
S'description'
p73802
S'Set the enabled status of the MooseObject.\n'
p73803
sS'cpp_type'
p73804
S'bool'
p73805
sS'default'
p73806
S'1'
p73807
sS'name'
p73808
S'enable'
p73809
sS'required'
p73810
I00
sS'group_name'
p73811
S'Advanced'
p73812
sa(dp73813
S'description'
p73814
S'Grain boundary order parameter\n'
p73815
sS'cpp_type'
p73816
S'std::vector<VariableName>'
p73817
sS'default'
p73818
g3
sS'name'
p73819
S'gb'
p73820
sS'required'
p73821
I00
sS'group_name'
p73822
Nsa(dp73823
S'description'
p73824
S'Determines whether this object is calculated using an implicit or explicit form\n'
p73825
sS'cpp_type'
p73826
S'bool'
p73827
sS'default'
p73828
S'1'
p73829
sS'name'
p73830
S'implicit'
p73831
sS'required'
p73832
I00
sS'group_name'
p73833
S'Advanced'
p73834
sa(dp73835
S'description'
p73836
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73837
sS'cpp_type'
p73838
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73839
sS'default'
p73840
g3
sS'name'
p73841
S'output_properties'
p73842
sS'required'
p73843
I00
sS'group_name'
p73844
S'Outputs'
p73845
sa(dp73846
S'description'
p73847
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73848
sS'cpp_type'
p73849
S'std::vector<OutputName, std::allocator<OutputName> >'
p73850
sS'default'
p73851
S'none'
p73852
sS'name'
p73853
S'outputs'
p73854
sS'required'
p73855
I00
sS'group_name'
p73856
S'Outputs'
p73857
sa(dp73858
S'description'
p73859
S'Name of diffusive strain increment property\n'
p73860
sS'cpp_type'
p73861
S'MaterialPropertyName'
p73862
sS'default'
p73863
g3
sS'name'
p73864
S'property_name'
p73865
sS'required'
p73866
I01
sS'group_name'
p73867
Nsa(dp73868
S'description'
p73869
S'The seed for the master random number generator\n'
p73870
sS'cpp_type'
p73871
S'unsigned int'
p73872
sS'default'
p73873
S'0'
p73874
sS'name'
p73875
S'seed'
p73876
sS'required'
p73877
I00
sS'group_name'
p73878
S'Advanced'
p73879
sa(dp73880
S'description'
p73881
g3
sS'cpp_type'
p73882
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73883
sS'default'
p73884
S'FluxBasedStrainIncrement'
p73885
sS'name'
p73886
S'type'
p73887
sS'required'
p73888
I00
sS'group_name'
p73889
Nsa(dp73890
S'description'
p73891
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73892
sS'cpp_type'
p73893
S'bool'
p73894
sS'default'
p73895
S'0'
p73896
sS'name'
p73897
S'use_displaced_mesh'
p73898
sS'required'
p73899
I00
sS'group_name'
p73900
S'Advanced'
p73901
sa(dp73902
S'description'
p73903
S'x or 0-direction component of flux\n'
p73904
sS'cpp_type'
p73905
S'std::vector<VariableName>'
p73906
sS'default'
p73907
g3
sS'name'
p73908
S'xflux'
p73909
sS'required'
p73910
I01
sS'group_name'
p73911
Nsa(dp73912
S'description'
p73913
S'y or 1-direction component of flux\n'
p73914
sS'cpp_type'
p73915
S'std::vector<VariableName>'
p73916
sS'default'
p73917
g3
sS'name'
p73918
S'yflux'
p73919
sS'required'
p73920
I00
sS'group_name'
p73921
Nsa(dp73922
S'description'
p73923
S'z or 2-direction component of flux\n'
p73924
sS'cpp_type'
p73925
S'std::vector<VariableName>'
p73926
sS'default'
p73927
g3
sS'name'
p73928
S'zflux'
p73929
sS'required'
p73930
I00
sS'group_name'
p73931
NsasS'name'
p73932
S'/Materials/FluxBasedStrainIncrement'
p73933
sa(dp73934
S'description'
p73935
S'Calculating the force density acting on a grain\n'
p73936
sS'subblocks'
p73937
NsS'parameters'
p73938
(lp73939
(dp73940
S'description'
p73941
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73942
sS'cpp_type'
p73943
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73944
sS'default'
p73945
g3
sS'name'
p73946
S'block'
p73947
sS'required'
p73948
I00
sS'group_name'
p73949
Nsa(dp73950
S'description'
p73951
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73952
sS'cpp_type'
p73953
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73954
sS'default'
p73955
g3
sS'name'
p73956
S'boundary'
p73957
sS'required'
p73958
I00
sS'group_name'
p73959
Nsa(dp73960
S'description'
p73961
S'Concentration field\n'
p73962
sS'cpp_type'
p73963
S'std::vector<VariableName>'
p73964
sS'default'
p73965
g3
sS'name'
p73966
S'c'
p73967
sS'required'
p73968
I00
sS'group_name'
p73969
Nsa(dp73970
S'description'
p73971
S'Equilibrium density\n'
p73972
sS'cpp_type'
p73973
S'double'
p73974
sS'default'
p73975
S'0.9816'
p73976
sS'name'
p73977
S'ceq'
p73978
sS'required'
p73979
I00
sS'group_name'
p73980
Nsa(dp73981
S'description'
p73982
S'Thresold Concentration for GB\n'
p73983
sS'cpp_type'
p73984
S'double'
p73985
sS'default'
p73986
S'0.25'
p73987
sS'name'
p73988
S'cgb'
p73989
sS'required'
p73990
I00
sS'group_name'
p73991
Nsa(dp73992
S'description'
p73993
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p73994
sS'cpp_type'
p73995
S'bool'
p73996
sS'default'
p73997
S'1'
p73998
sS'name'
p73999
S'compute'
p74000
sS'required'
p74001
I00
sS'group_name'
p74002
Nsa(dp74003
S'description'
p74004
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74005
sS'cpp_type'
p74006
S'bool'
p74007
sS'default'
p74008
S'0'
p74009
sS'name'
p74010
S'constant_on_elem'
p74011
sS'required'
p74012
I00
sS'group_name'
p74013
S'Advanced'
p74014
sa(dp74015
S'description'
p74016
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74017
sS'cpp_type'
p74018
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74019
sS'default'
p74020
g3
sS'name'
p74021
S'control_tags'
p74022
sS'required'
p74023
I00
sS'group_name'
p74024
S'Advanced'
p74025
sa(dp74026
S'description'
p74027
S'Set the enabled status of the MooseObject.\n'
p74028
sS'cpp_type'
p74029
S'bool'
p74030
sS'default'
p74031
S'1'
p74032
sS'name'
p74033
S'enable'
p74034
sS'required'
p74035
I00
sS'group_name'
p74036
S'Advanced'
p74037
sa(dp74038
S'description'
p74039
S'Array of coupled order parameters\n'
p74040
sS'cpp_type'
p74041
S'std::vector<VariableName>'
p74042
sS'default'
p74043
g3
sS'name'
p74044
S'etas'
p74045
sS'required'
p74046
I00
sS'group_name'
p74047
Nsa(dp74048
S'description'
p74049
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74050
sS'cpp_type'
p74051
S'bool'
p74052
sS'default'
p74053
S'1'
p74054
sS'name'
p74055
S'implicit'
p74056
sS'required'
p74057
I00
sS'group_name'
p74058
S'Advanced'
p74059
sa(dp74060
S'description'
p74061
S'stiffness constant\n'
p74062
sS'cpp_type'
p74063
S'double'
p74064
sS'default'
p74065
S'100'
p74066
sS'name'
p74067
S'k'
p74068
sS'required'
p74069
I00
sS'group_name'
p74070
Nsa(dp74071
S'description'
p74072
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74073
sS'cpp_type'
p74074
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74075
sS'default'
p74076
g3
sS'name'
p74077
S'output_properties'
p74078
sS'required'
p74079
I00
sS'group_name'
p74080
S'Outputs'
p74081
sa(dp74082
S'description'
p74083
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74084
sS'cpp_type'
p74085
S'std::vector<OutputName, std::allocator<OutputName> >'
p74086
sS'default'
p74087
S'none'
p74088
sS'name'
p74089
S'outputs'
p74090
sS'required'
p74091
I00
sS'group_name'
p74092
S'Outputs'
p74093
sa(dp74094
S'description'
p74095
S'The seed for the master random number generator\n'
p74096
sS'cpp_type'
p74097
S'unsigned int'
p74098
sS'default'
p74099
S'0'
p74100
sS'name'
p74101
S'seed'
p74102
sS'required'
p74103
I00
sS'group_name'
p74104
S'Advanced'
p74105
sa(dp74106
S'description'
p74107
g3
sS'cpp_type'
p74108
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74109
sS'default'
p74110
S'ForceDensityMaterial'
p74111
sS'name'
p74112
S'type'
p74113
sS'required'
p74114
I00
sS'group_name'
p74115
Nsa(dp74116
S'description'
p74117
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74118
sS'cpp_type'
p74119
S'bool'
p74120
sS'default'
p74121
S'0'
p74122
sS'name'
p74123
S'use_displaced_mesh'
p74124
sS'required'
p74125
I00
sS'group_name'
p74126
S'Advanced'
p74127
sasS'name'
p74128
S'/Materials/ForceDensityMaterial'
p74129
sa(dp74130
S'description'
p74131
g3
sS'subblocks'
p74132
NsS'parameters'
p74133
(lp74134
(dp74135
S'description'
p74136
S'Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n'
p74137
sS'cpp_type'
p74138
S'FileName'
p74139
sS'default'
p74140
g3
sS'name'
p74141
S'Anisotropic_GB_file_name'
p74142
sS'required'
p74143
I01
sS'group_name'
p74144
Nsa(dp74145
S'description'
p74146
S'Temperature in Kelvin\n'
p74147
sS'cpp_type'
p74148
S'std::vector<VariableName>'
p74149
sS'default'
p74150
S'300'
p74151
sS'name'
p74152
S'T'
p74153
sS'required'
p74154
I00
sS'group_name'
p74155
Nsa(dp74156
S'description'
p74157
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74158
sS'cpp_type'
p74159
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74160
sS'default'
p74161
g3
sS'name'
p74162
S'block'
p74163
sS'required'
p74164
I00
sS'group_name'
p74165
Nsa(dp74166
S'description'
p74167
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74168
sS'cpp_type'
p74169
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74170
sS'default'
p74171
g3
sS'name'
p74172
S'boundary'
p74173
sS'required'
p74174
I00
sS'group_name'
p74175
Nsa(dp74176
S'description'
p74177
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74178
sS'cpp_type'
p74179
S'bool'
p74180
sS'default'
p74181
S'1'
p74182
sS'name'
p74183
S'compute'
p74184
sS'required'
p74185
I00
sS'group_name'
p74186
Nsa(dp74187
S'description'
p74188
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74189
sS'cpp_type'
p74190
S'bool'
p74191
sS'default'
p74192
S'0'
p74193
sS'name'
p74194
S'constant_on_elem'
p74195
sS'required'
p74196
I00
sS'group_name'
p74197
S'Advanced'
p74198
sa(dp74199
S'description'
p74200
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74201
sS'cpp_type'
p74202
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74203
sS'default'
p74204
g3
sS'name'
p74205
S'control_tags'
p74206
sS'required'
p74207
I00
sS'group_name'
p74208
S'Advanced'
p74209
sa(dp74210
S'description'
p74211
S'factor determining inclination dependence of GB mobility\n'
p74212
sS'cpp_type'
p74213
S'double'
p74214
sS'default'
p74215
S'0.1'
p74216
sS'name'
p74217
S'delta_mob'
p74218
sS'required'
p74219
I00
sS'group_name'
p74220
Nsa(dp74221
S'description'
p74222
S'factor determining inclination dependence of GB energy\n'
p74223
sS'cpp_type'
p74224
S'double'
p74225
sS'default'
p74226
S'0.1'
p74227
sS'name'
p74228
S'delta_sigma'
p74229
sS'required'
p74230
I00
sS'group_name'
p74231
Nsa(dp74232
S'description'
p74233
S'Set the enabled status of the MooseObject.\n'
p74234
sS'cpp_type'
p74235
S'bool'
p74236
sS'default'
p74237
S'1'
p74238
sS'name'
p74239
S'enable'
p74240
sS'required'
p74241
I00
sS'group_name'
p74242
S'Advanced'
p74243
sa(dp74244
S'description'
p74245
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74246
sS'cpp_type'
p74247
S'bool'
p74248
sS'default'
p74249
S'1'
p74250
sS'name'
p74251
S'implicit'
p74252
sS'required'
p74253
I00
sS'group_name'
p74254
S'Advanced'
p74255
sa(dp74256
S'description'
p74257
S'The GB anisotropy ininclination would be considered if true\n'
p74258
sS'cpp_type'
p74259
S'bool'
p74260
sS'default'
p74261
g3
sS'name'
p74262
S'inclination_anisotropy'
p74263
sS'required'
p74264
I01
sS'group_name'
p74265
Nsa(dp74266
S'description'
p74267
S'Length scale in m, where default is nm\n'
p74268
sS'cpp_type'
p74269
S'double'
p74270
sS'default'
p74271
S'1e-09'
p74272
sS'name'
p74273
S'length_scale'
p74274
sS'required'
p74275
I00
sS'group_name'
p74276
Nsa(dp74277
S'description'
p74278
S"molar volume of material in m^3/mol, by default it's the value of copper\n"
p74279
sS'cpp_type'
p74280
S'double'
p74281
sS'default'
p74282
S'7.11e-06'
p74283
sS'name'
p74284
S'molar_volume_value'
p74285
sS'required'
p74286
I00
sS'group_name'
p74287
Nsa(dp74288
S'description'
p74289
S'Array of coupled variables (num_name)\n'
p74290
sS'cpp_type'
p74291
S'unsigned int'
p74292
sS'default'
p74293
g3
sS'name'
p74294
S'op_num'
p74295
sS'required'
p74296
I00
sS'group_name'
p74297
Nsa(dp74298
S'description'
p74299
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74300
sS'cpp_type'
p74301
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74302
sS'default'
p74303
g3
sS'name'
p74304
S'output_properties'
p74305
sS'required'
p74306
I00
sS'group_name'
p74307
S'Outputs'
p74308
sa(dp74309
S'description'
p74310
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74311
sS'cpp_type'
p74312
S'std::vector<OutputName, std::allocator<OutputName> >'
p74313
sS'default'
p74314
S'none'
p74315
sS'name'
p74316
S'outputs'
p74317
sS'required'
p74318
I00
sS'group_name'
p74319
S'Outputs'
p74320
sa(dp74321
S'description'
p74322
S'The seed for the master random number generator\n'
p74323
sS'cpp_type'
p74324
S'unsigned int'
p74325
sS'default'
p74326
S'0'
p74327
sS'name'
p74328
S'seed'
p74329
sS'required'
p74330
I00
sS'group_name'
p74331
S'Advanced'
p74332
sa(dp74333
S'description'
p74334
S'Time scale in s, where default is ns\n'
p74335
sS'cpp_type'
p74336
S'double'
p74337
sS'default'
p74338
S'1e-09'
p74339
sS'name'
p74340
S'time_scale'
p74341
sS'required'
p74342
I00
sS'group_name'
p74343
Nsa(dp74344
S'description'
p74345
g3
sS'cpp_type'
p74346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74347
sS'default'
p74348
S'GBAnisotropy'
p74349
sS'name'
p74350
S'type'
p74351
sS'required'
p74352
I00
sS'group_name'
p74353
Nsa(dp74354
S'description'
p74355
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74356
sS'cpp_type'
p74357
S'bool'
p74358
sS'default'
p74359
S'0'
p74360
sS'name'
p74361
S'use_displaced_mesh'
p74362
sS'required'
p74363
I00
sS'group_name'
p74364
S'Advanced'
p74365
sa(dp74366
S'description'
p74367
S'Array of coupled variables\n'
p74368
sS'cpp_type'
p74369
S'std::vector<VariableName>'
p74370
sS'default'
p74371
g3
sS'name'
p74372
S'v'
p74373
sS'required'
p74374
I01
sS'group_name'
p74375
Nsa(dp74376
S'description'
p74377
S'Array of coupled variables (base_name)\n'
p74378
sS'cpp_type'
p74379
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74380
sS'default'
p74381
g3
sS'name'
p74382
S'var_name_base'
p74383
sS'required'
p74384
I00
sS'group_name'
p74385
Nsa(dp74386
S'description'
p74387
S'Diffuse GB width in nm \n'
p74388
sS'cpp_type'
p74389
S'double'
p74390
sS'default'
p74391
g3
sS'name'
p74392
S'wGB'
p74393
sS'required'
p74394
I01
sS'group_name'
p74395
NsasS'name'
p74396
S'/Materials/GBAnisotropy'
p74397
sa(dp74398
S'description'
p74399
S'Compute anisotropic rank two tensor based on GB phase variable\n'
p74400
sS'subblocks'
p74401
NsS'parameters'
p74402
(lp74403
(dp74404
S'description'
p74405
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74406
sS'cpp_type'
p74407
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74408
sS'default'
p74409
g3
sS'name'
p74410
S'block'
p74411
sS'required'
p74412
I00
sS'group_name'
p74413
Nsa(dp74414
S'description'
p74415
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74416
sS'cpp_type'
p74417
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74418
sS'default'
p74419
g3
sS'name'
p74420
S'boundary'
p74421
sS'required'
p74422
I00
sS'group_name'
p74423
Nsa(dp74424
S'description'
p74425
S'Parameter value of bulk material\n'
p74426
sS'cpp_type'
p74427
S'double'
p74428
sS'default'
p74429
S'0'
p74430
sS'name'
p74431
S'bulk_parameter'
p74432
sS'required'
p74433
I00
sS'group_name'
p74434
Nsa(dp74435
S'description'
p74436
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74437
sS'cpp_type'
p74438
S'bool'
p74439
sS'default'
p74440
S'1'
p74441
sS'name'
p74442
S'compute'
p74443
sS'required'
p74444
I00
sS'group_name'
p74445
Nsa(dp74446
S'description'
p74447
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74448
sS'cpp_type'
p74449
S'bool'
p74450
sS'default'
p74451
S'0'
p74452
sS'name'
p74453
S'constant_on_elem'
p74454
sS'required'
p74455
I00
sS'group_name'
p74456
S'Advanced'
p74457
sa(dp74458
S'description'
p74459
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74460
sS'cpp_type'
p74461
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74462
sS'default'
p74463
g3
sS'name'
p74464
S'control_tags'
p74465
sS'required'
p74466
I00
sS'group_name'
p74467
S'Advanced'
p74468
sa(dp74469
S'description'
p74470
S'Set the enabled status of the MooseObject.\n'
p74471
sS'cpp_type'
p74472
S'bool'
p74473
sS'default'
p74474
S'1'
p74475
sS'name'
p74476
S'enable'
p74477
sS'required'
p74478
I00
sS'group_name'
p74479
S'Advanced'
p74480
sa(dp74481
S'description'
p74482
S'GB variable\n'
p74483
sS'cpp_type'
p74484
S'std::vector<VariableName>'
p74485
sS'default'
p74486
g3
sS'name'
p74487
S'gb'
p74488
sS'required'
p74489
I01
sS'group_name'
p74490
Nsa(dp74491
S'description'
p74492
S'Name of GB normal tensor property\n'
p74493
sS'cpp_type'
p74494
S'MaterialPropertyName'
p74495
sS'default'
p74496
g3
sS'name'
p74497
S'gb_normal_tensor_name'
p74498
sS'required'
p74499
I00
sS'group_name'
p74500
Nsa(dp74501
S'description'
p74502
S'Parameter value at GB\n'
p74503
sS'cpp_type'
p74504
S'double'
p74505
sS'default'
p74506
S'0'
p74507
sS'name'
p74508
S'gb_parameter'
p74509
sS'required'
p74510
I00
sS'group_name'
p74511
Nsa(dp74512
S'description'
p74513
S'Name of GB tensor property\n'
p74514
sS'cpp_type'
p74515
S'MaterialPropertyName'
p74516
sS'default'
p74517
g3
sS'name'
p74518
S'gb_tensor_prop_name'
p74519
sS'required'
p74520
I00
sS'group_name'
p74521
Nsa(dp74522
S'description'
p74523
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74524
sS'cpp_type'
p74525
S'bool'
p74526
sS'default'
p74527
S'1'
p74528
sS'name'
p74529
S'implicit'
p74530
sS'required'
p74531
I00
sS'group_name'
p74532
S'Advanced'
p74533
sa(dp74534
S'description'
p74535
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74536
sS'cpp_type'
p74537
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74538
sS'default'
p74539
g3
sS'name'
p74540
S'output_properties'
p74541
sS'required'
p74542
I00
sS'group_name'
p74543
S'Outputs'
p74544
sa(dp74545
S'description'
p74546
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74547
sS'cpp_type'
p74548
S'std::vector<OutputName, std::allocator<OutputName> >'
p74549
sS'default'
p74550
S'none'
p74551
sS'name'
p74552
S'outputs'
p74553
sS'required'
p74554
I00
sS'group_name'
p74555
S'Outputs'
p74556
sa(dp74557
S'description'
p74558
S'The seed for the master random number generator\n'
p74559
sS'cpp_type'
p74560
S'unsigned int'
p74561
sS'default'
p74562
S'0'
p74563
sS'name'
p74564
S'seed'
p74565
sS'required'
p74566
I00
sS'group_name'
p74567
S'Advanced'
p74568
sa(dp74569
S'description'
p74570
g3
sS'cpp_type'
p74571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74572
sS'default'
p74573
S'GBDependentAnisotropicTensor'
p74574
sS'name'
p74575
S'type'
p74576
sS'required'
p74577
I00
sS'group_name'
p74578
Nsa(dp74579
S'description'
p74580
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74581
sS'cpp_type'
p74582
S'bool'
p74583
sS'default'
p74584
S'0'
p74585
sS'name'
p74586
S'use_displaced_mesh'
p74587
sS'required'
p74588
I00
sS'group_name'
p74589
S'Advanced'
p74590
sasS'name'
p74591
S'/Materials/GBDependentAnisotropicTensor'
p74592
sa(dp74593
S'description'
p74594
S'Compute diffusivity rank two tensor based on GB phase variable\n'
p74595
sS'subblocks'
p74596
NsS'parameters'
p74597
(lp74598
(dp74599
S'description'
p74600
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74601
sS'cpp_type'
p74602
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74603
sS'default'
p74604
g3
sS'name'
p74605
S'block'
p74606
sS'required'
p74607
I00
sS'group_name'
p74608
Nsa(dp74609
S'description'
p74610
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74611
sS'cpp_type'
p74612
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74613
sS'default'
p74614
g3
sS'name'
p74615
S'boundary'
p74616
sS'required'
p74617
I00
sS'group_name'
p74618
Nsa(dp74619
S'description'
p74620
S'Parameter value of bulk material\n'
p74621
sS'cpp_type'
p74622
S'double'
p74623
sS'default'
p74624
S'0'
p74625
sS'name'
p74626
S'bulk_parameter'
p74627
sS'required'
p74628
I00
sS'group_name'
p74629
Nsa(dp74630
S'description'
p74631
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74632
sS'cpp_type'
p74633
S'bool'
p74634
sS'default'
p74635
S'1'
p74636
sS'name'
p74637
S'compute'
p74638
sS'required'
p74639
I00
sS'group_name'
p74640
Nsa(dp74641
S'description'
p74642
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74643
sS'cpp_type'
p74644
S'bool'
p74645
sS'default'
p74646
S'0'
p74647
sS'name'
p74648
S'constant_on_elem'
p74649
sS'required'
p74650
I00
sS'group_name'
p74651
S'Advanced'
p74652
sa(dp74653
S'description'
p74654
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74655
sS'cpp_type'
p74656
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74657
sS'default'
p74658
g3
sS'name'
p74659
S'control_tags'
p74660
sS'required'
p74661
I00
sS'group_name'
p74662
S'Advanced'
p74663
sa(dp74664
S'description'
p74665
S'Set the enabled status of the MooseObject.\n'
p74666
sS'cpp_type'
p74667
S'bool'
p74668
sS'default'
p74669
S'1'
p74670
sS'name'
p74671
S'enable'
p74672
sS'required'
p74673
I00
sS'group_name'
p74674
S'Advanced'
p74675
sa(dp74676
S'description'
p74677
S'GB variable\n'
p74678
sS'cpp_type'
p74679
S'std::vector<VariableName>'
p74680
sS'default'
p74681
g3
sS'name'
p74682
S'gb'
p74683
sS'required'
p74684
I01
sS'group_name'
p74685
Nsa(dp74686
S'description'
p74687
S'Name of GB normal tensor property\n'
p74688
sS'cpp_type'
p74689
S'MaterialPropertyName'
p74690
sS'default'
p74691
g3
sS'name'
p74692
S'gb_normal_tensor_name'
p74693
sS'required'
p74694
I00
sS'group_name'
p74695
Nsa(dp74696
S'description'
p74697
S'Parameter value at GB\n'
p74698
sS'cpp_type'
p74699
S'double'
p74700
sS'default'
p74701
S'0'
p74702
sS'name'
p74703
S'gb_parameter'
p74704
sS'required'
p74705
I00
sS'group_name'
p74706
Nsa(dp74707
S'description'
p74708
S'Name of GB tensor property\n'
p74709
sS'cpp_type'
p74710
S'MaterialPropertyName'
p74711
sS'default'
p74712
g3
sS'name'
p74713
S'gb_tensor_prop_name'
p74714
sS'required'
p74715
I00
sS'group_name'
p74716
Nsa(dp74717
S'description'
p74718
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74719
sS'cpp_type'
p74720
S'bool'
p74721
sS'default'
p74722
S'1'
p74723
sS'name'
p74724
S'implicit'
p74725
sS'required'
p74726
I00
sS'group_name'
p74727
S'Advanced'
p74728
sa(dp74729
S'description'
p74730
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74731
sS'cpp_type'
p74732
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74733
sS'default'
p74734
g3
sS'name'
p74735
S'output_properties'
p74736
sS'required'
p74737
I00
sS'group_name'
p74738
S'Outputs'
p74739
sa(dp74740
S'description'
p74741
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74742
sS'cpp_type'
p74743
S'std::vector<OutputName, std::allocator<OutputName> >'
p74744
sS'default'
p74745
S'none'
p74746
sS'name'
p74747
S'outputs'
p74748
sS'required'
p74749
I00
sS'group_name'
p74750
S'Outputs'
p74751
sa(dp74752
S'description'
p74753
S'The seed for the master random number generator\n'
p74754
sS'cpp_type'
p74755
S'unsigned int'
p74756
sS'default'
p74757
S'0'
p74758
sS'name'
p74759
S'seed'
p74760
sS'required'
p74761
I00
sS'group_name'
p74762
S'Advanced'
p74763
sa(dp74764
S'description'
p74765
g3
sS'cpp_type'
p74766
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74767
sS'default'
p74768
S'GBDependentDiffusivity'
p74769
sS'name'
p74770
S'type'
p74771
sS'required'
p74772
I00
sS'group_name'
p74773
Nsa(dp74774
S'description'
p74775
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74776
sS'cpp_type'
p74777
S'bool'
p74778
sS'default'
p74779
S'0'
p74780
sS'name'
p74781
S'use_displaced_mesh'
p74782
sS'required'
p74783
I00
sS'group_name'
p74784
S'Advanced'
p74785
sasS'name'
p74786
S'/Materials/GBDependentDiffusivity'
p74787
sa(dp74788
S'description'
p74789
g3
sS'subblocks'
p74790
NsS'parameters'
p74791
(lp74792
(dp74793
S'description'
p74794
S'GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n'
p74795
sS'cpp_type'
p74796
S'double'
p74797
sS'default'
p74798
S'-1'
p74799
sS'name'
p74800
S'GBMobility'
p74801
sS'required'
p74802
I00
sS'group_name'
p74803
Nsa(dp74804
S'description'
p74805
S'Grain boundary energy in J/m^2\n'
p74806
sS'cpp_type'
p74807
S'double'
p74808
sS'default'
p74809
g3
sS'name'
p74810
S'GBenergy'
p74811
sS'required'
p74812
I01
sS'group_name'
p74813
Nsa(dp74814
S'description'
p74815
S'Grain boundary mobility prefactor in m^4/(J*s)\n'
p74816
sS'cpp_type'
p74817
S'double'
p74818
sS'default'
p74819
S'0'
p74820
sS'name'
p74821
S'GBmob0'
p74822
sS'required'
p74823
I00
sS'group_name'
p74824
Nsa(dp74825
S'description'
p74826
S'Grain boundary migration activation energy in eV\n'
p74827
sS'cpp_type'
p74828
S'double'
p74829
sS'default'
p74830
S'0'
p74831
sS'name'
p74832
S'Q'
p74833
sS'required'
p74834
I00
sS'group_name'
p74835
Nsa(dp74836
S'description'
p74837
S'Temperature in Kelvin\n'
p74838
sS'cpp_type'
p74839
S'std::vector<VariableName>'
p74840
sS'default'
p74841
g3
sS'name'
p74842
S'T'
p74843
sS'required'
p74844
I01
sS'group_name'
p74845
Nsa(dp74846
S'description'
p74847
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74848
sS'cpp_type'
p74849
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74850
sS'default'
p74851
g3
sS'name'
p74852
S'block'
p74853
sS'required'
p74854
I00
sS'group_name'
p74855
Nsa(dp74856
S'description'
p74857
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74858
sS'cpp_type'
p74859
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74860
sS'default'
p74861
g3
sS'name'
p74862
S'boundary'
p74863
sS'required'
p74864
I00
sS'group_name'
p74865
Nsa(dp74866
S'description'
p74867
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p74868
sS'cpp_type'
p74869
S'bool'
p74870
sS'default'
p74871
S'1'
p74872
sS'name'
p74873
S'compute'
p74874
sS'required'
p74875
I00
sS'group_name'
p74876
Nsa(dp74877
S'description'
p74878
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p74879
sS'cpp_type'
p74880
S'bool'
p74881
sS'default'
p74882
S'0'
p74883
sS'name'
p74884
S'constant_on_elem'
p74885
sS'required'
p74886
I00
sS'group_name'
p74887
S'Advanced'
p74888
sa(dp74889
S'description'
p74890
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74891
sS'cpp_type'
p74892
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74893
sS'default'
p74894
g3
sS'name'
p74895
S'control_tags'
p74896
sS'required'
p74897
I00
sS'group_name'
p74898
S'Advanced'
p74899
sa(dp74900
S'description'
p74901
S'Set the enabled status of the MooseObject.\n'
p74902
sS'cpp_type'
p74903
S'bool'
p74904
sS'default'
p74905
S'1'
p74906
sS'name'
p74907
S'enable'
p74908
sS'required'
p74909
I00
sS'group_name'
p74910
S'Advanced'
p74911
sa(dp74912
S'description'
p74913
S'The GB energy constant \n'
p74914
sS'cpp_type'
p74915
S'double'
p74916
sS'default'
p74917
S'0.125'
p74918
sS'name'
p74919
S'f0s'
p74920
sS'required'
p74921
I00
sS'group_name'
p74922
Nsa(dp74923
S'description'
p74924
S'Determines whether this object is calculated using an implicit or explicit form\n'
p74925
sS'cpp_type'
p74926
S'bool'
p74927
sS'default'
p74928
S'1'
p74929
sS'name'
p74930
S'implicit'
p74931
sS'required'
p74932
I00
sS'group_name'
p74933
S'Advanced'
p74934
sa(dp74935
S'description'
p74936
S'Length scale in m, where default is nm\n'
p74937
sS'cpp_type'
p74938
S'double'
p74939
sS'default'
p74940
S'1e-09'
p74941
sS'name'
p74942
S'length_scale'
p74943
sS'required'
p74944
I00
sS'group_name'
p74945
Nsa(dp74946
S'description'
p74947
S'Molar volume in m^3/mol, needed for temperature gradient driving force\n'
p74948
sS'cpp_type'
p74949
S'double'
p74950
sS'default'
p74951
S'2.462e-05'
p74952
sS'name'
p74953
S'molar_volume'
p74954
sS'required'
p74955
I00
sS'group_name'
p74956
Nsa(dp74957
S'description'
p74958
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74959
sS'cpp_type'
p74960
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74961
sS'default'
p74962
g3
sS'name'
p74963
S'output_properties'
p74964
sS'required'
p74965
I00
sS'group_name'
p74966
S'Outputs'
p74967
sa(dp74968
S'description'
p74969
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74970
sS'cpp_type'
p74971
S'std::vector<OutputName, std::allocator<OutputName> >'
p74972
sS'default'
p74973
S'none'
p74974
sS'name'
p74975
S'outputs'
p74976
sS'required'
p74977
I00
sS'group_name'
p74978
S'Outputs'
p74979
sa(dp74980
S'description'
p74981
S'The seed for the master random number generator\n'
p74982
sS'cpp_type'
p74983
S'unsigned int'
p74984
sS'default'
p74985
S'0'
p74986
sS'name'
p74987
S'seed'
p74988
sS'required'
p74989
I00
sS'group_name'
p74990
S'Advanced'
p74991
sa(dp74992
S'description'
p74993
S'Time scale in s, where default is ns\n'
p74994
sS'cpp_type'
p74995
S'double'
p74996
sS'default'
p74997
S'1e-09'
p74998
sS'name'
p74999
S'time_scale'
p75000
sS'required'
p75001
I00
sS'group_name'
p75002
Nsa(dp75003
S'description'
p75004
g3
sS'cpp_type'
p75005
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75006
sS'default'
p75007
S'GBEvolution'
p75008
sS'name'
p75009
S'type'
p75010
sS'required'
p75011
I00
sS'group_name'
p75012
Nsa(dp75013
S'description'
p75014
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75015
sS'cpp_type'
p75016
S'bool'
p75017
sS'default'
p75018
S'0'
p75019
sS'name'
p75020
S'use_displaced_mesh'
p75021
sS'required'
p75022
I00
sS'group_name'
p75023
S'Advanced'
p75024
sa(dp75025
S'description'
p75026
S'Diffuse GB width in nm \n'
p75027
sS'cpp_type'
p75028
S'double'
p75029
sS'default'
p75030
g3
sS'name'
p75031
S'wGB'
p75032
sS'required'
p75033
I01
sS'group_name'
p75034
NsasS'name'
p75035
S'/Materials/GBEvolution'
p75036
sa(dp75037
S'description'
p75038
S'Compute strain increment based on lattice relaxation at GB\n'
p75039
sS'subblocks'
p75040
NsS'parameters'
p75041
(lp75042
(dp75043
S'description'
p75044
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75045
sS'cpp_type'
p75046
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75047
sS'default'
p75048
g3
sS'name'
p75049
S'block'
p75050
sS'required'
p75051
I00
sS'group_name'
p75052
Nsa(dp75053
S'description'
p75054
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75055
sS'cpp_type'
p75056
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75057
sS'default'
p75058
g3
sS'name'
p75059
S'boundary'
p75060
sS'required'
p75061
I00
sS'group_name'
p75062
Nsa(dp75063
S'description'
p75064
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75065
sS'cpp_type'
p75066
S'bool'
p75067
sS'default'
p75068
S'1'
p75069
sS'name'
p75070
S'compute'
p75071
sS'required'
p75072
I00
sS'group_name'
p75073
Nsa(dp75074
S'description'
p75075
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75076
sS'cpp_type'
p75077
S'bool'
p75078
sS'default'
p75079
S'0'
p75080
sS'name'
p75081
S'constant_on_elem'
p75082
sS'required'
p75083
I00
sS'group_name'
p75084
S'Advanced'
p75085
sa(dp75086
S'description'
p75087
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75088
sS'cpp_type'
p75089
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75090
sS'default'
p75091
g3
sS'name'
p75092
S'control_tags'
p75093
sS'required'
p75094
I00
sS'group_name'
p75095
S'Advanced'
p75096
sa(dp75097
S'description'
p75098
S'Set the enabled status of the MooseObject.\n'
p75099
sS'cpp_type'
p75100
S'bool'
p75101
sS'default'
p75102
S'1'
p75103
sS'name'
p75104
S'enable'
p75105
sS'required'
p75106
I00
sS'group_name'
p75107
S'Advanced'
p75108
sa(dp75109
S'description'
p75110
S'Name of GB normal property\n'
p75111
sS'cpp_type'
p75112
S'MaterialPropertyName'
p75113
sS'default'
p75114
g3
sS'name'
p75115
S'gb_normal_name'
p75116
sS'required'
p75117
I00
sS'group_name'
p75118
Nsa(dp75119
S'description'
p75120
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75121
sS'cpp_type'
p75122
S'bool'
p75123
sS'default'
p75124
S'1'
p75125
sS'name'
p75126
S'implicit'
p75127
sS'required'
p75128
I00
sS'group_name'
p75129
S'Advanced'
p75130
sa(dp75131
S'description'
p75132
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75133
sS'cpp_type'
p75134
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75135
sS'default'
p75136
g3
sS'name'
p75137
S'output_properties'
p75138
sS'required'
p75139
I00
sS'group_name'
p75140
S'Outputs'
p75141
sa(dp75142
S'description'
p75143
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75144
sS'cpp_type'
p75145
S'std::vector<OutputName, std::allocator<OutputName> >'
p75146
sS'default'
p75147
S'none'
p75148
sS'name'
p75149
S'outputs'
p75150
sS'required'
p75151
I00
sS'group_name'
p75152
S'Outputs'
p75153
sa(dp75154
S'description'
p75155
S'Name of perfactor property\n'
p75156
sS'cpp_type'
p75157
S'MaterialPropertyName'
p75158
sS'default'
p75159
g3
sS'name'
p75160
S'prefactor_name'
p75161
sS'required'
p75162
I00
sS'group_name'
p75163
Nsa(dp75164
S'description'
p75165
S'Name of GB relaxation strain increment property\n'
p75166
sS'cpp_type'
p75167
S'MaterialPropertyName'
p75168
sS'default'
p75169
g3
sS'name'
p75170
S'property_name'
p75171
sS'required'
p75172
I00
sS'group_name'
p75173
Nsa(dp75174
S'description'
p75175
S'The seed for the master random number generator\n'
p75176
sS'cpp_type'
p75177
S'unsigned int'
p75178
sS'default'
p75179
S'0'
p75180
sS'name'
p75181
S'seed'
p75182
sS'required'
p75183
I00
sS'group_name'
p75184
S'Advanced'
p75185
sa(dp75186
S'description'
p75187
g3
sS'cpp_type'
p75188
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75189
sS'default'
p75190
S'GBRelaxationStrainIncrement'
p75191
sS'name'
p75192
S'type'
p75193
sS'required'
p75194
I00
sS'group_name'
p75195
Nsa(dp75196
S'description'
p75197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75198
sS'cpp_type'
p75199
S'bool'
p75200
sS'default'
p75201
S'0'
p75202
sS'name'
p75203
S'use_displaced_mesh'
p75204
sS'required'
p75205
I00
sS'group_name'
p75206
S'Advanced'
p75207
sasS'name'
p75208
S'/Materials/GBRelaxationStrainIncrement'
p75209
sa(dp75210
S'description'
p75211
g3
sS'subblocks'
p75212
NsS'parameters'
p75213
(lp75214
(dp75215
S'description'
p75216
S'Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n'
p75217
sS'cpp_type'
p75218
S'FileName'
p75219
sS'default'
p75220
g3
sS'name'
p75221
S'Anisotropic_GB_file_name'
p75222
sS'required'
p75223
I01
sS'group_name'
p75224
Nsa(dp75225
S'description'
p75226
S'Temperature in Kelvin\n'
p75227
sS'cpp_type'
p75228
S'std::vector<VariableName>'
p75229
sS'default'
p75230
S'300'
p75231
sS'name'
p75232
S'T'
p75233
sS'required'
p75234
I00
sS'group_name'
p75235
Nsa(dp75236
S'description'
p75237
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75238
sS'cpp_type'
p75239
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75240
sS'default'
p75241
g3
sS'name'
p75242
S'block'
p75243
sS'required'
p75244
I00
sS'group_name'
p75245
Nsa(dp75246
S'description'
p75247
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75248
sS'cpp_type'
p75249
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75250
sS'default'
p75251
g3
sS'name'
p75252
S'boundary'
p75253
sS'required'
p75254
I00
sS'group_name'
p75255
Nsa(dp75256
S'description'
p75257
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75258
sS'cpp_type'
p75259
S'bool'
p75260
sS'default'
p75261
S'1'
p75262
sS'name'
p75263
S'compute'
p75264
sS'required'
p75265
I00
sS'group_name'
p75266
Nsa(dp75267
S'description'
p75268
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75269
sS'cpp_type'
p75270
S'bool'
p75271
sS'default'
p75272
S'0'
p75273
sS'name'
p75274
S'constant_on_elem'
p75275
sS'required'
p75276
I00
sS'group_name'
p75277
S'Advanced'
p75278
sa(dp75279
S'description'
p75280
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75281
sS'cpp_type'
p75282
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75283
sS'default'
p75284
g3
sS'name'
p75285
S'control_tags'
p75286
sS'required'
p75287
I00
sS'group_name'
p75288
S'Advanced'
p75289
sa(dp75290
S'description'
p75291
S'factor determining inclination dependence of GB mobility\n'
p75292
sS'cpp_type'
p75293
S'double'
p75294
sS'default'
p75295
S'0.1'
p75296
sS'name'
p75297
S'delta_mob'
p75298
sS'required'
p75299
I00
sS'group_name'
p75300
Nsa(dp75301
S'description'
p75302
S'factor determining inclination dependence of GB energy\n'
p75303
sS'cpp_type'
p75304
S'double'
p75305
sS'default'
p75306
S'0.1'
p75307
sS'name'
p75308
S'delta_sigma'
p75309
sS'required'
p75310
I00
sS'group_name'
p75311
Nsa(dp75312
S'description'
p75313
S'Set the enabled status of the MooseObject.\n'
p75314
sS'cpp_type'
p75315
S'bool'
p75316
sS'default'
p75317
S'1'
p75318
sS'name'
p75319
S'enable'
p75320
sS'required'
p75321
I00
sS'group_name'
p75322
S'Advanced'
p75323
sa(dp75324
S'description'
p75325
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75326
sS'cpp_type'
p75327
S'bool'
p75328
sS'default'
p75329
S'1'
p75330
sS'name'
p75331
S'implicit'
p75332
sS'required'
p75333
I00
sS'group_name'
p75334
S'Advanced'
p75335
sa(dp75336
S'description'
p75337
S'The GB anisotropy ininclination would be considered if true\n'
p75338
sS'cpp_type'
p75339
S'bool'
p75340
sS'default'
p75341
g3
sS'name'
p75342
S'inclination_anisotropy'
p75343
sS'required'
p75344
I01
sS'group_name'
p75345
Nsa(dp75346
S'description'
p75347
S'Prefactor of gradient free energies for all i-j interfaces\n'
p75348
sS'cpp_type'
p75349
S'double'
p75350
sS'default'
p75351
g3
sS'name'
p75352
S'kappa'
p75353
sS'required'
p75354
I01
sS'group_name'
p75355
Nsa(dp75356
S'description'
p75357
S'Length scale in m, where default is nm\n'
p75358
sS'cpp_type'
p75359
S'double'
p75360
sS'default'
p75361
S'1e-09'
p75362
sS'name'
p75363
S'length_scale'
p75364
sS'required'
p75365
I00
sS'group_name'
p75366
Nsa(dp75367
S'description'
p75368
S"molar volume of material in m^3/mol, by default it's the value of copper\n"
p75369
sS'cpp_type'
p75370
S'double'
p75371
sS'default'
p75372
S'7.11e-06'
p75373
sS'name'
p75374
S'molar_volume_value'
p75375
sS'required'
p75376
I00
sS'group_name'
p75377
Nsa(dp75378
S'description'
p75379
S'Prefactor of bulk free energy\n'
p75380
sS'cpp_type'
p75381
S'double'
p75382
sS'default'
p75383
g3
sS'name'
p75384
S'mu'
p75385
sS'required'
p75386
I01
sS'group_name'
p75387
Nsa(dp75388
S'description'
p75389
S'Array of coupled variables (num_name)\n'
p75390
sS'cpp_type'
p75391
S'unsigned int'
p75392
sS'default'
p75393
g3
sS'name'
p75394
S'op_num'
p75395
sS'required'
p75396
I00
sS'group_name'
p75397
Nsa(dp75398
S'description'
p75399
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75400
sS'cpp_type'
p75401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75402
sS'default'
p75403
g3
sS'name'
p75404
S'output_properties'
p75405
sS'required'
p75406
I00
sS'group_name'
p75407
S'Outputs'
p75408
sa(dp75409
S'description'
p75410
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75411
sS'cpp_type'
p75412
S'std::vector<OutputName, std::allocator<OutputName> >'
p75413
sS'default'
p75414
S'none'
p75415
sS'name'
p75416
S'outputs'
p75417
sS'required'
p75418
I00
sS'group_name'
p75419
S'Outputs'
p75420
sa(dp75421
S'description'
p75422
S'The seed for the master random number generator\n'
p75423
sS'cpp_type'
p75424
S'unsigned int'
p75425
sS'default'
p75426
S'0'
p75427
sS'name'
p75428
S'seed'
p75429
sS'required'
p75430
I00
sS'group_name'
p75431
S'Advanced'
p75432
sa(dp75433
S'description'
p75434
S'Time scale in s, where default is ns\n'
p75435
sS'cpp_type'
p75436
S'double'
p75437
sS'default'
p75438
S'1e-09'
p75439
sS'name'
p75440
S'time_scale'
p75441
sS'required'
p75442
I00
sS'group_name'
p75443
Nsa(dp75444
S'description'
p75445
g3
sS'cpp_type'
p75446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75447
sS'default'
p75448
S'GBWidthAnisotropy'
p75449
sS'name'
p75450
S'type'
p75451
sS'required'
p75452
I00
sS'group_name'
p75453
Nsa(dp75454
S'description'
p75455
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75456
sS'cpp_type'
p75457
S'bool'
p75458
sS'default'
p75459
S'0'
p75460
sS'name'
p75461
S'use_displaced_mesh'
p75462
sS'required'
p75463
I00
sS'group_name'
p75464
S'Advanced'
p75465
sa(dp75466
S'description'
p75467
S'Array of coupled variables\n'
p75468
sS'cpp_type'
p75469
S'std::vector<VariableName>'
p75470
sS'default'
p75471
g3
sS'name'
p75472
S'v'
p75473
sS'required'
p75474
I01
sS'group_name'
p75475
Nsa(dp75476
S'description'
p75477
S'Array of coupled variables (base_name)\n'
p75478
sS'cpp_type'
p75479
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75480
sS'default'
p75481
g3
sS'name'
p75482
S'var_name_base'
p75483
sS'required'
p75484
I00
sS'group_name'
p75485
NsasS'name'
p75486
S'/Materials/GBWidthAnisotropy'
p75487
sa(dp75488
S'description'
p75489
g3
sS'subblocks'
p75490
NsS'parameters'
p75491
(lp75492
(dp75493
S'description'
p75494
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75495
sS'cpp_type'
p75496
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75497
sS'default'
p75498
g3
sS'name'
p75499
S'block'
p75500
sS'required'
p75501
I00
sS'group_name'
p75502
Nsa(dp75503
S'description'
p75504
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75505
sS'cpp_type'
p75506
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75507
sS'default'
p75508
g3
sS'name'
p75509
S'boundary'
p75510
sS'required'
p75511
I00
sS'group_name'
p75512
Nsa(dp75513
S'description'
p75514
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75515
sS'cpp_type'
p75516
S'bool'
p75517
sS'default'
p75518
S'1'
p75519
sS'name'
p75520
S'compute'
p75521
sS'required'
p75522
I00
sS'group_name'
p75523
Nsa(dp75524
S'description'
p75525
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75526
sS'cpp_type'
p75527
S'bool'
p75528
sS'default'
p75529
S'0'
p75530
sS'name'
p75531
S'constant_on_elem'
p75532
sS'required'
p75533
I00
sS'group_name'
p75534
S'Advanced'
p75535
sa(dp75536
S'description'
p75537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75538
sS'cpp_type'
p75539
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75540
sS'default'
p75541
g3
sS'name'
p75542
S'control_tags'
p75543
sS'required'
p75544
I00
sS'group_name'
p75545
S'Advanced'
p75546
sa(dp75547
S'description'
p75548
S'Set the enabled status of the MooseObject.\n'
p75549
sS'cpp_type'
p75550
S'bool'
p75551
sS'default'
p75552
S'1'
p75553
sS'name'
p75554
S'enable'
p75555
sS'required'
p75556
I00
sS'group_name'
p75557
S'Advanced'
p75558
sa(dp75559
S'description'
p75560
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75561
sS'cpp_type'
p75562
S'bool'
p75563
sS'default'
p75564
S'1'
p75565
sS'name'
p75566
S'implicit'
p75567
sS'required'
p75568
I00
sS'group_name'
p75569
S'Advanced'
p75570
sa(dp75571
S'description'
p75572
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75573
sS'cpp_type'
p75574
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75575
sS'default'
p75576
g3
sS'name'
p75577
S'output_properties'
p75578
sS'required'
p75579
I00
sS'group_name'
p75580
S'Outputs'
p75581
sa(dp75582
S'description'
p75583
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75584
sS'cpp_type'
p75585
S'std::vector<OutputName, std::allocator<OutputName> >'
p75586
sS'default'
p75587
S'none'
p75588
sS'name'
p75589
S'outputs'
p75590
sS'required'
p75591
I00
sS'group_name'
p75592
S'Outputs'
p75593
sa(dp75594
S'description'
p75595
S'The names of the properties this material will have\n'
p75596
sS'cpp_type'
p75597
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75598
sS'default'
p75599
g3
sS'name'
p75600
S'prop_names'
p75601
sS'required'
p75602
I00
sS'group_name'
p75603
Nsa(dp75604
S'description'
p75605
S'The values associated with the named properties\n'
p75606
sS'cpp_type'
p75607
S'std::vector<double, std::allocator<double> >'
p75608
sS'default'
p75609
g3
sS'name'
p75610
S'prop_values'
p75611
sS'required'
p75612
I00
sS'group_name'
p75613
Nsa(dp75614
S'description'
p75615
S'The seed for the master random number generator\n'
p75616
sS'cpp_type'
p75617
S'unsigned int'
p75618
sS'default'
p75619
S'0'
p75620
sS'name'
p75621
S'seed'
p75622
sS'required'
p75623
I00
sS'group_name'
p75624
S'Advanced'
p75625
sa(dp75626
S'description'
p75627
g3
sS'cpp_type'
p75628
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75629
sS'default'
p75630
S'GenericConstantMaterial'
p75631
sS'name'
p75632
S'type'
p75633
sS'required'
p75634
I00
sS'group_name'
p75635
Nsa(dp75636
S'description'
p75637
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75638
sS'cpp_type'
p75639
S'bool'
p75640
sS'default'
p75641
S'0'
p75642
sS'name'
p75643
S'use_displaced_mesh'
p75644
sS'required'
p75645
I00
sS'group_name'
p75646
S'Advanced'
p75647
sasS'name'
p75648
S'/Materials/GenericConstantMaterial'
p75649
sa(dp75650
S'description'
p75651
g3
sS'subblocks'
p75652
NsS'parameters'
p75653
(lp75654
(dp75655
S'description'
p75656
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75657
sS'cpp_type'
p75658
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75659
sS'default'
p75660
g3
sS'name'
p75661
S'block'
p75662
sS'required'
p75663
I00
sS'group_name'
p75664
Nsa(dp75665
S'description'
p75666
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75667
sS'cpp_type'
p75668
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75669
sS'default'
p75670
g3
sS'name'
p75671
S'boundary'
p75672
sS'required'
p75673
I00
sS'group_name'
p75674
Nsa(dp75675
S'description'
p75676
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75677
sS'cpp_type'
p75678
S'bool'
p75679
sS'default'
p75680
S'1'
p75681
sS'name'
p75682
S'compute'
p75683
sS'required'
p75684
I00
sS'group_name'
p75685
Nsa(dp75686
S'description'
p75687
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75688
sS'cpp_type'
p75689
S'bool'
p75690
sS'default'
p75691
S'0'
p75692
sS'name'
p75693
S'constant_on_elem'
p75694
sS'required'
p75695
I00
sS'group_name'
p75696
S'Advanced'
p75697
sa(dp75698
S'description'
p75699
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75700
sS'cpp_type'
p75701
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75702
sS'default'
p75703
g3
sS'name'
p75704
S'control_tags'
p75705
sS'required'
p75706
I00
sS'group_name'
p75707
S'Advanced'
p75708
sa(dp75709
S'description'
p75710
S'Set the enabled status of the MooseObject.\n'
p75711
sS'cpp_type'
p75712
S'bool'
p75713
sS'default'
p75714
S'1'
p75715
sS'name'
p75716
S'enable'
p75717
sS'required'
p75718
I00
sS'group_name'
p75719
S'Advanced'
p75720
sa(dp75721
S'description'
p75722
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75723
sS'cpp_type'
p75724
S'bool'
p75725
sS'default'
p75726
S'1'
p75727
sS'name'
p75728
S'implicit'
p75729
sS'required'
p75730
I00
sS'group_name'
p75731
S'Advanced'
p75732
sa(dp75733
S'description'
p75734
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75735
sS'cpp_type'
p75736
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75737
sS'default'
p75738
g3
sS'name'
p75739
S'output_properties'
p75740
sS'required'
p75741
I00
sS'group_name'
p75742
S'Outputs'
p75743
sa(dp75744
S'description'
p75745
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75746
sS'cpp_type'
p75747
S'std::vector<OutputName, std::allocator<OutputName> >'
p75748
sS'default'
p75749
S'none'
p75750
sS'name'
p75751
S'outputs'
p75752
sS'required'
p75753
I00
sS'group_name'
p75754
S'Outputs'
p75755
sa(dp75756
S'description'
p75757
S'The seed for the master random number generator\n'
p75758
sS'cpp_type'
p75759
S'unsigned int'
p75760
sS'default'
p75761
S'0'
p75762
sS'name'
p75763
S'seed'
p75764
sS'required'
p75765
I00
sS'group_name'
p75766
S'Advanced'
p75767
sa(dp75768
S'description'
p75769
S'Name of the tensor material property to be created\n'
p75770
sS'cpp_type'
p75771
S'MaterialPropertyName'
p75772
sS'default'
p75773
g3
sS'name'
p75774
S'tensor_name'
p75775
sS'required'
p75776
I01
sS'group_name'
p75777
Nsa(dp75778
S'description'
p75779
S'Vector of values defining the constant rank two tensor\n'
p75780
sS'cpp_type'
p75781
S'std::vector<double, std::allocator<double> >'
p75782
sS'default'
p75783
g3
sS'name'
p75784
S'tensor_values'
p75785
sS'required'
p75786
I01
sS'group_name'
p75787
Nsa(dp75788
S'description'
p75789
g3
sS'cpp_type'
p75790
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75791
sS'default'
p75792
S'GenericConstantRankTwoTensor'
p75793
sS'name'
p75794
S'type'
p75795
sS'required'
p75796
I00
sS'group_name'
p75797
Nsa(dp75798
S'description'
p75799
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75800
sS'cpp_type'
p75801
S'bool'
p75802
sS'default'
p75803
S'0'
p75804
sS'name'
p75805
S'use_displaced_mesh'
p75806
sS'required'
p75807
I00
sS'group_name'
p75808
S'Advanced'
p75809
sasS'name'
p75810
S'/Materials/GenericConstantRankTwoTensor'
p75811
sa(dp75812
S'description'
p75813
g3
sS'subblocks'
p75814
NsS'parameters'
p75815
(lp75816
(dp75817
S'description'
p75818
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75819
sS'cpp_type'
p75820
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75821
sS'default'
p75822
g3
sS'name'
p75823
S'block'
p75824
sS'required'
p75825
I00
sS'group_name'
p75826
Nsa(dp75827
S'description'
p75828
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75829
sS'cpp_type'
p75830
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75831
sS'default'
p75832
g3
sS'name'
p75833
S'boundary'
p75834
sS'required'
p75835
I00
sS'group_name'
p75836
Nsa(dp75837
S'description'
p75838
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p75839
sS'cpp_type'
p75840
S'bool'
p75841
sS'default'
p75842
S'1'
p75843
sS'name'
p75844
S'compute'
p75845
sS'required'
p75846
I00
sS'group_name'
p75847
Nsa(dp75848
S'description'
p75849
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p75850
sS'cpp_type'
p75851
S'bool'
p75852
sS'default'
p75853
S'0'
p75854
sS'name'
p75855
S'constant_on_elem'
p75856
sS'required'
p75857
I00
sS'group_name'
p75858
S'Advanced'
p75859
sa(dp75860
S'description'
p75861
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75862
sS'cpp_type'
p75863
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75864
sS'default'
p75865
g3
sS'name'
p75866
S'control_tags'
p75867
sS'required'
p75868
I00
sS'group_name'
p75869
S'Advanced'
p75870
sa(dp75871
S'description'
p75872
S'Set the enabled status of the MooseObject.\n'
p75873
sS'cpp_type'
p75874
S'bool'
p75875
sS'default'
p75876
S'1'
p75877
sS'name'
p75878
S'enable'
p75879
sS'required'
p75880
I00
sS'group_name'
p75881
S'Advanced'
p75882
sa(dp75883
S'description'
p75884
S'Enable the declaration of old and older values\n'
p75885
sS'cpp_type'
p75886
S'bool'
p75887
sS'default'
p75888
S'0'
p75889
sS'name'
p75890
S'enable_stateful'
p75891
sS'required'
p75892
I00
sS'group_name'
p75893
Nsa(dp75894
S'description'
p75895
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75896
sS'cpp_type'
p75897
S'bool'
p75898
sS'default'
p75899
S'1'
p75900
sS'name'
p75901
S'implicit'
p75902
sS'required'
p75903
I00
sS'group_name'
p75904
S'Advanced'
p75905
sa(dp75906
S'description'
p75907
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75908
sS'cpp_type'
p75909
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75910
sS'default'
p75911
g3
sS'name'
p75912
S'output_properties'
p75913
sS'required'
p75914
I00
sS'group_name'
p75915
S'Outputs'
p75916
sa(dp75917
S'description'
p75918
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75919
sS'cpp_type'
p75920
S'std::vector<OutputName, std::allocator<OutputName> >'
p75921
sS'default'
p75922
S'none'
p75923
sS'name'
p75924
S'outputs'
p75925
sS'required'
p75926
I00
sS'group_name'
p75927
S'Outputs'
p75928
sa(dp75929
S'description'
p75930
S'The names of the properties this material will have\n'
p75931
sS'cpp_type'
p75932
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75933
sS'default'
p75934
g3
sS'name'
p75935
S'prop_names'
p75936
sS'required'
p75937
I00
sS'group_name'
p75938
Nsa(dp75939
S'description'
p75940
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p75941
sS'cpp_type'
p75942
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75943
sS'default'
p75944
g3
sS'name'
p75945
S'prop_values'
p75946
sS'required'
p75947
I00
sS'group_name'
p75948
Nsa(dp75949
S'description'
p75950
S'The seed for the master random number generator\n'
p75951
sS'cpp_type'
p75952
S'unsigned int'
p75953
sS'default'
p75954
S'0'
p75955
sS'name'
p75956
S'seed'
p75957
sS'required'
p75958
I00
sS'group_name'
p75959
S'Advanced'
p75960
sa(dp75961
S'description'
p75962
g3
sS'cpp_type'
p75963
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75964
sS'default'
p75965
S'GenericFunctionMaterial'
p75966
sS'name'
p75967
S'type'
p75968
sS'required'
p75969
I00
sS'group_name'
p75970
Nsa(dp75971
S'description'
p75972
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75973
sS'cpp_type'
p75974
S'bool'
p75975
sS'default'
p75976
S'0'
p75977
sS'name'
p75978
S'use_displaced_mesh'
p75979
sS'required'
p75980
I00
sS'group_name'
p75981
S'Advanced'
p75982
sasS'name'
p75983
S'/Materials/GenericFunctionMaterial'
p75984
sa(dp75985
S'description'
p75986
S'Calculation the advection velocity of grain due to rigid vody translation and rotation\n'
p75987
sS'subblocks'
p75988
NsS'parameters'
p75989
(lp75990
(dp75991
S'description'
p75992
S'Optional parameter that allows the user to define type of force density under consideration\n'
p75993
sS'cpp_type'
p75994
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75995
sS'default'
p75996
g3
sS'name'
p75997
S'base_name'
p75998
sS'required'
p75999
I00
sS'group_name'
p76000
Nsa(dp76001
S'description'
p76002
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76003
sS'cpp_type'
p76004
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76005
sS'default'
p76006
g3
sS'name'
p76007
S'block'
p76008
sS'required'
p76009
I00
sS'group_name'
p76010
Nsa(dp76011
S'description'
p76012
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76013
sS'cpp_type'
p76014
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76015
sS'default'
p76016
g3
sS'name'
p76017
S'boundary'
p76018
sS'required'
p76019
I00
sS'group_name'
p76020
Nsa(dp76021
S'description'
p76022
S'Concentration field\n'
p76023
sS'cpp_type'
p76024
S'std::vector<VariableName>'
p76025
sS'default'
p76026
g3
sS'name'
p76027
S'c'
p76028
sS'required'
p76029
I00
sS'group_name'
p76030
Nsa(dp76031
S'description'
p76032
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p76033
sS'cpp_type'
p76034
S'bool'
p76035
sS'default'
p76036
S'1'
p76037
sS'name'
p76038
S'compute'
p76039
sS'required'
p76040
I00
sS'group_name'
p76041
Nsa(dp76042
S'description'
p76043
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76044
sS'cpp_type'
p76045
S'bool'
p76046
sS'default'
p76047
S'0'
p76048
sS'name'
p76049
S'constant_on_elem'
p76050
sS'required'
p76051
I00
sS'group_name'
p76052
S'Advanced'
p76053
sa(dp76054
S'description'
p76055
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76056
sS'cpp_type'
p76057
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76058
sS'default'
p76059
g3
sS'name'
p76060
S'control_tags'
p76061
sS'required'
p76062
I00
sS'group_name'
p76063
S'Advanced'
p76064
sa(dp76065
S'description'
p76066
S'Set the enabled status of the MooseObject.\n'
p76067
sS'cpp_type'
p76068
S'bool'
p76069
sS'default'
p76070
S'1'
p76071
sS'name'
p76072
S'enable'
p76073
sS'required'
p76074
I00
sS'group_name'
p76075
S'Advanced'
p76076
sa(dp76077
S'description'
p76078
S'Array of other coupled order parameters\n'
p76079
sS'cpp_type'
p76080
S'std::vector<VariableName>'
p76081
sS'default'
p76082
g3
sS'name'
p76083
S'etas'
p76084
sS'required'
p76085
I01
sS'group_name'
p76086
Nsa(dp76087
S'description'
p76088
S'UserObject for getting the center of mass of grains\n'
p76089
sS'cpp_type'
p76090
S'UserObjectName'
p76091
sS'default'
p76092
g3
sS'name'
p76093
S'grain_data'
p76094
sS'required'
p76095
I00
sS'group_name'
p76096
Nsa(dp76097
S'description'
p76098
S'userobject for getting force and torque acting on grains\n'
p76099
sS'cpp_type'
p76100
S'UserObjectName'
p76101
sS'default'
p76102
g3
sS'name'
p76103
S'grain_force'
p76104
sS'required'
p76105
I00
sS'group_name'
p76106
Nsa(dp76107
S'description'
p76108
S'The feature volume VectorPostprocessorValue.\n'
p76109
sS'cpp_type'
p76110
S'VectorPostprocessorName'
p76111
sS'default'
p76112
g3
sS'name'
p76113
S'grain_volumes'
p76114
sS'required'
p76115
I00
sS'group_name'
p76116
Nsa(dp76117
S'description'
p76118
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76119
sS'cpp_type'
p76120
S'bool'
p76121
sS'default'
p76122
S'1'
p76123
sS'name'
p76124
S'implicit'
p76125
sS'required'
p76126
I00
sS'group_name'
p76127
S'Advanced'
p76128
sa(dp76129
S'description'
p76130
S'Array of other coupled order parameters (num_name)\n'
p76131
sS'cpp_type'
p76132
S'unsigned int'
p76133
sS'default'
p76134
g3
sS'name'
p76135
S'op_num'
p76136
sS'required'
p76137
I00
sS'group_name'
p76138
Nsa(dp76139
S'description'
p76140
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76141
sS'cpp_type'
p76142
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76143
sS'default'
p76144
g3
sS'name'
p76145
S'output_properties'
p76146
sS'required'
p76147
I00
sS'group_name'
p76148
S'Outputs'
p76149
sa(dp76150
S'description'
p76151
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76152
sS'cpp_type'
p76153
S'std::vector<OutputName, std::allocator<OutputName> >'
p76154
sS'default'
p76155
S'none'
p76156
sS'name'
p76157
S'outputs'
p76158
sS'required'
p76159
I00
sS'group_name'
p76160
S'Outputs'
p76161
sa(dp76162
S'description'
p76163
S'constant value characterizing grain rotation\n'
p76164
sS'cpp_type'
p76165
S'double'
p76166
sS'default'
p76167
S'1'
p76168
sS'name'
p76169
S'rotation_constant'
p76170
sS'required'
p76171
I00
sS'group_name'
p76172
Nsa(dp76173
S'description'
p76174
S'The seed for the master random number generator\n'
p76175
sS'cpp_type'
p76176
S'unsigned int'
p76177
sS'default'
p76178
S'0'
p76179
sS'name'
p76180
S'seed'
p76181
sS'required'
p76182
I00
sS'group_name'
p76183
S'Advanced'
p76184
sa(dp76185
S'description'
p76186
S'constant value characterizing grain translation\n'
p76187
sS'cpp_type'
p76188
S'double'
p76189
sS'default'
p76190
S'500'
p76191
sS'name'
p76192
S'translation_constant'
p76193
sS'required'
p76194
I00
sS'group_name'
p76195
Nsa(dp76196
S'description'
p76197
g3
sS'cpp_type'
p76198
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76199
sS'default'
p76200
S'GrainAdvectionVelocity'
p76201
sS'name'
p76202
S'type'
p76203
sS'required'
p76204
I00
sS'group_name'
p76205
Nsa(dp76206
S'description'
p76207
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76208
sS'cpp_type'
p76209
S'bool'
p76210
sS'default'
p76211
S'0'
p76212
sS'name'
p76213
S'use_displaced_mesh'
p76214
sS'required'
p76215
I00
sS'group_name'
p76216
S'Advanced'
p76217
sa(dp76218
S'description'
p76219
S'Array of other coupled order parameters (base_name)\n'
p76220
sS'cpp_type'
p76221
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76222
sS'default'
p76223
g3
sS'name'
p76224
S'var_name_base'
p76225
sS'required'
p76226
I00
sS'group_name'
p76227
NsasS'name'
p76228
S'/Materials/GrainAdvectionVelocity'
p76229
sa(dp76230
S'description'
p76231
S'Computes damaged stress and energy in the intermediate configuration assuming isotropy\n'
p76232
sS'subblocks'
p76233
NsS'parameters'
p76234
(lp76235
(dp76236
S'description'
p76237
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p76238
sS'cpp_type'
p76239
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76240
sS'default'
p76241
g3
sS'name'
p76242
S'base_name'
p76243
sS'required'
p76244
I00
sS'group_name'
p76245
Nsa(dp76246
S'description'
p76247
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76248
sS'cpp_type'
p76249
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76250
sS'default'
p76251
g3
sS'name'
p76252
S'block'
p76253
sS'required'
p76254
I00
sS'group_name'
p76255
Nsa(dp76256
S'description'
p76257
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76258
sS'cpp_type'
p76259
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76260
sS'default'
p76261
g3
sS'name'
p76262
S'boundary'
p76263
sS'required'
p76264
I00
sS'group_name'
p76265
Nsa(dp76266
S'description'
p76267
S'Damage variable\n'
p76268
sS'cpp_type'
p76269
S'std::vector<VariableName>'
p76270
sS'default'
p76271
g3
sS'name'
p76272
S'c'
p76273
sS'required'
p76274
I01
sS'group_name'
p76275
Nsa(dp76276
S'description'
p76277
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p76278
sS'cpp_type'
p76279
S'bool'
p76280
sS'default'
p76281
S'1'
p76282
sS'name'
p76283
S'compute'
p76284
sS'required'
p76285
I00
sS'group_name'
p76286
Nsa(dp76287
S'description'
p76288
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76289
sS'cpp_type'
p76290
S'bool'
p76291
sS'default'
p76292
S'0'
p76293
sS'name'
p76294
S'constant_on_elem'
p76295
sS'required'
p76296
I00
sS'group_name'
p76297
S'Advanced'
p76298
sa(dp76299
S'description'
p76300
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76301
sS'cpp_type'
p76302
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76303
sS'default'
p76304
g3
sS'name'
p76305
S'control_tags'
p76306
sS'required'
p76307
I00
sS'group_name'
p76308
S'Advanced'
p76309
sa(dp76310
S'description'
p76311
S'Avoid zero after complete damage\n'
p76312
sS'cpp_type'
p76313
S'double'
p76314
sS'default'
p76315
S'1e-08'
p76316
sS'name'
p76317
S'damage_stiffness'
p76318
sS'required'
p76319
I00
sS'group_name'
p76320
Nsa(dp76321
S'description'
p76322
S'Set the enabled status of the MooseObject.\n'
p76323
sS'cpp_type'
p76324
S'bool'
p76325
sS'default'
p76326
S'1'
p76327
sS'name'
p76328
S'enable'
p76329
sS'required'
p76330
I00
sS'group_name'
p76331
S'Advanced'
p76332
sa(dp76333
S'description'
p76334
S'List of User object names that computes flow rate and derivatives\n'
p76335
sS'cpp_type'
p76336
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p76337
sS'default'
p76338
g3
sS'name'
p76339
S'flow_rate_user_objects'
p76340
sS'required'
p76341
I00
sS'group_name'
p76342
Nsa(dp76343
S'description'
p76344
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76345
sS'cpp_type'
p76346
S'bool'
p76347
sS'default'
p76348
S'1'
p76349
sS'name'
p76350
S'implicit'
p76351
sS'required'
p76352
I00
sS'group_name'
p76353
S'Advanced'
p76354
sa(dp76355
S'description'
p76356
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p76357
sS'cpp_type'
p76358
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p76359
sS'default'
p76360
g3
sS'name'
p76361
S'initial_stress'
p76362
sS'required'
p76363
I00
sS'group_name'
p76364
Nsa(dp76365
S'description'
p76366
S'List of User object names that computes internal variable rates and derivatives\n'
p76367
sS'cpp_type'
p76368
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p76369
sS'default'
p76370
g3
sS'name'
p76371
S'internal_var_rate_user_objects'
p76372
sS'required'
p76373
I00
sS'group_name'
p76374
Nsa(dp76375
S'description'
p76376
S'List of User object names that integrates internal variables and computes derivatives\n'
p76377
sS'cpp_type'
p76378
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p76379
sS'default'
p76380
g3
sS'name'
p76381
S'internal_var_user_objects'
p76382
sS'required'
p76383
I00
sS'group_name'
p76384
Nsa(dp76385
S'description'
p76386
S'Maximum number of substep iteration\n'
p76387
sS'cpp_type'
p76388
S'unsigned int'
p76389
sS'default'
p76390
S'1'
p76391
sS'name'
p76392
S'max_substep_iteration'
p76393
sS'required'
p76394
I00
sS'group_name'
p76395
Nsa(dp76396
S'description'
p76397
S'Maximum iteration for flow rate update\n'
p76398
sS'cpp_type'
p76399
S'unsigned int'
p76400
sS'default'
p76401
S'50'
p76402
sS'name'
p76403
S'maxiters'
p76404
sS'required'
p76405
I00
sS'group_name'
p76406
Nsa(dp76407
S'description'
p76408
S'Flag for numerical stiffness\n'
p76409
sS'cpp_type'
p76410
S'bool'
p76411
sS'default'
p76412
S'0'
p76413
sS'name'
p76414
S'numerical_stiffness'
p76415
sS'required'
p76416
I00
sS'group_name'
p76417
Nsa(dp76418
S'description'
p76419
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76420
sS'cpp_type'
p76421
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76422
sS'default'
p76423
g3
sS'name'
p76424
S'output_properties'
p76425
sS'required'
p76426
I00
sS'group_name'
p76427
S'Outputs'
p76428
sa(dp76429
S'description'
p76430
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76431
sS'cpp_type'
p76432
S'std::vector<OutputName, std::allocator<OutputName> >'
p76433
sS'default'
p76434
S'none'
p76435
sS'name'
p76436
S'outputs'
p76437
sS'required'
p76438
I00
sS'group_name'
p76439
S'Outputs'
p76440
sa(dp76441
S'description'
p76442
S'Perturbation scale factor\n'
p76443
sS'cpp_type'
p76444
S'double'
p76445
sS'default'
p76446
S'1e-05'
p76447
sS'name'
p76448
S'perturbation_scale_factor'
p76449
sS'required'
p76450
I00
sS'group_name'
p76451
Nsa(dp76452
S'description'
p76453
S'Absolute Tolerance for flow rate residual equation\n'
p76454
sS'cpp_type'
p76455
S'double'
p76456
sS'default'
p76457
S'1e-10'
p76458
sS'name'
p76459
S'resid_abs_tol'
p76460
sS'required'
p76461
I00
sS'group_name'
p76462
Nsa(dp76463
S'description'
p76464
S'Relative Tolerance for flow rate residual equation\n'
p76465
sS'cpp_type'
p76466
S'double'
p76467
sS'default'
p76468
S'1e-06'
p76469
sS'name'
p76470
S'resid_rel_tol'
p76471
sS'required'
p76472
I00
sS'group_name'
p76473
Nsa(dp76474
S'description'
p76475
S'The seed for the master random number generator\n'
p76476
sS'cpp_type'
p76477
S'unsigned int'
p76478
sS'default'
p76479
S'0'
p76480
sS'name'
p76481
S'seed'
p76482
sS'required'
p76483
I00
sS'group_name'
p76484
S'Advanced'
p76485
sa(dp76486
S'description'
p76487
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p76488
sS'cpp_type'
p76489
S'bool'
p76490
sS'default'
p76491
S'0'
p76492
sS'name'
p76493
S'store_stress_old'
p76494
sS'required'
p76495
I00
sS'group_name'
p76496
Nsa(dp76497
S'description'
p76498
S'List of User object names that computes strength variables and derivatives\n'
p76499
sS'cpp_type'
p76500
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p76501
sS'default'
p76502
g3
sS'name'
p76503
S'strength_user_objects'
p76504
sS'required'
p76505
I00
sS'group_name'
p76506
Nsa(dp76507
S'description'
p76508
g3
sS'cpp_type'
p76509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76510
sS'default'
p76511
S'HyperElasticPhaseFieldIsoDamage'
p76512
sS'name'
p76513
S'type'
p76514
sS'required'
p76515
I00
sS'group_name'
p76516
Nsa(dp76517
S'description'
p76518
S'Perturbation value when strain value less than numerical zero\n'
p76519
sS'cpp_type'
p76520
S'double'
p76521
sS'default'
p76522
S'1e-08'
p76523
sS'name'
p76524
S'zero_perturb'
p76525
sS'required'
p76526
I00
sS'group_name'
p76527
Nsa(dp76528
S'description'
p76529
S'Tolerance for numerical zero\n'
p76530
sS'cpp_type'
p76531
S'double'
p76532
sS'default'
p76533
S'1e-12'
p76534
sS'name'
p76535
S'zero_tol'
p76536
sS'required'
p76537
I00
sS'group_name'
p76538
NsasS'name'
p76539
S'/Materials/HyperElasticPhaseFieldIsoDamage'
p76540
sa(dp76541
S'description'
p76542
S'This class uses the discrete material for a hyperbolic sine viscoplasticity model in which the effective plastic strain is solved for using a creep approach.\n'
p76543
sS'subblocks'
p76544
NsS'parameters'
p76545
(lp76546
(dp76547
S'description'
p76548
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p76549
sS'cpp_type'
p76550
S'double'
p76551
sS'default'
p76552
S'1e-20'
p76553
sS'name'
p76554
S'absolute_tolerance'
p76555
sS'required'
p76556
I00
sS'group_name'
p76557
Nsa(dp76558
S'description'
p76559
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p76560
sS'cpp_type'
p76561
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76562
sS'default'
p76563
g3
sS'name'
p76564
S'base_name'
p76565
sS'required'
p76566
I00
sS'group_name'
p76567
Nsa(dp76568
S'description'
p76569
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76570
sS'cpp_type'
p76571
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76572
sS'default'
p76573
g3
sS'name'
p76574
S'block'
p76575
sS'required'
p76576
I00
sS'group_name'
p76577
Nsa(dp76578
S'description'
p76579
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76580
sS'cpp_type'
p76581
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76582
sS'default'
p76583
g3
sS'name'
p76584
S'boundary'
p76585
sS'required'
p76586
I00
sS'group_name'
p76587
Nsa(dp76588
S'description'
p76589
S'Viscoplasticity coefficient, scales the hyperbolic function\n'
p76590
sS'cpp_type'
p76591
S'double'
p76592
sS'default'
p76593
g3
sS'name'
p76594
S'c_alpha'
p76595
sS'required'
p76596
I01
sS'group_name'
p76597
Nsa(dp76598
S'description'
p76599
S'Viscoplasticity coefficient inside the hyperbolic sin function\n'
p76600
sS'cpp_type'
p76601
S'double'
p76602
sS'default'
p76603
g3
sS'name'
p76604
S'c_beta'
p76605
sS'required'
p76606
I01
sS'group_name'
p76607
Nsa(dp76608
S'description'
p76609
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76610
sS'cpp_type'
p76611
S'bool'
p76612
sS'default'
p76613
S'0'
p76614
sS'name'
p76615
S'constant_on_elem'
p76616
sS'required'
p76617
I00
sS'group_name'
p76618
S'Advanced'
p76619
sa(dp76620
S'description'
p76621
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76622
sS'cpp_type'
p76623
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76624
sS'default'
p76625
g3
sS'name'
p76626
S'control_tags'
p76627
sS'required'
p76628
I00
sS'group_name'
p76629
S'Advanced'
p76630
sa(dp76631
S'description'
p76632
S'Set the enabled status of the MooseObject.\n'
p76633
sS'cpp_type'
p76634
S'bool'
p76635
sS'default'
p76636
S'1'
p76637
sS'name'
p76638
S'enable'
p76639
sS'required'
p76640
I00
sS'group_name'
p76641
S'Advanced'
p76642
sa(dp76643
S'description'
p76644
S'Hardening slope\n'
p76645
sS'cpp_type'
p76646
S'double'
p76647
sS'default'
p76648
g3
sS'name'
p76649
S'hardening_constant'
p76650
sS'required'
p76651
I01
sS'group_name'
p76652
Nsa(dp76653
S'description'
p76654
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76655
sS'cpp_type'
p76656
S'bool'
p76657
sS'default'
p76658
S'1'
p76659
sS'name'
p76660
S'implicit'
p76661
sS'required'
p76662
I00
sS'group_name'
p76663
S'Advanced'
p76664
sa(dp76665
S'description'
p76666
S'Maximum number of newton iterations in the radial return material\n'
p76667
sS'cpp_type'
p76668
S'unsigned int'
p76669
sS'default'
p76670
S'30'
p76671
sS'name'
p76672
S'max_iterations'
p76673
sS'required'
p76674
I00
sS'group_name'
p76675
Nsa(dp76676
S'description'
p76677
S'Set true to output newton iteration information from the radial return material\n'
p76678
sS'cpp_type'
p76679
S'bool'
p76680
sS'default'
p76681
S'0'
p76682
sS'name'
p76683
S'output_iteration_info'
p76684
sS'required'
p76685
I00
sS'group_name'
p76686
Nsa(dp76687
S'description'
p76688
S'Set true to output the recompute material iteration information when a step fails\n'
p76689
sS'cpp_type'
p76690
S'bool'
p76691
sS'default'
p76692
S'0'
p76693
sS'name'
p76694
S'output_iteration_info_on_error'
p76695
sS'required'
p76696
I00
sS'group_name'
p76697
Nsa(dp76698
S'description'
p76699
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76700
sS'cpp_type'
p76701
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76702
sS'default'
p76703
g3
sS'name'
p76704
S'output_properties'
p76705
sS'required'
p76706
I00
sS'group_name'
p76707
S'Outputs'
p76708
sa(dp76709
S'description'
p76710
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76711
sS'cpp_type'
p76712
S'std::vector<OutputName, std::allocator<OutputName> >'
p76713
sS'default'
p76714
S'none'
p76715
sS'name'
p76716
S'outputs'
p76717
sS'required'
p76718
I00
sS'group_name'
p76719
S'Outputs'
p76720
sa(dp76721
S'description'
p76722
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p76723
sS'cpp_type'
p76724
S'double'
p76725
sS'default'
p76726
S'1e-08'
p76727
sS'name'
p76728
S'relative_tolerance'
p76729
sS'required'
p76730
I00
sS'group_name'
p76731
Nsa(dp76732
S'description'
p76733
S'The seed for the master random number generator\n'
p76734
sS'cpp_type'
p76735
S'unsigned int'
p76736
sS'default'
p76737
S'0'
p76738
sS'name'
p76739
S'seed'
p76740
sS'required'
p76741
I00
sS'group_name'
p76742
S'Advanced'
p76743
sa(dp76744
S'description'
p76745
g3
sS'cpp_type'
p76746
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76747
sS'default'
p76748
S'HyperbolicViscoplasticityStressUpdate'
p76749
sS'name'
p76750
S'type'
p76751
sS'required'
p76752
I00
sS'group_name'
p76753
Nsa(dp76754
S'description'
p76755
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76756
sS'cpp_type'
p76757
S'bool'
p76758
sS'default'
p76759
S'0'
p76760
sS'name'
p76761
S'use_displaced_mesh'
p76762
sS'required'
p76763
I00
sS'group_name'
p76764
S'Advanced'
p76765
sa(dp76766
S'description'
p76767
S'The point at which plastic strain begins accumulating\n'
p76768
sS'cpp_type'
p76769
S'double'
p76770
sS'default'
p76771
g3
sS'name'
p76772
S'yield_stress'
p76773
sS'required'
p76774
I01
sS'group_name'
p76775
NsasS'name'
p76776
S'/Materials/HyperbolicViscoplasticityStressUpdate'
p76777
sa(dp76778
S'description'
p76779
g3
sS'subblocks'
p76780
NsS'parameters'
p76781
(lp76782
(dp76783
S'description'
p76784
S'Ellipse semiaxis\n'
p76785
sS'cpp_type'
p76786
S'double'
p76787
sS'default'
p76788
g3
sS'name'
p76789
S'a'
p76790
sS'required'
p76791
I01
sS'group_name'
p76792
Nsa(dp76793
S'description'
p76794
S'Ellipse semiaxis\n'
p76795
sS'cpp_type'
p76796
S'double'
p76797
sS'default'
p76798
g3
sS'name'
p76799
S'b'
p76800
sS'required'
p76801
I01
sS'group_name'
p76802
Nsa(dp76803
S'description'
p76804
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76805
sS'cpp_type'
p76806
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76807
sS'default'
p76808
g3
sS'name'
p76809
S'block'
p76810
sS'required'
p76811
I00
sS'group_name'
p76812
Nsa(dp76813
S'description'
p76814
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76815
sS'cpp_type'
p76816
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76817
sS'default'
p76818
g3
sS'name'
p76819
S'boundary'
p76820
sS'required'
p76821
I00
sS'group_name'
p76822
Nsa(dp76823
S'description'
p76824
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p76825
sS'cpp_type'
p76826
S'bool'
p76827
sS'default'
p76828
S'1'
p76829
sS'name'
p76830
S'compute'
p76831
sS'required'
p76832
I00
sS'group_name'
p76833
Nsa(dp76834
S'description'
p76835
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p76836
sS'cpp_type'
p76837
S'bool'
p76838
sS'default'
p76839
S'0'
p76840
sS'name'
p76841
S'constant_on_elem'
p76842
sS'required'
p76843
I00
sS'group_name'
p76844
S'Advanced'
p76845
sa(dp76846
S'description'
p76847
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76848
sS'cpp_type'
p76849
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76850
sS'default'
p76851
g3
sS'name'
p76852
S'control_tags'
p76853
sS'required'
p76854
I00
sS'group_name'
p76855
S'Advanced'
p76856
sa(dp76857
S'description'
p76858
S'Set the enabled status of the MooseObject.\n'
p76859
sS'cpp_type'
p76860
S'bool'
p76861
sS'default'
p76862
S'1'
p76863
sS'name'
p76864
S'enable'
p76865
sS'required'
p76866
I00
sS'group_name'
p76867
S'Advanced'
p76868
sa(dp76869
S'description'
p76870
S'Name of the material property where analytical elastic energies will be stored\n'
p76871
sS'cpp_type'
p76872
S'MaterialPropertyName'
p76873
sS'default'
p76874
g3
sS'name'
p76875
S'energy_name'
p76876
sS'required'
p76877
I01
sS'group_name'
p76878
Nsa(dp76879
S'description'
p76880
S'Determines whether this object is calculated using an implicit or explicit form\n'
p76881
sS'cpp_type'
p76882
S'bool'
p76883
sS'default'
p76884
S'1'
p76885
sS'name'
p76886
S'implicit'
p76887
sS'required'
p76888
I00
sS'group_name'
p76889
S'Advanced'
p76890
sa(dp76891
S'description'
p76892
S"Lame's first parameter\n"
p76893
sS'cpp_type'
p76894
S'double'
p76895
sS'default'
p76896
g3
sS'name'
p76897
S'lambda'
p76898
sS'required'
p76899
I01
sS'group_name'
p76900
Nsa(dp76901
S'description'
p76902
S'Vector of misfit strains in order eps_11, eps_22\n'
p76903
sS'cpp_type'
p76904
S'std::vector<double, std::allocator<double> >'
p76905
sS'default'
p76906
g3
sS'name'
p76907
S'misfit_strains'
p76908
sS'required'
p76909
I01
sS'group_name'
p76910
Nsa(dp76911
S'description'
p76912
S"Shear modulus (aka Lame's second parameter)\n"
p76913
sS'cpp_type'
p76914
S'double'
p76915
sS'default'
p76916
g3
sS'name'
p76917
S'mu'
p76918
sS'required'
p76919
I01
sS'group_name'
p76920
Nsa(dp76921
S'description'
p76922
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76923
sS'cpp_type'
p76924
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76925
sS'default'
p76926
g3
sS'name'
p76927
S'output_properties'
p76928
sS'required'
p76929
I00
sS'group_name'
p76930
S'Outputs'
p76931
sa(dp76932
S'description'
p76933
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76934
sS'cpp_type'
p76935
S'std::vector<OutputName, std::allocator<OutputName> >'
p76936
sS'default'
p76937
S'none'
p76938
sS'name'
p76939
S'outputs'
p76940
sS'required'
p76941
I00
sS'group_name'
p76942
S'Outputs'
p76943
sa(dp76944
S'description'
p76945
S'The seed for the master random number generator\n'
p76946
sS'cpp_type'
p76947
S'unsigned int'
p76948
sS'default'
p76949
S'0'
p76950
sS'name'
p76951
S'seed'
p76952
sS'required'
p76953
I00
sS'group_name'
p76954
S'Advanced'
p76955
sa(dp76956
S'description'
p76957
S'Name of the material property where analytical total strains will be stored\n'
p76958
sS'cpp_type'
p76959
S'MaterialPropertyName'
p76960
sS'default'
p76961
g3
sS'name'
p76962
S'strain_name'
p76963
sS'required'
p76964
I01
sS'group_name'
p76965
Nsa(dp76966
S'description'
p76967
S'Name of the material property where analytical stresses will be stored\n'
p76968
sS'cpp_type'
p76969
S'MaterialPropertyName'
p76970
sS'default'
p76971
g3
sS'name'
p76972
S'stress_name'
p76973
sS'required'
p76974
I01
sS'group_name'
p76975
Nsa(dp76976
S'description'
p76977
g3
sS'cpp_type'
p76978
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76979
sS'default'
p76980
S'InclusionProperties'
p76981
sS'name'
p76982
S'type'
p76983
sS'required'
p76984
I00
sS'group_name'
p76985
Nsa(dp76986
S'description'
p76987
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76988
sS'cpp_type'
p76989
S'bool'
p76990
sS'default'
p76991
S'0'
p76992
sS'name'
p76993
S'use_displaced_mesh'
p76994
sS'required'
p76995
I00
sS'group_name'
p76996
S'Advanced'
p76997
sasS'name'
p76998
S'/Materials/InclusionProperties'
p76999
sa(dp77000
S'description'
p77001
g3
sS'subblocks'
p77002
NsS'parameters'
p77003
(lp77004
(dp77005
S'description'
p77006
S'Strength of the anisotropy (typically < 0.05)\n'
p77007
sS'cpp_type'
p77008
S'double'
p77009
sS'default'
p77010
S'0.04'
p77011
sS'name'
p77012
S'anisotropy_strength'
p77013
sS'required'
p77014
I00
sS'group_name'
p77015
Nsa(dp77016
S'description'
p77017
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77018
sS'cpp_type'
p77019
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77020
sS'default'
p77021
g3
sS'name'
p77022
S'block'
p77023
sS'required'
p77024
I00
sS'group_name'
p77025
Nsa(dp77026
S'description'
p77027
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77028
sS'cpp_type'
p77029
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77030
sS'default'
p77031
g3
sS'name'
p77032
S'boundary'
p77033
sS'required'
p77034
I00
sS'group_name'
p77035
Nsa(dp77036
S'description'
p77037
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77038
sS'cpp_type'
p77039
S'bool'
p77040
sS'default'
p77041
S'1'
p77042
sS'name'
p77043
S'compute'
p77044
sS'required'
p77045
I00
sS'group_name'
p77046
Nsa(dp77047
S'description'
p77048
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77049
sS'cpp_type'
p77050
S'bool'
p77051
sS'default'
p77052
S'0'
p77053
sS'name'
p77054
S'constant_on_elem'
p77055
sS'required'
p77056
I00
sS'group_name'
p77057
S'Advanced'
p77058
sa(dp77059
S'description'
p77060
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77061
sS'cpp_type'
p77062
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77063
sS'default'
p77064
g3
sS'name'
p77065
S'control_tags'
p77066
sS'required'
p77067
I00
sS'group_name'
p77068
S'Advanced'
p77069
sa(dp77070
S'description'
p77071
S'Set the enabled status of the MooseObject.\n'
p77072
sS'cpp_type'
p77073
S'bool'
p77074
sS'default'
p77075
S'1'
p77076
sS'name'
p77077
S'enable'
p77078
sS'required'
p77079
I00
sS'group_name'
p77080
S'Advanced'
p77081
sa(dp77082
S'description'
p77083
S'Average value of the interface parameter epsilon\n'
p77084
sS'cpp_type'
p77085
S'double'
p77086
sS'default'
p77087
S'0.01'
p77088
sS'name'
p77089
S'eps_bar'
p77090
sS'required'
p77091
I00
sS'group_name'
p77092
Nsa(dp77093
S'description'
p77094
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77095
sS'cpp_type'
p77096
S'bool'
p77097
sS'default'
p77098
S'1'
p77099
sS'name'
p77100
S'implicit'
p77101
sS'required'
p77102
I00
sS'group_name'
p77103
S'Advanced'
p77104
sa(dp77105
S'description'
p77106
S'Mode number for anisotropy\n'
p77107
sS'cpp_type'
p77108
S'unsigned int'
p77109
sS'default'
p77110
S'6'
p77111
sS'name'
p77112
S'mode_number'
p77113
sS'required'
p77114
I00
sS'group_name'
p77115
Nsa(dp77116
S'description'
p77117
S'Order parameter defining the solid phase\n'
p77118
sS'cpp_type'
p77119
S'std::vector<VariableName>'
p77120
sS'default'
p77121
g3
sS'name'
p77122
S'op'
p77123
sS'required'
p77124
I01
sS'group_name'
p77125
Nsa(dp77126
S'description'
p77127
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77128
sS'cpp_type'
p77129
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77130
sS'default'
p77131
g3
sS'name'
p77132
S'output_properties'
p77133
sS'required'
p77134
I00
sS'group_name'
p77135
S'Outputs'
p77136
sa(dp77137
S'description'
p77138
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77139
sS'cpp_type'
p77140
S'std::vector<OutputName, std::allocator<OutputName> >'
p77141
sS'default'
p77142
S'none'
p77143
sS'name'
p77144
S'outputs'
p77145
sS'required'
p77146
I00
sS'group_name'
p77147
S'Outputs'
p77148
sa(dp77149
S'description'
p77150
S'Reference angle for defining anistropy in degrees\n'
p77151
sS'cpp_type'
p77152
S'double'
p77153
sS'default'
p77154
S'90'
p77155
sS'name'
p77156
S'reference_angle'
p77157
sS'required'
p77158
I00
sS'group_name'
p77159
Nsa(dp77160
S'description'
p77161
S'The seed for the master random number generator\n'
p77162
sS'cpp_type'
p77163
S'unsigned int'
p77164
sS'default'
p77165
S'0'
p77166
sS'name'
p77167
S'seed'
p77168
sS'required'
p77169
I00
sS'group_name'
p77170
S'Advanced'
p77171
sa(dp77172
S'description'
p77173
g3
sS'cpp_type'
p77174
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77175
sS'default'
p77176
S'InterfaceOrientationMaterial'
p77177
sS'name'
p77178
S'type'
p77179
sS'required'
p77180
I00
sS'group_name'
p77181
Nsa(dp77182
S'description'
p77183
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77184
sS'cpp_type'
p77185
S'bool'
p77186
sS'default'
p77187
S'0'
p77188
sS'name'
p77189
S'use_displaced_mesh'
p77190
sS'required'
p77191
I00
sS'group_name'
p77192
S'Advanced'
p77193
sasS'name'
p77194
S'/Materials/InterfaceOrientationMaterial'
p77195
sa(dp77196
S'description'
p77197
S'This class uses the discrete material in a radial return isotropic plasticity model.  This class is one of the basic radial return constitutive models, yet it can be used in conjunction with other creep and plasticity materials for more complex simulations.\n'
p77198
sS'subblocks'
p77199
NsS'parameters'
p77200
(lp77201
(dp77202
S'description'
p77203
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p77204
sS'cpp_type'
p77205
S'double'
p77206
sS'default'
p77207
S'1e-20'
p77208
sS'name'
p77209
S'absolute_tolerance'
p77210
sS'required'
p77211
I00
sS'group_name'
p77212
Nsa(dp77213
S'description'
p77214
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p77215
sS'cpp_type'
p77216
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77217
sS'default'
p77218
g3
sS'name'
p77219
S'base_name'
p77220
sS'required'
p77221
I00
sS'group_name'
p77222
Nsa(dp77223
S'description'
p77224
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77225
sS'cpp_type'
p77226
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77227
sS'default'
p77228
g3
sS'name'
p77229
S'block'
p77230
sS'required'
p77231
I00
sS'group_name'
p77232
Nsa(dp77233
S'description'
p77234
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77235
sS'cpp_type'
p77236
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77237
sS'default'
p77238
g3
sS'name'
p77239
S'boundary'
p77240
sS'required'
p77241
I00
sS'group_name'
p77242
Nsa(dp77243
S'description'
p77244
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77245
sS'cpp_type'
p77246
S'bool'
p77247
sS'default'
p77248
S'0'
p77249
sS'name'
p77250
S'constant_on_elem'
p77251
sS'required'
p77252
I00
sS'group_name'
p77253
S'Advanced'
p77254
sa(dp77255
S'description'
p77256
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77257
sS'cpp_type'
p77258
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77259
sS'default'
p77260
g3
sS'name'
p77261
S'control_tags'
p77262
sS'required'
p77263
I00
sS'group_name'
p77264
S'Advanced'
p77265
sa(dp77266
S'description'
p77267
S'Set the enabled status of the MooseObject.\n'
p77268
sS'cpp_type'
p77269
S'bool'
p77270
sS'default'
p77271
S'1'
p77272
sS'name'
p77273
S'enable'
p77274
sS'required'
p77275
I00
sS'group_name'
p77276
S'Advanced'
p77277
sa(dp77278
S'description'
p77279
S'Hardening slope\n'
p77280
sS'cpp_type'
p77281
S'double'
p77282
sS'default'
p77283
S'0'
p77284
sS'name'
p77285
S'hardening_constant'
p77286
sS'required'
p77287
I00
sS'group_name'
p77288
Nsa(dp77289
S'description'
p77290
S'True stress as a function of plastic strain\n'
p77291
sS'cpp_type'
p77292
S'FunctionName'
p77293
sS'default'
p77294
g3
sS'name'
p77295
S'hardening_function'
p77296
sS'required'
p77297
I00
sS'group_name'
p77298
Nsa(dp77299
S'description'
p77300
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77301
sS'cpp_type'
p77302
S'bool'
p77303
sS'default'
p77304
S'1'
p77305
sS'name'
p77306
S'implicit'
p77307
sS'required'
p77308
I00
sS'group_name'
p77309
S'Advanced'
p77310
sa(dp77311
S'description'
p77312
S'Maximum number of newton iterations in the radial return material\n'
p77313
sS'cpp_type'
p77314
S'unsigned int'
p77315
sS'default'
p77316
S'30'
p77317
sS'name'
p77318
S'max_iterations'
p77319
sS'required'
p77320
I00
sS'group_name'
p77321
Nsa(dp77322
S'description'
p77323
S'Set true to output newton iteration information from the radial return material\n'
p77324
sS'cpp_type'
p77325
S'bool'
p77326
sS'default'
p77327
S'0'
p77328
sS'name'
p77329
S'output_iteration_info'
p77330
sS'required'
p77331
I00
sS'group_name'
p77332
Nsa(dp77333
S'description'
p77334
S'Set true to output the recompute material iteration information when a step fails\n'
p77335
sS'cpp_type'
p77336
S'bool'
p77337
sS'default'
p77338
S'0'
p77339
sS'name'
p77340
S'output_iteration_info_on_error'
p77341
sS'required'
p77342
I00
sS'group_name'
p77343
Nsa(dp77344
S'description'
p77345
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77346
sS'cpp_type'
p77347
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77348
sS'default'
p77349
g3
sS'name'
p77350
S'output_properties'
p77351
sS'required'
p77352
I00
sS'group_name'
p77353
S'Outputs'
p77354
sa(dp77355
S'description'
p77356
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77357
sS'cpp_type'
p77358
S'std::vector<OutputName, std::allocator<OutputName> >'
p77359
sS'default'
p77360
S'none'
p77361
sS'name'
p77362
S'outputs'
p77363
sS'required'
p77364
I00
sS'group_name'
p77365
S'Outputs'
p77366
sa(dp77367
S'description'
p77368
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p77369
sS'cpp_type'
p77370
S'double'
p77371
sS'default'
p77372
S'1e-08'
p77373
sS'name'
p77374
S'relative_tolerance'
p77375
sS'required'
p77376
I00
sS'group_name'
p77377
Nsa(dp77378
S'description'
p77379
S'The seed for the master random number generator\n'
p77380
sS'cpp_type'
p77381
S'unsigned int'
p77382
sS'default'
p77383
S'0'
p77384
sS'name'
p77385
S'seed'
p77386
sS'required'
p77387
I00
sS'group_name'
p77388
S'Advanced'
p77389
sa(dp77390
S'description'
p77391
S'Coupled Temperature\n'
p77392
sS'cpp_type'
p77393
S'std::vector<VariableName>'
p77394
sS'default'
p77395
S'0'
p77396
sS'name'
p77397
S'temperature'
p77398
sS'required'
p77399
I00
sS'group_name'
p77400
Nsa(dp77401
S'description'
p77402
g3
sS'cpp_type'
p77403
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77404
sS'default'
p77405
S'IsotropicPlasticityStressUpdate'
p77406
sS'name'
p77407
S'type'
p77408
sS'required'
p77409
I00
sS'group_name'
p77410
Nsa(dp77411
S'description'
p77412
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77413
sS'cpp_type'
p77414
S'bool'
p77415
sS'default'
p77416
S'0'
p77417
sS'name'
p77418
S'use_displaced_mesh'
p77419
sS'required'
p77420
I00
sS'group_name'
p77421
S'Advanced'
p77422
sa(dp77423
S'description'
p77424
S'The point at which plastic strain begins accumulating\n'
p77425
sS'cpp_type'
p77426
S'double'
p77427
sS'default'
p77428
S'0'
p77429
sS'name'
p77430
S'yield_stress'
p77431
sS'required'
p77432
I00
sS'group_name'
p77433
Nsa(dp77434
S'description'
p77435
S'Yield stress as a function of temperature\n'
p77436
sS'cpp_type'
p77437
S'FunctionName'
p77438
sS'default'
p77439
g3
sS'name'
p77440
S'yield_stress_function'
p77441
sS'required'
p77442
I00
sS'group_name'
p77443
NsasS'name'
p77444
S'/Materials/IsotropicPlasticityStressUpdate'
p77445
sa(dp77446
S'description'
p77447
S"This class uses the discrete material in a radial return isotropic plasticity power law hardening model, solving for the yield stress as the intersection of the power law relation curve and Hooke's law.  This class can be used in conjunction with other creep and plasticity materials for more complex simulations.\n"
p77448
sS'subblocks'
p77449
NsS'parameters'
p77450
(lp77451
(dp77452
S'description'
p77453
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p77454
sS'cpp_type'
p77455
S'double'
p77456
sS'default'
p77457
S'1e-20'
p77458
sS'name'
p77459
S'absolute_tolerance'
p77460
sS'required'
p77461
I00
sS'group_name'
p77462
Nsa(dp77463
S'description'
p77464
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p77465
sS'cpp_type'
p77466
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77467
sS'default'
p77468
g3
sS'name'
p77469
S'base_name'
p77470
sS'required'
p77471
I00
sS'group_name'
p77472
Nsa(dp77473
S'description'
p77474
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77475
sS'cpp_type'
p77476
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77477
sS'default'
p77478
g3
sS'name'
p77479
S'block'
p77480
sS'required'
p77481
I00
sS'group_name'
p77482
Nsa(dp77483
S'description'
p77484
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77485
sS'cpp_type'
p77486
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77487
sS'default'
p77488
g3
sS'name'
p77489
S'boundary'
p77490
sS'required'
p77491
I00
sS'group_name'
p77492
Nsa(dp77493
S'description'
p77494
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77495
sS'cpp_type'
p77496
S'bool'
p77497
sS'default'
p77498
S'0'
p77499
sS'name'
p77500
S'constant_on_elem'
p77501
sS'required'
p77502
I00
sS'group_name'
p77503
S'Advanced'
p77504
sa(dp77505
S'description'
p77506
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77507
sS'cpp_type'
p77508
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77509
sS'default'
p77510
g3
sS'name'
p77511
S'control_tags'
p77512
sS'required'
p77513
I00
sS'group_name'
p77514
S'Advanced'
p77515
sa(dp77516
S'description'
p77517
S'Set the enabled status of the MooseObject.\n'
p77518
sS'cpp_type'
p77519
S'bool'
p77520
sS'default'
p77521
S'1'
p77522
sS'name'
p77523
S'enable'
p77524
sS'required'
p77525
I00
sS'group_name'
p77526
S'Advanced'
p77527
sa(dp77528
S'description'
p77529
S'True stress as a function of plastic strain\n'
p77530
sS'cpp_type'
p77531
S'FunctionName'
p77532
sS'default'
p77533
g3
sS'name'
p77534
S'hardening_function'
p77535
sS'required'
p77536
I00
sS'group_name'
p77537
Nsa(dp77538
S'description'
p77539
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77540
sS'cpp_type'
p77541
S'bool'
p77542
sS'default'
p77543
S'1'
p77544
sS'name'
p77545
S'implicit'
p77546
sS'required'
p77547
I00
sS'group_name'
p77548
S'Advanced'
p77549
sa(dp77550
S'description'
p77551
S'Maximum number of newton iterations in the radial return material\n'
p77552
sS'cpp_type'
p77553
S'unsigned int'
p77554
sS'default'
p77555
S'30'
p77556
sS'name'
p77557
S'max_iterations'
p77558
sS'required'
p77559
I00
sS'group_name'
p77560
Nsa(dp77561
S'description'
p77562
S'Set true to output newton iteration information from the radial return material\n'
p77563
sS'cpp_type'
p77564
S'bool'
p77565
sS'default'
p77566
S'0'
p77567
sS'name'
p77568
S'output_iteration_info'
p77569
sS'required'
p77570
I00
sS'group_name'
p77571
Nsa(dp77572
S'description'
p77573
S'Set true to output the recompute material iteration information when a step fails\n'
p77574
sS'cpp_type'
p77575
S'bool'
p77576
sS'default'
p77577
S'0'
p77578
sS'name'
p77579
S'output_iteration_info_on_error'
p77580
sS'required'
p77581
I00
sS'group_name'
p77582
Nsa(dp77583
S'description'
p77584
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77585
sS'cpp_type'
p77586
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77587
sS'default'
p77588
g3
sS'name'
p77589
S'output_properties'
p77590
sS'required'
p77591
I00
sS'group_name'
p77592
S'Outputs'
p77593
sa(dp77594
S'description'
p77595
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77596
sS'cpp_type'
p77597
S'std::vector<OutputName, std::allocator<OutputName> >'
p77598
sS'default'
p77599
S'none'
p77600
sS'name'
p77601
S'outputs'
p77602
sS'required'
p77603
I00
sS'group_name'
p77604
S'Outputs'
p77605
sa(dp77606
S'description'
p77607
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p77608
sS'cpp_type'
p77609
S'double'
p77610
sS'default'
p77611
S'1e-08'
p77612
sS'name'
p77613
S'relative_tolerance'
p77614
sS'required'
p77615
I00
sS'group_name'
p77616
Nsa(dp77617
S'description'
p77618
S'The seed for the master random number generator\n'
p77619
sS'cpp_type'
p77620
S'unsigned int'
p77621
sS'default'
p77622
S'0'
p77623
sS'name'
p77624
S'seed'
p77625
sS'required'
p77626
I00
sS'group_name'
p77627
S'Advanced'
p77628
sa(dp77629
S'description'
p77630
S'The strain hardening exponent (n) for power law hardening\n'
p77631
sS'cpp_type'
p77632
S'double'
p77633
sS'default'
p77634
g3
sS'name'
p77635
S'strain_hardening_exponent'
p77636
sS'required'
p77637
I01
sS'group_name'
p77638
Nsa(dp77639
S'description'
p77640
S'The strength coefficient (K) for power law hardening\n'
p77641
sS'cpp_type'
p77642
S'double'
p77643
sS'default'
p77644
g3
sS'name'
p77645
S'strength_coefficient'
p77646
sS'required'
p77647
I01
sS'group_name'
p77648
Nsa(dp77649
S'description'
p77650
S'Coupled Temperature\n'
p77651
sS'cpp_type'
p77652
S'std::vector<VariableName>'
p77653
sS'default'
p77654
S'0'
p77655
sS'name'
p77656
S'temperature'
p77657
sS'required'
p77658
I00
sS'group_name'
p77659
Nsa(dp77660
S'description'
p77661
g3
sS'cpp_type'
p77662
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77663
sS'default'
p77664
S'IsotropicPowerLawHardeningStressUpdate'
p77665
sS'name'
p77666
S'type'
p77667
sS'required'
p77668
I00
sS'group_name'
p77669
Nsa(dp77670
S'description'
p77671
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77672
sS'cpp_type'
p77673
S'bool'
p77674
sS'default'
p77675
S'0'
p77676
sS'name'
p77677
S'use_displaced_mesh'
p77678
sS'required'
p77679
I00
sS'group_name'
p77680
S'Advanced'
p77681
sa(dp77682
S'description'
p77683
S'Yield stress as a function of temperature\n'
p77684
sS'cpp_type'
p77685
S'FunctionName'
p77686
sS'default'
p77687
g3
sS'name'
p77688
S'yield_stress_function'
p77689
sS'required'
p77690
I00
sS'group_name'
p77691
NsasS'name'
p77692
S'/Materials/IsotropicPowerLawHardeningStressUpdate'
p77693
sa(dp77694
S'description'
p77695
S'KKS Solid phase free energy for Xe,Vac in UO2.  Fm(cmg,cmv)\n'
p77696
sS'subblocks'
p77697
NsS'parameters'
p77698
(lp77699
(dp77700
S'description'
p77701
S'Temperature in [K]\n'
p77702
sS'cpp_type'
p77703
S'double'
p77704
sS'default'
p77705
g3
sS'name'
p77706
S'T'
p77707
sS'required'
p77708
I01
sS'group_name'
p77709
Nsa(dp77710
S'description'
p77711
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77712
sS'cpp_type'
p77713
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77714
sS'default'
p77715
g3
sS'name'
p77716
S'block'
p77717
sS'required'
p77718
I00
sS'group_name'
p77719
Nsa(dp77720
S'description'
p77721
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77722
sS'cpp_type'
p77723
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77724
sS'default'
p77725
g3
sS'name'
p77726
S'boundary'
p77727
sS'required'
p77728
I00
sS'group_name'
p77729
Nsa(dp77730
S'description'
p77731
S'Gas concnetration\n'
p77732
sS'cpp_type'
p77733
S'std::vector<VariableName>'
p77734
sS'default'
p77735
g3
sS'name'
p77736
S'cmg'
p77737
sS'required'
p77738
I01
sS'group_name'
p77739
Nsa(dp77740
S'description'
p77741
S'Vacancy concnetration\n'
p77742
sS'cpp_type'
p77743
S'std::vector<VariableName>'
p77744
sS'default'
p77745
g3
sS'name'
p77746
S'cmv'
p77747
sS'required'
p77748
I01
sS'group_name'
p77749
Nsa(dp77750
S'description'
p77751
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77752
sS'cpp_type'
p77753
S'bool'
p77754
sS'default'
p77755
S'1'
p77756
sS'name'
p77757
S'compute'
p77758
sS'required'
p77759
I00
sS'group_name'
p77760
Nsa(dp77761
S'description'
p77762
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77763
sS'cpp_type'
p77764
S'bool'
p77765
sS'default'
p77766
S'0'
p77767
sS'name'
p77768
S'constant_on_elem'
p77769
sS'required'
p77770
I00
sS'group_name'
p77771
S'Advanced'
p77772
sa(dp77773
S'description'
p77774
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77775
sS'cpp_type'
p77776
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77777
sS'default'
p77778
g3
sS'name'
p77779
S'control_tags'
p77780
sS'required'
p77781
I00
sS'group_name'
p77782
S'Advanced'
p77783
sa(dp77784
S'description'
p77785
S'Maximum order of derivatives taken (2 or 3)\n'
p77786
sS'cpp_type'
p77787
S'unsigned int'
p77788
sS'default'
p77789
S'3'
p77790
sS'name'
p77791
S'derivative_order'
p77792
sS'required'
p77793
I00
sS'group_name'
p77794
Nsa(dp77795
S'description'
p77796
S'Set the enabled status of the MooseObject.\n'
p77797
sS'cpp_type'
p77798
S'bool'
p77799
sS'default'
p77800
S'1'
p77801
sS'name'
p77802
S'enable'
p77803
sS'required'
p77804
I00
sS'group_name'
p77805
S'Advanced'
p77806
sa(dp77807
S'description'
p77808
S'Base name of the free energy function (used to name the material properties)\n'
p77809
sS'cpp_type'
p77810
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77811
sS'default'
p77812
S'F'
p77813
sS'name'
p77814
S'f_name'
p77815
sS'required'
p77816
I00
sS'group_name'
p77817
Nsa(dp77818
S'description'
p77819
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77820
sS'cpp_type'
p77821
S'bool'
p77822
sS'default'
p77823
S'1'
p77824
sS'name'
p77825
S'implicit'
p77826
sS'required'
p77827
I00
sS'group_name'
p77828
S'Advanced'
p77829
sa(dp77830
S'description'
p77831
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77832
sS'cpp_type'
p77833
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77834
sS'default'
p77835
g3
sS'name'
p77836
S'output_properties'
p77837
sS'required'
p77838
I00
sS'group_name'
p77839
S'Outputs'
p77840
sa(dp77841
S'description'
p77842
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77843
sS'cpp_type'
p77844
S'std::vector<OutputName, std::allocator<OutputName> >'
p77845
sS'default'
p77846
S'none'
p77847
sS'name'
p77848
S'outputs'
p77849
sS'required'
p77850
I00
sS'group_name'
p77851
S'Outputs'
p77852
sa(dp77853
S'description'
p77854
S'The seed for the master random number generator\n'
p77855
sS'cpp_type'
p77856
S'unsigned int'
p77857
sS'default'
p77858
S'0'
p77859
sS'name'
p77860
S'seed'
p77861
sS'required'
p77862
I00
sS'group_name'
p77863
S'Advanced'
p77864
sa(dp77865
S'description'
p77866
S'Flag to indicate if third derivatives are needed\n'
p77867
sS'cpp_type'
p77868
S'bool'
p77869
sS'default'
p77870
g3
sS'name'
p77871
S'third_derivatives'
p77872
sS'required'
p77873
I00
sS'group_name'
p77874
Nsa(dp77875
S'description'
p77876
g3
sS'cpp_type'
p77877
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77878
sS'default'
p77879
S'KKSXeVacSolidMaterial'
p77880
sS'name'
p77881
S'type'
p77882
sS'required'
p77883
I00
sS'group_name'
p77884
Nsa(dp77885
S'description'
p77886
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77887
sS'cpp_type'
p77888
S'bool'
p77889
sS'default'
p77890
S'0'
p77891
sS'name'
p77892
S'use_displaced_mesh'
p77893
sS'required'
p77894
I00
sS'group_name'
p77895
S'Advanced'
p77896
sasS'name'
p77897
S'/Materials/KKSXeVacSolidMaterial'
p77898
sa(dp77899
S'description'
p77900
g3
sS'subblocks'
p77901
NsS'parameters'
p77902
(lp77903
(dp77904
S'description'
p77905
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p77906
sS'cpp_type'
p77907
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77908
sS'default'
p77909
g3
sS'name'
p77910
S'base_name'
p77911
sS'required'
p77912
I00
sS'group_name'
p77913
Nsa(dp77914
S'description'
p77915
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77916
sS'cpp_type'
p77917
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77918
sS'default'
p77919
g3
sS'name'
p77920
S'block'
p77921
sS'required'
p77922
I00
sS'group_name'
p77923
Nsa(dp77924
S'description'
p77925
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77926
sS'cpp_type'
p77927
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77928
sS'default'
p77929
g3
sS'name'
p77930
S'boundary'
p77931
sS'required'
p77932
I00
sS'group_name'
p77933
Nsa(dp77934
S'description'
p77935
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p77936
sS'cpp_type'
p77937
S'bool'
p77938
sS'default'
p77939
S'1'
p77940
sS'name'
p77941
S'compute'
p77942
sS'required'
p77943
I00
sS'group_name'
p77944
Nsa(dp77945
S'description'
p77946
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p77947
sS'cpp_type'
p77948
S'bool'
p77949
sS'default'
p77950
S'0'
p77951
sS'name'
p77952
S'constant_on_elem'
p77953
sS'required'
p77954
I00
sS'group_name'
p77955
S'Advanced'
p77956
sa(dp77957
S'description'
p77958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77959
sS'cpp_type'
p77960
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77961
sS'default'
p77962
g3
sS'name'
p77963
S'control_tags'
p77964
sS'required'
p77965
I00
sS'group_name'
p77966
S'Advanced'
p77967
sa(dp77968
S'description'
p77969
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p77970
sS'cpp_type'
p77971
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p77972
sS'default'
p77973
g3
sS'name'
p77974
S'displacements'
p77975
sS'required'
p77976
I01
sS'group_name'
p77977
Nsa(dp77978
S'description'
p77979
S'Set the enabled status of the MooseObject.\n'
p77980
sS'cpp_type'
p77981
S'bool'
p77982
sS'default'
p77983
S'1'
p77984
sS'name'
p77985
S'enable'
p77986
sS'required'
p77987
I00
sS'group_name'
p77988
S'Advanced'
p77989
sa(dp77990
S'description'
p77991
S'Determines whether this object is calculated using an implicit or explicit form\n'
p77992
sS'cpp_type'
p77993
S'bool'
p77994
sS'default'
p77995
S'1'
p77996
sS'name'
p77997
S'implicit'
p77998
sS'required'
p77999
I00
sS'group_name'
p78000
S'Advanced'
p78001
sa(dp78002
S'description'
p78003
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78004
sS'cpp_type'
p78005
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78006
sS'default'
p78007
g3
sS'name'
p78008
S'output_properties'
p78009
sS'required'
p78010
I00
sS'group_name'
p78011
S'Outputs'
p78012
sa(dp78013
S'description'
p78014
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78015
sS'cpp_type'
p78016
S'std::vector<OutputName, std::allocator<OutputName> >'
p78017
sS'default'
p78018
S'none'
p78019
sS'name'
p78020
S'outputs'
p78021
sS'required'
p78022
I00
sS'group_name'
p78023
S'Outputs'
p78024
sa(dp78025
S'description'
p78026
S'The seed for the master random number generator\n'
p78027
sS'cpp_type'
p78028
S'unsigned int'
p78029
sS'default'
p78030
S'0'
p78031
sS'name'
p78032
S'seed'
p78033
sS'required'
p78034
I00
sS'group_name'
p78035
S'Advanced'
p78036
sa(dp78037
S'description'
p78038
S'Temperature in Kelvin\n'
p78039
sS'cpp_type'
p78040
S'std::vector<VariableName>'
p78041
sS'default'
p78042
S'273'
p78043
sS'name'
p78044
S'temperature'
p78045
sS'required'
p78046
I00
sS'group_name'
p78047
Nsa(dp78048
S'description'
p78049
S'Reference temperature for thermal expansion in K\n'
p78050
sS'cpp_type'
p78051
S'double'
p78052
sS'default'
p78053
S'273'
p78054
sS'name'
p78055
S'temperature_ref'
p78056
sS'required'
p78057
I00
sS'group_name'
p78058
Nsa(dp78059
S'description'
p78060
S'Thermal expansion coefficient in 1/K\n'
p78061
sS'cpp_type'
p78062
S'double'
p78063
sS'default'
p78064
S'0'
p78065
sS'name'
p78066
S'thermal_expansion_coeff'
p78067
sS'required'
p78068
I00
sS'group_name'
p78069
Nsa(dp78070
S'description'
p78071
g3
sS'cpp_type'
p78072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78073
sS'default'
p78074
S'LinearElasticTruss'
p78075
sS'name'
p78076
S'type'
p78077
sS'required'
p78078
I00
sS'group_name'
p78079
Nsa(dp78080
S'description'
p78081
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78082
sS'cpp_type'
p78083
S'bool'
p78084
sS'default'
p78085
S'0'
p78086
sS'name'
p78087
S'use_displaced_mesh'
p78088
sS'required'
p78089
I00
sS'group_name'
p78090
S'Advanced'
p78091
sa(dp78092
S'description'
p78093
S"Variable containing Young's modulus\n"
p78094
sS'cpp_type'
p78095
S'std::vector<VariableName>'
p78096
sS'default'
p78097
g3
sS'name'
p78098
S'youngs_modulus'
p78099
sS'required'
p78100
I00
sS'group_name'
p78101
NsasS'name'
p78102
S'/Materials/LinearElasticTruss'
p78103
sa(dp78104
S'description'
p78105
S'Phase-field fracture model energy contribution to damage growth-isotropic elasticity and undamaged stress under compressive strain\n'
p78106
sS'subblocks'
p78107
NsS'parameters'
p78108
(lp78109
(dp78110
S'description'
p78111
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p78112
sS'cpp_type'
p78113
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78114
sS'default'
p78115
g3
sS'name'
p78116
S'base_name'
p78117
sS'required'
p78118
I00
sS'group_name'
p78119
Nsa(dp78120
S'description'
p78121
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78122
sS'cpp_type'
p78123
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78124
sS'default'
p78125
g3
sS'name'
p78126
S'block'
p78127
sS'required'
p78128
I00
sS'group_name'
p78129
Nsa(dp78130
S'description'
p78131
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78132
sS'cpp_type'
p78133
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78134
sS'default'
p78135
g3
sS'name'
p78136
S'boundary'
p78137
sS'required'
p78138
I00
sS'group_name'
p78139
Nsa(dp78140
S'description'
p78141
S'Order parameter for damage\n'
p78142
sS'cpp_type'
p78143
S'std::vector<VariableName>'
p78144
sS'default'
p78145
g3
sS'name'
p78146
S'c'
p78147
sS'required'
p78148
I01
sS'group_name'
p78149
Nsa(dp78150
S'description'
p78151
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78152
sS'cpp_type'
p78153
S'bool'
p78154
sS'default'
p78155
S'1'
p78156
sS'name'
p78157
S'compute'
p78158
sS'required'
p78159
I00
sS'group_name'
p78160
Nsa(dp78161
S'description'
p78162
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78163
sS'cpp_type'
p78164
S'bool'
p78165
sS'default'
p78166
S'0'
p78167
sS'name'
p78168
S'constant_on_elem'
p78169
sS'required'
p78170
I00
sS'group_name'
p78171
S'Advanced'
p78172
sa(dp78173
S'description'
p78174
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78175
sS'cpp_type'
p78176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78177
sS'default'
p78178
g3
sS'name'
p78179
S'control_tags'
p78180
sS'required'
p78181
I00
sS'group_name'
p78182
S'Advanced'
p78183
sa(dp78184
S'description'
p78185
S'Set the enabled status of the MooseObject.\n'
p78186
sS'cpp_type'
p78187
S'bool'
p78188
sS'default'
p78189
S'1'
p78190
sS'name'
p78191
S'enable'
p78192
sS'required'
p78193
I00
sS'group_name'
p78194
S'Advanced'
p78195
sa(dp78196
S'description'
p78197
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78198
sS'cpp_type'
p78199
S'bool'
p78200
sS'default'
p78201
S'1'
p78202
sS'name'
p78203
S'implicit'
p78204
sS'required'
p78205
I00
sS'group_name'
p78206
S'Advanced'
p78207
sa(dp78208
S'description'
p78209
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p78210
sS'cpp_type'
p78211
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p78212
sS'default'
p78213
g3
sS'name'
p78214
S'initial_stress'
p78215
sS'required'
p78216
I00
sS'group_name'
p78217
Nsa(dp78218
S'description'
p78219
S'Stiffness of damaged matrix\n'
p78220
sS'cpp_type'
p78221
S'double'
p78222
sS'default'
p78223
S'1e-06'
p78224
sS'name'
p78225
S'kdamage'
p78226
sS'required'
p78227
I00
sS'group_name'
p78228
Nsa(dp78229
S'description'
p78230
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78231
sS'cpp_type'
p78232
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78233
sS'default'
p78234
g3
sS'name'
p78235
S'output_properties'
p78236
sS'required'
p78237
I00
sS'group_name'
p78238
S'Outputs'
p78239
sa(dp78240
S'description'
p78241
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78242
sS'cpp_type'
p78243
S'std::vector<OutputName, std::allocator<OutputName> >'
p78244
sS'default'
p78245
S'none'
p78246
sS'name'
p78247
S'outputs'
p78248
sS'required'
p78249
I00
sS'group_name'
p78250
S'Outputs'
p78251
sa(dp78252
S'description'
p78253
S'The seed for the master random number generator\n'
p78254
sS'cpp_type'
p78255
S'unsigned int'
p78256
sS'default'
p78257
S'0'
p78258
sS'name'
p78259
S'seed'
p78260
sS'required'
p78261
I00
sS'group_name'
p78262
S'Advanced'
p78263
sa(dp78264
S'description'
p78265
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p78266
sS'cpp_type'
p78267
S'bool'
p78268
sS'default'
p78269
S'0'
p78270
sS'name'
p78271
S'store_stress_old'
p78272
sS'required'
p78273
I00
sS'group_name'
p78274
Nsa(dp78275
S'description'
p78276
g3
sS'cpp_type'
p78277
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78278
sS'default'
p78279
S'LinearIsoElasticPFDamage'
p78280
sS'name'
p78281
S'type'
p78282
sS'required'
p78283
I00
sS'group_name'
p78284
NsasS'name'
p78285
S'/Materials/LinearIsoElasticPFDamage'
p78286
sa(dp78287
S'description'
p78288
S'Material that implements the math free energy using the expression builder and automatric differentiation\n'
p78289
sS'subblocks'
p78290
NsS'parameters'
p78291
(lp78292
(dp78293
S'description'
p78294
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78295
sS'cpp_type'
p78296
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78297
sS'default'
p78298
g3
sS'name'
p78299
S'block'
p78300
sS'required'
p78301
I00
sS'group_name'
p78302
Nsa(dp78303
S'description'
p78304
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78305
sS'cpp_type'
p78306
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78307
sS'default'
p78308
g3
sS'name'
p78309
S'boundary'
p78310
sS'required'
p78311
I00
sS'group_name'
p78312
Nsa(dp78313
S'description'
p78314
S'Concentration variable\n'
p78315
sS'cpp_type'
p78316
S'std::vector<VariableName>'
p78317
sS'default'
p78318
g3
sS'name'
p78319
S'c'
p78320
sS'required'
p78321
I01
sS'group_name'
p78322
Nsa(dp78323
S'description'
p78324
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78325
sS'cpp_type'
p78326
S'bool'
p78327
sS'default'
p78328
S'1'
p78329
sS'name'
p78330
S'compute'
p78331
sS'required'
p78332
I00
sS'group_name'
p78333
Nsa(dp78334
S'description'
p78335
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78336
sS'cpp_type'
p78337
S'bool'
p78338
sS'default'
p78339
S'0'
p78340
sS'name'
p78341
S'constant_on_elem'
p78342
sS'required'
p78343
I00
sS'group_name'
p78344
S'Advanced'
p78345
sa(dp78346
S'description'
p78347
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78348
sS'cpp_type'
p78349
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78350
sS'default'
p78351
g3
sS'name'
p78352
S'control_tags'
p78353
sS'required'
p78354
I00
sS'group_name'
p78355
S'Advanced'
p78356
sa(dp78357
S'description'
p78358
S'Maximum order of derivatives taken\n'
p78359
sS'cpp_type'
p78360
S'unsigned int'
p78361
sS'default'
p78362
S'3'
p78363
sS'name'
p78364
S'derivative_order'
p78365
sS'required'
p78366
I00
sS'group_name'
p78367
Nsa(dp78368
S'description'
p78369
S'Disable the function parser algebraic optimizer\n'
p78370
sS'cpp_type'
p78371
S'bool'
p78372
sS'default'
p78373
S'0'
p78374
sS'name'
p78375
S'disable_fpoptimizer'
p78376
sS'required'
p78377
I00
sS'group_name'
p78378
S'Advanced'
p78379
sa(dp78380
S'description'
p78381
S'Set the enabled status of the MooseObject.\n'
p78382
sS'cpp_type'
p78383
S'bool'
p78384
sS'default'
p78385
S'1'
p78386
sS'name'
p78387
S'enable'
p78388
sS'required'
p78389
I00
sS'group_name'
p78390
S'Advanced'
p78391
sa(dp78392
S'description'
p78393
S'Enable cacheing of function derivatives for faster startup time\n'
p78394
sS'cpp_type'
p78395
S'bool'
p78396
sS'default'
p78397
S'1'
p78398
sS'name'
p78399
S'enable_ad_cache'
p78400
sS'required'
p78401
I00
sS'group_name'
p78402
S'Advanced'
p78403
sa(dp78404
S'description'
p78405
S'Enable automatic immediate optimization of derivatives\n'
p78406
sS'cpp_type'
p78407
S'bool'
p78408
sS'default'
p78409
S'1'
p78410
sS'name'
p78411
S'enable_auto_optimize'
p78412
sS'required'
p78413
I00
sS'group_name'
p78414
S'Advanced'
p78415
sa(dp78416
S'description'
p78417
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p78418
sS'cpp_type'
p78419
S'bool'
p78420
sS'default'
p78421
S'1'
p78422
sS'name'
p78423
S'enable_jit'
p78424
sS'required'
p78425
I00
sS'group_name'
p78426
S'Advanced'
p78427
sa(dp78428
S'description'
p78429
S'Base name of the free energy function (used to name the material properties)\n'
p78430
sS'cpp_type'
p78431
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78432
sS'default'
p78433
S'F'
p78434
sS'name'
p78435
S'f_name'
p78436
sS'required'
p78437
I00
sS'group_name'
p78438
Nsa(dp78439
S'description'
p78440
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p78441
sS'cpp_type'
p78442
S'bool'
p78443
sS'default'
p78444
S'0'
p78445
sS'name'
p78446
S'fail_on_evalerror'
p78447
sS'required'
p78448
I00
sS'group_name'
p78449
S'Advanced'
p78450
sa(dp78451
S'description'
p78452
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78453
sS'cpp_type'
p78454
S'bool'
p78455
sS'default'
p78456
S'1'
p78457
sS'name'
p78458
S'implicit'
p78459
sS'required'
p78460
I00
sS'group_name'
p78461
S'Advanced'
p78462
sa(dp78463
S'description'
p78464
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78465
sS'cpp_type'
p78466
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78467
sS'default'
p78468
g3
sS'name'
p78469
S'output_properties'
p78470
sS'required'
p78471
I00
sS'group_name'
p78472
S'Outputs'
p78473
sa(dp78474
S'description'
p78475
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78476
sS'cpp_type'
p78477
S'std::vector<OutputName, std::allocator<OutputName> >'
p78478
sS'default'
p78479
S'none'
p78480
sS'name'
p78481
S'outputs'
p78482
sS'required'
p78483
I00
sS'group_name'
p78484
S'Outputs'
p78485
sa(dp78486
S'description'
p78487
S'The seed for the master random number generator\n'
p78488
sS'cpp_type'
p78489
S'unsigned int'
p78490
sS'default'
p78491
S'0'
p78492
sS'name'
p78493
S'seed'
p78494
sS'required'
p78495
I00
sS'group_name'
p78496
S'Advanced'
p78497
sa(dp78498
S'description'
p78499
S'Flag to indicate if third derivatives are needed\n'
p78500
sS'cpp_type'
p78501
S'bool'
p78502
sS'default'
p78503
g3
sS'name'
p78504
S'third_derivatives'
p78505
sS'required'
p78506
I00
sS'group_name'
p78507
Nsa(dp78508
S'description'
p78509
g3
sS'cpp_type'
p78510
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78511
sS'default'
p78512
S'MathEBFreeEnergy'
p78513
sS'name'
p78514
S'type'
p78515
sS'required'
p78516
I00
sS'group_name'
p78517
Nsa(dp78518
S'description'
p78519
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78520
sS'cpp_type'
p78521
S'bool'
p78522
sS'default'
p78523
S'0'
p78524
sS'name'
p78525
S'use_displaced_mesh'
p78526
sS'required'
p78527
I00
sS'group_name'
p78528
S'Advanced'
p78529
sasS'name'
p78530
S'/Materials/MathEBFreeEnergy'
p78531
sa(dp78532
S'description'
p78533
S'Material that implements the math free energy and its derivatives: \\nF = 1/4(1 + c)^2*(1 - c)^2\n'
p78534
sS'subblocks'
p78535
NsS'parameters'
p78536
(lp78537
(dp78538
S'description'
p78539
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78540
sS'cpp_type'
p78541
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78542
sS'default'
p78543
g3
sS'name'
p78544
S'block'
p78545
sS'required'
p78546
I00
sS'group_name'
p78547
Nsa(dp78548
S'description'
p78549
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78550
sS'cpp_type'
p78551
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78552
sS'default'
p78553
g3
sS'name'
p78554
S'boundary'
p78555
sS'required'
p78556
I00
sS'group_name'
p78557
Nsa(dp78558
S'description'
p78559
S'Concentration variable\n'
p78560
sS'cpp_type'
p78561
S'std::vector<VariableName>'
p78562
sS'default'
p78563
g3
sS'name'
p78564
S'c'
p78565
sS'required'
p78566
I01
sS'group_name'
p78567
Nsa(dp78568
S'description'
p78569
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78570
sS'cpp_type'
p78571
S'bool'
p78572
sS'default'
p78573
S'1'
p78574
sS'name'
p78575
S'compute'
p78576
sS'required'
p78577
I00
sS'group_name'
p78578
Nsa(dp78579
S'description'
p78580
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78581
sS'cpp_type'
p78582
S'bool'
p78583
sS'default'
p78584
S'0'
p78585
sS'name'
p78586
S'constant_on_elem'
p78587
sS'required'
p78588
I00
sS'group_name'
p78589
S'Advanced'
p78590
sa(dp78591
S'description'
p78592
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78593
sS'cpp_type'
p78594
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78595
sS'default'
p78596
g3
sS'name'
p78597
S'control_tags'
p78598
sS'required'
p78599
I00
sS'group_name'
p78600
S'Advanced'
p78601
sa(dp78602
S'description'
p78603
S'Maximum order of derivatives taken (2 or 3)\n'
p78604
sS'cpp_type'
p78605
S'unsigned int'
p78606
sS'default'
p78607
S'3'
p78608
sS'name'
p78609
S'derivative_order'
p78610
sS'required'
p78611
I00
sS'group_name'
p78612
Nsa(dp78613
S'description'
p78614
S'Set the enabled status of the MooseObject.\n'
p78615
sS'cpp_type'
p78616
S'bool'
p78617
sS'default'
p78618
S'1'
p78619
sS'name'
p78620
S'enable'
p78621
sS'required'
p78622
I00
sS'group_name'
p78623
S'Advanced'
p78624
sa(dp78625
S'description'
p78626
S'Base name of the free energy function (used to name the material properties)\n'
p78627
sS'cpp_type'
p78628
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78629
sS'default'
p78630
S'F'
p78631
sS'name'
p78632
S'f_name'
p78633
sS'required'
p78634
I00
sS'group_name'
p78635
Nsa(dp78636
S'description'
p78637
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78638
sS'cpp_type'
p78639
S'bool'
p78640
sS'default'
p78641
S'1'
p78642
sS'name'
p78643
S'implicit'
p78644
sS'required'
p78645
I00
sS'group_name'
p78646
S'Advanced'
p78647
sa(dp78648
S'description'
p78649
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78650
sS'cpp_type'
p78651
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78652
sS'default'
p78653
g3
sS'name'
p78654
S'output_properties'
p78655
sS'required'
p78656
I00
sS'group_name'
p78657
S'Outputs'
p78658
sa(dp78659
S'description'
p78660
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78661
sS'cpp_type'
p78662
S'std::vector<OutputName, std::allocator<OutputName> >'
p78663
sS'default'
p78664
S'none'
p78665
sS'name'
p78666
S'outputs'
p78667
sS'required'
p78668
I00
sS'group_name'
p78669
S'Outputs'
p78670
sa(dp78671
S'description'
p78672
S'The seed for the master random number generator\n'
p78673
sS'cpp_type'
p78674
S'unsigned int'
p78675
sS'default'
p78676
S'0'
p78677
sS'name'
p78678
S'seed'
p78679
sS'required'
p78680
I00
sS'group_name'
p78681
S'Advanced'
p78682
sa(dp78683
S'description'
p78684
S'Flag to indicate if third derivatives are needed\n'
p78685
sS'cpp_type'
p78686
S'bool'
p78687
sS'default'
p78688
g3
sS'name'
p78689
S'third_derivatives'
p78690
sS'required'
p78691
I00
sS'group_name'
p78692
Nsa(dp78693
S'description'
p78694
g3
sS'cpp_type'
p78695
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78696
sS'default'
p78697
S'MathFreeEnergy'
p78698
sS'name'
p78699
S'type'
p78700
sS'required'
p78701
I00
sS'group_name'
p78702
Nsa(dp78703
S'description'
p78704
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78705
sS'cpp_type'
p78706
S'bool'
p78707
sS'default'
p78708
S'0'
p78709
sS'name'
p78710
S'use_displaced_mesh'
p78711
sS'required'
p78712
I00
sS'group_name'
p78713
S'Advanced'
p78714
sasS'name'
p78715
S'/Materials/MathFreeEnergy'
p78716
sa(dp78717
S'description'
p78718
S'Double well phase transformation barrier free energy contribution.\n'
p78719
sS'subblocks'
p78720
NsS'parameters'
p78721
(lp78722
(dp78723
S'description'
p78724
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78725
sS'cpp_type'
p78726
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78727
sS'default'
p78728
g3
sS'name'
p78729
S'block'
p78730
sS'required'
p78731
I00
sS'group_name'
p78732
Nsa(dp78733
S'description'
p78734
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78735
sS'cpp_type'
p78736
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78737
sS'default'
p78738
g3
sS'name'
p78739
S'boundary'
p78740
sS'required'
p78741
I00
sS'group_name'
p78742
Nsa(dp78743
S'description'
p78744
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78745
sS'cpp_type'
p78746
S'bool'
p78747
sS'default'
p78748
S'1'
p78749
sS'name'
p78750
S'compute'
p78751
sS'required'
p78752
I00
sS'group_name'
p78753
Nsa(dp78754
S'description'
p78755
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78756
sS'cpp_type'
p78757
S'bool'
p78758
sS'default'
p78759
S'0'
p78760
sS'name'
p78761
S'constant_on_elem'
p78762
sS'required'
p78763
I00
sS'group_name'
p78764
S'Advanced'
p78765
sa(dp78766
S'description'
p78767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78768
sS'cpp_type'
p78769
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78770
sS'default'
p78771
g3
sS'name'
p78772
S'control_tags'
p78773
sS'required'
p78774
I00
sS'group_name'
p78775
S'Advanced'
p78776
sa(dp78777
S'description'
p78778
S'Set the enabled status of the MooseObject.\n'
p78779
sS'cpp_type'
p78780
S'bool'
p78781
sS'default'
p78782
S'1'
p78783
sS'name'
p78784
S'enable'
p78785
sS'required'
p78786
I00
sS'group_name'
p78787
S'Advanced'
p78788
sa(dp78789
S'description'
p78790
S'eta_i order parameters, one for each h\n'
p78791
sS'cpp_type'
p78792
S'std::vector<VariableName>'
p78793
sS'default'
p78794
g3
sS'name'
p78795
S'etas'
p78796
sS'required'
p78797
I01
sS'group_name'
p78798
Nsa(dp78799
S'description'
p78800
S'actual name for g(eta_i)\n'
p78801
sS'cpp_type'
p78802
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78803
sS'default'
p78804
S'g'
p78805
sS'name'
p78806
S'function_name'
p78807
sS'required'
p78808
I00
sS'group_name'
p78809
Nsa(dp78810
S'name'
p78811
S'g_order'
p78812
sS'cpp_type'
p78813
S'MooseEnum'
p78814
sS'default'
p78815
S'SIMPLE'
p78816
sS'description'
p78817
S'Polynomial order of the switching function h(eta)\n'
p78818
sS'required'
p78819
I00
sS'options'
p78820
S'SIMPLE'
p78821
sS'group_name'
p78822
Nsa(dp78823
S'description'
p78824
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78825
sS'cpp_type'
p78826
S'bool'
p78827
sS'default'
p78828
S'1'
p78829
sS'name'
p78830
S'implicit'
p78831
sS'required'
p78832
I00
sS'group_name'
p78833
S'Advanced'
p78834
sa(dp78835
S'description'
p78836
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78837
sS'cpp_type'
p78838
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78839
sS'default'
p78840
g3
sS'name'
p78841
S'output_properties'
p78842
sS'required'
p78843
I00
sS'group_name'
p78844
S'Outputs'
p78845
sa(dp78846
S'description'
p78847
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78848
sS'cpp_type'
p78849
S'std::vector<OutputName, std::allocator<OutputName> >'
p78850
sS'default'
p78851
S'none'
p78852
sS'name'
p78853
S'outputs'
p78854
sS'required'
p78855
I00
sS'group_name'
p78856
S'Outputs'
p78857
sa(dp78858
S'description'
p78859
S'The seed for the master random number generator\n'
p78860
sS'cpp_type'
p78861
S'unsigned int'
p78862
sS'default'
p78863
S'0'
p78864
sS'name'
p78865
S'seed'
p78866
sS'required'
p78867
I00
sS'group_name'
p78868
S'Advanced'
p78869
sa(dp78870
S'description'
p78871
g3
sS'cpp_type'
p78872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78873
sS'default'
p78874
S'MultiBarrierFunctionMaterial'
p78875
sS'name'
p78876
S'type'
p78877
sS'required'
p78878
I00
sS'group_name'
p78879
Nsa(dp78880
S'description'
p78881
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78882
sS'cpp_type'
p78883
S'bool'
p78884
sS'default'
p78885
S'0'
p78886
sS'name'
p78887
S'use_displaced_mesh'
p78888
sS'required'
p78889
I00
sS'group_name'
p78890
S'Advanced'
p78891
sa(dp78892
S'description'
p78893
S'Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n'
p78894
sS'cpp_type'
p78895
S'bool'
p78896
sS'default'
p78897
S'0'
p78898
sS'name'
p78899
S'well_only'
p78900
sS'required'
p78901
I00
sS'group_name'
p78902
NsasS'name'
p78903
S'/Materials/MultiBarrierFunctionMaterial'
p78904
sa(dp78905
S'description'
p78906
S'Compute a global stress form multiple phase stresses\n'
p78907
sS'subblocks'
p78908
NsS'parameters'
p78909
(lp78910
(dp78911
S'description'
p78912
S'Base name for the computed global stress (optional)\n'
p78913
sS'cpp_type'
p78914
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78915
sS'default'
p78916
g3
sS'name'
p78917
S'base_name'
p78918
sS'required'
p78919
I00
sS'group_name'
p78920
Nsa(dp78921
S'description'
p78922
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78923
sS'cpp_type'
p78924
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78925
sS'default'
p78926
g3
sS'name'
p78927
S'block'
p78928
sS'required'
p78929
I00
sS'group_name'
p78930
Nsa(dp78931
S'description'
p78932
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78933
sS'cpp_type'
p78934
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78935
sS'default'
p78936
g3
sS'name'
p78937
S'boundary'
p78938
sS'required'
p78939
I00
sS'group_name'
p78940
Nsa(dp78941
S'description'
p78942
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p78943
sS'cpp_type'
p78944
S'bool'
p78945
sS'default'
p78946
S'1'
p78947
sS'name'
p78948
S'compute'
p78949
sS'required'
p78950
I00
sS'group_name'
p78951
Nsa(dp78952
S'description'
p78953
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p78954
sS'cpp_type'
p78955
S'bool'
p78956
sS'default'
p78957
S'0'
p78958
sS'name'
p78959
S'constant_on_elem'
p78960
sS'required'
p78961
I00
sS'group_name'
p78962
S'Advanced'
p78963
sa(dp78964
S'description'
p78965
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78966
sS'cpp_type'
p78967
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78968
sS'default'
p78969
g3
sS'name'
p78970
S'control_tags'
p78971
sS'required'
p78972
I00
sS'group_name'
p78973
S'Advanced'
p78974
sa(dp78975
S'description'
p78976
S'Set the enabled status of the MooseObject.\n'
p78977
sS'cpp_type'
p78978
S'bool'
p78979
sS'default'
p78980
S'1'
p78981
sS'name'
p78982
S'enable'
p78983
sS'required'
p78984
I00
sS'group_name'
p78985
S'Advanced'
p78986
sa(dp78987
S'description'
p78988
S'Switching Function Materials that provide h(eta_i)\n'
p78989
sS'cpp_type'
p78990
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p78991
sS'default'
p78992
g3
sS'name'
p78993
S'h'
p78994
sS'required'
p78995
I00
sS'group_name'
p78996
Nsa(dp78997
S'description'
p78998
S'Determines whether this object is calculated using an implicit or explicit form\n'
p78999
sS'cpp_type'
p79000
S'bool'
p79001
sS'default'
p79002
S'1'
p79003
sS'name'
p79004
S'implicit'
p79005
sS'required'
p79006
I00
sS'group_name'
p79007
S'Advanced'
p79008
sa(dp79009
S'description'
p79010
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79011
sS'cpp_type'
p79012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79013
sS'default'
p79014
g3
sS'name'
p79015
S'output_properties'
p79016
sS'required'
p79017
I00
sS'group_name'
p79018
S'Outputs'
p79019
sa(dp79020
S'description'
p79021
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79022
sS'cpp_type'
p79023
S'std::vector<OutputName, std::allocator<OutputName> >'
p79024
sS'default'
p79025
S'none'
p79026
sS'name'
p79027
S'outputs'
p79028
sS'required'
p79029
I00
sS'group_name'
p79030
S'Outputs'
p79031
sa(dp79032
S'description'
p79033
S'Base names for the Phase strains\n'
p79034
sS'cpp_type'
p79035
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79036
sS'default'
p79037
g3
sS'name'
p79038
S'phase_base'
p79039
sS'required'
p79040
I01
sS'group_name'
p79041
Nsa(dp79042
S'description'
p79043
S'The seed for the master random number generator\n'
p79044
sS'cpp_type'
p79045
S'unsigned int'
p79046
sS'default'
p79047
S'0'
p79048
sS'name'
p79049
S'seed'
p79050
sS'required'
p79051
I00
sS'group_name'
p79052
S'Advanced'
p79053
sa(dp79054
S'description'
p79055
g3
sS'cpp_type'
p79056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79057
sS'default'
p79058
S'MultiPhaseStressMaterial'
p79059
sS'name'
p79060
S'type'
p79061
sS'required'
p79062
I00
sS'group_name'
p79063
Nsa(dp79064
S'description'
p79065
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79066
sS'cpp_type'
p79067
S'bool'
p79068
sS'default'
p79069
S'0'
p79070
sS'name'
p79071
S'use_displaced_mesh'
p79072
sS'required'
p79073
I00
sS'group_name'
p79074
S'Advanced'
p79075
sasS'name'
p79076
S'/Materials/MultiPhaseStressMaterial'
p79077
sa(dp79078
S'description'
p79079
g3
sS'subblocks'
p79080
NsS'parameters'
p79081
(lp79082
(dp79083
S'description'
p79084
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79085
sS'cpp_type'
p79086
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79087
sS'default'
p79088
g3
sS'name'
p79089
S'block'
p79090
sS'required'
p79091
I00
sS'group_name'
p79092
Nsa(dp79093
S'description'
p79094
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79095
sS'cpp_type'
p79096
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79097
sS'default'
p79098
g3
sS'name'
p79099
S'boundary'
p79100
sS'required'
p79101
I00
sS'group_name'
p79102
Nsa(dp79103
S'description'
p79104
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79105
sS'cpp_type'
p79106
S'bool'
p79107
sS'default'
p79108
S'1'
p79109
sS'name'
p79110
S'compute'
p79111
sS'required'
p79112
I00
sS'group_name'
p79113
Nsa(dp79114
S'description'
p79115
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79116
sS'cpp_type'
p79117
S'bool'
p79118
sS'default'
p79119
S'0'
p79120
sS'name'
p79121
S'constant_on_elem'
p79122
sS'required'
p79123
I00
sS'group_name'
p79124
S'Advanced'
p79125
sa(dp79126
S'description'
p79127
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79128
sS'cpp_type'
p79129
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79130
sS'default'
p79131
g3
sS'name'
p79132
S'control_tags'
p79133
sS'required'
p79134
I00
sS'group_name'
p79135
S'Advanced'
p79136
sa(dp79137
S'description'
p79138
S'Set the enabled status of the MooseObject.\n'
p79139
sS'cpp_type'
p79140
S'bool'
p79141
sS'default'
p79142
S'1'
p79143
sS'name'
p79144
S'enable'
p79145
sS'required'
p79146
I00
sS'group_name'
p79147
S'Advanced'
p79148
sa(dp79149
S'description'
p79150
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79151
sS'cpp_type'
p79152
S'bool'
p79153
sS'default'
p79154
S'1'
p79155
sS'name'
p79156
S'implicit'
p79157
sS'required'
p79158
I00
sS'group_name'
p79159
S'Advanced'
p79160
sa(dp79161
S'description'
p79162
S'specifies the number of complex L variables will be solved for\n'
p79163
sS'cpp_type'
p79164
S'unsigned int'
p79165
sS'default'
p79166
g3
sS'name'
p79167
S'num_L'
p79168
sS'required'
p79169
I01
sS'group_name'
p79170
Nsa(dp79171
S'description'
p79172
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79173
sS'cpp_type'
p79174
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79175
sS'default'
p79176
g3
sS'name'
p79177
S'output_properties'
p79178
sS'required'
p79179
I00
sS'group_name'
p79180
S'Outputs'
p79181
sa(dp79182
S'description'
p79183
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79184
sS'cpp_type'
p79185
S'std::vector<OutputName, std::allocator<OutputName> >'
p79186
sS'default'
p79187
S'none'
p79188
sS'name'
p79189
S'outputs'
p79190
sS'required'
p79191
I00
sS'group_name'
p79192
S'Outputs'
p79193
sa(dp79194
S'description'
p79195
S'The seed for the master random number generator\n'
p79196
sS'cpp_type'
p79197
S'unsigned int'
p79198
sS'default'
p79199
S'0'
p79200
sS'name'
p79201
S'seed'
p79202
sS'required'
p79203
I00
sS'group_name'
p79204
S'Advanced'
p79205
sa(dp79206
S'description'
p79207
g3
sS'cpp_type'
p79208
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79209
sS'default'
p79210
S'PFCRFFMaterial'
p79211
sS'name'
p79212
S'type'
p79213
sS'required'
p79214
I00
sS'group_name'
p79215
Nsa(dp79216
S'description'
p79217
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79218
sS'cpp_type'
p79219
S'bool'
p79220
sS'default'
p79221
S'0'
p79222
sS'name'
p79223
S'use_displaced_mesh'
p79224
sS'required'
p79225
I00
sS'group_name'
p79226
S'Advanced'
p79227
sasS'name'
p79228
S'/Materials/PFCRFFMaterial'
p79229
sa(dp79230
S'description'
p79231
g3
sS'subblocks'
p79232
NsS'parameters'
p79233
(lp79234
(dp79235
S'description'
p79236
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79237
sS'cpp_type'
p79238
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79239
sS'default'
p79240
g3
sS'name'
p79241
S'block'
p79242
sS'required'
p79243
I00
sS'group_name'
p79244
Nsa(dp79245
S'description'
p79246
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79247
sS'cpp_type'
p79248
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79249
sS'default'
p79250
g3
sS'name'
p79251
S'boundary'
p79252
sS'required'
p79253
I00
sS'group_name'
p79254
Nsa(dp79255
S'description'
p79256
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79257
sS'cpp_type'
p79258
S'bool'
p79259
sS'default'
p79260
S'1'
p79261
sS'name'
p79262
S'compute'
p79263
sS'required'
p79264
I00
sS'group_name'
p79265
Nsa(dp79266
S'description'
p79267
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79268
sS'cpp_type'
p79269
S'bool'
p79270
sS'default'
p79271
S'0'
p79272
sS'name'
p79273
S'constant_on_elem'
p79274
sS'required'
p79275
I00
sS'group_name'
p79276
S'Advanced'
p79277
sa(dp79278
S'description'
p79279
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79280
sS'cpp_type'
p79281
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79282
sS'default'
p79283
g3
sS'name'
p79284
S'control_tags'
p79285
sS'required'
p79286
I00
sS'group_name'
p79287
S'Advanced'
p79288
sa(dp79289
S'description'
p79290
S'Set the enabled status of the MooseObject.\n'
p79291
sS'cpp_type'
p79292
S'bool'
p79293
sS'default'
p79294
S'1'
p79295
sS'name'
p79296
S'enable'
p79297
sS'required'
p79298
I00
sS'group_name'
p79299
S'Advanced'
p79300
sa(dp79301
S'description'
p79302
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79303
sS'cpp_type'
p79304
S'bool'
p79305
sS'default'
p79306
S'1'
p79307
sS'name'
p79308
S'implicit'
p79309
sS'required'
p79310
I00
sS'group_name'
p79311
S'Advanced'
p79312
sa(dp79313
S'name'
p79314
S'order'
p79315
sS'cpp_type'
p79316
S'MooseEnum'
p79317
sS'default'
p79318
g3
sS'description'
p79319
S'This is the order of the polynomial used for correlation function\n'
p79320
sS'required'
p79321
I01
sS'options'
p79322
S'FOURTH EIGHTH'
p79323
sS'group_name'
p79324
Nsa(dp79325
S'description'
p79326
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79327
sS'cpp_type'
p79328
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79329
sS'default'
p79330
g3
sS'name'
p79331
S'output_properties'
p79332
sS'required'
p79333
I00
sS'group_name'
p79334
S'Outputs'
p79335
sa(dp79336
S'description'
p79337
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79338
sS'cpp_type'
p79339
S'std::vector<OutputName, std::allocator<OutputName> >'
p79340
sS'default'
p79341
S'none'
p79342
sS'name'
p79343
S'outputs'
p79344
sS'required'
p79345
I00
sS'group_name'
p79346
S'Outputs'
p79347
sa(dp79348
S'description'
p79349
S'The seed for the master random number generator\n'
p79350
sS'cpp_type'
p79351
S'unsigned int'
p79352
sS'default'
p79353
S'0'
p79354
sS'name'
p79355
S'seed'
p79356
sS'required'
p79357
I00
sS'group_name'
p79358
S'Advanced'
p79359
sa(dp79360
S'description'
p79361
g3
sS'cpp_type'
p79362
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79363
sS'default'
p79364
S'PFCTradMaterial'
p79365
sS'name'
p79366
S'type'
p79367
sS'required'
p79368
I00
sS'group_name'
p79369
Nsa(dp79370
S'description'
p79371
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79372
sS'cpp_type'
p79373
S'bool'
p79374
sS'default'
p79375
S'0'
p79376
sS'name'
p79377
S'use_displaced_mesh'
p79378
sS'required'
p79379
I00
sS'group_name'
p79380
S'Advanced'
p79381
sasS'name'
p79382
S'/Materials/PFCTradMaterial'
p79383
sa(dp79384
S'description'
p79385
S'Material properties used in phase-field fracture damage evolution kernel\n'
p79386
sS'subblocks'
p79387
NsS'parameters'
p79388
(lp79389
(dp79390
S'description'
p79391
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79392
sS'cpp_type'
p79393
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79394
sS'default'
p79395
g3
sS'name'
p79396
S'block'
p79397
sS'required'
p79398
I00
sS'group_name'
p79399
Nsa(dp79400
S'description'
p79401
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79402
sS'cpp_type'
p79403
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79404
sS'default'
p79405
g3
sS'name'
p79406
S'boundary'
p79407
sS'required'
p79408
I00
sS'group_name'
p79409
Nsa(dp79410
S'description'
p79411
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79412
sS'cpp_type'
p79413
S'bool'
p79414
sS'default'
p79415
S'1'
p79416
sS'name'
p79417
S'compute'
p79418
sS'required'
p79419
I00
sS'group_name'
p79420
Nsa(dp79421
S'description'
p79422
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79423
sS'cpp_type'
p79424
S'bool'
p79425
sS'default'
p79426
S'0'
p79427
sS'name'
p79428
S'constant_on_elem'
p79429
sS'required'
p79430
I00
sS'group_name'
p79431
S'Advanced'
p79432
sa(dp79433
S'description'
p79434
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79435
sS'cpp_type'
p79436
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79437
sS'default'
p79438
g3
sS'name'
p79439
S'control_tags'
p79440
sS'required'
p79441
I00
sS'group_name'
p79442
S'Advanced'
p79443
sa(dp79444
S'description'
p79445
S'Set the enabled status of the MooseObject.\n'
p79446
sS'cpp_type'
p79447
S'bool'
p79448
sS'default'
p79449
S'1'
p79450
sS'name'
p79451
S'enable'
p79452
sS'required'
p79453
I00
sS'group_name'
p79454
S'Advanced'
p79455
sa(dp79456
S'description'
p79457
S'Function describing energy release rate type parameter distribution\n'
p79458
sS'cpp_type'
p79459
S'FunctionName'
p79460
sS'default'
p79461
g3
sS'name'
p79462
S'function'
p79463
sS'required'
p79464
I00
sS'group_name'
p79465
Nsa(dp79466
S'description'
p79467
S'Energy release rate type parameter\n'
p79468
sS'cpp_type'
p79469
S'double'
p79470
sS'default'
p79471
S'1'
p79472
sS'name'
p79473
S'gc'
p79474
sS'required'
p79475
I00
sS'group_name'
p79476
Nsa(dp79477
S'description'
p79478
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79479
sS'cpp_type'
p79480
S'bool'
p79481
sS'default'
p79482
S'1'
p79483
sS'name'
p79484
S'implicit'
p79485
sS'required'
p79486
I00
sS'group_name'
p79487
S'Advanced'
p79488
sa(dp79489
S'description'
p79490
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79491
sS'cpp_type'
p79492
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79493
sS'default'
p79494
g3
sS'name'
p79495
S'output_properties'
p79496
sS'required'
p79497
I00
sS'group_name'
p79498
S'Outputs'
p79499
sa(dp79500
S'description'
p79501
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79502
sS'cpp_type'
p79503
S'std::vector<OutputName, std::allocator<OutputName> >'
p79504
sS'default'
p79505
S'none'
p79506
sS'name'
p79507
S'outputs'
p79508
sS'required'
p79509
I00
sS'group_name'
p79510
S'Outputs'
p79511
sa(dp79512
S'description'
p79513
S'The seed for the master random number generator\n'
p79514
sS'cpp_type'
p79515
S'unsigned int'
p79516
sS'default'
p79517
S'0'
p79518
sS'name'
p79519
S'seed'
p79520
sS'required'
p79521
I00
sS'group_name'
p79522
S'Advanced'
p79523
sa(dp79524
S'description'
p79525
g3
sS'cpp_type'
p79526
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79527
sS'default'
p79528
S'PFFracBulkRateMaterial'
p79529
sS'name'
p79530
S'type'
p79531
sS'required'
p79532
I00
sS'group_name'
p79533
Nsa(dp79534
S'description'
p79535
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79536
sS'cpp_type'
p79537
S'bool'
p79538
sS'default'
p79539
S'0'
p79540
sS'name'
p79541
S'use_displaced_mesh'
p79542
sS'required'
p79543
I00
sS'group_name'
p79544
S'Advanced'
p79545
sasS'name'
p79546
S'/Materials/PFFracBulkRateMaterial'
p79547
sa(dp79548
S'description'
p79549
S'Phase field parameters for polynomial free energy for single component systems\n'
p79550
sS'subblocks'
p79551
NsS'parameters'
p79552
(lp79553
(dp79554
S'description'
p79555
S'Diffusivity prefactor for vacancies in m^2/s\n'
p79556
sS'cpp_type'
p79557
S'double'
p79558
sS'default'
p79559
g3
sS'name'
p79560
S'D0'
p79561
sS'required'
p79562
I01
sS'group_name'
p79563
Nsa(dp79564
S'description'
p79565
S'Formation energy in eV\n'
p79566
sS'cpp_type'
p79567
S'double'
p79568
sS'default'
p79569
g3
sS'name'
p79570
S'Ef'
p79571
sS'required'
p79572
I01
sS'group_name'
p79573
Nsa(dp79574
S'description'
p79575
S'Migration energy in eV\n'
p79576
sS'cpp_type'
p79577
S'double'
p79578
sS'default'
p79579
g3
sS'name'
p79580
S'Em'
p79581
sS'required'
p79582
I01
sS'group_name'
p79583
Nsa(dp79584
S'description'
p79585
S'Temperature variable in Kelvin\n'
p79586
sS'cpp_type'
p79587
S'std::vector<VariableName>'
p79588
sS'default'
p79589
g3
sS'name'
p79590
S'T'
p79591
sS'required'
p79592
I00
sS'group_name'
p79593
Nsa(dp79594
S'description'
p79595
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79596
sS'cpp_type'
p79597
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79598
sS'default'
p79599
g3
sS'name'
p79600
S'block'
p79601
sS'required'
p79602
I00
sS'group_name'
p79603
Nsa(dp79604
S'description'
p79605
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79606
sS'cpp_type'
p79607
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79608
sS'default'
p79609
g3
sS'name'
p79610
S'boundary'
p79611
sS'required'
p79612
I00
sS'group_name'
p79613
Nsa(dp79614
S'description'
p79615
S'Concentration\n'
p79616
sS'cpp_type'
p79617
S'std::vector<VariableName>'
p79618
sS'default'
p79619
g3
sS'name'
p79620
S'c'
p79621
sS'required'
p79622
I01
sS'group_name'
p79623
Nsa(dp79624
S'description'
p79625
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79626
sS'cpp_type'
p79627
S'bool'
p79628
sS'default'
p79629
S'1'
p79630
sS'name'
p79631
S'compute'
p79632
sS'required'
p79633
I00
sS'group_name'
p79634
Nsa(dp79635
S'description'
p79636
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79637
sS'cpp_type'
p79638
S'bool'
p79639
sS'default'
p79640
S'0'
p79641
sS'name'
p79642
S'constant_on_elem'
p79643
sS'required'
p79644
I00
sS'group_name'
p79645
S'Advanced'
p79646
sa(dp79647
S'description'
p79648
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79649
sS'cpp_type'
p79650
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79651
sS'default'
p79652
g3
sS'name'
p79653
S'control_tags'
p79654
sS'required'
p79655
I00
sS'group_name'
p79656
S'Advanced'
p79657
sa(dp79658
S'description'
p79659
S'Set the enabled status of the MooseObject.\n'
p79660
sS'cpp_type'
p79661
S'bool'
p79662
sS'default'
p79663
S'1'
p79664
sS'name'
p79665
S'enable'
p79666
sS'required'
p79667
I00
sS'group_name'
p79668
S'Advanced'
p79669
sa(dp79670
S'description'
p79671
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79672
sS'cpp_type'
p79673
S'bool'
p79674
sS'default'
p79675
S'1'
p79676
sS'name'
p79677
S'implicit'
p79678
sS'required'
p79679
I00
sS'group_name'
p79680
S'Advanced'
p79681
sa(dp79682
S'description'
p79683
S'The interfacial width of void surface in the lengthscale of the problem\n'
p79684
sS'cpp_type'
p79685
S'double'
p79686
sS'default'
p79687
g3
sS'name'
p79688
S'int_width'
p79689
sS'required'
p79690
I01
sS'group_name'
p79691
Nsa(dp79692
S'description'
p79693
S'defines the base length scale of the problem in m\n'
p79694
sS'cpp_type'
p79695
S'double'
p79696
sS'default'
p79697
S'1e-09'
p79698
sS'name'
p79699
S'length_scale'
p79700
sS'required'
p79701
I00
sS'group_name'
p79702
Nsa(dp79703
S'description'
p79704
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79705
sS'cpp_type'
p79706
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79707
sS'default'
p79708
g3
sS'name'
p79709
S'output_properties'
p79710
sS'required'
p79711
I00
sS'group_name'
p79712
S'Outputs'
p79713
sa(dp79714
S'description'
p79715
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79716
sS'cpp_type'
p79717
S'std::vector<OutputName, std::allocator<OutputName> >'
p79718
sS'default'
p79719
S'none'
p79720
sS'name'
p79721
S'outputs'
p79722
sS'required'
p79723
I00
sS'group_name'
p79724
S'Outputs'
p79725
sa(dp79726
S'name'
p79727
S'polynomial_order'
p79728
sS'cpp_type'
p79729
S'MooseEnum'
p79730
sS'default'
p79731
g3
sS'description'
p79732
S'Order of polynomial free energy\n'
p79733
sS'required'
p79734
I01
sS'options'
p79735
S'4 6 8'
p79736
sS'group_name'
p79737
Nsa(dp79738
S'description'
p79739
S'The seed for the master random number generator\n'
p79740
sS'cpp_type'
p79741
S'unsigned int'
p79742
sS'default'
p79743
S'0'
p79744
sS'name'
p79745
S'seed'
p79746
sS'required'
p79747
I00
sS'group_name'
p79748
S'Advanced'
p79749
sa(dp79750
S'description'
p79751
S'Surface energy in J/m2\n'
p79752
sS'cpp_type'
p79753
S'double'
p79754
sS'default'
p79755
g3
sS'name'
p79756
S'surface_energy'
p79757
sS'required'
p79758
I01
sS'group_name'
p79759
Nsa(dp79760
S'description'
p79761
S'defines the base time scale of the problem\n'
p79762
sS'cpp_type'
p79763
S'double'
p79764
sS'default'
p79765
S'1e-09'
p79766
sS'name'
p79767
S'time_scale'
p79768
sS'required'
p79769
I00
sS'group_name'
p79770
Nsa(dp79771
S'description'
p79772
g3
sS'cpp_type'
p79773
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79774
sS'default'
p79775
S'PFParamsPolyFreeEnergy'
p79776
sS'name'
p79777
S'type'
p79778
sS'required'
p79779
I00
sS'group_name'
p79780
Nsa(dp79781
S'description'
p79782
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79783
sS'cpp_type'
p79784
S'bool'
p79785
sS'default'
p79786
S'0'
p79787
sS'name'
p79788
S'use_displaced_mesh'
p79789
sS'required'
p79790
I00
sS'group_name'
p79791
S'Advanced'
p79792
sasS'name'
p79793
S'/Materials/PFParamsPolyFreeEnergy'
p79794
sa(dp79795
S'description'
p79796
S'Parsed Function Material.\n'
p79797
sS'subblocks'
p79798
NsS'parameters'
p79799
(lp79800
(dp79801
S'description'
p79802
S'Arguments of F() - use vector coupling\n'
p79803
sS'cpp_type'
p79804
S'std::vector<VariableName>'
p79805
sS'default'
p79806
g3
sS'name'
p79807
S'args'
p79808
sS'required'
p79809
I00
sS'group_name'
p79810
Nsa(dp79811
S'description'
p79812
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79813
sS'cpp_type'
p79814
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79815
sS'default'
p79816
g3
sS'name'
p79817
S'block'
p79818
sS'required'
p79819
I00
sS'group_name'
p79820
Nsa(dp79821
S'description'
p79822
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79823
sS'cpp_type'
p79824
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79825
sS'default'
p79826
g3
sS'name'
p79827
S'boundary'
p79828
sS'required'
p79829
I00
sS'group_name'
p79830
Nsa(dp79831
S'description'
p79832
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p79833
sS'cpp_type'
p79834
S'bool'
p79835
sS'default'
p79836
S'1'
p79837
sS'name'
p79838
S'compute'
p79839
sS'required'
p79840
I00
sS'group_name'
p79841
Nsa(dp79842
S'description'
p79843
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p79844
sS'cpp_type'
p79845
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79846
sS'default'
p79847
g3
sS'name'
p79848
S'constant_expressions'
p79849
sS'required'
p79850
I00
sS'group_name'
p79851
Nsa(dp79852
S'description'
p79853
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p79854
sS'cpp_type'
p79855
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79856
sS'default'
p79857
g3
sS'name'
p79858
S'constant_names'
p79859
sS'required'
p79860
I00
sS'group_name'
p79861
Nsa(dp79862
S'description'
p79863
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p79864
sS'cpp_type'
p79865
S'bool'
p79866
sS'default'
p79867
S'0'
p79868
sS'name'
p79869
S'constant_on_elem'
p79870
sS'required'
p79871
I00
sS'group_name'
p79872
S'Advanced'
p79873
sa(dp79874
S'description'
p79875
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79876
sS'cpp_type'
p79877
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79878
sS'default'
p79879
g3
sS'name'
p79880
S'control_tags'
p79881
sS'required'
p79882
I00
sS'group_name'
p79883
S'Advanced'
p79884
sa(dp79885
S'description'
p79886
S'Disable the function parser algebraic optimizer\n'
p79887
sS'cpp_type'
p79888
S'bool'
p79889
sS'default'
p79890
S'0'
p79891
sS'name'
p79892
S'disable_fpoptimizer'
p79893
sS'required'
p79894
I00
sS'group_name'
p79895
S'Advanced'
p79896
sa(dp79897
S'description'
p79898
S'Set the enabled status of the MooseObject.\n'
p79899
sS'cpp_type'
p79900
S'bool'
p79901
sS'default'
p79902
S'1'
p79903
sS'name'
p79904
S'enable'
p79905
sS'required'
p79906
I00
sS'group_name'
p79907
S'Advanced'
p79908
sa(dp79909
S'description'
p79910
S'Enable cacheing of function derivatives for faster startup time\n'
p79911
sS'cpp_type'
p79912
S'bool'
p79913
sS'default'
p79914
S'1'
p79915
sS'name'
p79916
S'enable_ad_cache'
p79917
sS'required'
p79918
I00
sS'group_name'
p79919
S'Advanced'
p79920
sa(dp79921
S'description'
p79922
S'Enable automatic immediate optimization of derivatives\n'
p79923
sS'cpp_type'
p79924
S'bool'
p79925
sS'default'
p79926
S'1'
p79927
sS'name'
p79928
S'enable_auto_optimize'
p79929
sS'required'
p79930
I00
sS'group_name'
p79931
S'Advanced'
p79932
sa(dp79933
S'description'
p79934
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p79935
sS'cpp_type'
p79936
S'bool'
p79937
sS'default'
p79938
S'1'
p79939
sS'name'
p79940
S'enable_jit'
p79941
sS'required'
p79942
I00
sS'group_name'
p79943
S'Advanced'
p79944
sa(dp79945
S'description'
p79946
S'Base name of the free energy function (used to name the material properties)\n'
p79947
sS'cpp_type'
p79948
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79949
sS'default'
p79950
S'F'
p79951
sS'name'
p79952
S'f_name'
p79953
sS'required'
p79954
I00
sS'group_name'
p79955
Nsa(dp79956
S'description'
p79957
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p79958
sS'cpp_type'
p79959
S'bool'
p79960
sS'default'
p79961
S'0'
p79962
sS'name'
p79963
S'fail_on_evalerror'
p79964
sS'required'
p79965
I00
sS'group_name'
p79966
S'Advanced'
p79967
sa(dp79968
S'description'
p79969
S'FParser function expression for the phase free energy\n'
p79970
sS'cpp_type'
p79971
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79972
sS'default'
p79973
g3
sS'name'
p79974
S'function'
p79975
sS'required'
p79976
I01
sS'group_name'
p79977
Nsa(dp79978
S'description'
p79979
S'Determines whether this object is calculated using an implicit or explicit form\n'
p79980
sS'cpp_type'
p79981
S'bool'
p79982
sS'default'
p79983
S'1'
p79984
sS'name'
p79985
S'implicit'
p79986
sS'required'
p79987
I00
sS'group_name'
p79988
S'Advanced'
p79989
sa(dp79990
S'description'
p79991
S'Vector of material properties used in the parsed function\n'
p79992
sS'cpp_type'
p79993
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79994
sS'default'
p79995
g3
sS'name'
p79996
S'material_property_names'
p79997
sS'required'
p79998
I00
sS'group_name'
p79999
Nsa(dp80000
S'description'
p80001
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80002
sS'cpp_type'
p80003
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80004
sS'default'
p80005
g3
sS'name'
p80006
S'output_properties'
p80007
sS'required'
p80008
I00
sS'group_name'
p80009
S'Outputs'
p80010
sa(dp80011
S'description'
p80012
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80013
sS'cpp_type'
p80014
S'std::vector<OutputName, std::allocator<OutputName> >'
p80015
sS'default'
p80016
S'none'
p80017
sS'name'
p80018
S'outputs'
p80019
sS'required'
p80020
I00
sS'group_name'
p80021
S'Outputs'
p80022
sa(dp80023
S'description'
p80024
S'The seed for the master random number generator\n'
p80025
sS'cpp_type'
p80026
S'unsigned int'
p80027
sS'default'
p80028
S'0'
p80029
sS'name'
p80030
S'seed'
p80031
sS'required'
p80032
I00
sS'group_name'
p80033
S'Advanced'
p80034
sa(dp80035
S'description'
p80036
S'Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n'
p80037
sS'cpp_type'
p80038
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80039
sS'default'
p80040
g3
sS'name'
p80041
S'tol_names'
p80042
sS'required'
p80043
I00
sS'group_name'
p80044
Nsa(dp80045
S'description'
p80046
S'Vector of tolerance values for the variables in tol_names\n'
p80047
sS'cpp_type'
p80048
S'std::vector<double, std::allocator<double> >'
p80049
sS'default'
p80050
g3
sS'name'
p80051
S'tol_values'
p80052
sS'required'
p80053
I00
sS'group_name'
p80054
Nsa(dp80055
S'description'
p80056
g3
sS'cpp_type'
p80057
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80058
sS'default'
p80059
S'ParsedMaterial'
p80060
sS'name'
p80061
S'type'
p80062
sS'required'
p80063
I00
sS'group_name'
p80064
Nsa(dp80065
S'description'
p80066
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80067
sS'cpp_type'
p80068
S'bool'
p80069
sS'default'
p80070
S'0'
p80071
sS'name'
p80072
S'use_displaced_mesh'
p80073
sS'required'
p80074
I00
sS'group_name'
p80075
S'Advanced'
p80076
sasS'name'
p80077
S'/Materials/ParsedMaterial'
p80078
sa(dp80079
S'description'
p80080
S'Calculate normal tensor of a phase based on gradient\n'
p80081
sS'subblocks'
p80082
NsS'parameters'
p80083
(lp80084
(dp80085
S'description'
p80086
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80087
sS'cpp_type'
p80088
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80089
sS'default'
p80090
g3
sS'name'
p80091
S'block'
p80092
sS'required'
p80093
I00
sS'group_name'
p80094
Nsa(dp80095
S'description'
p80096
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80097
sS'cpp_type'
p80098
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80099
sS'default'
p80100
g3
sS'name'
p80101
S'boundary'
p80102
sS'required'
p80103
I00
sS'group_name'
p80104
Nsa(dp80105
S'description'
p80106
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p80107
sS'cpp_type'
p80108
S'bool'
p80109
sS'default'
p80110
S'1'
p80111
sS'name'
p80112
S'compute'
p80113
sS'required'
p80114
I00
sS'group_name'
p80115
Nsa(dp80116
S'description'
p80117
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80118
sS'cpp_type'
p80119
S'bool'
p80120
sS'default'
p80121
S'0'
p80122
sS'name'
p80123
S'constant_on_elem'
p80124
sS'required'
p80125
I00
sS'group_name'
p80126
S'Advanced'
p80127
sa(dp80128
S'description'
p80129
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80130
sS'cpp_type'
p80131
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80132
sS'default'
p80133
g3
sS'name'
p80134
S'control_tags'
p80135
sS'required'
p80136
I00
sS'group_name'
p80137
S'Advanced'
p80138
sa(dp80139
S'description'
p80140
S'Set the enabled status of the MooseObject.\n'
p80141
sS'cpp_type'
p80142
S'bool'
p80143
sS'default'
p80144
S'1'
p80145
sS'name'
p80146
S'enable'
p80147
sS'required'
p80148
I00
sS'group_name'
p80149
S'Advanced'
p80150
sa(dp80151
S'description'
p80152
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80153
sS'cpp_type'
p80154
S'bool'
p80155
sS'default'
p80156
S'1'
p80157
sS'name'
p80158
S'implicit'
p80159
sS'required'
p80160
I00
sS'group_name'
p80161
S'Advanced'
p80162
sa(dp80163
S'description'
p80164
S'Name of normal tensor\n'
p80165
sS'cpp_type'
p80166
S'MaterialPropertyName'
p80167
sS'default'
p80168
g3
sS'name'
p80169
S'normal_tensor_name'
p80170
sS'required'
p80171
I01
sS'group_name'
p80172
Nsa(dp80173
S'description'
p80174
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80175
sS'cpp_type'
p80176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80177
sS'default'
p80178
g3
sS'name'
p80179
S'output_properties'
p80180
sS'required'
p80181
I00
sS'group_name'
p80182
S'Outputs'
p80183
sa(dp80184
S'description'
p80185
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80186
sS'cpp_type'
p80187
S'std::vector<OutputName, std::allocator<OutputName> >'
p80188
sS'default'
p80189
S'none'
p80190
sS'name'
p80191
S'outputs'
p80192
sS'required'
p80193
I00
sS'group_name'
p80194
S'Outputs'
p80195
sa(dp80196
S'description'
p80197
S'Phase variable\n'
p80198
sS'cpp_type'
p80199
S'std::vector<VariableName>'
p80200
sS'default'
p80201
g3
sS'name'
p80202
S'phase'
p80203
sS'required'
p80204
I01
sS'group_name'
p80205
Nsa(dp80206
S'description'
p80207
S'The seed for the master random number generator\n'
p80208
sS'cpp_type'
p80209
S'unsigned int'
p80210
sS'default'
p80211
S'0'
p80212
sS'name'
p80213
S'seed'
p80214
sS'required'
p80215
I00
sS'group_name'
p80216
S'Advanced'
p80217
sa(dp80218
S'description'
p80219
g3
sS'cpp_type'
p80220
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80221
sS'default'
p80222
S'PhaseNormalTensor'
p80223
sS'name'
p80224
S'type'
p80225
sS'required'
p80226
I00
sS'group_name'
p80227
Nsa(dp80228
S'description'
p80229
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80230
sS'cpp_type'
p80231
S'bool'
p80232
sS'default'
p80233
S'0'
p80234
sS'name'
p80235
S'use_displaced_mesh'
p80236
sS'required'
p80237
I00
sS'group_name'
p80238
S'Advanced'
p80239
sasS'name'
p80240
S'/Materials/PhaseNormalTensor'
p80241
sa(dp80242
S'description'
p80243
S'Compute a property using a piecewise linear interpolation to define its dependence on a variable\n'
p80244
sS'subblocks'
p80245
NsS'parameters'
p80246
(lp80247
(dp80248
S'description'
p80249
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80250
sS'cpp_type'
p80251
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80252
sS'default'
p80253
g3
sS'name'
p80254
S'block'
p80255
sS'required'
p80256
I00
sS'group_name'
p80257
Nsa(dp80258
S'description'
p80259
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80260
sS'cpp_type'
p80261
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80262
sS'default'
p80263
g3
sS'name'
p80264
S'boundary'
p80265
sS'required'
p80266
I00
sS'group_name'
p80267
Nsa(dp80268
S'description'
p80269
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p80270
sS'cpp_type'
p80271
S'bool'
p80272
sS'default'
p80273
S'1'
p80274
sS'name'
p80275
S'compute'
p80276
sS'required'
p80277
I00
sS'group_name'
p80278
Nsa(dp80279
S'description'
p80280
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80281
sS'cpp_type'
p80282
S'bool'
p80283
sS'default'
p80284
S'0'
p80285
sS'name'
p80286
S'constant_on_elem'
p80287
sS'required'
p80288
I00
sS'group_name'
p80289
S'Advanced'
p80290
sa(dp80291
S'description'
p80292
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80293
sS'cpp_type'
p80294
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80295
sS'default'
p80296
g3
sS'name'
p80297
S'control_tags'
p80298
sS'required'
p80299
I00
sS'group_name'
p80300
S'Advanced'
p80301
sa(dp80302
S'description'
p80303
S'Set the enabled status of the MooseObject.\n'
p80304
sS'cpp_type'
p80305
S'bool'
p80306
sS'default'
p80307
S'1'
p80308
sS'name'
p80309
S'enable'
p80310
sS'required'
p80311
I00
sS'group_name'
p80312
S'Advanced'
p80313
sa(dp80314
S'description'
p80315
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80316
sS'cpp_type'
p80317
S'bool'
p80318
sS'default'
p80319
S'1'
p80320
sS'name'
p80321
S'implicit'
p80322
sS'required'
p80323
I00
sS'group_name'
p80324
S'Advanced'
p80325
sa(dp80326
S'description'
p80327
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80328
sS'cpp_type'
p80329
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80330
sS'default'
p80331
g3
sS'name'
p80332
S'output_properties'
p80333
sS'required'
p80334
I00
sS'group_name'
p80335
S'Outputs'
p80336
sa(dp80337
S'description'
p80338
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80339
sS'cpp_type'
p80340
S'std::vector<OutputName, std::allocator<OutputName> >'
p80341
sS'default'
p80342
S'none'
p80343
sS'name'
p80344
S'outputs'
p80345
sS'required'
p80346
I00
sS'group_name'
p80347
S'Outputs'
p80348
sa(dp80349
S'description'
p80350
S'The name of the property this material will compute\n'
p80351
sS'cpp_type'
p80352
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80353
sS'default'
p80354
g3
sS'name'
p80355
S'property'
p80356
sS'required'
p80357
I01
sS'group_name'
p80358
Nsa(dp80359
S'description'
p80360
S'Scale factor to be applied to the ordinate values\n'
p80361
sS'cpp_type'
p80362
S'double'
p80363
sS'default'
p80364
S'1'
p80365
sS'name'
p80366
S'scale_factor'
p80367
sS'required'
p80368
I00
sS'group_name'
p80369
Nsa(dp80370
S'description'
p80371
S'The seed for the master random number generator\n'
p80372
sS'cpp_type'
p80373
S'unsigned int'
p80374
sS'default'
p80375
S'0'
p80376
sS'name'
p80377
S'seed'
p80378
sS'required'
p80379
I00
sS'group_name'
p80380
S'Advanced'
p80381
sa(dp80382
S'description'
p80383
g3
sS'cpp_type'
p80384
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80385
sS'default'
p80386
S'PiecewiseLinearInterpolationMaterial'
p80387
sS'name'
p80388
S'type'
p80389
sS'required'
p80390
I00
sS'group_name'
p80391
Nsa(dp80392
S'description'
p80393
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80394
sS'cpp_type'
p80395
S'bool'
p80396
sS'default'
p80397
S'0'
p80398
sS'name'
p80399
S'use_displaced_mesh'
p80400
sS'required'
p80401
I00
sS'group_name'
p80402
S'Advanced'
p80403
sa(dp80404
S'description'
p80405
S'The name of the variable whose value is used as the abscissa in the interpolation\n'
p80406
sS'cpp_type'
p80407
S'std::vector<VariableName>'
p80408
sS'default'
p80409
g3
sS'name'
p80410
S'variable'
p80411
sS'required'
p80412
I01
sS'group_name'
p80413
Nsa(dp80414
S'description'
p80415
S'The abscissa values\n'
p80416
sS'cpp_type'
p80417
S'std::vector<double, std::allocator<double> >'
p80418
sS'default'
p80419
g3
sS'name'
p80420
S'x'
p80421
sS'required'
p80422
I00
sS'group_name'
p80423
Nsa(dp80424
S'description'
p80425
S'All function data, supplied in abscissa, ordinate pairs\n'
p80426
sS'cpp_type'
p80427
S'std::vector<double, std::allocator<double> >'
p80428
sS'default'
p80429
g3
sS'name'
p80430
S'xy_data'
p80431
sS'required'
p80432
I00
sS'group_name'
p80433
Nsa(dp80434
S'description'
p80435
S'The ordinate values\n'
p80436
sS'cpp_type'
p80437
S'std::vector<double, std::allocator<double> >'
p80438
sS'default'
p80439
g3
sS'name'
p80440
S'y'
p80441
sS'required'
p80442
I00
sS'group_name'
p80443
NsasS'name'
p80444
S'/Materials/PiecewiseLinearInterpolationMaterial'
p80445
sa(dp80446
S'description'
p80447
S'Polynomial free energy for single component systems\n'
p80448
sS'subblocks'
p80449
NsS'parameters'
p80450
(lp80451
(dp80452
S'description'
p80453
S'Name of the material property storing the barrier height\n'
p80454
sS'cpp_type'
p80455
S'MaterialPropertyName'
p80456
sS'default'
p80457
S'barr_height'
p80458
sS'name'
p80459
S'W_name'
p80460
sS'required'
p80461
I00
sS'group_name'
p80462
Nsa(dp80463
S'description'
p80464
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80465
sS'cpp_type'
p80466
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80467
sS'default'
p80468
g3
sS'name'
p80469
S'block'
p80470
sS'required'
p80471
I00
sS'group_name'
p80472
Nsa(dp80473
S'description'
p80474
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80475
sS'cpp_type'
p80476
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80477
sS'default'
p80478
g3
sS'name'
p80479
S'boundary'
p80480
sS'required'
p80481
I00
sS'group_name'
p80482
Nsa(dp80483
S'description'
p80484
S'Concentration\n'
p80485
sS'cpp_type'
p80486
S'std::vector<VariableName>'
p80487
sS'default'
p80488
g3
sS'name'
p80489
S'c'
p80490
sS'required'
p80491
I01
sS'group_name'
p80492
Nsa(dp80493
S'description'
p80494
S'Name of material property storing the equilibrium concentration\n'
p80495
sS'cpp_type'
p80496
S'MaterialPropertyName'
p80497
sS'default'
p80498
S'c_eq'
p80499
sS'name'
p80500
S'c_eq_name'
p80501
sS'required'
p80502
I00
sS'group_name'
p80503
Nsa(dp80504
S'description'
p80505
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p80506
sS'cpp_type'
p80507
S'bool'
p80508
sS'default'
p80509
S'1'
p80510
sS'name'
p80511
S'compute'
p80512
sS'required'
p80513
I00
sS'group_name'
p80514
Nsa(dp80515
S'description'
p80516
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80517
sS'cpp_type'
p80518
S'bool'
p80519
sS'default'
p80520
S'0'
p80521
sS'name'
p80522
S'constant_on_elem'
p80523
sS'required'
p80524
I00
sS'group_name'
p80525
S'Advanced'
p80526
sa(dp80527
S'description'
p80528
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80529
sS'cpp_type'
p80530
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80531
sS'default'
p80532
g3
sS'name'
p80533
S'control_tags'
p80534
sS'required'
p80535
I00
sS'group_name'
p80536
S'Advanced'
p80537
sa(dp80538
S'description'
p80539
S'Maximum order of derivatives taken\n'
p80540
sS'cpp_type'
p80541
S'unsigned int'
p80542
sS'default'
p80543
S'3'
p80544
sS'name'
p80545
S'derivative_order'
p80546
sS'required'
p80547
I00
sS'group_name'
p80548
Nsa(dp80549
S'description'
p80550
S'Disable the function parser algebraic optimizer\n'
p80551
sS'cpp_type'
p80552
S'bool'
p80553
sS'default'
p80554
S'0'
p80555
sS'name'
p80556
S'disable_fpoptimizer'
p80557
sS'required'
p80558
I00
sS'group_name'
p80559
S'Advanced'
p80560
sa(dp80561
S'description'
p80562
S'Set the enabled status of the MooseObject.\n'
p80563
sS'cpp_type'
p80564
S'bool'
p80565
sS'default'
p80566
S'1'
p80567
sS'name'
p80568
S'enable'
p80569
sS'required'
p80570
I00
sS'group_name'
p80571
S'Advanced'
p80572
sa(dp80573
S'description'
p80574
S'Enable cacheing of function derivatives for faster startup time\n'
p80575
sS'cpp_type'
p80576
S'bool'
p80577
sS'default'
p80578
S'1'
p80579
sS'name'
p80580
S'enable_ad_cache'
p80581
sS'required'
p80582
I00
sS'group_name'
p80583
S'Advanced'
p80584
sa(dp80585
S'description'
p80586
S'Enable automatic immediate optimization of derivatives\n'
p80587
sS'cpp_type'
p80588
S'bool'
p80589
sS'default'
p80590
S'1'
p80591
sS'name'
p80592
S'enable_auto_optimize'
p80593
sS'required'
p80594
I00
sS'group_name'
p80595
S'Advanced'
p80596
sa(dp80597
S'description'
p80598
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p80599
sS'cpp_type'
p80600
S'bool'
p80601
sS'default'
p80602
S'1'
p80603
sS'name'
p80604
S'enable_jit'
p80605
sS'required'
p80606
I00
sS'group_name'
p80607
S'Advanced'
p80608
sa(dp80609
S'description'
p80610
S'Base name of the free energy function (used to name the material properties)\n'
p80611
sS'cpp_type'
p80612
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80613
sS'default'
p80614
S'F'
p80615
sS'name'
p80616
S'f_name'
p80617
sS'required'
p80618
I00
sS'group_name'
p80619
Nsa(dp80620
S'description'
p80621
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p80622
sS'cpp_type'
p80623
S'bool'
p80624
sS'default'
p80625
S'0'
p80626
sS'name'
p80627
S'fail_on_evalerror'
p80628
sS'required'
p80629
I00
sS'group_name'
p80630
S'Advanced'
p80631
sa(dp80632
S'description'
p80633
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80634
sS'cpp_type'
p80635
S'bool'
p80636
sS'default'
p80637
S'1'
p80638
sS'name'
p80639
S'implicit'
p80640
sS'required'
p80641
I00
sS'group_name'
p80642
S'Advanced'
p80643
sa(dp80644
S'description'
p80645
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80646
sS'cpp_type'
p80647
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80648
sS'default'
p80649
g3
sS'name'
p80650
S'output_properties'
p80651
sS'required'
p80652
I00
sS'group_name'
p80653
S'Outputs'
p80654
sa(dp80655
S'description'
p80656
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80657
sS'cpp_type'
p80658
S'std::vector<OutputName, std::allocator<OutputName> >'
p80659
sS'default'
p80660
S'none'
p80661
sS'name'
p80662
S'outputs'
p80663
sS'required'
p80664
I00
sS'group_name'
p80665
S'Outputs'
p80666
sa(dp80667
S'name'
p80668
S'polynomial_order'
p80669
sS'cpp_type'
p80670
S'MooseEnum'
p80671
sS'default'
p80672
g3
sS'description'
p80673
S'Order of polynomial free energy\n'
p80674
sS'required'
p80675
I01
sS'options'
p80676
S'4 6 8'
p80677
sS'group_name'
p80678
Nsa(dp80679
S'description'
p80680
S'The seed for the master random number generator\n'
p80681
sS'cpp_type'
p80682
S'unsigned int'
p80683
sS'default'
p80684
S'0'
p80685
sS'name'
p80686
S'seed'
p80687
sS'required'
p80688
I00
sS'group_name'
p80689
S'Advanced'
p80690
sa(dp80691
S'description'
p80692
S'Flag to indicate if third derivatives are needed\n'
p80693
sS'cpp_type'
p80694
S'bool'
p80695
sS'default'
p80696
g3
sS'name'
p80697
S'third_derivatives'
p80698
sS'required'
p80699
I00
sS'group_name'
p80700
Nsa(dp80701
S'description'
p80702
g3
sS'cpp_type'
p80703
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80704
sS'default'
p80705
S'PolynomialFreeEnergy'
p80706
sS'name'
p80707
S'type'
p80708
sS'required'
p80709
I00
sS'group_name'
p80710
Nsa(dp80711
S'description'
p80712
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80713
sS'cpp_type'
p80714
S'bool'
p80715
sS'default'
p80716
S'0'
p80717
sS'name'
p80718
S'use_displaced_mesh'
p80719
sS'required'
p80720
I00
sS'group_name'
p80721
S'Advanced'
p80722
sasS'name'
p80723
S'/Materials/PolynomialFreeEnergy'
p80724
sa(dp80725
S'description'
p80726
S'This class uses the discrete material in a radial return isotropic power law creep model.  This class can be used in conjunction with other creep and plasticity materials for more complex simulations.\n'
p80727
sS'subblocks'
p80728
NsS'parameters'
p80729
(lp80730
(dp80731
S'description'
p80732
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p80733
sS'cpp_type'
p80734
S'double'
p80735
sS'default'
p80736
S'1e-20'
p80737
sS'name'
p80738
S'absolute_tolerance'
p80739
sS'required'
p80740
I00
sS'group_name'
p80741
Nsa(dp80742
S'description'
p80743
S'Activation energy\n'
p80744
sS'cpp_type'
p80745
S'double'
p80746
sS'default'
p80747
g3
sS'name'
p80748
S'activation_energy'
p80749
sS'required'
p80750
I01
sS'group_name'
p80751
Nsa(dp80752
S'description'
p80753
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p80754
sS'cpp_type'
p80755
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80756
sS'default'
p80757
g3
sS'name'
p80758
S'base_name'
p80759
sS'required'
p80760
I00
sS'group_name'
p80761
Nsa(dp80762
S'description'
p80763
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80764
sS'cpp_type'
p80765
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80766
sS'default'
p80767
g3
sS'name'
p80768
S'block'
p80769
sS'required'
p80770
I00
sS'group_name'
p80771
Nsa(dp80772
S'description'
p80773
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80774
sS'cpp_type'
p80775
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80776
sS'default'
p80777
g3
sS'name'
p80778
S'boundary'
p80779
sS'required'
p80780
I00
sS'group_name'
p80781
Nsa(dp80782
S'description'
p80783
S'Leading coefficent in power-law equation\n'
p80784
sS'cpp_type'
p80785
S'double'
p80786
sS'default'
p80787
g3
sS'name'
p80788
S'coefficient'
p80789
sS'required'
p80790
I01
sS'group_name'
p80791
Nsa(dp80792
S'description'
p80793
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p80794
sS'cpp_type'
p80795
S'bool'
p80796
sS'default'
p80797
S'0'
p80798
sS'name'
p80799
S'constant_on_elem'
p80800
sS'required'
p80801
I00
sS'group_name'
p80802
S'Advanced'
p80803
sa(dp80804
S'description'
p80805
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80806
sS'cpp_type'
p80807
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80808
sS'default'
p80809
g3
sS'name'
p80810
S'control_tags'
p80811
sS'required'
p80812
I00
sS'group_name'
p80813
S'Advanced'
p80814
sa(dp80815
S'description'
p80816
S'Set the enabled status of the MooseObject.\n'
p80817
sS'cpp_type'
p80818
S'bool'
p80819
sS'default'
p80820
S'1'
p80821
sS'name'
p80822
S'enable'
p80823
sS'required'
p80824
I00
sS'group_name'
p80825
S'Advanced'
p80826
sa(dp80827
S'description'
p80828
S'Universal gas constant\n'
p80829
sS'cpp_type'
p80830
S'double'
p80831
sS'default'
p80832
S'8.3143'
p80833
sS'name'
p80834
S'gas_constant'
p80835
sS'required'
p80836
I00
sS'group_name'
p80837
Nsa(dp80838
S'description'
p80839
S'Determines whether this object is calculated using an implicit or explicit form\n'
p80840
sS'cpp_type'
p80841
S'bool'
p80842
sS'default'
p80843
S'1'
p80844
sS'name'
p80845
S'implicit'
p80846
sS'required'
p80847
I00
sS'group_name'
p80848
S'Advanced'
p80849
sa(dp80850
S'description'
p80851
S'Exponent on time in power-law equation\n'
p80852
sS'cpp_type'
p80853
S'double'
p80854
sS'default'
p80855
S'0'
p80856
sS'name'
p80857
S'm_exponent'
p80858
sS'required'
p80859
I00
sS'group_name'
p80860
Nsa(dp80861
S'description'
p80862
S'Maximum number of newton iterations in the radial return material\n'
p80863
sS'cpp_type'
p80864
S'unsigned int'
p80865
sS'default'
p80866
S'30'
p80867
sS'name'
p80868
S'max_iterations'
p80869
sS'required'
p80870
I00
sS'group_name'
p80871
Nsa(dp80872
S'description'
p80873
S'Exponent on effective stress in power-law equation\n'
p80874
sS'cpp_type'
p80875
S'double'
p80876
sS'default'
p80877
g3
sS'name'
p80878
S'n_exponent'
p80879
sS'required'
p80880
I01
sS'group_name'
p80881
Nsa(dp80882
S'description'
p80883
S'Set true to output newton iteration information from the radial return material\n'
p80884
sS'cpp_type'
p80885
S'bool'
p80886
sS'default'
p80887
S'0'
p80888
sS'name'
p80889
S'output_iteration_info'
p80890
sS'required'
p80891
I00
sS'group_name'
p80892
Nsa(dp80893
S'description'
p80894
S'Set true to output the recompute material iteration information when a step fails\n'
p80895
sS'cpp_type'
p80896
S'bool'
p80897
sS'default'
p80898
S'0'
p80899
sS'name'
p80900
S'output_iteration_info_on_error'
p80901
sS'required'
p80902
I00
sS'group_name'
p80903
Nsa(dp80904
S'description'
p80905
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80906
sS'cpp_type'
p80907
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80908
sS'default'
p80909
g3
sS'name'
p80910
S'output_properties'
p80911
sS'required'
p80912
I00
sS'group_name'
p80913
S'Outputs'
p80914
sa(dp80915
S'description'
p80916
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80917
sS'cpp_type'
p80918
S'std::vector<OutputName, std::allocator<OutputName> >'
p80919
sS'default'
p80920
S'none'
p80921
sS'name'
p80922
S'outputs'
p80923
sS'required'
p80924
I00
sS'group_name'
p80925
S'Outputs'
p80926
sa(dp80927
S'description'
p80928
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p80929
sS'cpp_type'
p80930
S'double'
p80931
sS'default'
p80932
S'1e-08'
p80933
sS'name'
p80934
S'relative_tolerance'
p80935
sS'required'
p80936
I00
sS'group_name'
p80937
Nsa(dp80938
S'description'
p80939
S'The seed for the master random number generator\n'
p80940
sS'cpp_type'
p80941
S'unsigned int'
p80942
sS'default'
p80943
S'0'
p80944
sS'name'
p80945
S'seed'
p80946
sS'required'
p80947
I00
sS'group_name'
p80948
S'Advanced'
p80949
sa(dp80950
S'description'
p80951
S'Start time (if not zero)\n'
p80952
sS'cpp_type'
p80953
S'double'
p80954
sS'default'
p80955
S'0'
p80956
sS'name'
p80957
S'start_time'
p80958
sS'required'
p80959
I00
sS'group_name'
p80960
Nsa(dp80961
S'description'
p80962
S'Coupled temperature\n'
p80963
sS'cpp_type'
p80964
S'std::vector<VariableName>'
p80965
sS'default'
p80966
S'0'
p80967
sS'name'
p80968
S'temperature'
p80969
sS'required'
p80970
I00
sS'group_name'
p80971
Nsa(dp80972
S'description'
p80973
g3
sS'cpp_type'
p80974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80975
sS'default'
p80976
S'PowerLawCreepStressUpdate'
p80977
sS'name'
p80978
S'type'
p80979
sS'required'
p80980
I00
sS'group_name'
p80981
Nsa(dp80982
S'description'
p80983
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80984
sS'cpp_type'
p80985
S'bool'
p80986
sS'default'
p80987
S'0'
p80988
sS'name'
p80989
S'use_displaced_mesh'
p80990
sS'required'
p80991
I00
sS'group_name'
p80992
S'Advanced'
p80993
sasS'name'
p80994
S'/Materials/PowerLawCreepStressUpdate'
p80995
sa(dp80996
S'description'
p80997
S'Calculates the effective inelastic strain increment required to return the isotropic stress state to a J2 yield surface.  This class is intended to be a parent class for classes with specific constitutive models.\n'
p80998
sS'subblocks'
p80999
NsS'parameters'
p81000
(lp81001
(dp81002
S'description'
p81003
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p81004
sS'cpp_type'
p81005
S'double'
p81006
sS'default'
p81007
S'1e-20'
p81008
sS'name'
p81009
S'absolute_tolerance'
p81010
sS'required'
p81011
I00
sS'group_name'
p81012
Nsa(dp81013
S'description'
p81014
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p81015
sS'cpp_type'
p81016
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81017
sS'default'
p81018
g3
sS'name'
p81019
S'base_name'
p81020
sS'required'
p81021
I00
sS'group_name'
p81022
Nsa(dp81023
S'description'
p81024
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81025
sS'cpp_type'
p81026
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81027
sS'default'
p81028
g3
sS'name'
p81029
S'block'
p81030
sS'required'
p81031
I00
sS'group_name'
p81032
Nsa(dp81033
S'description'
p81034
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81035
sS'cpp_type'
p81036
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81037
sS'default'
p81038
g3
sS'name'
p81039
S'boundary'
p81040
sS'required'
p81041
I00
sS'group_name'
p81042
Nsa(dp81043
S'description'
p81044
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81045
sS'cpp_type'
p81046
S'bool'
p81047
sS'default'
p81048
S'0'
p81049
sS'name'
p81050
S'constant_on_elem'
p81051
sS'required'
p81052
I00
sS'group_name'
p81053
S'Advanced'
p81054
sa(dp81055
S'description'
p81056
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81057
sS'cpp_type'
p81058
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81059
sS'default'
p81060
g3
sS'name'
p81061
S'control_tags'
p81062
sS'required'
p81063
I00
sS'group_name'
p81064
S'Advanced'
p81065
sa(dp81066
S'description'
p81067
S'Set the enabled status of the MooseObject.\n'
p81068
sS'cpp_type'
p81069
S'bool'
p81070
sS'default'
p81071
S'1'
p81072
sS'name'
p81073
S'enable'
p81074
sS'required'
p81075
I00
sS'group_name'
p81076
S'Advanced'
p81077
sa(dp81078
S'description'
p81079
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81080
sS'cpp_type'
p81081
S'bool'
p81082
sS'default'
p81083
S'1'
p81084
sS'name'
p81085
S'implicit'
p81086
sS'required'
p81087
I00
sS'group_name'
p81088
S'Advanced'
p81089
sa(dp81090
S'description'
p81091
S'Maximum number of newton iterations in the radial return material\n'
p81092
sS'cpp_type'
p81093
S'unsigned int'
p81094
sS'default'
p81095
S'30'
p81096
sS'name'
p81097
S'max_iterations'
p81098
sS'required'
p81099
I00
sS'group_name'
p81100
Nsa(dp81101
S'description'
p81102
S'Set true to output newton iteration information from the radial return material\n'
p81103
sS'cpp_type'
p81104
S'bool'
p81105
sS'default'
p81106
S'0'
p81107
sS'name'
p81108
S'output_iteration_info'
p81109
sS'required'
p81110
I00
sS'group_name'
p81111
Nsa(dp81112
S'description'
p81113
S'Set true to output the recompute material iteration information when a step fails\n'
p81114
sS'cpp_type'
p81115
S'bool'
p81116
sS'default'
p81117
S'0'
p81118
sS'name'
p81119
S'output_iteration_info_on_error'
p81120
sS'required'
p81121
I00
sS'group_name'
p81122
Nsa(dp81123
S'description'
p81124
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81125
sS'cpp_type'
p81126
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81127
sS'default'
p81128
g3
sS'name'
p81129
S'output_properties'
p81130
sS'required'
p81131
I00
sS'group_name'
p81132
S'Outputs'
p81133
sa(dp81134
S'description'
p81135
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81136
sS'cpp_type'
p81137
S'std::vector<OutputName, std::allocator<OutputName> >'
p81138
sS'default'
p81139
S'none'
p81140
sS'name'
p81141
S'outputs'
p81142
sS'required'
p81143
I00
sS'group_name'
p81144
S'Outputs'
p81145
sa(dp81146
S'description'
p81147
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p81148
sS'cpp_type'
p81149
S'double'
p81150
sS'default'
p81151
S'1e-08'
p81152
sS'name'
p81153
S'relative_tolerance'
p81154
sS'required'
p81155
I00
sS'group_name'
p81156
Nsa(dp81157
S'description'
p81158
S'The seed for the master random number generator\n'
p81159
sS'cpp_type'
p81160
S'unsigned int'
p81161
sS'default'
p81162
S'0'
p81163
sS'name'
p81164
S'seed'
p81165
sS'required'
p81166
I00
sS'group_name'
p81167
S'Advanced'
p81168
sa(dp81169
S'description'
p81170
g3
sS'cpp_type'
p81171
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81172
sS'default'
p81173
S'RadialReturnStressUpdate'
p81174
sS'name'
p81175
S'type'
p81176
sS'required'
p81177
I00
sS'group_name'
p81178
Nsa(dp81179
S'description'
p81180
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81181
sS'cpp_type'
p81182
S'bool'
p81183
sS'default'
p81184
S'0'
p81185
sS'name'
p81186
S'use_displaced_mesh'
p81187
sS'required'
p81188
I00
sS'group_name'
p81189
S'Advanced'
p81190
sasS'name'
p81191
S'/Materials/RadialReturnStressUpdate'
p81192
sa(dp81193
S'description'
p81194
S'Material that implements the free energy of a regular solution\n'
p81195
sS'subblocks'
p81196
NsS'parameters'
p81197
(lp81198
(dp81199
S'description'
p81200
S'Temperature variable\n'
p81201
sS'cpp_type'
p81202
S'std::vector<VariableName>'
p81203
sS'default'
p81204
S'300'
p81205
sS'name'
p81206
S'T'
p81207
sS'required'
p81208
I00
sS'group_name'
p81209
Nsa(dp81210
S'description'
p81211
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81212
sS'cpp_type'
p81213
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81214
sS'default'
p81215
g3
sS'name'
p81216
S'block'
p81217
sS'required'
p81218
I00
sS'group_name'
p81219
Nsa(dp81220
S'description'
p81221
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81222
sS'cpp_type'
p81223
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81224
sS'default'
p81225
g3
sS'name'
p81226
S'boundary'
p81227
sS'required'
p81228
I00
sS'group_name'
p81229
Nsa(dp81230
S'description'
p81231
S'Concentration variable\n'
p81232
sS'cpp_type'
p81233
S'std::vector<VariableName>'
p81234
sS'default'
p81235
g3
sS'name'
p81236
S'c'
p81237
sS'required'
p81238
I01
sS'group_name'
p81239
Nsa(dp81240
S'description'
p81241
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81242
sS'cpp_type'
p81243
S'bool'
p81244
sS'default'
p81245
S'1'
p81246
sS'name'
p81247
S'compute'
p81248
sS'required'
p81249
I00
sS'group_name'
p81250
Nsa(dp81251
S'description'
p81252
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81253
sS'cpp_type'
p81254
S'bool'
p81255
sS'default'
p81256
S'0'
p81257
sS'name'
p81258
S'constant_on_elem'
p81259
sS'required'
p81260
I00
sS'group_name'
p81261
S'Advanced'
p81262
sa(dp81263
S'description'
p81264
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81265
sS'cpp_type'
p81266
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81267
sS'default'
p81268
g3
sS'name'
p81269
S'control_tags'
p81270
sS'required'
p81271
I00
sS'group_name'
p81272
S'Advanced'
p81273
sa(dp81274
S'description'
p81275
S'Maximum order of derivatives taken\n'
p81276
sS'cpp_type'
p81277
S'unsigned int'
p81278
sS'default'
p81279
S'3'
p81280
sS'name'
p81281
S'derivative_order'
p81282
sS'required'
p81283
I00
sS'group_name'
p81284
Nsa(dp81285
S'description'
p81286
S'Disable the function parser algebraic optimizer\n'
p81287
sS'cpp_type'
p81288
S'bool'
p81289
sS'default'
p81290
S'0'
p81291
sS'name'
p81292
S'disable_fpoptimizer'
p81293
sS'required'
p81294
I00
sS'group_name'
p81295
S'Advanced'
p81296
sa(dp81297
S'description'
p81298
S'Set the enabled status of the MooseObject.\n'
p81299
sS'cpp_type'
p81300
S'bool'
p81301
sS'default'
p81302
S'1'
p81303
sS'name'
p81304
S'enable'
p81305
sS'required'
p81306
I00
sS'group_name'
p81307
S'Advanced'
p81308
sa(dp81309
S'description'
p81310
S'Enable cacheing of function derivatives for faster startup time\n'
p81311
sS'cpp_type'
p81312
S'bool'
p81313
sS'default'
p81314
S'1'
p81315
sS'name'
p81316
S'enable_ad_cache'
p81317
sS'required'
p81318
I00
sS'group_name'
p81319
S'Advanced'
p81320
sa(dp81321
S'description'
p81322
S'Enable automatic immediate optimization of derivatives\n'
p81323
sS'cpp_type'
p81324
S'bool'
p81325
sS'default'
p81326
S'1'
p81327
sS'name'
p81328
S'enable_auto_optimize'
p81329
sS'required'
p81330
I00
sS'group_name'
p81331
S'Advanced'
p81332
sa(dp81333
S'description'
p81334
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p81335
sS'cpp_type'
p81336
S'bool'
p81337
sS'default'
p81338
S'1'
p81339
sS'name'
p81340
S'enable_jit'
p81341
sS'required'
p81342
I00
sS'group_name'
p81343
S'Advanced'
p81344
sa(dp81345
S'description'
p81346
S'Base name of the free energy function (used to name the material properties)\n'
p81347
sS'cpp_type'
p81348
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81349
sS'default'
p81350
S'F'
p81351
sS'name'
p81352
S'f_name'
p81353
sS'required'
p81354
I00
sS'group_name'
p81355
Nsa(dp81356
S'description'
p81357
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p81358
sS'cpp_type'
p81359
S'bool'
p81360
sS'default'
p81361
S'0'
p81362
sS'name'
p81363
S'fail_on_evalerror'
p81364
sS'required'
p81365
I00
sS'group_name'
p81366
S'Advanced'
p81367
sa(dp81368
S'description'
p81369
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81370
sS'cpp_type'
p81371
S'bool'
p81372
sS'default'
p81373
S'1'
p81374
sS'name'
p81375
S'implicit'
p81376
sS'required'
p81377
I00
sS'group_name'
p81378
S'Advanced'
p81379
sa(dp81380
S'description'
p81381
S'Boltzmann constant\n'
p81382
sS'cpp_type'
p81383
S'double'
p81384
sS'default'
p81385
S'8.61733e-05'
p81386
sS'name'
p81387
S'kB'
p81388
sS'required'
p81389
I00
sS'group_name'
p81390
Nsa(dp81391
S'description'
p81392
S'If specified logarithms are evaluated using a Taylor expansion below this value\n'
p81393
sS'cpp_type'
p81394
S'double'
p81395
sS'default'
p81396
g3
sS'name'
p81397
S'log_tol'
p81398
sS'required'
p81399
I00
sS'group_name'
p81400
Nsa(dp81401
S'description'
p81402
S'Regular solution parameter\n'
p81403
sS'cpp_type'
p81404
S'double'
p81405
sS'default'
p81406
S'0.1'
p81407
sS'name'
p81408
S'omega'
p81409
sS'required'
p81410
I00
sS'group_name'
p81411
Nsa(dp81412
S'description'
p81413
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81414
sS'cpp_type'
p81415
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81416
sS'default'
p81417
g3
sS'name'
p81418
S'output_properties'
p81419
sS'required'
p81420
I00
sS'group_name'
p81421
S'Outputs'
p81422
sa(dp81423
S'description'
p81424
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81425
sS'cpp_type'
p81426
S'std::vector<OutputName, std::allocator<OutputName> >'
p81427
sS'default'
p81428
S'none'
p81429
sS'name'
p81430
S'outputs'
p81431
sS'required'
p81432
I00
sS'group_name'
p81433
S'Outputs'
p81434
sa(dp81435
S'description'
p81436
S'The seed for the master random number generator\n'
p81437
sS'cpp_type'
p81438
S'unsigned int'
p81439
sS'default'
p81440
S'0'
p81441
sS'name'
p81442
S'seed'
p81443
sS'required'
p81444
I00
sS'group_name'
p81445
S'Advanced'
p81446
sa(dp81447
S'description'
p81448
S'Flag to indicate if third derivatives are needed\n'
p81449
sS'cpp_type'
p81450
S'bool'
p81451
sS'default'
p81452
g3
sS'name'
p81453
S'third_derivatives'
p81454
sS'required'
p81455
I00
sS'group_name'
p81456
Nsa(dp81457
S'description'
p81458
g3
sS'cpp_type'
p81459
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81460
sS'default'
p81461
S'RegularSolutionFreeEnergy'
p81462
sS'name'
p81463
S'type'
p81464
sS'required'
p81465
I00
sS'group_name'
p81466
Nsa(dp81467
S'description'
p81468
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81469
sS'cpp_type'
p81470
S'bool'
p81471
sS'default'
p81472
S'0'
p81473
sS'name'
p81474
S'use_displaced_mesh'
p81475
sS'required'
p81476
I00
sS'group_name'
p81477
S'Advanced'
p81478
sasS'name'
p81479
S'/Materials/RegularSolutionFreeEnergy'
p81480
sa(dp81481
S'description'
p81482
S'Provide the constant derivatives of strain w.r.t. the displacement gradient components.\n'
p81483
sS'subblocks'
p81484
NsS'parameters'
p81485
(lp81486
(dp81487
S'description'
p81488
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81489
sS'cpp_type'
p81490
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81491
sS'default'
p81492
g3
sS'name'
p81493
S'block'
p81494
sS'required'
p81495
I00
sS'group_name'
p81496
Nsa(dp81497
S'description'
p81498
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81499
sS'cpp_type'
p81500
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81501
sS'default'
p81502
g3
sS'name'
p81503
S'boundary'
p81504
sS'required'
p81505
I00
sS'group_name'
p81506
Nsa(dp81507
S'description'
p81508
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81509
sS'cpp_type'
p81510
S'bool'
p81511
sS'default'
p81512
S'1'
p81513
sS'name'
p81514
S'compute'
p81515
sS'required'
p81516
I00
sS'group_name'
p81517
Nsa(dp81518
S'description'
p81519
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81520
sS'cpp_type'
p81521
S'bool'
p81522
sS'default'
p81523
S'0'
p81524
sS'name'
p81525
S'constant_on_elem'
p81526
sS'required'
p81527
I00
sS'group_name'
p81528
S'Advanced'
p81529
sa(dp81530
S'description'
p81531
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81532
sS'cpp_type'
p81533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81534
sS'default'
p81535
g3
sS'name'
p81536
S'control_tags'
p81537
sS'required'
p81538
I00
sS'group_name'
p81539
S'Advanced'
p81540
sa(dp81541
S'description'
p81542
S'List of displacement gradient component variables\n'
p81543
sS'cpp_type'
p81544
S'std::vector<VariableName>'
p81545
sS'default'
p81546
g3
sS'name'
p81547
S'displacement_gradients'
p81548
sS'required'
p81549
I00
sS'group_name'
p81550
Nsa(dp81551
S'description'
p81552
S'Set the enabled status of the MooseObject.\n'
p81553
sS'cpp_type'
p81554
S'bool'
p81555
sS'default'
p81556
S'1'
p81557
sS'name'
p81558
S'enable'
p81559
sS'required'
p81560
I00
sS'group_name'
p81561
S'Advanced'
p81562
sa(dp81563
S'description'
p81564
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81565
sS'cpp_type'
p81566
S'bool'
p81567
sS'default'
p81568
S'1'
p81569
sS'name'
p81570
S'implicit'
p81571
sS'required'
p81572
I00
sS'group_name'
p81573
S'Advanced'
p81574
sa(dp81575
S'description'
p81576
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81577
sS'cpp_type'
p81578
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81579
sS'default'
p81580
g3
sS'name'
p81581
S'output_properties'
p81582
sS'required'
p81583
I00
sS'group_name'
p81584
S'Outputs'
p81585
sa(dp81586
S'description'
p81587
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81588
sS'cpp_type'
p81589
S'std::vector<OutputName, std::allocator<OutputName> >'
p81590
sS'default'
p81591
S'none'
p81592
sS'name'
p81593
S'outputs'
p81594
sS'required'
p81595
I00
sS'group_name'
p81596
S'Outputs'
p81597
sa(dp81598
S'description'
p81599
S'The seed for the master random number generator\n'
p81600
sS'cpp_type'
p81601
S'unsigned int'
p81602
sS'default'
p81603
S'0'
p81604
sS'name'
p81605
S'seed'
p81606
sS'required'
p81607
I00
sS'group_name'
p81608
S'Advanced'
p81609
sa(dp81610
S'description'
p81611
g3
sS'cpp_type'
p81612
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81613
sS'default'
p81614
S'StrainGradDispDerivatives'
p81615
sS'name'
p81616
S'type'
p81617
sS'required'
p81618
I00
sS'group_name'
p81619
Nsa(dp81620
S'description'
p81621
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81622
sS'cpp_type'
p81623
S'bool'
p81624
sS'default'
p81625
S'0'
p81626
sS'name'
p81627
S'use_displaced_mesh'
p81628
sS'required'
p81629
I00
sS'group_name'
p81630
S'Advanced'
p81631
sasS'name'
p81632
S'/Materials/StrainGradDispDerivatives'
p81633
sa(dp81634
S'description'
p81635
S'Chemical potential from stress\n'
p81636
sS'subblocks'
p81637
NsS'parameters'
p81638
(lp81639
(dp81640
S'description'
p81641
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81642
sS'cpp_type'
p81643
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81644
sS'default'
p81645
g3
sS'name'
p81646
S'block'
p81647
sS'required'
p81648
I00
sS'group_name'
p81649
Nsa(dp81650
S'description'
p81651
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81652
sS'cpp_type'
p81653
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81654
sS'default'
p81655
g3
sS'name'
p81656
S'boundary'
p81657
sS'required'
p81658
I00
sS'group_name'
p81659
Nsa(dp81660
S'description'
p81661
S'Concentration variable\n'
p81662
sS'cpp_type'
p81663
S'std::vector<VariableName>'
p81664
sS'default'
p81665
g3
sS'name'
p81666
S'c'
p81667
sS'required'
p81668
I00
sS'group_name'
p81669
Nsa(dp81670
S'description'
p81671
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81672
sS'cpp_type'
p81673
S'bool'
p81674
sS'default'
p81675
S'1'
p81676
sS'name'
p81677
S'compute'
p81678
sS'required'
p81679
I00
sS'group_name'
p81680
Nsa(dp81681
S'description'
p81682
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81683
sS'cpp_type'
p81684
S'bool'
p81685
sS'default'
p81686
S'0'
p81687
sS'name'
p81688
S'constant_on_elem'
p81689
sS'required'
p81690
I00
sS'group_name'
p81691
S'Advanced'
p81692
sa(dp81693
S'description'
p81694
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81695
sS'cpp_type'
p81696
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81697
sS'default'
p81698
g3
sS'name'
p81699
S'control_tags'
p81700
sS'required'
p81701
I00
sS'group_name'
p81702
S'Advanced'
p81703
sa(dp81704
S'description'
p81705
S'Name of direction tensor variable\n'
p81706
sS'cpp_type'
p81707
S'MaterialPropertyName'
p81708
sS'default'
p81709
g3
sS'name'
p81710
S'direction_tensor_name'
p81711
sS'required'
p81712
I01
sS'group_name'
p81713
Nsa(dp81714
S'description'
p81715
S'Set the enabled status of the MooseObject.\n'
p81716
sS'cpp_type'
p81717
S'bool'
p81718
sS'default'
p81719
S'1'
p81720
sS'name'
p81721
S'enable'
p81722
sS'required'
p81723
I00
sS'group_name'
p81724
S'Advanced'
p81725
sa(dp81726
S'description'
p81727
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81728
sS'cpp_type'
p81729
S'bool'
p81730
sS'default'
p81731
S'1'
p81732
sS'name'
p81733
S'implicit'
p81734
sS'required'
p81735
I00
sS'group_name'
p81736
S'Advanced'
p81737
sa(dp81738
S'description'
p81739
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81740
sS'cpp_type'
p81741
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81742
sS'default'
p81743
g3
sS'name'
p81744
S'output_properties'
p81745
sS'required'
p81746
I00
sS'group_name'
p81747
S'Outputs'
p81748
sa(dp81749
S'description'
p81750
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81751
sS'cpp_type'
p81752
S'std::vector<OutputName, std::allocator<OutputName> >'
p81753
sS'default'
p81754
S'none'
p81755
sS'name'
p81756
S'outputs'
p81757
sS'required'
p81758
I00
sS'group_name'
p81759
S'Outputs'
p81760
sa(dp81761
S'description'
p81762
S'Name of prefactor variable\n'
p81763
sS'cpp_type'
p81764
S'MaterialPropertyName'
p81765
sS'default'
p81766
g3
sS'name'
p81767
S'prefactor_name'
p81768
sS'required'
p81769
I01
sS'group_name'
p81770
Nsa(dp81771
S'description'
p81772
S'Name of stress based chemical potential\n'
p81773
sS'cpp_type'
p81774
S'MaterialPropertyName'
p81775
sS'default'
p81776
g3
sS'name'
p81777
S'property_name'
p81778
sS'required'
p81779
I01
sS'group_name'
p81780
Nsa(dp81781
S'description'
p81782
S'The seed for the master random number generator\n'
p81783
sS'cpp_type'
p81784
S'unsigned int'
p81785
sS'default'
p81786
S'0'
p81787
sS'name'
p81788
S'seed'
p81789
sS'required'
p81790
I00
sS'group_name'
p81791
S'Advanced'
p81792
sa(dp81793
S'description'
p81794
S'Name of stress property variable\n'
p81795
sS'cpp_type'
p81796
S'MaterialPropertyName'
p81797
sS'default'
p81798
g3
sS'name'
p81799
S'stress_name'
p81800
sS'required'
p81801
I01
sS'group_name'
p81802
Nsa(dp81803
S'description'
p81804
g3
sS'cpp_type'
p81805
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81806
sS'default'
p81807
S'StressBasedChemicalPotential'
p81808
sS'name'
p81809
S'type'
p81810
sS'required'
p81811
I00
sS'group_name'
p81812
Nsa(dp81813
S'description'
p81814
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81815
sS'cpp_type'
p81816
S'bool'
p81817
sS'default'
p81818
S'0'
p81819
sS'name'
p81820
S'use_displaced_mesh'
p81821
sS'required'
p81822
I00
sS'group_name'
p81823
S'Advanced'
p81824
sasS'name'
p81825
S'/Materials/StressBasedChemicalPotential'
p81826
sa(dp81827
S'description'
p81828
S'Compute tensor property by summing tensor increments\n'
p81829
sS'subblocks'
p81830
NsS'parameters'
p81831
(lp81832
(dp81833
S'description'
p81834
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81835
sS'cpp_type'
p81836
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81837
sS'default'
p81838
g3
sS'name'
p81839
S'block'
p81840
sS'required'
p81841
I00
sS'group_name'
p81842
Nsa(dp81843
S'description'
p81844
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81845
sS'cpp_type'
p81846
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81847
sS'default'
p81848
g3
sS'name'
p81849
S'boundary'
p81850
sS'required'
p81851
I00
sS'group_name'
p81852
Nsa(dp81853
S'description'
p81854
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p81855
sS'cpp_type'
p81856
S'bool'
p81857
sS'default'
p81858
S'1'
p81859
sS'name'
p81860
S'compute'
p81861
sS'required'
p81862
I00
sS'group_name'
p81863
Nsa(dp81864
S'description'
p81865
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p81866
sS'cpp_type'
p81867
S'bool'
p81868
sS'default'
p81869
S'0'
p81870
sS'name'
p81871
S'constant_on_elem'
p81872
sS'required'
p81873
I00
sS'group_name'
p81874
S'Advanced'
p81875
sa(dp81876
S'description'
p81877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81878
sS'cpp_type'
p81879
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81880
sS'default'
p81881
g3
sS'name'
p81882
S'control_tags'
p81883
sS'required'
p81884
I00
sS'group_name'
p81885
S'Advanced'
p81886
sa(dp81887
S'description'
p81888
S'Name of strain increment properties\n'
p81889
sS'cpp_type'
p81890
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p81891
sS'default'
p81892
g3
sS'name'
p81893
S'coupled_tensor_increment_names'
p81894
sS'required'
p81895
I00
sS'group_name'
p81896
Nsa(dp81897
S'description'
p81898
S'Set the enabled status of the MooseObject.\n'
p81899
sS'cpp_type'
p81900
S'bool'
p81901
sS'default'
p81902
S'1'
p81903
sS'name'
p81904
S'enable'
p81905
sS'required'
p81906
I00
sS'group_name'
p81907
S'Advanced'
p81908
sa(dp81909
S'description'
p81910
S'Determines whether this object is calculated using an implicit or explicit form\n'
p81911
sS'cpp_type'
p81912
S'bool'
p81913
sS'default'
p81914
S'1'
p81915
sS'name'
p81916
S'implicit'
p81917
sS'required'
p81918
I00
sS'group_name'
p81919
S'Advanced'
p81920
sa(dp81921
S'description'
p81922
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81923
sS'cpp_type'
p81924
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81925
sS'default'
p81926
g3
sS'name'
p81927
S'output_properties'
p81928
sS'required'
p81929
I00
sS'group_name'
p81930
S'Outputs'
p81931
sa(dp81932
S'description'
p81933
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81934
sS'cpp_type'
p81935
S'std::vector<OutputName, std::allocator<OutputName> >'
p81936
sS'default'
p81937
S'none'
p81938
sS'name'
p81939
S'outputs'
p81940
sS'required'
p81941
I00
sS'group_name'
p81942
S'Outputs'
p81943
sa(dp81944
S'description'
p81945
S'The seed for the master random number generator\n'
p81946
sS'cpp_type'
p81947
S'unsigned int'
p81948
sS'default'
p81949
S'0'
p81950
sS'name'
p81951
S'seed'
p81952
sS'required'
p81953
I00
sS'group_name'
p81954
S'Advanced'
p81955
sa(dp81956
S'description'
p81957
S'Name of strain property\n'
p81958
sS'cpp_type'
p81959
S'MaterialPropertyName'
p81960
sS'default'
p81961
g3
sS'name'
p81962
S'tensor_name'
p81963
sS'required'
p81964
I01
sS'group_name'
p81965
Nsa(dp81966
S'description'
p81967
g3
sS'cpp_type'
p81968
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81969
sS'default'
p81970
S'SumTensorIncrements'
p81971
sS'name'
p81972
S'type'
p81973
sS'required'
p81974
I00
sS'group_name'
p81975
Nsa(dp81976
S'description'
p81977
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81978
sS'cpp_type'
p81979
S'bool'
p81980
sS'default'
p81981
S'0'
p81982
sS'name'
p81983
S'use_displaced_mesh'
p81984
sS'required'
p81985
I00
sS'group_name'
p81986
S'Advanced'
p81987
sasS'name'
p81988
S'/Materials/SumTensorIncrements'
p81989
sa(dp81990
S'description'
p81991
S'Material for switching function that prevents formation of a third phase at a two-phase interface: h_i = eta_i^2/4 * [15 (1-eta_i) [1 + eta_i - (eta_k - eta_j)^2] + eta_i * (9eta_i^2 - 5)]\n'
p81992
sS'subblocks'
p81993
NsS'parameters'
p81994
(lp81995
(dp81996
S'description'
p81997
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81998
sS'cpp_type'
p81999
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82000
sS'default'
p82001
g3
sS'name'
p82002
S'block'
p82003
sS'required'
p82004
I00
sS'group_name'
p82005
Nsa(dp82006
S'description'
p82007
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82008
sS'cpp_type'
p82009
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82010
sS'default'
p82011
g3
sS'name'
p82012
S'boundary'
p82013
sS'required'
p82014
I00
sS'group_name'
p82015
Nsa(dp82016
S'description'
p82017
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82018
sS'cpp_type'
p82019
S'bool'
p82020
sS'default'
p82021
S'1'
p82022
sS'name'
p82023
S'compute'
p82024
sS'required'
p82025
I00
sS'group_name'
p82026
Nsa(dp82027
S'description'
p82028
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82029
sS'cpp_type'
p82030
S'bool'
p82031
sS'default'
p82032
S'0'
p82033
sS'name'
p82034
S'constant_on_elem'
p82035
sS'required'
p82036
I00
sS'group_name'
p82037
S'Advanced'
p82038
sa(dp82039
S'description'
p82040
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82041
sS'cpp_type'
p82042
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82043
sS'default'
p82044
g3
sS'name'
p82045
S'control_tags'
p82046
sS'required'
p82047
I00
sS'group_name'
p82048
S'Advanced'
p82049
sa(dp82050
S'description'
p82051
S'Maximum order of derivatives taken\n'
p82052
sS'cpp_type'
p82053
S'unsigned int'
p82054
sS'default'
p82055
S'3'
p82056
sS'name'
p82057
S'derivative_order'
p82058
sS'required'
p82059
I00
sS'group_name'
p82060
Nsa(dp82061
S'description'
p82062
S'Disable the function parser algebraic optimizer\n'
p82063
sS'cpp_type'
p82064
S'bool'
p82065
sS'default'
p82066
S'0'
p82067
sS'name'
p82068
S'disable_fpoptimizer'
p82069
sS'required'
p82070
I00
sS'group_name'
p82071
S'Advanced'
p82072
sa(dp82073
S'description'
p82074
S'Set the enabled status of the MooseObject.\n'
p82075
sS'cpp_type'
p82076
S'bool'
p82077
sS'default'
p82078
S'1'
p82079
sS'name'
p82080
S'enable'
p82081
sS'required'
p82082
I00
sS'group_name'
p82083
S'Advanced'
p82084
sa(dp82085
S'description'
p82086
S'Enable cacheing of function derivatives for faster startup time\n'
p82087
sS'cpp_type'
p82088
S'bool'
p82089
sS'default'
p82090
S'1'
p82091
sS'name'
p82092
S'enable_ad_cache'
p82093
sS'required'
p82094
I00
sS'group_name'
p82095
S'Advanced'
p82096
sa(dp82097
S'description'
p82098
S'Enable automatic immediate optimization of derivatives\n'
p82099
sS'cpp_type'
p82100
S'bool'
p82101
sS'default'
p82102
S'1'
p82103
sS'name'
p82104
S'enable_auto_optimize'
p82105
sS'required'
p82106
I00
sS'group_name'
p82107
S'Advanced'
p82108
sa(dp82109
S'description'
p82110
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p82111
sS'cpp_type'
p82112
S'bool'
p82113
sS'default'
p82114
S'1'
p82115
sS'name'
p82116
S'enable_jit'
p82117
sS'required'
p82118
I00
sS'group_name'
p82119
S'Advanced'
p82120
sa(dp82121
S'description'
p82122
S'Order parameter i\n'
p82123
sS'cpp_type'
p82124
S'std::vector<VariableName>'
p82125
sS'default'
p82126
g3
sS'name'
p82127
S'eta_i'
p82128
sS'required'
p82129
I01
sS'group_name'
p82130
Nsa(dp82131
S'description'
p82132
S'Order parameter j\n'
p82133
sS'cpp_type'
p82134
S'std::vector<VariableName>'
p82135
sS'default'
p82136
g3
sS'name'
p82137
S'eta_j'
p82138
sS'required'
p82139
I01
sS'group_name'
p82140
Nsa(dp82141
S'description'
p82142
S'Order parameter k\n'
p82143
sS'cpp_type'
p82144
S'std::vector<VariableName>'
p82145
sS'default'
p82146
g3
sS'name'
p82147
S'eta_k'
p82148
sS'required'
p82149
I01
sS'group_name'
p82150
Nsa(dp82151
S'description'
p82152
S'Base name of the free energy function (used to name the material properties)\n'
p82153
sS'cpp_type'
p82154
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82155
sS'default'
p82156
S'F'
p82157
sS'name'
p82158
S'f_name'
p82159
sS'required'
p82160
I00
sS'group_name'
p82161
Nsa(dp82162
S'description'
p82163
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p82164
sS'cpp_type'
p82165
S'bool'
p82166
sS'default'
p82167
S'0'
p82168
sS'name'
p82169
S'fail_on_evalerror'
p82170
sS'required'
p82171
I00
sS'group_name'
p82172
S'Advanced'
p82173
sa(dp82174
S'description'
p82175
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82176
sS'cpp_type'
p82177
S'bool'
p82178
sS'default'
p82179
S'1'
p82180
sS'name'
p82181
S'implicit'
p82182
sS'required'
p82183
I00
sS'group_name'
p82184
S'Advanced'
p82185
sa(dp82186
S'description'
p82187
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82188
sS'cpp_type'
p82189
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82190
sS'default'
p82191
g3
sS'name'
p82192
S'output_properties'
p82193
sS'required'
p82194
I00
sS'group_name'
p82195
S'Outputs'
p82196
sa(dp82197
S'description'
p82198
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82199
sS'cpp_type'
p82200
S'std::vector<OutputName, std::allocator<OutputName> >'
p82201
sS'default'
p82202
S'none'
p82203
sS'name'
p82204
S'outputs'
p82205
sS'required'
p82206
I00
sS'group_name'
p82207
S'Outputs'
p82208
sa(dp82209
S'description'
p82210
S'The seed for the master random number generator\n'
p82211
sS'cpp_type'
p82212
S'unsigned int'
p82213
sS'default'
p82214
S'0'
p82215
sS'name'
p82216
S'seed'
p82217
sS'required'
p82218
I00
sS'group_name'
p82219
S'Advanced'
p82220
sa(dp82221
S'description'
p82222
S'Flag to indicate if third derivatives are needed\n'
p82223
sS'cpp_type'
p82224
S'bool'
p82225
sS'default'
p82226
g3
sS'name'
p82227
S'third_derivatives'
p82228
sS'required'
p82229
I00
sS'group_name'
p82230
Nsa(dp82231
S'description'
p82232
g3
sS'cpp_type'
p82233
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82234
sS'default'
p82235
S'SwitchingFunction3PhaseMaterial'
p82236
sS'name'
p82237
S'type'
p82238
sS'required'
p82239
I00
sS'group_name'
p82240
Nsa(dp82241
S'description'
p82242
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82243
sS'cpp_type'
p82244
S'bool'
p82245
sS'default'
p82246
S'0'
p82247
sS'name'
p82248
S'use_displaced_mesh'
p82249
sS'required'
p82250
I00
sS'group_name'
p82251
S'Advanced'
p82252
sasS'name'
p82253
S'/Materials/SwitchingFunction3PhaseMaterial'
p82254
sa(dp82255
S'description'
p82256
S'Helper material to provide h(eta) and its derivative in one of two polynomial forms.\\nSIMPLE: 3*eta^2-2*eta^3\\nHIGH: eta^3*(6*eta^2-15*eta+10)\n'
p82257
sS'subblocks'
p82258
NsS'parameters'
p82259
(lp82260
(dp82261
S'description'
p82262
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82263
sS'cpp_type'
p82264
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82265
sS'default'
p82266
g3
sS'name'
p82267
S'block'
p82268
sS'required'
p82269
I00
sS'group_name'
p82270
Nsa(dp82271
S'description'
p82272
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82273
sS'cpp_type'
p82274
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82275
sS'default'
p82276
g3
sS'name'
p82277
S'boundary'
p82278
sS'required'
p82279
I00
sS'group_name'
p82280
Nsa(dp82281
S'description'
p82282
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82283
sS'cpp_type'
p82284
S'bool'
p82285
sS'default'
p82286
S'1'
p82287
sS'name'
p82288
S'compute'
p82289
sS'required'
p82290
I00
sS'group_name'
p82291
Nsa(dp82292
S'description'
p82293
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82294
sS'cpp_type'
p82295
S'bool'
p82296
sS'default'
p82297
S'0'
p82298
sS'name'
p82299
S'constant_on_elem'
p82300
sS'required'
p82301
I00
sS'group_name'
p82302
S'Advanced'
p82303
sa(dp82304
S'description'
p82305
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82306
sS'cpp_type'
p82307
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82308
sS'default'
p82309
g3
sS'name'
p82310
S'control_tags'
p82311
sS'required'
p82312
I00
sS'group_name'
p82313
S'Advanced'
p82314
sa(dp82315
S'description'
p82316
S'Set the enabled status of the MooseObject.\n'
p82317
sS'cpp_type'
p82318
S'bool'
p82319
sS'default'
p82320
S'1'
p82321
sS'name'
p82322
S'enable'
p82323
sS'required'
p82324
I00
sS'group_name'
p82325
S'Advanced'
p82326
sa(dp82327
S'description'
p82328
S'Order parameter variable\n'
p82329
sS'cpp_type'
p82330
S'std::vector<VariableName>'
p82331
sS'default'
p82332
g3
sS'name'
p82333
S'eta'
p82334
sS'required'
p82335
I00
sS'group_name'
p82336
Nsa(dp82337
S'description'
p82338
S"actual name for f(eta), i.e. 'h' or 'g'\n"
p82339
sS'cpp_type'
p82340
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82341
sS'default'
p82342
S'h'
p82343
sS'name'
p82344
S'function_name'
p82345
sS'required'
p82346
I00
sS'group_name'
p82347
Nsa(dp82348
S'name'
p82349
S'h_order'
p82350
sS'cpp_type'
p82351
S'MooseEnum'
p82352
sS'default'
p82353
S'SIMPLE'
p82354
sS'description'
p82355
S'Polynomial order of the switching function h(eta)\n'
p82356
sS'required'
p82357
I00
sS'options'
p82358
S'SIMPLE HIGH'
p82359
sS'group_name'
p82360
Nsa(dp82361
S'description'
p82362
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82363
sS'cpp_type'
p82364
S'bool'
p82365
sS'default'
p82366
S'1'
p82367
sS'name'
p82368
S'implicit'
p82369
sS'required'
p82370
I00
sS'group_name'
p82371
S'Advanced'
p82372
sa(dp82373
S'description'
p82374
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82375
sS'cpp_type'
p82376
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82377
sS'default'
p82378
g3
sS'name'
p82379
S'output_properties'
p82380
sS'required'
p82381
I00
sS'group_name'
p82382
S'Outputs'
p82383
sa(dp82384
S'description'
p82385
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82386
sS'cpp_type'
p82387
S'std::vector<OutputName, std::allocator<OutputName> >'
p82388
sS'default'
p82389
S'none'
p82390
sS'name'
p82391
S'outputs'
p82392
sS'required'
p82393
I00
sS'group_name'
p82394
S'Outputs'
p82395
sa(dp82396
S'description'
p82397
S'The seed for the master random number generator\n'
p82398
sS'cpp_type'
p82399
S'unsigned int'
p82400
sS'default'
p82401
S'0'
p82402
sS'name'
p82403
S'seed'
p82404
sS'required'
p82405
I00
sS'group_name'
p82406
S'Advanced'
p82407
sa(dp82408
S'description'
p82409
g3
sS'cpp_type'
p82410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82411
sS'default'
p82412
S'SwitchingFunctionMaterial'
p82413
sS'name'
p82414
S'type'
p82415
sS'required'
p82416
I00
sS'group_name'
p82417
Nsa(dp82418
S'description'
p82419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82420
sS'cpp_type'
p82421
S'bool'
p82422
sS'default'
p82423
S'0'
p82424
sS'name'
p82425
S'use_displaced_mesh'
p82426
sS'required'
p82427
I00
sS'group_name'
p82428
S'Advanced'
p82429
sasS'name'
p82430
S'/Materials/SwitchingFunctionMaterial'
p82431
sa(dp82432
S'description'
p82433
S'Calculates the switching function for a given phase for a multi-phase, multi-order parameter model\n'
p82434
sS'subblocks'
p82435
NsS'parameters'
p82436
(lp82437
(dp82438
S'description'
p82439
S'Vector of all order parameters for all phases\n'
p82440
sS'cpp_type'
p82441
S'std::vector<VariableName>'
p82442
sS'default'
p82443
g3
sS'name'
p82444
S'all_etas'
p82445
sS'required'
p82446
I01
sS'group_name'
p82447
Nsa(dp82448
S'description'
p82449
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82450
sS'cpp_type'
p82451
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82452
sS'default'
p82453
g3
sS'name'
p82454
S'block'
p82455
sS'required'
p82456
I00
sS'group_name'
p82457
Nsa(dp82458
S'description'
p82459
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82460
sS'cpp_type'
p82461
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82462
sS'default'
p82463
g3
sS'name'
p82464
S'boundary'
p82465
sS'required'
p82466
I00
sS'group_name'
p82467
Nsa(dp82468
S'description'
p82469
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82470
sS'cpp_type'
p82471
S'bool'
p82472
sS'default'
p82473
S'1'
p82474
sS'name'
p82475
S'compute'
p82476
sS'required'
p82477
I00
sS'group_name'
p82478
Nsa(dp82479
S'description'
p82480
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82481
sS'cpp_type'
p82482
S'bool'
p82483
sS'default'
p82484
S'0'
p82485
sS'name'
p82486
S'constant_on_elem'
p82487
sS'required'
p82488
I00
sS'group_name'
p82489
S'Advanced'
p82490
sa(dp82491
S'description'
p82492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82493
sS'cpp_type'
p82494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82495
sS'default'
p82496
g3
sS'name'
p82497
S'control_tags'
p82498
sS'required'
p82499
I00
sS'group_name'
p82500
S'Advanced'
p82501
sa(dp82502
S'description'
p82503
S'Set the enabled status of the MooseObject.\n'
p82504
sS'cpp_type'
p82505
S'bool'
p82506
sS'default'
p82507
S'1'
p82508
sS'name'
p82509
S'enable'
p82510
sS'required'
p82511
I00
sS'group_name'
p82512
S'Advanced'
p82513
sa(dp82514
S'description'
p82515
S'Name of the switching function material property for the given phase\n'
p82516
sS'cpp_type'
p82517
S'MaterialPropertyName'
p82518
sS'default'
p82519
g3
sS'name'
p82520
S'h_name'
p82521
sS'required'
p82522
I01
sS'group_name'
p82523
Nsa(dp82524
S'description'
p82525
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82526
sS'cpp_type'
p82527
S'bool'
p82528
sS'default'
p82529
S'1'
p82530
sS'name'
p82531
S'implicit'
p82532
sS'required'
p82533
I00
sS'group_name'
p82534
S'Advanced'
p82535
sa(dp82536
S'description'
p82537
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82538
sS'cpp_type'
p82539
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82540
sS'default'
p82541
g3
sS'name'
p82542
S'output_properties'
p82543
sS'required'
p82544
I00
sS'group_name'
p82545
S'Outputs'
p82546
sa(dp82547
S'description'
p82548
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82549
sS'cpp_type'
p82550
S'std::vector<OutputName, std::allocator<OutputName> >'
p82551
sS'default'
p82552
S'none'
p82553
sS'name'
p82554
S'outputs'
p82555
sS'required'
p82556
I00
sS'group_name'
p82557
S'Outputs'
p82558
sa(dp82559
S'description'
p82560
S'Vector of order parameters for the given phase\n'
p82561
sS'cpp_type'
p82562
S'std::vector<VariableName>'
p82563
sS'default'
p82564
g3
sS'name'
p82565
S'phase_etas'
p82566
sS'required'
p82567
I01
sS'group_name'
p82568
Nsa(dp82569
S'description'
p82570
S'The seed for the master random number generator\n'
p82571
sS'cpp_type'
p82572
S'unsigned int'
p82573
sS'default'
p82574
S'0'
p82575
sS'name'
p82576
S'seed'
p82577
sS'required'
p82578
I00
sS'group_name'
p82579
S'Advanced'
p82580
sa(dp82581
S'description'
p82582
g3
sS'cpp_type'
p82583
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82584
sS'default'
p82585
S'SwitchingFunctionMultiPhaseMaterial'
p82586
sS'name'
p82587
S'type'
p82588
sS'required'
p82589
I00
sS'group_name'
p82590
Nsa(dp82591
S'description'
p82592
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82593
sS'cpp_type'
p82594
S'bool'
p82595
sS'default'
p82596
S'0'
p82597
sS'name'
p82598
S'use_displaced_mesh'
p82599
sS'required'
p82600
I00
sS'group_name'
p82601
S'Advanced'
p82602
sasS'name'
p82603
S'/Materials/SwitchingFunctionMultiPhaseMaterial'
p82604
sa(dp82605
S'description'
p82606
S'This class uses the discrete material in a radial return isotropic plasticity model.  This class is one of the basic radial return constitutive models, yet it can be used in conjunction with other creep and plasticity materials for more complex simulations.\n'
p82607
sS'subblocks'
p82608
NsS'parameters'
p82609
(lp82610
(dp82611
S'description'
p82612
S'Absolute convergence tolerance for newton iteration within the radial return material\n'
p82613
sS'cpp_type'
p82614
S'double'
p82615
sS'default'
p82616
S'1e-20'
p82617
sS'name'
p82618
S'absolute_tolerance'
p82619
sS'required'
p82620
I00
sS'group_name'
p82621
Nsa(dp82622
S'description'
p82623
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p82624
sS'cpp_type'
p82625
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82626
sS'default'
p82627
g3
sS'name'
p82628
S'base_name'
p82629
sS'required'
p82630
I00
sS'group_name'
p82631
Nsa(dp82632
S'description'
p82633
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82634
sS'cpp_type'
p82635
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82636
sS'default'
p82637
g3
sS'name'
p82638
S'block'
p82639
sS'required'
p82640
I00
sS'group_name'
p82641
Nsa(dp82642
S'description'
p82643
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82644
sS'cpp_type'
p82645
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82646
sS'default'
p82647
g3
sS'name'
p82648
S'boundary'
p82649
sS'required'
p82650
I00
sS'group_name'
p82651
Nsa(dp82652
S'description'
p82653
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82654
sS'cpp_type'
p82655
S'bool'
p82656
sS'default'
p82657
S'0'
p82658
sS'name'
p82659
S'constant_on_elem'
p82660
sS'required'
p82661
I00
sS'group_name'
p82662
S'Advanced'
p82663
sa(dp82664
S'description'
p82665
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82666
sS'cpp_type'
p82667
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82668
sS'default'
p82669
g3
sS'name'
p82670
S'control_tags'
p82671
sS'required'
p82672
I00
sS'group_name'
p82673
S'Advanced'
p82674
sa(dp82675
S'description'
p82676
S'Set the enabled status of the MooseObject.\n'
p82677
sS'cpp_type'
p82678
S'bool'
p82679
sS'default'
p82680
S'1'
p82681
sS'name'
p82682
S'enable'
p82683
sS'required'
p82684
I00
sS'group_name'
p82685
S'Advanced'
p82686
sa(dp82687
S'description'
p82688
S'List of functions of true stress as function of plastic strain at different temperatures\n'
p82689
sS'cpp_type'
p82690
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p82691
sS'default'
p82692
g3
sS'name'
p82693
S'hardening_functions'
p82694
sS'required'
p82695
I01
sS'group_name'
p82696
Nsa(dp82697
S'description'
p82698
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82699
sS'cpp_type'
p82700
S'bool'
p82701
sS'default'
p82702
S'1'
p82703
sS'name'
p82704
S'implicit'
p82705
sS'required'
p82706
I00
sS'group_name'
p82707
S'Advanced'
p82708
sa(dp82709
S'description'
p82710
S'Maximum number of newton iterations in the radial return material\n'
p82711
sS'cpp_type'
p82712
S'unsigned int'
p82713
sS'default'
p82714
S'30'
p82715
sS'name'
p82716
S'max_iterations'
p82717
sS'required'
p82718
I00
sS'group_name'
p82719
Nsa(dp82720
S'description'
p82721
S'Set true to output newton iteration information from the radial return material\n'
p82722
sS'cpp_type'
p82723
S'bool'
p82724
sS'default'
p82725
S'0'
p82726
sS'name'
p82727
S'output_iteration_info'
p82728
sS'required'
p82729
I00
sS'group_name'
p82730
Nsa(dp82731
S'description'
p82732
S'Set true to output the recompute material iteration information when a step fails\n'
p82733
sS'cpp_type'
p82734
S'bool'
p82735
sS'default'
p82736
S'0'
p82737
sS'name'
p82738
S'output_iteration_info_on_error'
p82739
sS'required'
p82740
I00
sS'group_name'
p82741
Nsa(dp82742
S'description'
p82743
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82744
sS'cpp_type'
p82745
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82746
sS'default'
p82747
g3
sS'name'
p82748
S'output_properties'
p82749
sS'required'
p82750
I00
sS'group_name'
p82751
S'Outputs'
p82752
sa(dp82753
S'description'
p82754
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82755
sS'cpp_type'
p82756
S'std::vector<OutputName, std::allocator<OutputName> >'
p82757
sS'default'
p82758
S'none'
p82759
sS'name'
p82760
S'outputs'
p82761
sS'required'
p82762
I00
sS'group_name'
p82763
S'Outputs'
p82764
sa(dp82765
S'description'
p82766
S'Relative convergence tolerance for the newton iteration within the radial return material\n'
p82767
sS'cpp_type'
p82768
S'double'
p82769
sS'default'
p82770
S'1e-08'
p82771
sS'name'
p82772
S'relative_tolerance'
p82773
sS'required'
p82774
I00
sS'group_name'
p82775
Nsa(dp82776
S'description'
p82777
S'The seed for the master random number generator\n'
p82778
sS'cpp_type'
p82779
S'unsigned int'
p82780
sS'default'
p82781
S'0'
p82782
sS'name'
p82783
S'seed'
p82784
sS'required'
p82785
I00
sS'group_name'
p82786
S'Advanced'
p82787
sa(dp82788
S'description'
p82789
S'Coupled Temperature\n'
p82790
sS'cpp_type'
p82791
S'std::vector<VariableName>'
p82792
sS'default'
p82793
S'0'
p82794
sS'name'
p82795
S'temperature'
p82796
sS'required'
p82797
I00
sS'group_name'
p82798
Nsa(dp82799
S'description'
p82800
S"List of temperatures corresponding to the functions listed in 'hardening_functions'\n"
p82801
sS'cpp_type'
p82802
S'std::vector<double, std::allocator<double> >'
p82803
sS'default'
p82804
g3
sS'name'
p82805
S'temperatures'
p82806
sS'required'
p82807
I01
sS'group_name'
p82808
Nsa(dp82809
S'description'
p82810
g3
sS'cpp_type'
p82811
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82812
sS'default'
p82813
S'TemperatureDependentHardeningStressUpdate'
p82814
sS'name'
p82815
S'type'
p82816
sS'required'
p82817
I00
sS'group_name'
p82818
Nsa(dp82819
S'description'
p82820
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82821
sS'cpp_type'
p82822
S'bool'
p82823
sS'default'
p82824
S'0'
p82825
sS'name'
p82826
S'use_displaced_mesh'
p82827
sS'required'
p82828
I00
sS'group_name'
p82829
S'Advanced'
p82830
sasS'name'
p82831
S'/Materials/TemperatureDependentHardeningStressUpdate'
p82832
sa(dp82833
S'description'
p82834
S'Free Energy contribution that penalizes more than two order parameters being non-zero\n'
p82835
sS'subblocks'
p82836
NsS'parameters'
p82837
(lp82838
(dp82839
S'description'
p82840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82841
sS'cpp_type'
p82842
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82843
sS'default'
p82844
g3
sS'name'
p82845
S'block'
p82846
sS'required'
p82847
I00
sS'group_name'
p82848
Nsa(dp82849
S'description'
p82850
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82851
sS'cpp_type'
p82852
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82853
sS'default'
p82854
g3
sS'name'
p82855
S'boundary'
p82856
sS'required'
p82857
I00
sS'group_name'
p82858
Nsa(dp82859
S'description'
p82860
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p82861
sS'cpp_type'
p82862
S'bool'
p82863
sS'default'
p82864
S'1'
p82865
sS'name'
p82866
S'compute'
p82867
sS'required'
p82868
I00
sS'group_name'
p82869
Nsa(dp82870
S'description'
p82871
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p82872
sS'cpp_type'
p82873
S'bool'
p82874
sS'default'
p82875
S'0'
p82876
sS'name'
p82877
S'constant_on_elem'
p82878
sS'required'
p82879
I00
sS'group_name'
p82880
S'Advanced'
p82881
sa(dp82882
S'description'
p82883
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82884
sS'cpp_type'
p82885
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82886
sS'default'
p82887
g3
sS'name'
p82888
S'control_tags'
p82889
sS'required'
p82890
I00
sS'group_name'
p82891
S'Advanced'
p82892
sa(dp82893
S'description'
p82894
S'Set the enabled status of the MooseObject.\n'
p82895
sS'cpp_type'
p82896
S'bool'
p82897
sS'default'
p82898
S'1'
p82899
sS'name'
p82900
S'enable'
p82901
sS'required'
p82902
I00
sS'group_name'
p82903
S'Advanced'
p82904
sa(dp82905
S'description'
p82906
S'eta_i order parameters, one for each h\n'
p82907
sS'cpp_type'
p82908
S'std::vector<VariableName>'
p82909
sS'default'
p82910
g3
sS'name'
p82911
S'etas'
p82912
sS'required'
p82913
I01
sS'group_name'
p82914
Nsa(dp82915
S'description'
p82916
S'actual name for g(eta_i)\n'
p82917
sS'cpp_type'
p82918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82919
sS'default'
p82920
S'g'
p82921
sS'name'
p82922
S'function_name'
p82923
sS'required'
p82924
I00
sS'group_name'
p82925
Nsa(dp82926
S'description'
p82927
S'Determines whether this object is calculated using an implicit or explicit form\n'
p82928
sS'cpp_type'
p82929
S'bool'
p82930
sS'default'
p82931
S'1'
p82932
sS'name'
p82933
S'implicit'
p82934
sS'required'
p82935
I00
sS'group_name'
p82936
S'Advanced'
p82937
sa(dp82938
S'description'
p82939
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82940
sS'cpp_type'
p82941
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82942
sS'default'
p82943
g3
sS'name'
p82944
S'output_properties'
p82945
sS'required'
p82946
I00
sS'group_name'
p82947
S'Outputs'
p82948
sa(dp82949
S'description'
p82950
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82951
sS'cpp_type'
p82952
S'std::vector<OutputName, std::allocator<OutputName> >'
p82953
sS'default'
p82954
S'none'
p82955
sS'name'
p82956
S'outputs'
p82957
sS'required'
p82958
I00
sS'group_name'
p82959
S'Outputs'
p82960
sa(dp82961
S'description'
p82962
S'The seed for the master random number generator\n'
p82963
sS'cpp_type'
p82964
S'unsigned int'
p82965
sS'default'
p82966
S'0'
p82967
sS'name'
p82968
S'seed'
p82969
sS'required'
p82970
I00
sS'group_name'
p82971
S'Advanced'
p82972
sa(dp82973
S'description'
p82974
g3
sS'cpp_type'
p82975
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82976
sS'default'
p82977
S'ThirdPhaseSuppressionMaterial'
p82978
sS'name'
p82979
S'type'
p82980
sS'required'
p82981
I00
sS'group_name'
p82982
Nsa(dp82983
S'description'
p82984
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82985
sS'cpp_type'
p82986
S'bool'
p82987
sS'default'
p82988
S'0'
p82989
sS'name'
p82990
S'use_displaced_mesh'
p82991
sS'required'
p82992
I00
sS'group_name'
p82993
S'Advanced'
p82994
sasS'name'
p82995
S'/Materials/ThirdPhaseSuppressionMaterial'
p82996
sa(dp82997
S'description'
p82998
g3
sS'subblocks'
p82999
NsS'parameters'
p83000
(lp83001
(dp83002
S'description'
p83003
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83004
sS'cpp_type'
p83005
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83006
sS'default'
p83007
g3
sS'name'
p83008
S'block'
p83009
sS'required'
p83010
I00
sS'group_name'
p83011
Nsa(dp83012
S'description'
p83013
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83014
sS'cpp_type'
p83015
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83016
sS'default'
p83017
g3
sS'name'
p83018
S'boundary'
p83019
sS'required'
p83020
I00
sS'group_name'
p83021
Nsa(dp83022
S'description'
p83023
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p83024
sS'cpp_type'
p83025
S'bool'
p83026
sS'default'
p83027
S'1'
p83028
sS'name'
p83029
S'compute'
p83030
sS'required'
p83031
I00
sS'group_name'
p83032
Nsa(dp83033
S'description'
p83034
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p83035
sS'cpp_type'
p83036
S'bool'
p83037
sS'default'
p83038
S'0'
p83039
sS'name'
p83040
S'constant_on_elem'
p83041
sS'required'
p83042
I00
sS'group_name'
p83043
S'Advanced'
p83044
sa(dp83045
S'description'
p83046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83047
sS'cpp_type'
p83048
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83049
sS'default'
p83050
g3
sS'name'
p83051
S'control_tags'
p83052
sS'required'
p83053
I00
sS'group_name'
p83054
S'Advanced'
p83055
sa(dp83056
S'description'
p83057
S'Set the enabled status of the MooseObject.\n'
p83058
sS'cpp_type'
p83059
S'bool'
p83060
sS'default'
p83061
S'1'
p83062
sS'name'
p83063
S'enable'
p83064
sS'required'
p83065
I00
sS'group_name'
p83066
S'Advanced'
p83067
sa(dp83068
S'description'
p83069
S'Determines whether this object is calculated using an implicit or explicit form\n'
p83070
sS'cpp_type'
p83071
S'bool'
p83072
sS'default'
p83073
S'1'
p83074
sS'name'
p83075
S'implicit'
p83076
sS'required'
p83077
I00
sS'group_name'
p83078
S'Advanced'
p83079
sa(dp83080
S'description'
p83081
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83082
sS'cpp_type'
p83083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83084
sS'default'
p83085
g3
sS'name'
p83086
S'output_properties'
p83087
sS'required'
p83088
I00
sS'group_name'
p83089
S'Outputs'
p83090
sa(dp83091
S'description'
p83092
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83093
sS'cpp_type'
p83094
S'std::vector<OutputName, std::allocator<OutputName> >'
p83095
sS'default'
p83096
S'none'
p83097
sS'name'
p83098
S'outputs'
p83099
sS'required'
p83100
I00
sS'group_name'
p83101
S'Outputs'
p83102
sa(dp83103
S'description'
p83104
S'Material property to store the current dt\n'
p83105
sS'cpp_type'
p83106
S'MaterialPropertyName'
p83107
sS'default'
p83108
S'dt'
p83109
sS'name'
p83110
S'prop_dt'
p83111
sS'required'
p83112
I00
sS'group_name'
p83113
Nsa(dp83114
S'description'
p83115
S'Material property to store the current time\n'
p83116
sS'cpp_type'
p83117
S'MaterialPropertyName'
p83118
sS'default'
p83119
S'time'
p83120
sS'name'
p83121
S'prop_time'
p83122
sS'required'
p83123
I00
sS'group_name'
p83124
Nsa(dp83125
S'description'
p83126
S'Material property to store the current time step number\n'
p83127
sS'cpp_type'
p83128
S'MaterialPropertyName'
p83129
sS'default'
p83130
S'time_step'
p83131
sS'name'
p83132
S'prop_time_step'
p83133
sS'required'
p83134
I00
sS'group_name'
p83135
Nsa(dp83136
S'description'
p83137
S'The seed for the master random number generator\n'
p83138
sS'cpp_type'
p83139
S'unsigned int'
p83140
sS'default'
p83141
S'0'
p83142
sS'name'
p83143
S'seed'
p83144
sS'required'
p83145
I00
sS'group_name'
p83146
S'Advanced'
p83147
sa(dp83148
S'description'
p83149
g3
sS'cpp_type'
p83150
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83151
sS'default'
p83152
S'TimeStepMaterial'
p83153
sS'name'
p83154
S'type'
p83155
sS'required'
p83156
I00
sS'group_name'
p83157
Nsa(dp83158
S'description'
p83159
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83160
sS'cpp_type'
p83161
S'bool'
p83162
sS'default'
p83163
S'0'
p83164
sS'name'
p83165
S'use_displaced_mesh'
p83166
sS'required'
p83167
I00
sS'group_name'
p83168
S'Advanced'
p83169
sasS'name'
p83170
S'/Materials/TimeStepMaterial'
p83171
sa(dp83172
S'description'
p83173
S'Compute a global stress in a two phase model\n'
p83174
sS'subblocks'
p83175
NsS'parameters'
p83176
(lp83177
(dp83178
S'description'
p83179
S'Base name for the Phase A strain.\n'
p83180
sS'cpp_type'
p83181
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83182
sS'default'
p83183
g3
sS'name'
p83184
S'base_A'
p83185
sS'required'
p83186
I01
sS'group_name'
p83187
Nsa(dp83188
S'description'
p83189
S'Base name for the Phase B strain.\n'
p83190
sS'cpp_type'
p83191
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83192
sS'default'
p83193
g3
sS'name'
p83194
S'base_B'
p83195
sS'required'
p83196
I01
sS'group_name'
p83197
Nsa(dp83198
S'description'
p83199
S'Base name for the computed global stress (optional).\n'
p83200
sS'cpp_type'
p83201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83202
sS'default'
p83203
g3
sS'name'
p83204
S'base_name'
p83205
sS'required'
p83206
I00
sS'group_name'
p83207
Nsa(dp83208
S'description'
p83209
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83210
sS'cpp_type'
p83211
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83212
sS'default'
p83213
g3
sS'name'
p83214
S'block'
p83215
sS'required'
p83216
I00
sS'group_name'
p83217
Nsa(dp83218
S'description'
p83219
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83220
sS'cpp_type'
p83221
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83222
sS'default'
p83223
g3
sS'name'
p83224
S'boundary'
p83225
sS'required'
p83226
I00
sS'group_name'
p83227
Nsa(dp83228
S'description'
p83229
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p83230
sS'cpp_type'
p83231
S'bool'
p83232
sS'default'
p83233
S'1'
p83234
sS'name'
p83235
S'compute'
p83236
sS'required'
p83237
I00
sS'group_name'
p83238
Nsa(dp83239
S'description'
p83240
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p83241
sS'cpp_type'
p83242
S'bool'
p83243
sS'default'
p83244
S'0'
p83245
sS'name'
p83246
S'constant_on_elem'
p83247
sS'required'
p83248
I00
sS'group_name'
p83249
S'Advanced'
p83250
sa(dp83251
S'description'
p83252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83253
sS'cpp_type'
p83254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83255
sS'default'
p83256
g3
sS'name'
p83257
S'control_tags'
p83258
sS'required'
p83259
I00
sS'group_name'
p83260
S'Advanced'
p83261
sa(dp83262
S'description'
p83263
S'Set the enabled status of the MooseObject.\n'
p83264
sS'cpp_type'
p83265
S'bool'
p83266
sS'default'
p83267
S'1'
p83268
sS'name'
p83269
S'enable'
p83270
sS'required'
p83271
I00
sS'group_name'
p83272
S'Advanced'
p83273
sa(dp83274
S'description'
p83275
S'Switching Function Material that provides h(eta)\n'
p83276
sS'cpp_type'
p83277
S'MaterialPropertyName'
p83278
sS'default'
p83279
S'h'
p83280
sS'name'
p83281
S'h'
p83282
sS'required'
p83283
I00
sS'group_name'
p83284
Nsa(dp83285
S'description'
p83286
S'Determines whether this object is calculated using an implicit or explicit form\n'
p83287
sS'cpp_type'
p83288
S'bool'
p83289
sS'default'
p83290
S'1'
p83291
sS'name'
p83292
S'implicit'
p83293
sS'required'
p83294
I00
sS'group_name'
p83295
S'Advanced'
p83296
sa(dp83297
S'description'
p83298
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83299
sS'cpp_type'
p83300
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83301
sS'default'
p83302
g3
sS'name'
p83303
S'output_properties'
p83304
sS'required'
p83305
I00
sS'group_name'
p83306
S'Outputs'
p83307
sa(dp83308
S'description'
p83309
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83310
sS'cpp_type'
p83311
S'std::vector<OutputName, std::allocator<OutputName> >'
p83312
sS'default'
p83313
S'none'
p83314
sS'name'
p83315
S'outputs'
p83316
sS'required'
p83317
I00
sS'group_name'
p83318
S'Outputs'
p83319
sa(dp83320
S'description'
p83321
S'The seed for the master random number generator\n'
p83322
sS'cpp_type'
p83323
S'unsigned int'
p83324
sS'default'
p83325
S'0'
p83326
sS'name'
p83327
S'seed'
p83328
sS'required'
p83329
I00
sS'group_name'
p83330
S'Advanced'
p83331
sa(dp83332
S'description'
p83333
g3
sS'cpp_type'
p83334
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83335
sS'default'
p83336
S'TwoPhaseStressMaterial'
p83337
sS'name'
p83338
S'type'
p83339
sS'required'
p83340
I00
sS'group_name'
p83341
Nsa(dp83342
S'description'
p83343
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83344
sS'cpp_type'
p83345
S'bool'
p83346
sS'default'
p83347
S'0'
p83348
sS'name'
p83349
S'use_displaced_mesh'
p83350
sS'required'
p83351
I00
sS'group_name'
p83352
S'Advanced'
p83353
sasS'name'
p83354
S'/Materials/TwoPhaseStressMaterial'
p83355
sa(dp83356
S'description'
p83357
g3
sS'subblocks'
p83358
NsS'parameters'
p83359
(lp83360
(dp83361
S'description'
p83362
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83363
sS'cpp_type'
p83364
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83365
sS'default'
p83366
g3
sS'name'
p83367
S'block'
p83368
sS'required'
p83369
I00
sS'group_name'
p83370
Nsa(dp83371
S'description'
p83372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83373
sS'cpp_type'
p83374
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83375
sS'default'
p83376
g3
sS'name'
p83377
S'boundary'
p83378
sS'required'
p83379
I00
sS'group_name'
p83380
Nsa(dp83381
S'description'
p83382
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p83383
sS'cpp_type'
p83384
S'bool'
p83385
sS'default'
p83386
S'1'
p83387
sS'name'
p83388
S'compute'
p83389
sS'required'
p83390
I00
sS'group_name'
p83391
Nsa(dp83392
S'description'
p83393
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p83394
sS'cpp_type'
p83395
S'bool'
p83396
sS'default'
p83397
S'0'
p83398
sS'name'
p83399
S'constant_on_elem'
p83400
sS'required'
p83401
I00
sS'group_name'
p83402
S'Advanced'
p83403
sa(dp83404
S'description'
p83405
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83406
sS'cpp_type'
p83407
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83408
sS'default'
p83409
g3
sS'name'
p83410
S'control_tags'
p83411
sS'required'
p83412
I00
sS'group_name'
p83413
S'Advanced'
p83414
sa(dp83415
S'description'
p83416
S'Set the enabled status of the MooseObject.\n'
p83417
sS'cpp_type'
p83418
S'bool'
p83419
sS'default'
p83420
S'1'
p83421
sS'name'
p83422
S'enable'
p83423
sS'required'
p83424
I00
sS'group_name'
p83425
S'Advanced'
p83426
sa(dp83427
S'description'
p83428
S'Determines whether this object is calculated using an implicit or explicit form\n'
p83429
sS'cpp_type'
p83430
S'bool'
p83431
sS'default'
p83432
S'1'
p83433
sS'name'
p83434
S'implicit'
p83435
sS'required'
p83436
I00
sS'group_name'
p83437
S'Advanced'
p83438
sa(dp83439
S'description'
p83440
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83441
sS'cpp_type'
p83442
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83443
sS'default'
p83444
g3
sS'name'
p83445
S'output_properties'
p83446
sS'required'
p83447
I00
sS'group_name'
p83448
S'Outputs'
p83449
sa(dp83450
S'description'
p83451
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83452
sS'cpp_type'
p83453
S'std::vector<OutputName, std::allocator<OutputName> >'
p83454
sS'default'
p83455
S'none'
p83456
sS'name'
p83457
S'outputs'
p83458
sS'required'
p83459
I00
sS'group_name'
p83460
S'Outputs'
p83461
sa(dp83462
S'description'
p83463
S'Material property to store the gradient magnitude in\n'
p83464
sS'cpp_type'
p83465
S'MaterialPropertyName'
p83466
sS'default'
p83467
g3
sS'name'
p83468
S'prop'
p83469
sS'required'
p83470
I01
sS'group_name'
p83471
Nsa(dp83472
S'description'
p83473
S'The seed for the master random number generator\n'
p83474
sS'cpp_type'
p83475
S'unsigned int'
p83476
sS'default'
p83477
S'0'
p83478
sS'name'
p83479
S'seed'
p83480
sS'required'
p83481
I00
sS'group_name'
p83482
S'Advanced'
p83483
sa(dp83484
S'description'
p83485
g3
sS'cpp_type'
p83486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83487
sS'default'
p83488
S'VariableGradientMaterial'
p83489
sS'name'
p83490
S'type'
p83491
sS'required'
p83492
I00
sS'group_name'
p83493
Nsa(dp83494
S'description'
p83495
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83496
sS'cpp_type'
p83497
S'bool'
p83498
sS'default'
p83499
S'0'
p83500
sS'name'
p83501
S'use_displaced_mesh'
p83502
sS'required'
p83503
I00
sS'group_name'
p83504
S'Advanced'
p83505
sa(dp83506
S'description'
p83507
S'Variable to compute the gradient magnitude of\n'
p83508
sS'cpp_type'
p83509
S'std::vector<VariableName>'
p83510
sS'default'
p83511
g3
sS'name'
p83512
S'variable'
p83513
sS'required'
p83514
I00
sS'group_name'
p83515
NsasS'name'
p83516
S'/Materials/VariableGradientMaterial'
p83517
sa(dp83518
S'description'
p83519
S'Transforms stress with volumetric term from previous configuration to this configuration\n'
p83520
sS'subblocks'
p83521
NsS'parameters'
p83522
(lp83523
(dp83524
S'description'
p83525
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83526
sS'cpp_type'
p83527
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83528
sS'default'
p83529
g3
sS'name'
p83530
S'block'
p83531
sS'required'
p83532
I00
sS'group_name'
p83533
Nsa(dp83534
S'description'
p83535
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83536
sS'cpp_type'
p83537
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83538
sS'default'
p83539
g3
sS'name'
p83540
S'boundary'
p83541
sS'required'
p83542
I00
sS'group_name'
p83543
Nsa(dp83544
S'description'
p83545
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p83546
sS'cpp_type'
p83547
S'bool'
p83548
sS'default'
p83549
S'1'
p83550
sS'name'
p83551
S'compute'
p83552
sS'required'
p83553
I00
sS'group_name'
p83554
Nsa(dp83555
S'description'
p83556
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p83557
sS'cpp_type'
p83558
S'bool'
p83559
sS'default'
p83560
S'0'
p83561
sS'name'
p83562
S'constant_on_elem'
p83563
sS'required'
p83564
I00
sS'group_name'
p83565
S'Advanced'
p83566
sa(dp83567
S'description'
p83568
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83569
sS'cpp_type'
p83570
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83571
sS'default'
p83572
g3
sS'name'
p83573
S'control_tags'
p83574
sS'required'
p83575
I00
sS'group_name'
p83576
S'Advanced'
p83577
sa(dp83578
S'description'
p83579
S'Name of deformation gradient variable\n'
p83580
sS'cpp_type'
p83581
S'MaterialPropertyName'
p83582
sS'default'
p83583
g3
sS'name'
p83584
S'deform_grad_name'
p83585
sS'required'
p83586
I01
sS'group_name'
p83587
Nsa(dp83588
S'description'
p83589
S'Set the enabled status of the MooseObject.\n'
p83590
sS'cpp_type'
p83591
S'bool'
p83592
sS'default'
p83593
S'1'
p83594
sS'name'
p83595
S'enable'
p83596
sS'required'
p83597
I00
sS'group_name'
p83598
S'Advanced'
p83599
sa(dp83600
S'description'
p83601
S'Determines whether this object is calculated using an implicit or explicit form\n'
p83602
sS'cpp_type'
p83603
S'bool'
p83604
sS'default'
p83605
S'1'
p83606
sS'name'
p83607
S'implicit'
p83608
sS'required'
p83609
I00
sS'group_name'
p83610
S'Advanced'
p83611
sa(dp83612
S'description'
p83613
S'Name of jacobian variable\n'
p83614
sS'cpp_type'
p83615
S'MaterialPropertyName'
p83616
sS'default'
p83617
g3
sS'name'
p83618
S'jacobian_name'
p83619
sS'required'
p83620
I00
sS'group_name'
p83621
Nsa(dp83622
S'description'
p83623
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83624
sS'cpp_type'
p83625
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83626
sS'default'
p83627
g3
sS'name'
p83628
S'output_properties'
p83629
sS'required'
p83630
I00
sS'group_name'
p83631
S'Outputs'
p83632
sa(dp83633
S'description'
p83634
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83635
sS'cpp_type'
p83636
S'std::vector<OutputName, std::allocator<OutputName> >'
p83637
sS'default'
p83638
S'none'
p83639
sS'name'
p83640
S'outputs'
p83641
sS'required'
p83642
I00
sS'group_name'
p83643
S'Outputs'
p83644
sa(dp83645
S'description'
p83646
S'Name of jacobian variable from previous config.\n'
p83647
sS'cpp_type'
p83648
S'MaterialPropertyName'
p83649
sS'default'
p83650
g3
sS'name'
p83651
S'pre_jacobian_name'
p83652
sS'required'
p83653
I00
sS'group_name'
p83654
Nsa(dp83655
S'description'
p83656
S'Name of stress variable from previous config.\n'
p83657
sS'cpp_type'
p83658
S'MaterialPropertyName'
p83659
sS'default'
p83660
g3
sS'name'
p83661
S'pre_stress_name'
p83662
sS'required'
p83663
I01
sS'group_name'
p83664
Nsa(dp83665
S'description'
p83666
S'The seed for the master random number generator\n'
p83667
sS'cpp_type'
p83668
S'unsigned int'
p83669
sS'default'
p83670
S'0'
p83671
sS'name'
p83672
S'seed'
p83673
sS'required'
p83674
I00
sS'group_name'
p83675
S'Advanced'
p83676
sa(dp83677
S'description'
p83678
S'Name of stress variable\n'
p83679
sS'cpp_type'
p83680
S'MaterialPropertyName'
p83681
sS'default'
p83682
g3
sS'name'
p83683
S'stress_name'
p83684
sS'required'
p83685
I01
sS'group_name'
p83686
Nsa(dp83687
S'description'
p83688
g3
sS'cpp_type'
p83689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83690
sS'default'
p83691
S'VolumeDeformGradCorrectedStress'
p83692
sS'name'
p83693
S'type'
p83694
sS'required'
p83695
I00
sS'group_name'
p83696
Nsa(dp83697
S'description'
p83698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83699
sS'cpp_type'
p83700
S'bool'
p83701
sS'default'
p83702
S'0'
p83703
sS'name'
p83704
S'use_displaced_mesh'
p83705
sS'required'
p83706
I00
sS'group_name'
p83707
S'Advanced'
p83708
sasS'name'
p83709
S'/Materials/VolumeDeformGradCorrectedStress'
p83710
sasS'parameters'
p83711
NsS'name'
p83712
S'/Materials'
p83713
sa(dp83714
S'description'
p83715
g3
sS'subblocks'
p83716
(lp83717
(dp83718
S'description'
p83719
g3
sS'subblocks'
p83720
(lp83721
(dp83722
S'description'
p83723
S'Mesh generated from a specified DREAM.3D EBSD data file.\n'
p83724
sS'subblocks'
p83725
NsS'parameters'
p83726
(lp83727
(dp83728
S'description'
p83729
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p83730
sS'cpp_type'
p83731
S'bool'
p83732
sS'default'
p83733
S'1'
p83734
sS'name'
p83735
S'allow_renumbering'
p83736
sS'required'
p83737
I00
sS'group_name'
p83738
Nsa(dp83739
S'description'
p83740
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p83741
sS'cpp_type'
p83742
S'double'
p83743
sS'default'
p83744
S'1'
p83745
sS'name'
p83746
S'bias_x'
p83747
sS'required'
p83748
I00
sS'group_name'
p83749
Nsa(dp83750
S'description'
p83751
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p83752
sS'cpp_type'
p83753
S'double'
p83754
sS'default'
p83755
S'1'
p83756
sS'name'
p83757
S'bias_y'
p83758
sS'required'
p83759
I00
sS'group_name'
p83760
Nsa(dp83761
S'description'
p83762
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p83763
sS'cpp_type'
p83764
S'double'
p83765
sS'default'
p83766
S'1'
p83767
sS'name'
p83768
S'bias_z'
p83769
sS'required'
p83770
I00
sS'group_name'
p83771
Nsa(dp83772
S'name'
p83773
S'centroid_partitioner_direction'
p83774
sS'cpp_type'
p83775
S'MooseEnum'
p83776
sS'default'
p83777
g3
sS'description'
p83778
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p83779
sS'required'
p83780
I00
sS'options'
p83781
S'x y z radial'
p83782
sS'group_name'
p83783
S'Partitioning'
p83784
sa(dp83785
S'description'
p83786
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p83787
sS'cpp_type'
p83788
S'bool'
p83789
sS'default'
p83790
S'1'
p83791
sS'name'
p83792
S'construct_node_list_from_side_list'
p83793
sS'required'
p83794
I00
sS'group_name'
p83795
S'Advanced'
p83796
sa(dp83797
S'description'
p83798
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83799
sS'cpp_type'
p83800
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83801
sS'default'
p83802
g3
sS'name'
p83803
S'control_tags'
p83804
sS'required'
p83805
I00
sS'group_name'
p83806
S'Advanced'
p83807
sa(dp83808
S'name'
p83809
S'distribution'
p83810
sS'cpp_type'
p83811
S'MooseEnum'
p83812
sS'default'
p83813
S'DEFAULT'
p83814
sS'description'
p83815
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p83816
sS'required'
p83817
I00
sS'options'
p83818
S'PARALLEL SERIAL DEFAULT'
p83819
sS'group_name'
p83820
Nsa(dp83821
S'name'
p83822
S'elem_type'
p83823
sS'cpp_type'
p83824
S'MooseEnum'
p83825
sS'default'
p83826
g3
sS'description'
p83827
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p83828
sS'required'
p83829
I00
sS'options'
p83830
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p83831
sS'group_name'
p83832
Nsa(dp83833
S'description'
p83834
S'Set the enabled status of the MooseObject.\n'
p83835
sS'cpp_type'
p83836
S'bool'
p83837
sS'default'
p83838
S'1'
p83839
sS'name'
p83840
S'enable'
p83841
sS'required'
p83842
I00
sS'group_name'
p83843
S'Advanced'
p83844
sa(dp83845
S'description'
p83846
S'The name of the file containing the EBSD data\n'
p83847
sS'cpp_type'
p83848
S'FileName'
p83849
sS'default'
p83850
g3
sS'name'
p83851
S'filename'
p83852
sS'required'
p83853
I01
sS'group_name'
p83854
Nsa(dp83855
S'description'
p83856
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p83857
sS'cpp_type'
p83858
S'bool'
p83859
sS'default'
p83860
S'0'
p83861
sS'name'
p83862
S'gauss_lobatto_grid'
p83863
sS'required'
p83864
I00
sS'group_name'
p83865
Nsa(dp83866
S'description'
p83867
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83868
sS'cpp_type'
p83869
S'bool'
p83870
sS'default'
p83871
S'0'
p83872
sS'name'
p83873
S'ghost_point_neighbors'
p83874
sS'required'
p83875
I00
sS'group_name'
p83876
S'Advanced'
p83877
sa(dp83878
S'description'
p83879
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p83880
sS'cpp_type'
p83881
S'bool'
p83882
sS'default'
p83883
S'0'
p83884
sS'name'
p83885
S'nemesis'
p83886
sS'required'
p83887
I00
sS'group_name'
p83888
S'Advanced'
p83889
sa(dp83890
S'description'
p83891
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p83892
sS'cpp_type'
p83893
S'unsigned short'
p83894
sS'default'
p83895
S'1'
p83896
sS'name'
p83897
S'num_ghosted_layers'
p83898
sS'required'
p83899
I00
sS'group_name'
p83900
S'Advanced'
p83901
sa(dp83902
S'name'
p83903
S'parallel_type'
p83904
sS'cpp_type'
p83905
S'MooseEnum'
p83906
sS'default'
p83907
S'DEFAULT'
p83908
sS'description'
p83909
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p83910
sS'required'
p83911
I00
sS'options'
p83912
S'DISTRIBUTED REPLICATED DEFAULT'
p83913
sS'group_name'
p83914
Nsa(dp83915
S'name'
p83916
S'partitioner'
p83917
sS'cpp_type'
p83918
S'MooseEnum'
p83919
sS'default'
p83920
S'default'
p83921
sS'description'
p83922
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p83923
sS'required'
p83924
I00
sS'options'
p83925
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p83926
sS'group_name'
p83927
S'Partitioning'
p83928
sa(dp83929
S'name'
p83930
S'patch_update_strategy'
p83931
sS'cpp_type'
p83932
S'MooseEnum'
p83933
sS'default'
p83934
S'never'
p83935
sS'description'
p83936
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p83937
sS'required'
p83938
I00
sS'options'
p83939
S'never always auto'
p83940
sS'group_name'
p83941
S'Advanced'
p83942
sa(dp83943
S'description'
p83944
g3
sS'cpp_type'
p83945
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83946
sS'default'
p83947
S'EBSDMesh'
p83948
sS'name'
p83949
S'type'
p83950
sS'required'
p83951
I00
sS'group_name'
p83952
Nsa(dp83953
S'description'
p83954
S'Number of coarsening levels available in adaptive mesh refinement.\n'
p83955
sS'cpp_type'
p83956
S'unsigned int'
p83957
sS'default'
p83958
S'0'
p83959
sS'name'
p83960
S'uniform_refine'
p83961
sS'required'
p83962
I00
sS'group_name'
p83963
NsasS'name'
p83964
S'/Mesh/<type>/EBSDMesh'
p83965
sa(dp83966
S'description'
p83967
S'Read a mesh from a file.\n'
p83968
sS'subblocks'
p83969
NsS'parameters'
p83970
(lp83971
(dp83972
S'description'
p83973
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p83974
sS'cpp_type'
p83975
S'bool'
p83976
sS'default'
p83977
S'1'
p83978
sS'name'
p83979
S'allow_renumbering'
p83980
sS'required'
p83981
I00
sS'group_name'
p83982
Nsa(dp83983
S'name'
p83984
S'centroid_partitioner_direction'
p83985
sS'cpp_type'
p83986
S'MooseEnum'
p83987
sS'default'
p83988
g3
sS'description'
p83989
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p83990
sS'required'
p83991
I00
sS'options'
p83992
S'x y z radial'
p83993
sS'group_name'
p83994
S'Partitioning'
p83995
sa(dp83996
S'description'
p83997
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p83998
sS'cpp_type'
p83999
S'bool'
p84000
sS'default'
p84001
S'1'
p84002
sS'name'
p84003
S'construct_node_list_from_side_list'
p84004
sS'required'
p84005
I00
sS'group_name'
p84006
S'Advanced'
p84007
sa(dp84008
S'description'
p84009
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84010
sS'cpp_type'
p84011
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84012
sS'default'
p84013
g3
sS'name'
p84014
S'control_tags'
p84015
sS'required'
p84016
I00
sS'group_name'
p84017
S'Advanced'
p84018
sa(dp84019
S'name'
p84020
S'dim'
p84021
sS'cpp_type'
p84022
S'MooseEnum'
p84023
sS'default'
p84024
S'1'
p84025
sS'description'
p84026
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p84027
sS'required'
p84028
I00
sS'options'
p84029
S'1 2 3'
p84030
sS'group_name'
p84031
S'Advanced'
p84032
sa(dp84033
S'name'
p84034
S'distribution'
p84035
sS'cpp_type'
p84036
S'MooseEnum'
p84037
sS'default'
p84038
S'DEFAULT'
p84039
sS'description'
p84040
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84041
sS'required'
p84042
I00
sS'options'
p84043
S'PARALLEL SERIAL DEFAULT'
p84044
sS'group_name'
p84045
Nsa(dp84046
S'description'
p84047
S'Set the enabled status of the MooseObject.\n'
p84048
sS'cpp_type'
p84049
S'bool'
p84050
sS'default'
p84051
S'1'
p84052
sS'name'
p84053
S'enable'
p84054
sS'required'
p84055
I00
sS'group_name'
p84056
S'Advanced'
p84057
sa(dp84058
S'description'
p84059
S'The name of the mesh file to read\n'
p84060
sS'cpp_type'
p84061
S'MeshFileName'
p84062
sS'default'
p84063
g3
sS'name'
p84064
S'file'
p84065
sS'required'
p84066
I01
sS'group_name'
p84067
Nsa(dp84068
S'description'
p84069
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84070
sS'cpp_type'
p84071
S'bool'
p84072
sS'default'
p84073
S'0'
p84074
sS'name'
p84075
S'ghost_point_neighbors'
p84076
sS'required'
p84077
I00
sS'group_name'
p84078
S'Advanced'
p84079
sa(dp84080
S'description'
p84081
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p84082
sS'cpp_type'
p84083
S'bool'
p84084
sS'default'
p84085
S'0'
p84086
sS'name'
p84087
S'nemesis'
p84088
sS'required'
p84089
I00
sS'group_name'
p84090
S'Advanced'
p84091
sa(dp84092
S'description'
p84093
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84094
sS'cpp_type'
p84095
S'unsigned short'
p84096
sS'default'
p84097
S'1'
p84098
sS'name'
p84099
S'num_ghosted_layers'
p84100
sS'required'
p84101
I00
sS'group_name'
p84102
S'Advanced'
p84103
sa(dp84104
S'name'
p84105
S'parallel_type'
p84106
sS'cpp_type'
p84107
S'MooseEnum'
p84108
sS'default'
p84109
S'DEFAULT'
p84110
sS'description'
p84111
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p84112
sS'required'
p84113
I00
sS'options'
p84114
S'DISTRIBUTED REPLICATED DEFAULT'
p84115
sS'group_name'
p84116
Nsa(dp84117
S'name'
p84118
S'partitioner'
p84119
sS'cpp_type'
p84120
S'MooseEnum'
p84121
sS'default'
p84122
S'default'
p84123
sS'description'
p84124
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p84125
sS'required'
p84126
I00
sS'options'
p84127
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p84128
sS'group_name'
p84129
S'Partitioning'
p84130
sa(dp84131
S'name'
p84132
S'patch_update_strategy'
p84133
sS'cpp_type'
p84134
S'MooseEnum'
p84135
sS'default'
p84136
S'never'
p84137
sS'description'
p84138
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p84139
sS'required'
p84140
I00
sS'options'
p84141
S'never always auto'
p84142
sS'group_name'
p84143
S'Advanced'
p84144
sa(dp84145
S'description'
p84146
g3
sS'cpp_type'
p84147
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84148
sS'default'
p84149
S'FileMesh'
p84150
sS'name'
p84151
S'type'
p84152
sS'required'
p84153
I00
sS'group_name'
p84154
NsasS'name'
p84155
S'/Mesh/<type>/FileMesh'
p84156
sa(dp84157
S'description'
p84158
S'Create a line, square, or cube mesh with uniformly spaced or biased elements.\n'
p84159
sS'subblocks'
p84160
NsS'parameters'
p84161
(lp84162
(dp84163
S'description'
p84164
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p84165
sS'cpp_type'
p84166
S'bool'
p84167
sS'default'
p84168
S'1'
p84169
sS'name'
p84170
S'allow_renumbering'
p84171
sS'required'
p84172
I00
sS'group_name'
p84173
Nsa(dp84174
S'description'
p84175
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p84176
sS'cpp_type'
p84177
S'double'
p84178
sS'default'
p84179
S'1'
p84180
sS'name'
p84181
S'bias_x'
p84182
sS'required'
p84183
I00
sS'group_name'
p84184
Nsa(dp84185
S'description'
p84186
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p84187
sS'cpp_type'
p84188
S'double'
p84189
sS'default'
p84190
S'1'
p84191
sS'name'
p84192
S'bias_y'
p84193
sS'required'
p84194
I00
sS'group_name'
p84195
Nsa(dp84196
S'description'
p84197
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p84198
sS'cpp_type'
p84199
S'double'
p84200
sS'default'
p84201
S'1'
p84202
sS'name'
p84203
S'bias_z'
p84204
sS'required'
p84205
I00
sS'group_name'
p84206
Nsa(dp84207
S'name'
p84208
S'centroid_partitioner_direction'
p84209
sS'cpp_type'
p84210
S'MooseEnum'
p84211
sS'default'
p84212
g3
sS'description'
p84213
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p84214
sS'required'
p84215
I00
sS'options'
p84216
S'x y z radial'
p84217
sS'group_name'
p84218
S'Partitioning'
p84219
sa(dp84220
S'description'
p84221
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84222
sS'cpp_type'
p84223
S'bool'
p84224
sS'default'
p84225
S'1'
p84226
sS'name'
p84227
S'construct_node_list_from_side_list'
p84228
sS'required'
p84229
I00
sS'group_name'
p84230
S'Advanced'
p84231
sa(dp84232
S'description'
p84233
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84234
sS'cpp_type'
p84235
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84236
sS'default'
p84237
g3
sS'name'
p84238
S'control_tags'
p84239
sS'required'
p84240
I00
sS'group_name'
p84241
S'Advanced'
p84242
sa(dp84243
S'name'
p84244
S'dim'
p84245
sS'cpp_type'
p84246
S'MooseEnum'
p84247
sS'default'
p84248
g3
sS'description'
p84249
S'The dimension of the mesh to be generated\n'
p84250
sS'required'
p84251
I01
sS'options'
p84252
S'1 2 3'
p84253
sS'group_name'
p84254
S'Main'
p84255
sa(dp84256
S'name'
p84257
S'distribution'
p84258
sS'cpp_type'
p84259
S'MooseEnum'
p84260
sS'default'
p84261
S'DEFAULT'
p84262
sS'description'
p84263
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84264
sS'required'
p84265
I00
sS'options'
p84266
S'PARALLEL SERIAL DEFAULT'
p84267
sS'group_name'
p84268
Nsa(dp84269
S'name'
p84270
S'elem_type'
p84271
sS'cpp_type'
p84272
S'MooseEnum'
p84273
sS'default'
p84274
g3
sS'description'
p84275
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p84276
sS'required'
p84277
I00
sS'options'
p84278
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p84279
sS'group_name'
p84280
Nsa(dp84281
S'description'
p84282
S'Set the enabled status of the MooseObject.\n'
p84283
sS'cpp_type'
p84284
S'bool'
p84285
sS'default'
p84286
S'1'
p84287
sS'name'
p84288
S'enable'
p84289
sS'required'
p84290
I00
sS'group_name'
p84291
S'Advanced'
p84292
sa(dp84293
S'description'
p84294
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p84295
sS'cpp_type'
p84296
S'bool'
p84297
sS'default'
p84298
S'0'
p84299
sS'name'
p84300
S'gauss_lobatto_grid'
p84301
sS'required'
p84302
I00
sS'group_name'
p84303
Nsa(dp84304
S'description'
p84305
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84306
sS'cpp_type'
p84307
S'bool'
p84308
sS'default'
p84309
S'0'
p84310
sS'name'
p84311
S'ghost_point_neighbors'
p84312
sS'required'
p84313
I00
sS'group_name'
p84314
S'Advanced'
p84315
sa(dp84316
S'description'
p84317
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p84318
sS'cpp_type'
p84319
S'bool'
p84320
sS'default'
p84321
S'0'
p84322
sS'name'
p84323
S'nemesis'
p84324
sS'required'
p84325
I00
sS'group_name'
p84326
S'Advanced'
p84327
sa(dp84328
S'description'
p84329
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84330
sS'cpp_type'
p84331
S'unsigned short'
p84332
sS'default'
p84333
S'1'
p84334
sS'name'
p84335
S'num_ghosted_layers'
p84336
sS'required'
p84337
I00
sS'group_name'
p84338
S'Advanced'
p84339
sa(dp84340
S'description'
p84341
S'Number of elements in the X direction\n'
p84342
sS'cpp_type'
p84343
S'unsigned int'
p84344
sS'default'
p84345
S'1'
p84346
sS'name'
p84347
S'nx'
p84348
sS'required'
p84349
I00
sS'group_name'
p84350
Nsa(dp84351
S'description'
p84352
S'Number of elements in the Y direction\n'
p84353
sS'cpp_type'
p84354
S'unsigned int'
p84355
sS'default'
p84356
S'1'
p84357
sS'name'
p84358
S'ny'
p84359
sS'required'
p84360
I00
sS'group_name'
p84361
Nsa(dp84362
S'description'
p84363
S'Number of elements in the Z direction\n'
p84364
sS'cpp_type'
p84365
S'unsigned int'
p84366
sS'default'
p84367
S'1'
p84368
sS'name'
p84369
S'nz'
p84370
sS'required'
p84371
I00
sS'group_name'
p84372
Nsa(dp84373
S'name'
p84374
S'parallel_type'
p84375
sS'cpp_type'
p84376
S'MooseEnum'
p84377
sS'default'
p84378
S'DEFAULT'
p84379
sS'description'
p84380
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p84381
sS'required'
p84382
I00
sS'options'
p84383
S'DISTRIBUTED REPLICATED DEFAULT'
p84384
sS'group_name'
p84385
Nsa(dp84386
S'name'
p84387
S'partitioner'
p84388
sS'cpp_type'
p84389
S'MooseEnum'
p84390
sS'default'
p84391
S'default'
p84392
sS'description'
p84393
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p84394
sS'required'
p84395
I00
sS'options'
p84396
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p84397
sS'group_name'
p84398
S'Partitioning'
p84399
sa(dp84400
S'name'
p84401
S'patch_update_strategy'
p84402
sS'cpp_type'
p84403
S'MooseEnum'
p84404
sS'default'
p84405
S'never'
p84406
sS'description'
p84407
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p84408
sS'required'
p84409
I00
sS'options'
p84410
S'never always auto'
p84411
sS'group_name'
p84412
S'Advanced'
p84413
sa(dp84414
S'description'
p84415
g3
sS'cpp_type'
p84416
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84417
sS'default'
p84418
S'GeneratedMesh'
p84419
sS'name'
p84420
S'type'
p84421
sS'required'
p84422
I00
sS'group_name'
p84423
Nsa(dp84424
S'description'
p84425
S'Upper X Coordinate of the generated mesh\n'
p84426
sS'cpp_type'
p84427
S'double'
p84428
sS'default'
p84429
S'1'
p84430
sS'name'
p84431
S'xmax'
p84432
sS'required'
p84433
I00
sS'group_name'
p84434
Nsa(dp84435
S'description'
p84436
S'Lower X Coordinate of the generated mesh\n'
p84437
sS'cpp_type'
p84438
S'double'
p84439
sS'default'
p84440
S'0'
p84441
sS'name'
p84442
S'xmin'
p84443
sS'required'
p84444
I00
sS'group_name'
p84445
Nsa(dp84446
S'description'
p84447
S'Upper Y Coordinate of the generated mesh\n'
p84448
sS'cpp_type'
p84449
S'double'
p84450
sS'default'
p84451
S'1'
p84452
sS'name'
p84453
S'ymax'
p84454
sS'required'
p84455
I00
sS'group_name'
p84456
Nsa(dp84457
S'description'
p84458
S'Lower Y Coordinate of the generated mesh\n'
p84459
sS'cpp_type'
p84460
S'double'
p84461
sS'default'
p84462
S'0'
p84463
sS'name'
p84464
S'ymin'
p84465
sS'required'
p84466
I00
sS'group_name'
p84467
Nsa(dp84468
S'description'
p84469
S'Upper Z Coordinate of the generated mesh\n'
p84470
sS'cpp_type'
p84471
S'double'
p84472
sS'default'
p84473
S'1'
p84474
sS'name'
p84475
S'zmax'
p84476
sS'required'
p84477
I00
sS'group_name'
p84478
Nsa(dp84479
S'description'
p84480
S'Lower Z Coordinate of the generated mesh\n'
p84481
sS'cpp_type'
p84482
S'double'
p84483
sS'default'
p84484
S'0'
p84485
sS'name'
p84486
S'zmin'
p84487
sS'required'
p84488
I00
sS'group_name'
p84489
NsasS'name'
p84490
S'/Mesh/<type>/GeneratedMesh'
p84491
sa(dp84492
S'description'
p84493
S'Generated mesh with the aspect ratio of a given image stack.\n'
p84494
sS'subblocks'
p84495
NsS'parameters'
p84496
(lp84497
(dp84498
S'description'
p84499
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p84500
sS'cpp_type'
p84501
S'bool'
p84502
sS'default'
p84503
S'1'
p84504
sS'name'
p84505
S'allow_renumbering'
p84506
sS'required'
p84507
I00
sS'group_name'
p84508
Nsa(dp84509
S'description'
p84510
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p84511
sS'cpp_type'
p84512
S'double'
p84513
sS'default'
p84514
S'1'
p84515
sS'name'
p84516
S'bias_x'
p84517
sS'required'
p84518
I00
sS'group_name'
p84519
Nsa(dp84520
S'description'
p84521
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p84522
sS'cpp_type'
p84523
S'double'
p84524
sS'default'
p84525
S'1'
p84526
sS'name'
p84527
S'bias_y'
p84528
sS'required'
p84529
I00
sS'group_name'
p84530
Nsa(dp84531
S'description'
p84532
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p84533
sS'cpp_type'
p84534
S'double'
p84535
sS'default'
p84536
S'1'
p84537
sS'name'
p84538
S'bias_z'
p84539
sS'required'
p84540
I00
sS'group_name'
p84541
Nsa(dp84542
S'description'
p84543
S'The number of mesh cells per pixel, must be <=1 \n'
p84544
sS'cpp_type'
p84545
S'double'
p84546
sS'default'
p84547
S'1'
p84548
sS'name'
p84549
S'cells_per_pixel'
p84550
sS'required'
p84551
I00
sS'group_name'
p84552
Nsa(dp84553
S'name'
p84554
S'centroid_partitioner_direction'
p84555
sS'cpp_type'
p84556
S'MooseEnum'
p84557
sS'default'
p84558
g3
sS'description'
p84559
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p84560
sS'required'
p84561
I00
sS'options'
p84562
S'x y z radial'
p84563
sS'group_name'
p84564
S'Partitioning'
p84565
sa(dp84566
S'description'
p84567
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84568
sS'cpp_type'
p84569
S'bool'
p84570
sS'default'
p84571
S'1'
p84572
sS'name'
p84573
S'construct_node_list_from_side_list'
p84574
sS'required'
p84575
I00
sS'group_name'
p84576
S'Advanced'
p84577
sa(dp84578
S'description'
p84579
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84580
sS'cpp_type'
p84581
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84582
sS'default'
p84583
g3
sS'name'
p84584
S'control_tags'
p84585
sS'required'
p84586
I00
sS'group_name'
p84587
S'Advanced'
p84588
sa(dp84589
S'name'
p84590
S'dim'
p84591
sS'cpp_type'
p84592
S'MooseEnum'
p84593
sS'default'
p84594
g3
sS'description'
p84595
S'The dimension of the mesh to be generated\n'
p84596
sS'required'
p84597
I01
sS'options'
p84598
S'1 2 3'
p84599
sS'group_name'
p84600
S'Main'
p84601
sa(dp84602
S'name'
p84603
S'distribution'
p84604
sS'cpp_type'
p84605
S'MooseEnum'
p84606
sS'default'
p84607
S'DEFAULT'
p84608
sS'description'
p84609
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84610
sS'required'
p84611
I00
sS'options'
p84612
S'PARALLEL SERIAL DEFAULT'
p84613
sS'group_name'
p84614
Nsa(dp84615
S'name'
p84616
S'elem_type'
p84617
sS'cpp_type'
p84618
S'MooseEnum'
p84619
sS'default'
p84620
g3
sS'description'
p84621
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p84622
sS'required'
p84623
I00
sS'options'
p84624
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p84625
sS'group_name'
p84626
Nsa(dp84627
S'description'
p84628
S'Set the enabled status of the MooseObject.\n'
p84629
sS'cpp_type'
p84630
S'bool'
p84631
sS'default'
p84632
S'1'
p84633
sS'name'
p84634
S'enable'
p84635
sS'required'
p84636
I00
sS'group_name'
p84637
S'Advanced'
p84638
sa(dp84639
S'description'
p84640
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p84641
sS'cpp_type'
p84642
S'FileName'
p84643
sS'default'
p84644
g3
sS'name'
p84645
S'file'
p84646
sS'required'
p84647
I00
sS'group_name'
p84648
Nsa(dp84649
S'description'
p84650
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p84651
sS'cpp_type'
p84652
S'FileNameNoExtension'
p84653
sS'default'
p84654
g3
sS'name'
p84655
S'file_base'
p84656
sS'required'
p84657
I00
sS'group_name'
p84658
Nsa(dp84659
S'description'
p84660
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p84661
sS'cpp_type'
p84662
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p84663
sS'default'
p84664
g3
sS'name'
p84665
S'file_range'
p84666
sS'required'
p84667
I00
sS'group_name'
p84668
Nsa(dp84669
S'description'
p84670
S"Suffix of the file to open, e.g. 'png'\n"
p84671
sS'cpp_type'
p84672
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84673
sS'default'
p84674
g3
sS'name'
p84675
S'file_suffix'
p84676
sS'required'
p84677
I00
sS'group_name'
p84678
Nsa(dp84679
S'description'
p84680
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p84681
sS'cpp_type'
p84682
S'bool'
p84683
sS'default'
p84684
S'0'
p84685
sS'name'
p84686
S'gauss_lobatto_grid'
p84687
sS'required'
p84688
I00
sS'group_name'
p84689
Nsa(dp84690
S'description'
p84691
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84692
sS'cpp_type'
p84693
S'bool'
p84694
sS'default'
p84695
S'0'
p84696
sS'name'
p84697
S'ghost_point_neighbors'
p84698
sS'required'
p84699
I00
sS'group_name'
p84700
S'Advanced'
p84701
sa(dp84702
S'description'
p84703
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p84704
sS'cpp_type'
p84705
S'bool'
p84706
sS'default'
p84707
S'0'
p84708
sS'name'
p84709
S'nemesis'
p84710
sS'required'
p84711
I00
sS'group_name'
p84712
S'Advanced'
p84713
sa(dp84714
S'description'
p84715
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p84716
sS'cpp_type'
p84717
S'unsigned short'
p84718
sS'default'
p84719
S'1'
p84720
sS'name'
p84721
S'num_ghosted_layers'
p84722
sS'required'
p84723
I00
sS'group_name'
p84724
S'Advanced'
p84725
sa(dp84726
S'description'
p84727
S'Number of elements in the X direction\n'
p84728
sS'cpp_type'
p84729
S'unsigned int'
p84730
sS'default'
p84731
S'1'
p84732
sS'name'
p84733
S'nx'
p84734
sS'required'
p84735
I00
sS'group_name'
p84736
Nsa(dp84737
S'description'
p84738
S'Number of elements in the Y direction\n'
p84739
sS'cpp_type'
p84740
S'unsigned int'
p84741
sS'default'
p84742
S'1'
p84743
sS'name'
p84744
S'ny'
p84745
sS'required'
p84746
I00
sS'group_name'
p84747
Nsa(dp84748
S'description'
p84749
S'Number of elements in the Z direction\n'
p84750
sS'cpp_type'
p84751
S'unsigned int'
p84752
sS'default'
p84753
S'1'
p84754
sS'name'
p84755
S'nz'
p84756
sS'required'
p84757
I00
sS'group_name'
p84758
Nsa(dp84759
S'name'
p84760
S'parallel_type'
p84761
sS'cpp_type'
p84762
S'MooseEnum'
p84763
sS'default'
p84764
S'DEFAULT'
p84765
sS'description'
p84766
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p84767
sS'required'
p84768
I00
sS'options'
p84769
S'DISTRIBUTED REPLICATED DEFAULT'
p84770
sS'group_name'
p84771
Nsa(dp84772
S'name'
p84773
S'partitioner'
p84774
sS'cpp_type'
p84775
S'MooseEnum'
p84776
sS'default'
p84777
S'default'
p84778
sS'description'
p84779
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p84780
sS'required'
p84781
I00
sS'options'
p84782
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p84783
sS'group_name'
p84784
S'Partitioning'
p84785
sa(dp84786
S'name'
p84787
S'patch_update_strategy'
p84788
sS'cpp_type'
p84789
S'MooseEnum'
p84790
sS'default'
p84791
S'never'
p84792
sS'description'
p84793
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p84794
sS'required'
p84795
I00
sS'options'
p84796
S'never always auto'
p84797
sS'group_name'
p84798
S'Advanced'
p84799
sa(dp84800
S'description'
p84801
S'Whether or not to scale the image so its max dimension is 1\n'
p84802
sS'cpp_type'
p84803
S'bool'
p84804
sS'default'
p84805
S'1'
p84806
sS'name'
p84807
S'scale_to_one'
p84808
sS'required'
p84809
I00
sS'group_name'
p84810
Nsa(dp84811
S'description'
p84812
g3
sS'cpp_type'
p84813
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84814
sS'default'
p84815
S'ImageMesh'
p84816
sS'name'
p84817
S'type'
p84818
sS'required'
p84819
I00
sS'group_name'
p84820
Nsa(dp84821
S'description'
p84822
S'Upper X Coordinate of the generated mesh\n'
p84823
sS'cpp_type'
p84824
S'double'
p84825
sS'default'
p84826
S'1'
p84827
sS'name'
p84828
S'xmax'
p84829
sS'required'
p84830
I00
sS'group_name'
p84831
Nsa(dp84832
S'description'
p84833
S'Lower X Coordinate of the generated mesh\n'
p84834
sS'cpp_type'
p84835
S'double'
p84836
sS'default'
p84837
S'0'
p84838
sS'name'
p84839
S'xmin'
p84840
sS'required'
p84841
I00
sS'group_name'
p84842
Nsa(dp84843
S'description'
p84844
S'Upper Y Coordinate of the generated mesh\n'
p84845
sS'cpp_type'
p84846
S'double'
p84847
sS'default'
p84848
S'1'
p84849
sS'name'
p84850
S'ymax'
p84851
sS'required'
p84852
I00
sS'group_name'
p84853
Nsa(dp84854
S'description'
p84855
S'Lower Y Coordinate of the generated mesh\n'
p84856
sS'cpp_type'
p84857
S'double'
p84858
sS'default'
p84859
S'0'
p84860
sS'name'
p84861
S'ymin'
p84862
sS'required'
p84863
I00
sS'group_name'
p84864
Nsa(dp84865
S'description'
p84866
S'Upper Z Coordinate of the generated mesh\n'
p84867
sS'cpp_type'
p84868
S'double'
p84869
sS'default'
p84870
S'1'
p84871
sS'name'
p84872
S'zmax'
p84873
sS'required'
p84874
I00
sS'group_name'
p84875
Nsa(dp84876
S'description'
p84877
S'Lower Z Coordinate of the generated mesh\n'
p84878
sS'cpp_type'
p84879
S'double'
p84880
sS'default'
p84881
S'0'
p84882
sS'name'
p84883
S'zmin'
p84884
sS'required'
p84885
I00
sS'group_name'
p84886
NsasS'name'
p84887
S'/Mesh/<type>/ImageMesh'
p84888
sa(dp84889
S'description'
p84890
S'Set up an orthogonal mesh with additional dim-1 dimensional side domains for use with the Mortar method.\n'
p84891
sS'subblocks'
p84892
NsS'parameters'
p84893
(lp84894
(dp84895
S'description'
p84896
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p84897
sS'cpp_type'
p84898
S'bool'
p84899
sS'default'
p84900
S'1'
p84901
sS'name'
p84902
S'allow_renumbering'
p84903
sS'required'
p84904
I00
sS'group_name'
p84905
Nsa(dp84906
S'description'
p84907
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p84908
sS'cpp_type'
p84909
S'double'
p84910
sS'default'
p84911
S'1'
p84912
sS'name'
p84913
S'bias_x'
p84914
sS'required'
p84915
I00
sS'group_name'
p84916
Nsa(dp84917
S'description'
p84918
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p84919
sS'cpp_type'
p84920
S'double'
p84921
sS'default'
p84922
S'1'
p84923
sS'name'
p84924
S'bias_y'
p84925
sS'required'
p84926
I00
sS'group_name'
p84927
Nsa(dp84928
S'description'
p84929
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p84930
sS'cpp_type'
p84931
S'double'
p84932
sS'default'
p84933
S'1'
p84934
sS'name'
p84935
S'bias_z'
p84936
sS'required'
p84937
I00
sS'group_name'
p84938
Nsa(dp84939
S'name'
p84940
S'centroid_partitioner_direction'
p84941
sS'cpp_type'
p84942
S'MooseEnum'
p84943
sS'default'
p84944
g3
sS'description'
p84945
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p84946
sS'required'
p84947
I00
sS'options'
p84948
S'x y z radial'
p84949
sS'group_name'
p84950
S'Partitioning'
p84951
sa(dp84952
S'description'
p84953
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p84954
sS'cpp_type'
p84955
S'bool'
p84956
sS'default'
p84957
S'1'
p84958
sS'name'
p84959
S'construct_node_list_from_side_list'
p84960
sS'required'
p84961
I00
sS'group_name'
p84962
S'Advanced'
p84963
sa(dp84964
S'description'
p84965
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84966
sS'cpp_type'
p84967
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84968
sS'default'
p84969
g3
sS'name'
p84970
S'control_tags'
p84971
sS'required'
p84972
I00
sS'group_name'
p84973
S'Advanced'
p84974
sa(dp84975
S'name'
p84976
S'dim'
p84977
sS'cpp_type'
p84978
S'MooseEnum'
p84979
sS'default'
p84980
g3
sS'description'
p84981
S'The dimension of the mesh to be generated\n'
p84982
sS'required'
p84983
I01
sS'options'
p84984
S'1 2 3'
p84985
sS'group_name'
p84986
S'Main'
p84987
sa(dp84988
S'name'
p84989
S'distribution'
p84990
sS'cpp_type'
p84991
S'MooseEnum'
p84992
sS'default'
p84993
S'DEFAULT'
p84994
sS'description'
p84995
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p84996
sS'required'
p84997
I00
sS'options'
p84998
S'PARALLEL SERIAL DEFAULT'
p84999
sS'group_name'
p85000
Nsa(dp85001
S'name'
p85002
S'elem_type'
p85003
sS'cpp_type'
p85004
S'MooseEnum'
p85005
sS'default'
p85006
g3
sS'description'
p85007
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p85008
sS'required'
p85009
I00
sS'options'
p85010
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p85011
sS'group_name'
p85012
Nsa(dp85013
S'description'
p85014
S'Set the enabled status of the MooseObject.\n'
p85015
sS'cpp_type'
p85016
S'bool'
p85017
sS'default'
p85018
S'1'
p85019
sS'name'
p85020
S'enable'
p85021
sS'required'
p85022
I00
sS'group_name'
p85023
S'Advanced'
p85024
sa(dp85025
S'description'
p85026
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p85027
sS'cpp_type'
p85028
S'bool'
p85029
sS'default'
p85030
S'0'
p85031
sS'name'
p85032
S'gauss_lobatto_grid'
p85033
sS'required'
p85034
I00
sS'group_name'
p85035
Nsa(dp85036
S'description'
p85037
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85038
sS'cpp_type'
p85039
S'bool'
p85040
sS'default'
p85041
S'0'
p85042
sS'name'
p85043
S'ghost_point_neighbors'
p85044
sS'required'
p85045
I00
sS'group_name'
p85046
S'Advanced'
p85047
sa(dp85048
S'description'
p85049
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p85050
sS'cpp_type'
p85051
S'bool'
p85052
sS'default'
p85053
S'0'
p85054
sS'name'
p85055
S'nemesis'
p85056
sS'required'
p85057
I00
sS'group_name'
p85058
S'Advanced'
p85059
sa(dp85060
S'description'
p85061
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85062
sS'cpp_type'
p85063
S'unsigned short'
p85064
sS'default'
p85065
S'1'
p85066
sS'name'
p85067
S'num_ghosted_layers'
p85068
sS'required'
p85069
I00
sS'group_name'
p85070
S'Advanced'
p85071
sa(dp85072
S'description'
p85073
S'Number of elements in the X direction\n'
p85074
sS'cpp_type'
p85075
S'unsigned int'
p85076
sS'default'
p85077
S'1'
p85078
sS'name'
p85079
S'nx'
p85080
sS'required'
p85081
I00
sS'group_name'
p85082
Nsa(dp85083
S'description'
p85084
S'Number of elements in the Y direction\n'
p85085
sS'cpp_type'
p85086
S'unsigned int'
p85087
sS'default'
p85088
S'1'
p85089
sS'name'
p85090
S'ny'
p85091
sS'required'
p85092
I00
sS'group_name'
p85093
Nsa(dp85094
S'description'
p85095
S'Number of elements in the Z direction\n'
p85096
sS'cpp_type'
p85097
S'unsigned int'
p85098
sS'default'
p85099
S'1'
p85100
sS'name'
p85101
S'nz'
p85102
sS'required'
p85103
I00
sS'group_name'
p85104
Nsa(dp85105
S'name'
p85106
S'parallel_type'
p85107
sS'cpp_type'
p85108
S'MooseEnum'
p85109
sS'default'
p85110
S'DEFAULT'
p85111
sS'description'
p85112
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p85113
sS'required'
p85114
I00
sS'options'
p85115
S'DISTRIBUTED REPLICATED DEFAULT'
p85116
sS'group_name'
p85117
Nsa(dp85118
S'name'
p85119
S'partitioner'
p85120
sS'cpp_type'
p85121
S'MooseEnum'
p85122
sS'default'
p85123
S'default'
p85124
sS'description'
p85125
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85126
sS'required'
p85127
I00
sS'options'
p85128
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p85129
sS'group_name'
p85130
S'Partitioning'
p85131
sa(dp85132
S'name'
p85133
S'patch_update_strategy'
p85134
sS'cpp_type'
p85135
S'MooseEnum'
p85136
sS'default'
p85137
S'never'
p85138
sS'description'
p85139
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p85140
sS'required'
p85141
I00
sS'options'
p85142
S'never always auto'
p85143
sS'group_name'
p85144
S'Advanced'
p85145
sa(dp85146
S'name'
p85147
S'periodic_directions'
p85148
sS'cpp_type'
p85149
S'MultiMooseEnum'
p85150
sS'default'
p85151
g3
sS'description'
p85152
S'Directions along which additional Mortar meshes are generated\n'
p85153
sS'required'
p85154
I01
sS'options'
p85155
S'x y z'
p85156
sS'group_name'
p85157
Nsa(dp85158
S'description'
p85159
g3
sS'cpp_type'
p85160
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85161
sS'default'
p85162
S'MortarPeriodicMesh'
p85163
sS'name'
p85164
S'type'
p85165
sS'required'
p85166
I00
sS'group_name'
p85167
Nsa(dp85168
S'description'
p85169
S'Upper X Coordinate of the generated mesh\n'
p85170
sS'cpp_type'
p85171
S'double'
p85172
sS'default'
p85173
S'1'
p85174
sS'name'
p85175
S'xmax'
p85176
sS'required'
p85177
I00
sS'group_name'
p85178
Nsa(dp85179
S'description'
p85180
S'Lower X Coordinate of the generated mesh\n'
p85181
sS'cpp_type'
p85182
S'double'
p85183
sS'default'
p85184
S'0'
p85185
sS'name'
p85186
S'xmin'
p85187
sS'required'
p85188
I00
sS'group_name'
p85189
Nsa(dp85190
S'description'
p85191
S'Upper Y Coordinate of the generated mesh\n'
p85192
sS'cpp_type'
p85193
S'double'
p85194
sS'default'
p85195
S'1'
p85196
sS'name'
p85197
S'ymax'
p85198
sS'required'
p85199
I00
sS'group_name'
p85200
Nsa(dp85201
S'description'
p85202
S'Lower Y Coordinate of the generated mesh\n'
p85203
sS'cpp_type'
p85204
S'double'
p85205
sS'default'
p85206
S'0'
p85207
sS'name'
p85208
S'ymin'
p85209
sS'required'
p85210
I00
sS'group_name'
p85211
Nsa(dp85212
S'description'
p85213
S'Upper Z Coordinate of the generated mesh\n'
p85214
sS'cpp_type'
p85215
S'double'
p85216
sS'default'
p85217
S'1'
p85218
sS'name'
p85219
S'zmax'
p85220
sS'required'
p85221
I00
sS'group_name'
p85222
Nsa(dp85223
S'description'
p85224
S'Lower Z Coordinate of the generated mesh\n'
p85225
sS'cpp_type'
p85226
S'double'
p85227
sS'default'
p85228
S'0'
p85229
sS'name'
p85230
S'zmin'
p85231
sS'required'
p85232
I00
sS'group_name'
p85233
NsasS'name'
p85234
S'/Mesh/<type>/MortarPeriodicMesh'
p85235
sa(dp85236
S'description'
p85237
S"Creates a 2D mesh from a specified set of unique 'tiles' meshes and a two-dimensional pattern.\n"
p85238
sS'subblocks'
p85239
NsS'parameters'
p85240
(lp85241
(dp85242
S'description'
p85243
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p85244
sS'cpp_type'
p85245
S'bool'
p85246
sS'default'
p85247
S'1'
p85248
sS'name'
p85249
S'allow_renumbering'
p85250
sS'required'
p85251
I00
sS'group_name'
p85252
Nsa(dp85253
S'description'
p85254
S'name of the bottom (y) boundary\n'
p85255
sS'cpp_type'
p85256
S'BoundaryName'
p85257
sS'default'
p85258
S'bottom_boundary'
p85259
sS'name'
p85260
S'bottom_boundary'
p85261
sS'required'
p85262
I00
sS'group_name'
p85263
Nsa(dp85264
S'name'
p85265
S'centroid_partitioner_direction'
p85266
sS'cpp_type'
p85267
S'MooseEnum'
p85268
sS'default'
p85269
g3
sS'description'
p85270
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p85271
sS'required'
p85272
I00
sS'options'
p85273
S'x y z radial'
p85274
sS'group_name'
p85275
S'Partitioning'
p85276
sa(dp85277
S'description'
p85278
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p85279
sS'cpp_type'
p85280
S'bool'
p85281
sS'default'
p85282
S'1'
p85283
sS'name'
p85284
S'construct_node_list_from_side_list'
p85285
sS'required'
p85286
I00
sS'group_name'
p85287
S'Advanced'
p85288
sa(dp85289
S'description'
p85290
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85291
sS'cpp_type'
p85292
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85293
sS'default'
p85294
g3
sS'name'
p85295
S'control_tags'
p85296
sS'required'
p85297
I00
sS'group_name'
p85298
S'Advanced'
p85299
sa(dp85300
S'name'
p85301
S'dim'
p85302
sS'cpp_type'
p85303
S'MooseEnum'
p85304
sS'default'
p85305
S'1'
p85306
sS'description'
p85307
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p85308
sS'required'
p85309
I00
sS'options'
p85310
S'1 2 3'
p85311
sS'group_name'
p85312
S'Advanced'
p85313
sa(dp85314
S'name'
p85315
S'distribution'
p85316
sS'cpp_type'
p85317
S'MooseEnum'
p85318
sS'default'
p85319
S'DEFAULT'
p85320
sS'description'
p85321
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p85322
sS'required'
p85323
I00
sS'options'
p85324
S'PARALLEL SERIAL DEFAULT'
p85325
sS'group_name'
p85326
Nsa(dp85327
S'description'
p85328
S'Set the enabled status of the MooseObject.\n'
p85329
sS'cpp_type'
p85330
S'bool'
p85331
sS'default'
p85332
S'1'
p85333
sS'name'
p85334
S'enable'
p85335
sS'required'
p85336
I00
sS'group_name'
p85337
S'Advanced'
p85338
sa(dp85339
S'description'
p85340
S'The name of the mesh files to read.  They are automatically assigned ids starting with zero.\n'
p85341
sS'cpp_type'
p85342
S'std::vector<MeshFileName, std::allocator<MeshFileName> >'
p85343
sS'default'
p85344
g3
sS'name'
p85345
S'files'
p85346
sS'required'
p85347
I01
sS'group_name'
p85348
Nsa(dp85349
S'description'
p85350
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85351
sS'cpp_type'
p85352
S'bool'
p85353
sS'default'
p85354
S'0'
p85355
sS'name'
p85356
S'ghost_point_neighbors'
p85357
sS'required'
p85358
I00
sS'group_name'
p85359
S'Advanced'
p85360
sa(dp85361
S'description'
p85362
S'name of the left (x) boundary\n'
p85363
sS'cpp_type'
p85364
S'BoundaryName'
p85365
sS'default'
p85366
S'left_boundary'
p85367
sS'name'
p85368
S'left_boundary'
p85369
sS'required'
p85370
I00
sS'group_name'
p85371
Nsa(dp85372
S'description'
p85373
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p85374
sS'cpp_type'
p85375
S'bool'
p85376
sS'default'
p85377
S'0'
p85378
sS'name'
p85379
S'nemesis'
p85380
sS'required'
p85381
I00
sS'group_name'
p85382
S'Advanced'
p85383
sa(dp85384
S'description'
p85385
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85386
sS'cpp_type'
p85387
S'unsigned short'
p85388
sS'default'
p85389
S'1'
p85390
sS'name'
p85391
S'num_ghosted_layers'
p85392
sS'required'
p85393
I00
sS'group_name'
p85394
S'Advanced'
p85395
sa(dp85396
S'name'
p85397
S'parallel_type'
p85398
sS'cpp_type'
p85399
S'MooseEnum'
p85400
sS'default'
p85401
S'DEFAULT'
p85402
sS'description'
p85403
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p85404
sS'required'
p85405
I00
sS'options'
p85406
S'DISTRIBUTED REPLICATED DEFAULT'
p85407
sS'group_name'
p85408
Nsa(dp85409
S'name'
p85410
S'partitioner'
p85411
sS'cpp_type'
p85412
S'MooseEnum'
p85413
sS'default'
p85414
S'default'
p85415
sS'description'
p85416
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85417
sS'required'
p85418
I00
sS'options'
p85419
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p85420
sS'group_name'
p85421
S'Partitioning'
p85422
sa(dp85423
S'name'
p85424
S'patch_update_strategy'
p85425
sS'cpp_type'
p85426
S'MooseEnum'
p85427
sS'default'
p85428
S'never'
p85429
sS'description'
p85430
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p85431
sS'required'
p85432
I00
sS'options'
p85433
S'never always auto'
p85434
sS'group_name'
p85435
S'Advanced'
p85436
sa(dp85437
S'description'
p85438
S'A double-indexed array starting with the upper-left corner\n'
p85439
sS'cpp_type'
p85440
S'std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >'
p85441
sS'default'
p85442
g3
sS'name'
p85443
S'pattern'
p85444
sS'required'
p85445
I01
sS'group_name'
p85446
Nsa(dp85447
S'description'
p85448
S'name of the right (x) boundary\n'
p85449
sS'cpp_type'
p85450
S'BoundaryName'
p85451
sS'default'
p85452
S'right_boundary'
p85453
sS'name'
p85454
S'right_boundary'
p85455
sS'required'
p85456
I00
sS'group_name'
p85457
Nsa(dp85458
S'description'
p85459
S'name of the top (y) boundary\n'
p85460
sS'cpp_type'
p85461
S'BoundaryName'
p85462
sS'default'
p85463
S'top_boundary'
p85464
sS'name'
p85465
S'top_boundary'
p85466
sS'required'
p85467
I00
sS'group_name'
p85468
Nsa(dp85469
S'description'
p85470
g3
sS'cpp_type'
p85471
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85472
sS'default'
p85473
S'PatternedMesh'
p85474
sS'name'
p85475
S'type'
p85476
sS'required'
p85477
I00
sS'group_name'
p85478
Nsa(dp85479
S'description'
p85480
S'The tile width in the x direction\n'
p85481
sS'cpp_type'
p85482
S'double'
p85483
sS'default'
p85484
S'0'
p85485
sS'name'
p85486
S'x_width'
p85487
sS'required'
p85488
I00
sS'group_name'
p85489
Nsa(dp85490
S'description'
p85491
S'The tile width in the y direction\n'
p85492
sS'cpp_type'
p85493
S'double'
p85494
sS'default'
p85495
S'0'
p85496
sS'name'
p85497
S'y_width'
p85498
sS'required'
p85499
I00
sS'group_name'
p85500
Nsa(dp85501
S'description'
p85502
S'The tile width in the z direction\n'
p85503
sS'cpp_type'
p85504
S'double'
p85505
sS'default'
p85506
S'0'
p85507
sS'name'
p85508
S'z_width'
p85509
sS'required'
p85510
I00
sS'group_name'
p85511
NsasS'name'
p85512
S'/Mesh/<type>/PatternedMesh'
p85513
sa(dp85514
S'description'
p85515
S'Reads in all of the given meshes and stitches them all together into one mesh.\n'
p85516
sS'subblocks'
p85517
NsS'parameters'
p85518
(lp85519
(dp85520
S'description'
p85521
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p85522
sS'cpp_type'
p85523
S'bool'
p85524
sS'default'
p85525
S'1'
p85526
sS'name'
p85527
S'allow_renumbering'
p85528
sS'required'
p85529
I00
sS'group_name'
p85530
Nsa(dp85531
S'name'
p85532
S'centroid_partitioner_direction'
p85533
sS'cpp_type'
p85534
S'MooseEnum'
p85535
sS'default'
p85536
g3
sS'description'
p85537
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p85538
sS'required'
p85539
I00
sS'options'
p85540
S'x y z radial'
p85541
sS'group_name'
p85542
S'Partitioning'
p85543
sa(dp85544
S'description'
p85545
S"Whether or not to erase the boundary IDs after they've been used for stitching.\n"
p85546
sS'cpp_type'
p85547
S'bool'
p85548
sS'default'
p85549
S'1'
p85550
sS'name'
p85551
S'clear_stitched_boundary_ids'
p85552
sS'required'
p85553
I00
sS'group_name'
p85554
Nsa(dp85555
S'description'
p85556
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p85557
sS'cpp_type'
p85558
S'bool'
p85559
sS'default'
p85560
S'1'
p85561
sS'name'
p85562
S'construct_node_list_from_side_list'
p85563
sS'required'
p85564
I00
sS'group_name'
p85565
S'Advanced'
p85566
sa(dp85567
S'description'
p85568
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85569
sS'cpp_type'
p85570
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85571
sS'default'
p85572
g3
sS'name'
p85573
S'control_tags'
p85574
sS'required'
p85575
I00
sS'group_name'
p85576
S'Advanced'
p85577
sa(dp85578
S'name'
p85579
S'dim'
p85580
sS'cpp_type'
p85581
S'MooseEnum'
p85582
sS'default'
p85583
S'1'
p85584
sS'description'
p85585
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p85586
sS'required'
p85587
I00
sS'options'
p85588
S'1 2 3'
p85589
sS'group_name'
p85590
S'Advanced'
p85591
sa(dp85592
S'name'
p85593
S'distribution'
p85594
sS'cpp_type'
p85595
S'MooseEnum'
p85596
sS'default'
p85597
S'DEFAULT'
p85598
sS'description'
p85599
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p85600
sS'required'
p85601
I00
sS'options'
p85602
S'PARALLEL SERIAL DEFAULT'
p85603
sS'group_name'
p85604
Nsa(dp85605
S'description'
p85606
S'Set the enabled status of the MooseObject.\n'
p85607
sS'cpp_type'
p85608
S'bool'
p85609
sS'default'
p85610
S'1'
p85611
sS'name'
p85612
S'enable'
p85613
sS'required'
p85614
I00
sS'group_name'
p85615
S'Advanced'
p85616
sa(dp85617
S'description'
p85618
S"The name of the mesh files to read.  These mesh files will be 'stitched' into the current mesh in this order.\n"
p85619
sS'cpp_type'
p85620
S'std::vector<MeshFileName, std::allocator<MeshFileName> >'
p85621
sS'default'
p85622
g3
sS'name'
p85623
S'files'
p85624
sS'required'
p85625
I01
sS'group_name'
p85626
Nsa(dp85627
S'description'
p85628
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85629
sS'cpp_type'
p85630
S'bool'
p85631
sS'default'
p85632
S'0'
p85633
sS'name'
p85634
S'ghost_point_neighbors'
p85635
sS'required'
p85636
I00
sS'group_name'
p85637
S'Advanced'
p85638
sa(dp85639
S'description'
p85640
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p85641
sS'cpp_type'
p85642
S'bool'
p85643
sS'default'
p85644
S'0'
p85645
sS'name'
p85646
S'nemesis'
p85647
sS'required'
p85648
I00
sS'group_name'
p85649
S'Advanced'
p85650
sa(dp85651
S'description'
p85652
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85653
sS'cpp_type'
p85654
S'unsigned short'
p85655
sS'default'
p85656
S'1'
p85657
sS'name'
p85658
S'num_ghosted_layers'
p85659
sS'required'
p85660
I00
sS'group_name'
p85661
S'Advanced'
p85662
sa(dp85663
S'name'
p85664
S'parallel_type'
p85665
sS'cpp_type'
p85666
S'MooseEnum'
p85667
sS'default'
p85668
S'DEFAULT'
p85669
sS'description'
p85670
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p85671
sS'required'
p85672
I00
sS'options'
p85673
S'DISTRIBUTED REPLICATED DEFAULT'
p85674
sS'group_name'
p85675
Nsa(dp85676
S'name'
p85677
S'partitioner'
p85678
sS'cpp_type'
p85679
S'MooseEnum'
p85680
sS'default'
p85681
S'default'
p85682
sS'description'
p85683
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85684
sS'required'
p85685
I00
sS'options'
p85686
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p85687
sS'group_name'
p85688
S'Partitioning'
p85689
sa(dp85690
S'name'
p85691
S'patch_update_strategy'
p85692
sS'cpp_type'
p85693
S'MooseEnum'
p85694
sS'default'
p85695
S'never'
p85696
sS'description'
p85697
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p85698
sS'required'
p85699
I00
sS'options'
p85700
S'never always auto'
p85701
sS'group_name'
p85702
S'Advanced'
p85703
sa(dp85704
S'description'
p85705
S'Pairs of boundary names (one after the other) to stitch together for each step.\n'
p85706
sS'cpp_type'
p85707
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85708
sS'default'
p85709
g3
sS'name'
p85710
S'stitch_boundaries'
p85711
sS'required'
p85712
I01
sS'group_name'
p85713
Nsa(dp85714
S'description'
p85715
g3
sS'cpp_type'
p85716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85717
sS'default'
p85718
S'StitchedMesh'
p85719
sS'name'
p85720
S'type'
p85721
sS'required'
p85722
I00
sS'group_name'
p85723
NsasS'name'
p85724
S'/Mesh/<type>/StitchedMesh'
p85725
sa(dp85726
S'description'
p85727
S'Use the supplied mesh and create a tiled grid by repeating this mesh in the x,y, and z directions.\n'
p85728
sS'subblocks'
p85729
NsS'parameters'
p85730
(lp85731
(dp85732
S'description'
p85733
S'If allow_renumbering=false, node and element numbers are kept fixed until deletion\n'
p85734
sS'cpp_type'
p85735
S'bool'
p85736
sS'default'
p85737
S'1'
p85738
sS'name'
p85739
S'allow_renumbering'
p85740
sS'required'
p85741
I00
sS'group_name'
p85742
Nsa(dp85743
S'description'
p85744
S'name of the back (z) boundary\n'
p85745
sS'cpp_type'
p85746
S'BoundaryName'
p85747
sS'default'
p85748
S'back_boundary'
p85749
sS'name'
p85750
S'back_boundary'
p85751
sS'required'
p85752
I00
sS'group_name'
p85753
Nsa(dp85754
S'description'
p85755
S'name of the bottom (y) boundary\n'
p85756
sS'cpp_type'
p85757
S'BoundaryName'
p85758
sS'default'
p85759
S'bottom_boundary'
p85760
sS'name'
p85761
S'bottom_boundary'
p85762
sS'required'
p85763
I00
sS'group_name'
p85764
Nsa(dp85765
S'name'
p85766
S'centroid_partitioner_direction'
p85767
sS'cpp_type'
p85768
S'MooseEnum'
p85769
sS'default'
p85770
g3
sS'description'
p85771
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p85772
sS'required'
p85773
I00
sS'options'
p85774
S'x y z radial'
p85775
sS'group_name'
p85776
S'Partitioning'
p85777
sa(dp85778
S'description'
p85779
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p85780
sS'cpp_type'
p85781
S'bool'
p85782
sS'default'
p85783
S'1'
p85784
sS'name'
p85785
S'construct_node_list_from_side_list'
p85786
sS'required'
p85787
I00
sS'group_name'
p85788
S'Advanced'
p85789
sa(dp85790
S'description'
p85791
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85792
sS'cpp_type'
p85793
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85794
sS'default'
p85795
g3
sS'name'
p85796
S'control_tags'
p85797
sS'required'
p85798
I00
sS'group_name'
p85799
S'Advanced'
p85800
sa(dp85801
S'name'
p85802
S'dim'
p85803
sS'cpp_type'
p85804
S'MooseEnum'
p85805
sS'default'
p85806
S'1'
p85807
sS'description'
p85808
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p85809
sS'required'
p85810
I00
sS'options'
p85811
S'1 2 3'
p85812
sS'group_name'
p85813
S'Advanced'
p85814
sa(dp85815
S'name'
p85816
S'distribution'
p85817
sS'cpp_type'
p85818
S'MooseEnum'
p85819
sS'default'
p85820
S'DEFAULT'
p85821
sS'description'
p85822
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p85823
sS'required'
p85824
I00
sS'options'
p85825
S'PARALLEL SERIAL DEFAULT'
p85826
sS'group_name'
p85827
Nsa(dp85828
S'description'
p85829
S'Set the enabled status of the MooseObject.\n'
p85830
sS'cpp_type'
p85831
S'bool'
p85832
sS'default'
p85833
S'1'
p85834
sS'name'
p85835
S'enable'
p85836
sS'required'
p85837
I00
sS'group_name'
p85838
S'Advanced'
p85839
sa(dp85840
S'description'
p85841
S'The name of the mesh file to read\n'
p85842
sS'cpp_type'
p85843
S'MeshFileName'
p85844
sS'default'
p85845
g3
sS'name'
p85846
S'file'
p85847
sS'required'
p85848
I01
sS'group_name'
p85849
Nsa(dp85850
S'description'
p85851
S'name of the front (z) boundary\n'
p85852
sS'cpp_type'
p85853
S'BoundaryName'
p85854
sS'default'
p85855
S'front_boundary'
p85856
sS'name'
p85857
S'front_boundary'
p85858
sS'required'
p85859
I00
sS'group_name'
p85860
Nsa(dp85861
S'description'
p85862
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85863
sS'cpp_type'
p85864
S'bool'
p85865
sS'default'
p85866
S'0'
p85867
sS'name'
p85868
S'ghost_point_neighbors'
p85869
sS'required'
p85870
I00
sS'group_name'
p85871
S'Advanced'
p85872
sa(dp85873
S'description'
p85874
S'name of the left (x) boundary\n'
p85875
sS'cpp_type'
p85876
S'BoundaryName'
p85877
sS'default'
p85878
S'left_boundary'
p85879
sS'name'
p85880
S'left_boundary'
p85881
sS'required'
p85882
I00
sS'group_name'
p85883
Nsa(dp85884
S'description'
p85885
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p85886
sS'cpp_type'
p85887
S'bool'
p85888
sS'default'
p85889
S'0'
p85890
sS'name'
p85891
S'nemesis'
p85892
sS'required'
p85893
I00
sS'group_name'
p85894
S'Advanced'
p85895
sa(dp85896
S'description'
p85897
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p85898
sS'cpp_type'
p85899
S'unsigned short'
p85900
sS'default'
p85901
S'1'
p85902
sS'name'
p85903
S'num_ghosted_layers'
p85904
sS'required'
p85905
I00
sS'group_name'
p85906
S'Advanced'
p85907
sa(dp85908
S'name'
p85909
S'parallel_type'
p85910
sS'cpp_type'
p85911
S'MooseEnum'
p85912
sS'default'
p85913
S'DEFAULT'
p85914
sS'description'
p85915
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p85916
sS'required'
p85917
I00
sS'options'
p85918
S'DISTRIBUTED REPLICATED DEFAULT'
p85919
sS'group_name'
p85920
Nsa(dp85921
S'name'
p85922
S'partitioner'
p85923
sS'cpp_type'
p85924
S'MooseEnum'
p85925
sS'default'
p85926
S'default'
p85927
sS'description'
p85928
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p85929
sS'required'
p85930
I00
sS'options'
p85931
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p85932
sS'group_name'
p85933
S'Partitioning'
p85934
sa(dp85935
S'name'
p85936
S'patch_update_strategy'
p85937
sS'cpp_type'
p85938
S'MooseEnum'
p85939
sS'default'
p85940
S'never'
p85941
sS'description'
p85942
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p85943
sS'required'
p85944
I00
sS'options'
p85945
S'never always auto'
p85946
sS'group_name'
p85947
S'Advanced'
p85948
sa(dp85949
S'description'
p85950
S'name of the right (x) boundary\n'
p85951
sS'cpp_type'
p85952
S'BoundaryName'
p85953
sS'default'
p85954
S'right_boundary'
p85955
sS'name'
p85956
S'right_boundary'
p85957
sS'required'
p85958
I00
sS'group_name'
p85959
Nsa(dp85960
S'description'
p85961
S'name of the top (y) boundary\n'
p85962
sS'cpp_type'
p85963
S'BoundaryName'
p85964
sS'default'
p85965
S'top_boundary'
p85966
sS'name'
p85967
S'top_boundary'
p85968
sS'required'
p85969
I00
sS'group_name'
p85970
Nsa(dp85971
S'description'
p85972
g3
sS'cpp_type'
p85973
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85974
sS'default'
p85975
S'TiledMesh'
p85976
sS'name'
p85977
S'type'
p85978
sS'required'
p85979
I00
sS'group_name'
p85980
Nsa(dp85981
S'description'
p85982
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p85983
sS'cpp_type'
p85984
S'unsigned int'
p85985
sS'default'
p85986
S'1'
p85987
sS'name'
p85988
S'x_tiles'
p85989
sS'required'
p85990
I00
sS'group_name'
p85991
Nsa(dp85992
S'description'
p85993
S'The tile width in the x direction\n'
p85994
sS'cpp_type'
p85995
S'double'
p85996
sS'default'
p85997
S'0'
p85998
sS'name'
p85999
S'x_width'
p86000
sS'required'
p86001
I00
sS'group_name'
p86002
Nsa(dp86003
S'description'
p86004
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p86005
sS'cpp_type'
p86006
S'unsigned int'
p86007
sS'default'
p86008
S'1'
p86009
sS'name'
p86010
S'y_tiles'
p86011
sS'required'
p86012
I00
sS'group_name'
p86013
Nsa(dp86014
S'description'
p86015
S'The tile width in the y direction\n'
p86016
sS'cpp_type'
p86017
S'double'
p86018
sS'default'
p86019
S'0'
p86020
sS'name'
p86021
S'y_width'
p86022
sS'required'
p86023
I00
sS'group_name'
p86024
Nsa(dp86025
S'description'
p86026
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p86027
sS'cpp_type'
p86028
S'unsigned int'
p86029
sS'default'
p86030
S'1'
p86031
sS'name'
p86032
S'z_tiles'
p86033
sS'required'
p86034
I00
sS'group_name'
p86035
Nsa(dp86036
S'description'
p86037
S'The tile width in the z direction\n'
p86038
sS'cpp_type'
p86039
S'double'
p86040
sS'default'
p86041
S'0'
p86042
sS'name'
p86043
S'z_width'
p86044
sS'required'
p86045
I00
sS'group_name'
p86046
NsasS'name'
p86047
S'/Mesh/<type>/TiledMesh'
p86048
sasS'parameters'
p86049
NsS'name'
p86050
S'/Mesh/<type>'
p86051
sa(dp86052
S'description'
p86053
g3
sS'subblocks'
p86054
(lp86055
(dp86056
S'description'
p86057
g3
sS'subblocks'
p86058
NsS'parameters'
p86059
(lp86060
(dp86061
S'description'
p86062
S'Master side ID\n'
p86063
sS'cpp_type'
p86064
S'BoundaryName'
p86065
sS'default'
p86066
g3
sS'name'
p86067
S'master'
p86068
sS'required'
p86069
I01
sS'group_name'
p86070
Nsa(dp86071
S'description'
p86072
S'Slave side ID\n'
p86073
sS'cpp_type'
p86074
S'BoundaryName'
p86075
sS'default'
p86076
g3
sS'name'
p86077
S'slave'
p86078
sS'required'
p86079
I01
sS'group_name'
p86080
Nsa(dp86081
S'description'
p86082
S'Subdomain name that is the mortar interface\n'
p86083
sS'cpp_type'
p86084
S'SubdomainName'
p86085
sS'default'
p86086
g3
sS'name'
p86087
S'subdomain'
p86088
sS'required'
p86089
I01
sS'group_name'
p86090
NsasS'name'
p86091
S'/Mesh/MortarInterfaces/*'
p86092
sasS'parameters'
p86093
NsS'name'
p86094
S'/Mesh/MortarInterfaces'
p86095
sa(dp86096
S'description'
p86097
g3
sS'subblocks'
p86098
(lp86099
(dp86100
S'description'
p86101
g3
sS'subblocks'
p86102
(lp86103
(dp86104
S'description'
p86105
g3
sS'subblocks'
p86106
NsS'parameters'
p86107
(lp86108
(dp86109
S'description'
p86110
S'Block is seperated by ;, and partition mesh block by block. \n'
p86111
sS'cpp_type'
p86112
S'std::vector<std::vector<SubdomainName, std::allocator<SubdomainName> >, std::allocator<std::vector<SubdomainName, std::allocator<SubdomainName> > > >'
p86113
sS'default'
p86114
g3
sS'name'
p86115
S'blocks'
p86116
sS'required'
p86117
I00
sS'group_name'
p86118
Nsa(dp86119
S'name'
p86120
S'centroid_partitioner_direction'
p86121
sS'cpp_type'
p86122
S'MooseEnum'
p86123
sS'default'
p86124
g3
sS'description'
p86125
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p86126
sS'required'
p86127
I00
sS'options'
p86128
S'x y z radial'
p86129
sS'group_name'
p86130
Nsa(dp86131
S'description'
p86132
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86133
sS'cpp_type'
p86134
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86135
sS'default'
p86136
g3
sS'name'
p86137
S'control_tags'
p86138
sS'required'
p86139
I00
sS'group_name'
p86140
S'Advanced'
p86141
sa(dp86142
S'description'
p86143
S'Set the enabled status of the MooseObject.\n'
p86144
sS'cpp_type'
p86145
S'bool'
p86146
sS'default'
p86147
S'1'
p86148
sS'name'
p86149
S'enable'
p86150
sS'required'
p86151
I00
sS'group_name'
p86152
S'Advanced'
p86153
sa(dp86154
S'name'
p86155
S'partitioner'
p86156
sS'cpp_type'
p86157
S'MooseEnum'
p86158
sS'default'
p86159
g3
sS'description'
p86160
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p86161
sS'required'
p86162
I01
sS'options'
p86163
S'metis parmetis linear centroid hilbert_sfc morton_sfc subdomain_partitioner'
p86164
sS'group_name'
p86165
Nsa(dp86166
S'description'
p86167
g3
sS'cpp_type'
p86168
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86169
sS'default'
p86170
S'LibmeshPartitioner'
p86171
sS'name'
p86172
S'type'
p86173
sS'required'
p86174
I00
sS'group_name'
p86175
NsasS'name'
p86176
S'/Mesh/Partitioner/<type>/LibmeshPartitioner'
p86177
sasS'parameters'
p86178
NsS'name'
p86179
S'/Mesh/Partitioner/<type>'
p86180
sasS'parameters'
p86181
(lp86182
(dp86183
S'description'
p86184
S'A string representing the Moose Object that will be built by this Action\n'
p86185
sS'cpp_type'
p86186
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86187
sS'default'
p86188
g3
sS'name'
p86189
S'type'
p86190
sS'required'
p86191
I01
sS'group_name'
p86192
NsasS'name'
p86193
S'/Mesh/Partitioner'
p86194
sasS'parameters'
p86195
(lp86196
(dp86197
S'description'
p86198
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p86199
sS'cpp_type'
p86200
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86201
sS'default'
p86202
g3
sS'name'
p86203
S'displacements'
p86204
sS'required'
p86205
I00
sS'group_name'
p86206
Nsa(dp86207
S'description'
p86208
S'IDs of the block id/name pairs\n'
p86209
sS'cpp_type'
p86210
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p86211
sS'default'
p86212
g3
sS'name'
p86213
S'block_id'
p86214
sS'required'
p86215
I00
sS'group_name'
p86216
S'Add Names'
p86217
sa(dp86218
S'description'
p86219
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p86220
sS'cpp_type'
p86221
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p86222
sS'default'
p86223
g3
sS'name'
p86224
S'block_name'
p86225
sS'required'
p86226
I00
sS'group_name'
p86227
S'Add Names'
p86228
sa(dp86229
S'description'
p86230
S'IDs of the boundary id/name pairs\n'
p86231
sS'cpp_type'
p86232
S'std::vector<short, std::allocator<short> >'
p86233
sS'default'
p86234
g3
sS'name'
p86235
S'boundary_id'
p86236
sS'required'
p86237
I00
sS'group_name'
p86238
S'Add Names'
p86239
sa(dp86240
S'description'
p86241
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p86242
sS'cpp_type'
p86243
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86244
sS'default'
p86245
g3
sS'name'
p86246
S'boundary_name'
p86247
sS'required'
p86248
I00
sS'group_name'
p86249
S'Add Names'
p86250
sa(dp86251
S'description'
p86252
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p86253
sS'cpp_type'
p86254
S'bool'
p86255
sS'default'
p86256
S'0'
p86257
sS'name'
p86258
S'construct_side_list_from_node_list'
p86259
sS'required'
p86260
I00
sS'group_name'
p86261
S'Advanced'
p86262
sa(dp86263
S'description'
p86264
S'Boundaries to be ghosted if using Nemesis\n'
p86265
sS'cpp_type'
p86266
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86267
sS'default'
p86268
g3
sS'name'
p86269
S'ghosted_boundaries'
p86270
sS'required'
p86271
I00
sS'group_name'
p86272
S'Advanced'
p86273
sa(dp86274
S'description'
p86275
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p86276
sS'cpp_type'
p86277
S'std::vector<double, std::allocator<double> >'
p86278
sS'default'
p86279
g3
sS'name'
p86280
S'ghosted_boundaries_inflation'
p86281
sS'required'
p86282
I00
sS'group_name'
p86283
S'Advanced'
p86284
sa(dp86285
S'description'
p86286
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p86287
sS'cpp_type'
p86288
S'unsigned int'
p86289
sS'default'
p86290
S'40'
p86291
sS'name'
p86292
S'patch_size'
p86293
sS'required'
p86294
I00
sS'group_name'
p86295
S'Advanced'
p86296
sa(dp86297
S'description'
p86298
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p86299
sS'cpp_type'
p86300
S'bool'
p86301
sS'default'
p86302
S'0'
p86303
sS'name'
p86304
S'second_order'
p86305
sS'required'
p86306
I00
sS'group_name'
p86307
S'Advanced'
p86308
sa(dp86309
S'description'
p86310
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p86311
sS'cpp_type'
p86312
S'bool'
p86313
sS'default'
p86314
S'0'
p86315
sS'name'
p86316
S'skip_partitioning'
p86317
sS'required'
p86318
I00
sS'group_name'
p86319
S'Advanced'
p86320
sa(dp86321
S'description'
p86322
S'A string representing the Moose Object that will be built by this Action\n'
p86323
sS'cpp_type'
p86324
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86325
sS'default'
p86326
S'FileMesh'
p86327
sS'name'
p86328
S'type'
p86329
sS'required'
p86330
I01
sS'group_name'
p86331
Nsa(dp86332
S'description'
p86333
S'Specify the level of uniform refinement applied to the initial mesh\n'
p86334
sS'cpp_type'
p86335
S'unsigned int'
p86336
sS'default'
p86337
S'0'
p86338
sS'name'
p86339
S'uniform_refine'
p86340
sS'required'
p86341
I00
sS'group_name'
p86342
NsasS'name'
p86343
S'/Mesh'
p86344
sa(dp86345
S'description'
p86346
g3
sS'subblocks'
p86347
(lp86348
(dp86349
S'description'
p86350
g3
sS'subblocks'
p86351
NsS'parameters'
p86352
(lp86353
(dp86354
S'description'
p86355
S'A string representing the Moose Object that will be built by this Action\n'
p86356
sS'cpp_type'
p86357
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86358
sS'default'
p86359
g3
sS'name'
p86360
S'type'
p86361
sS'required'
p86362
I01
sS'group_name'
p86363
NsasS'name'
p86364
S'/MeshModifiers/*'
p86365
sa(dp86366
S'description'
p86367
g3
sS'subblocks'
p86368
NsS'parameters'
p86369
(lp86370
(dp86371
S'description'
p86372
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86373
sS'cpp_type'
p86374
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86375
sS'default'
p86376
g3
sS'name'
p86377
S'control_tags'
p86378
sS'required'
p86379
I00
sS'group_name'
p86380
S'Advanced'
p86381
sa(dp86382
S'description'
p86383
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86384
sS'cpp_type'
p86385
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86386
sS'default'
p86387
g3
sS'name'
p86388
S'depends_on'
p86389
sS'required'
p86390
I00
sS'group_name'
p86391
Nsa(dp86392
S'description'
p86393
S'Set the enabled status of the MooseObject.\n'
p86394
sS'cpp_type'
p86395
S'bool'
p86396
sS'default'
p86397
S'1'
p86398
sS'name'
p86399
S'enable'
p86400
sS'required'
p86401
I00
sS'group_name'
p86402
S'Advanced'
p86403
sa(dp86404
S'description'
p86405
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p86406
sS'cpp_type'
p86407
S'bool'
p86408
sS'default'
p86409
S'0'
p86410
sS'name'
p86411
S'fixed_normal'
p86412
sS'required'
p86413
I00
sS'group_name'
p86414
Nsa(dp86415
S'description'
p86416
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86417
sS'cpp_type'
p86418
S'bool'
p86419
sS'default'
p86420
S'0'
p86421
sS'name'
p86422
S'force_prepare'
p86423
sS'required'
p86424
I00
sS'group_name'
p86425
Nsa(dp86426
S'description'
p86427
g3
sS'cpp_type'
p86428
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86429
sS'default'
p86430
S'AddAllSideSetsByNormals'
p86431
sS'name'
p86432
S'type'
p86433
sS'required'
p86434
I00
sS'group_name'
p86435
Nsa(dp86436
S'description'
p86437
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p86438
sS'cpp_type'
p86439
S'double'
p86440
sS'default'
p86441
S'0.1'
p86442
sS'name'
p86443
S'variance'
p86444
sS'required'
p86445
I00
sS'group_name'
p86446
NsasS'name'
p86447
S'/MeshModifiers/AddAllSideSetsByNormals'
p86448
sa(dp86449
S'description'
p86450
g3
sS'subblocks'
p86451
NsS'parameters'
p86452
(lp86453
(dp86454
S'description'
p86455
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86456
sS'cpp_type'
p86457
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86458
sS'default'
p86459
g3
sS'name'
p86460
S'control_tags'
p86461
sS'required'
p86462
I00
sS'group_name'
p86463
S'Advanced'
p86464
sa(dp86465
S'description'
p86466
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p86467
sS'cpp_type'
p86468
S'std::vector<double, std::allocator<double> >'
p86469
sS'default'
p86470
g3
sS'name'
p86471
S'coord'
p86472
sS'required'
p86473
I00
sS'group_name'
p86474
Nsa(dp86475
S'description'
p86476
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86477
sS'cpp_type'
p86478
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86479
sS'default'
p86480
g3
sS'name'
p86481
S'depends_on'
p86482
sS'required'
p86483
I00
sS'group_name'
p86484
Nsa(dp86485
S'description'
p86486
S'Set the enabled status of the MooseObject.\n'
p86487
sS'cpp_type'
p86488
S'bool'
p86489
sS'default'
p86490
S'1'
p86491
sS'name'
p86492
S'enable'
p86493
sS'required'
p86494
I00
sS'group_name'
p86495
S'Advanced'
p86496
sa(dp86497
S'description'
p86498
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86499
sS'cpp_type'
p86500
S'bool'
p86501
sS'default'
p86502
S'0'
p86503
sS'name'
p86504
S'force_prepare'
p86505
sS'required'
p86506
I00
sS'group_name'
p86507
Nsa(dp86508
S'description'
p86509
S'The name of the boundary to create\n'
p86510
sS'cpp_type'
p86511
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86512
sS'default'
p86513
g3
sS'name'
p86514
S'new_boundary'
p86515
sS'required'
p86516
I01
sS'group_name'
p86517
Nsa(dp86518
S'description'
p86519
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p86520
sS'cpp_type'
p86521
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p86522
sS'default'
p86523
g3
sS'name'
p86524
S'nodes'
p86525
sS'required'
p86526
I00
sS'group_name'
p86527
Nsa(dp86528
S'description'
p86529
S'The tolerance in which two nodes are considered identical\n'
p86530
sS'cpp_type'
p86531
S'double'
p86532
sS'default'
p86533
S'1e-06'
p86534
sS'name'
p86535
S'tolerance'
p86536
sS'required'
p86537
I00
sS'group_name'
p86538
Nsa(dp86539
S'description'
p86540
g3
sS'cpp_type'
p86541
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86542
sS'default'
p86543
S'AddExtraNodeset'
p86544
sS'name'
p86545
S'type'
p86546
sS'required'
p86547
I00
sS'group_name'
p86548
NsasS'name'
p86549
S'/MeshModifiers/AddExtraNodeset'
p86550
sa(dp86551
S'description'
p86552
g3
sS'subblocks'
p86553
NsS'parameters'
p86554
(lp86555
(dp86556
S'description'
p86557
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86558
sS'cpp_type'
p86559
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86560
sS'default'
p86561
g3
sS'name'
p86562
S'control_tags'
p86563
sS'required'
p86564
I00
sS'group_name'
p86565
S'Advanced'
p86566
sa(dp86567
S'description'
p86568
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86569
sS'cpp_type'
p86570
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86571
sS'default'
p86572
g3
sS'name'
p86573
S'depends_on'
p86574
sS'required'
p86575
I00
sS'group_name'
p86576
Nsa(dp86577
S'description'
p86578
S'New subdomain IDs of all elements\n'
p86579
sS'cpp_type'
p86580
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p86581
sS'default'
p86582
g3
sS'name'
p86583
S'element_ids'
p86584
sS'required'
p86585
I00
sS'group_name'
p86586
Nsa(dp86587
S'description'
p86588
S'Set the enabled status of the MooseObject.\n'
p86589
sS'cpp_type'
p86590
S'bool'
p86591
sS'default'
p86592
S'1'
p86593
sS'name'
p86594
S'enable'
p86595
sS'required'
p86596
I00
sS'group_name'
p86597
S'Advanced'
p86598
sa(dp86599
S'description'
p86600
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86601
sS'cpp_type'
p86602
S'bool'
p86603
sS'default'
p86604
S'0'
p86605
sS'name'
p86606
S'force_prepare'
p86607
sS'required'
p86608
I00
sS'group_name'
p86609
Nsa(dp86610
S'description'
p86611
S'New subdomain IDs of all elements\n'
p86612
sS'cpp_type'
p86613
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p86614
sS'default'
p86615
g3
sS'name'
p86616
S'subdomain_ids'
p86617
sS'required'
p86618
I01
sS'group_name'
p86619
Nsa(dp86620
S'description'
p86621
g3
sS'cpp_type'
p86622
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86623
sS'default'
p86624
S'AssignElementSubdomainID'
p86625
sS'name'
p86626
S'type'
p86627
sS'required'
p86628
I00
sS'group_name'
p86629
NsasS'name'
p86630
S'/MeshModifiers/AssignElementSubdomainID'
p86631
sa(dp86632
S'description'
p86633
g3
sS'subblocks'
p86634
NsS'parameters'
p86635
(lp86636
(dp86637
S'description'
p86638
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86639
sS'cpp_type'
p86640
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86641
sS'default'
p86642
g3
sS'name'
p86643
S'control_tags'
p86644
sS'required'
p86645
I00
sS'group_name'
p86646
S'Advanced'
p86647
sa(dp86648
S'description'
p86649
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86650
sS'cpp_type'
p86651
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86652
sS'default'
p86653
g3
sS'name'
p86654
S'depends_on'
p86655
sS'required'
p86656
I00
sS'group_name'
p86657
Nsa(dp86658
S'description'
p86659
S'Set the enabled status of the MooseObject.\n'
p86660
sS'cpp_type'
p86661
S'bool'
p86662
sS'default'
p86663
S'1'
p86664
sS'name'
p86665
S'enable'
p86666
sS'required'
p86667
I00
sS'group_name'
p86668
S'Advanced'
p86669
sa(dp86670
S'description'
p86671
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86672
sS'cpp_type'
p86673
S'bool'
p86674
sS'default'
p86675
S'0'
p86676
sS'name'
p86677
S'force_prepare'
p86678
sS'required'
p86679
I00
sS'group_name'
p86680
Nsa(dp86681
S'description'
p86682
S'New subdomain IDs of all elements\n'
p86683
sS'cpp_type'
p86684
S'unsigned short'
p86685
sS'default'
p86686
g3
sS'name'
p86687
S'subdomain_id'
p86688
sS'required'
p86689
I01
sS'group_name'
p86690
Nsa(dp86691
S'description'
p86692
g3
sS'cpp_type'
p86693
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86694
sS'default'
p86695
S'AssignSubdomainID'
p86696
sS'name'
p86697
S'type'
p86698
sS'required'
p86699
I00
sS'group_name'
p86700
NsasS'name'
p86701
S'/MeshModifiers/AssignSubdomainID'
p86702
sa(dp86703
S'description'
p86704
g3
sS'subblocks'
p86705
NsS'parameters'
p86706
(lp86707
(dp86708
S'description'
p86709
S'The block to be deleted\n'
p86710
sS'cpp_type'
p86711
S'unsigned short'
p86712
sS'default'
p86713
g3
sS'name'
p86714
S'block_id'
p86715
sS'required'
p86716
I01
sS'group_name'
p86717
Nsa(dp86718
S'description'
p86719
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86720
sS'cpp_type'
p86721
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86722
sS'default'
p86723
g3
sS'name'
p86724
S'control_tags'
p86725
sS'required'
p86726
I00
sS'group_name'
p86727
S'Advanced'
p86728
sa(dp86729
S'description'
p86730
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86731
sS'cpp_type'
p86732
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86733
sS'default'
p86734
g3
sS'name'
p86735
S'depends_on'
p86736
sS'required'
p86737
I00
sS'group_name'
p86738
Nsa(dp86739
S'description'
p86740
S'Set the enabled status of the MooseObject.\n'
p86741
sS'cpp_type'
p86742
S'bool'
p86743
sS'default'
p86744
S'1'
p86745
sS'name'
p86746
S'enable'
p86747
sS'required'
p86748
I00
sS'group_name'
p86749
S'Advanced'
p86750
sa(dp86751
S'description'
p86752
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86753
sS'cpp_type'
p86754
S'bool'
p86755
sS'default'
p86756
S'0'
p86757
sS'name'
p86758
S'force_prepare'
p86759
sS'required'
p86760
I00
sS'group_name'
p86761
Nsa(dp86762
S'description'
p86763
g3
sS'cpp_type'
p86764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86765
sS'default'
p86766
S'BlockDeleter'
p86767
sS'name'
p86768
S'type'
p86769
sS'required'
p86770
I00
sS'group_name'
p86771
NsasS'name'
p86772
S'/MeshModifiers/BlockDeleter'
p86773
sa(dp86774
S'description'
p86775
g3
sS'subblocks'
p86776
NsS'parameters'
p86777
(lp86778
(dp86779
S'description'
p86780
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p86781
sS'cpp_type'
p86782
S'libMesh::VectorValue<double>'
p86783
sS'default'
p86784
g3
sS'name'
p86785
S'bottom_left'
p86786
sS'required'
p86787
I01
sS'group_name'
p86788
Nsa(dp86789
S'description'
p86790
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86791
sS'cpp_type'
p86792
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86793
sS'default'
p86794
g3
sS'name'
p86795
S'control_tags'
p86796
sS'required'
p86797
I00
sS'group_name'
p86798
S'Advanced'
p86799
sa(dp86800
S'description'
p86801
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86802
sS'cpp_type'
p86803
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86804
sS'default'
p86805
g3
sS'name'
p86806
S'depends_on'
p86807
sS'required'
p86808
I00
sS'group_name'
p86809
Nsa(dp86810
S'description'
p86811
S'Set the enabled status of the MooseObject.\n'
p86812
sS'cpp_type'
p86813
S'bool'
p86814
sS'default'
p86815
S'1'
p86816
sS'name'
p86817
S'enable'
p86818
sS'required'
p86819
I00
sS'group_name'
p86820
S'Advanced'
p86821
sa(dp86822
S'description'
p86823
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86824
sS'cpp_type'
p86825
S'bool'
p86826
sS'default'
p86827
S'0'
p86828
sS'name'
p86829
S'force_prepare'
p86830
sS'required'
p86831
I00
sS'group_name'
p86832
Nsa(dp86833
S'name'
p86834
S'location'
p86835
sS'cpp_type'
p86836
S'MooseEnum'
p86837
sS'default'
p86838
S'INSIDE'
p86839
sS'description'
p86840
S'Control of where the nodeset is to be set\n'
p86841
sS'required'
p86842
I00
sS'options'
p86843
S'INSIDE OUTSIDE'
p86844
sS'group_name'
p86845
Nsa(dp86846
S'description'
p86847
S'The name of the nodeset to create\n'
p86848
sS'cpp_type'
p86849
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86850
sS'default'
p86851
g3
sS'name'
p86852
S'new_boundary'
p86853
sS'required'
p86854
I01
sS'group_name'
p86855
Nsa(dp86856
S'description'
p86857
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p86858
sS'cpp_type'
p86859
S'libMesh::VectorValue<double>'
p86860
sS'default'
p86861
g3
sS'name'
p86862
S'top_right'
p86863
sS'required'
p86864
I01
sS'group_name'
p86865
Nsa(dp86866
S'description'
p86867
g3
sS'cpp_type'
p86868
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86869
sS'default'
p86870
S'BoundingBoxNodeSet'
p86871
sS'name'
p86872
S'type'
p86873
sS'required'
p86874
I00
sS'group_name'
p86875
NsasS'name'
p86876
S'/MeshModifiers/BoundingBoxNodeSet'
p86877
sa(dp86878
S'description'
p86879
S'Break boundaries based on the subdomains to which their sides are attached. Naming convention for the new boundaries will be the old boundary name plus "_to_" plus the subdomain name\n'
p86880
sS'subblocks'
p86881
NsS'parameters'
p86882
(lp86883
(dp86884
S'description'
p86885
S'Boundaries to be broken. Default means to break all boundaries\n'
p86886
sS'cpp_type'
p86887
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86888
sS'default'
p86889
g3
sS'name'
p86890
S'boundaries'
p86891
sS'required'
p86892
I00
sS'group_name'
p86893
Nsa(dp86894
S'description'
p86895
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86896
sS'cpp_type'
p86897
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86898
sS'default'
p86899
g3
sS'name'
p86900
S'control_tags'
p86901
sS'required'
p86902
I00
sS'group_name'
p86903
S'Advanced'
p86904
sa(dp86905
S'description'
p86906
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86907
sS'cpp_type'
p86908
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86909
sS'default'
p86910
g3
sS'name'
p86911
S'depends_on'
p86912
sS'required'
p86913
I00
sS'group_name'
p86914
Nsa(dp86915
S'description'
p86916
S'Set the enabled status of the MooseObject.\n'
p86917
sS'cpp_type'
p86918
S'bool'
p86919
sS'default'
p86920
S'1'
p86921
sS'name'
p86922
S'enable'
p86923
sS'required'
p86924
I00
sS'group_name'
p86925
S'Advanced'
p86926
sa(dp86927
S'description'
p86928
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p86929
sS'cpp_type'
p86930
S'bool'
p86931
sS'default'
p86932
S'0'
p86933
sS'name'
p86934
S'force_prepare'
p86935
sS'required'
p86936
I00
sS'group_name'
p86937
Nsa(dp86938
S'description'
p86939
g3
sS'cpp_type'
p86940
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86941
sS'default'
p86942
S'BreakBoundaryOnSubdomain'
p86943
sS'name'
p86944
S'type'
p86945
sS'required'
p86946
I00
sS'group_name'
p86947
NsasS'name'
p86948
S'/MeshModifiers/BreakBoundaryOnSubdomain'
p86949
sa(dp86950
S'description'
p86951
g3
sS'subblocks'
p86952
NsS'parameters'
p86953
(lp86954
(dp86955
S'description'
p86956
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p86957
sS'cpp_type'
p86958
S'unsigned int'
p86959
sS'default'
p86960
g3
sS'name'
p86961
S'component'
p86962
sS'required'
p86963
I00
sS'group_name'
p86964
Nsa(dp86965
S'description'
p86966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86967
sS'cpp_type'
p86968
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86969
sS'default'
p86970
g3
sS'name'
p86971
S'control_tags'
p86972
sS'required'
p86973
I00
sS'group_name'
p86974
S'Advanced'
p86975
sa(dp86976
S'description'
p86977
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p86978
sS'cpp_type'
p86979
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86980
sS'default'
p86981
g3
sS'name'
p86982
S'depends_on'
p86983
sS'required'
p86984
I00
sS'group_name'
p86985
Nsa(dp86986
S'description'
p86987
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p86988
sS'cpp_type'
p86989
S'libMesh::Point'
p86990
sS'default'
p86991
g3
sS'name'
p86992
S'dimensions'
p86993
sS'required'
p86994
I00
sS'group_name'
p86995
Nsa(dp86996
S'description'
p86997
S'Set the enabled status of the MooseObject.\n'
p86998
sS'cpp_type'
p86999
S'bool'
p87000
sS'default'
p87001
S'1'
p87002
sS'name'
p87003
S'enable'
p87004
sS'required'
p87005
I00
sS'group_name'
p87006
S'Advanced'
p87007
sa(dp87008
S'description'
p87009
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p87010
sS'cpp_type'
p87011
S'FileName'
p87012
sS'default'
p87013
g3
sS'name'
p87014
S'file'
p87015
sS'required'
p87016
I00
sS'group_name'
p87017
Nsa(dp87018
S'description'
p87019
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p87020
sS'cpp_type'
p87021
S'FileNameNoExtension'
p87022
sS'default'
p87023
g3
sS'name'
p87024
S'file_base'
p87025
sS'required'
p87026
I00
sS'group_name'
p87027
Nsa(dp87028
S'description'
p87029
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p87030
sS'cpp_type'
p87031
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p87032
sS'default'
p87033
g3
sS'name'
p87034
S'file_range'
p87035
sS'required'
p87036
I00
sS'group_name'
p87037
Nsa(dp87038
S'description'
p87039
S"Suffix of the file to open, e.g. 'png'\n"
p87040
sS'cpp_type'
p87041
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87042
sS'default'
p87043
g3
sS'name'
p87044
S'file_suffix'
p87045
sS'required'
p87046
I00
sS'group_name'
p87047
Nsa(dp87048
S'description'
p87049
S'Flip the image along the x-axis\n'
p87050
sS'cpp_type'
p87051
S'bool'
p87052
sS'default'
p87053
S'0'
p87054
sS'name'
p87055
S'flip_x'
p87056
sS'required'
p87057
I00
sS'group_name'
p87058
S'Flip'
p87059
sa(dp87060
S'description'
p87061
S'Flip the image along the y-axis\n'
p87062
sS'cpp_type'
p87063
S'bool'
p87064
sS'default'
p87065
S'0'
p87066
sS'name'
p87067
S'flip_y'
p87068
sS'required'
p87069
I00
sS'group_name'
p87070
S'Flip'
p87071
sa(dp87072
S'description'
p87073
S'Flip the image along the z-axis\n'
p87074
sS'cpp_type'
p87075
S'bool'
p87076
sS'default'
p87077
S'0'
p87078
sS'name'
p87079
S'flip_z'
p87080
sS'required'
p87081
I00
sS'group_name'
p87082
S'Flip'
p87083
sa(dp87084
S'description'
p87085
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87086
sS'cpp_type'
p87087
S'bool'
p87088
sS'default'
p87089
S'0'
p87090
sS'name'
p87091
S'force_prepare'
p87092
sS'required'
p87093
I00
sS'group_name'
p87094
Nsa(dp87095
S'description'
p87096
S'The value to set for data less than the threshold value\n'
p87097
sS'cpp_type'
p87098
S'double'
p87099
sS'default'
p87100
S'0'
p87101
sS'name'
p87102
S'lower_value'
p87103
sS'required'
p87104
I00
sS'group_name'
p87105
S'Threshold'
p87106
sa(dp87107
S'description'
p87108
S'Origin of the image (defaults to mesh origin)\n'
p87109
sS'cpp_type'
p87110
S'libMesh::Point'
p87111
sS'default'
p87112
g3
sS'name'
p87113
S'origin'
p87114
sS'required'
p87115
I00
sS'group_name'
p87116
Nsa(dp87117
S'description'
p87118
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p87119
sS'cpp_type'
p87120
S'double'
p87121
sS'default'
p87122
S'1'
p87123
sS'name'
p87124
S'scale'
p87125
sS'required'
p87126
I00
sS'group_name'
p87127
S'Rescale'
p87128
sa(dp87129
S'description'
p87130
S'Value to add to all pixels; occurs prior to scaling\n'
p87131
sS'cpp_type'
p87132
S'double'
p87133
sS'default'
p87134
S'0'
p87135
sS'name'
p87136
S'shift'
p87137
sS'required'
p87138
I00
sS'group_name'
p87139
S'Rescale'
p87140
sa(dp87141
S'description'
p87142
S'The threshold value\n'
p87143
sS'cpp_type'
p87144
S'double'
p87145
sS'default'
p87146
g3
sS'name'
p87147
S'threshold'
p87148
sS'required'
p87149
I00
sS'group_name'
p87150
S'Threshold'
p87151
sa(dp87152
S'description'
p87153
g3
sS'cpp_type'
p87154
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87155
sS'default'
p87156
S'ImageSubdomain'
p87157
sS'name'
p87158
S'type'
p87159
sS'required'
p87160
I00
sS'group_name'
p87161
Nsa(dp87162
S'description'
p87163
S'The value to set for data greater than the threshold value\n'
p87164
sS'cpp_type'
p87165
S'double'
p87166
sS'default'
p87167
S'1'
p87168
sS'name'
p87169
S'upper_value'
p87170
sS'required'
p87171
I00
sS'group_name'
p87172
S'Threshold'
p87173
sasS'name'
p87174
S'/MeshModifiers/ImageSubdomain'
p87175
sa(dp87176
S'description'
p87177
g3
sS'subblocks'
p87178
NsS'parameters'
p87179
(lp87180
(dp87181
S'description'
p87182
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p87183
sS'cpp_type'
p87184
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87185
sS'default'
p87186
g3
sS'name'
p87187
S'bottom_sideset'
p87188
sS'required'
p87189
I00
sS'group_name'
p87190
Nsa(dp87191
S'description'
p87192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87193
sS'cpp_type'
p87194
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87195
sS'default'
p87196
g3
sS'name'
p87197
S'control_tags'
p87198
sS'required'
p87199
I00
sS'group_name'
p87200
S'Advanced'
p87201
sa(dp87202
S'description'
p87203
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87204
sS'cpp_type'
p87205
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87206
sS'default'
p87207
g3
sS'name'
p87208
S'depends_on'
p87209
sS'required'
p87210
I00
sS'group_name'
p87211
Nsa(dp87212
S'description'
p87213
S'Set the enabled status of the MooseObject.\n'
p87214
sS'cpp_type'
p87215
S'bool'
p87216
sS'default'
p87217
S'1'
p87218
sS'name'
p87219
S'enable'
p87220
sS'required'
p87221
I00
sS'group_name'
p87222
S'Advanced'
p87223
sa(dp87224
S'description'
p87225
S'The subdomains that will be remapped for specific layers\n'
p87226
sS'cpp_type'
p87227
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87228
sS'default'
p87229
g3
sS'name'
p87230
S'existing_subdomains'
p87231
sS'required'
p87232
I00
sS'group_name'
p87233
Nsa(dp87234
S'description'
p87235
S'The direction and length of the extrusion\n'
p87236
sS'cpp_type'
p87237
S'libMesh::VectorValue<double>'
p87238
sS'default'
p87239
g3
sS'name'
p87240
S'extrusion_vector'
p87241
sS'required'
p87242
I01
sS'group_name'
p87243
Nsa(dp87244
S'description'
p87245
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87246
sS'cpp_type'
p87247
S'bool'
p87248
sS'default'
p87249
S'0'
p87250
sS'name'
p87251
S'force_prepare'
p87252
sS'required'
p87253
I00
sS'group_name'
p87254
Nsa(dp87255
S'description'
p87256
S'The layers where the "existing_subdomain" will be remapped to new ids\n'
p87257
sS'cpp_type'
p87258
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p87259
sS'default'
p87260
g3
sS'name'
p87261
S'layers'
p87262
sS'required'
p87263
I00
sS'group_name'
p87264
Nsa(dp87265
S'description'
p87266
S'The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n'
p87267
sS'cpp_type'
p87268
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p87269
sS'default'
p87270
g3
sS'name'
p87271
S'new_ids'
p87272
sS'required'
p87273
I00
sS'group_name'
p87274
Nsa(dp87275
S'description'
p87276
S'The number of layers in the extruded mesh\n'
p87277
sS'cpp_type'
p87278
S'unsigned int'
p87279
sS'default'
p87280
S'1'
p87281
sS'name'
p87282
S'num_layers'
p87283
sS'required'
p87284
I00
sS'group_name'
p87285
Nsa(dp87286
S'description'
p87287
S'The boundary that will be to the top of the extruded mesh\n'
p87288
sS'cpp_type'
p87289
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87290
sS'default'
p87291
g3
sS'name'
p87292
S'top_sideset'
p87293
sS'required'
p87294
I00
sS'group_name'
p87295
Nsa(dp87296
S'description'
p87297
g3
sS'cpp_type'
p87298
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87299
sS'default'
p87300
S'MeshExtruder'
p87301
sS'name'
p87302
S'type'
p87303
sS'required'
p87304
I00
sS'group_name'
p87305
NsasS'name'
p87306
S'/MeshModifiers/MeshExtruder'
p87307
sa(dp87308
S'description'
p87309
g3
sS'subblocks'
p87310
NsS'parameters'
p87311
(lp87312
(dp87313
S'description'
p87314
S'Subdomain id to set for inside/outside the bounding box\n'
p87315
sS'cpp_type'
p87316
S'unsigned short'
p87317
sS'default'
p87318
g3
sS'name'
p87319
S'block_id'
p87320
sS'required'
p87321
I01
sS'group_name'
p87322
Nsa(dp87323
S'description'
p87324
S"The center (many people spell this 'center') of the box.\n"
p87325
sS'cpp_type'
p87326
S'libMesh::Point'
p87327
sS'default'
p87328
g3
sS'name'
p87329
S'center'
p87330
sS'required'
p87331
I01
sS'group_name'
p87332
Nsa(dp87333
S'description'
p87334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87335
sS'cpp_type'
p87336
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87337
sS'default'
p87338
g3
sS'name'
p87339
S'control_tags'
p87340
sS'required'
p87341
I00
sS'group_name'
p87342
S'Advanced'
p87343
sa(dp87344
S'description'
p87345
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87346
sS'cpp_type'
p87347
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87348
sS'default'
p87349
g3
sS'name'
p87350
S'depends_on'
p87351
sS'required'
p87352
I00
sS'group_name'
p87353
Nsa(dp87354
S'description'
p87355
S'Set the enabled status of the MooseObject.\n'
p87356
sS'cpp_type'
p87357
S'bool'
p87358
sS'default'
p87359
S'1'
p87360
sS'name'
p87361
S'enable'
p87362
sS'required'
p87363
I00
sS'group_name'
p87364
S'Advanced'
p87365
sa(dp87366
S'description'
p87367
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87368
sS'cpp_type'
p87369
S'bool'
p87370
sS'default'
p87371
S'0'
p87372
sS'name'
p87373
S'force_prepare'
p87374
sS'required'
p87375
I00
sS'group_name'
p87376
Nsa(dp87377
S'description'
p87378
S'The height of the box\n'
p87379
sS'cpp_type'
p87380
S'double'
p87381
sS'default'
p87382
g3
sS'name'
p87383
S'height'
p87384
sS'required'
p87385
I01
sS'group_name'
p87386
Nsa(dp87387
S'description'
p87388
S'The length of the box\n'
p87389
sS'cpp_type'
p87390
S'double'
p87391
sS'default'
p87392
g3
sS'name'
p87393
S'length'
p87394
sS'required'
p87395
I01
sS'group_name'
p87396
Nsa(dp87397
S'description'
p87398
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p87399
sS'cpp_type'
p87400
S'libMesh::VectorValue<double>'
p87401
sS'default'
p87402
g3
sS'name'
p87403
S'length_direction'
p87404
sS'required'
p87405
I01
sS'group_name'
p87406
Nsa(dp87407
S'name'
p87408
S'location'
p87409
sS'cpp_type'
p87410
S'MooseEnum'
p87411
sS'default'
p87412
S'INSIDE'
p87413
sS'description'
p87414
S'Control of where the subdomain id is to be set\n'
p87415
sS'required'
p87416
I00
sS'options'
p87417
S'INSIDE OUTSIDE'
p87418
sS'group_name'
p87419
Nsa(dp87420
S'description'
p87421
g3
sS'cpp_type'
p87422
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87423
sS'default'
p87424
S'OrientedSubdomainBoundingBox'
p87425
sS'name'
p87426
S'type'
p87427
sS'required'
p87428
I00
sS'group_name'
p87429
Nsa(dp87430
S'description'
p87431
S'The width of the box\n'
p87432
sS'cpp_type'
p87433
S'double'
p87434
sS'default'
p87435
g3
sS'name'
p87436
S'width'
p87437
sS'required'
p87438
I01
sS'group_name'
p87439
Nsa(dp87440
S'description'
p87441
S'The direction along which the width is oriented.\n'
p87442
sS'cpp_type'
p87443
S'libMesh::VectorValue<double>'
p87444
sS'default'
p87445
g3
sS'name'
p87446
S'width_direction'
p87447
sS'required'
p87448
I01
sS'group_name'
p87449
NsasS'name'
p87450
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p87451
sa(dp87452
S'description'
p87453
S"A MeshModifier that adds element's sides to a sideset if the centroid satisfies the combinatorial_geometry expression, (and optionally) if one of the side's elements is in included_subdomain_ids and if it features the correct normal.\n"
p87454
sS'subblocks'
p87455
NsS'parameters'
p87456
(lp87457
(dp87458
S'description'
p87459
S'Function expression encoding a combinatorial geometry\n'
p87460
sS'cpp_type'
p87461
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87462
sS'default'
p87463
g3
sS'name'
p87464
S'combinatorial_geometry'
p87465
sS'required'
p87466
I01
sS'group_name'
p87467
Nsa(dp87468
S'description'
p87469
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p87470
sS'cpp_type'
p87471
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87472
sS'default'
p87473
g3
sS'name'
p87474
S'constant_expressions'
p87475
sS'required'
p87476
I00
sS'group_name'
p87477
Nsa(dp87478
S'description'
p87479
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p87480
sS'cpp_type'
p87481
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87482
sS'default'
p87483
g3
sS'name'
p87484
S'constant_names'
p87485
sS'required'
p87486
I00
sS'group_name'
p87487
Nsa(dp87488
S'description'
p87489
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87490
sS'cpp_type'
p87491
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87492
sS'default'
p87493
g3
sS'name'
p87494
S'control_tags'
p87495
sS'required'
p87496
I00
sS'group_name'
p87497
S'Advanced'
p87498
sa(dp87499
S'description'
p87500
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87501
sS'cpp_type'
p87502
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87503
sS'default'
p87504
g3
sS'name'
p87505
S'depends_on'
p87506
sS'required'
p87507
I00
sS'group_name'
p87508
Nsa(dp87509
S'description'
p87510
S'Disable the function parser algebraic optimizer\n'
p87511
sS'cpp_type'
p87512
S'bool'
p87513
sS'default'
p87514
S'0'
p87515
sS'name'
p87516
S'disable_fpoptimizer'
p87517
sS'required'
p87518
I00
sS'group_name'
p87519
S'Advanced'
p87520
sa(dp87521
S'description'
p87522
S'Set the enabled status of the MooseObject.\n'
p87523
sS'cpp_type'
p87524
S'bool'
p87525
sS'default'
p87526
S'1'
p87527
sS'name'
p87528
S'enable'
p87529
sS'required'
p87530
I00
sS'group_name'
p87531
S'Advanced'
p87532
sa(dp87533
S'description'
p87534
S'Enable cacheing of function derivatives for faster startup time\n'
p87535
sS'cpp_type'
p87536
S'bool'
p87537
sS'default'
p87538
S'1'
p87539
sS'name'
p87540
S'enable_ad_cache'
p87541
sS'required'
p87542
I00
sS'group_name'
p87543
S'Advanced'
p87544
sa(dp87545
S'description'
p87546
S'Enable automatic immediate optimization of derivatives\n'
p87547
sS'cpp_type'
p87548
S'bool'
p87549
sS'default'
p87550
S'1'
p87551
sS'name'
p87552
S'enable_auto_optimize'
p87553
sS'required'
p87554
I00
sS'group_name'
p87555
S'Advanced'
p87556
sa(dp87557
S'description'
p87558
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p87559
sS'cpp_type'
p87560
S'bool'
p87561
sS'default'
p87562
S'1'
p87563
sS'name'
p87564
S'enable_jit'
p87565
sS'required'
p87566
I00
sS'group_name'
p87567
S'Advanced'
p87568
sa(dp87569
S'description'
p87570
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p87571
sS'cpp_type'
p87572
S'bool'
p87573
sS'default'
p87574
S'0'
p87575
sS'name'
p87576
S'fail_on_evalerror'
p87577
sS'required'
p87578
I00
sS'group_name'
p87579
S'Advanced'
p87580
sa(dp87581
S'description'
p87582
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87583
sS'cpp_type'
p87584
S'bool'
p87585
sS'default'
p87586
S'0'
p87587
sS'name'
p87588
S'fixed_normal'
p87589
sS'required'
p87590
I00
sS'group_name'
p87591
Nsa(dp87592
S'description'
p87593
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87594
sS'cpp_type'
p87595
S'bool'
p87596
sS'default'
p87597
S'0'
p87598
sS'name'
p87599
S'force_prepare'
p87600
sS'required'
p87601
I00
sS'group_name'
p87602
Nsa(dp87603
S'description'
p87604
S'A set of subdomain ids whose sides will be included in the new sidesets\n'
p87605
sS'cpp_type'
p87606
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87607
sS'default'
p87608
g3
sS'name'
p87609
S'included_subdomain_ids'
p87610
sS'required'
p87611
I00
sS'group_name'
p87612
Nsa(dp87613
S'description'
p87614
S'The name of the new sideset\n'
p87615
sS'cpp_type'
p87616
S'BoundaryName'
p87617
sS'default'
p87618
g3
sS'name'
p87619
S'new_sideset_name'
p87620
sS'required'
p87621
I01
sS'group_name'
p87622
Nsa(dp87623
S'description'
p87624
S'If provided specifies the normal vector on sides that are added to the new \n'
p87625
sS'cpp_type'
p87626
S'libMesh::Point'
p87627
sS'default'
p87628
S'0 0 0'
p87629
sS'name'
p87630
S'normal'
p87631
sS'required'
p87632
I00
sS'group_name'
p87633
Nsa(dp87634
S'description'
p87635
g3
sS'cpp_type'
p87636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87637
sS'default'
p87638
S'ParsedAddSideset'
p87639
sS'name'
p87640
S'type'
p87641
sS'required'
p87642
I00
sS'group_name'
p87643
Nsa(dp87644
S'description'
p87645
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p87646
sS'cpp_type'
p87647
S'double'
p87648
sS'default'
p87649
S'0.1'
p87650
sS'name'
p87651
S'variance'
p87652
sS'required'
p87653
I00
sS'group_name'
p87654
NsasS'name'
p87655
S'/MeshModifiers/ParsedAddSideset'
p87656
sa(dp87657
S'description'
p87658
S'MeshModifier that uses a parsed expression (combinatorial_geometry) to determine if an element (aka its centroid) is inside the combinatorial geometry and assigns a new block id.\n'
p87659
sS'subblocks'
p87660
NsS'parameters'
p87661
(lp87662
(dp87663
S'description'
p87664
S'Subdomain id to set for inside of the combinatorial\n'
p87665
sS'cpp_type'
p87666
S'unsigned short'
p87667
sS'default'
p87668
g3
sS'name'
p87669
S'block_id'
p87670
sS'required'
p87671
I01
sS'group_name'
p87672
Nsa(dp87673
S'description'
p87674
S'Subdomain name to set for inside of the combinatorial\n'
p87675
sS'cpp_type'
p87676
S'SubdomainName'
p87677
sS'default'
p87678
g3
sS'name'
p87679
S'block_name'
p87680
sS'required'
p87681
I00
sS'group_name'
p87682
Nsa(dp87683
S'description'
p87684
S'Function expression encoding a combinatorial geometry\n'
p87685
sS'cpp_type'
p87686
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87687
sS'default'
p87688
g3
sS'name'
p87689
S'combinatorial_geometry'
p87690
sS'required'
p87691
I01
sS'group_name'
p87692
Nsa(dp87693
S'description'
p87694
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p87695
sS'cpp_type'
p87696
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87697
sS'default'
p87698
g3
sS'name'
p87699
S'constant_expressions'
p87700
sS'required'
p87701
I00
sS'group_name'
p87702
Nsa(dp87703
S'description'
p87704
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p87705
sS'cpp_type'
p87706
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87707
sS'default'
p87708
g3
sS'name'
p87709
S'constant_names'
p87710
sS'required'
p87711
I00
sS'group_name'
p87712
Nsa(dp87713
S'description'
p87714
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87715
sS'cpp_type'
p87716
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87717
sS'default'
p87718
g3
sS'name'
p87719
S'control_tags'
p87720
sS'required'
p87721
I00
sS'group_name'
p87722
S'Advanced'
p87723
sa(dp87724
S'description'
p87725
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87726
sS'cpp_type'
p87727
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87728
sS'default'
p87729
g3
sS'name'
p87730
S'depends_on'
p87731
sS'required'
p87732
I00
sS'group_name'
p87733
Nsa(dp87734
S'description'
p87735
S'Disable the function parser algebraic optimizer\n'
p87736
sS'cpp_type'
p87737
S'bool'
p87738
sS'default'
p87739
S'0'
p87740
sS'name'
p87741
S'disable_fpoptimizer'
p87742
sS'required'
p87743
I00
sS'group_name'
p87744
S'Advanced'
p87745
sa(dp87746
S'description'
p87747
S'Set the enabled status of the MooseObject.\n'
p87748
sS'cpp_type'
p87749
S'bool'
p87750
sS'default'
p87751
S'1'
p87752
sS'name'
p87753
S'enable'
p87754
sS'required'
p87755
I00
sS'group_name'
p87756
S'Advanced'
p87757
sa(dp87758
S'description'
p87759
S'Enable cacheing of function derivatives for faster startup time\n'
p87760
sS'cpp_type'
p87761
S'bool'
p87762
sS'default'
p87763
S'1'
p87764
sS'name'
p87765
S'enable_ad_cache'
p87766
sS'required'
p87767
I00
sS'group_name'
p87768
S'Advanced'
p87769
sa(dp87770
S'description'
p87771
S'Enable automatic immediate optimization of derivatives\n'
p87772
sS'cpp_type'
p87773
S'bool'
p87774
sS'default'
p87775
S'1'
p87776
sS'name'
p87777
S'enable_auto_optimize'
p87778
sS'required'
p87779
I00
sS'group_name'
p87780
S'Advanced'
p87781
sa(dp87782
S'description'
p87783
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p87784
sS'cpp_type'
p87785
S'bool'
p87786
sS'default'
p87787
S'1'
p87788
sS'name'
p87789
S'enable_jit'
p87790
sS'required'
p87791
I00
sS'group_name'
p87792
S'Advanced'
p87793
sa(dp87794
S'description'
p87795
S'A set of subdomain ids that will not changed even if they are inside/outside the combinatorial geometry\n'
p87796
sS'cpp_type'
p87797
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87798
sS'default'
p87799
g3
sS'name'
p87800
S'excluded_subdomain_ids'
p87801
sS'required'
p87802
I00
sS'group_name'
p87803
Nsa(dp87804
S'description'
p87805
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p87806
sS'cpp_type'
p87807
S'bool'
p87808
sS'default'
p87809
S'0'
p87810
sS'name'
p87811
S'fail_on_evalerror'
p87812
sS'required'
p87813
I00
sS'group_name'
p87814
S'Advanced'
p87815
sa(dp87816
S'description'
p87817
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87818
sS'cpp_type'
p87819
S'bool'
p87820
sS'default'
p87821
S'0'
p87822
sS'name'
p87823
S'force_prepare'
p87824
sS'required'
p87825
I00
sS'group_name'
p87826
Nsa(dp87827
S'description'
p87828
g3
sS'cpp_type'
p87829
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87830
sS'default'
p87831
S'ParsedSubdomainMeshModifier'
p87832
sS'name'
p87833
S'type'
p87834
sS'required'
p87835
I00
sS'group_name'
p87836
NsasS'name'
p87837
S'/MeshModifiers/ParsedSubdomainMeshModifier'
p87838
sa(dp87839
S'description'
p87840
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p87841
sS'subblocks'
p87842
NsS'parameters'
p87843
(lp87844
(dp87845
S'description'
p87846
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87847
sS'cpp_type'
p87848
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87849
sS'default'
p87850
g3
sS'name'
p87851
S'control_tags'
p87852
sS'required'
p87853
I00
sS'group_name'
p87854
S'Advanced'
p87855
sa(dp87856
S'description'
p87857
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87858
sS'cpp_type'
p87859
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87860
sS'default'
p87861
g3
sS'name'
p87862
S'depends_on'
p87863
sS'required'
p87864
I00
sS'group_name'
p87865
Nsa(dp87866
S'description'
p87867
S'Set the enabled status of the MooseObject.\n'
p87868
sS'cpp_type'
p87869
S'bool'
p87870
sS'default'
p87871
S'1'
p87872
sS'name'
p87873
S'enable'
p87874
sS'required'
p87875
I00
sS'group_name'
p87876
S'Advanced'
p87877
sa(dp87878
S'description'
p87879
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p87880
sS'cpp_type'
p87881
S'bool'
p87882
sS'default'
p87883
S'0'
p87884
sS'name'
p87885
S'force_prepare'
p87886
sS'required'
p87887
I00
sS'group_name'
p87888
Nsa(dp87889
S'description'
p87890
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p87891
sS'cpp_type'
p87892
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87893
sS'default'
p87894
g3
sS'name'
p87895
S'new_block_id'
p87896
sS'required'
p87897
I00
sS'group_name'
p87898
Nsa(dp87899
S'description'
p87900
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p87901
sS'cpp_type'
p87902
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87903
sS'default'
p87904
g3
sS'name'
p87905
S'new_block_name'
p87906
sS'required'
p87907
I00
sS'group_name'
p87908
Nsa(dp87909
S'description'
p87910
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p87911
sS'cpp_type'
p87912
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87913
sS'default'
p87914
g3
sS'name'
p87915
S'old_block_id'
p87916
sS'required'
p87917
I00
sS'group_name'
p87918
Nsa(dp87919
S'description'
p87920
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p87921
sS'cpp_type'
p87922
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87923
sS'default'
p87924
g3
sS'name'
p87925
S'old_block_name'
p87926
sS'required'
p87927
I00
sS'group_name'
p87928
Nsa(dp87929
S'description'
p87930
g3
sS'cpp_type'
p87931
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87932
sS'default'
p87933
S'RenameBlock'
p87934
sS'name'
p87935
S'type'
p87936
sS'required'
p87937
I00
sS'group_name'
p87938
NsasS'name'
p87939
S'/MeshModifiers/RenameBlock'
p87940
sa(dp87941
S'description'
p87942
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p87943
sS'subblocks'
p87944
NsS'parameters'
p87945
(lp87946
(dp87947
S'description'
p87948
S'The list of block ids (SubdomainID) that this object will be applied\n'
p87949
sS'cpp_type'
p87950
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87951
sS'default'
p87952
g3
sS'name'
p87953
S'block'
p87954
sS'required'
p87955
I00
sS'group_name'
p87956
Nsa(dp87957
S'description'
p87958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87959
sS'cpp_type'
p87960
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87961
sS'default'
p87962
g3
sS'name'
p87963
S'control_tags'
p87964
sS'required'
p87965
I00
sS'group_name'
p87966
S'Advanced'
p87967
sa(dp87968
S'description'
p87969
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87970
sS'cpp_type'
p87971
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87972
sS'default'
p87973
g3
sS'name'
p87974
S'depends_on'
p87975
sS'required'
p87976
I00
sS'group_name'
p87977
Nsa(dp87978
S'description'
p87979
S'Set the enabled status of the MooseObject.\n'
p87980
sS'cpp_type'
p87981
S'bool'
p87982
sS'default'
p87983
S'1'
p87984
sS'name'
p87985
S'enable'
p87986
sS'required'
p87987
I00
sS'group_name'
p87988
S'Advanced'
p87989
sa(dp87990
S'description'
p87991
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87992
sS'cpp_type'
p87993
S'bool'
p87994
sS'default'
p87995
S'0'
p87996
sS'name'
p87997
S'fixed_normal'
p87998
sS'required'
p87999
I00
sS'group_name'
p88000
Nsa(dp88001
S'description'
p88002
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p88003
sS'cpp_type'
p88004
S'bool'
p88005
sS'default'
p88006
S'0'
p88007
sS'name'
p88008
S'force_prepare'
p88009
sS'required'
p88010
I00
sS'group_name'
p88011
Nsa(dp88012
S'description'
p88013
S'The list of boundary IDs to create on the supplied subdomain\n'
p88014
sS'cpp_type'
p88015
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88016
sS'default'
p88017
g3
sS'name'
p88018
S'new_boundary'
p88019
sS'required'
p88020
I01
sS'group_name'
p88021
Nsa(dp88022
S'description'
p88023
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p88024
sS'cpp_type'
p88025
S'libMesh::Point'
p88026
sS'default'
p88027
g3
sS'name'
p88028
S'normal'
p88029
sS'required'
p88030
I00
sS'group_name'
p88031
Nsa(dp88032
S'description'
p88033
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p88034
sS'cpp_type'
p88035
S'double'
p88036
sS'default'
p88037
S'0.1'
p88038
sS'name'
p88039
S'normal_tol'
p88040
sS'required'
p88041
I00
sS'group_name'
p88042
Nsa(dp88043
S'description'
p88044
g3
sS'cpp_type'
p88045
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88046
sS'default'
p88047
S'SideSetsAroundSubdomain'
p88048
sS'name'
p88049
S'type'
p88050
sS'required'
p88051
I00
sS'group_name'
p88052
Nsa(dp88053
S'description'
p88054
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p88055
sS'cpp_type'
p88056
S'double'
p88057
sS'default'
p88058
S'0.1'
p88059
sS'name'
p88060
S'variance'
p88061
sS'required'
p88062
I00
sS'group_name'
p88063
NsasS'name'
p88064
S'/MeshModifiers/SideSetsAroundSubdomain'
p88065
sa(dp88066
S'description'
p88067
g3
sS'subblocks'
p88068
NsS'parameters'
p88069
(lp88070
(dp88071
S'description'
p88072
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88073
sS'cpp_type'
p88074
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88075
sS'default'
p88076
g3
sS'name'
p88077
S'control_tags'
p88078
sS'required'
p88079
I00
sS'group_name'
p88080
S'Advanced'
p88081
sa(dp88082
S'description'
p88083
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88084
sS'cpp_type'
p88085
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88086
sS'default'
p88087
g3
sS'name'
p88088
S'depends_on'
p88089
sS'required'
p88090
I00
sS'group_name'
p88091
Nsa(dp88092
S'description'
p88093
S'Set the enabled status of the MooseObject.\n'
p88094
sS'cpp_type'
p88095
S'bool'
p88096
sS'default'
p88097
S'1'
p88098
sS'name'
p88099
S'enable'
p88100
sS'required'
p88101
I00
sS'group_name'
p88102
S'Advanced'
p88103
sa(dp88104
S'description'
p88105
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p88106
sS'cpp_type'
p88107
S'bool'
p88108
sS'default'
p88109
S'0'
p88110
sS'name'
p88111
S'force_prepare'
p88112
sS'required'
p88113
I00
sS'group_name'
p88114
Nsa(dp88115
S'description'
p88116
S'The master set of blocks for which to draw a sideset between\n'
p88117
sS'cpp_type'
p88118
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88119
sS'default'
p88120
g3
sS'name'
p88121
S'master_block'
p88122
sS'required'
p88123
I01
sS'group_name'
p88124
Nsa(dp88125
S'description'
p88126
S'The name of the boundary to create\n'
p88127
sS'cpp_type'
p88128
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88129
sS'default'
p88130
g3
sS'name'
p88131
S'new_boundary'
p88132
sS'required'
p88133
I01
sS'group_name'
p88134
Nsa(dp88135
S'description'
p88136
S'The paired set of blocks for which to draw a sideset between\n'
p88137
sS'cpp_type'
p88138
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88139
sS'default'
p88140
g3
sS'name'
p88141
S'paired_block'
p88142
sS'required'
p88143
I01
sS'group_name'
p88144
Nsa(dp88145
S'description'
p88146
g3
sS'cpp_type'
p88147
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88148
sS'default'
p88149
S'SideSetsBetweenSubdomains'
p88150
sS'name'
p88151
S'type'
p88152
sS'required'
p88153
I00
sS'group_name'
p88154
NsasS'name'
p88155
S'/MeshModifiers/SideSetsBetweenSubdomains'
p88156
sa(dp88157
S'description'
p88158
g3
sS'subblocks'
p88159
NsS'parameters'
p88160
(lp88161
(dp88162
S'description'
p88163
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88164
sS'cpp_type'
p88165
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88166
sS'default'
p88167
g3
sS'name'
p88168
S'control_tags'
p88169
sS'required'
p88170
I00
sS'group_name'
p88171
S'Advanced'
p88172
sa(dp88173
S'description'
p88174
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88175
sS'cpp_type'
p88176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88177
sS'default'
p88178
g3
sS'name'
p88179
S'depends_on'
p88180
sS'required'
p88181
I00
sS'group_name'
p88182
Nsa(dp88183
S'description'
p88184
S'Set the enabled status of the MooseObject.\n'
p88185
sS'cpp_type'
p88186
S'bool'
p88187
sS'default'
p88188
S'1'
p88189
sS'name'
p88190
S'enable'
p88191
sS'required'
p88192
I00
sS'group_name'
p88193
S'Advanced'
p88194
sa(dp88195
S'description'
p88196
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p88197
sS'cpp_type'
p88198
S'bool'
p88199
sS'default'
p88200
S'0'
p88201
sS'name'
p88202
S'fixed_normal'
p88203
sS'required'
p88204
I00
sS'group_name'
p88205
Nsa(dp88206
S'description'
p88207
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p88208
sS'cpp_type'
p88209
S'bool'
p88210
sS'default'
p88211
S'0'
p88212
sS'name'
p88213
S'force_prepare'
p88214
sS'required'
p88215
I00
sS'group_name'
p88216
Nsa(dp88217
S'description'
p88218
S'The name of the boundary to create\n'
p88219
sS'cpp_type'
p88220
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88221
sS'default'
p88222
g3
sS'name'
p88223
S'new_boundary'
p88224
sS'required'
p88225
I01
sS'group_name'
p88226
Nsa(dp88227
S'description'
p88228
S'A list of normals for which to start painting sidesets\n'
p88229
sS'cpp_type'
p88230
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p88231
sS'default'
p88232
g3
sS'name'
p88233
S'normals'
p88234
sS'required'
p88235
I01
sS'group_name'
p88236
Nsa(dp88237
S'description'
p88238
g3
sS'cpp_type'
p88239
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88240
sS'default'
p88241
S'SideSetsFromNormals'
p88242
sS'name'
p88243
S'type'
p88244
sS'required'
p88245
I00
sS'group_name'
p88246
Nsa(dp88247
S'description'
p88248
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p88249
sS'cpp_type'
p88250
S'double'
p88251
sS'default'
p88252
S'0.1'
p88253
sS'name'
p88254
S'variance'
p88255
sS'required'
p88256
I00
sS'group_name'
p88257
NsasS'name'
p88258
S'/MeshModifiers/SideSetsFromNormals'
p88259
sa(dp88260
S'description'
p88261
g3
sS'subblocks'
p88262
NsS'parameters'
p88263
(lp88264
(dp88265
S'description'
p88266
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88267
sS'cpp_type'
p88268
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88269
sS'default'
p88270
g3
sS'name'
p88271
S'control_tags'
p88272
sS'required'
p88273
I00
sS'group_name'
p88274
S'Advanced'
p88275
sa(dp88276
S'description'
p88277
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88278
sS'cpp_type'
p88279
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88280
sS'default'
p88281
g3
sS'name'
p88282
S'depends_on'
p88283
sS'required'
p88284
I00
sS'group_name'
p88285
Nsa(dp88286
S'description'
p88287
S'Set the enabled status of the MooseObject.\n'
p88288
sS'cpp_type'
p88289
S'bool'
p88290
sS'default'
p88291
S'1'
p88292
sS'name'
p88293
S'enable'
p88294
sS'required'
p88295
I00
sS'group_name'
p88296
S'Advanced'
p88297
sa(dp88298
S'description'
p88299
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p88300
sS'cpp_type'
p88301
S'bool'
p88302
sS'default'
p88303
S'0'
p88304
sS'name'
p88305
S'fixed_normal'
p88306
sS'required'
p88307
I00
sS'group_name'
p88308
Nsa(dp88309
S'description'
p88310
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p88311
sS'cpp_type'
p88312
S'bool'
p88313
sS'default'
p88314
S'0'
p88315
sS'name'
p88316
S'force_prepare'
p88317
sS'required'
p88318
I00
sS'group_name'
p88319
Nsa(dp88320
S'description'
p88321
S'The name of the boundary to create\n'
p88322
sS'cpp_type'
p88323
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88324
sS'default'
p88325
g3
sS'name'
p88326
S'new_boundary'
p88327
sS'required'
p88328
I01
sS'group_name'
p88329
Nsa(dp88330
S'description'
p88331
S'A list of points from which to start painting sidesets\n'
p88332
sS'cpp_type'
p88333
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p88334
sS'default'
p88335
g3
sS'name'
p88336
S'points'
p88337
sS'required'
p88338
I01
sS'group_name'
p88339
Nsa(dp88340
S'description'
p88341
g3
sS'cpp_type'
p88342
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88343
sS'default'
p88344
S'SideSetsFromPoints'
p88345
sS'name'
p88346
S'type'
p88347
sS'required'
p88348
I00
sS'group_name'
p88349
Nsa(dp88350
S'description'
p88351
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p88352
sS'cpp_type'
p88353
S'double'
p88354
sS'default'
p88355
S'0.1'
p88356
sS'name'
p88357
S'variance'
p88358
sS'required'
p88359
I00
sS'group_name'
p88360
NsasS'name'
p88361
S'/MeshModifiers/SideSetsFromPoints'
p88362
sa(dp88363
S'description'
p88364
g3
sS'subblocks'
p88365
NsS'parameters'
p88366
(lp88367
(dp88368
S'description'
p88369
S'Subdomain id to set for inside/outside the bounding box\n'
p88370
sS'cpp_type'
p88371
S'unsigned short'
p88372
sS'default'
p88373
g3
sS'name'
p88374
S'block_id'
p88375
sS'required'
p88376
I01
sS'group_name'
p88377
Nsa(dp88378
S'description'
p88379
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p88380
sS'cpp_type'
p88381
S'SubdomainName'
p88382
sS'default'
p88383
g3
sS'name'
p88384
S'block_name'
p88385
sS'required'
p88386
I00
sS'group_name'
p88387
Nsa(dp88388
S'description'
p88389
S'The bottom left point (in x,y,z with spaces in-between).\n'
p88390
sS'cpp_type'
p88391
S'libMesh::VectorValue<double>'
p88392
sS'default'
p88393
g3
sS'name'
p88394
S'bottom_left'
p88395
sS'required'
p88396
I01
sS'group_name'
p88397
Nsa(dp88398
S'description'
p88399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88400
sS'cpp_type'
p88401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88402
sS'default'
p88403
g3
sS'name'
p88404
S'control_tags'
p88405
sS'required'
p88406
I00
sS'group_name'
p88407
S'Advanced'
p88408
sa(dp88409
S'description'
p88410
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88411
sS'cpp_type'
p88412
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88413
sS'default'
p88414
g3
sS'name'
p88415
S'depends_on'
p88416
sS'required'
p88417
I00
sS'group_name'
p88418
Nsa(dp88419
S'description'
p88420
S'Set the enabled status of the MooseObject.\n'
p88421
sS'cpp_type'
p88422
S'bool'
p88423
sS'default'
p88424
S'1'
p88425
sS'name'
p88426
S'enable'
p88427
sS'required'
p88428
I00
sS'group_name'
p88429
S'Advanced'
p88430
sa(dp88431
S'description'
p88432
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p88433
sS'cpp_type'
p88434
S'bool'
p88435
sS'default'
p88436
S'0'
p88437
sS'name'
p88438
S'force_prepare'
p88439
sS'required'
p88440
I00
sS'group_name'
p88441
Nsa(dp88442
S'name'
p88443
S'location'
p88444
sS'cpp_type'
p88445
S'MooseEnum'
p88446
sS'default'
p88447
S'INSIDE'
p88448
sS'description'
p88449
S'Control of where the subdomain id is to be set\n'
p88450
sS'required'
p88451
I00
sS'options'
p88452
S'INSIDE OUTSIDE'
p88453
sS'group_name'
p88454
Nsa(dp88455
S'description'
p88456
S'The bottom left point (in x,y,z with spaces in-between).\n'
p88457
sS'cpp_type'
p88458
S'libMesh::VectorValue<double>'
p88459
sS'default'
p88460
g3
sS'name'
p88461
S'top_right'
p88462
sS'required'
p88463
I01
sS'group_name'
p88464
Nsa(dp88465
S'description'
p88466
g3
sS'cpp_type'
p88467
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88468
sS'default'
p88469
S'SubdomainBoundingBox'
p88470
sS'name'
p88471
S'type'
p88472
sS'required'
p88473
I00
sS'group_name'
p88474
NsasS'name'
p88475
S'/MeshModifiers/SubdomainBoundingBox'
p88476
sa(dp88477
S'description'
p88478
g3
sS'subblocks'
p88479
NsS'parameters'
p88480
(lp88481
(dp88482
S'description'
p88483
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88484
sS'cpp_type'
p88485
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88486
sS'default'
p88487
g3
sS'name'
p88488
S'control_tags'
p88489
sS'required'
p88490
I00
sS'group_name'
p88491
S'Advanced'
p88492
sa(dp88493
S'description'
p88494
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88495
sS'cpp_type'
p88496
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88497
sS'default'
p88498
g3
sS'name'
p88499
S'depends_on'
p88500
sS'required'
p88501
I00
sS'group_name'
p88502
Nsa(dp88503
S'description'
p88504
S'Set the enabled status of the MooseObject.\n'
p88505
sS'cpp_type'
p88506
S'bool'
p88507
sS'default'
p88508
S'1'
p88509
sS'name'
p88510
S'enable'
p88511
sS'required'
p88512
I00
sS'group_name'
p88513
S'Advanced'
p88514
sa(dp88515
S'description'
p88516
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p88517
sS'cpp_type'
p88518
S'bool'
p88519
sS'default'
p88520
S'0'
p88521
sS'name'
p88522
S'force_prepare'
p88523
sS'required'
p88524
I00
sS'group_name'
p88525
Nsa(dp88526
S'name'
p88527
S'transform'
p88528
sS'cpp_type'
p88529
S'MooseEnum'
p88530
sS'default'
p88531
g3
sS'description'
p88532
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p88533
sS'required'
p88534
I01
sS'options'
p88535
S'TRANSLATE ROTATE SCALE'
p88536
sS'group_name'
p88537
Nsa(dp88538
S'description'
p88539
g3
sS'cpp_type'
p88540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88541
sS'default'
p88542
S'Transform'
p88543
sS'name'
p88544
S'type'
p88545
sS'required'
p88546
I00
sS'group_name'
p88547
Nsa(dp88548
S'description'
p88549
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p88550
sS'cpp_type'
p88551
S'libMesh::VectorValue<double>'
p88552
sS'default'
p88553
g3
sS'name'
p88554
S'vector_value'
p88555
sS'required'
p88556
I01
sS'group_name'
p88557
NsasS'name'
p88558
S'/MeshModifiers/Transform'
p88559
sasS'parameters'
p88560
NsS'name'
p88561
S'/MeshModifiers'
p88562
sa(dp88563
S'description'
p88564
g3
sS'subblocks'
p88565
(lp88566
(dp88567
S'description'
p88568
g3
sS'subblocks'
p88569
(lp88570
(dp88571
S'description'
p88572
g3
sS'subblocks'
p88573
NsS'parameters'
p88574
(lp88575
(dp88576
S'description'
p88577
S'Vector of displacement gradient variables\n'
p88578
sS'cpp_type'
p88579
S'std::vector<VariableName, std::allocator<VariableName> >'
p88580
sS'default'
p88581
g3
sS'name'
p88582
S'displacement_gradients'
p88583
sS'required'
p88584
I01
sS'group_name'
p88585
Nsa(dp88586
S'description'
p88587
S'Vector of displacement variables\n'
p88588
sS'cpp_type'
p88589
S'std::vector<VariableName, std::allocator<VariableName> >'
p88590
sS'default'
p88591
g3
sS'name'
p88592
S'displacements'
p88593
sS'required'
p88594
I01
sS'group_name'
p88595
Nsa(dp88596
S'description'
p88597
S'Specifies a scaling factor to apply to the displacement gradient variables\n'
p88598
sS'cpp_type'
p88599
S'double'
p88600
sS'default'
p88601
S'1'
p88602
sS'name'
p88603
S'scaling'
p88604
sS'required'
p88605
I00
sS'group_name'
p88606
NsasS'name'
p88607
S'/Modules/PhaseField/DisplacementGradients'
p88608
sa(dp88609
S'description'
p88610
g3
sS'subblocks'
p88611
NsS'parameters'
p88612
(lp88613
(dp88614
S'description'
p88615
S'Base name of the auxvariables\n'
p88616
sS'cpp_type'
p88617
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88618
sS'default'
p88619
S'RGB'
p88620
sS'name'
p88621
S'auxvariable_name_base'
p88622
sS'required'
p88623
I00
sS'group_name'
p88624
Nsa(dp88625
S'name'
p88626
S'crystal_structure'
p88627
sS'cpp_type'
p88628
S'MooseEnum'
p88629
sS'default'
p88630
g3
sS'description'
p88631
S'Crystal structure of the material\n'
p88632
sS'required'
p88633
I01
sS'options'
p88634
S'cubic hexagonal tetragonal trigonal orthorhombic monoclinic triclinic'
p88635
sS'group_name'
p88636
Nsa(dp88637
S'description'
p88638
S'Name of Euler angle provider user object\n'
p88639
sS'cpp_type'
p88640
S'UserObjectName'
p88641
sS'default'
p88642
g3
sS'name'
p88643
S'euler_angle_provider'
p88644
sS'required'
p88645
I01
sS'group_name'
p88646
Nsa(dp88647
S'description'
p88648
S'The GrainTracker UserObject to get values from.\n'
p88649
sS'cpp_type'
p88650
S'UserObjectName'
p88651
sS'default'
p88652
g3
sS'name'
p88653
S'grain_tracker'
p88654
sS'required'
p88655
I01
sS'group_name'
p88656
Nsa(dp88657
S'description'
p88658
S'RGB value of color used to represent area with no grains, defaults to black\n'
p88659
sS'cpp_type'
p88660
S'libMesh::Point'
p88661
sS'default'
p88662
S'0 0 0'
p88663
sS'name'
p88664
S'no_grain_color'
p88665
sS'required'
p88666
I00
sS'group_name'
p88667
Nsa(dp88668
S'name'
p88669
S'sd'
p88670
sS'cpp_type'
p88671
S'MooseEnum'
p88672
sS'default'
p88673
S'001'
p88674
sS'description'
p88675
S'Reference sample direction\n'
p88676
sS'required'
p88677
I00
sS'options'
p88678
S'100 010 001'
p88679
sS'group_name'
p88680
NsasS'name'
p88681
S'/Modules/PhaseField/EulerAngles2RGB'
p88682
sa(dp88683
S'description'
p88684
g3
sS'subblocks'
p88685
(lp88686
(dp88687
S'description'
p88688
g3
sS'subblocks'
p88689
NsS'parameters'
p88690
(lp88691
(dp88692
S'name'
p88693
S'periodicity'
p88694
sS'cpp_type'
p88695
S'MooseEnum'
p88696
sS'default'
p88697
S'gradient'
p88698
sS'description'
p88699
S'Periodicity type\n'
p88700
sS'required'
p88701
I00
sS'options'
p88702
S'gradient value'
p88703
sS'group_name'
p88704
Nsa(dp88705
S'description'
p88706
S'Periodic variables\n'
p88707
sS'cpp_type'
p88708
S'std::vector<VariableName, std::allocator<VariableName> >'
p88709
sS'default'
p88710
g3
sS'name'
p88711
S'variable'
p88712
sS'required'
p88713
I00
sS'group_name'
p88714
NsasS'name'
p88715
S'/Modules/PhaseField/MortarPeriodicity/*'
p88716
sasS'parameters'
p88717
NsS'name'
p88718
S'/Modules/PhaseField/MortarPeriodicity'
p88719
sasS'parameters'
p88720
NsS'name'
p88721
S'/Modules/PhaseField'
p88722
sa(dp88723
S'description'
p88724
g3
sS'subblocks'
p88725
(lp88726
(dp88727
S'description'
p88728
g3
sS'subblocks'
p88729
(lp88730
(dp88731
S'description'
p88732
g3
sS'subblocks'
p88733
NsS'parameters'
p88734
(lp88735
(dp88736
S'description'
p88737
S'Material property base name\n'
p88738
sS'cpp_type'
p88739
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88740
sS'default'
p88741
g3
sS'name'
p88742
S'base_name'
p88743
sS'required'
p88744
I00
sS'group_name'
p88745
Nsa(dp88746
S'description'
p88747
S'The list of ids of the blocks (subdomain) that the GeneralizedPlaneStrain kernels will be applied to\n'
p88748
sS'cpp_type'
p88749
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88750
sS'default'
p88751
g3
sS'name'
p88752
S'block'
p88753
sS'required'
p88754
I00
sS'group_name'
p88755
Nsa(dp88756
S'description'
p88757
S'The displacement variables\n'
p88758
sS'cpp_type'
p88759
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p88760
sS'default'
p88761
g3
sS'name'
p88762
S'displacements'
p88763
sS'required'
p88764
I01
sS'group_name'
p88765
Nsa(dp88766
S'description'
p88767
S'Scale factor applied to prescribed pressure\n'
p88768
sS'cpp_type'
p88769
S'double'
p88770
sS'default'
p88771
S'1'
p88772
sS'name'
p88773
S'factor'
p88774
sS'required'
p88775
I00
sS'group_name'
p88776
Nsa(dp88777
S'description'
p88778
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p88779
sS'cpp_type'
p88780
S'FunctionName'
p88781
sS'default'
p88782
S'0'
p88783
sS'name'
p88784
S'out_of_plane_pressure'
p88785
sS'required'
p88786
I00
sS'group_name'
p88787
Nsa(dp88788
S'description'
p88789
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p88790
sS'cpp_type'
p88791
S'NonlinearVariableName'
p88792
sS'default'
p88793
g3
sS'name'
p88794
S'scalar_out_of_plane_strain'
p88795
sS'required'
p88796
I01
sS'group_name'
p88797
Nsa(dp88798
S'description'
p88799
S'The temperature variable\n'
p88800
sS'cpp_type'
p88801
S'NonlinearVariableName'
p88802
sS'default'
p88803
g3
sS'name'
p88804
S'temperature'
p88805
sS'required'
p88806
I00
sS'group_name'
p88807
Nsa(dp88808
S'description'
p88809
S'Whether to use displaced mesh\n'
p88810
sS'cpp_type'
p88811
S'bool'
p88812
sS'default'
p88813
S'0'
p88814
sS'name'
p88815
S'use_displaced_mesh'
p88816
sS'required'
p88817
I00
sS'group_name'
p88818
NsasS'name'
p88819
S'/Modules/TensorMechanics/GeneralizedPlaneStrain/*'
p88820
sasS'parameters'
p88821
NsS'name'
p88822
S'/Modules/TensorMechanics/GeneralizedPlaneStrain'
p88823
sa(dp88824
S'description'
p88825
g3
sS'subblocks'
p88826
(lp88827
(dp88828
S'description'
p88829
g3
sS'subblocks'
p88830
NsS'parameters'
p88831
(lp88832
(dp88833
S'description'
p88834
S'Add the displacement variables\n'
p88835
sS'cpp_type'
p88836
S'bool'
p88837
sS'default'
p88838
S'0'
p88839
sS'name'
p88840
S'add_variables'
p88841
sS'required'
p88842
I00
sS'group_name'
p88843
Nsa(dp88844
S'name'
p88845
S'additional_generate_output'
p88846
sS'cpp_type'
p88847
S'MultiMooseEnum'
p88848
sS'default'
p88849
g3
sS'description'
p88850
S'Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n'
p88851
sS'required'
p88852
I00
sS'options'
p88853
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p88854
sS'group_name'
p88855
S'Output'
p88856
sa(dp88857
S'description'
p88858
S'Material property base name\n'
p88859
sS'cpp_type'
p88860
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88861
sS'default'
p88862
g3
sS'name'
p88863
S'base_name'
p88864
sS'required'
p88865
I00
sS'group_name'
p88866
Nsa(dp88867
S'description'
p88868
S'The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n'
p88869
sS'cpp_type'
p88870
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88871
sS'default'
p88872
g3
sS'name'
p88873
S'block'
p88874
sS'required'
p88875
I00
sS'group_name'
p88876
S'Advanced'
p88877
sa(dp88878
S'name'
p88879
S'decomposition_method'
p88880
sS'cpp_type'
p88881
S'MooseEnum'
p88882
sS'default'
p88883
S'TaylorExpansion'
p88884
sS'description'
p88885
S'Methods to calculate the finite strain and rotation increments\n'
p88886
sS'required'
p88887
I00
sS'options'
p88888
S'TaylorExpansion EigenSolution'
p88889
sS'group_name'
p88890
Nsa(dp88891
S'description'
p88892
S'The displacement diagonal preconditioner terms\n'
p88893
sS'cpp_type'
p88894
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p88895
sS'default'
p88896
g3
sS'name'
p88897
S'diag_save_in'
p88898
sS'required'
p88899
I00
sS'group_name'
p88900
S'Advanced'
p88901
sa(dp88902
S'description'
p88903
S'The nonlinear displacement variables for the problem\n'
p88904
sS'cpp_type'
p88905
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p88906
sS'default'
p88907
g3
sS'name'
p88908
S'displacements'
p88909
sS'required'
p88910
I01
sS'group_name'
p88911
Nsa(dp88912
S'description'
p88913
S'List of eigenstrains to be applied in this strain calculation\n'
p88914
sS'cpp_type'
p88915
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p88916
sS'default'
p88917
g3
sS'name'
p88918
S'eigenstrain_names'
p88919
sS'required'
p88920
I00
sS'group_name'
p88921
Nsa(dp88922
S'name'
p88923
S'generate_output'
p88924
sS'cpp_type'
p88925
S'MultiMooseEnum'
p88926
sS'default'
p88927
g3
sS'description'
p88928
S'Add scalar quantity output for stress and/or strain\n'
p88929
sS'required'
p88930
I00
sS'options'
p88931
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p88932
sS'group_name'
p88933
S'Output'
p88934
sa(dp88935
S'description'
p88936
S'Use incremental or total strain\n'
p88937
sS'cpp_type'
p88938
S'bool'
p88939
sS'default'
p88940
g3
sS'name'
p88941
S'incremental'
p88942
sS'required'
p88943
I00
sS'group_name'
p88944
Nsa(dp88945
S'description'
p88946
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p88947
sS'cpp_type'
p88948
S'FunctionName'
p88949
sS'default'
p88950
S'0'
p88951
sS'name'
p88952
S'out_of_plane_pressure'
p88953
sS'required'
p88954
I00
sS'group_name'
p88955
S'Out-of-plane stress/strain'
p88956
sa(dp88957
S'name'
p88958
S'planar_formulation'
p88959
sS'cpp_type'
p88960
S'MooseEnum'
p88961
sS'default'
p88962
S'NONE'
p88963
sS'description'
p88964
S'Out-of-plane stress/strain formulation\n'
p88965
sS'required'
p88966
I00
sS'options'
p88967
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p88968
sS'group_name'
p88969
S'Out-of-plane stress/strain'
p88970
sa(dp88971
S'description'
p88972
S'Scale factor applied to prescribed pressure\n'
p88973
sS'cpp_type'
p88974
S'double'
p88975
sS'default'
p88976
S'1'
p88977
sS'name'
p88978
S'pressure_factor'
p88979
sS'required'
p88980
I00
sS'group_name'
p88981
S'Out-of-plane stress/strain'
p88982
sa(dp88983
S'description'
p88984
S'The displacement residuals\n'
p88985
sS'cpp_type'
p88986
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p88987
sS'default'
p88988
g3
sS'name'
p88989
S'save_in'
p88990
sS'required'
p88991
I00
sS'group_name'
p88992
S'Advanced'
p88993
sa(dp88994
S'description'
p88995
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p88996
sS'cpp_type'
p88997
S'NonlinearVariableName'
p88998
sS'default'
p88999
g3
sS'name'
p89000
S'scalar_out_of_plane_strain'
p89001
sS'required'
p89002
I00
sS'group_name'
p89003
S'Out-of-plane stress/strain'
p89004
sa(dp89005
S'name'
p89006
S'strain'
p89007
sS'cpp_type'
p89008
S'MooseEnum'
p89009
sS'default'
p89010
S'SMALL'
p89011
sS'description'
p89012
S'Strain formulation\n'
p89013
sS'required'
p89014
I00
sS'options'
p89015
S'SMALL FINITE'
p89016
sS'group_name'
p89017
Nsa(dp89018
S'description'
p89019
S'The temperature\n'
p89020
sS'cpp_type'
p89021
S'NonlinearVariableName'
p89022
sS'default'
p89023
g3
sS'name'
p89024
S'temp'
p89025
sS'required'
p89026
I00
sS'group_name'
p89027
Nsa(dp89028
S'description'
p89029
S'The temperature\n'
p89030
sS'cpp_type'
p89031
S'NonlinearVariableName'
p89032
sS'default'
p89033
g3
sS'name'
p89034
S'temperature'
p89035
sS'required'
p89036
I00
sS'group_name'
p89037
Nsa(dp89038
S'description'
p89039
S'Whether to use displaced mesh in the kernels\n'
p89040
sS'cpp_type'
p89041
S'bool'
p89042
sS'default'
p89043
S'0'
p89044
sS'name'
p89045
S'use_displaced_mesh'
p89046
sS'required'
p89047
I00
sS'group_name'
p89048
Nsa(dp89049
S'description'
p89050
S'Jacobian for corrotational finite strain\n'
p89051
sS'cpp_type'
p89052
S'bool'
p89053
sS'default'
p89054
S'0'
p89055
sS'name'
p89056
S'use_finite_deform_jacobian'
p89057
sS'required'
p89058
I00
sS'group_name'
p89059
Nsa(dp89060
S'description'
p89061
S'Flag to correct volumetric locking\n'
p89062
sS'cpp_type'
p89063
S'bool'
p89064
sS'default'
p89065
S'0'
p89066
sS'name'
p89067
S'volumetric_locking_correction'
p89068
sS'required'
p89069
I00
sS'group_name'
p89070
NsasS'name'
p89071
S'/Modules/TensorMechanics/Master/*'
p89072
sasS'parameters'
p89073
(lp89074
(dp89075
S'description'
p89076
S'Add the displacement variables\n'
p89077
sS'cpp_type'
p89078
S'bool'
p89079
sS'default'
p89080
S'0'
p89081
sS'name'
p89082
S'add_variables'
p89083
sS'required'
p89084
I00
sS'group_name'
p89085
Nsa(dp89086
S'description'
p89087
S'Material property base name\n'
p89088
sS'cpp_type'
p89089
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89090
sS'default'
p89091
g3
sS'name'
p89092
S'base_name'
p89093
sS'required'
p89094
I00
sS'group_name'
p89095
Nsa(dp89096
S'name'
p89097
S'decomposition_method'
p89098
sS'cpp_type'
p89099
S'MooseEnum'
p89100
sS'default'
p89101
S'TaylorExpansion'
p89102
sS'description'
p89103
S'Methods to calculate the finite strain and rotation increments\n'
p89104
sS'required'
p89105
I00
sS'options'
p89106
S'TaylorExpansion EigenSolution'
p89107
sS'group_name'
p89108
Nsa(dp89109
S'description'
p89110
S'The displacement diagonal preconditioner terms\n'
p89111
sS'cpp_type'
p89112
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89113
sS'default'
p89114
g3
sS'name'
p89115
S'diag_save_in'
p89116
sS'required'
p89117
I00
sS'group_name'
p89118
S'Advanced'
p89119
sa(dp89120
S'description'
p89121
S'The nonlinear displacement variables for the problem\n'
p89122
sS'cpp_type'
p89123
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p89124
sS'default'
p89125
g3
sS'name'
p89126
S'displacements'
p89127
sS'required'
p89128
I01
sS'group_name'
p89129
Nsa(dp89130
S'description'
p89131
S'List of eigenstrains to be applied in this strain calculation\n'
p89132
sS'cpp_type'
p89133
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p89134
sS'default'
p89135
g3
sS'name'
p89136
S'eigenstrain_names'
p89137
sS'required'
p89138
I00
sS'group_name'
p89139
Nsa(dp89140
S'name'
p89141
S'generate_output'
p89142
sS'cpp_type'
p89143
S'MultiMooseEnum'
p89144
sS'default'
p89145
g3
sS'description'
p89146
S'Add scalar quantity output for stress and/or strain\n'
p89147
sS'required'
p89148
I00
sS'options'
p89149
S'creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz equivalent_plastic_strain equivalent_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress'
p89150
sS'group_name'
p89151
S'Output'
p89152
sa(dp89153
S'description'
p89154
S'Use incremental or total strain\n'
p89155
sS'cpp_type'
p89156
S'bool'
p89157
sS'default'
p89158
g3
sS'name'
p89159
S'incremental'
p89160
sS'required'
p89161
I00
sS'group_name'
p89162
Nsa(dp89163
S'description'
p89164
S'Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n'
p89165
sS'cpp_type'
p89166
S'FunctionName'
p89167
sS'default'
p89168
S'0'
p89169
sS'name'
p89170
S'out_of_plane_pressure'
p89171
sS'required'
p89172
I00
sS'group_name'
p89173
S'Out-of-plane stress/strain'
p89174
sa(dp89175
S'name'
p89176
S'planar_formulation'
p89177
sS'cpp_type'
p89178
S'MooseEnum'
p89179
sS'default'
p89180
S'NONE'
p89181
sS'description'
p89182
S'Out-of-plane stress/strain formulation\n'
p89183
sS'required'
p89184
I00
sS'options'
p89185
S'NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN'
p89186
sS'group_name'
p89187
S'Out-of-plane stress/strain'
p89188
sa(dp89189
S'description'
p89190
S'Scale factor applied to prescribed pressure\n'
p89191
sS'cpp_type'
p89192
S'double'
p89193
sS'default'
p89194
S'1'
p89195
sS'name'
p89196
S'pressure_factor'
p89197
sS'required'
p89198
I00
sS'group_name'
p89199
S'Out-of-plane stress/strain'
p89200
sa(dp89201
S'description'
p89202
S'The displacement residuals\n'
p89203
sS'cpp_type'
p89204
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89205
sS'default'
p89206
g3
sS'name'
p89207
S'save_in'
p89208
sS'required'
p89209
I00
sS'group_name'
p89210
S'Advanced'
p89211
sa(dp89212
S'description'
p89213
S'Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n'
p89214
sS'cpp_type'
p89215
S'NonlinearVariableName'
p89216
sS'default'
p89217
g3
sS'name'
p89218
S'scalar_out_of_plane_strain'
p89219
sS'required'
p89220
I00
sS'group_name'
p89221
S'Out-of-plane stress/strain'
p89222
sa(dp89223
S'name'
p89224
S'strain'
p89225
sS'cpp_type'
p89226
S'MooseEnum'
p89227
sS'default'
p89228
S'SMALL'
p89229
sS'description'
p89230
S'Strain formulation\n'
p89231
sS'required'
p89232
I00
sS'options'
p89233
S'SMALL FINITE'
p89234
sS'group_name'
p89235
Nsa(dp89236
S'description'
p89237
S'The temperature\n'
p89238
sS'cpp_type'
p89239
S'NonlinearVariableName'
p89240
sS'default'
p89241
g3
sS'name'
p89242
S'temp'
p89243
sS'required'
p89244
I00
sS'group_name'
p89245
Nsa(dp89246
S'description'
p89247
S'The temperature\n'
p89248
sS'cpp_type'
p89249
S'NonlinearVariableName'
p89250
sS'default'
p89251
g3
sS'name'
p89252
S'temperature'
p89253
sS'required'
p89254
I00
sS'group_name'
p89255
Nsa(dp89256
S'description'
p89257
S'Whether to use displaced mesh in the kernels\n'
p89258
sS'cpp_type'
p89259
S'bool'
p89260
sS'default'
p89261
S'0'
p89262
sS'name'
p89263
S'use_displaced_mesh'
p89264
sS'required'
p89265
I00
sS'group_name'
p89266
Nsa(dp89267
S'description'
p89268
S'Jacobian for corrotational finite strain\n'
p89269
sS'cpp_type'
p89270
S'bool'
p89271
sS'default'
p89272
S'0'
p89273
sS'name'
p89274
S'use_finite_deform_jacobian'
p89275
sS'required'
p89276
I00
sS'group_name'
p89277
Nsa(dp89278
S'description'
p89279
S'Flag to correct volumetric locking\n'
p89280
sS'cpp_type'
p89281
S'bool'
p89282
sS'default'
p89283
S'0'
p89284
sS'name'
p89285
S'volumetric_locking_correction'
p89286
sS'required'
p89287
I00
sS'group_name'
p89288
NsasS'name'
p89289
S'/Modules/TensorMechanics/Master'
p89290
sasS'parameters'
p89291
NsS'name'
p89292
S'/Modules/TensorMechanics'
p89293
sasS'parameters'
p89294
NsS'name'
p89295
S'/Modules'
p89296
sa(dp89297
S'description'
p89298
g3
sS'subblocks'
p89299
(lp89300
(dp89301
S'description'
p89302
g3
sS'subblocks'
p89303
NsS'parameters'
p89304
(lp89305
(dp89306
S'description'
p89307
S'A string representing the Moose Object that will be built by this Action\n'
p89308
sS'cpp_type'
p89309
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89310
sS'default'
p89311
g3
sS'name'
p89312
S'type'
p89313
sS'required'
p89314
I01
sS'group_name'
p89315
NsasS'name'
p89316
S'/MultiApps/*'
p89317
sa(dp89318
S'description'
p89319
g3
sS'subblocks'
p89320
NsS'parameters'
p89321
(lp89322
(dp89323
S'name'
p89324
S'app_type'
p89325
sS'cpp_type'
p89326
S'MooseEnum'
p89327
sS'default'
p89328
g3
sS'description'
p89329
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p89330
sS'required'
p89331
I00
sS'options'
p89332
S'PuffinApp'
p89333
sS'group_name'
p89334
Nsa(dp89335
S'description'
p89336
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p89337
sS'cpp_type'
p89338
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p89339
sS'default'
p89340
g3
sS'name'
p89341
S'boundary'
p89342
sS'required'
p89343
I00
sS'group_name'
p89344
Nsa(dp89345
S'description'
p89346
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89347
sS'cpp_type'
p89348
S'double'
p89349
sS'default'
p89350
S'0.01'
p89351
sS'name'
p89352
S'bounding_box_inflation'
p89353
sS'required'
p89354
I00
sS'group_name'
p89355
Nsa(dp89356
S'description'
p89357
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p89358
sS'cpp_type'
p89359
S'bool'
p89360
sS'default'
p89361
S'0'
p89362
sS'name'
p89363
S'catch_up'
p89364
sS'required'
p89365
I00
sS'group_name'
p89366
Nsa(dp89367
S'description'
p89368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89369
sS'cpp_type'
p89370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89371
sS'default'
p89372
g3
sS'name'
p89373
S'control_tags'
p89374
sS'required'
p89375
I00
sS'group_name'
p89376
S'Advanced'
p89377
sa(dp89378
S'description'
p89379
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p89380
sS'cpp_type'
p89381
S'bool'
p89382
sS'default'
p89383
S'0'
p89384
sS'name'
p89385
S'detect_steady_state'
p89386
sS'required'
p89387
I00
sS'group_name'
p89388
Nsa(dp89389
S'description'
p89390
S'Set the enabled status of the MooseObject.\n'
p89391
sS'cpp_type'
p89392
S'bool'
p89393
sS'default'
p89394
S'1'
p89395
sS'name'
p89396
S'enable'
p89397
sS'required'
p89398
I00
sS'group_name'
p89399
S'Advanced'
p89400
sa(dp89401
S'name'
p89402
S'execute_on'
p89403
sS'cpp_type'
p89404
S'MultiMooseEnum'
p89405
sS'default'
p89406
S'TIMESTEP_BEGIN'
p89407
sS'description'
p89408
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89409
sS'required'
p89410
I00
sS'options'
p89411
S'none initial linear nonlinear timestep_end timestep_begin custom'
p89412
sS'group_name'
p89413
Nsa(dp89414
S'description'
p89415
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89416
sS'cpp_type'
p89417
S'bool'
p89418
sS'default'
p89419
S'1'
p89420
sS'name'
p89421
S'implicit'
p89422
sS'required'
p89423
I00
sS'group_name'
p89424
S'Advanced'
p89425
sa(dp89426
S'description'
p89427
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89428
sS'cpp_type'
p89429
S'std::vector<FileName, std::allocator<FileName> >'
p89430
sS'default'
p89431
g3
sS'name'
p89432
S'input_files'
p89433
sS'required'
p89434
I01
sS'group_name'
p89435
Nsa(dp89436
S'description'
p89437
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p89438
sS'cpp_type'
p89439
S'bool'
p89440
sS'default'
p89441
S'0'
p89442
sS'name'
p89443
S'interpolate_transfers'
p89444
sS'required'
p89445
I00
sS'group_name'
p89446
Nsa(dp89447
S'description'
p89448
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89449
sS'cpp_type'
p89450
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89451
sS'default'
p89452
g3
sS'name'
p89453
S'library_path'
p89454
sS'required'
p89455
I00
sS'group_name'
p89456
Nsa(dp89457
S'description'
p89458
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p89459
sS'cpp_type'
p89460
S'double'
p89461
sS'default'
p89462
S'2'
p89463
sS'name'
p89464
S'max_catch_up_steps'
p89465
sS'required'
p89466
I00
sS'group_name'
p89467
Nsa(dp89468
S'description'
p89469
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p89470
sS'cpp_type'
p89471
S'unsigned int'
p89472
sS'default'
p89473
S'0'
p89474
sS'name'
p89475
S'max_failures'
p89476
sS'required'
p89477
I00
sS'group_name'
p89478
Nsa(dp89479
S'description'
p89480
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89481
sS'cpp_type'
p89482
S'unsigned int'
p89483
sS'default'
p89484
S'4294967295'
p89485
sS'name'
p89486
S'max_procs_per_app'
p89487
sS'required'
p89488
I00
sS'group_name'
p89489
Nsa(dp89490
S'description'
p89491
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89492
sS'cpp_type'
p89493
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89494
sS'default'
p89495
g3
sS'name'
p89496
S'move_apps'
p89497
sS'required'
p89498
I00
sS'group_name'
p89499
Nsa(dp89500
S'description'
p89501
S'The positions corresponding to each move_app.\n'
p89502
sS'cpp_type'
p89503
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89504
sS'default'
p89505
g3
sS'name'
p89506
S'move_positions'
p89507
sS'required'
p89508
I00
sS'group_name'
p89509
Nsa(dp89510
S'description'
p89511
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89512
sS'cpp_type'
p89513
S'double'
p89514
sS'default'
p89515
S'1.79769e+308'
p89516
sS'name'
p89517
S'move_time'
p89518
sS'required'
p89519
I00
sS'group_name'
p89520
Nsa(dp89521
S'description'
p89522
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89523
sS'cpp_type'
p89524
S'bool'
p89525
sS'default'
p89526
S'0'
p89527
sS'name'
p89528
S'output_in_position'
p89529
sS'required'
p89530
I00
sS'group_name'
p89531
Nsa(dp89532
S'description'
p89533
S'If true then every sub-cycle will be output.\n'
p89534
sS'cpp_type'
p89535
S'bool'
p89536
sS'default'
p89537
S'0'
p89538
sS'name'
p89539
S'output_sub_cycles'
p89540
sS'required'
p89541
I00
sS'group_name'
p89542
Nsa(dp89543
S'description'
p89544
S'Toggle the display of sub-cycles on the screen.\n'
p89545
sS'cpp_type'
p89546
S'bool'
p89547
sS'default'
p89548
S'1'
p89549
sS'name'
p89550
S'print_sub_cycles'
p89551
sS'required'
p89552
I00
sS'group_name'
p89553
Nsa(dp89554
S'description'
p89555
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89556
sS'cpp_type'
p89557
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89558
sS'default'
p89559
g3
sS'name'
p89560
S'reset_apps'
p89561
sS'required'
p89562
I00
sS'group_name'
p89563
Nsa(dp89564
S'description'
p89565
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89566
sS'cpp_type'
p89567
S'double'
p89568
sS'default'
p89569
S'1.79769e+308'
p89570
sS'name'
p89571
S'reset_time'
p89572
sS'required'
p89573
I00
sS'group_name'
p89574
Nsa(dp89575
S'description'
p89576
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p89577
sS'cpp_type'
p89578
S'double'
p89579
sS'default'
p89580
S'1e-08'
p89581
sS'name'
p89582
S'steady_state_tol'
p89583
sS'required'
p89584
I00
sS'group_name'
p89585
Nsa(dp89586
S'description'
p89587
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p89588
sS'cpp_type'
p89589
S'bool'
p89590
sS'default'
p89591
S'0'
p89592
sS'name'
p89593
S'sub_cycling'
p89594
sS'required'
p89595
I00
sS'group_name'
p89596
Nsa(dp89597
S'description'
p89598
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p89599
sS'cpp_type'
p89600
S'bool'
p89601
sS'default'
p89602
S'0'
p89603
sS'name'
p89604
S'tolerate_failure'
p89605
sS'required'
p89606
I00
sS'group_name'
p89607
Nsa(dp89608
S'description'
p89609
g3
sS'cpp_type'
p89610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89611
sS'default'
p89612
S'AutoPositionsMultiApp'
p89613
sS'name'
p89614
S'type'
p89615
sS'required'
p89616
I00
sS'group_name'
p89617
Nsa(dp89618
S'description'
p89619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89620
sS'cpp_type'
p89621
S'bool'
p89622
sS'default'
p89623
S'0'
p89624
sS'name'
p89625
S'use_displaced_mesh'
p89626
sS'required'
p89627
I00
sS'group_name'
p89628
S'Advanced'
p89629
sasS'name'
p89630
S'/MultiApps/AutoPositionsMultiApp'
p89631
sa(dp89632
S'description'
p89633
g3
sS'subblocks'
p89634
NsS'parameters'
p89635
(lp89636
(dp89637
S'name'
p89638
S'app_type'
p89639
sS'cpp_type'
p89640
S'MooseEnum'
p89641
sS'default'
p89642
g3
sS'description'
p89643
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p89644
sS'required'
p89645
I00
sS'options'
p89646
S'PuffinApp'
p89647
sS'group_name'
p89648
Nsa(dp89649
S'description'
p89650
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89651
sS'cpp_type'
p89652
S'double'
p89653
sS'default'
p89654
S'0.01'
p89655
sS'name'
p89656
S'bounding_box_inflation'
p89657
sS'required'
p89658
I00
sS'group_name'
p89659
Nsa(dp89660
S'description'
p89661
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89662
sS'cpp_type'
p89663
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89664
sS'default'
p89665
g3
sS'name'
p89666
S'control_tags'
p89667
sS'required'
p89668
I00
sS'group_name'
p89669
S'Advanced'
p89670
sa(dp89671
S'description'
p89672
S'Set the enabled status of the MooseObject.\n'
p89673
sS'cpp_type'
p89674
S'bool'
p89675
sS'default'
p89676
S'1'
p89677
sS'name'
p89678
S'enable'
p89679
sS'required'
p89680
I00
sS'group_name'
p89681
S'Advanced'
p89682
sa(dp89683
S'name'
p89684
S'execute_on'
p89685
sS'cpp_type'
p89686
S'MultiMooseEnum'
p89687
sS'default'
p89688
S'TIMESTEP_BEGIN'
p89689
sS'description'
p89690
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89691
sS'required'
p89692
I00
sS'options'
p89693
S'none initial linear nonlinear timestep_end timestep_begin custom'
p89694
sS'group_name'
p89695
Nsa(dp89696
S'description'
p89697
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89698
sS'cpp_type'
p89699
S'std::vector<FileName, std::allocator<FileName> >'
p89700
sS'default'
p89701
g3
sS'name'
p89702
S'input_files'
p89703
sS'required'
p89704
I01
sS'group_name'
p89705
Nsa(dp89706
S'description'
p89707
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89708
sS'cpp_type'
p89709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89710
sS'default'
p89711
g3
sS'name'
p89712
S'library_path'
p89713
sS'required'
p89714
I00
sS'group_name'
p89715
Nsa(dp89716
S'description'
p89717
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89718
sS'cpp_type'
p89719
S'unsigned int'
p89720
sS'default'
p89721
S'4294967295'
p89722
sS'name'
p89723
S'max_procs_per_app'
p89724
sS'required'
p89725
I00
sS'group_name'
p89726
Nsa(dp89727
S'description'
p89728
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89729
sS'cpp_type'
p89730
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89731
sS'default'
p89732
g3
sS'name'
p89733
S'move_apps'
p89734
sS'required'
p89735
I00
sS'group_name'
p89736
Nsa(dp89737
S'description'
p89738
S'The positions corresponding to each move_app.\n'
p89739
sS'cpp_type'
p89740
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89741
sS'default'
p89742
g3
sS'name'
p89743
S'move_positions'
p89744
sS'required'
p89745
I00
sS'group_name'
p89746
Nsa(dp89747
S'description'
p89748
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89749
sS'cpp_type'
p89750
S'double'
p89751
sS'default'
p89752
S'1.79769e+308'
p89753
sS'name'
p89754
S'move_time'
p89755
sS'required'
p89756
I00
sS'group_name'
p89757
Nsa(dp89758
S'description'
p89759
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89760
sS'cpp_type'
p89761
S'bool'
p89762
sS'default'
p89763
S'0'
p89764
sS'name'
p89765
S'output_in_position'
p89766
sS'required'
p89767
I00
sS'group_name'
p89768
Nsa(dp89769
S'description'
p89770
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p89771
sS'cpp_type'
p89772
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89773
sS'default'
p89774
g3
sS'name'
p89775
S'positions'
p89776
sS'required'
p89777
I00
sS'group_name'
p89778
Nsa(dp89779
S'description'
p89780
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p89781
sS'cpp_type'
p89782
S'std::vector<FileName, std::allocator<FileName> >'
p89783
sS'default'
p89784
g3
sS'name'
p89785
S'positions_file'
p89786
sS'required'
p89787
I00
sS'group_name'
p89788
Nsa(dp89789
S'description'
p89790
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89791
sS'cpp_type'
p89792
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89793
sS'default'
p89794
g3
sS'name'
p89795
S'reset_apps'
p89796
sS'required'
p89797
I00
sS'group_name'
p89798
Nsa(dp89799
S'description'
p89800
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89801
sS'cpp_type'
p89802
S'double'
p89803
sS'default'
p89804
S'1.79769e+308'
p89805
sS'name'
p89806
S'reset_time'
p89807
sS'required'
p89808
I00
sS'group_name'
p89809
Nsa(dp89810
S'description'
p89811
g3
sS'cpp_type'
p89812
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89813
sS'default'
p89814
S'FullSolveMultiApp'
p89815
sS'name'
p89816
S'type'
p89817
sS'required'
p89818
I00
sS'group_name'
p89819
Nsa(dp89820
S'description'
p89821
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89822
sS'cpp_type'
p89823
S'bool'
p89824
sS'default'
p89825
S'0'
p89826
sS'name'
p89827
S'use_displaced_mesh'
p89828
sS'required'
p89829
I00
sS'group_name'
p89830
S'Advanced'
p89831
sasS'name'
p89832
S'/MultiApps/FullSolveMultiApp'
p89833
sa(dp89834
S'description'
p89835
g3
sS'subblocks'
p89836
NsS'parameters'
p89837
(lp89838
(dp89839
S'name'
p89840
S'app_type'
p89841
sS'cpp_type'
p89842
S'MooseEnum'
p89843
sS'default'
p89844
g3
sS'description'
p89845
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p89846
sS'required'
p89847
I00
sS'options'
p89848
S'PuffinApp'
p89849
sS'group_name'
p89850
Nsa(dp89851
S'description'
p89852
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89853
sS'cpp_type'
p89854
S'double'
p89855
sS'default'
p89856
S'0.01'
p89857
sS'name'
p89858
S'bounding_box_inflation'
p89859
sS'required'
p89860
I00
sS'group_name'
p89861
Nsa(dp89862
S'description'
p89863
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p89864
sS'cpp_type'
p89865
S'bool'
p89866
sS'default'
p89867
S'0'
p89868
sS'name'
p89869
S'catch_up'
p89870
sS'required'
p89871
I00
sS'group_name'
p89872
Nsa(dp89873
S'description'
p89874
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89875
sS'cpp_type'
p89876
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89877
sS'default'
p89878
g3
sS'name'
p89879
S'control_tags'
p89880
sS'required'
p89881
I00
sS'group_name'
p89882
S'Advanced'
p89883
sa(dp89884
S'description'
p89885
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p89886
sS'cpp_type'
p89887
S'bool'
p89888
sS'default'
p89889
S'0'
p89890
sS'name'
p89891
S'detect_steady_state'
p89892
sS'required'
p89893
I00
sS'group_name'
p89894
Nsa(dp89895
S'description'
p89896
S'Set the enabled status of the MooseObject.\n'
p89897
sS'cpp_type'
p89898
S'bool'
p89899
sS'default'
p89900
S'1'
p89901
sS'name'
p89902
S'enable'
p89903
sS'required'
p89904
I00
sS'group_name'
p89905
S'Advanced'
p89906
sa(dp89907
S'name'
p89908
S'execute_on'
p89909
sS'cpp_type'
p89910
S'MultiMooseEnum'
p89911
sS'default'
p89912
S'TIMESTEP_BEGIN'
p89913
sS'description'
p89914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89915
sS'required'
p89916
I00
sS'options'
p89917
S'none initial linear nonlinear timestep_end timestep_begin custom'
p89918
sS'group_name'
p89919
Nsa(dp89920
S'description'
p89921
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89922
sS'cpp_type'
p89923
S'bool'
p89924
sS'default'
p89925
S'1'
p89926
sS'name'
p89927
S'implicit'
p89928
sS'required'
p89929
I00
sS'group_name'
p89930
S'Advanced'
p89931
sa(dp89932
S'description'
p89933
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89934
sS'cpp_type'
p89935
S'std::vector<FileName, std::allocator<FileName> >'
p89936
sS'default'
p89937
g3
sS'name'
p89938
S'input_files'
p89939
sS'required'
p89940
I01
sS'group_name'
p89941
Nsa(dp89942
S'description'
p89943
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p89944
sS'cpp_type'
p89945
S'bool'
p89946
sS'default'
p89947
S'0'
p89948
sS'name'
p89949
S'interpolate_transfers'
p89950
sS'required'
p89951
I00
sS'group_name'
p89952
Nsa(dp89953
S'description'
p89954
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89955
sS'cpp_type'
p89956
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89957
sS'default'
p89958
g3
sS'name'
p89959
S'library_path'
p89960
sS'required'
p89961
I00
sS'group_name'
p89962
Nsa(dp89963
S'description'
p89964
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p89965
sS'cpp_type'
p89966
S'double'
p89967
sS'default'
p89968
S'2'
p89969
sS'name'
p89970
S'max_catch_up_steps'
p89971
sS'required'
p89972
I00
sS'group_name'
p89973
Nsa(dp89974
S'description'
p89975
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p89976
sS'cpp_type'
p89977
S'unsigned int'
p89978
sS'default'
p89979
S'0'
p89980
sS'name'
p89981
S'max_failures'
p89982
sS'required'
p89983
I00
sS'group_name'
p89984
Nsa(dp89985
S'description'
p89986
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89987
sS'cpp_type'
p89988
S'unsigned int'
p89989
sS'default'
p89990
S'4294967295'
p89991
sS'name'
p89992
S'max_procs_per_app'
p89993
sS'required'
p89994
I00
sS'group_name'
p89995
Nsa(dp89996
S'description'
p89997
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89998
sS'cpp_type'
p89999
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p90000
sS'default'
p90001
g3
sS'name'
p90002
S'move_apps'
p90003
sS'required'
p90004
I00
sS'group_name'
p90005
Nsa(dp90006
S'description'
p90007
S'The positions corresponding to each move_app.\n'
p90008
sS'cpp_type'
p90009
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p90010
sS'default'
p90011
g3
sS'name'
p90012
S'move_positions'
p90013
sS'required'
p90014
I00
sS'group_name'
p90015
Nsa(dp90016
S'description'
p90017
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p90018
sS'cpp_type'
p90019
S'double'
p90020
sS'default'
p90021
S'1.79769e+308'
p90022
sS'name'
p90023
S'move_time'
p90024
sS'required'
p90025
I00
sS'group_name'
p90026
Nsa(dp90027
S'description'
p90028
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p90029
sS'cpp_type'
p90030
S'bool'
p90031
sS'default'
p90032
S'0'
p90033
sS'name'
p90034
S'output_in_position'
p90035
sS'required'
p90036
I00
sS'group_name'
p90037
Nsa(dp90038
S'description'
p90039
S'If true then every sub-cycle will be output.\n'
p90040
sS'cpp_type'
p90041
S'bool'
p90042
sS'default'
p90043
S'0'
p90044
sS'name'
p90045
S'output_sub_cycles'
p90046
sS'required'
p90047
I00
sS'group_name'
p90048
Nsa(dp90049
S'description'
p90050
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p90051
sS'cpp_type'
p90052
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p90053
sS'default'
p90054
g3
sS'name'
p90055
S'positions'
p90056
sS'required'
p90057
I00
sS'group_name'
p90058
Nsa(dp90059
S'description'
p90060
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p90061
sS'cpp_type'
p90062
S'std::vector<FileName, std::allocator<FileName> >'
p90063
sS'default'
p90064
g3
sS'name'
p90065
S'positions_file'
p90066
sS'required'
p90067
I00
sS'group_name'
p90068
Nsa(dp90069
S'description'
p90070
S'Toggle the display of sub-cycles on the screen.\n'
p90071
sS'cpp_type'
p90072
S'bool'
p90073
sS'default'
p90074
S'1'
p90075
sS'name'
p90076
S'print_sub_cycles'
p90077
sS'required'
p90078
I00
sS'group_name'
p90079
Nsa(dp90080
S'description'
p90081
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p90082
sS'cpp_type'
p90083
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p90084
sS'default'
p90085
g3
sS'name'
p90086
S'reset_apps'
p90087
sS'required'
p90088
I00
sS'group_name'
p90089
Nsa(dp90090
S'description'
p90091
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p90092
sS'cpp_type'
p90093
S'double'
p90094
sS'default'
p90095
S'1.79769e+308'
p90096
sS'name'
p90097
S'reset_time'
p90098
sS'required'
p90099
I00
sS'group_name'
p90100
Nsa(dp90101
S'description'
p90102
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p90103
sS'cpp_type'
p90104
S'double'
p90105
sS'default'
p90106
S'1e-08'
p90107
sS'name'
p90108
S'steady_state_tol'
p90109
sS'required'
p90110
I00
sS'group_name'
p90111
Nsa(dp90112
S'description'
p90113
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p90114
sS'cpp_type'
p90115
S'bool'
p90116
sS'default'
p90117
S'0'
p90118
sS'name'
p90119
S'sub_cycling'
p90120
sS'required'
p90121
I00
sS'group_name'
p90122
Nsa(dp90123
S'description'
p90124
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p90125
sS'cpp_type'
p90126
S'bool'
p90127
sS'default'
p90128
S'0'
p90129
sS'name'
p90130
S'tolerate_failure'
p90131
sS'required'
p90132
I00
sS'group_name'
p90133
Nsa(dp90134
S'description'
p90135
g3
sS'cpp_type'
p90136
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90137
sS'default'
p90138
S'TransientMultiApp'
p90139
sS'name'
p90140
S'type'
p90141
sS'required'
p90142
I00
sS'group_name'
p90143
Nsa(dp90144
S'description'
p90145
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90146
sS'cpp_type'
p90147
S'bool'
p90148
sS'default'
p90149
S'0'
p90150
sS'name'
p90151
S'use_displaced_mesh'
p90152
sS'required'
p90153
I00
sS'group_name'
p90154
S'Advanced'
p90155
sasS'name'
p90156
S'/MultiApps/TransientMultiApp'
p90157
sasS'parameters'
p90158
NsS'name'
p90159
S'/MultiApps'
p90160
sa(dp90161
S'description'
p90162
g3
sS'subblocks'
p90163
(lp90164
(dp90165
S'description'
p90166
g3
sS'subblocks'
p90167
NsS'parameters'
p90168
(lp90169
(dp90170
S'description'
p90171
S'A string representing the Moose Object that will be built by this Action\n'
p90172
sS'cpp_type'
p90173
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90174
sS'default'
p90175
g3
sS'name'
p90176
S'type'
p90177
sS'required'
p90178
I01
sS'group_name'
p90179
NsasS'name'
p90180
S'/NodalKernels/*'
p90181
sa(dp90182
S'description'
p90183
g3
sS'subblocks'
p90184
NsS'parameters'
p90185
(lp90186
(dp90187
S'description'
p90188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p90189
sS'cpp_type'
p90190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p90191
sS'default'
p90192
g3
sS'name'
p90193
S'block'
p90194
sS'required'
p90195
I00
sS'group_name'
p90196
Nsa(dp90197
S'description'
p90198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p90199
sS'cpp_type'
p90200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p90201
sS'default'
p90202
g3
sS'name'
p90203
S'boundary'
p90204
sS'required'
p90205
I00
sS'group_name'
p90206
Nsa(dp90207
S'description'
p90208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90209
sS'cpp_type'
p90210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90211
sS'default'
p90212
g3
sS'name'
p90213
S'control_tags'
p90214
sS'required'
p90215
I00
sS'group_name'
p90216
S'Advanced'
p90217
sa(dp90218
S'description'
p90219
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90220
sS'cpp_type'
p90221
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90222
sS'default'
p90223
g3
sS'name'
p90224
S'diag_save_in'
p90225
sS'required'
p90226
I00
sS'group_name'
p90227
Nsa(dp90228
S'description'
p90229
S'Set the enabled status of the MooseObject.\n'
p90230
sS'cpp_type'
p90231
S'bool'
p90232
sS'default'
p90233
S'1'
p90234
sS'name'
p90235
S'enable'
p90236
sS'required'
p90237
I00
sS'group_name'
p90238
S'Advanced'
p90239
sa(dp90240
S'description'
p90241
S'Determines whether this object is calculated using an implicit or explicit form\n'
p90242
sS'cpp_type'
p90243
S'bool'
p90244
sS'default'
p90245
S'1'
p90246
sS'name'
p90247
S'implicit'
p90248
sS'required'
p90249
I00
sS'group_name'
p90250
S'Advanced'
p90251
sa(dp90252
S'description'
p90253
S"The constant rate in 'du/dt = rate'\n"
p90254
sS'cpp_type'
p90255
S'double'
p90256
sS'default'
p90257
g3
sS'name'
p90258
S'rate'
p90259
sS'required'
p90260
I01
sS'group_name'
p90261
Nsa(dp90262
S'description'
p90263
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90264
sS'cpp_type'
p90265
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90266
sS'default'
p90267
g3
sS'name'
p90268
S'save_in'
p90269
sS'required'
p90270
I00
sS'group_name'
p90271
Nsa(dp90272
S'description'
p90273
S'The seed for the master random number generator\n'
p90274
sS'cpp_type'
p90275
S'unsigned int'
p90276
sS'default'
p90277
S'0'
p90278
sS'name'
p90279
S'seed'
p90280
sS'required'
p90281
I00
sS'group_name'
p90282
S'Advanced'
p90283
sa(dp90284
S'description'
p90285
g3
sS'cpp_type'
p90286
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90287
sS'default'
p90288
S'ConstantRate'
p90289
sS'name'
p90290
S'type'
p90291
sS'required'
p90292
I00
sS'group_name'
p90293
Nsa(dp90294
S'description'
p90295
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90296
sS'cpp_type'
p90297
S'bool'
p90298
sS'default'
p90299
S'0'
p90300
sS'name'
p90301
S'use_displaced_mesh'
p90302
sS'required'
p90303
I00
sS'group_name'
p90304
S'Advanced'
p90305
sa(dp90306
S'description'
p90307
S'The name of the variable that this boundary condition applies to\n'
p90308
sS'cpp_type'
p90309
S'NonlinearVariableName'
p90310
sS'default'
p90311
g3
sS'name'
p90312
S'variable'
p90313
sS'required'
p90314
I01
sS'group_name'
p90315
NsasS'name'
p90316
S'/NodalKernels/ConstantRate'
p90317
sa(dp90318
S'description'
p90319
g3
sS'subblocks'
p90320
NsS'parameters'
p90321
(lp90322
(dp90323
S'description'
p90324
S'The list of block ids (SubdomainID) that this object will be applied\n'
p90325
sS'cpp_type'
p90326
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p90327
sS'default'
p90328
g3
sS'name'
p90329
S'block'
p90330
sS'required'
p90331
I00
sS'group_name'
p90332
Nsa(dp90333
S'description'
p90334
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p90335
sS'cpp_type'
p90336
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p90337
sS'default'
p90338
g3
sS'name'
p90339
S'boundary'
p90340
sS'required'
p90341
I00
sS'group_name'
p90342
Nsa(dp90343
S'description'
p90344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90345
sS'cpp_type'
p90346
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90347
sS'default'
p90348
g3
sS'name'
p90349
S'control_tags'
p90350
sS'required'
p90351
I00
sS'group_name'
p90352
S'Advanced'
p90353
sa(dp90354
S'description'
p90355
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90356
sS'cpp_type'
p90357
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90358
sS'default'
p90359
g3
sS'name'
p90360
S'diag_save_in'
p90361
sS'required'
p90362
I00
sS'group_name'
p90363
Nsa(dp90364
S'description'
p90365
S'Set the enabled status of the MooseObject.\n'
p90366
sS'cpp_type'
p90367
S'bool'
p90368
sS'default'
p90369
S'1'
p90370
sS'name'
p90371
S'enable'
p90372
sS'required'
p90373
I00
sS'group_name'
p90374
S'Advanced'
p90375
sa(dp90376
S'description'
p90377
S'Determines whether this object is calculated using an implicit or explicit form\n'
p90378
sS'cpp_type'
p90379
S'bool'
p90380
sS'default'
p90381
S'1'
p90382
sS'name'
p90383
S'implicit'
p90384
sS'required'
p90385
I00
sS'group_name'
p90386
S'Advanced'
p90387
sa(dp90388
S'description'
p90389
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90390
sS'cpp_type'
p90391
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90392
sS'default'
p90393
g3
sS'name'
p90394
S'save_in'
p90395
sS'required'
p90396
I00
sS'group_name'
p90397
Nsa(dp90398
S'description'
p90399
S'The seed for the master random number generator\n'
p90400
sS'cpp_type'
p90401
S'unsigned int'
p90402
sS'default'
p90403
S'0'
p90404
sS'name'
p90405
S'seed'
p90406
sS'required'
p90407
I00
sS'group_name'
p90408
S'Advanced'
p90409
sa(dp90410
S'description'
p90411
g3
sS'cpp_type'
p90412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90413
sS'default'
p90414
S'TimeDerivativeNodalKernel'
p90415
sS'name'
p90416
S'type'
p90417
sS'required'
p90418
I00
sS'group_name'
p90419
Nsa(dp90420
S'description'
p90421
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90422
sS'cpp_type'
p90423
S'bool'
p90424
sS'default'
p90425
S'0'
p90426
sS'name'
p90427
S'use_displaced_mesh'
p90428
sS'required'
p90429
I00
sS'group_name'
p90430
S'Advanced'
p90431
sa(dp90432
S'description'
p90433
S'The name of the variable that this boundary condition applies to\n'
p90434
sS'cpp_type'
p90435
S'NonlinearVariableName'
p90436
sS'default'
p90437
g3
sS'name'
p90438
S'variable'
p90439
sS'required'
p90440
I01
sS'group_name'
p90441
NsasS'name'
p90442
S'/NodalKernels/TimeDerivativeNodalKernel'
p90443
sa(dp90444
S'description'
p90445
g3
sS'subblocks'
p90446
NsS'parameters'
p90447
(lp90448
(dp90449
S'description'
p90450
S'The list of block ids (SubdomainID) that this object will be applied\n'
p90451
sS'cpp_type'
p90452
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p90453
sS'default'
p90454
g3
sS'name'
p90455
S'block'
p90456
sS'required'
p90457
I00
sS'group_name'
p90458
Nsa(dp90459
S'description'
p90460
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p90461
sS'cpp_type'
p90462
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p90463
sS'default'
p90464
g3
sS'name'
p90465
S'boundary'
p90466
sS'required'
p90467
I00
sS'group_name'
p90468
Nsa(dp90469
S'description'
p90470
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90471
sS'cpp_type'
p90472
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90473
sS'default'
p90474
g3
sS'name'
p90475
S'control_tags'
p90476
sS'required'
p90477
I00
sS'group_name'
p90478
S'Advanced'
p90479
sa(dp90480
S'description'
p90481
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90482
sS'cpp_type'
p90483
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90484
sS'default'
p90485
g3
sS'name'
p90486
S'diag_save_in'
p90487
sS'required'
p90488
I00
sS'group_name'
p90489
Nsa(dp90490
S'description'
p90491
S'Set the enabled status of the MooseObject.\n'
p90492
sS'cpp_type'
p90493
S'bool'
p90494
sS'default'
p90495
S'1'
p90496
sS'name'
p90497
S'enable'
p90498
sS'required'
p90499
I00
sS'group_name'
p90500
S'Advanced'
p90501
sa(dp90502
S'description'
p90503
S'The forcing function\n'
p90504
sS'cpp_type'
p90505
S'FunctionName'
p90506
sS'default'
p90507
g3
sS'name'
p90508
S'function'
p90509
sS'required'
p90510
I01
sS'group_name'
p90511
Nsa(dp90512
S'description'
p90513
S'Determines whether this object is calculated using an implicit or explicit form\n'
p90514
sS'cpp_type'
p90515
S'bool'
p90516
sS'default'
p90517
S'1'
p90518
sS'name'
p90519
S'implicit'
p90520
sS'required'
p90521
I00
sS'group_name'
p90522
S'Advanced'
p90523
sa(dp90524
S'description'
p90525
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90526
sS'cpp_type'
p90527
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90528
sS'default'
p90529
g3
sS'name'
p90530
S'save_in'
p90531
sS'required'
p90532
I00
sS'group_name'
p90533
Nsa(dp90534
S'description'
p90535
S'The seed for the master random number generator\n'
p90536
sS'cpp_type'
p90537
S'unsigned int'
p90538
sS'default'
p90539
S'0'
p90540
sS'name'
p90541
S'seed'
p90542
sS'required'
p90543
I00
sS'group_name'
p90544
S'Advanced'
p90545
sa(dp90546
S'description'
p90547
g3
sS'cpp_type'
p90548
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90549
sS'default'
p90550
S'UserForcingFunctionNodalKernel'
p90551
sS'name'
p90552
S'type'
p90553
sS'required'
p90554
I00
sS'group_name'
p90555
Nsa(dp90556
S'description'
p90557
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90558
sS'cpp_type'
p90559
S'bool'
p90560
sS'default'
p90561
S'0'
p90562
sS'name'
p90563
S'use_displaced_mesh'
p90564
sS'required'
p90565
I00
sS'group_name'
p90566
S'Advanced'
p90567
sa(dp90568
S'description'
p90569
S'The name of the variable that this boundary condition applies to\n'
p90570
sS'cpp_type'
p90571
S'NonlinearVariableName'
p90572
sS'default'
p90573
g3
sS'name'
p90574
S'variable'
p90575
sS'required'
p90576
I01
sS'group_name'
p90577
NsasS'name'
p90578
S'/NodalKernels/UserForcingFunctionNodalKernel'
p90579
sasS'parameters'
p90580
NsS'name'
p90581
S'/NodalKernels'
p90582
sa(dp90583
S'description'
p90584
g3
sS'subblocks'
p90585
NsS'parameters'
p90586
(lp90587
(dp90588
S'description'
p90589
S'The boundary ID or name where the normals will be computed\n'
p90590
sS'cpp_type'
p90591
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p90592
sS'default'
p90593
S'ANY_BOUNDARY_ID'
p90594
sS'name'
p90595
S'boundary'
p90596
sS'required'
p90597
I00
sS'group_name'
p90598
Nsa(dp90599
S'description'
p90600
S"boundary ID or name with nodes at 'corners'\n"
p90601
sS'cpp_type'
p90602
S'BoundaryName'
p90603
sS'default'
p90604
g3
sS'name'
p90605
S'corner_boundary'
p90606
sS'required'
p90607
I00
sS'group_name'
p90608
Nsa(dp90609
S'name'
p90610
S'order'
p90611
sS'cpp_type'
p90612
S'MooseEnum'
p90613
sS'default'
p90614
S'FIRST'
p90615
sS'description'
p90616
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p90617
sS'required'
p90618
I00
sS'options'
p90619
S'FIRST SECOND'
p90620
sS'group_name'
p90621
NsasS'name'
p90622
S'/NodalNormals'
p90623
sa(dp90624
S'description'
p90625
g3
sS'subblocks'
p90626
(lp90627
(dp90628
S'description'
p90629
g3
sS'subblocks'
p90630
NsS'parameters'
p90631
(lp90632
(dp90633
S'description'
p90634
S'A string representing the Moose Object that will be built by this Action\n'
p90635
sS'cpp_type'
p90636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90637
sS'default'
p90638
g3
sS'name'
p90639
S'type'
p90640
sS'required'
p90641
I01
sS'group_name'
p90642
NsasS'name'
p90643
S'/Outputs/*'
p90644
sa(dp90645
S'description'
p90646
g3
sS'subblocks'
p90647
NsS'parameters'
p90648
(lp90649
(dp90650
S'name'
p90651
S'additional_execute_on'
p90652
sS'cpp_type'
p90653
S'MultiMooseEnum'
p90654
sS'default'
p90655
g3
sS'description'
p90656
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90657
sS'required'
p90658
I00
sS'options'
p90659
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90660
sS'group_name'
p90661
Nsa(dp90662
S'description'
p90663
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p90664
sS'cpp_type'
p90665
S'bool'
p90666
sS'default'
p90667
S'0'
p90668
sS'name'
p90669
S'align'
p90670
sS'required'
p90671
I00
sS'group_name'
p90672
Nsa(dp90673
S'description'
p90674
S'When true the date and time are appended to the output filename.\n'
p90675
sS'cpp_type'
p90676
S'bool'
p90677
sS'default'
p90678
S'0'
p90679
sS'name'
p90680
S'append_date'
p90681
sS'required'
p90682
I00
sS'group_name'
p90683
Nsa(dp90684
S'description'
p90685
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p90686
sS'cpp_type'
p90687
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90688
sS'default'
p90689
g3
sS'name'
p90690
S'append_date_format'
p90691
sS'required'
p90692
I00
sS'group_name'
p90693
Nsa(dp90694
S'description'
p90695
S'Append existing file on restart\n'
p90696
sS'cpp_type'
p90697
S'bool'
p90698
sS'default'
p90699
S'0'
p90700
sS'name'
p90701
S'append_restart'
p90702
sS'required'
p90703
I00
sS'group_name'
p90704
Nsa(dp90705
S'description'
p90706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90707
sS'cpp_type'
p90708
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90709
sS'default'
p90710
g3
sS'name'
p90711
S'control_tags'
p90712
sS'required'
p90713
I00
sS'group_name'
p90714
S'Advanced'
p90715
sa(dp90716
S'description'
p90717
S"Assign the delimiter (default is ','\n"
p90718
sS'cpp_type'
p90719
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90720
sS'default'
p90721
g3
sS'name'
p90722
S'delimiter'
p90723
sS'required'
p90724
I00
sS'group_name'
p90725
Nsa(dp90726
S'description'
p90727
S'Set the enabled status of the MooseObject.\n'
p90728
sS'cpp_type'
p90729
S'bool'
p90730
sS'default'
p90731
S'1'
p90732
sS'name'
p90733
S'enable'
p90734
sS'required'
p90735
I00
sS'group_name'
p90736
S'Advanced'
p90737
sa(dp90738
S'description'
p90739
S'Time at which this output object stop operating\n'
p90740
sS'cpp_type'
p90741
S'double'
p90742
sS'default'
p90743
g3
sS'name'
p90744
S'end_time'
p90745
sS'required'
p90746
I00
sS'group_name'
p90747
S'Timing'
p90748
sa(dp90749
S'description'
p90750
S'Enable/disable the output of elemental variables\n'
p90751
sS'cpp_type'
p90752
S'bool'
p90753
sS'default'
p90754
S'1'
p90755
sS'name'
p90756
S'execute_elemental_variables'
p90757
sS'required'
p90758
I00
sS'group_name'
p90759
Nsa(dp90760
S'description'
p90761
S'Enable/disable the output of input file information\n'
p90762
sS'cpp_type'
p90763
S'bool'
p90764
sS'default'
p90765
S'1'
p90766
sS'name'
p90767
S'execute_input'
p90768
sS'required'
p90769
I00
sS'group_name'
p90770
Nsa(dp90771
S'description'
p90772
S'Enable/disable the output of nodal variables\n'
p90773
sS'cpp_type'
p90774
S'bool'
p90775
sS'default'
p90776
S'1'
p90777
sS'name'
p90778
S'execute_nodal_variables'
p90779
sS'required'
p90780
I00
sS'group_name'
p90781
Nsa(dp90782
S'name'
p90783
S'execute_on'
p90784
sS'cpp_type'
p90785
S'MultiMooseEnum'
p90786
sS'default'
p90787
S'INITIAL TIMESTEP_END'
p90788
sS'description'
p90789
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90790
sS'required'
p90791
I00
sS'options'
p90792
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90793
sS'group_name'
p90794
Nsa(dp90795
S'name'
p90796
S'execute_postprocessors_on'
p90797
sS'cpp_type'
p90798
S'MultiMooseEnum'
p90799
sS'default'
p90800
g3
sS'description'
p90801
S'Control of when postprocessors are output\n'
p90802
sS'required'
p90803
I00
sS'options'
p90804
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90805
sS'group_name'
p90806
S'Variables'
p90807
sa(dp90808
S'description'
p90809
S'Enable/disable the output of aux scalar variables\n'
p90810
sS'cpp_type'
p90811
S'bool'
p90812
sS'default'
p90813
S'1'
p90814
sS'name'
p90815
S'execute_scalar_variables'
p90816
sS'required'
p90817
I00
sS'group_name'
p90818
Nsa(dp90819
S'name'
p90820
S'execute_scalars_on'
p90821
sS'cpp_type'
p90822
S'MultiMooseEnum'
p90823
sS'default'
p90824
g3
sS'description'
p90825
S'Control the output of scalar variables\n'
p90826
sS'required'
p90827
I00
sS'options'
p90828
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90829
sS'group_name'
p90830
S'Variables'
p90831
sa(dp90832
S'description'
p90833
S'Enable/disable the output of the simulation information\n'
p90834
sS'cpp_type'
p90835
S'bool'
p90836
sS'default'
p90837
S'1'
p90838
sS'name'
p90839
S'execute_system_information'
p90840
sS'required'
p90841
I00
sS'group_name'
p90842
Nsa(dp90843
S'description'
p90844
S'Enable/disable the output of vector postprocessors\n'
p90845
sS'cpp_type'
p90846
S'bool'
p90847
sS'default'
p90848
S'1'
p90849
sS'name'
p90850
S'execute_vector_postprocessors'
p90851
sS'required'
p90852
I00
sS'group_name'
p90853
Nsa(dp90854
S'name'
p90855
S'execute_vector_postprocessors_on'
p90856
sS'cpp_type'
p90857
S'MultiMooseEnum'
p90858
sS'default'
p90859
g3
sS'description'
p90860
S'Enable/disable the output of VectorPostprocessors\n'
p90861
sS'required'
p90862
I00
sS'options'
p90863
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90864
sS'group_name'
p90865
S'Variables'
p90866
sa(dp90867
S'description'
p90868
S'The desired solution output name without an extension\n'
p90869
sS'cpp_type'
p90870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90871
sS'default'
p90872
g3
sS'name'
p90873
S'file_base'
p90874
sS'required'
p90875
I00
sS'group_name'
p90876
Nsa(dp90877
S'description'
p90878
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p90879
sS'cpp_type'
p90880
S'std::vector<VariableName, std::allocator<VariableName> >'
p90881
sS'default'
p90882
g3
sS'name'
p90883
S'hide'
p90884
sS'required'
p90885
I00
sS'group_name'
p90886
S'Variables'
p90887
sa(dp90888
S'description'
p90889
S'The interval at which time steps are output to the solution file\n'
p90890
sS'cpp_type'
p90891
S'unsigned int'
p90892
sS'default'
p90893
S'1'
p90894
sS'name'
p90895
S'interval'
p90896
sS'required'
p90897
I00
sS'group_name'
p90898
S'Timing'
p90899
sa(dp90900
S'description'
p90901
S'Number of divisions applied to time step when outputting linear residuals\n'
p90902
sS'cpp_type'
p90903
S'double'
p90904
sS'default'
p90905
S'1000'
p90906
sS'name'
p90907
S'linear_residual_dt_divisor'
p90908
sS'required'
p90909
I00
sS'group_name'
p90910
S'PETSc'
p90911
sa(dp90912
S'description'
p90913
S'Specifies an end time to begin output on each linear residual evaluation\n'
p90914
sS'cpp_type'
p90915
S'double'
p90916
sS'default'
p90917
g3
sS'name'
p90918
S'linear_residual_end_time'
p90919
sS'required'
p90920
I00
sS'group_name'
p90921
S'PETSc'
p90922
sa(dp90923
S'description'
p90924
S'Specifies a start time to begin output on each linear residual evaluation\n'
p90925
sS'cpp_type'
p90926
S'double'
p90927
sS'default'
p90928
g3
sS'name'
p90929
S'linear_residual_start_time'
p90930
sS'required'
p90931
I00
sS'group_name'
p90932
S'PETSc'
p90933
sa(dp90934
S'description'
p90935
S'Specifies whether output occurs on each linear residual evaluation\n'
p90936
sS'cpp_type'
p90937
S'bool'
p90938
sS'default'
p90939
S'0'
p90940
sS'name'
p90941
S'linear_residuals'
p90942
sS'required'
p90943
I00
sS'group_name'
p90944
S'PETSc'
p90945
sa(dp90946
S'description'
p90947
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p90948
sS'cpp_type'
p90949
S'double'
p90950
sS'default'
p90951
S'1000'
p90952
sS'name'
p90953
S'nonlinear_residual_dt_divisor'
p90954
sS'required'
p90955
I00
sS'group_name'
p90956
S'PETSc'
p90957
sa(dp90958
S'description'
p90959
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p90960
sS'cpp_type'
p90961
S'double'
p90962
sS'default'
p90963
g3
sS'name'
p90964
S'nonlinear_residual_end_time'
p90965
sS'required'
p90966
I00
sS'group_name'
p90967
S'PETSc'
p90968
sa(dp90969
S'description'
p90970
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p90971
sS'cpp_type'
p90972
S'double'
p90973
sS'default'
p90974
g3
sS'name'
p90975
S'nonlinear_residual_start_time'
p90976
sS'required'
p90977
I00
sS'group_name'
p90978
S'PETSc'
p90979
sa(dp90980
S'description'
p90981
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90982
sS'cpp_type'
p90983
S'bool'
p90984
sS'default'
p90985
S'0'
p90986
sS'name'
p90987
S'nonlinear_residuals'
p90988
sS'required'
p90989
I00
sS'group_name'
p90990
S'PETSc'
p90991
sa(dp90992
S'description'
p90993
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p90994
sS'cpp_type'
p90995
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90996
sS'default'
p90997
g3
sS'name'
p90998
S'output_if_base_contains'
p90999
sS'required'
p91000
I00
sS'group_name'
p91001
S'Advanced'
p91002
sa(dp91003
S'description'
p91004
S'Specifies whether output occurs on each linear residual evaluation\n'
p91005
sS'cpp_type'
p91006
S'bool'
p91007
sS'default'
p91008
S'0'
p91009
sS'name'
p91010
S'output_linear'
p91011
sS'required'
p91012
I00
sS'group_name'
p91013
Nsa(dp91014
S'description'
p91015
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91016
sS'cpp_type'
p91017
S'bool'
p91018
sS'default'
p91019
S'0'
p91020
sS'name'
p91021
S'output_nonlinear'
p91022
sS'required'
p91023
I00
sS'group_name'
p91024
Nsa(dp91025
S'description'
p91026
S'Enable/disable the output of postprocessors\n'
p91027
sS'cpp_type'
p91028
S'bool'
p91029
sS'default'
p91030
S'1'
p91031
sS'name'
p91032
S'output_postprocessors'
p91033
sS'required'
p91034
I00
sS'group_name'
p91035
Nsa(dp91036
S'description'
p91037
S'Set the output precision\n'
p91038
sS'cpp_type'
p91039
S'unsigned int'
p91040
sS'default'
p91041
S'14'
p91042
sS'name'
p91043
S'precision'
p91044
sS'required'
p91045
I00
sS'group_name'
p91046
Nsa(dp91047
S'description'
p91048
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p91049
sS'cpp_type'
p91050
S'std::vector<VariableName, std::allocator<VariableName> >'
p91051
sS'default'
p91052
g3
sS'name'
p91053
S'show'
p91054
sS'required'
p91055
I00
sS'group_name'
p91056
S'Variables'
p91057
sa(dp91058
S'description'
p91059
S'Toggle the sorting of columns alphabetically.\n'
p91060
sS'cpp_type'
p91061
S'bool'
p91062
sS'default'
p91063
S'0'
p91064
sS'name'
p91065
S'sort_columns'
p91066
sS'required'
p91067
I00
sS'group_name'
p91068
Nsa(dp91069
S'description'
p91070
S'Time at which this output object begins to operate\n'
p91071
sS'cpp_type'
p91072
S'double'
p91073
sS'default'
p91074
g3
sS'name'
p91075
S'start_time'
p91076
sS'required'
p91077
I00
sS'group_name'
p91078
S'Timing'
p91079
sa(dp91080
S'description'
p91081
S'Only export results at sync times\n'
p91082
sS'cpp_type'
p91083
S'bool'
p91084
sS'default'
p91085
S'0'
p91086
sS'name'
p91087
S'sync_only'
p91088
sS'required'
p91089
I00
sS'group_name'
p91090
S'Timing'
p91091
sa(dp91092
S'description'
p91093
S'Times at which the output and solution is forced to occur\n'
p91094
sS'cpp_type'
p91095
S'std::vector<double, std::allocator<double> >'
p91096
sS'default'
p91097
g3
sS'name'
p91098
S'sync_times'
p91099
sS'required'
p91100
I00
sS'group_name'
p91101
S'Timing'
p91102
sa(dp91103
S'description'
p91104
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p91105
sS'cpp_type'
p91106
S'bool'
p91107
sS'default'
p91108
S'1'
p91109
sS'name'
p91110
S'time_column'
p91111
sS'required'
p91112
I00
sS'group_name'
p91113
Nsa(dp91114
S'description'
p91115
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p91116
sS'cpp_type'
p91117
S'bool'
p91118
sS'default'
p91119
S'0'
p91120
sS'name'
p91121
S'time_data'
p91122
sS'required'
p91123
I00
sS'group_name'
p91124
Nsa(dp91125
S'description'
p91126
S'Time tolerance utilized checking start and end times\n'
p91127
sS'cpp_type'
p91128
S'double'
p91129
sS'default'
p91130
S'1e-14'
p91131
sS'name'
p91132
S'time_tolerance'
p91133
sS'required'
p91134
I00
sS'group_name'
p91135
S'Timing'
p91136
sa(dp91137
S'description'
p91138
g3
sS'cpp_type'
p91139
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91140
sS'default'
p91141
S'CSV'
p91142
sS'name'
p91143
S'type'
p91144
sS'required'
p91145
I00
sS'group_name'
p91146
Nsa(dp91147
S'description'
p91148
S'Enable/disable the use of the displaced mesh for outputting\n'
p91149
sS'cpp_type'
p91150
S'bool'
p91151
sS'default'
p91152
S'0'
p91153
sS'name'
p91154
S'use_displaced'
p91155
sS'required'
p91156
I00
sS'group_name'
p91157
NsasS'name'
p91158
S'/Outputs/CSV'
p91159
sa(dp91160
S'description'
p91161
g3
sS'subblocks'
p91162
NsS'parameters'
p91163
(lp91164
(dp91165
S'name'
p91166
S'additional_execute_on'
p91167
sS'cpp_type'
p91168
S'MultiMooseEnum'
p91169
sS'default'
p91170
g3
sS'description'
p91171
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91172
sS'required'
p91173
I00
sS'options'
p91174
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91175
sS'group_name'
p91176
Nsa(dp91177
S'description'
p91178
S'When true the date and time are appended to the output filename.\n'
p91179
sS'cpp_type'
p91180
S'bool'
p91181
sS'default'
p91182
S'0'
p91183
sS'name'
p91184
S'append_date'
p91185
sS'required'
p91186
I00
sS'group_name'
p91187
Nsa(dp91188
S'description'
p91189
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p91190
sS'cpp_type'
p91191
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91192
sS'default'
p91193
g3
sS'name'
p91194
S'append_date_format'
p91195
sS'required'
p91196
I00
sS'group_name'
p91197
Nsa(dp91198
S'description'
p91199
S'Toggle the output of binary files\n'
p91200
sS'cpp_type'
p91201
S'bool'
p91202
sS'default'
p91203
S'1'
p91204
sS'name'
p91205
S'binary'
p91206
sS'required'
p91207
I00
sS'group_name'
p91208
S'Advanced'
p91209
sa(dp91210
S'description'
p91211
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91212
sS'cpp_type'
p91213
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91214
sS'default'
p91215
g3
sS'name'
p91216
S'control_tags'
p91217
sS'required'
p91218
I00
sS'group_name'
p91219
S'Advanced'
p91220
sa(dp91221
S'description'
p91222
S'Set the enabled status of the MooseObject.\n'
p91223
sS'cpp_type'
p91224
S'bool'
p91225
sS'default'
p91226
S'1'
p91227
sS'name'
p91228
S'enable'
p91229
sS'required'
p91230
I00
sS'group_name'
p91231
S'Advanced'
p91232
sa(dp91233
S'description'
p91234
S'Time at which this output object stop operating\n'
p91235
sS'cpp_type'
p91236
S'double'
p91237
sS'default'
p91238
g3
sS'name'
p91239
S'end_time'
p91240
sS'required'
p91241
I00
sS'group_name'
p91242
S'Timing'
p91243
sa(dp91244
S'name'
p91245
S'execute_on'
p91246
sS'cpp_type'
p91247
S'MultiMooseEnum'
p91248
sS'default'
p91249
S'INITIAL TIMESTEP_END'
p91250
sS'description'
p91251
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91252
sS'required'
p91253
I00
sS'options'
p91254
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91255
sS'group_name'
p91256
Nsa(dp91257
S'description'
p91258
S'The desired solution output name without an extension\n'
p91259
sS'cpp_type'
p91260
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91261
sS'default'
p91262
g3
sS'name'
p91263
S'file_base'
p91264
sS'required'
p91265
I00
sS'group_name'
p91266
Nsa(dp91267
S'description'
p91268
S'The interval at which time steps are output to the solution file\n'
p91269
sS'cpp_type'
p91270
S'unsigned int'
p91271
sS'default'
p91272
S'1'
p91273
sS'name'
p91274
S'interval'
p91275
sS'required'
p91276
I00
sS'group_name'
p91277
S'Timing'
p91278
sa(dp91279
S'description'
p91280
S'Number of divisions applied to time step when outputting linear residuals\n'
p91281
sS'cpp_type'
p91282
S'double'
p91283
sS'default'
p91284
S'1000'
p91285
sS'name'
p91286
S'linear_residual_dt_divisor'
p91287
sS'required'
p91288
I00
sS'group_name'
p91289
S'PETSc'
p91290
sa(dp91291
S'description'
p91292
S'Specifies an end time to begin output on each linear residual evaluation\n'
p91293
sS'cpp_type'
p91294
S'double'
p91295
sS'default'
p91296
g3
sS'name'
p91297
S'linear_residual_end_time'
p91298
sS'required'
p91299
I00
sS'group_name'
p91300
S'PETSc'
p91301
sa(dp91302
S'description'
p91303
S'Specifies a start time to begin output on each linear residual evaluation\n'
p91304
sS'cpp_type'
p91305
S'double'
p91306
sS'default'
p91307
g3
sS'name'
p91308
S'linear_residual_start_time'
p91309
sS'required'
p91310
I00
sS'group_name'
p91311
S'PETSc'
p91312
sa(dp91313
S'description'
p91314
S'Specifies whether output occurs on each linear residual evaluation\n'
p91315
sS'cpp_type'
p91316
S'bool'
p91317
sS'default'
p91318
S'0'
p91319
sS'name'
p91320
S'linear_residuals'
p91321
sS'required'
p91322
I00
sS'group_name'
p91323
S'PETSc'
p91324
sa(dp91325
S'description'
p91326
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p91327
sS'cpp_type'
p91328
S'double'
p91329
sS'default'
p91330
S'1000'
p91331
sS'name'
p91332
S'nonlinear_residual_dt_divisor'
p91333
sS'required'
p91334
I00
sS'group_name'
p91335
S'PETSc'
p91336
sa(dp91337
S'description'
p91338
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p91339
sS'cpp_type'
p91340
S'double'
p91341
sS'default'
p91342
g3
sS'name'
p91343
S'nonlinear_residual_end_time'
p91344
sS'required'
p91345
I00
sS'group_name'
p91346
S'PETSc'
p91347
sa(dp91348
S'description'
p91349
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p91350
sS'cpp_type'
p91351
S'double'
p91352
sS'default'
p91353
g3
sS'name'
p91354
S'nonlinear_residual_start_time'
p91355
sS'required'
p91356
I00
sS'group_name'
p91357
S'PETSc'
p91358
sa(dp91359
S'description'
p91360
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91361
sS'cpp_type'
p91362
S'bool'
p91363
sS'default'
p91364
S'0'
p91365
sS'name'
p91366
S'nonlinear_residuals'
p91367
sS'required'
p91368
I00
sS'group_name'
p91369
S'PETSc'
p91370
sa(dp91371
S'description'
p91372
S'Number of the restart files to save\n'
p91373
sS'cpp_type'
p91374
S'unsigned int'
p91375
sS'default'
p91376
S'2'
p91377
sS'name'
p91378
S'num_files'
p91379
sS'required'
p91380
I00
sS'group_name'
p91381
Nsa(dp91382
S'description'
p91383
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p91384
sS'cpp_type'
p91385
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91386
sS'default'
p91387
g3
sS'name'
p91388
S'output_if_base_contains'
p91389
sS'required'
p91390
I00
sS'group_name'
p91391
S'Advanced'
p91392
sa(dp91393
S'description'
p91394
S'Specifies whether output occurs on each linear residual evaluation\n'
p91395
sS'cpp_type'
p91396
S'bool'
p91397
sS'default'
p91398
S'0'
p91399
sS'name'
p91400
S'output_linear'
p91401
sS'required'
p91402
I00
sS'group_name'
p91403
Nsa(dp91404
S'description'
p91405
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91406
sS'cpp_type'
p91407
S'bool'
p91408
sS'default'
p91409
S'0'
p91410
sS'name'
p91411
S'output_nonlinear'
p91412
sS'required'
p91413
I00
sS'group_name'
p91414
Nsa(dp91415
S'description'
p91416
S'The number of for extension suffix (e.g., out.e-s002)\n'
p91417
sS'cpp_type'
p91418
S'unsigned int'
p91419
sS'default'
p91420
S'4'
p91421
sS'name'
p91422
S'padding'
p91423
sS'required'
p91424
I00
sS'group_name'
p91425
S'Advanced'
p91426
sa(dp91427
S'description'
p91428
S'Time at which this output object begins to operate\n'
p91429
sS'cpp_type'
p91430
S'double'
p91431
sS'default'
p91432
g3
sS'name'
p91433
S'start_time'
p91434
sS'required'
p91435
I00
sS'group_name'
p91436
S'Timing'
p91437
sa(dp91438
S'description'
p91439
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p91440
sS'cpp_type'
p91441
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91442
sS'default'
p91443
S'cp'
p91444
sS'name'
p91445
S'suffix'
p91446
sS'required'
p91447
I00
sS'group_name'
p91448
Nsa(dp91449
S'description'
p91450
S'Only export results at sync times\n'
p91451
sS'cpp_type'
p91452
S'bool'
p91453
sS'default'
p91454
S'0'
p91455
sS'name'
p91456
S'sync_only'
p91457
sS'required'
p91458
I00
sS'group_name'
p91459
S'Timing'
p91460
sa(dp91461
S'description'
p91462
S'Times at which the output and solution is forced to occur\n'
p91463
sS'cpp_type'
p91464
S'std::vector<double, std::allocator<double> >'
p91465
sS'default'
p91466
g3
sS'name'
p91467
S'sync_times'
p91468
sS'required'
p91469
I00
sS'group_name'
p91470
S'Timing'
p91471
sa(dp91472
S'description'
p91473
S'Time tolerance utilized checking start and end times\n'
p91474
sS'cpp_type'
p91475
S'double'
p91476
sS'default'
p91477
S'1e-14'
p91478
sS'name'
p91479
S'time_tolerance'
p91480
sS'required'
p91481
I00
sS'group_name'
p91482
S'Timing'
p91483
sa(dp91484
S'description'
p91485
g3
sS'cpp_type'
p91486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91487
sS'default'
p91488
S'Checkpoint'
p91489
sS'name'
p91490
S'type'
p91491
sS'required'
p91492
I00
sS'group_name'
p91493
Nsa(dp91494
S'description'
p91495
S'Enable/disable the use of the displaced mesh for outputting\n'
p91496
sS'cpp_type'
p91497
S'bool'
p91498
sS'default'
p91499
S'0'
p91500
sS'name'
p91501
S'use_displaced'
p91502
sS'required'
p91503
I00
sS'group_name'
p91504
NsasS'name'
p91505
S'/Outputs/Checkpoint'
p91506
sa(dp91507
S'description'
p91508
g3
sS'subblocks'
p91509
NsS'parameters'
p91510
(lp91511
(dp91512
S'name'
p91513
S'additional_execute_on'
p91514
sS'cpp_type'
p91515
S'MultiMooseEnum'
p91516
sS'default'
p91517
g3
sS'description'
p91518
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91519
sS'required'
p91520
I00
sS'options'
p91521
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91522
sS'group_name'
p91523
Nsa(dp91524
S'description'
p91525
S'If true, all variable norms will be printed after each solve\n'
p91526
sS'cpp_type'
p91527
S'bool'
p91528
sS'default'
p91529
S'0'
p91530
sS'name'
p91531
S'all_variable_norms'
p91532
sS'required'
p91533
I00
sS'group_name'
p91534
S'Norms'
p91535
sa(dp91536
S'description'
p91537
S'When true the date and time are appended to the output filename.\n'
p91538
sS'cpp_type'
p91539
S'bool'
p91540
sS'default'
p91541
S'0'
p91542
sS'name'
p91543
S'append_date'
p91544
sS'required'
p91545
I00
sS'group_name'
p91546
Nsa(dp91547
S'description'
p91548
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p91549
sS'cpp_type'
p91550
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91551
sS'default'
p91552
g3
sS'name'
p91553
S'append_date_format'
p91554
sS'required'
p91555
I00
sS'group_name'
p91556
Nsa(dp91557
S'description'
p91558
S'Append existing file on restart\n'
p91559
sS'cpp_type'
p91560
S'bool'
p91561
sS'default'
p91562
S'0'
p91563
sS'name'
p91564
S'append_restart'
p91565
sS'required'
p91566
I00
sS'group_name'
p91567
Nsa(dp91568
S'description'
p91569
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91570
sS'cpp_type'
p91571
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91572
sS'default'
p91573
g3
sS'name'
p91574
S'control_tags'
p91575
sS'required'
p91576
I00
sS'group_name'
p91577
S'Advanced'
p91578
sa(dp91579
S'description'
p91580
S'Set the enabled status of the MooseObject.\n'
p91581
sS'cpp_type'
p91582
S'bool'
p91583
sS'default'
p91584
S'1'
p91585
sS'name'
p91586
S'enable'
p91587
sS'required'
p91588
I00
sS'group_name'
p91589
S'Advanced'
p91590
sa(dp91591
S'description'
p91592
S'Time at which this output object stop operating\n'
p91593
sS'cpp_type'
p91594
S'double'
p91595
sS'default'
p91596
g3
sS'name'
p91597
S'end_time'
p91598
sS'required'
p91599
I00
sS'group_name'
p91600
S'Timing'
p91601
sa(dp91602
S'description'
p91603
S'Enable/disable the output of elemental variables\n'
p91604
sS'cpp_type'
p91605
S'bool'
p91606
sS'default'
p91607
S'1'
p91608
sS'name'
p91609
S'execute_elemental_variables'
p91610
sS'required'
p91611
I00
sS'group_name'
p91612
Nsa(dp91613
S'description'
p91614
S'Enable/disable the output of input file information\n'
p91615
sS'cpp_type'
p91616
S'bool'
p91617
sS'default'
p91618
S'1'
p91619
sS'name'
p91620
S'execute_input'
p91621
sS'required'
p91622
I00
sS'group_name'
p91623
Nsa(dp91624
S'name'
p91625
S'execute_input_on'
p91626
sS'cpp_type'
p91627
S'MultiMooseEnum'
p91628
sS'default'
p91629
g3
sS'description'
p91630
S'Enable/disable the output of the input file\n'
p91631
sS'required'
p91632
I00
sS'options'
p91633
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91634
sS'group_name'
p91635
S'Variables'
p91636
sa(dp91637
S'description'
p91638
S'Enable/disable the output of nodal variables\n'
p91639
sS'cpp_type'
p91640
S'bool'
p91641
sS'default'
p91642
S'1'
p91643
sS'name'
p91644
S'execute_nodal_variables'
p91645
sS'required'
p91646
I00
sS'group_name'
p91647
Nsa(dp91648
S'name'
p91649
S'execute_on'
p91650
sS'cpp_type'
p91651
S'MultiMooseEnum'
p91652
sS'default'
p91653
S'FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p91654
sS'description'
p91655
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91656
sS'required'
p91657
I00
sS'options'
p91658
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91659
sS'group_name'
p91660
Nsa(dp91661
S'name'
p91662
S'execute_postprocessors_on'
p91663
sS'cpp_type'
p91664
S'MultiMooseEnum'
p91665
sS'default'
p91666
S'INITIAL TIMESTEP_END'
p91667
sS'description'
p91668
S'Control of when postprocessors are output\n'
p91669
sS'required'
p91670
I00
sS'options'
p91671
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91672
sS'group_name'
p91673
S'Variables'
p91674
sa(dp91675
S'description'
p91676
S'Enable/disable the output of aux scalar variables\n'
p91677
sS'cpp_type'
p91678
S'bool'
p91679
sS'default'
p91680
S'1'
p91681
sS'name'
p91682
S'execute_scalar_variables'
p91683
sS'required'
p91684
I00
sS'group_name'
p91685
Nsa(dp91686
S'name'
p91687
S'execute_scalars_on'
p91688
sS'cpp_type'
p91689
S'MultiMooseEnum'
p91690
sS'default'
p91691
S'INITIAL TIMESTEP_END'
p91692
sS'description'
p91693
S'Control the output of scalar variables\n'
p91694
sS'required'
p91695
I00
sS'options'
p91696
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91697
sS'group_name'
p91698
S'Variables'
p91699
sa(dp91700
S'description'
p91701
S'Enable/disable the output of the simulation information\n'
p91702
sS'cpp_type'
p91703
S'bool'
p91704
sS'default'
p91705
S'1'
p91706
sS'name'
p91707
S'execute_system_information'
p91708
sS'required'
p91709
I00
sS'group_name'
p91710
Nsa(dp91711
S'name'
p91712
S'execute_system_information_on'
p91713
sS'cpp_type'
p91714
S'MultiMooseEnum'
p91715
sS'default'
p91716
S'INITIAL'
p91717
sS'description'
p91718
S'Control when the output of the simulation information occurs\n'
p91719
sS'required'
p91720
I00
sS'options'
p91721
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91722
sS'group_name'
p91723
S'Variables'
p91724
sa(dp91725
S'description'
p91726
S'Enable/disable the output of vector postprocessors\n'
p91727
sS'cpp_type'
p91728
S'bool'
p91729
sS'default'
p91730
S'1'
p91731
sS'name'
p91732
S'execute_vector_postprocessors'
p91733
sS'required'
p91734
I00
sS'group_name'
p91735
Nsa(dp91736
S'name'
p91737
S'execute_vector_postprocessors_on'
p91738
sS'cpp_type'
p91739
S'MultiMooseEnum'
p91740
sS'default'
p91741
S'INITIAL TIMESTEP_END'
p91742
sS'description'
p91743
S'Enable/disable the output of VectorPostprocessors\n'
p91744
sS'required'
p91745
I00
sS'options'
p91746
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91747
sS'group_name'
p91748
S'Variables'
p91749
sa(dp91750
S'description'
p91751
S'The desired solution output name without an extension\n'
p91752
sS'cpp_type'
p91753
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91754
sS'default'
p91755
g3
sS'name'
p91756
S'file_base'
p91757
sS'required'
p91758
I00
sS'group_name'
p91759
Nsa(dp91760
S'name'
p91761
S'fit_mode'
p91762
sS'cpp_type'
p91763
S'MooseEnum'
p91764
sS'default'
p91765
S'ENVIRONMENT'
p91766
sS'description'
p91767
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p91768
sS'required'
p91769
I00
sS'options'
p91770
S'ENVIRONMENT AUTO 80 120 160'
p91771
sS'group_name'
p91772
Nsa(dp91773
S'description'
p91774
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p91775
sS'cpp_type'
p91776
S'std::vector<VariableName, std::allocator<VariableName> >'
p91777
sS'default'
p91778
g3
sS'name'
p91779
S'hide'
p91780
sS'required'
p91781
I00
sS'group_name'
p91782
S'Variables'
p91783
sa(dp91784
S'description'
p91785
S'The interval at which time steps are output to the solution file\n'
p91786
sS'cpp_type'
p91787
S'unsigned int'
p91788
sS'default'
p91789
S'1'
p91790
sS'name'
p91791
S'interval'
p91792
sS'required'
p91793
I00
sS'group_name'
p91794
S'Timing'
p91795
sa(dp91796
S'description'
p91797
S'Print the libMesh performance log, requires libMesh to be configured with --enable-perflog\n'
p91798
sS'cpp_type'
p91799
S'bool'
p91800
sS'default'
p91801
S'1'
p91802
sS'name'
p91803
S'libmesh_log'
p91804
sS'required'
p91805
I00
sS'group_name'
p91806
S'Performance Log'
p91807
sa(dp91808
S'description'
p91809
S'Number of divisions applied to time step when outputting linear residuals\n'
p91810
sS'cpp_type'
p91811
S'double'
p91812
sS'default'
p91813
S'1000'
p91814
sS'name'
p91815
S'linear_residual_dt_divisor'
p91816
sS'required'
p91817
I00
sS'group_name'
p91818
S'PETSc'
p91819
sa(dp91820
S'description'
p91821
S'Specifies an end time to begin output on each linear residual evaluation\n'
p91822
sS'cpp_type'
p91823
S'double'
p91824
sS'default'
p91825
g3
sS'name'
p91826
S'linear_residual_end_time'
p91827
sS'required'
p91828
I00
sS'group_name'
p91829
S'PETSc'
p91830
sa(dp91831
S'description'
p91832
S'Specifies a start time to begin output on each linear residual evaluation\n'
p91833
sS'cpp_type'
p91834
S'double'
p91835
sS'default'
p91836
g3
sS'name'
p91837
S'linear_residual_start_time'
p91838
sS'required'
p91839
I00
sS'group_name'
p91840
S'PETSc'
p91841
sa(dp91842
S'description'
p91843
S'Specifies whether output occurs on each linear residual evaluation\n'
p91844
sS'cpp_type'
p91845
S'bool'
p91846
sS'default'
p91847
S'0'
p91848
sS'name'
p91849
S'linear_residuals'
p91850
sS'required'
p91851
I00
sS'group_name'
p91852
S'PETSc'
p91853
sa(dp91854
S'description'
p91855
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p91856
sS'cpp_type'
p91857
S'unsigned int'
p91858
sS'default'
p91859
S'15'
p91860
sS'name'
p91861
S'max_rows'
p91862
sS'required'
p91863
I00
sS'group_name'
p91864
S'Advanced'
p91865
sa(dp91866
S'description'
p91867
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p91868
sS'cpp_type'
p91869
S'double'
p91870
sS'default'
p91871
S'1000'
p91872
sS'name'
p91873
S'nonlinear_residual_dt_divisor'
p91874
sS'required'
p91875
I00
sS'group_name'
p91876
S'PETSc'
p91877
sa(dp91878
S'description'
p91879
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p91880
sS'cpp_type'
p91881
S'double'
p91882
sS'default'
p91883
g3
sS'name'
p91884
S'nonlinear_residual_end_time'
p91885
sS'required'
p91886
I00
sS'group_name'
p91887
S'PETSc'
p91888
sa(dp91889
S'description'
p91890
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p91891
sS'cpp_type'
p91892
S'double'
p91893
sS'default'
p91894
g3
sS'name'
p91895
S'nonlinear_residual_start_time'
p91896
sS'required'
p91897
I00
sS'group_name'
p91898
S'PETSc'
p91899
sa(dp91900
S'description'
p91901
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91902
sS'cpp_type'
p91903
S'bool'
p91904
sS'default'
p91905
S'0'
p91906
sS'name'
p91907
S'nonlinear_residuals'
p91908
sS'required'
p91909
I00
sS'group_name'
p91910
S'PETSc'
p91911
sa(dp91912
S'description'
p91913
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p91914
sS'cpp_type'
p91915
S'std::vector<double, std::allocator<double> >'
p91916
sS'default'
p91917
S'0.8 2'
p91918
sS'name'
p91919
S'outlier_multiplier'
p91920
sS'required'
p91921
I00
sS'group_name'
p91922
S'Norms'
p91923
sa(dp91924
S'description'
p91925
S'If true, outlier variable norms will be printed after each solve\n'
p91926
sS'cpp_type'
p91927
S'bool'
p91928
sS'default'
p91929
S'1'
p91930
sS'name'
p91931
S'outlier_variable_norms'
p91932
sS'required'
p91933
I00
sS'group_name'
p91934
S'Norms'
p91935
sa(dp91936
S'description'
p91937
S'Output to the file\n'
p91938
sS'cpp_type'
p91939
S'bool'
p91940
sS'default'
p91941
S'0'
p91942
sS'name'
p91943
S'output_file'
p91944
sS'required'
p91945
I00
sS'group_name'
p91946
Nsa(dp91947
S'description'
p91948
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p91949
sS'cpp_type'
p91950
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91951
sS'default'
p91952
g3
sS'name'
p91953
S'output_if_base_contains'
p91954
sS'required'
p91955
I00
sS'group_name'
p91956
S'Advanced'
p91957
sa(dp91958
S'description'
p91959
S'Specifies whether output occurs on each linear residual evaluation\n'
p91960
sS'cpp_type'
p91961
S'bool'
p91962
sS'default'
p91963
S'0'
p91964
sS'name'
p91965
S'output_linear'
p91966
sS'required'
p91967
I00
sS'group_name'
p91968
Nsa(dp91969
S'description'
p91970
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91971
sS'cpp_type'
p91972
S'bool'
p91973
sS'default'
p91974
S'0'
p91975
sS'name'
p91976
S'output_nonlinear'
p91977
sS'required'
p91978
I00
sS'group_name'
p91979
Nsa(dp91980
S'description'
p91981
S'Enable/disable the output of postprocessors\n'
p91982
sS'cpp_type'
p91983
S'bool'
p91984
sS'default'
p91985
S'1'
p91986
sS'name'
p91987
S'output_postprocessors'
p91988
sS'required'
p91989
I00
sS'group_name'
p91990
Nsa(dp91991
S'description'
p91992
S'Output to the screen\n'
p91993
sS'cpp_type'
p91994
S'bool'
p91995
sS'default'
p91996
S'1'
p91997
sS'name'
p91998
S'output_screen'
p91999
sS'required'
p92000
I00
sS'group_name'
p92001
Nsa(dp92002
S'description'
p92003
S'The number of for extension suffix (e.g., out.e-s002)\n'
p92004
sS'cpp_type'
p92005
S'unsigned int'
p92006
sS'default'
p92007
S'4'
p92008
sS'name'
p92009
S'padding'
p92010
sS'required'
p92011
I00
sS'group_name'
p92012
S'Advanced'
p92013
sa(dp92014
S'description'
p92015
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p92016
sS'cpp_type'
p92017
S'bool'
p92018
sS'default'
p92019
g3
sS'name'
p92020
S'perf_header'
p92021
sS'required'
p92022
I00
sS'group_name'
p92023
S'Perf Log'
p92024
sa(dp92025
S'description'
p92026
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p92027
sS'cpp_type'
p92028
S'bool'
p92029
sS'default'
p92030
S'0'
p92031
sS'name'
p92032
S'perf_log'
p92033
sS'required'
p92034
I00
sS'group_name'
p92035
S'Perf Log'
p92036
sa(dp92037
S'description'
p92038
S'If set, the performance log will be printed every n time steps\n'
p92039
sS'cpp_type'
p92040
S'unsigned int'
p92041
sS'default'
p92042
S'0'
p92043
sS'name'
p92044
S'perf_log_interval'
p92045
sS'required'
p92046
I00
sS'group_name'
p92047
Nsa(dp92048
S'description'
p92049
S'When true, each time the mesh is changed the mesh information is printed\n'
p92050
sS'cpp_type'
p92051
S'bool'
p92052
sS'default'
p92053
S'0'
p92054
sS'name'
p92055
S'print_mesh_changed_info'
p92056
sS'required'
p92057
I00
sS'group_name'
p92058
Nsa(dp92059
S'description'
p92060
S'Control the printing of time and dt in scientific notation\n'
p92061
sS'cpp_type'
p92062
S'bool'
p92063
sS'default'
p92064
S'0'
p92065
sS'name'
p92066
S'scientific_time'
p92067
sS'required'
p92068
I00
sS'group_name'
p92069
Nsa(dp92070
S'description'
p92071
S"Toggles the printing of the 'Setup Performance' log\n"
p92072
sS'cpp_type'
p92073
S'bool'
p92074
sS'default'
p92075
g3
sS'name'
p92076
S'setup_log'
p92077
sS'required'
p92078
I00
sS'group_name'
p92079
S'Perf Log'
p92080
sa(dp92081
S'description'
p92082
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p92083
sS'cpp_type'
p92084
S'bool'
p92085
sS'default'
p92086
S'0'
p92087
sS'name'
p92088
S'setup_log_early'
p92089
sS'required'
p92090
I00
sS'group_name'
p92091
S'Perf Log'
p92092
sa(dp92093
S'description'
p92094
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p92095
sS'cpp_type'
p92096
S'std::vector<VariableName, std::allocator<VariableName> >'
p92097
sS'default'
p92098
g3
sS'name'
p92099
S'show'
p92100
sS'required'
p92101
I00
sS'group_name'
p92102
S'Variables'
p92103
sa(dp92104
S'description'
p92105
S'Indent multiapp output using the multiapp name\n'
p92106
sS'cpp_type'
p92107
S'bool'
p92108
sS'default'
p92109
S'0'
p92110
sS'name'
p92111
S'show_multiapp_name'
p92112
sS'required'
p92113
I00
sS'group_name'
p92114
S'Advanced'
p92115
sa(dp92116
S'description'
p92117
S"Toggles the printing of the 'Moose Test Performance' log\n"
p92118
sS'cpp_type'
p92119
S'bool'
p92120
sS'default'
p92121
g3
sS'name'
p92122
S'solve_log'
p92123
sS'required'
p92124
I00
sS'group_name'
p92125
S'Perf Log'
p92126
sa(dp92127
S'description'
p92128
S'Time at which this output object begins to operate\n'
p92129
sS'cpp_type'
p92130
S'double'
p92131
sS'default'
p92132
g3
sS'name'
p92133
S'start_time'
p92134
sS'required'
p92135
I00
sS'group_name'
p92136
S'Timing'
p92137
sa(dp92138
S'description'
p92139
S'Only export results at sync times\n'
p92140
sS'cpp_type'
p92141
S'bool'
p92142
sS'default'
p92143
S'0'
p92144
sS'name'
p92145
S'sync_only'
p92146
sS'required'
p92147
I00
sS'group_name'
p92148
S'Timing'
p92149
sa(dp92150
S'description'
p92151
S'Times at which the output and solution is forced to occur\n'
p92152
sS'cpp_type'
p92153
S'std::vector<double, std::allocator<double> >'
p92154
sS'default'
p92155
g3
sS'name'
p92156
S'sync_times'
p92157
sS'required'
p92158
I00
sS'group_name'
p92159
S'Timing'
p92160
sa(dp92161
S'name'
p92162
S'system_info'
p92163
sS'cpp_type'
p92164
S'MultiMooseEnum'
p92165
sS'default'
p92166
S'AUX EXECUTION FRAMEWORK MESH NONLINEAR'
p92167
sS'description'
p92168
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output')\n"
p92169
sS'required'
p92170
I00
sS'options'
p92171
S'framework mesh aux nonlinear execution output'
p92172
sS'group_name'
p92173
S'Advanced'
p92174
sa(dp92175
S'description'
p92176
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p92177
sS'cpp_type'
p92178
S'bool'
p92179
sS'default'
p92180
S'1'
p92181
sS'name'
p92182
S'time_column'
p92183
sS'required'
p92184
I00
sS'group_name'
p92185
Nsa(dp92186
S'description'
p92187
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p92188
sS'cpp_type'
p92189
S'bool'
p92190
sS'default'
p92191
S'0'
p92192
sS'name'
p92193
S'time_data'
p92194
sS'required'
p92195
I00
sS'group_name'
p92196
Nsa(dp92197
S'description'
p92198
S'The number of significant digits that are printed on time related outputs\n'
p92199
sS'cpp_type'
p92200
S'unsigned int'
p92201
sS'default'
p92202
g3
sS'name'
p92203
S'time_precision'
p92204
sS'required'
p92205
I00
sS'group_name'
p92206
Nsa(dp92207
S'description'
p92208
S'Time tolerance utilized checking start and end times\n'
p92209
sS'cpp_type'
p92210
S'double'
p92211
sS'default'
p92212
S'1e-14'
p92213
sS'name'
p92214
S'time_tolerance'
p92215
sS'required'
p92216
I00
sS'group_name'
p92217
S'Timing'
p92218
sa(dp92219
S'description'
p92220
g3
sS'cpp_type'
p92221
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92222
sS'default'
p92223
S'Console'
p92224
sS'name'
p92225
S'type'
p92226
sS'required'
p92227
I00
sS'group_name'
p92228
Nsa(dp92229
S'description'
p92230
S'Enable/disable the use of the displaced mesh for outputting\n'
p92231
sS'cpp_type'
p92232
S'bool'
p92233
sS'default'
p92234
S'0'
p92235
sS'name'
p92236
S'use_displaced'
p92237
sS'required'
p92238
I00
sS'group_name'
p92239
Nsa(dp92240
S'description'
p92241
S'Print detailed diagnostics on timestep calculation\n'
p92242
sS'cpp_type'
p92243
S'bool'
p92244
sS'default'
p92245
S'0'
p92246
sS'name'
p92247
S'verbose'
p92248
sS'required'
p92249
I00
sS'group_name'
p92250
S'Advanced'
p92251
sasS'name'
p92252
S'/Outputs/Console'
p92253
sa(dp92254
S'description'
p92255
g3
sS'subblocks'
p92256
NsS'parameters'
p92257
(lp92258
(dp92259
S'name'
p92260
S'additional_execute_on'
p92261
sS'cpp_type'
p92262
S'MultiMooseEnum'
p92263
sS'default'
p92264
g3
sS'description'
p92265
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92266
sS'required'
p92267
I00
sS'options'
p92268
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92269
sS'group_name'
p92270
Nsa(dp92271
S'description'
p92272
S'Clear the active control display after each output.\n'
p92273
sS'cpp_type'
p92274
S'bool'
p92275
sS'default'
p92276
S'1'
p92277
sS'name'
p92278
S'clear_after_output'
p92279
sS'required'
p92280
I00
sS'group_name'
p92281
Nsa(dp92282
S'description'
p92283
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92284
sS'cpp_type'
p92285
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92286
sS'default'
p92287
g3
sS'name'
p92288
S'control_tags'
p92289
sS'required'
p92290
I00
sS'group_name'
p92291
S'Advanced'
p92292
sa(dp92293
S'description'
p92294
S'Set the enabled status of the MooseObject.\n'
p92295
sS'cpp_type'
p92296
S'bool'
p92297
sS'default'
p92298
S'1'
p92299
sS'name'
p92300
S'enable'
p92301
sS'required'
p92302
I00
sS'group_name'
p92303
S'Advanced'
p92304
sa(dp92305
S'description'
p92306
S'Time at which this output object stop operating\n'
p92307
sS'cpp_type'
p92308
S'double'
p92309
sS'default'
p92310
g3
sS'name'
p92311
S'end_time'
p92312
sS'required'
p92313
I00
sS'group_name'
p92314
S'Timing'
p92315
sa(dp92316
S'name'
p92317
S'execute_on'
p92318
sS'cpp_type'
p92319
S'MultiMooseEnum'
p92320
sS'default'
p92321
S'INITIAL TIMESTEP_BEGIN'
p92322
sS'description'
p92323
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92324
sS'required'
p92325
I00
sS'options'
p92326
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92327
sS'group_name'
p92328
Nsa(dp92329
S'description'
p92330
S'The interval at which time steps are output to the solution file\n'
p92331
sS'cpp_type'
p92332
S'unsigned int'
p92333
sS'default'
p92334
S'1'
p92335
sS'name'
p92336
S'interval'
p92337
sS'required'
p92338
I00
sS'group_name'
p92339
S'Timing'
p92340
sa(dp92341
S'description'
p92342
S'List active MooseObjects.\n'
p92343
sS'cpp_type'
p92344
S'bool'
p92345
sS'default'
p92346
S'1'
p92347
sS'name'
p92348
S'show_active_objects'
p92349
sS'required'
p92350
I00
sS'group_name'
p92351
Nsa(dp92352
S'description'
p92353
S'Time at which this output object begins to operate\n'
p92354
sS'cpp_type'
p92355
S'double'
p92356
sS'default'
p92357
g3
sS'name'
p92358
S'start_time'
p92359
sS'required'
p92360
I00
sS'group_name'
p92361
S'Timing'
p92362
sa(dp92363
S'description'
p92364
S'Only export results at sync times\n'
p92365
sS'cpp_type'
p92366
S'bool'
p92367
sS'default'
p92368
S'0'
p92369
sS'name'
p92370
S'sync_only'
p92371
sS'required'
p92372
I00
sS'group_name'
p92373
S'Timing'
p92374
sa(dp92375
S'description'
p92376
S'Times at which the output and solution is forced to occur\n'
p92377
sS'cpp_type'
p92378
S'std::vector<double, std::allocator<double> >'
p92379
sS'default'
p92380
g3
sS'name'
p92381
S'sync_times'
p92382
sS'required'
p92383
I00
sS'group_name'
p92384
S'Timing'
p92385
sa(dp92386
S'description'
p92387
S'Time tolerance utilized checking start and end times\n'
p92388
sS'cpp_type'
p92389
S'double'
p92390
sS'default'
p92391
S'1e-14'
p92392
sS'name'
p92393
S'time_tolerance'
p92394
sS'required'
p92395
I00
sS'group_name'
p92396
S'Timing'
p92397
sa(dp92398
S'description'
p92399
g3
sS'cpp_type'
p92400
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92401
sS'default'
p92402
S'ControlOutput'
p92403
sS'name'
p92404
S'type'
p92405
sS'required'
p92406
I00
sS'group_name'
p92407
Nsa(dp92408
S'description'
p92409
S'Enable/disable the use of the displaced mesh for outputting\n'
p92410
sS'cpp_type'
p92411
S'bool'
p92412
sS'default'
p92413
S'0'
p92414
sS'name'
p92415
S'use_displaced'
p92416
sS'required'
p92417
I00
sS'group_name'
p92418
NsasS'name'
p92419
S'/Outputs/ControlOutput'
p92420
sa(dp92421
S'description'
p92422
g3
sS'subblocks'
p92423
NsS'parameters'
p92424
(lp92425
(dp92426
S'name'
p92427
S'additional_execute_on'
p92428
sS'cpp_type'
p92429
S'MultiMooseEnum'
p92430
sS'default'
p92431
g3
sS'description'
p92432
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92433
sS'required'
p92434
I00
sS'options'
p92435
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92436
sS'group_name'
p92437
Nsa(dp92438
S'description'
p92439
S'When true the date and time are appended to the output filename.\n'
p92440
sS'cpp_type'
p92441
S'bool'
p92442
sS'default'
p92443
S'0'
p92444
sS'name'
p92445
S'append_date'
p92446
sS'required'
p92447
I00
sS'group_name'
p92448
Nsa(dp92449
S'description'
p92450
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p92451
sS'cpp_type'
p92452
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92453
sS'default'
p92454
g3
sS'name'
p92455
S'append_date_format'
p92456
sS'required'
p92457
I00
sS'group_name'
p92458
Nsa(dp92459
S'description'
p92460
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92461
sS'cpp_type'
p92462
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92463
sS'default'
p92464
g3
sS'name'
p92465
S'control_tags'
p92466
sS'required'
p92467
I00
sS'group_name'
p92468
S'Advanced'
p92469
sa(dp92470
S'description'
p92471
S'Set the enabled status of the MooseObject.\n'
p92472
sS'cpp_type'
p92473
S'bool'
p92474
sS'default'
p92475
S'1'
p92476
sS'name'
p92477
S'enable'
p92478
sS'required'
p92479
I00
sS'group_name'
p92480
S'Advanced'
p92481
sa(dp92482
S'description'
p92483
S'Time at which this output object stop operating\n'
p92484
sS'cpp_type'
p92485
S'double'
p92486
sS'default'
p92487
g3
sS'name'
p92488
S'end_time'
p92489
sS'required'
p92490
I00
sS'group_name'
p92491
S'Timing'
p92492
sa(dp92493
S'name'
p92494
S'execute_on'
p92495
sS'cpp_type'
p92496
S'MultiMooseEnum'
p92497
sS'default'
p92498
S'INITIAL'
p92499
sS'description'
p92500
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92501
sS'required'
p92502
I00
sS'options'
p92503
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92504
sS'group_name'
p92505
Nsa(dp92506
S'description'
p92507
S'The desired solution output name without an extension\n'
p92508
sS'cpp_type'
p92509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92510
sS'default'
p92511
g3
sS'name'
p92512
S'file_base'
p92513
sS'required'
p92514
I00
sS'group_name'
p92515
Nsa(dp92516
S'description'
p92517
S'The interval at which time steps are output to the solution file\n'
p92518
sS'cpp_type'
p92519
S'unsigned int'
p92520
sS'default'
p92521
S'1'
p92522
sS'name'
p92523
S'interval'
p92524
sS'required'
p92525
I00
sS'group_name'
p92526
S'Timing'
p92527
sa(dp92528
S'description'
p92529
S'Number of divisions applied to time step when outputting linear residuals\n'
p92530
sS'cpp_type'
p92531
S'double'
p92532
sS'default'
p92533
S'1000'
p92534
sS'name'
p92535
S'linear_residual_dt_divisor'
p92536
sS'required'
p92537
I00
sS'group_name'
p92538
S'PETSc'
p92539
sa(dp92540
S'description'
p92541
S'Specifies an end time to begin output on each linear residual evaluation\n'
p92542
sS'cpp_type'
p92543
S'double'
p92544
sS'default'
p92545
g3
sS'name'
p92546
S'linear_residual_end_time'
p92547
sS'required'
p92548
I00
sS'group_name'
p92549
S'PETSc'
p92550
sa(dp92551
S'description'
p92552
S'Specifies a start time to begin output on each linear residual evaluation\n'
p92553
sS'cpp_type'
p92554
S'double'
p92555
sS'default'
p92556
g3
sS'name'
p92557
S'linear_residual_start_time'
p92558
sS'required'
p92559
I00
sS'group_name'
p92560
S'PETSc'
p92561
sa(dp92562
S'description'
p92563
S'Specifies whether output occurs on each linear residual evaluation\n'
p92564
sS'cpp_type'
p92565
S'bool'
p92566
sS'default'
p92567
S'0'
p92568
sS'name'
p92569
S'linear_residuals'
p92570
sS'required'
p92571
I00
sS'group_name'
p92572
S'PETSc'
p92573
sa(dp92574
S'description'
p92575
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p92576
sS'cpp_type'
p92577
S'double'
p92578
sS'default'
p92579
S'1000'
p92580
sS'name'
p92581
S'nonlinear_residual_dt_divisor'
p92582
sS'required'
p92583
I00
sS'group_name'
p92584
S'PETSc'
p92585
sa(dp92586
S'description'
p92587
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p92588
sS'cpp_type'
p92589
S'double'
p92590
sS'default'
p92591
g3
sS'name'
p92592
S'nonlinear_residual_end_time'
p92593
sS'required'
p92594
I00
sS'group_name'
p92595
S'PETSc'
p92596
sa(dp92597
S'description'
p92598
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p92599
sS'cpp_type'
p92600
S'double'
p92601
sS'default'
p92602
g3
sS'name'
p92603
S'nonlinear_residual_start_time'
p92604
sS'required'
p92605
I00
sS'group_name'
p92606
S'PETSc'
p92607
sa(dp92608
S'description'
p92609
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92610
sS'cpp_type'
p92611
S'bool'
p92612
sS'default'
p92613
S'0'
p92614
sS'name'
p92615
S'nonlinear_residuals'
p92616
sS'required'
p92617
I00
sS'group_name'
p92618
S'PETSc'
p92619
sa(dp92620
S'description'
p92621
S'Output to the file\n'
p92622
sS'cpp_type'
p92623
S'bool'
p92624
sS'default'
p92625
S'1'
p92626
sS'name'
p92627
S'output_file'
p92628
sS'required'
p92629
I00
sS'group_name'
p92630
Nsa(dp92631
S'description'
p92632
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p92633
sS'cpp_type'
p92634
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92635
sS'default'
p92636
g3
sS'name'
p92637
S'output_if_base_contains'
p92638
sS'required'
p92639
I00
sS'group_name'
p92640
S'Advanced'
p92641
sa(dp92642
S'description'
p92643
S'Specifies whether output occurs on each linear residual evaluation\n'
p92644
sS'cpp_type'
p92645
S'bool'
p92646
sS'default'
p92647
S'0'
p92648
sS'name'
p92649
S'output_linear'
p92650
sS'required'
p92651
I00
sS'group_name'
p92652
Nsa(dp92653
S'description'
p92654
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92655
sS'cpp_type'
p92656
S'bool'
p92657
sS'default'
p92658
S'0'
p92659
sS'name'
p92660
S'output_nonlinear'
p92661
sS'required'
p92662
I00
sS'group_name'
p92663
Nsa(dp92664
S'description'
p92665
S'Output to the screen\n'
p92666
sS'cpp_type'
p92667
S'bool'
p92668
sS'default'
p92669
S'0'
p92670
sS'name'
p92671
S'output_screen'
p92672
sS'required'
p92673
I00
sS'group_name'
p92674
Nsa(dp92675
S'description'
p92676
S'The number of for extension suffix (e.g., out.e-s002)\n'
p92677
sS'cpp_type'
p92678
S'unsigned int'
p92679
sS'default'
p92680
S'4'
p92681
sS'name'
p92682
S'padding'
p92683
sS'required'
p92684
I00
sS'group_name'
p92685
S'Advanced'
p92686
sa(dp92687
S'description'
p92688
S'Time at which this output object begins to operate\n'
p92689
sS'cpp_type'
p92690
S'double'
p92691
sS'default'
p92692
g3
sS'name'
p92693
S'start_time'
p92694
sS'required'
p92695
I00
sS'group_name'
p92696
S'Timing'
p92697
sa(dp92698
S'description'
p92699
S'Only export results at sync times\n'
p92700
sS'cpp_type'
p92701
S'bool'
p92702
sS'default'
p92703
S'0'
p92704
sS'name'
p92705
S'sync_only'
p92706
sS'required'
p92707
I00
sS'group_name'
p92708
S'Timing'
p92709
sa(dp92710
S'description'
p92711
S'Times at which the output and solution is forced to occur\n'
p92712
sS'cpp_type'
p92713
S'std::vector<double, std::allocator<double> >'
p92714
sS'default'
p92715
g3
sS'name'
p92716
S'sync_times'
p92717
sS'required'
p92718
I00
sS'group_name'
p92719
S'Timing'
p92720
sa(dp92721
S'description'
p92722
S'System to output\n'
p92723
sS'cpp_type'
p92724
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92725
sS'default'
p92726
S'nl0'
p92727
sS'name'
p92728
S'system_name'
p92729
sS'required'
p92730
I00
sS'group_name'
p92731
Nsa(dp92732
S'description'
p92733
S'Time tolerance utilized checking start and end times\n'
p92734
sS'cpp_type'
p92735
S'double'
p92736
sS'default'
p92737
S'1e-14'
p92738
sS'name'
p92739
S'time_tolerance'
p92740
sS'required'
p92741
I00
sS'group_name'
p92742
S'Timing'
p92743
sa(dp92744
S'description'
p92745
g3
sS'cpp_type'
p92746
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92747
sS'default'
p92748
S'DOFMap'
p92749
sS'name'
p92750
S'type'
p92751
sS'required'
p92752
I00
sS'group_name'
p92753
Nsa(dp92754
S'description'
p92755
S'Enable/disable the use of the displaced mesh for outputting\n'
p92756
sS'cpp_type'
p92757
S'bool'
p92758
sS'default'
p92759
S'0'
p92760
sS'name'
p92761
S'use_displaced'
p92762
sS'required'
p92763
I00
sS'group_name'
p92764
NsasS'name'
p92765
S'/Outputs/DOFMap'
p92766
sa(dp92767
S'description'
p92768
S'Object for output data in the Exodus II format\n'
p92769
sS'subblocks'
p92770
NsS'parameters'
p92771
(lp92772
(dp92773
S'name'
p92774
S'additional_execute_on'
p92775
sS'cpp_type'
p92776
S'MultiMooseEnum'
p92777
sS'default'
p92778
g3
sS'description'
p92779
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92780
sS'required'
p92781
I00
sS'options'
p92782
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92783
sS'group_name'
p92784
Nsa(dp92785
S'description'
p92786
S'When true the date and time are appended to the output filename.\n'
p92787
sS'cpp_type'
p92788
S'bool'
p92789
sS'default'
p92790
S'0'
p92791
sS'name'
p92792
S'append_date'
p92793
sS'required'
p92794
I00
sS'group_name'
p92795
Nsa(dp92796
S'description'
p92797
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p92798
sS'cpp_type'
p92799
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92800
sS'default'
p92801
g3
sS'name'
p92802
S'append_date_format'
p92803
sS'required'
p92804
I00
sS'group_name'
p92805
Nsa(dp92806
S'description'
p92807
S"Append '_oversample' to the output file base\n"
p92808
sS'cpp_type'
p92809
S'bool'
p92810
sS'default'
p92811
S'0'
p92812
sS'name'
p92813
S'append_oversample'
p92814
sS'required'
p92815
I00
sS'group_name'
p92816
Nsa(dp92817
S'description'
p92818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92819
sS'cpp_type'
p92820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92821
sS'default'
p92822
g3
sS'name'
p92823
S'control_tags'
p92824
sS'required'
p92825
I00
sS'group_name'
p92826
S'Advanced'
p92827
sa(dp92828
S'description'
p92829
S'Output elemental nonlinear variables as nodal\n'
p92830
sS'cpp_type'
p92831
S'bool'
p92832
sS'default'
p92833
S'0'
p92834
sS'name'
p92835
S'elemental_as_nodal'
p92836
sS'required'
p92837
I00
sS'group_name'
p92838
S'Variables'
p92839
sa(dp92840
S'description'
p92841
S'Set the enabled status of the MooseObject.\n'
p92842
sS'cpp_type'
p92843
S'bool'
p92844
sS'default'
p92845
S'1'
p92846
sS'name'
p92847
S'enable'
p92848
sS'required'
p92849
I00
sS'group_name'
p92850
S'Advanced'
p92851
sa(dp92852
S'description'
p92853
S'Time at which this output object stop operating\n'
p92854
sS'cpp_type'
p92855
S'double'
p92856
sS'default'
p92857
g3
sS'name'
p92858
S'end_time'
p92859
sS'required'
p92860
I00
sS'group_name'
p92861
S'Timing'
p92862
sa(dp92863
S'name'
p92864
S'execute_elemental_on'
p92865
sS'cpp_type'
p92866
S'MultiMooseEnum'
p92867
sS'default'
p92868
g3
sS'description'
p92869
S'Control the output of elemental variables\n'
p92870
sS'required'
p92871
I00
sS'options'
p92872
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92873
sS'group_name'
p92874
S'Variables'
p92875
sa(dp92876
S'description'
p92877
S'Enable/disable the output of elemental variables\n'
p92878
sS'cpp_type'
p92879
S'bool'
p92880
sS'default'
p92881
S'1'
p92882
sS'name'
p92883
S'execute_elemental_variables'
p92884
sS'required'
p92885
I00
sS'group_name'
p92886
Nsa(dp92887
S'description'
p92888
S'Enable/disable the output of input file information\n'
p92889
sS'cpp_type'
p92890
S'bool'
p92891
sS'default'
p92892
S'1'
p92893
sS'name'
p92894
S'execute_input'
p92895
sS'required'
p92896
I00
sS'group_name'
p92897
Nsa(dp92898
S'name'
p92899
S'execute_input_on'
p92900
sS'cpp_type'
p92901
S'MultiMooseEnum'
p92902
sS'default'
p92903
S'INITIAL'
p92904
sS'description'
p92905
S'Enable/disable the output of the input file\n'
p92906
sS'required'
p92907
I00
sS'options'
p92908
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92909
sS'group_name'
p92910
S'Variables'
p92911
sa(dp92912
S'name'
p92913
S'execute_nodal_on'
p92914
sS'cpp_type'
p92915
S'MultiMooseEnum'
p92916
sS'default'
p92917
g3
sS'description'
p92918
S'Control the output of nodal variables\n'
p92919
sS'required'
p92920
I00
sS'options'
p92921
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92922
sS'group_name'
p92923
S'Variables'
p92924
sa(dp92925
S'description'
p92926
S'Enable/disable the output of nodal variables\n'
p92927
sS'cpp_type'
p92928
S'bool'
p92929
sS'default'
p92930
S'1'
p92931
sS'name'
p92932
S'execute_nodal_variables'
p92933
sS'required'
p92934
I00
sS'group_name'
p92935
Nsa(dp92936
S'name'
p92937
S'execute_on'
p92938
sS'cpp_type'
p92939
S'MultiMooseEnum'
p92940
sS'default'
p92941
S'INITIAL TIMESTEP_END'
p92942
sS'description'
p92943
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92944
sS'required'
p92945
I00
sS'options'
p92946
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92947
sS'group_name'
p92948
Nsa(dp92949
S'name'
p92950
S'execute_postprocessors_on'
p92951
sS'cpp_type'
p92952
S'MultiMooseEnum'
p92953
sS'default'
p92954
g3
sS'description'
p92955
S'Control of when postprocessors are output\n'
p92956
sS'required'
p92957
I00
sS'options'
p92958
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92959
sS'group_name'
p92960
S'Variables'
p92961
sa(dp92962
S'description'
p92963
S'Enable/disable the output of aux scalar variables\n'
p92964
sS'cpp_type'
p92965
S'bool'
p92966
sS'default'
p92967
S'1'
p92968
sS'name'
p92969
S'execute_scalar_variables'
p92970
sS'required'
p92971
I00
sS'group_name'
p92972
Nsa(dp92973
S'name'
p92974
S'execute_scalars_on'
p92975
sS'cpp_type'
p92976
S'MultiMooseEnum'
p92977
sS'default'
p92978
g3
sS'description'
p92979
S'Control the output of scalar variables\n'
p92980
sS'required'
p92981
I00
sS'options'
p92982
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92983
sS'group_name'
p92984
S'Variables'
p92985
sa(dp92986
S'description'
p92987
S'Enable/disable the output of the simulation information\n'
p92988
sS'cpp_type'
p92989
S'bool'
p92990
sS'default'
p92991
S'1'
p92992
sS'name'
p92993
S'execute_system_information'
p92994
sS'required'
p92995
I00
sS'group_name'
p92996
Nsa(dp92997
S'description'
p92998
S'Enable/disable the output of vector postprocessors\n'
p92999
sS'cpp_type'
p93000
S'bool'
p93001
sS'default'
p93002
S'1'
p93003
sS'name'
p93004
S'execute_vector_postprocessors'
p93005
sS'required'
p93006
I00
sS'group_name'
p93007
Nsa(dp93008
S'description'
p93009
S'The name of the mesh file to read, for oversampling\n'
p93010
sS'cpp_type'
p93011
S'MeshFileName'
p93012
sS'default'
p93013
g3
sS'name'
p93014
S'file'
p93015
sS'required'
p93016
I00
sS'group_name'
p93017
S'Oversampling'
p93018
sa(dp93019
S'description'
p93020
S'The desired solution output name without an extension\n'
p93021
sS'cpp_type'
p93022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93023
sS'default'
p93024
g3
sS'name'
p93025
S'file_base'
p93026
sS'required'
p93027
I00
sS'group_name'
p93028
Nsa(dp93029
S'description'
p93030
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93031
sS'cpp_type'
p93032
S'std::vector<VariableName, std::allocator<VariableName> >'
p93033
sS'default'
p93034
g3
sS'name'
p93035
S'hide'
p93036
sS'required'
p93037
I00
sS'group_name'
p93038
S'Variables'
p93039
sa(dp93040
S'description'
p93041
S'The interval at which time steps are output to the solution file\n'
p93042
sS'cpp_type'
p93043
S'unsigned int'
p93044
sS'default'
p93045
S'1'
p93046
sS'name'
p93047
S'interval'
p93048
sS'required'
p93049
I00
sS'group_name'
p93050
S'Timing'
p93051
sa(dp93052
S'description'
p93053
S'Number of divisions applied to time step when outputting linear residuals\n'
p93054
sS'cpp_type'
p93055
S'double'
p93056
sS'default'
p93057
S'1000'
p93058
sS'name'
p93059
S'linear_residual_dt_divisor'
p93060
sS'required'
p93061
I00
sS'group_name'
p93062
S'PETSc'
p93063
sa(dp93064
S'description'
p93065
S'Specifies an end time to begin output on each linear residual evaluation\n'
p93066
sS'cpp_type'
p93067
S'double'
p93068
sS'default'
p93069
g3
sS'name'
p93070
S'linear_residual_end_time'
p93071
sS'required'
p93072
I00
sS'group_name'
p93073
S'PETSc'
p93074
sa(dp93075
S'description'
p93076
S'Specifies a start time to begin output on each linear residual evaluation\n'
p93077
sS'cpp_type'
p93078
S'double'
p93079
sS'default'
p93080
g3
sS'name'
p93081
S'linear_residual_start_time'
p93082
sS'required'
p93083
I00
sS'group_name'
p93084
S'PETSc'
p93085
sa(dp93086
S'description'
p93087
S'Specifies whether output occurs on each linear residual evaluation\n'
p93088
sS'cpp_type'
p93089
S'bool'
p93090
sS'default'
p93091
S'0'
p93092
sS'name'
p93093
S'linear_residuals'
p93094
sS'required'
p93095
I00
sS'group_name'
p93096
S'PETSc'
p93097
sa(dp93098
S'description'
p93099
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p93100
sS'cpp_type'
p93101
S'double'
p93102
sS'default'
p93103
S'1000'
p93104
sS'name'
p93105
S'nonlinear_residual_dt_divisor'
p93106
sS'required'
p93107
I00
sS'group_name'
p93108
S'PETSc'
p93109
sa(dp93110
S'description'
p93111
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p93112
sS'cpp_type'
p93113
S'double'
p93114
sS'default'
p93115
g3
sS'name'
p93116
S'nonlinear_residual_end_time'
p93117
sS'required'
p93118
I00
sS'group_name'
p93119
S'PETSc'
p93120
sa(dp93121
S'description'
p93122
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p93123
sS'cpp_type'
p93124
S'double'
p93125
sS'default'
p93126
g3
sS'name'
p93127
S'nonlinear_residual_start_time'
p93128
sS'required'
p93129
I00
sS'group_name'
p93130
S'PETSc'
p93131
sa(dp93132
S'description'
p93133
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93134
sS'cpp_type'
p93135
S'bool'
p93136
sS'default'
p93137
S'0'
p93138
sS'name'
p93139
S'nonlinear_residuals'
p93140
sS'required'
p93141
I00
sS'group_name'
p93142
S'PETSc'
p93143
sa(dp93144
S'description'
p93145
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p93146
sS'cpp_type'
p93147
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93148
sS'default'
p93149
g3
sS'name'
p93150
S'output_if_base_contains'
p93151
sS'required'
p93152
I00
sS'group_name'
p93153
S'Advanced'
p93154
sa(dp93155
S'description'
p93156
S'Specifies whether output occurs on each linear residual evaluation\n'
p93157
sS'cpp_type'
p93158
S'bool'
p93159
sS'default'
p93160
S'0'
p93161
sS'name'
p93162
S'output_linear'
p93163
sS'required'
p93164
I00
sS'group_name'
p93165
Nsa(dp93166
S'description'
p93167
S'Flag indicating if material properties should be output\n'
p93168
sS'cpp_type'
p93169
S'bool'
p93170
sS'default'
p93171
S'0'
p93172
sS'name'
p93173
S'output_material_properties'
p93174
sS'required'
p93175
I00
sS'group_name'
p93176
S'Materials'
p93177
sa(dp93178
S'description'
p93179
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93180
sS'cpp_type'
p93181
S'bool'
p93182
sS'default'
p93183
S'0'
p93184
sS'name'
p93185
S'output_nonlinear'
p93186
sS'required'
p93187
I00
sS'group_name'
p93188
Nsa(dp93189
S'description'
p93190
S'Enable/disable the output of postprocessors\n'
p93191
sS'cpp_type'
p93192
S'bool'
p93193
sS'default'
p93194
S'1'
p93195
sS'name'
p93196
S'output_postprocessors'
p93197
sS'required'
p93198
I00
sS'group_name'
p93199
Nsa(dp93200
S'description'
p93201
S'Set to true to enable oversampling\n'
p93202
sS'cpp_type'
p93203
S'bool'
p93204
sS'default'
p93205
S'0'
p93206
sS'name'
p93207
S'oversample'
p93208
sS'required'
p93209
I00
sS'group_name'
p93210
Nsa(dp93211
S'description'
p93212
S'When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n'
p93213
sS'cpp_type'
p93214
S'bool'
p93215
sS'default'
p93216
S'0'
p93217
sS'name'
p93218
S'overwrite'
p93219
sS'required'
p93220
I00
sS'group_name'
p93221
Nsa(dp93222
S'description'
p93223
S'The number of for extension suffix (e.g., out.e-s002)\n'
p93224
sS'cpp_type'
p93225
S'unsigned int'
p93226
sS'default'
p93227
S'3'
p93228
sS'name'
p93229
S'padding'
p93230
sS'required'
p93231
I00
sS'group_name'
p93232
S'Advanced'
p93233
sa(dp93234
S'description'
p93235
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p93236
sS'cpp_type'
p93237
S'libMesh::Point'
p93238
sS'default'
p93239
g3
sS'name'
p93240
S'position'
p93241
sS'required'
p93242
I00
sS'group_name'
p93243
S'Oversampling'
p93244
sa(dp93245
S'description'
p93246
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p93247
sS'cpp_type'
p93248
S'unsigned int'
p93249
sS'default'
p93250
S'0'
p93251
sS'name'
p93252
S'refinements'
p93253
sS'required'
p93254
I00
sS'group_name'
p93255
S'Oversampling'
p93256
sa(dp93257
S'description'
p93258
S'Output scalar variables as nodal\n'
p93259
sS'cpp_type'
p93260
S'bool'
p93261
sS'default'
p93262
S'0'
p93263
sS'name'
p93264
S'scalar_as_nodal'
p93265
sS'required'
p93266
I00
sS'group_name'
p93267
S'Variables'
p93268
sa(dp93269
S'description'
p93270
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p93271
sS'cpp_type'
p93272
S'bool'
p93273
sS'default'
p93274
g3
sS'name'
p93275
S'sequence'
p93276
sS'required'
p93277
I00
sS'group_name'
p93278
Nsa(dp93279
S'description'
p93280
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93281
sS'cpp_type'
p93282
S'std::vector<VariableName, std::allocator<VariableName> >'
p93283
sS'default'
p93284
g3
sS'name'
p93285
S'show'
p93286
sS'required'
p93287
I00
sS'group_name'
p93288
S'Variables'
p93289
sa(dp93290
S'description'
p93291
S'List of materialproperties that should be written to the output\n'
p93292
sS'cpp_type'
p93293
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93294
sS'default'
p93295
g3
sS'name'
p93296
S'show_material_properties'
p93297
sS'required'
p93298
I00
sS'group_name'
p93299
S'Materials'
p93300
sa(dp93301
S'description'
p93302
S'Time at which this output object begins to operate\n'
p93303
sS'cpp_type'
p93304
S'double'
p93305
sS'default'
p93306
g3
sS'name'
p93307
S'start_time'
p93308
sS'required'
p93309
I00
sS'group_name'
p93310
S'Timing'
p93311
sa(dp93312
S'description'
p93313
S'Only export results at sync times\n'
p93314
sS'cpp_type'
p93315
S'bool'
p93316
sS'default'
p93317
S'0'
p93318
sS'name'
p93319
S'sync_only'
p93320
sS'required'
p93321
I00
sS'group_name'
p93322
S'Timing'
p93323
sa(dp93324
S'description'
p93325
S'Times at which the output and solution is forced to occur\n'
p93326
sS'cpp_type'
p93327
S'std::vector<double, std::allocator<double> >'
p93328
sS'default'
p93329
g3
sS'name'
p93330
S'sync_times'
p93331
sS'required'
p93332
I00
sS'group_name'
p93333
S'Timing'
p93334
sa(dp93335
S'description'
p93336
S'Time tolerance utilized checking start and end times\n'
p93337
sS'cpp_type'
p93338
S'double'
p93339
sS'default'
p93340
S'1e-14'
p93341
sS'name'
p93342
S'time_tolerance'
p93343
sS'required'
p93344
I00
sS'group_name'
p93345
S'Timing'
p93346
sa(dp93347
S'description'
p93348
g3
sS'cpp_type'
p93349
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93350
sS'default'
p93351
S'Exodus'
p93352
sS'name'
p93353
S'type'
p93354
sS'required'
p93355
I00
sS'group_name'
p93356
Nsa(dp93357
S'description'
p93358
S'Enable/disable the use of the displaced mesh for outputting\n'
p93359
sS'cpp_type'
p93360
S'bool'
p93361
sS'default'
p93362
S'0'
p93363
sS'name'
p93364
S'use_displaced'
p93365
sS'required'
p93366
I00
sS'group_name'
p93367
Nsa(dp93368
S'description'
p93369
S'Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n'
p93370
sS'cpp_type'
p93371
S'bool'
p93372
sS'default'
p93373
g3
sS'name'
p93374
S'use_problem_dimension'
p93375
sS'required'
p93376
I00
sS'group_name'
p93377
NsasS'name'
p93378
S'/Outputs/Exodus'
p93379
sa(dp93380
S'description'
p93381
S'Object for outputting data in the GMV format\n'
p93382
sS'subblocks'
p93383
NsS'parameters'
p93384
(lp93385
(dp93386
S'name'
p93387
S'additional_execute_on'
p93388
sS'cpp_type'
p93389
S'MultiMooseEnum'
p93390
sS'default'
p93391
g3
sS'description'
p93392
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93393
sS'required'
p93394
I00
sS'options'
p93395
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93396
sS'group_name'
p93397
Nsa(dp93398
S'description'
p93399
S'When true the date and time are appended to the output filename.\n'
p93400
sS'cpp_type'
p93401
S'bool'
p93402
sS'default'
p93403
S'0'
p93404
sS'name'
p93405
S'append_date'
p93406
sS'required'
p93407
I00
sS'group_name'
p93408
Nsa(dp93409
S'description'
p93410
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p93411
sS'cpp_type'
p93412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93413
sS'default'
p93414
g3
sS'name'
p93415
S'append_date_format'
p93416
sS'required'
p93417
I00
sS'group_name'
p93418
Nsa(dp93419
S'description'
p93420
S"Append '_oversample' to the output file base\n"
p93421
sS'cpp_type'
p93422
S'bool'
p93423
sS'default'
p93424
S'0'
p93425
sS'name'
p93426
S'append_oversample'
p93427
sS'required'
p93428
I00
sS'group_name'
p93429
Nsa(dp93430
S'description'
p93431
S'Output the file in binary format\n'
p93432
sS'cpp_type'
p93433
S'bool'
p93434
sS'default'
p93435
S'1'
p93436
sS'name'
p93437
S'binary'
p93438
sS'required'
p93439
I00
sS'group_name'
p93440
S'Advanced'
p93441
sa(dp93442
S'description'
p93443
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93444
sS'cpp_type'
p93445
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93446
sS'default'
p93447
g3
sS'name'
p93448
S'control_tags'
p93449
sS'required'
p93450
I00
sS'group_name'
p93451
S'Advanced'
p93452
sa(dp93453
S'description'
p93454
S'Set the enabled status of the MooseObject.\n'
p93455
sS'cpp_type'
p93456
S'bool'
p93457
sS'default'
p93458
S'1'
p93459
sS'name'
p93460
S'enable'
p93461
sS'required'
p93462
I00
sS'group_name'
p93463
S'Advanced'
p93464
sa(dp93465
S'description'
p93466
S'Time at which this output object stop operating\n'
p93467
sS'cpp_type'
p93468
S'double'
p93469
sS'default'
p93470
g3
sS'name'
p93471
S'end_time'
p93472
sS'required'
p93473
I00
sS'group_name'
p93474
S'Timing'
p93475
sa(dp93476
S'name'
p93477
S'execute_on'
p93478
sS'cpp_type'
p93479
S'MultiMooseEnum'
p93480
sS'default'
p93481
S'INITIAL TIMESTEP_END'
p93482
sS'description'
p93483
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93484
sS'required'
p93485
I00
sS'options'
p93486
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93487
sS'group_name'
p93488
Nsa(dp93489
S'description'
p93490
S'The name of the mesh file to read, for oversampling\n'
p93491
sS'cpp_type'
p93492
S'MeshFileName'
p93493
sS'default'
p93494
g3
sS'name'
p93495
S'file'
p93496
sS'required'
p93497
I00
sS'group_name'
p93498
S'Oversampling'
p93499
sa(dp93500
S'description'
p93501
S'The desired solution output name without an extension\n'
p93502
sS'cpp_type'
p93503
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93504
sS'default'
p93505
g3
sS'name'
p93506
S'file_base'
p93507
sS'required'
p93508
I00
sS'group_name'
p93509
Nsa(dp93510
S'description'
p93511
S'The interval at which time steps are output to the solution file\n'
p93512
sS'cpp_type'
p93513
S'unsigned int'
p93514
sS'default'
p93515
S'1'
p93516
sS'name'
p93517
S'interval'
p93518
sS'required'
p93519
I00
sS'group_name'
p93520
S'Timing'
p93521
sa(dp93522
S'description'
p93523
S'Number of divisions applied to time step when outputting linear residuals\n'
p93524
sS'cpp_type'
p93525
S'double'
p93526
sS'default'
p93527
S'1000'
p93528
sS'name'
p93529
S'linear_residual_dt_divisor'
p93530
sS'required'
p93531
I00
sS'group_name'
p93532
S'PETSc'
p93533
sa(dp93534
S'description'
p93535
S'Specifies an end time to begin output on each linear residual evaluation\n'
p93536
sS'cpp_type'
p93537
S'double'
p93538
sS'default'
p93539
g3
sS'name'
p93540
S'linear_residual_end_time'
p93541
sS'required'
p93542
I00
sS'group_name'
p93543
S'PETSc'
p93544
sa(dp93545
S'description'
p93546
S'Specifies a start time to begin output on each linear residual evaluation\n'
p93547
sS'cpp_type'
p93548
S'double'
p93549
sS'default'
p93550
g3
sS'name'
p93551
S'linear_residual_start_time'
p93552
sS'required'
p93553
I00
sS'group_name'
p93554
S'PETSc'
p93555
sa(dp93556
S'description'
p93557
S'Specifies whether output occurs on each linear residual evaluation\n'
p93558
sS'cpp_type'
p93559
S'bool'
p93560
sS'default'
p93561
S'0'
p93562
sS'name'
p93563
S'linear_residuals'
p93564
sS'required'
p93565
I00
sS'group_name'
p93566
S'PETSc'
p93567
sa(dp93568
S'description'
p93569
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p93570
sS'cpp_type'
p93571
S'double'
p93572
sS'default'
p93573
S'1000'
p93574
sS'name'
p93575
S'nonlinear_residual_dt_divisor'
p93576
sS'required'
p93577
I00
sS'group_name'
p93578
S'PETSc'
p93579
sa(dp93580
S'description'
p93581
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p93582
sS'cpp_type'
p93583
S'double'
p93584
sS'default'
p93585
g3
sS'name'
p93586
S'nonlinear_residual_end_time'
p93587
sS'required'
p93588
I00
sS'group_name'
p93589
S'PETSc'
p93590
sa(dp93591
S'description'
p93592
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p93593
sS'cpp_type'
p93594
S'double'
p93595
sS'default'
p93596
g3
sS'name'
p93597
S'nonlinear_residual_start_time'
p93598
sS'required'
p93599
I00
sS'group_name'
p93600
S'PETSc'
p93601
sa(dp93602
S'description'
p93603
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93604
sS'cpp_type'
p93605
S'bool'
p93606
sS'default'
p93607
S'0'
p93608
sS'name'
p93609
S'nonlinear_residuals'
p93610
sS'required'
p93611
I00
sS'group_name'
p93612
S'PETSc'
p93613
sa(dp93614
S'description'
p93615
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p93616
sS'cpp_type'
p93617
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93618
sS'default'
p93619
g3
sS'name'
p93620
S'output_if_base_contains'
p93621
sS'required'
p93622
I00
sS'group_name'
p93623
S'Advanced'
p93624
sa(dp93625
S'description'
p93626
S'Specifies whether output occurs on each linear residual evaluation\n'
p93627
sS'cpp_type'
p93628
S'bool'
p93629
sS'default'
p93630
S'0'
p93631
sS'name'
p93632
S'output_linear'
p93633
sS'required'
p93634
I00
sS'group_name'
p93635
Nsa(dp93636
S'description'
p93637
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93638
sS'cpp_type'
p93639
S'bool'
p93640
sS'default'
p93641
S'0'
p93642
sS'name'
p93643
S'output_nonlinear'
p93644
sS'required'
p93645
I00
sS'group_name'
p93646
Nsa(dp93647
S'description'
p93648
S'Set to true to enable oversampling\n'
p93649
sS'cpp_type'
p93650
S'bool'
p93651
sS'default'
p93652
S'0'
p93653
sS'name'
p93654
S'oversample'
p93655
sS'required'
p93656
I00
sS'group_name'
p93657
Nsa(dp93658
S'description'
p93659
S'The number of for extension suffix (e.g., out.e-s002)\n'
p93660
sS'cpp_type'
p93661
S'unsigned int'
p93662
sS'default'
p93663
S'4'
p93664
sS'name'
p93665
S'padding'
p93666
sS'required'
p93667
I00
sS'group_name'
p93668
S'Advanced'
p93669
sa(dp93670
S'description'
p93671
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p93672
sS'cpp_type'
p93673
S'libMesh::Point'
p93674
sS'default'
p93675
g3
sS'name'
p93676
S'position'
p93677
sS'required'
p93678
I00
sS'group_name'
p93679
S'Oversampling'
p93680
sa(dp93681
S'description'
p93682
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p93683
sS'cpp_type'
p93684
S'unsigned int'
p93685
sS'default'
p93686
S'0'
p93687
sS'name'
p93688
S'refinements'
p93689
sS'required'
p93690
I00
sS'group_name'
p93691
S'Oversampling'
p93692
sa(dp93693
S'description'
p93694
S'Time at which this output object begins to operate\n'
p93695
sS'cpp_type'
p93696
S'double'
p93697
sS'default'
p93698
g3
sS'name'
p93699
S'start_time'
p93700
sS'required'
p93701
I00
sS'group_name'
p93702
S'Timing'
p93703
sa(dp93704
S'description'
p93705
S'Only export results at sync times\n'
p93706
sS'cpp_type'
p93707
S'bool'
p93708
sS'default'
p93709
S'0'
p93710
sS'name'
p93711
S'sync_only'
p93712
sS'required'
p93713
I00
sS'group_name'
p93714
S'Timing'
p93715
sa(dp93716
S'description'
p93717
S'Times at which the output and solution is forced to occur\n'
p93718
sS'cpp_type'
p93719
S'std::vector<double, std::allocator<double> >'
p93720
sS'default'
p93721
g3
sS'name'
p93722
S'sync_times'
p93723
sS'required'
p93724
I00
sS'group_name'
p93725
S'Timing'
p93726
sa(dp93727
S'description'
p93728
S'Time tolerance utilized checking start and end times\n'
p93729
sS'cpp_type'
p93730
S'double'
p93731
sS'default'
p93732
S'1e-14'
p93733
sS'name'
p93734
S'time_tolerance'
p93735
sS'required'
p93736
I00
sS'group_name'
p93737
S'Timing'
p93738
sa(dp93739
S'description'
p93740
g3
sS'cpp_type'
p93741
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93742
sS'default'
p93743
S'GMV'
p93744
sS'name'
p93745
S'type'
p93746
sS'required'
p93747
I00
sS'group_name'
p93748
Nsa(dp93749
S'description'
p93750
S'Enable/disable the use of the displaced mesh for outputting\n'
p93751
sS'cpp_type'
p93752
S'bool'
p93753
sS'default'
p93754
S'0'
p93755
sS'name'
p93756
S'use_displaced'
p93757
sS'required'
p93758
I00
sS'group_name'
p93759
NsasS'name'
p93760
S'/Outputs/GMV'
p93761
sa(dp93762
S'description'
p93763
g3
sS'subblocks'
p93764
NsS'parameters'
p93765
(lp93766
(dp93767
S'name'
p93768
S'additional_execute_on'
p93769
sS'cpp_type'
p93770
S'MultiMooseEnum'
p93771
sS'default'
p93772
g3
sS'description'
p93773
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93774
sS'required'
p93775
I00
sS'options'
p93776
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93777
sS'group_name'
p93778
Nsa(dp93779
S'description'
p93780
S'When true the date and time are appended to the output filename.\n'
p93781
sS'cpp_type'
p93782
S'bool'
p93783
sS'default'
p93784
S'0'
p93785
sS'name'
p93786
S'append_date'
p93787
sS'required'
p93788
I00
sS'group_name'
p93789
Nsa(dp93790
S'description'
p93791
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p93792
sS'cpp_type'
p93793
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93794
sS'default'
p93795
g3
sS'name'
p93796
S'append_date_format'
p93797
sS'required'
p93798
I00
sS'group_name'
p93799
Nsa(dp93800
S'description'
p93801
S'Append existing file on restart\n'
p93802
sS'cpp_type'
p93803
S'bool'
p93804
sS'default'
p93805
S'0'
p93806
sS'name'
p93807
S'append_restart'
p93808
sS'required'
p93809
I00
sS'group_name'
p93810
Nsa(dp93811
S'description'
p93812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93813
sS'cpp_type'
p93814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93815
sS'default'
p93816
g3
sS'name'
p93817
S'control_tags'
p93818
sS'required'
p93819
I00
sS'group_name'
p93820
S'Advanced'
p93821
sa(dp93822
S'description'
p93823
S'Set the enabled status of the MooseObject.\n'
p93824
sS'cpp_type'
p93825
S'bool'
p93826
sS'default'
p93827
S'1'
p93828
sS'name'
p93829
S'enable'
p93830
sS'required'
p93831
I00
sS'group_name'
p93832
S'Advanced'
p93833
sa(dp93834
S'description'
p93835
S'Time at which this output object stop operating\n'
p93836
sS'cpp_type'
p93837
S'double'
p93838
sS'default'
p93839
g3
sS'name'
p93840
S'end_time'
p93841
sS'required'
p93842
I00
sS'group_name'
p93843
S'Timing'
p93844
sa(dp93845
S'description'
p93846
S'Enable/disable the output of elemental variables\n'
p93847
sS'cpp_type'
p93848
S'bool'
p93849
sS'default'
p93850
S'1'
p93851
sS'name'
p93852
S'execute_elemental_variables'
p93853
sS'required'
p93854
I00
sS'group_name'
p93855
Nsa(dp93856
S'description'
p93857
S'Enable/disable the output of input file information\n'
p93858
sS'cpp_type'
p93859
S'bool'
p93860
sS'default'
p93861
S'1'
p93862
sS'name'
p93863
S'execute_input'
p93864
sS'required'
p93865
I00
sS'group_name'
p93866
Nsa(dp93867
S'description'
p93868
S'Enable/disable the output of nodal variables\n'
p93869
sS'cpp_type'
p93870
S'bool'
p93871
sS'default'
p93872
S'1'
p93873
sS'name'
p93874
S'execute_nodal_variables'
p93875
sS'required'
p93876
I00
sS'group_name'
p93877
Nsa(dp93878
S'name'
p93879
S'execute_on'
p93880
sS'cpp_type'
p93881
S'MultiMooseEnum'
p93882
sS'default'
p93883
S'INITIAL TIMESTEP_END'
p93884
sS'description'
p93885
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93886
sS'required'
p93887
I00
sS'options'
p93888
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93889
sS'group_name'
p93890
Nsa(dp93891
S'name'
p93892
S'execute_postprocessors_on'
p93893
sS'cpp_type'
p93894
S'MultiMooseEnum'
p93895
sS'default'
p93896
g3
sS'description'
p93897
S'Control of when postprocessors are output\n'
p93898
sS'required'
p93899
I00
sS'options'
p93900
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93901
sS'group_name'
p93902
S'Variables'
p93903
sa(dp93904
S'description'
p93905
S'Enable/disable the output of aux scalar variables\n'
p93906
sS'cpp_type'
p93907
S'bool'
p93908
sS'default'
p93909
S'1'
p93910
sS'name'
p93911
S'execute_scalar_variables'
p93912
sS'required'
p93913
I00
sS'group_name'
p93914
Nsa(dp93915
S'name'
p93916
S'execute_scalars_on'
p93917
sS'cpp_type'
p93918
S'MultiMooseEnum'
p93919
sS'default'
p93920
g3
sS'description'
p93921
S'Control the output of scalar variables\n'
p93922
sS'required'
p93923
I00
sS'options'
p93924
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93925
sS'group_name'
p93926
S'Variables'
p93927
sa(dp93928
S'description'
p93929
S'Enable/disable the output of the simulation information\n'
p93930
sS'cpp_type'
p93931
S'bool'
p93932
sS'default'
p93933
S'1'
p93934
sS'name'
p93935
S'execute_system_information'
p93936
sS'required'
p93937
I00
sS'group_name'
p93938
Nsa(dp93939
S'description'
p93940
S'Enable/disable the output of vector postprocessors\n'
p93941
sS'cpp_type'
p93942
S'bool'
p93943
sS'default'
p93944
S'1'
p93945
sS'name'
p93946
S'execute_vector_postprocessors'
p93947
sS'required'
p93948
I00
sS'group_name'
p93949
Nsa(dp93950
S'name'
p93951
S'execute_vector_postprocessors_on'
p93952
sS'cpp_type'
p93953
S'MultiMooseEnum'
p93954
sS'default'
p93955
g3
sS'description'
p93956
S'Enable/disable the output of VectorPostprocessors\n'
p93957
sS'required'
p93958
I00
sS'options'
p93959
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93960
sS'group_name'
p93961
S'Variables'
p93962
sa(dp93963
S'name'
p93964
S'extension'
p93965
sS'cpp_type'
p93966
S'MooseEnum'
p93967
sS'default'
p93968
S'png'
p93969
sS'description'
p93970
S'GNU plot file extension\n'
p93971
sS'required'
p93972
I00
sS'options'
p93973
S'png ps gif'
p93974
sS'group_name'
p93975
Nsa(dp93976
S'description'
p93977
S'The desired solution output name without an extension\n'
p93978
sS'cpp_type'
p93979
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93980
sS'default'
p93981
g3
sS'name'
p93982
S'file_base'
p93983
sS'required'
p93984
I00
sS'group_name'
p93985
Nsa(dp93986
S'description'
p93987
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93988
sS'cpp_type'
p93989
S'std::vector<VariableName, std::allocator<VariableName> >'
p93990
sS'default'
p93991
g3
sS'name'
p93992
S'hide'
p93993
sS'required'
p93994
I00
sS'group_name'
p93995
S'Variables'
p93996
sa(dp93997
S'description'
p93998
S'The interval at which time steps are output to the solution file\n'
p93999
sS'cpp_type'
p94000
S'unsigned int'
p94001
sS'default'
p94002
S'1'
p94003
sS'name'
p94004
S'interval'
p94005
sS'required'
p94006
I00
sS'group_name'
p94007
S'Timing'
p94008
sa(dp94009
S'description'
p94010
S'Number of divisions applied to time step when outputting linear residuals\n'
p94011
sS'cpp_type'
p94012
S'double'
p94013
sS'default'
p94014
S'1000'
p94015
sS'name'
p94016
S'linear_residual_dt_divisor'
p94017
sS'required'
p94018
I00
sS'group_name'
p94019
S'PETSc'
p94020
sa(dp94021
S'description'
p94022
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94023
sS'cpp_type'
p94024
S'double'
p94025
sS'default'
p94026
g3
sS'name'
p94027
S'linear_residual_end_time'
p94028
sS'required'
p94029
I00
sS'group_name'
p94030
S'PETSc'
p94031
sa(dp94032
S'description'
p94033
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94034
sS'cpp_type'
p94035
S'double'
p94036
sS'default'
p94037
g3
sS'name'
p94038
S'linear_residual_start_time'
p94039
sS'required'
p94040
I00
sS'group_name'
p94041
S'PETSc'
p94042
sa(dp94043
S'description'
p94044
S'Specifies whether output occurs on each linear residual evaluation\n'
p94045
sS'cpp_type'
p94046
S'bool'
p94047
sS'default'
p94048
S'0'
p94049
sS'name'
p94050
S'linear_residuals'
p94051
sS'required'
p94052
I00
sS'group_name'
p94053
S'PETSc'
p94054
sa(dp94055
S'description'
p94056
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94057
sS'cpp_type'
p94058
S'double'
p94059
sS'default'
p94060
S'1000'
p94061
sS'name'
p94062
S'nonlinear_residual_dt_divisor'
p94063
sS'required'
p94064
I00
sS'group_name'
p94065
S'PETSc'
p94066
sa(dp94067
S'description'
p94068
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94069
sS'cpp_type'
p94070
S'double'
p94071
sS'default'
p94072
g3
sS'name'
p94073
S'nonlinear_residual_end_time'
p94074
sS'required'
p94075
I00
sS'group_name'
p94076
S'PETSc'
p94077
sa(dp94078
S'description'
p94079
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94080
sS'cpp_type'
p94081
S'double'
p94082
sS'default'
p94083
g3
sS'name'
p94084
S'nonlinear_residual_start_time'
p94085
sS'required'
p94086
I00
sS'group_name'
p94087
S'PETSc'
p94088
sa(dp94089
S'description'
p94090
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94091
sS'cpp_type'
p94092
S'bool'
p94093
sS'default'
p94094
S'0'
p94095
sS'name'
p94096
S'nonlinear_residuals'
p94097
sS'required'
p94098
I00
sS'group_name'
p94099
S'PETSc'
p94100
sa(dp94101
S'description'
p94102
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94103
sS'cpp_type'
p94104
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94105
sS'default'
p94106
g3
sS'name'
p94107
S'output_if_base_contains'
p94108
sS'required'
p94109
I00
sS'group_name'
p94110
S'Advanced'
p94111
sa(dp94112
S'description'
p94113
S'Specifies whether output occurs on each linear residual evaluation\n'
p94114
sS'cpp_type'
p94115
S'bool'
p94116
sS'default'
p94117
S'0'
p94118
sS'name'
p94119
S'output_linear'
p94120
sS'required'
p94121
I00
sS'group_name'
p94122
Nsa(dp94123
S'description'
p94124
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94125
sS'cpp_type'
p94126
S'bool'
p94127
sS'default'
p94128
S'0'
p94129
sS'name'
p94130
S'output_nonlinear'
p94131
sS'required'
p94132
I00
sS'group_name'
p94133
Nsa(dp94134
S'description'
p94135
S'Enable/disable the output of postprocessors\n'
p94136
sS'cpp_type'
p94137
S'bool'
p94138
sS'default'
p94139
S'1'
p94140
sS'name'
p94141
S'output_postprocessors'
p94142
sS'required'
p94143
I00
sS'group_name'
p94144
Nsa(dp94145
S'description'
p94146
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94147
sS'cpp_type'
p94148
S'unsigned int'
p94149
sS'default'
p94150
S'4'
p94151
sS'name'
p94152
S'padding'
p94153
sS'required'
p94154
I00
sS'group_name'
p94155
S'Advanced'
p94156
sa(dp94157
S'description'
p94158
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94159
sS'cpp_type'
p94160
S'std::vector<VariableName, std::allocator<VariableName> >'
p94161
sS'default'
p94162
g3
sS'name'
p94163
S'show'
p94164
sS'required'
p94165
I00
sS'group_name'
p94166
S'Variables'
p94167
sa(dp94168
S'description'
p94169
S'Time at which this output object begins to operate\n'
p94170
sS'cpp_type'
p94171
S'double'
p94172
sS'default'
p94173
g3
sS'name'
p94174
S'start_time'
p94175
sS'required'
p94176
I00
sS'group_name'
p94177
S'Timing'
p94178
sa(dp94179
S'description'
p94180
S'Only export results at sync times\n'
p94181
sS'cpp_type'
p94182
S'bool'
p94183
sS'default'
p94184
S'0'
p94185
sS'name'
p94186
S'sync_only'
p94187
sS'required'
p94188
I00
sS'group_name'
p94189
S'Timing'
p94190
sa(dp94191
S'description'
p94192
S'Times at which the output and solution is forced to occur\n'
p94193
sS'cpp_type'
p94194
S'std::vector<double, std::allocator<double> >'
p94195
sS'default'
p94196
g3
sS'name'
p94197
S'sync_times'
p94198
sS'required'
p94199
I00
sS'group_name'
p94200
S'Timing'
p94201
sa(dp94202
S'description'
p94203
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p94204
sS'cpp_type'
p94205
S'bool'
p94206
sS'default'
p94207
S'1'
p94208
sS'name'
p94209
S'time_column'
p94210
sS'required'
p94211
I00
sS'group_name'
p94212
Nsa(dp94213
S'description'
p94214
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p94215
sS'cpp_type'
p94216
S'bool'
p94217
sS'default'
p94218
S'0'
p94219
sS'name'
p94220
S'time_data'
p94221
sS'required'
p94222
I00
sS'group_name'
p94223
Nsa(dp94224
S'description'
p94225
S'Time tolerance utilized checking start and end times\n'
p94226
sS'cpp_type'
p94227
S'double'
p94228
sS'default'
p94229
S'1e-14'
p94230
sS'name'
p94231
S'time_tolerance'
p94232
sS'required'
p94233
I00
sS'group_name'
p94234
S'Timing'
p94235
sa(dp94236
S'description'
p94237
g3
sS'cpp_type'
p94238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94239
sS'default'
p94240
S'Gnuplot'
p94241
sS'name'
p94242
S'type'
p94243
sS'required'
p94244
I00
sS'group_name'
p94245
Nsa(dp94246
S'description'
p94247
S'Enable/disable the use of the displaced mesh for outputting\n'
p94248
sS'cpp_type'
p94249
S'bool'
p94250
sS'default'
p94251
S'0'
p94252
sS'name'
p94253
S'use_displaced'
p94254
sS'required'
p94255
I00
sS'group_name'
p94256
NsasS'name'
p94257
S'/Outputs/Gnuplot'
p94258
sa(dp94259
S'description'
p94260
g3
sS'subblocks'
p94261
NsS'parameters'
p94262
(lp94263
(dp94264
S'name'
p94265
S'additional_execute_on'
p94266
sS'cpp_type'
p94267
S'MultiMooseEnum'
p94268
sS'default'
p94269
g3
sS'description'
p94270
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94271
sS'required'
p94272
I00
sS'options'
p94273
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94274
sS'group_name'
p94275
Nsa(dp94276
S'description'
p94277
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94278
sS'cpp_type'
p94279
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94280
sS'default'
p94281
g3
sS'name'
p94282
S'control_tags'
p94283
sS'required'
p94284
I00
sS'group_name'
p94285
S'Advanced'
p94286
sa(dp94287
S'description'
p94288
S'Set the enabled status of the MooseObject.\n'
p94289
sS'cpp_type'
p94290
S'bool'
p94291
sS'default'
p94292
S'1'
p94293
sS'name'
p94294
S'enable'
p94295
sS'required'
p94296
I00
sS'group_name'
p94297
S'Advanced'
p94298
sa(dp94299
S'description'
p94300
S'Time at which this output object stop operating\n'
p94301
sS'cpp_type'
p94302
S'double'
p94303
sS'default'
p94304
g3
sS'name'
p94305
S'end_time'
p94306
sS'required'
p94307
I00
sS'group_name'
p94308
S'Timing'
p94309
sa(dp94310
S'description'
p94311
S'The interval at which time steps are output to the solution file\n'
p94312
sS'cpp_type'
p94313
S'unsigned int'
p94314
sS'default'
p94315
S'1'
p94316
sS'name'
p94317
S'interval'
p94318
sS'required'
p94319
I00
sS'group_name'
p94320
S'Timing'
p94321
sa(dp94322
S'description'
p94323
S'Time at which this output object begins to operate\n'
p94324
sS'cpp_type'
p94325
S'double'
p94326
sS'default'
p94327
g3
sS'name'
p94328
S'start_time'
p94329
sS'required'
p94330
I00
sS'group_name'
p94331
S'Timing'
p94332
sa(dp94333
S'description'
p94334
S'Only export results at sync times\n'
p94335
sS'cpp_type'
p94336
S'bool'
p94337
sS'default'
p94338
S'0'
p94339
sS'name'
p94340
S'sync_only'
p94341
sS'required'
p94342
I00
sS'group_name'
p94343
S'Timing'
p94344
sa(dp94345
S'description'
p94346
S'Times at which the output and solution is forced to occur\n'
p94347
sS'cpp_type'
p94348
S'std::vector<double, std::allocator<double> >'
p94349
sS'default'
p94350
g3
sS'name'
p94351
S'sync_times'
p94352
sS'required'
p94353
I00
sS'group_name'
p94354
S'Timing'
p94355
sa(dp94356
S'description'
p94357
S'Time tolerance utilized checking start and end times\n'
p94358
sS'cpp_type'
p94359
S'double'
p94360
sS'default'
p94361
S'1e-14'
p94362
sS'name'
p94363
S'time_tolerance'
p94364
sS'required'
p94365
I00
sS'group_name'
p94366
S'Timing'
p94367
sa(dp94368
S'description'
p94369
g3
sS'cpp_type'
p94370
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94371
sS'default'
p94372
S'MaterialPropertyDebugOutput'
p94373
sS'name'
p94374
S'type'
p94375
sS'required'
p94376
I00
sS'group_name'
p94377
Nsa(dp94378
S'description'
p94379
S'Enable/disable the use of the displaced mesh for outputting\n'
p94380
sS'cpp_type'
p94381
S'bool'
p94382
sS'default'
p94383
S'0'
p94384
sS'name'
p94385
S'use_displaced'
p94386
sS'required'
p94387
I00
sS'group_name'
p94388
NsasS'name'
p94389
S'/Outputs/MaterialPropertyDebugOutput'
p94390
sa(dp94391
S'description'
p94392
S'Object for output data in the Nemesis format\n'
p94393
sS'subblocks'
p94394
NsS'parameters'
p94395
(lp94396
(dp94397
S'name'
p94398
S'additional_execute_on'
p94399
sS'cpp_type'
p94400
S'MultiMooseEnum'
p94401
sS'default'
p94402
g3
sS'description'
p94403
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94404
sS'required'
p94405
I00
sS'options'
p94406
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94407
sS'group_name'
p94408
Nsa(dp94409
S'description'
p94410
S'When true the date and time are appended to the output filename.\n'
p94411
sS'cpp_type'
p94412
S'bool'
p94413
sS'default'
p94414
S'0'
p94415
sS'name'
p94416
S'append_date'
p94417
sS'required'
p94418
I00
sS'group_name'
p94419
Nsa(dp94420
S'description'
p94421
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94422
sS'cpp_type'
p94423
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94424
sS'default'
p94425
g3
sS'name'
p94426
S'append_date_format'
p94427
sS'required'
p94428
I00
sS'group_name'
p94429
Nsa(dp94430
S'description'
p94431
S"Append '_oversample' to the output file base\n"
p94432
sS'cpp_type'
p94433
S'bool'
p94434
sS'default'
p94435
S'0'
p94436
sS'name'
p94437
S'append_oversample'
p94438
sS'required'
p94439
I00
sS'group_name'
p94440
Nsa(dp94441
S'description'
p94442
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94443
sS'cpp_type'
p94444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94445
sS'default'
p94446
g3
sS'name'
p94447
S'control_tags'
p94448
sS'required'
p94449
I00
sS'group_name'
p94450
S'Advanced'
p94451
sa(dp94452
S'description'
p94453
S'Set the enabled status of the MooseObject.\n'
p94454
sS'cpp_type'
p94455
S'bool'
p94456
sS'default'
p94457
S'1'
p94458
sS'name'
p94459
S'enable'
p94460
sS'required'
p94461
I00
sS'group_name'
p94462
S'Advanced'
p94463
sa(dp94464
S'description'
p94465
S'Time at which this output object stop operating\n'
p94466
sS'cpp_type'
p94467
S'double'
p94468
sS'default'
p94469
g3
sS'name'
p94470
S'end_time'
p94471
sS'required'
p94472
I00
sS'group_name'
p94473
S'Timing'
p94474
sa(dp94475
S'description'
p94476
S'Enable/disable the output of elemental variables\n'
p94477
sS'cpp_type'
p94478
S'bool'
p94479
sS'default'
p94480
S'1'
p94481
sS'name'
p94482
S'execute_elemental_variables'
p94483
sS'required'
p94484
I00
sS'group_name'
p94485
Nsa(dp94486
S'description'
p94487
S'Enable/disable the output of input file information\n'
p94488
sS'cpp_type'
p94489
S'bool'
p94490
sS'default'
p94491
S'1'
p94492
sS'name'
p94493
S'execute_input'
p94494
sS'required'
p94495
I00
sS'group_name'
p94496
Nsa(dp94497
S'name'
p94498
S'execute_input_on'
p94499
sS'cpp_type'
p94500
S'MultiMooseEnum'
p94501
sS'default'
p94502
g3
sS'description'
p94503
S'Enable/disable the output of the input file\n'
p94504
sS'required'
p94505
I00
sS'options'
p94506
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94507
sS'group_name'
p94508
S'Variables'
p94509
sa(dp94510
S'description'
p94511
S'Enable/disable the output of nodal variables\n'
p94512
sS'cpp_type'
p94513
S'bool'
p94514
sS'default'
p94515
S'1'
p94516
sS'name'
p94517
S'execute_nodal_variables'
p94518
sS'required'
p94519
I00
sS'group_name'
p94520
Nsa(dp94521
S'name'
p94522
S'execute_on'
p94523
sS'cpp_type'
p94524
S'MultiMooseEnum'
p94525
sS'default'
p94526
S'INITIAL TIMESTEP_END'
p94527
sS'description'
p94528
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94529
sS'required'
p94530
I00
sS'options'
p94531
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94532
sS'group_name'
p94533
Nsa(dp94534
S'name'
p94535
S'execute_postprocessors_on'
p94536
sS'cpp_type'
p94537
S'MultiMooseEnum'
p94538
sS'default'
p94539
g3
sS'description'
p94540
S'Control of when postprocessors are output\n'
p94541
sS'required'
p94542
I00
sS'options'
p94543
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94544
sS'group_name'
p94545
S'Variables'
p94546
sa(dp94547
S'description'
p94548
S'Enable/disable the output of aux scalar variables\n'
p94549
sS'cpp_type'
p94550
S'bool'
p94551
sS'default'
p94552
S'1'
p94553
sS'name'
p94554
S'execute_scalar_variables'
p94555
sS'required'
p94556
I00
sS'group_name'
p94557
Nsa(dp94558
S'name'
p94559
S'execute_scalars_on'
p94560
sS'cpp_type'
p94561
S'MultiMooseEnum'
p94562
sS'default'
p94563
g3
sS'description'
p94564
S'Control the output of scalar variables\n'
p94565
sS'required'
p94566
I00
sS'options'
p94567
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94568
sS'group_name'
p94569
S'Variables'
p94570
sa(dp94571
S'description'
p94572
S'Enable/disable the output of the simulation information\n'
p94573
sS'cpp_type'
p94574
S'bool'
p94575
sS'default'
p94576
S'1'
p94577
sS'name'
p94578
S'execute_system_information'
p94579
sS'required'
p94580
I00
sS'group_name'
p94581
Nsa(dp94582
S'description'
p94583
S'Enable/disable the output of vector postprocessors\n'
p94584
sS'cpp_type'
p94585
S'bool'
p94586
sS'default'
p94587
S'1'
p94588
sS'name'
p94589
S'execute_vector_postprocessors'
p94590
sS'required'
p94591
I00
sS'group_name'
p94592
Nsa(dp94593
S'description'
p94594
S'The name of the mesh file to read, for oversampling\n'
p94595
sS'cpp_type'
p94596
S'MeshFileName'
p94597
sS'default'
p94598
g3
sS'name'
p94599
S'file'
p94600
sS'required'
p94601
I00
sS'group_name'
p94602
S'Oversampling'
p94603
sa(dp94604
S'description'
p94605
S'The desired solution output name without an extension\n'
p94606
sS'cpp_type'
p94607
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94608
sS'default'
p94609
g3
sS'name'
p94610
S'file_base'
p94611
sS'required'
p94612
I00
sS'group_name'
p94613
Nsa(dp94614
S'description'
p94615
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94616
sS'cpp_type'
p94617
S'std::vector<VariableName, std::allocator<VariableName> >'
p94618
sS'default'
p94619
g3
sS'name'
p94620
S'hide'
p94621
sS'required'
p94622
I00
sS'group_name'
p94623
S'Variables'
p94624
sa(dp94625
S'description'
p94626
S'The interval at which time steps are output to the solution file\n'
p94627
sS'cpp_type'
p94628
S'unsigned int'
p94629
sS'default'
p94630
S'1'
p94631
sS'name'
p94632
S'interval'
p94633
sS'required'
p94634
I00
sS'group_name'
p94635
S'Timing'
p94636
sa(dp94637
S'description'
p94638
S'Number of divisions applied to time step when outputting linear residuals\n'
p94639
sS'cpp_type'
p94640
S'double'
p94641
sS'default'
p94642
S'1000'
p94643
sS'name'
p94644
S'linear_residual_dt_divisor'
p94645
sS'required'
p94646
I00
sS'group_name'
p94647
S'PETSc'
p94648
sa(dp94649
S'description'
p94650
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94651
sS'cpp_type'
p94652
S'double'
p94653
sS'default'
p94654
g3
sS'name'
p94655
S'linear_residual_end_time'
p94656
sS'required'
p94657
I00
sS'group_name'
p94658
S'PETSc'
p94659
sa(dp94660
S'description'
p94661
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94662
sS'cpp_type'
p94663
S'double'
p94664
sS'default'
p94665
g3
sS'name'
p94666
S'linear_residual_start_time'
p94667
sS'required'
p94668
I00
sS'group_name'
p94669
S'PETSc'
p94670
sa(dp94671
S'description'
p94672
S'Specifies whether output occurs on each linear residual evaluation\n'
p94673
sS'cpp_type'
p94674
S'bool'
p94675
sS'default'
p94676
S'0'
p94677
sS'name'
p94678
S'linear_residuals'
p94679
sS'required'
p94680
I00
sS'group_name'
p94681
S'PETSc'
p94682
sa(dp94683
S'description'
p94684
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94685
sS'cpp_type'
p94686
S'double'
p94687
sS'default'
p94688
S'1000'
p94689
sS'name'
p94690
S'nonlinear_residual_dt_divisor'
p94691
sS'required'
p94692
I00
sS'group_name'
p94693
S'PETSc'
p94694
sa(dp94695
S'description'
p94696
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94697
sS'cpp_type'
p94698
S'double'
p94699
sS'default'
p94700
g3
sS'name'
p94701
S'nonlinear_residual_end_time'
p94702
sS'required'
p94703
I00
sS'group_name'
p94704
S'PETSc'
p94705
sa(dp94706
S'description'
p94707
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94708
sS'cpp_type'
p94709
S'double'
p94710
sS'default'
p94711
g3
sS'name'
p94712
S'nonlinear_residual_start_time'
p94713
sS'required'
p94714
I00
sS'group_name'
p94715
S'PETSc'
p94716
sa(dp94717
S'description'
p94718
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94719
sS'cpp_type'
p94720
S'bool'
p94721
sS'default'
p94722
S'0'
p94723
sS'name'
p94724
S'nonlinear_residuals'
p94725
sS'required'
p94726
I00
sS'group_name'
p94727
S'PETSc'
p94728
sa(dp94729
S'description'
p94730
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94731
sS'cpp_type'
p94732
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94733
sS'default'
p94734
g3
sS'name'
p94735
S'output_if_base_contains'
p94736
sS'required'
p94737
I00
sS'group_name'
p94738
S'Advanced'
p94739
sa(dp94740
S'description'
p94741
S'Specifies whether output occurs on each linear residual evaluation\n'
p94742
sS'cpp_type'
p94743
S'bool'
p94744
sS'default'
p94745
S'0'
p94746
sS'name'
p94747
S'output_linear'
p94748
sS'required'
p94749
I00
sS'group_name'
p94750
Nsa(dp94751
S'description'
p94752
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94753
sS'cpp_type'
p94754
S'bool'
p94755
sS'default'
p94756
S'0'
p94757
sS'name'
p94758
S'output_nonlinear'
p94759
sS'required'
p94760
I00
sS'group_name'
p94761
Nsa(dp94762
S'description'
p94763
S'Enable/disable the output of postprocessors\n'
p94764
sS'cpp_type'
p94765
S'bool'
p94766
sS'default'
p94767
S'1'
p94768
sS'name'
p94769
S'output_postprocessors'
p94770
sS'required'
p94771
I00
sS'group_name'
p94772
Nsa(dp94773
S'description'
p94774
S'Set to true to enable oversampling\n'
p94775
sS'cpp_type'
p94776
S'bool'
p94777
sS'default'
p94778
S'0'
p94779
sS'name'
p94780
S'oversample'
p94781
sS'required'
p94782
I00
sS'group_name'
p94783
Nsa(dp94784
S'description'
p94785
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94786
sS'cpp_type'
p94787
S'unsigned int'
p94788
sS'default'
p94789
S'4'
p94790
sS'name'
p94791
S'padding'
p94792
sS'required'
p94793
I00
sS'group_name'
p94794
S'Advanced'
p94795
sa(dp94796
S'description'
p94797
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p94798
sS'cpp_type'
p94799
S'libMesh::Point'
p94800
sS'default'
p94801
g3
sS'name'
p94802
S'position'
p94803
sS'required'
p94804
I00
sS'group_name'
p94805
S'Oversampling'
p94806
sa(dp94807
S'description'
p94808
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p94809
sS'cpp_type'
p94810
S'unsigned int'
p94811
sS'default'
p94812
S'0'
p94813
sS'name'
p94814
S'refinements'
p94815
sS'required'
p94816
I00
sS'group_name'
p94817
S'Oversampling'
p94818
sa(dp94819
S'description'
p94820
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94821
sS'cpp_type'
p94822
S'std::vector<VariableName, std::allocator<VariableName> >'
p94823
sS'default'
p94824
g3
sS'name'
p94825
S'show'
p94826
sS'required'
p94827
I00
sS'group_name'
p94828
S'Variables'
p94829
sa(dp94830
S'description'
p94831
S'Time at which this output object begins to operate\n'
p94832
sS'cpp_type'
p94833
S'double'
p94834
sS'default'
p94835
g3
sS'name'
p94836
S'start_time'
p94837
sS'required'
p94838
I00
sS'group_name'
p94839
S'Timing'
p94840
sa(dp94841
S'description'
p94842
S'Only export results at sync times\n'
p94843
sS'cpp_type'
p94844
S'bool'
p94845
sS'default'
p94846
S'0'
p94847
sS'name'
p94848
S'sync_only'
p94849
sS'required'
p94850
I00
sS'group_name'
p94851
S'Timing'
p94852
sa(dp94853
S'description'
p94854
S'Times at which the output and solution is forced to occur\n'
p94855
sS'cpp_type'
p94856
S'std::vector<double, std::allocator<double> >'
p94857
sS'default'
p94858
g3
sS'name'
p94859
S'sync_times'
p94860
sS'required'
p94861
I00
sS'group_name'
p94862
S'Timing'
p94863
sa(dp94864
S'description'
p94865
S'Time tolerance utilized checking start and end times\n'
p94866
sS'cpp_type'
p94867
S'double'
p94868
sS'default'
p94869
S'1e-14'
p94870
sS'name'
p94871
S'time_tolerance'
p94872
sS'required'
p94873
I00
sS'group_name'
p94874
S'Timing'
p94875
sa(dp94876
S'description'
p94877
g3
sS'cpp_type'
p94878
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94879
sS'default'
p94880
S'Nemesis'
p94881
sS'name'
p94882
S'type'
p94883
sS'required'
p94884
I00
sS'group_name'
p94885
Nsa(dp94886
S'description'
p94887
S'Enable/disable the use of the displaced mesh for outputting\n'
p94888
sS'cpp_type'
p94889
S'bool'
p94890
sS'default'
p94891
S'0'
p94892
sS'name'
p94893
S'use_displaced'
p94894
sS'required'
p94895
I00
sS'group_name'
p94896
NsasS'name'
p94897
S'/Outputs/Nemesis'
p94898
sa(dp94899
S'description'
p94900
g3
sS'subblocks'
p94901
NsS'parameters'
p94902
(lp94903
(dp94904
S'name'
p94905
S'additional_execute_on'
p94906
sS'cpp_type'
p94907
S'MultiMooseEnum'
p94908
sS'default'
p94909
g3
sS'description'
p94910
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94911
sS'required'
p94912
I00
sS'options'
p94913
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94914
sS'group_name'
p94915
Nsa(dp94916
S'description'
p94917
S'When true the date and time are appended to the output filename.\n'
p94918
sS'cpp_type'
p94919
S'bool'
p94920
sS'default'
p94921
S'0'
p94922
sS'name'
p94923
S'append_date'
p94924
sS'required'
p94925
I00
sS'group_name'
p94926
Nsa(dp94927
S'description'
p94928
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94929
sS'cpp_type'
p94930
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94931
sS'default'
p94932
g3
sS'name'
p94933
S'append_date_format'
p94934
sS'required'
p94935
I00
sS'group_name'
p94936
Nsa(dp94937
S'description'
p94938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94939
sS'cpp_type'
p94940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94941
sS'default'
p94942
g3
sS'name'
p94943
S'control_tags'
p94944
sS'required'
p94945
I00
sS'group_name'
p94946
S'Advanced'
p94947
sa(dp94948
S'description'
p94949
S'Set the enabled status of the MooseObject.\n'
p94950
sS'cpp_type'
p94951
S'bool'
p94952
sS'default'
p94953
S'1'
p94954
sS'name'
p94955
S'enable'
p94956
sS'required'
p94957
I00
sS'group_name'
p94958
S'Advanced'
p94959
sa(dp94960
S'description'
p94961
S'Time at which this output object stop operating\n'
p94962
sS'cpp_type'
p94963
S'double'
p94964
sS'default'
p94965
g3
sS'name'
p94966
S'end_time'
p94967
sS'required'
p94968
I00
sS'group_name'
p94969
S'Timing'
p94970
sa(dp94971
S'name'
p94972
S'execute_on'
p94973
sS'cpp_type'
p94974
S'MultiMooseEnum'
p94975
sS'default'
p94976
S'INITIAL TIMESTEP_END'
p94977
sS'description'
p94978
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94979
sS'required'
p94980
I00
sS'options'
p94981
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94982
sS'group_name'
p94983
Nsa(dp94984
S'description'
p94985
S'The desired solution output name without an extension\n'
p94986
sS'cpp_type'
p94987
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94988
sS'default'
p94989
g3
sS'name'
p94990
S'file_base'
p94991
sS'required'
p94992
I00
sS'group_name'
p94993
Nsa(dp94994
S'description'
p94995
S'The interval at which time steps are output to the solution file\n'
p94996
sS'cpp_type'
p94997
S'unsigned int'
p94998
sS'default'
p94999
S'1'
p95000
sS'name'
p95001
S'interval'
p95002
sS'required'
p95003
I00
sS'group_name'
p95004
S'Timing'
p95005
sa(dp95006
S'description'
p95007
S'Number of divisions applied to time step when outputting linear residuals\n'
p95008
sS'cpp_type'
p95009
S'double'
p95010
sS'default'
p95011
S'1000'
p95012
sS'name'
p95013
S'linear_residual_dt_divisor'
p95014
sS'required'
p95015
I00
sS'group_name'
p95016
S'PETSc'
p95017
sa(dp95018
S'description'
p95019
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95020
sS'cpp_type'
p95021
S'double'
p95022
sS'default'
p95023
g3
sS'name'
p95024
S'linear_residual_end_time'
p95025
sS'required'
p95026
I00
sS'group_name'
p95027
S'PETSc'
p95028
sa(dp95029
S'description'
p95030
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95031
sS'cpp_type'
p95032
S'double'
p95033
sS'default'
p95034
g3
sS'name'
p95035
S'linear_residual_start_time'
p95036
sS'required'
p95037
I00
sS'group_name'
p95038
S'PETSc'
p95039
sa(dp95040
S'description'
p95041
S'Specifies whether output occurs on each linear residual evaluation\n'
p95042
sS'cpp_type'
p95043
S'bool'
p95044
sS'default'
p95045
S'0'
p95046
sS'name'
p95047
S'linear_residuals'
p95048
sS'required'
p95049
I00
sS'group_name'
p95050
S'PETSc'
p95051
sa(dp95052
S'description'
p95053
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95054
sS'cpp_type'
p95055
S'double'
p95056
sS'default'
p95057
S'1000'
p95058
sS'name'
p95059
S'nonlinear_residual_dt_divisor'
p95060
sS'required'
p95061
I00
sS'group_name'
p95062
S'PETSc'
p95063
sa(dp95064
S'description'
p95065
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95066
sS'cpp_type'
p95067
S'double'
p95068
sS'default'
p95069
g3
sS'name'
p95070
S'nonlinear_residual_end_time'
p95071
sS'required'
p95072
I00
sS'group_name'
p95073
S'PETSc'
p95074
sa(dp95075
S'description'
p95076
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95077
sS'cpp_type'
p95078
S'double'
p95079
sS'default'
p95080
g3
sS'name'
p95081
S'nonlinear_residual_start_time'
p95082
sS'required'
p95083
I00
sS'group_name'
p95084
S'PETSc'
p95085
sa(dp95086
S'description'
p95087
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95088
sS'cpp_type'
p95089
S'bool'
p95090
sS'default'
p95091
S'0'
p95092
sS'name'
p95093
S'nonlinear_residuals'
p95094
sS'required'
p95095
I00
sS'group_name'
p95096
S'PETSc'
p95097
sa(dp95098
S'description'
p95099
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p95100
sS'cpp_type'
p95101
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95102
sS'default'
p95103
g3
sS'name'
p95104
S'output_if_base_contains'
p95105
sS'required'
p95106
I00
sS'group_name'
p95107
S'Advanced'
p95108
sa(dp95109
S'description'
p95110
S'Specifies whether output occurs on each linear residual evaluation\n'
p95111
sS'cpp_type'
p95112
S'bool'
p95113
sS'default'
p95114
S'0'
p95115
sS'name'
p95116
S'output_linear'
p95117
sS'required'
p95118
I00
sS'group_name'
p95119
Nsa(dp95120
S'description'
p95121
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95122
sS'cpp_type'
p95123
S'bool'
p95124
sS'default'
p95125
S'0'
p95126
sS'name'
p95127
S'output_nonlinear'
p95128
sS'required'
p95129
I00
sS'group_name'
p95130
Nsa(dp95131
S'description'
p95132
S'The number of for extension suffix (e.g., out.e-s002)\n'
p95133
sS'cpp_type'
p95134
S'unsigned int'
p95135
sS'default'
p95136
S'4'
p95137
sS'name'
p95138
S'padding'
p95139
sS'required'
p95140
I00
sS'group_name'
p95141
S'Advanced'
p95142
sa(dp95143
S'description'
p95144
S'Time at which this output object begins to operate\n'
p95145
sS'cpp_type'
p95146
S'double'
p95147
sS'default'
p95148
g3
sS'name'
p95149
S'start_time'
p95150
sS'required'
p95151
I00
sS'group_name'
p95152
S'Timing'
p95153
sa(dp95154
S'description'
p95155
S'Only export results at sync times\n'
p95156
sS'cpp_type'
p95157
S'bool'
p95158
sS'default'
p95159
S'0'
p95160
sS'name'
p95161
S'sync_only'
p95162
sS'required'
p95163
I00
sS'group_name'
p95164
S'Timing'
p95165
sa(dp95166
S'description'
p95167
S'Times at which the output and solution is forced to occur\n'
p95168
sS'cpp_type'
p95169
S'std::vector<double, std::allocator<double> >'
p95170
sS'default'
p95171
g3
sS'name'
p95172
S'sync_times'
p95173
sS'required'
p95174
I00
sS'group_name'
p95175
S'Timing'
p95176
sa(dp95177
S'description'
p95178
S'Time tolerance utilized checking start and end times\n'
p95179
sS'cpp_type'
p95180
S'double'
p95181
sS'default'
p95182
S'1e-14'
p95183
sS'name'
p95184
S'time_tolerance'
p95185
sS'required'
p95186
I00
sS'group_name'
p95187
S'Timing'
p95188
sa(dp95189
S'description'
p95190
g3
sS'cpp_type'
p95191
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95192
sS'default'
p95193
S'SolutionHistory'
p95194
sS'name'
p95195
S'type'
p95196
sS'required'
p95197
I00
sS'group_name'
p95198
Nsa(dp95199
S'description'
p95200
S'Enable/disable the use of the displaced mesh for outputting\n'
p95201
sS'cpp_type'
p95202
S'bool'
p95203
sS'default'
p95204
S'0'
p95205
sS'name'
p95206
S'use_displaced'
p95207
sS'required'
p95208
I00
sS'group_name'
p95209
NsasS'name'
p95210
S'/Outputs/SolutionHistory'
p95211
sa(dp95212
S'description'
p95213
S'Object for outputting data in the Tecplot format\n'
p95214
sS'subblocks'
p95215
NsS'parameters'
p95216
(lp95217
(dp95218
S'name'
p95219
S'additional_execute_on'
p95220
sS'cpp_type'
p95221
S'MultiMooseEnum'
p95222
sS'default'
p95223
g3
sS'description'
p95224
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95225
sS'required'
p95226
I00
sS'options'
p95227
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95228
sS'group_name'
p95229
Nsa(dp95230
S'description'
p95231
S'When true the date and time are appended to the output filename.\n'
p95232
sS'cpp_type'
p95233
S'bool'
p95234
sS'default'
p95235
S'0'
p95236
sS'name'
p95237
S'append_date'
p95238
sS'required'
p95239
I00
sS'group_name'
p95240
Nsa(dp95241
S'description'
p95242
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p95243
sS'cpp_type'
p95244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95245
sS'default'
p95246
g3
sS'name'
p95247
S'append_date_format'
p95248
sS'required'
p95249
I00
sS'group_name'
p95250
Nsa(dp95251
S'description'
p95252
S"Append '_oversample' to the output file base\n"
p95253
sS'cpp_type'
p95254
S'bool'
p95255
sS'default'
p95256
S'0'
p95257
sS'name'
p95258
S'append_oversample'
p95259
sS'required'
p95260
I00
sS'group_name'
p95261
Nsa(dp95262
S'description'
p95263
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p95264
sS'cpp_type'
p95265
S'bool'
p95266
sS'default'
p95267
S'0'
p95268
sS'name'
p95269
S'ascii_append'
p95270
sS'required'
p95271
I00
sS'group_name'
p95272
Nsa(dp95273
S'description'
p95274
S'Set Tecplot files to output in binary format\n'
p95275
sS'cpp_type'
p95276
S'bool'
p95277
sS'default'
p95278
S'0'
p95279
sS'name'
p95280
S'binary'
p95281
sS'required'
p95282
I00
sS'group_name'
p95283
S'Advanced'
p95284
sa(dp95285
S'description'
p95286
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95287
sS'cpp_type'
p95288
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95289
sS'default'
p95290
g3
sS'name'
p95291
S'control_tags'
p95292
sS'required'
p95293
I00
sS'group_name'
p95294
S'Advanced'
p95295
sa(dp95296
S'description'
p95297
S'Set the enabled status of the MooseObject.\n'
p95298
sS'cpp_type'
p95299
S'bool'
p95300
sS'default'
p95301
S'1'
p95302
sS'name'
p95303
S'enable'
p95304
sS'required'
p95305
I00
sS'group_name'
p95306
S'Advanced'
p95307
sa(dp95308
S'description'
p95309
S'Time at which this output object stop operating\n'
p95310
sS'cpp_type'
p95311
S'double'
p95312
sS'default'
p95313
g3
sS'name'
p95314
S'end_time'
p95315
sS'required'
p95316
I00
sS'group_name'
p95317
S'Timing'
p95318
sa(dp95319
S'name'
p95320
S'execute_on'
p95321
sS'cpp_type'
p95322
S'MultiMooseEnum'
p95323
sS'default'
p95324
S'INITIAL TIMESTEP_END'
p95325
sS'description'
p95326
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95327
sS'required'
p95328
I00
sS'options'
p95329
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95330
sS'group_name'
p95331
Nsa(dp95332
S'description'
p95333
S'The name of the mesh file to read, for oversampling\n'
p95334
sS'cpp_type'
p95335
S'MeshFileName'
p95336
sS'default'
p95337
g3
sS'name'
p95338
S'file'
p95339
sS'required'
p95340
I00
sS'group_name'
p95341
S'Oversampling'
p95342
sa(dp95343
S'description'
p95344
S'The desired solution output name without an extension\n'
p95345
sS'cpp_type'
p95346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95347
sS'default'
p95348
g3
sS'name'
p95349
S'file_base'
p95350
sS'required'
p95351
I00
sS'group_name'
p95352
Nsa(dp95353
S'description'
p95354
S'The interval at which time steps are output to the solution file\n'
p95355
sS'cpp_type'
p95356
S'unsigned int'
p95357
sS'default'
p95358
S'1'
p95359
sS'name'
p95360
S'interval'
p95361
sS'required'
p95362
I00
sS'group_name'
p95363
S'Timing'
p95364
sa(dp95365
S'description'
p95366
S'Number of divisions applied to time step when outputting linear residuals\n'
p95367
sS'cpp_type'
p95368
S'double'
p95369
sS'default'
p95370
S'1000'
p95371
sS'name'
p95372
S'linear_residual_dt_divisor'
p95373
sS'required'
p95374
I00
sS'group_name'
p95375
S'PETSc'
p95376
sa(dp95377
S'description'
p95378
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95379
sS'cpp_type'
p95380
S'double'
p95381
sS'default'
p95382
g3
sS'name'
p95383
S'linear_residual_end_time'
p95384
sS'required'
p95385
I00
sS'group_name'
p95386
S'PETSc'
p95387
sa(dp95388
S'description'
p95389
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95390
sS'cpp_type'
p95391
S'double'
p95392
sS'default'
p95393
g3
sS'name'
p95394
S'linear_residual_start_time'
p95395
sS'required'
p95396
I00
sS'group_name'
p95397
S'PETSc'
p95398
sa(dp95399
S'description'
p95400
S'Specifies whether output occurs on each linear residual evaluation\n'
p95401
sS'cpp_type'
p95402
S'bool'
p95403
sS'default'
p95404
S'0'
p95405
sS'name'
p95406
S'linear_residuals'
p95407
sS'required'
p95408
I00
sS'group_name'
p95409
S'PETSc'
p95410
sa(dp95411
S'description'
p95412
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95413
sS'cpp_type'
p95414
S'double'
p95415
sS'default'
p95416
S'1000'
p95417
sS'name'
p95418
S'nonlinear_residual_dt_divisor'
p95419
sS'required'
p95420
I00
sS'group_name'
p95421
S'PETSc'
p95422
sa(dp95423
S'description'
p95424
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95425
sS'cpp_type'
p95426
S'double'
p95427
sS'default'
p95428
g3
sS'name'
p95429
S'nonlinear_residual_end_time'
p95430
sS'required'
p95431
I00
sS'group_name'
p95432
S'PETSc'
p95433
sa(dp95434
S'description'
p95435
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95436
sS'cpp_type'
p95437
S'double'
p95438
sS'default'
p95439
g3
sS'name'
p95440
S'nonlinear_residual_start_time'
p95441
sS'required'
p95442
I00
sS'group_name'
p95443
S'PETSc'
p95444
sa(dp95445
S'description'
p95446
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95447
sS'cpp_type'
p95448
S'bool'
p95449
sS'default'
p95450
S'0'
p95451
sS'name'
p95452
S'nonlinear_residuals'
p95453
sS'required'
p95454
I00
sS'group_name'
p95455
S'PETSc'
p95456
sa(dp95457
S'description'
p95458
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p95459
sS'cpp_type'
p95460
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95461
sS'default'
p95462
g3
sS'name'
p95463
S'output_if_base_contains'
p95464
sS'required'
p95465
I00
sS'group_name'
p95466
S'Advanced'
p95467
sa(dp95468
S'description'
p95469
S'Specifies whether output occurs on each linear residual evaluation\n'
p95470
sS'cpp_type'
p95471
S'bool'
p95472
sS'default'
p95473
S'0'
p95474
sS'name'
p95475
S'output_linear'
p95476
sS'required'
p95477
I00
sS'group_name'
p95478
Nsa(dp95479
S'description'
p95480
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95481
sS'cpp_type'
p95482
S'bool'
p95483
sS'default'
p95484
S'0'
p95485
sS'name'
p95486
S'output_nonlinear'
p95487
sS'required'
p95488
I00
sS'group_name'
p95489
Nsa(dp95490
S'description'
p95491
S'Set to true to enable oversampling\n'
p95492
sS'cpp_type'
p95493
S'bool'
p95494
sS'default'
p95495
S'0'
p95496
sS'name'
p95497
S'oversample'
p95498
sS'required'
p95499
I00
sS'group_name'
p95500
Nsa(dp95501
S'description'
p95502
S'The number of for extension suffix (e.g., out.e-s002)\n'
p95503
sS'cpp_type'
p95504
S'unsigned int'
p95505
sS'default'
p95506
S'4'
p95507
sS'name'
p95508
S'padding'
p95509
sS'required'
p95510
I00
sS'group_name'
p95511
S'Advanced'
p95512
sa(dp95513
S'description'
p95514
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p95515
sS'cpp_type'
p95516
S'libMesh::Point'
p95517
sS'default'
p95518
g3
sS'name'
p95519
S'position'
p95520
sS'required'
p95521
I00
sS'group_name'
p95522
S'Oversampling'
p95523
sa(dp95524
S'description'
p95525
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p95526
sS'cpp_type'
p95527
S'unsigned int'
p95528
sS'default'
p95529
S'0'
p95530
sS'name'
p95531
S'refinements'
p95532
sS'required'
p95533
I00
sS'group_name'
p95534
S'Oversampling'
p95535
sa(dp95536
S'description'
p95537
S'Time at which this output object begins to operate\n'
p95538
sS'cpp_type'
p95539
S'double'
p95540
sS'default'
p95541
g3
sS'name'
p95542
S'start_time'
p95543
sS'required'
p95544
I00
sS'group_name'
p95545
S'Timing'
p95546
sa(dp95547
S'description'
p95548
S'Only export results at sync times\n'
p95549
sS'cpp_type'
p95550
S'bool'
p95551
sS'default'
p95552
S'0'
p95553
sS'name'
p95554
S'sync_only'
p95555
sS'required'
p95556
I00
sS'group_name'
p95557
S'Timing'
p95558
sa(dp95559
S'description'
p95560
S'Times at which the output and solution is forced to occur\n'
p95561
sS'cpp_type'
p95562
S'std::vector<double, std::allocator<double> >'
p95563
sS'default'
p95564
g3
sS'name'
p95565
S'sync_times'
p95566
sS'required'
p95567
I00
sS'group_name'
p95568
S'Timing'
p95569
sa(dp95570
S'description'
p95571
S'Time tolerance utilized checking start and end times\n'
p95572
sS'cpp_type'
p95573
S'double'
p95574
sS'default'
p95575
S'1e-14'
p95576
sS'name'
p95577
S'time_tolerance'
p95578
sS'required'
p95579
I00
sS'group_name'
p95580
S'Timing'
p95581
sa(dp95582
S'description'
p95583
g3
sS'cpp_type'
p95584
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95585
sS'default'
p95586
S'Tecplot'
p95587
sS'name'
p95588
S'type'
p95589
sS'required'
p95590
I00
sS'group_name'
p95591
Nsa(dp95592
S'description'
p95593
S'Enable/disable the use of the displaced mesh for outputting\n'
p95594
sS'cpp_type'
p95595
S'bool'
p95596
sS'default'
p95597
S'0'
p95598
sS'name'
p95599
S'use_displaced'
p95600
sS'required'
p95601
I00
sS'group_name'
p95602
NsasS'name'
p95603
S'/Outputs/Tecplot'
p95604
sa(dp95605
S'description'
p95606
g3
sS'subblocks'
p95607
NsS'parameters'
p95608
(lp95609
(dp95610
S'name'
p95611
S'additional_execute_on'
p95612
sS'cpp_type'
p95613
S'MultiMooseEnum'
p95614
sS'default'
p95615
g3
sS'description'
p95616
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95617
sS'required'
p95618
I00
sS'options'
p95619
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95620
sS'group_name'
p95621
Nsa(dp95622
S'description'
p95623
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95624
sS'cpp_type'
p95625
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95626
sS'default'
p95627
g3
sS'name'
p95628
S'control_tags'
p95629
sS'required'
p95630
I00
sS'group_name'
p95631
S'Advanced'
p95632
sa(dp95633
S'description'
p95634
S'Set the enabled status of the MooseObject.\n'
p95635
sS'cpp_type'
p95636
S'bool'
p95637
sS'default'
p95638
S'1'
p95639
sS'name'
p95640
S'enable'
p95641
sS'required'
p95642
I00
sS'group_name'
p95643
S'Advanced'
p95644
sa(dp95645
S'description'
p95646
S'Time at which this output object stop operating\n'
p95647
sS'cpp_type'
p95648
S'double'
p95649
sS'default'
p95650
g3
sS'name'
p95651
S'end_time'
p95652
sS'required'
p95653
I00
sS'group_name'
p95654
S'Timing'
p95655
sa(dp95656
S'name'
p95657
S'execute_on'
p95658
sS'cpp_type'
p95659
S'MultiMooseEnum'
p95660
sS'default'
p95661
S'LINEAR NONLINEAR TIMESTEP_END'
p95662
sS'description'
p95663
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95664
sS'required'
p95665
I00
sS'options'
p95666
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95667
sS'group_name'
p95668
Nsa(dp95669
S'description'
p95670
S'The interval at which time steps are output to the solution file\n'
p95671
sS'cpp_type'
p95672
S'unsigned int'
p95673
sS'default'
p95674
S'1'
p95675
sS'name'
p95676
S'interval'
p95677
sS'required'
p95678
I00
sS'group_name'
p95679
S'Timing'
p95680
sa(dp95681
S'description'
p95682
S'Number of divisions applied to time step when outputting linear residuals\n'
p95683
sS'cpp_type'
p95684
S'double'
p95685
sS'default'
p95686
S'1000'
p95687
sS'name'
p95688
S'linear_residual_dt_divisor'
p95689
sS'required'
p95690
I00
sS'group_name'
p95691
S'PETSc'
p95692
sa(dp95693
S'description'
p95694
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95695
sS'cpp_type'
p95696
S'double'
p95697
sS'default'
p95698
g3
sS'name'
p95699
S'linear_residual_end_time'
p95700
sS'required'
p95701
I00
sS'group_name'
p95702
S'PETSc'
p95703
sa(dp95704
S'description'
p95705
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95706
sS'cpp_type'
p95707
S'double'
p95708
sS'default'
p95709
g3
sS'name'
p95710
S'linear_residual_start_time'
p95711
sS'required'
p95712
I00
sS'group_name'
p95713
S'PETSc'
p95714
sa(dp95715
S'description'
p95716
S'Specifies whether output occurs on each linear residual evaluation\n'
p95717
sS'cpp_type'
p95718
S'bool'
p95719
sS'default'
p95720
S'0'
p95721
sS'name'
p95722
S'linear_residuals'
p95723
sS'required'
p95724
I00
sS'group_name'
p95725
S'PETSc'
p95726
sa(dp95727
S'description'
p95728
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95729
sS'cpp_type'
p95730
S'double'
p95731
sS'default'
p95732
S'1000'
p95733
sS'name'
p95734
S'nonlinear_residual_dt_divisor'
p95735
sS'required'
p95736
I00
sS'group_name'
p95737
S'PETSc'
p95738
sa(dp95739
S'description'
p95740
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95741
sS'cpp_type'
p95742
S'double'
p95743
sS'default'
p95744
g3
sS'name'
p95745
S'nonlinear_residual_end_time'
p95746
sS'required'
p95747
I00
sS'group_name'
p95748
S'PETSc'
p95749
sa(dp95750
S'description'
p95751
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95752
sS'cpp_type'
p95753
S'double'
p95754
sS'default'
p95755
g3
sS'name'
p95756
S'nonlinear_residual_start_time'
p95757
sS'required'
p95758
I00
sS'group_name'
p95759
S'PETSc'
p95760
sa(dp95761
S'description'
p95762
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95763
sS'cpp_type'
p95764
S'bool'
p95765
sS'default'
p95766
S'0'
p95767
sS'name'
p95768
S'nonlinear_residuals'
p95769
sS'required'
p95770
I00
sS'group_name'
p95771
S'PETSc'
p95772
sa(dp95773
S'description'
p95774
S'The number of top residuals to print out (0 = no output)\n'
p95775
sS'cpp_type'
p95776
S'unsigned int'
p95777
sS'default'
p95778
S'0'
p95779
sS'name'
p95780
S'num_residuals'
p95781
sS'required'
p95782
I00
sS'group_name'
p95783
Nsa(dp95784
S'description'
p95785
S'Specifies whether output occurs on each linear residual evaluation\n'
p95786
sS'cpp_type'
p95787
S'bool'
p95788
sS'default'
p95789
S'0'
p95790
sS'name'
p95791
S'output_linear'
p95792
sS'required'
p95793
I00
sS'group_name'
p95794
Nsa(dp95795
S'description'
p95796
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95797
sS'cpp_type'
p95798
S'bool'
p95799
sS'default'
p95800
S'0'
p95801
sS'name'
p95802
S'output_nonlinear'
p95803
sS'required'
p95804
I00
sS'group_name'
p95805
Nsa(dp95806
S'description'
p95807
S'Time at which this output object begins to operate\n'
p95808
sS'cpp_type'
p95809
S'double'
p95810
sS'default'
p95811
g3
sS'name'
p95812
S'start_time'
p95813
sS'required'
p95814
I00
sS'group_name'
p95815
S'Timing'
p95816
sa(dp95817
S'description'
p95818
S'Only export results at sync times\n'
p95819
sS'cpp_type'
p95820
S'bool'
p95821
sS'default'
p95822
S'0'
p95823
sS'name'
p95824
S'sync_only'
p95825
sS'required'
p95826
I00
sS'group_name'
p95827
S'Timing'
p95828
sa(dp95829
S'description'
p95830
S'Times at which the output and solution is forced to occur\n'
p95831
sS'cpp_type'
p95832
S'std::vector<double, std::allocator<double> >'
p95833
sS'default'
p95834
g3
sS'name'
p95835
S'sync_times'
p95836
sS'required'
p95837
I00
sS'group_name'
p95838
S'Timing'
p95839
sa(dp95840
S'description'
p95841
S'Time tolerance utilized checking start and end times\n'
p95842
sS'cpp_type'
p95843
S'double'
p95844
sS'default'
p95845
S'1e-14'
p95846
sS'name'
p95847
S'time_tolerance'
p95848
sS'required'
p95849
I00
sS'group_name'
p95850
S'Timing'
p95851
sa(dp95852
S'description'
p95853
g3
sS'cpp_type'
p95854
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95855
sS'default'
p95856
S'TopResidualDebugOutput'
p95857
sS'name'
p95858
S'type'
p95859
sS'required'
p95860
I00
sS'group_name'
p95861
Nsa(dp95862
S'description'
p95863
S'Enable/disable the use of the displaced mesh for outputting\n'
p95864
sS'cpp_type'
p95865
S'bool'
p95866
sS'default'
p95867
S'0'
p95868
sS'name'
p95869
S'use_displaced'
p95870
sS'required'
p95871
I00
sS'group_name'
p95872
NsasS'name'
p95873
S'/Outputs/TopResidualDebugOutput'
p95874
sa(dp95875
S'description'
p95876
g3
sS'subblocks'
p95877
NsS'parameters'
p95878
(lp95879
(dp95880
S'name'
p95881
S'additional_execute_on'
p95882
sS'cpp_type'
p95883
S'MultiMooseEnum'
p95884
sS'default'
p95885
g3
sS'description'
p95886
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95887
sS'required'
p95888
I00
sS'options'
p95889
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95890
sS'group_name'
p95891
Nsa(dp95892
S'description'
p95893
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95894
sS'cpp_type'
p95895
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95896
sS'default'
p95897
g3
sS'name'
p95898
S'control_tags'
p95899
sS'required'
p95900
I00
sS'group_name'
p95901
S'Advanced'
p95902
sa(dp95903
S'description'
p95904
S'Set the enabled status of the MooseObject.\n'
p95905
sS'cpp_type'
p95906
S'bool'
p95907
sS'default'
p95908
S'1'
p95909
sS'name'
p95910
S'enable'
p95911
sS'required'
p95912
I00
sS'group_name'
p95913
S'Advanced'
p95914
sa(dp95915
S'description'
p95916
S'Time at which this output object stop operating\n'
p95917
sS'cpp_type'
p95918
S'double'
p95919
sS'default'
p95920
g3
sS'name'
p95921
S'end_time'
p95922
sS'required'
p95923
I00
sS'group_name'
p95924
S'Timing'
p95925
sa(dp95926
S'name'
p95927
S'execute_on'
p95928
sS'cpp_type'
p95929
S'MultiMooseEnum'
p95930
sS'default'
p95931
S'NONLINEAR'
p95932
sS'description'
p95933
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95934
sS'required'
p95935
I00
sS'options'
p95936
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95937
sS'group_name'
p95938
Nsa(dp95939
S'description'
p95940
S'The interval at which time steps are output to the solution file\n'
p95941
sS'cpp_type'
p95942
S'unsigned int'
p95943
sS'default'
p95944
S'1'
p95945
sS'name'
p95946
S'interval'
p95947
sS'required'
p95948
I00
sS'group_name'
p95949
S'Timing'
p95950
sa(dp95951
S'description'
p95952
S'Number of divisions applied to time step when outputting linear residuals\n'
p95953
sS'cpp_type'
p95954
S'double'
p95955
sS'default'
p95956
S'1000'
p95957
sS'name'
p95958
S'linear_residual_dt_divisor'
p95959
sS'required'
p95960
I00
sS'group_name'
p95961
S'PETSc'
p95962
sa(dp95963
S'description'
p95964
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95965
sS'cpp_type'
p95966
S'double'
p95967
sS'default'
p95968
g3
sS'name'
p95969
S'linear_residual_end_time'
p95970
sS'required'
p95971
I00
sS'group_name'
p95972
S'PETSc'
p95973
sa(dp95974
S'description'
p95975
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95976
sS'cpp_type'
p95977
S'double'
p95978
sS'default'
p95979
g3
sS'name'
p95980
S'linear_residual_start_time'
p95981
sS'required'
p95982
I00
sS'group_name'
p95983
S'PETSc'
p95984
sa(dp95985
S'description'
p95986
S'Specifies whether output occurs on each linear residual evaluation\n'
p95987
sS'cpp_type'
p95988
S'bool'
p95989
sS'default'
p95990
S'0'
p95991
sS'name'
p95992
S'linear_residuals'
p95993
sS'required'
p95994
I00
sS'group_name'
p95995
S'PETSc'
p95996
sa(dp95997
S'description'
p95998
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95999
sS'cpp_type'
p96000
S'double'
p96001
sS'default'
p96002
S'1000'
p96003
sS'name'
p96004
S'nonlinear_residual_dt_divisor'
p96005
sS'required'
p96006
I00
sS'group_name'
p96007
S'PETSc'
p96008
sa(dp96009
S'description'
p96010
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p96011
sS'cpp_type'
p96012
S'double'
p96013
sS'default'
p96014
g3
sS'name'
p96015
S'nonlinear_residual_end_time'
p96016
sS'required'
p96017
I00
sS'group_name'
p96018
S'PETSc'
p96019
sa(dp96020
S'description'
p96021
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p96022
sS'cpp_type'
p96023
S'double'
p96024
sS'default'
p96025
g3
sS'name'
p96026
S'nonlinear_residual_start_time'
p96027
sS'required'
p96028
I00
sS'group_name'
p96029
S'PETSc'
p96030
sa(dp96031
S'description'
p96032
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96033
sS'cpp_type'
p96034
S'bool'
p96035
sS'default'
p96036
S'0'
p96037
sS'name'
p96038
S'nonlinear_residuals'
p96039
sS'required'
p96040
I00
sS'group_name'
p96041
S'PETSc'
p96042
sa(dp96043
S'description'
p96044
S'Specifies whether output occurs on each linear residual evaluation\n'
p96045
sS'cpp_type'
p96046
S'bool'
p96047
sS'default'
p96048
S'0'
p96049
sS'name'
p96050
S'output_linear'
p96051
sS'required'
p96052
I00
sS'group_name'
p96053
Nsa(dp96054
S'description'
p96055
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96056
sS'cpp_type'
p96057
S'bool'
p96058
sS'default'
p96059
S'0'
p96060
sS'name'
p96061
S'output_nonlinear'
p96062
sS'required'
p96063
I00
sS'group_name'
p96064
Nsa(dp96065
S'description'
p96066
S'Time at which this output object begins to operate\n'
p96067
sS'cpp_type'
p96068
S'double'
p96069
sS'default'
p96070
g3
sS'name'
p96071
S'start_time'
p96072
sS'required'
p96073
I00
sS'group_name'
p96074
S'Timing'
p96075
sa(dp96076
S'description'
p96077
S'Only export results at sync times\n'
p96078
sS'cpp_type'
p96079
S'bool'
p96080
sS'default'
p96081
S'0'
p96082
sS'name'
p96083
S'sync_only'
p96084
sS'required'
p96085
I00
sS'group_name'
p96086
S'Timing'
p96087
sa(dp96088
S'description'
p96089
S'Times at which the output and solution is forced to occur\n'
p96090
sS'cpp_type'
p96091
S'std::vector<double, std::allocator<double> >'
p96092
sS'default'
p96093
g3
sS'name'
p96094
S'sync_times'
p96095
sS'required'
p96096
I00
sS'group_name'
p96097
S'Timing'
p96098
sa(dp96099
S'description'
p96100
S'Time tolerance utilized checking start and end times\n'
p96101
sS'cpp_type'
p96102
S'double'
p96103
sS'default'
p96104
S'1e-14'
p96105
sS'name'
p96106
S'time_tolerance'
p96107
sS'required'
p96108
I00
sS'group_name'
p96109
S'Timing'
p96110
sa(dp96111
S'description'
p96112
g3
sS'cpp_type'
p96113
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96114
sS'default'
p96115
S'VariableResidualNormsDebugOutput'
p96116
sS'name'
p96117
S'type'
p96118
sS'required'
p96119
I00
sS'group_name'
p96120
Nsa(dp96121
S'description'
p96122
S'Enable/disable the use of the displaced mesh for outputting\n'
p96123
sS'cpp_type'
p96124
S'bool'
p96125
sS'default'
p96126
S'0'
p96127
sS'name'
p96128
S'use_displaced'
p96129
sS'required'
p96130
I00
sS'group_name'
p96131
NsasS'name'
p96132
S'/Outputs/VariableResidualNormsDebugOutput'
p96133
sa(dp96134
S'description'
p96135
S'Object for outputting data in the XDA/XDR format\n'
p96136
sS'subblocks'
p96137
NsS'parameters'
p96138
(lp96139
(dp96140
S'name'
p96141
S'additional_execute_on'
p96142
sS'cpp_type'
p96143
S'MultiMooseEnum'
p96144
sS'default'
p96145
g3
sS'description'
p96146
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96147
sS'required'
p96148
I00
sS'options'
p96149
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96150
sS'group_name'
p96151
Nsa(dp96152
S'description'
p96153
S'When true the date and time are appended to the output filename.\n'
p96154
sS'cpp_type'
p96155
S'bool'
p96156
sS'default'
p96157
S'0'
p96158
sS'name'
p96159
S'append_date'
p96160
sS'required'
p96161
I00
sS'group_name'
p96162
Nsa(dp96163
S'description'
p96164
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96165
sS'cpp_type'
p96166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96167
sS'default'
p96168
g3
sS'name'
p96169
S'append_date_format'
p96170
sS'required'
p96171
I00
sS'group_name'
p96172
Nsa(dp96173
S'description'
p96174
S"Append '_oversample' to the output file base\n"
p96175
sS'cpp_type'
p96176
S'bool'
p96177
sS'default'
p96178
S'0'
p96179
sS'name'
p96180
S'append_oversample'
p96181
sS'required'
p96182
I00
sS'group_name'
p96183
Nsa(dp96184
S'description'
p96185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96186
sS'cpp_type'
p96187
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96188
sS'default'
p96189
g3
sS'name'
p96190
S'control_tags'
p96191
sS'required'
p96192
I00
sS'group_name'
p96193
S'Advanced'
p96194
sa(dp96195
S'description'
p96196
S'Set the enabled status of the MooseObject.\n'
p96197
sS'cpp_type'
p96198
S'bool'
p96199
sS'default'
p96200
S'1'
p96201
sS'name'
p96202
S'enable'
p96203
sS'required'
p96204
I00
sS'group_name'
p96205
S'Advanced'
p96206
sa(dp96207
S'description'
p96208
S'Time at which this output object stop operating\n'
p96209
sS'cpp_type'
p96210
S'double'
p96211
sS'default'
p96212
g3
sS'name'
p96213
S'end_time'
p96214
sS'required'
p96215
I00
sS'group_name'
p96216
S'Timing'
p96217
sa(dp96218
S'name'
p96219
S'execute_on'
p96220
sS'cpp_type'
p96221
S'MultiMooseEnum'
p96222
sS'default'
p96223
S'INITIAL TIMESTEP_END'
p96224
sS'description'
p96225
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96226
sS'required'
p96227
I00
sS'options'
p96228
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96229
sS'group_name'
p96230
Nsa(dp96231
S'description'
p96232
S'The name of the mesh file to read, for oversampling\n'
p96233
sS'cpp_type'
p96234
S'MeshFileName'
p96235
sS'default'
p96236
g3
sS'name'
p96237
S'file'
p96238
sS'required'
p96239
I00
sS'group_name'
p96240
S'Oversampling'
p96241
sa(dp96242
S'description'
p96243
S'The desired solution output name without an extension\n'
p96244
sS'cpp_type'
p96245
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96246
sS'default'
p96247
g3
sS'name'
p96248
S'file_base'
p96249
sS'required'
p96250
I00
sS'group_name'
p96251
Nsa(dp96252
S'description'
p96253
S'The interval at which time steps are output to the solution file\n'
p96254
sS'cpp_type'
p96255
S'unsigned int'
p96256
sS'default'
p96257
S'1'
p96258
sS'name'
p96259
S'interval'
p96260
sS'required'
p96261
I00
sS'group_name'
p96262
S'Timing'
p96263
sa(dp96264
S'description'
p96265
S'Number of divisions applied to time step when outputting linear residuals\n'
p96266
sS'cpp_type'
p96267
S'double'
p96268
sS'default'
p96269
S'1000'
p96270
sS'name'
p96271
S'linear_residual_dt_divisor'
p96272
sS'required'
p96273
I00
sS'group_name'
p96274
S'PETSc'
p96275
sa(dp96276
S'description'
p96277
S'Specifies an end time to begin output on each linear residual evaluation\n'
p96278
sS'cpp_type'
p96279
S'double'
p96280
sS'default'
p96281
g3
sS'name'
p96282
S'linear_residual_end_time'
p96283
sS'required'
p96284
I00
sS'group_name'
p96285
S'PETSc'
p96286
sa(dp96287
S'description'
p96288
S'Specifies a start time to begin output on each linear residual evaluation\n'
p96289
sS'cpp_type'
p96290
S'double'
p96291
sS'default'
p96292
g3
sS'name'
p96293
S'linear_residual_start_time'
p96294
sS'required'
p96295
I00
sS'group_name'
p96296
S'PETSc'
p96297
sa(dp96298
S'description'
p96299
S'Specifies whether output occurs on each linear residual evaluation\n'
p96300
sS'cpp_type'
p96301
S'bool'
p96302
sS'default'
p96303
S'0'
p96304
sS'name'
p96305
S'linear_residuals'
p96306
sS'required'
p96307
I00
sS'group_name'
p96308
S'PETSc'
p96309
sa(dp96310
S'description'
p96311
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p96312
sS'cpp_type'
p96313
S'double'
p96314
sS'default'
p96315
S'1000'
p96316
sS'name'
p96317
S'nonlinear_residual_dt_divisor'
p96318
sS'required'
p96319
I00
sS'group_name'
p96320
S'PETSc'
p96321
sa(dp96322
S'description'
p96323
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p96324
sS'cpp_type'
p96325
S'double'
p96326
sS'default'
p96327
g3
sS'name'
p96328
S'nonlinear_residual_end_time'
p96329
sS'required'
p96330
I00
sS'group_name'
p96331
S'PETSc'
p96332
sa(dp96333
S'description'
p96334
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p96335
sS'cpp_type'
p96336
S'double'
p96337
sS'default'
p96338
g3
sS'name'
p96339
S'nonlinear_residual_start_time'
p96340
sS'required'
p96341
I00
sS'group_name'
p96342
S'PETSc'
p96343
sa(dp96344
S'description'
p96345
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96346
sS'cpp_type'
p96347
S'bool'
p96348
sS'default'
p96349
S'0'
p96350
sS'name'
p96351
S'nonlinear_residuals'
p96352
sS'required'
p96353
I00
sS'group_name'
p96354
S'PETSc'
p96355
sa(dp96356
S'description'
p96357
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96358
sS'cpp_type'
p96359
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96360
sS'default'
p96361
g3
sS'name'
p96362
S'output_if_base_contains'
p96363
sS'required'
p96364
I00
sS'group_name'
p96365
S'Advanced'
p96366
sa(dp96367
S'description'
p96368
S'Specifies whether output occurs on each linear residual evaluation\n'
p96369
sS'cpp_type'
p96370
S'bool'
p96371
sS'default'
p96372
S'0'
p96373
sS'name'
p96374
S'output_linear'
p96375
sS'required'
p96376
I00
sS'group_name'
p96377
Nsa(dp96378
S'description'
p96379
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96380
sS'cpp_type'
p96381
S'bool'
p96382
sS'default'
p96383
S'0'
p96384
sS'name'
p96385
S'output_nonlinear'
p96386
sS'required'
p96387
I00
sS'group_name'
p96388
Nsa(dp96389
S'description'
p96390
S'Set to true to enable oversampling\n'
p96391
sS'cpp_type'
p96392
S'bool'
p96393
sS'default'
p96394
S'0'
p96395
sS'name'
p96396
S'oversample'
p96397
sS'required'
p96398
I00
sS'group_name'
p96399
Nsa(dp96400
S'description'
p96401
S'The number of for extension suffix (e.g., out.e-s002)\n'
p96402
sS'cpp_type'
p96403
S'unsigned int'
p96404
sS'default'
p96405
S'4'
p96406
sS'name'
p96407
S'padding'
p96408
sS'required'
p96409
I00
sS'group_name'
p96410
S'Advanced'
p96411
sa(dp96412
S'description'
p96413
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p96414
sS'cpp_type'
p96415
S'libMesh::Point'
p96416
sS'default'
p96417
g3
sS'name'
p96418
S'position'
p96419
sS'required'
p96420
I00
sS'group_name'
p96421
S'Oversampling'
p96422
sa(dp96423
S'description'
p96424
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p96425
sS'cpp_type'
p96426
S'unsigned int'
p96427
sS'default'
p96428
S'0'
p96429
sS'name'
p96430
S'refinements'
p96431
sS'required'
p96432
I00
sS'group_name'
p96433
S'Oversampling'
p96434
sa(dp96435
S'description'
p96436
S'Time at which this output object begins to operate\n'
p96437
sS'cpp_type'
p96438
S'double'
p96439
sS'default'
p96440
g3
sS'name'
p96441
S'start_time'
p96442
sS'required'
p96443
I00
sS'group_name'
p96444
S'Timing'
p96445
sa(dp96446
S'description'
p96447
S'Only export results at sync times\n'
p96448
sS'cpp_type'
p96449
S'bool'
p96450
sS'default'
p96451
S'0'
p96452
sS'name'
p96453
S'sync_only'
p96454
sS'required'
p96455
I00
sS'group_name'
p96456
S'Timing'
p96457
sa(dp96458
S'description'
p96459
S'Times at which the output and solution is forced to occur\n'
p96460
sS'cpp_type'
p96461
S'std::vector<double, std::allocator<double> >'
p96462
sS'default'
p96463
g3
sS'name'
p96464
S'sync_times'
p96465
sS'required'
p96466
I00
sS'group_name'
p96467
S'Timing'
p96468
sa(dp96469
S'description'
p96470
S'Time tolerance utilized checking start and end times\n'
p96471
sS'cpp_type'
p96472
S'double'
p96473
sS'default'
p96474
S'1e-14'
p96475
sS'name'
p96476
S'time_tolerance'
p96477
sS'required'
p96478
I00
sS'group_name'
p96479
S'Timing'
p96480
sa(dp96481
S'description'
p96482
g3
sS'cpp_type'
p96483
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96484
sS'default'
p96485
S'XDA'
p96486
sS'name'
p96487
S'type'
p96488
sS'required'
p96489
I00
sS'group_name'
p96490
Nsa(dp96491
S'description'
p96492
S'Enable/disable the use of the displaced mesh for outputting\n'
p96493
sS'cpp_type'
p96494
S'bool'
p96495
sS'default'
p96496
S'0'
p96497
sS'name'
p96498
S'use_displaced'
p96499
sS'required'
p96500
I00
sS'group_name'
p96501
NsasS'name'
p96502
S'/Outputs/XDA'
p96503
sa(dp96504
S'description'
p96505
S'Object for outputting data in the XDA/XDR format\n'
p96506
sS'subblocks'
p96507
NsS'parameters'
p96508
(lp96509
(dp96510
S'name'
p96511
S'additional_execute_on'
p96512
sS'cpp_type'
p96513
S'MultiMooseEnum'
p96514
sS'default'
p96515
g3
sS'description'
p96516
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96517
sS'required'
p96518
I00
sS'options'
p96519
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96520
sS'group_name'
p96521
Nsa(dp96522
S'description'
p96523
S'When true the date and time are appended to the output filename.\n'
p96524
sS'cpp_type'
p96525
S'bool'
p96526
sS'default'
p96527
S'0'
p96528
sS'name'
p96529
S'append_date'
p96530
sS'required'
p96531
I00
sS'group_name'
p96532
Nsa(dp96533
S'description'
p96534
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96535
sS'cpp_type'
p96536
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96537
sS'default'
p96538
g3
sS'name'
p96539
S'append_date_format'
p96540
sS'required'
p96541
I00
sS'group_name'
p96542
Nsa(dp96543
S'description'
p96544
S"Append '_oversample' to the output file base\n"
p96545
sS'cpp_type'
p96546
S'bool'
p96547
sS'default'
p96548
S'0'
p96549
sS'name'
p96550
S'append_oversample'
p96551
sS'required'
p96552
I00
sS'group_name'
p96553
Nsa(dp96554
S'description'
p96555
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96556
sS'cpp_type'
p96557
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96558
sS'default'
p96559
g3
sS'name'
p96560
S'control_tags'
p96561
sS'required'
p96562
I00
sS'group_name'
p96563
S'Advanced'
p96564
sa(dp96565
S'description'
p96566
S'Set the enabled status of the MooseObject.\n'
p96567
sS'cpp_type'
p96568
S'bool'
p96569
sS'default'
p96570
S'1'
p96571
sS'name'
p96572
S'enable'
p96573
sS'required'
p96574
I00
sS'group_name'
p96575
S'Advanced'
p96576
sa(dp96577
S'description'
p96578
S'Time at which this output object stop operating\n'
p96579
sS'cpp_type'
p96580
S'double'
p96581
sS'default'
p96582
g3
sS'name'
p96583
S'end_time'
p96584
sS'required'
p96585
I00
sS'group_name'
p96586
S'Timing'
p96587
sa(dp96588
S'name'
p96589
S'execute_on'
p96590
sS'cpp_type'
p96591
S'MultiMooseEnum'
p96592
sS'default'
p96593
S'INITIAL TIMESTEP_END'
p96594
sS'description'
p96595
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96596
sS'required'
p96597
I00
sS'options'
p96598
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96599
sS'group_name'
p96600
Nsa(dp96601
S'description'
p96602
S'The name of the mesh file to read, for oversampling\n'
p96603
sS'cpp_type'
p96604
S'MeshFileName'
p96605
sS'default'
p96606
g3
sS'name'
p96607
S'file'
p96608
sS'required'
p96609
I00
sS'group_name'
p96610
S'Oversampling'
p96611
sa(dp96612
S'description'
p96613
S'The desired solution output name without an extension\n'
p96614
sS'cpp_type'
p96615
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96616
sS'default'
p96617
g3
sS'name'
p96618
S'file_base'
p96619
sS'required'
p96620
I00
sS'group_name'
p96621
Nsa(dp96622
S'description'
p96623
S'The interval at which time steps are output to the solution file\n'
p96624
sS'cpp_type'
p96625
S'unsigned int'
p96626
sS'default'
p96627
S'1'
p96628
sS'name'
p96629
S'interval'
p96630
sS'required'
p96631
I00
sS'group_name'
p96632
S'Timing'
p96633
sa(dp96634
S'description'
p96635
S'Number of divisions applied to time step when outputting linear residuals\n'
p96636
sS'cpp_type'
p96637
S'double'
p96638
sS'default'
p96639
S'1000'
p96640
sS'name'
p96641
S'linear_residual_dt_divisor'
p96642
sS'required'
p96643
I00
sS'group_name'
p96644
S'PETSc'
p96645
sa(dp96646
S'description'
p96647
S'Specifies an end time to begin output on each linear residual evaluation\n'
p96648
sS'cpp_type'
p96649
S'double'
p96650
sS'default'
p96651
g3
sS'name'
p96652
S'linear_residual_end_time'
p96653
sS'required'
p96654
I00
sS'group_name'
p96655
S'PETSc'
p96656
sa(dp96657
S'description'
p96658
S'Specifies a start time to begin output on each linear residual evaluation\n'
p96659
sS'cpp_type'
p96660
S'double'
p96661
sS'default'
p96662
g3
sS'name'
p96663
S'linear_residual_start_time'
p96664
sS'required'
p96665
I00
sS'group_name'
p96666
S'PETSc'
p96667
sa(dp96668
S'description'
p96669
S'Specifies whether output occurs on each linear residual evaluation\n'
p96670
sS'cpp_type'
p96671
S'bool'
p96672
sS'default'
p96673
S'0'
p96674
sS'name'
p96675
S'linear_residuals'
p96676
sS'required'
p96677
I00
sS'group_name'
p96678
S'PETSc'
p96679
sa(dp96680
S'description'
p96681
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p96682
sS'cpp_type'
p96683
S'double'
p96684
sS'default'
p96685
S'1000'
p96686
sS'name'
p96687
S'nonlinear_residual_dt_divisor'
p96688
sS'required'
p96689
I00
sS'group_name'
p96690
S'PETSc'
p96691
sa(dp96692
S'description'
p96693
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p96694
sS'cpp_type'
p96695
S'double'
p96696
sS'default'
p96697
g3
sS'name'
p96698
S'nonlinear_residual_end_time'
p96699
sS'required'
p96700
I00
sS'group_name'
p96701
S'PETSc'
p96702
sa(dp96703
S'description'
p96704
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p96705
sS'cpp_type'
p96706
S'double'
p96707
sS'default'
p96708
g3
sS'name'
p96709
S'nonlinear_residual_start_time'
p96710
sS'required'
p96711
I00
sS'group_name'
p96712
S'PETSc'
p96713
sa(dp96714
S'description'
p96715
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96716
sS'cpp_type'
p96717
S'bool'
p96718
sS'default'
p96719
S'0'
p96720
sS'name'
p96721
S'nonlinear_residuals'
p96722
sS'required'
p96723
I00
sS'group_name'
p96724
S'PETSc'
p96725
sa(dp96726
S'description'
p96727
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96728
sS'cpp_type'
p96729
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96730
sS'default'
p96731
g3
sS'name'
p96732
S'output_if_base_contains'
p96733
sS'required'
p96734
I00
sS'group_name'
p96735
S'Advanced'
p96736
sa(dp96737
S'description'
p96738
S'Specifies whether output occurs on each linear residual evaluation\n'
p96739
sS'cpp_type'
p96740
S'bool'
p96741
sS'default'
p96742
S'0'
p96743
sS'name'
p96744
S'output_linear'
p96745
sS'required'
p96746
I00
sS'group_name'
p96747
Nsa(dp96748
S'description'
p96749
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96750
sS'cpp_type'
p96751
S'bool'
p96752
sS'default'
p96753
S'0'
p96754
sS'name'
p96755
S'output_nonlinear'
p96756
sS'required'
p96757
I00
sS'group_name'
p96758
Nsa(dp96759
S'description'
p96760
S'Set to true to enable oversampling\n'
p96761
sS'cpp_type'
p96762
S'bool'
p96763
sS'default'
p96764
S'0'
p96765
sS'name'
p96766
S'oversample'
p96767
sS'required'
p96768
I00
sS'group_name'
p96769
Nsa(dp96770
S'description'
p96771
S'The number of for extension suffix (e.g., out.e-s002)\n'
p96772
sS'cpp_type'
p96773
S'unsigned int'
p96774
sS'default'
p96775
S'4'
p96776
sS'name'
p96777
S'padding'
p96778
sS'required'
p96779
I00
sS'group_name'
p96780
S'Advanced'
p96781
sa(dp96782
S'description'
p96783
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p96784
sS'cpp_type'
p96785
S'libMesh::Point'
p96786
sS'default'
p96787
g3
sS'name'
p96788
S'position'
p96789
sS'required'
p96790
I00
sS'group_name'
p96791
S'Oversampling'
p96792
sa(dp96793
S'description'
p96794
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p96795
sS'cpp_type'
p96796
S'unsigned int'
p96797
sS'default'
p96798
S'0'
p96799
sS'name'
p96800
S'refinements'
p96801
sS'required'
p96802
I00
sS'group_name'
p96803
S'Oversampling'
p96804
sa(dp96805
S'description'
p96806
S'Time at which this output object begins to operate\n'
p96807
sS'cpp_type'
p96808
S'double'
p96809
sS'default'
p96810
g3
sS'name'
p96811
S'start_time'
p96812
sS'required'
p96813
I00
sS'group_name'
p96814
S'Timing'
p96815
sa(dp96816
S'description'
p96817
S'Only export results at sync times\n'
p96818
sS'cpp_type'
p96819
S'bool'
p96820
sS'default'
p96821
S'0'
p96822
sS'name'
p96823
S'sync_only'
p96824
sS'required'
p96825
I00
sS'group_name'
p96826
S'Timing'
p96827
sa(dp96828
S'description'
p96829
S'Times at which the output and solution is forced to occur\n'
p96830
sS'cpp_type'
p96831
S'std::vector<double, std::allocator<double> >'
p96832
sS'default'
p96833
g3
sS'name'
p96834
S'sync_times'
p96835
sS'required'
p96836
I00
sS'group_name'
p96837
S'Timing'
p96838
sa(dp96839
S'description'
p96840
S'Time tolerance utilized checking start and end times\n'
p96841
sS'cpp_type'
p96842
S'double'
p96843
sS'default'
p96844
S'1e-14'
p96845
sS'name'
p96846
S'time_tolerance'
p96847
sS'required'
p96848
I00
sS'group_name'
p96849
S'Timing'
p96850
sa(dp96851
S'description'
p96852
g3
sS'cpp_type'
p96853
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96854
sS'default'
p96855
S'XDR'
p96856
sS'name'
p96857
S'type'
p96858
sS'required'
p96859
I00
sS'group_name'
p96860
Nsa(dp96861
S'description'
p96862
S'Enable/disable the use of the displaced mesh for outputting\n'
p96863
sS'cpp_type'
p96864
S'bool'
p96865
sS'default'
p96866
S'0'
p96867
sS'name'
p96868
S'use_displaced'
p96869
sS'required'
p96870
I00
sS'group_name'
p96871
NsasS'name'
p96872
S'/Outputs/XDR'
p96873
sasS'parameters'
p96874
(lp96875
(dp96876
S'description'
p96877
S'When true the date and time are appended to the output filename.\n'
p96878
sS'cpp_type'
p96879
S'bool'
p96880
sS'default'
p96881
S'0'
p96882
sS'name'
p96883
S'append_date'
p96884
sS'required'
p96885
I00
sS'group_name'
p96886
Nsa(dp96887
S'description'
p96888
S'The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96889
sS'cpp_type'
p96890
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96891
sS'default'
p96892
g3
sS'name'
p96893
S'append_date_format'
p96894
sS'required'
p96895
I00
sS'group_name'
p96896
Nsa(dp96897
S'description'
p96898
S'Create checkpoint files using the default options.\n'
p96899
sS'cpp_type'
p96900
S'bool'
p96901
sS'default'
p96902
S'0'
p96903
sS'name'
p96904
S'checkpoint'
p96905
sS'required'
p96906
I00
sS'group_name'
p96907
Nsa(dp96908
S'description'
p96909
S'Set to false to turn off all coloring in all outputs\n'
p96910
sS'cpp_type'
p96911
S'bool'
p96912
sS'default'
p96913
S'1'
p96914
sS'name'
p96915
S'color'
p96916
sS'required'
p96917
I00
sS'group_name'
p96918
Nsa(dp96919
S'description'
p96920
S'Output the results using the default settings for Console output\n'
p96921
sS'cpp_type'
p96922
S'bool'
p96923
sS'default'
p96924
S'1'
p96925
sS'name'
p96926
S'console'
p96927
sS'required'
p96928
I00
sS'group_name'
p96929
Nsa(dp96930
S'description'
p96931
S'Enable the screen output of Control systems.\n'
p96932
sS'cpp_type'
p96933
S'bool'
p96934
sS'default'
p96935
S'0'
p96936
sS'name'
p96937
S'controls'
p96938
sS'required'
p96939
I00
sS'group_name'
p96940
Nsa(dp96941
S'description'
p96942
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p96943
sS'cpp_type'
p96944
S'bool'
p96945
sS'default'
p96946
S'0'
p96947
sS'name'
p96948
S'csv'
p96949
sS'required'
p96950
I00
sS'group_name'
p96951
Nsa(dp96952
S'description'
p96953
S'Create the dof map .json output file\n'
p96954
sS'cpp_type'
p96955
S'bool'
p96956
sS'default'
p96957
S'0'
p96958
sS'name'
p96959
S'dofmap'
p96960
sS'required'
p96961
I00
sS'group_name'
p96962
Nsa(dp96963
S'name'
p96964
S'execute_on'
p96965
sS'cpp_type'
p96966
S'MultiMooseEnum'
p96967
sS'default'
p96968
S'INITIAL TIMESTEP_END'
p96969
sS'description'
p96970
S"Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: 'initial timestep_end')\n"
p96971
sS'required'
p96972
I00
sS'options'
p96973
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96974
sS'group_name'
p96975
Nsa(dp96976
S'description'
p96977
S'Output the results using the default settings for Exodus output\n'
p96978
sS'cpp_type'
p96979
S'bool'
p96980
sS'default'
p96981
S'0'
p96982
sS'name'
p96983
S'exodus'
p96984
sS'required'
p96985
I00
sS'group_name'
p96986
Nsa(dp96987
S'description'
p96988
S'Common file base name to be utilized with all output objects\n'
p96989
sS'cpp_type'
p96990
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96991
sS'default'
p96992
g3
sS'name'
p96993
S'file_base'
p96994
sS'required'
p96995
I00
sS'group_name'
p96996
Nsa(dp96997
S'description'
p96998
S'Output the results using the default settings for GMV output\n'
p96999
sS'cpp_type'
p97000
S'bool'
p97001
sS'default'
p97002
S'0'
p97003
sS'name'
p97004
S'gmv'
p97005
sS'required'
p97006
I00
sS'group_name'
p97007
Nsa(dp97008
S'description'
p97009
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p97010
sS'cpp_type'
p97011
S'bool'
p97012
sS'default'
p97013
S'0'
p97014
sS'name'
p97015
S'gnuplot'
p97016
sS'required'
p97017
I00
sS'group_name'
p97018
Nsa(dp97019
S'description'
p97020
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p97021
sS'cpp_type'
p97022
S'std::vector<VariableName, std::allocator<VariableName> >'
p97023
sS'default'
p97024
g3
sS'name'
p97025
S'hide'
p97026
sS'required'
p97027
I00
sS'group_name'
p97028
Nsa(dp97029
S'description'
p97030
S'The interval at which timesteps are output to the solution file\n'
p97031
sS'cpp_type'
p97032
S'unsigned int'
p97033
sS'default'
p97034
S'1'
p97035
sS'name'
p97036
S'interval'
p97037
sS'required'
p97038
I00
sS'group_name'
p97039
Nsa(dp97040
S'description'
p97041
S'Output the results using the default settings for Nemesis output\n'
p97042
sS'cpp_type'
p97043
S'bool'
p97044
sS'default'
p97045
S'0'
p97046
sS'name'
p97047
S'nemesis'
p97048
sS'required'
p97049
I00
sS'group_name'
p97050
Nsa(dp97051
S'description'
p97052
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p97053
sS'cpp_type'
p97054
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97055
sS'default'
p97056
g3
sS'name'
p97057
S'output_if_base_contains'
p97058
sS'required'
p97059
I00
sS'group_name'
p97060
Nsa(dp97061
S'description'
p97062
S'Enable printing of linear residuals to the screen (Console)\n'
p97063
sS'cpp_type'
p97064
S'bool'
p97065
sS'default'
p97066
S'1'
p97067
sS'name'
p97068
S'print_linear_residuals'
p97069
sS'required'
p97070
I00
sS'group_name'
p97071
Nsa(dp97072
S'description'
p97073
S'When true, each time the mesh is changed the mesh information is printed\n'
p97074
sS'cpp_type'
p97075
S'bool'
p97076
sS'default'
p97077
S'0'
p97078
sS'name'
p97079
S'print_mesh_changed_info'
p97080
sS'required'
p97081
I00
sS'group_name'
p97082
Nsa(dp97083
S'description'
p97084
S'Enable printing of the performance log to the screen (Console)\n'
p97085
sS'cpp_type'
p97086
S'bool'
p97087
sS'default'
p97088
S'0'
p97089
sS'name'
p97090
S'print_perf_log'
p97091
sS'required'
p97092
I00
sS'group_name'
p97093
Nsa(dp97094
S'description'
p97095
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p97096
sS'cpp_type'
p97097
S'std::vector<VariableName, std::allocator<VariableName> >'
p97098
sS'default'
p97099
g3
sS'name'
p97100
S'show'
p97101
sS'required'
p97102
I00
sS'group_name'
p97103
Nsa(dp97104
S'description'
p97105
S'Print a solution history file (.slh) using the default settings\n'
p97106
sS'cpp_type'
p97107
S'bool'
p97108
sS'default'
p97109
S'0'
p97110
sS'name'
p97111
S'solution_history'
p97112
sS'required'
p97113
I00
sS'group_name'
p97114
Nsa(dp97115
S'description'
p97116
S'Times at which the output and solution is forced to occur\n'
p97117
sS'cpp_type'
p97118
S'std::vector<double, std::allocator<double> >'
p97119
sS'default'
p97120
g3
sS'name'
p97121
S'sync_times'
p97122
sS'required'
p97123
I00
sS'group_name'
p97124
Nsa(dp97125
S'description'
p97126
S'Output the results using the default settings for Tecplot output\n'
p97127
sS'cpp_type'
p97128
S'bool'
p97129
sS'default'
p97130
S'0'
p97131
sS'name'
p97132
S'tecplot'
p97133
sS'required'
p97134
I00
sS'group_name'
p97135
Nsa(dp97136
S'description'
p97137
S'Output the results using the default settings for VTKOutput output\n'
p97138
sS'cpp_type'
p97139
S'bool'
p97140
sS'default'
p97141
S'0'
p97142
sS'name'
p97143
S'vtk'
p97144
sS'required'
p97145
I00
sS'group_name'
p97146
Nsa(dp97147
S'description'
p97148
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p97149
sS'cpp_type'
p97150
S'bool'
p97151
sS'default'
p97152
S'0'
p97153
sS'name'
p97154
S'xda'
p97155
sS'required'
p97156
I00
sS'group_name'
p97157
Nsa(dp97158
S'description'
p97159
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p97160
sS'cpp_type'
p97161
S'bool'
p97162
sS'default'
p97163
S'0'
p97164
sS'name'
p97165
S'xdr'
p97166
sS'required'
p97167
I00
sS'group_name'
p97168
NsasS'name'
p97169
S'/Outputs'
p97170
sa(dp97171
S'description'
p97172
g3
sS'subblocks'
p97173
(lp97174
(dp97175
S'description'
p97176
g3
sS'subblocks'
p97177
NsS'parameters'
p97178
(lp97179
(dp97180
S'description'
p97181
S'A string representing the Moose Object that will be built by this Action\n'
p97182
sS'cpp_type'
p97183
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97184
sS'default'
p97185
g3
sS'name'
p97186
S'type'
p97187
sS'required'
p97188
I01
sS'group_name'
p97189
NsasS'name'
p97190
S'/Postprocessors/*'
p97191
sa(dp97192
S'description'
p97193
g3
sS'subblocks'
p97194
NsS'parameters'
p97195
(lp97196
(dp97197
S'description'
p97198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p97199
sS'cpp_type'
p97200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p97201
sS'default'
p97202
g3
sS'name'
p97203
S'boundary'
p97204
sS'required'
p97205
I01
sS'group_name'
p97206
Nsa(dp97207
S'description'
p97208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97209
sS'cpp_type'
p97210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97211
sS'default'
p97212
g3
sS'name'
p97213
S'control_tags'
p97214
sS'required'
p97215
I00
sS'group_name'
p97216
S'Advanced'
p97217
sa(dp97218
S'description'
p97219
S'Set the enabled status of the MooseObject.\n'
p97220
sS'cpp_type'
p97221
S'bool'
p97222
sS'default'
p97223
S'1'
p97224
sS'name'
p97225
S'enable'
p97226
sS'required'
p97227
I00
sS'group_name'
p97228
S'Advanced'
p97229
sa(dp97230
S'name'
p97231
S'execute_on'
p97232
sS'cpp_type'
p97233
S'MultiMooseEnum'
p97234
sS'default'
p97235
S'TIMESTEP_END'
p97236
sS'description'
p97237
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97238
sS'required'
p97239
I00
sS'options'
p97240
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97241
sS'group_name'
p97242
Nsa(dp97243
S'description'
p97244
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97245
sS'cpp_type'
p97246
S'std::vector<OutputName, std::allocator<OutputName> >'
p97247
sS'default'
p97248
g3
sS'name'
p97249
S'outputs'
p97250
sS'required'
p97251
I00
sS'group_name'
p97252
S'Advanced'
p97253
sa(dp97254
S'description'
p97255
g3
sS'cpp_type'
p97256
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97257
sS'default'
p97258
S'AreaPostprocessor'
p97259
sS'name'
p97260
S'type'
p97261
sS'required'
p97262
I00
sS'group_name'
p97263
Nsa(dp97264
S'description'
p97265
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97266
sS'cpp_type'
p97267
S'bool'
p97268
sS'default'
p97269
S'0'
p97270
sS'name'
p97271
S'use_displaced_mesh'
p97272
sS'required'
p97273
I00
sS'group_name'
p97274
S'Advanced'
p97275
sasS'name'
p97276
S'/Postprocessors/AreaPostprocessor'
p97277
sa(dp97278
S'description'
p97279
g3
sS'subblocks'
p97280
NsS'parameters'
p97281
(lp97282
(dp97283
S'description'
p97284
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97285
sS'cpp_type'
p97286
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97287
sS'default'
p97288
g3
sS'name'
p97289
S'block'
p97290
sS'required'
p97291
I00
sS'group_name'
p97292
Nsa(dp97293
S'description'
p97294
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97295
sS'cpp_type'
p97296
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97297
sS'default'
p97298
g3
sS'name'
p97299
S'control_tags'
p97300
sS'required'
p97301
I00
sS'group_name'
p97302
S'Advanced'
p97303
sa(dp97304
S'description'
p97305
S'Set the enabled status of the MooseObject.\n'
p97306
sS'cpp_type'
p97307
S'bool'
p97308
sS'default'
p97309
S'1'
p97310
sS'name'
p97311
S'enable'
p97312
sS'required'
p97313
I00
sS'group_name'
p97314
S'Advanced'
p97315
sa(dp97316
S'name'
p97317
S'execute_on'
p97318
sS'cpp_type'
p97319
S'MultiMooseEnum'
p97320
sS'default'
p97321
S'TIMESTEP_END'
p97322
sS'description'
p97323
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97324
sS'required'
p97325
I00
sS'options'
p97326
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97327
sS'group_name'
p97328
Nsa(dp97329
S'description'
p97330
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97331
sS'cpp_type'
p97332
S'std::vector<OutputName, std::allocator<OutputName> >'
p97333
sS'default'
p97334
g3
sS'name'
p97335
S'outputs'
p97336
sS'required'
p97337
I00
sS'group_name'
p97338
S'Advanced'
p97339
sa(dp97340
S'description'
p97341
S'The seed for the master random number generator\n'
p97342
sS'cpp_type'
p97343
S'unsigned int'
p97344
sS'default'
p97345
S'0'
p97346
sS'name'
p97347
S'seed'
p97348
sS'required'
p97349
I00
sS'group_name'
p97350
S'Advanced'
p97351
sa(dp97352
S'description'
p97353
g3
sS'cpp_type'
p97354
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97355
sS'default'
p97356
S'AverageElementSize'
p97357
sS'name'
p97358
S'type'
p97359
sS'required'
p97360
I00
sS'group_name'
p97361
Nsa(dp97362
S'description'
p97363
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97364
sS'cpp_type'
p97365
S'bool'
p97366
sS'default'
p97367
S'0'
p97368
sS'name'
p97369
S'use_displaced_mesh'
p97370
sS'required'
p97371
I00
sS'group_name'
p97372
S'Advanced'
p97373
sa(dp97374
S'description'
p97375
S'The name of the variable that this object operates on\n'
p97376
sS'cpp_type'
p97377
S'std::vector<VariableName>'
p97378
sS'default'
p97379
g3
sS'name'
p97380
S'variable'
p97381
sS'required'
p97382
I01
sS'group_name'
p97383
NsasS'name'
p97384
S'/Postprocessors/AverageElementSize'
p97385
sa(dp97386
S'description'
p97387
g3
sS'subblocks'
p97388
NsS'parameters'
p97389
(lp97390
(dp97391
S'description'
p97392
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97393
sS'cpp_type'
p97394
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97395
sS'default'
p97396
g3
sS'name'
p97397
S'block'
p97398
sS'required'
p97399
I00
sS'group_name'
p97400
Nsa(dp97401
S'description'
p97402
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p97403
sS'cpp_type'
p97404
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p97405
sS'default'
p97406
g3
sS'name'
p97407
S'boundary'
p97408
sS'required'
p97409
I00
sS'group_name'
p97410
Nsa(dp97411
S'description'
p97412
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97413
sS'cpp_type'
p97414
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97415
sS'default'
p97416
g3
sS'name'
p97417
S'control_tags'
p97418
sS'required'
p97419
I00
sS'group_name'
p97420
S'Advanced'
p97421
sa(dp97422
S'description'
p97423
S'Set the enabled status of the MooseObject.\n'
p97424
sS'cpp_type'
p97425
S'bool'
p97426
sS'default'
p97427
S'1'
p97428
sS'name'
p97429
S'enable'
p97430
sS'required'
p97431
I00
sS'group_name'
p97432
S'Advanced'
p97433
sa(dp97434
S'name'
p97435
S'execute_on'
p97436
sS'cpp_type'
p97437
S'MultiMooseEnum'
p97438
sS'default'
p97439
S'TIMESTEP_END'
p97440
sS'description'
p97441
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97442
sS'required'
p97443
I00
sS'options'
p97444
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97445
sS'group_name'
p97446
Nsa(dp97447
S'description'
p97448
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97449
sS'cpp_type'
p97450
S'std::vector<OutputName, std::allocator<OutputName> >'
p97451
sS'default'
p97452
g3
sS'name'
p97453
S'outputs'
p97454
sS'required'
p97455
I00
sS'group_name'
p97456
S'Advanced'
p97457
sa(dp97458
S'description'
p97459
S'The seed for the master random number generator\n'
p97460
sS'cpp_type'
p97461
S'unsigned int'
p97462
sS'default'
p97463
S'0'
p97464
sS'name'
p97465
S'seed'
p97466
sS'required'
p97467
I00
sS'group_name'
p97468
S'Advanced'
p97469
sa(dp97470
S'description'
p97471
g3
sS'cpp_type'
p97472
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97473
sS'default'
p97474
S'AverageNodalVariableValue'
p97475
sS'name'
p97476
S'type'
p97477
sS'required'
p97478
I00
sS'group_name'
p97479
Nsa(dp97480
S'description'
p97481
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p97482
sS'cpp_type'
p97483
S'bool'
p97484
sS'default'
p97485
S'0'
p97486
sS'name'
p97487
S'unique_node_execute'
p97488
sS'required'
p97489
I00
sS'group_name'
p97490
Nsa(dp97491
S'description'
p97492
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97493
sS'cpp_type'
p97494
S'bool'
p97495
sS'default'
p97496
S'0'
p97497
sS'name'
p97498
S'use_displaced_mesh'
p97499
sS'required'
p97500
I00
sS'group_name'
p97501
S'Advanced'
p97502
sa(dp97503
S'description'
p97504
S'The name of the variable that this postprocessor operates on\n'
p97505
sS'cpp_type'
p97506
S'std::vector<VariableName>'
p97507
sS'default'
p97508
g3
sS'name'
p97509
S'variable'
p97510
sS'required'
p97511
I01
sS'group_name'
p97512
NsasS'name'
p97513
S'/Postprocessors/AverageNodalVariableValue'
p97514
sa(dp97515
S'description'
p97516
g3
sS'subblocks'
p97517
NsS'parameters'
p97518
(lp97519
(dp97520
S'description'
p97521
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p97522
sS'cpp_type'
p97523
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p97524
sS'default'
p97525
g3
sS'name'
p97526
S'boundary'
p97527
sS'required'
p97528
I01
sS'group_name'
p97529
Nsa(dp97530
S'description'
p97531
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97532
sS'cpp_type'
p97533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97534
sS'default'
p97535
g3
sS'name'
p97536
S'control_tags'
p97537
sS'required'
p97538
I00
sS'group_name'
p97539
S'Advanced'
p97540
sa(dp97541
S'description'
p97542
S'Set the enabled status of the MooseObject.\n'
p97543
sS'cpp_type'
p97544
S'bool'
p97545
sS'default'
p97546
S'1'
p97547
sS'name'
p97548
S'enable'
p97549
sS'required'
p97550
I00
sS'group_name'
p97551
S'Advanced'
p97552
sa(dp97553
S'name'
p97554
S'execute_on'
p97555
sS'cpp_type'
p97556
S'MultiMooseEnum'
p97557
sS'default'
p97558
S'TIMESTEP_END'
p97559
sS'description'
p97560
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97561
sS'required'
p97562
I00
sS'options'
p97563
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97564
sS'group_name'
p97565
Nsa(dp97566
S'description'
p97567
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97568
sS'cpp_type'
p97569
S'std::vector<OutputName, std::allocator<OutputName> >'
p97570
sS'default'
p97571
g3
sS'name'
p97572
S'outputs'
p97573
sS'required'
p97574
I00
sS'group_name'
p97575
S'Advanced'
p97576
sa(dp97577
S'description'
p97578
g3
sS'cpp_type'
p97579
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97580
sS'default'
p97581
S'AxisymmetricCenterlineAverageValue'
p97582
sS'name'
p97583
S'type'
p97584
sS'required'
p97585
I00
sS'group_name'
p97586
Nsa(dp97587
S'description'
p97588
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97589
sS'cpp_type'
p97590
S'bool'
p97591
sS'default'
p97592
S'0'
p97593
sS'name'
p97594
S'use_displaced_mesh'
p97595
sS'required'
p97596
I00
sS'group_name'
p97597
S'Advanced'
p97598
sa(dp97599
S'description'
p97600
S'The name of the variable that this boundary condition applies to\n'
p97601
sS'cpp_type'
p97602
S'std::vector<VariableName>'
p97603
sS'default'
p97604
g3
sS'name'
p97605
S'variable'
p97606
sS'required'
p97607
I01
sS'group_name'
p97608
NsasS'name'
p97609
S'/Postprocessors/AxisymmetricCenterlineAverageValue'
p97610
sa(dp97611
S'description'
p97612
g3
sS'subblocks'
p97613
NsS'parameters'
p97614
(lp97615
(dp97616
S'description'
p97617
S'The CavityPressureUserObject that computes the initial moles\n'
p97618
sS'cpp_type'
p97619
S'UserObjectName'
p97620
sS'default'
p97621
g3
sS'name'
p97622
S'cavity_pressure_uo'
p97623
sS'required'
p97624
I01
sS'group_name'
p97625
Nsa(dp97626
S'description'
p97627
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97628
sS'cpp_type'
p97629
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97630
sS'default'
p97631
g3
sS'name'
p97632
S'control_tags'
p97633
sS'required'
p97634
I00
sS'group_name'
p97635
S'Advanced'
p97636
sa(dp97637
S'description'
p97638
S'Set the enabled status of the MooseObject.\n'
p97639
sS'cpp_type'
p97640
S'bool'
p97641
sS'default'
p97642
S'1'
p97643
sS'name'
p97644
S'enable'
p97645
sS'required'
p97646
I00
sS'group_name'
p97647
S'Advanced'
p97648
sa(dp97649
S'name'
p97650
S'execute_on'
p97651
sS'cpp_type'
p97652
S'MultiMooseEnum'
p97653
sS'default'
p97654
S'TIMESTEP_END'
p97655
sS'description'
p97656
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97657
sS'required'
p97658
I00
sS'options'
p97659
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97660
sS'group_name'
p97661
Nsa(dp97662
S'description'
p97663
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97664
sS'cpp_type'
p97665
S'std::vector<OutputName, std::allocator<OutputName> >'
p97666
sS'default'
p97667
g3
sS'name'
p97668
S'outputs'
p97669
sS'required'
p97670
I00
sS'group_name'
p97671
S'Advanced'
p97672
sa(dp97673
S'description'
p97674
S'The quantity to report\n'
p97675
sS'cpp_type'
p97676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97677
sS'default'
p97678
g3
sS'name'
p97679
S'quantity'
p97680
sS'required'
p97681
I01
sS'group_name'
p97682
Nsa(dp97683
S'description'
p97684
g3
sS'cpp_type'
p97685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97686
sS'default'
p97687
S'CavityPressurePostprocessor'
p97688
sS'name'
p97689
S'type'
p97690
sS'required'
p97691
I00
sS'group_name'
p97692
Nsa(dp97693
S'description'
p97694
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97695
sS'cpp_type'
p97696
S'bool'
p97697
sS'default'
p97698
S'1'
p97699
sS'name'
p97700
S'use_displaced_mesh'
p97701
sS'required'
p97702
I00
sS'group_name'
p97703
S'Advanced'
p97704
sasS'name'
p97705
S'/Postprocessors/CavityPressurePostprocessor'
p97706
sa(dp97707
S'description'
p97708
g3
sS'subblocks'
p97709
NsS'parameters'
p97710
(lp97711
(dp97712
S'description'
p97713
S'Compute magnitude of relative change instead of change\n'
p97714
sS'cpp_type'
p97715
S'bool'
p97716
sS'default'
p97717
S'0'
p97718
sS'name'
p97719
S'compute_relative_change'
p97720
sS'required'
p97721
I00
sS'group_name'
p97722
Nsa(dp97723
S'description'
p97724
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97725
sS'cpp_type'
p97726
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97727
sS'default'
p97728
g3
sS'name'
p97729
S'control_tags'
p97730
sS'required'
p97731
I00
sS'group_name'
p97732
S'Advanced'
p97733
sa(dp97734
S'description'
p97735
S'Set the enabled status of the MooseObject.\n'
p97736
sS'cpp_type'
p97737
S'bool'
p97738
sS'default'
p97739
S'1'
p97740
sS'name'
p97741
S'enable'
p97742
sS'required'
p97743
I00
sS'group_name'
p97744
S'Advanced'
p97745
sa(dp97746
S'name'
p97747
S'execute_on'
p97748
sS'cpp_type'
p97749
S'MultiMooseEnum'
p97750
sS'default'
p97751
S'TIMESTEP_END'
p97752
sS'description'
p97753
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97754
sS'required'
p97755
I00
sS'options'
p97756
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97757
sS'group_name'
p97758
Nsa(dp97759
S'description'
p97760
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97761
sS'cpp_type'
p97762
S'std::vector<OutputName, std::allocator<OutputName> >'
p97763
sS'default'
p97764
g3
sS'name'
p97765
S'outputs'
p97766
sS'required'
p97767
I00
sS'group_name'
p97768
S'Advanced'
p97769
sa(dp97770
S'description'
p97771
S'The name of the postprocessor\n'
p97772
sS'cpp_type'
p97773
S'PostprocessorName'
p97774
sS'default'
p97775
g3
sS'name'
p97776
S'postprocessor'
p97777
sS'required'
p97778
I01
sS'group_name'
p97779
Nsa(dp97780
S'description'
p97781
g3
sS'cpp_type'
p97782
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97783
sS'default'
p97784
S'ChangeOverTimestepPostprocessor'
p97785
sS'name'
p97786
S'type'
p97787
sS'required'
p97788
I00
sS'group_name'
p97789
Nsa(dp97790
S'description'
p97791
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97792
sS'cpp_type'
p97793
S'bool'
p97794
sS'default'
p97795
S'0'
p97796
sS'name'
p97797
S'use_displaced_mesh'
p97798
sS'required'
p97799
I00
sS'group_name'
p97800
S'Advanced'
p97801
sasS'name'
p97802
S'/Postprocessors/ChangeOverTimestepPostprocessor'
p97803
sa(dp97804
S'description'
p97805
g3
sS'subblocks'
p97806
NsS'parameters'
p97807
(lp97808
(dp97809
S'description'
p97810
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97811
sS'cpp_type'
p97812
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97813
sS'default'
p97814
g3
sS'name'
p97815
S'control_tags'
p97816
sS'required'
p97817
I00
sS'group_name'
p97818
S'Advanced'
p97819
sa(dp97820
S'description'
p97821
S'Set the enabled status of the MooseObject.\n'
p97822
sS'cpp_type'
p97823
S'bool'
p97824
sS'default'
p97825
S'1'
p97826
sS'name'
p97827
S'enable'
p97828
sS'required'
p97829
I00
sS'group_name'
p97830
S'Advanced'
p97831
sa(dp97832
S'name'
p97833
S'execute_on'
p97834
sS'cpp_type'
p97835
S'MultiMooseEnum'
p97836
sS'default'
p97837
S'TIMESTEP_END'
p97838
sS'description'
p97839
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97840
sS'required'
p97841
I00
sS'options'
p97842
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97843
sS'group_name'
p97844
Nsa(dp97845
S'description'
p97846
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97847
sS'cpp_type'
p97848
S'std::vector<OutputName, std::allocator<OutputName> >'
p97849
sS'default'
p97850
g3
sS'name'
p97851
S'outputs'
p97852
sS'required'
p97853
I00
sS'group_name'
p97854
S'Advanced'
p97855
sa(dp97856
S'description'
p97857
S'The name of the postprocessor\n'
p97858
sS'cpp_type'
p97859
S'PostprocessorName'
p97860
sS'default'
p97861
g3
sS'name'
p97862
S'postprocessor'
p97863
sS'required'
p97864
I01
sS'group_name'
p97865
Nsa(dp97866
S'description'
p97867
g3
sS'cpp_type'
p97868
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97869
sS'default'
p97870
S'CumulativeValuePostprocessor'
p97871
sS'name'
p97872
S'type'
p97873
sS'required'
p97874
I00
sS'group_name'
p97875
Nsa(dp97876
S'description'
p97877
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97878
sS'cpp_type'
p97879
S'bool'
p97880
sS'default'
p97881
S'0'
p97882
sS'name'
p97883
S'use_displaced_mesh'
p97884
sS'required'
p97885
I00
sS'group_name'
p97886
S'Advanced'
p97887
sasS'name'
p97888
S'/Postprocessors/CumulativeValuePostprocessor'
p97889
sa(dp97890
S'description'
p97891
g3
sS'subblocks'
p97892
NsS'parameters'
p97893
(lp97894
(dp97895
S'description'
p97896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97897
sS'cpp_type'
p97898
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97899
sS'default'
p97900
g3
sS'name'
p97901
S'control_tags'
p97902
sS'required'
p97903
I00
sS'group_name'
p97904
S'Advanced'
p97905
sa(dp97906
S'description'
p97907
S'Set the enabled status of the MooseObject.\n'
p97908
sS'cpp_type'
p97909
S'bool'
p97910
sS'default'
p97911
S'1'
p97912
sS'name'
p97913
S'enable'
p97914
sS'required'
p97915
I00
sS'group_name'
p97916
S'Advanced'
p97917
sa(dp97918
S'name'
p97919
S'execute_on'
p97920
sS'cpp_type'
p97921
S'MultiMooseEnum'
p97922
sS'default'
p97923
S'TIMESTEP_END'
p97924
sS'description'
p97925
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97926
sS'required'
p97927
I00
sS'options'
p97928
S'none initial linear nonlinear timestep_end timestep_begin custom'
p97929
sS'group_name'
p97930
Nsa(dp97931
S'description'
p97932
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97933
sS'cpp_type'
p97934
S'std::vector<OutputName, std::allocator<OutputName> >'
p97935
sS'default'
p97936
g3
sS'name'
p97937
S'outputs'
p97938
sS'required'
p97939
I00
sS'group_name'
p97940
S'Advanced'
p97941
sa(dp97942
S'description'
p97943
g3
sS'cpp_type'
p97944
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97945
sS'default'
p97946
S'DifferencePostprocessor'
p97947
sS'name'
p97948
S'type'
p97949
sS'required'
p97950
I00
sS'group_name'
p97951
Nsa(dp97952
S'description'
p97953
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97954
sS'cpp_type'
p97955
S'bool'
p97956
sS'default'
p97957
S'0'
p97958
sS'name'
p97959
S'use_displaced_mesh'
p97960
sS'required'
p97961
I00
sS'group_name'
p97962
S'Advanced'
p97963
sa(dp97964
S'description'
p97965
S'First value\n'
p97966
sS'cpp_type'
p97967
S'PostprocessorName'
p97968
sS'default'
p97969
g3
sS'name'
p97970
S'value1'
p97971
sS'required'
p97972
I01
sS'group_name'
p97973
Nsa(dp97974
S'description'
p97975
S'Second value\n'
p97976
sS'cpp_type'
p97977
S'PostprocessorName'
p97978
sS'default'
p97979
g3
sS'name'
p97980
S'value2'
p97981
sS'required'
p97982
I01
sS'group_name'
p97983
NsasS'name'
p97984
S'/Postprocessors/DifferencePostprocessor'
p97985
sa(dp97986
S'description'
p97987
g3
sS'subblocks'
p97988
NsS'parameters'
p97989
(lp97990
(dp97991
S'description'
p97992
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97993
sS'cpp_type'
p97994
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97995
sS'default'
p97996
g3
sS'name'
p97997
S'block'
p97998
sS'required'
p97999
I00
sS'group_name'
p98000
Nsa(dp98001
S'description'
p98002
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98003
sS'cpp_type'
p98004
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98005
sS'default'
p98006
g3
sS'name'
p98007
S'control_tags'
p98008
sS'required'
p98009
I00
sS'group_name'
p98010
S'Advanced'
p98011
sa(dp98012
S'description'
p98013
S'Set the enabled status of the MooseObject.\n'
p98014
sS'cpp_type'
p98015
S'bool'
p98016
sS'default'
p98017
S'1'
p98018
sS'name'
p98019
S'enable'
p98020
sS'required'
p98021
I00
sS'group_name'
p98022
S'Advanced'
p98023
sa(dp98024
S'name'
p98025
S'execute_on'
p98026
sS'cpp_type'
p98027
S'MultiMooseEnum'
p98028
sS'default'
p98029
S'TIMESTEP_END'
p98030
sS'description'
p98031
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98032
sS'required'
p98033
I00
sS'options'
p98034
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98035
sS'group_name'
p98036
Nsa(dp98037
S'description'
p98038
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98039
sS'cpp_type'
p98040
S'std::vector<OutputName, std::allocator<OutputName> >'
p98041
sS'default'
p98042
g3
sS'name'
p98043
S'outputs'
p98044
sS'required'
p98045
I00
sS'group_name'
p98046
S'Advanced'
p98047
sa(dp98048
S'description'
p98049
S'The seed for the master random number generator\n'
p98050
sS'cpp_type'
p98051
S'unsigned int'
p98052
sS'default'
p98053
S'0'
p98054
sS'name'
p98055
S'seed'
p98056
sS'required'
p98057
I00
sS'group_name'
p98058
S'Advanced'
p98059
sa(dp98060
S'description'
p98061
g3
sS'cpp_type'
p98062
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98063
sS'default'
p98064
S'ElementAverageTimeDerivative'
p98065
sS'name'
p98066
S'type'
p98067
sS'required'
p98068
I00
sS'group_name'
p98069
Nsa(dp98070
S'description'
p98071
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98072
sS'cpp_type'
p98073
S'bool'
p98074
sS'default'
p98075
S'0'
p98076
sS'name'
p98077
S'use_displaced_mesh'
p98078
sS'required'
p98079
I00
sS'group_name'
p98080
S'Advanced'
p98081
sa(dp98082
S'description'
p98083
S'The name of the variable that this object operates on\n'
p98084
sS'cpp_type'
p98085
S'std::vector<VariableName>'
p98086
sS'default'
p98087
g3
sS'name'
p98088
S'variable'
p98089
sS'required'
p98090
I01
sS'group_name'
p98091
NsasS'name'
p98092
S'/Postprocessors/ElementAverageTimeDerivative'
p98093
sa(dp98094
S'description'
p98095
g3
sS'subblocks'
p98096
NsS'parameters'
p98097
(lp98098
(dp98099
S'description'
p98100
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98101
sS'cpp_type'
p98102
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98103
sS'default'
p98104
g3
sS'name'
p98105
S'block'
p98106
sS'required'
p98107
I00
sS'group_name'
p98108
Nsa(dp98109
S'description'
p98110
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98111
sS'cpp_type'
p98112
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98113
sS'default'
p98114
g3
sS'name'
p98115
S'control_tags'
p98116
sS'required'
p98117
I00
sS'group_name'
p98118
S'Advanced'
p98119
sa(dp98120
S'description'
p98121
S'Set the enabled status of the MooseObject.\n'
p98122
sS'cpp_type'
p98123
S'bool'
p98124
sS'default'
p98125
S'1'
p98126
sS'name'
p98127
S'enable'
p98128
sS'required'
p98129
I00
sS'group_name'
p98130
S'Advanced'
p98131
sa(dp98132
S'name'
p98133
S'execute_on'
p98134
sS'cpp_type'
p98135
S'MultiMooseEnum'
p98136
sS'default'
p98137
S'TIMESTEP_END'
p98138
sS'description'
p98139
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98140
sS'required'
p98141
I00
sS'options'
p98142
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98143
sS'group_name'
p98144
Nsa(dp98145
S'description'
p98146
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98147
sS'cpp_type'
p98148
S'std::vector<OutputName, std::allocator<OutputName> >'
p98149
sS'default'
p98150
g3
sS'name'
p98151
S'outputs'
p98152
sS'required'
p98153
I00
sS'group_name'
p98154
S'Advanced'
p98155
sa(dp98156
S'description'
p98157
S'The seed for the master random number generator\n'
p98158
sS'cpp_type'
p98159
S'unsigned int'
p98160
sS'default'
p98161
S'0'
p98162
sS'name'
p98163
S'seed'
p98164
sS'required'
p98165
I00
sS'group_name'
p98166
S'Advanced'
p98167
sa(dp98168
S'description'
p98169
g3
sS'cpp_type'
p98170
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98171
sS'default'
p98172
S'ElementAverageValue'
p98173
sS'name'
p98174
S'type'
p98175
sS'required'
p98176
I00
sS'group_name'
p98177
Nsa(dp98178
S'description'
p98179
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98180
sS'cpp_type'
p98181
S'bool'
p98182
sS'default'
p98183
S'0'
p98184
sS'name'
p98185
S'use_displaced_mesh'
p98186
sS'required'
p98187
I00
sS'group_name'
p98188
S'Advanced'
p98189
sa(dp98190
S'description'
p98191
S'The name of the variable that this object operates on\n'
p98192
sS'cpp_type'
p98193
S'std::vector<VariableName>'
p98194
sS'default'
p98195
g3
sS'name'
p98196
S'variable'
p98197
sS'required'
p98198
I01
sS'group_name'
p98199
NsasS'name'
p98200
S'/Postprocessors/ElementAverageValue'
p98201
sa(dp98202
S'description'
p98203
g3
sS'subblocks'
p98204
NsS'parameters'
p98205
(lp98206
(dp98207
S'description'
p98208
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98209
sS'cpp_type'
p98210
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98211
sS'default'
p98212
g3
sS'name'
p98213
S'block'
p98214
sS'required'
p98215
I00
sS'group_name'
p98216
Nsa(dp98217
S'description'
p98218
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98219
sS'cpp_type'
p98220
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98221
sS'default'
p98222
g3
sS'name'
p98223
S'control_tags'
p98224
sS'required'
p98225
I00
sS'group_name'
p98226
S'Advanced'
p98227
sa(dp98228
S'description'
p98229
S'Set the enabled status of the MooseObject.\n'
p98230
sS'cpp_type'
p98231
S'bool'
p98232
sS'default'
p98233
S'1'
p98234
sS'name'
p98235
S'enable'
p98236
sS'required'
p98237
I00
sS'group_name'
p98238
S'Advanced'
p98239
sa(dp98240
S'name'
p98241
S'execute_on'
p98242
sS'cpp_type'
p98243
S'MultiMooseEnum'
p98244
sS'default'
p98245
S'TIMESTEP_END'
p98246
sS'description'
p98247
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98248
sS'required'
p98249
I00
sS'options'
p98250
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98251
sS'group_name'
p98252
Nsa(dp98253
S'description'
p98254
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98255
sS'cpp_type'
p98256
S'std::vector<OutputName, std::allocator<OutputName> >'
p98257
sS'default'
p98258
g3
sS'name'
p98259
S'outputs'
p98260
sS'required'
p98261
I00
sS'group_name'
p98262
S'Advanced'
p98263
sa(dp98264
S'description'
p98265
S'The seed for the master random number generator\n'
p98266
sS'cpp_type'
p98267
S'unsigned int'
p98268
sS'default'
p98269
S'0'
p98270
sS'name'
p98271
S'seed'
p98272
sS'required'
p98273
I00
sS'group_name'
p98274
S'Advanced'
p98275
sa(dp98276
S'description'
p98277
g3
sS'cpp_type'
p98278
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98279
sS'default'
p98280
S'ElementExtremeValue'
p98281
sS'name'
p98282
S'type'
p98283
sS'required'
p98284
I00
sS'group_name'
p98285
Nsa(dp98286
S'description'
p98287
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98288
sS'cpp_type'
p98289
S'bool'
p98290
sS'default'
p98291
S'0'
p98292
sS'name'
p98293
S'use_displaced_mesh'
p98294
sS'required'
p98295
I00
sS'group_name'
p98296
S'Advanced'
p98297
sa(dp98298
S'name'
p98299
S'value_type'
p98300
sS'cpp_type'
p98301
S'MooseEnum'
p98302
sS'default'
p98303
S'max'
p98304
sS'description'
p98305
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p98306
sS'required'
p98307
I00
sS'options'
p98308
S'max min'
p98309
sS'group_name'
p98310
Nsa(dp98311
S'description'
p98312
S'The name of the variable that this postprocessor operates on\n'
p98313
sS'cpp_type'
p98314
S'std::vector<VariableName>'
p98315
sS'default'
p98316
g3
sS'name'
p98317
S'variable'
p98318
sS'required'
p98319
I01
sS'group_name'
p98320
NsasS'name'
p98321
S'/Postprocessors/ElementExtremeValue'
p98322
sa(dp98323
S'description'
p98324
g3
sS'subblocks'
p98325
NsS'parameters'
p98326
(lp98327
(dp98328
S'description'
p98329
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98330
sS'cpp_type'
p98331
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98332
sS'default'
p98333
g3
sS'name'
p98334
S'block'
p98335
sS'required'
p98336
I00
sS'group_name'
p98337
Nsa(dp98338
S'description'
p98339
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98340
sS'cpp_type'
p98341
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98342
sS'default'
p98343
g3
sS'name'
p98344
S'control_tags'
p98345
sS'required'
p98346
I00
sS'group_name'
p98347
S'Advanced'
p98348
sa(dp98349
S'description'
p98350
S'Set the enabled status of the MooseObject.\n'
p98351
sS'cpp_type'
p98352
S'bool'
p98353
sS'default'
p98354
S'1'
p98355
sS'name'
p98356
S'enable'
p98357
sS'required'
p98358
I00
sS'group_name'
p98359
S'Advanced'
p98360
sa(dp98361
S'name'
p98362
S'execute_on'
p98363
sS'cpp_type'
p98364
S'MultiMooseEnum'
p98365
sS'default'
p98366
S'TIMESTEP_END'
p98367
sS'description'
p98368
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98369
sS'required'
p98370
I00
sS'options'
p98371
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98372
sS'group_name'
p98373
Nsa(dp98374
S'description'
p98375
S'The analytic solution to compare against\n'
p98376
sS'cpp_type'
p98377
S'FunctionName'
p98378
sS'default'
p98379
g3
sS'name'
p98380
S'function'
p98381
sS'required'
p98382
I01
sS'group_name'
p98383
Nsa(dp98384
S'description'
p98385
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98386
sS'cpp_type'
p98387
S'std::vector<OutputName, std::allocator<OutputName> >'
p98388
sS'default'
p98389
g3
sS'name'
p98390
S'outputs'
p98391
sS'required'
p98392
I00
sS'group_name'
p98393
S'Advanced'
p98394
sa(dp98395
S'description'
p98396
S'The exponent used in the norm.\n'
p98397
sS'cpp_type'
p98398
S'double'
p98399
sS'default'
p98400
S'2'
p98401
sS'name'
p98402
S'p'
p98403
sS'required'
p98404
I00
sS'group_name'
p98405
Nsa(dp98406
S'description'
p98407
S'The seed for the master random number generator\n'
p98408
sS'cpp_type'
p98409
S'unsigned int'
p98410
sS'default'
p98411
S'0'
p98412
sS'name'
p98413
S'seed'
p98414
sS'required'
p98415
I00
sS'group_name'
p98416
S'Advanced'
p98417
sa(dp98418
S'description'
p98419
g3
sS'cpp_type'
p98420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98421
sS'default'
p98422
S'ElementH1Error'
p98423
sS'name'
p98424
S'type'
p98425
sS'required'
p98426
I00
sS'group_name'
p98427
Nsa(dp98428
S'description'
p98429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98430
sS'cpp_type'
p98431
S'bool'
p98432
sS'default'
p98433
S'0'
p98434
sS'name'
p98435
S'use_displaced_mesh'
p98436
sS'required'
p98437
I00
sS'group_name'
p98438
S'Advanced'
p98439
sa(dp98440
S'description'
p98441
S'The name of the variable that this object operates on\n'
p98442
sS'cpp_type'
p98443
S'std::vector<VariableName>'
p98444
sS'default'
p98445
g3
sS'name'
p98446
S'variable'
p98447
sS'required'
p98448
I01
sS'group_name'
p98449
NsasS'name'
p98450
S'/Postprocessors/ElementH1Error'
p98451
sa(dp98452
S'description'
p98453
g3
sS'subblocks'
p98454
NsS'parameters'
p98455
(lp98456
(dp98457
S'description'
p98458
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98459
sS'cpp_type'
p98460
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98461
sS'default'
p98462
g3
sS'name'
p98463
S'block'
p98464
sS'required'
p98465
I00
sS'group_name'
p98466
Nsa(dp98467
S'description'
p98468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98469
sS'cpp_type'
p98470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98471
sS'default'
p98472
g3
sS'name'
p98473
S'control_tags'
p98474
sS'required'
p98475
I00
sS'group_name'
p98476
S'Advanced'
p98477
sa(dp98478
S'description'
p98479
S'Set the enabled status of the MooseObject.\n'
p98480
sS'cpp_type'
p98481
S'bool'
p98482
sS'default'
p98483
S'1'
p98484
sS'name'
p98485
S'enable'
p98486
sS'required'
p98487
I00
sS'group_name'
p98488
S'Advanced'
p98489
sa(dp98490
S'name'
p98491
S'execute_on'
p98492
sS'cpp_type'
p98493
S'MultiMooseEnum'
p98494
sS'default'
p98495
S'TIMESTEP_END'
p98496
sS'description'
p98497
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98498
sS'required'
p98499
I00
sS'options'
p98500
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98501
sS'group_name'
p98502
Nsa(dp98503
S'description'
p98504
S'The analytic solution to compare against\n'
p98505
sS'cpp_type'
p98506
S'FunctionName'
p98507
sS'default'
p98508
g3
sS'name'
p98509
S'function'
p98510
sS'required'
p98511
I01
sS'group_name'
p98512
Nsa(dp98513
S'description'
p98514
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98515
sS'cpp_type'
p98516
S'std::vector<OutputName, std::allocator<OutputName> >'
p98517
sS'default'
p98518
g3
sS'name'
p98519
S'outputs'
p98520
sS'required'
p98521
I00
sS'group_name'
p98522
S'Advanced'
p98523
sa(dp98524
S'description'
p98525
S'The seed for the master random number generator\n'
p98526
sS'cpp_type'
p98527
S'unsigned int'
p98528
sS'default'
p98529
S'0'
p98530
sS'name'
p98531
S'seed'
p98532
sS'required'
p98533
I00
sS'group_name'
p98534
S'Advanced'
p98535
sa(dp98536
S'description'
p98537
g3
sS'cpp_type'
p98538
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98539
sS'default'
p98540
S'ElementH1SemiError'
p98541
sS'name'
p98542
S'type'
p98543
sS'required'
p98544
I00
sS'group_name'
p98545
Nsa(dp98546
S'description'
p98547
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98548
sS'cpp_type'
p98549
S'bool'
p98550
sS'default'
p98551
S'0'
p98552
sS'name'
p98553
S'use_displaced_mesh'
p98554
sS'required'
p98555
I00
sS'group_name'
p98556
S'Advanced'
p98557
sa(dp98558
S'description'
p98559
S'The name of the variable that this object operates on\n'
p98560
sS'cpp_type'
p98561
S'std::vector<VariableName>'
p98562
sS'default'
p98563
g3
sS'name'
p98564
S'variable'
p98565
sS'required'
p98566
I01
sS'group_name'
p98567
NsasS'name'
p98568
S'/Postprocessors/ElementH1SemiError'
p98569
sa(dp98570
S'description'
p98571
g3
sS'subblocks'
p98572
NsS'parameters'
p98573
(lp98574
(dp98575
S'description'
p98576
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98577
sS'cpp_type'
p98578
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98579
sS'default'
p98580
g3
sS'name'
p98581
S'block'
p98582
sS'required'
p98583
I00
sS'group_name'
p98584
Nsa(dp98585
S'description'
p98586
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98587
sS'cpp_type'
p98588
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98589
sS'default'
p98590
g3
sS'name'
p98591
S'control_tags'
p98592
sS'required'
p98593
I00
sS'group_name'
p98594
S'Advanced'
p98595
sa(dp98596
S'description'
p98597
S'Set the enabled status of the MooseObject.\n'
p98598
sS'cpp_type'
p98599
S'bool'
p98600
sS'default'
p98601
S'1'
p98602
sS'name'
p98603
S'enable'
p98604
sS'required'
p98605
I00
sS'group_name'
p98606
S'Advanced'
p98607
sa(dp98608
S'name'
p98609
S'execute_on'
p98610
sS'cpp_type'
p98611
S'MultiMooseEnum'
p98612
sS'default'
p98613
S'TIMESTEP_END'
p98614
sS'description'
p98615
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98616
sS'required'
p98617
I00
sS'options'
p98618
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98619
sS'group_name'
p98620
Nsa(dp98621
S'description'
p98622
S'The name of the material property\n'
p98623
sS'cpp_type'
p98624
S'MaterialPropertyName'
p98625
sS'default'
p98626
g3
sS'name'
p98627
S'mat_prop'
p98628
sS'required'
p98629
I01
sS'group_name'
p98630
Nsa(dp98631
S'description'
p98632
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98633
sS'cpp_type'
p98634
S'std::vector<OutputName, std::allocator<OutputName> >'
p98635
sS'default'
p98636
g3
sS'name'
p98637
S'outputs'
p98638
sS'required'
p98639
I00
sS'group_name'
p98640
S'Advanced'
p98641
sa(dp98642
S'description'
p98643
S'The seed for the master random number generator\n'
p98644
sS'cpp_type'
p98645
S'unsigned int'
p98646
sS'default'
p98647
S'0'
p98648
sS'name'
p98649
S'seed'
p98650
sS'required'
p98651
I00
sS'group_name'
p98652
S'Advanced'
p98653
sa(dp98654
S'description'
p98655
g3
sS'cpp_type'
p98656
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98657
sS'default'
p98658
S'ElementIntegralMaterialProperty'
p98659
sS'name'
p98660
S'type'
p98661
sS'required'
p98662
I00
sS'group_name'
p98663
Nsa(dp98664
S'description'
p98665
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98666
sS'cpp_type'
p98667
S'bool'
p98668
sS'default'
p98669
S'0'
p98670
sS'name'
p98671
S'use_displaced_mesh'
p98672
sS'required'
p98673
I00
sS'group_name'
p98674
S'Advanced'
p98675
sasS'name'
p98676
S'/Postprocessors/ElementIntegralMaterialProperty'
p98677
sa(dp98678
S'description'
p98679
g3
sS'subblocks'
p98680
NsS'parameters'
p98681
(lp98682
(dp98683
S'description'
p98684
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98685
sS'cpp_type'
p98686
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98687
sS'default'
p98688
g3
sS'name'
p98689
S'block'
p98690
sS'required'
p98691
I00
sS'group_name'
p98692
Nsa(dp98693
S'description'
p98694
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98695
sS'cpp_type'
p98696
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98697
sS'default'
p98698
g3
sS'name'
p98699
S'control_tags'
p98700
sS'required'
p98701
I00
sS'group_name'
p98702
S'Advanced'
p98703
sa(dp98704
S'description'
p98705
S'Set the enabled status of the MooseObject.\n'
p98706
sS'cpp_type'
p98707
S'bool'
p98708
sS'default'
p98709
S'1'
p98710
sS'name'
p98711
S'enable'
p98712
sS'required'
p98713
I00
sS'group_name'
p98714
S'Advanced'
p98715
sa(dp98716
S'name'
p98717
S'execute_on'
p98718
sS'cpp_type'
p98719
S'MultiMooseEnum'
p98720
sS'default'
p98721
S'TIMESTEP_END'
p98722
sS'description'
p98723
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98724
sS'required'
p98725
I00
sS'options'
p98726
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98727
sS'group_name'
p98728
Nsa(dp98729
S'description'
p98730
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98731
sS'cpp_type'
p98732
S'std::vector<OutputName, std::allocator<OutputName> >'
p98733
sS'default'
p98734
g3
sS'name'
p98735
S'outputs'
p98736
sS'required'
p98737
I00
sS'group_name'
p98738
S'Advanced'
p98739
sa(dp98740
S'description'
p98741
S'The seed for the master random number generator\n'
p98742
sS'cpp_type'
p98743
S'unsigned int'
p98744
sS'default'
p98745
S'0'
p98746
sS'name'
p98747
S'seed'
p98748
sS'required'
p98749
I00
sS'group_name'
p98750
S'Advanced'
p98751
sa(dp98752
S'description'
p98753
g3
sS'cpp_type'
p98754
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98755
sS'default'
p98756
S'ElementIntegralVariablePostprocessor'
p98757
sS'name'
p98758
S'type'
p98759
sS'required'
p98760
I00
sS'group_name'
p98761
Nsa(dp98762
S'description'
p98763
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98764
sS'cpp_type'
p98765
S'bool'
p98766
sS'default'
p98767
S'0'
p98768
sS'name'
p98769
S'use_displaced_mesh'
p98770
sS'required'
p98771
I00
sS'group_name'
p98772
S'Advanced'
p98773
sa(dp98774
S'description'
p98775
S'The name of the variable that this object operates on\n'
p98776
sS'cpp_type'
p98777
S'std::vector<VariableName>'
p98778
sS'default'
p98779
g3
sS'name'
p98780
S'variable'
p98781
sS'required'
p98782
I01
sS'group_name'
p98783
NsasS'name'
p98784
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p98785
sa(dp98786
S'description'
p98787
g3
sS'subblocks'
p98788
NsS'parameters'
p98789
(lp98790
(dp98791
S'description'
p98792
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98793
sS'cpp_type'
p98794
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98795
sS'default'
p98796
g3
sS'name'
p98797
S'block'
p98798
sS'required'
p98799
I00
sS'group_name'
p98800
Nsa(dp98801
S'description'
p98802
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98803
sS'cpp_type'
p98804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98805
sS'default'
p98806
g3
sS'name'
p98807
S'control_tags'
p98808
sS'required'
p98809
I00
sS'group_name'
p98810
S'Advanced'
p98811
sa(dp98812
S'description'
p98813
S'Set the enabled status of the MooseObject.\n'
p98814
sS'cpp_type'
p98815
S'bool'
p98816
sS'default'
p98817
S'1'
p98818
sS'name'
p98819
S'enable'
p98820
sS'required'
p98821
I00
sS'group_name'
p98822
S'Advanced'
p98823
sa(dp98824
S'name'
p98825
S'execute_on'
p98826
sS'cpp_type'
p98827
S'MultiMooseEnum'
p98828
sS'default'
p98829
S'TIMESTEP_END'
p98830
sS'description'
p98831
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98832
sS'required'
p98833
I00
sS'options'
p98834
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98835
sS'group_name'
p98836
Nsa(dp98837
S'description'
p98838
S'The variable to compare to\n'
p98839
sS'cpp_type'
p98840
S'std::vector<VariableName>'
p98841
sS'default'
p98842
g3
sS'name'
p98843
S'other_variable'
p98844
sS'required'
p98845
I01
sS'group_name'
p98846
Nsa(dp98847
S'description'
p98848
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98849
sS'cpp_type'
p98850
S'std::vector<OutputName, std::allocator<OutputName> >'
p98851
sS'default'
p98852
g3
sS'name'
p98853
S'outputs'
p98854
sS'required'
p98855
I00
sS'group_name'
p98856
S'Advanced'
p98857
sa(dp98858
S'description'
p98859
S'The seed for the master random number generator\n'
p98860
sS'cpp_type'
p98861
S'unsigned int'
p98862
sS'default'
p98863
S'0'
p98864
sS'name'
p98865
S'seed'
p98866
sS'required'
p98867
I00
sS'group_name'
p98868
S'Advanced'
p98869
sa(dp98870
S'description'
p98871
g3
sS'cpp_type'
p98872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98873
sS'default'
p98874
S'ElementL2Difference'
p98875
sS'name'
p98876
S'type'
p98877
sS'required'
p98878
I00
sS'group_name'
p98879
Nsa(dp98880
S'description'
p98881
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98882
sS'cpp_type'
p98883
S'bool'
p98884
sS'default'
p98885
S'0'
p98886
sS'name'
p98887
S'use_displaced_mesh'
p98888
sS'required'
p98889
I00
sS'group_name'
p98890
S'Advanced'
p98891
sa(dp98892
S'description'
p98893
S'The name of the variable that this object operates on\n'
p98894
sS'cpp_type'
p98895
S'std::vector<VariableName>'
p98896
sS'default'
p98897
g3
sS'name'
p98898
S'variable'
p98899
sS'required'
p98900
I01
sS'group_name'
p98901
NsasS'name'
p98902
S'/Postprocessors/ElementL2Difference'
p98903
sa(dp98904
S'description'
p98905
g3
sS'subblocks'
p98906
NsS'parameters'
p98907
(lp98908
(dp98909
S'description'
p98910
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98911
sS'cpp_type'
p98912
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98913
sS'default'
p98914
g3
sS'name'
p98915
S'block'
p98916
sS'required'
p98917
I00
sS'group_name'
p98918
Nsa(dp98919
S'description'
p98920
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98921
sS'cpp_type'
p98922
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98923
sS'default'
p98924
g3
sS'name'
p98925
S'control_tags'
p98926
sS'required'
p98927
I00
sS'group_name'
p98928
S'Advanced'
p98929
sa(dp98930
S'description'
p98931
S'Set the enabled status of the MooseObject.\n'
p98932
sS'cpp_type'
p98933
S'bool'
p98934
sS'default'
p98935
S'1'
p98936
sS'name'
p98937
S'enable'
p98938
sS'required'
p98939
I00
sS'group_name'
p98940
S'Advanced'
p98941
sa(dp98942
S'name'
p98943
S'execute_on'
p98944
sS'cpp_type'
p98945
S'MultiMooseEnum'
p98946
sS'default'
p98947
S'TIMESTEP_END'
p98948
sS'description'
p98949
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98950
sS'required'
p98951
I00
sS'options'
p98952
S'none initial linear nonlinear timestep_end timestep_begin custom'
p98953
sS'group_name'
p98954
Nsa(dp98955
S'description'
p98956
S'The analytic solution to compare against\n'
p98957
sS'cpp_type'
p98958
S'FunctionName'
p98959
sS'default'
p98960
g3
sS'name'
p98961
S'function'
p98962
sS'required'
p98963
I01
sS'group_name'
p98964
Nsa(dp98965
S'description'
p98966
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98967
sS'cpp_type'
p98968
S'std::vector<OutputName, std::allocator<OutputName> >'
p98969
sS'default'
p98970
g3
sS'name'
p98971
S'outputs'
p98972
sS'required'
p98973
I00
sS'group_name'
p98974
S'Advanced'
p98975
sa(dp98976
S'description'
p98977
S'The seed for the master random number generator\n'
p98978
sS'cpp_type'
p98979
S'unsigned int'
p98980
sS'default'
p98981
S'0'
p98982
sS'name'
p98983
S'seed'
p98984
sS'required'
p98985
I00
sS'group_name'
p98986
S'Advanced'
p98987
sa(dp98988
S'description'
p98989
g3
sS'cpp_type'
p98990
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98991
sS'default'
p98992
S'ElementL2Error'
p98993
sS'name'
p98994
S'type'
p98995
sS'required'
p98996
I00
sS'group_name'
p98997
Nsa(dp98998
S'description'
p98999
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99000
sS'cpp_type'
p99001
S'bool'
p99002
sS'default'
p99003
S'0'
p99004
sS'name'
p99005
S'use_displaced_mesh'
p99006
sS'required'
p99007
I00
sS'group_name'
p99008
S'Advanced'
p99009
sa(dp99010
S'description'
p99011
S'The name of the variable that this object operates on\n'
p99012
sS'cpp_type'
p99013
S'std::vector<VariableName>'
p99014
sS'default'
p99015
g3
sS'name'
p99016
S'variable'
p99017
sS'required'
p99018
I01
sS'group_name'
p99019
NsasS'name'
p99020
S'/Postprocessors/ElementL2Error'
p99021
sa(dp99022
S'description'
p99023
g3
sS'subblocks'
p99024
NsS'parameters'
p99025
(lp99026
(dp99027
S'description'
p99028
S'The list of block ids (SubdomainID) that this object will be applied\n'
p99029
sS'cpp_type'
p99030
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p99031
sS'default'
p99032
g3
sS'name'
p99033
S'block'
p99034
sS'required'
p99035
I00
sS'group_name'
p99036
Nsa(dp99037
S'description'
p99038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99039
sS'cpp_type'
p99040
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99041
sS'default'
p99042
g3
sS'name'
p99043
S'control_tags'
p99044
sS'required'
p99045
I00
sS'group_name'
p99046
S'Advanced'
p99047
sa(dp99048
S'description'
p99049
S'Set the enabled status of the MooseObject.\n'
p99050
sS'cpp_type'
p99051
S'bool'
p99052
sS'default'
p99053
S'1'
p99054
sS'name'
p99055
S'enable'
p99056
sS'required'
p99057
I00
sS'group_name'
p99058
S'Advanced'
p99059
sa(dp99060
S'name'
p99061
S'execute_on'
p99062
sS'cpp_type'
p99063
S'MultiMooseEnum'
p99064
sS'default'
p99065
S'TIMESTEP_END'
p99066
sS'description'
p99067
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99068
sS'required'
p99069
I00
sS'options'
p99070
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99071
sS'group_name'
p99072
Nsa(dp99073
S'description'
p99074
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99075
sS'cpp_type'
p99076
S'std::vector<OutputName, std::allocator<OutputName> >'
p99077
sS'default'
p99078
g3
sS'name'
p99079
S'outputs'
p99080
sS'required'
p99081
I00
sS'group_name'
p99082
S'Advanced'
p99083
sa(dp99084
S'description'
p99085
S'The seed for the master random number generator\n'
p99086
sS'cpp_type'
p99087
S'unsigned int'
p99088
sS'default'
p99089
S'0'
p99090
sS'name'
p99091
S'seed'
p99092
sS'required'
p99093
I00
sS'group_name'
p99094
S'Advanced'
p99095
sa(dp99096
S'description'
p99097
g3
sS'cpp_type'
p99098
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99099
sS'default'
p99100
S'ElementL2Norm'
p99101
sS'name'
p99102
S'type'
p99103
sS'required'
p99104
I00
sS'group_name'
p99105
Nsa(dp99106
S'description'
p99107
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99108
sS'cpp_type'
p99109
S'bool'
p99110
sS'default'
p99111
S'0'
p99112
sS'name'
p99113
S'use_displaced_mesh'
p99114
sS'required'
p99115
I00
sS'group_name'
p99116
S'Advanced'
p99117
sa(dp99118
S'description'
p99119
S'The name of the variable that this object operates on\n'
p99120
sS'cpp_type'
p99121
S'std::vector<VariableName>'
p99122
sS'default'
p99123
g3
sS'name'
p99124
S'variable'
p99125
sS'required'
p99126
I01
sS'group_name'
p99127
NsasS'name'
p99128
S'/Postprocessors/ElementL2Norm'
p99129
sa(dp99130
S'description'
p99131
g3
sS'subblocks'
p99132
NsS'parameters'
p99133
(lp99134
(dp99135
S'description'
p99136
S'The list of block ids (SubdomainID) that this object will be applied\n'
p99137
sS'cpp_type'
p99138
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p99139
sS'default'
p99140
g3
sS'name'
p99141
S'block'
p99142
sS'required'
p99143
I00
sS'group_name'
p99144
Nsa(dp99145
S'description'
p99146
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99147
sS'cpp_type'
p99148
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99149
sS'default'
p99150
g3
sS'name'
p99151
S'control_tags'
p99152
sS'required'
p99153
I00
sS'group_name'
p99154
S'Advanced'
p99155
sa(dp99156
S'description'
p99157
S'Set the enabled status of the MooseObject.\n'
p99158
sS'cpp_type'
p99159
S'bool'
p99160
sS'default'
p99161
S'1'
p99162
sS'name'
p99163
S'enable'
p99164
sS'required'
p99165
I00
sS'group_name'
p99166
S'Advanced'
p99167
sa(dp99168
S'name'
p99169
S'execute_on'
p99170
sS'cpp_type'
p99171
S'MultiMooseEnum'
p99172
sS'default'
p99173
S'TIMESTEP_END'
p99174
sS'description'
p99175
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99176
sS'required'
p99177
I00
sS'options'
p99178
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99179
sS'group_name'
p99180
Nsa(dp99181
S'description'
p99182
S'The analytic solution to compare against\n'
p99183
sS'cpp_type'
p99184
S'FunctionName'
p99185
sS'default'
p99186
g3
sS'name'
p99187
S'function_x'
p99188
sS'required'
p99189
I01
sS'group_name'
p99190
Nsa(dp99191
S'description'
p99192
S'The analytic solution to compare against\n'
p99193
sS'cpp_type'
p99194
S'FunctionName'
p99195
sS'default'
p99196
S'0'
p99197
sS'name'
p99198
S'function_y'
p99199
sS'required'
p99200
I00
sS'group_name'
p99201
Nsa(dp99202
S'description'
p99203
S'The analytic solution to compare against\n'
p99204
sS'cpp_type'
p99205
S'FunctionName'
p99206
sS'default'
p99207
S'0'
p99208
sS'name'
p99209
S'function_z'
p99210
sS'required'
p99211
I00
sS'group_name'
p99212
Nsa(dp99213
S'description'
p99214
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99215
sS'cpp_type'
p99216
S'std::vector<OutputName, std::allocator<OutputName> >'
p99217
sS'default'
p99218
g3
sS'name'
p99219
S'outputs'
p99220
sS'required'
p99221
I00
sS'group_name'
p99222
S'Advanced'
p99223
sa(dp99224
S'description'
p99225
S'The seed for the master random number generator\n'
p99226
sS'cpp_type'
p99227
S'unsigned int'
p99228
sS'default'
p99229
S'0'
p99230
sS'name'
p99231
S'seed'
p99232
sS'required'
p99233
I00
sS'group_name'
p99234
S'Advanced'
p99235
sa(dp99236
S'description'
p99237
g3
sS'cpp_type'
p99238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99239
sS'default'
p99240
S'ElementVectorL2Error'
p99241
sS'name'
p99242
S'type'
p99243
sS'required'
p99244
I00
sS'group_name'
p99245
Nsa(dp99246
S'description'
p99247
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99248
sS'cpp_type'
p99249
S'bool'
p99250
sS'default'
p99251
S'0'
p99252
sS'name'
p99253
S'use_displaced_mesh'
p99254
sS'required'
p99255
I00
sS'group_name'
p99256
S'Advanced'
p99257
sa(dp99258
S'description'
p99259
S'The FE solution in x direction\n'
p99260
sS'cpp_type'
p99261
S'std::vector<VariableName>'
p99262
sS'default'
p99263
g3
sS'name'
p99264
S'var_x'
p99265
sS'required'
p99266
I01
sS'group_name'
p99267
Nsa(dp99268
S'description'
p99269
S'The FE solution in y direction\n'
p99270
sS'cpp_type'
p99271
S'std::vector<VariableName>'
p99272
sS'default'
p99273
S'0'
p99274
sS'name'
p99275
S'var_y'
p99276
sS'required'
p99277
I00
sS'group_name'
p99278
Nsa(dp99279
S'description'
p99280
S'The FE solution in z direction\n'
p99281
sS'cpp_type'
p99282
S'std::vector<VariableName>'
p99283
sS'default'
p99284
S'0'
p99285
sS'name'
p99286
S'var_z'
p99287
sS'required'
p99288
I00
sS'group_name'
p99289
NsasS'name'
p99290
S'/Postprocessors/ElementVectorL2Error'
p99291
sa(dp99292
S'description'
p99293
g3
sS'subblocks'
p99294
NsS'parameters'
p99295
(lp99296
(dp99297
S'description'
p99298
S'The list of block ids (SubdomainID) that this object will be applied\n'
p99299
sS'cpp_type'
p99300
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p99301
sS'default'
p99302
g3
sS'name'
p99303
S'block'
p99304
sS'required'
p99305
I00
sS'group_name'
p99306
Nsa(dp99307
S'description'
p99308
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99309
sS'cpp_type'
p99310
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99311
sS'default'
p99312
g3
sS'name'
p99313
S'control_tags'
p99314
sS'required'
p99315
I00
sS'group_name'
p99316
S'Advanced'
p99317
sa(dp99318
S'description'
p99319
S'Set the enabled status of the MooseObject.\n'
p99320
sS'cpp_type'
p99321
S'bool'
p99322
sS'default'
p99323
S'1'
p99324
sS'name'
p99325
S'enable'
p99326
sS'required'
p99327
I00
sS'group_name'
p99328
S'Advanced'
p99329
sa(dp99330
S'name'
p99331
S'execute_on'
p99332
sS'cpp_type'
p99333
S'MultiMooseEnum'
p99334
sS'default'
p99335
S'TIMESTEP_END'
p99336
sS'description'
p99337
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99338
sS'required'
p99339
I00
sS'options'
p99340
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99341
sS'group_name'
p99342
Nsa(dp99343
S'description'
p99344
S'The analytic solution to compare against\n'
p99345
sS'cpp_type'
p99346
S'FunctionName'
p99347
sS'default'
p99348
g3
sS'name'
p99349
S'function'
p99350
sS'required'
p99351
I01
sS'group_name'
p99352
Nsa(dp99353
S'description'
p99354
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99355
sS'cpp_type'
p99356
S'std::vector<OutputName, std::allocator<OutputName> >'
p99357
sS'default'
p99358
g3
sS'name'
p99359
S'outputs'
p99360
sS'required'
p99361
I00
sS'group_name'
p99362
S'Advanced'
p99363
sa(dp99364
S'description'
p99365
S'The exponent used in the norm.\n'
p99366
sS'cpp_type'
p99367
S'double'
p99368
sS'default'
p99369
S'2'
p99370
sS'name'
p99371
S'p'
p99372
sS'required'
p99373
I00
sS'group_name'
p99374
Nsa(dp99375
S'description'
p99376
S'The seed for the master random number generator\n'
p99377
sS'cpp_type'
p99378
S'unsigned int'
p99379
sS'default'
p99380
S'0'
p99381
sS'name'
p99382
S'seed'
p99383
sS'required'
p99384
I00
sS'group_name'
p99385
S'Advanced'
p99386
sa(dp99387
S'description'
p99388
g3
sS'cpp_type'
p99389
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99390
sS'default'
p99391
S'ElementW1pError'
p99392
sS'name'
p99393
S'type'
p99394
sS'required'
p99395
I00
sS'group_name'
p99396
Nsa(dp99397
S'description'
p99398
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99399
sS'cpp_type'
p99400
S'bool'
p99401
sS'default'
p99402
S'0'
p99403
sS'name'
p99404
S'use_displaced_mesh'
p99405
sS'required'
p99406
I00
sS'group_name'
p99407
S'Advanced'
p99408
sa(dp99409
S'description'
p99410
S'The name of the variable that this object operates on\n'
p99411
sS'cpp_type'
p99412
S'std::vector<VariableName>'
p99413
sS'default'
p99414
g3
sS'name'
p99415
S'variable'
p99416
sS'required'
p99417
I01
sS'group_name'
p99418
NsasS'name'
p99419
S'/Postprocessors/ElementW1pError'
p99420
sa(dp99421
S'description'
p99422
g3
sS'subblocks'
p99423
NsS'parameters'
p99424
(lp99425
(dp99426
S'description'
p99427
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99428
sS'cpp_type'
p99429
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99430
sS'default'
p99431
g3
sS'name'
p99432
S'control_tags'
p99433
sS'required'
p99434
I00
sS'group_name'
p99435
S'Advanced'
p99436
sa(dp99437
S'description'
p99438
S'The ID of the element where we monitor\n'
p99439
sS'cpp_type'
p99440
S'unsigned int'
p99441
sS'default'
p99442
g3
sS'name'
p99443
S'elementid'
p99444
sS'required'
p99445
I01
sS'group_name'
p99446
Nsa(dp99447
S'description'
p99448
S'Set the enabled status of the MooseObject.\n'
p99449
sS'cpp_type'
p99450
S'bool'
p99451
sS'default'
p99452
S'1'
p99453
sS'name'
p99454
S'enable'
p99455
sS'required'
p99456
I00
sS'group_name'
p99457
S'Advanced'
p99458
sa(dp99459
S'name'
p99460
S'execute_on'
p99461
sS'cpp_type'
p99462
S'MultiMooseEnum'
p99463
sS'default'
p99464
S'TIMESTEP_END'
p99465
sS'description'
p99466
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99467
sS'required'
p99468
I00
sS'options'
p99469
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99470
sS'group_name'
p99471
Nsa(dp99472
S'description'
p99473
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99474
sS'cpp_type'
p99475
S'std::vector<OutputName, std::allocator<OutputName> >'
p99476
sS'default'
p99477
g3
sS'name'
p99478
S'outputs'
p99479
sS'required'
p99480
I00
sS'group_name'
p99481
S'Advanced'
p99482
sa(dp99483
S'description'
p99484
g3
sS'cpp_type'
p99485
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99486
sS'default'
p99487
S'ElementalVariableValue'
p99488
sS'name'
p99489
S'type'
p99490
sS'required'
p99491
I00
sS'group_name'
p99492
Nsa(dp99493
S'description'
p99494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99495
sS'cpp_type'
p99496
S'bool'
p99497
sS'default'
p99498
S'0'
p99499
sS'name'
p99500
S'use_displaced_mesh'
p99501
sS'required'
p99502
I00
sS'group_name'
p99503
S'Advanced'
p99504
sa(dp99505
S'description'
p99506
S'The variable to be monitored\n'
p99507
sS'cpp_type'
p99508
S'VariableName'
p99509
sS'default'
p99510
g3
sS'name'
p99511
S'variable'
p99512
sS'required'
p99513
I01
sS'group_name'
p99514
NsasS'name'
p99515
S'/Postprocessors/ElementalVariableValue'
p99516
sa(dp99517
S'description'
p99518
g3
sS'subblocks'
p99519
NsS'parameters'
p99520
(lp99521
(dp99522
S'description'
p99523
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99524
sS'cpp_type'
p99525
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99526
sS'default'
p99527
g3
sS'name'
p99528
S'control_tags'
p99529
sS'required'
p99530
I00
sS'group_name'
p99531
S'Advanced'
p99532
sa(dp99533
S'description'
p99534
S'Set the enabled status of the MooseObject.\n'
p99535
sS'cpp_type'
p99536
S'bool'
p99537
sS'default'
p99538
S'1'
p99539
sS'name'
p99540
S'enable'
p99541
sS'required'
p99542
I00
sS'group_name'
p99543
S'Advanced'
p99544
sa(dp99545
S'name'
p99546
S'execute_on'
p99547
sS'cpp_type'
p99548
S'MultiMooseEnum'
p99549
sS'default'
p99550
S'TIMESTEP_END'
p99551
sS'description'
p99552
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99553
sS'required'
p99554
I00
sS'options'
p99555
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99556
sS'group_name'
p99557
Nsa(dp99558
S'description'
p99559
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99560
sS'cpp_type'
p99561
S'std::vector<OutputName, std::allocator<OutputName> >'
p99562
sS'default'
p99563
g3
sS'name'
p99564
S'outputs'
p99565
sS'required'
p99566
I00
sS'group_name'
p99567
S'Advanced'
p99568
sa(dp99569
S'description'
p99570
g3
sS'cpp_type'
p99571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99572
sS'default'
p99573
S'EmptyPostprocessor'
p99574
sS'name'
p99575
S'type'
p99576
sS'required'
p99577
I00
sS'group_name'
p99578
Nsa(dp99579
S'description'
p99580
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99581
sS'cpp_type'
p99582
S'bool'
p99583
sS'default'
p99584
S'0'
p99585
sS'name'
p99586
S'use_displaced_mesh'
p99587
sS'required'
p99588
I00
sS'group_name'
p99589
S'Advanced'
p99590
sasS'name'
p99591
S'/Postprocessors/EmptyPostprocessor'
p99592
sa(dp99593
S'description'
p99594
g3
sS'subblocks'
p99595
NsS'parameters'
p99596
(lp99597
(dp99598
S'description'
p99599
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99600
sS'cpp_type'
p99601
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99602
sS'default'
p99603
g3
sS'name'
p99604
S'control_tags'
p99605
sS'required'
p99606
I00
sS'group_name'
p99607
S'Advanced'
p99608
sa(dp99609
S'description'
p99610
S'Set the enabled status of the MooseObject.\n'
p99611
sS'cpp_type'
p99612
S'bool'
p99613
sS'default'
p99614
S'1'
p99615
sS'name'
p99616
S'enable'
p99617
sS'required'
p99618
I00
sS'group_name'
p99619
S'Advanced'
p99620
sa(dp99621
S'name'
p99622
S'execute_on'
p99623
sS'cpp_type'
p99624
S'MultiMooseEnum'
p99625
sS'default'
p99626
S'TIMESTEP_END'
p99627
sS'description'
p99628
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99629
sS'required'
p99630
I00
sS'options'
p99631
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99632
sS'group_name'
p99633
Nsa(dp99634
S'description'
p99635
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99636
sS'cpp_type'
p99637
S'std::vector<OutputName, std::allocator<OutputName> >'
p99638
sS'default'
p99639
g3
sS'name'
p99640
S'outputs'
p99641
sS'required'
p99642
I00
sS'group_name'
p99643
S'Advanced'
p99644
sa(dp99645
S'description'
p99646
g3
sS'cpp_type'
p99647
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99648
sS'default'
p99649
S'ExecutionerAttributeReporter'
p99650
sS'name'
p99651
S'type'
p99652
sS'required'
p99653
I00
sS'group_name'
p99654
Nsa(dp99655
S'description'
p99656
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99657
sS'cpp_type'
p99658
S'bool'
p99659
sS'default'
p99660
S'0'
p99661
sS'name'
p99662
S'use_displaced_mesh'
p99663
sS'required'
p99664
I00
sS'group_name'
p99665
S'Advanced'
p99666
sasS'name'
p99667
S'/Postprocessors/ExecutionerAttributeReporter'
p99668
sa(dp99669
S'description'
p99670
S'Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n'
p99671
sS'subblocks'
p99672
NsS'parameters'
p99673
(lp99674
(dp99675
S'description'
p99676
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p99677
sS'cpp_type'
p99678
S'bool'
p99679
sS'default'
p99680
S'0'
p99681
sS'name'
p99682
S'compute_halo_maps'
p99683
sS'required'
p99684
I00
sS'group_name'
p99685
Nsa(dp99686
S'description'
p99687
S'Instruct the Postprocessor to compute the active vars to features map\n'
p99688
sS'cpp_type'
p99689
S'bool'
p99690
sS'default'
p99691
S'0'
p99692
sS'name'
p99693
S'compute_var_to_feature_map'
p99694
sS'required'
p99695
I00
sS'group_name'
p99696
Nsa(dp99697
S'description'
p99698
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p99699
sS'cpp_type'
p99700
S'bool'
p99701
sS'default'
p99702
S'1'
p99703
sS'name'
p99704
S'condense_map_info'
p99705
sS'required'
p99706
I00
sS'group_name'
p99707
S'Advanced'
p99708
sa(dp99709
S'description'
p99710
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p99711
sS'cpp_type'
p99712
S'double'
p99713
sS'default'
p99714
S'0.09'
p99715
sS'name'
p99716
S'connecting_threshold'
p99717
sS'required'
p99718
I00
sS'group_name'
p99719
Nsa(dp99720
S'description'
p99721
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99722
sS'cpp_type'
p99723
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99724
sS'default'
p99725
g3
sS'name'
p99726
S'control_tags'
p99727
sS'required'
p99728
I00
sS'group_name'
p99729
S'Advanced'
p99730
sa(dp99731
S'description'
p99732
S'Optional: EBSD Reader for initial condition\n'
p99733
sS'cpp_type'
p99734
S'UserObjectName'
p99735
sS'default'
p99736
g3
sS'name'
p99737
S'ebsd_reader'
p99738
sS'required'
p99739
I00
sS'group_name'
p99740
Nsa(dp99741
S'description'
p99742
S'Set the enabled status of the MooseObject.\n'
p99743
sS'cpp_type'
p99744
S'bool'
p99745
sS'default'
p99746
S'1'
p99747
sS'name'
p99748
S'enable'
p99749
sS'required'
p99750
I00
sS'group_name'
p99751
S'Advanced'
p99752
sa(dp99753
S'description'
p99754
S'Instruct the Postprocessor to populate the variable index map.\n'
p99755
sS'cpp_type'
p99756
S'bool'
p99757
sS'default'
p99758
S'1'
p99759
sS'name'
p99760
S'enable_var_coloring'
p99761
sS'required'
p99762
I00
sS'group_name'
p99763
Nsa(dp99764
S'description'
p99765
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p99766
sS'cpp_type'
p99767
S'bool'
p99768
sS'default'
p99769
S'0'
p99770
sS'name'
p99771
S'error_on_grain_creation'
p99772
sS'required'
p99773
I00
sS'group_name'
p99774
Nsa(dp99775
S'name'
p99776
S'execute_on'
p99777
sS'cpp_type'
p99778
S'MultiMooseEnum'
p99779
sS'default'
p99780
S'INITIAL TIMESTEP_END'
p99781
sS'description'
p99782
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99783
sS'required'
p99784
I00
sS'options'
p99785
S'none initial linear nonlinear timestep_end timestep_begin custom'
p99786
sS'group_name'
p99787
Nsa(dp99788
S'name'
p99789
S'flood_entity_type'
p99790
sS'cpp_type'
p99791
S'MooseEnum'
p99792
sS'default'
p99793
S'ELEMENTAL'
p99794
sS'description'
p99795
S'Determines whether the flood algorithm runs on nodes or elements\n'
p99796
sS'required'
p99797
I00
sS'options'
p99798
S'NODAL ELEMENTAL'
p99799
sS'group_name'
p99800
Nsa(dp99801
S'description'
p99802
S'The thickness of the halo surrounding each feature.\n'
p99803
sS'cpp_type'
p99804
S'unsigned int'
p99805
sS'default'
p99806
S'2'
p99807
sS'name'
p99808
S'halo_level'
p99809
sS'required'
p99810
I00
sS'group_name'
p99811
Nsa(dp99812
S'description'
p99813
S'Array of coupled variables (num_name)\n'
p99814
sS'cpp_type'
p99815
S'unsigned int'
p99816
sS'default'
p99817
g3
sS'name'
p99818
S'op_num'
p99819
sS'required'
p99820
I00
sS'group_name'
p99821
Nsa(dp99822
S'description'
p99823
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99824
sS'cpp_type'
p99825
S'std::vector<OutputName, std::allocator<OutputName> >'
p99826
sS'default'
p99827
g3
sS'name'
p99828
S'outputs'
p99829
sS'required'
p99830
I00
sS'group_name'
p99831
S'Advanced'
p99832
sa(dp99833
S'description'
p99834
S'EBSD phase number from which to retrieve information\n'
p99835
sS'cpp_type'
p99836
S'unsigned int'
p99837
sS'default'
p99838
g3
sS'name'
p99839
S'phase'
p99840
sS'required'
p99841
I00
sS'group_name'
p99842
Nsa(dp99843
S'description'
p99844
S'Indicates whether remapping should be done or not (default: true)\n'
p99845
sS'cpp_type'
p99846
S'bool'
p99847
sS'default'
p99848
S'1'
p99849
sS'name'
p99850
S'remap_grains'
p99851
sS'required'
p99852
I00
sS'group_name'
p99853
Nsa(dp99854
S'description'
p99855
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p99856
sS'cpp_type'
p99857
S'unsigned short'
p99858
sS'default'
p99859
S'0'
p99860
sS'name'
p99861
S'reserve_op'
p99862
sS'required'
p99863
I00
sS'group_name'
p99864
Nsa(dp99865
S'description'
p99866
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p99867
sS'cpp_type'
p99868
S'double'
p99869
sS'default'
p99870
S'0.95'
p99871
sS'name'
p99872
S'reserve_op_threshold'
p99873
sS'required'
p99874
I00
sS'group_name'
p99875
Nsa(dp99876
S'description'
p99877
S'The threshold value for which a new feature may be started\n'
p99878
sS'cpp_type'
p99879
S'double'
p99880
sS'default'
p99881
S'0.1'
p99882
sS'name'
p99883
S'threshold'
p99884
sS'required'
p99885
I00
sS'group_name'
p99886
Nsa(dp99887
S'description'
p99888
S'The timestep for when we should start tracking grains\n'
p99889
sS'cpp_type'
p99890
S'int'
p99891
sS'default'
p99892
S'0'
p99893
sS'name'
p99894
S'tracking_step'
p99895
sS'required'
p99896
I00
sS'group_name'
p99897
Nsa(dp99898
S'description'
p99899
g3
sS'cpp_type'
p99900
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99901
sS'default'
p99902
S'FauxGrainTracker'
p99903
sS'name'
p99904
S'type'
p99905
sS'required'
p99906
I00
sS'group_name'
p99907
Nsa(dp99908
S'description'
p99909
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99910
sS'cpp_type'
p99911
S'bool'
p99912
sS'default'
p99913
S'0'
p99914
sS'name'
p99915
S'use_displaced_mesh'
p99916
sS'required'
p99917
I00
sS'group_name'
p99918
S'Advanced'
p99919
sa(dp99920
S'description'
p99921
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p99922
sS'cpp_type'
p99923
S'bool'
p99924
sS'default'
p99925
S'1'
p99926
sS'name'
p99927
S'use_global_numbering'
p99928
sS'required'
p99929
I00
sS'group_name'
p99930
S'Advanced'
p99931
sa(dp99932
S'description'
p99933
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p99934
sS'cpp_type'
p99935
S'bool'
p99936
sS'default'
p99937
S'1'
p99938
sS'name'
p99939
S'use_less_than_threshold_comparison'
p99940
sS'required'
p99941
I00
sS'group_name'
p99942
Nsa(dp99943
S'description'
p99944
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p99945
sS'cpp_type'
p99946
S'bool'
p99947
sS'default'
p99948
S'0'
p99949
sS'name'
p99950
S'use_single_map'
p99951
sS'required'
p99952
I00
sS'group_name'
p99953
S'Advanced'
p99954
sa(dp99955
S'description'
p99956
S'Array of coupled variables (base_name)\n'
p99957
sS'cpp_type'
p99958
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99959
sS'default'
p99960
g3
sS'name'
p99961
S'var_name_base'
p99962
sS'required'
p99963
I00
sS'group_name'
p99964
Nsa(dp99965
S'description'
p99966
S'Array of coupled variables\n'
p99967
sS'cpp_type'
p99968
S'std::vector<VariableName>'
p99969
sS'default'
p99970
g3
sS'name'
p99971
S'variable'
p99972
sS'required'
p99973
I01
sS'group_name'
p99974
NsasS'name'
p99975
S'/Postprocessors/FauxGrainTracker'
p99976
sa(dp99977
S'description'
p99978
g3
sS'subblocks'
p99979
NsS'parameters'
p99980
(lp99981
(dp99982
S'description'
p99983
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p99984
sS'cpp_type'
p99985
S'bool'
p99986
sS'default'
p99987
S'0'
p99988
sS'name'
p99989
S'compute_halo_maps'
p99990
sS'required'
p99991
I00
sS'group_name'
p99992
Nsa(dp99993
S'description'
p99994
S'Instruct the Postprocessor to compute the active vars to features map\n'
p99995
sS'cpp_type'
p99996
S'bool'
p99997
sS'default'
p99998
S'0'
p99999
sS'name'
p100000
S'compute_var_to_feature_map'
p100001
sS'required'
p100002
I00
sS'group_name'
p100003
Nsa(dp100004
S'description'
p100005
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p100006
sS'cpp_type'
p100007
S'bool'
p100008
sS'default'
p100009
S'0'
p100010
sS'name'
p100011
S'condense_map_info'
p100012
sS'required'
p100013
I00
sS'group_name'
p100014
S'Advanced'
p100015
sa(dp100016
S'description'
p100017
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p100018
sS'cpp_type'
p100019
S'double'
p100020
sS'default'
p100021
g3
sS'name'
p100022
S'connecting_threshold'
p100023
sS'required'
p100024
I00
sS'group_name'
p100025
Nsa(dp100026
S'description'
p100027
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100028
sS'cpp_type'
p100029
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100030
sS'default'
p100031
g3
sS'name'
p100032
S'control_tags'
p100033
sS'required'
p100034
I00
sS'group_name'
p100035
S'Advanced'
p100036
sa(dp100037
S'description'
p100038
S'Set the enabled status of the MooseObject.\n'
p100039
sS'cpp_type'
p100040
S'bool'
p100041
sS'default'
p100042
S'1'
p100043
sS'name'
p100044
S'enable'
p100045
sS'required'
p100046
I00
sS'group_name'
p100047
S'Advanced'
p100048
sa(dp100049
S'description'
p100050
S'Instruct the Postprocessor to populate the variable index map.\n'
p100051
sS'cpp_type'
p100052
S'bool'
p100053
sS'default'
p100054
S'0'
p100055
sS'name'
p100056
S'enable_var_coloring'
p100057
sS'required'
p100058
I00
sS'group_name'
p100059
Nsa(dp100060
S'name'
p100061
S'execute_on'
p100062
sS'cpp_type'
p100063
S'MultiMooseEnum'
p100064
sS'default'
p100065
S'TIMESTEP_END'
p100066
sS'description'
p100067
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100068
sS'required'
p100069
I00
sS'options'
p100070
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100071
sS'group_name'
p100072
Nsa(dp100073
S'name'
p100074
S'flood_entity_type'
p100075
sS'cpp_type'
p100076
S'MooseEnum'
p100077
sS'default'
p100078
S'ELEMENTAL'
p100079
sS'description'
p100080
S'Determines whether the flood algorithm runs on nodes or elements\n'
p100081
sS'required'
p100082
I00
sS'options'
p100083
S'NODAL ELEMENTAL'
p100084
sS'group_name'
p100085
Nsa(dp100086
S'description'
p100087
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100088
sS'cpp_type'
p100089
S'std::vector<OutputName, std::allocator<OutputName> >'
p100090
sS'default'
p100091
g3
sS'name'
p100092
S'outputs'
p100093
sS'required'
p100094
I00
sS'group_name'
p100095
S'Advanced'
p100096
sa(dp100097
S'description'
p100098
S'The threshold value for which a new feature may be started\n'
p100099
sS'cpp_type'
p100100
S'double'
p100101
sS'default'
p100102
S'0.5'
p100103
sS'name'
p100104
S'threshold'
p100105
sS'required'
p100106
I00
sS'group_name'
p100107
Nsa(dp100108
S'description'
p100109
g3
sS'cpp_type'
p100110
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100111
sS'default'
p100112
S'FeatureFloodCount'
p100113
sS'name'
p100114
S'type'
p100115
sS'required'
p100116
I00
sS'group_name'
p100117
Nsa(dp100118
S'description'
p100119
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100120
sS'cpp_type'
p100121
S'bool'
p100122
sS'default'
p100123
S'0'
p100124
sS'name'
p100125
S'use_displaced_mesh'
p100126
sS'required'
p100127
I00
sS'group_name'
p100128
S'Advanced'
p100129
sa(dp100130
S'description'
p100131
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p100132
sS'cpp_type'
p100133
S'bool'
p100134
sS'default'
p100135
S'1'
p100136
sS'name'
p100137
S'use_global_numbering'
p100138
sS'required'
p100139
I00
sS'group_name'
p100140
S'Advanced'
p100141
sa(dp100142
S'description'
p100143
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p100144
sS'cpp_type'
p100145
S'bool'
p100146
sS'default'
p100147
S'1'
p100148
sS'name'
p100149
S'use_less_than_threshold_comparison'
p100150
sS'required'
p100151
I00
sS'group_name'
p100152
Nsa(dp100153
S'description'
p100154
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p100155
sS'cpp_type'
p100156
S'bool'
p100157
sS'default'
p100158
S'1'
p100159
sS'name'
p100160
S'use_single_map'
p100161
sS'required'
p100162
I00
sS'group_name'
p100163
S'Advanced'
p100164
sa(dp100165
S'description'
p100166
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p100167
sS'cpp_type'
p100168
S'std::vector<VariableName>'
p100169
sS'default'
p100170
g3
sS'name'
p100171
S'variable'
p100172
sS'required'
p100173
I01
sS'group_name'
p100174
NsasS'name'
p100175
S'/Postprocessors/FeatureFloodCount'
p100176
sa(dp100177
S'description'
p100178
g3
sS'subblocks'
p100179
NsS'parameters'
p100180
(lp100181
(dp100182
S'description'
p100183
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100184
sS'cpp_type'
p100185
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100186
sS'default'
p100187
g3
sS'name'
p100188
S'control_tags'
p100189
sS'required'
p100190
I00
sS'group_name'
p100191
S'Advanced'
p100192
sa(dp100193
S'description'
p100194
S'Set the enabled status of the MooseObject.\n'
p100195
sS'cpp_type'
p100196
S'bool'
p100197
sS'default'
p100198
S'1'
p100199
sS'name'
p100200
S'enable'
p100201
sS'required'
p100202
I00
sS'group_name'
p100203
S'Advanced'
p100204
sa(dp100205
S'description'
p100206
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p100207
sS'cpp_type'
p100208
S'double'
p100209
sS'default'
p100210
S'-1'
p100211
sS'name'
p100212
S'equil_fraction'
p100213
sS'required'
p100214
I00
sS'group_name'
p100215
Nsa(dp100216
S'name'
p100217
S'execute_on'
p100218
sS'cpp_type'
p100219
S'MultiMooseEnum'
p100220
sS'default'
p100221
S'TIMESTEP_END'
p100222
sS'description'
p100223
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100224
sS'required'
p100225
I00
sS'options'
p100226
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100227
sS'group_name'
p100228
Nsa(dp100229
S'description'
p100230
S'The feature volume VectorPostprocessorValue.\n'
p100231
sS'cpp_type'
p100232
S'VectorPostprocessorName'
p100233
sS'default'
p100234
g3
sS'name'
p100235
S'feature_volumes'
p100236
sS'required'
p100237
I01
sS'group_name'
p100238
Nsa(dp100239
S'description'
p100240
S'Postprocessor from which to get mesh volume\n'
p100241
sS'cpp_type'
p100242
S'PostprocessorName'
p100243
sS'default'
p100244
g3
sS'name'
p100245
S'mesh_volume'
p100246
sS'required'
p100247
I01
sS'group_name'
p100248
Nsa(dp100249
S'description'
p100250
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100251
sS'cpp_type'
p100252
S'std::vector<OutputName, std::allocator<OutputName> >'
p100253
sS'default'
p100254
g3
sS'name'
p100255
S'outputs'
p100256
sS'required'
p100257
I00
sS'group_name'
p100258
S'Advanced'
p100259
sa(dp100260
S'description'
p100261
g3
sS'cpp_type'
p100262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100263
sS'default'
p100264
S'FeatureVolumeFraction'
p100265
sS'name'
p100266
S'type'
p100267
sS'required'
p100268
I00
sS'group_name'
p100269
Nsa(dp100270
S'description'
p100271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100272
sS'cpp_type'
p100273
S'bool'
p100274
sS'default'
p100275
S'0'
p100276
sS'name'
p100277
S'use_displaced_mesh'
p100278
sS'required'
p100279
I00
sS'group_name'
p100280
S'Advanced'
p100281
sa(dp100282
S'name'
p100283
S'value_type'
p100284
sS'cpp_type'
p100285
S'MooseEnum'
p100286
sS'default'
p100287
S'VOLUME_FRACTION'
p100288
sS'description'
p100289
S'The value to output (VOLUME_FRACTION or AVRAMI value)\n'
p100290
sS'required'
p100291
I00
sS'options'
p100292
S'VOLUME_FRACTION AVRAMI'
p100293
sS'group_name'
p100294
NsasS'name'
p100295
S'/Postprocessors/FeatureVolumeFraction'
p100296
sa(dp100297
S'description'
p100298
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p100299
sS'subblocks'
p100300
NsS'parameters'
p100301
(lp100302
(dp100303
S'description'
p100304
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100305
sS'cpp_type'
p100306
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100307
sS'default'
p100308
g3
sS'name'
p100309
S'control_tags'
p100310
sS'required'
p100311
I00
sS'group_name'
p100312
S'Advanced'
p100313
sa(dp100314
S'description'
p100315
S'Maximum number of bisections to perform.\n'
p100316
sS'cpp_type'
p100317
S'unsigned int'
p100318
sS'default'
p100319
S'36'
p100320
sS'name'
p100321
S'depth'
p100322
sS'required'
p100323
I00
sS'group_name'
p100324
Nsa(dp100325
S'description'
p100326
S'Set the enabled status of the MooseObject.\n'
p100327
sS'cpp_type'
p100328
S'bool'
p100329
sS'default'
p100330
S'1'
p100331
sS'name'
p100332
S'enable'
p100333
sS'required'
p100334
I00
sS'group_name'
p100335
S'Advanced'
p100336
sa(dp100337
S'description'
p100338
S'End point of the sampling line.\n'
p100339
sS'cpp_type'
p100340
S'libMesh::Point'
p100341
sS'default'
p100342
g3
sS'name'
p100343
S'end_point'
p100344
sS'required'
p100345
I00
sS'group_name'
p100346
Nsa(dp100347
S'name'
p100348
S'execute_on'
p100349
sS'cpp_type'
p100350
S'MultiMooseEnum'
p100351
sS'default'
p100352
S'TIMESTEP_END'
p100353
sS'description'
p100354
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100355
sS'required'
p100356
I00
sS'options'
p100357
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100358
sS'group_name'
p100359
Nsa(dp100360
S'description'
p100361
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100362
sS'cpp_type'
p100363
S'std::vector<OutputName, std::allocator<OutputName> >'
p100364
sS'default'
p100365
g3
sS'name'
p100366
S'outputs'
p100367
sS'required'
p100368
I00
sS'group_name'
p100369
S'Advanced'
p100370
sa(dp100371
S'description'
p100372
S'Start point of the sampling line.\n'
p100373
sS'cpp_type'
p100374
S'libMesh::Point'
p100375
sS'default'
p100376
g3
sS'name'
p100377
S'start_point'
p100378
sS'required'
p100379
I00
sS'group_name'
p100380
Nsa(dp100381
S'description'
p100382
S'Target value to locate.\n'
p100383
sS'cpp_type'
p100384
S'double'
p100385
sS'default'
p100386
g3
sS'name'
p100387
S'target'
p100388
sS'required'
p100389
I00
sS'group_name'
p100390
Nsa(dp100391
S'description'
p100392
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p100393
sS'cpp_type'
p100394
S'double'
p100395
sS'default'
p100396
S'1e-10'
p100397
sS'name'
p100398
S'tol'
p100399
sS'required'
p100400
I00
sS'group_name'
p100401
Nsa(dp100402
S'description'
p100403
g3
sS'cpp_type'
p100404
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100405
sS'default'
p100406
S'FindValueOnLine'
p100407
sS'name'
p100408
S'type'
p100409
sS'required'
p100410
I00
sS'group_name'
p100411
Nsa(dp100412
S'description'
p100413
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100414
sS'cpp_type'
p100415
S'bool'
p100416
sS'default'
p100417
S'0'
p100418
sS'name'
p100419
S'use_displaced_mesh'
p100420
sS'required'
p100421
I00
sS'group_name'
p100422
S'Advanced'
p100423
sa(dp100424
S'description'
p100425
S'Variable to inspect\n'
p100426
sS'cpp_type'
p100427
S'std::vector<VariableName>'
p100428
sS'default'
p100429
g3
sS'name'
p100430
S'v'
p100431
sS'required'
p100432
I00
sS'group_name'
p100433
NsasS'name'
p100434
S'/Postprocessors/FindValueOnLine'
p100435
sa(dp100436
S'description'
p100437
g3
sS'subblocks'
p100438
NsS'parameters'
p100439
(lp100440
(dp100441
S'description'
p100442
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p100443
sS'cpp_type'
p100444
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p100445
sS'default'
p100446
g3
sS'name'
p100447
S'boundary'
p100448
sS'required'
p100449
I01
sS'group_name'
p100450
Nsa(dp100451
S'description'
p100452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100453
sS'cpp_type'
p100454
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100455
sS'default'
p100456
g3
sS'name'
p100457
S'control_tags'
p100458
sS'required'
p100459
I00
sS'group_name'
p100460
S'Advanced'
p100461
sa(dp100462
S'description'
p100463
S'Set the enabled status of the MooseObject.\n'
p100464
sS'cpp_type'
p100465
S'bool'
p100466
sS'default'
p100467
S'1'
p100468
sS'name'
p100469
S'enable'
p100470
sS'required'
p100471
I00
sS'group_name'
p100472
S'Advanced'
p100473
sa(dp100474
S'name'
p100475
S'execute_on'
p100476
sS'cpp_type'
p100477
S'MultiMooseEnum'
p100478
sS'default'
p100479
S'TIMESTEP_END'
p100480
sS'description'
p100481
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100482
sS'required'
p100483
I00
sS'options'
p100484
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100485
sS'group_name'
p100486
Nsa(dp100487
S'description'
p100488
S'This postprocessor will return the integral of this function over the boundary\n'
p100489
sS'cpp_type'
p100490
S'FunctionName'
p100491
sS'default'
p100492
S'1'
p100493
sS'name'
p100494
S'function'
p100495
sS'required'
p100496
I00
sS'group_name'
p100497
Nsa(dp100498
S'description'
p100499
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100500
sS'cpp_type'
p100501
S'std::vector<OutputName, std::allocator<OutputName> >'
p100502
sS'default'
p100503
g3
sS'name'
p100504
S'outputs'
p100505
sS'required'
p100506
I00
sS'group_name'
p100507
S'Advanced'
p100508
sa(dp100509
S'description'
p100510
g3
sS'cpp_type'
p100511
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100512
sS'default'
p100513
S'FunctionSideIntegral'
p100514
sS'name'
p100515
S'type'
p100516
sS'required'
p100517
I00
sS'group_name'
p100518
Nsa(dp100519
S'description'
p100520
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100521
sS'cpp_type'
p100522
S'bool'
p100523
sS'default'
p100524
S'0'
p100525
sS'name'
p100526
S'use_displaced_mesh'
p100527
sS'required'
p100528
I00
sS'group_name'
p100529
S'Advanced'
p100530
sasS'name'
p100531
S'/Postprocessors/FunctionSideIntegral'
p100532
sa(dp100533
S'description'
p100534
g3
sS'subblocks'
p100535
NsS'parameters'
p100536
(lp100537
(dp100538
S'description'
p100539
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100540
sS'cpp_type'
p100541
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100542
sS'default'
p100543
g3
sS'name'
p100544
S'control_tags'
p100545
sS'required'
p100546
I00
sS'group_name'
p100547
S'Advanced'
p100548
sa(dp100549
S'description'
p100550
S'Set the enabled status of the MooseObject.\n'
p100551
sS'cpp_type'
p100552
S'bool'
p100553
sS'default'
p100554
S'1'
p100555
sS'name'
p100556
S'enable'
p100557
sS'required'
p100558
I00
sS'group_name'
p100559
S'Advanced'
p100560
sa(dp100561
S'name'
p100562
S'execute_on'
p100563
sS'cpp_type'
p100564
S'MultiMooseEnum'
p100565
sS'default'
p100566
S'TIMESTEP_END'
p100567
sS'description'
p100568
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100569
sS'required'
p100570
I00
sS'options'
p100571
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100572
sS'group_name'
p100573
Nsa(dp100574
S'description'
p100575
S'The function which supplies the postprocessor value.\n'
p100576
sS'cpp_type'
p100577
S'FunctionName'
p100578
sS'default'
p100579
g3
sS'name'
p100580
S'function'
p100581
sS'required'
p100582
I01
sS'group_name'
p100583
Nsa(dp100584
S'description'
p100585
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100586
sS'cpp_type'
p100587
S'std::vector<OutputName, std::allocator<OutputName> >'
p100588
sS'default'
p100589
g3
sS'name'
p100590
S'outputs'
p100591
sS'required'
p100592
I00
sS'group_name'
p100593
S'Advanced'
p100594
sa(dp100595
S'description'
p100596
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p100597
sS'cpp_type'
p100598
S'libMesh::Point'
p100599
sS'default'
p100600
S'0 0 0'
p100601
sS'name'
p100602
S'point'
p100603
sS'required'
p100604
I00
sS'group_name'
p100605
Nsa(dp100606
S'description'
p100607
S'A scale factor to be applied to the function\n'
p100608
sS'cpp_type'
p100609
S'double'
p100610
sS'default'
p100611
S'1'
p100612
sS'name'
p100613
S'scale_factor'
p100614
sS'required'
p100615
I00
sS'group_name'
p100616
Nsa(dp100617
S'description'
p100618
g3
sS'cpp_type'
p100619
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100620
sS'default'
p100621
S'FunctionValuePostprocessor'
p100622
sS'name'
p100623
S'type'
p100624
sS'required'
p100625
I00
sS'group_name'
p100626
Nsa(dp100627
S'description'
p100628
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100629
sS'cpp_type'
p100630
S'bool'
p100631
sS'default'
p100632
S'0'
p100633
sS'name'
p100634
S'use_displaced_mesh'
p100635
sS'required'
p100636
I00
sS'group_name'
p100637
S'Advanced'
p100638
sasS'name'
p100639
S'/Postprocessors/FunctionValuePostprocessor'
p100640
sa(dp100641
S'description'
p100642
S'Calculate total grain boundary length in 2D and area in 3D\n'
p100643
sS'subblocks'
p100644
NsS'parameters'
p100645
(lp100646
(dp100647
S'description'
p100648
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100649
sS'cpp_type'
p100650
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100651
sS'default'
p100652
g3
sS'name'
p100653
S'block'
p100654
sS'required'
p100655
I00
sS'group_name'
p100656
Nsa(dp100657
S'description'
p100658
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100659
sS'cpp_type'
p100660
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100661
sS'default'
p100662
g3
sS'name'
p100663
S'control_tags'
p100664
sS'required'
p100665
I00
sS'group_name'
p100666
S'Advanced'
p100667
sa(dp100668
S'description'
p100669
S'Set the enabled status of the MooseObject.\n'
p100670
sS'cpp_type'
p100671
S'bool'
p100672
sS'default'
p100673
S'1'
p100674
sS'name'
p100675
S'enable'
p100676
sS'required'
p100677
I00
sS'group_name'
p100678
S'Advanced'
p100679
sa(dp100680
S'name'
p100681
S'execute_on'
p100682
sS'cpp_type'
p100683
S'MultiMooseEnum'
p100684
sS'default'
p100685
S'TIMESTEP_END'
p100686
sS'description'
p100687
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100688
sS'required'
p100689
I00
sS'options'
p100690
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100691
sS'group_name'
p100692
Nsa(dp100693
S'description'
p100694
S'Number of order parameters contacting a boundary (should be 2.0 in polycrystals and 1.0 for dispersed particles)\n'
p100695
sS'cpp_type'
p100696
S'double'
p100697
sS'default'
p100698
S'2'
p100699
sS'name'
p100700
S'grains_per_side'
p100701
sS'required'
p100702
I00
sS'group_name'
p100703
Nsa(dp100704
S'description'
p100705
S'Array of coupled variables (num_name)\n'
p100706
sS'cpp_type'
p100707
S'unsigned int'
p100708
sS'default'
p100709
g3
sS'name'
p100710
S'op_num'
p100711
sS'required'
p100712
I00
sS'group_name'
p100713
Nsa(dp100714
S'description'
p100715
S'Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n'
p100716
sS'cpp_type'
p100717
S'double'
p100718
sS'default'
p100719
S'1'
p100720
sS'name'
p100721
S'op_range'
p100722
sS'required'
p100723
I00
sS'group_name'
p100724
Nsa(dp100725
S'description'
p100726
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100727
sS'cpp_type'
p100728
S'std::vector<OutputName, std::allocator<OutputName> >'
p100729
sS'default'
p100730
g3
sS'name'
p100731
S'outputs'
p100732
sS'required'
p100733
I00
sS'group_name'
p100734
S'Advanced'
p100735
sa(dp100736
S'description'
p100737
S'The seed for the master random number generator\n'
p100738
sS'cpp_type'
p100739
S'unsigned int'
p100740
sS'default'
p100741
S'0'
p100742
sS'name'
p100743
S'seed'
p100744
sS'required'
p100745
I00
sS'group_name'
p100746
S'Advanced'
p100747
sa(dp100748
S'description'
p100749
g3
sS'cpp_type'
p100750
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100751
sS'default'
p100752
S'GrainBoundaryArea'
p100753
sS'name'
p100754
S'type'
p100755
sS'required'
p100756
I00
sS'group_name'
p100757
Nsa(dp100758
S'description'
p100759
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100760
sS'cpp_type'
p100761
S'bool'
p100762
sS'default'
p100763
S'0'
p100764
sS'name'
p100765
S'use_displaced_mesh'
p100766
sS'required'
p100767
I00
sS'group_name'
p100768
S'Advanced'
p100769
sa(dp100770
S'description'
p100771
S'Array of coupled variables\n'
p100772
sS'cpp_type'
p100773
S'std::vector<VariableName>'
p100774
sS'default'
p100775
g3
sS'name'
p100776
S'v'
p100777
sS'required'
p100778
I01
sS'group_name'
p100779
Nsa(dp100780
S'description'
p100781
S'Array of coupled variables (base_name)\n'
p100782
sS'cpp_type'
p100783
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100784
sS'default'
p100785
g3
sS'name'
p100786
S'var_name_base'
p100787
sS'required'
p100788
I00
sS'group_name'
p100789
NsasS'name'
p100790
S'/Postprocessors/GrainBoundaryArea'
p100791
sa(dp100792
S'description'
p100793
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p100794
sS'subblocks'
p100795
NsS'parameters'
p100796
(lp100797
(dp100798
S'description'
p100799
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p100800
sS'cpp_type'
p100801
S'bool'
p100802
sS'default'
p100803
S'0'
p100804
sS'name'
p100805
S'compute_halo_maps'
p100806
sS'required'
p100807
I00
sS'group_name'
p100808
Nsa(dp100809
S'description'
p100810
S'Instruct the Postprocessor to compute the active vars to features map\n'
p100811
sS'cpp_type'
p100812
S'bool'
p100813
sS'default'
p100814
S'0'
p100815
sS'name'
p100816
S'compute_var_to_feature_map'
p100817
sS'required'
p100818
I00
sS'group_name'
p100819
Nsa(dp100820
S'description'
p100821
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p100822
sS'cpp_type'
p100823
S'bool'
p100824
sS'default'
p100825
S'1'
p100826
sS'name'
p100827
S'condense_map_info'
p100828
sS'required'
p100829
I00
sS'group_name'
p100830
S'Advanced'
p100831
sa(dp100832
S'description'
p100833
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p100834
sS'cpp_type'
p100835
S'double'
p100836
sS'default'
p100837
S'0.09'
p100838
sS'name'
p100839
S'connecting_threshold'
p100840
sS'required'
p100841
I00
sS'group_name'
p100842
Nsa(dp100843
S'description'
p100844
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100845
sS'cpp_type'
p100846
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100847
sS'default'
p100848
g3
sS'name'
p100849
S'control_tags'
p100850
sS'required'
p100851
I00
sS'group_name'
p100852
S'Advanced'
p100853
sa(dp100854
S'description'
p100855
S'Optional: EBSD Reader for initial condition\n'
p100856
sS'cpp_type'
p100857
S'UserObjectName'
p100858
sS'default'
p100859
g3
sS'name'
p100860
S'ebsd_reader'
p100861
sS'required'
p100862
I00
sS'group_name'
p100863
Nsa(dp100864
S'description'
p100865
S'Set the enabled status of the MooseObject.\n'
p100866
sS'cpp_type'
p100867
S'bool'
p100868
sS'default'
p100869
S'1'
p100870
sS'name'
p100871
S'enable'
p100872
sS'required'
p100873
I00
sS'group_name'
p100874
S'Advanced'
p100875
sa(dp100876
S'description'
p100877
S'Instruct the Postprocessor to populate the variable index map.\n'
p100878
sS'cpp_type'
p100879
S'bool'
p100880
sS'default'
p100881
S'1'
p100882
sS'name'
p100883
S'enable_var_coloring'
p100884
sS'required'
p100885
I00
sS'group_name'
p100886
Nsa(dp100887
S'description'
p100888
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p100889
sS'cpp_type'
p100890
S'bool'
p100891
sS'default'
p100892
S'0'
p100893
sS'name'
p100894
S'error_on_grain_creation'
p100895
sS'required'
p100896
I00
sS'group_name'
p100897
Nsa(dp100898
S'name'
p100899
S'execute_on'
p100900
sS'cpp_type'
p100901
S'MultiMooseEnum'
p100902
sS'default'
p100903
S'INITIAL TIMESTEP_END'
p100904
sS'description'
p100905
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100906
sS'required'
p100907
I00
sS'options'
p100908
S'none initial linear nonlinear timestep_end timestep_begin custom'
p100909
sS'group_name'
p100910
Nsa(dp100911
S'name'
p100912
S'flood_entity_type'
p100913
sS'cpp_type'
p100914
S'MooseEnum'
p100915
sS'default'
p100916
S'ELEMENTAL'
p100917
sS'description'
p100918
S'Determines whether the flood algorithm runs on nodes or elements\n'
p100919
sS'required'
p100920
I00
sS'options'
p100921
S'NODAL ELEMENTAL'
p100922
sS'group_name'
p100923
Nsa(dp100924
S'description'
p100925
S'The thickness of the halo surrounding each feature.\n'
p100926
sS'cpp_type'
p100927
S'unsigned int'
p100928
sS'default'
p100929
S'2'
p100930
sS'name'
p100931
S'halo_level'
p100932
sS'required'
p100933
I00
sS'group_name'
p100934
Nsa(dp100935
S'description'
p100936
S'Array of coupled variables (num_name)\n'
p100937
sS'cpp_type'
p100938
S'unsigned int'
p100939
sS'default'
p100940
g3
sS'name'
p100941
S'op_num'
p100942
sS'required'
p100943
I00
sS'group_name'
p100944
Nsa(dp100945
S'description'
p100946
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100947
sS'cpp_type'
p100948
S'std::vector<OutputName, std::allocator<OutputName> >'
p100949
sS'default'
p100950
g3
sS'name'
p100951
S'outputs'
p100952
sS'required'
p100953
I00
sS'group_name'
p100954
S'Advanced'
p100955
sa(dp100956
S'description'
p100957
S'EBSD phase number from which to retrieve information\n'
p100958
sS'cpp_type'
p100959
S'unsigned int'
p100960
sS'default'
p100961
g3
sS'name'
p100962
S'phase'
p100963
sS'required'
p100964
I00
sS'group_name'
p100965
Nsa(dp100966
S'description'
p100967
S'Indicates whether remapping should be done or not (default: true)\n'
p100968
sS'cpp_type'
p100969
S'bool'
p100970
sS'default'
p100971
S'1'
p100972
sS'name'
p100973
S'remap_grains'
p100974
sS'required'
p100975
I00
sS'group_name'
p100976
Nsa(dp100977
S'description'
p100978
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p100979
sS'cpp_type'
p100980
S'unsigned short'
p100981
sS'default'
p100982
S'0'
p100983
sS'name'
p100984
S'reserve_op'
p100985
sS'required'
p100986
I00
sS'group_name'
p100987
Nsa(dp100988
S'description'
p100989
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p100990
sS'cpp_type'
p100991
S'double'
p100992
sS'default'
p100993
S'0.95'
p100994
sS'name'
p100995
S'reserve_op_threshold'
p100996
sS'required'
p100997
I00
sS'group_name'
p100998
Nsa(dp100999
S'description'
p101000
S'The threshold value for which a new feature may be started\n'
p101001
sS'cpp_type'
p101002
S'double'
p101003
sS'default'
p101004
S'0.1'
p101005
sS'name'
p101006
S'threshold'
p101007
sS'required'
p101008
I00
sS'group_name'
p101009
Nsa(dp101010
S'description'
p101011
S'The timestep for when we should start tracking grains\n'
p101012
sS'cpp_type'
p101013
S'int'
p101014
sS'default'
p101015
S'0'
p101016
sS'name'
p101017
S'tracking_step'
p101018
sS'required'
p101019
I00
sS'group_name'
p101020
Nsa(dp101021
S'description'
p101022
g3
sS'cpp_type'
p101023
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101024
sS'default'
p101025
S'GrainTracker'
p101026
sS'name'
p101027
S'type'
p101028
sS'required'
p101029
I00
sS'group_name'
p101030
Nsa(dp101031
S'description'
p101032
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101033
sS'cpp_type'
p101034
S'bool'
p101035
sS'default'
p101036
S'0'
p101037
sS'name'
p101038
S'use_displaced_mesh'
p101039
sS'required'
p101040
I00
sS'group_name'
p101041
S'Advanced'
p101042
sa(dp101043
S'description'
p101044
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p101045
sS'cpp_type'
p101046
S'bool'
p101047
sS'default'
p101048
S'1'
p101049
sS'name'
p101050
S'use_global_numbering'
p101051
sS'required'
p101052
I00
sS'group_name'
p101053
S'Advanced'
p101054
sa(dp101055
S'description'
p101056
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p101057
sS'cpp_type'
p101058
S'bool'
p101059
sS'default'
p101060
S'1'
p101061
sS'name'
p101062
S'use_less_than_threshold_comparison'
p101063
sS'required'
p101064
I00
sS'group_name'
p101065
Nsa(dp101066
S'description'
p101067
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p101068
sS'cpp_type'
p101069
S'bool'
p101070
sS'default'
p101071
S'0'
p101072
sS'name'
p101073
S'use_single_map'
p101074
sS'required'
p101075
I00
sS'group_name'
p101076
S'Advanced'
p101077
sa(dp101078
S'description'
p101079
S'Array of coupled variables (base_name)\n'
p101080
sS'cpp_type'
p101081
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101082
sS'default'
p101083
g3
sS'name'
p101084
S'var_name_base'
p101085
sS'required'
p101086
I00
sS'group_name'
p101087
Nsa(dp101088
S'description'
p101089
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p101090
sS'cpp_type'
p101091
S'std::vector<VariableName>'
p101092
sS'default'
p101093
g3
sS'name'
p101094
S'variable'
p101095
sS'required'
p101096
I01
sS'group_name'
p101097
NsasS'name'
p101098
S'/Postprocessors/GrainTracker'
p101099
sa(dp101100
S'description'
p101101
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p101102
sS'subblocks'
p101103
NsS'parameters'
p101104
(lp101105
(dp101106
S'description'
p101107
S'Unrotated stiffness tensor\n'
p101108
sS'cpp_type'
p101109
S'std::vector<double, std::allocator<double> >'
p101110
sS'default'
p101111
g3
sS'name'
p101112
S'C_ijkl'
p101113
sS'required'
p101114
I01
sS'group_name'
p101115
Nsa(dp101116
S'description'
p101117
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p101118
sS'cpp_type'
p101119
S'bool'
p101120
sS'default'
p101121
S'0'
p101122
sS'name'
p101123
S'compute_halo_maps'
p101124
sS'required'
p101125
I00
sS'group_name'
p101126
Nsa(dp101127
S'description'
p101128
S'Instruct the Postprocessor to compute the active vars to features map\n'
p101129
sS'cpp_type'
p101130
S'bool'
p101131
sS'default'
p101132
S'0'
p101133
sS'name'
p101134
S'compute_var_to_feature_map'
p101135
sS'required'
p101136
I00
sS'group_name'
p101137
Nsa(dp101138
S'description'
p101139
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p101140
sS'cpp_type'
p101141
S'bool'
p101142
sS'default'
p101143
S'1'
p101144
sS'name'
p101145
S'condense_map_info'
p101146
sS'required'
p101147
I00
sS'group_name'
p101148
S'Advanced'
p101149
sa(dp101150
S'description'
p101151
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p101152
sS'cpp_type'
p101153
S'double'
p101154
sS'default'
p101155
S'0.09'
p101156
sS'name'
p101157
S'connecting_threshold'
p101158
sS'required'
p101159
I00
sS'group_name'
p101160
Nsa(dp101161
S'description'
p101162
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101163
sS'cpp_type'
p101164
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101165
sS'default'
p101166
g3
sS'name'
p101167
S'control_tags'
p101168
sS'required'
p101169
I00
sS'group_name'
p101170
S'Advanced'
p101171
sa(dp101172
S'description'
p101173
S'Optional: EBSD Reader for initial condition\n'
p101174
sS'cpp_type'
p101175
S'UserObjectName'
p101176
sS'default'
p101177
g3
sS'name'
p101178
S'ebsd_reader'
p101179
sS'required'
p101180
I00
sS'group_name'
p101181
Nsa(dp101182
S'description'
p101183
S'Set the enabled status of the MooseObject.\n'
p101184
sS'cpp_type'
p101185
S'bool'
p101186
sS'default'
p101187
S'1'
p101188
sS'name'
p101189
S'enable'
p101190
sS'required'
p101191
I00
sS'group_name'
p101192
S'Advanced'
p101193
sa(dp101194
S'description'
p101195
S'Instruct the Postprocessor to populate the variable index map.\n'
p101196
sS'cpp_type'
p101197
S'bool'
p101198
sS'default'
p101199
S'1'
p101200
sS'name'
p101201
S'enable_var_coloring'
p101202
sS'required'
p101203
I00
sS'group_name'
p101204
Nsa(dp101205
S'description'
p101206
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p101207
sS'cpp_type'
p101208
S'bool'
p101209
sS'default'
p101210
S'0'
p101211
sS'name'
p101212
S'error_on_grain_creation'
p101213
sS'required'
p101214
I00
sS'group_name'
p101215
Nsa(dp101216
S'description'
p101217
S'Name of Euler angle provider user object\n'
p101218
sS'cpp_type'
p101219
S'UserObjectName'
p101220
sS'default'
p101221
g3
sS'name'
p101222
S'euler_angle_provider'
p101223
sS'required'
p101224
I01
sS'group_name'
p101225
Nsa(dp101226
S'name'
p101227
S'execute_on'
p101228
sS'cpp_type'
p101229
S'MultiMooseEnum'
p101230
sS'default'
p101231
S'INITIAL TIMESTEP_END'
p101232
sS'description'
p101233
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101234
sS'required'
p101235
I00
sS'options'
p101236
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101237
sS'group_name'
p101238
Nsa(dp101239
S'name'
p101240
S'fill_method'
p101241
sS'cpp_type'
p101242
S'MooseEnum'
p101243
sS'default'
p101244
S'symmetric9'
p101245
sS'description'
p101246
S'The fill method\n'
p101247
sS'required'
p101248
I00
sS'options'
p101249
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p101250
sS'group_name'
p101251
Nsa(dp101252
S'name'
p101253
S'flood_entity_type'
p101254
sS'cpp_type'
p101255
S'MooseEnum'
p101256
sS'default'
p101257
S'ELEMENTAL'
p101258
sS'description'
p101259
S'Determines whether the flood algorithm runs on nodes or elements\n'
p101260
sS'required'
p101261
I00
sS'options'
p101262
S'NODAL ELEMENTAL'
p101263
sS'group_name'
p101264
Nsa(dp101265
S'description'
p101266
S'The thickness of the halo surrounding each feature.\n'
p101267
sS'cpp_type'
p101268
S'unsigned int'
p101269
sS'default'
p101270
S'2'
p101271
sS'name'
p101272
S'halo_level'
p101273
sS'required'
p101274
I00
sS'group_name'
p101275
Nsa(dp101276
S'description'
p101277
S'Array of coupled variables (num_name)\n'
p101278
sS'cpp_type'
p101279
S'unsigned int'
p101280
sS'default'
p101281
g3
sS'name'
p101282
S'op_num'
p101283
sS'required'
p101284
I00
sS'group_name'
p101285
Nsa(dp101286
S'description'
p101287
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101288
sS'cpp_type'
p101289
S'std::vector<OutputName, std::allocator<OutputName> >'
p101290
sS'default'
p101291
g3
sS'name'
p101292
S'outputs'
p101293
sS'required'
p101294
I00
sS'group_name'
p101295
S'Advanced'
p101296
sa(dp101297
S'description'
p101298
S'EBSD phase number from which to retrieve information\n'
p101299
sS'cpp_type'
p101300
S'unsigned int'
p101301
sS'default'
p101302
g3
sS'name'
p101303
S'phase'
p101304
sS'required'
p101305
I00
sS'group_name'
p101306
Nsa(dp101307
S'description'
p101308
S'Generate random rotations when the Euler Angle provider runs out of data (otherwise error out)\n'
p101309
sS'cpp_type'
p101310
S'bool'
p101311
sS'default'
p101312
S'1'
p101313
sS'name'
p101314
S'random_rotations'
p101315
sS'required'
p101316
I00
sS'group_name'
p101317
Nsa(dp101318
S'description'
p101319
S'Indicates whether remapping should be done or not (default: true)\n'
p101320
sS'cpp_type'
p101321
S'bool'
p101322
sS'default'
p101323
S'1'
p101324
sS'name'
p101325
S'remap_grains'
p101326
sS'required'
p101327
I00
sS'group_name'
p101328
Nsa(dp101329
S'description'
p101330
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p101331
sS'cpp_type'
p101332
S'unsigned short'
p101333
sS'default'
p101334
S'0'
p101335
sS'name'
p101336
S'reserve_op'
p101337
sS'required'
p101338
I00
sS'group_name'
p101339
Nsa(dp101340
S'description'
p101341
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p101342
sS'cpp_type'
p101343
S'double'
p101344
sS'default'
p101345
S'0.95'
p101346
sS'name'
p101347
S'reserve_op_threshold'
p101348
sS'required'
p101349
I00
sS'group_name'
p101350
Nsa(dp101351
S'description'
p101352
S'The threshold value for which a new feature may be started\n'
p101353
sS'cpp_type'
p101354
S'double'
p101355
sS'default'
p101356
S'0.1'
p101357
sS'name'
p101358
S'threshold'
p101359
sS'required'
p101360
I00
sS'group_name'
p101361
Nsa(dp101362
S'description'
p101363
S'The timestep for when we should start tracking grains\n'
p101364
sS'cpp_type'
p101365
S'int'
p101366
sS'default'
p101367
S'0'
p101368
sS'name'
p101369
S'tracking_step'
p101370
sS'required'
p101371
I00
sS'group_name'
p101372
Nsa(dp101373
S'description'
p101374
g3
sS'cpp_type'
p101375
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101376
sS'default'
p101377
S'GrainTrackerElasticity'
p101378
sS'name'
p101379
S'type'
p101380
sS'required'
p101381
I00
sS'group_name'
p101382
Nsa(dp101383
S'description'
p101384
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101385
sS'cpp_type'
p101386
S'bool'
p101387
sS'default'
p101388
S'0'
p101389
sS'name'
p101390
S'use_displaced_mesh'
p101391
sS'required'
p101392
I00
sS'group_name'
p101393
S'Advanced'
p101394
sa(dp101395
S'description'
p101396
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p101397
sS'cpp_type'
p101398
S'bool'
p101399
sS'default'
p101400
S'1'
p101401
sS'name'
p101402
S'use_global_numbering'
p101403
sS'required'
p101404
I00
sS'group_name'
p101405
S'Advanced'
p101406
sa(dp101407
S'description'
p101408
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p101409
sS'cpp_type'
p101410
S'bool'
p101411
sS'default'
p101412
S'1'
p101413
sS'name'
p101414
S'use_less_than_threshold_comparison'
p101415
sS'required'
p101416
I00
sS'group_name'
p101417
Nsa(dp101418
S'description'
p101419
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p101420
sS'cpp_type'
p101421
S'bool'
p101422
sS'default'
p101423
S'0'
p101424
sS'name'
p101425
S'use_single_map'
p101426
sS'required'
p101427
I00
sS'group_name'
p101428
S'Advanced'
p101429
sa(dp101430
S'description'
p101431
S'Array of coupled variables (base_name)\n'
p101432
sS'cpp_type'
p101433
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101434
sS'default'
p101435
g3
sS'name'
p101436
S'var_name_base'
p101437
sS'required'
p101438
I00
sS'group_name'
p101439
Nsa(dp101440
S'description'
p101441
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p101442
sS'cpp_type'
p101443
S'std::vector<VariableName>'
p101444
sS'default'
p101445
g3
sS'name'
p101446
S'variable'
p101447
sS'required'
p101448
I01
sS'group_name'
p101449
NsasS'name'
p101450
S'/Postprocessors/GrainTrackerElasticity'
p101451
sa(dp101452
S'description'
p101453
g3
sS'subblocks'
p101454
NsS'parameters'
p101455
(lp101456
(dp101457
S'description'
p101458
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101459
sS'cpp_type'
p101460
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101461
sS'default'
p101462
g3
sS'name'
p101463
S'block'
p101464
sS'required'
p101465
I00
sS'group_name'
p101466
Nsa(dp101467
S'description'
p101468
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101469
sS'cpp_type'
p101470
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101471
sS'default'
p101472
g3
sS'name'
p101473
S'boundary'
p101474
sS'required'
p101475
I00
sS'group_name'
p101476
Nsa(dp101477
S'description'
p101478
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101479
sS'cpp_type'
p101480
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101481
sS'default'
p101482
g3
sS'name'
p101483
S'control_tags'
p101484
sS'required'
p101485
I00
sS'group_name'
p101486
S'Advanced'
p101487
sa(dp101488
S'description'
p101489
S'Set the enabled status of the MooseObject.\n'
p101490
sS'cpp_type'
p101491
S'bool'
p101492
sS'default'
p101493
S'1'
p101494
sS'name'
p101495
S'enable'
p101496
sS'required'
p101497
I00
sS'group_name'
p101498
S'Advanced'
p101499
sa(dp101500
S'description'
p101501
S'Array containing the rest of the order parameters\n'
p101502
sS'cpp_type'
p101503
S'std::vector<VariableName>'
p101504
sS'default'
p101505
g3
sS'name'
p101506
S'eta'
p101507
sS'required'
p101508
I01
sS'group_name'
p101509
Nsa(dp101510
S'name'
p101511
S'execute_on'
p101512
sS'cpp_type'
p101513
S'MultiMooseEnum'
p101514
sS'default'
p101515
S'TIMESTEP_END'
p101516
sS'description'
p101517
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101518
sS'required'
p101519
I00
sS'options'
p101520
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101521
sS'group_name'
p101522
Nsa(dp101523
S'description'
p101524
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101525
sS'cpp_type'
p101526
S'std::vector<OutputName, std::allocator<OutputName> >'
p101527
sS'default'
p101528
g3
sS'name'
p101529
S'outputs'
p101530
sS'required'
p101531
I00
sS'group_name'
p101532
S'Advanced'
p101533
sa(dp101534
S'description'
p101535
S'The seed for the master random number generator\n'
p101536
sS'cpp_type'
p101537
S'unsigned int'
p101538
sS'default'
p101539
S'0'
p101540
sS'name'
p101541
S'seed'
p101542
sS'required'
p101543
I00
sS'group_name'
p101544
S'Advanced'
p101545
sa(dp101546
S'description'
p101547
g3
sS'cpp_type'
p101548
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101549
sS'default'
p101550
S'IMCFraction'
p101551
sS'name'
p101552
S'type'
p101553
sS'required'
p101554
I00
sS'group_name'
p101555
Nsa(dp101556
S'description'
p101557
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p101558
sS'cpp_type'
p101559
S'bool'
p101560
sS'default'
p101561
S'1'
p101562
sS'name'
p101563
S'unique_node_execute'
p101564
sS'required'
p101565
I00
sS'group_name'
p101566
Nsa(dp101567
S'description'
p101568
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101569
sS'cpp_type'
p101570
S'bool'
p101571
sS'default'
p101572
S'0'
p101573
sS'name'
p101574
S'use_displaced_mesh'
p101575
sS'required'
p101576
I00
sS'group_name'
p101577
S'Advanced'
p101578
sa(dp101579
S'description'
p101580
S'The name of the variable that this postprocessor operates on\n'
p101581
sS'cpp_type'
p101582
S'std::vector<VariableName>'
p101583
sS'default'
p101584
g3
sS'name'
p101585
S'variable'
p101586
sS'required'
p101587
I01
sS'group_name'
p101588
NsasS'name'
p101589
S'/Postprocessors/IMCFraction'
p101590
sa(dp101591
S'description'
p101592
g3
sS'subblocks'
p101593
NsS'parameters'
p101594
(lp101595
(dp101596
S'description'
p101597
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101598
sS'cpp_type'
p101599
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101600
sS'default'
p101601
g3
sS'name'
p101602
S'block'
p101603
sS'required'
p101604
I00
sS'group_name'
p101605
Nsa(dp101606
S'description'
p101607
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101608
sS'cpp_type'
p101609
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101610
sS'default'
p101611
g3
sS'name'
p101612
S'control_tags'
p101613
sS'required'
p101614
I00
sS'group_name'
p101615
S'Advanced'
p101616
sa(dp101617
S'description'
p101618
S'Set the enabled status of the MooseObject.\n'
p101619
sS'cpp_type'
p101620
S'bool'
p101621
sS'default'
p101622
S'1'
p101623
sS'name'
p101624
S'enable'
p101625
sS'required'
p101626
I00
sS'group_name'
p101627
S'Advanced'
p101628
sa(dp101629
S'name'
p101630
S'execute_on'
p101631
sS'cpp_type'
p101632
S'MultiMooseEnum'
p101633
sS'default'
p101634
S'TIMESTEP_END'
p101635
sS'description'
p101636
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101637
sS'required'
p101638
I00
sS'options'
p101639
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101640
sS'group_name'
p101641
Nsa(dp101642
S'description'
p101643
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101644
sS'cpp_type'
p101645
S'std::vector<OutputName, std::allocator<OutputName> >'
p101646
sS'default'
p101647
g3
sS'name'
p101648
S'outputs'
p101649
sS'required'
p101650
I00
sS'group_name'
p101651
S'Advanced'
p101652
sa(dp101653
S'description'
p101654
S'The seed for the master random number generator\n'
p101655
sS'cpp_type'
p101656
S'unsigned int'
p101657
sS'default'
p101658
S'0'
p101659
sS'name'
p101660
S'seed'
p101661
sS'required'
p101662
I00
sS'group_name'
p101663
S'Advanced'
p101664
sa(dp101665
S'description'
p101666
g3
sS'cpp_type'
p101667
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101668
sS'default'
p101669
S'Mass'
p101670
sS'name'
p101671
S'type'
p101672
sS'required'
p101673
I00
sS'group_name'
p101674
Nsa(dp101675
S'description'
p101676
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101677
sS'cpp_type'
p101678
S'bool'
p101679
sS'default'
p101680
S'1'
p101681
sS'name'
p101682
S'use_displaced_mesh'
p101683
sS'required'
p101684
I00
sS'group_name'
p101685
S'Advanced'
p101686
sa(dp101687
S'description'
p101688
S'The name of the variable that this object operates on\n'
p101689
sS'cpp_type'
p101690
S'std::vector<VariableName>'
p101691
sS'default'
p101692
g3
sS'name'
p101693
S'variable'
p101694
sS'required'
p101695
I01
sS'group_name'
p101696
NsasS'name'
p101697
S'/Postprocessors/Mass'
p101698
sa(dp101699
S'description'
p101700
g3
sS'subblocks'
p101701
NsS'parameters'
p101702
(lp101703
(dp101704
S'description'
p101705
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101706
sS'cpp_type'
p101707
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101708
sS'default'
p101709
g3
sS'name'
p101710
S'block'
p101711
sS'required'
p101712
I00
sS'group_name'
p101713
Nsa(dp101714
S'description'
p101715
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101716
sS'cpp_type'
p101717
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101718
sS'default'
p101719
g3
sS'name'
p101720
S'control_tags'
p101721
sS'required'
p101722
I00
sS'group_name'
p101723
S'Advanced'
p101724
sa(dp101725
S'description'
p101726
S'Set the enabled status of the MooseObject.\n'
p101727
sS'cpp_type'
p101728
S'bool'
p101729
sS'default'
p101730
S'1'
p101731
sS'name'
p101732
S'enable'
p101733
sS'required'
p101734
I00
sS'group_name'
p101735
S'Advanced'
p101736
sa(dp101737
S'name'
p101738
S'execute_on'
p101739
sS'cpp_type'
p101740
S'MultiMooseEnum'
p101741
sS'default'
p101742
S'TIMESTEP_END'
p101743
sS'description'
p101744
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101745
sS'required'
p101746
I00
sS'options'
p101747
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101748
sS'group_name'
p101749
Nsa(dp101750
S'description'
p101751
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p101752
sS'cpp_type'
p101753
S'unsigned int'
p101754
sS'default'
p101755
g3
sS'name'
p101756
S'index_i'
p101757
sS'required'
p101758
I01
sS'group_name'
p101759
Nsa(dp101760
S'description'
p101761
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p101762
sS'cpp_type'
p101763
S'unsigned int'
p101764
sS'default'
p101765
g3
sS'name'
p101766
S'index_j'
p101767
sS'required'
p101768
I01
sS'group_name'
p101769
Nsa(dp101770
S'description'
p101771
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101772
sS'cpp_type'
p101773
S'std::vector<OutputName, std::allocator<OutputName> >'
p101774
sS'default'
p101775
g3
sS'name'
p101776
S'outputs'
p101777
sS'required'
p101778
I00
sS'group_name'
p101779
S'Advanced'
p101780
sa(dp101781
S'description'
p101782
S'The rank two material tensor name\n'
p101783
sS'cpp_type'
p101784
S'MaterialPropertyName'
p101785
sS'default'
p101786
g3
sS'name'
p101787
S'rank_two_tensor'
p101788
sS'required'
p101789
I01
sS'group_name'
p101790
Nsa(dp101791
S'description'
p101792
S'The seed for the master random number generator\n'
p101793
sS'cpp_type'
p101794
S'unsigned int'
p101795
sS'default'
p101796
S'0'
p101797
sS'name'
p101798
S'seed'
p101799
sS'required'
p101800
I00
sS'group_name'
p101801
S'Advanced'
p101802
sa(dp101803
S'description'
p101804
g3
sS'cpp_type'
p101805
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101806
sS'default'
p101807
S'MaterialTensorIntegral'
p101808
sS'name'
p101809
S'type'
p101810
sS'required'
p101811
I00
sS'group_name'
p101812
Nsa(dp101813
S'description'
p101814
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101815
sS'cpp_type'
p101816
S'bool'
p101817
sS'default'
p101818
S'1'
p101819
sS'name'
p101820
S'use_displaced_mesh'
p101821
sS'required'
p101822
I00
sS'group_name'
p101823
S'Advanced'
p101824
sasS'name'
p101825
S'/Postprocessors/MaterialTensorIntegral'
p101826
sa(dp101827
S'description'
p101828
S'Memory usage statistics for the running simulation.\n'
p101829
sS'subblocks'
p101830
NsS'parameters'
p101831
(lp101832
(dp101833
S'description'
p101834
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101835
sS'cpp_type'
p101836
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101837
sS'default'
p101838
g3
sS'name'
p101839
S'control_tags'
p101840
sS'required'
p101841
I00
sS'group_name'
p101842
S'Advanced'
p101843
sa(dp101844
S'description'
p101845
S'Set the enabled status of the MooseObject.\n'
p101846
sS'cpp_type'
p101847
S'bool'
p101848
sS'default'
p101849
S'1'
p101850
sS'name'
p101851
S'enable'
p101852
sS'required'
p101853
I00
sS'group_name'
p101854
S'Advanced'
p101855
sa(dp101856
S'name'
p101857
S'execute_on'
p101858
sS'cpp_type'
p101859
S'MultiMooseEnum'
p101860
sS'default'
p101861
S'TIMESTEP_END'
p101862
sS'description'
p101863
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101864
sS'required'
p101865
I00
sS'options'
p101866
S'none initial linear nonlinear timestep_end timestep_begin custom'
p101867
sS'group_name'
p101868
Nsa(dp101869
S'name'
p101870
S'mem_type'
p101871
sS'cpp_type'
p101872
S'MooseEnum'
p101873
sS'default'
p101874
S'virtual_memory'
p101875
sS'description'
p101876
S'Memory metric to report.\n'
p101877
sS'required'
p101878
I00
sS'options'
p101879
S'virtual_memory physical_memory page_faults'
p101880
sS'group_name'
p101881
Nsa(dp101882
S'description'
p101883
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101884
sS'cpp_type'
p101885
S'std::vector<OutputName, std::allocator<OutputName> >'
p101886
sS'default'
p101887
g3
sS'name'
p101888
S'outputs'
p101889
sS'required'
p101890
I00
sS'group_name'
p101891
S'Advanced'
p101892
sa(dp101893
S'description'
p101894
S'If the postprocessor is executed more than one during a time step, report the aggregated peak value.\n'
p101895
sS'cpp_type'
p101896
S'bool'
p101897
sS'default'
p101898
S'1'
p101899
sS'name'
p101900
S'report_peak_value'
p101901
sS'required'
p101902
I00
sS'group_name'
p101903
Nsa(dp101904
S'description'
p101905
g3
sS'cpp_type'
p101906
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101907
sS'default'
p101908
S'MemoryUsage'
p101909
sS'name'
p101910
S'type'
p101911
sS'required'
p101912
I00
sS'group_name'
p101913
Nsa(dp101914
S'description'
p101915
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101916
sS'cpp_type'
p101917
S'bool'
p101918
sS'default'
p101919
S'0'
p101920
sS'name'
p101921
S'use_displaced_mesh'
p101922
sS'required'
p101923
I00
sS'group_name'
p101924
S'Advanced'
p101925
sa(dp101926
S'name'
p101927
S'value_type'
p101928
sS'cpp_type'
p101929
S'MooseEnum'
p101930
sS'default'
p101931
S'total'
p101932
sS'description'
p101933
S'Aggregation method to apply to the requested memory metric.\n'
p101934
sS'required'
p101935
I00
sS'options'
p101936
S'total average max_process min_processs'
p101937
sS'group_name'
p101938
NsasS'name'
p101939
S'/Postprocessors/MemoryUsage'
p101940
sa(dp101941
S'description'
p101942
g3
sS'subblocks'
p101943
NsS'parameters'
p101944
(lp101945
(dp101946
S'description'
p101947
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101948
sS'cpp_type'
p101949
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101950
sS'default'
p101951
g3
sS'name'
p101952
S'block'
p101953
sS'required'
p101954
I00
sS'group_name'
p101955
Nsa(dp101956
S'description'
p101957
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101958
sS'cpp_type'
p101959
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101960
sS'default'
p101961
g3
sS'name'
p101962
S'boundary'
p101963
sS'required'
p101964
I00
sS'group_name'
p101965
Nsa(dp101966
S'description'
p101967
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101968
sS'cpp_type'
p101969
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101970
sS'default'
p101971
g3
sS'name'
p101972
S'control_tags'
p101973
sS'required'
p101974
I00
sS'group_name'
p101975
S'Advanced'
p101976
sa(dp101977
S'description'
p101978
S'Set the enabled status of the MooseObject.\n'
p101979
sS'cpp_type'
p101980
S'bool'
p101981
sS'default'
p101982
S'1'
p101983
sS'name'
p101984
S'enable'
p101985
sS'required'
p101986
I00
sS'group_name'
p101987
S'Advanced'
p101988
sa(dp101989
S'name'
p101990
S'execute_on'
p101991
sS'cpp_type'
p101992
S'MultiMooseEnum'
p101993
sS'default'
p101994
S'TIMESTEP_END'
p101995
sS'description'
p101996
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101997
sS'required'
p101998
I00
sS'options'
p101999
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102000
sS'group_name'
p102001
Nsa(dp102002
S'description'
p102003
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102004
sS'cpp_type'
p102005
S'std::vector<OutputName, std::allocator<OutputName> >'
p102006
sS'default'
p102007
g3
sS'name'
p102008
S'outputs'
p102009
sS'required'
p102010
I00
sS'group_name'
p102011
S'Advanced'
p102012
sa(dp102013
S'description'
p102014
S'The seed for the master random number generator\n'
p102015
sS'cpp_type'
p102016
S'unsigned int'
p102017
sS'default'
p102018
S'0'
p102019
sS'name'
p102020
S'seed'
p102021
sS'required'
p102022
I00
sS'group_name'
p102023
S'Advanced'
p102024
sa(dp102025
S'description'
p102026
g3
sS'cpp_type'
p102027
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102028
sS'default'
p102029
S'NodalExtremeValue'
p102030
sS'name'
p102031
S'type'
p102032
sS'required'
p102033
I00
sS'group_name'
p102034
Nsa(dp102035
S'description'
p102036
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102037
sS'cpp_type'
p102038
S'bool'
p102039
sS'default'
p102040
S'0'
p102041
sS'name'
p102042
S'unique_node_execute'
p102043
sS'required'
p102044
I00
sS'group_name'
p102045
Nsa(dp102046
S'description'
p102047
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102048
sS'cpp_type'
p102049
S'bool'
p102050
sS'default'
p102051
S'0'
p102052
sS'name'
p102053
S'use_displaced_mesh'
p102054
sS'required'
p102055
I00
sS'group_name'
p102056
S'Advanced'
p102057
sa(dp102058
S'name'
p102059
S'value_type'
p102060
sS'cpp_type'
p102061
S'MooseEnum'
p102062
sS'default'
p102063
S'max'
p102064
sS'description'
p102065
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p102066
sS'required'
p102067
I00
sS'options'
p102068
S'max min'
p102069
sS'group_name'
p102070
Nsa(dp102071
S'description'
p102072
S'The name of the variable that this postprocessor operates on\n'
p102073
sS'cpp_type'
p102074
S'std::vector<VariableName>'
p102075
sS'default'
p102076
g3
sS'name'
p102077
S'variable'
p102078
sS'required'
p102079
I01
sS'group_name'
p102080
NsasS'name'
p102081
S'/Postprocessors/NodalExtremeValue'
p102082
sa(dp102083
S'description'
p102084
g3
sS'subblocks'
p102085
NsS'parameters'
p102086
(lp102087
(dp102088
S'description'
p102089
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102090
sS'cpp_type'
p102091
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102092
sS'default'
p102093
g3
sS'name'
p102094
S'block'
p102095
sS'required'
p102096
I00
sS'group_name'
p102097
Nsa(dp102098
S'description'
p102099
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102100
sS'cpp_type'
p102101
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102102
sS'default'
p102103
g3
sS'name'
p102104
S'boundary'
p102105
sS'required'
p102106
I00
sS'group_name'
p102107
Nsa(dp102108
S'description'
p102109
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102110
sS'cpp_type'
p102111
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102112
sS'default'
p102113
g3
sS'name'
p102114
S'control_tags'
p102115
sS'required'
p102116
I00
sS'group_name'
p102117
S'Advanced'
p102118
sa(dp102119
S'description'
p102120
S'Set the enabled status of the MooseObject.\n'
p102121
sS'cpp_type'
p102122
S'bool'
p102123
sS'default'
p102124
S'1'
p102125
sS'name'
p102126
S'enable'
p102127
sS'required'
p102128
I00
sS'group_name'
p102129
S'Advanced'
p102130
sa(dp102131
S'name'
p102132
S'execute_on'
p102133
sS'cpp_type'
p102134
S'MultiMooseEnum'
p102135
sS'default'
p102136
S'TIMESTEP_END'
p102137
sS'description'
p102138
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102139
sS'required'
p102140
I00
sS'options'
p102141
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102142
sS'group_name'
p102143
Nsa(dp102144
S'description'
p102145
S'The analytic solution to compare against\n'
p102146
sS'cpp_type'
p102147
S'FunctionName'
p102148
sS'default'
p102149
g3
sS'name'
p102150
S'function'
p102151
sS'required'
p102152
I01
sS'group_name'
p102153
Nsa(dp102154
S'description'
p102155
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102156
sS'cpp_type'
p102157
S'std::vector<OutputName, std::allocator<OutputName> >'
p102158
sS'default'
p102159
g3
sS'name'
p102160
S'outputs'
p102161
sS'required'
p102162
I00
sS'group_name'
p102163
S'Advanced'
p102164
sa(dp102165
S'description'
p102166
S'The seed for the master random number generator\n'
p102167
sS'cpp_type'
p102168
S'unsigned int'
p102169
sS'default'
p102170
S'0'
p102171
sS'name'
p102172
S'seed'
p102173
sS'required'
p102174
I00
sS'group_name'
p102175
S'Advanced'
p102176
sa(dp102177
S'description'
p102178
g3
sS'cpp_type'
p102179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102180
sS'default'
p102181
S'NodalL2Error'
p102182
sS'name'
p102183
S'type'
p102184
sS'required'
p102185
I00
sS'group_name'
p102186
Nsa(dp102187
S'description'
p102188
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102189
sS'cpp_type'
p102190
S'bool'
p102191
sS'default'
p102192
S'0'
p102193
sS'name'
p102194
S'unique_node_execute'
p102195
sS'required'
p102196
I00
sS'group_name'
p102197
Nsa(dp102198
S'description'
p102199
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102200
sS'cpp_type'
p102201
S'bool'
p102202
sS'default'
p102203
S'0'
p102204
sS'name'
p102205
S'use_displaced_mesh'
p102206
sS'required'
p102207
I00
sS'group_name'
p102208
S'Advanced'
p102209
sa(dp102210
S'description'
p102211
S'The name of the variable that this postprocessor operates on\n'
p102212
sS'cpp_type'
p102213
S'std::vector<VariableName>'
p102214
sS'default'
p102215
g3
sS'name'
p102216
S'variable'
p102217
sS'required'
p102218
I01
sS'group_name'
p102219
NsasS'name'
p102220
S'/Postprocessors/NodalL2Error'
p102221
sa(dp102222
S'description'
p102223
g3
sS'subblocks'
p102224
NsS'parameters'
p102225
(lp102226
(dp102227
S'description'
p102228
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102229
sS'cpp_type'
p102230
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102231
sS'default'
p102232
g3
sS'name'
p102233
S'block'
p102234
sS'required'
p102235
I00
sS'group_name'
p102236
Nsa(dp102237
S'description'
p102238
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102239
sS'cpp_type'
p102240
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102241
sS'default'
p102242
g3
sS'name'
p102243
S'boundary'
p102244
sS'required'
p102245
I00
sS'group_name'
p102246
Nsa(dp102247
S'description'
p102248
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102249
sS'cpp_type'
p102250
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102251
sS'default'
p102252
g3
sS'name'
p102253
S'control_tags'
p102254
sS'required'
p102255
I00
sS'group_name'
p102256
S'Advanced'
p102257
sa(dp102258
S'description'
p102259
S'Set the enabled status of the MooseObject.\n'
p102260
sS'cpp_type'
p102261
S'bool'
p102262
sS'default'
p102263
S'1'
p102264
sS'name'
p102265
S'enable'
p102266
sS'required'
p102267
I00
sS'group_name'
p102268
S'Advanced'
p102269
sa(dp102270
S'name'
p102271
S'execute_on'
p102272
sS'cpp_type'
p102273
S'MultiMooseEnum'
p102274
sS'default'
p102275
S'TIMESTEP_END'
p102276
sS'description'
p102277
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102278
sS'required'
p102279
I00
sS'options'
p102280
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102281
sS'group_name'
p102282
Nsa(dp102283
S'description'
p102284
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102285
sS'cpp_type'
p102286
S'std::vector<OutputName, std::allocator<OutputName> >'
p102287
sS'default'
p102288
g3
sS'name'
p102289
S'outputs'
p102290
sS'required'
p102291
I00
sS'group_name'
p102292
S'Advanced'
p102293
sa(dp102294
S'description'
p102295
S'The seed for the master random number generator\n'
p102296
sS'cpp_type'
p102297
S'unsigned int'
p102298
sS'default'
p102299
S'0'
p102300
sS'name'
p102301
S'seed'
p102302
sS'required'
p102303
I00
sS'group_name'
p102304
S'Advanced'
p102305
sa(dp102306
S'description'
p102307
g3
sS'cpp_type'
p102308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102309
sS'default'
p102310
S'NodalL2Norm'
p102311
sS'name'
p102312
S'type'
p102313
sS'required'
p102314
I00
sS'group_name'
p102315
Nsa(dp102316
S'description'
p102317
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102318
sS'cpp_type'
p102319
S'bool'
p102320
sS'default'
p102321
S'1'
p102322
sS'name'
p102323
S'unique_node_execute'
p102324
sS'required'
p102325
I00
sS'group_name'
p102326
Nsa(dp102327
S'description'
p102328
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102329
sS'cpp_type'
p102330
S'bool'
p102331
sS'default'
p102332
S'0'
p102333
sS'name'
p102334
S'use_displaced_mesh'
p102335
sS'required'
p102336
I00
sS'group_name'
p102337
S'Advanced'
p102338
sa(dp102339
S'description'
p102340
S'The name of the variable that this postprocessor operates on\n'
p102341
sS'cpp_type'
p102342
S'std::vector<VariableName>'
p102343
sS'default'
p102344
g3
sS'name'
p102345
S'variable'
p102346
sS'required'
p102347
I01
sS'group_name'
p102348
NsasS'name'
p102349
S'/Postprocessors/NodalL2Norm'
p102350
sa(dp102351
S'description'
p102352
g3
sS'subblocks'
p102353
NsS'parameters'
p102354
(lp102355
(dp102356
S'description'
p102357
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102358
sS'cpp_type'
p102359
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102360
sS'default'
p102361
g3
sS'name'
p102362
S'block'
p102363
sS'required'
p102364
I00
sS'group_name'
p102365
Nsa(dp102366
S'description'
p102367
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102368
sS'cpp_type'
p102369
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102370
sS'default'
p102371
g3
sS'name'
p102372
S'boundary'
p102373
sS'required'
p102374
I00
sS'group_name'
p102375
Nsa(dp102376
S'description'
p102377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102378
sS'cpp_type'
p102379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102380
sS'default'
p102381
g3
sS'name'
p102382
S'control_tags'
p102383
sS'required'
p102384
I00
sS'group_name'
p102385
S'Advanced'
p102386
sa(dp102387
S'description'
p102388
S'Set the enabled status of the MooseObject.\n'
p102389
sS'cpp_type'
p102390
S'bool'
p102391
sS'default'
p102392
S'1'
p102393
sS'name'
p102394
S'enable'
p102395
sS'required'
p102396
I00
sS'group_name'
p102397
S'Advanced'
p102398
sa(dp102399
S'name'
p102400
S'execute_on'
p102401
sS'cpp_type'
p102402
S'MultiMooseEnum'
p102403
sS'default'
p102404
S'TIMESTEP_END'
p102405
sS'description'
p102406
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102407
sS'required'
p102408
I00
sS'options'
p102409
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102410
sS'group_name'
p102411
Nsa(dp102412
S'description'
p102413
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102414
sS'cpp_type'
p102415
S'std::vector<OutputName, std::allocator<OutputName> >'
p102416
sS'default'
p102417
g3
sS'name'
p102418
S'outputs'
p102419
sS'required'
p102420
I00
sS'group_name'
p102421
S'Advanced'
p102422
sa(dp102423
S'description'
p102424
S'The seed for the master random number generator\n'
p102425
sS'cpp_type'
p102426
S'unsigned int'
p102427
sS'default'
p102428
S'0'
p102429
sS'name'
p102430
S'seed'
p102431
sS'required'
p102432
I00
sS'group_name'
p102433
S'Advanced'
p102434
sa(dp102435
S'description'
p102436
g3
sS'cpp_type'
p102437
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102438
sS'default'
p102439
S'NodalMaxValue'
p102440
sS'name'
p102441
S'type'
p102442
sS'required'
p102443
I00
sS'group_name'
p102444
Nsa(dp102445
S'description'
p102446
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102447
sS'cpp_type'
p102448
S'bool'
p102449
sS'default'
p102450
S'0'
p102451
sS'name'
p102452
S'unique_node_execute'
p102453
sS'required'
p102454
I00
sS'group_name'
p102455
Nsa(dp102456
S'description'
p102457
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102458
sS'cpp_type'
p102459
S'bool'
p102460
sS'default'
p102461
S'0'
p102462
sS'name'
p102463
S'use_displaced_mesh'
p102464
sS'required'
p102465
I00
sS'group_name'
p102466
S'Advanced'
p102467
sa(dp102468
S'description'
p102469
S'The name of the variable that this postprocessor operates on\n'
p102470
sS'cpp_type'
p102471
S'std::vector<VariableName>'
p102472
sS'default'
p102473
g3
sS'name'
p102474
S'variable'
p102475
sS'required'
p102476
I01
sS'group_name'
p102477
NsasS'name'
p102478
S'/Postprocessors/NodalMaxValue'
p102479
sa(dp102480
S'description'
p102481
g3
sS'subblocks'
p102482
NsS'parameters'
p102483
(lp102484
(dp102485
S'description'
p102486
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102487
sS'cpp_type'
p102488
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102489
sS'default'
p102490
g3
sS'name'
p102491
S'block'
p102492
sS'required'
p102493
I00
sS'group_name'
p102494
Nsa(dp102495
S'description'
p102496
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102497
sS'cpp_type'
p102498
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102499
sS'default'
p102500
g3
sS'name'
p102501
S'boundary'
p102502
sS'required'
p102503
I00
sS'group_name'
p102504
Nsa(dp102505
S'description'
p102506
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102507
sS'cpp_type'
p102508
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102509
sS'default'
p102510
g3
sS'name'
p102511
S'control_tags'
p102512
sS'required'
p102513
I00
sS'group_name'
p102514
S'Advanced'
p102515
sa(dp102516
S'description'
p102517
S'Set the enabled status of the MooseObject.\n'
p102518
sS'cpp_type'
p102519
S'bool'
p102520
sS'default'
p102521
S'1'
p102522
sS'name'
p102523
S'enable'
p102524
sS'required'
p102525
I00
sS'group_name'
p102526
S'Advanced'
p102527
sa(dp102528
S'name'
p102529
S'execute_on'
p102530
sS'cpp_type'
p102531
S'MultiMooseEnum'
p102532
sS'default'
p102533
S'TIMESTEP_END'
p102534
sS'description'
p102535
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102536
sS'required'
p102537
I00
sS'options'
p102538
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102539
sS'group_name'
p102540
Nsa(dp102541
S'description'
p102542
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102543
sS'cpp_type'
p102544
S'std::vector<OutputName, std::allocator<OutputName> >'
p102545
sS'default'
p102546
g3
sS'name'
p102547
S'outputs'
p102548
sS'required'
p102549
I00
sS'group_name'
p102550
S'Advanced'
p102551
sa(dp102552
S'description'
p102553
S'The seed for the master random number generator\n'
p102554
sS'cpp_type'
p102555
S'unsigned int'
p102556
sS'default'
p102557
S'0'
p102558
sS'name'
p102559
S'seed'
p102560
sS'required'
p102561
I00
sS'group_name'
p102562
S'Advanced'
p102563
sa(dp102564
S'description'
p102565
g3
sS'cpp_type'
p102566
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102567
sS'default'
p102568
S'NodalProxyMaxValue'
p102569
sS'name'
p102570
S'type'
p102571
sS'required'
p102572
I00
sS'group_name'
p102573
Nsa(dp102574
S'description'
p102575
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102576
sS'cpp_type'
p102577
S'bool'
p102578
sS'default'
p102579
S'0'
p102580
sS'name'
p102581
S'unique_node_execute'
p102582
sS'required'
p102583
I00
sS'group_name'
p102584
Nsa(dp102585
S'description'
p102586
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102587
sS'cpp_type'
p102588
S'bool'
p102589
sS'default'
p102590
S'0'
p102591
sS'name'
p102592
S'use_displaced_mesh'
p102593
sS'required'
p102594
I00
sS'group_name'
p102595
S'Advanced'
p102596
sa(dp102597
S'description'
p102598
S'The name of the variable that this postprocessor operates on\n'
p102599
sS'cpp_type'
p102600
S'std::vector<VariableName>'
p102601
sS'default'
p102602
g3
sS'name'
p102603
S'variable'
p102604
sS'required'
p102605
I01
sS'group_name'
p102606
NsasS'name'
p102607
S'/Postprocessors/NodalProxyMaxValue'
p102608
sa(dp102609
S'description'
p102610
g3
sS'subblocks'
p102611
NsS'parameters'
p102612
(lp102613
(dp102614
S'description'
p102615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102616
sS'cpp_type'
p102617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102618
sS'default'
p102619
g3
sS'name'
p102620
S'block'
p102621
sS'required'
p102622
I00
sS'group_name'
p102623
Nsa(dp102624
S'description'
p102625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102626
sS'cpp_type'
p102627
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102628
sS'default'
p102629
g3
sS'name'
p102630
S'boundary'
p102631
sS'required'
p102632
I00
sS'group_name'
p102633
Nsa(dp102634
S'description'
p102635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102636
sS'cpp_type'
p102637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102638
sS'default'
p102639
g3
sS'name'
p102640
S'control_tags'
p102641
sS'required'
p102642
I00
sS'group_name'
p102643
S'Advanced'
p102644
sa(dp102645
S'description'
p102646
S'Set the enabled status of the MooseObject.\n'
p102647
sS'cpp_type'
p102648
S'bool'
p102649
sS'default'
p102650
S'1'
p102651
sS'name'
p102652
S'enable'
p102653
sS'required'
p102654
I00
sS'group_name'
p102655
S'Advanced'
p102656
sa(dp102657
S'name'
p102658
S'execute_on'
p102659
sS'cpp_type'
p102660
S'MultiMooseEnum'
p102661
sS'default'
p102662
S'TIMESTEP_END'
p102663
sS'description'
p102664
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102665
sS'required'
p102666
I00
sS'options'
p102667
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102668
sS'group_name'
p102669
Nsa(dp102670
S'description'
p102671
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102672
sS'cpp_type'
p102673
S'std::vector<OutputName, std::allocator<OutputName> >'
p102674
sS'default'
p102675
g3
sS'name'
p102676
S'outputs'
p102677
sS'required'
p102678
I00
sS'group_name'
p102679
S'Advanced'
p102680
sa(dp102681
S'description'
p102682
S'The seed for the master random number generator\n'
p102683
sS'cpp_type'
p102684
S'unsigned int'
p102685
sS'default'
p102686
S'0'
p102687
sS'name'
p102688
S'seed'
p102689
sS'required'
p102690
I00
sS'group_name'
p102691
S'Advanced'
p102692
sa(dp102693
S'description'
p102694
g3
sS'cpp_type'
p102695
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102696
sS'default'
p102697
S'NodalSum'
p102698
sS'name'
p102699
S'type'
p102700
sS'required'
p102701
I00
sS'group_name'
p102702
Nsa(dp102703
S'description'
p102704
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p102705
sS'cpp_type'
p102706
S'bool'
p102707
sS'default'
p102708
S'1'
p102709
sS'name'
p102710
S'unique_node_execute'
p102711
sS'required'
p102712
I00
sS'group_name'
p102713
Nsa(dp102714
S'description'
p102715
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102716
sS'cpp_type'
p102717
S'bool'
p102718
sS'default'
p102719
S'0'
p102720
sS'name'
p102721
S'use_displaced_mesh'
p102722
sS'required'
p102723
I00
sS'group_name'
p102724
S'Advanced'
p102725
sa(dp102726
S'description'
p102727
S'The name of the variable that this postprocessor operates on\n'
p102728
sS'cpp_type'
p102729
S'std::vector<VariableName>'
p102730
sS'default'
p102731
g3
sS'name'
p102732
S'variable'
p102733
sS'required'
p102734
I01
sS'group_name'
p102735
NsasS'name'
p102736
S'/Postprocessors/NodalSum'
p102737
sa(dp102738
S'description'
p102739
g3
sS'subblocks'
p102740
NsS'parameters'
p102741
(lp102742
(dp102743
S'description'
p102744
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102745
sS'cpp_type'
p102746
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102747
sS'default'
p102748
g3
sS'name'
p102749
S'control_tags'
p102750
sS'required'
p102751
I00
sS'group_name'
p102752
S'Advanced'
p102753
sa(dp102754
S'description'
p102755
S'Set the enabled status of the MooseObject.\n'
p102756
sS'cpp_type'
p102757
S'bool'
p102758
sS'default'
p102759
S'1'
p102760
sS'name'
p102761
S'enable'
p102762
sS'required'
p102763
I00
sS'group_name'
p102764
S'Advanced'
p102765
sa(dp102766
S'name'
p102767
S'execute_on'
p102768
sS'cpp_type'
p102769
S'MultiMooseEnum'
p102770
sS'default'
p102771
S'TIMESTEP_END'
p102772
sS'description'
p102773
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102774
sS'required'
p102775
I00
sS'options'
p102776
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102777
sS'group_name'
p102778
Nsa(dp102779
S'description'
p102780
S'The ID of the node where we monitor\n'
p102781
sS'cpp_type'
p102782
S'unsigned int'
p102783
sS'default'
p102784
g3
sS'name'
p102785
S'nodeid'
p102786
sS'required'
p102787
I01
sS'group_name'
p102788
Nsa(dp102789
S'description'
p102790
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102791
sS'cpp_type'
p102792
S'std::vector<OutputName, std::allocator<OutputName> >'
p102793
sS'default'
p102794
g3
sS'name'
p102795
S'outputs'
p102796
sS'required'
p102797
I00
sS'group_name'
p102798
S'Advanced'
p102799
sa(dp102800
S'description'
p102801
S'A scale factor to be applied to the variable\n'
p102802
sS'cpp_type'
p102803
S'double'
p102804
sS'default'
p102805
S'1'
p102806
sS'name'
p102807
S'scale_factor'
p102808
sS'required'
p102809
I00
sS'group_name'
p102810
Nsa(dp102811
S'description'
p102812
g3
sS'cpp_type'
p102813
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102814
sS'default'
p102815
S'NodalVariableValue'
p102816
sS'name'
p102817
S'type'
p102818
sS'required'
p102819
I00
sS'group_name'
p102820
Nsa(dp102821
S'description'
p102822
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102823
sS'cpp_type'
p102824
S'bool'
p102825
sS'default'
p102826
S'0'
p102827
sS'name'
p102828
S'use_displaced_mesh'
p102829
sS'required'
p102830
I00
sS'group_name'
p102831
S'Advanced'
p102832
sa(dp102833
S'description'
p102834
S'The variable to be monitored\n'
p102835
sS'cpp_type'
p102836
S'VariableName'
p102837
sS'default'
p102838
g3
sS'name'
p102839
S'variable'
p102840
sS'required'
p102841
I01
sS'group_name'
p102842
NsasS'name'
p102843
S'/Postprocessors/NodalVariableValue'
p102844
sa(dp102845
S'description'
p102846
g3
sS'subblocks'
p102847
NsS'parameters'
p102848
(lp102849
(dp102850
S'description'
p102851
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102852
sS'cpp_type'
p102853
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102854
sS'default'
p102855
g3
sS'name'
p102856
S'control_tags'
p102857
sS'required'
p102858
I00
sS'group_name'
p102859
S'Advanced'
p102860
sa(dp102861
S'description'
p102862
S'Set the enabled status of the MooseObject.\n'
p102863
sS'cpp_type'
p102864
S'bool'
p102865
sS'default'
p102866
S'1'
p102867
sS'name'
p102868
S'enable'
p102869
sS'required'
p102870
I00
sS'group_name'
p102871
S'Advanced'
p102872
sa(dp102873
S'name'
p102874
S'execute_on'
p102875
sS'cpp_type'
p102876
S'MultiMooseEnum'
p102877
sS'default'
p102878
S'TIMESTEP_END'
p102879
sS'description'
p102880
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102881
sS'required'
p102882
I00
sS'options'
p102883
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102884
sS'group_name'
p102885
Nsa(dp102886
S'description'
p102887
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102888
sS'cpp_type'
p102889
S'std::vector<OutputName, std::allocator<OutputName> >'
p102890
sS'default'
p102891
g3
sS'name'
p102892
S'outputs'
p102893
sS'required'
p102894
I00
sS'group_name'
p102895
S'Advanced'
p102896
sa(dp102897
S'name'
p102898
S'system'
p102899
sS'cpp_type'
p102900
S'MooseEnum'
p102901
sS'default'
p102902
S'ALL'
p102903
sS'description'
p102904
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p102905
sS'required'
p102906
I00
sS'options'
p102907
S'NL AUX ALL'
p102908
sS'group_name'
p102909
Nsa(dp102910
S'description'
p102911
g3
sS'cpp_type'
p102912
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102913
sS'default'
p102914
S'NumDOFs'
p102915
sS'name'
p102916
S'type'
p102917
sS'required'
p102918
I00
sS'group_name'
p102919
Nsa(dp102920
S'description'
p102921
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102922
sS'cpp_type'
p102923
S'bool'
p102924
sS'default'
p102925
S'0'
p102926
sS'name'
p102927
S'use_displaced_mesh'
p102928
sS'required'
p102929
I00
sS'group_name'
p102930
S'Advanced'
p102931
sasS'name'
p102932
S'/Postprocessors/NumDOFs'
p102933
sa(dp102934
S'description'
p102935
g3
sS'subblocks'
p102936
NsS'parameters'
p102937
(lp102938
(dp102939
S'description'
p102940
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102941
sS'cpp_type'
p102942
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102943
sS'default'
p102944
g3
sS'name'
p102945
S'control_tags'
p102946
sS'required'
p102947
I00
sS'group_name'
p102948
S'Advanced'
p102949
sa(dp102950
S'name'
p102951
S'elem_filter'
p102952
sS'cpp_type'
p102953
S'MooseEnum'
p102954
sS'default'
p102955
S'active'
p102956
sS'description'
p102957
S'The type of elements to include in the count (active, total). Default == active\n'
p102958
sS'required'
p102959
I00
sS'options'
p102960
S'active total'
p102961
sS'group_name'
p102962
Nsa(dp102963
S'description'
p102964
S'Set the enabled status of the MooseObject.\n'
p102965
sS'cpp_type'
p102966
S'bool'
p102967
sS'default'
p102968
S'1'
p102969
sS'name'
p102970
S'enable'
p102971
sS'required'
p102972
I00
sS'group_name'
p102973
S'Advanced'
p102974
sa(dp102975
S'name'
p102976
S'execute_on'
p102977
sS'cpp_type'
p102978
S'MultiMooseEnum'
p102979
sS'default'
p102980
S'TIMESTEP_END'
p102981
sS'description'
p102982
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102983
sS'required'
p102984
I00
sS'options'
p102985
S'none initial linear nonlinear timestep_end timestep_begin custom'
p102986
sS'group_name'
p102987
Nsa(dp102988
S'description'
p102989
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102990
sS'cpp_type'
p102991
S'std::vector<OutputName, std::allocator<OutputName> >'
p102992
sS'default'
p102993
g3
sS'name'
p102994
S'outputs'
p102995
sS'required'
p102996
I00
sS'group_name'
p102997
S'Advanced'
p102998
sa(dp102999
S'description'
p103000
g3
sS'cpp_type'
p103001
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103002
sS'default'
p103003
S'NumElems'
p103004
sS'name'
p103005
S'type'
p103006
sS'required'
p103007
I00
sS'group_name'
p103008
Nsa(dp103009
S'description'
p103010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103011
sS'cpp_type'
p103012
S'bool'
p103013
sS'default'
p103014
S'0'
p103015
sS'name'
p103016
S'use_displaced_mesh'
p103017
sS'required'
p103018
I00
sS'group_name'
p103019
S'Advanced'
p103020
sasS'name'
p103021
S'/Postprocessors/NumElems'
p103022
sa(dp103023
S'description'
p103024
g3
sS'subblocks'
p103025
NsS'parameters'
p103026
(lp103027
(dp103028
S'description'
p103029
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103030
sS'cpp_type'
p103031
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103032
sS'default'
p103033
g3
sS'name'
p103034
S'control_tags'
p103035
sS'required'
p103036
I00
sS'group_name'
p103037
S'Advanced'
p103038
sa(dp103039
S'description'
p103040
S'Set the enabled status of the MooseObject.\n'
p103041
sS'cpp_type'
p103042
S'bool'
p103043
sS'default'
p103044
S'1'
p103045
sS'name'
p103046
S'enable'
p103047
sS'required'
p103048
I00
sS'group_name'
p103049
S'Advanced'
p103050
sa(dp103051
S'name'
p103052
S'execute_on'
p103053
sS'cpp_type'
p103054
S'MultiMooseEnum'
p103055
sS'default'
p103056
S'TIMESTEP_END'
p103057
sS'description'
p103058
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103059
sS'required'
p103060
I00
sS'options'
p103061
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103062
sS'group_name'
p103063
Nsa(dp103064
S'description'
p103065
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103066
sS'cpp_type'
p103067
S'std::vector<OutputName, std::allocator<OutputName> >'
p103068
sS'default'
p103069
g3
sS'name'
p103070
S'outputs'
p103071
sS'required'
p103072
I00
sS'group_name'
p103073
S'Advanced'
p103074
sa(dp103075
S'description'
p103076
g3
sS'cpp_type'
p103077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103078
sS'default'
p103079
S'NumLinearIterations'
p103080
sS'name'
p103081
S'type'
p103082
sS'required'
p103083
I00
sS'group_name'
p103084
Nsa(dp103085
S'description'
p103086
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103087
sS'cpp_type'
p103088
S'bool'
p103089
sS'default'
p103090
S'0'
p103091
sS'name'
p103092
S'use_displaced_mesh'
p103093
sS'required'
p103094
I00
sS'group_name'
p103095
S'Advanced'
p103096
sasS'name'
p103097
S'/Postprocessors/NumLinearIterations'
p103098
sa(dp103099
S'description'
p103100
g3
sS'subblocks'
p103101
NsS'parameters'
p103102
(lp103103
(dp103104
S'description'
p103105
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103106
sS'cpp_type'
p103107
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103108
sS'default'
p103109
g3
sS'name'
p103110
S'control_tags'
p103111
sS'required'
p103112
I00
sS'group_name'
p103113
S'Advanced'
p103114
sa(dp103115
S'description'
p103116
S'Set the enabled status of the MooseObject.\n'
p103117
sS'cpp_type'
p103118
S'bool'
p103119
sS'default'
p103120
S'1'
p103121
sS'name'
p103122
S'enable'
p103123
sS'required'
p103124
I00
sS'group_name'
p103125
S'Advanced'
p103126
sa(dp103127
S'name'
p103128
S'execute_on'
p103129
sS'cpp_type'
p103130
S'MultiMooseEnum'
p103131
sS'default'
p103132
S'TIMESTEP_END'
p103133
sS'description'
p103134
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103135
sS'required'
p103136
I00
sS'options'
p103137
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103138
sS'group_name'
p103139
Nsa(dp103140
S'description'
p103141
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103142
sS'cpp_type'
p103143
S'std::vector<OutputName, std::allocator<OutputName> >'
p103144
sS'default'
p103145
g3
sS'name'
p103146
S'outputs'
p103147
sS'required'
p103148
I00
sS'group_name'
p103149
S'Advanced'
p103150
sa(dp103151
S'description'
p103152
g3
sS'cpp_type'
p103153
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103154
sS'default'
p103155
S'NumNodes'
p103156
sS'name'
p103157
S'type'
p103158
sS'required'
p103159
I00
sS'group_name'
p103160
Nsa(dp103161
S'description'
p103162
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103163
sS'cpp_type'
p103164
S'bool'
p103165
sS'default'
p103166
S'0'
p103167
sS'name'
p103168
S'use_displaced_mesh'
p103169
sS'required'
p103170
I00
sS'group_name'
p103171
S'Advanced'
p103172
sasS'name'
p103173
S'/Postprocessors/NumNodes'
p103174
sa(dp103175
S'description'
p103176
g3
sS'subblocks'
p103177
NsS'parameters'
p103178
(lp103179
(dp103180
S'description'
p103181
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p103182
sS'cpp_type'
p103183
S'bool'
p103184
sS'default'
p103185
S'0'
p103186
sS'name'
p103187
S'accumulate_over_step'
p103188
sS'required'
p103189
I00
sS'group_name'
p103190
Nsa(dp103191
S'description'
p103192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103193
sS'cpp_type'
p103194
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103195
sS'default'
p103196
g3
sS'name'
p103197
S'control_tags'
p103198
sS'required'
p103199
I00
sS'group_name'
p103200
S'Advanced'
p103201
sa(dp103202
S'description'
p103203
S'Set the enabled status of the MooseObject.\n'
p103204
sS'cpp_type'
p103205
S'bool'
p103206
sS'default'
p103207
S'1'
p103208
sS'name'
p103209
S'enable'
p103210
sS'required'
p103211
I00
sS'group_name'
p103212
S'Advanced'
p103213
sa(dp103214
S'name'
p103215
S'execute_on'
p103216
sS'cpp_type'
p103217
S'MultiMooseEnum'
p103218
sS'default'
p103219
S'TIMESTEP_END'
p103220
sS'description'
p103221
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103222
sS'required'
p103223
I00
sS'options'
p103224
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103225
sS'group_name'
p103226
Nsa(dp103227
S'description'
p103228
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103229
sS'cpp_type'
p103230
S'std::vector<OutputName, std::allocator<OutputName> >'
p103231
sS'default'
p103232
g3
sS'name'
p103233
S'outputs'
p103234
sS'required'
p103235
I00
sS'group_name'
p103236
S'Advanced'
p103237
sa(dp103238
S'description'
p103239
g3
sS'cpp_type'
p103240
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103241
sS'default'
p103242
S'NumNonlinearIterations'
p103243
sS'name'
p103244
S'type'
p103245
sS'required'
p103246
I00
sS'group_name'
p103247
Nsa(dp103248
S'description'
p103249
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103250
sS'cpp_type'
p103251
S'bool'
p103252
sS'default'
p103253
S'0'
p103254
sS'name'
p103255
S'use_displaced_mesh'
p103256
sS'required'
p103257
I00
sS'group_name'
p103258
S'Advanced'
p103259
sasS'name'
p103260
S'/Postprocessors/NumNonlinearIterations'
p103261
sa(dp103262
S'description'
p103263
g3
sS'subblocks'
p103264
NsS'parameters'
p103265
(lp103266
(dp103267
S'description'
p103268
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103269
sS'cpp_type'
p103270
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103271
sS'default'
p103272
g3
sS'name'
p103273
S'control_tags'
p103274
sS'required'
p103275
I00
sS'group_name'
p103276
S'Advanced'
p103277
sa(dp103278
S'description'
p103279
S'Set the enabled status of the MooseObject.\n'
p103280
sS'cpp_type'
p103281
S'bool'
p103282
sS'default'
p103283
S'1'
p103284
sS'name'
p103285
S'enable'
p103286
sS'required'
p103287
I00
sS'group_name'
p103288
S'Advanced'
p103289
sa(dp103290
S'name'
p103291
S'execute_on'
p103292
sS'cpp_type'
p103293
S'MultiMooseEnum'
p103294
sS'default'
p103295
S'TIMESTEP_END'
p103296
sS'description'
p103297
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103298
sS'required'
p103299
I00
sS'options'
p103300
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103301
sS'group_name'
p103302
Nsa(dp103303
S'description'
p103304
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103305
sS'cpp_type'
p103306
S'std::vector<OutputName, std::allocator<OutputName> >'
p103307
sS'default'
p103308
g3
sS'name'
p103309
S'outputs'
p103310
sS'required'
p103311
I00
sS'group_name'
p103312
S'Advanced'
p103313
sa(dp103314
S'description'
p103315
g3
sS'cpp_type'
p103316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103317
sS'default'
p103318
S'NumPicardIterations'
p103319
sS'name'
p103320
S'type'
p103321
sS'required'
p103322
I00
sS'group_name'
p103323
Nsa(dp103324
S'description'
p103325
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103326
sS'cpp_type'
p103327
S'bool'
p103328
sS'default'
p103329
S'0'
p103330
sS'name'
p103331
S'use_displaced_mesh'
p103332
sS'required'
p103333
I00
sS'group_name'
p103334
S'Advanced'
p103335
sasS'name'
p103336
S'/Postprocessors/NumPicardIterations'
p103337
sa(dp103338
S'description'
p103339
g3
sS'subblocks'
p103340
NsS'parameters'
p103341
(lp103342
(dp103343
S'description'
p103344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103345
sS'cpp_type'
p103346
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103347
sS'default'
p103348
g3
sS'name'
p103349
S'control_tags'
p103350
sS'required'
p103351
I00
sS'group_name'
p103352
S'Advanced'
p103353
sa(dp103354
S'description'
p103355
S'Set the enabled status of the MooseObject.\n'
p103356
sS'cpp_type'
p103357
S'bool'
p103358
sS'default'
p103359
S'1'
p103360
sS'name'
p103361
S'enable'
p103362
sS'required'
p103363
I00
sS'group_name'
p103364
S'Advanced'
p103365
sa(dp103366
S'name'
p103367
S'execute_on'
p103368
sS'cpp_type'
p103369
S'MultiMooseEnum'
p103370
sS'default'
p103371
S'TIMESTEP_END'
p103372
sS'description'
p103373
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103374
sS'required'
p103375
I00
sS'options'
p103376
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103377
sS'group_name'
p103378
Nsa(dp103379
S'description'
p103380
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103381
sS'cpp_type'
p103382
S'std::vector<OutputName, std::allocator<OutputName> >'
p103383
sS'default'
p103384
g3
sS'name'
p103385
S'outputs'
p103386
sS'required'
p103387
I00
sS'group_name'
p103388
S'Advanced'
p103389
sa(dp103390
S'description'
p103391
g3
sS'cpp_type'
p103392
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103393
sS'default'
p103394
S'NumResidualEvaluations'
p103395
sS'name'
p103396
S'type'
p103397
sS'required'
p103398
I00
sS'group_name'
p103399
Nsa(dp103400
S'description'
p103401
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103402
sS'cpp_type'
p103403
S'bool'
p103404
sS'default'
p103405
S'0'
p103406
sS'name'
p103407
S'use_displaced_mesh'
p103408
sS'required'
p103409
I00
sS'group_name'
p103410
S'Advanced'
p103411
sasS'name'
p103412
S'/Postprocessors/NumResidualEvaluations'
p103413
sa(dp103414
S'description'
p103415
g3
sS'subblocks'
p103416
NsS'parameters'
p103417
(lp103418
(dp103419
S'description'
p103420
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103421
sS'cpp_type'
p103422
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103423
sS'default'
p103424
g3
sS'name'
p103425
S'control_tags'
p103426
sS'required'
p103427
I00
sS'group_name'
p103428
S'Advanced'
p103429
sa(dp103430
S'description'
p103431
S'Set the enabled status of the MooseObject.\n'
p103432
sS'cpp_type'
p103433
S'bool'
p103434
sS'default'
p103435
S'1'
p103436
sS'name'
p103437
S'enable'
p103438
sS'required'
p103439
I00
sS'group_name'
p103440
S'Advanced'
p103441
sa(dp103442
S'name'
p103443
S'execute_on'
p103444
sS'cpp_type'
p103445
S'MultiMooseEnum'
p103446
sS'default'
p103447
S'TIMESTEP_END'
p103448
sS'description'
p103449
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103450
sS'required'
p103451
I00
sS'options'
p103452
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103453
sS'group_name'
p103454
Nsa(dp103455
S'description'
p103456
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103457
sS'cpp_type'
p103458
S'std::vector<OutputName, std::allocator<OutputName> >'
p103459
sS'default'
p103460
g3
sS'name'
p103461
S'outputs'
p103462
sS'required'
p103463
I00
sS'group_name'
p103464
S'Advanced'
p103465
sa(dp103466
S'name'
p103467
S'system'
p103468
sS'cpp_type'
p103469
S'MooseEnum'
p103470
sS'default'
p103471
S'nonlinear'
p103472
sS'description'
p103473
S'The system for which you want to print the number of variables.\n'
p103474
sS'required'
p103475
I00
sS'options'
p103476
S'nonlinear auxiliary'
p103477
sS'group_name'
p103478
Nsa(dp103479
S'description'
p103480
g3
sS'cpp_type'
p103481
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103482
sS'default'
p103483
S'NumVars'
p103484
sS'name'
p103485
S'type'
p103486
sS'required'
p103487
I00
sS'group_name'
p103488
Nsa(dp103489
S'description'
p103490
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103491
sS'cpp_type'
p103492
S'bool'
p103493
sS'default'
p103494
S'0'
p103495
sS'name'
p103496
S'use_displaced_mesh'
p103497
sS'required'
p103498
I00
sS'group_name'
p103499
S'Advanced'
p103500
sasS'name'
p103501
S'/Postprocessors/NumVars'
p103502
sa(dp103503
S'description'
p103504
g3
sS'subblocks'
p103505
NsS'parameters'
p103506
(lp103507
(dp103508
S'description'
p103509
S'The list of block ids (SubdomainID) that this object will be applied\n'
p103510
sS'cpp_type'
p103511
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p103512
sS'default'
p103513
g3
sS'name'
p103514
S'block'
p103515
sS'required'
p103516
I00
sS'group_name'
p103517
Nsa(dp103518
S'description'
p103519
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103520
sS'cpp_type'
p103521
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103522
sS'default'
p103523
g3
sS'name'
p103524
S'control_tags'
p103525
sS'required'
p103526
I00
sS'group_name'
p103527
S'Advanced'
p103528
sa(dp103529
S'description'
p103530
S'Set the enabled status of the MooseObject.\n'
p103531
sS'cpp_type'
p103532
S'bool'
p103533
sS'default'
p103534
S'1'
p103535
sS'name'
p103536
S'enable'
p103537
sS'required'
p103538
I00
sS'group_name'
p103539
S'Advanced'
p103540
sa(dp103541
S'name'
p103542
S'execute_on'
p103543
sS'cpp_type'
p103544
S'MultiMooseEnum'
p103545
sS'default'
p103546
S'TIMESTEP_END'
p103547
sS'description'
p103548
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103549
sS'required'
p103550
I00
sS'options'
p103551
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103552
sS'group_name'
p103553
Nsa(dp103554
S'description'
p103555
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103556
sS'cpp_type'
p103557
S'std::vector<OutputName, std::allocator<OutputName> >'
p103558
sS'default'
p103559
g3
sS'name'
p103560
S'outputs'
p103561
sS'required'
p103562
I00
sS'group_name'
p103563
S'Advanced'
p103564
sa(dp103565
S'description'
p103566
S'The seed for the master random number generator\n'
p103567
sS'cpp_type'
p103568
S'unsigned int'
p103569
sS'default'
p103570
S'0'
p103571
sS'name'
p103572
S'seed'
p103573
sS'required'
p103574
I00
sS'group_name'
p103575
S'Advanced'
p103576
sa(dp103577
S'description'
p103578
S'Temperature of simulation\n'
p103579
sS'cpp_type'
p103580
S'double'
p103581
sS'default'
p103582
S'1833'
p103583
sS'name'
p103584
S'temp'
p103585
sS'required'
p103586
I00
sS'group_name'
p103587
Nsa(dp103588
S'description'
p103589
g3
sS'cpp_type'
p103590
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103591
sS'default'
p103592
S'PFCElementEnergyIntegral'
p103593
sS'name'
p103594
S'type'
p103595
sS'required'
p103596
I00
sS'group_name'
p103597
Nsa(dp103598
S'description'
p103599
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103600
sS'cpp_type'
p103601
S'bool'
p103602
sS'default'
p103603
S'0'
p103604
sS'name'
p103605
S'use_displaced_mesh'
p103606
sS'required'
p103607
I00
sS'group_name'
p103608
S'Advanced'
p103609
sa(dp103610
S'description'
p103611
S'The name of the variable that this object operates on\n'
p103612
sS'cpp_type'
p103613
S'VariableName'
p103614
sS'default'
p103615
g3
sS'name'
p103616
S'variable'
p103617
sS'required'
p103618
I01
sS'group_name'
p103619
NsasS'name'
p103620
S'/Postprocessors/PFCElementEnergyIntegral'
p103621
sa(dp103622
S'description'
p103623
g3
sS'subblocks'
p103624
NsS'parameters'
p103625
(lp103626
(dp103627
S'description'
p103628
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103629
sS'cpp_type'
p103630
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103631
sS'default'
p103632
g3
sS'name'
p103633
S'control_tags'
p103634
sS'required'
p103635
I00
sS'group_name'
p103636
S'Advanced'
p103637
sa(dp103638
S'description'
p103639
S'Set the enabled status of the MooseObject.\n'
p103640
sS'cpp_type'
p103641
S'bool'
p103642
sS'default'
p103643
S'1'
p103644
sS'name'
p103645
S'enable'
p103646
sS'required'
p103647
I00
sS'group_name'
p103648
S'Advanced'
p103649
sa(dp103650
S'name'
p103651
S'execute_on'
p103652
sS'cpp_type'
p103653
S'MultiMooseEnum'
p103654
sS'default'
p103655
S'TIMESTEP_END'
p103656
sS'description'
p103657
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103658
sS'required'
p103659
I00
sS'options'
p103660
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103661
sS'group_name'
p103662
Nsa(dp103663
S'description'
p103664
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103665
sS'cpp_type'
p103666
S'std::vector<OutputName, std::allocator<OutputName> >'
p103667
sS'default'
p103668
g3
sS'name'
p103669
S'outputs'
p103670
sS'required'
p103671
I00
sS'group_name'
p103672
S'Advanced'
p103673
sa(dp103674
S'description'
p103675
S'The name of the postprocessor used for exit criterion\n'
p103676
sS'cpp_type'
p103677
S'PostprocessorName'
p103678
sS'default'
p103679
g3
sS'name'
p103680
S'postprocessor'
p103681
sS'required'
p103682
I01
sS'group_name'
p103683
Nsa(dp103684
S'description'
p103685
g3
sS'cpp_type'
p103686
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103687
sS'default'
p103688
S'PercentChangePostprocessor'
p103689
sS'name'
p103690
S'type'
p103691
sS'required'
p103692
I00
sS'group_name'
p103693
Nsa(dp103694
S'description'
p103695
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103696
sS'cpp_type'
p103697
S'bool'
p103698
sS'default'
p103699
S'0'
p103700
sS'name'
p103701
S'use_displaced_mesh'
p103702
sS'required'
p103703
I00
sS'group_name'
p103704
S'Advanced'
p103705
sasS'name'
p103706
S'/Postprocessors/PercentChangePostprocessor'
p103707
sa(dp103708
S'description'
p103709
g3
sS'subblocks'
p103710
NsS'parameters'
p103711
(lp103712
(dp103713
S'description'
p103714
S'The category or "Header" for the event\n'
p103715
sS'cpp_type'
p103716
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103717
sS'default'
p103718
S'Execution'
p103719
sS'name'
p103720
S'category'
p103721
sS'required'
p103722
I00
sS'group_name'
p103723
Nsa(dp103724
S'name'
p103725
S'column'
p103726
sS'cpp_type'
p103727
S'MooseEnum'
p103728
sS'default'
p103729
S'total_time_with_sub'
p103730
sS'description'
p103731
S'The column you want the value of (Default: total_time_with_sub).\n'
p103732
sS'required'
p103733
I00
sS'options'
p103734
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p103735
sS'group_name'
p103736
Nsa(dp103737
S'description'
p103738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103739
sS'cpp_type'
p103740
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103741
sS'default'
p103742
g3
sS'name'
p103743
S'control_tags'
p103744
sS'required'
p103745
I00
sS'group_name'
p103746
S'Advanced'
p103747
sa(dp103748
S'description'
p103749
S'Set the enabled status of the MooseObject.\n'
p103750
sS'cpp_type'
p103751
S'bool'
p103752
sS'default'
p103753
S'1'
p103754
sS'name'
p103755
S'enable'
p103756
sS'required'
p103757
I00
sS'group_name'
p103758
S'Advanced'
p103759
sa(dp103760
S'description'
p103761
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p103762
sS'cpp_type'
p103763
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103764
sS'default'
p103765
g3
sS'name'
p103766
S'event'
p103767
sS'required'
p103768
I01
sS'group_name'
p103769
Nsa(dp103770
S'name'
p103771
S'execute_on'
p103772
sS'cpp_type'
p103773
S'MultiMooseEnum'
p103774
sS'default'
p103775
S'TIMESTEP_END'
p103776
sS'description'
p103777
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103778
sS'required'
p103779
I00
sS'options'
p103780
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103781
sS'group_name'
p103782
Nsa(dp103783
S'description'
p103784
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103785
sS'cpp_type'
p103786
S'std::vector<OutputName, std::allocator<OutputName> >'
p103787
sS'default'
p103788
g3
sS'name'
p103789
S'outputs'
p103790
sS'required'
p103791
I00
sS'group_name'
p103792
S'Advanced'
p103793
sa(dp103794
S'description'
p103795
g3
sS'cpp_type'
p103796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103797
sS'default'
p103798
S'PerformanceData'
p103799
sS'name'
p103800
S'type'
p103801
sS'required'
p103802
I00
sS'group_name'
p103803
Nsa(dp103804
S'description'
p103805
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103806
sS'cpp_type'
p103807
S'bool'
p103808
sS'default'
p103809
S'0'
p103810
sS'name'
p103811
S'use_displaced_mesh'
p103812
sS'required'
p103813
I00
sS'group_name'
p103814
S'Advanced'
p103815
sasS'name'
p103816
S'/Postprocessors/PerformanceData'
p103817
sa(dp103818
S'description'
p103819
g3
sS'subblocks'
p103820
NsS'parameters'
p103821
(lp103822
(dp103823
S'description'
p103824
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103825
sS'cpp_type'
p103826
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103827
sS'default'
p103828
g3
sS'name'
p103829
S'control_tags'
p103830
sS'required'
p103831
I00
sS'group_name'
p103832
S'Advanced'
p103833
sa(dp103834
S'description'
p103835
S'Set the enabled status of the MooseObject.\n'
p103836
sS'cpp_type'
p103837
S'bool'
p103838
sS'default'
p103839
S'1'
p103840
sS'name'
p103841
S'enable'
p103842
sS'required'
p103843
I00
sS'group_name'
p103844
S'Advanced'
p103845
sa(dp103846
S'name'
p103847
S'execute_on'
p103848
sS'cpp_type'
p103849
S'MultiMooseEnum'
p103850
sS'default'
p103851
S'TIMESTEP_END'
p103852
sS'description'
p103853
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103854
sS'required'
p103855
I00
sS'options'
p103856
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103857
sS'group_name'
p103858
Nsa(dp103859
S'description'
p103860
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103861
sS'cpp_type'
p103862
S'std::vector<OutputName, std::allocator<OutputName> >'
p103863
sS'default'
p103864
g3
sS'name'
p103865
S'outputs'
p103866
sS'required'
p103867
I00
sS'group_name'
p103868
S'Advanced'
p103869
sa(dp103870
S'description'
p103871
S'The physical point where the solution will be evaluated.\n'
p103872
sS'cpp_type'
p103873
S'libMesh::Point'
p103874
sS'default'
p103875
g3
sS'name'
p103876
S'point'
p103877
sS'required'
p103878
I01
sS'group_name'
p103879
Nsa(dp103880
S'description'
p103881
g3
sS'cpp_type'
p103882
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103883
sS'default'
p103884
S'PointValue'
p103885
sS'name'
p103886
S'type'
p103887
sS'required'
p103888
I00
sS'group_name'
p103889
Nsa(dp103890
S'description'
p103891
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103892
sS'cpp_type'
p103893
S'bool'
p103894
sS'default'
p103895
S'0'
p103896
sS'name'
p103897
S'use_displaced_mesh'
p103898
sS'required'
p103899
I00
sS'group_name'
p103900
S'Advanced'
p103901
sa(dp103902
S'description'
p103903
S'The name of the variable that this postprocessor operates on.\n'
p103904
sS'cpp_type'
p103905
S'VariableName'
p103906
sS'default'
p103907
g3
sS'name'
p103908
S'variable'
p103909
sS'required'
p103910
I01
sS'group_name'
p103911
NsasS'name'
p103912
S'/Postprocessors/PointValue'
p103913
sa(dp103914
S'description'
p103915
g3
sS'subblocks'
p103916
NsS'parameters'
p103917
(lp103918
(dp103919
S'description'
p103920
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103921
sS'cpp_type'
p103922
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103923
sS'default'
p103924
g3
sS'name'
p103925
S'control_tags'
p103926
sS'required'
p103927
I00
sS'group_name'
p103928
S'Advanced'
p103929
sa(dp103930
S'description'
p103931
S'The default value\n'
p103932
sS'cpp_type'
p103933
S'double'
p103934
sS'default'
p103935
g3
sS'name'
p103936
S'default'
p103937
sS'required'
p103938
I00
sS'group_name'
p103939
Nsa(dp103940
S'description'
p103941
S'Set the enabled status of the MooseObject.\n'
p103942
sS'cpp_type'
p103943
S'bool'
p103944
sS'default'
p103945
S'1'
p103946
sS'name'
p103947
S'enable'
p103948
sS'required'
p103949
I00
sS'group_name'
p103950
S'Advanced'
p103951
sa(dp103952
S'name'
p103953
S'execute_on'
p103954
sS'cpp_type'
p103955
S'MultiMooseEnum'
p103956
sS'default'
p103957
S'TIMESTEP_END'
p103958
sS'description'
p103959
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103960
sS'required'
p103961
I00
sS'options'
p103962
S'none initial linear nonlinear timestep_end timestep_begin custom'
p103963
sS'group_name'
p103964
Nsa(dp103965
S'description'
p103966
S'Initialize the old postprocessor value with the default value\n'
p103967
sS'cpp_type'
p103968
S'bool'
p103969
sS'default'
p103970
S'1'
p103971
sS'name'
p103972
S'initialize_old'
p103973
sS'required'
p103974
I00
sS'group_name'
p103975
Nsa(dp103976
S'description'
p103977
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103978
sS'cpp_type'
p103979
S'std::vector<OutputName, std::allocator<OutputName> >'
p103980
sS'default'
p103981
g3
sS'name'
p103982
S'outputs'
p103983
sS'required'
p103984
I00
sS'group_name'
p103985
S'Advanced'
p103986
sa(dp103987
S'description'
p103988
g3
sS'cpp_type'
p103989
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103990
sS'default'
p103991
S'Receiver'
p103992
sS'name'
p103993
S'type'
p103994
sS'required'
p103995
I00
sS'group_name'
p103996
Nsa(dp103997
S'description'
p103998
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103999
sS'cpp_type'
p104000
S'bool'
p104001
sS'default'
p104002
S'0'
p104003
sS'name'
p104004
S'use_displaced_mesh'
p104005
sS'required'
p104006
I00
sS'group_name'
p104007
S'Advanced'
p104008
sasS'name'
p104009
S'/Postprocessors/Receiver'
p104010
sa(dp104011
S'description'
p104012
g3
sS'subblocks'
p104013
NsS'parameters'
p104014
(lp104015
(dp104016
S'description'
p104017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104018
sS'cpp_type'
p104019
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104020
sS'default'
p104021
g3
sS'name'
p104022
S'control_tags'
p104023
sS'required'
p104024
I00
sS'group_name'
p104025
S'Advanced'
p104026
sa(dp104027
S'description'
p104028
S'Set the enabled status of the MooseObject.\n'
p104029
sS'cpp_type'
p104030
S'bool'
p104031
sS'default'
p104032
S'1'
p104033
sS'name'
p104034
S'enable'
p104035
sS'required'
p104036
I00
sS'group_name'
p104037
S'Advanced'
p104038
sa(dp104039
S'name'
p104040
S'execute_on'
p104041
sS'cpp_type'
p104042
S'MultiMooseEnum'
p104043
sS'default'
p104044
S'TIMESTEP_END'
p104045
sS'description'
p104046
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104047
sS'required'
p104048
I00
sS'options'
p104049
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104050
sS'group_name'
p104051
Nsa(dp104052
S'description'
p104053
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104054
sS'cpp_type'
p104055
S'std::vector<OutputName, std::allocator<OutputName> >'
p104056
sS'default'
p104057
g3
sS'name'
p104058
S'outputs'
p104059
sS'required'
p104060
I00
sS'group_name'
p104061
S'Advanced'
p104062
sa(dp104063
S'description'
p104064
g3
sS'cpp_type'
p104065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104066
sS'default'
p104067
S'RelativeSolutionDifferenceNorm'
p104068
sS'name'
p104069
S'type'
p104070
sS'required'
p104071
I00
sS'group_name'
p104072
Nsa(dp104073
S'description'
p104074
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104075
sS'cpp_type'
p104076
S'bool'
p104077
sS'default'
p104078
S'0'
p104079
sS'name'
p104080
S'use_displaced_mesh'
p104081
sS'required'
p104082
I00
sS'group_name'
p104083
S'Advanced'
p104084
sasS'name'
p104085
S'/Postprocessors/RelativeSolutionDifferenceNorm'
p104086
sa(dp104087
S'description'
p104088
g3
sS'subblocks'
p104089
NsS'parameters'
p104090
(lp104091
(dp104092
S'description'
p104093
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104094
sS'cpp_type'
p104095
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104096
sS'default'
p104097
g3
sS'name'
p104098
S'control_tags'
p104099
sS'required'
p104100
I00
sS'group_name'
p104101
S'Advanced'
p104102
sa(dp104103
S'description'
p104104
S'Set the enabled status of the MooseObject.\n'
p104105
sS'cpp_type'
p104106
S'bool'
p104107
sS'default'
p104108
S'1'
p104109
sS'name'
p104110
S'enable'
p104111
sS'required'
p104112
I00
sS'group_name'
p104113
S'Advanced'
p104114
sa(dp104115
S'name'
p104116
S'execute_on'
p104117
sS'cpp_type'
p104118
S'MultiMooseEnum'
p104119
sS'default'
p104120
S'TIMESTEP_END'
p104121
sS'description'
p104122
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104123
sS'required'
p104124
I00
sS'options'
p104125
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104126
sS'group_name'
p104127
Nsa(dp104128
S'description'
p104129
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104130
sS'cpp_type'
p104131
S'std::vector<OutputName, std::allocator<OutputName> >'
p104132
sS'default'
p104133
g3
sS'name'
p104134
S'outputs'
p104135
sS'required'
p104136
I00
sS'group_name'
p104137
S'Advanced'
p104138
sa(dp104139
S'name'
p104140
S'residual_type'
p104141
sS'cpp_type'
p104142
S'MooseEnum'
p104143
sS'default'
p104144
S'FINAL'
p104145
sS'description'
p104146
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p104147
sS'required'
p104148
I00
sS'options'
p104149
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p104150
sS'group_name'
p104151
Nsa(dp104152
S'description'
p104153
g3
sS'cpp_type'
p104154
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104155
sS'default'
p104156
S'Residual'
p104157
sS'name'
p104158
S'type'
p104159
sS'required'
p104160
I00
sS'group_name'
p104161
Nsa(dp104162
S'description'
p104163
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104164
sS'cpp_type'
p104165
S'bool'
p104166
sS'default'
p104167
S'0'
p104168
sS'name'
p104169
S'use_displaced_mesh'
p104170
sS'required'
p104171
I00
sS'group_name'
p104172
S'Advanced'
p104173
sasS'name'
p104174
S'/Postprocessors/Residual'
p104175
sa(dp104176
S'description'
p104177
g3
sS'subblocks'
p104178
NsS'parameters'
p104179
(lp104180
(dp104181
S'description'
p104182
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104183
sS'cpp_type'
p104184
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104185
sS'default'
p104186
g3
sS'name'
p104187
S'control_tags'
p104188
sS'required'
p104189
I00
sS'group_name'
p104190
S'Advanced'
p104191
sa(dp104192
S'description'
p104193
S'Set the enabled status of the MooseObject.\n'
p104194
sS'cpp_type'
p104195
S'bool'
p104196
sS'default'
p104197
S'1'
p104198
sS'name'
p104199
S'enable'
p104200
sS'required'
p104201
I00
sS'group_name'
p104202
S'Advanced'
p104203
sa(dp104204
S'name'
p104205
S'execute_on'
p104206
sS'cpp_type'
p104207
S'MultiMooseEnum'
p104208
sS'default'
p104209
S'TIMESTEP_END'
p104210
sS'description'
p104211
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104212
sS'required'
p104213
I00
sS'options'
p104214
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104215
sS'group_name'
p104216
Nsa(dp104217
S'description'
p104218
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104219
sS'cpp_type'
p104220
S'std::vector<OutputName, std::allocator<OutputName> >'
p104221
sS'default'
p104222
g3
sS'name'
p104223
S'outputs'
p104224
sS'required'
p104225
I00
sS'group_name'
p104226
S'Advanced'
p104227
sa(dp104228
S'name'
p104229
S'time_type'
p104230
sS'cpp_type'
p104231
S'MooseEnum'
p104232
sS'default'
p104233
g3
sS'description'
p104234
S'Whether to output the total elapsed or just the active time\n'
p104235
sS'required'
p104236
I01
sS'options'
p104237
S'alive active'
p104238
sS'group_name'
p104239
Nsa(dp104240
S'description'
p104241
g3
sS'cpp_type'
p104242
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104243
sS'default'
p104244
S'RunTime'
p104245
sS'name'
p104246
S'type'
p104247
sS'required'
p104248
I00
sS'group_name'
p104249
Nsa(dp104250
S'description'
p104251
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104252
sS'cpp_type'
p104253
S'bool'
p104254
sS'default'
p104255
S'0'
p104256
sS'name'
p104257
S'use_displaced_mesh'
p104258
sS'required'
p104259
I00
sS'group_name'
p104260
S'Advanced'
p104261
sasS'name'
p104262
S'/Postprocessors/RunTime'
p104263
sa(dp104264
S'description'
p104265
g3
sS'subblocks'
p104266
NsS'parameters'
p104267
(lp104268
(dp104269
S'description'
p104270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104271
sS'cpp_type'
p104272
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104273
sS'default'
p104274
g3
sS'name'
p104275
S'control_tags'
p104276
sS'required'
p104277
I00
sS'group_name'
p104278
S'Advanced'
p104279
sa(dp104280
S'description'
p104281
S'Set the enabled status of the MooseObject.\n'
p104282
sS'cpp_type'
p104283
S'bool'
p104284
sS'default'
p104285
S'1'
p104286
sS'name'
p104287
S'enable'
p104288
sS'required'
p104289
I00
sS'group_name'
p104290
S'Advanced'
p104291
sa(dp104292
S'name'
p104293
S'execute_on'
p104294
sS'cpp_type'
p104295
S'MultiMooseEnum'
p104296
sS'default'
p104297
S'TIMESTEP_END'
p104298
sS'description'
p104299
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104300
sS'required'
p104301
I00
sS'options'
p104302
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104303
sS'group_name'
p104304
Nsa(dp104305
S'description'
p104306
S'The analytic solution to compare against\n'
p104307
sS'cpp_type'
p104308
S'FunctionName'
p104309
sS'default'
p104310
g3
sS'name'
p104311
S'function'
p104312
sS'required'
p104313
I01
sS'group_name'
p104314
Nsa(dp104315
S'description'
p104316
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104317
sS'cpp_type'
p104318
S'std::vector<OutputName, std::allocator<OutputName> >'
p104319
sS'default'
p104320
g3
sS'name'
p104321
S'outputs'
p104322
sS'required'
p104323
I00
sS'group_name'
p104324
S'Advanced'
p104325
sa(dp104326
S'description'
p104327
g3
sS'cpp_type'
p104328
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104329
sS'default'
p104330
S'ScalarL2Error'
p104331
sS'name'
p104332
S'type'
p104333
sS'required'
p104334
I00
sS'group_name'
p104335
Nsa(dp104336
S'description'
p104337
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104338
sS'cpp_type'
p104339
S'bool'
p104340
sS'default'
p104341
S'0'
p104342
sS'name'
p104343
S'use_displaced_mesh'
p104344
sS'required'
p104345
I00
sS'group_name'
p104346
S'Advanced'
p104347
sa(dp104348
S'description'
p104349
S'The name of the scalar variable\n'
p104350
sS'cpp_type'
p104351
S'VariableName'
p104352
sS'default'
p104353
g3
sS'name'
p104354
S'variable'
p104355
sS'required'
p104356
I01
sS'group_name'
p104357
NsasS'name'
p104358
S'/Postprocessors/ScalarL2Error'
p104359
sa(dp104360
S'description'
p104361
g3
sS'subblocks'
p104362
NsS'parameters'
p104363
(lp104364
(dp104365
S'description'
p104366
S'Component to output for this variable\n'
p104367
sS'cpp_type'
p104368
S'unsigned int'
p104369
sS'default'
p104370
S'0'
p104371
sS'name'
p104372
S'component'
p104373
sS'required'
p104374
I00
sS'group_name'
p104375
Nsa(dp104376
S'description'
p104377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104378
sS'cpp_type'
p104379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104380
sS'default'
p104381
g3
sS'name'
p104382
S'control_tags'
p104383
sS'required'
p104384
I00
sS'group_name'
p104385
S'Advanced'
p104386
sa(dp104387
S'description'
p104388
S'Set the enabled status of the MooseObject.\n'
p104389
sS'cpp_type'
p104390
S'bool'
p104391
sS'default'
p104392
S'1'
p104393
sS'name'
p104394
S'enable'
p104395
sS'required'
p104396
I00
sS'group_name'
p104397
S'Advanced'
p104398
sa(dp104399
S'name'
p104400
S'execute_on'
p104401
sS'cpp_type'
p104402
S'MultiMooseEnum'
p104403
sS'default'
p104404
S'TIMESTEP_END'
p104405
sS'description'
p104406
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104407
sS'required'
p104408
I00
sS'options'
p104409
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104410
sS'group_name'
p104411
Nsa(dp104412
S'description'
p104413
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104414
sS'cpp_type'
p104415
S'std::vector<OutputName, std::allocator<OutputName> >'
p104416
sS'default'
p104417
g3
sS'name'
p104418
S'outputs'
p104419
sS'required'
p104420
I00
sS'group_name'
p104421
S'Advanced'
p104422
sa(dp104423
S'description'
p104424
g3
sS'cpp_type'
p104425
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104426
sS'default'
p104427
S'ScalarVariable'
p104428
sS'name'
p104429
S'type'
p104430
sS'required'
p104431
I00
sS'group_name'
p104432
Nsa(dp104433
S'description'
p104434
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104435
sS'cpp_type'
p104436
S'bool'
p104437
sS'default'
p104438
S'0'
p104439
sS'name'
p104440
S'use_displaced_mesh'
p104441
sS'required'
p104442
I00
sS'group_name'
p104443
S'Advanced'
p104444
sa(dp104445
S'description'
p104446
S'Name of the variable\n'
p104447
sS'cpp_type'
p104448
S'VariableName'
p104449
sS'default'
p104450
g3
sS'name'
p104451
S'variable'
p104452
sS'required'
p104453
I01
sS'group_name'
p104454
NsasS'name'
p104455
S'/Postprocessors/ScalarVariable'
p104456
sa(dp104457
S'description'
p104458
g3
sS'subblocks'
p104459
NsS'parameters'
p104460
(lp104461
(dp104462
S'description'
p104463
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104464
sS'cpp_type'
p104465
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104466
sS'default'
p104467
g3
sS'name'
p104468
S'control_tags'
p104469
sS'required'
p104470
I00
sS'group_name'
p104471
S'Advanced'
p104472
sa(dp104473
S'description'
p104474
S'Set the enabled status of the MooseObject.\n'
p104475
sS'cpp_type'
p104476
S'bool'
p104477
sS'default'
p104478
S'1'
p104479
sS'name'
p104480
S'enable'
p104481
sS'required'
p104482
I00
sS'group_name'
p104483
S'Advanced'
p104484
sa(dp104485
S'name'
p104486
S'execute_on'
p104487
sS'cpp_type'
p104488
S'MultiMooseEnum'
p104489
sS'default'
p104490
S'TIMESTEP_END'
p104491
sS'description'
p104492
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104493
sS'required'
p104494
I00
sS'options'
p104495
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104496
sS'group_name'
p104497
Nsa(dp104498
S'description'
p104499
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104500
sS'cpp_type'
p104501
S'std::vector<OutputName, std::allocator<OutputName> >'
p104502
sS'default'
p104503
g3
sS'name'
p104504
S'outputs'
p104505
sS'required'
p104506
I00
sS'group_name'
p104507
S'Advanced'
p104508
sa(dp104509
S'description'
p104510
S'The scaling factor\n'
p104511
sS'cpp_type'
p104512
S'double'
p104513
sS'default'
p104514
S'1'
p104515
sS'name'
p104516
S'scaling_factor'
p104517
sS'required'
p104518
I00
sS'group_name'
p104519
Nsa(dp104520
S'description'
p104521
g3
sS'cpp_type'
p104522
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104523
sS'default'
p104524
S'ScalePostprocessor'
p104525
sS'name'
p104526
S'type'
p104527
sS'required'
p104528
I00
sS'group_name'
p104529
Nsa(dp104530
S'description'
p104531
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104532
sS'cpp_type'
p104533
S'bool'
p104534
sS'default'
p104535
S'0'
p104536
sS'name'
p104537
S'use_displaced_mesh'
p104538
sS'required'
p104539
I00
sS'group_name'
p104540
S'Advanced'
p104541
sa(dp104542
S'description'
p104543
S'The postprocessor to be scaled\n'
p104544
sS'cpp_type'
p104545
S'PostprocessorName'
p104546
sS'default'
p104547
g3
sS'name'
p104548
S'value'
p104549
sS'required'
p104550
I01
sS'group_name'
p104551
NsasS'name'
p104552
S'/Postprocessors/ScalePostprocessor'
p104553
sa(dp104554
S'description'
p104555
g3
sS'subblocks'
p104556
NsS'parameters'
p104557
(lp104558
(dp104559
S'description'
p104560
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104561
sS'cpp_type'
p104562
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104563
sS'default'
p104564
g3
sS'name'
p104565
S'boundary'
p104566
sS'required'
p104567
I01
sS'group_name'
p104568
Nsa(dp104569
S'description'
p104570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104571
sS'cpp_type'
p104572
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104573
sS'default'
p104574
g3
sS'name'
p104575
S'control_tags'
p104576
sS'required'
p104577
I00
sS'group_name'
p104578
S'Advanced'
p104579
sa(dp104580
S'description'
p104581
S'Set the enabled status of the MooseObject.\n'
p104582
sS'cpp_type'
p104583
S'bool'
p104584
sS'default'
p104585
S'1'
p104586
sS'name'
p104587
S'enable'
p104588
sS'required'
p104589
I00
sS'group_name'
p104590
S'Advanced'
p104591
sa(dp104592
S'name'
p104593
S'execute_on'
p104594
sS'cpp_type'
p104595
S'MultiMooseEnum'
p104596
sS'default'
p104597
S'TIMESTEP_END'
p104598
sS'description'
p104599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104600
sS'required'
p104601
I00
sS'options'
p104602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104603
sS'group_name'
p104604
Nsa(dp104605
S'description'
p104606
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104607
sS'cpp_type'
p104608
S'std::vector<OutputName, std::allocator<OutputName> >'
p104609
sS'default'
p104610
g3
sS'name'
p104611
S'outputs'
p104612
sS'required'
p104613
I00
sS'group_name'
p104614
S'Advanced'
p104615
sa(dp104616
S'description'
p104617
g3
sS'cpp_type'
p104618
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104619
sS'default'
p104620
S'SideAverageValue'
p104621
sS'name'
p104622
S'type'
p104623
sS'required'
p104624
I00
sS'group_name'
p104625
Nsa(dp104626
S'description'
p104627
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104628
sS'cpp_type'
p104629
S'bool'
p104630
sS'default'
p104631
S'0'
p104632
sS'name'
p104633
S'use_displaced_mesh'
p104634
sS'required'
p104635
I00
sS'group_name'
p104636
S'Advanced'
p104637
sa(dp104638
S'description'
p104639
S'The name of the variable that this boundary condition applies to\n'
p104640
sS'cpp_type'
p104641
S'std::vector<VariableName>'
p104642
sS'default'
p104643
g3
sS'name'
p104644
S'variable'
p104645
sS'required'
p104646
I01
sS'group_name'
p104647
NsasS'name'
p104648
S'/Postprocessors/SideAverageValue'
p104649
sa(dp104650
S'description'
p104651
g3
sS'subblocks'
p104652
NsS'parameters'
p104653
(lp104654
(dp104655
S'description'
p104656
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104657
sS'cpp_type'
p104658
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104659
sS'default'
p104660
g3
sS'name'
p104661
S'boundary'
p104662
sS'required'
p104663
I01
sS'group_name'
p104664
Nsa(dp104665
S'description'
p104666
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104667
sS'cpp_type'
p104668
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104669
sS'default'
p104670
g3
sS'name'
p104671
S'control_tags'
p104672
sS'required'
p104673
I00
sS'group_name'
p104674
S'Advanced'
p104675
sa(dp104676
S'description'
p104677
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p104678
sS'cpp_type'
p104679
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104680
sS'default'
p104681
g3
sS'name'
p104682
S'diffusivity'
p104683
sS'required'
p104684
I01
sS'group_name'
p104685
Nsa(dp104686
S'description'
p104687
S'Set the enabled status of the MooseObject.\n'
p104688
sS'cpp_type'
p104689
S'bool'
p104690
sS'default'
p104691
S'1'
p104692
sS'name'
p104693
S'enable'
p104694
sS'required'
p104695
I00
sS'group_name'
p104696
S'Advanced'
p104697
sa(dp104698
S'name'
p104699
S'execute_on'
p104700
sS'cpp_type'
p104701
S'MultiMooseEnum'
p104702
sS'default'
p104703
S'TIMESTEP_END'
p104704
sS'description'
p104705
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104706
sS'required'
p104707
I00
sS'options'
p104708
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104709
sS'group_name'
p104710
Nsa(dp104711
S'description'
p104712
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104713
sS'cpp_type'
p104714
S'std::vector<OutputName, std::allocator<OutputName> >'
p104715
sS'default'
p104716
g3
sS'name'
p104717
S'outputs'
p104718
sS'required'
p104719
I00
sS'group_name'
p104720
S'Advanced'
p104721
sa(dp104722
S'description'
p104723
g3
sS'cpp_type'
p104724
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104725
sS'default'
p104726
S'SideFluxAverage'
p104727
sS'name'
p104728
S'type'
p104729
sS'required'
p104730
I00
sS'group_name'
p104731
Nsa(dp104732
S'description'
p104733
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104734
sS'cpp_type'
p104735
S'bool'
p104736
sS'default'
p104737
S'0'
p104738
sS'name'
p104739
S'use_displaced_mesh'
p104740
sS'required'
p104741
I00
sS'group_name'
p104742
S'Advanced'
p104743
sa(dp104744
S'description'
p104745
S'The name of the variable that this boundary condition applies to\n'
p104746
sS'cpp_type'
p104747
S'std::vector<VariableName>'
p104748
sS'default'
p104749
g3
sS'name'
p104750
S'variable'
p104751
sS'required'
p104752
I01
sS'group_name'
p104753
NsasS'name'
p104754
S'/Postprocessors/SideFluxAverage'
p104755
sa(dp104756
S'description'
p104757
g3
sS'subblocks'
p104758
NsS'parameters'
p104759
(lp104760
(dp104761
S'description'
p104762
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104763
sS'cpp_type'
p104764
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104765
sS'default'
p104766
g3
sS'name'
p104767
S'boundary'
p104768
sS'required'
p104769
I01
sS'group_name'
p104770
Nsa(dp104771
S'description'
p104772
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104773
sS'cpp_type'
p104774
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104775
sS'default'
p104776
g3
sS'name'
p104777
S'control_tags'
p104778
sS'required'
p104779
I00
sS'group_name'
p104780
S'Advanced'
p104781
sa(dp104782
S'description'
p104783
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p104784
sS'cpp_type'
p104785
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104786
sS'default'
p104787
g3
sS'name'
p104788
S'diffusivity'
p104789
sS'required'
p104790
I01
sS'group_name'
p104791
Nsa(dp104792
S'description'
p104793
S'Set the enabled status of the MooseObject.\n'
p104794
sS'cpp_type'
p104795
S'bool'
p104796
sS'default'
p104797
S'1'
p104798
sS'name'
p104799
S'enable'
p104800
sS'required'
p104801
I00
sS'group_name'
p104802
S'Advanced'
p104803
sa(dp104804
S'name'
p104805
S'execute_on'
p104806
sS'cpp_type'
p104807
S'MultiMooseEnum'
p104808
sS'default'
p104809
S'TIMESTEP_END'
p104810
sS'description'
p104811
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104812
sS'required'
p104813
I00
sS'options'
p104814
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104815
sS'group_name'
p104816
Nsa(dp104817
S'description'
p104818
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104819
sS'cpp_type'
p104820
S'std::vector<OutputName, std::allocator<OutputName> >'
p104821
sS'default'
p104822
g3
sS'name'
p104823
S'outputs'
p104824
sS'required'
p104825
I00
sS'group_name'
p104826
S'Advanced'
p104827
sa(dp104828
S'description'
p104829
g3
sS'cpp_type'
p104830
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104831
sS'default'
p104832
S'SideFluxIntegral'
p104833
sS'name'
p104834
S'type'
p104835
sS'required'
p104836
I00
sS'group_name'
p104837
Nsa(dp104838
S'description'
p104839
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104840
sS'cpp_type'
p104841
S'bool'
p104842
sS'default'
p104843
S'0'
p104844
sS'name'
p104845
S'use_displaced_mesh'
p104846
sS'required'
p104847
I00
sS'group_name'
p104848
S'Advanced'
p104849
sa(dp104850
S'description'
p104851
S'The name of the variable that this boundary condition applies to\n'
p104852
sS'cpp_type'
p104853
S'std::vector<VariableName>'
p104854
sS'default'
p104855
g3
sS'name'
p104856
S'variable'
p104857
sS'required'
p104858
I01
sS'group_name'
p104859
NsasS'name'
p104860
S'/Postprocessors/SideFluxIntegral'
p104861
sa(dp104862
S'description'
p104863
g3
sS'subblocks'
p104864
NsS'parameters'
p104865
(lp104866
(dp104867
S'description'
p104868
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104869
sS'cpp_type'
p104870
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104871
sS'default'
p104872
g3
sS'name'
p104873
S'boundary'
p104874
sS'required'
p104875
I01
sS'group_name'
p104876
Nsa(dp104877
S'description'
p104878
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104879
sS'cpp_type'
p104880
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104881
sS'default'
p104882
g3
sS'name'
p104883
S'control_tags'
p104884
sS'required'
p104885
I00
sS'group_name'
p104886
S'Advanced'
p104887
sa(dp104888
S'description'
p104889
S'Set the enabled status of the MooseObject.\n'
p104890
sS'cpp_type'
p104891
S'bool'
p104892
sS'default'
p104893
S'1'
p104894
sS'name'
p104895
S'enable'
p104896
sS'required'
p104897
I00
sS'group_name'
p104898
S'Advanced'
p104899
sa(dp104900
S'name'
p104901
S'execute_on'
p104902
sS'cpp_type'
p104903
S'MultiMooseEnum'
p104904
sS'default'
p104905
S'TIMESTEP_END'
p104906
sS'description'
p104907
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104908
sS'required'
p104909
I00
sS'options'
p104910
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104911
sS'group_name'
p104912
Nsa(dp104913
S'description'
p104914
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104915
sS'cpp_type'
p104916
S'std::vector<OutputName, std::allocator<OutputName> >'
p104917
sS'default'
p104918
g3
sS'name'
p104919
S'outputs'
p104920
sS'required'
p104921
I00
sS'group_name'
p104922
S'Advanced'
p104923
sa(dp104924
S'description'
p104925
g3
sS'cpp_type'
p104926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104927
sS'default'
p104928
S'SideIntegralVariablePostprocessor'
p104929
sS'name'
p104930
S'type'
p104931
sS'required'
p104932
I00
sS'group_name'
p104933
Nsa(dp104934
S'description'
p104935
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104936
sS'cpp_type'
p104937
S'bool'
p104938
sS'default'
p104939
S'0'
p104940
sS'name'
p104941
S'use_displaced_mesh'
p104942
sS'required'
p104943
I00
sS'group_name'
p104944
S'Advanced'
p104945
sa(dp104946
S'description'
p104947
S'The name of the variable that this boundary condition applies to\n'
p104948
sS'cpp_type'
p104949
S'std::vector<VariableName>'
p104950
sS'default'
p104951
g3
sS'name'
p104952
S'variable'
p104953
sS'required'
p104954
I01
sS'group_name'
p104955
NsasS'name'
p104956
S'/Postprocessors/SideIntegralVariablePostprocessor'
p104957
sa(dp104958
S'description'
p104959
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p104960
sS'subblocks'
p104961
NsS'parameters'
p104962
(lp104963
(dp104964
S'description'
p104965
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104966
sS'cpp_type'
p104967
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104968
sS'default'
p104969
g3
sS'name'
p104970
S'control_tags'
p104971
sS'required'
p104972
I00
sS'group_name'
p104973
S'Advanced'
p104974
sa(dp104975
S'description'
p104976
S'Set the enabled status of the MooseObject.\n'
p104977
sS'cpp_type'
p104978
S'bool'
p104979
sS'default'
p104980
S'1'
p104981
sS'name'
p104982
S'enable'
p104983
sS'required'
p104984
I00
sS'group_name'
p104985
S'Advanced'
p104986
sa(dp104987
S'name'
p104988
S'execute_on'
p104989
sS'cpp_type'
p104990
S'MultiMooseEnum'
p104991
sS'default'
p104992
S'TIMESTEP_END'
p104993
sS'description'
p104994
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104995
sS'required'
p104996
I00
sS'options'
p104997
S'none initial linear nonlinear timestep_end timestep_begin custom'
p104998
sS'group_name'
p104999
Nsa(dp105000
S'description'
p105001
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105002
sS'cpp_type'
p105003
S'std::vector<OutputName, std::allocator<OutputName> >'
p105004
sS'default'
p105005
g3
sS'name'
p105006
S'outputs'
p105007
sS'required'
p105008
I00
sS'group_name'
p105009
S'Advanced'
p105010
sa(dp105011
S'description'
p105012
S'The name of the postprocessor used for reporting time extreme values\n'
p105013
sS'cpp_type'
p105014
S'PostprocessorName'
p105015
sS'default'
p105016
g3
sS'name'
p105017
S'postprocessor'
p105018
sS'required'
p105019
I01
sS'group_name'
p105020
Nsa(dp105021
S'description'
p105022
g3
sS'cpp_type'
p105023
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105024
sS'default'
p105025
S'TimeExtremeValue'
p105026
sS'name'
p105027
S'type'
p105028
sS'required'
p105029
I00
sS'group_name'
p105030
Nsa(dp105031
S'description'
p105032
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105033
sS'cpp_type'
p105034
S'bool'
p105035
sS'default'
p105036
S'0'
p105037
sS'name'
p105038
S'use_displaced_mesh'
p105039
sS'required'
p105040
I00
sS'group_name'
p105041
S'Advanced'
p105042
sa(dp105043
S'name'
p105044
S'value_type'
p105045
sS'cpp_type'
p105046
S'MooseEnum'
p105047
sS'default'
p105048
S'max'
p105049
sS'description'
p105050
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p105051
sS'required'
p105052
I00
sS'options'
p105053
S'max min abs_max abs_min'
p105054
sS'group_name'
p105055
NsasS'name'
p105056
S'/Postprocessors/TimeExtremeValue'
p105057
sa(dp105058
S'description'
p105059
g3
sS'subblocks'
p105060
NsS'parameters'
p105061
(lp105062
(dp105063
S'description'
p105064
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105065
sS'cpp_type'
p105066
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105067
sS'default'
p105068
g3
sS'name'
p105069
S'control_tags'
p105070
sS'required'
p105071
I00
sS'group_name'
p105072
S'Advanced'
p105073
sa(dp105074
S'description'
p105075
S'Set the enabled status of the MooseObject.\n'
p105076
sS'cpp_type'
p105077
S'bool'
p105078
sS'default'
p105079
S'1'
p105080
sS'name'
p105081
S'enable'
p105082
sS'required'
p105083
I00
sS'group_name'
p105084
S'Advanced'
p105085
sa(dp105086
S'name'
p105087
S'execute_on'
p105088
sS'cpp_type'
p105089
S'MultiMooseEnum'
p105090
sS'default'
p105091
S'TIMESTEP_END'
p105092
sS'description'
p105093
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105094
sS'required'
p105095
I00
sS'options'
p105096
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105097
sS'group_name'
p105098
Nsa(dp105099
S'description'
p105100
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105101
sS'cpp_type'
p105102
S'std::vector<OutputName, std::allocator<OutputName> >'
p105103
sS'default'
p105104
g3
sS'name'
p105105
S'outputs'
p105106
sS'required'
p105107
I00
sS'group_name'
p105108
S'Advanced'
p105109
sa(dp105110
S'description'
p105111
g3
sS'cpp_type'
p105112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105113
sS'default'
p105114
S'TimestepSize'
p105115
sS'name'
p105116
S'type'
p105117
sS'required'
p105118
I00
sS'group_name'
p105119
Nsa(dp105120
S'description'
p105121
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105122
sS'cpp_type'
p105123
S'bool'
p105124
sS'default'
p105125
S'0'
p105126
sS'name'
p105127
S'use_displaced_mesh'
p105128
sS'required'
p105129
I00
sS'group_name'
p105130
S'Advanced'
p105131
sasS'name'
p105132
S'/Postprocessors/TimestepSize'
p105133
sa(dp105134
S'description'
p105135
g3
sS'subblocks'
p105136
NsS'parameters'
p105137
(lp105138
(dp105139
S'description'
p105140
S'Origin of the axis of rotation used to calculate the torque\n'
p105141
sS'cpp_type'
p105142
S'libMesh::VectorValue<double>'
p105143
sS'default'
p105144
S'0 0 0'
p105145
sS'name'
p105146
S'axis_origin'
p105147
sS'required'
p105148
I00
sS'group_name'
p105149
Nsa(dp105150
S'description'
p105151
S'The list of block ids (SubdomainID) that this object will be applied\n'
p105152
sS'cpp_type'
p105153
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105154
sS'default'
p105155
g3
sS'name'
p105156
S'block'
p105157
sS'required'
p105158
I00
sS'group_name'
p105159
Nsa(dp105160
S'description'
p105161
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p105162
sS'cpp_type'
p105163
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p105164
sS'default'
p105165
g3
sS'name'
p105166
S'boundary'
p105167
sS'required'
p105168
I00
sS'group_name'
p105169
Nsa(dp105170
S'description'
p105171
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105172
sS'cpp_type'
p105173
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105174
sS'default'
p105175
g3
sS'name'
p105176
S'control_tags'
p105177
sS'required'
p105178
I00
sS'group_name'
p105179
S'Advanced'
p105180
sa(dp105181
S'description'
p105182
S'The direction vector of the axis of rotation about which the calculated torque is calculated\n'
p105183
sS'cpp_type'
p105184
S'libMesh::VectorValue<double>'
p105185
sS'default'
p105186
g3
sS'name'
p105187
S'direction_vector'
p105188
sS'required'
p105189
I01
sS'group_name'
p105190
Nsa(dp105191
S'description'
p105192
S'Set the enabled status of the MooseObject.\n'
p105193
sS'cpp_type'
p105194
S'bool'
p105195
sS'default'
p105196
S'1'
p105197
sS'name'
p105198
S'enable'
p105199
sS'required'
p105200
I00
sS'group_name'
p105201
S'Advanced'
p105202
sa(dp105203
S'name'
p105204
S'execute_on'
p105205
sS'cpp_type'
p105206
S'MultiMooseEnum'
p105207
sS'default'
p105208
S'TIMESTEP_END'
p105209
sS'description'
p105210
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105211
sS'required'
p105212
I00
sS'options'
p105213
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105214
sS'group_name'
p105215
Nsa(dp105216
S'description'
p105217
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105218
sS'cpp_type'
p105219
S'std::vector<OutputName, std::allocator<OutputName> >'
p105220
sS'default'
p105221
g3
sS'name'
p105222
S'outputs'
p105223
sS'required'
p105224
I00
sS'group_name'
p105225
S'Advanced'
p105226
sa(dp105227
S'description'
p105228
S'The reaction variables\n'
p105229
sS'cpp_type'
p105230
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p105231
sS'default'
p105232
g3
sS'name'
p105233
S'react'
p105234
sS'required'
p105235
I01
sS'group_name'
p105236
Nsa(dp105237
S'description'
p105238
S'The seed for the master random number generator\n'
p105239
sS'cpp_type'
p105240
S'unsigned int'
p105241
sS'default'
p105242
S'0'
p105243
sS'name'
p105244
S'seed'
p105245
sS'required'
p105246
I00
sS'group_name'
p105247
S'Advanced'
p105248
sa(dp105249
S'description'
p105250
g3
sS'cpp_type'
p105251
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105252
sS'default'
p105253
S'TorqueReaction'
p105254
sS'name'
p105255
S'type'
p105256
sS'required'
p105257
I00
sS'group_name'
p105258
Nsa(dp105259
S'description'
p105260
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p105261
sS'cpp_type'
p105262
S'bool'
p105263
sS'default'
p105264
S'0'
p105265
sS'name'
p105266
S'unique_node_execute'
p105267
sS'required'
p105268
I00
sS'group_name'
p105269
Nsa(dp105270
S'description'
p105271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105272
sS'cpp_type'
p105273
S'bool'
p105274
sS'default'
p105275
S'1'
p105276
sS'name'
p105277
S'use_displaced_mesh'
p105278
sS'required'
p105279
I00
sS'group_name'
p105280
S'Advanced'
p105281
sasS'name'
p105282
S'/Postprocessors/TorqueReaction'
p105283
sa(dp105284
S'description'
p105285
g3
sS'subblocks'
p105286
NsS'parameters'
p105287
(lp105288
(dp105289
S'description'
p105290
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105291
sS'cpp_type'
p105292
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105293
sS'default'
p105294
g3
sS'name'
p105295
S'control_tags'
p105296
sS'required'
p105297
I00
sS'group_name'
p105298
S'Advanced'
p105299
sa(dp105300
S'description'
p105301
S'Set the enabled status of the MooseObject.\n'
p105302
sS'cpp_type'
p105303
S'bool'
p105304
sS'default'
p105305
S'1'
p105306
sS'name'
p105307
S'enable'
p105308
sS'required'
p105309
I00
sS'group_name'
p105310
S'Advanced'
p105311
sa(dp105312
S'name'
p105313
S'execute_on'
p105314
sS'cpp_type'
p105315
S'MultiMooseEnum'
p105316
sS'default'
p105317
S'TIMESTEP_END'
p105318
sS'description'
p105319
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105320
sS'required'
p105321
I00
sS'options'
p105322
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105323
sS'group_name'
p105324
Nsa(dp105325
S'description'
p105326
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105327
sS'cpp_type'
p105328
S'std::vector<OutputName, std::allocator<OutputName> >'
p105329
sS'default'
p105330
g3
sS'name'
p105331
S'outputs'
p105332
sS'required'
p105333
I00
sS'group_name'
p105334
S'Advanced'
p105335
sa(dp105336
S'description'
p105337
g3
sS'cpp_type'
p105338
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105339
sS'default'
p105340
S'TotalVariableValue'
p105341
sS'name'
p105342
S'type'
p105343
sS'required'
p105344
I00
sS'group_name'
p105345
Nsa(dp105346
S'description'
p105347
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105348
sS'cpp_type'
p105349
S'bool'
p105350
sS'default'
p105351
S'0'
p105352
sS'name'
p105353
S'use_displaced_mesh'
p105354
sS'required'
p105355
I00
sS'group_name'
p105356
S'Advanced'
p105357
sa(dp105358
S'description'
p105359
S'The name of the postprocessor\n'
p105360
sS'cpp_type'
p105361
S'PostprocessorName'
p105362
sS'default'
p105363
g3
sS'name'
p105364
S'value'
p105365
sS'required'
p105366
I00
sS'group_name'
p105367
NsasS'name'
p105368
S'/Postprocessors/TotalVariableValue'
p105369
sa(dp105370
S'description'
p105371
g3
sS'subblocks'
p105372
NsS'parameters'
p105373
(lp105374
(dp105375
S'description'
p105376
S'The list of block ids (SubdomainID) that this object will be applied\n'
p105377
sS'cpp_type'
p105378
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105379
sS'default'
p105380
g3
sS'name'
p105381
S'block'
p105382
sS'required'
p105383
I00
sS'group_name'
p105384
Nsa(dp105385
S'description'
p105386
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105387
sS'cpp_type'
p105388
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105389
sS'default'
p105390
g3
sS'name'
p105391
S'control_tags'
p105392
sS'required'
p105393
I00
sS'group_name'
p105394
S'Advanced'
p105395
sa(dp105396
S'description'
p105397
S'Set the enabled status of the MooseObject.\n'
p105398
sS'cpp_type'
p105399
S'bool'
p105400
sS'default'
p105401
S'1'
p105402
sS'name'
p105403
S'enable'
p105404
sS'required'
p105405
I00
sS'group_name'
p105406
S'Advanced'
p105407
sa(dp105408
S'name'
p105409
S'execute_on'
p105410
sS'cpp_type'
p105411
S'MultiMooseEnum'
p105412
sS'default'
p105413
S'TIMESTEP_END'
p105414
sS'description'
p105415
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105416
sS'required'
p105417
I00
sS'options'
p105418
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105419
sS'group_name'
p105420
Nsa(dp105421
S'description'
p105422
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105423
sS'cpp_type'
p105424
S'std::vector<OutputName, std::allocator<OutputName> >'
p105425
sS'default'
p105426
g3
sS'name'
p105427
S'outputs'
p105428
sS'required'
p105429
I00
sS'group_name'
p105430
S'Advanced'
p105431
sa(dp105432
S'description'
p105433
S'The name of the second variable in the inner product (variable, second_variable)\n'
p105434
sS'cpp_type'
p105435
S'std::vector<VariableName>'
p105436
sS'default'
p105437
g3
sS'name'
p105438
S'second_variable'
p105439
sS'required'
p105440
I01
sS'group_name'
p105441
Nsa(dp105442
S'description'
p105443
S'The seed for the master random number generator\n'
p105444
sS'cpp_type'
p105445
S'unsigned int'
p105446
sS'default'
p105447
S'0'
p105448
sS'name'
p105449
S'seed'
p105450
sS'required'
p105451
I00
sS'group_name'
p105452
S'Advanced'
p105453
sa(dp105454
S'description'
p105455
g3
sS'cpp_type'
p105456
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105457
sS'default'
p105458
S'VariableInnerProduct'
p105459
sS'name'
p105460
S'type'
p105461
sS'required'
p105462
I00
sS'group_name'
p105463
Nsa(dp105464
S'description'
p105465
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105466
sS'cpp_type'
p105467
S'bool'
p105468
sS'default'
p105469
S'0'
p105470
sS'name'
p105471
S'use_displaced_mesh'
p105472
sS'required'
p105473
I00
sS'group_name'
p105474
S'Advanced'
p105475
sa(dp105476
S'description'
p105477
S'The name of the variable that this object operates on\n'
p105478
sS'cpp_type'
p105479
S'std::vector<VariableName>'
p105480
sS'default'
p105481
g3
sS'name'
p105482
S'variable'
p105483
sS'required'
p105484
I01
sS'group_name'
p105485
NsasS'name'
p105486
S'/Postprocessors/VariableInnerProduct'
p105487
sa(dp105488
S'description'
p105489
g3
sS'subblocks'
p105490
NsS'parameters'
p105491
(lp105492
(dp105493
S'description'
p105494
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105495
sS'cpp_type'
p105496
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105497
sS'default'
p105498
g3
sS'name'
p105499
S'control_tags'
p105500
sS'required'
p105501
I00
sS'group_name'
p105502
S'Advanced'
p105503
sa(dp105504
S'description'
p105505
S'Set the enabled status of the MooseObject.\n'
p105506
sS'cpp_type'
p105507
S'bool'
p105508
sS'default'
p105509
S'1'
p105510
sS'name'
p105511
S'enable'
p105512
sS'required'
p105513
I00
sS'group_name'
p105514
S'Advanced'
p105515
sa(dp105516
S'name'
p105517
S'execute_on'
p105518
sS'cpp_type'
p105519
S'MultiMooseEnum'
p105520
sS'default'
p105521
S'TIMESTEP_END'
p105522
sS'description'
p105523
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105524
sS'required'
p105525
I00
sS'options'
p105526
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105527
sS'group_name'
p105528
Nsa(dp105529
S'description'
p105530
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105531
sS'cpp_type'
p105532
S'std::vector<OutputName, std::allocator<OutputName> >'
p105533
sS'default'
p105534
g3
sS'name'
p105535
S'outputs'
p105536
sS'required'
p105537
I00
sS'group_name'
p105538
S'Advanced'
p105539
sa(dp105540
S'description'
p105541
g3
sS'cpp_type'
p105542
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105543
sS'default'
p105544
S'VariableResidual'
p105545
sS'name'
p105546
S'type'
p105547
sS'required'
p105548
I00
sS'group_name'
p105549
Nsa(dp105550
S'description'
p105551
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105552
sS'cpp_type'
p105553
S'bool'
p105554
sS'default'
p105555
S'0'
p105556
sS'name'
p105557
S'use_displaced_mesh'
p105558
sS'required'
p105559
I00
sS'group_name'
p105560
S'Advanced'
p105561
sa(dp105562
S'description'
p105563
S'The name of the variable to compute the residual for\n'
p105564
sS'cpp_type'
p105565
S'VariableName'
p105566
sS'default'
p105567
g3
sS'name'
p105568
S'variable'
p105569
sS'required'
p105570
I01
sS'group_name'
p105571
NsasS'name'
p105572
S'/Postprocessors/VariableResidual'
p105573
sa(dp105574
S'description'
p105575
g3
sS'subblocks'
p105576
NsS'parameters'
p105577
(lp105578
(dp105579
S'description'
p105580
S'The list of block ids (SubdomainID) that this object will be applied\n'
p105581
sS'cpp_type'
p105582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105583
sS'default'
p105584
g3
sS'name'
p105585
S'block'
p105586
sS'required'
p105587
I00
sS'group_name'
p105588
Nsa(dp105589
S'description'
p105590
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105591
sS'cpp_type'
p105592
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105593
sS'default'
p105594
g3
sS'name'
p105595
S'control_tags'
p105596
sS'required'
p105597
I00
sS'group_name'
p105598
S'Advanced'
p105599
sa(dp105600
S'description'
p105601
S'Set the enabled status of the MooseObject.\n'
p105602
sS'cpp_type'
p105603
S'bool'
p105604
sS'default'
p105605
S'1'
p105606
sS'name'
p105607
S'enable'
p105608
sS'required'
p105609
I00
sS'group_name'
p105610
S'Advanced'
p105611
sa(dp105612
S'name'
p105613
S'execute_on'
p105614
sS'cpp_type'
p105615
S'MultiMooseEnum'
p105616
sS'default'
p105617
S'TIMESTEP_END'
p105618
sS'description'
p105619
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105620
sS'required'
p105621
I00
sS'options'
p105622
S'none initial linear nonlinear timestep_end timestep_begin custom'
p105623
sS'group_name'
p105624
Nsa(dp105625
S'description'
p105626
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105627
sS'cpp_type'
p105628
S'std::vector<OutputName, std::allocator<OutputName> >'
p105629
sS'default'
p105630
g3
sS'name'
p105631
S'outputs'
p105632
sS'required'
p105633
I00
sS'group_name'
p105634
S'Advanced'
p105635
sa(dp105636
S'description'
p105637
S'The seed for the master random number generator\n'
p105638
sS'cpp_type'
p105639
S'unsigned int'
p105640
sS'default'
p105641
S'0'
p105642
sS'name'
p105643
S'seed'
p105644
sS'required'
p105645
I00
sS'group_name'
p105646
S'Advanced'
p105647
sa(dp105648
S'description'
p105649
g3
sS'cpp_type'
p105650
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105651
sS'default'
p105652
S'VolumePostprocessor'
p105653
sS'name'
p105654
S'type'
p105655
sS'required'
p105656
I00
sS'group_name'
p105657
Nsa(dp105658
S'description'
p105659
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105660
sS'cpp_type'
p105661
S'bool'
p105662
sS'default'
p105663
S'0'
p105664
sS'name'
p105665
S'use_displaced_mesh'
p105666
sS'required'
p105667
I00
sS'group_name'
p105668
S'Advanced'
p105669
sasS'name'
p105670
S'/Postprocessors/VolumePostprocessor'
p105671
sasS'parameters'
p105672
NsS'name'
p105673
S'/Postprocessors'
p105674
sa(dp105675
S'description'
p105676
g3
sS'subblocks'
p105677
(lp105678
(dp105679
S'description'
p105680
g3
sS'subblocks'
p105681
(lp105682
(dp105683
S'description'
p105684
g3
sS'subblocks'
p105685
NsS'parameters'
p105686
(lp105687
(dp105688
S'name'
p105689
S'petsc_options'
p105690
sS'cpp_type'
p105691
S'MultiMooseEnum'
p105692
sS'default'
p105693
g3
sS'description'
p105694
S'Singleton PETSc options\n'
p105695
sS'required'
p105696
I00
sS'options'
p105697
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105698
sS'group_name'
p105699
Nsa(dp105700
S'name'
p105701
S'petsc_options_iname'
p105702
sS'cpp_type'
p105703
S'MultiMooseEnum'
p105704
sS'default'
p105705
g3
sS'description'
p105706
S'Names of PETSc name/value pairs\n'
p105707
sS'required'
p105708
I00
sS'options'
p105709
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105710
sS'group_name'
p105711
Nsa(dp105712
S'description'
p105713
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105714
sS'cpp_type'
p105715
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105716
sS'default'
p105717
g3
sS'name'
p105718
S'petsc_options_value'
p105719
sS'required'
p105720
I00
sS'group_name'
p105721
Nsa(dp105722
S'description'
p105723
S'Classname of the split object\n'
p105724
sS'cpp_type'
p105725
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105726
sS'default'
p105727
S'Split'
p105728
sS'name'
p105729
S'type'
p105730
sS'required'
p105731
I01
sS'group_name'
p105732
Nsa(dp105733
S'description'
p105734
S'variables for this field\n'
p105735
sS'cpp_type'
p105736
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105737
sS'default'
p105738
g3
sS'name'
p105739
S'vars'
p105740
sS'required'
p105741
I00
sS'group_name'
p105742
NsasS'name'
p105743
S'/Preconditioning/*/*'
p105744
sa(dp105745
S'description'
p105746
g3
sS'subblocks'
p105747
NsS'parameters'
p105748
(lp105749
(dp105750
S'description'
p105751
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p105752
sS'cpp_type'
p105753
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105754
sS'default'
p105755
g3
sS'name'
p105756
S'blocks'
p105757
sS'required'
p105758
I00
sS'group_name'
p105759
Nsa(dp105760
S'description'
p105761
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105762
sS'cpp_type'
p105763
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105764
sS'default'
p105765
g3
sS'name'
p105766
S'control_tags'
p105767
sS'required'
p105768
I00
sS'group_name'
p105769
S'Advanced'
p105770
sa(dp105771
S'description'
p105772
S'Set the enabled status of the MooseObject.\n'
p105773
sS'cpp_type'
p105774
S'bool'
p105775
sS'default'
p105776
S'1'
p105777
sS'name'
p105778
S'enable'
p105779
sS'required'
p105780
I00
sS'group_name'
p105781
S'Advanced'
p105782
sa(dp105783
S'name'
p105784
S'petsc_options'
p105785
sS'cpp_type'
p105786
S'MultiMooseEnum'
p105787
sS'default'
p105788
g3
sS'description'
p105789
S'PETSc flags for the FieldSplit solver\n'
p105790
sS'required'
p105791
I00
sS'options'
p105792
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105793
sS'group_name'
p105794
Nsa(dp105795
S'description'
p105796
S'PETSc option names for the FieldSplit solver\n'
p105797
sS'cpp_type'
p105798
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105799
sS'default'
p105800
g3
sS'name'
p105801
S'petsc_options_iname'
p105802
sS'required'
p105803
I00
sS'group_name'
p105804
Nsa(dp105805
S'description'
p105806
S'PETSc option values for the FieldSplit solver\n'
p105807
sS'cpp_type'
p105808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105809
sS'default'
p105810
g3
sS'name'
p105811
S'petsc_options_value'
p105812
sS'required'
p105813
I00
sS'group_name'
p105814
Nsa(dp105815
S'name'
p105816
S'schur_ainv'
p105817
sS'cpp_type'
p105818
S'MooseEnum'
p105819
sS'default'
p105820
S'diag'
p105821
sS'description'
p105822
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p105823
sS'required'
p105824
I00
sS'options'
p105825
S'diag lump'
p105826
sS'group_name'
p105827
Nsa(dp105828
S'name'
p105829
S'schur_pre'
p105830
sS'cpp_type'
p105831
S'MooseEnum'
p105832
sS'default'
p105833
S'S'
p105834
sS'description'
p105835
S'Type of Schur complement preconditioner matrix\n'
p105836
sS'required'
p105837
I00
sS'options'
p105838
S'S Sp A11'
p105839
sS'group_name'
p105840
Nsa(dp105841
S'name'
p105842
S'schur_type'
p105843
sS'cpp_type'
p105844
S'MooseEnum'
p105845
sS'default'
p105846
S'full'
p105847
sS'description'
p105848
S'Type of Schur complement\n'
p105849
sS'required'
p105850
I00
sS'options'
p105851
S'full upper lower'
p105852
sS'group_name'
p105853
Nsa(dp105854
S'description'
p105855
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p105856
sS'cpp_type'
p105857
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p105858
sS'default'
p105859
g3
sS'name'
p105860
S'sides'
p105861
sS'required'
p105862
I00
sS'group_name'
p105863
Nsa(dp105864
S'description'
p105865
S'The names of the splits (subsystems) in the decomposition of this split\n'
p105866
sS'cpp_type'
p105867
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105868
sS'default'
p105869
g3
sS'name'
p105870
S'splitting'
p105871
sS'required'
p105872
I00
sS'group_name'
p105873
Nsa(dp105874
S'name'
p105875
S'splitting_type'
p105876
sS'cpp_type'
p105877
S'MooseEnum'
p105878
sS'default'
p105879
S'additive'
p105880
sS'description'
p105881
S'Split decomposition type\n'
p105882
sS'required'
p105883
I00
sS'options'
p105884
S'additive multiplicative symmetric_multiplicative schur'
p105885
sS'group_name'
p105886
Nsa(dp105887
S'description'
p105888
g3
sS'cpp_type'
p105889
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105890
sS'default'
p105891
S'Split'
p105892
sS'name'
p105893
S'type'
p105894
sS'required'
p105895
I00
sS'group_name'
p105896
Nsa(dp105897
S'description'
p105898
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p105899
sS'cpp_type'
p105900
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p105901
sS'default'
p105902
g3
sS'name'
p105903
S'unsides'
p105904
sS'required'
p105905
I00
sS'group_name'
p105906
Nsa(dp105907
S'description'
p105908
S'Variables Split operates on (omitting this implies "all variables"\n'
p105909
sS'cpp_type'
p105910
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105911
sS'default'
p105912
g3
sS'name'
p105913
S'vars'
p105914
sS'required'
p105915
I00
sS'group_name'
p105916
NsasS'name'
p105917
S'/Preconditioning/*/Split'
p105918
sasS'parameters'
p105919
(lp105920
(dp105921
S'description'
p105922
S'A string representing the Moose Object that will be built by this Action\n'
p105923
sS'cpp_type'
p105924
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105925
sS'default'
p105926
g3
sS'name'
p105927
S'type'
p105928
sS'required'
p105929
I01
sS'group_name'
p105930
NsasS'name'
p105931
S'/Preconditioning/*'
p105932
sa(dp105933
S'description'
p105934
g3
sS'subblocks'
p105935
NsS'parameters'
p105936
(lp105937
(dp105938
S'description'
p105939
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105940
sS'cpp_type'
p105941
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105942
sS'default'
p105943
g3
sS'name'
p105944
S'control_tags'
p105945
sS'required'
p105946
I00
sS'group_name'
p105947
S'Advanced'
p105948
sa(dp105949
S'description'
p105950
S'Set the enabled status of the MooseObject.\n'
p105951
sS'cpp_type'
p105952
S'bool'
p105953
sS'default'
p105954
S'1'
p105955
sS'name'
p105956
S'enable'
p105957
sS'required'
p105958
I00
sS'group_name'
p105959
S'Advanced'
p105960
sa(dp105961
S'description'
p105962
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105963
sS'cpp_type'
p105964
S'bool'
p105965
sS'default'
p105966
S'0'
p105967
sS'name'
p105968
S'full'
p105969
sS'required'
p105970
I00
sS'group_name'
p105971
Nsa(dp105972
S'description'
p105973
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p105974
sS'cpp_type'
p105975
S'bool'
p105976
sS'default'
p105977
S'0'
p105978
sS'name'
p105979
S'implicit_geometric_coupling'
p105980
sS'required'
p105981
I00
sS'group_name'
p105982
Nsa(dp105983
S'name'
p105984
S'ksp_norm'
p105985
sS'cpp_type'
p105986
S'MooseEnum'
p105987
sS'default'
p105988
S'unpreconditioned'
p105989
sS'description'
p105990
S'Sets the norm that is used for convergence testing\n'
p105991
sS'required'
p105992
I00
sS'options'
p105993
S'none preconditioned unpreconditioned natural default'
p105994
sS'group_name'
p105995
Nsa(dp105996
S'name'
p105997
S'line_search'
p105998
sS'cpp_type'
p105999
S'MooseEnum'
p106000
sS'default'
p106001
S'default'
p106002
sS'description'
p106003
S'Specifies the line search type (Note: none = basic)\n'
p106004
sS'required'
p106005
I00
sS'options'
p106006
S'default shell none basic l2 bt cp'
p106007
sS'group_name'
p106008
Nsa(dp106009
S'description'
p106010
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p106011
sS'cpp_type'
p106012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106013
sS'default'
p106014
g3
sS'name'
p106015
S'off_diag_column'
p106016
sS'required'
p106017
I00
sS'group_name'
p106018
Nsa(dp106019
S'description'
p106020
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p106021
sS'cpp_type'
p106022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106023
sS'default'
p106024
g3
sS'name'
p106025
S'off_diag_row'
p106026
sS'required'
p106027
I00
sS'group_name'
p106028
Nsa(dp106029
S'name'
p106030
S'pc_side'
p106031
sS'cpp_type'
p106032
S'MooseEnum'
p106033
sS'default'
p106034
S'default'
p106035
sS'description'
p106036
S'Preconditioning side\n'
p106037
sS'required'
p106038
I00
sS'options'
p106039
S'left right symmetric default'
p106040
sS'group_name'
p106041
Nsa(dp106042
S'name'
p106043
S'petsc_options'
p106044
sS'cpp_type'
p106045
S'MultiMooseEnum'
p106046
sS'default'
p106047
g3
sS'description'
p106048
S'Singleton PETSc options\n'
p106049
sS'required'
p106050
I00
sS'options'
p106051
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p106052
sS'group_name'
p106053
Nsa(dp106054
S'name'
p106055
S'petsc_options_iname'
p106056
sS'cpp_type'
p106057
S'MultiMooseEnum'
p106058
sS'default'
p106059
g3
sS'description'
p106060
S'Names of PETSc name/value pairs\n'
p106061
sS'required'
p106062
I00
sS'options'
p106063
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p106064
sS'group_name'
p106065
Nsa(dp106066
S'description'
p106067
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p106068
sS'cpp_type'
p106069
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106070
sS'default'
p106071
g3
sS'name'
p106072
S'petsc_options_value'
p106073
sS'required'
p106074
I00
sS'group_name'
p106075
Nsa(dp106076
S'name'
p106077
S'solve_type'
p106078
sS'cpp_type'
p106079
S'MooseEnum'
p106080
sS'default'
p106081
g3
sS'description'
p106082
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p106083
sS'required'
p106084
I00
sS'options'
p106085
S'PJFNK JFNK NEWTON FD LINEAR'
p106086
sS'group_name'
p106087
Nsa(dp106088
S'description'
p106089
g3
sS'cpp_type'
p106090
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106091
sS'default'
p106092
S'FDP'
p106093
sS'name'
p106094
S'type'
p106095
sS'required'
p106096
I00
sS'group_name'
p106097
NsasS'name'
p106098
S'/Preconditioning/FDP'
p106099
sa(dp106100
S'description'
p106101
g3
sS'subblocks'
p106102
NsS'parameters'
p106103
(lp106104
(dp106105
S'description'
p106106
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106107
sS'cpp_type'
p106108
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106109
sS'default'
p106110
g3
sS'name'
p106111
S'control_tags'
p106112
sS'required'
p106113
I00
sS'group_name'
p106114
S'Advanced'
p106115
sa(dp106116
S'description'
p106117
S'Set the enabled status of the MooseObject.\n'
p106118
sS'cpp_type'
p106119
S'bool'
p106120
sS'default'
p106121
S'1'
p106122
sS'name'
p106123
S'enable'
p106124
sS'required'
p106125
I00
sS'group_name'
p106126
S'Advanced'
p106127
sa(dp106128
S'description'
p106129
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p106130
sS'cpp_type'
p106131
S'bool'
p106132
sS'default'
p106133
S'1'
p106134
sS'name'
p106135
S'full'
p106136
sS'required'
p106137
I00
sS'group_name'
p106138
Nsa(dp106139
S'name'
p106140
S'ksp_norm'
p106141
sS'cpp_type'
p106142
S'MooseEnum'
p106143
sS'default'
p106144
S'unpreconditioned'
p106145
sS'description'
p106146
S'Sets the norm that is used for convergence testing\n'
p106147
sS'required'
p106148
I00
sS'options'
p106149
S'none preconditioned unpreconditioned natural default'
p106150
sS'group_name'
p106151
Nsa(dp106152
S'name'
p106153
S'line_search'
p106154
sS'cpp_type'
p106155
S'MooseEnum'
p106156
sS'default'
p106157
S'default'
p106158
sS'description'
p106159
S'Specifies the line search type (Note: none = basic)\n'
p106160
sS'required'
p106161
I00
sS'options'
p106162
S'default shell none basic l2 bt cp'
p106163
sS'group_name'
p106164
Nsa(dp106165
S'description'
p106166
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p106167
sS'cpp_type'
p106168
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106169
sS'default'
p106170
g3
sS'name'
p106171
S'off_diag_column'
p106172
sS'required'
p106173
I00
sS'group_name'
p106174
Nsa(dp106175
S'description'
p106176
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p106177
sS'cpp_type'
p106178
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106179
sS'default'
p106180
g3
sS'name'
p106181
S'off_diag_row'
p106182
sS'required'
p106183
I00
sS'group_name'
p106184
Nsa(dp106185
S'name'
p106186
S'pc_side'
p106187
sS'cpp_type'
p106188
S'MooseEnum'
p106189
sS'default'
p106190
S'default'
p106191
sS'description'
p106192
S'Preconditioning side\n'
p106193
sS'required'
p106194
I00
sS'options'
p106195
S'left right symmetric default'
p106196
sS'group_name'
p106197
Nsa(dp106198
S'name'
p106199
S'petsc_options'
p106200
sS'cpp_type'
p106201
S'MultiMooseEnum'
p106202
sS'default'
p106203
g3
sS'description'
p106204
S'Singleton PETSc options\n'
p106205
sS'required'
p106206
I00
sS'options'
p106207
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p106208
sS'group_name'
p106209
Nsa(dp106210
S'name'
p106211
S'petsc_options_iname'
p106212
sS'cpp_type'
p106213
S'MultiMooseEnum'
p106214
sS'default'
p106215
g3
sS'description'
p106216
S'Names of PETSc name/value pairs\n'
p106217
sS'required'
p106218
I00
sS'options'
p106219
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p106220
sS'group_name'
p106221
Nsa(dp106222
S'description'
p106223
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p106224
sS'cpp_type'
p106225
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106226
sS'default'
p106227
g3
sS'name'
p106228
S'petsc_options_value'
p106229
sS'required'
p106230
I00
sS'group_name'
p106231
Nsa(dp106232
S'name'
p106233
S'solve_type'
p106234
sS'cpp_type'
p106235
S'MooseEnum'
p106236
sS'default'
p106237
g3
sS'description'
p106238
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p106239
sS'required'
p106240
I00
sS'options'
p106241
S'PJFNK JFNK NEWTON FD LINEAR'
p106242
sS'group_name'
p106243
Nsa(dp106244
S'description'
p106245
S'entrance to splits, the top split will specify how splits will go.\n'
p106246
sS'cpp_type'
p106247
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106248
sS'default'
p106249
g3
sS'name'
p106250
S'topsplit'
p106251
sS'required'
p106252
I01
sS'group_name'
p106253
Nsa(dp106254
S'description'
p106255
g3
sS'cpp_type'
p106256
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106257
sS'default'
p106258
S'FSP'
p106259
sS'name'
p106260
S'type'
p106261
sS'required'
p106262
I00
sS'group_name'
p106263
NsasS'name'
p106264
S'/Preconditioning/FSP'
p106265
sa(dp106266
S'description'
p106267
g3
sS'subblocks'
p106268
NsS'parameters'
p106269
(lp106270
(dp106271
S'description'
p106272
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106273
sS'cpp_type'
p106274
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106275
sS'default'
p106276
g3
sS'name'
p106277
S'control_tags'
p106278
sS'required'
p106279
I00
sS'group_name'
p106280
S'Advanced'
p106281
sa(dp106282
S'description'
p106283
S'Set the enabled status of the MooseObject.\n'
p106284
sS'cpp_type'
p106285
S'bool'
p106286
sS'default'
p106287
S'1'
p106288
sS'name'
p106289
S'enable'
p106290
sS'required'
p106291
I00
sS'group_name'
p106292
S'Advanced'
p106293
sa(dp106294
S'name'
p106295
S'ksp_norm'
p106296
sS'cpp_type'
p106297
S'MooseEnum'
p106298
sS'default'
p106299
S'unpreconditioned'
p106300
sS'description'
p106301
S'Sets the norm that is used for convergence testing\n'
p106302
sS'required'
p106303
I00
sS'options'
p106304
S'none preconditioned unpreconditioned natural default'
p106305
sS'group_name'
p106306
Nsa(dp106307
S'name'
p106308
S'line_search'
p106309
sS'cpp_type'
p106310
S'MooseEnum'
p106311
sS'default'
p106312
S'default'
p106313
sS'description'
p106314
S'Specifies the line search type (Note: none = basic)\n'
p106315
sS'required'
p106316
I00
sS'options'
p106317
S'default shell none basic l2 bt cp'
p106318
sS'group_name'
p106319
Nsa(dp106320
S'description'
p106321
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p106322
sS'cpp_type'
p106323
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106324
sS'default'
p106325
g3
sS'name'
p106326
S'off_diag_column'
p106327
sS'required'
p106328
I00
sS'group_name'
p106329
Nsa(dp106330
S'description'
p106331
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p106332
sS'cpp_type'
p106333
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106334
sS'default'
p106335
g3
sS'name'
p106336
S'off_diag_row'
p106337
sS'required'
p106338
I00
sS'group_name'
p106339
Nsa(dp106340
S'name'
p106341
S'pc_side'
p106342
sS'cpp_type'
p106343
S'MooseEnum'
p106344
sS'default'
p106345
S'default'
p106346
sS'description'
p106347
S'Preconditioning side\n'
p106348
sS'required'
p106349
I00
sS'options'
p106350
S'left right symmetric default'
p106351
sS'group_name'
p106352
Nsa(dp106353
S'name'
p106354
S'petsc_options'
p106355
sS'cpp_type'
p106356
S'MultiMooseEnum'
p106357
sS'default'
p106358
g3
sS'description'
p106359
S'Singleton PETSc options\n'
p106360
sS'required'
p106361
I00
sS'options'
p106362
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p106363
sS'group_name'
p106364
Nsa(dp106365
S'name'
p106366
S'petsc_options_iname'
p106367
sS'cpp_type'
p106368
S'MultiMooseEnum'
p106369
sS'default'
p106370
g3
sS'description'
p106371
S'Names of PETSc name/value pairs\n'
p106372
sS'required'
p106373
I00
sS'options'
p106374
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p106375
sS'group_name'
p106376
Nsa(dp106377
S'description'
p106378
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p106379
sS'cpp_type'
p106380
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106381
sS'default'
p106382
g3
sS'name'
p106383
S'petsc_options_value'
p106384
sS'required'
p106385
I00
sS'group_name'
p106386
Nsa(dp106387
S'description'
p106388
S'TODO: docstring\n'
p106389
sS'cpp_type'
p106390
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106391
sS'default'
p106392
g3
sS'name'
p106393
S'preconditioner'
p106394
sS'required'
p106395
I01
sS'group_name'
p106396
Nsa(dp106397
S'description'
p106398
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p106399
sS'cpp_type'
p106400
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106401
sS'default'
p106402
g3
sS'name'
p106403
S'solve_order'
p106404
sS'required'
p106405
I01
sS'group_name'
p106406
Nsa(dp106407
S'name'
p106408
S'solve_type'
p106409
sS'cpp_type'
p106410
S'MooseEnum'
p106411
sS'default'
p106412
g3
sS'description'
p106413
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p106414
sS'required'
p106415
I00
sS'options'
p106416
S'PJFNK JFNK NEWTON FD LINEAR'
p106417
sS'group_name'
p106418
Nsa(dp106419
S'description'
p106420
g3
sS'cpp_type'
p106421
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106422
sS'default'
p106423
S'PBP'
p106424
sS'name'
p106425
S'type'
p106426
sS'required'
p106427
I00
sS'group_name'
p106428
NsasS'name'
p106429
S'/Preconditioning/PBP'
p106430
sa(dp106431
S'description'
p106432
g3
sS'subblocks'
p106433
NsS'parameters'
p106434
(lp106435
(dp106436
S'description'
p106437
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106438
sS'cpp_type'
p106439
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106440
sS'default'
p106441
g3
sS'name'
p106442
S'control_tags'
p106443
sS'required'
p106444
I00
sS'group_name'
p106445
S'Advanced'
p106446
sa(dp106447
S'description'
p106448
S'List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n'
p106449
sS'cpp_type'
p106450
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p106451
sS'default'
p106452
g3
sS'name'
p106453
S'coupled_groups'
p106454
sS'required'
p106455
I00
sS'group_name'
p106456
Nsa(dp106457
S'description'
p106458
S'Set the enabled status of the MooseObject.\n'
p106459
sS'cpp_type'
p106460
S'bool'
p106461
sS'default'
p106462
S'1'
p106463
sS'name'
p106464
S'enable'
p106465
sS'required'
p106466
I00
sS'group_name'
p106467
S'Advanced'
p106468
sa(dp106469
S'description'
p106470
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p106471
sS'cpp_type'
p106472
S'bool'
p106473
sS'default'
p106474
S'0'
p106475
sS'name'
p106476
S'full'
p106477
sS'required'
p106478
I00
sS'group_name'
p106479
Nsa(dp106480
S'name'
p106481
S'ksp_norm'
p106482
sS'cpp_type'
p106483
S'MooseEnum'
p106484
sS'default'
p106485
S'unpreconditioned'
p106486
sS'description'
p106487
S'Sets the norm that is used for convergence testing\n'
p106488
sS'required'
p106489
I00
sS'options'
p106490
S'none preconditioned unpreconditioned natural default'
p106491
sS'group_name'
p106492
Nsa(dp106493
S'name'
p106494
S'line_search'
p106495
sS'cpp_type'
p106496
S'MooseEnum'
p106497
sS'default'
p106498
S'default'
p106499
sS'description'
p106500
S'Specifies the line search type (Note: none = basic)\n'
p106501
sS'required'
p106502
I00
sS'options'
p106503
S'default shell none basic l2 bt cp'
p106504
sS'group_name'
p106505
Nsa(dp106506
S'description'
p106507
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p106508
sS'cpp_type'
p106509
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p106510
sS'default'
p106511
g3
sS'name'
p106512
S'off_diag_column'
p106513
sS'required'
p106514
I00
sS'group_name'
p106515
Nsa(dp106516
S'description'
p106517
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p106518
sS'cpp_type'
p106519
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p106520
sS'default'
p106521
g3
sS'name'
p106522
S'off_diag_row'
p106523
sS'required'
p106524
I00
sS'group_name'
p106525
Nsa(dp106526
S'name'
p106527
S'pc_side'
p106528
sS'cpp_type'
p106529
S'MooseEnum'
p106530
sS'default'
p106531
S'default'
p106532
sS'description'
p106533
S'Preconditioning side\n'
p106534
sS'required'
p106535
I00
sS'options'
p106536
S'left right symmetric default'
p106537
sS'group_name'
p106538
Nsa(dp106539
S'name'
p106540
S'petsc_options'
p106541
sS'cpp_type'
p106542
S'MultiMooseEnum'
p106543
sS'default'
p106544
g3
sS'description'
p106545
S'Singleton PETSc options\n'
p106546
sS'required'
p106547
I00
sS'options'
p106548
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p106549
sS'group_name'
p106550
Nsa(dp106551
S'name'
p106552
S'petsc_options_iname'
p106553
sS'cpp_type'
p106554
S'MultiMooseEnum'
p106555
sS'default'
p106556
g3
sS'description'
p106557
S'Names of PETSc name/value pairs\n'
p106558
sS'required'
p106559
I00
sS'options'
p106560
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p106561
sS'group_name'
p106562
Nsa(dp106563
S'description'
p106564
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p106565
sS'cpp_type'
p106566
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106567
sS'default'
p106568
g3
sS'name'
p106569
S'petsc_options_value'
p106570
sS'required'
p106571
I00
sS'group_name'
p106572
Nsa(dp106573
S'name'
p106574
S'solve_type'
p106575
sS'cpp_type'
p106576
S'MooseEnum'
p106577
sS'default'
p106578
g3
sS'description'
p106579
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p106580
sS'required'
p106581
I00
sS'options'
p106582
S'PJFNK JFNK NEWTON FD LINEAR'
p106583
sS'group_name'
p106584
Nsa(dp106585
S'description'
p106586
g3
sS'cpp_type'
p106587
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106588
sS'default'
p106589
S'SMP'
p106590
sS'name'
p106591
S'type'
p106592
sS'required'
p106593
I00
sS'group_name'
p106594
NsasS'name'
p106595
S'/Preconditioning/SMP'
p106596
sasS'parameters'
p106597
NsS'name'
p106598
S'/Preconditioning'
p106599
sa(dp106600
S'description'
p106601
g3
sS'subblocks'
p106602
(lp106603
(dp106604
S'description'
p106605
g3
sS'subblocks'
p106606
(lp106607
(dp106608
S'description'
p106609
g3
sS'subblocks'
p106610
NsS'parameters'
p106611
(lp106612
(dp106613
S'description'
p106614
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106615
sS'cpp_type'
p106616
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106617
sS'default'
p106618
g3
sS'name'
p106619
S'control_tags'
p106620
sS'required'
p106621
I00
sS'group_name'
p106622
S'Advanced'
p106623
sa(dp106624
S'description'
p106625
S'Set the enabled status of the MooseObject.\n'
p106626
sS'cpp_type'
p106627
S'bool'
p106628
sS'default'
p106629
S'1'
p106630
sS'name'
p106631
S'enable'
p106632
sS'required'
p106633
I00
sS'group_name'
p106634
S'Advanced'
p106635
sa(dp106636
S'description'
p106637
g3
sS'cpp_type'
p106638
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106639
sS'default'
p106640
S'DisplacedProblem'
p106641
sS'name'
p106642
S'type'
p106643
sS'required'
p106644
I00
sS'group_name'
p106645
NsasS'name'
p106646
S'/Problem/<type>/DisplacedProblem'
p106647
sa(dp106648
S'description'
p106649
g3
sS'subblocks'
p106650
NsS'parameters'
p106651
(lp106652
(dp106653
S'description'
p106654
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106655
sS'cpp_type'
p106656
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106657
sS'default'
p106658
g3
sS'name'
p106659
S'control_tags'
p106660
sS'required'
p106661
I00
sS'group_name'
p106662
S'Advanced'
p106663
sa(dp106664
S'description'
p106665
S'Set the enabled status of the MooseObject.\n'
p106666
sS'cpp_type'
p106667
S'bool'
p106668
sS'default'
p106669
S'1'
p106670
sS'name'
p106671
S'enable'
p106672
sS'required'
p106673
I00
sS'group_name'
p106674
S'Advanced'
p106675
sa(dp106676
S'description'
p106677
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106678
sS'cpp_type'
p106679
S'bool'
p106680
sS'default'
p106681
S'0'
p106682
sS'name'
p106683
S'error_on_jacobian_nonzero_reallocation'
p106684
sS'required'
p106685
I00
sS'group_name'
p106686
Nsa(dp106687
S'description'
p106688
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p106689
sS'cpp_type'
p106690
S'bool'
p106691
sS'default'
p106692
S'0'
p106693
sS'name'
p106694
S'force_restart'
p106695
sS'required'
p106696
I00
sS'group_name'
p106697
Nsa(dp106698
S'description'
p106699
S'The dimension of eigen subspaces\n'
p106700
sS'cpp_type'
p106701
S'unsigned int'
p106702
sS'default'
p106703
S'3'
p106704
sS'name'
p106705
S'n_basis_vectors'
p106706
sS'required'
p106707
I00
sS'group_name'
p106708
Nsa(dp106709
S'description'
p106710
S'The number of eigen pairs\n'
p106711
sS'cpp_type'
p106712
S'unsigned int'
p106713
sS'default'
p106714
S'1'
p106715
sS'name'
p106716
S'n_eigen_pairs'
p106717
sS'required'
p106718
I00
sS'group_name'
p106719
Nsa(dp106720
S'description'
p106721
S'The dimension of the near nullspace\n'
p106722
sS'cpp_type'
p106723
S'unsigned int'
p106724
sS'default'
p106725
S'0'
p106726
sS'name'
p106727
S'near_null_space_dimension'
p106728
sS'required'
p106729
I00
sS'group_name'
p106730
Nsa(dp106731
S'description'
p106732
S'The dimension of the nullspace\n'
p106733
sS'cpp_type'
p106734
S'unsigned int'
p106735
sS'default'
p106736
S'0'
p106737
sS'name'
p106738
S'null_space_dimension'
p106739
sS'required'
p106740
I00
sS'group_name'
p106741
Nsa(dp106742
S'description'
p106743
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106744
sS'cpp_type'
p106745
S'bool'
p106746
sS'default'
p106747
S'1'
p106748
sS'name'
p106749
S'solve'
p106750
sS'required'
p106751
I00
sS'group_name'
p106752
Nsa(dp106753
S'description'
p106754
S'The dimension of the transpose nullspace\n'
p106755
sS'cpp_type'
p106756
S'unsigned int'
p106757
sS'default'
p106758
S'0'
p106759
sS'name'
p106760
S'transpose_null_space_dimension'
p106761
sS'required'
p106762
I00
sS'group_name'
p106763
Nsa(dp106764
S'description'
p106765
g3
sS'cpp_type'
p106766
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106767
sS'default'
p106768
S'EigenProblem'
p106769
sS'name'
p106770
S'type'
p106771
sS'required'
p106772
I00
sS'group_name'
p106773
Nsa(dp106774
S'description'
p106775
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106776
sS'cpp_type'
p106777
S'bool'
p106778
sS'default'
p106779
S'1'
p106780
sS'name'
p106781
S'use_nonlinear'
p106782
sS'required'
p106783
I00
sS'group_name'
p106784
NsasS'name'
p106785
S'/Problem/<type>/EigenProblem'
p106786
sa(dp106787
S'description'
p106788
g3
sS'subblocks'
p106789
NsS'parameters'
p106790
(lp106791
(dp106792
S'description'
p106793
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p106794
sS'cpp_type'
p106795
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106796
sS'default'
p106797
g3
sS'name'
p106798
S'control_tags'
p106799
sS'required'
p106800
I00
sS'group_name'
p106801
S'Advanced'
p106802
sa(dp106803
S'description'
p106804
S'Set the enabled status of the MooseObject.\n'
p106805
sS'cpp_type'
p106806
S'bool'
p106807
sS'default'
p106808
S'1'
p106809
sS'name'
p106810
S'enable'
p106811
sS'required'
p106812
I00
sS'group_name'
p106813
S'Advanced'
p106814
sa(dp106815
S'description'
p106816
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106817
sS'cpp_type'
p106818
S'bool'
p106819
sS'default'
p106820
S'0'
p106821
sS'name'
p106822
S'error_on_jacobian_nonzero_reallocation'
p106823
sS'required'
p106824
I00
sS'group_name'
p106825
Nsa(dp106826
S'description'
p106827
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p106828
sS'cpp_type'
p106829
S'bool'
p106830
sS'default'
p106831
S'0'
p106832
sS'name'
p106833
S'force_restart'
p106834
sS'required'
p106835
I00
sS'group_name'
p106836
Nsa(dp106837
S'description'
p106838
S'The dimension of the near nullspace\n'
p106839
sS'cpp_type'
p106840
S'unsigned int'
p106841
sS'default'
p106842
S'0'
p106843
sS'name'
p106844
S'near_null_space_dimension'
p106845
sS'required'
p106846
I00
sS'group_name'
p106847
Nsa(dp106848
S'description'
p106849
S'The dimension of the nullspace\n'
p106850
sS'cpp_type'
p106851
S'unsigned int'
p106852
sS'default'
p106853
S'0'
p106854
sS'name'
p106855
S'null_space_dimension'
p106856
sS'required'
p106857
I00
sS'group_name'
p106858
Nsa(dp106859
S'description'
p106860
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106861
sS'cpp_type'
p106862
S'bool'
p106863
sS'default'
p106864
S'1'
p106865
sS'name'
p106866
S'solve'
p106867
sS'required'
p106868
I00
sS'group_name'
p106869
Nsa(dp106870
S'description'
p106871
S'The dimension of the transpose nullspace\n'
p106872
sS'cpp_type'
p106873
S'unsigned int'
p106874
sS'default'
p106875
S'0'
p106876
sS'name'
p106877
S'transpose_null_space_dimension'
p106878
sS'required'
p106879
I00
sS'group_name'
p106880
Nsa(dp106881
S'description'
p106882
g3
sS'cpp_type'
p106883
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106884
sS'default'
p106885
S'FEProblem'
p106886
sS'name'
p106887
S'type'
p106888
sS'required'
p106889
I00
sS'group_name'
p106890
Nsa(dp106891
S'description'
p106892
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106893
sS'cpp_type'
p106894
S'bool'
p106895
sS'default'
p106896
S'1'
p106897
sS'name'
p106898
S'use_nonlinear'
p106899
sS'required'
p106900
I00
sS'group_name'
p106901
NsasS'name'
p106902
S'/Problem/<type>/FEProblem'
p106903
sasS'parameters'
p106904
NsS'name'
p106905
S'/Problem/<type>'
p106906
sasS'parameters'
p106907
(lp106908
(dp106909
S'description'
p106910
S'Block IDs for the coordinate systems\n'
p106911
sS'cpp_type'
p106912
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p106913
sS'default'
p106914
g3
sS'name'
p106915
S'block'
p106916
sS'required'
p106917
I00
sS'group_name'
p106918
Nsa(dp106919
S'name'
p106920
S'coord_type'
p106921
sS'cpp_type'
p106922
S'MultiMooseEnum'
p106923
sS'default'
p106924
S'XYZ'
p106925
sS'description'
p106926
S'Type of the coordinate system per block param\n'
p106927
sS'required'
p106928
I00
sS'options'
p106929
S'XYZ RZ RSPHERICAL'
p106930
sS'group_name'
p106931
Nsa(dp106932
S'description'
p106933
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p106934
sS'cpp_type'
p106935
S'bool'
p106936
sS'default'
p106937
S'0'
p106938
sS'name'
p106939
S'fe_cache'
p106940
sS'required'
p106941
I00
sS'group_name'
p106942
Nsa(dp106943
S'description'
p106944
S'Set to false to disable kernel->subdomain coverage check\n'
p106945
sS'cpp_type'
p106946
S'bool'
p106947
sS'default'
p106948
S'1'
p106949
sS'name'
p106950
S'kernel_coverage_check'
p106951
sS'required'
p106952
I00
sS'group_name'
p106953
Nsa(dp106954
S'description'
p106955
S'Set to false to disable material->subdomain coverage check\n'
p106956
sS'cpp_type'
p106957
S'bool'
p106958
sS'default'
p106959
S'1'
p106960
sS'name'
p106961
S'material_coverage_check'
p106962
sS'required'
p106963
I00
sS'group_name'
p106964
Nsa(dp106965
S'description'
p106966
S'The name the problem\n'
p106967
sS'cpp_type'
p106968
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106969
sS'default'
p106970
S'MOOSE Problem'
p106971
sS'name'
p106972
S'name'
p106973
sS'required'
p106974
I00
sS'group_name'
p106975
Nsa(dp106976
S'description'
p106977
S'File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n'
p106978
sS'cpp_type'
p106979
S'FileNameNoExtension'
p106980
sS'default'
p106981
g3
sS'name'
p106982
S'restart_file_base'
p106983
sS'required'
p106984
I00
sS'group_name'
p106985
Nsa(dp106986
S'name'
p106987
S'rz_coord_axis'
p106988
sS'cpp_type'
p106989
S'MooseEnum'
p106990
sS'default'
p106991
S'Y'
p106992
sS'description'
p106993
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p106994
sS'required'
p106995
I00
sS'options'
p106996
S'X Y'
p106997
sS'group_name'
p106998
Nsa(dp106999
S'description'
p107000
S'A string representing the Moose Object that will be built by this Action\n'
p107001
sS'cpp_type'
p107002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107003
sS'default'
p107004
S'FEProblem'
p107005
sS'name'
p107006
S'type'
p107007
sS'required'
p107008
I01
sS'group_name'
p107009
Nsa(dp107010
S'description'
p107011
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p107012
sS'cpp_type'
p107013
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107014
sS'default'
p107015
g3
sS'name'
p107016
S'library_path'
p107017
sS'required'
p107018
I00
sS'group_name'
p107019
Nsa(dp107020
S'description'
p107021
S'The names of the objects to register (Default: register all).\n'
p107022
sS'cpp_type'
p107023
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107024
sS'default'
p107025
g3
sS'name'
p107026
S'object_names'
p107027
sS'required'
p107028
I00
sS'group_name'
p107029
Nsa(dp107030
S'description'
p107031
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p107032
sS'cpp_type'
p107033
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107034
sS'default'
p107035
g3
sS'name'
p107036
S'register_objects_from'
p107037
sS'required'
p107038
I00
sS'group_name'
p107039
NsasS'name'
p107040
S'/Problem'
p107041
sa(dp107042
S'description'
p107043
g3
sS'subblocks'
p107044
(lp107045
(dp107046
S'description'
p107047
g3
sS'subblocks'
p107048
NsS'parameters'
p107049
(lp107050
(dp107051
S'description'
p107052
S'A string representing the Moose Object that will be built by this Action\n'
p107053
sS'cpp_type'
p107054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107055
sS'default'
p107056
g3
sS'name'
p107057
S'type'
p107058
sS'required'
p107059
I01
sS'group_name'
p107060
NsasS'name'
p107061
S'/ScalarKernels/*'
p107062
sa(dp107063
S'description'
p107064
S'Generalized Plane Strain Scalar Kernel\n'
p107065
sS'subblocks'
p107066
NsS'parameters'
p107067
(lp107068
(dp107069
S'description'
p107070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107071
sS'cpp_type'
p107072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107073
sS'default'
p107074
g3
sS'name'
p107075
S'control_tags'
p107076
sS'required'
p107077
I00
sS'group_name'
p107078
S'Advanced'
p107079
sa(dp107080
S'description'
p107081
S'Set the enabled status of the MooseObject.\n'
p107082
sS'cpp_type'
p107083
S'bool'
p107084
sS'default'
p107085
S'1'
p107086
sS'name'
p107087
S'enable'
p107088
sS'required'
p107089
I00
sS'group_name'
p107090
S'Advanced'
p107091
sa(dp107092
S'description'
p107093
S'The name of the GeneralizedPlaneStrainUO UserObject\n'
p107094
sS'cpp_type'
p107095
S'UserObjectName'
p107096
sS'default'
p107097
g3
sS'name'
p107098
S'generalized_plane_strain'
p107099
sS'required'
p107100
I01
sS'group_name'
p107101
Nsa(dp107102
S'description'
p107103
S'Determines whether this object is calculated using an implicit or explicit form\n'
p107104
sS'cpp_type'
p107105
S'bool'
p107106
sS'default'
p107107
S'1'
p107108
sS'name'
p107109
S'implicit'
p107110
sS'required'
p107111
I00
sS'group_name'
p107112
S'Advanced'
p107113
sa(dp107114
S'description'
p107115
g3
sS'cpp_type'
p107116
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107117
sS'default'
p107118
S'GeneralizedPlaneStrain'
p107119
sS'name'
p107120
S'type'
p107121
sS'required'
p107122
I00
sS'group_name'
p107123
Nsa(dp107124
S'description'
p107125
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107126
sS'cpp_type'
p107127
S'bool'
p107128
sS'default'
p107129
S'0'
p107130
sS'name'
p107131
S'use_displaced_mesh'
p107132
sS'required'
p107133
I00
sS'group_name'
p107134
S'Advanced'
p107135
sa(dp107136
S'description'
p107137
S'The name of the variable that this kernel operates on\n'
p107138
sS'cpp_type'
p107139
S'NonlinearVariableName'
p107140
sS'default'
p107141
g3
sS'name'
p107142
S'variable'
p107143
sS'required'
p107144
I01
sS'group_name'
p107145
NsasS'name'
p107146
S'/ScalarKernels/GeneralizedPlaneStrain'
p107147
sa(dp107148
S'description'
p107149
g3
sS'subblocks'
p107150
NsS'parameters'
p107151
(lp107152
(dp107153
S'description'
p107154
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107155
sS'cpp_type'
p107156
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107157
sS'default'
p107158
g3
sS'name'
p107159
S'control_tags'
p107160
sS'required'
p107161
I00
sS'group_name'
p107162
S'Advanced'
p107163
sa(dp107164
S'description'
p107165
S'Set the enabled status of the MooseObject.\n'
p107166
sS'cpp_type'
p107167
S'bool'
p107168
sS'default'
p107169
S'1'
p107170
sS'name'
p107171
S'enable'
p107172
sS'required'
p107173
I00
sS'group_name'
p107174
S'Advanced'
p107175
sa(dp107176
S'description'
p107177
S'Determines whether this object is calculated using an implicit or explicit form\n'
p107178
sS'cpp_type'
p107179
S'bool'
p107180
sS'default'
p107181
S'1'
p107182
sS'name'
p107183
S'implicit'
p107184
sS'required'
p107185
I00
sS'group_name'
p107186
S'Advanced'
p107187
sa(dp107188
S'description'
p107189
S'Node ids\n'
p107190
sS'cpp_type'
p107191
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p107192
sS'default'
p107193
g3
sS'name'
p107194
S'nodes'
p107195
sS'required'
p107196
I01
sS'group_name'
p107197
Nsa(dp107198
S'description'
p107199
g3
sS'cpp_type'
p107200
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107201
sS'default'
p107202
S'NodalEqualValueConstraint'
p107203
sS'name'
p107204
S'type'
p107205
sS'required'
p107206
I00
sS'group_name'
p107207
Nsa(dp107208
S'description'
p107209
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107210
sS'cpp_type'
p107211
S'bool'
p107212
sS'default'
p107213
S'0'
p107214
sS'name'
p107215
S'use_displaced_mesh'
p107216
sS'required'
p107217
I00
sS'group_name'
p107218
S'Advanced'
p107219
sa(dp107220
S'description'
p107221
S'Variable(s) to put the constraint on\n'
p107222
sS'cpp_type'
p107223
S'std::vector<VariableName>'
p107224
sS'default'
p107225
g3
sS'name'
p107226
S'var'
p107227
sS'required'
p107228
I01
sS'group_name'
p107229
Nsa(dp107230
S'description'
p107231
S'The name of the variable that this kernel operates on\n'
p107232
sS'cpp_type'
p107233
S'NonlinearVariableName'
p107234
sS'default'
p107235
g3
sS'name'
p107236
S'variable'
p107237
sS'required'
p107238
I01
sS'group_name'
p107239
NsasS'name'
p107240
S'/ScalarKernels/NodalEqualValueConstraint'
p107241
sa(dp107242
S'description'
p107243
g3
sS'subblocks'
p107244
NsS'parameters'
p107245
(lp107246
(dp107247
S'description'
p107248
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107249
sS'cpp_type'
p107250
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107251
sS'default'
p107252
g3
sS'name'
p107253
S'control_tags'
p107254
sS'required'
p107255
I00
sS'group_name'
p107256
S'Advanced'
p107257
sa(dp107258
S'description'
p107259
S'Set the enabled status of the MooseObject.\n'
p107260
sS'cpp_type'
p107261
S'bool'
p107262
sS'default'
p107263
S'1'
p107264
sS'name'
p107265
S'enable'
p107266
sS'required'
p107267
I00
sS'group_name'
p107268
S'Advanced'
p107269
sa(dp107270
S'description'
p107271
S'Determines whether this object is calculated using an implicit or explicit form\n'
p107272
sS'cpp_type'
p107273
S'bool'
p107274
sS'default'
p107275
S'1'
p107276
sS'name'
p107277
S'implicit'
p107278
sS'required'
p107279
I00
sS'group_name'
p107280
S'Advanced'
p107281
sa(dp107282
S'description'
p107283
g3
sS'cpp_type'
p107284
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107285
sS'default'
p107286
S'ODETimeDerivative'
p107287
sS'name'
p107288
S'type'
p107289
sS'required'
p107290
I00
sS'group_name'
p107291
Nsa(dp107292
S'description'
p107293
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107294
sS'cpp_type'
p107295
S'bool'
p107296
sS'default'
p107297
S'0'
p107298
sS'name'
p107299
S'use_displaced_mesh'
p107300
sS'required'
p107301
I00
sS'group_name'
p107302
S'Advanced'
p107303
sa(dp107304
S'description'
p107305
S'The name of the variable that this kernel operates on\n'
p107306
sS'cpp_type'
p107307
S'NonlinearVariableName'
p107308
sS'default'
p107309
g3
sS'name'
p107310
S'variable'
p107311
sS'required'
p107312
I01
sS'group_name'
p107313
NsasS'name'
p107314
S'/ScalarKernels/ODETimeDerivative'
p107315
sa(dp107316
S'description'
p107317
S'Parsed ODE function kernel.\n'
p107318
sS'subblocks'
p107319
NsS'parameters'
p107320
(lp107321
(dp107322
S'description'
p107323
S'additional coupled variables\n'
p107324
sS'cpp_type'
p107325
S'std::vector<VariableName>'
p107326
sS'default'
p107327
g3
sS'name'
p107328
S'args'
p107329
sS'required'
p107330
I00
sS'group_name'
p107331
Nsa(dp107332
S'description'
p107333
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p107334
sS'cpp_type'
p107335
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107336
sS'default'
p107337
g3
sS'name'
p107338
S'constant_expressions'
p107339
sS'required'
p107340
I00
sS'group_name'
p107341
Nsa(dp107342
S'description'
p107343
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p107344
sS'cpp_type'
p107345
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107346
sS'default'
p107347
g3
sS'name'
p107348
S'constant_names'
p107349
sS'required'
p107350
I00
sS'group_name'
p107351
Nsa(dp107352
S'description'
p107353
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107354
sS'cpp_type'
p107355
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107356
sS'default'
p107357
g3
sS'name'
p107358
S'control_tags'
p107359
sS'required'
p107360
I00
sS'group_name'
p107361
S'Advanced'
p107362
sa(dp107363
S'description'
p107364
S'Disable the function parser algebraic optimizer\n'
p107365
sS'cpp_type'
p107366
S'bool'
p107367
sS'default'
p107368
S'0'
p107369
sS'name'
p107370
S'disable_fpoptimizer'
p107371
sS'required'
p107372
I00
sS'group_name'
p107373
S'Advanced'
p107374
sa(dp107375
S'description'
p107376
S'Set the enabled status of the MooseObject.\n'
p107377
sS'cpp_type'
p107378
S'bool'
p107379
sS'default'
p107380
S'1'
p107381
sS'name'
p107382
S'enable'
p107383
sS'required'
p107384
I00
sS'group_name'
p107385
S'Advanced'
p107386
sa(dp107387
S'description'
p107388
S'Enable cacheing of function derivatives for faster startup time\n'
p107389
sS'cpp_type'
p107390
S'bool'
p107391
sS'default'
p107392
S'1'
p107393
sS'name'
p107394
S'enable_ad_cache'
p107395
sS'required'
p107396
I00
sS'group_name'
p107397
S'Advanced'
p107398
sa(dp107399
S'description'
p107400
S'Enable automatic immediate optimization of derivatives\n'
p107401
sS'cpp_type'
p107402
S'bool'
p107403
sS'default'
p107404
S'1'
p107405
sS'name'
p107406
S'enable_auto_optimize'
p107407
sS'required'
p107408
I00
sS'group_name'
p107409
S'Advanced'
p107410
sa(dp107411
S'description'
p107412
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p107413
sS'cpp_type'
p107414
S'bool'
p107415
sS'default'
p107416
S'1'
p107417
sS'name'
p107418
S'enable_jit'
p107419
sS'required'
p107420
I00
sS'group_name'
p107421
S'Advanced'
p107422
sa(dp107423
S'description'
p107424
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p107425
sS'cpp_type'
p107426
S'bool'
p107427
sS'default'
p107428
S'0'
p107429
sS'name'
p107430
S'fail_on_evalerror'
p107431
sS'required'
p107432
I00
sS'group_name'
p107433
S'Advanced'
p107434
sa(dp107435
S'description'
p107436
S'function expression\n'
p107437
sS'cpp_type'
p107438
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107439
sS'default'
p107440
g3
sS'name'
p107441
S'function'
p107442
sS'required'
p107443
I01
sS'group_name'
p107444
Nsa(dp107445
S'description'
p107446
S'Determines whether this object is calculated using an implicit or explicit form\n'
p107447
sS'cpp_type'
p107448
S'bool'
p107449
sS'default'
p107450
S'1'
p107451
sS'name'
p107452
S'implicit'
p107453
sS'required'
p107454
I00
sS'group_name'
p107455
S'Advanced'
p107456
sa(dp107457
S'description'
p107458
g3
sS'cpp_type'
p107459
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107460
sS'default'
p107461
S'ParsedODEKernel'
p107462
sS'name'
p107463
S'type'
p107464
sS'required'
p107465
I00
sS'group_name'
p107466
Nsa(dp107467
S'description'
p107468
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107469
sS'cpp_type'
p107470
S'bool'
p107471
sS'default'
p107472
S'0'
p107473
sS'name'
p107474
S'use_displaced_mesh'
p107475
sS'required'
p107476
I00
sS'group_name'
p107477
S'Advanced'
p107478
sa(dp107479
S'description'
p107480
S'The name of the variable that this kernel operates on\n'
p107481
sS'cpp_type'
p107482
S'NonlinearVariableName'
p107483
sS'default'
p107484
g3
sS'name'
p107485
S'variable'
p107486
sS'required'
p107487
I01
sS'group_name'
p107488
NsasS'name'
p107489
S'/ScalarKernels/ParsedODEKernel'
p107490
sasS'parameters'
p107491
NsS'name'
p107492
S'/ScalarKernels'
p107493
sa(dp107494
S'description'
p107495
g3
sS'subblocks'
p107496
(lp107497
(dp107498
S'description'
p107499
g3
sS'subblocks'
p107500
NsS'parameters'
p107501
(lp107502
(dp107503
S'description'
p107504
S'A string representing the Moose Object that will be built by this Action\n'
p107505
sS'cpp_type'
p107506
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107507
sS'default'
p107508
g3
sS'name'
p107509
S'type'
p107510
sS'required'
p107511
I01
sS'group_name'
p107512
NsasS'name'
p107513
S'/Transfers/*'
p107514
sa(dp107515
S'description'
p107516
S'Copies variables (nonlinear and auxiliary) between multiapps that have identical meshes.\n'
p107517
sS'subblocks'
p107518
NsS'parameters'
p107519
(lp107520
(dp107521
S'description'
p107522
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107523
sS'cpp_type'
p107524
S'bool'
p107525
sS'default'
p107526
S'1'
p107527
sS'name'
p107528
S'check_multiapp_execute_on'
p107529
sS'required'
p107530
I00
sS'group_name'
p107531
Nsa(dp107532
S'description'
p107533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107534
sS'cpp_type'
p107535
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107536
sS'default'
p107537
g3
sS'name'
p107538
S'control_tags'
p107539
sS'required'
p107540
I00
sS'group_name'
p107541
S'Advanced'
p107542
sa(dp107543
S'name'
p107544
S'direction'
p107545
sS'cpp_type'
p107546
S'MooseEnum'
p107547
sS'default'
p107548
g3
sS'description'
p107549
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107550
sS'required'
p107551
I01
sS'options'
p107552
S'to_multiapp from_multiapp'
p107553
sS'group_name'
p107554
Nsa(dp107555
S'description'
p107556
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107557
sS'cpp_type'
p107558
S'bool'
p107559
sS'default'
p107560
S'0'
p107561
sS'name'
p107562
S'displaced_source_mesh'
p107563
sS'required'
p107564
I00
sS'group_name'
p107565
Nsa(dp107566
S'description'
p107567
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107568
sS'cpp_type'
p107569
S'bool'
p107570
sS'default'
p107571
S'0'
p107572
sS'name'
p107573
S'displaced_target_mesh'
p107574
sS'required'
p107575
I00
sS'group_name'
p107576
Nsa(dp107577
S'description'
p107578
S'Set the enabled status of the MooseObject.\n'
p107579
sS'cpp_type'
p107580
S'bool'
p107581
sS'default'
p107582
S'1'
p107583
sS'name'
p107584
S'enable'
p107585
sS'required'
p107586
I00
sS'group_name'
p107587
S'Advanced'
p107588
sa(dp107589
S'name'
p107590
S'execute_on'
p107591
sS'cpp_type'
p107592
S'MultiMooseEnum'
p107593
sS'default'
p107594
S'SAME_AS_MULTIAPP'
p107595
sS'description'
p107596
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107597
sS'required'
p107598
I00
sS'options'
p107599
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107600
sS'group_name'
p107601
Nsa(dp107602
S'description'
p107603
S'The name of the MultiApp to use.\n'
p107604
sS'cpp_type'
p107605
S'MultiAppName'
p107606
sS'default'
p107607
g3
sS'name'
p107608
S'multi_app'
p107609
sS'required'
p107610
I01
sS'group_name'
p107611
Nsa(dp107612
S'description'
p107613
S'The variable to transfer from.\n'
p107614
sS'cpp_type'
p107615
S'VariableName'
p107616
sS'default'
p107617
g3
sS'name'
p107618
S'source_variable'
p107619
sS'required'
p107620
I01
sS'group_name'
p107621
Nsa(dp107622
S'description'
p107623
g3
sS'cpp_type'
p107624
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107625
sS'default'
p107626
S'MultiAppCopyTransfer'
p107627
sS'name'
p107628
S'type'
p107629
sS'required'
p107630
I00
sS'group_name'
p107631
Nsa(dp107632
S'description'
p107633
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107634
sS'cpp_type'
p107635
S'bool'
p107636
sS'default'
p107637
S'0'
p107638
sS'name'
p107639
S'use_displaced_mesh'
p107640
sS'required'
p107641
I00
sS'group_name'
p107642
S'Advanced'
p107643
sa(dp107644
S'description'
p107645
S'The variable to store the transferred values in.\n'
p107646
sS'cpp_type'
p107647
S'VariableName'
p107648
sS'default'
p107649
g3
sS'name'
p107650
S'variable'
p107651
sS'required'
p107652
I01
sS'group_name'
p107653
NsasS'name'
p107654
S'/Transfers/MultiAppCopyTransfer'
p107655
sa(dp107656
S'description'
p107657
g3
sS'subblocks'
p107658
NsS'parameters'
p107659
(lp107660
(dp107661
S'description'
p107662
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107663
sS'cpp_type'
p107664
S'bool'
p107665
sS'default'
p107666
S'1'
p107667
sS'name'
p107668
S'check_multiapp_execute_on'
p107669
sS'required'
p107670
I00
sS'group_name'
p107671
Nsa(dp107672
S'description'
p107673
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107674
sS'cpp_type'
p107675
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107676
sS'default'
p107677
g3
sS'name'
p107678
S'control_tags'
p107679
sS'required'
p107680
I00
sS'group_name'
p107681
S'Advanced'
p107682
sa(dp107683
S'name'
p107684
S'direction'
p107685
sS'cpp_type'
p107686
S'MooseEnum'
p107687
sS'default'
p107688
g3
sS'description'
p107689
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107690
sS'required'
p107691
I01
sS'options'
p107692
S'to_multiapp from_multiapp'
p107693
sS'group_name'
p107694
Nsa(dp107695
S'description'
p107696
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107697
sS'cpp_type'
p107698
S'bool'
p107699
sS'default'
p107700
S'0'
p107701
sS'name'
p107702
S'displaced_source_mesh'
p107703
sS'required'
p107704
I00
sS'group_name'
p107705
Nsa(dp107706
S'description'
p107707
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107708
sS'cpp_type'
p107709
S'bool'
p107710
sS'default'
p107711
S'0'
p107712
sS'name'
p107713
S'displaced_target_mesh'
p107714
sS'required'
p107715
I00
sS'group_name'
p107716
Nsa(dp107717
S'description'
p107718
S'Set the enabled status of the MooseObject.\n'
p107719
sS'cpp_type'
p107720
S'bool'
p107721
sS'default'
p107722
S'1'
p107723
sS'name'
p107724
S'enable'
p107725
sS'required'
p107726
I00
sS'group_name'
p107727
S'Advanced'
p107728
sa(dp107729
S'name'
p107730
S'execute_on'
p107731
sS'cpp_type'
p107732
S'MultiMooseEnum'
p107733
sS'default'
p107734
S'SAME_AS_MULTIAPP'
p107735
sS'description'
p107736
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107737
sS'required'
p107738
I00
sS'options'
p107739
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107740
sS'group_name'
p107741
Nsa(dp107742
S'name'
p107743
S'interp_type'
p107744
sS'cpp_type'
p107745
S'MooseEnum'
p107746
sS'default'
p107747
S'inverse_distance'
p107748
sS'description'
p107749
S'The algorithm to use for interpolation.\n'
p107750
sS'required'
p107751
I00
sS'options'
p107752
S'inverse_distance radial_basis'
p107753
sS'group_name'
p107754
Nsa(dp107755
S'description'
p107756
S'The name of the MultiApp to use.\n'
p107757
sS'cpp_type'
p107758
S'MultiAppName'
p107759
sS'default'
p107760
g3
sS'name'
p107761
S'multi_app'
p107762
sS'required'
p107763
I01
sS'group_name'
p107764
Nsa(dp107765
S'description'
p107766
S'The number of nearest points to use for interpolation.\n'
p107767
sS'cpp_type'
p107768
S'unsigned int'
p107769
sS'default'
p107770
S'3'
p107771
sS'name'
p107772
S'num_points'
p107773
sS'required'
p107774
I00
sS'group_name'
p107775
Nsa(dp107776
S'description'
p107777
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p107778
sS'cpp_type'
p107779
S'double'
p107780
sS'default'
p107781
S'2'
p107782
sS'name'
p107783
S'power'
p107784
sS'required'
p107785
I00
sS'group_name'
p107786
Nsa(dp107787
S'description'
p107788
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p107789
sS'cpp_type'
p107790
S'double'
p107791
sS'default'
p107792
S'-1'
p107793
sS'name'
p107794
S'radius'
p107795
sS'required'
p107796
I00
sS'group_name'
p107797
Nsa(dp107798
S'description'
p107799
S'The variable to transfer from.\n'
p107800
sS'cpp_type'
p107801
S'VariableName'
p107802
sS'default'
p107803
g3
sS'name'
p107804
S'source_variable'
p107805
sS'required'
p107806
I01
sS'group_name'
p107807
Nsa(dp107808
S'description'
p107809
g3
sS'cpp_type'
p107810
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107811
sS'default'
p107812
S'MultiAppInterpolationTransfer'
p107813
sS'name'
p107814
S'type'
p107815
sS'required'
p107816
I00
sS'group_name'
p107817
Nsa(dp107818
S'description'
p107819
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107820
sS'cpp_type'
p107821
S'bool'
p107822
sS'default'
p107823
S'0'
p107824
sS'name'
p107825
S'use_displaced_mesh'
p107826
sS'required'
p107827
I00
sS'group_name'
p107828
S'Advanced'
p107829
sa(dp107830
S'description'
p107831
S'The auxiliary variable to store the transferred values in.\n'
p107832
sS'cpp_type'
p107833
S'AuxVariableName'
p107834
sS'default'
p107835
g3
sS'name'
p107836
S'variable'
p107837
sS'required'
p107838
I01
sS'group_name'
p107839
NsasS'name'
p107840
S'/Transfers/MultiAppInterpolationTransfer'
p107841
sa(dp107842
S'description'
p107843
g3
sS'subblocks'
p107844
NsS'parameters'
p107845
(lp107846
(dp107847
S'description'
p107848
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p107849
sS'cpp_type'
p107850
S'bool'
p107851
sS'default'
p107852
S'1'
p107853
sS'name'
p107854
S'check_multiapp_execute_on'
p107855
sS'required'
p107856
I00
sS'group_name'
p107857
Nsa(dp107858
S'description'
p107859
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107860
sS'cpp_type'
p107861
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107862
sS'default'
p107863
g3
sS'name'
p107864
S'control_tags'
p107865
sS'required'
p107866
I00
sS'group_name'
p107867
S'Advanced'
p107868
sa(dp107869
S'name'
p107870
S'direction'
p107871
sS'cpp_type'
p107872
S'MooseEnum'
p107873
sS'default'
p107874
g3
sS'description'
p107875
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p107876
sS'required'
p107877
I01
sS'options'
p107878
S'to_multiapp from_multiapp'
p107879
sS'group_name'
p107880
Nsa(dp107881
S'description'
p107882
S'Whether or not to use the displaced mesh for the source mesh.\n'
p107883
sS'cpp_type'
p107884
S'bool'
p107885
sS'default'
p107886
S'0'
p107887
sS'name'
p107888
S'displaced_source_mesh'
p107889
sS'required'
p107890
I00
sS'group_name'
p107891
Nsa(dp107892
S'description'
p107893
S'Whether or not to use the displaced mesh for the target mesh.\n'
p107894
sS'cpp_type'
p107895
S'bool'
p107896
sS'default'
p107897
S'0'
p107898
sS'name'
p107899
S'displaced_target_mesh'
p107900
sS'required'
p107901
I00
sS'group_name'
p107902
Nsa(dp107903
S'description'
p107904
S'Set the enabled status of the MooseObject.\n'
p107905
sS'cpp_type'
p107906
S'bool'
p107907
sS'default'
p107908
S'1'
p107909
sS'name'
p107910
S'enable'
p107911
sS'required'
p107912
I00
sS'group_name'
p107913
S'Advanced'
p107914
sa(dp107915
S'description'
p107916
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p107917
sS'cpp_type'
p107918
S'bool'
p107919
sS'default'
p107920
S'0'
p107921
sS'name'
p107922
S'error_on_miss'
p107923
sS'required'
p107924
I00
sS'group_name'
p107925
Nsa(dp107926
S'name'
p107927
S'execute_on'
p107928
sS'cpp_type'
p107929
S'MultiMooseEnum'
p107930
sS'default'
p107931
S'SAME_AS_MULTIAPP'
p107932
sS'description'
p107933
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p107934
sS'required'
p107935
I00
sS'options'
p107936
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p107937
sS'group_name'
p107938
Nsa(dp107939
S'description'
p107940
S'The name of the MultiApp to use.\n'
p107941
sS'cpp_type'
p107942
S'MultiAppName'
p107943
sS'default'
p107944
g3
sS'name'
p107945
S'multi_app'
p107946
sS'required'
p107947
I01
sS'group_name'
p107948
Nsa(dp107949
S'description'
p107950
S'The variable to transfer from.\n'
p107951
sS'cpp_type'
p107952
S'VariableName'
p107953
sS'default'
p107954
g3
sS'name'
p107955
S'source_variable'
p107956
sS'required'
p107957
I01
sS'group_name'
p107958
Nsa(dp107959
S'description'
p107960
g3
sS'cpp_type'
p107961
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107962
sS'default'
p107963
S'MultiAppMeshFunctionTransfer'
p107964
sS'name'
p107965
S'type'
p107966
sS'required'
p107967
I00
sS'group_name'
p107968
Nsa(dp107969
S'description'
p107970
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107971
sS'cpp_type'
p107972
S'bool'
p107973
sS'default'
p107974
S'0'
p107975
sS'name'
p107976
S'use_displaced_mesh'
p107977
sS'required'
p107978
I00
sS'group_name'
p107979
S'Advanced'
p107980
sa(dp107981
S'description'
p107982
S'The auxiliary variable to store the transferred values in.\n'
p107983
sS'cpp_type'
p107984
S'AuxVariableName'
p107985
sS'default'
p107986
g3
sS'name'
p107987
S'variable'
p107988
sS'required'
p107989
I01
sS'group_name'
p107990
NsasS'name'
p107991
S'/Transfers/MultiAppMeshFunctionTransfer'
p107992
sa(dp107993
S'description'
p107994
g3
sS'subblocks'
p107995
NsS'parameters'
p107996
(lp107997
(dp107998
S'description'
p107999
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108000
sS'cpp_type'
p108001
S'bool'
p108002
sS'default'
p108003
S'1'
p108004
sS'name'
p108005
S'check_multiapp_execute_on'
p108006
sS'required'
p108007
I00
sS'group_name'
p108008
Nsa(dp108009
S'description'
p108010
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108011
sS'cpp_type'
p108012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108013
sS'default'
p108014
g3
sS'name'
p108015
S'control_tags'
p108016
sS'required'
p108017
I00
sS'group_name'
p108018
S'Advanced'
p108019
sa(dp108020
S'name'
p108021
S'direction'
p108022
sS'cpp_type'
p108023
S'MooseEnum'
p108024
sS'default'
p108025
g3
sS'description'
p108026
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108027
sS'required'
p108028
I01
sS'options'
p108029
S'to_multiapp from_multiapp'
p108030
sS'group_name'
p108031
Nsa(dp108032
S'description'
p108033
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108034
sS'cpp_type'
p108035
S'bool'
p108036
sS'default'
p108037
S'0'
p108038
sS'name'
p108039
S'displaced_source_mesh'
p108040
sS'required'
p108041
I00
sS'group_name'
p108042
Nsa(dp108043
S'description'
p108044
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108045
sS'cpp_type'
p108046
S'bool'
p108047
sS'default'
p108048
S'0'
p108049
sS'name'
p108050
S'displaced_target_mesh'
p108051
sS'required'
p108052
I00
sS'group_name'
p108053
Nsa(dp108054
S'description'
p108055
S'Set the enabled status of the MooseObject.\n'
p108056
sS'cpp_type'
p108057
S'bool'
p108058
sS'default'
p108059
S'1'
p108060
sS'name'
p108061
S'enable'
p108062
sS'required'
p108063
I00
sS'group_name'
p108064
S'Advanced'
p108065
sa(dp108066
S'name'
p108067
S'execute_on'
p108068
sS'cpp_type'
p108069
S'MultiMooseEnum'
p108070
sS'default'
p108071
S'SAME_AS_MULTIAPP'
p108072
sS'description'
p108073
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108074
sS'required'
p108075
I00
sS'options'
p108076
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108077
sS'group_name'
p108078
Nsa(dp108079
S'description'
p108080
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p108081
sS'cpp_type'
p108082
S'bool'
p108083
sS'default'
p108084
S'0'
p108085
sS'name'
p108086
S'fixed_meshes'
p108087
sS'required'
p108088
I00
sS'group_name'
p108089
Nsa(dp108090
S'description'
p108091
S'The name of the MultiApp to use.\n'
p108092
sS'cpp_type'
p108093
S'MultiAppName'
p108094
sS'default'
p108095
g3
sS'name'
p108096
S'multi_app'
p108097
sS'required'
p108098
I01
sS'group_name'
p108099
Nsa(dp108100
S'description'
p108101
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p108102
sS'cpp_type'
p108103
S'BoundaryName'
p108104
sS'default'
p108105
g3
sS'name'
p108106
S'source_boundary'
p108107
sS'required'
p108108
I00
sS'group_name'
p108109
Nsa(dp108110
S'description'
p108111
S'The variable to transfer from.\n'
p108112
sS'cpp_type'
p108113
S'VariableName'
p108114
sS'default'
p108115
g3
sS'name'
p108116
S'source_variable'
p108117
sS'required'
p108118
I01
sS'group_name'
p108119
Nsa(dp108120
S'description'
p108121
S'The boundary we are transferring to (if not specified, whole domain is used).\n'
p108122
sS'cpp_type'
p108123
S'BoundaryName'
p108124
sS'default'
p108125
g3
sS'name'
p108126
S'target_boundary'
p108127
sS'required'
p108128
I00
sS'group_name'
p108129
Nsa(dp108130
S'description'
p108131
g3
sS'cpp_type'
p108132
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108133
sS'default'
p108134
S'MultiAppNearestNodeTransfer'
p108135
sS'name'
p108136
S'type'
p108137
sS'required'
p108138
I00
sS'group_name'
p108139
Nsa(dp108140
S'description'
p108141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108142
sS'cpp_type'
p108143
S'bool'
p108144
sS'default'
p108145
S'0'
p108146
sS'name'
p108147
S'use_displaced_mesh'
p108148
sS'required'
p108149
I00
sS'group_name'
p108150
S'Advanced'
p108151
sa(dp108152
S'description'
p108153
S'The auxiliary variable to store the transferred values in.\n'
p108154
sS'cpp_type'
p108155
S'AuxVariableName'
p108156
sS'default'
p108157
g3
sS'name'
p108158
S'variable'
p108159
sS'required'
p108160
I01
sS'group_name'
p108161
NsasS'name'
p108162
S'/Transfers/MultiAppNearestNodeTransfer'
p108163
sa(dp108164
S'description'
p108165
g3
sS'subblocks'
p108166
NsS'parameters'
p108167
(lp108168
(dp108169
S'description'
p108170
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108171
sS'cpp_type'
p108172
S'bool'
p108173
sS'default'
p108174
S'1'
p108175
sS'name'
p108176
S'check_multiapp_execute_on'
p108177
sS'required'
p108178
I00
sS'group_name'
p108179
Nsa(dp108180
S'description'
p108181
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108182
sS'cpp_type'
p108183
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108184
sS'default'
p108185
g3
sS'name'
p108186
S'control_tags'
p108187
sS'required'
p108188
I00
sS'group_name'
p108189
S'Advanced'
p108190
sa(dp108191
S'name'
p108192
S'direction'
p108193
sS'cpp_type'
p108194
S'MooseEnum'
p108195
sS'default'
p108196
g3
sS'description'
p108197
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108198
sS'required'
p108199
I01
sS'options'
p108200
S'to_multiapp from_multiapp'
p108201
sS'group_name'
p108202
Nsa(dp108203
S'description'
p108204
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108205
sS'cpp_type'
p108206
S'bool'
p108207
sS'default'
p108208
S'0'
p108209
sS'name'
p108210
S'displaced_source_mesh'
p108211
sS'required'
p108212
I00
sS'group_name'
p108213
Nsa(dp108214
S'description'
p108215
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108216
sS'cpp_type'
p108217
S'bool'
p108218
sS'default'
p108219
S'0'
p108220
sS'name'
p108221
S'displaced_target_mesh'
p108222
sS'required'
p108223
I00
sS'group_name'
p108224
Nsa(dp108225
S'description'
p108226
S'Set the enabled status of the MooseObject.\n'
p108227
sS'cpp_type'
p108228
S'bool'
p108229
sS'default'
p108230
S'1'
p108231
sS'name'
p108232
S'enable'
p108233
sS'required'
p108234
I00
sS'group_name'
p108235
S'Advanced'
p108236
sa(dp108237
S'name'
p108238
S'execute_on'
p108239
sS'cpp_type'
p108240
S'MultiMooseEnum'
p108241
sS'default'
p108242
S'SAME_AS_MULTIAPP'
p108243
sS'description'
p108244
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108245
sS'required'
p108246
I00
sS'options'
p108247
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108248
sS'group_name'
p108249
Nsa(dp108250
S'name'
p108251
S'interp_type'
p108252
sS'cpp_type'
p108253
S'MooseEnum'
p108254
sS'default'
p108255
S'inverse_distance'
p108256
sS'description'
p108257
S'The algorithm to use for interpolation.\n'
p108258
sS'required'
p108259
I00
sS'options'
p108260
S'inverse_distance radial_basis'
p108261
sS'group_name'
p108262
Nsa(dp108263
S'description'
p108264
S'The name of the MultiApp to use.\n'
p108265
sS'cpp_type'
p108266
S'MultiAppName'
p108267
sS'default'
p108268
g3
sS'name'
p108269
S'multi_app'
p108270
sS'required'
p108271
I01
sS'group_name'
p108272
Nsa(dp108273
S'description'
p108274
S'The number of nearest points to use for interpolation.\n'
p108275
sS'cpp_type'
p108276
S'unsigned int'
p108277
sS'default'
p108278
S'3'
p108279
sS'name'
p108280
S'num_points'
p108281
sS'required'
p108282
I00
sS'group_name'
p108283
Nsa(dp108284
S'description'
p108285
S'The Postprocessor to interpolate.\n'
p108286
sS'cpp_type'
p108287
S'PostprocessorName'
p108288
sS'default'
p108289
g3
sS'name'
p108290
S'postprocessor'
p108291
sS'required'
p108292
I01
sS'group_name'
p108293
Nsa(dp108294
S'description'
p108295
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p108296
sS'cpp_type'
p108297
S'double'
p108298
sS'default'
p108299
S'2'
p108300
sS'name'
p108301
S'power'
p108302
sS'required'
p108303
I00
sS'group_name'
p108304
Nsa(dp108305
S'description'
p108306
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p108307
sS'cpp_type'
p108308
S'double'
p108309
sS'default'
p108310
S'-1'
p108311
sS'name'
p108312
S'radius'
p108313
sS'required'
p108314
I00
sS'group_name'
p108315
Nsa(dp108316
S'description'
p108317
g3
sS'cpp_type'
p108318
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108319
sS'default'
p108320
S'MultiAppPostprocessorInterpolationTransfer'
p108321
sS'name'
p108322
S'type'
p108323
sS'required'
p108324
I00
sS'group_name'
p108325
Nsa(dp108326
S'description'
p108327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108328
sS'cpp_type'
p108329
S'bool'
p108330
sS'default'
p108331
S'0'
p108332
sS'name'
p108333
S'use_displaced_mesh'
p108334
sS'required'
p108335
I00
sS'group_name'
p108336
S'Advanced'
p108337
sa(dp108338
S'description'
p108339
S'The auxiliary variable to store the transferred values in.\n'
p108340
sS'cpp_type'
p108341
S'AuxVariableName'
p108342
sS'default'
p108343
g3
sS'name'
p108344
S'variable'
p108345
sS'required'
p108346
I01
sS'group_name'
p108347
NsasS'name'
p108348
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p108349
sa(dp108350
S'description'
p108351
g3
sS'subblocks'
p108352
NsS'parameters'
p108353
(lp108354
(dp108355
S'description'
p108356
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108357
sS'cpp_type'
p108358
S'bool'
p108359
sS'default'
p108360
S'1'
p108361
sS'name'
p108362
S'check_multiapp_execute_on'
p108363
sS'required'
p108364
I00
sS'group_name'
p108365
Nsa(dp108366
S'description'
p108367
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108368
sS'cpp_type'
p108369
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108370
sS'default'
p108371
g3
sS'name'
p108372
S'control_tags'
p108373
sS'required'
p108374
I00
sS'group_name'
p108375
S'Advanced'
p108376
sa(dp108377
S'name'
p108378
S'direction'
p108379
sS'cpp_type'
p108380
S'MooseEnum'
p108381
sS'default'
p108382
g3
sS'description'
p108383
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108384
sS'required'
p108385
I01
sS'options'
p108386
S'to_multiapp from_multiapp'
p108387
sS'group_name'
p108388
Nsa(dp108389
S'description'
p108390
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108391
sS'cpp_type'
p108392
S'bool'
p108393
sS'default'
p108394
S'0'
p108395
sS'name'
p108396
S'displaced_source_mesh'
p108397
sS'required'
p108398
I00
sS'group_name'
p108399
Nsa(dp108400
S'description'
p108401
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108402
sS'cpp_type'
p108403
S'bool'
p108404
sS'default'
p108405
S'0'
p108406
sS'name'
p108407
S'displaced_target_mesh'
p108408
sS'required'
p108409
I00
sS'group_name'
p108410
Nsa(dp108411
S'description'
p108412
S'Set the enabled status of the MooseObject.\n'
p108413
sS'cpp_type'
p108414
S'bool'
p108415
sS'default'
p108416
S'1'
p108417
sS'name'
p108418
S'enable'
p108419
sS'required'
p108420
I00
sS'group_name'
p108421
S'Advanced'
p108422
sa(dp108423
S'name'
p108424
S'execute_on'
p108425
sS'cpp_type'
p108426
S'MultiMooseEnum'
p108427
sS'default'
p108428
S'SAME_AS_MULTIAPP'
p108429
sS'description'
p108430
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108431
sS'required'
p108432
I00
sS'options'
p108433
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108434
sS'group_name'
p108435
Nsa(dp108436
S'description'
p108437
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p108438
sS'cpp_type'
p108439
S'PostprocessorName'
p108440
sS'default'
p108441
g3
sS'name'
p108442
S'from_postprocessor'
p108443
sS'required'
p108444
I01
sS'group_name'
p108445
Nsa(dp108446
S'description'
p108447
S'The name of the MultiApp to use.\n'
p108448
sS'cpp_type'
p108449
S'MultiAppName'
p108450
sS'default'
p108451
g3
sS'name'
p108452
S'multi_app'
p108453
sS'required'
p108454
I01
sS'group_name'
p108455
Nsa(dp108456
S'description'
p108457
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p108458
sS'cpp_type'
p108459
S'VariableName'
p108460
sS'default'
p108461
g3
sS'name'
p108462
S'to_aux_scalar'
p108463
sS'required'
p108464
I01
sS'group_name'
p108465
Nsa(dp108466
S'description'
p108467
g3
sS'cpp_type'
p108468
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108469
sS'default'
p108470
S'MultiAppPostprocessorToAuxScalarTransfer'
p108471
sS'name'
p108472
S'type'
p108473
sS'required'
p108474
I00
sS'group_name'
p108475
Nsa(dp108476
S'description'
p108477
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108478
sS'cpp_type'
p108479
S'bool'
p108480
sS'default'
p108481
S'0'
p108482
sS'name'
p108483
S'use_displaced_mesh'
p108484
sS'required'
p108485
I00
sS'group_name'
p108486
S'Advanced'
p108487
sasS'name'
p108488
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p108489
sa(dp108490
S'description'
p108491
g3
sS'subblocks'
p108492
NsS'parameters'
p108493
(lp108494
(dp108495
S'description'
p108496
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108497
sS'cpp_type'
p108498
S'bool'
p108499
sS'default'
p108500
S'1'
p108501
sS'name'
p108502
S'check_multiapp_execute_on'
p108503
sS'required'
p108504
I00
sS'group_name'
p108505
Nsa(dp108506
S'description'
p108507
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108508
sS'cpp_type'
p108509
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108510
sS'default'
p108511
g3
sS'name'
p108512
S'control_tags'
p108513
sS'required'
p108514
I00
sS'group_name'
p108515
S'Advanced'
p108516
sa(dp108517
S'name'
p108518
S'direction'
p108519
sS'cpp_type'
p108520
S'MooseEnum'
p108521
sS'default'
p108522
g3
sS'description'
p108523
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108524
sS'required'
p108525
I01
sS'options'
p108526
S'to_multiapp from_multiapp'
p108527
sS'group_name'
p108528
Nsa(dp108529
S'description'
p108530
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108531
sS'cpp_type'
p108532
S'bool'
p108533
sS'default'
p108534
S'0'
p108535
sS'name'
p108536
S'displaced_source_mesh'
p108537
sS'required'
p108538
I00
sS'group_name'
p108539
Nsa(dp108540
S'description'
p108541
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108542
sS'cpp_type'
p108543
S'bool'
p108544
sS'default'
p108545
S'0'
p108546
sS'name'
p108547
S'displaced_target_mesh'
p108548
sS'required'
p108549
I00
sS'group_name'
p108550
Nsa(dp108551
S'description'
p108552
S'Set the enabled status of the MooseObject.\n'
p108553
sS'cpp_type'
p108554
S'bool'
p108555
sS'default'
p108556
S'1'
p108557
sS'name'
p108558
S'enable'
p108559
sS'required'
p108560
I00
sS'group_name'
p108561
S'Advanced'
p108562
sa(dp108563
S'name'
p108564
S'execute_on'
p108565
sS'cpp_type'
p108566
S'MultiMooseEnum'
p108567
sS'default'
p108568
S'SAME_AS_MULTIAPP'
p108569
sS'description'
p108570
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108571
sS'required'
p108572
I00
sS'options'
p108573
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108574
sS'group_name'
p108575
Nsa(dp108576
S'description'
p108577
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p108578
sS'cpp_type'
p108579
S'PostprocessorName'
p108580
sS'default'
p108581
g3
sS'name'
p108582
S'from_postprocessor'
p108583
sS'required'
p108584
I01
sS'group_name'
p108585
Nsa(dp108586
S'description'
p108587
S'The name of the MultiApp to use.\n'
p108588
sS'cpp_type'
p108589
S'MultiAppName'
p108590
sS'default'
p108591
g3
sS'name'
p108592
S'multi_app'
p108593
sS'required'
p108594
I01
sS'group_name'
p108595
Nsa(dp108596
S'name'
p108597
S'reduction_type'
p108598
sS'cpp_type'
p108599
S'MooseEnum'
p108600
sS'default'
p108601
g3
sS'description'
p108602
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p108603
sS'required'
p108604
I00
sS'options'
p108605
S'average sum maximum minimum'
p108606
sS'group_name'
p108607
Nsa(dp108608
S'description'
p108609
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p108610
sS'cpp_type'
p108611
S'PostprocessorName'
p108612
sS'default'
p108613
g3
sS'name'
p108614
S'to_postprocessor'
p108615
sS'required'
p108616
I01
sS'group_name'
p108617
Nsa(dp108618
S'description'
p108619
g3
sS'cpp_type'
p108620
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108621
sS'default'
p108622
S'MultiAppPostprocessorTransfer'
p108623
sS'name'
p108624
S'type'
p108625
sS'required'
p108626
I00
sS'group_name'
p108627
Nsa(dp108628
S'description'
p108629
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108630
sS'cpp_type'
p108631
S'bool'
p108632
sS'default'
p108633
S'0'
p108634
sS'name'
p108635
S'use_displaced_mesh'
p108636
sS'required'
p108637
I00
sS'group_name'
p108638
S'Advanced'
p108639
sasS'name'
p108640
S'/Transfers/MultiAppPostprocessorTransfer'
p108641
sa(dp108642
S'description'
p108643
g3
sS'subblocks'
p108644
NsS'parameters'
p108645
(lp108646
(dp108647
S'description'
p108648
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108649
sS'cpp_type'
p108650
S'bool'
p108651
sS'default'
p108652
S'1'
p108653
sS'name'
p108654
S'check_multiapp_execute_on'
p108655
sS'required'
p108656
I00
sS'group_name'
p108657
Nsa(dp108658
S'description'
p108659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108660
sS'cpp_type'
p108661
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108662
sS'default'
p108663
g3
sS'name'
p108664
S'control_tags'
p108665
sS'required'
p108666
I00
sS'group_name'
p108667
S'Advanced'
p108668
sa(dp108669
S'name'
p108670
S'direction'
p108671
sS'cpp_type'
p108672
S'MooseEnum'
p108673
sS'default'
p108674
g3
sS'description'
p108675
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108676
sS'required'
p108677
I01
sS'options'
p108678
S'to_multiapp from_multiapp'
p108679
sS'group_name'
p108680
Nsa(dp108681
S'description'
p108682
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108683
sS'cpp_type'
p108684
S'bool'
p108685
sS'default'
p108686
S'0'
p108687
sS'name'
p108688
S'displaced_source_mesh'
p108689
sS'required'
p108690
I00
sS'group_name'
p108691
Nsa(dp108692
S'description'
p108693
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108694
sS'cpp_type'
p108695
S'bool'
p108696
sS'default'
p108697
S'0'
p108698
sS'name'
p108699
S'displaced_target_mesh'
p108700
sS'required'
p108701
I00
sS'group_name'
p108702
Nsa(dp108703
S'description'
p108704
S'Set the enabled status of the MooseObject.\n'
p108705
sS'cpp_type'
p108706
S'bool'
p108707
sS'default'
p108708
S'1'
p108709
sS'name'
p108710
S'enable'
p108711
sS'required'
p108712
I00
sS'group_name'
p108713
S'Advanced'
p108714
sa(dp108715
S'name'
p108716
S'execute_on'
p108717
sS'cpp_type'
p108718
S'MultiMooseEnum'
p108719
sS'default'
p108720
S'SAME_AS_MULTIAPP'
p108721
sS'description'
p108722
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108723
sS'required'
p108724
I00
sS'options'
p108725
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108726
sS'group_name'
p108727
Nsa(dp108728
S'description'
p108729
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n'
p108730
sS'cpp_type'
p108731
S'bool'
p108732
sS'default'
p108733
S'0'
p108734
sS'name'
p108735
S'fixed_meshes'
p108736
sS'required'
p108737
I00
sS'group_name'
p108738
Nsa(dp108739
S'description'
p108740
S'The name of the MultiApp to use.\n'
p108741
sS'cpp_type'
p108742
S'MultiAppName'
p108743
sS'default'
p108744
g3
sS'name'
p108745
S'multi_app'
p108746
sS'required'
p108747
I01
sS'group_name'
p108748
Nsa(dp108749
S'name'
p108750
S'proj_type'
p108751
sS'cpp_type'
p108752
S'MooseEnum'
p108753
sS'default'
p108754
S'l2'
p108755
sS'description'
p108756
S'The type of the projection.\n'
p108757
sS'required'
p108758
I00
sS'options'
p108759
S'l2'
p108760
sS'group_name'
p108761
Nsa(dp108762
S'description'
p108763
S'The variable to transfer from.\n'
p108764
sS'cpp_type'
p108765
S'VariableName'
p108766
sS'default'
p108767
g3
sS'name'
p108768
S'source_variable'
p108769
sS'required'
p108770
I01
sS'group_name'
p108771
Nsa(dp108772
S'description'
p108773
g3
sS'cpp_type'
p108774
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108775
sS'default'
p108776
S'MultiAppProjectionTransfer'
p108777
sS'name'
p108778
S'type'
p108779
sS'required'
p108780
I00
sS'group_name'
p108781
Nsa(dp108782
S'description'
p108783
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108784
sS'cpp_type'
p108785
S'bool'
p108786
sS'default'
p108787
S'0'
p108788
sS'name'
p108789
S'use_displaced_mesh'
p108790
sS'required'
p108791
I00
sS'group_name'
p108792
S'Advanced'
p108793
sa(dp108794
S'description'
p108795
S'The auxiliary variable to store the transferred values in.\n'
p108796
sS'cpp_type'
p108797
S'AuxVariableName'
p108798
sS'default'
p108799
g3
sS'name'
p108800
S'variable'
p108801
sS'required'
p108802
I01
sS'group_name'
p108803
NsasS'name'
p108804
S'/Transfers/MultiAppProjectionTransfer'
p108805
sa(dp108806
S'description'
p108807
g3
sS'subblocks'
p108808
NsS'parameters'
p108809
(lp108810
(dp108811
S'description'
p108812
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108813
sS'cpp_type'
p108814
S'bool'
p108815
sS'default'
p108816
S'1'
p108817
sS'name'
p108818
S'check_multiapp_execute_on'
p108819
sS'required'
p108820
I00
sS'group_name'
p108821
Nsa(dp108822
S'description'
p108823
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108824
sS'cpp_type'
p108825
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108826
sS'default'
p108827
g3
sS'name'
p108828
S'control_tags'
p108829
sS'required'
p108830
I00
sS'group_name'
p108831
S'Advanced'
p108832
sa(dp108833
S'name'
p108834
S'direction'
p108835
sS'cpp_type'
p108836
S'MooseEnum'
p108837
sS'default'
p108838
g3
sS'description'
p108839
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108840
sS'required'
p108841
I01
sS'options'
p108842
S'to_multiapp from_multiapp'
p108843
sS'group_name'
p108844
Nsa(dp108845
S'description'
p108846
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108847
sS'cpp_type'
p108848
S'bool'
p108849
sS'default'
p108850
S'0'
p108851
sS'name'
p108852
S'displaced_source_mesh'
p108853
sS'required'
p108854
I00
sS'group_name'
p108855
Nsa(dp108856
S'description'
p108857
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108858
sS'cpp_type'
p108859
S'bool'
p108860
sS'default'
p108861
S'0'
p108862
sS'name'
p108863
S'displaced_target_mesh'
p108864
sS'required'
p108865
I00
sS'group_name'
p108866
Nsa(dp108867
S'description'
p108868
S'Set the enabled status of the MooseObject.\n'
p108869
sS'cpp_type'
p108870
S'bool'
p108871
sS'default'
p108872
S'1'
p108873
sS'name'
p108874
S'enable'
p108875
sS'required'
p108876
I00
sS'group_name'
p108877
S'Advanced'
p108878
sa(dp108879
S'name'
p108880
S'execute_on'
p108881
sS'cpp_type'
p108882
S'MultiMooseEnum'
p108883
sS'default'
p108884
S'SAME_AS_MULTIAPP'
p108885
sS'description'
p108886
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108887
sS'required'
p108888
I00
sS'options'
p108889
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p108890
sS'group_name'
p108891
Nsa(dp108892
S'description'
p108893
S'The name of the MultiApp to use.\n'
p108894
sS'cpp_type'
p108895
S'MultiAppName'
p108896
sS'default'
p108897
g3
sS'name'
p108898
S'multi_app'
p108899
sS'required'
p108900
I01
sS'group_name'
p108901
Nsa(dp108902
S'description'
p108903
g3
sS'cpp_type'
p108904
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108905
sS'default'
p108906
S'MultiAppUserObjectTransfer'
p108907
sS'name'
p108908
S'type'
p108909
sS'required'
p108910
I00
sS'group_name'
p108911
Nsa(dp108912
S'description'
p108913
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108914
sS'cpp_type'
p108915
S'bool'
p108916
sS'default'
p108917
S'0'
p108918
sS'name'
p108919
S'use_displaced_mesh'
p108920
sS'required'
p108921
I00
sS'group_name'
p108922
S'Advanced'
p108923
sa(dp108924
S'description'
p108925
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p108926
sS'cpp_type'
p108927
S'UserObjectName'
p108928
sS'default'
p108929
g3
sS'name'
p108930
S'user_object'
p108931
sS'required'
p108932
I01
sS'group_name'
p108933
Nsa(dp108934
S'description'
p108935
S'The auxiliary variable to store the transferred values in.\n'
p108936
sS'cpp_type'
p108937
S'AuxVariableName'
p108938
sS'default'
p108939
g3
sS'name'
p108940
S'variable'
p108941
sS'required'
p108942
I01
sS'group_name'
p108943
NsasS'name'
p108944
S'/Transfers/MultiAppUserObjectTransfer'
p108945
sa(dp108946
S'description'
p108947
g3
sS'subblocks'
p108948
NsS'parameters'
p108949
(lp108950
(dp108951
S'description'
p108952
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p108953
sS'cpp_type'
p108954
S'bool'
p108955
sS'default'
p108956
S'1'
p108957
sS'name'
p108958
S'check_multiapp_execute_on'
p108959
sS'required'
p108960
I00
sS'group_name'
p108961
Nsa(dp108962
S'description'
p108963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108964
sS'cpp_type'
p108965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108966
sS'default'
p108967
g3
sS'name'
p108968
S'control_tags'
p108969
sS'required'
p108970
I00
sS'group_name'
p108971
S'Advanced'
p108972
sa(dp108973
S'name'
p108974
S'direction'
p108975
sS'cpp_type'
p108976
S'MooseEnum'
p108977
sS'default'
p108978
g3
sS'description'
p108979
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108980
sS'required'
p108981
I01
sS'options'
p108982
S'to_multiapp from_multiapp'
p108983
sS'group_name'
p108984
Nsa(dp108985
S'description'
p108986
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108987
sS'cpp_type'
p108988
S'bool'
p108989
sS'default'
p108990
S'0'
p108991
sS'name'
p108992
S'displaced_source_mesh'
p108993
sS'required'
p108994
I00
sS'group_name'
p108995
Nsa(dp108996
S'description'
p108997
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108998
sS'cpp_type'
p108999
S'bool'
p109000
sS'default'
p109001
S'0'
p109002
sS'name'
p109003
S'displaced_target_mesh'
p109004
sS'required'
p109005
I00
sS'group_name'
p109006
Nsa(dp109007
S'description'
p109008
S'Set the enabled status of the MooseObject.\n'
p109009
sS'cpp_type'
p109010
S'bool'
p109011
sS'default'
p109012
S'1'
p109013
sS'name'
p109014
S'enable'
p109015
sS'required'
p109016
I00
sS'group_name'
p109017
S'Advanced'
p109018
sa(dp109019
S'name'
p109020
S'execute_on'
p109021
sS'cpp_type'
p109022
S'MultiMooseEnum'
p109023
sS'default'
p109024
S'SAME_AS_MULTIAPP'
p109025
sS'description'
p109026
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109027
sS'required'
p109028
I00
sS'options'
p109029
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p109030
sS'group_name'
p109031
Nsa(dp109032
S'description'
p109033
S'The name of the MultiApp to use.\n'
p109034
sS'cpp_type'
p109035
S'MultiAppName'
p109036
sS'default'
p109037
g3
sS'name'
p109038
S'multi_app'
p109039
sS'required'
p109040
I01
sS'group_name'
p109041
Nsa(dp109042
S'description'
p109043
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p109044
sS'cpp_type'
p109045
S'PostprocessorName'
p109046
sS'default'
p109047
g3
sS'name'
p109048
S'postprocessor'
p109049
sS'required'
p109050
I01
sS'group_name'
p109051
Nsa(dp109052
S'description'
p109053
S'The variable to transfer from.\n'
p109054
sS'cpp_type'
p109055
S'VariableName'
p109056
sS'default'
p109057
g3
sS'name'
p109058
S'source_variable'
p109059
sS'required'
p109060
I01
sS'group_name'
p109061
Nsa(dp109062
S'description'
p109063
g3
sS'cpp_type'
p109064
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109065
sS'default'
p109066
S'MultiAppVariableValueSamplePostprocessorTransfer'
p109067
sS'name'
p109068
S'type'
p109069
sS'required'
p109070
I00
sS'group_name'
p109071
Nsa(dp109072
S'description'
p109073
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109074
sS'cpp_type'
p109075
S'bool'
p109076
sS'default'
p109077
S'0'
p109078
sS'name'
p109079
S'use_displaced_mesh'
p109080
sS'required'
p109081
I00
sS'group_name'
p109082
S'Advanced'
p109083
sasS'name'
p109084
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p109085
sa(dp109086
S'description'
p109087
g3
sS'subblocks'
p109088
NsS'parameters'
p109089
(lp109090
(dp109091
S'description'
p109092
S'When false the check between the multiapp and transfer execute on flags is not preformed.\n'
p109093
sS'cpp_type'
p109094
S'bool'
p109095
sS'default'
p109096
S'1'
p109097
sS'name'
p109098
S'check_multiapp_execute_on'
p109099
sS'required'
p109100
I00
sS'group_name'
p109101
Nsa(dp109102
S'description'
p109103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109104
sS'cpp_type'
p109105
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109106
sS'default'
p109107
g3
sS'name'
p109108
S'control_tags'
p109109
sS'required'
p109110
I00
sS'group_name'
p109111
S'Advanced'
p109112
sa(dp109113
S'name'
p109114
S'direction'
p109115
sS'cpp_type'
p109116
S'MooseEnum'
p109117
sS'default'
p109118
g3
sS'description'
p109119
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p109120
sS'required'
p109121
I01
sS'options'
p109122
S'to_multiapp from_multiapp'
p109123
sS'group_name'
p109124
Nsa(dp109125
S'description'
p109126
S'Whether or not to use the displaced mesh for the source mesh.\n'
p109127
sS'cpp_type'
p109128
S'bool'
p109129
sS'default'
p109130
S'0'
p109131
sS'name'
p109132
S'displaced_source_mesh'
p109133
sS'required'
p109134
I00
sS'group_name'
p109135
Nsa(dp109136
S'description'
p109137
S'Whether or not to use the displaced mesh for the target mesh.\n'
p109138
sS'cpp_type'
p109139
S'bool'
p109140
sS'default'
p109141
S'0'
p109142
sS'name'
p109143
S'displaced_target_mesh'
p109144
sS'required'
p109145
I00
sS'group_name'
p109146
Nsa(dp109147
S'description'
p109148
S'Set the enabled status of the MooseObject.\n'
p109149
sS'cpp_type'
p109150
S'bool'
p109151
sS'default'
p109152
S'1'
p109153
sS'name'
p109154
S'enable'
p109155
sS'required'
p109156
I00
sS'group_name'
p109157
S'Advanced'
p109158
sa(dp109159
S'name'
p109160
S'execute_on'
p109161
sS'cpp_type'
p109162
S'MultiMooseEnum'
p109163
sS'default'
p109164
S'SAME_AS_MULTIAPP'
p109165
sS'description'
p109166
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109167
sS'required'
p109168
I00
sS'options'
p109169
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p109170
sS'group_name'
p109171
Nsa(dp109172
S'description'
p109173
S'The name of the MultiApp to use.\n'
p109174
sS'cpp_type'
p109175
S'MultiAppName'
p109176
sS'default'
p109177
g3
sS'name'
p109178
S'multi_app'
p109179
sS'required'
p109180
I01
sS'group_name'
p109181
Nsa(dp109182
S'description'
p109183
S'The variable to transfer from.\n'
p109184
sS'cpp_type'
p109185
S'VariableName'
p109186
sS'default'
p109187
g3
sS'name'
p109188
S'source_variable'
p109189
sS'required'
p109190
I01
sS'group_name'
p109191
Nsa(dp109192
S'description'
p109193
g3
sS'cpp_type'
p109194
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109195
sS'default'
p109196
S'MultiAppVariableValueSampleTransfer'
p109197
sS'name'
p109198
S'type'
p109199
sS'required'
p109200
I00
sS'group_name'
p109201
Nsa(dp109202
S'description'
p109203
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109204
sS'cpp_type'
p109205
S'bool'
p109206
sS'default'
p109207
S'0'
p109208
sS'name'
p109209
S'use_displaced_mesh'
p109210
sS'required'
p109211
I00
sS'group_name'
p109212
S'Advanced'
p109213
sa(dp109214
S'description'
p109215
S'The auxiliary variable to store the transferred values in.\n'
p109216
sS'cpp_type'
p109217
S'AuxVariableName'
p109218
sS'default'
p109219
g3
sS'name'
p109220
S'variable'
p109221
sS'required'
p109222
I01
sS'group_name'
p109223
NsasS'name'
p109224
S'/Transfers/MultiAppVariableValueSampleTransfer'
p109225
sasS'parameters'
p109226
NsS'name'
p109227
S'/Transfers'
p109228
sa(dp109229
S'description'
p109230
g3
sS'subblocks'
p109231
(lp109232
(dp109233
S'description'
p109234
g3
sS'subblocks'
p109235
NsS'parameters'
p109236
(lp109237
(dp109238
S'description'
p109239
S'A string representing the Moose Object that will be built by this Action\n'
p109240
sS'cpp_type'
p109241
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109242
sS'default'
p109243
g3
sS'name'
p109244
S'type'
p109245
sS'required'
p109246
I01
sS'group_name'
p109247
NsasS'name'
p109248
S'/UserObjects/*'
p109249
sa(dp109250
S'description'
p109251
g3
sS'subblocks'
p109252
NsS'parameters'
p109253
(lp109254
(dp109255
S'description'
p109256
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109257
sS'cpp_type'
p109258
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109259
sS'default'
p109260
g3
sS'name'
p109261
S'boundary'
p109262
sS'required'
p109263
I01
sS'group_name'
p109264
Nsa(dp109265
S'description'
p109266
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109267
sS'cpp_type'
p109268
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109269
sS'default'
p109270
g3
sS'name'
p109271
S'control_tags'
p109272
sS'required'
p109273
I00
sS'group_name'
p109274
S'Advanced'
p109275
sa(dp109276
S'description'
p109277
S'Set the enabled status of the MooseObject.\n'
p109278
sS'cpp_type'
p109279
S'bool'
p109280
sS'default'
p109281
S'1'
p109282
sS'name'
p109283
S'enable'
p109284
sS'required'
p109285
I00
sS'group_name'
p109286
S'Advanced'
p109287
sa(dp109288
S'name'
p109289
S'execute_on'
p109290
sS'cpp_type'
p109291
S'MultiMooseEnum'
p109292
sS'default'
p109293
S'TIMESTEP_END'
p109294
sS'description'
p109295
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109296
sS'required'
p109297
I00
sS'options'
p109298
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109299
sS'group_name'
p109300
Nsa(dp109301
S'description'
p109302
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109303
sS'cpp_type'
p109304
S'std::vector<OutputName, std::allocator<OutputName> >'
p109305
sS'default'
p109306
g3
sS'name'
p109307
S'outputs'
p109308
sS'required'
p109309
I00
sS'group_name'
p109310
S'Advanced'
p109311
sa(dp109312
S'description'
p109313
g3
sS'cpp_type'
p109314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109315
sS'default'
p109316
S'AreaPostprocessor'
p109317
sS'name'
p109318
S'type'
p109319
sS'required'
p109320
I00
sS'group_name'
p109321
Nsa(dp109322
S'description'
p109323
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109324
sS'cpp_type'
p109325
S'bool'
p109326
sS'default'
p109327
S'0'
p109328
sS'name'
p109329
S'use_displaced_mesh'
p109330
sS'required'
p109331
I00
sS'group_name'
p109332
S'Advanced'
p109333
sasS'name'
p109334
S'/UserObjects/AreaPostprocessor'
p109335
sa(dp109336
S'description'
p109337
g3
sS'subblocks'
p109338
NsS'parameters'
p109339
(lp109340
(dp109341
S'description'
p109342
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109343
sS'cpp_type'
p109344
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109345
sS'default'
p109346
g3
sS'name'
p109347
S'block'
p109348
sS'required'
p109349
I00
sS'group_name'
p109350
Nsa(dp109351
S'description'
p109352
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109353
sS'cpp_type'
p109354
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109355
sS'default'
p109356
g3
sS'name'
p109357
S'control_tags'
p109358
sS'required'
p109359
I00
sS'group_name'
p109360
S'Advanced'
p109361
sa(dp109362
S'description'
p109363
S'Set the enabled status of the MooseObject.\n'
p109364
sS'cpp_type'
p109365
S'bool'
p109366
sS'default'
p109367
S'1'
p109368
sS'name'
p109369
S'enable'
p109370
sS'required'
p109371
I00
sS'group_name'
p109372
S'Advanced'
p109373
sa(dp109374
S'name'
p109375
S'execute_on'
p109376
sS'cpp_type'
p109377
S'MultiMooseEnum'
p109378
sS'default'
p109379
S'TIMESTEP_END'
p109380
sS'description'
p109381
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109382
sS'required'
p109383
I00
sS'options'
p109384
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109385
sS'group_name'
p109386
Nsa(dp109387
S'description'
p109388
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109389
sS'cpp_type'
p109390
S'std::vector<OutputName, std::allocator<OutputName> >'
p109391
sS'default'
p109392
g3
sS'name'
p109393
S'outputs'
p109394
sS'required'
p109395
I00
sS'group_name'
p109396
S'Advanced'
p109397
sa(dp109398
S'description'
p109399
S'The seed for the master random number generator\n'
p109400
sS'cpp_type'
p109401
S'unsigned int'
p109402
sS'default'
p109403
S'0'
p109404
sS'name'
p109405
S'seed'
p109406
sS'required'
p109407
I00
sS'group_name'
p109408
S'Advanced'
p109409
sa(dp109410
S'description'
p109411
g3
sS'cpp_type'
p109412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109413
sS'default'
p109414
S'AverageElementSize'
p109415
sS'name'
p109416
S'type'
p109417
sS'required'
p109418
I00
sS'group_name'
p109419
Nsa(dp109420
S'description'
p109421
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109422
sS'cpp_type'
p109423
S'bool'
p109424
sS'default'
p109425
S'0'
p109426
sS'name'
p109427
S'use_displaced_mesh'
p109428
sS'required'
p109429
I00
sS'group_name'
p109430
S'Advanced'
p109431
sa(dp109432
S'description'
p109433
S'The name of the variable that this object operates on\n'
p109434
sS'cpp_type'
p109435
S'std::vector<VariableName>'
p109436
sS'default'
p109437
g3
sS'name'
p109438
S'variable'
p109439
sS'required'
p109440
I01
sS'group_name'
p109441
NsasS'name'
p109442
S'/UserObjects/AverageElementSize'
p109443
sa(dp109444
S'description'
p109445
g3
sS'subblocks'
p109446
NsS'parameters'
p109447
(lp109448
(dp109449
S'description'
p109450
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109451
sS'cpp_type'
p109452
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109453
sS'default'
p109454
g3
sS'name'
p109455
S'block'
p109456
sS'required'
p109457
I00
sS'group_name'
p109458
Nsa(dp109459
S'description'
p109460
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109461
sS'cpp_type'
p109462
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109463
sS'default'
p109464
g3
sS'name'
p109465
S'boundary'
p109466
sS'required'
p109467
I00
sS'group_name'
p109468
Nsa(dp109469
S'description'
p109470
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109471
sS'cpp_type'
p109472
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109473
sS'default'
p109474
g3
sS'name'
p109475
S'control_tags'
p109476
sS'required'
p109477
I00
sS'group_name'
p109478
S'Advanced'
p109479
sa(dp109480
S'description'
p109481
S'Set the enabled status of the MooseObject.\n'
p109482
sS'cpp_type'
p109483
S'bool'
p109484
sS'default'
p109485
S'1'
p109486
sS'name'
p109487
S'enable'
p109488
sS'required'
p109489
I00
sS'group_name'
p109490
S'Advanced'
p109491
sa(dp109492
S'name'
p109493
S'execute_on'
p109494
sS'cpp_type'
p109495
S'MultiMooseEnum'
p109496
sS'default'
p109497
S'TIMESTEP_END'
p109498
sS'description'
p109499
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109500
sS'required'
p109501
I00
sS'options'
p109502
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109503
sS'group_name'
p109504
Nsa(dp109505
S'description'
p109506
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109507
sS'cpp_type'
p109508
S'std::vector<OutputName, std::allocator<OutputName> >'
p109509
sS'default'
p109510
g3
sS'name'
p109511
S'outputs'
p109512
sS'required'
p109513
I00
sS'group_name'
p109514
S'Advanced'
p109515
sa(dp109516
S'description'
p109517
S'The seed for the master random number generator\n'
p109518
sS'cpp_type'
p109519
S'unsigned int'
p109520
sS'default'
p109521
S'0'
p109522
sS'name'
p109523
S'seed'
p109524
sS'required'
p109525
I00
sS'group_name'
p109526
S'Advanced'
p109527
sa(dp109528
S'description'
p109529
g3
sS'cpp_type'
p109530
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109531
sS'default'
p109532
S'AverageNodalVariableValue'
p109533
sS'name'
p109534
S'type'
p109535
sS'required'
p109536
I00
sS'group_name'
p109537
Nsa(dp109538
S'description'
p109539
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p109540
sS'cpp_type'
p109541
S'bool'
p109542
sS'default'
p109543
S'0'
p109544
sS'name'
p109545
S'unique_node_execute'
p109546
sS'required'
p109547
I00
sS'group_name'
p109548
Nsa(dp109549
S'description'
p109550
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109551
sS'cpp_type'
p109552
S'bool'
p109553
sS'default'
p109554
S'0'
p109555
sS'name'
p109556
S'use_displaced_mesh'
p109557
sS'required'
p109558
I00
sS'group_name'
p109559
S'Advanced'
p109560
sa(dp109561
S'description'
p109562
S'The name of the variable that this postprocessor operates on\n'
p109563
sS'cpp_type'
p109564
S'std::vector<VariableName>'
p109565
sS'default'
p109566
g3
sS'name'
p109567
S'variable'
p109568
sS'required'
p109569
I01
sS'group_name'
p109570
NsasS'name'
p109571
S'/UserObjects/AverageNodalVariableValue'
p109572
sa(dp109573
S'description'
p109574
g3
sS'subblocks'
p109575
NsS'parameters'
p109576
(lp109577
(dp109578
S'description'
p109579
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109580
sS'cpp_type'
p109581
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109582
sS'default'
p109583
g3
sS'name'
p109584
S'boundary'
p109585
sS'required'
p109586
I01
sS'group_name'
p109587
Nsa(dp109588
S'description'
p109589
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109590
sS'cpp_type'
p109591
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109592
sS'default'
p109593
g3
sS'name'
p109594
S'control_tags'
p109595
sS'required'
p109596
I00
sS'group_name'
p109597
S'Advanced'
p109598
sa(dp109599
S'description'
p109600
S'Set the enabled status of the MooseObject.\n'
p109601
sS'cpp_type'
p109602
S'bool'
p109603
sS'default'
p109604
S'1'
p109605
sS'name'
p109606
S'enable'
p109607
sS'required'
p109608
I00
sS'group_name'
p109609
S'Advanced'
p109610
sa(dp109611
S'name'
p109612
S'execute_on'
p109613
sS'cpp_type'
p109614
S'MultiMooseEnum'
p109615
sS'default'
p109616
S'TIMESTEP_END'
p109617
sS'description'
p109618
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109619
sS'required'
p109620
I00
sS'options'
p109621
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109622
sS'group_name'
p109623
Nsa(dp109624
S'description'
p109625
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109626
sS'cpp_type'
p109627
S'std::vector<OutputName, std::allocator<OutputName> >'
p109628
sS'default'
p109629
g3
sS'name'
p109630
S'outputs'
p109631
sS'required'
p109632
I00
sS'group_name'
p109633
S'Advanced'
p109634
sa(dp109635
S'description'
p109636
g3
sS'cpp_type'
p109637
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109638
sS'default'
p109639
S'AxisymmetricCenterlineAverageValue'
p109640
sS'name'
p109641
S'type'
p109642
sS'required'
p109643
I00
sS'group_name'
p109644
Nsa(dp109645
S'description'
p109646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109647
sS'cpp_type'
p109648
S'bool'
p109649
sS'default'
p109650
S'0'
p109651
sS'name'
p109652
S'use_displaced_mesh'
p109653
sS'required'
p109654
I00
sS'group_name'
p109655
S'Advanced'
p109656
sa(dp109657
S'description'
p109658
S'The name of the variable that this boundary condition applies to\n'
p109659
sS'cpp_type'
p109660
S'std::vector<VariableName>'
p109661
sS'default'
p109662
g3
sS'name'
p109663
S'variable'
p109664
sS'required'
p109665
I01
sS'group_name'
p109666
NsasS'name'
p109667
S'/UserObjects/AxisymmetricCenterlineAverageValue'
p109668
sa(dp109669
S'description'
p109670
g3
sS'subblocks'
p109671
NsS'parameters'
p109672
(lp109673
(dp109674
S'description'
p109675
S'The CavityPressureUserObject that computes the initial moles\n'
p109676
sS'cpp_type'
p109677
S'UserObjectName'
p109678
sS'default'
p109679
g3
sS'name'
p109680
S'cavity_pressure_uo'
p109681
sS'required'
p109682
I01
sS'group_name'
p109683
Nsa(dp109684
S'description'
p109685
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109686
sS'cpp_type'
p109687
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109688
sS'default'
p109689
g3
sS'name'
p109690
S'control_tags'
p109691
sS'required'
p109692
I00
sS'group_name'
p109693
S'Advanced'
p109694
sa(dp109695
S'description'
p109696
S'Set the enabled status of the MooseObject.\n'
p109697
sS'cpp_type'
p109698
S'bool'
p109699
sS'default'
p109700
S'1'
p109701
sS'name'
p109702
S'enable'
p109703
sS'required'
p109704
I00
sS'group_name'
p109705
S'Advanced'
p109706
sa(dp109707
S'name'
p109708
S'execute_on'
p109709
sS'cpp_type'
p109710
S'MultiMooseEnum'
p109711
sS'default'
p109712
S'TIMESTEP_END'
p109713
sS'description'
p109714
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109715
sS'required'
p109716
I00
sS'options'
p109717
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109718
sS'group_name'
p109719
Nsa(dp109720
S'description'
p109721
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109722
sS'cpp_type'
p109723
S'std::vector<OutputName, std::allocator<OutputName> >'
p109724
sS'default'
p109725
g3
sS'name'
p109726
S'outputs'
p109727
sS'required'
p109728
I00
sS'group_name'
p109729
S'Advanced'
p109730
sa(dp109731
S'description'
p109732
S'The quantity to report\n'
p109733
sS'cpp_type'
p109734
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109735
sS'default'
p109736
g3
sS'name'
p109737
S'quantity'
p109738
sS'required'
p109739
I01
sS'group_name'
p109740
Nsa(dp109741
S'description'
p109742
g3
sS'cpp_type'
p109743
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109744
sS'default'
p109745
S'CavityPressurePostprocessor'
p109746
sS'name'
p109747
S'type'
p109748
sS'required'
p109749
I00
sS'group_name'
p109750
Nsa(dp109751
S'description'
p109752
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109753
sS'cpp_type'
p109754
S'bool'
p109755
sS'default'
p109756
S'1'
p109757
sS'name'
p109758
S'use_displaced_mesh'
p109759
sS'required'
p109760
I00
sS'group_name'
p109761
S'Advanced'
p109762
sasS'name'
p109763
S'/UserObjects/CavityPressurePostprocessor'
p109764
sa(dp109765
S'description'
p109766
g3
sS'subblocks'
p109767
NsS'parameters'
p109768
(lp109769
(dp109770
S'description'
p109771
S'The universal gas constant for the units used.\n'
p109772
sS'cpp_type'
p109773
S'double'
p109774
sS'default'
p109775
g3
sS'name'
p109776
S'R'
p109777
sS'required'
p109778
I01
sS'group_name'
p109779
Nsa(dp109780
S'description'
p109781
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109782
sS'cpp_type'
p109783
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109784
sS'default'
p109785
g3
sS'name'
p109786
S'control_tags'
p109787
sS'required'
p109788
I00
sS'group_name'
p109789
S'Advanced'
p109790
sa(dp109791
S'description'
p109792
S'Set the enabled status of the MooseObject.\n'
p109793
sS'cpp_type'
p109794
S'bool'
p109795
sS'default'
p109796
S'1'
p109797
sS'name'
p109798
S'enable'
p109799
sS'required'
p109800
I00
sS'group_name'
p109801
S'Advanced'
p109802
sa(dp109803
S'name'
p109804
S'execute_on'
p109805
sS'cpp_type'
p109806
S'MultiMooseEnum'
p109807
sS'default'
p109808
S'TIMESTEP_END'
p109809
sS'description'
p109810
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109811
sS'required'
p109812
I00
sS'options'
p109813
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109814
sS'group_name'
p109815
Nsa(dp109816
S'description'
p109817
S'The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n'
p109818
sS'cpp_type'
p109819
S'double'
p109820
sS'default'
p109821
S'0'
p109822
sS'name'
p109823
S'initial_pressure'
p109824
sS'required'
p109825
I00
sS'group_name'
p109826
Nsa(dp109827
S'description'
p109828
S'Initial temperature (optional)\n'
p109829
sS'cpp_type'
p109830
S'double'
p109831
sS'default'
p109832
g3
sS'name'
p109833
S'initial_temperature'
p109834
sS'required'
p109835
I00
sS'group_name'
p109836
Nsa(dp109837
S'description'
p109838
S'The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n'
p109839
sS'cpp_type'
p109840
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p109841
sS'default'
p109842
g3
sS'name'
p109843
S'material_input'
p109844
sS'required'
p109845
I00
sS'group_name'
p109846
Nsa(dp109847
S'description'
p109848
S'The amount of time during which the pressure will ramp from zero to its true value.\n'
p109849
sS'cpp_type'
p109850
S'double'
p109851
sS'default'
p109852
S'0'
p109853
sS'name'
p109854
S'startup_time'
p109855
sS'required'
p109856
I00
sS'group_name'
p109857
Nsa(dp109858
S'description'
p109859
S'The name of the average temperature postprocessor value.\n'
p109860
sS'cpp_type'
p109861
S'PostprocessorName'
p109862
sS'default'
p109863
g3
sS'name'
p109864
S'temperature'
p109865
sS'required'
p109866
I01
sS'group_name'
p109867
Nsa(dp109868
S'description'
p109869
g3
sS'cpp_type'
p109870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109871
sS'default'
p109872
S'CavityPressureUserObject'
p109873
sS'name'
p109874
S'type'
p109875
sS'required'
p109876
I00
sS'group_name'
p109877
Nsa(dp109878
S'description'
p109879
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109880
sS'cpp_type'
p109881
S'bool'
p109882
sS'default'
p109883
S'1'
p109884
sS'name'
p109885
S'use_displaced_mesh'
p109886
sS'required'
p109887
I00
sS'group_name'
p109888
S'Advanced'
p109889
sa(dp109890
S'description'
p109891
S'The name of the internal volume postprocessor value.\n'
p109892
sS'cpp_type'
p109893
S'PostprocessorName'
p109894
sS'default'
p109895
g3
sS'name'
p109896
S'volume'
p109897
sS'required'
p109898
I01
sS'group_name'
p109899
NsasS'name'
p109900
S'/UserObjects/CavityPressureUserObject'
p109901
sa(dp109902
S'description'
p109903
g3
sS'subblocks'
p109904
NsS'parameters'
p109905
(lp109906
(dp109907
S'description'
p109908
S'Compute magnitude of relative change instead of change\n'
p109909
sS'cpp_type'
p109910
S'bool'
p109911
sS'default'
p109912
S'0'
p109913
sS'name'
p109914
S'compute_relative_change'
p109915
sS'required'
p109916
I00
sS'group_name'
p109917
Nsa(dp109918
S'description'
p109919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109920
sS'cpp_type'
p109921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109922
sS'default'
p109923
g3
sS'name'
p109924
S'control_tags'
p109925
sS'required'
p109926
I00
sS'group_name'
p109927
S'Advanced'
p109928
sa(dp109929
S'description'
p109930
S'Set the enabled status of the MooseObject.\n'
p109931
sS'cpp_type'
p109932
S'bool'
p109933
sS'default'
p109934
S'1'
p109935
sS'name'
p109936
S'enable'
p109937
sS'required'
p109938
I00
sS'group_name'
p109939
S'Advanced'
p109940
sa(dp109941
S'name'
p109942
S'execute_on'
p109943
sS'cpp_type'
p109944
S'MultiMooseEnum'
p109945
sS'default'
p109946
S'TIMESTEP_END'
p109947
sS'description'
p109948
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109949
sS'required'
p109950
I00
sS'options'
p109951
S'none initial linear nonlinear timestep_end timestep_begin custom'
p109952
sS'group_name'
p109953
Nsa(dp109954
S'description'
p109955
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109956
sS'cpp_type'
p109957
S'std::vector<OutputName, std::allocator<OutputName> >'
p109958
sS'default'
p109959
g3
sS'name'
p109960
S'outputs'
p109961
sS'required'
p109962
I00
sS'group_name'
p109963
S'Advanced'
p109964
sa(dp109965
S'description'
p109966
S'The name of the postprocessor\n'
p109967
sS'cpp_type'
p109968
S'PostprocessorName'
p109969
sS'default'
p109970
g3
sS'name'
p109971
S'postprocessor'
p109972
sS'required'
p109973
I01
sS'group_name'
p109974
Nsa(dp109975
S'description'
p109976
g3
sS'cpp_type'
p109977
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109978
sS'default'
p109979
S'ChangeOverTimestepPostprocessor'
p109980
sS'name'
p109981
S'type'
p109982
sS'required'
p109983
I00
sS'group_name'
p109984
Nsa(dp109985
S'description'
p109986
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109987
sS'cpp_type'
p109988
S'bool'
p109989
sS'default'
p109990
S'0'
p109991
sS'name'
p109992
S'use_displaced_mesh'
p109993
sS'required'
p109994
I00
sS'group_name'
p109995
S'Advanced'
p109996
sasS'name'
p109997
S'/UserObjects/ChangeOverTimestepPostprocessor'
p109998
sa(dp109999
S'description'
p110000
S'Userobject for calculating force and torque acting on a grain\n'
p110001
sS'subblocks'
p110002
NsS'parameters'
p110003
(lp110004
(dp110005
S'description'
p110006
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110007
sS'cpp_type'
p110008
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110009
sS'default'
p110010
g3
sS'name'
p110011
S'block'
p110012
sS'required'
p110013
I00
sS'group_name'
p110014
Nsa(dp110015
S'description'
p110016
S'Concentration field\n'
p110017
sS'cpp_type'
p110018
S'std::vector<VariableName>'
p110019
sS'default'
p110020
g3
sS'name'
p110021
S'c'
p110022
sS'required'
p110023
I00
sS'group_name'
p110024
Nsa(dp110025
S'description'
p110026
S'Compute Jacobians for coupled variables\n'
p110027
sS'cpp_type'
p110028
S'bool'
p110029
sS'default'
p110030
S'1'
p110031
sS'name'
p110032
S'compute_jacobians'
p110033
sS'required'
p110034
I00
sS'group_name'
p110035
S'Advanced'
p110036
sa(dp110037
S'description'
p110038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110039
sS'cpp_type'
p110040
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110041
sS'default'
p110042
g3
sS'name'
p110043
S'control_tags'
p110044
sS'required'
p110045
I00
sS'group_name'
p110046
S'Advanced'
p110047
sa(dp110048
S'description'
p110049
S'Set the enabled status of the MooseObject.\n'
p110050
sS'cpp_type'
p110051
S'bool'
p110052
sS'default'
p110053
S'1'
p110054
sS'name'
p110055
S'enable'
p110056
sS'required'
p110057
I00
sS'group_name'
p110058
S'Advanced'
p110059
sa(dp110060
S'description'
p110061
S'Array of coupled order parameters\n'
p110062
sS'cpp_type'
p110063
S'std::vector<VariableName>'
p110064
sS'default'
p110065
g3
sS'name'
p110066
S'etas'
p110067
sS'required'
p110068
I00
sS'group_name'
p110069
Nsa(dp110070
S'name'
p110071
S'execute_on'
p110072
sS'cpp_type'
p110073
S'MultiMooseEnum'
p110074
sS'default'
p110075
S'TIMESTEP_END'
p110076
sS'description'
p110077
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110078
sS'required'
p110079
I00
sS'options'
p110080
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110081
sS'group_name'
p110082
Nsa(dp110083
S'description'
p110084
S'Force density material\n'
p110085
sS'cpp_type'
p110086
S'MaterialPropertyName'
p110087
sS'default'
p110088
S'force_density'
p110089
sS'name'
p110090
S'force_density'
p110091
sS'required'
p110092
I00
sS'group_name'
p110093
Nsa(dp110094
S'description'
p110095
S'center of mass of grains\n'
p110096
sS'cpp_type'
p110097
S'UserObjectName'
p110098
sS'default'
p110099
g3
sS'name'
p110100
S'grain_data'
p110101
sS'required'
p110102
I00
sS'group_name'
p110103
Nsa(dp110104
S'description'
p110105
S'The seed for the master random number generator\n'
p110106
sS'cpp_type'
p110107
S'unsigned int'
p110108
sS'default'
p110109
S'0'
p110110
sS'name'
p110111
S'seed'
p110112
sS'required'
p110113
I00
sS'group_name'
p110114
S'Advanced'
p110115
sa(dp110116
S'description'
p110117
g3
sS'cpp_type'
p110118
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110119
sS'default'
p110120
S'ComputeExternalGrainForceAndTorque'
p110121
sS'name'
p110122
S'type'
p110123
sS'required'
p110124
I00
sS'group_name'
p110125
Nsa(dp110126
S'description'
p110127
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110128
sS'cpp_type'
p110129
S'bool'
p110130
sS'default'
p110131
S'0'
p110132
sS'name'
p110133
S'use_displaced_mesh'
p110134
sS'required'
p110135
I00
sS'group_name'
p110136
S'Advanced'
p110137
sasS'name'
p110138
S'/UserObjects/ComputeExternalGrainForceAndTorque'
p110139
sa(dp110140
S'description'
p110141
S'Userobject for calculating force and torque acting on a grain\n'
p110142
sS'subblocks'
p110143
NsS'parameters'
p110144
(lp110145
(dp110146
S'description'
p110147
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110148
sS'cpp_type'
p110149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110150
sS'default'
p110151
g3
sS'name'
p110152
S'block'
p110153
sS'required'
p110154
I00
sS'group_name'
p110155
Nsa(dp110156
S'description'
p110157
S'Concentration field\n'
p110158
sS'cpp_type'
p110159
S'std::vector<VariableName>'
p110160
sS'default'
p110161
g3
sS'name'
p110162
S'c'
p110163
sS'required'
p110164
I00
sS'group_name'
p110165
Nsa(dp110166
S'description'
p110167
S'Compute Jacobians for coupled variables\n'
p110168
sS'cpp_type'
p110169
S'bool'
p110170
sS'default'
p110171
S'1'
p110172
sS'name'
p110173
S'compute_jacobians'
p110174
sS'required'
p110175
I00
sS'group_name'
p110176
S'Advanced'
p110177
sa(dp110178
S'description'
p110179
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110180
sS'cpp_type'
p110181
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110182
sS'default'
p110183
g3
sS'name'
p110184
S'control_tags'
p110185
sS'required'
p110186
I00
sS'group_name'
p110187
S'Advanced'
p110188
sa(dp110189
S'description'
p110190
S'Set the enabled status of the MooseObject.\n'
p110191
sS'cpp_type'
p110192
S'bool'
p110193
sS'default'
p110194
S'1'
p110195
sS'name'
p110196
S'enable'
p110197
sS'required'
p110198
I00
sS'group_name'
p110199
S'Advanced'
p110200
sa(dp110201
S'description'
p110202
S'Array of coupled order parameters\n'
p110203
sS'cpp_type'
p110204
S'std::vector<VariableName>'
p110205
sS'default'
p110206
g3
sS'name'
p110207
S'etas'
p110208
sS'required'
p110209
I00
sS'group_name'
p110210
Nsa(dp110211
S'name'
p110212
S'execute_on'
p110213
sS'cpp_type'
p110214
S'MultiMooseEnum'
p110215
sS'default'
p110216
S'TIMESTEP_END'
p110217
sS'description'
p110218
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110219
sS'required'
p110220
I00
sS'options'
p110221
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110222
sS'group_name'
p110223
Nsa(dp110224
S'description'
p110225
S'Force density material\n'
p110226
sS'cpp_type'
p110227
S'MaterialPropertyName'
p110228
sS'default'
p110229
S'force_density'
p110230
sS'name'
p110231
S'force_density'
p110232
sS'required'
p110233
I00
sS'group_name'
p110234
Nsa(dp110235
S'description'
p110236
S'center of mass of grains\n'
p110237
sS'cpp_type'
p110238
S'UserObjectName'
p110239
sS'default'
p110240
g3
sS'name'
p110241
S'grain_data'
p110242
sS'required'
p110243
I00
sS'group_name'
p110244
Nsa(dp110245
S'description'
p110246
S'The seed for the master random number generator\n'
p110247
sS'cpp_type'
p110248
S'unsigned int'
p110249
sS'default'
p110250
S'0'
p110251
sS'name'
p110252
S'seed'
p110253
sS'required'
p110254
I00
sS'group_name'
p110255
S'Advanced'
p110256
sa(dp110257
S'description'
p110258
g3
sS'cpp_type'
p110259
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110260
sS'default'
p110261
S'ComputeGrainForceAndTorque'
p110262
sS'name'
p110263
S'type'
p110264
sS'required'
p110265
I00
sS'group_name'
p110266
Nsa(dp110267
S'description'
p110268
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110269
sS'cpp_type'
p110270
S'bool'
p110271
sS'default'
p110272
S'0'
p110273
sS'name'
p110274
S'use_displaced_mesh'
p110275
sS'required'
p110276
I00
sS'group_name'
p110277
S'Advanced'
p110278
sasS'name'
p110279
S'/UserObjects/ComputeGrainForceAndTorque'
p110280
sa(dp110281
S'description'
p110282
g3
sS'subblocks'
p110283
NsS'parameters'
p110284
(lp110285
(dp110286
S'description'
p110287
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110288
sS'cpp_type'
p110289
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110290
sS'default'
p110291
g3
sS'name'
p110292
S'block'
p110293
sS'required'
p110294
I00
sS'group_name'
p110295
Nsa(dp110296
S'description'
p110297
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110298
sS'cpp_type'
p110299
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110300
sS'default'
p110301
g3
sS'name'
p110302
S'control_tags'
p110303
sS'required'
p110304
I00
sS'group_name'
p110305
S'Advanced'
p110306
sa(dp110307
S'description'
p110308
S'Set the enabled status of the MooseObject.\n'
p110309
sS'cpp_type'
p110310
S'bool'
p110311
sS'default'
p110312
S'1'
p110313
sS'name'
p110314
S'enable'
p110315
sS'required'
p110316
I00
sS'group_name'
p110317
S'Advanced'
p110318
sa(dp110319
S'name'
p110320
S'execute_on'
p110321
sS'cpp_type'
p110322
S'MultiMooseEnum'
p110323
sS'default'
p110324
S'TIMESTEP_BEGIN'
p110325
sS'description'
p110326
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110327
sS'required'
p110328
I00
sS'options'
p110329
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110330
sS'group_name'
p110331
Nsa(dp110332
S'description'
p110333
S'Material property to multiply the random numbers with\n'
p110334
sS'cpp_type'
p110335
S'MaterialPropertyName'
p110336
sS'default'
p110337
g3
sS'name'
p110338
S'mask'
p110339
sS'required'
p110340
I00
sS'group_name'
p110341
Nsa(dp110342
S'description'
p110343
S'The seed for the master random number generator\n'
p110344
sS'cpp_type'
p110345
S'unsigned int'
p110346
sS'default'
p110347
S'0'
p110348
sS'name'
p110349
S'seed'
p110350
sS'required'
p110351
I00
sS'group_name'
p110352
S'Advanced'
p110353
sa(dp110354
S'description'
p110355
g3
sS'cpp_type'
p110356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110357
sS'default'
p110358
S'ConservedMaskedNormalNoise'
p110359
sS'name'
p110360
S'type'
p110361
sS'required'
p110362
I00
sS'group_name'
p110363
Nsa(dp110364
S'description'
p110365
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110366
sS'cpp_type'
p110367
S'bool'
p110368
sS'default'
p110369
S'0'
p110370
sS'name'
p110371
S'use_displaced_mesh'
p110372
sS'required'
p110373
I00
sS'group_name'
p110374
S'Advanced'
p110375
sasS'name'
p110376
S'/UserObjects/ConservedMaskedNormalNoise'
p110377
sa(dp110378
S'description'
p110379
g3
sS'subblocks'
p110380
NsS'parameters'
p110381
(lp110382
(dp110383
S'description'
p110384
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110385
sS'cpp_type'
p110386
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110387
sS'default'
p110388
g3
sS'name'
p110389
S'block'
p110390
sS'required'
p110391
I00
sS'group_name'
p110392
Nsa(dp110393
S'description'
p110394
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110395
sS'cpp_type'
p110396
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110397
sS'default'
p110398
g3
sS'name'
p110399
S'control_tags'
p110400
sS'required'
p110401
I00
sS'group_name'
p110402
S'Advanced'
p110403
sa(dp110404
S'description'
p110405
S'Set the enabled status of the MooseObject.\n'
p110406
sS'cpp_type'
p110407
S'bool'
p110408
sS'default'
p110409
S'1'
p110410
sS'name'
p110411
S'enable'
p110412
sS'required'
p110413
I00
sS'group_name'
p110414
S'Advanced'
p110415
sa(dp110416
S'name'
p110417
S'execute_on'
p110418
sS'cpp_type'
p110419
S'MultiMooseEnum'
p110420
sS'default'
p110421
S'TIMESTEP_BEGIN'
p110422
sS'description'
p110423
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110424
sS'required'
p110425
I00
sS'options'
p110426
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110427
sS'group_name'
p110428
Nsa(dp110429
S'description'
p110430
S'Material property to multiply the random numbers with\n'
p110431
sS'cpp_type'
p110432
S'MaterialPropertyName'
p110433
sS'default'
p110434
g3
sS'name'
p110435
S'mask'
p110436
sS'required'
p110437
I00
sS'group_name'
p110438
Nsa(dp110439
S'description'
p110440
S'The seed for the master random number generator\n'
p110441
sS'cpp_type'
p110442
S'unsigned int'
p110443
sS'default'
p110444
S'0'
p110445
sS'name'
p110446
S'seed'
p110447
sS'required'
p110448
I00
sS'group_name'
p110449
S'Advanced'
p110450
sa(dp110451
S'description'
p110452
g3
sS'cpp_type'
p110453
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110454
sS'default'
p110455
S'ConservedMaskedUniformNoise'
p110456
sS'name'
p110457
S'type'
p110458
sS'required'
p110459
I00
sS'group_name'
p110460
Nsa(dp110461
S'description'
p110462
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110463
sS'cpp_type'
p110464
S'bool'
p110465
sS'default'
p110466
S'0'
p110467
sS'name'
p110468
S'use_displaced_mesh'
p110469
sS'required'
p110470
I00
sS'group_name'
p110471
S'Advanced'
p110472
sasS'name'
p110473
S'/UserObjects/ConservedMaskedUniformNoise'
p110474
sa(dp110475
S'description'
p110476
g3
sS'subblocks'
p110477
NsS'parameters'
p110478
(lp110479
(dp110480
S'description'
p110481
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110482
sS'cpp_type'
p110483
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110484
sS'default'
p110485
g3
sS'name'
p110486
S'block'
p110487
sS'required'
p110488
I00
sS'group_name'
p110489
Nsa(dp110490
S'description'
p110491
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110492
sS'cpp_type'
p110493
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110494
sS'default'
p110495
g3
sS'name'
p110496
S'control_tags'
p110497
sS'required'
p110498
I00
sS'group_name'
p110499
S'Advanced'
p110500
sa(dp110501
S'description'
p110502
S'Set the enabled status of the MooseObject.\n'
p110503
sS'cpp_type'
p110504
S'bool'
p110505
sS'default'
p110506
S'1'
p110507
sS'name'
p110508
S'enable'
p110509
sS'required'
p110510
I00
sS'group_name'
p110511
S'Advanced'
p110512
sa(dp110513
S'name'
p110514
S'execute_on'
p110515
sS'cpp_type'
p110516
S'MultiMooseEnum'
p110517
sS'default'
p110518
S'TIMESTEP_BEGIN'
p110519
sS'description'
p110520
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110521
sS'required'
p110522
I00
sS'options'
p110523
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110524
sS'group_name'
p110525
Nsa(dp110526
S'description'
p110527
S'The seed for the master random number generator\n'
p110528
sS'cpp_type'
p110529
S'unsigned int'
p110530
sS'default'
p110531
S'0'
p110532
sS'name'
p110533
S'seed'
p110534
sS'required'
p110535
I00
sS'group_name'
p110536
S'Advanced'
p110537
sa(dp110538
S'description'
p110539
g3
sS'cpp_type'
p110540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110541
sS'default'
p110542
S'ConservedNormalNoise'
p110543
sS'name'
p110544
S'type'
p110545
sS'required'
p110546
I00
sS'group_name'
p110547
Nsa(dp110548
S'description'
p110549
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110550
sS'cpp_type'
p110551
S'bool'
p110552
sS'default'
p110553
S'0'
p110554
sS'name'
p110555
S'use_displaced_mesh'
p110556
sS'required'
p110557
I00
sS'group_name'
p110558
S'Advanced'
p110559
sasS'name'
p110560
S'/UserObjects/ConservedNormalNoise'
p110561
sa(dp110562
S'description'
p110563
g3
sS'subblocks'
p110564
NsS'parameters'
p110565
(lp110566
(dp110567
S'description'
p110568
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110569
sS'cpp_type'
p110570
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110571
sS'default'
p110572
g3
sS'name'
p110573
S'block'
p110574
sS'required'
p110575
I00
sS'group_name'
p110576
Nsa(dp110577
S'description'
p110578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110579
sS'cpp_type'
p110580
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110581
sS'default'
p110582
g3
sS'name'
p110583
S'control_tags'
p110584
sS'required'
p110585
I00
sS'group_name'
p110586
S'Advanced'
p110587
sa(dp110588
S'description'
p110589
S'Set the enabled status of the MooseObject.\n'
p110590
sS'cpp_type'
p110591
S'bool'
p110592
sS'default'
p110593
S'1'
p110594
sS'name'
p110595
S'enable'
p110596
sS'required'
p110597
I00
sS'group_name'
p110598
S'Advanced'
p110599
sa(dp110600
S'name'
p110601
S'execute_on'
p110602
sS'cpp_type'
p110603
S'MultiMooseEnum'
p110604
sS'default'
p110605
S'TIMESTEP_BEGIN'
p110606
sS'description'
p110607
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110608
sS'required'
p110609
I00
sS'options'
p110610
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110611
sS'group_name'
p110612
Nsa(dp110613
S'description'
p110614
S'The seed for the master random number generator\n'
p110615
sS'cpp_type'
p110616
S'unsigned int'
p110617
sS'default'
p110618
S'0'
p110619
sS'name'
p110620
S'seed'
p110621
sS'required'
p110622
I00
sS'group_name'
p110623
S'Advanced'
p110624
sa(dp110625
S'description'
p110626
g3
sS'cpp_type'
p110627
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110628
sS'default'
p110629
S'ConservedUniformNoise'
p110630
sS'name'
p110631
S'type'
p110632
sS'required'
p110633
I00
sS'group_name'
p110634
Nsa(dp110635
S'description'
p110636
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110637
sS'cpp_type'
p110638
S'bool'
p110639
sS'default'
p110640
S'0'
p110641
sS'name'
p110642
S'use_displaced_mesh'
p110643
sS'required'
p110644
I00
sS'group_name'
p110645
S'Advanced'
p110646
sasS'name'
p110647
S'/UserObjects/ConservedUniformNoise'
p110648
sa(dp110649
S'description'
p110650
S'Userobject for calculating force and torque acting on a grain\n'
p110651
sS'subblocks'
p110652
NsS'parameters'
p110653
(lp110654
(dp110655
S'description'
p110656
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110657
sS'cpp_type'
p110658
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110659
sS'default'
p110660
g3
sS'name'
p110661
S'control_tags'
p110662
sS'required'
p110663
I00
sS'group_name'
p110664
S'Advanced'
p110665
sa(dp110666
S'description'
p110667
S'Set the enabled status of the MooseObject.\n'
p110668
sS'cpp_type'
p110669
S'bool'
p110670
sS'default'
p110671
S'1'
p110672
sS'name'
p110673
S'enable'
p110674
sS'required'
p110675
I00
sS'group_name'
p110676
S'Advanced'
p110677
sa(dp110678
S'name'
p110679
S'execute_on'
p110680
sS'cpp_type'
p110681
S'MultiMooseEnum'
p110682
sS'default'
p110683
S'TIMESTEP_END'
p110684
sS'description'
p110685
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110686
sS'required'
p110687
I00
sS'options'
p110688
S'none initial linear nonlinear timestep_end timestep_begin custom'
p110689
sS'group_name'
p110690
Nsa(dp110691
S'description'
p110692
S'force acting on grains\n'
p110693
sS'cpp_type'
p110694
S'std::vector<double, std::allocator<double> >'
p110695
sS'default'
p110696
g3
sS'name'
p110697
S'force'
p110698
sS'required'
p110699
I00
sS'group_name'
p110700
Nsa(dp110701
S'description'
p110702
S'torque acting on grains\n'
p110703
sS'cpp_type'
p110704
S'std::vector<double, std::allocator<double> >'
p110705
sS'default'
p110706
g3
sS'name'
p110707
S'torque'
p110708
sS'required'
p110709
I00
sS'group_name'
p110710
Nsa(dp110711
S'description'
p110712
g3
sS'cpp_type'
p110713
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110714
sS'default'
p110715
S'ConstantGrainForceAndTorque'
p110716
sS'name'
p110717
S'type'
p110718
sS'required'
p110719
I00
sS'group_name'
p110720
Nsa(dp110721
S'description'
p110722
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110723
sS'cpp_type'
p110724
S'bool'
p110725
sS'default'
p110726
S'0'
p110727
sS'name'
p110728
S'use_displaced_mesh'
p110729
sS'required'
p110730
I00
sS'group_name'
p110731
S'Advanced'
p110732
sasS'name'
p110733
S'/UserObjects/ConstantGrainForceAndTorque'
p110734
sa(dp110735
S'description'
p110736
S'Phenomenological constitutive model slip rate class.  Override the virtual functions in your class\n'
p110737
sS'subblocks'
p110738
NsS'parameters'
p110739
(lp110740
(dp110741
S'description'
p110742
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110743
sS'cpp_type'
p110744
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110745
sS'default'
p110746
g3
sS'name'
p110747
S'block'
p110748
sS'required'
p110749
I00
sS'group_name'
p110750
Nsa(dp110751
S'description'
p110752
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110753
sS'cpp_type'
p110754
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110755
sS'default'
p110756
g3
sS'name'
p110757
S'control_tags'
p110758
sS'required'
p110759
I00
sS'group_name'
p110760
S'Advanced'
p110761
sa(dp110762
S'description'
p110763
S'Set the enabled status of the MooseObject.\n'
p110764
sS'cpp_type'
p110765
S'bool'
p110766
sS'default'
p110767
S'1'
p110768
sS'name'
p110769
S'enable'
p110770
sS'required'
p110771
I00
sS'group_name'
p110772
S'Advanced'
p110773
sa(dp110774
S'description'
p110775
S'Parameters used in slip rate equations\n'
p110776
sS'cpp_type'
p110777
S'std::vector<double, std::allocator<double> >'
p110778
sS'default'
p110779
g3
sS'name'
p110780
S'flowprops'
p110781
sS'required'
p110782
I00
sS'group_name'
p110783
Nsa(dp110784
S'description'
p110785
S'Number of flow rate properties for a slip system\n'
p110786
sS'cpp_type'
p110787
S'unsigned int'
p110788
sS'default'
p110789
S'2'
p110790
sS'name'
p110791
S'num_slip_sys_flowrate_props'
p110792
sS'required'
p110793
I00
sS'group_name'
p110794
Nsa(dp110795
S'description'
p110796
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p110797
sS'cpp_type'
p110798
S'unsigned int'
p110799
sS'default'
p110800
S'0'
p110801
sS'name'
p110802
S'num_slip_sys_props'
p110803
sS'required'
p110804
I00
sS'group_name'
p110805
Nsa(dp110806
S'description'
p110807
S'The seed for the master random number generator\n'
p110808
sS'cpp_type'
p110809
S'unsigned int'
p110810
sS'default'
p110811
S'0'
p110812
sS'name'
p110813
S'seed'
p110814
sS'required'
p110815
I00
sS'group_name'
p110816
S'Advanced'
p110817
sa(dp110818
S'description'
p110819
S'Maximum allowable slip in an increment\n'
p110820
sS'cpp_type'
p110821
S'double'
p110822
sS'default'
p110823
S'0.02'
p110824
sS'name'
p110825
S'slip_incr_tol'
p110826
sS'required'
p110827
I00
sS'group_name'
p110828
Nsa(dp110829
S'description'
p110830
S'Name of the file containing the slip system\n'
p110831
sS'cpp_type'
p110832
S'FileName'
p110833
sS'default'
p110834
g3
sS'name'
p110835
S'slip_sys_file_name'
p110836
sS'required'
p110837
I01
sS'group_name'
p110838
Nsa(dp110839
S'description'
p110840
S'Name of the file containing the values of slip rate equation parameters\n'
p110841
sS'cpp_type'
p110842
S'FileName'
p110843
sS'default'
p110844
g3
sS'name'
p110845
S'slip_sys_flow_prop_file_name'
p110846
sS'required'
p110847
I00
sS'group_name'
p110848
Nsa(dp110849
S'description'
p110850
g3
sS'cpp_type'
p110851
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110852
sS'default'
p110853
S'CrystalPlasticitySlipRateGSS'
p110854
sS'name'
p110855
S'type'
p110856
sS'required'
p110857
I00
sS'group_name'
p110858
Nsa(dp110859
S'description'
p110860
S'Name of state variable property: Same as state variable user object specified in input file.\n'
p110861
sS'cpp_type'
p110862
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110863
sS'default'
p110864
g3
sS'name'
p110865
S'uo_state_var_name'
p110866
sS'required'
p110867
I00
sS'group_name'
p110868
Nsa(dp110869
S'description'
p110870
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110871
sS'cpp_type'
p110872
S'bool'
p110873
sS'default'
p110874
S'0'
p110875
sS'name'
p110876
S'use_displaced_mesh'
p110877
sS'required'
p110878
I00
sS'group_name'
p110879
S'Advanced'
p110880
sa(dp110881
S'description'
p110882
S"The userobject's variable size.\n"
p110883
sS'cpp_type'
p110884
S'unsigned int'
p110885
sS'default'
p110886
g3
sS'name'
p110887
S'variable_size'
p110888
sS'required'
p110889
I01
sS'group_name'
p110890
NsasS'name'
p110891
S'/UserObjects/CrystalPlasticitySlipRateGSS'
p110892
sa(dp110893
S'description'
p110894
S"Phenomenological constitutive models' slip resistance base class.  Override the virtual functions in your class\n"
p110895
sS'subblocks'
p110896
NsS'parameters'
p110897
(lp110898
(dp110899
S'description'
p110900
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110901
sS'cpp_type'
p110902
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110903
sS'default'
p110904
g3
sS'name'
p110905
S'block'
p110906
sS'required'
p110907
I00
sS'group_name'
p110908
Nsa(dp110909
S'description'
p110910
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110911
sS'cpp_type'
p110912
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110913
sS'default'
p110914
g3
sS'name'
p110915
S'control_tags'
p110916
sS'required'
p110917
I00
sS'group_name'
p110918
S'Advanced'
p110919
sa(dp110920
S'description'
p110921
S'Set the enabled status of the MooseObject.\n'
p110922
sS'cpp_type'
p110923
S'bool'
p110924
sS'default'
p110925
S'1'
p110926
sS'name'
p110927
S'enable'
p110928
sS'required'
p110929
I00
sS'group_name'
p110930
S'Advanced'
p110931
sa(dp110932
S'description'
p110933
S'The seed for the master random number generator\n'
p110934
sS'cpp_type'
p110935
S'unsigned int'
p110936
sS'default'
p110937
S'0'
p110938
sS'name'
p110939
S'seed'
p110940
sS'required'
p110941
I00
sS'group_name'
p110942
S'Advanced'
p110943
sa(dp110944
S'description'
p110945
g3
sS'cpp_type'
p110946
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110947
sS'default'
p110948
S'CrystalPlasticitySlipResistanceGSS'
p110949
sS'name'
p110950
S'type'
p110951
sS'required'
p110952
I00
sS'group_name'
p110953
Nsa(dp110954
S'description'
p110955
S'Name of state variable property: Same as state variable user object specified in input file.\n'
p110956
sS'cpp_type'
p110957
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110958
sS'default'
p110959
g3
sS'name'
p110960
S'uo_state_var_name'
p110961
sS'required'
p110962
I00
sS'group_name'
p110963
Nsa(dp110964
S'description'
p110965
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110966
sS'cpp_type'
p110967
S'bool'
p110968
sS'default'
p110969
S'0'
p110970
sS'name'
p110971
S'use_displaced_mesh'
p110972
sS'required'
p110973
I00
sS'group_name'
p110974
S'Advanced'
p110975
sa(dp110976
S'description'
p110977
S"The userobject's variable size.\n"
p110978
sS'cpp_type'
p110979
S'unsigned int'
p110980
sS'default'
p110981
g3
sS'name'
p110982
S'variable_size'
p110983
sS'required'
p110984
I01
sS'group_name'
p110985
NsasS'name'
p110986
S'/UserObjects/CrystalPlasticitySlipResistanceGSS'
p110987
sa(dp110988
S'description'
p110989
S'Phenomenological constitutive model state variable evolution rate component base class.  Override the virtual functions in your class\n'
p110990
sS'subblocks'
p110991
NsS'parameters'
p110992
(lp110993
(dp110994
S'description'
p110995
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110996
sS'cpp_type'
p110997
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110998
sS'default'
p110999
g3
sS'name'
p111000
S'block'
p111001
sS'required'
p111002
I00
sS'group_name'
p111003
Nsa(dp111004
S'description'
p111005
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111006
sS'cpp_type'
p111007
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111008
sS'default'
p111009
g3
sS'name'
p111010
S'control_tags'
p111011
sS'required'
p111012
I00
sS'group_name'
p111013
S'Advanced'
p111014
sa(dp111015
S'description'
p111016
S'Set the enabled status of the MooseObject.\n'
p111017
sS'cpp_type'
p111018
S'bool'
p111019
sS'default'
p111020
S'1'
p111021
sS'name'
p111022
S'enable'
p111023
sS'required'
p111024
I00
sS'group_name'
p111025
S'Advanced'
p111026
sa(dp111027
S'description'
p111028
S'Hardening properties\n'
p111029
sS'cpp_type'
p111030
S'std::vector<double, std::allocator<double> >'
p111031
sS'default'
p111032
g3
sS'name'
p111033
S'hprops'
p111034
sS'required'
p111035
I00
sS'group_name'
p111036
Nsa(dp111037
S'description'
p111038
S'The seed for the master random number generator\n'
p111039
sS'cpp_type'
p111040
S'unsigned int'
p111041
sS'default'
p111042
S'0'
p111043
sS'name'
p111044
S'seed'
p111045
sS'required'
p111046
I00
sS'group_name'
p111047
S'Advanced'
p111048
sa(dp111049
S'description'
p111050
S'Name of the file containing the values of hardness evolution parameters\n'
p111051
sS'cpp_type'
p111052
S'FileName'
p111053
sS'default'
p111054
g3
sS'name'
p111055
S'slip_sys_hard_prop_file_name'
p111056
sS'required'
p111057
I00
sS'group_name'
p111058
Nsa(dp111059
S'description'
p111060
g3
sS'cpp_type'
p111061
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111062
sS'default'
p111063
S'CrystalPlasticityStateVarRateComponentGSS'
p111064
sS'name'
p111065
S'type'
p111066
sS'required'
p111067
I00
sS'group_name'
p111068
Nsa(dp111069
S'description'
p111070
S'Name of slip rate property: Same as slip rate user object specified in input file.\n'
p111071
sS'cpp_type'
p111072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111073
sS'default'
p111074
g3
sS'name'
p111075
S'uo_slip_rate_name'
p111076
sS'required'
p111077
I00
sS'group_name'
p111078
Nsa(dp111079
S'description'
p111080
S'Name of state variable property: Same as state variable user object specified in input file.\n'
p111081
sS'cpp_type'
p111082
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111083
sS'default'
p111084
g3
sS'name'
p111085
S'uo_state_var_name'
p111086
sS'required'
p111087
I00
sS'group_name'
p111088
Nsa(dp111089
S'description'
p111090
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111091
sS'cpp_type'
p111092
S'bool'
p111093
sS'default'
p111094
S'0'
p111095
sS'name'
p111096
S'use_displaced_mesh'
p111097
sS'required'
p111098
I00
sS'group_name'
p111099
S'Advanced'
p111100
sa(dp111101
S'description'
p111102
S"The userobject's variable size.\n"
p111103
sS'cpp_type'
p111104
S'unsigned int'
p111105
sS'default'
p111106
g3
sS'name'
p111107
S'variable_size'
p111108
sS'required'
p111109
I01
sS'group_name'
p111110
NsasS'name'
p111111
S'/UserObjects/CrystalPlasticityStateVarRateComponentGSS'
p111112
sa(dp111113
S'description'
p111114
S'Crystal plasticity state variable class.  Override the virtual functions in your class\n'
p111115
sS'subblocks'
p111116
NsS'parameters'
p111117
(lp111118
(dp111119
S'description'
p111120
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111121
sS'cpp_type'
p111122
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111123
sS'default'
p111124
g3
sS'name'
p111125
S'block'
p111126
sS'required'
p111127
I00
sS'group_name'
p111128
Nsa(dp111129
S'description'
p111130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111131
sS'cpp_type'
p111132
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111133
sS'default'
p111134
g3
sS'name'
p111135
S'control_tags'
p111136
sS'required'
p111137
I00
sS'group_name'
p111138
S'Advanced'
p111139
sa(dp111140
S'description'
p111141
S'Set the enabled status of the MooseObject.\n'
p111142
sS'cpp_type'
p111143
S'bool'
p111144
sS'default'
p111145
S'1'
p111146
sS'name'
p111147
S'enable'
p111148
sS'required'
p111149
I00
sS'group_name'
p111150
S'Advanced'
p111151
sa(dp111152
S'description'
p111153
S"The initial values correspoinding to each group, i.e. '0.0 1.0 2.0' means 0-4 = 0.0, 4-8 = 1.0 and 8-12 = 2.0 \n"
p111154
sS'cpp_type'
p111155
S'std::vector<double, std::allocator<double> >'
p111156
sS'default'
p111157
g3
sS'name'
p111158
S'group_values'
p111159
sS'required'
p111160
I00
sS'group_name'
p111161
Nsa(dp111162
S'description'
p111163
S"To group the initial values on different slip systems 'format: [start end)', i.e.'0 4 8 11' groups 0-3, 4-7 and 8-11 \n"
p111164
sS'cpp_type'
p111165
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p111166
sS'default'
p111167
g3
sS'name'
p111168
S'groups'
p111169
sS'required'
p111170
I00
sS'group_name'
p111171
Nsa(dp111172
S'name'
p111173
S'intvar_read_type'
p111174
sS'cpp_type'
p111175
S'MooseEnum'
p111176
sS'default'
p111177
S'inline_input'
p111178
sS'description'
p111179
S'Read from options for initial value of internal variables: Default from .i file\n'
p111180
sS'required'
p111181
I00
sS'options'
p111182
S'file_input inline_input user_input'
p111183
sS'group_name'
p111184
Nsa(dp111185
S'description'
p111186
S'Scale factor of individual component.\n'
p111187
sS'cpp_type'
p111188
S'std::vector<double, std::allocator<double> >'
p111189
sS'default'
p111190
g3
sS'name'
p111191
S'scale_factor'
p111192
sS'required'
p111193
I00
sS'group_name'
p111194
Nsa(dp111195
S'description'
p111196
S'The seed for the master random number generator\n'
p111197
sS'cpp_type'
p111198
S'unsigned int'
p111199
sS'default'
p111200
S'0'
p111201
sS'name'
p111202
S'seed'
p111203
sS'required'
p111204
I00
sS'group_name'
p111205
S'Advanced'
p111206
sa(dp111207
S'description'
p111208
S'Name of the file containing the initial values of slip system resistances\n'
p111209
sS'cpp_type'
p111210
S'FileName'
p111211
sS'default'
p111212
g3
sS'name'
p111213
S'state_variable_file_name'
p111214
sS'required'
p111215
I00
sS'group_name'
p111216
Nsa(dp111217
S'description'
p111218
g3
sS'cpp_type'
p111219
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111220
sS'default'
p111221
S'CrystalPlasticityStateVariable'
p111222
sS'name'
p111223
S'type'
p111224
sS'required'
p111225
I00
sS'group_name'
p111226
Nsa(dp111227
S'description'
p111228
S'Name of state variable evolution rate component property: Same as state variable evolution rate component user object specified in input file.\n'
p111229
sS'cpp_type'
p111230
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111231
sS'default'
p111232
g3
sS'name'
p111233
S'uo_state_var_evol_rate_comp_name'
p111234
sS'required'
p111235
I00
sS'group_name'
p111236
Nsa(dp111237
S'description'
p111238
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111239
sS'cpp_type'
p111240
S'bool'
p111241
sS'default'
p111242
S'0'
p111243
sS'name'
p111244
S'use_displaced_mesh'
p111245
sS'required'
p111246
I00
sS'group_name'
p111247
S'Advanced'
p111248
sa(dp111249
S'description'
p111250
S"The userobject's variable size.\n"
p111251
sS'cpp_type'
p111252
S'unsigned int'
p111253
sS'default'
p111254
g3
sS'name'
p111255
S'variable_size'
p111256
sS'required'
p111257
I01
sS'group_name'
p111258
Nsa(dp111259
S'description'
p111260
S'Numerical zero for interval variable\n'
p111261
sS'cpp_type'
p111262
S'double'
p111263
sS'default'
p111264
S'0'
p111265
sS'name'
p111266
S'zero'
p111267
sS'required'
p111268
I00
sS'group_name'
p111269
NsasS'name'
p111270
S'/UserObjects/CrystalPlasticityStateVariable'
p111271
sa(dp111272
S'description'
p111273
g3
sS'subblocks'
p111274
NsS'parameters'
p111275
(lp111276
(dp111277
S'description'
p111278
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111279
sS'cpp_type'
p111280
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111281
sS'default'
p111282
g3
sS'name'
p111283
S'control_tags'
p111284
sS'required'
p111285
I00
sS'group_name'
p111286
S'Advanced'
p111287
sa(dp111288
S'description'
p111289
S'Set the enabled status of the MooseObject.\n'
p111290
sS'cpp_type'
p111291
S'bool'
p111292
sS'default'
p111293
S'1'
p111294
sS'name'
p111295
S'enable'
p111296
sS'required'
p111297
I00
sS'group_name'
p111298
S'Advanced'
p111299
sa(dp111300
S'name'
p111301
S'execute_on'
p111302
sS'cpp_type'
p111303
S'MultiMooseEnum'
p111304
sS'default'
p111305
S'TIMESTEP_END'
p111306
sS'description'
p111307
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111308
sS'required'
p111309
I00
sS'options'
p111310
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111311
sS'group_name'
p111312
Nsa(dp111313
S'description'
p111314
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111315
sS'cpp_type'
p111316
S'std::vector<OutputName, std::allocator<OutputName> >'
p111317
sS'default'
p111318
g3
sS'name'
p111319
S'outputs'
p111320
sS'required'
p111321
I00
sS'group_name'
p111322
S'Advanced'
p111323
sa(dp111324
S'description'
p111325
S'The name of the postprocessor\n'
p111326
sS'cpp_type'
p111327
S'PostprocessorName'
p111328
sS'default'
p111329
g3
sS'name'
p111330
S'postprocessor'
p111331
sS'required'
p111332
I01
sS'group_name'
p111333
Nsa(dp111334
S'description'
p111335
g3
sS'cpp_type'
p111336
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111337
sS'default'
p111338
S'CumulativeValuePostprocessor'
p111339
sS'name'
p111340
S'type'
p111341
sS'required'
p111342
I00
sS'group_name'
p111343
Nsa(dp111344
S'description'
p111345
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111346
sS'cpp_type'
p111347
S'bool'
p111348
sS'default'
p111349
S'0'
p111350
sS'name'
p111351
S'use_displaced_mesh'
p111352
sS'required'
p111353
I00
sS'group_name'
p111354
S'Advanced'
p111355
sasS'name'
p111356
S'/UserObjects/CumulativeValuePostprocessor'
p111357
sa(dp111358
S'description'
p111359
g3
sS'subblocks'
p111360
NsS'parameters'
p111361
(lp111362
(dp111363
S'description'
p111364
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111365
sS'cpp_type'
p111366
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111367
sS'default'
p111368
g3
sS'name'
p111369
S'control_tags'
p111370
sS'required'
p111371
I00
sS'group_name'
p111372
S'Advanced'
p111373
sa(dp111374
S'description'
p111375
S'Set the enabled status of the MooseObject.\n'
p111376
sS'cpp_type'
p111377
S'bool'
p111378
sS'default'
p111379
S'1'
p111380
sS'name'
p111381
S'enable'
p111382
sS'required'
p111383
I00
sS'group_name'
p111384
S'Advanced'
p111385
sa(dp111386
S'name'
p111387
S'execute_on'
p111388
sS'cpp_type'
p111389
S'MultiMooseEnum'
p111390
sS'default'
p111391
S'TIMESTEP_END'
p111392
sS'description'
p111393
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111394
sS'required'
p111395
I00
sS'options'
p111396
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111397
sS'group_name'
p111398
Nsa(dp111399
S'description'
p111400
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111401
sS'cpp_type'
p111402
S'std::vector<OutputName, std::allocator<OutputName> >'
p111403
sS'default'
p111404
g3
sS'name'
p111405
S'outputs'
p111406
sS'required'
p111407
I00
sS'group_name'
p111408
S'Advanced'
p111409
sa(dp111410
S'description'
p111411
g3
sS'cpp_type'
p111412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111413
sS'default'
p111414
S'DifferencePostprocessor'
p111415
sS'name'
p111416
S'type'
p111417
sS'required'
p111418
I00
sS'group_name'
p111419
Nsa(dp111420
S'description'
p111421
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111422
sS'cpp_type'
p111423
S'bool'
p111424
sS'default'
p111425
S'0'
p111426
sS'name'
p111427
S'use_displaced_mesh'
p111428
sS'required'
p111429
I00
sS'group_name'
p111430
S'Advanced'
p111431
sa(dp111432
S'description'
p111433
S'First value\n'
p111434
sS'cpp_type'
p111435
S'PostprocessorName'
p111436
sS'default'
p111437
g3
sS'name'
p111438
S'value1'
p111439
sS'required'
p111440
I01
sS'group_name'
p111441
Nsa(dp111442
S'description'
p111443
S'Second value\n'
p111444
sS'cpp_type'
p111445
S'PostprocessorName'
p111446
sS'default'
p111447
g3
sS'name'
p111448
S'value2'
p111449
sS'required'
p111450
I01
sS'group_name'
p111451
NsasS'name'
p111452
S'/UserObjects/DifferencePostprocessor'
p111453
sa(dp111454
S'description'
p111455
S'Manages the list of currently active nucleation sites and adds new sites according to a given probability function.\n'
p111456
sS'subblocks'
p111457
NsS'parameters'
p111458
(lp111459
(dp111460
S'description'
p111461
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111462
sS'cpp_type'
p111463
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111464
sS'default'
p111465
g3
sS'name'
p111466
S'block'
p111467
sS'required'
p111468
I00
sS'group_name'
p111469
Nsa(dp111470
S'description'
p111471
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111472
sS'cpp_type'
p111473
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111474
sS'default'
p111475
g3
sS'name'
p111476
S'control_tags'
p111477
sS'required'
p111478
I00
sS'group_name'
p111479
S'Advanced'
p111480
sa(dp111481
S'description'
p111482
S'Set the enabled status of the MooseObject.\n'
p111483
sS'cpp_type'
p111484
S'bool'
p111485
sS'default'
p111486
S'1'
p111487
sS'name'
p111488
S'enable'
p111489
sS'required'
p111490
I00
sS'group_name'
p111491
S'Advanced'
p111492
sa(dp111493
S'name'
p111494
S'execute_on'
p111495
sS'cpp_type'
p111496
S'MultiMooseEnum'
p111497
sS'default'
p111498
S'TIMESTEP_END'
p111499
sS'description'
p111500
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111501
sS'required'
p111502
I00
sS'options'
p111503
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111504
sS'group_name'
p111505
Nsa(dp111506
S'description'
p111507
S'Time to keep each nucleus active\n'
p111508
sS'cpp_type'
p111509
S'double'
p111510
sS'default'
p111511
g3
sS'name'
p111512
S'hold_time'
p111513
sS'required'
p111514
I01
sS'group_name'
p111515
Nsa(dp111516
S'description'
p111517
S'Probability density for inserting a discrete nucleus\n'
p111518
sS'cpp_type'
p111519
S'MaterialPropertyName'
p111520
sS'default'
p111521
g3
sS'name'
p111522
S'probability'
p111523
sS'required'
p111524
I01
sS'group_name'
p111525
Nsa(dp111526
S'description'
p111527
S'The seed for the master random number generator\n'
p111528
sS'cpp_type'
p111529
S'unsigned int'
p111530
sS'default'
p111531
S'0'
p111532
sS'name'
p111533
S'seed'
p111534
sS'required'
p111535
I00
sS'group_name'
p111536
S'Advanced'
p111537
sa(dp111538
S'description'
p111539
S'Insert a fixed nucleus at a point in the simulation cell\n'
p111540
sS'cpp_type'
p111541
S'libMesh::Point'
p111542
sS'default'
p111543
g3
sS'name'
p111544
S'test'
p111545
sS'required'
p111546
I00
sS'group_name'
p111547
Nsa(dp111548
S'description'
p111549
g3
sS'cpp_type'
p111550
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111551
sS'default'
p111552
S'DiscreteNucleationInserter'
p111553
sS'name'
p111554
S'type'
p111555
sS'required'
p111556
I00
sS'group_name'
p111557
Nsa(dp111558
S'description'
p111559
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111560
sS'cpp_type'
p111561
S'bool'
p111562
sS'default'
p111563
S'0'
p111564
sS'name'
p111565
S'use_displaced_mesh'
p111566
sS'required'
p111567
I00
sS'group_name'
p111568
S'Advanced'
p111569
sasS'name'
p111570
S'/UserObjects/DiscreteNucleationInserter'
p111571
sa(dp111572
S'description'
p111573
S'Generates a spatial smoothed map of all nucleation sites with the data of the DiscreteNucleationInserter for use by the DiscreteNucleation material.\n'
p111574
sS'subblocks'
p111575
NsS'parameters'
p111576
(lp111577
(dp111578
S'description'
p111579
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111580
sS'cpp_type'
p111581
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111582
sS'default'
p111583
g3
sS'name'
p111584
S'block'
p111585
sS'required'
p111586
I00
sS'group_name'
p111587
Nsa(dp111588
S'description'
p111589
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111590
sS'cpp_type'
p111591
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111592
sS'default'
p111593
g3
sS'name'
p111594
S'control_tags'
p111595
sS'required'
p111596
I00
sS'group_name'
p111597
S'Advanced'
p111598
sa(dp111599
S'description'
p111600
S'Set the enabled status of the MooseObject.\n'
p111601
sS'cpp_type'
p111602
S'bool'
p111603
sS'default'
p111604
S'1'
p111605
sS'name'
p111606
S'enable'
p111607
sS'required'
p111608
I00
sS'group_name'
p111609
S'Advanced'
p111610
sa(dp111611
S'name'
p111612
S'execute_on'
p111613
sS'cpp_type'
p111614
S'MultiMooseEnum'
p111615
sS'default'
p111616
S'TIMESTEP_BEGIN'
p111617
sS'description'
p111618
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111619
sS'required'
p111620
I00
sS'options'
p111621
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111622
sS'group_name'
p111623
Nsa(dp111624
S'description'
p111625
S'DiscreteNucleationInserter user object\n'
p111626
sS'cpp_type'
p111627
S'UserObjectName'
p111628
sS'default'
p111629
g3
sS'name'
p111630
S'inserter'
p111631
sS'required'
p111632
I01
sS'group_name'
p111633
Nsa(dp111634
S'description'
p111635
S'Nucleus interface width for smooth nuclei\n'
p111636
sS'cpp_type'
p111637
S'double'
p111638
sS'default'
p111639
S'0'
p111640
sS'name'
p111641
S'int_width'
p111642
sS'required'
p111643
I00
sS'group_name'
p111644
Nsa(dp111645
S'description'
p111646
S'Use the periodicity settings of this variable to populate the grain map\n'
p111647
sS'cpp_type'
p111648
S'std::vector<VariableName>'
p111649
sS'default'
p111650
g3
sS'name'
p111651
S'periodic'
p111652
sS'required'
p111653
I00
sS'group_name'
p111654
Nsa(dp111655
S'description'
p111656
S'Radius for the inserted nuclei\n'
p111657
sS'cpp_type'
p111658
S'double'
p111659
sS'default'
p111660
S'0'
p111661
sS'name'
p111662
S'radius'
p111663
sS'required'
p111664
I00
sS'group_name'
p111665
Nsa(dp111666
S'description'
p111667
S'The seed for the master random number generator\n'
p111668
sS'cpp_type'
p111669
S'unsigned int'
p111670
sS'default'
p111671
S'0'
p111672
sS'name'
p111673
S'seed'
p111674
sS'required'
p111675
I00
sS'group_name'
p111676
S'Advanced'
p111677
sa(dp111678
S'description'
p111679
g3
sS'cpp_type'
p111680
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111681
sS'default'
p111682
S'DiscreteNucleationMap'
p111683
sS'name'
p111684
S'type'
p111685
sS'required'
p111686
I00
sS'group_name'
p111687
Nsa(dp111688
S'description'
p111689
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111690
sS'cpp_type'
p111691
S'bool'
p111692
sS'default'
p111693
S'0'
p111694
sS'name'
p111695
S'use_displaced_mesh'
p111696
sS'required'
p111697
I00
sS'group_name'
p111698
S'Advanced'
p111699
sasS'name'
p111700
S'/UserObjects/DiscreteNucleationMap'
p111701
sa(dp111702
S'description'
p111703
S'Load and manage DREAM.3D EBSD data files for running simulations on reconstructed microstructures.\n'
p111704
sS'subblocks'
p111705
NsS'parameters'
p111706
(lp111707
(dp111708
S'description'
p111709
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111710
sS'cpp_type'
p111711
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111712
sS'default'
p111713
g3
sS'name'
p111714
S'control_tags'
p111715
sS'required'
p111716
I00
sS'group_name'
p111717
S'Advanced'
p111718
sa(dp111719
S'description'
p111720
S'Number of additional custom data columns to read from the EBSD file\n'
p111721
sS'cpp_type'
p111722
S'unsigned int'
p111723
sS'default'
p111724
S'0'
p111725
sS'name'
p111726
S'custom_columns'
p111727
sS'required'
p111728
I00
sS'group_name'
p111729
Nsa(dp111730
S'description'
p111731
S'Set the enabled status of the MooseObject.\n'
p111732
sS'cpp_type'
p111733
S'bool'
p111734
sS'default'
p111735
S'1'
p111736
sS'name'
p111737
S'enable'
p111738
sS'required'
p111739
I00
sS'group_name'
p111740
S'Advanced'
p111741
sa(dp111742
S'name'
p111743
S'execute_on'
p111744
sS'cpp_type'
p111745
S'MultiMooseEnum'
p111746
sS'default'
p111747
S'TIMESTEP_END'
p111748
sS'description'
p111749
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111750
sS'required'
p111751
I00
sS'options'
p111752
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111753
sS'group_name'
p111754
Nsa(dp111755
S'description'
p111756
g3
sS'cpp_type'
p111757
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111758
sS'default'
p111759
S'EBSDReader'
p111760
sS'name'
p111761
S'type'
p111762
sS'required'
p111763
I00
sS'group_name'
p111764
Nsa(dp111765
S'description'
p111766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111767
sS'cpp_type'
p111768
S'bool'
p111769
sS'default'
p111770
S'0'
p111771
sS'name'
p111772
S'use_displaced_mesh'
p111773
sS'required'
p111774
I00
sS'group_name'
p111775
S'Advanced'
p111776
sasS'name'
p111777
S'/UserObjects/EBSDReader'
p111778
sa(dp111779
S'description'
p111780
g3
sS'subblocks'
p111781
NsS'parameters'
p111782
(lp111783
(dp111784
S'description'
p111785
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111786
sS'cpp_type'
p111787
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111788
sS'default'
p111789
g3
sS'name'
p111790
S'block'
p111791
sS'required'
p111792
I00
sS'group_name'
p111793
Nsa(dp111794
S'description'
p111795
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111796
sS'cpp_type'
p111797
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111798
sS'default'
p111799
g3
sS'name'
p111800
S'control_tags'
p111801
sS'required'
p111802
I00
sS'group_name'
p111803
S'Advanced'
p111804
sa(dp111805
S'description'
p111806
S'Set the enabled status of the MooseObject.\n'
p111807
sS'cpp_type'
p111808
S'bool'
p111809
sS'default'
p111810
S'1'
p111811
sS'name'
p111812
S'enable'
p111813
sS'required'
p111814
I00
sS'group_name'
p111815
S'Advanced'
p111816
sa(dp111817
S'name'
p111818
S'execute_on'
p111819
sS'cpp_type'
p111820
S'MultiMooseEnum'
p111821
sS'default'
p111822
S'TIMESTEP_END'
p111823
sS'description'
p111824
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111825
sS'required'
p111826
I00
sS'options'
p111827
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111828
sS'group_name'
p111829
Nsa(dp111830
S'description'
p111831
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111832
sS'cpp_type'
p111833
S'std::vector<OutputName, std::allocator<OutputName> >'
p111834
sS'default'
p111835
g3
sS'name'
p111836
S'outputs'
p111837
sS'required'
p111838
I00
sS'group_name'
p111839
S'Advanced'
p111840
sa(dp111841
S'description'
p111842
S'The seed for the master random number generator\n'
p111843
sS'cpp_type'
p111844
S'unsigned int'
p111845
sS'default'
p111846
S'0'
p111847
sS'name'
p111848
S'seed'
p111849
sS'required'
p111850
I00
sS'group_name'
p111851
S'Advanced'
p111852
sa(dp111853
S'description'
p111854
g3
sS'cpp_type'
p111855
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111856
sS'default'
p111857
S'ElementAverageTimeDerivative'
p111858
sS'name'
p111859
S'type'
p111860
sS'required'
p111861
I00
sS'group_name'
p111862
Nsa(dp111863
S'description'
p111864
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111865
sS'cpp_type'
p111866
S'bool'
p111867
sS'default'
p111868
S'0'
p111869
sS'name'
p111870
S'use_displaced_mesh'
p111871
sS'required'
p111872
I00
sS'group_name'
p111873
S'Advanced'
p111874
sa(dp111875
S'description'
p111876
S'The name of the variable that this object operates on\n'
p111877
sS'cpp_type'
p111878
S'std::vector<VariableName>'
p111879
sS'default'
p111880
g3
sS'name'
p111881
S'variable'
p111882
sS'required'
p111883
I01
sS'group_name'
p111884
NsasS'name'
p111885
S'/UserObjects/ElementAverageTimeDerivative'
p111886
sa(dp111887
S'description'
p111888
g3
sS'subblocks'
p111889
NsS'parameters'
p111890
(lp111891
(dp111892
S'description'
p111893
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111894
sS'cpp_type'
p111895
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111896
sS'default'
p111897
g3
sS'name'
p111898
S'block'
p111899
sS'required'
p111900
I00
sS'group_name'
p111901
Nsa(dp111902
S'description'
p111903
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111904
sS'cpp_type'
p111905
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111906
sS'default'
p111907
g3
sS'name'
p111908
S'control_tags'
p111909
sS'required'
p111910
I00
sS'group_name'
p111911
S'Advanced'
p111912
sa(dp111913
S'description'
p111914
S'Set the enabled status of the MooseObject.\n'
p111915
sS'cpp_type'
p111916
S'bool'
p111917
sS'default'
p111918
S'1'
p111919
sS'name'
p111920
S'enable'
p111921
sS'required'
p111922
I00
sS'group_name'
p111923
S'Advanced'
p111924
sa(dp111925
S'name'
p111926
S'execute_on'
p111927
sS'cpp_type'
p111928
S'MultiMooseEnum'
p111929
sS'default'
p111930
S'TIMESTEP_END'
p111931
sS'description'
p111932
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111933
sS'required'
p111934
I00
sS'options'
p111935
S'none initial linear nonlinear timestep_end timestep_begin custom'
p111936
sS'group_name'
p111937
Nsa(dp111938
S'description'
p111939
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111940
sS'cpp_type'
p111941
S'std::vector<OutputName, std::allocator<OutputName> >'
p111942
sS'default'
p111943
g3
sS'name'
p111944
S'outputs'
p111945
sS'required'
p111946
I00
sS'group_name'
p111947
S'Advanced'
p111948
sa(dp111949
S'description'
p111950
S'The seed for the master random number generator\n'
p111951
sS'cpp_type'
p111952
S'unsigned int'
p111953
sS'default'
p111954
S'0'
p111955
sS'name'
p111956
S'seed'
p111957
sS'required'
p111958
I00
sS'group_name'
p111959
S'Advanced'
p111960
sa(dp111961
S'description'
p111962
g3
sS'cpp_type'
p111963
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111964
sS'default'
p111965
S'ElementAverageValue'
p111966
sS'name'
p111967
S'type'
p111968
sS'required'
p111969
I00
sS'group_name'
p111970
Nsa(dp111971
S'description'
p111972
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111973
sS'cpp_type'
p111974
S'bool'
p111975
sS'default'
p111976
S'0'
p111977
sS'name'
p111978
S'use_displaced_mesh'
p111979
sS'required'
p111980
I00
sS'group_name'
p111981
S'Advanced'
p111982
sa(dp111983
S'description'
p111984
S'The name of the variable that this object operates on\n'
p111985
sS'cpp_type'
p111986
S'std::vector<VariableName>'
p111987
sS'default'
p111988
g3
sS'name'
p111989
S'variable'
p111990
sS'required'
p111991
I01
sS'group_name'
p111992
NsasS'name'
p111993
S'/UserObjects/ElementAverageValue'
p111994
sa(dp111995
S'description'
p111996
g3
sS'subblocks'
p111997
NsS'parameters'
p111998
(lp111999
(dp112000
S'description'
p112001
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112002
sS'cpp_type'
p112003
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112004
sS'default'
p112005
g3
sS'name'
p112006
S'block'
p112007
sS'required'
p112008
I00
sS'group_name'
p112009
Nsa(dp112010
S'description'
p112011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112012
sS'cpp_type'
p112013
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112014
sS'default'
p112015
g3
sS'name'
p112016
S'control_tags'
p112017
sS'required'
p112018
I00
sS'group_name'
p112019
S'Advanced'
p112020
sa(dp112021
S'description'
p112022
S'Set the enabled status of the MooseObject.\n'
p112023
sS'cpp_type'
p112024
S'bool'
p112025
sS'default'
p112026
S'1'
p112027
sS'name'
p112028
S'enable'
p112029
sS'required'
p112030
I00
sS'group_name'
p112031
S'Advanced'
p112032
sa(dp112033
S'name'
p112034
S'execute_on'
p112035
sS'cpp_type'
p112036
S'MultiMooseEnum'
p112037
sS'default'
p112038
S'TIMESTEP_END'
p112039
sS'description'
p112040
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112041
sS'required'
p112042
I00
sS'options'
p112043
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112044
sS'group_name'
p112045
Nsa(dp112046
S'description'
p112047
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112048
sS'cpp_type'
p112049
S'std::vector<OutputName, std::allocator<OutputName> >'
p112050
sS'default'
p112051
g3
sS'name'
p112052
S'outputs'
p112053
sS'required'
p112054
I00
sS'group_name'
p112055
S'Advanced'
p112056
sa(dp112057
S'description'
p112058
S'The seed for the master random number generator\n'
p112059
sS'cpp_type'
p112060
S'unsigned int'
p112061
sS'default'
p112062
S'0'
p112063
sS'name'
p112064
S'seed'
p112065
sS'required'
p112066
I00
sS'group_name'
p112067
S'Advanced'
p112068
sa(dp112069
S'description'
p112070
g3
sS'cpp_type'
p112071
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112072
sS'default'
p112073
S'ElementExtremeValue'
p112074
sS'name'
p112075
S'type'
p112076
sS'required'
p112077
I00
sS'group_name'
p112078
Nsa(dp112079
S'description'
p112080
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112081
sS'cpp_type'
p112082
S'bool'
p112083
sS'default'
p112084
S'0'
p112085
sS'name'
p112086
S'use_displaced_mesh'
p112087
sS'required'
p112088
I00
sS'group_name'
p112089
S'Advanced'
p112090
sa(dp112091
S'name'
p112092
S'value_type'
p112093
sS'cpp_type'
p112094
S'MooseEnum'
p112095
sS'default'
p112096
S'max'
p112097
sS'description'
p112098
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p112099
sS'required'
p112100
I00
sS'options'
p112101
S'max min'
p112102
sS'group_name'
p112103
Nsa(dp112104
S'description'
p112105
S'The name of the variable that this postprocessor operates on\n'
p112106
sS'cpp_type'
p112107
S'std::vector<VariableName>'
p112108
sS'default'
p112109
g3
sS'name'
p112110
S'variable'
p112111
sS'required'
p112112
I01
sS'group_name'
p112113
NsasS'name'
p112114
S'/UserObjects/ElementExtremeValue'
p112115
sa(dp112116
S'description'
p112117
g3
sS'subblocks'
p112118
NsS'parameters'
p112119
(lp112120
(dp112121
S'description'
p112122
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112123
sS'cpp_type'
p112124
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112125
sS'default'
p112126
g3
sS'name'
p112127
S'block'
p112128
sS'required'
p112129
I00
sS'group_name'
p112130
Nsa(dp112131
S'description'
p112132
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112133
sS'cpp_type'
p112134
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112135
sS'default'
p112136
g3
sS'name'
p112137
S'control_tags'
p112138
sS'required'
p112139
I00
sS'group_name'
p112140
S'Advanced'
p112141
sa(dp112142
S'description'
p112143
S'Set the enabled status of the MooseObject.\n'
p112144
sS'cpp_type'
p112145
S'bool'
p112146
sS'default'
p112147
S'1'
p112148
sS'name'
p112149
S'enable'
p112150
sS'required'
p112151
I00
sS'group_name'
p112152
S'Advanced'
p112153
sa(dp112154
S'name'
p112155
S'execute_on'
p112156
sS'cpp_type'
p112157
S'MultiMooseEnum'
p112158
sS'default'
p112159
S'TIMESTEP_END'
p112160
sS'description'
p112161
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112162
sS'required'
p112163
I00
sS'options'
p112164
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112165
sS'group_name'
p112166
Nsa(dp112167
S'description'
p112168
S'The analytic solution to compare against\n'
p112169
sS'cpp_type'
p112170
S'FunctionName'
p112171
sS'default'
p112172
g3
sS'name'
p112173
S'function'
p112174
sS'required'
p112175
I01
sS'group_name'
p112176
Nsa(dp112177
S'description'
p112178
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112179
sS'cpp_type'
p112180
S'std::vector<OutputName, std::allocator<OutputName> >'
p112181
sS'default'
p112182
g3
sS'name'
p112183
S'outputs'
p112184
sS'required'
p112185
I00
sS'group_name'
p112186
S'Advanced'
p112187
sa(dp112188
S'description'
p112189
S'The exponent used in the norm.\n'
p112190
sS'cpp_type'
p112191
S'double'
p112192
sS'default'
p112193
S'2'
p112194
sS'name'
p112195
S'p'
p112196
sS'required'
p112197
I00
sS'group_name'
p112198
Nsa(dp112199
S'description'
p112200
S'The seed for the master random number generator\n'
p112201
sS'cpp_type'
p112202
S'unsigned int'
p112203
sS'default'
p112204
S'0'
p112205
sS'name'
p112206
S'seed'
p112207
sS'required'
p112208
I00
sS'group_name'
p112209
S'Advanced'
p112210
sa(dp112211
S'description'
p112212
g3
sS'cpp_type'
p112213
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112214
sS'default'
p112215
S'ElementH1Error'
p112216
sS'name'
p112217
S'type'
p112218
sS'required'
p112219
I00
sS'group_name'
p112220
Nsa(dp112221
S'description'
p112222
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112223
sS'cpp_type'
p112224
S'bool'
p112225
sS'default'
p112226
S'0'
p112227
sS'name'
p112228
S'use_displaced_mesh'
p112229
sS'required'
p112230
I00
sS'group_name'
p112231
S'Advanced'
p112232
sa(dp112233
S'description'
p112234
S'The name of the variable that this object operates on\n'
p112235
sS'cpp_type'
p112236
S'std::vector<VariableName>'
p112237
sS'default'
p112238
g3
sS'name'
p112239
S'variable'
p112240
sS'required'
p112241
I01
sS'group_name'
p112242
NsasS'name'
p112243
S'/UserObjects/ElementH1Error'
p112244
sa(dp112245
S'description'
p112246
g3
sS'subblocks'
p112247
NsS'parameters'
p112248
(lp112249
(dp112250
S'description'
p112251
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112252
sS'cpp_type'
p112253
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112254
sS'default'
p112255
g3
sS'name'
p112256
S'block'
p112257
sS'required'
p112258
I00
sS'group_name'
p112259
Nsa(dp112260
S'description'
p112261
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112262
sS'cpp_type'
p112263
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112264
sS'default'
p112265
g3
sS'name'
p112266
S'control_tags'
p112267
sS'required'
p112268
I00
sS'group_name'
p112269
S'Advanced'
p112270
sa(dp112271
S'description'
p112272
S'Set the enabled status of the MooseObject.\n'
p112273
sS'cpp_type'
p112274
S'bool'
p112275
sS'default'
p112276
S'1'
p112277
sS'name'
p112278
S'enable'
p112279
sS'required'
p112280
I00
sS'group_name'
p112281
S'Advanced'
p112282
sa(dp112283
S'name'
p112284
S'execute_on'
p112285
sS'cpp_type'
p112286
S'MultiMooseEnum'
p112287
sS'default'
p112288
S'TIMESTEP_END'
p112289
sS'description'
p112290
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112291
sS'required'
p112292
I00
sS'options'
p112293
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112294
sS'group_name'
p112295
Nsa(dp112296
S'description'
p112297
S'The analytic solution to compare against\n'
p112298
sS'cpp_type'
p112299
S'FunctionName'
p112300
sS'default'
p112301
g3
sS'name'
p112302
S'function'
p112303
sS'required'
p112304
I01
sS'group_name'
p112305
Nsa(dp112306
S'description'
p112307
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112308
sS'cpp_type'
p112309
S'std::vector<OutputName, std::allocator<OutputName> >'
p112310
sS'default'
p112311
g3
sS'name'
p112312
S'outputs'
p112313
sS'required'
p112314
I00
sS'group_name'
p112315
S'Advanced'
p112316
sa(dp112317
S'description'
p112318
S'The seed for the master random number generator\n'
p112319
sS'cpp_type'
p112320
S'unsigned int'
p112321
sS'default'
p112322
S'0'
p112323
sS'name'
p112324
S'seed'
p112325
sS'required'
p112326
I00
sS'group_name'
p112327
S'Advanced'
p112328
sa(dp112329
S'description'
p112330
g3
sS'cpp_type'
p112331
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112332
sS'default'
p112333
S'ElementH1SemiError'
p112334
sS'name'
p112335
S'type'
p112336
sS'required'
p112337
I00
sS'group_name'
p112338
Nsa(dp112339
S'description'
p112340
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112341
sS'cpp_type'
p112342
S'bool'
p112343
sS'default'
p112344
S'0'
p112345
sS'name'
p112346
S'use_displaced_mesh'
p112347
sS'required'
p112348
I00
sS'group_name'
p112349
S'Advanced'
p112350
sa(dp112351
S'description'
p112352
S'The name of the variable that this object operates on\n'
p112353
sS'cpp_type'
p112354
S'std::vector<VariableName>'
p112355
sS'default'
p112356
g3
sS'name'
p112357
S'variable'
p112358
sS'required'
p112359
I01
sS'group_name'
p112360
NsasS'name'
p112361
S'/UserObjects/ElementH1SemiError'
p112362
sa(dp112363
S'description'
p112364
g3
sS'subblocks'
p112365
NsS'parameters'
p112366
(lp112367
(dp112368
S'description'
p112369
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112370
sS'cpp_type'
p112371
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112372
sS'default'
p112373
g3
sS'name'
p112374
S'block'
p112375
sS'required'
p112376
I00
sS'group_name'
p112377
Nsa(dp112378
S'description'
p112379
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112380
sS'cpp_type'
p112381
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112382
sS'default'
p112383
g3
sS'name'
p112384
S'control_tags'
p112385
sS'required'
p112386
I00
sS'group_name'
p112387
S'Advanced'
p112388
sa(dp112389
S'description'
p112390
S'Set the enabled status of the MooseObject.\n'
p112391
sS'cpp_type'
p112392
S'bool'
p112393
sS'default'
p112394
S'1'
p112395
sS'name'
p112396
S'enable'
p112397
sS'required'
p112398
I00
sS'group_name'
p112399
S'Advanced'
p112400
sa(dp112401
S'name'
p112402
S'execute_on'
p112403
sS'cpp_type'
p112404
S'MultiMooseEnum'
p112405
sS'default'
p112406
S'TIMESTEP_END'
p112407
sS'description'
p112408
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112409
sS'required'
p112410
I00
sS'options'
p112411
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112412
sS'group_name'
p112413
Nsa(dp112414
S'description'
p112415
S'The name of the material property\n'
p112416
sS'cpp_type'
p112417
S'MaterialPropertyName'
p112418
sS'default'
p112419
g3
sS'name'
p112420
S'mat_prop'
p112421
sS'required'
p112422
I01
sS'group_name'
p112423
Nsa(dp112424
S'description'
p112425
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112426
sS'cpp_type'
p112427
S'std::vector<OutputName, std::allocator<OutputName> >'
p112428
sS'default'
p112429
g3
sS'name'
p112430
S'outputs'
p112431
sS'required'
p112432
I00
sS'group_name'
p112433
S'Advanced'
p112434
sa(dp112435
S'description'
p112436
S'The seed for the master random number generator\n'
p112437
sS'cpp_type'
p112438
S'unsigned int'
p112439
sS'default'
p112440
S'0'
p112441
sS'name'
p112442
S'seed'
p112443
sS'required'
p112444
I00
sS'group_name'
p112445
S'Advanced'
p112446
sa(dp112447
S'description'
p112448
g3
sS'cpp_type'
p112449
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112450
sS'default'
p112451
S'ElementIntegralMaterialProperty'
p112452
sS'name'
p112453
S'type'
p112454
sS'required'
p112455
I00
sS'group_name'
p112456
Nsa(dp112457
S'description'
p112458
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112459
sS'cpp_type'
p112460
S'bool'
p112461
sS'default'
p112462
S'0'
p112463
sS'name'
p112464
S'use_displaced_mesh'
p112465
sS'required'
p112466
I00
sS'group_name'
p112467
S'Advanced'
p112468
sasS'name'
p112469
S'/UserObjects/ElementIntegralMaterialProperty'
p112470
sa(dp112471
S'description'
p112472
g3
sS'subblocks'
p112473
NsS'parameters'
p112474
(lp112475
(dp112476
S'description'
p112477
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112478
sS'cpp_type'
p112479
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112480
sS'default'
p112481
g3
sS'name'
p112482
S'block'
p112483
sS'required'
p112484
I00
sS'group_name'
p112485
Nsa(dp112486
S'description'
p112487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112488
sS'cpp_type'
p112489
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112490
sS'default'
p112491
g3
sS'name'
p112492
S'control_tags'
p112493
sS'required'
p112494
I00
sS'group_name'
p112495
S'Advanced'
p112496
sa(dp112497
S'description'
p112498
S'Set the enabled status of the MooseObject.\n'
p112499
sS'cpp_type'
p112500
S'bool'
p112501
sS'default'
p112502
S'1'
p112503
sS'name'
p112504
S'enable'
p112505
sS'required'
p112506
I00
sS'group_name'
p112507
S'Advanced'
p112508
sa(dp112509
S'name'
p112510
S'execute_on'
p112511
sS'cpp_type'
p112512
S'MultiMooseEnum'
p112513
sS'default'
p112514
S'TIMESTEP_END'
p112515
sS'description'
p112516
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112517
sS'required'
p112518
I00
sS'options'
p112519
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112520
sS'group_name'
p112521
Nsa(dp112522
S'description'
p112523
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112524
sS'cpp_type'
p112525
S'std::vector<OutputName, std::allocator<OutputName> >'
p112526
sS'default'
p112527
g3
sS'name'
p112528
S'outputs'
p112529
sS'required'
p112530
I00
sS'group_name'
p112531
S'Advanced'
p112532
sa(dp112533
S'description'
p112534
S'The seed for the master random number generator\n'
p112535
sS'cpp_type'
p112536
S'unsigned int'
p112537
sS'default'
p112538
S'0'
p112539
sS'name'
p112540
S'seed'
p112541
sS'required'
p112542
I00
sS'group_name'
p112543
S'Advanced'
p112544
sa(dp112545
S'description'
p112546
g3
sS'cpp_type'
p112547
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112548
sS'default'
p112549
S'ElementIntegralVariablePostprocessor'
p112550
sS'name'
p112551
S'type'
p112552
sS'required'
p112553
I00
sS'group_name'
p112554
Nsa(dp112555
S'description'
p112556
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112557
sS'cpp_type'
p112558
S'bool'
p112559
sS'default'
p112560
S'0'
p112561
sS'name'
p112562
S'use_displaced_mesh'
p112563
sS'required'
p112564
I00
sS'group_name'
p112565
S'Advanced'
p112566
sa(dp112567
S'description'
p112568
S'The name of the variable that this object operates on\n'
p112569
sS'cpp_type'
p112570
S'std::vector<VariableName>'
p112571
sS'default'
p112572
g3
sS'name'
p112573
S'variable'
p112574
sS'required'
p112575
I01
sS'group_name'
p112576
NsasS'name'
p112577
S'/UserObjects/ElementIntegralVariablePostprocessor'
p112578
sa(dp112579
S'description'
p112580
g3
sS'subblocks'
p112581
NsS'parameters'
p112582
(lp112583
(dp112584
S'description'
p112585
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112586
sS'cpp_type'
p112587
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112588
sS'default'
p112589
g3
sS'name'
p112590
S'block'
p112591
sS'required'
p112592
I00
sS'group_name'
p112593
Nsa(dp112594
S'description'
p112595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112596
sS'cpp_type'
p112597
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112598
sS'default'
p112599
g3
sS'name'
p112600
S'control_tags'
p112601
sS'required'
p112602
I00
sS'group_name'
p112603
S'Advanced'
p112604
sa(dp112605
S'description'
p112606
S'Set the enabled status of the MooseObject.\n'
p112607
sS'cpp_type'
p112608
S'bool'
p112609
sS'default'
p112610
S'1'
p112611
sS'name'
p112612
S'enable'
p112613
sS'required'
p112614
I00
sS'group_name'
p112615
S'Advanced'
p112616
sa(dp112617
S'name'
p112618
S'execute_on'
p112619
sS'cpp_type'
p112620
S'MultiMooseEnum'
p112621
sS'default'
p112622
S'TIMESTEP_END'
p112623
sS'description'
p112624
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112625
sS'required'
p112626
I00
sS'options'
p112627
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112628
sS'group_name'
p112629
Nsa(dp112630
S'description'
p112631
S'The seed for the master random number generator\n'
p112632
sS'cpp_type'
p112633
S'unsigned int'
p112634
sS'default'
p112635
S'0'
p112636
sS'name'
p112637
S'seed'
p112638
sS'required'
p112639
I00
sS'group_name'
p112640
S'Advanced'
p112641
sa(dp112642
S'description'
p112643
g3
sS'cpp_type'
p112644
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112645
sS'default'
p112646
S'ElementIntegralVariableUserObject'
p112647
sS'name'
p112648
S'type'
p112649
sS'required'
p112650
I00
sS'group_name'
p112651
Nsa(dp112652
S'description'
p112653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112654
sS'cpp_type'
p112655
S'bool'
p112656
sS'default'
p112657
S'0'
p112658
sS'name'
p112659
S'use_displaced_mesh'
p112660
sS'required'
p112661
I00
sS'group_name'
p112662
S'Advanced'
p112663
sa(dp112664
S'description'
p112665
S'The name of the variable that this object operates on\n'
p112666
sS'cpp_type'
p112667
S'std::vector<VariableName>'
p112668
sS'default'
p112669
g3
sS'name'
p112670
S'variable'
p112671
sS'required'
p112672
I01
sS'group_name'
p112673
NsasS'name'
p112674
S'/UserObjects/ElementIntegralVariableUserObject'
p112675
sa(dp112676
S'description'
p112677
g3
sS'subblocks'
p112678
NsS'parameters'
p112679
(lp112680
(dp112681
S'description'
p112682
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112683
sS'cpp_type'
p112684
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112685
sS'default'
p112686
g3
sS'name'
p112687
S'block'
p112688
sS'required'
p112689
I00
sS'group_name'
p112690
Nsa(dp112691
S'description'
p112692
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112693
sS'cpp_type'
p112694
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112695
sS'default'
p112696
g3
sS'name'
p112697
S'control_tags'
p112698
sS'required'
p112699
I00
sS'group_name'
p112700
S'Advanced'
p112701
sa(dp112702
S'description'
p112703
S'Set the enabled status of the MooseObject.\n'
p112704
sS'cpp_type'
p112705
S'bool'
p112706
sS'default'
p112707
S'1'
p112708
sS'name'
p112709
S'enable'
p112710
sS'required'
p112711
I00
sS'group_name'
p112712
S'Advanced'
p112713
sa(dp112714
S'name'
p112715
S'execute_on'
p112716
sS'cpp_type'
p112717
S'MultiMooseEnum'
p112718
sS'default'
p112719
S'TIMESTEP_END'
p112720
sS'description'
p112721
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112722
sS'required'
p112723
I00
sS'options'
p112724
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112725
sS'group_name'
p112726
Nsa(dp112727
S'description'
p112728
S'The variable to compare to\n'
p112729
sS'cpp_type'
p112730
S'std::vector<VariableName>'
p112731
sS'default'
p112732
g3
sS'name'
p112733
S'other_variable'
p112734
sS'required'
p112735
I01
sS'group_name'
p112736
Nsa(dp112737
S'description'
p112738
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112739
sS'cpp_type'
p112740
S'std::vector<OutputName, std::allocator<OutputName> >'
p112741
sS'default'
p112742
g3
sS'name'
p112743
S'outputs'
p112744
sS'required'
p112745
I00
sS'group_name'
p112746
S'Advanced'
p112747
sa(dp112748
S'description'
p112749
S'The seed for the master random number generator\n'
p112750
sS'cpp_type'
p112751
S'unsigned int'
p112752
sS'default'
p112753
S'0'
p112754
sS'name'
p112755
S'seed'
p112756
sS'required'
p112757
I00
sS'group_name'
p112758
S'Advanced'
p112759
sa(dp112760
S'description'
p112761
g3
sS'cpp_type'
p112762
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112763
sS'default'
p112764
S'ElementL2Difference'
p112765
sS'name'
p112766
S'type'
p112767
sS'required'
p112768
I00
sS'group_name'
p112769
Nsa(dp112770
S'description'
p112771
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112772
sS'cpp_type'
p112773
S'bool'
p112774
sS'default'
p112775
S'0'
p112776
sS'name'
p112777
S'use_displaced_mesh'
p112778
sS'required'
p112779
I00
sS'group_name'
p112780
S'Advanced'
p112781
sa(dp112782
S'description'
p112783
S'The name of the variable that this object operates on\n'
p112784
sS'cpp_type'
p112785
S'std::vector<VariableName>'
p112786
sS'default'
p112787
g3
sS'name'
p112788
S'variable'
p112789
sS'required'
p112790
I01
sS'group_name'
p112791
NsasS'name'
p112792
S'/UserObjects/ElementL2Difference'
p112793
sa(dp112794
S'description'
p112795
g3
sS'subblocks'
p112796
NsS'parameters'
p112797
(lp112798
(dp112799
S'description'
p112800
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112801
sS'cpp_type'
p112802
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112803
sS'default'
p112804
g3
sS'name'
p112805
S'block'
p112806
sS'required'
p112807
I00
sS'group_name'
p112808
Nsa(dp112809
S'description'
p112810
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112811
sS'cpp_type'
p112812
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112813
sS'default'
p112814
g3
sS'name'
p112815
S'control_tags'
p112816
sS'required'
p112817
I00
sS'group_name'
p112818
S'Advanced'
p112819
sa(dp112820
S'description'
p112821
S'Set the enabled status of the MooseObject.\n'
p112822
sS'cpp_type'
p112823
S'bool'
p112824
sS'default'
p112825
S'1'
p112826
sS'name'
p112827
S'enable'
p112828
sS'required'
p112829
I00
sS'group_name'
p112830
S'Advanced'
p112831
sa(dp112832
S'name'
p112833
S'execute_on'
p112834
sS'cpp_type'
p112835
S'MultiMooseEnum'
p112836
sS'default'
p112837
S'TIMESTEP_END'
p112838
sS'description'
p112839
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112840
sS'required'
p112841
I00
sS'options'
p112842
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112843
sS'group_name'
p112844
Nsa(dp112845
S'description'
p112846
S'The analytic solution to compare against\n'
p112847
sS'cpp_type'
p112848
S'FunctionName'
p112849
sS'default'
p112850
g3
sS'name'
p112851
S'function'
p112852
sS'required'
p112853
I01
sS'group_name'
p112854
Nsa(dp112855
S'description'
p112856
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112857
sS'cpp_type'
p112858
S'std::vector<OutputName, std::allocator<OutputName> >'
p112859
sS'default'
p112860
g3
sS'name'
p112861
S'outputs'
p112862
sS'required'
p112863
I00
sS'group_name'
p112864
S'Advanced'
p112865
sa(dp112866
S'description'
p112867
S'The seed for the master random number generator\n'
p112868
sS'cpp_type'
p112869
S'unsigned int'
p112870
sS'default'
p112871
S'0'
p112872
sS'name'
p112873
S'seed'
p112874
sS'required'
p112875
I00
sS'group_name'
p112876
S'Advanced'
p112877
sa(dp112878
S'description'
p112879
g3
sS'cpp_type'
p112880
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112881
sS'default'
p112882
S'ElementL2Error'
p112883
sS'name'
p112884
S'type'
p112885
sS'required'
p112886
I00
sS'group_name'
p112887
Nsa(dp112888
S'description'
p112889
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112890
sS'cpp_type'
p112891
S'bool'
p112892
sS'default'
p112893
S'0'
p112894
sS'name'
p112895
S'use_displaced_mesh'
p112896
sS'required'
p112897
I00
sS'group_name'
p112898
S'Advanced'
p112899
sa(dp112900
S'description'
p112901
S'The name of the variable that this object operates on\n'
p112902
sS'cpp_type'
p112903
S'std::vector<VariableName>'
p112904
sS'default'
p112905
g3
sS'name'
p112906
S'variable'
p112907
sS'required'
p112908
I01
sS'group_name'
p112909
NsasS'name'
p112910
S'/UserObjects/ElementL2Error'
p112911
sa(dp112912
S'description'
p112913
g3
sS'subblocks'
p112914
NsS'parameters'
p112915
(lp112916
(dp112917
S'description'
p112918
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112919
sS'cpp_type'
p112920
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112921
sS'default'
p112922
g3
sS'name'
p112923
S'block'
p112924
sS'required'
p112925
I00
sS'group_name'
p112926
Nsa(dp112927
S'description'
p112928
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112929
sS'cpp_type'
p112930
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112931
sS'default'
p112932
g3
sS'name'
p112933
S'control_tags'
p112934
sS'required'
p112935
I00
sS'group_name'
p112936
S'Advanced'
p112937
sa(dp112938
S'description'
p112939
S'Set the enabled status of the MooseObject.\n'
p112940
sS'cpp_type'
p112941
S'bool'
p112942
sS'default'
p112943
S'1'
p112944
sS'name'
p112945
S'enable'
p112946
sS'required'
p112947
I00
sS'group_name'
p112948
S'Advanced'
p112949
sa(dp112950
S'name'
p112951
S'execute_on'
p112952
sS'cpp_type'
p112953
S'MultiMooseEnum'
p112954
sS'default'
p112955
S'TIMESTEP_END'
p112956
sS'description'
p112957
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112958
sS'required'
p112959
I00
sS'options'
p112960
S'none initial linear nonlinear timestep_end timestep_begin custom'
p112961
sS'group_name'
p112962
Nsa(dp112963
S'description'
p112964
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112965
sS'cpp_type'
p112966
S'std::vector<OutputName, std::allocator<OutputName> >'
p112967
sS'default'
p112968
g3
sS'name'
p112969
S'outputs'
p112970
sS'required'
p112971
I00
sS'group_name'
p112972
S'Advanced'
p112973
sa(dp112974
S'description'
p112975
S'The seed for the master random number generator\n'
p112976
sS'cpp_type'
p112977
S'unsigned int'
p112978
sS'default'
p112979
S'0'
p112980
sS'name'
p112981
S'seed'
p112982
sS'required'
p112983
I00
sS'group_name'
p112984
S'Advanced'
p112985
sa(dp112986
S'description'
p112987
g3
sS'cpp_type'
p112988
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112989
sS'default'
p112990
S'ElementL2Norm'
p112991
sS'name'
p112992
S'type'
p112993
sS'required'
p112994
I00
sS'group_name'
p112995
Nsa(dp112996
S'description'
p112997
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112998
sS'cpp_type'
p112999
S'bool'
p113000
sS'default'
p113001
S'0'
p113002
sS'name'
p113003
S'use_displaced_mesh'
p113004
sS'required'
p113005
I00
sS'group_name'
p113006
S'Advanced'
p113007
sa(dp113008
S'description'
p113009
S'The name of the variable that this object operates on\n'
p113010
sS'cpp_type'
p113011
S'std::vector<VariableName>'
p113012
sS'default'
p113013
g3
sS'name'
p113014
S'variable'
p113015
sS'required'
p113016
I01
sS'group_name'
p113017
NsasS'name'
p113018
S'/UserObjects/ElementL2Norm'
p113019
sa(dp113020
S'description'
p113021
S'User Object to read property data from an external file and assign to elements: Works only for Rectangular geometry (2D-3D)\n'
p113022
sS'subblocks'
p113023
NsS'parameters'
p113024
(lp113025
(dp113026
S'description'
p113027
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113028
sS'cpp_type'
p113029
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113030
sS'default'
p113031
g3
sS'name'
p113032
S'control_tags'
p113033
sS'required'
p113034
I00
sS'group_name'
p113035
S'Advanced'
p113036
sa(dp113037
S'description'
p113038
S'Set the enabled status of the MooseObject.\n'
p113039
sS'cpp_type'
p113040
S'bool'
p113041
sS'default'
p113042
S'1'
p113043
sS'name'
p113044
S'enable'
p113045
sS'required'
p113046
I00
sS'group_name'
p113047
S'Advanced'
p113048
sa(dp113049
S'name'
p113050
S'execute_on'
p113051
sS'cpp_type'
p113052
S'MultiMooseEnum'
p113053
sS'default'
p113054
S'TIMESTEP_END'
p113055
sS'description'
p113056
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113057
sS'required'
p113058
I00
sS'options'
p113059
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113060
sS'group_name'
p113061
Nsa(dp113062
S'description'
p113063
S'Number of grains\n'
p113064
sS'cpp_type'
p113065
S'unsigned int'
p113066
sS'default'
p113067
S'0'
p113068
sS'name'
p113069
S'ngrain'
p113070
sS'required'
p113071
I00
sS'group_name'
p113072
Nsa(dp113073
S'description'
p113074
S'Number of tabulated property values\n'
p113075
sS'cpp_type'
p113076
S'unsigned int'
p113077
sS'default'
p113078
g3
sS'name'
p113079
S'nprop'
p113080
sS'required'
p113081
I01
sS'group_name'
p113082
Nsa(dp113083
S'description'
p113084
S'Name of the property file name\n'
p113085
sS'cpp_type'
p113086
S'FileName'
p113087
sS'default'
p113088
g3
sS'name'
p113089
S'prop_file_name'
p113090
sS'required'
p113091
I00
sS'group_name'
p113092
Nsa(dp113093
S'description'
p113094
S'random seed\n'
p113095
sS'cpp_type'
p113096
S'unsigned int'
p113097
sS'default'
p113098
S'2000'
p113099
sS'name'
p113100
S'rand_seed'
p113101
sS'required'
p113102
I00
sS'group_name'
p113103
Nsa(dp113104
S'name'
p113105
S'read_type'
p113106
sS'cpp_type'
p113107
S'MooseEnum'
p113108
sS'default'
p113109
S'none'
p113110
sS'description'
p113111
S'Type of property distribution: element:element by element property variation; grain:voronoi grain structure\n'
p113112
sS'required'
p113113
I00
sS'options'
p113114
S'element grain none'
p113115
sS'group_name'
p113116
Nsa(dp113117
S'name'
p113118
S'rve_type'
p113119
sS'cpp_type'
p113120
S'MooseEnum'
p113121
sS'default'
p113122
S'none'
p113123
sS'description'
p113124
S'Periodic or non-periodic grain distribution: Default is non-periodic\n'
p113125
sS'required'
p113126
I00
sS'options'
p113127
S'periodic none'
p113128
sS'group_name'
p113129
Nsa(dp113130
S'description'
p113131
g3
sS'cpp_type'
p113132
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113133
sS'default'
p113134
S'ElementPropertyReadFile'
p113135
sS'name'
p113136
S'type'
p113137
sS'required'
p113138
I00
sS'group_name'
p113139
Nsa(dp113140
S'description'
p113141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113142
sS'cpp_type'
p113143
S'bool'
p113144
sS'default'
p113145
S'0'
p113146
sS'name'
p113147
S'use_displaced_mesh'
p113148
sS'required'
p113149
I00
sS'group_name'
p113150
S'Advanced'
p113151
sasS'name'
p113152
S'/UserObjects/ElementPropertyReadFile'
p113153
sa(dp113154
S'description'
p113155
g3
sS'subblocks'
p113156
NsS'parameters'
p113157
(lp113158
(dp113159
S'description'
p113160
S'The list of block ids (SubdomainID) that this object will be applied\n'
p113161
sS'cpp_type'
p113162
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p113163
sS'default'
p113164
g3
sS'name'
p113165
S'block'
p113166
sS'required'
p113167
I00
sS'group_name'
p113168
Nsa(dp113169
S'description'
p113170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113171
sS'cpp_type'
p113172
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113173
sS'default'
p113174
g3
sS'name'
p113175
S'control_tags'
p113176
sS'required'
p113177
I00
sS'group_name'
p113178
S'Advanced'
p113179
sa(dp113180
S'description'
p113181
S'Set the enabled status of the MooseObject.\n'
p113182
sS'cpp_type'
p113183
S'bool'
p113184
sS'default'
p113185
S'1'
p113186
sS'name'
p113187
S'enable'
p113188
sS'required'
p113189
I00
sS'group_name'
p113190
S'Advanced'
p113191
sa(dp113192
S'name'
p113193
S'execute_on'
p113194
sS'cpp_type'
p113195
S'MultiMooseEnum'
p113196
sS'default'
p113197
S'TIMESTEP_END'
p113198
sS'description'
p113199
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113200
sS'required'
p113201
I00
sS'options'
p113202
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113203
sS'group_name'
p113204
Nsa(dp113205
S'description'
p113206
S'The analytic solution to compare against\n'
p113207
sS'cpp_type'
p113208
S'FunctionName'
p113209
sS'default'
p113210
g3
sS'name'
p113211
S'function_x'
p113212
sS'required'
p113213
I01
sS'group_name'
p113214
Nsa(dp113215
S'description'
p113216
S'The analytic solution to compare against\n'
p113217
sS'cpp_type'
p113218
S'FunctionName'
p113219
sS'default'
p113220
S'0'
p113221
sS'name'
p113222
S'function_y'
p113223
sS'required'
p113224
I00
sS'group_name'
p113225
Nsa(dp113226
S'description'
p113227
S'The analytic solution to compare against\n'
p113228
sS'cpp_type'
p113229
S'FunctionName'
p113230
sS'default'
p113231
S'0'
p113232
sS'name'
p113233
S'function_z'
p113234
sS'required'
p113235
I00
sS'group_name'
p113236
Nsa(dp113237
S'description'
p113238
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113239
sS'cpp_type'
p113240
S'std::vector<OutputName, std::allocator<OutputName> >'
p113241
sS'default'
p113242
g3
sS'name'
p113243
S'outputs'
p113244
sS'required'
p113245
I00
sS'group_name'
p113246
S'Advanced'
p113247
sa(dp113248
S'description'
p113249
S'The seed for the master random number generator\n'
p113250
sS'cpp_type'
p113251
S'unsigned int'
p113252
sS'default'
p113253
S'0'
p113254
sS'name'
p113255
S'seed'
p113256
sS'required'
p113257
I00
sS'group_name'
p113258
S'Advanced'
p113259
sa(dp113260
S'description'
p113261
g3
sS'cpp_type'
p113262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113263
sS'default'
p113264
S'ElementVectorL2Error'
p113265
sS'name'
p113266
S'type'
p113267
sS'required'
p113268
I00
sS'group_name'
p113269
Nsa(dp113270
S'description'
p113271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113272
sS'cpp_type'
p113273
S'bool'
p113274
sS'default'
p113275
S'0'
p113276
sS'name'
p113277
S'use_displaced_mesh'
p113278
sS'required'
p113279
I00
sS'group_name'
p113280
S'Advanced'
p113281
sa(dp113282
S'description'
p113283
S'The FE solution in x direction\n'
p113284
sS'cpp_type'
p113285
S'std::vector<VariableName>'
p113286
sS'default'
p113287
g3
sS'name'
p113288
S'var_x'
p113289
sS'required'
p113290
I01
sS'group_name'
p113291
Nsa(dp113292
S'description'
p113293
S'The FE solution in y direction\n'
p113294
sS'cpp_type'
p113295
S'std::vector<VariableName>'
p113296
sS'default'
p113297
S'0'
p113298
sS'name'
p113299
S'var_y'
p113300
sS'required'
p113301
I00
sS'group_name'
p113302
Nsa(dp113303
S'description'
p113304
S'The FE solution in z direction\n'
p113305
sS'cpp_type'
p113306
S'std::vector<VariableName>'
p113307
sS'default'
p113308
S'0'
p113309
sS'name'
p113310
S'var_z'
p113311
sS'required'
p113312
I00
sS'group_name'
p113313
NsasS'name'
p113314
S'/UserObjects/ElementVectorL2Error'
p113315
sa(dp113316
S'description'
p113317
g3
sS'subblocks'
p113318
NsS'parameters'
p113319
(lp113320
(dp113321
S'description'
p113322
S'The list of block ids (SubdomainID) that this object will be applied\n'
p113323
sS'cpp_type'
p113324
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p113325
sS'default'
p113326
g3
sS'name'
p113327
S'block'
p113328
sS'required'
p113329
I00
sS'group_name'
p113330
Nsa(dp113331
S'description'
p113332
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113333
sS'cpp_type'
p113334
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113335
sS'default'
p113336
g3
sS'name'
p113337
S'control_tags'
p113338
sS'required'
p113339
I00
sS'group_name'
p113340
S'Advanced'
p113341
sa(dp113342
S'description'
p113343
S'Set the enabled status of the MooseObject.\n'
p113344
sS'cpp_type'
p113345
S'bool'
p113346
sS'default'
p113347
S'1'
p113348
sS'name'
p113349
S'enable'
p113350
sS'required'
p113351
I00
sS'group_name'
p113352
S'Advanced'
p113353
sa(dp113354
S'name'
p113355
S'execute_on'
p113356
sS'cpp_type'
p113357
S'MultiMooseEnum'
p113358
sS'default'
p113359
S'TIMESTEP_END'
p113360
sS'description'
p113361
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113362
sS'required'
p113363
I00
sS'options'
p113364
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113365
sS'group_name'
p113366
Nsa(dp113367
S'description'
p113368
S'The analytic solution to compare against\n'
p113369
sS'cpp_type'
p113370
S'FunctionName'
p113371
sS'default'
p113372
g3
sS'name'
p113373
S'function'
p113374
sS'required'
p113375
I01
sS'group_name'
p113376
Nsa(dp113377
S'description'
p113378
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113379
sS'cpp_type'
p113380
S'std::vector<OutputName, std::allocator<OutputName> >'
p113381
sS'default'
p113382
g3
sS'name'
p113383
S'outputs'
p113384
sS'required'
p113385
I00
sS'group_name'
p113386
S'Advanced'
p113387
sa(dp113388
S'description'
p113389
S'The exponent used in the norm.\n'
p113390
sS'cpp_type'
p113391
S'double'
p113392
sS'default'
p113393
S'2'
p113394
sS'name'
p113395
S'p'
p113396
sS'required'
p113397
I00
sS'group_name'
p113398
Nsa(dp113399
S'description'
p113400
S'The seed for the master random number generator\n'
p113401
sS'cpp_type'
p113402
S'unsigned int'
p113403
sS'default'
p113404
S'0'
p113405
sS'name'
p113406
S'seed'
p113407
sS'required'
p113408
I00
sS'group_name'
p113409
S'Advanced'
p113410
sa(dp113411
S'description'
p113412
g3
sS'cpp_type'
p113413
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113414
sS'default'
p113415
S'ElementW1pError'
p113416
sS'name'
p113417
S'type'
p113418
sS'required'
p113419
I00
sS'group_name'
p113420
Nsa(dp113421
S'description'
p113422
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113423
sS'cpp_type'
p113424
S'bool'
p113425
sS'default'
p113426
S'0'
p113427
sS'name'
p113428
S'use_displaced_mesh'
p113429
sS'required'
p113430
I00
sS'group_name'
p113431
S'Advanced'
p113432
sa(dp113433
S'description'
p113434
S'The name of the variable that this object operates on\n'
p113435
sS'cpp_type'
p113436
S'std::vector<VariableName>'
p113437
sS'default'
p113438
g3
sS'name'
p113439
S'variable'
p113440
sS'required'
p113441
I01
sS'group_name'
p113442
NsasS'name'
p113443
S'/UserObjects/ElementW1pError'
p113444
sa(dp113445
S'description'
p113446
g3
sS'subblocks'
p113447
NsS'parameters'
p113448
(lp113449
(dp113450
S'description'
p113451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113452
sS'cpp_type'
p113453
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113454
sS'default'
p113455
g3
sS'name'
p113456
S'control_tags'
p113457
sS'required'
p113458
I00
sS'group_name'
p113459
S'Advanced'
p113460
sa(dp113461
S'description'
p113462
S'The ID of the element where we monitor\n'
p113463
sS'cpp_type'
p113464
S'unsigned int'
p113465
sS'default'
p113466
g3
sS'name'
p113467
S'elementid'
p113468
sS'required'
p113469
I01
sS'group_name'
p113470
Nsa(dp113471
S'description'
p113472
S'Set the enabled status of the MooseObject.\n'
p113473
sS'cpp_type'
p113474
S'bool'
p113475
sS'default'
p113476
S'1'
p113477
sS'name'
p113478
S'enable'
p113479
sS'required'
p113480
I00
sS'group_name'
p113481
S'Advanced'
p113482
sa(dp113483
S'name'
p113484
S'execute_on'
p113485
sS'cpp_type'
p113486
S'MultiMooseEnum'
p113487
sS'default'
p113488
S'TIMESTEP_END'
p113489
sS'description'
p113490
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113491
sS'required'
p113492
I00
sS'options'
p113493
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113494
sS'group_name'
p113495
Nsa(dp113496
S'description'
p113497
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113498
sS'cpp_type'
p113499
S'std::vector<OutputName, std::allocator<OutputName> >'
p113500
sS'default'
p113501
g3
sS'name'
p113502
S'outputs'
p113503
sS'required'
p113504
I00
sS'group_name'
p113505
S'Advanced'
p113506
sa(dp113507
S'description'
p113508
g3
sS'cpp_type'
p113509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113510
sS'default'
p113511
S'ElementalVariableValue'
p113512
sS'name'
p113513
S'type'
p113514
sS'required'
p113515
I00
sS'group_name'
p113516
Nsa(dp113517
S'description'
p113518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113519
sS'cpp_type'
p113520
S'bool'
p113521
sS'default'
p113522
S'0'
p113523
sS'name'
p113524
S'use_displaced_mesh'
p113525
sS'required'
p113526
I00
sS'group_name'
p113527
S'Advanced'
p113528
sa(dp113529
S'description'
p113530
S'The variable to be monitored\n'
p113531
sS'cpp_type'
p113532
S'VariableName'
p113533
sS'default'
p113534
g3
sS'name'
p113535
S'variable'
p113536
sS'required'
p113537
I01
sS'group_name'
p113538
NsasS'name'
p113539
S'/UserObjects/ElementalVariableValue'
p113540
sa(dp113541
S'description'
p113542
g3
sS'subblocks'
p113543
NsS'parameters'
p113544
(lp113545
(dp113546
S'description'
p113547
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113548
sS'cpp_type'
p113549
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113550
sS'default'
p113551
g3
sS'name'
p113552
S'control_tags'
p113553
sS'required'
p113554
I00
sS'group_name'
p113555
S'Advanced'
p113556
sa(dp113557
S'description'
p113558
S'Set the enabled status of the MooseObject.\n'
p113559
sS'cpp_type'
p113560
S'bool'
p113561
sS'default'
p113562
S'1'
p113563
sS'name'
p113564
S'enable'
p113565
sS'required'
p113566
I00
sS'group_name'
p113567
S'Advanced'
p113568
sa(dp113569
S'name'
p113570
S'execute_on'
p113571
sS'cpp_type'
p113572
S'MultiMooseEnum'
p113573
sS'default'
p113574
S'TIMESTEP_END'
p113575
sS'description'
p113576
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113577
sS'required'
p113578
I00
sS'options'
p113579
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113580
sS'group_name'
p113581
Nsa(dp113582
S'description'
p113583
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113584
sS'cpp_type'
p113585
S'std::vector<OutputName, std::allocator<OutputName> >'
p113586
sS'default'
p113587
g3
sS'name'
p113588
S'outputs'
p113589
sS'required'
p113590
I00
sS'group_name'
p113591
S'Advanced'
p113592
sa(dp113593
S'description'
p113594
g3
sS'cpp_type'
p113595
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113596
sS'default'
p113597
S'EmptyPostprocessor'
p113598
sS'name'
p113599
S'type'
p113600
sS'required'
p113601
I00
sS'group_name'
p113602
Nsa(dp113603
S'description'
p113604
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113605
sS'cpp_type'
p113606
S'bool'
p113607
sS'default'
p113608
S'0'
p113609
sS'name'
p113610
S'use_displaced_mesh'
p113611
sS'required'
p113612
I00
sS'group_name'
p113613
S'Advanced'
p113614
sasS'name'
p113615
S'/UserObjects/EmptyPostprocessor'
p113616
sa(dp113617
S'description'
p113618
S'Read Euler angle data from a file and provide it to other objects.\n'
p113619
sS'subblocks'
p113620
NsS'parameters'
p113621
(lp113622
(dp113623
S'description'
p113624
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113625
sS'cpp_type'
p113626
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113627
sS'default'
p113628
g3
sS'name'
p113629
S'control_tags'
p113630
sS'required'
p113631
I00
sS'group_name'
p113632
S'Advanced'
p113633
sa(dp113634
S'description'
p113635
S'Set the enabled status of the MooseObject.\n'
p113636
sS'cpp_type'
p113637
S'bool'
p113638
sS'default'
p113639
S'1'
p113640
sS'name'
p113641
S'enable'
p113642
sS'required'
p113643
I00
sS'group_name'
p113644
S'Advanced'
p113645
sa(dp113646
S'name'
p113647
S'execute_on'
p113648
sS'cpp_type'
p113649
S'MultiMooseEnum'
p113650
sS'default'
p113651
S'TIMESTEP_END'
p113652
sS'description'
p113653
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113654
sS'required'
p113655
I00
sS'options'
p113656
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113657
sS'group_name'
p113658
Nsa(dp113659
S'description'
p113660
S'Euler angle data file name\n'
p113661
sS'cpp_type'
p113662
S'FileName'
p113663
sS'default'
p113664
g3
sS'name'
p113665
S'file_name'
p113666
sS'required'
p113667
I01
sS'group_name'
p113668
Nsa(dp113669
S'description'
p113670
g3
sS'cpp_type'
p113671
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113672
sS'default'
p113673
S'EulerAngleFileReader'
p113674
sS'name'
p113675
S'type'
p113676
sS'required'
p113677
I00
sS'group_name'
p113678
Nsa(dp113679
S'description'
p113680
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113681
sS'cpp_type'
p113682
S'bool'
p113683
sS'default'
p113684
S'0'
p113685
sS'name'
p113686
S'use_displaced_mesh'
p113687
sS'required'
p113688
I00
sS'group_name'
p113689
S'Advanced'
p113690
sasS'name'
p113691
S'/UserObjects/EulerAngleFileReader'
p113692
sa(dp113693
S'description'
p113694
S'Provide updated euler angles after rigid body rotation of the grains.\n'
p113695
sS'subblocks'
p113696
NsS'parameters'
p113697
(lp113698
(dp113699
S'description'
p113700
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113701
sS'cpp_type'
p113702
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113703
sS'default'
p113704
g3
sS'name'
p113705
S'control_tags'
p113706
sS'required'
p113707
I00
sS'group_name'
p113708
S'Advanced'
p113709
sa(dp113710
S'description'
p113711
S'Set the enabled status of the MooseObject.\n'
p113712
sS'cpp_type'
p113713
S'bool'
p113714
sS'default'
p113715
S'1'
p113716
sS'name'
p113717
S'enable'
p113718
sS'required'
p113719
I00
sS'group_name'
p113720
S'Advanced'
p113721
sa(dp113722
S'description'
p113723
S'Name of Euler angle provider user object\n'
p113724
sS'cpp_type'
p113725
S'UserObjectName'
p113726
sS'default'
p113727
g3
sS'name'
p113728
S'euler_angle_provider'
p113729
sS'required'
p113730
I01
sS'group_name'
p113731
Nsa(dp113732
S'name'
p113733
S'execute_on'
p113734
sS'cpp_type'
p113735
S'MultiMooseEnum'
p113736
sS'default'
p113737
S'TIMESTEP_END'
p113738
sS'description'
p113739
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113740
sS'required'
p113741
I00
sS'options'
p113742
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113743
sS'group_name'
p113744
Nsa(dp113745
S'description'
p113746
S'Name of Euler angle provider user object\n'
p113747
sS'cpp_type'
p113748
S'UserObjectName'
p113749
sS'default'
p113750
g3
sS'name'
p113751
S'grain_torques_object'
p113752
sS'required'
p113753
I01
sS'group_name'
p113754
Nsa(dp113755
S'description'
p113756
S'The FeatureFloodCount UserObject to get values from.\n'
p113757
sS'cpp_type'
p113758
S'UserObjectName'
p113759
sS'default'
p113760
g3
sS'name'
p113761
S'grain_tracker_object'
p113762
sS'required'
p113763
I01
sS'group_name'
p113764
Nsa(dp113765
S'description'
p113766
S'The feature volume VectorPostprocessorValue.\n'
p113767
sS'cpp_type'
p113768
S'VectorPostprocessorName'
p113769
sS'default'
p113770
g3
sS'name'
p113771
S'grain_volumes'
p113772
sS'required'
p113773
I01
sS'group_name'
p113774
Nsa(dp113775
S'description'
p113776
S'Constant value characterizing grain rotation\n'
p113777
sS'cpp_type'
p113778
S'double'
p113779
sS'default'
p113780
S'1'
p113781
sS'name'
p113782
S'rotation_constant'
p113783
sS'required'
p113784
I00
sS'group_name'
p113785
Nsa(dp113786
S'description'
p113787
g3
sS'cpp_type'
p113788
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113789
sS'default'
p113790
S'EulerAngleUpdater'
p113791
sS'name'
p113792
S'type'
p113793
sS'required'
p113794
I00
sS'group_name'
p113795
Nsa(dp113796
S'description'
p113797
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113798
sS'cpp_type'
p113799
S'bool'
p113800
sS'default'
p113801
S'0'
p113802
sS'name'
p113803
S'use_displaced_mesh'
p113804
sS'required'
p113805
I00
sS'group_name'
p113806
S'Advanced'
p113807
sasS'name'
p113808
S'/UserObjects/EulerAngleUpdater'
p113809
sa(dp113810
S'description'
p113811
g3
sS'subblocks'
p113812
NsS'parameters'
p113813
(lp113814
(dp113815
S'description'
p113816
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113817
sS'cpp_type'
p113818
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113819
sS'default'
p113820
g3
sS'name'
p113821
S'control_tags'
p113822
sS'required'
p113823
I00
sS'group_name'
p113824
S'Advanced'
p113825
sa(dp113826
S'description'
p113827
S'Set the enabled status of the MooseObject.\n'
p113828
sS'cpp_type'
p113829
S'bool'
p113830
sS'default'
p113831
S'1'
p113832
sS'name'
p113833
S'enable'
p113834
sS'required'
p113835
I00
sS'group_name'
p113836
S'Advanced'
p113837
sa(dp113838
S'name'
p113839
S'execute_on'
p113840
sS'cpp_type'
p113841
S'MultiMooseEnum'
p113842
sS'default'
p113843
S'TIMESTEP_END'
p113844
sS'description'
p113845
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113846
sS'required'
p113847
I00
sS'options'
p113848
S'none initial linear nonlinear timestep_end timestep_begin custom'
p113849
sS'group_name'
p113850
Nsa(dp113851
S'description'
p113852
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113853
sS'cpp_type'
p113854
S'std::vector<OutputName, std::allocator<OutputName> >'
p113855
sS'default'
p113856
g3
sS'name'
p113857
S'outputs'
p113858
sS'required'
p113859
I00
sS'group_name'
p113860
S'Advanced'
p113861
sa(dp113862
S'description'
p113863
g3
sS'cpp_type'
p113864
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113865
sS'default'
p113866
S'ExecutionerAttributeReporter'
p113867
sS'name'
p113868
S'type'
p113869
sS'required'
p113870
I00
sS'group_name'
p113871
Nsa(dp113872
S'description'
p113873
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113874
sS'cpp_type'
p113875
S'bool'
p113876
sS'default'
p113877
S'0'
p113878
sS'name'
p113879
S'use_displaced_mesh'
p113880
sS'required'
p113881
I00
sS'group_name'
p113882
S'Advanced'
p113883
sasS'name'
p113884
S'/UserObjects/ExecutionerAttributeReporter'
p113885
sa(dp113886
S'description'
p113887
S'Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n'
p113888
sS'subblocks'
p113889
NsS'parameters'
p113890
(lp113891
(dp113892
S'description'
p113893
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p113894
sS'cpp_type'
p113895
S'bool'
p113896
sS'default'
p113897
S'0'
p113898
sS'name'
p113899
S'compute_halo_maps'
p113900
sS'required'
p113901
I00
sS'group_name'
p113902
Nsa(dp113903
S'description'
p113904
S'Instruct the Postprocessor to compute the active vars to features map\n'
p113905
sS'cpp_type'
p113906
S'bool'
p113907
sS'default'
p113908
S'0'
p113909
sS'name'
p113910
S'compute_var_to_feature_map'
p113911
sS'required'
p113912
I00
sS'group_name'
p113913
Nsa(dp113914
S'description'
p113915
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p113916
sS'cpp_type'
p113917
S'bool'
p113918
sS'default'
p113919
S'1'
p113920
sS'name'
p113921
S'condense_map_info'
p113922
sS'required'
p113923
I00
sS'group_name'
p113924
S'Advanced'
p113925
sa(dp113926
S'description'
p113927
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p113928
sS'cpp_type'
p113929
S'double'
p113930
sS'default'
p113931
S'0.09'
p113932
sS'name'
p113933
S'connecting_threshold'
p113934
sS'required'
p113935
I00
sS'group_name'
p113936
Nsa(dp113937
S'description'
p113938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113939
sS'cpp_type'
p113940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113941
sS'default'
p113942
g3
sS'name'
p113943
S'control_tags'
p113944
sS'required'
p113945
I00
sS'group_name'
p113946
S'Advanced'
p113947
sa(dp113948
S'description'
p113949
S'Optional: EBSD Reader for initial condition\n'
p113950
sS'cpp_type'
p113951
S'UserObjectName'
p113952
sS'default'
p113953
g3
sS'name'
p113954
S'ebsd_reader'
p113955
sS'required'
p113956
I00
sS'group_name'
p113957
Nsa(dp113958
S'description'
p113959
S'Set the enabled status of the MooseObject.\n'
p113960
sS'cpp_type'
p113961
S'bool'
p113962
sS'default'
p113963
S'1'
p113964
sS'name'
p113965
S'enable'
p113966
sS'required'
p113967
I00
sS'group_name'
p113968
S'Advanced'
p113969
sa(dp113970
S'description'
p113971
S'Instruct the Postprocessor to populate the variable index map.\n'
p113972
sS'cpp_type'
p113973
S'bool'
p113974
sS'default'
p113975
S'1'
p113976
sS'name'
p113977
S'enable_var_coloring'
p113978
sS'required'
p113979
I00
sS'group_name'
p113980
Nsa(dp113981
S'description'
p113982
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p113983
sS'cpp_type'
p113984
S'bool'
p113985
sS'default'
p113986
S'0'
p113987
sS'name'
p113988
S'error_on_grain_creation'
p113989
sS'required'
p113990
I00
sS'group_name'
p113991
Nsa(dp113992
S'name'
p113993
S'execute_on'
p113994
sS'cpp_type'
p113995
S'MultiMooseEnum'
p113996
sS'default'
p113997
S'INITIAL TIMESTEP_END'
p113998
sS'description'
p113999
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114000
sS'required'
p114001
I00
sS'options'
p114002
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114003
sS'group_name'
p114004
Nsa(dp114005
S'name'
p114006
S'flood_entity_type'
p114007
sS'cpp_type'
p114008
S'MooseEnum'
p114009
sS'default'
p114010
S'ELEMENTAL'
p114011
sS'description'
p114012
S'Determines whether the flood algorithm runs on nodes or elements\n'
p114013
sS'required'
p114014
I00
sS'options'
p114015
S'NODAL ELEMENTAL'
p114016
sS'group_name'
p114017
Nsa(dp114018
S'description'
p114019
S'The thickness of the halo surrounding each feature.\n'
p114020
sS'cpp_type'
p114021
S'unsigned int'
p114022
sS'default'
p114023
S'2'
p114024
sS'name'
p114025
S'halo_level'
p114026
sS'required'
p114027
I00
sS'group_name'
p114028
Nsa(dp114029
S'description'
p114030
S'Array of coupled variables (num_name)\n'
p114031
sS'cpp_type'
p114032
S'unsigned int'
p114033
sS'default'
p114034
g3
sS'name'
p114035
S'op_num'
p114036
sS'required'
p114037
I00
sS'group_name'
p114038
Nsa(dp114039
S'description'
p114040
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114041
sS'cpp_type'
p114042
S'std::vector<OutputName, std::allocator<OutputName> >'
p114043
sS'default'
p114044
g3
sS'name'
p114045
S'outputs'
p114046
sS'required'
p114047
I00
sS'group_name'
p114048
S'Advanced'
p114049
sa(dp114050
S'description'
p114051
S'EBSD phase number from which to retrieve information\n'
p114052
sS'cpp_type'
p114053
S'unsigned int'
p114054
sS'default'
p114055
g3
sS'name'
p114056
S'phase'
p114057
sS'required'
p114058
I00
sS'group_name'
p114059
Nsa(dp114060
S'description'
p114061
S'Indicates whether remapping should be done or not (default: true)\n'
p114062
sS'cpp_type'
p114063
S'bool'
p114064
sS'default'
p114065
S'1'
p114066
sS'name'
p114067
S'remap_grains'
p114068
sS'required'
p114069
I00
sS'group_name'
p114070
Nsa(dp114071
S'description'
p114072
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p114073
sS'cpp_type'
p114074
S'unsigned short'
p114075
sS'default'
p114076
S'0'
p114077
sS'name'
p114078
S'reserve_op'
p114079
sS'required'
p114080
I00
sS'group_name'
p114081
Nsa(dp114082
S'description'
p114083
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p114084
sS'cpp_type'
p114085
S'double'
p114086
sS'default'
p114087
S'0.95'
p114088
sS'name'
p114089
S'reserve_op_threshold'
p114090
sS'required'
p114091
I00
sS'group_name'
p114092
Nsa(dp114093
S'description'
p114094
S'The threshold value for which a new feature may be started\n'
p114095
sS'cpp_type'
p114096
S'double'
p114097
sS'default'
p114098
S'0.1'
p114099
sS'name'
p114100
S'threshold'
p114101
sS'required'
p114102
I00
sS'group_name'
p114103
Nsa(dp114104
S'description'
p114105
S'The timestep for when we should start tracking grains\n'
p114106
sS'cpp_type'
p114107
S'int'
p114108
sS'default'
p114109
S'0'
p114110
sS'name'
p114111
S'tracking_step'
p114112
sS'required'
p114113
I00
sS'group_name'
p114114
Nsa(dp114115
S'description'
p114116
g3
sS'cpp_type'
p114117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114118
sS'default'
p114119
S'FauxGrainTracker'
p114120
sS'name'
p114121
S'type'
p114122
sS'required'
p114123
I00
sS'group_name'
p114124
Nsa(dp114125
S'description'
p114126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114127
sS'cpp_type'
p114128
S'bool'
p114129
sS'default'
p114130
S'0'
p114131
sS'name'
p114132
S'use_displaced_mesh'
p114133
sS'required'
p114134
I00
sS'group_name'
p114135
S'Advanced'
p114136
sa(dp114137
S'description'
p114138
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p114139
sS'cpp_type'
p114140
S'bool'
p114141
sS'default'
p114142
S'1'
p114143
sS'name'
p114144
S'use_global_numbering'
p114145
sS'required'
p114146
I00
sS'group_name'
p114147
S'Advanced'
p114148
sa(dp114149
S'description'
p114150
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p114151
sS'cpp_type'
p114152
S'bool'
p114153
sS'default'
p114154
S'1'
p114155
sS'name'
p114156
S'use_less_than_threshold_comparison'
p114157
sS'required'
p114158
I00
sS'group_name'
p114159
Nsa(dp114160
S'description'
p114161
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p114162
sS'cpp_type'
p114163
S'bool'
p114164
sS'default'
p114165
S'0'
p114166
sS'name'
p114167
S'use_single_map'
p114168
sS'required'
p114169
I00
sS'group_name'
p114170
S'Advanced'
p114171
sa(dp114172
S'description'
p114173
S'Array of coupled variables (base_name)\n'
p114174
sS'cpp_type'
p114175
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114176
sS'default'
p114177
g3
sS'name'
p114178
S'var_name_base'
p114179
sS'required'
p114180
I00
sS'group_name'
p114181
Nsa(dp114182
S'description'
p114183
S'Array of coupled variables\n'
p114184
sS'cpp_type'
p114185
S'std::vector<VariableName>'
p114186
sS'default'
p114187
g3
sS'name'
p114188
S'variable'
p114189
sS'required'
p114190
I01
sS'group_name'
p114191
NsasS'name'
p114192
S'/UserObjects/FauxGrainTracker'
p114193
sa(dp114194
S'description'
p114195
g3
sS'subblocks'
p114196
NsS'parameters'
p114197
(lp114198
(dp114199
S'description'
p114200
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p114201
sS'cpp_type'
p114202
S'bool'
p114203
sS'default'
p114204
S'0'
p114205
sS'name'
p114206
S'compute_halo_maps'
p114207
sS'required'
p114208
I00
sS'group_name'
p114209
Nsa(dp114210
S'description'
p114211
S'Instruct the Postprocessor to compute the active vars to features map\n'
p114212
sS'cpp_type'
p114213
S'bool'
p114214
sS'default'
p114215
S'0'
p114216
sS'name'
p114217
S'compute_var_to_feature_map'
p114218
sS'required'
p114219
I00
sS'group_name'
p114220
Nsa(dp114221
S'description'
p114222
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p114223
sS'cpp_type'
p114224
S'bool'
p114225
sS'default'
p114226
S'0'
p114227
sS'name'
p114228
S'condense_map_info'
p114229
sS'required'
p114230
I00
sS'group_name'
p114231
S'Advanced'
p114232
sa(dp114233
S'description'
p114234
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p114235
sS'cpp_type'
p114236
S'double'
p114237
sS'default'
p114238
g3
sS'name'
p114239
S'connecting_threshold'
p114240
sS'required'
p114241
I00
sS'group_name'
p114242
Nsa(dp114243
S'description'
p114244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114245
sS'cpp_type'
p114246
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114247
sS'default'
p114248
g3
sS'name'
p114249
S'control_tags'
p114250
sS'required'
p114251
I00
sS'group_name'
p114252
S'Advanced'
p114253
sa(dp114254
S'description'
p114255
S'Set the enabled status of the MooseObject.\n'
p114256
sS'cpp_type'
p114257
S'bool'
p114258
sS'default'
p114259
S'1'
p114260
sS'name'
p114261
S'enable'
p114262
sS'required'
p114263
I00
sS'group_name'
p114264
S'Advanced'
p114265
sa(dp114266
S'description'
p114267
S'Instruct the Postprocessor to populate the variable index map.\n'
p114268
sS'cpp_type'
p114269
S'bool'
p114270
sS'default'
p114271
S'0'
p114272
sS'name'
p114273
S'enable_var_coloring'
p114274
sS'required'
p114275
I00
sS'group_name'
p114276
Nsa(dp114277
S'name'
p114278
S'execute_on'
p114279
sS'cpp_type'
p114280
S'MultiMooseEnum'
p114281
sS'default'
p114282
S'TIMESTEP_END'
p114283
sS'description'
p114284
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114285
sS'required'
p114286
I00
sS'options'
p114287
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114288
sS'group_name'
p114289
Nsa(dp114290
S'name'
p114291
S'flood_entity_type'
p114292
sS'cpp_type'
p114293
S'MooseEnum'
p114294
sS'default'
p114295
S'ELEMENTAL'
p114296
sS'description'
p114297
S'Determines whether the flood algorithm runs on nodes or elements\n'
p114298
sS'required'
p114299
I00
sS'options'
p114300
S'NODAL ELEMENTAL'
p114301
sS'group_name'
p114302
Nsa(dp114303
S'description'
p114304
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114305
sS'cpp_type'
p114306
S'std::vector<OutputName, std::allocator<OutputName> >'
p114307
sS'default'
p114308
g3
sS'name'
p114309
S'outputs'
p114310
sS'required'
p114311
I00
sS'group_name'
p114312
S'Advanced'
p114313
sa(dp114314
S'description'
p114315
S'The threshold value for which a new feature may be started\n'
p114316
sS'cpp_type'
p114317
S'double'
p114318
sS'default'
p114319
S'0.5'
p114320
sS'name'
p114321
S'threshold'
p114322
sS'required'
p114323
I00
sS'group_name'
p114324
Nsa(dp114325
S'description'
p114326
g3
sS'cpp_type'
p114327
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114328
sS'default'
p114329
S'FeatureFloodCount'
p114330
sS'name'
p114331
S'type'
p114332
sS'required'
p114333
I00
sS'group_name'
p114334
Nsa(dp114335
S'description'
p114336
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114337
sS'cpp_type'
p114338
S'bool'
p114339
sS'default'
p114340
S'0'
p114341
sS'name'
p114342
S'use_displaced_mesh'
p114343
sS'required'
p114344
I00
sS'group_name'
p114345
S'Advanced'
p114346
sa(dp114347
S'description'
p114348
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p114349
sS'cpp_type'
p114350
S'bool'
p114351
sS'default'
p114352
S'1'
p114353
sS'name'
p114354
S'use_global_numbering'
p114355
sS'required'
p114356
I00
sS'group_name'
p114357
S'Advanced'
p114358
sa(dp114359
S'description'
p114360
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p114361
sS'cpp_type'
p114362
S'bool'
p114363
sS'default'
p114364
S'1'
p114365
sS'name'
p114366
S'use_less_than_threshold_comparison'
p114367
sS'required'
p114368
I00
sS'group_name'
p114369
Nsa(dp114370
S'description'
p114371
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p114372
sS'cpp_type'
p114373
S'bool'
p114374
sS'default'
p114375
S'1'
p114376
sS'name'
p114377
S'use_single_map'
p114378
sS'required'
p114379
I00
sS'group_name'
p114380
S'Advanced'
p114381
sa(dp114382
S'description'
p114383
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p114384
sS'cpp_type'
p114385
S'std::vector<VariableName>'
p114386
sS'default'
p114387
g3
sS'name'
p114388
S'variable'
p114389
sS'required'
p114390
I01
sS'group_name'
p114391
NsasS'name'
p114392
S'/UserObjects/FeatureFloodCount'
p114393
sa(dp114394
S'description'
p114395
g3
sS'subblocks'
p114396
NsS'parameters'
p114397
(lp114398
(dp114399
S'description'
p114400
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114401
sS'cpp_type'
p114402
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114403
sS'default'
p114404
g3
sS'name'
p114405
S'control_tags'
p114406
sS'required'
p114407
I00
sS'group_name'
p114408
S'Advanced'
p114409
sa(dp114410
S'description'
p114411
S'Set the enabled status of the MooseObject.\n'
p114412
sS'cpp_type'
p114413
S'bool'
p114414
sS'default'
p114415
S'1'
p114416
sS'name'
p114417
S'enable'
p114418
sS'required'
p114419
I00
sS'group_name'
p114420
S'Advanced'
p114421
sa(dp114422
S'description'
p114423
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p114424
sS'cpp_type'
p114425
S'double'
p114426
sS'default'
p114427
S'-1'
p114428
sS'name'
p114429
S'equil_fraction'
p114430
sS'required'
p114431
I00
sS'group_name'
p114432
Nsa(dp114433
S'name'
p114434
S'execute_on'
p114435
sS'cpp_type'
p114436
S'MultiMooseEnum'
p114437
sS'default'
p114438
S'TIMESTEP_END'
p114439
sS'description'
p114440
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114441
sS'required'
p114442
I00
sS'options'
p114443
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114444
sS'group_name'
p114445
Nsa(dp114446
S'description'
p114447
S'The feature volume VectorPostprocessorValue.\n'
p114448
sS'cpp_type'
p114449
S'VectorPostprocessorName'
p114450
sS'default'
p114451
g3
sS'name'
p114452
S'feature_volumes'
p114453
sS'required'
p114454
I01
sS'group_name'
p114455
Nsa(dp114456
S'description'
p114457
S'Postprocessor from which to get mesh volume\n'
p114458
sS'cpp_type'
p114459
S'PostprocessorName'
p114460
sS'default'
p114461
g3
sS'name'
p114462
S'mesh_volume'
p114463
sS'required'
p114464
I01
sS'group_name'
p114465
Nsa(dp114466
S'description'
p114467
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114468
sS'cpp_type'
p114469
S'std::vector<OutputName, std::allocator<OutputName> >'
p114470
sS'default'
p114471
g3
sS'name'
p114472
S'outputs'
p114473
sS'required'
p114474
I00
sS'group_name'
p114475
S'Advanced'
p114476
sa(dp114477
S'description'
p114478
g3
sS'cpp_type'
p114479
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114480
sS'default'
p114481
S'FeatureVolumeFraction'
p114482
sS'name'
p114483
S'type'
p114484
sS'required'
p114485
I00
sS'group_name'
p114486
Nsa(dp114487
S'description'
p114488
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114489
sS'cpp_type'
p114490
S'bool'
p114491
sS'default'
p114492
S'0'
p114493
sS'name'
p114494
S'use_displaced_mesh'
p114495
sS'required'
p114496
I00
sS'group_name'
p114497
S'Advanced'
p114498
sa(dp114499
S'name'
p114500
S'value_type'
p114501
sS'cpp_type'
p114502
S'MooseEnum'
p114503
sS'default'
p114504
S'VOLUME_FRACTION'
p114505
sS'description'
p114506
S'The value to output (VOLUME_FRACTION or AVRAMI value)\n'
p114507
sS'required'
p114508
I00
sS'options'
p114509
S'VOLUME_FRACTION AVRAMI'
p114510
sS'group_name'
p114511
NsasS'name'
p114512
S'/UserObjects/FeatureVolumeFraction'
p114513
sa(dp114514
S'description'
p114515
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p114516
sS'subblocks'
p114517
NsS'parameters'
p114518
(lp114519
(dp114520
S'description'
p114521
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114522
sS'cpp_type'
p114523
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114524
sS'default'
p114525
g3
sS'name'
p114526
S'control_tags'
p114527
sS'required'
p114528
I00
sS'group_name'
p114529
S'Advanced'
p114530
sa(dp114531
S'description'
p114532
S'Maximum number of bisections to perform.\n'
p114533
sS'cpp_type'
p114534
S'unsigned int'
p114535
sS'default'
p114536
S'36'
p114537
sS'name'
p114538
S'depth'
p114539
sS'required'
p114540
I00
sS'group_name'
p114541
Nsa(dp114542
S'description'
p114543
S'Set the enabled status of the MooseObject.\n'
p114544
sS'cpp_type'
p114545
S'bool'
p114546
sS'default'
p114547
S'1'
p114548
sS'name'
p114549
S'enable'
p114550
sS'required'
p114551
I00
sS'group_name'
p114552
S'Advanced'
p114553
sa(dp114554
S'description'
p114555
S'End point of the sampling line.\n'
p114556
sS'cpp_type'
p114557
S'libMesh::Point'
p114558
sS'default'
p114559
g3
sS'name'
p114560
S'end_point'
p114561
sS'required'
p114562
I00
sS'group_name'
p114563
Nsa(dp114564
S'name'
p114565
S'execute_on'
p114566
sS'cpp_type'
p114567
S'MultiMooseEnum'
p114568
sS'default'
p114569
S'TIMESTEP_END'
p114570
sS'description'
p114571
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114572
sS'required'
p114573
I00
sS'options'
p114574
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114575
sS'group_name'
p114576
Nsa(dp114577
S'description'
p114578
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114579
sS'cpp_type'
p114580
S'std::vector<OutputName, std::allocator<OutputName> >'
p114581
sS'default'
p114582
g3
sS'name'
p114583
S'outputs'
p114584
sS'required'
p114585
I00
sS'group_name'
p114586
S'Advanced'
p114587
sa(dp114588
S'description'
p114589
S'Start point of the sampling line.\n'
p114590
sS'cpp_type'
p114591
S'libMesh::Point'
p114592
sS'default'
p114593
g3
sS'name'
p114594
S'start_point'
p114595
sS'required'
p114596
I00
sS'group_name'
p114597
Nsa(dp114598
S'description'
p114599
S'Target value to locate.\n'
p114600
sS'cpp_type'
p114601
S'double'
p114602
sS'default'
p114603
g3
sS'name'
p114604
S'target'
p114605
sS'required'
p114606
I00
sS'group_name'
p114607
Nsa(dp114608
S'description'
p114609
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p114610
sS'cpp_type'
p114611
S'double'
p114612
sS'default'
p114613
S'1e-10'
p114614
sS'name'
p114615
S'tol'
p114616
sS'required'
p114617
I00
sS'group_name'
p114618
Nsa(dp114619
S'description'
p114620
g3
sS'cpp_type'
p114621
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114622
sS'default'
p114623
S'FindValueOnLine'
p114624
sS'name'
p114625
S'type'
p114626
sS'required'
p114627
I00
sS'group_name'
p114628
Nsa(dp114629
S'description'
p114630
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114631
sS'cpp_type'
p114632
S'bool'
p114633
sS'default'
p114634
S'0'
p114635
sS'name'
p114636
S'use_displaced_mesh'
p114637
sS'required'
p114638
I00
sS'group_name'
p114639
S'Advanced'
p114640
sa(dp114641
S'description'
p114642
S'Variable to inspect\n'
p114643
sS'cpp_type'
p114644
S'std::vector<VariableName>'
p114645
sS'default'
p114646
g3
sS'name'
p114647
S'v'
p114648
sS'required'
p114649
I00
sS'group_name'
p114650
NsasS'name'
p114651
S'/UserObjects/FindValueOnLine'
p114652
sa(dp114653
S'description'
p114654
g3
sS'subblocks'
p114655
NsS'parameters'
p114656
(lp114657
(dp114658
S'description'
p114659
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p114660
sS'cpp_type'
p114661
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p114662
sS'default'
p114663
g3
sS'name'
p114664
S'boundary'
p114665
sS'required'
p114666
I01
sS'group_name'
p114667
Nsa(dp114668
S'description'
p114669
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114670
sS'cpp_type'
p114671
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114672
sS'default'
p114673
g3
sS'name'
p114674
S'control_tags'
p114675
sS'required'
p114676
I00
sS'group_name'
p114677
S'Advanced'
p114678
sa(dp114679
S'description'
p114680
S'Set the enabled status of the MooseObject.\n'
p114681
sS'cpp_type'
p114682
S'bool'
p114683
sS'default'
p114684
S'1'
p114685
sS'name'
p114686
S'enable'
p114687
sS'required'
p114688
I00
sS'group_name'
p114689
S'Advanced'
p114690
sa(dp114691
S'name'
p114692
S'execute_on'
p114693
sS'cpp_type'
p114694
S'MultiMooseEnum'
p114695
sS'default'
p114696
S'TIMESTEP_END'
p114697
sS'description'
p114698
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114699
sS'required'
p114700
I00
sS'options'
p114701
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114702
sS'group_name'
p114703
Nsa(dp114704
S'description'
p114705
S'This postprocessor will return the integral of this function over the boundary\n'
p114706
sS'cpp_type'
p114707
S'FunctionName'
p114708
sS'default'
p114709
S'1'
p114710
sS'name'
p114711
S'function'
p114712
sS'required'
p114713
I00
sS'group_name'
p114714
Nsa(dp114715
S'description'
p114716
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114717
sS'cpp_type'
p114718
S'std::vector<OutputName, std::allocator<OutputName> >'
p114719
sS'default'
p114720
g3
sS'name'
p114721
S'outputs'
p114722
sS'required'
p114723
I00
sS'group_name'
p114724
S'Advanced'
p114725
sa(dp114726
S'description'
p114727
g3
sS'cpp_type'
p114728
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114729
sS'default'
p114730
S'FunctionSideIntegral'
p114731
sS'name'
p114732
S'type'
p114733
sS'required'
p114734
I00
sS'group_name'
p114735
Nsa(dp114736
S'description'
p114737
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114738
sS'cpp_type'
p114739
S'bool'
p114740
sS'default'
p114741
S'0'
p114742
sS'name'
p114743
S'use_displaced_mesh'
p114744
sS'required'
p114745
I00
sS'group_name'
p114746
S'Advanced'
p114747
sasS'name'
p114748
S'/UserObjects/FunctionSideIntegral'
p114749
sa(dp114750
S'description'
p114751
g3
sS'subblocks'
p114752
NsS'parameters'
p114753
(lp114754
(dp114755
S'description'
p114756
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114757
sS'cpp_type'
p114758
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114759
sS'default'
p114760
g3
sS'name'
p114761
S'control_tags'
p114762
sS'required'
p114763
I00
sS'group_name'
p114764
S'Advanced'
p114765
sa(dp114766
S'description'
p114767
S'Set the enabled status of the MooseObject.\n'
p114768
sS'cpp_type'
p114769
S'bool'
p114770
sS'default'
p114771
S'1'
p114772
sS'name'
p114773
S'enable'
p114774
sS'required'
p114775
I00
sS'group_name'
p114776
S'Advanced'
p114777
sa(dp114778
S'name'
p114779
S'execute_on'
p114780
sS'cpp_type'
p114781
S'MultiMooseEnum'
p114782
sS'default'
p114783
S'TIMESTEP_END'
p114784
sS'description'
p114785
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114786
sS'required'
p114787
I00
sS'options'
p114788
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114789
sS'group_name'
p114790
Nsa(dp114791
S'description'
p114792
S'The function which supplies the postprocessor value.\n'
p114793
sS'cpp_type'
p114794
S'FunctionName'
p114795
sS'default'
p114796
g3
sS'name'
p114797
S'function'
p114798
sS'required'
p114799
I01
sS'group_name'
p114800
Nsa(dp114801
S'description'
p114802
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114803
sS'cpp_type'
p114804
S'std::vector<OutputName, std::allocator<OutputName> >'
p114805
sS'default'
p114806
g3
sS'name'
p114807
S'outputs'
p114808
sS'required'
p114809
I00
sS'group_name'
p114810
S'Advanced'
p114811
sa(dp114812
S'description'
p114813
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p114814
sS'cpp_type'
p114815
S'libMesh::Point'
p114816
sS'default'
p114817
S'0 0 0'
p114818
sS'name'
p114819
S'point'
p114820
sS'required'
p114821
I00
sS'group_name'
p114822
Nsa(dp114823
S'description'
p114824
S'A scale factor to be applied to the function\n'
p114825
sS'cpp_type'
p114826
S'double'
p114827
sS'default'
p114828
S'1'
p114829
sS'name'
p114830
S'scale_factor'
p114831
sS'required'
p114832
I00
sS'group_name'
p114833
Nsa(dp114834
S'description'
p114835
g3
sS'cpp_type'
p114836
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114837
sS'default'
p114838
S'FunctionValuePostprocessor'
p114839
sS'name'
p114840
S'type'
p114841
sS'required'
p114842
I00
sS'group_name'
p114843
Nsa(dp114844
S'description'
p114845
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114846
sS'cpp_type'
p114847
S'bool'
p114848
sS'default'
p114849
S'0'
p114850
sS'name'
p114851
S'use_displaced_mesh'
p114852
sS'required'
p114853
I00
sS'group_name'
p114854
S'Advanced'
p114855
sasS'name'
p114856
S'/UserObjects/FunctionValuePostprocessor'
p114857
sa(dp114858
S'description'
p114859
S'Generalized Plane Strain UserObject to provide Residual and diagonal Jacobian entry\n'
p114860
sS'subblocks'
p114861
NsS'parameters'
p114862
(lp114863
(dp114864
S'description'
p114865
S'Material properties base name\n'
p114866
sS'cpp_type'
p114867
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114868
sS'default'
p114869
g3
sS'name'
p114870
S'base_name'
p114871
sS'required'
p114872
I00
sS'group_name'
p114873
Nsa(dp114874
S'description'
p114875
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114876
sS'cpp_type'
p114877
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114878
sS'default'
p114879
g3
sS'name'
p114880
S'block'
p114881
sS'required'
p114882
I00
sS'group_name'
p114883
Nsa(dp114884
S'description'
p114885
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114886
sS'cpp_type'
p114887
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114888
sS'default'
p114889
g3
sS'name'
p114890
S'control_tags'
p114891
sS'required'
p114892
I00
sS'group_name'
p114893
S'Advanced'
p114894
sa(dp114895
S'description'
p114896
S'Set the enabled status of the MooseObject.\n'
p114897
sS'cpp_type'
p114898
S'bool'
p114899
sS'default'
p114900
S'1'
p114901
sS'name'
p114902
S'enable'
p114903
sS'required'
p114904
I00
sS'group_name'
p114905
S'Advanced'
p114906
sa(dp114907
S'name'
p114908
S'execute_on'
p114909
sS'cpp_type'
p114910
S'MultiMooseEnum'
p114911
sS'default'
p114912
S'LINEAR'
p114913
sS'description'
p114914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114915
sS'required'
p114916
I00
sS'options'
p114917
S'none initial linear nonlinear timestep_end timestep_begin custom'
p114918
sS'group_name'
p114919
Nsa(dp114920
S'description'
p114921
S'Scale factor applied to prescribed pressure\n'
p114922
sS'cpp_type'
p114923
S'double'
p114924
sS'default'
p114925
S'1'
p114926
sS'name'
p114927
S'factor'
p114928
sS'required'
p114929
I00
sS'group_name'
p114930
Nsa(dp114931
S'description'
p114932
S'Function used to prescribe pressure in the out-of-plane direction\n'
p114933
sS'cpp_type'
p114934
S'FunctionName'
p114935
sS'default'
p114936
S'0'
p114937
sS'name'
p114938
S'out_of_plane_pressure'
p114939
sS'required'
p114940
I00
sS'group_name'
p114941
Nsa(dp114942
S'description'
p114943
S'The seed for the master random number generator\n'
p114944
sS'cpp_type'
p114945
S'unsigned int'
p114946
sS'default'
p114947
S'0'
p114948
sS'name'
p114949
S'seed'
p114950
sS'required'
p114951
I00
sS'group_name'
p114952
S'Advanced'
p114953
sa(dp114954
S'description'
p114955
g3
sS'cpp_type'
p114956
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114957
sS'default'
p114958
S'GeneralizedPlaneStrainUserObject'
p114959
sS'name'
p114960
S'type'
p114961
sS'required'
p114962
I00
sS'group_name'
p114963
Nsa(dp114964
S'description'
p114965
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114966
sS'cpp_type'
p114967
S'bool'
p114968
sS'default'
p114969
S'0'
p114970
sS'name'
p114971
S'use_displaced_mesh'
p114972
sS'required'
p114973
I00
sS'group_name'
p114974
S'Advanced'
p114975
sasS'name'
p114976
S'/UserObjects/GeneralizedPlaneStrainUserObject'
p114977
sa(dp114978
S'description'
p114979
S'Calculate total grain boundary length in 2D and area in 3D\n'
p114980
sS'subblocks'
p114981
NsS'parameters'
p114982
(lp114983
(dp114984
S'description'
p114985
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114986
sS'cpp_type'
p114987
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114988
sS'default'
p114989
g3
sS'name'
p114990
S'block'
p114991
sS'required'
p114992
I00
sS'group_name'
p114993
Nsa(dp114994
S'description'
p114995
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114996
sS'cpp_type'
p114997
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114998
sS'default'
p114999
g3
sS'name'
p115000
S'control_tags'
p115001
sS'required'
p115002
I00
sS'group_name'
p115003
S'Advanced'
p115004
sa(dp115005
S'description'
p115006
S'Set the enabled status of the MooseObject.\n'
p115007
sS'cpp_type'
p115008
S'bool'
p115009
sS'default'
p115010
S'1'
p115011
sS'name'
p115012
S'enable'
p115013
sS'required'
p115014
I00
sS'group_name'
p115015
S'Advanced'
p115016
sa(dp115017
S'name'
p115018
S'execute_on'
p115019
sS'cpp_type'
p115020
S'MultiMooseEnum'
p115021
sS'default'
p115022
S'TIMESTEP_END'
p115023
sS'description'
p115024
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115025
sS'required'
p115026
I00
sS'options'
p115027
S'none initial linear nonlinear timestep_end timestep_begin custom'
p115028
sS'group_name'
p115029
Nsa(dp115030
S'description'
p115031
S'Number of order parameters contacting a boundary (should be 2.0 in polycrystals and 1.0 for dispersed particles)\n'
p115032
sS'cpp_type'
p115033
S'double'
p115034
sS'default'
p115035
S'2'
p115036
sS'name'
p115037
S'grains_per_side'
p115038
sS'required'
p115039
I00
sS'group_name'
p115040
Nsa(dp115041
S'description'
p115042
S'Array of coupled variables (num_name)\n'
p115043
sS'cpp_type'
p115044
S'unsigned int'
p115045
sS'default'
p115046
g3
sS'name'
p115047
S'op_num'
p115048
sS'required'
p115049
I00
sS'group_name'
p115050
Nsa(dp115051
S'description'
p115052
S'Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n'
p115053
sS'cpp_type'
p115054
S'double'
p115055
sS'default'
p115056
S'1'
p115057
sS'name'
p115058
S'op_range'
p115059
sS'required'
p115060
I00
sS'group_name'
p115061
Nsa(dp115062
S'description'
p115063
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115064
sS'cpp_type'
p115065
S'std::vector<OutputName, std::allocator<OutputName> >'
p115066
sS'default'
p115067
g3
sS'name'
p115068
S'outputs'
p115069
sS'required'
p115070
I00
sS'group_name'
p115071
S'Advanced'
p115072
sa(dp115073
S'description'
p115074
S'The seed for the master random number generator\n'
p115075
sS'cpp_type'
p115076
S'unsigned int'
p115077
sS'default'
p115078
S'0'
p115079
sS'name'
p115080
S'seed'
p115081
sS'required'
p115082
I00
sS'group_name'
p115083
S'Advanced'
p115084
sa(dp115085
S'description'
p115086
g3
sS'cpp_type'
p115087
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115088
sS'default'
p115089
S'GrainBoundaryArea'
p115090
sS'name'
p115091
S'type'
p115092
sS'required'
p115093
I00
sS'group_name'
p115094
Nsa(dp115095
S'description'
p115096
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115097
sS'cpp_type'
p115098
S'bool'
p115099
sS'default'
p115100
S'0'
p115101
sS'name'
p115102
S'use_displaced_mesh'
p115103
sS'required'
p115104
I00
sS'group_name'
p115105
S'Advanced'
p115106
sa(dp115107
S'description'
p115108
S'Array of coupled variables\n'
p115109
sS'cpp_type'
p115110
S'std::vector<VariableName>'
p115111
sS'default'
p115112
g3
sS'name'
p115113
S'v'
p115114
sS'required'
p115115
I01
sS'group_name'
p115116
Nsa(dp115117
S'description'
p115118
S'Array of coupled variables (base_name)\n'
p115119
sS'cpp_type'
p115120
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115121
sS'default'
p115122
g3
sS'name'
p115123
S'var_name_base'
p115124
sS'required'
p115125
I00
sS'group_name'
p115126
NsasS'name'
p115127
S'/UserObjects/GrainBoundaryArea'
p115128
sa(dp115129
S'description'
p115130
S'Userobject for summing forces and torques acting on a grain\n'
p115131
sS'subblocks'
p115132
NsS'parameters'
p115133
(lp115134
(dp115135
S'description'
p115136
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115137
sS'cpp_type'
p115138
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115139
sS'default'
p115140
g3
sS'name'
p115141
S'control_tags'
p115142
sS'required'
p115143
I00
sS'group_name'
p115144
S'Advanced'
p115145
sa(dp115146
S'description'
p115147
S'Set the enabled status of the MooseObject.\n'
p115148
sS'cpp_type'
p115149
S'bool'
p115150
sS'default'
p115151
S'1'
p115152
sS'name'
p115153
S'enable'
p115154
sS'required'
p115155
I00
sS'group_name'
p115156
S'Advanced'
p115157
sa(dp115158
S'name'
p115159
S'execute_on'
p115160
sS'cpp_type'
p115161
S'MultiMooseEnum'
p115162
sS'default'
p115163
S'TIMESTEP_END'
p115164
sS'description'
p115165
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115166
sS'required'
p115167
I00
sS'options'
p115168
S'none initial linear nonlinear timestep_end timestep_begin custom'
p115169
sS'group_name'
p115170
Nsa(dp115171
S'description'
p115172
S'List of names of user objects that provides forces and torques applied to grains\n'
p115173
sS'cpp_type'
p115174
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p115175
sS'default'
p115176
g3
sS'name'
p115177
S'grain_forces'
p115178
sS'required'
p115179
I00
sS'group_name'
p115180
Nsa(dp115181
S'description'
p115182
S'Number of grains\n'
p115183
sS'cpp_type'
p115184
S'unsigned int'
p115185
sS'default'
p115186
g3
sS'name'
p115187
S'grain_num'
p115188
sS'required'
p115189
I00
sS'group_name'
p115190
Nsa(dp115191
S'description'
p115192
g3
sS'cpp_type'
p115193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115194
sS'default'
p115195
S'GrainForceAndTorqueSum'
p115196
sS'name'
p115197
S'type'
p115198
sS'required'
p115199
I00
sS'group_name'
p115200
Nsa(dp115201
S'description'
p115202
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115203
sS'cpp_type'
p115204
S'bool'
p115205
sS'default'
p115206
S'0'
p115207
sS'name'
p115208
S'use_displaced_mesh'
p115209
sS'required'
p115210
I00
sS'group_name'
p115211
S'Advanced'
p115212
sasS'name'
p115213
S'/UserObjects/GrainForceAndTorqueSum'
p115214
sa(dp115215
S'description'
p115216
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p115217
sS'subblocks'
p115218
NsS'parameters'
p115219
(lp115220
(dp115221
S'description'
p115222
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p115223
sS'cpp_type'
p115224
S'bool'
p115225
sS'default'
p115226
S'0'
p115227
sS'name'
p115228
S'compute_halo_maps'
p115229
sS'required'
p115230
I00
sS'group_name'
p115231
Nsa(dp115232
S'description'
p115233
S'Instruct the Postprocessor to compute the active vars to features map\n'
p115234
sS'cpp_type'
p115235
S'bool'
p115236
sS'default'
p115237
S'0'
p115238
sS'name'
p115239
S'compute_var_to_feature_map'
p115240
sS'required'
p115241
I00
sS'group_name'
p115242
Nsa(dp115243
S'description'
p115244
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p115245
sS'cpp_type'
p115246
S'bool'
p115247
sS'default'
p115248
S'1'
p115249
sS'name'
p115250
S'condense_map_info'
p115251
sS'required'
p115252
I00
sS'group_name'
p115253
S'Advanced'
p115254
sa(dp115255
S'description'
p115256
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p115257
sS'cpp_type'
p115258
S'double'
p115259
sS'default'
p115260
S'0.09'
p115261
sS'name'
p115262
S'connecting_threshold'
p115263
sS'required'
p115264
I00
sS'group_name'
p115265
Nsa(dp115266
S'description'
p115267
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115268
sS'cpp_type'
p115269
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115270
sS'default'
p115271
g3
sS'name'
p115272
S'control_tags'
p115273
sS'required'
p115274
I00
sS'group_name'
p115275
S'Advanced'
p115276
sa(dp115277
S'description'
p115278
S'Optional: EBSD Reader for initial condition\n'
p115279
sS'cpp_type'
p115280
S'UserObjectName'
p115281
sS'default'
p115282
g3
sS'name'
p115283
S'ebsd_reader'
p115284
sS'required'
p115285
I00
sS'group_name'
p115286
Nsa(dp115287
S'description'
p115288
S'Set the enabled status of the MooseObject.\n'
p115289
sS'cpp_type'
p115290
S'bool'
p115291
sS'default'
p115292
S'1'
p115293
sS'name'
p115294
S'enable'
p115295
sS'required'
p115296
I00
sS'group_name'
p115297
S'Advanced'
p115298
sa(dp115299
S'description'
p115300
S'Instruct the Postprocessor to populate the variable index map.\n'
p115301
sS'cpp_type'
p115302
S'bool'
p115303
sS'default'
p115304
S'1'
p115305
sS'name'
p115306
S'enable_var_coloring'
p115307
sS'required'
p115308
I00
sS'group_name'
p115309
Nsa(dp115310
S'description'
p115311
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p115312
sS'cpp_type'
p115313
S'bool'
p115314
sS'default'
p115315
S'0'
p115316
sS'name'
p115317
S'error_on_grain_creation'
p115318
sS'required'
p115319
I00
sS'group_name'
p115320
Nsa(dp115321
S'name'
p115322
S'execute_on'
p115323
sS'cpp_type'
p115324
S'MultiMooseEnum'
p115325
sS'default'
p115326
S'INITIAL TIMESTEP_END'
p115327
sS'description'
p115328
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115329
sS'required'
p115330
I00
sS'options'
p115331
S'none initial linear nonlinear timestep_end timestep_begin custom'
p115332
sS'group_name'
p115333
Nsa(dp115334
S'name'
p115335
S'flood_entity_type'
p115336
sS'cpp_type'
p115337
S'MooseEnum'
p115338
sS'default'
p115339
S'ELEMENTAL'
p115340
sS'description'
p115341
S'Determines whether the flood algorithm runs on nodes or elements\n'
p115342
sS'required'
p115343
I00
sS'options'
p115344
S'NODAL ELEMENTAL'
p115345
sS'group_name'
p115346
Nsa(dp115347
S'description'
p115348
S'The thickness of the halo surrounding each feature.\n'
p115349
sS'cpp_type'
p115350
S'unsigned int'
p115351
sS'default'
p115352
S'2'
p115353
sS'name'
p115354
S'halo_level'
p115355
sS'required'
p115356
I00
sS'group_name'
p115357
Nsa(dp115358
S'description'
p115359
S'Array of coupled variables (num_name)\n'
p115360
sS'cpp_type'
p115361
S'unsigned int'
p115362
sS'default'
p115363
g3
sS'name'
p115364
S'op_num'
p115365
sS'required'
p115366
I00
sS'group_name'
p115367
Nsa(dp115368
S'description'
p115369
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115370
sS'cpp_type'
p115371
S'std::vector<OutputName, std::allocator<OutputName> >'
p115372
sS'default'
p115373
g3
sS'name'
p115374
S'outputs'
p115375
sS'required'
p115376
I00
sS'group_name'
p115377
S'Advanced'
p115378
sa(dp115379
S'description'
p115380
S'EBSD phase number from which to retrieve information\n'
p115381
sS'cpp_type'
p115382
S'unsigned int'
p115383
sS'default'
p115384
g3
sS'name'
p115385
S'phase'
p115386
sS'required'
p115387
I00
sS'group_name'
p115388
Nsa(dp115389
S'description'
p115390
S'Indicates whether remapping should be done or not (default: true)\n'
p115391
sS'cpp_type'
p115392
S'bool'
p115393
sS'default'
p115394
S'1'
p115395
sS'name'
p115396
S'remap_grains'
p115397
sS'required'
p115398
I00
sS'group_name'
p115399
Nsa(dp115400
S'description'
p115401
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p115402
sS'cpp_type'
p115403
S'unsigned short'
p115404
sS'default'
p115405
S'0'
p115406
sS'name'
p115407
S'reserve_op'
p115408
sS'required'
p115409
I00
sS'group_name'
p115410
Nsa(dp115411
S'description'
p115412
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p115413
sS'cpp_type'
p115414
S'double'
p115415
sS'default'
p115416
S'0.95'
p115417
sS'name'
p115418
S'reserve_op_threshold'
p115419
sS'required'
p115420
I00
sS'group_name'
p115421
Nsa(dp115422
S'description'
p115423
S'The threshold value for which a new feature may be started\n'
p115424
sS'cpp_type'
p115425
S'double'
p115426
sS'default'
p115427
S'0.1'
p115428
sS'name'
p115429
S'threshold'
p115430
sS'required'
p115431
I00
sS'group_name'
p115432
Nsa(dp115433
S'description'
p115434
S'The timestep for when we should start tracking grains\n'
p115435
sS'cpp_type'
p115436
S'int'
p115437
sS'default'
p115438
S'0'
p115439
sS'name'
p115440
S'tracking_step'
p115441
sS'required'
p115442
I00
sS'group_name'
p115443
Nsa(dp115444
S'description'
p115445
g3
sS'cpp_type'
p115446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115447
sS'default'
p115448
S'GrainTracker'
p115449
sS'name'
p115450
S'type'
p115451
sS'required'
p115452
I00
sS'group_name'
p115453
Nsa(dp115454
S'description'
p115455
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115456
sS'cpp_type'
p115457
S'bool'
p115458
sS'default'
p115459
S'0'
p115460
sS'name'
p115461
S'use_displaced_mesh'
p115462
sS'required'
p115463
I00
sS'group_name'
p115464
S'Advanced'
p115465
sa(dp115466
S'description'
p115467
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p115468
sS'cpp_type'
p115469
S'bool'
p115470
sS'default'
p115471
S'1'
p115472
sS'name'
p115473
S'use_global_numbering'
p115474
sS'required'
p115475
I00
sS'group_name'
p115476
S'Advanced'
p115477
sa(dp115478
S'description'
p115479
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p115480
sS'cpp_type'
p115481
S'bool'
p115482
sS'default'
p115483
S'1'
p115484
sS'name'
p115485
S'use_less_than_threshold_comparison'
p115486
sS'required'
p115487
I00
sS'group_name'
p115488
Nsa(dp115489
S'description'
p115490
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p115491
sS'cpp_type'
p115492
S'bool'
p115493
sS'default'
p115494
S'0'
p115495
sS'name'
p115496
S'use_single_map'
p115497
sS'required'
p115498
I00
sS'group_name'
p115499
S'Advanced'
p115500
sa(dp115501
S'description'
p115502
S'Array of coupled variables (base_name)\n'
p115503
sS'cpp_type'
p115504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115505
sS'default'
p115506
g3
sS'name'
p115507
S'var_name_base'
p115508
sS'required'
p115509
I00
sS'group_name'
p115510
Nsa(dp115511
S'description'
p115512
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p115513
sS'cpp_type'
p115514
S'std::vector<VariableName>'
p115515
sS'default'
p115516
g3
sS'name'
p115517
S'variable'
p115518
sS'required'
p115519
I01
sS'group_name'
p115520
NsasS'name'
p115521
S'/UserObjects/GrainTracker'
p115522
sa(dp115523
S'description'
p115524
S'Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n'
p115525
sS'subblocks'
p115526
NsS'parameters'
p115527
(lp115528
(dp115529
S'description'
p115530
S'Unrotated stiffness tensor\n'
p115531
sS'cpp_type'
p115532
S'std::vector<double, std::allocator<double> >'
p115533
sS'default'
p115534
g3
sS'name'
p115535
S'C_ijkl'
p115536
sS'required'
p115537
I01
sS'group_name'
p115538
Nsa(dp115539
S'description'
p115540
S'Instruct the Postprocessor to communicate proper halo information to all ranks\n'
p115541
sS'cpp_type'
p115542
S'bool'
p115543
sS'default'
p115544
S'0'
p115545
sS'name'
p115546
S'compute_halo_maps'
p115547
sS'required'
p115548
I00
sS'group_name'
p115549
Nsa(dp115550
S'description'
p115551
S'Instruct the Postprocessor to compute the active vars to features map\n'
p115552
sS'cpp_type'
p115553
S'bool'
p115554
sS'default'
p115555
S'0'
p115556
sS'name'
p115557
S'compute_var_to_feature_map'
p115558
sS'required'
p115559
I00
sS'group_name'
p115560
Nsa(dp115561
S'description'
p115562
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p115563
sS'cpp_type'
p115564
S'bool'
p115565
sS'default'
p115566
S'1'
p115567
sS'name'
p115568
S'condense_map_info'
p115569
sS'required'
p115570
I00
sS'group_name'
p115571
S'Advanced'
p115572
sa(dp115573
S'description'
p115574
S'The threshold for which an existing feature may be extended (defaults to "threshold")\n'
p115575
sS'cpp_type'
p115576
S'double'
p115577
sS'default'
p115578
S'0.09'
p115579
sS'name'
p115580
S'connecting_threshold'
p115581
sS'required'
p115582
I00
sS'group_name'
p115583
Nsa(dp115584
S'description'
p115585
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115586
sS'cpp_type'
p115587
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115588
sS'default'
p115589
g3
sS'name'
p115590
S'control_tags'
p115591
sS'required'
p115592
I00
sS'group_name'
p115593
S'Advanced'
p115594
sa(dp115595
S'description'
p115596
S'Optional: EBSD Reader for initial condition\n'
p115597
sS'cpp_type'
p115598
S'UserObjectName'
p115599
sS'default'
p115600
g3
sS'name'
p115601
S'ebsd_reader'
p115602
sS'required'
p115603
I00
sS'group_name'
p115604
Nsa(dp115605
S'description'
p115606
S'Set the enabled status of the MooseObject.\n'
p115607
sS'cpp_type'
p115608
S'bool'
p115609
sS'default'
p115610
S'1'
p115611
sS'name'
p115612
S'enable'
p115613
sS'required'
p115614
I00
sS'group_name'
p115615
S'Advanced'
p115616
sa(dp115617
S'description'
p115618
S'Instruct the Postprocessor to populate the variable index map.\n'
p115619
sS'cpp_type'
p115620
S'bool'
p115621
sS'default'
p115622
S'1'
p115623
sS'name'
p115624
S'enable_var_coloring'
p115625
sS'required'
p115626
I00
sS'group_name'
p115627
Nsa(dp115628
S'description'
p115629
S'Terminate with an error if a grain is created (does not include initial callback to start simulation)\n'
p115630
sS'cpp_type'
p115631
S'bool'
p115632
sS'default'
p115633
S'0'
p115634
sS'name'
p115635
S'error_on_grain_creation'
p115636
sS'required'
p115637
I00
sS'group_name'
p115638
Nsa(dp115639
S'description'
p115640
S'Name of Euler angle provider user object\n'
p115641
sS'cpp_type'
p115642
S'UserObjectName'
p115643
sS'default'
p115644
g3
sS'name'
p115645
S'euler_angle_provider'
p115646
sS'required'
p115647
I01
sS'group_name'
p115648
Nsa(dp115649
S'name'
p115650
S'execute_on'
p115651
sS'cpp_type'
p115652
S'MultiMooseEnum'
p115653
sS'default'
p115654
S'INITIAL TIMESTEP_END'
p115655
sS'description'
p115656
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115657
sS'required'
p115658
I00
sS'options'
p115659
S'none initial linear nonlinear timestep_end timestep_begin custom'
p115660
sS'group_name'
p115661
Nsa(dp115662
S'name'
p115663
S'fill_method'
p115664
sS'cpp_type'
p115665
S'MooseEnum'
p115666
sS'default'
p115667
S'symmetric9'
p115668
sS'description'
p115669
S'The fill method\n'
p115670
sS'required'
p115671
I00
sS'options'
p115672
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general principal'
p115673
sS'group_name'
p115674
Nsa(dp115675
S'name'
p115676
S'flood_entity_type'
p115677
sS'cpp_type'
p115678
S'MooseEnum'
p115679
sS'default'
p115680
S'ELEMENTAL'
p115681
sS'description'
p115682
S'Determines whether the flood algorithm runs on nodes or elements\n'
p115683
sS'required'
p115684
I00
sS'options'
p115685
S'NODAL ELEMENTAL'
p115686
sS'group_name'
p115687
Nsa(dp115688
S'description'
p115689
S'The thickness of the halo surrounding each feature.\n'
p115690
sS'cpp_type'
p115691
S'unsigned int'
p115692
sS'default'
p115693
S'2'
p115694
sS'name'
p115695
S'halo_level'
p115696
sS'required'
p115697
I00
sS'group_name'
p115698
Nsa(dp115699
S'description'
p115700
S'Array of coupled variables (num_name)\n'
p115701
sS'cpp_type'
p115702
S'unsigned int'
p115703
sS'default'
p115704
g3
sS'name'
p115705
S'op_num'
p115706
sS'required'
p115707
I00
sS'group_name'
p115708
Nsa(dp115709
S'description'
p115710
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115711
sS'cpp_type'
p115712
S'std::vector<OutputName, std::allocator<OutputName> >'
p115713
sS'default'
p115714
g3
sS'name'
p115715
S'outputs'
p115716
sS'required'
p115717
I00
sS'group_name'
p115718
S'Advanced'
p115719
sa(dp115720
S'description'
p115721
S'EBSD phase number from which to retrieve information\n'
p115722
sS'cpp_type'
p115723
S'unsigned int'
p115724
sS'default'
p115725
g3
sS'name'
p115726
S'phase'
p115727
sS'required'
p115728
I00
sS'group_name'
p115729
Nsa(dp115730
S'description'
p115731
S'Generate random rotations when the Euler Angle provider runs out of data (otherwise error out)\n'
p115732
sS'cpp_type'
p115733
S'bool'
p115734
sS'default'
p115735
S'1'
p115736
sS'name'
p115737
S'random_rotations'
p115738
sS'required'
p115739
I00
sS'group_name'
p115740
Nsa(dp115741
S'description'
p115742
S'Indicates whether remapping should be done or not (default: true)\n'
p115743
sS'cpp_type'
p115744
S'bool'
p115745
sS'default'
p115746
S'1'
p115747
sS'name'
p115748
S'remap_grains'
p115749
sS'required'
p115750
I00
sS'group_name'
p115751
Nsa(dp115752
S'description'
p115753
S'Indicates the number of reserved ops (variables that cannot be remapped to)\n'
p115754
sS'cpp_type'
p115755
S'unsigned short'
p115756
sS'default'
p115757
S'0'
p115758
sS'name'
p115759
S'reserve_op'
p115760
sS'required'
p115761
I00
sS'group_name'
p115762
Nsa(dp115763
S'description'
p115764
S'Threshold for locating a new feature on the reserved op variable(s)\n'
p115765
sS'cpp_type'
p115766
S'double'
p115767
sS'default'
p115768
S'0.95'
p115769
sS'name'
p115770
S'reserve_op_threshold'
p115771
sS'required'
p115772
I00
sS'group_name'
p115773
Nsa(dp115774
S'description'
p115775
S'The threshold value for which a new feature may be started\n'
p115776
sS'cpp_type'
p115777
S'double'
p115778
sS'default'
p115779
S'0.1'
p115780
sS'name'
p115781
S'threshold'
p115782
sS'required'
p115783
I00
sS'group_name'
p115784
Nsa(dp115785
S'description'
p115786
S'The timestep for when we should start tracking grains\n'
p115787
sS'cpp_type'
p115788
S'int'
p115789
sS'default'
p115790
S'0'
p115791
sS'name'
p115792
S'tracking_step'
p115793
sS'required'
p115794
I00
sS'group_name'
p115795
Nsa(dp115796
S'description'
p115797
g3
sS'cpp_type'
p115798
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115799
sS'default'
p115800
S'GrainTrackerElasticity'
p115801
sS'name'
p115802
S'type'
p115803
sS'required'
p115804
I00
sS'group_name'
p115805
Nsa(dp115806
S'description'
p115807
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115808
sS'cpp_type'
p115809
S'bool'
p115810
sS'default'
p115811
S'0'
p115812
sS'name'
p115813
S'use_displaced_mesh'
p115814
sS'required'
p115815
I00
sS'group_name'
p115816
S'Advanced'
p115817
sa(dp115818
S'description'
p115819
S'Determine whether or not global numbers are used to label features on multiple maps (default: true)\n'
p115820
sS'cpp_type'
p115821
S'bool'
p115822
sS'default'
p115823
S'1'
p115824
sS'name'
p115825
S'use_global_numbering'
p115826
sS'required'
p115827
I00
sS'group_name'
p115828
S'Advanced'
p115829
sa(dp115830
S'description'
p115831
S'Controls whether features are defined to be less than or greater than the threshold value.\n'
p115832
sS'cpp_type'
p115833
S'bool'
p115834
sS'default'
p115835
S'1'
p115836
sS'name'
p115837
S'use_less_than_threshold_comparison'
p115838
sS'required'
p115839
I00
sS'group_name'
p115840
Nsa(dp115841
S'description'
p115842
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p115843
sS'cpp_type'
p115844
S'bool'
p115845
sS'default'
p115846
S'0'
p115847
sS'name'
p115848
S'use_single_map'
p115849
sS'required'
p115850
I00
sS'group_name'
p115851
S'Advanced'
p115852
sa(dp115853
S'description'
p115854
S'Array of coupled variables (base_name)\n'
p115855
sS'cpp_type'
p115856
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115857
sS'default'
p115858
g3
sS'name'
p115859
S'var_name_base'
p115860
sS'required'
p115861
I00
sS'group_name'
p115862
Nsa(dp115863
S'description'
p115864
S'The variable(s) for which to find connected regions of interests, i.e. "features".\n'
p115865
sS'cpp_type'
p115866
S'std::vector<VariableName>'
p115867
sS'default'
p115868
g3
sS'name'
p115869
S'variable'
p115870
sS'required'
p115871
I01
sS'group_name'
p115872
NsasS'name'
p115873
S'/UserObjects/GrainTrackerElasticity'
p115874
sa(dp115875
S'description'
p115876
S'User Object to integrate equivalent plastic strain\n'
p115877
sS'subblocks'
p115878
NsS'parameters'
p115879
(lp115880
(dp115881
S'description'
p115882
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115883
sS'cpp_type'
p115884
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115885
sS'default'
p115886
g3
sS'name'
p115887
S'block'
p115888
sS'required'
p115889
I00
sS'group_name'
p115890
Nsa(dp115891
S'description'
p115892
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115893
sS'cpp_type'
p115894
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115895
sS'default'
p115896
g3
sS'name'
p115897
S'control_tags'
p115898
sS'required'
p115899
I00
sS'group_name'
p115900
S'Advanced'
p115901
sa(dp115902
S'description'
p115903
S'Set the enabled status of the MooseObject.\n'
p115904
sS'cpp_type'
p115905
S'bool'
p115906
sS'default'
p115907
S'1'
p115908
sS'name'
p115909
S'enable'
p115910
sS'required'
p115911
I00
sS'group_name'
p115912
S'Advanced'
p115913
sa(dp115914
S'description'
p115915
S'Name of internal variable property: Same as internal variable rate user object\n'
p115916
sS'cpp_type'
p115917
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115918
sS'default'
p115919
g3
sS'name'
p115920
S'intvar_rate_prop_name'
p115921
sS'required'
p115922
I00
sS'group_name'
p115923
Nsa(dp115924
S'description'
p115925
S'The seed for the master random number generator\n'
p115926
sS'cpp_type'
p115927
S'unsigned int'
p115928
sS'default'
p115929
S'0'
p115930
sS'name'
p115931
S'seed'
p115932
sS'required'
p115933
I00
sS'group_name'
p115934
S'Advanced'
p115935
sa(dp115936
S'description'
p115937
g3
sS'cpp_type'
p115938
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115939
sS'default'
p115940
S'HEVPEqvPlasticStrain'
p115941
sS'name'
p115942
S'type'
p115943
sS'required'
p115944
I00
sS'group_name'
p115945
Nsa(dp115946
S'description'
p115947
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115948
sS'cpp_type'
p115949
S'bool'
p115950
sS'default'
p115951
S'0'
p115952
sS'name'
p115953
S'use_displaced_mesh'
p115954
sS'required'
p115955
I00
sS'group_name'
p115956
S'Advanced'
p115957
sasS'name'
p115958
S'/UserObjects/HEVPEqvPlasticStrain'
p115959
sa(dp115960
S'description'
p115961
S'User Object computing equivalent plastic strain rate\n'
p115962
sS'subblocks'
p115963
NsS'parameters'
p115964
(lp115965
(dp115966
S'description'
p115967
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115968
sS'cpp_type'
p115969
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115970
sS'default'
p115971
g3
sS'name'
p115972
S'block'
p115973
sS'required'
p115974
I00
sS'group_name'
p115975
Nsa(dp115976
S'description'
p115977
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115978
sS'cpp_type'
p115979
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115980
sS'default'
p115981
g3
sS'name'
p115982
S'control_tags'
p115983
sS'required'
p115984
I00
sS'group_name'
p115985
S'Advanced'
p115986
sa(dp115987
S'description'
p115988
S'Set the enabled status of the MooseObject.\n'
p115989
sS'cpp_type'
p115990
S'bool'
p115991
sS'default'
p115992
S'1'
p115993
sS'name'
p115994
S'enable'
p115995
sS'required'
p115996
I00
sS'group_name'
p115997
S'Advanced'
p115998
sa(dp115999
S'description'
p116000
S'Name of flow rate property: Same as the flow rate user object name specified in input file\n'
p116001
sS'cpp_type'
p116002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116003
sS'default'
p116004
g3
sS'name'
p116005
S'flow_rate_prop_name'
p116006
sS'required'
p116007
I00
sS'group_name'
p116008
Nsa(dp116009
S'description'
p116010
S'Scaling parameter\n'
p116011
sS'cpp_type'
p116012
S'double'
p116013
sS'default'
p116014
S'1'
p116015
sS'name'
p116016
S'h_scaling'
p116017
sS'required'
p116018
I00
sS'group_name'
p116019
Nsa(dp116020
S'description'
p116021
S'The seed for the master random number generator\n'
p116022
sS'cpp_type'
p116023
S'unsigned int'
p116024
sS'default'
p116025
S'0'
p116026
sS'name'
p116027
S'seed'
p116028
sS'required'
p116029
I00
sS'group_name'
p116030
S'Advanced'
p116031
sa(dp116032
S'description'
p116033
g3
sS'cpp_type'
p116034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116035
sS'default'
p116036
S'HEVPEqvPlasticStrainRate'
p116037
sS'name'
p116038
S'type'
p116039
sS'required'
p116040
I00
sS'group_name'
p116041
Nsa(dp116042
S'description'
p116043
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116044
sS'cpp_type'
p116045
S'bool'
p116046
sS'default'
p116047
S'0'
p116048
sS'name'
p116049
S'use_displaced_mesh'
p116050
sS'required'
p116051
I00
sS'group_name'
p116052
S'Advanced'
p116053
sasS'name'
p116054
S'/UserObjects/HEVPEqvPlasticStrainRate'
p116055
sa(dp116056
S'description'
p116057
S'User object to evaluate power law flow rate and flow direction based on J2\n'
p116058
sS'subblocks'
p116059
NsS'parameters'
p116060
(lp116061
(dp116062
S'description'
p116063
S'Base name of tensor properties to fetch\n'
p116064
sS'cpp_type'
p116065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116066
sS'default'
p116067
g3
sS'name'
p116068
S'base_name'
p116069
sS'required'
p116070
I00
sS'group_name'
p116071
Nsa(dp116072
S'description'
p116073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116074
sS'cpp_type'
p116075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116076
sS'default'
p116077
g3
sS'name'
p116078
S'block'
p116079
sS'required'
p116080
I00
sS'group_name'
p116081
Nsa(dp116082
S'description'
p116083
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116084
sS'cpp_type'
p116085
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116086
sS'default'
p116087
g3
sS'name'
p116088
S'control_tags'
p116089
sS'required'
p116090
I00
sS'group_name'
p116091
S'Advanced'
p116092
sa(dp116093
S'description'
p116094
S'Set the enabled status of the MooseObject.\n'
p116095
sS'cpp_type'
p116096
S'bool'
p116097
sS'default'
p116098
S'1'
p116099
sS'name'
p116100
S'enable'
p116101
sS'required'
p116102
I00
sS'group_name'
p116103
S'Advanced'
p116104
sa(dp116105
S'description'
p116106
S'Power law exponent in flow rate equation\n'
p116107
sS'cpp_type'
p116108
S'double'
p116109
sS'default'
p116110
S'10'
p116111
sS'name'
p116112
S'flow_rate_exponent'
p116113
sS'required'
p116114
I00
sS'group_name'
p116115
Nsa(dp116116
S'description'
p116117
S'Tolerance for flow rate\n'
p116118
sS'cpp_type'
p116119
S'double'
p116120
sS'default'
p116121
S'1000'
p116122
sS'name'
p116123
S'flow_rate_tol'
p116124
sS'required'
p116125
I00
sS'group_name'
p116126
Nsa(dp116127
S'description'
p116128
S'Reference flow rate for rate dependent flow\n'
p116129
sS'cpp_type'
p116130
S'double'
p116131
sS'default'
p116132
S'0.001'
p116133
sS'name'
p116134
S'reference_flow_rate'
p116135
sS'required'
p116136
I00
sS'group_name'
p116137
Nsa(dp116138
S'description'
p116139
S'The seed for the master random number generator\n'
p116140
sS'cpp_type'
p116141
S'unsigned int'
p116142
sS'default'
p116143
S'0'
p116144
sS'name'
p116145
S'seed'
p116146
sS'required'
p116147
I00
sS'group_name'
p116148
S'Advanced'
p116149
sa(dp116150
S'description'
p116151
S'Name of strength property: Same as strength user object specified in input file\n'
p116152
sS'cpp_type'
p116153
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116154
sS'default'
p116155
g3
sS'name'
p116156
S'strength_prop_name'
p116157
sS'required'
p116158
I00
sS'group_name'
p116159
Nsa(dp116160
S'description'
p116161
g3
sS'cpp_type'
p116162
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116163
sS'default'
p116164
S'HEVPFlowRatePowerLawJ2'
p116165
sS'name'
p116166
S'type'
p116167
sS'required'
p116168
I00
sS'group_name'
p116169
Nsa(dp116170
S'description'
p116171
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116172
sS'cpp_type'
p116173
S'bool'
p116174
sS'default'
p116175
S'0'
p116176
sS'name'
p116177
S'use_displaced_mesh'
p116178
sS'required'
p116179
I00
sS'group_name'
p116180
S'Advanced'
p116181
sasS'name'
p116182
S'/UserObjects/HEVPFlowRatePowerLawJ2'
p116183
sa(dp116184
S'description'
p116185
S'User Object for linear hardening\n'
p116186
sS'subblocks'
p116187
NsS'parameters'
p116188
(lp116189
(dp116190
S'description'
p116191
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116192
sS'cpp_type'
p116193
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116194
sS'default'
p116195
g3
sS'name'
p116196
S'block'
p116197
sS'required'
p116198
I00
sS'group_name'
p116199
Nsa(dp116200
S'description'
p116201
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116202
sS'cpp_type'
p116203
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116204
sS'default'
p116205
g3
sS'name'
p116206
S'control_tags'
p116207
sS'required'
p116208
I00
sS'group_name'
p116209
S'Advanced'
p116210
sa(dp116211
S'description'
p116212
S'Set the enabled status of the MooseObject.\n'
p116213
sS'cpp_type'
p116214
S'bool'
p116215
sS'default'
p116216
S'1'
p116217
sS'name'
p116218
S'enable'
p116219
sS'required'
p116220
I00
sS'group_name'
p116221
S'Advanced'
p116222
sa(dp116223
S'description'
p116224
S'Name of internal variable property to calculate material resistance: Same as internal variable user object\n'
p116225
sS'cpp_type'
p116226
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116227
sS'default'
p116228
g3
sS'name'
p116229
S'intvar_prop_name'
p116230
sS'required'
p116231
I00
sS'group_name'
p116232
Nsa(dp116233
S'description'
p116234
S'The seed for the master random number generator\n'
p116235
sS'cpp_type'
p116236
S'unsigned int'
p116237
sS'default'
p116238
S'0'
p116239
sS'name'
p116240
S'seed'
p116241
sS'required'
p116242
I00
sS'group_name'
p116243
S'Advanced'
p116244
sa(dp116245
S'description'
p116246
S'Linear hardening slope\n'
p116247
sS'cpp_type'
p116248
S'double'
p116249
sS'default'
p116250
g3
sS'name'
p116251
S'slope'
p116252
sS'required'
p116253
I00
sS'group_name'
p116254
Nsa(dp116255
S'description'
p116256
g3
sS'cpp_type'
p116257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116258
sS'default'
p116259
S'HEVPLinearHardening'
p116260
sS'name'
p116261
S'type'
p116262
sS'required'
p116263
I00
sS'group_name'
p116264
Nsa(dp116265
S'description'
p116266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116267
sS'cpp_type'
p116268
S'bool'
p116269
sS'default'
p116270
S'0'
p116271
sS'name'
p116272
S'use_displaced_mesh'
p116273
sS'required'
p116274
I00
sS'group_name'
p116275
S'Advanced'
p116276
sa(dp116277
S'description'
p116278
S'Yield strength\n'
p116279
sS'cpp_type'
p116280
S'double'
p116281
sS'default'
p116282
g3
sS'name'
p116283
S'yield_stress'
p116284
sS'required'
p116285
I00
sS'group_name'
p116286
NsasS'name'
p116287
S'/UserObjects/HEVPLinearHardening'
p116288
sa(dp116289
S'description'
p116290
S'User object for Ramberg-Osgood hardening power law hardening\n'
p116291
sS'subblocks'
p116292
NsS'parameters'
p116293
(lp116294
(dp116295
S'description'
p116296
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116297
sS'cpp_type'
p116298
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116299
sS'default'
p116300
g3
sS'name'
p116301
S'block'
p116302
sS'required'
p116303
I00
sS'group_name'
p116304
Nsa(dp116305
S'description'
p116306
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116307
sS'cpp_type'
p116308
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116309
sS'default'
p116310
g3
sS'name'
p116311
S'control_tags'
p116312
sS'required'
p116313
I00
sS'group_name'
p116314
S'Advanced'
p116315
sa(dp116316
S'description'
p116317
S'Set the enabled status of the MooseObject.\n'
p116318
sS'cpp_type'
p116319
S'bool'
p116320
sS'default'
p116321
S'1'
p116322
sS'name'
p116323
S'enable'
p116324
sS'required'
p116325
I00
sS'group_name'
p116326
S'Advanced'
p116327
sa(dp116328
S'description'
p116329
S'The hardening exponent value\n'
p116330
sS'cpp_type'
p116331
S'double'
p116332
sS'default'
p116333
g3
sS'name'
p116334
S'hardening_exponent'
p116335
sS'required'
p116336
I01
sS'group_name'
p116337
Nsa(dp116338
S'description'
p116339
S'Name of internal variable property to calculate material resistance: Same as internal variable user object\n'
p116340
sS'cpp_type'
p116341
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116342
sS'default'
p116343
g3
sS'name'
p116344
S'intvar_prop_name'
p116345
sS'required'
p116346
I00
sS'group_name'
p116347
Nsa(dp116348
S'description'
p116349
S'Reference plastic strain value\n'
p116350
sS'cpp_type'
p116351
S'double'
p116352
sS'default'
p116353
g3
sS'name'
p116354
S'reference_plastic_strain'
p116355
sS'required'
p116356
I01
sS'group_name'
p116357
Nsa(dp116358
S'description'
p116359
S'The seed for the master random number generator\n'
p116360
sS'cpp_type'
p116361
S'unsigned int'
p116362
sS'default'
p116363
S'0'
p116364
sS'name'
p116365
S'seed'
p116366
sS'required'
p116367
I00
sS'group_name'
p116368
S'Advanced'
p116369
sa(dp116370
S'description'
p116371
g3
sS'cpp_type'
p116372
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116373
sS'default'
p116374
S'HEVPRambergOsgoodHardening'
p116375
sS'name'
p116376
S'type'
p116377
sS'required'
p116378
I00
sS'group_name'
p116379
Nsa(dp116380
S'description'
p116381
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116382
sS'cpp_type'
p116383
S'bool'
p116384
sS'default'
p116385
S'0'
p116386
sS'name'
p116387
S'use_displaced_mesh'
p116388
sS'required'
p116389
I00
sS'group_name'
p116390
S'Advanced'
p116391
sa(dp116392
S'description'
p116393
S'Yield strength\n'
p116394
sS'cpp_type'
p116395
S'double'
p116396
sS'default'
p116397
g3
sS'name'
p116398
S'yield_stress'
p116399
sS'required'
p116400
I00
sS'group_name'
p116401
NsasS'name'
p116402
S'/UserObjects/HEVPRambergOsgoodHardening'
p116403
sa(dp116404
S'description'
p116405
g3
sS'subblocks'
p116406
NsS'parameters'
p116407
(lp116408
(dp116409
S'description'
p116410
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116411
sS'cpp_type'
p116412
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116413
sS'default'
p116414
g3
sS'name'
p116415
S'block'
p116416
sS'required'
p116417
I00
sS'group_name'
p116418
Nsa(dp116419
S'description'
p116420
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116421
sS'cpp_type'
p116422
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116423
sS'default'
p116424
g3
sS'name'
p116425
S'boundary'
p116426
sS'required'
p116427
I00
sS'group_name'
p116428
Nsa(dp116429
S'description'
p116430
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116431
sS'cpp_type'
p116432
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116433
sS'default'
p116434
g3
sS'name'
p116435
S'control_tags'
p116436
sS'required'
p116437
I00
sS'group_name'
p116438
S'Advanced'
p116439
sa(dp116440
S'description'
p116441
S'Set the enabled status of the MooseObject.\n'
p116442
sS'cpp_type'
p116443
S'bool'
p116444
sS'default'
p116445
S'1'
p116446
sS'name'
p116447
S'enable'
p116448
sS'required'
p116449
I00
sS'group_name'
p116450
S'Advanced'
p116451
sa(dp116452
S'description'
p116453
S'Array containing the rest of the order parameters\n'
p116454
sS'cpp_type'
p116455
S'std::vector<VariableName>'
p116456
sS'default'
p116457
g3
sS'name'
p116458
S'eta'
p116459
sS'required'
p116460
I01
sS'group_name'
p116461
Nsa(dp116462
S'name'
p116463
S'execute_on'
p116464
sS'cpp_type'
p116465
S'MultiMooseEnum'
p116466
sS'default'
p116467
S'TIMESTEP_END'
p116468
sS'description'
p116469
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116470
sS'required'
p116471
I00
sS'options'
p116472
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116473
sS'group_name'
p116474
Nsa(dp116475
S'description'
p116476
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p116477
sS'cpp_type'
p116478
S'std::vector<OutputName, std::allocator<OutputName> >'
p116479
sS'default'
p116480
g3
sS'name'
p116481
S'outputs'
p116482
sS'required'
p116483
I00
sS'group_name'
p116484
S'Advanced'
p116485
sa(dp116486
S'description'
p116487
S'The seed for the master random number generator\n'
p116488
sS'cpp_type'
p116489
S'unsigned int'
p116490
sS'default'
p116491
S'0'
p116492
sS'name'
p116493
S'seed'
p116494
sS'required'
p116495
I00
sS'group_name'
p116496
S'Advanced'
p116497
sa(dp116498
S'description'
p116499
g3
sS'cpp_type'
p116500
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116501
sS'default'
p116502
S'IMCFraction'
p116503
sS'name'
p116504
S'type'
p116505
sS'required'
p116506
I00
sS'group_name'
p116507
Nsa(dp116508
S'description'
p116509
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p116510
sS'cpp_type'
p116511
S'bool'
p116512
sS'default'
p116513
S'1'
p116514
sS'name'
p116515
S'unique_node_execute'
p116516
sS'required'
p116517
I00
sS'group_name'
p116518
Nsa(dp116519
S'description'
p116520
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116521
sS'cpp_type'
p116522
S'bool'
p116523
sS'default'
p116524
S'0'
p116525
sS'name'
p116526
S'use_displaced_mesh'
p116527
sS'required'
p116528
I00
sS'group_name'
p116529
S'Advanced'
p116530
sa(dp116531
S'description'
p116532
S'The name of the variable that this postprocessor operates on\n'
p116533
sS'cpp_type'
p116534
S'std::vector<VariableName>'
p116535
sS'default'
p116536
g3
sS'name'
p116537
S'variable'
p116538
sS'required'
p116539
I01
sS'group_name'
p116540
NsasS'name'
p116541
S'/UserObjects/IMCFraction'
p116542
sa(dp116543
S'description'
p116544
g3
sS'subblocks'
p116545
NsS'parameters'
p116546
(lp116547
(dp116548
S'description'
p116549
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116550
sS'cpp_type'
p116551
S'unsigned int'
p116552
sS'default'
p116553
S'1'
p116554
sS'name'
p116555
S'average_radius'
p116556
sS'required'
p116557
I00
sS'group_name'
p116558
Nsa(dp116559
S'description'
p116560
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116561
sS'cpp_type'
p116562
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116563
sS'default'
p116564
g3
sS'name'
p116565
S'block'
p116566
sS'required'
p116567
I00
sS'group_name'
p116568
Nsa(dp116569
S'description'
p116570
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116571
sS'cpp_type'
p116572
S'std::vector<double, std::allocator<double> >'
p116573
sS'default'
p116574
g3
sS'name'
p116575
S'bounds'
p116576
sS'required'
p116577
I00
sS'group_name'
p116578
Nsa(dp116579
S'description'
p116580
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116581
sS'cpp_type'
p116582
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116583
sS'default'
p116584
g3
sS'name'
p116585
S'control_tags'
p116586
sS'required'
p116587
I00
sS'group_name'
p116588
S'Advanced'
p116589
sa(dp116590
S'description'
p116591
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116592
sS'cpp_type'
p116593
S'bool'
p116594
sS'default'
p116595
S'0'
p116596
sS'name'
p116597
S'cumulative'
p116598
sS'required'
p116599
I00
sS'group_name'
p116600
Nsa(dp116601
S'name'
p116602
S'direction'
p116603
sS'cpp_type'
p116604
S'MooseEnum'
p116605
sS'default'
p116606
g3
sS'description'
p116607
S'The direction of the layers.\n'
p116608
sS'required'
p116609
I01
sS'options'
p116610
S'x y z'
p116611
sS'group_name'
p116612
Nsa(dp116613
S'description'
p116614
S'Set the enabled status of the MooseObject.\n'
p116615
sS'cpp_type'
p116616
S'bool'
p116617
sS'default'
p116618
S'1'
p116619
sS'name'
p116620
S'enable'
p116621
sS'required'
p116622
I00
sS'group_name'
p116623
S'Advanced'
p116624
sa(dp116625
S'name'
p116626
S'execute_on'
p116627
sS'cpp_type'
p116628
S'MultiMooseEnum'
p116629
sS'default'
p116630
S'TIMESTEP_END'
p116631
sS'description'
p116632
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116633
sS'required'
p116634
I00
sS'options'
p116635
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116636
sS'group_name'
p116637
Nsa(dp116638
S'description'
p116639
S'The number of layers.\n'
p116640
sS'cpp_type'
p116641
S'unsigned int'
p116642
sS'default'
p116643
g3
sS'name'
p116644
S'num_layers'
p116645
sS'required'
p116646
I00
sS'group_name'
p116647
Nsa(dp116648
S'name'
p116649
S'sample_type'
p116650
sS'cpp_type'
p116651
S'MooseEnum'
p116652
sS'default'
p116653
S'direct'
p116654
sS'description'
p116655
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116656
sS'required'
p116657
I00
sS'options'
p116658
S'direct interpolate average'
p116659
sS'group_name'
p116660
Nsa(dp116661
S'description'
p116662
S'The seed for the master random number generator\n'
p116663
sS'cpp_type'
p116664
S'unsigned int'
p116665
sS'default'
p116666
S'0'
p116667
sS'name'
p116668
S'seed'
p116669
sS'required'
p116670
I00
sS'group_name'
p116671
S'Advanced'
p116672
sa(dp116673
S'description'
p116674
g3
sS'cpp_type'
p116675
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116676
sS'default'
p116677
S'LayeredAverage'
p116678
sS'name'
p116679
S'type'
p116680
sS'required'
p116681
I00
sS'group_name'
p116682
Nsa(dp116683
S'description'
p116684
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116685
sS'cpp_type'
p116686
S'bool'
p116687
sS'default'
p116688
S'0'
p116689
sS'name'
p116690
S'use_displaced_mesh'
p116691
sS'required'
p116692
I00
sS'group_name'
p116693
S'Advanced'
p116694
sa(dp116695
S'description'
p116696
S'The name of the variable that this object operates on\n'
p116697
sS'cpp_type'
p116698
S'std::vector<VariableName>'
p116699
sS'default'
p116700
g3
sS'name'
p116701
S'variable'
p116702
sS'required'
p116703
I01
sS'group_name'
p116704
NsasS'name'
p116705
S'/UserObjects/LayeredAverage'
p116706
sa(dp116707
S'description'
p116708
g3
sS'subblocks'
p116709
NsS'parameters'
p116710
(lp116711
(dp116712
S'description'
p116713
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116714
sS'cpp_type'
p116715
S'unsigned int'
p116716
sS'default'
p116717
S'1'
p116718
sS'name'
p116719
S'average_radius'
p116720
sS'required'
p116721
I00
sS'group_name'
p116722
Nsa(dp116723
S'description'
p116724
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116725
sS'cpp_type'
p116726
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116727
sS'default'
p116728
g3
sS'name'
p116729
S'block'
p116730
sS'required'
p116731
I00
sS'group_name'
p116732
Nsa(dp116733
S'description'
p116734
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116735
sS'cpp_type'
p116736
S'std::vector<double, std::allocator<double> >'
p116737
sS'default'
p116738
g3
sS'name'
p116739
S'bounds'
p116740
sS'required'
p116741
I00
sS'group_name'
p116742
Nsa(dp116743
S'description'
p116744
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116745
sS'cpp_type'
p116746
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116747
sS'default'
p116748
g3
sS'name'
p116749
S'control_tags'
p116750
sS'required'
p116751
I00
sS'group_name'
p116752
S'Advanced'
p116753
sa(dp116754
S'description'
p116755
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116756
sS'cpp_type'
p116757
S'bool'
p116758
sS'default'
p116759
S'0'
p116760
sS'name'
p116761
S'cumulative'
p116762
sS'required'
p116763
I00
sS'group_name'
p116764
Nsa(dp116765
S'name'
p116766
S'direction'
p116767
sS'cpp_type'
p116768
S'MooseEnum'
p116769
sS'default'
p116770
g3
sS'description'
p116771
S'The direction of the layers.\n'
p116772
sS'required'
p116773
I01
sS'options'
p116774
S'x y z'
p116775
sS'group_name'
p116776
Nsa(dp116777
S'description'
p116778
S'Set the enabled status of the MooseObject.\n'
p116779
sS'cpp_type'
p116780
S'bool'
p116781
sS'default'
p116782
S'1'
p116783
sS'name'
p116784
S'enable'
p116785
sS'required'
p116786
I00
sS'group_name'
p116787
S'Advanced'
p116788
sa(dp116789
S'name'
p116790
S'execute_on'
p116791
sS'cpp_type'
p116792
S'MultiMooseEnum'
p116793
sS'default'
p116794
S'TIMESTEP_END'
p116795
sS'description'
p116796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116797
sS'required'
p116798
I00
sS'options'
p116799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116800
sS'group_name'
p116801
Nsa(dp116802
S'description'
p116803
S'The number of layers.\n'
p116804
sS'cpp_type'
p116805
S'unsigned int'
p116806
sS'default'
p116807
g3
sS'name'
p116808
S'num_layers'
p116809
sS'required'
p116810
I00
sS'group_name'
p116811
Nsa(dp116812
S'name'
p116813
S'sample_type'
p116814
sS'cpp_type'
p116815
S'MooseEnum'
p116816
sS'default'
p116817
S'direct'
p116818
sS'description'
p116819
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116820
sS'required'
p116821
I00
sS'options'
p116822
S'direct interpolate average'
p116823
sS'group_name'
p116824
Nsa(dp116825
S'description'
p116826
S'The seed for the master random number generator\n'
p116827
sS'cpp_type'
p116828
S'unsigned int'
p116829
sS'default'
p116830
S'0'
p116831
sS'name'
p116832
S'seed'
p116833
sS'required'
p116834
I00
sS'group_name'
p116835
S'Advanced'
p116836
sa(dp116837
S'description'
p116838
g3
sS'cpp_type'
p116839
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116840
sS'default'
p116841
S'LayeredIntegral'
p116842
sS'name'
p116843
S'type'
p116844
sS'required'
p116845
I00
sS'group_name'
p116846
Nsa(dp116847
S'description'
p116848
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116849
sS'cpp_type'
p116850
S'bool'
p116851
sS'default'
p116852
S'0'
p116853
sS'name'
p116854
S'use_displaced_mesh'
p116855
sS'required'
p116856
I00
sS'group_name'
p116857
S'Advanced'
p116858
sa(dp116859
S'description'
p116860
S'The name of the variable that this object operates on\n'
p116861
sS'cpp_type'
p116862
S'std::vector<VariableName>'
p116863
sS'default'
p116864
g3
sS'name'
p116865
S'variable'
p116866
sS'required'
p116867
I01
sS'group_name'
p116868
NsasS'name'
p116869
S'/UserObjects/LayeredIntegral'
p116870
sa(dp116871
S'description'
p116872
g3
sS'subblocks'
p116873
NsS'parameters'
p116874
(lp116875
(dp116876
S'description'
p116877
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116878
sS'cpp_type'
p116879
S'unsigned int'
p116880
sS'default'
p116881
S'1'
p116882
sS'name'
p116883
S'average_radius'
p116884
sS'required'
p116885
I00
sS'group_name'
p116886
Nsa(dp116887
S'description'
p116888
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116889
sS'cpp_type'
p116890
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116891
sS'default'
p116892
g3
sS'name'
p116893
S'boundary'
p116894
sS'required'
p116895
I01
sS'group_name'
p116896
Nsa(dp116897
S'description'
p116898
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116899
sS'cpp_type'
p116900
S'std::vector<double, std::allocator<double> >'
p116901
sS'default'
p116902
g3
sS'name'
p116903
S'bounds'
p116904
sS'required'
p116905
I00
sS'group_name'
p116906
Nsa(dp116907
S'description'
p116908
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116909
sS'cpp_type'
p116910
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116911
sS'default'
p116912
g3
sS'name'
p116913
S'control_tags'
p116914
sS'required'
p116915
I00
sS'group_name'
p116916
S'Advanced'
p116917
sa(dp116918
S'description'
p116919
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p116920
sS'cpp_type'
p116921
S'bool'
p116922
sS'default'
p116923
S'0'
p116924
sS'name'
p116925
S'cumulative'
p116926
sS'required'
p116927
I00
sS'group_name'
p116928
Nsa(dp116929
S'name'
p116930
S'direction'
p116931
sS'cpp_type'
p116932
S'MooseEnum'
p116933
sS'default'
p116934
g3
sS'description'
p116935
S'The direction of the layers.\n'
p116936
sS'required'
p116937
I01
sS'options'
p116938
S'x y z'
p116939
sS'group_name'
p116940
Nsa(dp116941
S'description'
p116942
S'Set the enabled status of the MooseObject.\n'
p116943
sS'cpp_type'
p116944
S'bool'
p116945
sS'default'
p116946
S'1'
p116947
sS'name'
p116948
S'enable'
p116949
sS'required'
p116950
I00
sS'group_name'
p116951
S'Advanced'
p116952
sa(dp116953
S'name'
p116954
S'execute_on'
p116955
sS'cpp_type'
p116956
S'MultiMooseEnum'
p116957
sS'default'
p116958
S'TIMESTEP_END'
p116959
sS'description'
p116960
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116961
sS'required'
p116962
I00
sS'options'
p116963
S'none initial linear nonlinear timestep_end timestep_begin custom'
p116964
sS'group_name'
p116965
Nsa(dp116966
S'description'
p116967
S'The number of layers.\n'
p116968
sS'cpp_type'
p116969
S'unsigned int'
p116970
sS'default'
p116971
g3
sS'name'
p116972
S'num_layers'
p116973
sS'required'
p116974
I00
sS'group_name'
p116975
Nsa(dp116976
S'name'
p116977
S'sample_type'
p116978
sS'cpp_type'
p116979
S'MooseEnum'
p116980
sS'default'
p116981
S'direct'
p116982
sS'description'
p116983
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116984
sS'required'
p116985
I00
sS'options'
p116986
S'direct interpolate average'
p116987
sS'group_name'
p116988
Nsa(dp116989
S'description'
p116990
g3
sS'cpp_type'
p116991
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116992
sS'default'
p116993
S'LayeredSideAverage'
p116994
sS'name'
p116995
S'type'
p116996
sS'required'
p116997
I00
sS'group_name'
p116998
Nsa(dp116999
S'description'
p117000
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117001
sS'cpp_type'
p117002
S'bool'
p117003
sS'default'
p117004
S'0'
p117005
sS'name'
p117006
S'use_displaced_mesh'
p117007
sS'required'
p117008
I00
sS'group_name'
p117009
S'Advanced'
p117010
sa(dp117011
S'description'
p117012
S'The name of the variable that this boundary condition applies to\n'
p117013
sS'cpp_type'
p117014
S'std::vector<VariableName>'
p117015
sS'default'
p117016
g3
sS'name'
p117017
S'variable'
p117018
sS'required'
p117019
I01
sS'group_name'
p117020
NsasS'name'
p117021
S'/UserObjects/LayeredSideAverage'
p117022
sa(dp117023
S'description'
p117024
g3
sS'subblocks'
p117025
NsS'parameters'
p117026
(lp117027
(dp117028
S'description'
p117029
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p117030
sS'cpp_type'
p117031
S'unsigned int'
p117032
sS'default'
p117033
S'1'
p117034
sS'name'
p117035
S'average_radius'
p117036
sS'required'
p117037
I00
sS'group_name'
p117038
Nsa(dp117039
S'description'
p117040
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117041
sS'cpp_type'
p117042
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117043
sS'default'
p117044
g3
sS'name'
p117045
S'boundary'
p117046
sS'required'
p117047
I01
sS'group_name'
p117048
Nsa(dp117049
S'description'
p117050
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p117051
sS'cpp_type'
p117052
S'std::vector<double, std::allocator<double> >'
p117053
sS'default'
p117054
g3
sS'name'
p117055
S'bounds'
p117056
sS'required'
p117057
I00
sS'group_name'
p117058
Nsa(dp117059
S'description'
p117060
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117061
sS'cpp_type'
p117062
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117063
sS'default'
p117064
g3
sS'name'
p117065
S'control_tags'
p117066
sS'required'
p117067
I00
sS'group_name'
p117068
S'Advanced'
p117069
sa(dp117070
S'description'
p117071
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p117072
sS'cpp_type'
p117073
S'bool'
p117074
sS'default'
p117075
S'0'
p117076
sS'name'
p117077
S'cumulative'
p117078
sS'required'
p117079
I00
sS'group_name'
p117080
Nsa(dp117081
S'description'
p117082
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p117083
sS'cpp_type'
p117084
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117085
sS'default'
p117086
g3
sS'name'
p117087
S'diffusivity'
p117088
sS'required'
p117089
I01
sS'group_name'
p117090
Nsa(dp117091
S'name'
p117092
S'direction'
p117093
sS'cpp_type'
p117094
S'MooseEnum'
p117095
sS'default'
p117096
g3
sS'description'
p117097
S'The direction of the layers.\n'
p117098
sS'required'
p117099
I01
sS'options'
p117100
S'x y z'
p117101
sS'group_name'
p117102
Nsa(dp117103
S'description'
p117104
S'Set the enabled status of the MooseObject.\n'
p117105
sS'cpp_type'
p117106
S'bool'
p117107
sS'default'
p117108
S'1'
p117109
sS'name'
p117110
S'enable'
p117111
sS'required'
p117112
I00
sS'group_name'
p117113
S'Advanced'
p117114
sa(dp117115
S'name'
p117116
S'execute_on'
p117117
sS'cpp_type'
p117118
S'MultiMooseEnum'
p117119
sS'default'
p117120
S'TIMESTEP_END'
p117121
sS'description'
p117122
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117123
sS'required'
p117124
I00
sS'options'
p117125
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117126
sS'group_name'
p117127
Nsa(dp117128
S'description'
p117129
S'The number of layers.\n'
p117130
sS'cpp_type'
p117131
S'unsigned int'
p117132
sS'default'
p117133
g3
sS'name'
p117134
S'num_layers'
p117135
sS'required'
p117136
I00
sS'group_name'
p117137
Nsa(dp117138
S'name'
p117139
S'sample_type'
p117140
sS'cpp_type'
p117141
S'MooseEnum'
p117142
sS'default'
p117143
S'direct'
p117144
sS'description'
p117145
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p117146
sS'required'
p117147
I00
sS'options'
p117148
S'direct interpolate average'
p117149
sS'group_name'
p117150
Nsa(dp117151
S'description'
p117152
g3
sS'cpp_type'
p117153
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117154
sS'default'
p117155
S'LayeredSideFluxAverage'
p117156
sS'name'
p117157
S'type'
p117158
sS'required'
p117159
I00
sS'group_name'
p117160
Nsa(dp117161
S'description'
p117162
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117163
sS'cpp_type'
p117164
S'bool'
p117165
sS'default'
p117166
S'0'
p117167
sS'name'
p117168
S'use_displaced_mesh'
p117169
sS'required'
p117170
I00
sS'group_name'
p117171
S'Advanced'
p117172
sa(dp117173
S'description'
p117174
S'The name of the variable that this boundary condition applies to\n'
p117175
sS'cpp_type'
p117176
S'std::vector<VariableName>'
p117177
sS'default'
p117178
g3
sS'name'
p117179
S'variable'
p117180
sS'required'
p117181
I01
sS'group_name'
p117182
NsasS'name'
p117183
S'/UserObjects/LayeredSideFluxAverage'
p117184
sa(dp117185
S'description'
p117186
g3
sS'subblocks'
p117187
NsS'parameters'
p117188
(lp117189
(dp117190
S'description'
p117191
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p117192
sS'cpp_type'
p117193
S'unsigned int'
p117194
sS'default'
p117195
S'1'
p117196
sS'name'
p117197
S'average_radius'
p117198
sS'required'
p117199
I00
sS'group_name'
p117200
Nsa(dp117201
S'description'
p117202
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117203
sS'cpp_type'
p117204
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117205
sS'default'
p117206
g3
sS'name'
p117207
S'boundary'
p117208
sS'required'
p117209
I01
sS'group_name'
p117210
Nsa(dp117211
S'description'
p117212
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p117213
sS'cpp_type'
p117214
S'std::vector<double, std::allocator<double> >'
p117215
sS'default'
p117216
g3
sS'name'
p117217
S'bounds'
p117218
sS'required'
p117219
I00
sS'group_name'
p117220
Nsa(dp117221
S'description'
p117222
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117223
sS'cpp_type'
p117224
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117225
sS'default'
p117226
g3
sS'name'
p117227
S'control_tags'
p117228
sS'required'
p117229
I00
sS'group_name'
p117230
S'Advanced'
p117231
sa(dp117232
S'description'
p117233
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p117234
sS'cpp_type'
p117235
S'bool'
p117236
sS'default'
p117237
S'0'
p117238
sS'name'
p117239
S'cumulative'
p117240
sS'required'
p117241
I00
sS'group_name'
p117242
Nsa(dp117243
S'name'
p117244
S'direction'
p117245
sS'cpp_type'
p117246
S'MooseEnum'
p117247
sS'default'
p117248
g3
sS'description'
p117249
S'The direction of the layers.\n'
p117250
sS'required'
p117251
I01
sS'options'
p117252
S'x y z'
p117253
sS'group_name'
p117254
Nsa(dp117255
S'description'
p117256
S'Set the enabled status of the MooseObject.\n'
p117257
sS'cpp_type'
p117258
S'bool'
p117259
sS'default'
p117260
S'1'
p117261
sS'name'
p117262
S'enable'
p117263
sS'required'
p117264
I00
sS'group_name'
p117265
S'Advanced'
p117266
sa(dp117267
S'name'
p117268
S'execute_on'
p117269
sS'cpp_type'
p117270
S'MultiMooseEnum'
p117271
sS'default'
p117272
S'TIMESTEP_END'
p117273
sS'description'
p117274
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117275
sS'required'
p117276
I00
sS'options'
p117277
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117278
sS'group_name'
p117279
Nsa(dp117280
S'description'
p117281
S'The number of layers.\n'
p117282
sS'cpp_type'
p117283
S'unsigned int'
p117284
sS'default'
p117285
g3
sS'name'
p117286
S'num_layers'
p117287
sS'required'
p117288
I00
sS'group_name'
p117289
Nsa(dp117290
S'name'
p117291
S'sample_type'
p117292
sS'cpp_type'
p117293
S'MooseEnum'
p117294
sS'default'
p117295
S'direct'
p117296
sS'description'
p117297
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p117298
sS'required'
p117299
I00
sS'options'
p117300
S'direct interpolate average'
p117301
sS'group_name'
p117302
Nsa(dp117303
S'description'
p117304
g3
sS'cpp_type'
p117305
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117306
sS'default'
p117307
S'LayeredSideIntegral'
p117308
sS'name'
p117309
S'type'
p117310
sS'required'
p117311
I00
sS'group_name'
p117312
Nsa(dp117313
S'description'
p117314
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117315
sS'cpp_type'
p117316
S'bool'
p117317
sS'default'
p117318
S'0'
p117319
sS'name'
p117320
S'use_displaced_mesh'
p117321
sS'required'
p117322
I00
sS'group_name'
p117323
S'Advanced'
p117324
sa(dp117325
S'description'
p117326
S'The name of the variable that this boundary condition applies to\n'
p117327
sS'cpp_type'
p117328
S'std::vector<VariableName>'
p117329
sS'default'
p117330
g3
sS'name'
p117331
S'variable'
p117332
sS'required'
p117333
I01
sS'group_name'
p117334
NsasS'name'
p117335
S'/UserObjects/LayeredSideIntegral'
p117336
sa(dp117337
S'description'
p117338
S'Userobject for masking/pinning grains and making forces and torques acting on that grain zero\n'
p117339
sS'subblocks'
p117340
NsS'parameters'
p117341
(lp117342
(dp117343
S'description'
p117344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117345
sS'cpp_type'
p117346
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117347
sS'default'
p117348
g3
sS'name'
p117349
S'control_tags'
p117350
sS'required'
p117351
I00
sS'group_name'
p117352
S'Advanced'
p117353
sa(dp117354
S'description'
p117355
S'Set the enabled status of the MooseObject.\n'
p117356
sS'cpp_type'
p117357
S'bool'
p117358
sS'default'
p117359
S'1'
p117360
sS'name'
p117361
S'enable'
p117362
sS'required'
p117363
I00
sS'group_name'
p117364
S'Advanced'
p117365
sa(dp117366
S'name'
p117367
S'execute_on'
p117368
sS'cpp_type'
p117369
S'MultiMooseEnum'
p117370
sS'default'
p117371
S'TIMESTEP_END'
p117372
sS'description'
p117373
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117374
sS'required'
p117375
I00
sS'options'
p117376
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117377
sS'group_name'
p117378
Nsa(dp117379
S'description'
p117380
S'userobject for getting force and torque acting on grains\n'
p117381
sS'cpp_type'
p117382
S'UserObjectName'
p117383
sS'default'
p117384
g3
sS'name'
p117385
S'grain_force'
p117386
sS'required'
p117387
I00
sS'group_name'
p117388
Nsa(dp117389
S'description'
p117390
S'Grain numbers for pinned grains\n'
p117391
sS'cpp_type'
p117392
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p117393
sS'default'
p117394
g3
sS'name'
p117395
S'pinned_grains'
p117396
sS'required'
p117397
I00
sS'group_name'
p117398
Nsa(dp117399
S'description'
p117400
g3
sS'cpp_type'
p117401
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117402
sS'default'
p117403
S'MaskedGrainForceAndTorque'
p117404
sS'name'
p117405
S'type'
p117406
sS'required'
p117407
I00
sS'group_name'
p117408
Nsa(dp117409
S'description'
p117410
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117411
sS'cpp_type'
p117412
S'bool'
p117413
sS'default'
p117414
S'0'
p117415
sS'name'
p117416
S'use_displaced_mesh'
p117417
sS'required'
p117418
I00
sS'group_name'
p117419
S'Advanced'
p117420
sasS'name'
p117421
S'/UserObjects/MaskedGrainForceAndTorque'
p117422
sa(dp117423
S'description'
p117424
g3
sS'subblocks'
p117425
NsS'parameters'
p117426
(lp117427
(dp117428
S'description'
p117429
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117430
sS'cpp_type'
p117431
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117432
sS'default'
p117433
g3
sS'name'
p117434
S'block'
p117435
sS'required'
p117436
I00
sS'group_name'
p117437
Nsa(dp117438
S'description'
p117439
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117440
sS'cpp_type'
p117441
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117442
sS'default'
p117443
g3
sS'name'
p117444
S'control_tags'
p117445
sS'required'
p117446
I00
sS'group_name'
p117447
S'Advanced'
p117448
sa(dp117449
S'description'
p117450
S'Set the enabled status of the MooseObject.\n'
p117451
sS'cpp_type'
p117452
S'bool'
p117453
sS'default'
p117454
S'1'
p117455
sS'name'
p117456
S'enable'
p117457
sS'required'
p117458
I00
sS'group_name'
p117459
S'Advanced'
p117460
sa(dp117461
S'name'
p117462
S'execute_on'
p117463
sS'cpp_type'
p117464
S'MultiMooseEnum'
p117465
sS'default'
p117466
S'TIMESTEP_END'
p117467
sS'description'
p117468
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117469
sS'required'
p117470
I00
sS'options'
p117471
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117472
sS'group_name'
p117473
Nsa(dp117474
S'description'
p117475
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117476
sS'cpp_type'
p117477
S'std::vector<OutputName, std::allocator<OutputName> >'
p117478
sS'default'
p117479
g3
sS'name'
p117480
S'outputs'
p117481
sS'required'
p117482
I00
sS'group_name'
p117483
S'Advanced'
p117484
sa(dp117485
S'description'
p117486
S'The seed for the master random number generator\n'
p117487
sS'cpp_type'
p117488
S'unsigned int'
p117489
sS'default'
p117490
S'0'
p117491
sS'name'
p117492
S'seed'
p117493
sS'required'
p117494
I00
sS'group_name'
p117495
S'Advanced'
p117496
sa(dp117497
S'description'
p117498
g3
sS'cpp_type'
p117499
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117500
sS'default'
p117501
S'Mass'
p117502
sS'name'
p117503
S'type'
p117504
sS'required'
p117505
I00
sS'group_name'
p117506
Nsa(dp117507
S'description'
p117508
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117509
sS'cpp_type'
p117510
S'bool'
p117511
sS'default'
p117512
S'1'
p117513
sS'name'
p117514
S'use_displaced_mesh'
p117515
sS'required'
p117516
I00
sS'group_name'
p117517
S'Advanced'
p117518
sa(dp117519
S'description'
p117520
S'The name of the variable that this object operates on\n'
p117521
sS'cpp_type'
p117522
S'std::vector<VariableName>'
p117523
sS'default'
p117524
g3
sS'name'
p117525
S'variable'
p117526
sS'required'
p117527
I01
sS'group_name'
p117528
NsasS'name'
p117529
S'/UserObjects/Mass'
p117530
sa(dp117531
S'description'
p117532
g3
sS'subblocks'
p117533
NsS'parameters'
p117534
(lp117535
(dp117536
S'description'
p117537
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117538
sS'cpp_type'
p117539
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117540
sS'default'
p117541
g3
sS'name'
p117542
S'block'
p117543
sS'required'
p117544
I00
sS'group_name'
p117545
Nsa(dp117546
S'description'
p117547
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117548
sS'cpp_type'
p117549
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117550
sS'default'
p117551
g3
sS'name'
p117552
S'control_tags'
p117553
sS'required'
p117554
I00
sS'group_name'
p117555
S'Advanced'
p117556
sa(dp117557
S'description'
p117558
S'Set the enabled status of the MooseObject.\n'
p117559
sS'cpp_type'
p117560
S'bool'
p117561
sS'default'
p117562
S'1'
p117563
sS'name'
p117564
S'enable'
p117565
sS'required'
p117566
I00
sS'group_name'
p117567
S'Advanced'
p117568
sa(dp117569
S'name'
p117570
S'execute_on'
p117571
sS'cpp_type'
p117572
S'MultiMooseEnum'
p117573
sS'default'
p117574
S'TIMESTEP_END'
p117575
sS'description'
p117576
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117577
sS'required'
p117578
I00
sS'options'
p117579
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117580
sS'group_name'
p117581
Nsa(dp117582
S'description'
p117583
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p117584
sS'cpp_type'
p117585
S'unsigned int'
p117586
sS'default'
p117587
g3
sS'name'
p117588
S'index_i'
p117589
sS'required'
p117590
I01
sS'group_name'
p117591
Nsa(dp117592
S'description'
p117593
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p117594
sS'cpp_type'
p117595
S'unsigned int'
p117596
sS'default'
p117597
g3
sS'name'
p117598
S'index_j'
p117599
sS'required'
p117600
I01
sS'group_name'
p117601
Nsa(dp117602
S'description'
p117603
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117604
sS'cpp_type'
p117605
S'std::vector<OutputName, std::allocator<OutputName> >'
p117606
sS'default'
p117607
g3
sS'name'
p117608
S'outputs'
p117609
sS'required'
p117610
I00
sS'group_name'
p117611
S'Advanced'
p117612
sa(dp117613
S'description'
p117614
S'The rank two material tensor name\n'
p117615
sS'cpp_type'
p117616
S'MaterialPropertyName'
p117617
sS'default'
p117618
g3
sS'name'
p117619
S'rank_two_tensor'
p117620
sS'required'
p117621
I01
sS'group_name'
p117622
Nsa(dp117623
S'description'
p117624
S'The seed for the master random number generator\n'
p117625
sS'cpp_type'
p117626
S'unsigned int'
p117627
sS'default'
p117628
S'0'
p117629
sS'name'
p117630
S'seed'
p117631
sS'required'
p117632
I00
sS'group_name'
p117633
S'Advanced'
p117634
sa(dp117635
S'description'
p117636
g3
sS'cpp_type'
p117637
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117638
sS'default'
p117639
S'MaterialTensorIntegral'
p117640
sS'name'
p117641
S'type'
p117642
sS'required'
p117643
I00
sS'group_name'
p117644
Nsa(dp117645
S'description'
p117646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117647
sS'cpp_type'
p117648
S'bool'
p117649
sS'default'
p117650
S'1'
p117651
sS'name'
p117652
S'use_displaced_mesh'
p117653
sS'required'
p117654
I00
sS'group_name'
p117655
S'Advanced'
p117656
sasS'name'
p117657
S'/UserObjects/MaterialTensorIntegral'
p117658
sa(dp117659
S'description'
p117660
S'Memory usage statistics for the running simulation.\n'
p117661
sS'subblocks'
p117662
NsS'parameters'
p117663
(lp117664
(dp117665
S'description'
p117666
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117667
sS'cpp_type'
p117668
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117669
sS'default'
p117670
g3
sS'name'
p117671
S'control_tags'
p117672
sS'required'
p117673
I00
sS'group_name'
p117674
S'Advanced'
p117675
sa(dp117676
S'description'
p117677
S'Set the enabled status of the MooseObject.\n'
p117678
sS'cpp_type'
p117679
S'bool'
p117680
sS'default'
p117681
S'1'
p117682
sS'name'
p117683
S'enable'
p117684
sS'required'
p117685
I00
sS'group_name'
p117686
S'Advanced'
p117687
sa(dp117688
S'name'
p117689
S'execute_on'
p117690
sS'cpp_type'
p117691
S'MultiMooseEnum'
p117692
sS'default'
p117693
S'TIMESTEP_END'
p117694
sS'description'
p117695
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117696
sS'required'
p117697
I00
sS'options'
p117698
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117699
sS'group_name'
p117700
Nsa(dp117701
S'name'
p117702
S'mem_type'
p117703
sS'cpp_type'
p117704
S'MooseEnum'
p117705
sS'default'
p117706
S'virtual_memory'
p117707
sS'description'
p117708
S'Memory metric to report.\n'
p117709
sS'required'
p117710
I00
sS'options'
p117711
S'virtual_memory physical_memory page_faults'
p117712
sS'group_name'
p117713
Nsa(dp117714
S'description'
p117715
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117716
sS'cpp_type'
p117717
S'std::vector<OutputName, std::allocator<OutputName> >'
p117718
sS'default'
p117719
g3
sS'name'
p117720
S'outputs'
p117721
sS'required'
p117722
I00
sS'group_name'
p117723
S'Advanced'
p117724
sa(dp117725
S'description'
p117726
S'If the postprocessor is executed more than one during a time step, report the aggregated peak value.\n'
p117727
sS'cpp_type'
p117728
S'bool'
p117729
sS'default'
p117730
S'1'
p117731
sS'name'
p117732
S'report_peak_value'
p117733
sS'required'
p117734
I00
sS'group_name'
p117735
Nsa(dp117736
S'description'
p117737
g3
sS'cpp_type'
p117738
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117739
sS'default'
p117740
S'MemoryUsage'
p117741
sS'name'
p117742
S'type'
p117743
sS'required'
p117744
I00
sS'group_name'
p117745
Nsa(dp117746
S'description'
p117747
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117748
sS'cpp_type'
p117749
S'bool'
p117750
sS'default'
p117751
S'0'
p117752
sS'name'
p117753
S'use_displaced_mesh'
p117754
sS'required'
p117755
I00
sS'group_name'
p117756
S'Advanced'
p117757
sa(dp117758
S'name'
p117759
S'value_type'
p117760
sS'cpp_type'
p117761
S'MooseEnum'
p117762
sS'default'
p117763
S'total'
p117764
sS'description'
p117765
S'Aggregation method to apply to the requested memory metric.\n'
p117766
sS'required'
p117767
I00
sS'options'
p117768
S'total average max_process min_processs'
p117769
sS'group_name'
p117770
NsasS'name'
p117771
S'/UserObjects/MemoryUsage'
p117772
sa(dp117773
S'description'
p117774
g3
sS'subblocks'
p117775
NsS'parameters'
p117776
(lp117777
(dp117778
S'description'
p117779
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p117780
sS'cpp_type'
p117781
S'unsigned int'
p117782
sS'default'
p117783
S'1'
p117784
sS'name'
p117785
S'average_radius'
p117786
sS'required'
p117787
I00
sS'group_name'
p117788
Nsa(dp117789
S'description'
p117790
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117791
sS'cpp_type'
p117792
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117793
sS'default'
p117794
g3
sS'name'
p117795
S'block'
p117796
sS'required'
p117797
I00
sS'group_name'
p117798
Nsa(dp117799
S'description'
p117800
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p117801
sS'cpp_type'
p117802
S'std::vector<double, std::allocator<double> >'
p117803
sS'default'
p117804
g3
sS'name'
p117805
S'bounds'
p117806
sS'required'
p117807
I00
sS'group_name'
p117808
Nsa(dp117809
S'description'
p117810
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117811
sS'cpp_type'
p117812
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117813
sS'default'
p117814
g3
sS'name'
p117815
S'control_tags'
p117816
sS'required'
p117817
I00
sS'group_name'
p117818
S'Advanced'
p117819
sa(dp117820
S'description'
p117821
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p117822
sS'cpp_type'
p117823
S'bool'
p117824
sS'default'
p117825
S'0'
p117826
sS'name'
p117827
S'cumulative'
p117828
sS'required'
p117829
I00
sS'group_name'
p117830
Nsa(dp117831
S'name'
p117832
S'direction'
p117833
sS'cpp_type'
p117834
S'MooseEnum'
p117835
sS'default'
p117836
g3
sS'description'
p117837
S'The direction of the layers.\n'
p117838
sS'required'
p117839
I01
sS'options'
p117840
S'x y z'
p117841
sS'group_name'
p117842
Nsa(dp117843
S'description'
p117844
S'Set the enabled status of the MooseObject.\n'
p117845
sS'cpp_type'
p117846
S'bool'
p117847
sS'default'
p117848
S'1'
p117849
sS'name'
p117850
S'enable'
p117851
sS'required'
p117852
I00
sS'group_name'
p117853
S'Advanced'
p117854
sa(dp117855
S'name'
p117856
S'execute_on'
p117857
sS'cpp_type'
p117858
S'MultiMooseEnum'
p117859
sS'default'
p117860
S'TIMESTEP_END'
p117861
sS'description'
p117862
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117863
sS'required'
p117864
I00
sS'options'
p117865
S'none initial linear nonlinear timestep_end timestep_begin custom'
p117866
sS'group_name'
p117867
Nsa(dp117868
S'description'
p117869
S'The number of layers.\n'
p117870
sS'cpp_type'
p117871
S'unsigned int'
p117872
sS'default'
p117873
g3
sS'name'
p117874
S'num_layers'
p117875
sS'required'
p117876
I00
sS'group_name'
p117877
Nsa(dp117878
S'description'
p117879
S'Computations will be lumped into values at these points.\n'
p117880
sS'cpp_type'
p117881
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p117882
sS'default'
p117883
g3
sS'name'
p117884
S'points'
p117885
sS'required'
p117886
I01
sS'group_name'
p117887
Nsa(dp117888
S'name'
p117889
S'sample_type'
p117890
sS'cpp_type'
p117891
S'MooseEnum'
p117892
sS'default'
p117893
S'direct'
p117894
sS'description'
p117895
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p117896
sS'required'
p117897
I00
sS'options'
p117898
S'direct interpolate average'
p117899
sS'group_name'
p117900
Nsa(dp117901
S'description'
p117902
S'The seed for the master random number generator\n'
p117903
sS'cpp_type'
p117904
S'unsigned int'
p117905
sS'default'
p117906
S'0'
p117907
sS'name'
p117908
S'seed'
p117909
sS'required'
p117910
I00
sS'group_name'
p117911
S'Advanced'
p117912
sa(dp117913
S'description'
p117914
g3
sS'cpp_type'
p117915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117916
sS'default'
p117917
S'NearestPointLayeredAverage'
p117918
sS'name'
p117919
S'type'
p117920
sS'required'
p117921
I00
sS'group_name'
p117922
Nsa(dp117923
S'description'
p117924
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117925
sS'cpp_type'
p117926
S'bool'
p117927
sS'default'
p117928
S'0'
p117929
sS'name'
p117930
S'use_displaced_mesh'
p117931
sS'required'
p117932
I00
sS'group_name'
p117933
S'Advanced'
p117934
sa(dp117935
S'description'
p117936
S'The name of the variable that this object operates on\n'
p117937
sS'cpp_type'
p117938
S'std::vector<VariableName>'
p117939
sS'default'
p117940
g3
sS'name'
p117941
S'variable'
p117942
sS'required'
p117943
I01
sS'group_name'
p117944
NsasS'name'
p117945
S'/UserObjects/NearestPointLayeredAverage'
p117946
sa(dp117947
S'description'
p117948
g3
sS'subblocks'
p117949
NsS'parameters'
p117950
(lp117951
(dp117952
S'description'
p117953
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117954
sS'cpp_type'
p117955
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117956
sS'default'
p117957
g3
sS'name'
p117958
S'block'
p117959
sS'required'
p117960
I00
sS'group_name'
p117961
Nsa(dp117962
S'description'
p117963
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117964
sS'cpp_type'
p117965
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117966
sS'default'
p117967
g3
sS'name'
p117968
S'boundary'
p117969
sS'required'
p117970
I00
sS'group_name'
p117971
Nsa(dp117972
S'description'
p117973
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117974
sS'cpp_type'
p117975
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117976
sS'default'
p117977
g3
sS'name'
p117978
S'control_tags'
p117979
sS'required'
p117980
I00
sS'group_name'
p117981
S'Advanced'
p117982
sa(dp117983
S'description'
p117984
S'Set the enabled status of the MooseObject.\n'
p117985
sS'cpp_type'
p117986
S'bool'
p117987
sS'default'
p117988
S'1'
p117989
sS'name'
p117990
S'enable'
p117991
sS'required'
p117992
I00
sS'group_name'
p117993
S'Advanced'
p117994
sa(dp117995
S'name'
p117996
S'execute_on'
p117997
sS'cpp_type'
p117998
S'MultiMooseEnum'
p117999
sS'default'
p118000
S'TIMESTEP_END'
p118001
sS'description'
p118002
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118003
sS'required'
p118004
I00
sS'options'
p118005
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118006
sS'group_name'
p118007
Nsa(dp118008
S'description'
p118009
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118010
sS'cpp_type'
p118011
S'std::vector<OutputName, std::allocator<OutputName> >'
p118012
sS'default'
p118013
g3
sS'name'
p118014
S'outputs'
p118015
sS'required'
p118016
I00
sS'group_name'
p118017
S'Advanced'
p118018
sa(dp118019
S'description'
p118020
S'The seed for the master random number generator\n'
p118021
sS'cpp_type'
p118022
S'unsigned int'
p118023
sS'default'
p118024
S'0'
p118025
sS'name'
p118026
S'seed'
p118027
sS'required'
p118028
I00
sS'group_name'
p118029
S'Advanced'
p118030
sa(dp118031
S'description'
p118032
g3
sS'cpp_type'
p118033
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118034
sS'default'
p118035
S'NodalExtremeValue'
p118036
sS'name'
p118037
S'type'
p118038
sS'required'
p118039
I00
sS'group_name'
p118040
Nsa(dp118041
S'description'
p118042
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118043
sS'cpp_type'
p118044
S'bool'
p118045
sS'default'
p118046
S'0'
p118047
sS'name'
p118048
S'unique_node_execute'
p118049
sS'required'
p118050
I00
sS'group_name'
p118051
Nsa(dp118052
S'description'
p118053
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118054
sS'cpp_type'
p118055
S'bool'
p118056
sS'default'
p118057
S'0'
p118058
sS'name'
p118059
S'use_displaced_mesh'
p118060
sS'required'
p118061
I00
sS'group_name'
p118062
S'Advanced'
p118063
sa(dp118064
S'name'
p118065
S'value_type'
p118066
sS'cpp_type'
p118067
S'MooseEnum'
p118068
sS'default'
p118069
S'max'
p118070
sS'description'
p118071
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p118072
sS'required'
p118073
I00
sS'options'
p118074
S'max min'
p118075
sS'group_name'
p118076
Nsa(dp118077
S'description'
p118078
S'The name of the variable that this postprocessor operates on\n'
p118079
sS'cpp_type'
p118080
S'std::vector<VariableName>'
p118081
sS'default'
p118082
g3
sS'name'
p118083
S'variable'
p118084
sS'required'
p118085
I01
sS'group_name'
p118086
NsasS'name'
p118087
S'/UserObjects/NodalExtremeValue'
p118088
sa(dp118089
S'description'
p118090
g3
sS'subblocks'
p118091
NsS'parameters'
p118092
(lp118093
(dp118094
S'description'
p118095
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118096
sS'cpp_type'
p118097
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118098
sS'default'
p118099
g3
sS'name'
p118100
S'block'
p118101
sS'required'
p118102
I00
sS'group_name'
p118103
Nsa(dp118104
S'description'
p118105
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118106
sS'cpp_type'
p118107
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118108
sS'default'
p118109
g3
sS'name'
p118110
S'boundary'
p118111
sS'required'
p118112
I00
sS'group_name'
p118113
Nsa(dp118114
S'description'
p118115
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118116
sS'cpp_type'
p118117
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118118
sS'default'
p118119
g3
sS'name'
p118120
S'control_tags'
p118121
sS'required'
p118122
I00
sS'group_name'
p118123
S'Advanced'
p118124
sa(dp118125
S'description'
p118126
S'Set the enabled status of the MooseObject.\n'
p118127
sS'cpp_type'
p118128
S'bool'
p118129
sS'default'
p118130
S'1'
p118131
sS'name'
p118132
S'enable'
p118133
sS'required'
p118134
I00
sS'group_name'
p118135
S'Advanced'
p118136
sa(dp118137
S'name'
p118138
S'execute_on'
p118139
sS'cpp_type'
p118140
S'MultiMooseEnum'
p118141
sS'default'
p118142
S'TIMESTEP_END'
p118143
sS'description'
p118144
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118145
sS'required'
p118146
I00
sS'options'
p118147
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118148
sS'group_name'
p118149
Nsa(dp118150
S'description'
p118151
S'The analytic solution to compare against\n'
p118152
sS'cpp_type'
p118153
S'FunctionName'
p118154
sS'default'
p118155
g3
sS'name'
p118156
S'function'
p118157
sS'required'
p118158
I01
sS'group_name'
p118159
Nsa(dp118160
S'description'
p118161
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118162
sS'cpp_type'
p118163
S'std::vector<OutputName, std::allocator<OutputName> >'
p118164
sS'default'
p118165
g3
sS'name'
p118166
S'outputs'
p118167
sS'required'
p118168
I00
sS'group_name'
p118169
S'Advanced'
p118170
sa(dp118171
S'description'
p118172
S'The seed for the master random number generator\n'
p118173
sS'cpp_type'
p118174
S'unsigned int'
p118175
sS'default'
p118176
S'0'
p118177
sS'name'
p118178
S'seed'
p118179
sS'required'
p118180
I00
sS'group_name'
p118181
S'Advanced'
p118182
sa(dp118183
S'description'
p118184
g3
sS'cpp_type'
p118185
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118186
sS'default'
p118187
S'NodalL2Error'
p118188
sS'name'
p118189
S'type'
p118190
sS'required'
p118191
I00
sS'group_name'
p118192
Nsa(dp118193
S'description'
p118194
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118195
sS'cpp_type'
p118196
S'bool'
p118197
sS'default'
p118198
S'0'
p118199
sS'name'
p118200
S'unique_node_execute'
p118201
sS'required'
p118202
I00
sS'group_name'
p118203
Nsa(dp118204
S'description'
p118205
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118206
sS'cpp_type'
p118207
S'bool'
p118208
sS'default'
p118209
S'0'
p118210
sS'name'
p118211
S'use_displaced_mesh'
p118212
sS'required'
p118213
I00
sS'group_name'
p118214
S'Advanced'
p118215
sa(dp118216
S'description'
p118217
S'The name of the variable that this postprocessor operates on\n'
p118218
sS'cpp_type'
p118219
S'std::vector<VariableName>'
p118220
sS'default'
p118221
g3
sS'name'
p118222
S'variable'
p118223
sS'required'
p118224
I01
sS'group_name'
p118225
NsasS'name'
p118226
S'/UserObjects/NodalL2Error'
p118227
sa(dp118228
S'description'
p118229
g3
sS'subblocks'
p118230
NsS'parameters'
p118231
(lp118232
(dp118233
S'description'
p118234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118235
sS'cpp_type'
p118236
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118237
sS'default'
p118238
g3
sS'name'
p118239
S'block'
p118240
sS'required'
p118241
I00
sS'group_name'
p118242
Nsa(dp118243
S'description'
p118244
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118245
sS'cpp_type'
p118246
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118247
sS'default'
p118248
g3
sS'name'
p118249
S'boundary'
p118250
sS'required'
p118251
I00
sS'group_name'
p118252
Nsa(dp118253
S'description'
p118254
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118255
sS'cpp_type'
p118256
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118257
sS'default'
p118258
g3
sS'name'
p118259
S'control_tags'
p118260
sS'required'
p118261
I00
sS'group_name'
p118262
S'Advanced'
p118263
sa(dp118264
S'description'
p118265
S'Set the enabled status of the MooseObject.\n'
p118266
sS'cpp_type'
p118267
S'bool'
p118268
sS'default'
p118269
S'1'
p118270
sS'name'
p118271
S'enable'
p118272
sS'required'
p118273
I00
sS'group_name'
p118274
S'Advanced'
p118275
sa(dp118276
S'name'
p118277
S'execute_on'
p118278
sS'cpp_type'
p118279
S'MultiMooseEnum'
p118280
sS'default'
p118281
S'TIMESTEP_END'
p118282
sS'description'
p118283
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118284
sS'required'
p118285
I00
sS'options'
p118286
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118287
sS'group_name'
p118288
Nsa(dp118289
S'description'
p118290
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118291
sS'cpp_type'
p118292
S'std::vector<OutputName, std::allocator<OutputName> >'
p118293
sS'default'
p118294
g3
sS'name'
p118295
S'outputs'
p118296
sS'required'
p118297
I00
sS'group_name'
p118298
S'Advanced'
p118299
sa(dp118300
S'description'
p118301
S'The seed for the master random number generator\n'
p118302
sS'cpp_type'
p118303
S'unsigned int'
p118304
sS'default'
p118305
S'0'
p118306
sS'name'
p118307
S'seed'
p118308
sS'required'
p118309
I00
sS'group_name'
p118310
S'Advanced'
p118311
sa(dp118312
S'description'
p118313
g3
sS'cpp_type'
p118314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118315
sS'default'
p118316
S'NodalL2Norm'
p118317
sS'name'
p118318
S'type'
p118319
sS'required'
p118320
I00
sS'group_name'
p118321
Nsa(dp118322
S'description'
p118323
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118324
sS'cpp_type'
p118325
S'bool'
p118326
sS'default'
p118327
S'1'
p118328
sS'name'
p118329
S'unique_node_execute'
p118330
sS'required'
p118331
I00
sS'group_name'
p118332
Nsa(dp118333
S'description'
p118334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118335
sS'cpp_type'
p118336
S'bool'
p118337
sS'default'
p118338
S'0'
p118339
sS'name'
p118340
S'use_displaced_mesh'
p118341
sS'required'
p118342
I00
sS'group_name'
p118343
S'Advanced'
p118344
sa(dp118345
S'description'
p118346
S'The name of the variable that this postprocessor operates on\n'
p118347
sS'cpp_type'
p118348
S'std::vector<VariableName>'
p118349
sS'default'
p118350
g3
sS'name'
p118351
S'variable'
p118352
sS'required'
p118353
I01
sS'group_name'
p118354
NsasS'name'
p118355
S'/UserObjects/NodalL2Norm'
p118356
sa(dp118357
S'description'
p118358
g3
sS'subblocks'
p118359
NsS'parameters'
p118360
(lp118361
(dp118362
S'description'
p118363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118364
sS'cpp_type'
p118365
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118366
sS'default'
p118367
g3
sS'name'
p118368
S'block'
p118369
sS'required'
p118370
I00
sS'group_name'
p118371
Nsa(dp118372
S'description'
p118373
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118374
sS'cpp_type'
p118375
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118376
sS'default'
p118377
g3
sS'name'
p118378
S'boundary'
p118379
sS'required'
p118380
I00
sS'group_name'
p118381
Nsa(dp118382
S'description'
p118383
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118384
sS'cpp_type'
p118385
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118386
sS'default'
p118387
g3
sS'name'
p118388
S'control_tags'
p118389
sS'required'
p118390
I00
sS'group_name'
p118391
S'Advanced'
p118392
sa(dp118393
S'description'
p118394
S'Set the enabled status of the MooseObject.\n'
p118395
sS'cpp_type'
p118396
S'bool'
p118397
sS'default'
p118398
S'1'
p118399
sS'name'
p118400
S'enable'
p118401
sS'required'
p118402
I00
sS'group_name'
p118403
S'Advanced'
p118404
sa(dp118405
S'name'
p118406
S'execute_on'
p118407
sS'cpp_type'
p118408
S'MultiMooseEnum'
p118409
sS'default'
p118410
S'TIMESTEP_END'
p118411
sS'description'
p118412
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118413
sS'required'
p118414
I00
sS'options'
p118415
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118416
sS'group_name'
p118417
Nsa(dp118418
S'description'
p118419
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118420
sS'cpp_type'
p118421
S'std::vector<OutputName, std::allocator<OutputName> >'
p118422
sS'default'
p118423
g3
sS'name'
p118424
S'outputs'
p118425
sS'required'
p118426
I00
sS'group_name'
p118427
S'Advanced'
p118428
sa(dp118429
S'description'
p118430
S'The seed for the master random number generator\n'
p118431
sS'cpp_type'
p118432
S'unsigned int'
p118433
sS'default'
p118434
S'0'
p118435
sS'name'
p118436
S'seed'
p118437
sS'required'
p118438
I00
sS'group_name'
p118439
S'Advanced'
p118440
sa(dp118441
S'description'
p118442
g3
sS'cpp_type'
p118443
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118444
sS'default'
p118445
S'NodalMaxValue'
p118446
sS'name'
p118447
S'type'
p118448
sS'required'
p118449
I00
sS'group_name'
p118450
Nsa(dp118451
S'description'
p118452
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118453
sS'cpp_type'
p118454
S'bool'
p118455
sS'default'
p118456
S'0'
p118457
sS'name'
p118458
S'unique_node_execute'
p118459
sS'required'
p118460
I00
sS'group_name'
p118461
Nsa(dp118462
S'description'
p118463
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118464
sS'cpp_type'
p118465
S'bool'
p118466
sS'default'
p118467
S'0'
p118468
sS'name'
p118469
S'use_displaced_mesh'
p118470
sS'required'
p118471
I00
sS'group_name'
p118472
S'Advanced'
p118473
sa(dp118474
S'description'
p118475
S'The name of the variable that this postprocessor operates on\n'
p118476
sS'cpp_type'
p118477
S'std::vector<VariableName>'
p118478
sS'default'
p118479
g3
sS'name'
p118480
S'variable'
p118481
sS'required'
p118482
I01
sS'group_name'
p118483
NsasS'name'
p118484
S'/UserObjects/NodalMaxValue'
p118485
sa(dp118486
S'description'
p118487
g3
sS'subblocks'
p118488
NsS'parameters'
p118489
(lp118490
(dp118491
S'description'
p118492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118493
sS'cpp_type'
p118494
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118495
sS'default'
p118496
g3
sS'name'
p118497
S'boundary'
p118498
sS'required'
p118499
I01
sS'group_name'
p118500
Nsa(dp118501
S'description'
p118502
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118503
sS'cpp_type'
p118504
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118505
sS'default'
p118506
g3
sS'name'
p118507
S'control_tags'
p118508
sS'required'
p118509
I00
sS'group_name'
p118510
S'Advanced'
p118511
sa(dp118512
S'description'
p118513
S"Node set ID which contains the nodes that are in 'corners'.\n"
p118514
sS'cpp_type'
p118515
S'BoundaryName'
p118516
sS'default'
p118517
g3
sS'name'
p118518
S'corner_boundary'
p118519
sS'required'
p118520
I01
sS'group_name'
p118521
Nsa(dp118522
S'description'
p118523
S'Set the enabled status of the MooseObject.\n'
p118524
sS'cpp_type'
p118525
S'bool'
p118526
sS'default'
p118527
S'1'
p118528
sS'name'
p118529
S'enable'
p118530
sS'required'
p118531
I00
sS'group_name'
p118532
S'Advanced'
p118533
sa(dp118534
S'name'
p118535
S'execute_on'
p118536
sS'cpp_type'
p118537
S'MultiMooseEnum'
p118538
sS'default'
p118539
S'TIMESTEP_END'
p118540
sS'description'
p118541
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118542
sS'required'
p118543
I00
sS'options'
p118544
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118545
sS'group_name'
p118546
Nsa(dp118547
S'description'
p118548
g3
sS'cpp_type'
p118549
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118550
sS'default'
p118551
S'NodalNormalsCorner'
p118552
sS'name'
p118553
S'type'
p118554
sS'required'
p118555
I00
sS'group_name'
p118556
Nsa(dp118557
S'description'
p118558
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118559
sS'cpp_type'
p118560
S'bool'
p118561
sS'default'
p118562
S'0'
p118563
sS'name'
p118564
S'use_displaced_mesh'
p118565
sS'required'
p118566
I00
sS'group_name'
p118567
S'Advanced'
p118568
sasS'name'
p118569
S'/UserObjects/NodalNormalsCorner'
p118570
sa(dp118571
S'description'
p118572
g3
sS'subblocks'
p118573
NsS'parameters'
p118574
(lp118575
(dp118576
S'description'
p118577
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118578
sS'cpp_type'
p118579
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118580
sS'default'
p118581
g3
sS'name'
p118582
S'block'
p118583
sS'required'
p118584
I00
sS'group_name'
p118585
Nsa(dp118586
S'description'
p118587
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118588
sS'cpp_type'
p118589
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118590
sS'default'
p118591
g3
sS'name'
p118592
S'boundary'
p118593
sS'required'
p118594
I00
sS'group_name'
p118595
Nsa(dp118596
S'description'
p118597
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118598
sS'cpp_type'
p118599
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118600
sS'default'
p118601
g3
sS'name'
p118602
S'control_tags'
p118603
sS'required'
p118604
I00
sS'group_name'
p118605
S'Advanced'
p118606
sa(dp118607
S'description'
p118608
S'Set the enabled status of the MooseObject.\n'
p118609
sS'cpp_type'
p118610
S'bool'
p118611
sS'default'
p118612
S'1'
p118613
sS'name'
p118614
S'enable'
p118615
sS'required'
p118616
I00
sS'group_name'
p118617
S'Advanced'
p118618
sa(dp118619
S'name'
p118620
S'execute_on'
p118621
sS'cpp_type'
p118622
S'MultiMooseEnum'
p118623
sS'default'
p118624
S'TIMESTEP_END'
p118625
sS'description'
p118626
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118627
sS'required'
p118628
I00
sS'options'
p118629
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118630
sS'group_name'
p118631
Nsa(dp118632
S'description'
p118633
S'The seed for the master random number generator\n'
p118634
sS'cpp_type'
p118635
S'unsigned int'
p118636
sS'default'
p118637
S'0'
p118638
sS'name'
p118639
S'seed'
p118640
sS'required'
p118641
I00
sS'group_name'
p118642
S'Advanced'
p118643
sa(dp118644
S'description'
p118645
g3
sS'cpp_type'
p118646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118647
sS'default'
p118648
S'NodalNormalsEvaluator'
p118649
sS'name'
p118650
S'type'
p118651
sS'required'
p118652
I00
sS'group_name'
p118653
Nsa(dp118654
S'description'
p118655
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118656
sS'cpp_type'
p118657
S'bool'
p118658
sS'default'
p118659
S'0'
p118660
sS'name'
p118661
S'unique_node_execute'
p118662
sS'required'
p118663
I00
sS'group_name'
p118664
Nsa(dp118665
S'description'
p118666
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118667
sS'cpp_type'
p118668
S'bool'
p118669
sS'default'
p118670
S'0'
p118671
sS'name'
p118672
S'use_displaced_mesh'
p118673
sS'required'
p118674
I00
sS'group_name'
p118675
S'Advanced'
p118676
sasS'name'
p118677
S'/UserObjects/NodalNormalsEvaluator'
p118678
sa(dp118679
S'description'
p118680
g3
sS'subblocks'
p118681
NsS'parameters'
p118682
(lp118683
(dp118684
S'description'
p118685
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118686
sS'cpp_type'
p118687
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118688
sS'default'
p118689
g3
sS'name'
p118690
S'block'
p118691
sS'required'
p118692
I00
sS'group_name'
p118693
Nsa(dp118694
S'description'
p118695
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118696
sS'cpp_type'
p118697
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118698
sS'default'
p118699
g3
sS'name'
p118700
S'boundary'
p118701
sS'required'
p118702
I00
sS'group_name'
p118703
Nsa(dp118704
S'description'
p118705
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118706
sS'cpp_type'
p118707
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118708
sS'default'
p118709
g3
sS'name'
p118710
S'control_tags'
p118711
sS'required'
p118712
I00
sS'group_name'
p118713
S'Advanced'
p118714
sa(dp118715
S'description'
p118716
S"Node set ID which contains the nodes that are in 'corners'.\n"
p118717
sS'cpp_type'
p118718
S'BoundaryName'
p118719
sS'default'
p118720
g3
sS'name'
p118721
S'corner_boundary'
p118722
sS'required'
p118723
I00
sS'group_name'
p118724
Nsa(dp118725
S'description'
p118726
S'Set the enabled status of the MooseObject.\n'
p118727
sS'cpp_type'
p118728
S'bool'
p118729
sS'default'
p118730
S'1'
p118731
sS'name'
p118732
S'enable'
p118733
sS'required'
p118734
I00
sS'group_name'
p118735
S'Advanced'
p118736
sa(dp118737
S'name'
p118738
S'execute_on'
p118739
sS'cpp_type'
p118740
S'MultiMooseEnum'
p118741
sS'default'
p118742
S'TIMESTEP_END'
p118743
sS'description'
p118744
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118745
sS'required'
p118746
I00
sS'options'
p118747
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118748
sS'group_name'
p118749
Nsa(dp118750
S'description'
p118751
S'The seed for the master random number generator\n'
p118752
sS'cpp_type'
p118753
S'unsigned int'
p118754
sS'default'
p118755
S'0'
p118756
sS'name'
p118757
S'seed'
p118758
sS'required'
p118759
I00
sS'group_name'
p118760
S'Advanced'
p118761
sa(dp118762
S'description'
p118763
g3
sS'cpp_type'
p118764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118765
sS'default'
p118766
S'NodalNormalsPreprocessor'
p118767
sS'name'
p118768
S'type'
p118769
sS'required'
p118770
I00
sS'group_name'
p118771
Nsa(dp118772
S'description'
p118773
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118774
sS'cpp_type'
p118775
S'bool'
p118776
sS'default'
p118777
S'0'
p118778
sS'name'
p118779
S'use_displaced_mesh'
p118780
sS'required'
p118781
I00
sS'group_name'
p118782
S'Advanced'
p118783
sasS'name'
p118784
S'/UserObjects/NodalNormalsPreprocessor'
p118785
sa(dp118786
S'description'
p118787
g3
sS'subblocks'
p118788
NsS'parameters'
p118789
(lp118790
(dp118791
S'description'
p118792
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118793
sS'cpp_type'
p118794
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118795
sS'default'
p118796
g3
sS'name'
p118797
S'block'
p118798
sS'required'
p118799
I00
sS'group_name'
p118800
Nsa(dp118801
S'description'
p118802
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118803
sS'cpp_type'
p118804
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118805
sS'default'
p118806
g3
sS'name'
p118807
S'boundary'
p118808
sS'required'
p118809
I00
sS'group_name'
p118810
Nsa(dp118811
S'description'
p118812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118813
sS'cpp_type'
p118814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118815
sS'default'
p118816
g3
sS'name'
p118817
S'control_tags'
p118818
sS'required'
p118819
I00
sS'group_name'
p118820
S'Advanced'
p118821
sa(dp118822
S'description'
p118823
S'Set the enabled status of the MooseObject.\n'
p118824
sS'cpp_type'
p118825
S'bool'
p118826
sS'default'
p118827
S'1'
p118828
sS'name'
p118829
S'enable'
p118830
sS'required'
p118831
I00
sS'group_name'
p118832
S'Advanced'
p118833
sa(dp118834
S'name'
p118835
S'execute_on'
p118836
sS'cpp_type'
p118837
S'MultiMooseEnum'
p118838
sS'default'
p118839
S'TIMESTEP_END'
p118840
sS'description'
p118841
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118842
sS'required'
p118843
I00
sS'options'
p118844
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118845
sS'group_name'
p118846
Nsa(dp118847
S'description'
p118848
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118849
sS'cpp_type'
p118850
S'std::vector<OutputName, std::allocator<OutputName> >'
p118851
sS'default'
p118852
g3
sS'name'
p118853
S'outputs'
p118854
sS'required'
p118855
I00
sS'group_name'
p118856
S'Advanced'
p118857
sa(dp118858
S'description'
p118859
S'The seed for the master random number generator\n'
p118860
sS'cpp_type'
p118861
S'unsigned int'
p118862
sS'default'
p118863
S'0'
p118864
sS'name'
p118865
S'seed'
p118866
sS'required'
p118867
I00
sS'group_name'
p118868
S'Advanced'
p118869
sa(dp118870
S'description'
p118871
g3
sS'cpp_type'
p118872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118873
sS'default'
p118874
S'NodalProxyMaxValue'
p118875
sS'name'
p118876
S'type'
p118877
sS'required'
p118878
I00
sS'group_name'
p118879
Nsa(dp118880
S'description'
p118881
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p118882
sS'cpp_type'
p118883
S'bool'
p118884
sS'default'
p118885
S'0'
p118886
sS'name'
p118887
S'unique_node_execute'
p118888
sS'required'
p118889
I00
sS'group_name'
p118890
Nsa(dp118891
S'description'
p118892
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118893
sS'cpp_type'
p118894
S'bool'
p118895
sS'default'
p118896
S'0'
p118897
sS'name'
p118898
S'use_displaced_mesh'
p118899
sS'required'
p118900
I00
sS'group_name'
p118901
S'Advanced'
p118902
sa(dp118903
S'description'
p118904
S'The name of the variable that this postprocessor operates on\n'
p118905
sS'cpp_type'
p118906
S'std::vector<VariableName>'
p118907
sS'default'
p118908
g3
sS'name'
p118909
S'variable'
p118910
sS'required'
p118911
I01
sS'group_name'
p118912
NsasS'name'
p118913
S'/UserObjects/NodalProxyMaxValue'
p118914
sa(dp118915
S'description'
p118916
g3
sS'subblocks'
p118917
NsS'parameters'
p118918
(lp118919
(dp118920
S'description'
p118921
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118922
sS'cpp_type'
p118923
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118924
sS'default'
p118925
g3
sS'name'
p118926
S'block'
p118927
sS'required'
p118928
I00
sS'group_name'
p118929
Nsa(dp118930
S'description'
p118931
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118932
sS'cpp_type'
p118933
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118934
sS'default'
p118935
g3
sS'name'
p118936
S'boundary'
p118937
sS'required'
p118938
I00
sS'group_name'
p118939
Nsa(dp118940
S'description'
p118941
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118942
sS'cpp_type'
p118943
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118944
sS'default'
p118945
g3
sS'name'
p118946
S'control_tags'
p118947
sS'required'
p118948
I00
sS'group_name'
p118949
S'Advanced'
p118950
sa(dp118951
S'description'
p118952
S'Set the enabled status of the MooseObject.\n'
p118953
sS'cpp_type'
p118954
S'bool'
p118955
sS'default'
p118956
S'1'
p118957
sS'name'
p118958
S'enable'
p118959
sS'required'
p118960
I00
sS'group_name'
p118961
S'Advanced'
p118962
sa(dp118963
S'name'
p118964
S'execute_on'
p118965
sS'cpp_type'
p118966
S'MultiMooseEnum'
p118967
sS'default'
p118968
S'TIMESTEP_END'
p118969
sS'description'
p118970
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118971
sS'required'
p118972
I00
sS'options'
p118973
S'none initial linear nonlinear timestep_end timestep_begin custom'
p118974
sS'group_name'
p118975
Nsa(dp118976
S'description'
p118977
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118978
sS'cpp_type'
p118979
S'std::vector<OutputName, std::allocator<OutputName> >'
p118980
sS'default'
p118981
g3
sS'name'
p118982
S'outputs'
p118983
sS'required'
p118984
I00
sS'group_name'
p118985
S'Advanced'
p118986
sa(dp118987
S'description'
p118988
S'The seed for the master random number generator\n'
p118989
sS'cpp_type'
p118990
S'unsigned int'
p118991
sS'default'
p118992
S'0'
p118993
sS'name'
p118994
S'seed'
p118995
sS'required'
p118996
I00
sS'group_name'
p118997
S'Advanced'
p118998
sa(dp118999
S'description'
p119000
g3
sS'cpp_type'
p119001
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119002
sS'default'
p119003
S'NodalSum'
p119004
sS'name'
p119005
S'type'
p119006
sS'required'
p119007
I00
sS'group_name'
p119008
Nsa(dp119009
S'description'
p119010
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p119011
sS'cpp_type'
p119012
S'bool'
p119013
sS'default'
p119014
S'1'
p119015
sS'name'
p119016
S'unique_node_execute'
p119017
sS'required'
p119018
I00
sS'group_name'
p119019
Nsa(dp119020
S'description'
p119021
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119022
sS'cpp_type'
p119023
S'bool'
p119024
sS'default'
p119025
S'0'
p119026
sS'name'
p119027
S'use_displaced_mesh'
p119028
sS'required'
p119029
I00
sS'group_name'
p119030
S'Advanced'
p119031
sa(dp119032
S'description'
p119033
S'The name of the variable that this postprocessor operates on\n'
p119034
sS'cpp_type'
p119035
S'std::vector<VariableName>'
p119036
sS'default'
p119037
g3
sS'name'
p119038
S'variable'
p119039
sS'required'
p119040
I01
sS'group_name'
p119041
NsasS'name'
p119042
S'/UserObjects/NodalSum'
p119043
sa(dp119044
S'description'
p119045
g3
sS'subblocks'
p119046
NsS'parameters'
p119047
(lp119048
(dp119049
S'description'
p119050
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119051
sS'cpp_type'
p119052
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119053
sS'default'
p119054
g3
sS'name'
p119055
S'control_tags'
p119056
sS'required'
p119057
I00
sS'group_name'
p119058
S'Advanced'
p119059
sa(dp119060
S'description'
p119061
S'Set the enabled status of the MooseObject.\n'
p119062
sS'cpp_type'
p119063
S'bool'
p119064
sS'default'
p119065
S'1'
p119066
sS'name'
p119067
S'enable'
p119068
sS'required'
p119069
I00
sS'group_name'
p119070
S'Advanced'
p119071
sa(dp119072
S'name'
p119073
S'execute_on'
p119074
sS'cpp_type'
p119075
S'MultiMooseEnum'
p119076
sS'default'
p119077
S'TIMESTEP_END'
p119078
sS'description'
p119079
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119080
sS'required'
p119081
I00
sS'options'
p119082
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119083
sS'group_name'
p119084
Nsa(dp119085
S'description'
p119086
S'The ID of the node where we monitor\n'
p119087
sS'cpp_type'
p119088
S'unsigned int'
p119089
sS'default'
p119090
g3
sS'name'
p119091
S'nodeid'
p119092
sS'required'
p119093
I01
sS'group_name'
p119094
Nsa(dp119095
S'description'
p119096
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119097
sS'cpp_type'
p119098
S'std::vector<OutputName, std::allocator<OutputName> >'
p119099
sS'default'
p119100
g3
sS'name'
p119101
S'outputs'
p119102
sS'required'
p119103
I00
sS'group_name'
p119104
S'Advanced'
p119105
sa(dp119106
S'description'
p119107
S'A scale factor to be applied to the variable\n'
p119108
sS'cpp_type'
p119109
S'double'
p119110
sS'default'
p119111
S'1'
p119112
sS'name'
p119113
S'scale_factor'
p119114
sS'required'
p119115
I00
sS'group_name'
p119116
Nsa(dp119117
S'description'
p119118
g3
sS'cpp_type'
p119119
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119120
sS'default'
p119121
S'NodalVariableValue'
p119122
sS'name'
p119123
S'type'
p119124
sS'required'
p119125
I00
sS'group_name'
p119126
Nsa(dp119127
S'description'
p119128
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119129
sS'cpp_type'
p119130
S'bool'
p119131
sS'default'
p119132
S'0'
p119133
sS'name'
p119134
S'use_displaced_mesh'
p119135
sS'required'
p119136
I00
sS'group_name'
p119137
S'Advanced'
p119138
sa(dp119139
S'description'
p119140
S'The variable to be monitored\n'
p119141
sS'cpp_type'
p119142
S'VariableName'
p119143
sS'default'
p119144
g3
sS'name'
p119145
S'variable'
p119146
sS'required'
p119147
I01
sS'group_name'
p119148
NsasS'name'
p119149
S'/UserObjects/NodalVariableValue'
p119150
sa(dp119151
S'description'
p119152
g3
sS'subblocks'
p119153
NsS'parameters'
p119154
(lp119155
(dp119156
S'description'
p119157
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119158
sS'cpp_type'
p119159
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119160
sS'default'
p119161
g3
sS'name'
p119162
S'control_tags'
p119163
sS'required'
p119164
I00
sS'group_name'
p119165
S'Advanced'
p119166
sa(dp119167
S'description'
p119168
S'Set the enabled status of the MooseObject.\n'
p119169
sS'cpp_type'
p119170
S'bool'
p119171
sS'default'
p119172
S'1'
p119173
sS'name'
p119174
S'enable'
p119175
sS'required'
p119176
I00
sS'group_name'
p119177
S'Advanced'
p119178
sa(dp119179
S'name'
p119180
S'execute_on'
p119181
sS'cpp_type'
p119182
S'MultiMooseEnum'
p119183
sS'default'
p119184
S'TIMESTEP_END'
p119185
sS'description'
p119186
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119187
sS'required'
p119188
I00
sS'options'
p119189
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119190
sS'group_name'
p119191
Nsa(dp119192
S'description'
p119193
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119194
sS'cpp_type'
p119195
S'std::vector<OutputName, std::allocator<OutputName> >'
p119196
sS'default'
p119197
g3
sS'name'
p119198
S'outputs'
p119199
sS'required'
p119200
I00
sS'group_name'
p119201
S'Advanced'
p119202
sa(dp119203
S'name'
p119204
S'system'
p119205
sS'cpp_type'
p119206
S'MooseEnum'
p119207
sS'default'
p119208
S'ALL'
p119209
sS'description'
p119210
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p119211
sS'required'
p119212
I00
sS'options'
p119213
S'NL AUX ALL'
p119214
sS'group_name'
p119215
Nsa(dp119216
S'description'
p119217
g3
sS'cpp_type'
p119218
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119219
sS'default'
p119220
S'NumDOFs'
p119221
sS'name'
p119222
S'type'
p119223
sS'required'
p119224
I00
sS'group_name'
p119225
Nsa(dp119226
S'description'
p119227
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119228
sS'cpp_type'
p119229
S'bool'
p119230
sS'default'
p119231
S'0'
p119232
sS'name'
p119233
S'use_displaced_mesh'
p119234
sS'required'
p119235
I00
sS'group_name'
p119236
S'Advanced'
p119237
sasS'name'
p119238
S'/UserObjects/NumDOFs'
p119239
sa(dp119240
S'description'
p119241
g3
sS'subblocks'
p119242
NsS'parameters'
p119243
(lp119244
(dp119245
S'description'
p119246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119247
sS'cpp_type'
p119248
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119249
sS'default'
p119250
g3
sS'name'
p119251
S'control_tags'
p119252
sS'required'
p119253
I00
sS'group_name'
p119254
S'Advanced'
p119255
sa(dp119256
S'name'
p119257
S'elem_filter'
p119258
sS'cpp_type'
p119259
S'MooseEnum'
p119260
sS'default'
p119261
S'active'
p119262
sS'description'
p119263
S'The type of elements to include in the count (active, total). Default == active\n'
p119264
sS'required'
p119265
I00
sS'options'
p119266
S'active total'
p119267
sS'group_name'
p119268
Nsa(dp119269
S'description'
p119270
S'Set the enabled status of the MooseObject.\n'
p119271
sS'cpp_type'
p119272
S'bool'
p119273
sS'default'
p119274
S'1'
p119275
sS'name'
p119276
S'enable'
p119277
sS'required'
p119278
I00
sS'group_name'
p119279
S'Advanced'
p119280
sa(dp119281
S'name'
p119282
S'execute_on'
p119283
sS'cpp_type'
p119284
S'MultiMooseEnum'
p119285
sS'default'
p119286
S'TIMESTEP_END'
p119287
sS'description'
p119288
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119289
sS'required'
p119290
I00
sS'options'
p119291
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119292
sS'group_name'
p119293
Nsa(dp119294
S'description'
p119295
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119296
sS'cpp_type'
p119297
S'std::vector<OutputName, std::allocator<OutputName> >'
p119298
sS'default'
p119299
g3
sS'name'
p119300
S'outputs'
p119301
sS'required'
p119302
I00
sS'group_name'
p119303
S'Advanced'
p119304
sa(dp119305
S'description'
p119306
g3
sS'cpp_type'
p119307
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119308
sS'default'
p119309
S'NumElems'
p119310
sS'name'
p119311
S'type'
p119312
sS'required'
p119313
I00
sS'group_name'
p119314
Nsa(dp119315
S'description'
p119316
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119317
sS'cpp_type'
p119318
S'bool'
p119319
sS'default'
p119320
S'0'
p119321
sS'name'
p119322
S'use_displaced_mesh'
p119323
sS'required'
p119324
I00
sS'group_name'
p119325
S'Advanced'
p119326
sasS'name'
p119327
S'/UserObjects/NumElems'
p119328
sa(dp119329
S'description'
p119330
g3
sS'subblocks'
p119331
NsS'parameters'
p119332
(lp119333
(dp119334
S'description'
p119335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119336
sS'cpp_type'
p119337
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119338
sS'default'
p119339
g3
sS'name'
p119340
S'control_tags'
p119341
sS'required'
p119342
I00
sS'group_name'
p119343
S'Advanced'
p119344
sa(dp119345
S'description'
p119346
S'Set the enabled status of the MooseObject.\n'
p119347
sS'cpp_type'
p119348
S'bool'
p119349
sS'default'
p119350
S'1'
p119351
sS'name'
p119352
S'enable'
p119353
sS'required'
p119354
I00
sS'group_name'
p119355
S'Advanced'
p119356
sa(dp119357
S'name'
p119358
S'execute_on'
p119359
sS'cpp_type'
p119360
S'MultiMooseEnum'
p119361
sS'default'
p119362
S'TIMESTEP_END'
p119363
sS'description'
p119364
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119365
sS'required'
p119366
I00
sS'options'
p119367
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119368
sS'group_name'
p119369
Nsa(dp119370
S'description'
p119371
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119372
sS'cpp_type'
p119373
S'std::vector<OutputName, std::allocator<OutputName> >'
p119374
sS'default'
p119375
g3
sS'name'
p119376
S'outputs'
p119377
sS'required'
p119378
I00
sS'group_name'
p119379
S'Advanced'
p119380
sa(dp119381
S'description'
p119382
g3
sS'cpp_type'
p119383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119384
sS'default'
p119385
S'NumLinearIterations'
p119386
sS'name'
p119387
S'type'
p119388
sS'required'
p119389
I00
sS'group_name'
p119390
Nsa(dp119391
S'description'
p119392
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119393
sS'cpp_type'
p119394
S'bool'
p119395
sS'default'
p119396
S'0'
p119397
sS'name'
p119398
S'use_displaced_mesh'
p119399
sS'required'
p119400
I00
sS'group_name'
p119401
S'Advanced'
p119402
sasS'name'
p119403
S'/UserObjects/NumLinearIterations'
p119404
sa(dp119405
S'description'
p119406
g3
sS'subblocks'
p119407
NsS'parameters'
p119408
(lp119409
(dp119410
S'description'
p119411
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119412
sS'cpp_type'
p119413
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119414
sS'default'
p119415
g3
sS'name'
p119416
S'control_tags'
p119417
sS'required'
p119418
I00
sS'group_name'
p119419
S'Advanced'
p119420
sa(dp119421
S'description'
p119422
S'Set the enabled status of the MooseObject.\n'
p119423
sS'cpp_type'
p119424
S'bool'
p119425
sS'default'
p119426
S'1'
p119427
sS'name'
p119428
S'enable'
p119429
sS'required'
p119430
I00
sS'group_name'
p119431
S'Advanced'
p119432
sa(dp119433
S'name'
p119434
S'execute_on'
p119435
sS'cpp_type'
p119436
S'MultiMooseEnum'
p119437
sS'default'
p119438
S'TIMESTEP_END'
p119439
sS'description'
p119440
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119441
sS'required'
p119442
I00
sS'options'
p119443
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119444
sS'group_name'
p119445
Nsa(dp119446
S'description'
p119447
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119448
sS'cpp_type'
p119449
S'std::vector<OutputName, std::allocator<OutputName> >'
p119450
sS'default'
p119451
g3
sS'name'
p119452
S'outputs'
p119453
sS'required'
p119454
I00
sS'group_name'
p119455
S'Advanced'
p119456
sa(dp119457
S'description'
p119458
g3
sS'cpp_type'
p119459
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119460
sS'default'
p119461
S'NumNodes'
p119462
sS'name'
p119463
S'type'
p119464
sS'required'
p119465
I00
sS'group_name'
p119466
Nsa(dp119467
S'description'
p119468
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119469
sS'cpp_type'
p119470
S'bool'
p119471
sS'default'
p119472
S'0'
p119473
sS'name'
p119474
S'use_displaced_mesh'
p119475
sS'required'
p119476
I00
sS'group_name'
p119477
S'Advanced'
p119478
sasS'name'
p119479
S'/UserObjects/NumNodes'
p119480
sa(dp119481
S'description'
p119482
g3
sS'subblocks'
p119483
NsS'parameters'
p119484
(lp119485
(dp119486
S'description'
p119487
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p119488
sS'cpp_type'
p119489
S'bool'
p119490
sS'default'
p119491
S'0'
p119492
sS'name'
p119493
S'accumulate_over_step'
p119494
sS'required'
p119495
I00
sS'group_name'
p119496
Nsa(dp119497
S'description'
p119498
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119499
sS'cpp_type'
p119500
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119501
sS'default'
p119502
g3
sS'name'
p119503
S'control_tags'
p119504
sS'required'
p119505
I00
sS'group_name'
p119506
S'Advanced'
p119507
sa(dp119508
S'description'
p119509
S'Set the enabled status of the MooseObject.\n'
p119510
sS'cpp_type'
p119511
S'bool'
p119512
sS'default'
p119513
S'1'
p119514
sS'name'
p119515
S'enable'
p119516
sS'required'
p119517
I00
sS'group_name'
p119518
S'Advanced'
p119519
sa(dp119520
S'name'
p119521
S'execute_on'
p119522
sS'cpp_type'
p119523
S'MultiMooseEnum'
p119524
sS'default'
p119525
S'TIMESTEP_END'
p119526
sS'description'
p119527
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119528
sS'required'
p119529
I00
sS'options'
p119530
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119531
sS'group_name'
p119532
Nsa(dp119533
S'description'
p119534
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119535
sS'cpp_type'
p119536
S'std::vector<OutputName, std::allocator<OutputName> >'
p119537
sS'default'
p119538
g3
sS'name'
p119539
S'outputs'
p119540
sS'required'
p119541
I00
sS'group_name'
p119542
S'Advanced'
p119543
sa(dp119544
S'description'
p119545
g3
sS'cpp_type'
p119546
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119547
sS'default'
p119548
S'NumNonlinearIterations'
p119549
sS'name'
p119550
S'type'
p119551
sS'required'
p119552
I00
sS'group_name'
p119553
Nsa(dp119554
S'description'
p119555
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119556
sS'cpp_type'
p119557
S'bool'
p119558
sS'default'
p119559
S'0'
p119560
sS'name'
p119561
S'use_displaced_mesh'
p119562
sS'required'
p119563
I00
sS'group_name'
p119564
S'Advanced'
p119565
sasS'name'
p119566
S'/UserObjects/NumNonlinearIterations'
p119567
sa(dp119568
S'description'
p119569
g3
sS'subblocks'
p119570
NsS'parameters'
p119571
(lp119572
(dp119573
S'description'
p119574
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119575
sS'cpp_type'
p119576
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119577
sS'default'
p119578
g3
sS'name'
p119579
S'control_tags'
p119580
sS'required'
p119581
I00
sS'group_name'
p119582
S'Advanced'
p119583
sa(dp119584
S'description'
p119585
S'Set the enabled status of the MooseObject.\n'
p119586
sS'cpp_type'
p119587
S'bool'
p119588
sS'default'
p119589
S'1'
p119590
sS'name'
p119591
S'enable'
p119592
sS'required'
p119593
I00
sS'group_name'
p119594
S'Advanced'
p119595
sa(dp119596
S'name'
p119597
S'execute_on'
p119598
sS'cpp_type'
p119599
S'MultiMooseEnum'
p119600
sS'default'
p119601
S'TIMESTEP_END'
p119602
sS'description'
p119603
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119604
sS'required'
p119605
I00
sS'options'
p119606
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119607
sS'group_name'
p119608
Nsa(dp119609
S'description'
p119610
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119611
sS'cpp_type'
p119612
S'std::vector<OutputName, std::allocator<OutputName> >'
p119613
sS'default'
p119614
g3
sS'name'
p119615
S'outputs'
p119616
sS'required'
p119617
I00
sS'group_name'
p119618
S'Advanced'
p119619
sa(dp119620
S'description'
p119621
g3
sS'cpp_type'
p119622
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119623
sS'default'
p119624
S'NumPicardIterations'
p119625
sS'name'
p119626
S'type'
p119627
sS'required'
p119628
I00
sS'group_name'
p119629
Nsa(dp119630
S'description'
p119631
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119632
sS'cpp_type'
p119633
S'bool'
p119634
sS'default'
p119635
S'0'
p119636
sS'name'
p119637
S'use_displaced_mesh'
p119638
sS'required'
p119639
I00
sS'group_name'
p119640
S'Advanced'
p119641
sasS'name'
p119642
S'/UserObjects/NumPicardIterations'
p119643
sa(dp119644
S'description'
p119645
g3
sS'subblocks'
p119646
NsS'parameters'
p119647
(lp119648
(dp119649
S'description'
p119650
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119651
sS'cpp_type'
p119652
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119653
sS'default'
p119654
g3
sS'name'
p119655
S'control_tags'
p119656
sS'required'
p119657
I00
sS'group_name'
p119658
S'Advanced'
p119659
sa(dp119660
S'description'
p119661
S'Set the enabled status of the MooseObject.\n'
p119662
sS'cpp_type'
p119663
S'bool'
p119664
sS'default'
p119665
S'1'
p119666
sS'name'
p119667
S'enable'
p119668
sS'required'
p119669
I00
sS'group_name'
p119670
S'Advanced'
p119671
sa(dp119672
S'name'
p119673
S'execute_on'
p119674
sS'cpp_type'
p119675
S'MultiMooseEnum'
p119676
sS'default'
p119677
S'TIMESTEP_END'
p119678
sS'description'
p119679
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119680
sS'required'
p119681
I00
sS'options'
p119682
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119683
sS'group_name'
p119684
Nsa(dp119685
S'description'
p119686
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119687
sS'cpp_type'
p119688
S'std::vector<OutputName, std::allocator<OutputName> >'
p119689
sS'default'
p119690
g3
sS'name'
p119691
S'outputs'
p119692
sS'required'
p119693
I00
sS'group_name'
p119694
S'Advanced'
p119695
sa(dp119696
S'description'
p119697
g3
sS'cpp_type'
p119698
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119699
sS'default'
p119700
S'NumResidualEvaluations'
p119701
sS'name'
p119702
S'type'
p119703
sS'required'
p119704
I00
sS'group_name'
p119705
Nsa(dp119706
S'description'
p119707
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119708
sS'cpp_type'
p119709
S'bool'
p119710
sS'default'
p119711
S'0'
p119712
sS'name'
p119713
S'use_displaced_mesh'
p119714
sS'required'
p119715
I00
sS'group_name'
p119716
S'Advanced'
p119717
sasS'name'
p119718
S'/UserObjects/NumResidualEvaluations'
p119719
sa(dp119720
S'description'
p119721
g3
sS'subblocks'
p119722
NsS'parameters'
p119723
(lp119724
(dp119725
S'description'
p119726
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119727
sS'cpp_type'
p119728
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119729
sS'default'
p119730
g3
sS'name'
p119731
S'control_tags'
p119732
sS'required'
p119733
I00
sS'group_name'
p119734
S'Advanced'
p119735
sa(dp119736
S'description'
p119737
S'Set the enabled status of the MooseObject.\n'
p119738
sS'cpp_type'
p119739
S'bool'
p119740
sS'default'
p119741
S'1'
p119742
sS'name'
p119743
S'enable'
p119744
sS'required'
p119745
I00
sS'group_name'
p119746
S'Advanced'
p119747
sa(dp119748
S'name'
p119749
S'execute_on'
p119750
sS'cpp_type'
p119751
S'MultiMooseEnum'
p119752
sS'default'
p119753
S'TIMESTEP_END'
p119754
sS'description'
p119755
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119756
sS'required'
p119757
I00
sS'options'
p119758
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119759
sS'group_name'
p119760
Nsa(dp119761
S'description'
p119762
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119763
sS'cpp_type'
p119764
S'std::vector<OutputName, std::allocator<OutputName> >'
p119765
sS'default'
p119766
g3
sS'name'
p119767
S'outputs'
p119768
sS'required'
p119769
I00
sS'group_name'
p119770
S'Advanced'
p119771
sa(dp119772
S'name'
p119773
S'system'
p119774
sS'cpp_type'
p119775
S'MooseEnum'
p119776
sS'default'
p119777
S'nonlinear'
p119778
sS'description'
p119779
S'The system for which you want to print the number of variables.\n'
p119780
sS'required'
p119781
I00
sS'options'
p119782
S'nonlinear auxiliary'
p119783
sS'group_name'
p119784
Nsa(dp119785
S'description'
p119786
g3
sS'cpp_type'
p119787
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119788
sS'default'
p119789
S'NumVars'
p119790
sS'name'
p119791
S'type'
p119792
sS'required'
p119793
I00
sS'group_name'
p119794
Nsa(dp119795
S'description'
p119796
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119797
sS'cpp_type'
p119798
S'bool'
p119799
sS'default'
p119800
S'0'
p119801
sS'name'
p119802
S'use_displaced_mesh'
p119803
sS'required'
p119804
I00
sS'group_name'
p119805
S'Advanced'
p119806
sasS'name'
p119807
S'/UserObjects/NumVars'
p119808
sa(dp119809
S'description'
p119810
g3
sS'subblocks'
p119811
NsS'parameters'
p119812
(lp119813
(dp119814
S'description'
p119815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p119816
sS'cpp_type'
p119817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p119818
sS'default'
p119819
g3
sS'name'
p119820
S'block'
p119821
sS'required'
p119822
I00
sS'group_name'
p119823
Nsa(dp119824
S'description'
p119825
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119826
sS'cpp_type'
p119827
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119828
sS'default'
p119829
g3
sS'name'
p119830
S'control_tags'
p119831
sS'required'
p119832
I00
sS'group_name'
p119833
S'Advanced'
p119834
sa(dp119835
S'description'
p119836
S'Set the enabled status of the MooseObject.\n'
p119837
sS'cpp_type'
p119838
S'bool'
p119839
sS'default'
p119840
S'1'
p119841
sS'name'
p119842
S'enable'
p119843
sS'required'
p119844
I00
sS'group_name'
p119845
S'Advanced'
p119846
sa(dp119847
S'name'
p119848
S'execute_on'
p119849
sS'cpp_type'
p119850
S'MultiMooseEnum'
p119851
sS'default'
p119852
S'TIMESTEP_END'
p119853
sS'description'
p119854
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119855
sS'required'
p119856
I00
sS'options'
p119857
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119858
sS'group_name'
p119859
Nsa(dp119860
S'description'
p119861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119862
sS'cpp_type'
p119863
S'std::vector<OutputName, std::allocator<OutputName> >'
p119864
sS'default'
p119865
g3
sS'name'
p119866
S'outputs'
p119867
sS'required'
p119868
I00
sS'group_name'
p119869
S'Advanced'
p119870
sa(dp119871
S'description'
p119872
S'The seed for the master random number generator\n'
p119873
sS'cpp_type'
p119874
S'unsigned int'
p119875
sS'default'
p119876
S'0'
p119877
sS'name'
p119878
S'seed'
p119879
sS'required'
p119880
I00
sS'group_name'
p119881
S'Advanced'
p119882
sa(dp119883
S'description'
p119884
S'Temperature of simulation\n'
p119885
sS'cpp_type'
p119886
S'double'
p119887
sS'default'
p119888
S'1833'
p119889
sS'name'
p119890
S'temp'
p119891
sS'required'
p119892
I00
sS'group_name'
p119893
Nsa(dp119894
S'description'
p119895
g3
sS'cpp_type'
p119896
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119897
sS'default'
p119898
S'PFCElementEnergyIntegral'
p119899
sS'name'
p119900
S'type'
p119901
sS'required'
p119902
I00
sS'group_name'
p119903
Nsa(dp119904
S'description'
p119905
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119906
sS'cpp_type'
p119907
S'bool'
p119908
sS'default'
p119909
S'0'
p119910
sS'name'
p119911
S'use_displaced_mesh'
p119912
sS'required'
p119913
I00
sS'group_name'
p119914
S'Advanced'
p119915
sa(dp119916
S'description'
p119917
S'The name of the variable that this object operates on\n'
p119918
sS'cpp_type'
p119919
S'VariableName'
p119920
sS'default'
p119921
g3
sS'name'
p119922
S'variable'
p119923
sS'required'
p119924
I01
sS'group_name'
p119925
NsasS'name'
p119926
S'/UserObjects/PFCElementEnergyIntegral'
p119927
sa(dp119928
S'description'
p119929
g3
sS'subblocks'
p119930
NsS'parameters'
p119931
(lp119932
(dp119933
S'description'
p119934
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119935
sS'cpp_type'
p119936
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119937
sS'default'
p119938
g3
sS'name'
p119939
S'control_tags'
p119940
sS'required'
p119941
I00
sS'group_name'
p119942
S'Advanced'
p119943
sa(dp119944
S'description'
p119945
S'Set the enabled status of the MooseObject.\n'
p119946
sS'cpp_type'
p119947
S'bool'
p119948
sS'default'
p119949
S'1'
p119950
sS'name'
p119951
S'enable'
p119952
sS'required'
p119953
I00
sS'group_name'
p119954
S'Advanced'
p119955
sa(dp119956
S'name'
p119957
S'execute_on'
p119958
sS'cpp_type'
p119959
S'MultiMooseEnum'
p119960
sS'default'
p119961
S'TIMESTEP_END'
p119962
sS'description'
p119963
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119964
sS'required'
p119965
I00
sS'options'
p119966
S'none initial linear nonlinear timestep_end timestep_begin custom'
p119967
sS'group_name'
p119968
Nsa(dp119969
S'description'
p119970
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119971
sS'cpp_type'
p119972
S'std::vector<OutputName, std::allocator<OutputName> >'
p119973
sS'default'
p119974
g3
sS'name'
p119975
S'outputs'
p119976
sS'required'
p119977
I00
sS'group_name'
p119978
S'Advanced'
p119979
sa(dp119980
S'description'
p119981
S'The name of the postprocessor used for exit criterion\n'
p119982
sS'cpp_type'
p119983
S'PostprocessorName'
p119984
sS'default'
p119985
g3
sS'name'
p119986
S'postprocessor'
p119987
sS'required'
p119988
I01
sS'group_name'
p119989
Nsa(dp119990
S'description'
p119991
g3
sS'cpp_type'
p119992
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119993
sS'default'
p119994
S'PercentChangePostprocessor'
p119995
sS'name'
p119996
S'type'
p119997
sS'required'
p119998
I00
sS'group_name'
p119999
Nsa(dp120000
S'description'
p120001
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120002
sS'cpp_type'
p120003
S'bool'
p120004
sS'default'
p120005
S'0'
p120006
sS'name'
p120007
S'use_displaced_mesh'
p120008
sS'required'
p120009
I00
sS'group_name'
p120010
S'Advanced'
p120011
sasS'name'
p120012
S'/UserObjects/PercentChangePostprocessor'
p120013
sa(dp120014
S'description'
p120015
g3
sS'subblocks'
p120016
NsS'parameters'
p120017
(lp120018
(dp120019
S'description'
p120020
S'The category or "Header" for the event\n'
p120021
sS'cpp_type'
p120022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120023
sS'default'
p120024
S'Execution'
p120025
sS'name'
p120026
S'category'
p120027
sS'required'
p120028
I00
sS'group_name'
p120029
Nsa(dp120030
S'name'
p120031
S'column'
p120032
sS'cpp_type'
p120033
S'MooseEnum'
p120034
sS'default'
p120035
S'total_time_with_sub'
p120036
sS'description'
p120037
S'The column you want the value of (Default: total_time_with_sub).\n'
p120038
sS'required'
p120039
I00
sS'options'
p120040
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p120041
sS'group_name'
p120042
Nsa(dp120043
S'description'
p120044
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120045
sS'cpp_type'
p120046
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120047
sS'default'
p120048
g3
sS'name'
p120049
S'control_tags'
p120050
sS'required'
p120051
I00
sS'group_name'
p120052
S'Advanced'
p120053
sa(dp120054
S'description'
p120055
S'Set the enabled status of the MooseObject.\n'
p120056
sS'cpp_type'
p120057
S'bool'
p120058
sS'default'
p120059
S'1'
p120060
sS'name'
p120061
S'enable'
p120062
sS'required'
p120063
I00
sS'group_name'
p120064
S'Advanced'
p120065
sa(dp120066
S'description'
p120067
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p120068
sS'cpp_type'
p120069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120070
sS'default'
p120071
g3
sS'name'
p120072
S'event'
p120073
sS'required'
p120074
I01
sS'group_name'
p120075
Nsa(dp120076
S'name'
p120077
S'execute_on'
p120078
sS'cpp_type'
p120079
S'MultiMooseEnum'
p120080
sS'default'
p120081
S'TIMESTEP_END'
p120082
sS'description'
p120083
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120084
sS'required'
p120085
I00
sS'options'
p120086
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120087
sS'group_name'
p120088
Nsa(dp120089
S'description'
p120090
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120091
sS'cpp_type'
p120092
S'std::vector<OutputName, std::allocator<OutputName> >'
p120093
sS'default'
p120094
g3
sS'name'
p120095
S'outputs'
p120096
sS'required'
p120097
I00
sS'group_name'
p120098
S'Advanced'
p120099
sa(dp120100
S'description'
p120101
g3
sS'cpp_type'
p120102
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120103
sS'default'
p120104
S'PerformanceData'
p120105
sS'name'
p120106
S'type'
p120107
sS'required'
p120108
I00
sS'group_name'
p120109
Nsa(dp120110
S'description'
p120111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120112
sS'cpp_type'
p120113
S'bool'
p120114
sS'default'
p120115
S'0'
p120116
sS'name'
p120117
S'use_displaced_mesh'
p120118
sS'required'
p120119
I00
sS'group_name'
p120120
S'Advanced'
p120121
sasS'name'
p120122
S'/UserObjects/PerformanceData'
p120123
sa(dp120124
S'description'
p120125
g3
sS'subblocks'
p120126
NsS'parameters'
p120127
(lp120128
(dp120129
S'description'
p120130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120131
sS'cpp_type'
p120132
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120133
sS'default'
p120134
g3
sS'name'
p120135
S'control_tags'
p120136
sS'required'
p120137
I00
sS'group_name'
p120138
S'Advanced'
p120139
sa(dp120140
S'description'
p120141
S'Set the enabled status of the MooseObject.\n'
p120142
sS'cpp_type'
p120143
S'bool'
p120144
sS'default'
p120145
S'1'
p120146
sS'name'
p120147
S'enable'
p120148
sS'required'
p120149
I00
sS'group_name'
p120150
S'Advanced'
p120151
sa(dp120152
S'name'
p120153
S'execute_on'
p120154
sS'cpp_type'
p120155
S'MultiMooseEnum'
p120156
sS'default'
p120157
S'TIMESTEP_END'
p120158
sS'description'
p120159
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120160
sS'required'
p120161
I00
sS'options'
p120162
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120163
sS'group_name'
p120164
Nsa(dp120165
S'description'
p120166
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120167
sS'cpp_type'
p120168
S'std::vector<OutputName, std::allocator<OutputName> >'
p120169
sS'default'
p120170
g3
sS'name'
p120171
S'outputs'
p120172
sS'required'
p120173
I00
sS'group_name'
p120174
S'Advanced'
p120175
sa(dp120176
S'description'
p120177
S'The physical point where the solution will be evaluated.\n'
p120178
sS'cpp_type'
p120179
S'libMesh::Point'
p120180
sS'default'
p120181
g3
sS'name'
p120182
S'point'
p120183
sS'required'
p120184
I01
sS'group_name'
p120185
Nsa(dp120186
S'description'
p120187
g3
sS'cpp_type'
p120188
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120189
sS'default'
p120190
S'PointValue'
p120191
sS'name'
p120192
S'type'
p120193
sS'required'
p120194
I00
sS'group_name'
p120195
Nsa(dp120196
S'description'
p120197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120198
sS'cpp_type'
p120199
S'bool'
p120200
sS'default'
p120201
S'0'
p120202
sS'name'
p120203
S'use_displaced_mesh'
p120204
sS'required'
p120205
I00
sS'group_name'
p120206
S'Advanced'
p120207
sa(dp120208
S'description'
p120209
S'The name of the variable that this postprocessor operates on.\n'
p120210
sS'cpp_type'
p120211
S'VariableName'
p120212
sS'default'
p120213
g3
sS'name'
p120214
S'variable'
p120215
sS'required'
p120216
I01
sS'group_name'
p120217
NsasS'name'
p120218
S'/UserObjects/PointValue'
p120219
sa(dp120220
S'description'
p120221
S'Assign random euler angles for each grain.\n'
p120222
sS'subblocks'
p120223
NsS'parameters'
p120224
(lp120225
(dp120226
S'description'
p120227
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120228
sS'cpp_type'
p120229
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120230
sS'default'
p120231
g3
sS'name'
p120232
S'control_tags'
p120233
sS'required'
p120234
I00
sS'group_name'
p120235
S'Advanced'
p120236
sa(dp120237
S'description'
p120238
S'Set the enabled status of the MooseObject.\n'
p120239
sS'cpp_type'
p120240
S'bool'
p120241
sS'default'
p120242
S'1'
p120243
sS'name'
p120244
S'enable'
p120245
sS'required'
p120246
I00
sS'group_name'
p120247
S'Advanced'
p120248
sa(dp120249
S'name'
p120250
S'execute_on'
p120251
sS'cpp_type'
p120252
S'MultiMooseEnum'
p120253
sS'default'
p120254
S'TIMESTEP_END'
p120255
sS'description'
p120256
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120257
sS'required'
p120258
I00
sS'options'
p120259
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120260
sS'group_name'
p120261
Nsa(dp120262
S'description'
p120263
S'The FeatureFloodCount UserObject to get values from.\n'
p120264
sS'cpp_type'
p120265
S'UserObjectName'
p120266
sS'default'
p120267
g3
sS'name'
p120268
S'grain_tracker_object'
p120269
sS'required'
p120270
I01
sS'group_name'
p120271
Nsa(dp120272
S'description'
p120273
S'Seed value for the random number generator\n'
p120274
sS'cpp_type'
p120275
S'unsigned int'
p120276
sS'default'
p120277
S'0'
p120278
sS'name'
p120279
S'seed'
p120280
sS'required'
p120281
I00
sS'group_name'
p120282
Nsa(dp120283
S'description'
p120284
g3
sS'cpp_type'
p120285
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120286
sS'default'
p120287
S'RandomEulerAngleProvider'
p120288
sS'name'
p120289
S'type'
p120290
sS'required'
p120291
I00
sS'group_name'
p120292
Nsa(dp120293
S'description'
p120294
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120295
sS'cpp_type'
p120296
S'bool'
p120297
sS'default'
p120298
S'0'
p120299
sS'name'
p120300
S'use_displaced_mesh'
p120301
sS'required'
p120302
I00
sS'group_name'
p120303
S'Advanced'
p120304
sasS'name'
p120305
S'/UserObjects/RandomEulerAngleProvider'
p120306
sa(dp120307
S'description'
p120308
g3
sS'subblocks'
p120309
NsS'parameters'
p120310
(lp120311
(dp120312
S'description'
p120313
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120314
sS'cpp_type'
p120315
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120316
sS'default'
p120317
g3
sS'name'
p120318
S'control_tags'
p120319
sS'required'
p120320
I00
sS'group_name'
p120321
S'Advanced'
p120322
sa(dp120323
S'description'
p120324
S'The default value\n'
p120325
sS'cpp_type'
p120326
S'double'
p120327
sS'default'
p120328
g3
sS'name'
p120329
S'default'
p120330
sS'required'
p120331
I00
sS'group_name'
p120332
Nsa(dp120333
S'description'
p120334
S'Set the enabled status of the MooseObject.\n'
p120335
sS'cpp_type'
p120336
S'bool'
p120337
sS'default'
p120338
S'1'
p120339
sS'name'
p120340
S'enable'
p120341
sS'required'
p120342
I00
sS'group_name'
p120343
S'Advanced'
p120344
sa(dp120345
S'name'
p120346
S'execute_on'
p120347
sS'cpp_type'
p120348
S'MultiMooseEnum'
p120349
sS'default'
p120350
S'TIMESTEP_END'
p120351
sS'description'
p120352
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120353
sS'required'
p120354
I00
sS'options'
p120355
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120356
sS'group_name'
p120357
Nsa(dp120358
S'description'
p120359
S'Initialize the old postprocessor value with the default value\n'
p120360
sS'cpp_type'
p120361
S'bool'
p120362
sS'default'
p120363
S'1'
p120364
sS'name'
p120365
S'initialize_old'
p120366
sS'required'
p120367
I00
sS'group_name'
p120368
Nsa(dp120369
S'description'
p120370
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120371
sS'cpp_type'
p120372
S'std::vector<OutputName, std::allocator<OutputName> >'
p120373
sS'default'
p120374
g3
sS'name'
p120375
S'outputs'
p120376
sS'required'
p120377
I00
sS'group_name'
p120378
S'Advanced'
p120379
sa(dp120380
S'description'
p120381
g3
sS'cpp_type'
p120382
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120383
sS'default'
p120384
S'Receiver'
p120385
sS'name'
p120386
S'type'
p120387
sS'required'
p120388
I00
sS'group_name'
p120389
Nsa(dp120390
S'description'
p120391
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120392
sS'cpp_type'
p120393
S'bool'
p120394
sS'default'
p120395
S'0'
p120396
sS'name'
p120397
S'use_displaced_mesh'
p120398
sS'required'
p120399
I00
sS'group_name'
p120400
S'Advanced'
p120401
sasS'name'
p120402
S'/UserObjects/Receiver'
p120403
sa(dp120404
S'description'
p120405
g3
sS'subblocks'
p120406
NsS'parameters'
p120407
(lp120408
(dp120409
S'description'
p120410
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120411
sS'cpp_type'
p120412
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120413
sS'default'
p120414
g3
sS'name'
p120415
S'control_tags'
p120416
sS'required'
p120417
I00
sS'group_name'
p120418
S'Advanced'
p120419
sa(dp120420
S'description'
p120421
S'Set the enabled status of the MooseObject.\n'
p120422
sS'cpp_type'
p120423
S'bool'
p120424
sS'default'
p120425
S'1'
p120426
sS'name'
p120427
S'enable'
p120428
sS'required'
p120429
I00
sS'group_name'
p120430
S'Advanced'
p120431
sa(dp120432
S'name'
p120433
S'execute_on'
p120434
sS'cpp_type'
p120435
S'MultiMooseEnum'
p120436
sS'default'
p120437
S'TIMESTEP_END'
p120438
sS'description'
p120439
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120440
sS'required'
p120441
I00
sS'options'
p120442
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120443
sS'group_name'
p120444
Nsa(dp120445
S'description'
p120446
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120447
sS'cpp_type'
p120448
S'std::vector<OutputName, std::allocator<OutputName> >'
p120449
sS'default'
p120450
g3
sS'name'
p120451
S'outputs'
p120452
sS'required'
p120453
I00
sS'group_name'
p120454
S'Advanced'
p120455
sa(dp120456
S'description'
p120457
g3
sS'cpp_type'
p120458
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120459
sS'default'
p120460
S'RelativeSolutionDifferenceNorm'
p120461
sS'name'
p120462
S'type'
p120463
sS'required'
p120464
I00
sS'group_name'
p120465
Nsa(dp120466
S'description'
p120467
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120468
sS'cpp_type'
p120469
S'bool'
p120470
sS'default'
p120471
S'0'
p120472
sS'name'
p120473
S'use_displaced_mesh'
p120474
sS'required'
p120475
I00
sS'group_name'
p120476
S'Advanced'
p120477
sasS'name'
p120478
S'/UserObjects/RelativeSolutionDifferenceNorm'
p120479
sa(dp120480
S'description'
p120481
g3
sS'subblocks'
p120482
NsS'parameters'
p120483
(lp120484
(dp120485
S'description'
p120486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120487
sS'cpp_type'
p120488
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120489
sS'default'
p120490
g3
sS'name'
p120491
S'control_tags'
p120492
sS'required'
p120493
I00
sS'group_name'
p120494
S'Advanced'
p120495
sa(dp120496
S'description'
p120497
S'Set the enabled status of the MooseObject.\n'
p120498
sS'cpp_type'
p120499
S'bool'
p120500
sS'default'
p120501
S'1'
p120502
sS'name'
p120503
S'enable'
p120504
sS'required'
p120505
I00
sS'group_name'
p120506
S'Advanced'
p120507
sa(dp120508
S'name'
p120509
S'execute_on'
p120510
sS'cpp_type'
p120511
S'MultiMooseEnum'
p120512
sS'default'
p120513
S'TIMESTEP_END'
p120514
sS'description'
p120515
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120516
sS'required'
p120517
I00
sS'options'
p120518
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120519
sS'group_name'
p120520
Nsa(dp120521
S'description'
p120522
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120523
sS'cpp_type'
p120524
S'std::vector<OutputName, std::allocator<OutputName> >'
p120525
sS'default'
p120526
g3
sS'name'
p120527
S'outputs'
p120528
sS'required'
p120529
I00
sS'group_name'
p120530
S'Advanced'
p120531
sa(dp120532
S'name'
p120533
S'residual_type'
p120534
sS'cpp_type'
p120535
S'MooseEnum'
p120536
sS'default'
p120537
S'FINAL'
p120538
sS'description'
p120539
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p120540
sS'required'
p120541
I00
sS'options'
p120542
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p120543
sS'group_name'
p120544
Nsa(dp120545
S'description'
p120546
g3
sS'cpp_type'
p120547
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120548
sS'default'
p120549
S'Residual'
p120550
sS'name'
p120551
S'type'
p120552
sS'required'
p120553
I00
sS'group_name'
p120554
Nsa(dp120555
S'description'
p120556
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120557
sS'cpp_type'
p120558
S'bool'
p120559
sS'default'
p120560
S'0'
p120561
sS'name'
p120562
S'use_displaced_mesh'
p120563
sS'required'
p120564
I00
sS'group_name'
p120565
S'Advanced'
p120566
sasS'name'
p120567
S'/UserObjects/Residual'
p120568
sa(dp120569
S'description'
p120570
g3
sS'subblocks'
p120571
NsS'parameters'
p120572
(lp120573
(dp120574
S'description'
p120575
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120576
sS'cpp_type'
p120577
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120578
sS'default'
p120579
g3
sS'name'
p120580
S'control_tags'
p120581
sS'required'
p120582
I00
sS'group_name'
p120583
S'Advanced'
p120584
sa(dp120585
S'description'
p120586
S'Set the enabled status of the MooseObject.\n'
p120587
sS'cpp_type'
p120588
S'bool'
p120589
sS'default'
p120590
S'1'
p120591
sS'name'
p120592
S'enable'
p120593
sS'required'
p120594
I00
sS'group_name'
p120595
S'Advanced'
p120596
sa(dp120597
S'name'
p120598
S'execute_on'
p120599
sS'cpp_type'
p120600
S'MultiMooseEnum'
p120601
sS'default'
p120602
S'TIMESTEP_END'
p120603
sS'description'
p120604
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120605
sS'required'
p120606
I00
sS'options'
p120607
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120608
sS'group_name'
p120609
Nsa(dp120610
S'description'
p120611
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120612
sS'cpp_type'
p120613
S'std::vector<OutputName, std::allocator<OutputName> >'
p120614
sS'default'
p120615
g3
sS'name'
p120616
S'outputs'
p120617
sS'required'
p120618
I00
sS'group_name'
p120619
S'Advanced'
p120620
sa(dp120621
S'name'
p120622
S'time_type'
p120623
sS'cpp_type'
p120624
S'MooseEnum'
p120625
sS'default'
p120626
g3
sS'description'
p120627
S'Whether to output the total elapsed or just the active time\n'
p120628
sS'required'
p120629
I01
sS'options'
p120630
S'alive active'
p120631
sS'group_name'
p120632
Nsa(dp120633
S'description'
p120634
g3
sS'cpp_type'
p120635
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120636
sS'default'
p120637
S'RunTime'
p120638
sS'name'
p120639
S'type'
p120640
sS'required'
p120641
I00
sS'group_name'
p120642
Nsa(dp120643
S'description'
p120644
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120645
sS'cpp_type'
p120646
S'bool'
p120647
sS'default'
p120648
S'0'
p120649
sS'name'
p120650
S'use_displaced_mesh'
p120651
sS'required'
p120652
I00
sS'group_name'
p120653
S'Advanced'
p120654
sasS'name'
p120655
S'/UserObjects/RunTime'
p120656
sa(dp120657
S'description'
p120658
g3
sS'subblocks'
p120659
NsS'parameters'
p120660
(lp120661
(dp120662
S'description'
p120663
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120664
sS'cpp_type'
p120665
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120666
sS'default'
p120667
g3
sS'name'
p120668
S'control_tags'
p120669
sS'required'
p120670
I00
sS'group_name'
p120671
S'Advanced'
p120672
sa(dp120673
S'description'
p120674
S'Set the enabled status of the MooseObject.\n'
p120675
sS'cpp_type'
p120676
S'bool'
p120677
sS'default'
p120678
S'1'
p120679
sS'name'
p120680
S'enable'
p120681
sS'required'
p120682
I00
sS'group_name'
p120683
S'Advanced'
p120684
sa(dp120685
S'name'
p120686
S'execute_on'
p120687
sS'cpp_type'
p120688
S'MultiMooseEnum'
p120689
sS'default'
p120690
S'TIMESTEP_END'
p120691
sS'description'
p120692
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120693
sS'required'
p120694
I00
sS'options'
p120695
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120696
sS'group_name'
p120697
Nsa(dp120698
S'description'
p120699
S'The analytic solution to compare against\n'
p120700
sS'cpp_type'
p120701
S'FunctionName'
p120702
sS'default'
p120703
g3
sS'name'
p120704
S'function'
p120705
sS'required'
p120706
I01
sS'group_name'
p120707
Nsa(dp120708
S'description'
p120709
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120710
sS'cpp_type'
p120711
S'std::vector<OutputName, std::allocator<OutputName> >'
p120712
sS'default'
p120713
g3
sS'name'
p120714
S'outputs'
p120715
sS'required'
p120716
I00
sS'group_name'
p120717
S'Advanced'
p120718
sa(dp120719
S'description'
p120720
g3
sS'cpp_type'
p120721
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120722
sS'default'
p120723
S'ScalarL2Error'
p120724
sS'name'
p120725
S'type'
p120726
sS'required'
p120727
I00
sS'group_name'
p120728
Nsa(dp120729
S'description'
p120730
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120731
sS'cpp_type'
p120732
S'bool'
p120733
sS'default'
p120734
S'0'
p120735
sS'name'
p120736
S'use_displaced_mesh'
p120737
sS'required'
p120738
I00
sS'group_name'
p120739
S'Advanced'
p120740
sa(dp120741
S'description'
p120742
S'The name of the scalar variable\n'
p120743
sS'cpp_type'
p120744
S'VariableName'
p120745
sS'default'
p120746
g3
sS'name'
p120747
S'variable'
p120748
sS'required'
p120749
I01
sS'group_name'
p120750
NsasS'name'
p120751
S'/UserObjects/ScalarL2Error'
p120752
sa(dp120753
S'description'
p120754
g3
sS'subblocks'
p120755
NsS'parameters'
p120756
(lp120757
(dp120758
S'description'
p120759
S'Component to output for this variable\n'
p120760
sS'cpp_type'
p120761
S'unsigned int'
p120762
sS'default'
p120763
S'0'
p120764
sS'name'
p120765
S'component'
p120766
sS'required'
p120767
I00
sS'group_name'
p120768
Nsa(dp120769
S'description'
p120770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120771
sS'cpp_type'
p120772
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120773
sS'default'
p120774
g3
sS'name'
p120775
S'control_tags'
p120776
sS'required'
p120777
I00
sS'group_name'
p120778
S'Advanced'
p120779
sa(dp120780
S'description'
p120781
S'Set the enabled status of the MooseObject.\n'
p120782
sS'cpp_type'
p120783
S'bool'
p120784
sS'default'
p120785
S'1'
p120786
sS'name'
p120787
S'enable'
p120788
sS'required'
p120789
I00
sS'group_name'
p120790
S'Advanced'
p120791
sa(dp120792
S'name'
p120793
S'execute_on'
p120794
sS'cpp_type'
p120795
S'MultiMooseEnum'
p120796
sS'default'
p120797
S'TIMESTEP_END'
p120798
sS'description'
p120799
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120800
sS'required'
p120801
I00
sS'options'
p120802
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120803
sS'group_name'
p120804
Nsa(dp120805
S'description'
p120806
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120807
sS'cpp_type'
p120808
S'std::vector<OutputName, std::allocator<OutputName> >'
p120809
sS'default'
p120810
g3
sS'name'
p120811
S'outputs'
p120812
sS'required'
p120813
I00
sS'group_name'
p120814
S'Advanced'
p120815
sa(dp120816
S'description'
p120817
g3
sS'cpp_type'
p120818
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120819
sS'default'
p120820
S'ScalarVariable'
p120821
sS'name'
p120822
S'type'
p120823
sS'required'
p120824
I00
sS'group_name'
p120825
Nsa(dp120826
S'description'
p120827
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120828
sS'cpp_type'
p120829
S'bool'
p120830
sS'default'
p120831
S'0'
p120832
sS'name'
p120833
S'use_displaced_mesh'
p120834
sS'required'
p120835
I00
sS'group_name'
p120836
S'Advanced'
p120837
sa(dp120838
S'description'
p120839
S'Name of the variable\n'
p120840
sS'cpp_type'
p120841
S'VariableName'
p120842
sS'default'
p120843
g3
sS'name'
p120844
S'variable'
p120845
sS'required'
p120846
I01
sS'group_name'
p120847
NsasS'name'
p120848
S'/UserObjects/ScalarVariable'
p120849
sa(dp120850
S'description'
p120851
g3
sS'subblocks'
p120852
NsS'parameters'
p120853
(lp120854
(dp120855
S'description'
p120856
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120857
sS'cpp_type'
p120858
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120859
sS'default'
p120860
g3
sS'name'
p120861
S'control_tags'
p120862
sS'required'
p120863
I00
sS'group_name'
p120864
S'Advanced'
p120865
sa(dp120866
S'description'
p120867
S'Set the enabled status of the MooseObject.\n'
p120868
sS'cpp_type'
p120869
S'bool'
p120870
sS'default'
p120871
S'1'
p120872
sS'name'
p120873
S'enable'
p120874
sS'required'
p120875
I00
sS'group_name'
p120876
S'Advanced'
p120877
sa(dp120878
S'name'
p120879
S'execute_on'
p120880
sS'cpp_type'
p120881
S'MultiMooseEnum'
p120882
sS'default'
p120883
S'TIMESTEP_END'
p120884
sS'description'
p120885
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120886
sS'required'
p120887
I00
sS'options'
p120888
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120889
sS'group_name'
p120890
Nsa(dp120891
S'description'
p120892
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120893
sS'cpp_type'
p120894
S'std::vector<OutputName, std::allocator<OutputName> >'
p120895
sS'default'
p120896
g3
sS'name'
p120897
S'outputs'
p120898
sS'required'
p120899
I00
sS'group_name'
p120900
S'Advanced'
p120901
sa(dp120902
S'description'
p120903
S'The scaling factor\n'
p120904
sS'cpp_type'
p120905
S'double'
p120906
sS'default'
p120907
S'1'
p120908
sS'name'
p120909
S'scaling_factor'
p120910
sS'required'
p120911
I00
sS'group_name'
p120912
Nsa(dp120913
S'description'
p120914
g3
sS'cpp_type'
p120915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120916
sS'default'
p120917
S'ScalePostprocessor'
p120918
sS'name'
p120919
S'type'
p120920
sS'required'
p120921
I00
sS'group_name'
p120922
Nsa(dp120923
S'description'
p120924
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120925
sS'cpp_type'
p120926
S'bool'
p120927
sS'default'
p120928
S'0'
p120929
sS'name'
p120930
S'use_displaced_mesh'
p120931
sS'required'
p120932
I00
sS'group_name'
p120933
S'Advanced'
p120934
sa(dp120935
S'description'
p120936
S'The postprocessor to be scaled\n'
p120937
sS'cpp_type'
p120938
S'PostprocessorName'
p120939
sS'default'
p120940
g3
sS'name'
p120941
S'value'
p120942
sS'required'
p120943
I01
sS'group_name'
p120944
NsasS'name'
p120945
S'/UserObjects/ScalePostprocessor'
p120946
sa(dp120947
S'description'
p120948
g3
sS'subblocks'
p120949
NsS'parameters'
p120950
(lp120951
(dp120952
S'description'
p120953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120954
sS'cpp_type'
p120955
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120956
sS'default'
p120957
g3
sS'name'
p120958
S'boundary'
p120959
sS'required'
p120960
I01
sS'group_name'
p120961
Nsa(dp120962
S'description'
p120963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120964
sS'cpp_type'
p120965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120966
sS'default'
p120967
g3
sS'name'
p120968
S'control_tags'
p120969
sS'required'
p120970
I00
sS'group_name'
p120971
S'Advanced'
p120972
sa(dp120973
S'description'
p120974
S'Set the enabled status of the MooseObject.\n'
p120975
sS'cpp_type'
p120976
S'bool'
p120977
sS'default'
p120978
S'1'
p120979
sS'name'
p120980
S'enable'
p120981
sS'required'
p120982
I00
sS'group_name'
p120983
S'Advanced'
p120984
sa(dp120985
S'name'
p120986
S'execute_on'
p120987
sS'cpp_type'
p120988
S'MultiMooseEnum'
p120989
sS'default'
p120990
S'TIMESTEP_END'
p120991
sS'description'
p120992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120993
sS'required'
p120994
I00
sS'options'
p120995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p120996
sS'group_name'
p120997
Nsa(dp120998
S'description'
p120999
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p121000
sS'cpp_type'
p121001
S'std::vector<OutputName, std::allocator<OutputName> >'
p121002
sS'default'
p121003
g3
sS'name'
p121004
S'outputs'
p121005
sS'required'
p121006
I00
sS'group_name'
p121007
S'Advanced'
p121008
sa(dp121009
S'description'
p121010
g3
sS'cpp_type'
p121011
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121012
sS'default'
p121013
S'SideAverageValue'
p121014
sS'name'
p121015
S'type'
p121016
sS'required'
p121017
I00
sS'group_name'
p121018
Nsa(dp121019
S'description'
p121020
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121021
sS'cpp_type'
p121022
S'bool'
p121023
sS'default'
p121024
S'0'
p121025
sS'name'
p121026
S'use_displaced_mesh'
p121027
sS'required'
p121028
I00
sS'group_name'
p121029
S'Advanced'
p121030
sa(dp121031
S'description'
p121032
S'The name of the variable that this boundary condition applies to\n'
p121033
sS'cpp_type'
p121034
S'std::vector<VariableName>'
p121035
sS'default'
p121036
g3
sS'name'
p121037
S'variable'
p121038
sS'required'
p121039
I01
sS'group_name'
p121040
NsasS'name'
p121041
S'/UserObjects/SideAverageValue'
p121042
sa(dp121043
S'description'
p121044
g3
sS'subblocks'
p121045
NsS'parameters'
p121046
(lp121047
(dp121048
S'description'
p121049
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p121050
sS'cpp_type'
p121051
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p121052
sS'default'
p121053
g3
sS'name'
p121054
S'boundary'
p121055
sS'required'
p121056
I01
sS'group_name'
p121057
Nsa(dp121058
S'description'
p121059
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121060
sS'cpp_type'
p121061
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121062
sS'default'
p121063
g3
sS'name'
p121064
S'control_tags'
p121065
sS'required'
p121066
I00
sS'group_name'
p121067
S'Advanced'
p121068
sa(dp121069
S'description'
p121070
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p121071
sS'cpp_type'
p121072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121073
sS'default'
p121074
g3
sS'name'
p121075
S'diffusivity'
p121076
sS'required'
p121077
I01
sS'group_name'
p121078
Nsa(dp121079
S'description'
p121080
S'Set the enabled status of the MooseObject.\n'
p121081
sS'cpp_type'
p121082
S'bool'
p121083
sS'default'
p121084
S'1'
p121085
sS'name'
p121086
S'enable'
p121087
sS'required'
p121088
I00
sS'group_name'
p121089
S'Advanced'
p121090
sa(dp121091
S'name'
p121092
S'execute_on'
p121093
sS'cpp_type'
p121094
S'MultiMooseEnum'
p121095
sS'default'
p121096
S'TIMESTEP_END'
p121097
sS'description'
p121098
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121099
sS'required'
p121100
I00
sS'options'
p121101
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121102
sS'group_name'
p121103
Nsa(dp121104
S'description'
p121105
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p121106
sS'cpp_type'
p121107
S'std::vector<OutputName, std::allocator<OutputName> >'
p121108
sS'default'
p121109
g3
sS'name'
p121110
S'outputs'
p121111
sS'required'
p121112
I00
sS'group_name'
p121113
S'Advanced'
p121114
sa(dp121115
S'description'
p121116
g3
sS'cpp_type'
p121117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121118
sS'default'
p121119
S'SideFluxAverage'
p121120
sS'name'
p121121
S'type'
p121122
sS'required'
p121123
I00
sS'group_name'
p121124
Nsa(dp121125
S'description'
p121126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121127
sS'cpp_type'
p121128
S'bool'
p121129
sS'default'
p121130
S'0'
p121131
sS'name'
p121132
S'use_displaced_mesh'
p121133
sS'required'
p121134
I00
sS'group_name'
p121135
S'Advanced'
p121136
sa(dp121137
S'description'
p121138
S'The name of the variable that this boundary condition applies to\n'
p121139
sS'cpp_type'
p121140
S'std::vector<VariableName>'
p121141
sS'default'
p121142
g3
sS'name'
p121143
S'variable'
p121144
sS'required'
p121145
I01
sS'group_name'
p121146
NsasS'name'
p121147
S'/UserObjects/SideFluxAverage'
p121148
sa(dp121149
S'description'
p121150
g3
sS'subblocks'
p121151
NsS'parameters'
p121152
(lp121153
(dp121154
S'description'
p121155
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p121156
sS'cpp_type'
p121157
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p121158
sS'default'
p121159
g3
sS'name'
p121160
S'boundary'
p121161
sS'required'
p121162
I01
sS'group_name'
p121163
Nsa(dp121164
S'description'
p121165
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121166
sS'cpp_type'
p121167
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121168
sS'default'
p121169
g3
sS'name'
p121170
S'control_tags'
p121171
sS'required'
p121172
I00
sS'group_name'
p121173
S'Advanced'
p121174
sa(dp121175
S'description'
p121176
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p121177
sS'cpp_type'
p121178
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121179
sS'default'
p121180
g3
sS'name'
p121181
S'diffusivity'
p121182
sS'required'
p121183
I01
sS'group_name'
p121184
Nsa(dp121185
S'description'
p121186
S'Set the enabled status of the MooseObject.\n'
p121187
sS'cpp_type'
p121188
S'bool'
p121189
sS'default'
p121190
S'1'
p121191
sS'name'
p121192
S'enable'
p121193
sS'required'
p121194
I00
sS'group_name'
p121195
S'Advanced'
p121196
sa(dp121197
S'name'
p121198
S'execute_on'
p121199
sS'cpp_type'
p121200
S'MultiMooseEnum'
p121201
sS'default'
p121202
S'TIMESTEP_END'
p121203
sS'description'
p121204
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121205
sS'required'
p121206
I00
sS'options'
p121207
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121208
sS'group_name'
p121209
Nsa(dp121210
S'description'
p121211
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p121212
sS'cpp_type'
p121213
S'std::vector<OutputName, std::allocator<OutputName> >'
p121214
sS'default'
p121215
g3
sS'name'
p121216
S'outputs'
p121217
sS'required'
p121218
I00
sS'group_name'
p121219
S'Advanced'
p121220
sa(dp121221
S'description'
p121222
g3
sS'cpp_type'
p121223
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121224
sS'default'
p121225
S'SideFluxIntegral'
p121226
sS'name'
p121227
S'type'
p121228
sS'required'
p121229
I00
sS'group_name'
p121230
Nsa(dp121231
S'description'
p121232
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121233
sS'cpp_type'
p121234
S'bool'
p121235
sS'default'
p121236
S'0'
p121237
sS'name'
p121238
S'use_displaced_mesh'
p121239
sS'required'
p121240
I00
sS'group_name'
p121241
S'Advanced'
p121242
sa(dp121243
S'description'
p121244
S'The name of the variable that this boundary condition applies to\n'
p121245
sS'cpp_type'
p121246
S'std::vector<VariableName>'
p121247
sS'default'
p121248
g3
sS'name'
p121249
S'variable'
p121250
sS'required'
p121251
I01
sS'group_name'
p121252
NsasS'name'
p121253
S'/UserObjects/SideFluxIntegral'
p121254
sa(dp121255
S'description'
p121256
g3
sS'subblocks'
p121257
NsS'parameters'
p121258
(lp121259
(dp121260
S'description'
p121261
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p121262
sS'cpp_type'
p121263
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p121264
sS'default'
p121265
g3
sS'name'
p121266
S'boundary'
p121267
sS'required'
p121268
I01
sS'group_name'
p121269
Nsa(dp121270
S'description'
p121271
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121272
sS'cpp_type'
p121273
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121274
sS'default'
p121275
g3
sS'name'
p121276
S'control_tags'
p121277
sS'required'
p121278
I00
sS'group_name'
p121279
S'Advanced'
p121280
sa(dp121281
S'description'
p121282
S'Set the enabled status of the MooseObject.\n'
p121283
sS'cpp_type'
p121284
S'bool'
p121285
sS'default'
p121286
S'1'
p121287
sS'name'
p121288
S'enable'
p121289
sS'required'
p121290
I00
sS'group_name'
p121291
S'Advanced'
p121292
sa(dp121293
S'name'
p121294
S'execute_on'
p121295
sS'cpp_type'
p121296
S'MultiMooseEnum'
p121297
sS'default'
p121298
S'TIMESTEP_END'
p121299
sS'description'
p121300
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121301
sS'required'
p121302
I00
sS'options'
p121303
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121304
sS'group_name'
p121305
Nsa(dp121306
S'description'
p121307
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p121308
sS'cpp_type'
p121309
S'std::vector<OutputName, std::allocator<OutputName> >'
p121310
sS'default'
p121311
g3
sS'name'
p121312
S'outputs'
p121313
sS'required'
p121314
I00
sS'group_name'
p121315
S'Advanced'
p121316
sa(dp121317
S'description'
p121318
g3
sS'cpp_type'
p121319
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121320
sS'default'
p121321
S'SideIntegralVariablePostprocessor'
p121322
sS'name'
p121323
S'type'
p121324
sS'required'
p121325
I00
sS'group_name'
p121326
Nsa(dp121327
S'description'
p121328
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121329
sS'cpp_type'
p121330
S'bool'
p121331
sS'default'
p121332
S'0'
p121333
sS'name'
p121334
S'use_displaced_mesh'
p121335
sS'required'
p121336
I00
sS'group_name'
p121337
S'Advanced'
p121338
sa(dp121339
S'description'
p121340
S'The name of the variable that this boundary condition applies to\n'
p121341
sS'cpp_type'
p121342
S'std::vector<VariableName>'
p121343
sS'default'
p121344
g3
sS'name'
p121345
S'variable'
p121346
sS'required'
p121347
I01
sS'group_name'
p121348
NsasS'name'
p121349
S'/UserObjects/SideIntegralVariablePostprocessor'
p121350
sa(dp121351
S'description'
p121352
S'Process an XYZ file of atomic coordinates and filter atoms via threshold or map variable values.\n'
p121353
sS'subblocks'
p121354
NsS'parameters'
p121355
(lp121356
(dp121357
S'description'
p121358
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121359
sS'cpp_type'
p121360
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121361
sS'default'
p121362
g3
sS'name'
p121363
S'control_tags'
p121364
sS'required'
p121365
I00
sS'group_name'
p121366
S'Advanced'
p121367
sa(dp121368
S'description'
p121369
S'Set the enabled status of the MooseObject.\n'
p121370
sS'cpp_type'
p121371
S'bool'
p121372
sS'default'
p121373
S'1'
p121374
sS'name'
p121375
S'enable'
p121376
sS'required'
p121377
I00
sS'group_name'
p121378
S'Advanced'
p121379
sa(dp121380
S'description'
p121381
S'The name of the file holding the equation system info in xda format (xda only).\n'
p121382
sS'cpp_type'
p121383
S'FileName'
p121384
sS'default'
p121385
S'<not supplied>'
p121386
sS'name'
p121387
S'es'
p121388
sS'required'
p121389
I00
sS'group_name'
p121390
Nsa(dp121391
S'name'
p121392
S'execute_on'
p121393
sS'cpp_type'
p121394
S'MultiMooseEnum'
p121395
sS'default'
p121396
S'TIMESTEP_END'
p121397
sS'description'
p121398
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121399
sS'required'
p121400
I00
sS'options'
p121401
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121402
sS'group_name'
p121403
Nsa(dp121404
S'description'
p121405
S'The name of the mesh file (must be xda or exodusII file).\n'
p121406
sS'cpp_type'
p121407
S'MeshFileName'
p121408
sS'default'
p121409
g3
sS'name'
p121410
S'mesh'
p121411
sS'required'
p121412
I01
sS'group_name'
p121413
Nsa(dp121414
S'name'
p121415
S'raster_mode'
p121416
sS'cpp_type'
p121417
S'MooseEnum'
p121418
sS'default'
p121419
S'MAP'
p121420
sS'description'
p121421
S'Rasterization mode (MAP|FILTER).\n'
p121422
sS'required'
p121423
I00
sS'options'
p121424
S'MAP FILTER'
p121425
sS'group_name'
p121426
Nsa(dp121427
S'description'
p121428
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p121429
sS'cpp_type'
p121430
S'double'
p121431
sS'default'
p121432
S'0'
p121433
sS'name'
p121434
S'rotation0_angle'
p121435
sS'required'
p121436
I00
sS'group_name'
p121437
Nsa(dp121438
S'description'
p121439
S'Vector about which to rotate points of the simulation.\n'
p121440
sS'cpp_type'
p121441
S'libMesh::VectorValue<double>'
p121442
sS'default'
p121443
S'0 0 1'
p121444
sS'name'
p121445
S'rotation0_vector'
p121446
sS'required'
p121447
I00
sS'group_name'
p121448
Nsa(dp121449
S'description'
p121450
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p121451
sS'cpp_type'
p121452
S'double'
p121453
sS'default'
p121454
S'0'
p121455
sS'name'
p121456
S'rotation1_angle'
p121457
sS'required'
p121458
I00
sS'group_name'
p121459
Nsa(dp121460
S'description'
p121461
S'Vector about which to rotate points of the simulation.\n'
p121462
sS'cpp_type'
p121463
S'libMesh::VectorValue<double>'
p121464
sS'default'
p121465
S'0 0 1'
p121466
sS'name'
p121467
S'rotation1_vector'
p121468
sS'required'
p121469
I00
sS'group_name'
p121470
Nsa(dp121471
S'description'
p121472
S'Scale factor for points in the simulation\n'
p121473
sS'cpp_type'
p121474
S'std::vector<double, std::allocator<double> >'
p121475
sS'default'
p121476
S'1 1 1'
p121477
sS'name'
p121478
S'scale'
p121479
sS'required'
p121480
I00
sS'group_name'
p121481
Nsa(dp121482
S'description'
p121483
S'Scale multiplying factor for points in the simulation\n'
p121484
sS'cpp_type'
p121485
S'std::vector<double, std::allocator<double> >'
p121486
sS'default'
p121487
S'1 1 1'
p121488
sS'name'
p121489
S'scale_multiplier'
p121490
sS'required'
p121491
I00
sS'group_name'
p121492
Nsa(dp121493
S'description'
p121494
S'The name of the system to pull values out of (xda only).\n'
p121495
sS'cpp_type'
p121496
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121497
sS'default'
p121498
S'nl0'
p121499
sS'name'
p121500
S'system'
p121501
sS'required'
p121502
I00
sS'group_name'
p121503
Nsa(dp121504
S'description'
p121505
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p121506
sS'cpp_type'
p121507
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121508
sS'default'
p121509
g3
sS'name'
p121510
S'system_variables'
p121511
sS'required'
p121512
I00
sS'group_name'
p121513
Nsa(dp121514
S'description'
p121515
S'Accept atoms with a variable value above this threshold in FILTER mode.\n'
p121516
sS'cpp_type'
p121517
S'double'
p121518
sS'default'
p121519
g3
sS'name'
p121520
S'threshold'
p121521
sS'required'
p121522
I00
sS'group_name'
p121523
Nsa(dp121524
S'description'
p121525
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p121526
sS'cpp_type'
p121527
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121528
sS'default'
p121529
g3
sS'name'
p121530
S'timestep'
p121531
sS'required'
p121532
I00
sS'group_name'
p121533
Nsa(dp121534
S'name'
p121535
S'transformation_order'
p121536
sS'cpp_type'
p121537
S'MultiMooseEnum'
p121538
sS'default'
p121539
S'SCALE TRANSLATION'
p121540
sS'description'
p121541
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p121542
sS'required'
p121543
I00
sS'options'
p121544
S'rotation0 translation scale rotation1 scale_multiplier'
p121545
sS'group_name'
p121546
Nsa(dp121547
S'description'
p121548
S'Translation factors for x,y,z coordinates of the simulation\n'
p121549
sS'cpp_type'
p121550
S'std::vector<double, std::allocator<double> >'
p121551
sS'default'
p121552
S'0 0 0'
p121553
sS'name'
p121554
S'translation'
p121555
sS'required'
p121556
I00
sS'group_name'
p121557
Nsa(dp121558
S'description'
p121559
g3
sS'cpp_type'
p121560
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121561
sS'default'
p121562
S'SolutionRasterizer'
p121563
sS'name'
p121564
S'type'
p121565
sS'required'
p121566
I00
sS'group_name'
p121567
Nsa(dp121568
S'description'
p121569
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121570
sS'cpp_type'
p121571
S'bool'
p121572
sS'default'
p121573
S'0'
p121574
sS'name'
p121575
S'use_displaced_mesh'
p121576
sS'required'
p121577
I00
sS'group_name'
p121578
S'Advanced'
p121579
sa(dp121580
S'description'
p121581
S'Variable from the mesh file to use for mapping to or filtering of the atoms.\n'
p121582
sS'cpp_type'
p121583
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121584
sS'default'
p121585
g3
sS'name'
p121586
S'variable'
p121587
sS'required'
p121588
I01
sS'group_name'
p121589
Nsa(dp121590
S'description'
p121591
S'XYZ input file.\n'
p121592
sS'cpp_type'
p121593
S'FileName'
p121594
sS'default'
p121595
g3
sS'name'
p121596
S'xyz_input'
p121597
sS'required'
p121598
I01
sS'group_name'
p121599
Nsa(dp121600
S'description'
p121601
S'XYZ output file.\n'
p121602
sS'cpp_type'
p121603
S'FileName'
p121604
sS'default'
p121605
g3
sS'name'
p121606
S'xyz_output'
p121607
sS'required'
p121608
I01
sS'group_name'
p121609
NsasS'name'
p121610
S'/UserObjects/SolutionRasterizer'
p121611
sa(dp121612
S'description'
p121613
g3
sS'subblocks'
p121614
NsS'parameters'
p121615
(lp121616
(dp121617
S'description'
p121618
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121619
sS'cpp_type'
p121620
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121621
sS'default'
p121622
g3
sS'name'
p121623
S'control_tags'
p121624
sS'required'
p121625
I00
sS'group_name'
p121626
S'Advanced'
p121627
sa(dp121628
S'description'
p121629
S'Set the enabled status of the MooseObject.\n'
p121630
sS'cpp_type'
p121631
S'bool'
p121632
sS'default'
p121633
S'1'
p121634
sS'name'
p121635
S'enable'
p121636
sS'required'
p121637
I00
sS'group_name'
p121638
S'Advanced'
p121639
sa(dp121640
S'description'
p121641
S'The name of the file holding the equation system info in xda format (xda only).\n'
p121642
sS'cpp_type'
p121643
S'FileName'
p121644
sS'default'
p121645
S'<not supplied>'
p121646
sS'name'
p121647
S'es'
p121648
sS'required'
p121649
I00
sS'group_name'
p121650
Nsa(dp121651
S'name'
p121652
S'execute_on'
p121653
sS'cpp_type'
p121654
S'MultiMooseEnum'
p121655
sS'default'
p121656
S'TIMESTEP_END'
p121657
sS'description'
p121658
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121659
sS'required'
p121660
I00
sS'options'
p121661
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121662
sS'group_name'
p121663
Nsa(dp121664
S'description'
p121665
S'The name of the mesh file (must be xda or exodusII file).\n'
p121666
sS'cpp_type'
p121667
S'MeshFileName'
p121668
sS'default'
p121669
g3
sS'name'
p121670
S'mesh'
p121671
sS'required'
p121672
I01
sS'group_name'
p121673
Nsa(dp121674
S'description'
p121675
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p121676
sS'cpp_type'
p121677
S'double'
p121678
sS'default'
p121679
S'0'
p121680
sS'name'
p121681
S'rotation0_angle'
p121682
sS'required'
p121683
I00
sS'group_name'
p121684
Nsa(dp121685
S'description'
p121686
S'Vector about which to rotate points of the simulation.\n'
p121687
sS'cpp_type'
p121688
S'libMesh::VectorValue<double>'
p121689
sS'default'
p121690
S'0 0 1'
p121691
sS'name'
p121692
S'rotation0_vector'
p121693
sS'required'
p121694
I00
sS'group_name'
p121695
Nsa(dp121696
S'description'
p121697
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p121698
sS'cpp_type'
p121699
S'double'
p121700
sS'default'
p121701
S'0'
p121702
sS'name'
p121703
S'rotation1_angle'
p121704
sS'required'
p121705
I00
sS'group_name'
p121706
Nsa(dp121707
S'description'
p121708
S'Vector about which to rotate points of the simulation.\n'
p121709
sS'cpp_type'
p121710
S'libMesh::VectorValue<double>'
p121711
sS'default'
p121712
S'0 0 1'
p121713
sS'name'
p121714
S'rotation1_vector'
p121715
sS'required'
p121716
I00
sS'group_name'
p121717
Nsa(dp121718
S'description'
p121719
S'Scale factor for points in the simulation\n'
p121720
sS'cpp_type'
p121721
S'std::vector<double, std::allocator<double> >'
p121722
sS'default'
p121723
S'1 1 1'
p121724
sS'name'
p121725
S'scale'
p121726
sS'required'
p121727
I00
sS'group_name'
p121728
Nsa(dp121729
S'description'
p121730
S'Scale multiplying factor for points in the simulation\n'
p121731
sS'cpp_type'
p121732
S'std::vector<double, std::allocator<double> >'
p121733
sS'default'
p121734
S'1 1 1'
p121735
sS'name'
p121736
S'scale_multiplier'
p121737
sS'required'
p121738
I00
sS'group_name'
p121739
Nsa(dp121740
S'description'
p121741
S'The name of the system to pull values out of (xda only).\n'
p121742
sS'cpp_type'
p121743
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121744
sS'default'
p121745
S'nl0'
p121746
sS'name'
p121747
S'system'
p121748
sS'required'
p121749
I00
sS'group_name'
p121750
Nsa(dp121751
S'description'
p121752
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p121753
sS'cpp_type'
p121754
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121755
sS'default'
p121756
g3
sS'name'
p121757
S'system_variables'
p121758
sS'required'
p121759
I00
sS'group_name'
p121760
Nsa(dp121761
S'description'
p121762
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p121763
sS'cpp_type'
p121764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121765
sS'default'
p121766
g3
sS'name'
p121767
S'timestep'
p121768
sS'required'
p121769
I00
sS'group_name'
p121770
Nsa(dp121771
S'name'
p121772
S'transformation_order'
p121773
sS'cpp_type'
p121774
S'MultiMooseEnum'
p121775
sS'default'
p121776
S'SCALE TRANSLATION'
p121777
sS'description'
p121778
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p121779
sS'required'
p121780
I00
sS'options'
p121781
S'rotation0 translation scale rotation1 scale_multiplier'
p121782
sS'group_name'
p121783
Nsa(dp121784
S'description'
p121785
S'Translation factors for x,y,z coordinates of the simulation\n'
p121786
sS'cpp_type'
p121787
S'std::vector<double, std::allocator<double> >'
p121788
sS'default'
p121789
S'0 0 0'
p121790
sS'name'
p121791
S'translation'
p121792
sS'required'
p121793
I00
sS'group_name'
p121794
Nsa(dp121795
S'description'
p121796
g3
sS'cpp_type'
p121797
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121798
sS'default'
p121799
S'SolutionUserObject'
p121800
sS'name'
p121801
S'type'
p121802
sS'required'
p121803
I00
sS'group_name'
p121804
Nsa(dp121805
S'description'
p121806
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121807
sS'cpp_type'
p121808
S'bool'
p121809
sS'default'
p121810
S'0'
p121811
sS'name'
p121812
S'use_displaced_mesh'
p121813
sS'required'
p121814
I00
sS'group_name'
p121815
S'Advanced'
p121816
sasS'name'
p121817
S'/UserObjects/SolutionUserObject'
p121818
sa(dp121819
S'description'
p121820
S'No hardening - the parameter is independent of the internal parameter(s)\n'
p121821
sS'subblocks'
p121822
NsS'parameters'
p121823
(lp121824
(dp121825
S'description'
p121826
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121827
sS'cpp_type'
p121828
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121829
sS'default'
p121830
g3
sS'name'
p121831
S'control_tags'
p121832
sS'required'
p121833
I00
sS'group_name'
p121834
S'Advanced'
p121835
sa(dp121836
S'description'
p121837
S'If true, the value you entered will be multiplied by Pi/180 before passing to the Plasticity algorithms\n'
p121838
sS'cpp_type'
p121839
S'bool'
p121840
sS'default'
p121841
S'0'
p121842
sS'name'
p121843
S'convert_to_radians'
p121844
sS'required'
p121845
I00
sS'group_name'
p121846
Nsa(dp121847
S'description'
p121848
S'Set the enabled status of the MooseObject.\n'
p121849
sS'cpp_type'
p121850
S'bool'
p121851
sS'default'
p121852
S'1'
p121853
sS'name'
p121854
S'enable'
p121855
sS'required'
p121856
I00
sS'group_name'
p121857
S'Advanced'
p121858
sa(dp121859
S'name'
p121860
S'execute_on'
p121861
sS'cpp_type'
p121862
S'MultiMooseEnum'
p121863
sS'default'
p121864
S'TIMESTEP_END'
p121865
sS'description'
p121866
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121867
sS'required'
p121868
I00
sS'options'
p121869
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121870
sS'group_name'
p121871
Nsa(dp121872
S'description'
p121873
g3
sS'cpp_type'
p121874
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121875
sS'default'
p121876
S'TensorMechanicsHardeningConstant'
p121877
sS'name'
p121878
S'type'
p121879
sS'required'
p121880
I00
sS'group_name'
p121881
Nsa(dp121882
S'description'
p121883
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121884
sS'cpp_type'
p121885
S'bool'
p121886
sS'default'
p121887
S'0'
p121888
sS'name'
p121889
S'use_displaced_mesh'
p121890
sS'required'
p121891
I00
sS'group_name'
p121892
S'Advanced'
p121893
sa(dp121894
S'description'
p121895
S'The value of the parameter for all internal parameter.  This is perfect plasticity - there is no hardening.\n'
p121896
sS'cpp_type'
p121897
S'double'
p121898
sS'default'
p121899
S'1'
p121900
sS'name'
p121901
S'value'
p121902
sS'required'
p121903
I00
sS'group_name'
p121904
NsasS'name'
p121905
S'/UserObjects/TensorMechanicsHardeningConstant'
p121906
sa(dp121907
S'description'
p121908
S'Hardening is Cubic\n'
p121909
sS'subblocks'
p121910
NsS'parameters'
p121911
(lp121912
(dp121913
S'description'
p121914
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121915
sS'cpp_type'
p121916
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121917
sS'default'
p121918
g3
sS'name'
p121919
S'control_tags'
p121920
sS'required'
p121921
I00
sS'group_name'
p121922
S'Advanced'
p121923
sa(dp121924
S'description'
p121925
S'Set the enabled status of the MooseObject.\n'
p121926
sS'cpp_type'
p121927
S'bool'
p121928
sS'default'
p121929
S'1'
p121930
sS'name'
p121931
S'enable'
p121932
sS'required'
p121933
I00
sS'group_name'
p121934
S'Advanced'
p121935
sa(dp121936
S'name'
p121937
S'execute_on'
p121938
sS'cpp_type'
p121939
S'MultiMooseEnum'
p121940
sS'default'
p121941
S'TIMESTEP_END'
p121942
sS'description'
p121943
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121944
sS'required'
p121945
I00
sS'options'
p121946
S'none initial linear nonlinear timestep_end timestep_begin custom'
p121947
sS'group_name'
p121948
Nsa(dp121949
S'description'
p121950
S'The value of the internal_parameter when hardening begins\n'
p121951
sS'cpp_type'
p121952
S'double'
p121953
sS'default'
p121954
S'0'
p121955
sS'name'
p121956
S'internal_0'
p121957
sS'required'
p121958
I00
sS'group_name'
p121959
Nsa(dp121960
S'description'
p121961
S'The value of the internal_parameter when hardening ends.  This hardening forms a cubic between (internal_0, value_0) and (internal_limit, value_residual) that is smooth at internal_0 and internal_limit\n'
p121962
sS'cpp_type'
p121963
S'double'
p121964
sS'default'
p121965
S'1'
p121966
sS'name'
p121967
S'internal_limit'
p121968
sS'required'
p121969
I00
sS'group_name'
p121970
Nsa(dp121971
S'description'
p121972
g3
sS'cpp_type'
p121973
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121974
sS'default'
p121975
S'TensorMechanicsHardeningCubic'
p121976
sS'name'
p121977
S'type'
p121978
sS'required'
p121979
I00
sS'group_name'
p121980
Nsa(dp121981
S'description'
p121982
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121983
sS'cpp_type'
p121984
S'bool'
p121985
sS'default'
p121986
S'0'
p121987
sS'name'
p121988
S'use_displaced_mesh'
p121989
sS'required'
p121990
I00
sS'group_name'
p121991
S'Advanced'
p121992
sa(dp121993
S'description'
p121994
S'The value of the parameter for all internal_parameter <= internal_0\n'
p121995
sS'cpp_type'
p121996
S'double'
p121997
sS'default'
p121998
g3
sS'name'
p121999
S'value_0'
p122000
sS'required'
p122001
I01
sS'group_name'
p122002
Nsa(dp122003
S'description'
p122004
S'The value of the parameter for internal_parameter >= internal_limit.  Default = value_0, ie perfect plasticity\n'
p122005
sS'cpp_type'
p122006
S'double'
p122007
sS'default'
p122008
g3
sS'name'
p122009
S'value_residual'
p122010
sS'required'
p122011
I00
sS'group_name'
p122012
NsasS'name'
p122013
S'/UserObjects/TensorMechanicsHardeningCubic'
p122014
sa(dp122015
S'description'
p122016
S'Hardening is Cut-exponential\n'
p122017
sS'subblocks'
p122018
NsS'parameters'
p122019
(lp122020
(dp122021
S'description'
p122022
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122023
sS'cpp_type'
p122024
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122025
sS'default'
p122026
g3
sS'name'
p122027
S'control_tags'
p122028
sS'required'
p122029
I00
sS'group_name'
p122030
S'Advanced'
p122031
sa(dp122032
S'description'
p122033
S'Set the enabled status of the MooseObject.\n'
p122034
sS'cpp_type'
p122035
S'bool'
p122036
sS'default'
p122037
S'1'
p122038
sS'name'
p122039
S'enable'
p122040
sS'required'
p122041
I00
sS'group_name'
p122042
S'Advanced'
p122043
sa(dp122044
S'name'
p122045
S'execute_on'
p122046
sS'cpp_type'
p122047
S'MultiMooseEnum'
p122048
sS'default'
p122049
S'TIMESTEP_END'
p122050
sS'description'
p122051
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122052
sS'required'
p122053
I00
sS'options'
p122054
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122055
sS'group_name'
p122056
Nsa(dp122057
S'description'
p122058
S'The cutoff of internal parameter\n'
p122059
sS'cpp_type'
p122060
S'double'
p122061
sS'default'
p122062
S'0'
p122063
sS'name'
p122064
S'internal_0'
p122065
sS'required'
p122066
I00
sS'group_name'
p122067
Nsa(dp122068
S'description'
p122069
S'Let p = internal_parameter.  Then value = value_0 for p<internal_0, and otherwise, value = value_residual + (value_0 - value_residual)*exp(-rate*(p - internal_0)\n'
p122070
sS'cpp_type'
p122071
S'double'
p122072
sS'default'
p122073
S'0'
p122074
sS'name'
p122075
S'rate'
p122076
sS'required'
p122077
I00
sS'group_name'
p122078
Nsa(dp122079
S'description'
p122080
g3
sS'cpp_type'
p122081
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122082
sS'default'
p122083
S'TensorMechanicsHardeningCutExponential'
p122084
sS'name'
p122085
S'type'
p122086
sS'required'
p122087
I00
sS'group_name'
p122088
Nsa(dp122089
S'description'
p122090
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122091
sS'cpp_type'
p122092
S'bool'
p122093
sS'default'
p122094
S'0'
p122095
sS'name'
p122096
S'use_displaced_mesh'
p122097
sS'required'
p122098
I00
sS'group_name'
p122099
S'Advanced'
p122100
sa(dp122101
S'description'
p122102
S'The value of the parameter for all internal_parameter <= internal_0\n'
p122103
sS'cpp_type'
p122104
S'double'
p122105
sS'default'
p122106
g3
sS'name'
p122107
S'value_0'
p122108
sS'required'
p122109
I01
sS'group_name'
p122110
Nsa(dp122111
S'description'
p122112
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p122113
sS'cpp_type'
p122114
S'double'
p122115
sS'default'
p122116
g3
sS'name'
p122117
S'value_residual'
p122118
sS'required'
p122119
I00
sS'group_name'
p122120
NsasS'name'
p122121
S'/UserObjects/TensorMechanicsHardeningCutExponential'
p122122
sa(dp122123
S'description'
p122124
S'Hardening is Exponential\n'
p122125
sS'subblocks'
p122126
NsS'parameters'
p122127
(lp122128
(dp122129
S'description'
p122130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122131
sS'cpp_type'
p122132
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122133
sS'default'
p122134
g3
sS'name'
p122135
S'control_tags'
p122136
sS'required'
p122137
I00
sS'group_name'
p122138
S'Advanced'
p122139
sa(dp122140
S'description'
p122141
S'Set the enabled status of the MooseObject.\n'
p122142
sS'cpp_type'
p122143
S'bool'
p122144
sS'default'
p122145
S'1'
p122146
sS'name'
p122147
S'enable'
p122148
sS'required'
p122149
I00
sS'group_name'
p122150
S'Advanced'
p122151
sa(dp122152
S'name'
p122153
S'execute_on'
p122154
sS'cpp_type'
p122155
S'MultiMooseEnum'
p122156
sS'default'
p122157
S'TIMESTEP_END'
p122158
sS'description'
p122159
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122160
sS'required'
p122161
I00
sS'options'
p122162
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122163
sS'group_name'
p122164
Nsa(dp122165
S'description'
p122166
S'Let p = internal_parameter.  Then value = value_residual + (value_0 - value_residual)*exp(-rate*intnal_parameter)\n'
p122167
sS'cpp_type'
p122168
S'double'
p122169
sS'default'
p122170
S'0'
p122171
sS'name'
p122172
S'rate'
p122173
sS'required'
p122174
I00
sS'group_name'
p122175
Nsa(dp122176
S'description'
p122177
g3
sS'cpp_type'
p122178
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122179
sS'default'
p122180
S'TensorMechanicsHardeningExponential'
p122181
sS'name'
p122182
S'type'
p122183
sS'required'
p122184
I00
sS'group_name'
p122185
Nsa(dp122186
S'description'
p122187
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122188
sS'cpp_type'
p122189
S'bool'
p122190
sS'default'
p122191
S'0'
p122192
sS'name'
p122193
S'use_displaced_mesh'
p122194
sS'required'
p122195
I00
sS'group_name'
p122196
S'Advanced'
p122197
sa(dp122198
S'description'
p122199
S'The value of the parameter at internal_parameter = 0\n'
p122200
sS'cpp_type'
p122201
S'double'
p122202
sS'default'
p122203
g3
sS'name'
p122204
S'value_0'
p122205
sS'required'
p122206
I01
sS'group_name'
p122207
Nsa(dp122208
S'description'
p122209
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p122210
sS'cpp_type'
p122211
S'double'
p122212
sS'default'
p122213
g3
sS'name'
p122214
S'value_residual'
p122215
sS'required'
p122216
I00
sS'group_name'
p122217
NsasS'name'
p122218
S'/UserObjects/TensorMechanicsHardeningExponential'
p122219
sa(dp122220
S'description'
p122221
S'Hardening is Gaussian\n'
p122222
sS'subblocks'
p122223
NsS'parameters'
p122224
(lp122225
(dp122226
S'description'
p122227
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122228
sS'cpp_type'
p122229
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122230
sS'default'
p122231
g3
sS'name'
p122232
S'control_tags'
p122233
sS'required'
p122234
I00
sS'group_name'
p122235
S'Advanced'
p122236
sa(dp122237
S'description'
p122238
S'Set the enabled status of the MooseObject.\n'
p122239
sS'cpp_type'
p122240
S'bool'
p122241
sS'default'
p122242
S'1'
p122243
sS'name'
p122244
S'enable'
p122245
sS'required'
p122246
I00
sS'group_name'
p122247
S'Advanced'
p122248
sa(dp122249
S'name'
p122250
S'execute_on'
p122251
sS'cpp_type'
p122252
S'MultiMooseEnum'
p122253
sS'default'
p122254
S'TIMESTEP_END'
p122255
sS'description'
p122256
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122257
sS'required'
p122258
I00
sS'options'
p122259
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122260
sS'group_name'
p122261
Nsa(dp122262
S'description'
p122263
S'The value of the internal_parameter when hardening begins\n'
p122264
sS'cpp_type'
p122265
S'double'
p122266
sS'default'
p122267
S'0'
p122268
sS'name'
p122269
S'internal_0'
p122270
sS'required'
p122271
I00
sS'group_name'
p122272
Nsa(dp122273
S'description'
p122274
S'Let p = internal_parameter.  Then value = value_0 for p<internal_0, and value = value_residual + (value_0 - value_residual)*exp(-0.5*rate*(p - internal_0)^2)\n'
p122275
sS'cpp_type'
p122276
S'double'
p122277
sS'default'
p122278
S'0'
p122279
sS'name'
p122280
S'rate'
p122281
sS'required'
p122282
I00
sS'group_name'
p122283
Nsa(dp122284
S'description'
p122285
g3
sS'cpp_type'
p122286
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122287
sS'default'
p122288
S'TensorMechanicsHardeningGaussian'
p122289
sS'name'
p122290
S'type'
p122291
sS'required'
p122292
I00
sS'group_name'
p122293
Nsa(dp122294
S'description'
p122295
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122296
sS'cpp_type'
p122297
S'bool'
p122298
sS'default'
p122299
S'0'
p122300
sS'name'
p122301
S'use_displaced_mesh'
p122302
sS'required'
p122303
I00
sS'group_name'
p122304
S'Advanced'
p122305
sa(dp122306
S'description'
p122307
S'The value of the parameter for all internal_parameter <= internal_0\n'
p122308
sS'cpp_type'
p122309
S'double'
p122310
sS'default'
p122311
g3
sS'name'
p122312
S'value_0'
p122313
sS'required'
p122314
I01
sS'group_name'
p122315
Nsa(dp122316
S'description'
p122317
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p122318
sS'cpp_type'
p122319
S'double'
p122320
sS'default'
p122321
g3
sS'name'
p122322
S'value_residual'
p122323
sS'required'
p122324
I00
sS'group_name'
p122325
NsasS'name'
p122326
S'/UserObjects/TensorMechanicsHardeningGaussian'
p122327
sa(dp122328
S'description'
p122329
S'Hardening defined by power rule\n'
p122330
sS'subblocks'
p122331
NsS'parameters'
p122332
(lp122333
(dp122334
S'description'
p122335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122336
sS'cpp_type'
p122337
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122338
sS'default'
p122339
g3
sS'name'
p122340
S'control_tags'
p122341
sS'required'
p122342
I00
sS'group_name'
p122343
S'Advanced'
p122344
sa(dp122345
S'description'
p122346
S'Set the enabled status of the MooseObject.\n'
p122347
sS'cpp_type'
p122348
S'bool'
p122349
sS'default'
p122350
S'1'
p122351
sS'name'
p122352
S'enable'
p122353
sS'required'
p122354
I00
sS'group_name'
p122355
S'Advanced'
p122356
sa(dp122357
S'description'
p122358
S'The reference strain\n'
p122359
sS'cpp_type'
p122360
S'double'
p122361
sS'default'
p122362
S'1'
p122363
sS'name'
p122364
S'epsilon0'
p122365
sS'required'
p122366
I00
sS'group_name'
p122367
Nsa(dp122368
S'name'
p122369
S'execute_on'
p122370
sS'cpp_type'
p122371
S'MultiMooseEnum'
p122372
sS'default'
p122373
S'TIMESTEP_END'
p122374
sS'description'
p122375
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122376
sS'required'
p122377
I00
sS'options'
p122378
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122379
sS'group_name'
p122380
Nsa(dp122381
S'description'
p122382
S'Let p = internal_parameter.  Then value = value_0 * (p / epsilon0 + 1)^{exponent})\n'
p122383
sS'cpp_type'
p122384
S'double'
p122385
sS'default'
p122386
S'0'
p122387
sS'name'
p122388
S'exponent'
p122389
sS'required'
p122390
I00
sS'group_name'
p122391
Nsa(dp122392
S'description'
p122393
g3
sS'cpp_type'
p122394
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122395
sS'default'
p122396
S'TensorMechanicsHardeningPowerRule'
p122397
sS'name'
p122398
S'type'
p122399
sS'required'
p122400
I00
sS'group_name'
p122401
Nsa(dp122402
S'description'
p122403
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122404
sS'cpp_type'
p122405
S'bool'
p122406
sS'default'
p122407
S'0'
p122408
sS'name'
p122409
S'use_displaced_mesh'
p122410
sS'required'
p122411
I00
sS'group_name'
p122412
S'Advanced'
p122413
sa(dp122414
S'description'
p122415
S'The yield strength when internal variable = 0\n'
p122416
sS'cpp_type'
p122417
S'double'
p122418
sS'default'
p122419
g3
sS'name'
p122420
S'value_0'
p122421
sS'required'
p122422
I01
sS'group_name'
p122423
NsasS'name'
p122424
S'/UserObjects/TensorMechanicsHardeningPowerRule'
p122425
sa(dp122426
S'description'
p122427
S'Non-associative Drucker Prager plasticity with no smoothing of the cone tip.\n'
p122428
sS'subblocks'
p122429
NsS'parameters'
p122430
(lp122431
(dp122432
S'description'
p122433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122434
sS'cpp_type'
p122435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122436
sS'default'
p122437
g3
sS'name'
p122438
S'control_tags'
p122439
sS'required'
p122440
I00
sS'group_name'
p122441
S'Advanced'
p122442
sa(dp122443
S'description'
p122444
S'Set the enabled status of the MooseObject.\n'
p122445
sS'cpp_type'
p122446
S'bool'
p122447
sS'default'
p122448
S'1'
p122449
sS'name'
p122450
S'enable'
p122451
sS'required'
p122452
I00
sS'group_name'
p122453
S'Advanced'
p122454
sa(dp122455
S'name'
p122456
S'execute_on'
p122457
sS'cpp_type'
p122458
S'MultiMooseEnum'
p122459
sS'default'
p122460
S'TIMESTEP_END'
p122461
sS'description'
p122462
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122463
sS'required'
p122464
I00
sS'options'
p122465
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122466
sS'group_name'
p122467
Nsa(dp122468
S'description'
p122469
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122470
sS'cpp_type'
p122471
S'double'
p122472
sS'default'
p122473
g3
sS'name'
p122474
S'internal_constraint_tolerance'
p122475
sS'required'
p122476
I01
sS'group_name'
p122477
Nsa(dp122478
S'description'
p122479
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb cohesion.  Physically this should not be negative.\n'
p122480
sS'cpp_type'
p122481
S'UserObjectName'
p122482
sS'default'
p122483
g3
sS'name'
p122484
S'mc_cohesion'
p122485
sS'required'
p122486
I01
sS'group_name'
p122487
Nsa(dp122488
S'description'
p122489
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and Pi/2.\n'
p122490
sS'cpp_type'
p122491
S'UserObjectName'
p122492
sS'default'
p122493
g3
sS'name'
p122494
S'mc_dilation_angle'
p122495
sS'required'
p122496
I01
sS'group_name'
p122497
Nsa(dp122498
S'description'
p122499
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb friction angle (in radians).  Physically this should be between 0 and Pi/2.\n'
p122500
sS'cpp_type'
p122501
S'UserObjectName'
p122502
sS'default'
p122503
g3
sS'name'
p122504
S'mc_friction_angle'
p122505
sS'required'
p122506
I01
sS'group_name'
p122507
Nsa(dp122508
S'name'
p122509
S'mc_interpolation_scheme'
p122510
sS'cpp_type'
p122511
S'MooseEnum'
p122512
sS'default'
p122513
S'lode_zero'
p122514
sS'description'
p122515
S'Scheme by which the Drucker-Prager cohesion, friction angle and dilation angle are set from the Mohr-Coulomb parameters mc_cohesion, mc_friction_angle and mc_dilation_angle.  Consider the DP and MC yield surfaces on the devatoric (octahedral) plane.  Outer_tip: the DP circle touches the outer tips of the MC hex.  Inner_tip: the DP circle touches the inner tips of the MC hex.  Lode_zero: the DP circle intersects the MC hex at lode angle=0.  Inner_edge: the DP circle is the largest circle that wholey fits inside the MC hex.  Native: The DP cohesion, friction angle and dilation angle are set equal to the mc_ parameters entered.\n'
p122516
sS'required'
p122517
I00
sS'options'
p122518
S'outer_tip inner_tip lode_zero inner_edge native'
p122519
sS'group_name'
p122520
Nsa(dp122521
S'description'
p122522
g3
sS'cpp_type'
p122523
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122524
sS'default'
p122525
S'TensorMechanicsPlasticDruckerPrager'
p122526
sS'name'
p122527
S'type'
p122528
sS'required'
p122529
I00
sS'group_name'
p122530
Nsa(dp122531
S'description'
p122532
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122533
sS'cpp_type'
p122534
S'bool'
p122535
sS'default'
p122536
S'0'
p122537
sS'name'
p122538
S'use_displaced_mesh'
p122539
sS'required'
p122540
I00
sS'group_name'
p122541
S'Advanced'
p122542
sa(dp122543
S'description'
p122544
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122545
sS'cpp_type'
p122546
S'double'
p122547
sS'default'
p122548
g3
sS'name'
p122549
S'yield_function_tolerance'
p122550
sS'required'
p122551
I01
sS'group_name'
p122552
NsasS'name'
p122553
S'/UserObjects/TensorMechanicsPlasticDruckerPrager'
p122554
sa(dp122555
S'description'
p122556
S'Non-associative Drucker Prager plasticity with hyperbolic smoothing of the cone tip.\n'
p122557
sS'subblocks'
p122558
NsS'parameters'
p122559
(lp122560
(dp122561
S'description'
p122562
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122563
sS'cpp_type'
p122564
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122565
sS'default'
p122566
g3
sS'name'
p122567
S'control_tags'
p122568
sS'required'
p122569
I00
sS'group_name'
p122570
S'Advanced'
p122571
sa(dp122572
S'description'
p122573
S'Set the enabled status of the MooseObject.\n'
p122574
sS'cpp_type'
p122575
S'bool'
p122576
sS'default'
p122577
S'1'
p122578
sS'name'
p122579
S'enable'
p122580
sS'required'
p122581
I00
sS'group_name'
p122582
S'Advanced'
p122583
sa(dp122584
S'name'
p122585
S'execute_on'
p122586
sS'cpp_type'
p122587
S'MultiMooseEnum'
p122588
sS'default'
p122589
S'TIMESTEP_END'
p122590
sS'description'
p122591
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122592
sS'required'
p122593
I00
sS'options'
p122594
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122595
sS'group_name'
p122596
Nsa(dp122597
S'description'
p122598
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122599
sS'cpp_type'
p122600
S'double'
p122601
sS'default'
p122602
g3
sS'name'
p122603
S'internal_constraint_tolerance'
p122604
sS'required'
p122605
I01
sS'group_name'
p122606
Nsa(dp122607
S'description'
p122608
S'Maximum iterations to use in the custom return map function\n'
p122609
sS'cpp_type'
p122610
S'unsigned int'
p122611
sS'default'
p122612
S'40'
p122613
sS'name'
p122614
S'max_iterations'
p122615
sS'required'
p122616
I00
sS'group_name'
p122617
Nsa(dp122618
S'description'
p122619
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb cohesion.  Physically this should not be negative.\n'
p122620
sS'cpp_type'
p122621
S'UserObjectName'
p122622
sS'default'
p122623
g3
sS'name'
p122624
S'mc_cohesion'
p122625
sS'required'
p122626
I01
sS'group_name'
p122627
Nsa(dp122628
S'description'
p122629
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and Pi/2.\n'
p122630
sS'cpp_type'
p122631
S'UserObjectName'
p122632
sS'default'
p122633
g3
sS'name'
p122634
S'mc_dilation_angle'
p122635
sS'required'
p122636
I01
sS'group_name'
p122637
Nsa(dp122638
S'description'
p122639
S'A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb friction angle (in radians).  Physically this should be between 0 and Pi/2.\n'
p122640
sS'cpp_type'
p122641
S'UserObjectName'
p122642
sS'default'
p122643
g3
sS'name'
p122644
S'mc_friction_angle'
p122645
sS'required'
p122646
I01
sS'group_name'
p122647
Nsa(dp122648
S'name'
p122649
S'mc_interpolation_scheme'
p122650
sS'cpp_type'
p122651
S'MooseEnum'
p122652
sS'default'
p122653
S'lode_zero'
p122654
sS'description'
p122655
S'Scheme by which the Drucker-Prager cohesion, friction angle and dilation angle are set from the Mohr-Coulomb parameters mc_cohesion, mc_friction_angle and mc_dilation_angle.  Consider the DP and MC yield surfaces on the devatoric (octahedral) plane.  Outer_tip: the DP circle touches the outer tips of the MC hex.  Inner_tip: the DP circle touches the inner tips of the MC hex.  Lode_zero: the DP circle intersects the MC hex at lode angle=0.  Inner_edge: the DP circle is the largest circle that wholey fits inside the MC hex.  Native: The DP cohesion, friction angle and dilation angle are set equal to the mc_ parameters entered.\n'
p122656
sS'required'
p122657
I00
sS'options'
p122658
S'outer_tip inner_tip lode_zero inner_edge native'
p122659
sS'group_name'
p122660
Nsa(dp122661
S'description'
p122662
S'The cone vertex at J2=0 is smoothed.  The maximum mean stress possible, which is Cohesion*Cot(friction_angle) for smoother=0, becomes (Cohesion - smoother/3)*Cot(friction_angle).  This is a non-hardening parameter\n'
p122663
sS'cpp_type'
p122664
S'double'
p122665
sS'default'
p122666
S'0'
p122667
sS'name'
p122668
S'smoother'
p122669
sS'required'
p122670
I00
sS'group_name'
p122671
Nsa(dp122672
S'description'
p122673
g3
sS'cpp_type'
p122674
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122675
sS'default'
p122676
S'TensorMechanicsPlasticDruckerPragerHyperbolic'
p122677
sS'name'
p122678
S'type'
p122679
sS'required'
p122680
I00
sS'group_name'
p122681
Nsa(dp122682
S'description'
p122683
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p122684
sS'cpp_type'
p122685
S'bool'
p122686
sS'default'
p122687
S'1'
p122688
sS'name'
p122689
S'use_custom_cto'
p122690
sS'required'
p122691
I00
sS'group_name'
p122692
Nsa(dp122693
S'description'
p122694
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p122695
sS'cpp_type'
p122696
S'bool'
p122697
sS'default'
p122698
S'1'
p122699
sS'name'
p122700
S'use_custom_returnMap'
p122701
sS'required'
p122702
I00
sS'group_name'
p122703
Nsa(dp122704
S'description'
p122705
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122706
sS'cpp_type'
p122707
S'bool'
p122708
sS'default'
p122709
S'0'
p122710
sS'name'
p122711
S'use_displaced_mesh'
p122712
sS'required'
p122713
I00
sS'group_name'
p122714
S'Advanced'
p122715
sa(dp122716
S'description'
p122717
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122718
sS'cpp_type'
p122719
S'double'
p122720
sS'default'
p122721
g3
sS'name'
p122722
S'yield_function_tolerance'
p122723
sS'required'
p122724
I01
sS'group_name'
p122725
NsasS'name'
p122726
S'/UserObjects/TensorMechanicsPlasticDruckerPragerHyperbolic'
p122727
sa(dp122728
S'description'
p122729
S'IsotropicSD plasticity for pressure sensitive materials and also models the strength differential effect\n'
p122730
sS'subblocks'
p122731
NsS'parameters'
p122732
(lp122733
(dp122734
S'description'
p122735
S'Flag for flow-rule, true if not specified\n'
p122736
sS'cpp_type'
p122737
S'bool'
p122738
sS'default'
p122739
S'1'
p122740
sS'name'
p122741
S'associative'
p122742
sS'required'
p122743
I00
sS'group_name'
p122744
Nsa(dp122745
S'description'
p122746
S'A constant to model the influence of pressure\n'
p122747
sS'cpp_type'
p122748
S'double'
p122749
sS'default'
p122750
g3
sS'name'
p122751
S'b'
p122752
sS'required'
p122753
I01
sS'group_name'
p122754
Nsa(dp122755
S'description'
p122756
S'A constant to model the influence of strength differential effect\n'
p122757
sS'cpp_type'
p122758
S'double'
p122759
sS'default'
p122760
S'0'
p122761
sS'name'
p122762
S'c'
p122763
sS'required'
p122764
I00
sS'group_name'
p122765
Nsa(dp122766
S'description'
p122767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122768
sS'cpp_type'
p122769
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122770
sS'default'
p122771
g3
sS'name'
p122772
S'control_tags'
p122773
sS'required'
p122774
I00
sS'group_name'
p122775
S'Advanced'
p122776
sa(dp122777
S'description'
p122778
S'Set the enabled status of the MooseObject.\n'
p122779
sS'cpp_type'
p122780
S'bool'
p122781
sS'default'
p122782
S'1'
p122783
sS'name'
p122784
S'enable'
p122785
sS'required'
p122786
I00
sS'group_name'
p122787
S'Advanced'
p122788
sa(dp122789
S'name'
p122790
S'execute_on'
p122791
sS'cpp_type'
p122792
S'MultiMooseEnum'
p122793
sS'default'
p122794
S'TIMESTEP_END'
p122795
sS'description'
p122796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122797
sS'required'
p122798
I00
sS'options'
p122799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122800
sS'group_name'
p122801
Nsa(dp122802
S'description'
p122803
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122804
sS'cpp_type'
p122805
S'double'
p122806
sS'default'
p122807
g3
sS'name'
p122808
S'internal_constraint_tolerance'
p122809
sS'required'
p122810
I01
sS'group_name'
p122811
Nsa(dp122812
S'description'
p122813
S'Maximum iterations for custom J2 return map\n'
p122814
sS'cpp_type'
p122815
S'unsigned int'
p122816
sS'default'
p122817
S'10'
p122818
sS'name'
p122819
S'max_iterations'
p122820
sS'required'
p122821
I00
sS'group_name'
p122822
Nsa(dp122823
S'description'
p122824
g3
sS'cpp_type'
p122825
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122826
sS'default'
p122827
S'TensorMechanicsPlasticIsotropicSD'
p122828
sS'name'
p122829
S'type'
p122830
sS'required'
p122831
I00
sS'group_name'
p122832
Nsa(dp122833
S'description'
p122834
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p122835
sS'cpp_type'
p122836
S'bool'
p122837
sS'default'
p122838
S'1'
p122839
sS'name'
p122840
S'use_custom_cto'
p122841
sS'required'
p122842
I00
sS'group_name'
p122843
Nsa(dp122844
S'description'
p122845
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p122846
sS'cpp_type'
p122847
S'bool'
p122848
sS'default'
p122849
S'1'
p122850
sS'name'
p122851
S'use_custom_returnMap'
p122852
sS'required'
p122853
I00
sS'group_name'
p122854
Nsa(dp122855
S'description'
p122856
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122857
sS'cpp_type'
p122858
S'bool'
p122859
sS'default'
p122860
S'0'
p122861
sS'name'
p122862
S'use_displaced_mesh'
p122863
sS'required'
p122864
I00
sS'group_name'
p122865
S'Advanced'
p122866
sa(dp122867
S'description'
p122868
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122869
sS'cpp_type'
p122870
S'double'
p122871
sS'default'
p122872
g3
sS'name'
p122873
S'yield_function_tolerance'
p122874
sS'required'
p122875
I01
sS'group_name'
p122876
Nsa(dp122877
S'description'
p122878
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p122879
sS'cpp_type'
p122880
S'UserObjectName'
p122881
sS'default'
p122882
g3
sS'name'
p122883
S'yield_strength'
p122884
sS'required'
p122885
I01
sS'group_name'
p122886
NsasS'name'
p122887
S'/UserObjects/TensorMechanicsPlasticIsotropicSD'
p122888
sa(dp122889
S'description'
p122890
S'J2 plasticity, associative, with hardening\n'
p122891
sS'subblocks'
p122892
NsS'parameters'
p122893
(lp122894
(dp122895
S'description'
p122896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122897
sS'cpp_type'
p122898
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122899
sS'default'
p122900
g3
sS'name'
p122901
S'control_tags'
p122902
sS'required'
p122903
I00
sS'group_name'
p122904
S'Advanced'
p122905
sa(dp122906
S'description'
p122907
S'Set the enabled status of the MooseObject.\n'
p122908
sS'cpp_type'
p122909
S'bool'
p122910
sS'default'
p122911
S'1'
p122912
sS'name'
p122913
S'enable'
p122914
sS'required'
p122915
I00
sS'group_name'
p122916
S'Advanced'
p122917
sa(dp122918
S'name'
p122919
S'execute_on'
p122920
sS'cpp_type'
p122921
S'MultiMooseEnum'
p122922
sS'default'
p122923
S'TIMESTEP_END'
p122924
sS'description'
p122925
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122926
sS'required'
p122927
I00
sS'options'
p122928
S'none initial linear nonlinear timestep_end timestep_begin custom'
p122929
sS'group_name'
p122930
Nsa(dp122931
S'description'
p122932
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p122933
sS'cpp_type'
p122934
S'double'
p122935
sS'default'
p122936
g3
sS'name'
p122937
S'internal_constraint_tolerance'
p122938
sS'required'
p122939
I01
sS'group_name'
p122940
Nsa(dp122941
S'description'
p122942
S'Maximum iterations for custom J2 return map\n'
p122943
sS'cpp_type'
p122944
S'unsigned int'
p122945
sS'default'
p122946
S'10'
p122947
sS'name'
p122948
S'max_iterations'
p122949
sS'required'
p122950
I00
sS'group_name'
p122951
Nsa(dp122952
S'description'
p122953
g3
sS'cpp_type'
p122954
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122955
sS'default'
p122956
S'TensorMechanicsPlasticJ2'
p122957
sS'name'
p122958
S'type'
p122959
sS'required'
p122960
I00
sS'group_name'
p122961
Nsa(dp122962
S'description'
p122963
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p122964
sS'cpp_type'
p122965
S'bool'
p122966
sS'default'
p122967
S'1'
p122968
sS'name'
p122969
S'use_custom_cto'
p122970
sS'required'
p122971
I00
sS'group_name'
p122972
Nsa(dp122973
S'description'
p122974
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p122975
sS'cpp_type'
p122976
S'bool'
p122977
sS'default'
p122978
S'1'
p122979
sS'name'
p122980
S'use_custom_returnMap'
p122981
sS'required'
p122982
I00
sS'group_name'
p122983
Nsa(dp122984
S'description'
p122985
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122986
sS'cpp_type'
p122987
S'bool'
p122988
sS'default'
p122989
S'0'
p122990
sS'name'
p122991
S'use_displaced_mesh'
p122992
sS'required'
p122993
I00
sS'group_name'
p122994
S'Advanced'
p122995
sa(dp122996
S'description'
p122997
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p122998
sS'cpp_type'
p122999
S'double'
p123000
sS'default'
p123001
g3
sS'name'
p123002
S'yield_function_tolerance'
p123003
sS'required'
p123004
I01
sS'group_name'
p123005
Nsa(dp123006
S'description'
p123007
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p123008
sS'cpp_type'
p123009
S'UserObjectName'
p123010
sS'default'
p123011
g3
sS'name'
p123012
S'yield_strength'
p123013
sS'required'
p123014
I01
sS'group_name'
p123015
NsasS'name'
p123016
S'/UserObjects/TensorMechanicsPlasticJ2'
p123017
sa(dp123018
S'description'
p123019
S'Class that limits the mean stress.  Yield function = a*mean_stress - strength.  mean_stress = (stress_xx + stress_yy + stress_zz)/3\n'
p123020
sS'subblocks'
p123021
NsS'parameters'
p123022
(lp123023
(dp123024
S'description'
p123025
S'Yield function = a*mean_stress - strength\n'
p123026
sS'cpp_type'
p123027
S'double'
p123028
sS'default'
p123029
S'1'
p123030
sS'name'
p123031
S'a'
p123032
sS'required'
p123033
I00
sS'group_name'
p123034
Nsa(dp123035
S'description'
p123036
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123037
sS'cpp_type'
p123038
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123039
sS'default'
p123040
g3
sS'name'
p123041
S'control_tags'
p123042
sS'required'
p123043
I00
sS'group_name'
p123044
S'Advanced'
p123045
sa(dp123046
S'description'
p123047
S'Set the enabled status of the MooseObject.\n'
p123048
sS'cpp_type'
p123049
S'bool'
p123050
sS'default'
p123051
S'1'
p123052
sS'name'
p123053
S'enable'
p123054
sS'required'
p123055
I00
sS'group_name'
p123056
S'Advanced'
p123057
sa(dp123058
S'name'
p123059
S'execute_on'
p123060
sS'cpp_type'
p123061
S'MultiMooseEnum'
p123062
sS'default'
p123063
S'TIMESTEP_END'
p123064
sS'description'
p123065
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123066
sS'required'
p123067
I00
sS'options'
p123068
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123069
sS'group_name'
p123070
Nsa(dp123071
S'description'
p123072
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123073
sS'cpp_type'
p123074
S'double'
p123075
sS'default'
p123076
g3
sS'name'
p123077
S'internal_constraint_tolerance'
p123078
sS'required'
p123079
I01
sS'group_name'
p123080
Nsa(dp123081
S'description'
p123082
S'Yield function = a*mean_stress - strength\n'
p123083
sS'cpp_type'
p123084
S'UserObjectName'
p123085
sS'default'
p123086
g3
sS'name'
p123087
S'strength'
p123088
sS'required'
p123089
I01
sS'group_name'
p123090
Nsa(dp123091
S'description'
p123092
g3
sS'cpp_type'
p123093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123094
sS'default'
p123095
S'TensorMechanicsPlasticMeanCap'
p123096
sS'name'
p123097
S'type'
p123098
sS'required'
p123099
I00
sS'group_name'
p123100
Nsa(dp123101
S'description'
p123102
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123103
sS'cpp_type'
p123104
S'bool'
p123105
sS'default'
p123106
S'0'
p123107
sS'name'
p123108
S'use_displaced_mesh'
p123109
sS'required'
p123110
I00
sS'group_name'
p123111
S'Advanced'
p123112
sa(dp123113
S'description'
p123114
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123115
sS'cpp_type'
p123116
S'double'
p123117
sS'default'
p123118
g3
sS'name'
p123119
S'yield_function_tolerance'
p123120
sS'required'
p123121
I01
sS'group_name'
p123122
NsasS'name'
p123123
S'/UserObjects/TensorMechanicsPlasticMeanCap'
p123124
sa(dp123125
S'description'
p123126
S'Associative mean-cap tensile and compressive plasticity with hardening/softening\n'
p123127
sS'subblocks'
p123128
NsS'parameters'
p123129
(lp123130
(dp123131
S'description'
p123132
S'A TensorMechanicsHardening UserObject that defines hardening of the mean-cap compressive strength.  This should always be less than tensile_strength (it will typically be negative).  Yield function = - (trace(stress) - compressive_strength) for trace(stress)<compressive_strength.\n'
p123133
sS'cpp_type'
p123134
S'UserObjectName'
p123135
sS'default'
p123136
g3
sS'name'
p123137
S'compressive_strength'
p123138
sS'required'
p123139
I01
sS'group_name'
p123140
Nsa(dp123141
S'description'
p123142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123143
sS'cpp_type'
p123144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123145
sS'default'
p123146
g3
sS'name'
p123147
S'control_tags'
p123148
sS'required'
p123149
I00
sS'group_name'
p123150
S'Advanced'
p123151
sa(dp123152
S'description'
p123153
S'Set the enabled status of the MooseObject.\n'
p123154
sS'cpp_type'
p123155
S'bool'
p123156
sS'default'
p123157
S'1'
p123158
sS'name'
p123159
S'enable'
p123160
sS'required'
p123161
I00
sS'group_name'
p123162
S'Advanced'
p123163
sa(dp123164
S'name'
p123165
S'execute_on'
p123166
sS'cpp_type'
p123167
S'MultiMooseEnum'
p123168
sS'default'
p123169
S'TIMESTEP_END'
p123170
sS'description'
p123171
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123172
sS'required'
p123173
I00
sS'options'
p123174
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123175
sS'group_name'
p123176
Nsa(dp123177
S'description'
p123178
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123179
sS'cpp_type'
p123180
S'double'
p123181
sS'default'
p123182
g3
sS'name'
p123183
S'internal_constraint_tolerance'
p123184
sS'required'
p123185
I01
sS'group_name'
p123186
Nsa(dp123187
S'description'
p123188
S'Maximum iterations for custom MeanCapTC return map\n'
p123189
sS'cpp_type'
p123190
S'unsigned int'
p123191
sS'default'
p123192
S'10'
p123193
sS'name'
p123194
S'max_iterations'
p123195
sS'required'
p123196
I00
sS'group_name'
p123197
Nsa(dp123198
S'description'
p123199
S'A TensorMechanicsHardening UserObject that defines hardening of the mean-cap tensile strength (it will typically be positive).  Yield function = trace(stress) - tensile_strength for trace(stress)>tensile_strength.\n'
p123200
sS'cpp_type'
p123201
S'UserObjectName'
p123202
sS'default'
p123203
g3
sS'name'
p123204
S'tensile_strength'
p123205
sS'required'
p123206
I01
sS'group_name'
p123207
Nsa(dp123208
S'description'
p123209
g3
sS'cpp_type'
p123210
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123211
sS'default'
p123212
S'TensorMechanicsPlasticMeanCapTC'
p123213
sS'name'
p123214
S'type'
p123215
sS'required'
p123216
I00
sS'group_name'
p123217
Nsa(dp123218
S'description'
p123219
S'Whether to use the custom consistent tangent operator computations.\n'
p123220
sS'cpp_type'
p123221
S'bool'
p123222
sS'default'
p123223
S'1'
p123224
sS'name'
p123225
S'use_custom_cto'
p123226
sS'required'
p123227
I00
sS'group_name'
p123228
Nsa(dp123229
S'description'
p123230
S'Whether to use the custom MeanCapTC returnMap algorithm.\n'
p123231
sS'cpp_type'
p123232
S'bool'
p123233
sS'default'
p123234
S'1'
p123235
sS'name'
p123236
S'use_custom_returnMap'
p123237
sS'required'
p123238
I00
sS'group_name'
p123239
Nsa(dp123240
S'description'
p123241
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123242
sS'cpp_type'
p123243
S'bool'
p123244
sS'default'
p123245
S'0'
p123246
sS'name'
p123247
S'use_displaced_mesh'
p123248
sS'required'
p123249
I00
sS'group_name'
p123250
S'Advanced'
p123251
sa(dp123252
S'description'
p123253
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123254
sS'cpp_type'
p123255
S'double'
p123256
sS'default'
p123257
g3
sS'name'
p123258
S'yield_function_tolerance'
p123259
sS'required'
p123260
I01
sS'group_name'
p123261
NsasS'name'
p123262
S'/UserObjects/TensorMechanicsPlasticMeanCapTC'
p123263
sa(dp123264
S'description'
p123265
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p123266
sS'subblocks'
p123267
NsS'parameters'
p123268
(lp123269
(dp123270
S'description'
p123271
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/tensile_strength\n"
p123272
sS'cpp_type'
p123273
S'double'
p123274
sS'default'
p123275
S'0'
p123276
sS'name'
p123277
S'cap_rate'
p123278
sS'required'
p123279
I00
sS'group_name'
p123280
Nsa(dp123281
S'description'
p123282
S"For the 'cap' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n"
p123283
sS'cpp_type'
p123284
S'double'
p123285
sS'default'
p123286
S'0'
p123287
sS'name'
p123288
S'cap_start'
p123289
sS'required'
p123290
I00
sS'group_name'
p123291
Nsa(dp123292
S'description'
p123293
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p123294
sS'cpp_type'
p123295
S'UserObjectName'
p123296
sS'default'
p123297
g3
sS'name'
p123298
S'cohesion'
p123299
sS'required'
p123300
I01
sS'group_name'
p123301
Nsa(dp123302
S'description'
p123303
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123304
sS'cpp_type'
p123305
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123306
sS'default'
p123307
g3
sS'name'
p123308
S'control_tags'
p123309
sS'required'
p123310
I00
sS'group_name'
p123311
S'Advanced'
p123312
sa(dp123313
S'description'
p123314
S'A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p123315
sS'cpp_type'
p123316
S'UserObjectName'
p123317
sS'default'
p123318
g3
sS'name'
p123319
S'dilation_angle'
p123320
sS'required'
p123321
I01
sS'group_name'
p123322
Nsa(dp123323
S'description'
p123324
S'Set the enabled status of the MooseObject.\n'
p123325
sS'cpp_type'
p123326
S'bool'
p123327
sS'default'
p123328
S'1'
p123329
sS'name'
p123330
S'enable'
p123331
sS'required'
p123332
I00
sS'group_name'
p123333
S'Advanced'
p123334
sa(dp123335
S'name'
p123336
S'execute_on'
p123337
sS'cpp_type'
p123338
S'MultiMooseEnum'
p123339
sS'default'
p123340
S'TIMESTEP_END'
p123341
sS'description'
p123342
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123343
sS'required'
p123344
I00
sS'options'
p123345
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123346
sS'group_name'
p123347
Nsa(dp123348
S'description'
p123349
S'A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians).  Physically the friction angle should be between 0 and 90deg.\n'
p123350
sS'cpp_type'
p123351
S'UserObjectName'
p123352
sS'default'
p123353
g3
sS'name'
p123354
S'friction_angle'
p123355
sS'required'
p123356
I01
sS'group_name'
p123357
Nsa(dp123358
S'description'
p123359
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123360
sS'cpp_type'
p123361
S'double'
p123362
sS'default'
p123363
g3
sS'name'
p123364
S'internal_constraint_tolerance'
p123365
sS'required'
p123366
I01
sS'group_name'
p123367
Nsa(dp123368
S'description'
p123369
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p123370
sS'cpp_type'
p123371
S'double'
p123372
sS'default'
p123373
S'25'
p123374
sS'name'
p123375
S'mc_edge_smoother'
p123376
sS'required'
p123377
I00
sS'group_name'
p123378
Nsa(dp123379
S'description'
p123380
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p123381
sS'cpp_type'
p123382
S'double'
p123383
sS'default'
p123384
g3
sS'name'
p123385
S'mc_lode_cutoff'
p123386
sS'required'
p123387
I00
sS'group_name'
p123388
Nsa(dp123389
S'description'
p123390
S'Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p123391
sS'cpp_type'
p123392
S'double'
p123393
sS'default'
p123394
g3
sS'name'
p123395
S'mc_tip_smoother'
p123396
sS'required'
p123397
I01
sS'group_name'
p123398
Nsa(dp123399
S'name'
p123400
S'tip_scheme'
p123401
sS'cpp_type'
p123402
S'MooseEnum'
p123403
sS'default'
p123404
S'hyperbolic'
p123405
sS'description'
p123406
S"Scheme by which the pyramid's tip will be smoothed.\n"
p123407
sS'required'
p123408
I00
sS'options'
p123409
S'hyperbolic cap'
p123410
sS'group_name'
p123411
Nsa(dp123412
S'description'
p123413
g3
sS'cpp_type'
p123414
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123415
sS'default'
p123416
S'TensorMechanicsPlasticMohrCoulomb'
p123417
sS'name'
p123418
S'type'
p123419
sS'required'
p123420
I00
sS'group_name'
p123421
Nsa(dp123422
S'description'
p123423
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123424
sS'cpp_type'
p123425
S'bool'
p123426
sS'default'
p123427
S'0'
p123428
sS'name'
p123429
S'use_displaced_mesh'
p123430
sS'required'
p123431
I00
sS'group_name'
p123432
S'Advanced'
p123433
sa(dp123434
S'description'
p123435
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123436
sS'cpp_type'
p123437
S'double'
p123438
sS'default'
p123439
g3
sS'name'
p123440
S'yield_function_tolerance'
p123441
sS'required'
p123442
I01
sS'group_name'
p123443
NsasS'name'
p123444
S'/UserObjects/TensorMechanicsPlasticMohrCoulomb'
p123445
sa(dp123446
S'description'
p123447
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p123448
sS'subblocks'
p123449
NsS'parameters'
p123450
(lp123451
(dp123452
S'description'
p123453
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n'
p123454
sS'cpp_type'
p123455
S'UserObjectName'
p123456
sS'default'
p123457
g3
sS'name'
p123458
S'cohesion'
p123459
sS'required'
p123460
I01
sS'group_name'
p123461
Nsa(dp123462
S'description'
p123463
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123464
sS'cpp_type'
p123465
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123466
sS'default'
p123467
g3
sS'name'
p123468
S'control_tags'
p123469
sS'required'
p123470
I00
sS'group_name'
p123471
S'Advanced'
p123472
sa(dp123473
S'description'
p123474
S'A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians)\n'
p123475
sS'cpp_type'
p123476
S'UserObjectName'
p123477
sS'default'
p123478
g3
sS'name'
p123479
S'dilation_angle'
p123480
sS'required'
p123481
I01
sS'group_name'
p123482
Nsa(dp123483
S'description'
p123484
S'Set the enabled status of the MooseObject.\n'
p123485
sS'cpp_type'
p123486
S'bool'
p123487
sS'default'
p123488
S'1'
p123489
sS'name'
p123490
S'enable'
p123491
sS'required'
p123492
I00
sS'group_name'
p123493
S'Advanced'
p123494
sa(dp123495
S'name'
p123496
S'execute_on'
p123497
sS'cpp_type'
p123498
S'MultiMooseEnum'
p123499
sS'default'
p123500
S'TIMESTEP_END'
p123501
sS'description'
p123502
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123503
sS'required'
p123504
I00
sS'options'
p123505
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123506
sS'group_name'
p123507
Nsa(dp123508
S'description'
p123509
S'A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n'
p123510
sS'cpp_type'
p123511
S'UserObjectName'
p123512
sS'default'
p123513
g3
sS'name'
p123514
S'friction_angle'
p123515
sS'required'
p123516
I01
sS'group_name'
p123517
Nsa(dp123518
S'description'
p123519
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123520
sS'cpp_type'
p123521
S'double'
p123522
sS'default'
p123523
g3
sS'name'
p123524
S'internal_constraint_tolerance'
p123525
sS'required'
p123526
I01
sS'group_name'
p123527
Nsa(dp123528
S'description'
p123529
S'Maximum number of Newton-Raphson iterations allowed in the custom return-map algorithm.  For highly nonlinear hardening this may need to be higher than 10.\n'
p123530
sS'cpp_type'
p123531
S'unsigned int'
p123532
sS'default'
p123533
S'10'
p123534
sS'name'
p123535
S'max_iterations'
p123536
sS'required'
p123537
I00
sS'group_name'
p123538
Nsa(dp123539
S'description'
p123540
S'Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  This may be set very small when using the custom returnMap.  Default = f_tol.\n'
p123541
sS'cpp_type'
p123542
S'double'
p123543
sS'default'
p123544
g3
sS'name'
p123545
S'shift'
p123546
sS'required'
p123547
I00
sS'group_name'
p123548
Nsa(dp123549
S'description'
p123550
g3
sS'cpp_type'
p123551
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123552
sS'default'
p123553
S'TensorMechanicsPlasticMohrCoulombMulti'
p123554
sS'name'
p123555
S'type'
p123556
sS'required'
p123557
I00
sS'group_name'
p123558
Nsa(dp123559
S'description'
p123560
S"Use a custom return-map algorithm for this plasticity model, which may speed up computations considerably.  Set to true only for isotropic elasticity with no hardening of the dilation angle.  In this case you may set 'shift' very small.\n"
p123561
sS'cpp_type'
p123562
S'bool'
p123563
sS'default'
p123564
S'1'
p123565
sS'name'
p123566
S'use_custom_returnMap'
p123567
sS'required'
p123568
I00
sS'group_name'
p123569
Nsa(dp123570
S'description'
p123571
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123572
sS'cpp_type'
p123573
S'bool'
p123574
sS'default'
p123575
S'0'
p123576
sS'name'
p123577
S'use_displaced_mesh'
p123578
sS'required'
p123579
I00
sS'group_name'
p123580
S'Advanced'
p123581
sa(dp123582
S'description'
p123583
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123584
sS'cpp_type'
p123585
S'double'
p123586
sS'default'
p123587
g3
sS'name'
p123588
S'yield_function_tolerance'
p123589
sS'required'
p123590
I01
sS'group_name'
p123591
NsasS'name'
p123592
S'/UserObjects/TensorMechanicsPlasticMohrCoulombMulti'
p123593
sa(dp123594
S'description'
p123595
S'Orthotropic plasticity for pressure sensitive materials and also models the strength differential effect\n'
p123596
sS'subblocks'
p123597
NsS'parameters'
p123598
(lp123599
(dp123600
S'description'
p123601
S'Flag for flow-rule, true if not specified\n'
p123602
sS'cpp_type'
p123603
S'bool'
p123604
sS'default'
p123605
S'1'
p123606
sS'name'
p123607
S'associative'
p123608
sS'required'
p123609
I00
sS'group_name'
p123610
Nsa(dp123611
S'description'
p123612
S'A constant to model the influence of pressure\n'
p123613
sS'cpp_type'
p123614
S'double'
p123615
sS'default'
p123616
g3
sS'name'
p123617
S'b'
p123618
sS'required'
p123619
I01
sS'group_name'
p123620
Nsa(dp123621
S'description'
p123622
S'A constant to model the influence of strength differential effect\n'
p123623
sS'cpp_type'
p123624
S'double'
p123625
sS'default'
p123626
S'0'
p123627
sS'name'
p123628
S'c'
p123629
sS'required'
p123630
I00
sS'group_name'
p123631
Nsa(dp123632
S'description'
p123633
S'The six coefficients of L prime\n'
p123634
sS'cpp_type'
p123635
S'std::vector<double, std::allocator<double> >'
p123636
sS'default'
p123637
g3
sS'name'
p123638
S'c1'
p123639
sS'required'
p123640
I01
sS'group_name'
p123641
Nsa(dp123642
S'description'
p123643
S'The six coefficients of L prime prime\n'
p123644
sS'cpp_type'
p123645
S'std::vector<double, std::allocator<double> >'
p123646
sS'default'
p123647
g3
sS'name'
p123648
S'c2'
p123649
sS'required'
p123650
I01
sS'group_name'
p123651
Nsa(dp123652
S'description'
p123653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123654
sS'cpp_type'
p123655
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123656
sS'default'
p123657
g3
sS'name'
p123658
S'control_tags'
p123659
sS'required'
p123660
I00
sS'group_name'
p123661
S'Advanced'
p123662
sa(dp123663
S'description'
p123664
S'Set the enabled status of the MooseObject.\n'
p123665
sS'cpp_type'
p123666
S'bool'
p123667
sS'default'
p123668
S'1'
p123669
sS'name'
p123670
S'enable'
p123671
sS'required'
p123672
I00
sS'group_name'
p123673
S'Advanced'
p123674
sa(dp123675
S'name'
p123676
S'execute_on'
p123677
sS'cpp_type'
p123678
S'MultiMooseEnum'
p123679
sS'default'
p123680
S'TIMESTEP_END'
p123681
sS'description'
p123682
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123683
sS'required'
p123684
I00
sS'options'
p123685
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123686
sS'group_name'
p123687
Nsa(dp123688
S'description'
p123689
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123690
sS'cpp_type'
p123691
S'double'
p123692
sS'default'
p123693
g3
sS'name'
p123694
S'internal_constraint_tolerance'
p123695
sS'required'
p123696
I01
sS'group_name'
p123697
Nsa(dp123698
S'description'
p123699
S'Maximum iterations for custom J2 return map\n'
p123700
sS'cpp_type'
p123701
S'unsigned int'
p123702
sS'default'
p123703
S'10'
p123704
sS'name'
p123705
S'max_iterations'
p123706
sS'required'
p123707
I00
sS'group_name'
p123708
Nsa(dp123709
S'description'
p123710
g3
sS'cpp_type'
p123711
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123712
sS'default'
p123713
S'TensorMechanicsPlasticOrthotropic'
p123714
sS'name'
p123715
S'type'
p123716
sS'required'
p123717
I00
sS'group_name'
p123718
Nsa(dp123719
S'description'
p123720
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p123721
sS'cpp_type'
p123722
S'bool'
p123723
sS'default'
p123724
S'1'
p123725
sS'name'
p123726
S'use_custom_cto'
p123727
sS'required'
p123728
I00
sS'group_name'
p123729
Nsa(dp123730
S'description'
p123731
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p123732
sS'cpp_type'
p123733
S'bool'
p123734
sS'default'
p123735
S'1'
p123736
sS'name'
p123737
S'use_custom_returnMap'
p123738
sS'required'
p123739
I00
sS'group_name'
p123740
Nsa(dp123741
S'description'
p123742
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123743
sS'cpp_type'
p123744
S'bool'
p123745
sS'default'
p123746
S'0'
p123747
sS'name'
p123748
S'use_displaced_mesh'
p123749
sS'required'
p123750
I00
sS'group_name'
p123751
S'Advanced'
p123752
sa(dp123753
S'description'
p123754
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123755
sS'cpp_type'
p123756
S'double'
p123757
sS'default'
p123758
g3
sS'name'
p123759
S'yield_function_tolerance'
p123760
sS'required'
p123761
I01
sS'group_name'
p123762
Nsa(dp123763
S'description'
p123764
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p123765
sS'cpp_type'
p123766
S'UserObjectName'
p123767
sS'default'
p123768
g3
sS'name'
p123769
S'yield_strength'
p123770
sS'required'
p123771
I01
sS'group_name'
p123772
NsasS'name'
p123773
S'/UserObjects/TensorMechanicsPlasticOrthotropic'
p123774
sa(dp123775
S'description'
p123776
S'Class that can be used for testing multi-surface plasticity models.  Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123777
sS'subblocks'
p123778
NsS'parameters'
p123779
(lp123780
(dp123781
S'description'
p123782
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123783
sS'cpp_type'
p123784
S'double'
p123785
sS'default'
p123786
g3
sS'name'
p123787
S'a'
p123788
sS'required'
p123789
I01
sS'group_name'
p123790
Nsa(dp123791
S'description'
p123792
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123793
sS'cpp_type'
p123794
S'double'
p123795
sS'default'
p123796
g3
sS'name'
p123797
S'b'
p123798
sS'required'
p123799
I01
sS'group_name'
p123800
Nsa(dp123801
S'description'
p123802
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123803
sS'cpp_type'
p123804
S'double'
p123805
sS'default'
p123806
S'0'
p123807
sS'name'
p123808
S'c'
p123809
sS'required'
p123810
I00
sS'group_name'
p123811
Nsa(dp123812
S'description'
p123813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123814
sS'cpp_type'
p123815
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123816
sS'default'
p123817
g3
sS'name'
p123818
S'control_tags'
p123819
sS'required'
p123820
I00
sS'group_name'
p123821
S'Advanced'
p123822
sa(dp123823
S'description'
p123824
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123825
sS'cpp_type'
p123826
S'double'
p123827
sS'default'
p123828
S'0'
p123829
sS'name'
p123830
S'd'
p123831
sS'required'
p123832
I00
sS'group_name'
p123833
Nsa(dp123834
S'description'
p123835
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123836
sS'cpp_type'
p123837
S'double'
p123838
sS'default'
p123839
S'0'
p123840
sS'name'
p123841
S'e'
p123842
sS'required'
p123843
I00
sS'group_name'
p123844
Nsa(dp123845
S'description'
p123846
S'Set the enabled status of the MooseObject.\n'
p123847
sS'cpp_type'
p123848
S'bool'
p123849
sS'default'
p123850
S'1'
p123851
sS'name'
p123852
S'enable'
p123853
sS'required'
p123854
I00
sS'group_name'
p123855
S'Advanced'
p123856
sa(dp123857
S'name'
p123858
S'execute_on'
p123859
sS'cpp_type'
p123860
S'MultiMooseEnum'
p123861
sS'default'
p123862
S'TIMESTEP_END'
p123863
sS'description'
p123864
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123865
sS'required'
p123866
I00
sS'options'
p123867
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123868
sS'group_name'
p123869
Nsa(dp123870
S'description'
p123871
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123872
sS'cpp_type'
p123873
S'double'
p123874
sS'default'
p123875
S'0'
p123876
sS'name'
p123877
S'f'
p123878
sS'required'
p123879
I00
sS'group_name'
p123880
Nsa(dp123881
S'description'
p123882
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p123883
sS'cpp_type'
p123884
S'double'
p123885
sS'default'
p123886
g3
sS'name'
p123887
S'internal_constraint_tolerance'
p123888
sS'required'
p123889
I01
sS'group_name'
p123890
Nsa(dp123891
S'description'
p123892
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p123893
sS'cpp_type'
p123894
S'double'
p123895
sS'default'
p123896
g3
sS'name'
p123897
S'strength'
p123898
sS'required'
p123899
I01
sS'group_name'
p123900
Nsa(dp123901
S'description'
p123902
g3
sS'cpp_type'
p123903
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123904
sS'default'
p123905
S'TensorMechanicsPlasticSimpleTester'
p123906
sS'name'
p123907
S'type'
p123908
sS'required'
p123909
I00
sS'group_name'
p123910
Nsa(dp123911
S'description'
p123912
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123913
sS'cpp_type'
p123914
S'bool'
p123915
sS'default'
p123916
S'0'
p123917
sS'name'
p123918
S'use_displaced_mesh'
p123919
sS'required'
p123920
I00
sS'group_name'
p123921
S'Advanced'
p123922
sa(dp123923
S'description'
p123924
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p123925
sS'cpp_type'
p123926
S'double'
p123927
sS'default'
p123928
g3
sS'name'
p123929
S'yield_function_tolerance'
p123930
sS'required'
p123931
I01
sS'group_name'
p123932
NsasS'name'
p123933
S'/UserObjects/TensorMechanicsPlasticSimpleTester'
p123934
sa(dp123935
S'description'
p123936
S'Associative tensile plasticity with hardening/softening, and tensile_strength = 1\n'
p123937
sS'subblocks'
p123938
NsS'parameters'
p123939
(lp123940
(dp123941
S'description'
p123942
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/tensile_strength\n"
p123943
sS'cpp_type'
p123944
S'double'
p123945
sS'default'
p123946
S'0'
p123947
sS'name'
p123948
S'cap_rate'
p123949
sS'required'
p123950
I00
sS'group_name'
p123951
Nsa(dp123952
S'description'
p123953
S"For the 'cap' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n"
p123954
sS'cpp_type'
p123955
S'double'
p123956
sS'default'
p123957
S'0'
p123958
sS'name'
p123959
S'cap_start'
p123960
sS'required'
p123961
I00
sS'group_name'
p123962
Nsa(dp123963
S'description'
p123964
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123965
sS'cpp_type'
p123966
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123967
sS'default'
p123968
g3
sS'name'
p123969
S'control_tags'
p123970
sS'required'
p123971
I00
sS'group_name'
p123972
S'Advanced'
p123973
sa(dp123974
S'description'
p123975
S'Set the enabled status of the MooseObject.\n'
p123976
sS'cpp_type'
p123977
S'bool'
p123978
sS'default'
p123979
S'1'
p123980
sS'name'
p123981
S'enable'
p123982
sS'required'
p123983
I00
sS'group_name'
p123984
S'Advanced'
p123985
sa(dp123986
S'name'
p123987
S'execute_on'
p123988
sS'cpp_type'
p123989
S'MultiMooseEnum'
p123990
sS'default'
p123991
S'TIMESTEP_END'
p123992
sS'description'
p123993
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123994
sS'required'
p123995
I00
sS'options'
p123996
S'none initial linear nonlinear timestep_end timestep_begin custom'
p123997
sS'group_name'
p123998
Nsa(dp123999
S'description'
p124000
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124001
sS'cpp_type'
p124002
S'double'
p124003
sS'default'
p124004
g3
sS'name'
p124005
S'internal_constraint_tolerance'
p124006
sS'required'
p124007
I01
sS'group_name'
p124008
Nsa(dp124009
S'description'
p124010
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p124011
sS'cpp_type'
p124012
S'double'
p124013
sS'default'
p124014
S'25'
p124015
sS'name'
p124016
S'tensile_edge_smoother'
p124017
sS'required'
p124018
I00
sS'group_name'
p124019
Nsa(dp124020
S'description'
p124021
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p124022
sS'cpp_type'
p124023
S'double'
p124024
sS'default'
p124025
g3
sS'name'
p124026
S'tensile_lode_cutoff'
p124027
sS'required'
p124028
I00
sS'group_name'
p124029
Nsa(dp124030
S'description'
p124031
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n'
p124032
sS'cpp_type'
p124033
S'UserObjectName'
p124034
sS'default'
p124035
g3
sS'name'
p124036
S'tensile_strength'
p124037
sS'required'
p124038
I01
sS'group_name'
p124039
Nsa(dp124040
S'description'
p124041
S"For the 'hyperbolic' tip_scheme, the pyramid vertex will be smoothed by the given amount.  For the 'cap' tip_scheme, additional smoothing will occur.  Typical value is 0.1*tensile_strength\n"
p124042
sS'cpp_type'
p124043
S'double'
p124044
sS'default'
p124045
g3
sS'name'
p124046
S'tensile_tip_smoother'
p124047
sS'required'
p124048
I01
sS'group_name'
p124049
Nsa(dp124050
S'name'
p124051
S'tip_scheme'
p124052
sS'cpp_type'
p124053
S'MooseEnum'
p124054
sS'default'
p124055
S'hyperbolic'
p124056
sS'description'
p124057
S"Scheme by which the pyramid's tip will be smoothed.\n"
p124058
sS'required'
p124059
I00
sS'options'
p124060
S'hyperbolic cap'
p124061
sS'group_name'
p124062
Nsa(dp124063
S'description'
p124064
g3
sS'cpp_type'
p124065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124066
sS'default'
p124067
S'TensorMechanicsPlasticTensile'
p124068
sS'name'
p124069
S'type'
p124070
sS'required'
p124071
I00
sS'group_name'
p124072
Nsa(dp124073
S'description'
p124074
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124075
sS'cpp_type'
p124076
S'bool'
p124077
sS'default'
p124078
S'0'
p124079
sS'name'
p124080
S'use_displaced_mesh'
p124081
sS'required'
p124082
I00
sS'group_name'
p124083
S'Advanced'
p124084
sa(dp124085
S'description'
p124086
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124087
sS'cpp_type'
p124088
S'double'
p124089
sS'default'
p124090
g3
sS'name'
p124091
S'yield_function_tolerance'
p124092
sS'required'
p124093
I01
sS'group_name'
p124094
NsasS'name'
p124095
S'/UserObjects/TensorMechanicsPlasticTensile'
p124096
sa(dp124097
S'description'
p124098
S'Associative tensile plasticity with hardening/softening\n'
p124099
sS'subblocks'
p124100
NsS'parameters'
p124101
(lp124102
(dp124103
S'description'
p124104
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124105
sS'cpp_type'
p124106
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124107
sS'default'
p124108
g3
sS'name'
p124109
S'control_tags'
p124110
sS'required'
p124111
I00
sS'group_name'
p124112
S'Advanced'
p124113
sa(dp124114
S'description'
p124115
S'Set the enabled status of the MooseObject.\n'
p124116
sS'cpp_type'
p124117
S'bool'
p124118
sS'default'
p124119
S'1'
p124120
sS'name'
p124121
S'enable'
p124122
sS'required'
p124123
I00
sS'group_name'
p124124
S'Advanced'
p124125
sa(dp124126
S'name'
p124127
S'execute_on'
p124128
sS'cpp_type'
p124129
S'MultiMooseEnum'
p124130
sS'default'
p124131
S'TIMESTEP_END'
p124132
sS'description'
p124133
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124134
sS'required'
p124135
I00
sS'options'
p124136
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124137
sS'group_name'
p124138
Nsa(dp124139
S'description'
p124140
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124141
sS'cpp_type'
p124142
S'double'
p124143
sS'default'
p124144
g3
sS'name'
p124145
S'internal_constraint_tolerance'
p124146
sS'required'
p124147
I01
sS'group_name'
p124148
Nsa(dp124149
S'description'
p124150
S'Maximum number of Newton-Raphson iterations allowed in the custom return-map algorithm.  For highly nonlinear hardening this may need to be higher than 10.\n'
p124151
sS'cpp_type'
p124152
S'unsigned int'
p124153
sS'default'
p124154
S'10'
p124155
sS'name'
p124156
S'max_iterations'
p124157
sS'required'
p124158
I00
sS'group_name'
p124159
Nsa(dp124160
S'description'
p124161
S'Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n'
p124162
sS'cpp_type'
p124163
S'double'
p124164
sS'default'
p124165
g3
sS'name'
p124166
S'shift'
p124167
sS'required'
p124168
I00
sS'group_name'
p124169
Nsa(dp124170
S'description'
p124171
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n'
p124172
sS'cpp_type'
p124173
S'UserObjectName'
p124174
sS'default'
p124175
g3
sS'name'
p124176
S'tensile_strength'
p124177
sS'required'
p124178
I01
sS'group_name'
p124179
Nsa(dp124180
S'description'
p124181
g3
sS'cpp_type'
p124182
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124183
sS'default'
p124184
S'TensorMechanicsPlasticTensileMulti'
p124185
sS'name'
p124186
S'type'
p124187
sS'required'
p124188
I00
sS'group_name'
p124189
Nsa(dp124190
S'description'
p124191
S'Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n'
p124192
sS'cpp_type'
p124193
S'bool'
p124194
sS'default'
p124195
S'1'
p124196
sS'name'
p124197
S'use_custom_cto'
p124198
sS'required'
p124199
I00
sS'group_name'
p124200
Nsa(dp124201
S'description'
p124202
S'Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n'
p124203
sS'cpp_type'
p124204
S'bool'
p124205
sS'default'
p124206
S'1'
p124207
sS'name'
p124208
S'use_custom_returnMap'
p124209
sS'required'
p124210
I00
sS'group_name'
p124211
Nsa(dp124212
S'description'
p124213
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124214
sS'cpp_type'
p124215
S'bool'
p124216
sS'default'
p124217
S'0'
p124218
sS'name'
p124219
S'use_displaced_mesh'
p124220
sS'required'
p124221
I00
sS'group_name'
p124222
S'Advanced'
p124223
sa(dp124224
S'description'
p124225
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124226
sS'cpp_type'
p124227
S'double'
p124228
sS'default'
p124229
g3
sS'name'
p124230
S'yield_function_tolerance'
p124231
sS'required'
p124232
I01
sS'group_name'
p124233
NsasS'name'
p124234
S'/UserObjects/TensorMechanicsPlasticTensileMulti'
p124235
sa(dp124236
S'description'
p124237
S'Non-associative finite-strain weak-plane shear perfect plasticity.  Here cohesion = 1, tan(phi) = 1 = tan(psi)\n'
p124238
sS'subblocks'
p124239
NsS'parameters'
p124240
(lp124241
(dp124242
S'description'
p124243
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/cohesion\n"
p124244
sS'cpp_type'
p124245
S'double'
p124246
sS'default'
p124247
S'0'
p124248
sS'name'
p124249
S'cap_rate'
p124250
sS'required'
p124251
I00
sS'group_name'
p124252
Nsa(dp124253
S'description'
p124254
S"For the 'cap' tip_scheme, smoothing is performed in the stress_zz > cap_start region\n"
p124255
sS'cpp_type'
p124256
S'double'
p124257
sS'default'
p124258
S'0'
p124259
sS'name'
p124260
S'cap_start'
p124261
sS'required'
p124262
I00
sS'group_name'
p124263
Nsa(dp124264
S'description'
p124265
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p124266
sS'cpp_type'
p124267
S'UserObjectName'
p124268
sS'default'
p124269
g3
sS'name'
p124270
S'cohesion'
p124271
sS'required'
p124272
I01
sS'group_name'
p124273
Nsa(dp124274
S'description'
p124275
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124276
sS'cpp_type'
p124277
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124278
sS'default'
p124279
g3
sS'name'
p124280
S'control_tags'
p124281
sS'required'
p124282
I00
sS'group_name'
p124283
S'Advanced'
p124284
sa(dp124285
S'description'
p124286
S'Set the enabled status of the MooseObject.\n'
p124287
sS'cpp_type'
p124288
S'bool'
p124289
sS'default'
p124290
S'1'
p124291
sS'name'
p124292
S'enable'
p124293
sS'required'
p124294
I00
sS'group_name'
p124295
S'Advanced'
p124296
sa(dp124297
S'name'
p124298
S'execute_on'
p124299
sS'cpp_type'
p124300
S'MultiMooseEnum'
p124301
sS'default'
p124302
S'TIMESTEP_END'
p124303
sS'description'
p124304
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124305
sS'required'
p124306
I00
sS'options'
p124307
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124308
sS'group_name'
p124309
Nsa(dp124310
S'description'
p124311
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124312
sS'cpp_type'
p124313
S'double'
p124314
sS'default'
p124315
g3
sS'name'
p124316
S'internal_constraint_tolerance'
p124317
sS'required'
p124318
I01
sS'group_name'
p124319
Nsa(dp124320
S'description'
p124321
S"For the 'hyperbolic' tip_scheme, the cone vertex at shear-stress = 0 will be smoothed by the given amount.  For the 'cap' tip_scheme, additional smoothing will occur.  Typical value is 0.1*cohesion\n"
p124322
sS'cpp_type'
p124323
S'double'
p124324
sS'default'
p124325
g3
sS'name'
p124326
S'smoother'
p124327
sS'required'
p124328
I01
sS'group_name'
p124329
Nsa(dp124330
S'description'
p124331
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p124332
sS'cpp_type'
p124333
S'UserObjectName'
p124334
sS'default'
p124335
g3
sS'name'
p124336
S'tan_dilation_angle'
p124337
sS'required'
p124338
I01
sS'group_name'
p124339
Nsa(dp124340
S'description'
p124341
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p124342
sS'cpp_type'
p124343
S'UserObjectName'
p124344
sS'default'
p124345
g3
sS'name'
p124346
S'tan_friction_angle'
p124347
sS'required'
p124348
I01
sS'group_name'
p124349
Nsa(dp124350
S'name'
p124351
S'tip_scheme'
p124352
sS'cpp_type'
p124353
S'MooseEnum'
p124354
sS'default'
p124355
S'hyperbolic'
p124356
sS'description'
p124357
S"Scheme by which the cone's tip will be smoothed.\n"
p124358
sS'required'
p124359
I00
sS'options'
p124360
S'hyperbolic cap'
p124361
sS'group_name'
p124362
Nsa(dp124363
S'description'
p124364
g3
sS'cpp_type'
p124365
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124366
sS'default'
p124367
S'TensorMechanicsPlasticWeakPlaneShear'
p124368
sS'name'
p124369
S'type'
p124370
sS'required'
p124371
I00
sS'group_name'
p124372
Nsa(dp124373
S'description'
p124374
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124375
sS'cpp_type'
p124376
S'bool'
p124377
sS'default'
p124378
S'0'
p124379
sS'name'
p124380
S'use_displaced_mesh'
p124381
sS'required'
p124382
I00
sS'group_name'
p124383
S'Advanced'
p124384
sa(dp124385
S'description'
p124386
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124387
sS'cpp_type'
p124388
S'double'
p124389
sS'default'
p124390
g3
sS'name'
p124391
S'yield_function_tolerance'
p124392
sS'required'
p124393
I01
sS'group_name'
p124394
NsasS'name'
p124395
S'/UserObjects/TensorMechanicsPlasticWeakPlaneShear'
p124396
sa(dp124397
S'description'
p124398
S'Associative weak-plane tensile plasticity with hardening/softening\n'
p124399
sS'subblocks'
p124400
NsS'parameters'
p124401
(lp124402
(dp124403
S'description'
p124404
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124405
sS'cpp_type'
p124406
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124407
sS'default'
p124408
g3
sS'name'
p124409
S'control_tags'
p124410
sS'required'
p124411
I00
sS'group_name'
p124412
S'Advanced'
p124413
sa(dp124414
S'description'
p124415
S'Set the enabled status of the MooseObject.\n'
p124416
sS'cpp_type'
p124417
S'bool'
p124418
sS'default'
p124419
S'1'
p124420
sS'name'
p124421
S'enable'
p124422
sS'required'
p124423
I00
sS'group_name'
p124424
S'Advanced'
p124425
sa(dp124426
S'name'
p124427
S'execute_on'
p124428
sS'cpp_type'
p124429
S'MultiMooseEnum'
p124430
sS'default'
p124431
S'TIMESTEP_END'
p124432
sS'description'
p124433
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124434
sS'required'
p124435
I00
sS'options'
p124436
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124437
sS'group_name'
p124438
Nsa(dp124439
S'description'
p124440
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124441
sS'cpp_type'
p124442
S'double'
p124443
sS'default'
p124444
g3
sS'name'
p124445
S'internal_constraint_tolerance'
p124446
sS'required'
p124447
I01
sS'group_name'
p124448
Nsa(dp124449
S'description'
p124450
S'The yield function is stress_coefficient * stress_zz - tensile_strength\n'
p124451
sS'cpp_type'
p124452
S'double'
p124453
sS'default'
p124454
S'1'
p124455
sS'name'
p124456
S'stress_coefficient'
p124457
sS'required'
p124458
I00
sS'group_name'
p124459
Nsa(dp124460
S'description'
p124461
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n'
p124462
sS'cpp_type'
p124463
S'UserObjectName'
p124464
sS'default'
p124465
g3
sS'name'
p124466
S'tensile_strength'
p124467
sS'required'
p124468
I01
sS'group_name'
p124469
Nsa(dp124470
S'description'
p124471
g3
sS'cpp_type'
p124472
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124473
sS'default'
p124474
S'TensorMechanicsPlasticWeakPlaneTensile'
p124475
sS'name'
p124476
S'type'
p124477
sS'required'
p124478
I00
sS'group_name'
p124479
Nsa(dp124480
S'description'
p124481
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124482
sS'cpp_type'
p124483
S'bool'
p124484
sS'default'
p124485
S'0'
p124486
sS'name'
p124487
S'use_displaced_mesh'
p124488
sS'required'
p124489
I00
sS'group_name'
p124490
S'Advanced'
p124491
sa(dp124492
S'description'
p124493
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124494
sS'cpp_type'
p124495
S'double'
p124496
sS'default'
p124497
g3
sS'name'
p124498
S'yield_function_tolerance'
p124499
sS'required'
p124500
I01
sS'group_name'
p124501
NsasS'name'
p124502
S'/UserObjects/TensorMechanicsPlasticWeakPlaneTensile'
p124503
sa(dp124504
S'description'
p124505
S'Associative weak-plane tensile plasticity with hardening/softening, with specified, fixed normal vector.  (WeakPlaneTensile combined with specifying N in the Material might be preferable to you.)\n'
p124506
sS'subblocks'
p124507
NsS'parameters'
p124508
(lp124509
(dp124510
S'description'
p124511
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124512
sS'cpp_type'
p124513
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124514
sS'default'
p124515
g3
sS'name'
p124516
S'control_tags'
p124517
sS'required'
p124518
I00
sS'group_name'
p124519
S'Advanced'
p124520
sa(dp124521
S'description'
p124522
S'Set the enabled status of the MooseObject.\n'
p124523
sS'cpp_type'
p124524
S'bool'
p124525
sS'default'
p124526
S'1'
p124527
sS'name'
p124528
S'enable'
p124529
sS'required'
p124530
I00
sS'group_name'
p124531
S'Advanced'
p124532
sa(dp124533
S'name'
p124534
S'execute_on'
p124535
sS'cpp_type'
p124536
S'MultiMooseEnum'
p124537
sS'default'
p124538
S'TIMESTEP_END'
p124539
sS'description'
p124540
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124541
sS'required'
p124542
I00
sS'options'
p124543
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124544
sS'group_name'
p124545
Nsa(dp124546
S'description'
p124547
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124548
sS'cpp_type'
p124549
S'double'
p124550
sS'default'
p124551
g3
sS'name'
p124552
S'internal_constraint_tolerance'
p124553
sS'required'
p124554
I01
sS'group_name'
p124555
Nsa(dp124556
S'description'
p124557
S'The normal vector to the weak plane\n'
p124558
sS'cpp_type'
p124559
S'libMesh::VectorValue<double>'
p124560
sS'default'
p124561
g3
sS'name'
p124562
S'normal_vector'
p124563
sS'required'
p124564
I01
sS'group_name'
p124565
Nsa(dp124566
S'description'
p124567
S'The yield function is stress_coefficient * stress_zz - tensile_strength\n'
p124568
sS'cpp_type'
p124569
S'double'
p124570
sS'default'
p124571
S'1'
p124572
sS'name'
p124573
S'stress_coefficient'
p124574
sS'required'
p124575
I00
sS'group_name'
p124576
Nsa(dp124577
S'description'
p124578
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n'
p124579
sS'cpp_type'
p124580
S'UserObjectName'
p124581
sS'default'
p124582
g3
sS'name'
p124583
S'tensile_strength'
p124584
sS'required'
p124585
I01
sS'group_name'
p124586
Nsa(dp124587
S'description'
p124588
g3
sS'cpp_type'
p124589
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124590
sS'default'
p124591
S'TensorMechanicsPlasticWeakPlaneTensileN'
p124592
sS'name'
p124593
S'type'
p124594
sS'required'
p124595
I00
sS'group_name'
p124596
Nsa(dp124597
S'description'
p124598
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124599
sS'cpp_type'
p124600
S'bool'
p124601
sS'default'
p124602
S'0'
p124603
sS'name'
p124604
S'use_displaced_mesh'
p124605
sS'required'
p124606
I00
sS'group_name'
p124607
S'Advanced'
p124608
sa(dp124609
S'description'
p124610
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124611
sS'cpp_type'
p124612
S'double'
p124613
sS'default'
p124614
g3
sS'name'
p124615
S'yield_function_tolerance'
p124616
sS'required'
p124617
I01
sS'group_name'
p124618
NsasS'name'
p124619
S'/UserObjects/TensorMechanicsPlasticWeakPlaneTensileN'
p124620
sa(dp124621
S'description'
p124622
g3
sS'subblocks'
p124623
NsS'parameters'
p124624
(lp124625
(dp124626
S'description'
p124627
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124628
sS'cpp_type'
p124629
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124630
sS'default'
p124631
g3
sS'name'
p124632
S'control_tags'
p124633
sS'required'
p124634
I00
sS'group_name'
p124635
S'Advanced'
p124636
sa(dp124637
S'description'
p124638
S'Set the enabled status of the MooseObject.\n'
p124639
sS'cpp_type'
p124640
S'bool'
p124641
sS'default'
p124642
S'1'
p124643
sS'name'
p124644
S'enable'
p124645
sS'required'
p124646
I00
sS'group_name'
p124647
S'Advanced'
p124648
sa(dp124649
S'name'
p124650
S'execute_on'
p124651
sS'cpp_type'
p124652
S'MultiMooseEnum'
p124653
sS'default'
p124654
S'TIMESTEP_END'
p124655
sS'description'
p124656
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124657
sS'required'
p124658
I00
sS'options'
p124659
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124660
sS'group_name'
p124661
Nsa(dp124662
S'description'
p124663
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p124664
sS'cpp_type'
p124665
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124666
sS'default'
p124667
g3
sS'name'
p124668
S'expression'
p124669
sS'required'
p124670
I01
sS'group_name'
p124671
Nsa(dp124672
S'description'
p124673
g3
sS'cpp_type'
p124674
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124675
sS'default'
p124676
S'Terminator'
p124677
sS'name'
p124678
S'type'
p124679
sS'required'
p124680
I00
sS'group_name'
p124681
Nsa(dp124682
S'description'
p124683
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124684
sS'cpp_type'
p124685
S'bool'
p124686
sS'default'
p124687
S'0'
p124688
sS'name'
p124689
S'use_displaced_mesh'
p124690
sS'required'
p124691
I00
sS'group_name'
p124692
S'Advanced'
p124693
sasS'name'
p124694
S'/UserObjects/Terminator'
p124695
sa(dp124696
S'description'
p124697
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p124698
sS'subblocks'
p124699
NsS'parameters'
p124700
(lp124701
(dp124702
S'description'
p124703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124704
sS'cpp_type'
p124705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124706
sS'default'
p124707
g3
sS'name'
p124708
S'control_tags'
p124709
sS'required'
p124710
I00
sS'group_name'
p124711
S'Advanced'
p124712
sa(dp124713
S'description'
p124714
S'Set the enabled status of the MooseObject.\n'
p124715
sS'cpp_type'
p124716
S'bool'
p124717
sS'default'
p124718
S'1'
p124719
sS'name'
p124720
S'enable'
p124721
sS'required'
p124722
I00
sS'group_name'
p124723
S'Advanced'
p124724
sa(dp124725
S'name'
p124726
S'execute_on'
p124727
sS'cpp_type'
p124728
S'MultiMooseEnum'
p124729
sS'default'
p124730
S'TIMESTEP_END'
p124731
sS'description'
p124732
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124733
sS'required'
p124734
I00
sS'options'
p124735
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124736
sS'group_name'
p124737
Nsa(dp124738
S'description'
p124739
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124740
sS'cpp_type'
p124741
S'std::vector<OutputName, std::allocator<OutputName> >'
p124742
sS'default'
p124743
g3
sS'name'
p124744
S'outputs'
p124745
sS'required'
p124746
I00
sS'group_name'
p124747
S'Advanced'
p124748
sa(dp124749
S'description'
p124750
S'The name of the postprocessor used for reporting time extreme values\n'
p124751
sS'cpp_type'
p124752
S'PostprocessorName'
p124753
sS'default'
p124754
g3
sS'name'
p124755
S'postprocessor'
p124756
sS'required'
p124757
I01
sS'group_name'
p124758
Nsa(dp124759
S'description'
p124760
g3
sS'cpp_type'
p124761
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124762
sS'default'
p124763
S'TimeExtremeValue'
p124764
sS'name'
p124765
S'type'
p124766
sS'required'
p124767
I00
sS'group_name'
p124768
Nsa(dp124769
S'description'
p124770
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124771
sS'cpp_type'
p124772
S'bool'
p124773
sS'default'
p124774
S'0'
p124775
sS'name'
p124776
S'use_displaced_mesh'
p124777
sS'required'
p124778
I00
sS'group_name'
p124779
S'Advanced'
p124780
sa(dp124781
S'name'
p124782
S'value_type'
p124783
sS'cpp_type'
p124784
S'MooseEnum'
p124785
sS'default'
p124786
S'max'
p124787
sS'description'
p124788
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p124789
sS'required'
p124790
I00
sS'options'
p124791
S'max min abs_max abs_min'
p124792
sS'group_name'
p124793
NsasS'name'
p124794
S'/UserObjects/TimeExtremeValue'
p124795
sa(dp124796
S'description'
p124797
g3
sS'subblocks'
p124798
NsS'parameters'
p124799
(lp124800
(dp124801
S'description'
p124802
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124803
sS'cpp_type'
p124804
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124805
sS'default'
p124806
g3
sS'name'
p124807
S'control_tags'
p124808
sS'required'
p124809
I00
sS'group_name'
p124810
S'Advanced'
p124811
sa(dp124812
S'description'
p124813
S'Set the enabled status of the MooseObject.\n'
p124814
sS'cpp_type'
p124815
S'bool'
p124816
sS'default'
p124817
S'1'
p124818
sS'name'
p124819
S'enable'
p124820
sS'required'
p124821
I00
sS'group_name'
p124822
S'Advanced'
p124823
sa(dp124824
S'name'
p124825
S'execute_on'
p124826
sS'cpp_type'
p124827
S'MultiMooseEnum'
p124828
sS'default'
p124829
S'TIMESTEP_END'
p124830
sS'description'
p124831
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124832
sS'required'
p124833
I00
sS'options'
p124834
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124835
sS'group_name'
p124836
Nsa(dp124837
S'description'
p124838
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124839
sS'cpp_type'
p124840
S'std::vector<OutputName, std::allocator<OutputName> >'
p124841
sS'default'
p124842
g3
sS'name'
p124843
S'outputs'
p124844
sS'required'
p124845
I00
sS'group_name'
p124846
S'Advanced'
p124847
sa(dp124848
S'description'
p124849
g3
sS'cpp_type'
p124850
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124851
sS'default'
p124852
S'TimestepSize'
p124853
sS'name'
p124854
S'type'
p124855
sS'required'
p124856
I00
sS'group_name'
p124857
Nsa(dp124858
S'description'
p124859
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124860
sS'cpp_type'
p124861
S'bool'
p124862
sS'default'
p124863
S'0'
p124864
sS'name'
p124865
S'use_displaced_mesh'
p124866
sS'required'
p124867
I00
sS'group_name'
p124868
S'Advanced'
p124869
sasS'name'
p124870
S'/UserObjects/TimestepSize'
p124871
sa(dp124872
S'description'
p124873
g3
sS'subblocks'
p124874
NsS'parameters'
p124875
(lp124876
(dp124877
S'description'
p124878
S'Origin of the axis of rotation used to calculate the torque\n'
p124879
sS'cpp_type'
p124880
S'libMesh::VectorValue<double>'
p124881
sS'default'
p124882
S'0 0 0'
p124883
sS'name'
p124884
S'axis_origin'
p124885
sS'required'
p124886
I00
sS'group_name'
p124887
Nsa(dp124888
S'description'
p124889
S'The list of block ids (SubdomainID) that this object will be applied\n'
p124890
sS'cpp_type'
p124891
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p124892
sS'default'
p124893
g3
sS'name'
p124894
S'block'
p124895
sS'required'
p124896
I00
sS'group_name'
p124897
Nsa(dp124898
S'description'
p124899
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p124900
sS'cpp_type'
p124901
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p124902
sS'default'
p124903
g3
sS'name'
p124904
S'boundary'
p124905
sS'required'
p124906
I00
sS'group_name'
p124907
Nsa(dp124908
S'description'
p124909
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124910
sS'cpp_type'
p124911
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124912
sS'default'
p124913
g3
sS'name'
p124914
S'control_tags'
p124915
sS'required'
p124916
I00
sS'group_name'
p124917
S'Advanced'
p124918
sa(dp124919
S'description'
p124920
S'The direction vector of the axis of rotation about which the calculated torque is calculated\n'
p124921
sS'cpp_type'
p124922
S'libMesh::VectorValue<double>'
p124923
sS'default'
p124924
g3
sS'name'
p124925
S'direction_vector'
p124926
sS'required'
p124927
I01
sS'group_name'
p124928
Nsa(dp124929
S'description'
p124930
S'Set the enabled status of the MooseObject.\n'
p124931
sS'cpp_type'
p124932
S'bool'
p124933
sS'default'
p124934
S'1'
p124935
sS'name'
p124936
S'enable'
p124937
sS'required'
p124938
I00
sS'group_name'
p124939
S'Advanced'
p124940
sa(dp124941
S'name'
p124942
S'execute_on'
p124943
sS'cpp_type'
p124944
S'MultiMooseEnum'
p124945
sS'default'
p124946
S'TIMESTEP_END'
p124947
sS'description'
p124948
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124949
sS'required'
p124950
I00
sS'options'
p124951
S'none initial linear nonlinear timestep_end timestep_begin custom'
p124952
sS'group_name'
p124953
Nsa(dp124954
S'description'
p124955
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p124956
sS'cpp_type'
p124957
S'std::vector<OutputName, std::allocator<OutputName> >'
p124958
sS'default'
p124959
g3
sS'name'
p124960
S'outputs'
p124961
sS'required'
p124962
I00
sS'group_name'
p124963
S'Advanced'
p124964
sa(dp124965
S'description'
p124966
S'The reaction variables\n'
p124967
sS'cpp_type'
p124968
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p124969
sS'default'
p124970
g3
sS'name'
p124971
S'react'
p124972
sS'required'
p124973
I01
sS'group_name'
p124974
Nsa(dp124975
S'description'
p124976
S'The seed for the master random number generator\n'
p124977
sS'cpp_type'
p124978
S'unsigned int'
p124979
sS'default'
p124980
S'0'
p124981
sS'name'
p124982
S'seed'
p124983
sS'required'
p124984
I00
sS'group_name'
p124985
S'Advanced'
p124986
sa(dp124987
S'description'
p124988
g3
sS'cpp_type'
p124989
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124990
sS'default'
p124991
S'TorqueReaction'
p124992
sS'name'
p124993
S'type'
p124994
sS'required'
p124995
I00
sS'group_name'
p124996
Nsa(dp124997
S'description'
p124998
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p124999
sS'cpp_type'
p125000
S'bool'
p125001
sS'default'
p125002
S'0'
p125003
sS'name'
p125004
S'unique_node_execute'
p125005
sS'required'
p125006
I00
sS'group_name'
p125007
Nsa(dp125008
S'description'
p125009
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125010
sS'cpp_type'
p125011
S'bool'
p125012
sS'default'
p125013
S'1'
p125014
sS'name'
p125015
S'use_displaced_mesh'
p125016
sS'required'
p125017
I00
sS'group_name'
p125018
S'Advanced'
p125019
sasS'name'
p125020
S'/UserObjects/TorqueReaction'
p125021
sa(dp125022
S'description'
p125023
g3
sS'subblocks'
p125024
NsS'parameters'
p125025
(lp125026
(dp125027
S'description'
p125028
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125029
sS'cpp_type'
p125030
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125031
sS'default'
p125032
g3
sS'name'
p125033
S'control_tags'
p125034
sS'required'
p125035
I00
sS'group_name'
p125036
S'Advanced'
p125037
sa(dp125038
S'description'
p125039
S'Set the enabled status of the MooseObject.\n'
p125040
sS'cpp_type'
p125041
S'bool'
p125042
sS'default'
p125043
S'1'
p125044
sS'name'
p125045
S'enable'
p125046
sS'required'
p125047
I00
sS'group_name'
p125048
S'Advanced'
p125049
sa(dp125050
S'name'
p125051
S'execute_on'
p125052
sS'cpp_type'
p125053
S'MultiMooseEnum'
p125054
sS'default'
p125055
S'TIMESTEP_END'
p125056
sS'description'
p125057
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125058
sS'required'
p125059
I00
sS'options'
p125060
S'none initial linear nonlinear timestep_end timestep_begin custom'
p125061
sS'group_name'
p125062
Nsa(dp125063
S'description'
p125064
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125065
sS'cpp_type'
p125066
S'std::vector<OutputName, std::allocator<OutputName> >'
p125067
sS'default'
p125068
g3
sS'name'
p125069
S'outputs'
p125070
sS'required'
p125071
I00
sS'group_name'
p125072
S'Advanced'
p125073
sa(dp125074
S'description'
p125075
g3
sS'cpp_type'
p125076
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125077
sS'default'
p125078
S'TotalVariableValue'
p125079
sS'name'
p125080
S'type'
p125081
sS'required'
p125082
I00
sS'group_name'
p125083
Nsa(dp125084
S'description'
p125085
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125086
sS'cpp_type'
p125087
S'bool'
p125088
sS'default'
p125089
S'0'
p125090
sS'name'
p125091
S'use_displaced_mesh'
p125092
sS'required'
p125093
I00
sS'group_name'
p125094
S'Advanced'
p125095
sa(dp125096
S'description'
p125097
S'The name of the postprocessor\n'
p125098
sS'cpp_type'
p125099
S'PostprocessorName'
p125100
sS'default'
p125101
g3
sS'name'
p125102
S'value'
p125103
sS'required'
p125104
I00
sS'group_name'
p125105
NsasS'name'
p125106
S'/UserObjects/TotalVariableValue'
p125107
sa(dp125108
S'description'
p125109
g3
sS'subblocks'
p125110
NsS'parameters'
p125111
(lp125112
(dp125113
S'description'
p125114
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125115
sS'cpp_type'
p125116
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125117
sS'default'
p125118
g3
sS'name'
p125119
S'block'
p125120
sS'required'
p125121
I00
sS'group_name'
p125122
Nsa(dp125123
S'description'
p125124
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125125
sS'cpp_type'
p125126
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125127
sS'default'
p125128
g3
sS'name'
p125129
S'control_tags'
p125130
sS'required'
p125131
I00
sS'group_name'
p125132
S'Advanced'
p125133
sa(dp125134
S'description'
p125135
S'Set the enabled status of the MooseObject.\n'
p125136
sS'cpp_type'
p125137
S'bool'
p125138
sS'default'
p125139
S'1'
p125140
sS'name'
p125141
S'enable'
p125142
sS'required'
p125143
I00
sS'group_name'
p125144
S'Advanced'
p125145
sa(dp125146
S'name'
p125147
S'execute_on'
p125148
sS'cpp_type'
p125149
S'MultiMooseEnum'
p125150
sS'default'
p125151
S'TIMESTEP_END'
p125152
sS'description'
p125153
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125154
sS'required'
p125155
I00
sS'options'
p125156
S'none initial linear nonlinear timestep_end timestep_begin custom'
p125157
sS'group_name'
p125158
Nsa(dp125159
S'description'
p125160
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125161
sS'cpp_type'
p125162
S'std::vector<OutputName, std::allocator<OutputName> >'
p125163
sS'default'
p125164
g3
sS'name'
p125165
S'outputs'
p125166
sS'required'
p125167
I00
sS'group_name'
p125168
S'Advanced'
p125169
sa(dp125170
S'description'
p125171
S'The name of the second variable in the inner product (variable, second_variable)\n'
p125172
sS'cpp_type'
p125173
S'std::vector<VariableName>'
p125174
sS'default'
p125175
g3
sS'name'
p125176
S'second_variable'
p125177
sS'required'
p125178
I01
sS'group_name'
p125179
Nsa(dp125180
S'description'
p125181
S'The seed for the master random number generator\n'
p125182
sS'cpp_type'
p125183
S'unsigned int'
p125184
sS'default'
p125185
S'0'
p125186
sS'name'
p125187
S'seed'
p125188
sS'required'
p125189
I00
sS'group_name'
p125190
S'Advanced'
p125191
sa(dp125192
S'description'
p125193
g3
sS'cpp_type'
p125194
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125195
sS'default'
p125196
S'VariableInnerProduct'
p125197
sS'name'
p125198
S'type'
p125199
sS'required'
p125200
I00
sS'group_name'
p125201
Nsa(dp125202
S'description'
p125203
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125204
sS'cpp_type'
p125205
S'bool'
p125206
sS'default'
p125207
S'0'
p125208
sS'name'
p125209
S'use_displaced_mesh'
p125210
sS'required'
p125211
I00
sS'group_name'
p125212
S'Advanced'
p125213
sa(dp125214
S'description'
p125215
S'The name of the variable that this object operates on\n'
p125216
sS'cpp_type'
p125217
S'std::vector<VariableName>'
p125218
sS'default'
p125219
g3
sS'name'
p125220
S'variable'
p125221
sS'required'
p125222
I01
sS'group_name'
p125223
NsasS'name'
p125224
S'/UserObjects/VariableInnerProduct'
p125225
sa(dp125226
S'description'
p125227
g3
sS'subblocks'
p125228
NsS'parameters'
p125229
(lp125230
(dp125231
S'description'
p125232
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125233
sS'cpp_type'
p125234
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125235
sS'default'
p125236
g3
sS'name'
p125237
S'control_tags'
p125238
sS'required'
p125239
I00
sS'group_name'
p125240
S'Advanced'
p125241
sa(dp125242
S'description'
p125243
S'Set the enabled status of the MooseObject.\n'
p125244
sS'cpp_type'
p125245
S'bool'
p125246
sS'default'
p125247
S'1'
p125248
sS'name'
p125249
S'enable'
p125250
sS'required'
p125251
I00
sS'group_name'
p125252
S'Advanced'
p125253
sa(dp125254
S'name'
p125255
S'execute_on'
p125256
sS'cpp_type'
p125257
S'MultiMooseEnum'
p125258
sS'default'
p125259
S'TIMESTEP_END'
p125260
sS'description'
p125261
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125262
sS'required'
p125263
I00
sS'options'
p125264
S'none initial linear nonlinear timestep_end timestep_begin custom'
p125265
sS'group_name'
p125266
Nsa(dp125267
S'description'
p125268
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125269
sS'cpp_type'
p125270
S'std::vector<OutputName, std::allocator<OutputName> >'
p125271
sS'default'
p125272
g3
sS'name'
p125273
S'outputs'
p125274
sS'required'
p125275
I00
sS'group_name'
p125276
S'Advanced'
p125277
sa(dp125278
S'description'
p125279
g3
sS'cpp_type'
p125280
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125281
sS'default'
p125282
S'VariableResidual'
p125283
sS'name'
p125284
S'type'
p125285
sS'required'
p125286
I00
sS'group_name'
p125287
Nsa(dp125288
S'description'
p125289
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125290
sS'cpp_type'
p125291
S'bool'
p125292
sS'default'
p125293
S'0'
p125294
sS'name'
p125295
S'use_displaced_mesh'
p125296
sS'required'
p125297
I00
sS'group_name'
p125298
S'Advanced'
p125299
sa(dp125300
S'description'
p125301
S'The name of the variable to compute the residual for\n'
p125302
sS'cpp_type'
p125303
S'VariableName'
p125304
sS'default'
p125305
g3
sS'name'
p125306
S'variable'
p125307
sS'required'
p125308
I01
sS'group_name'
p125309
NsasS'name'
p125310
S'/UserObjects/VariableResidual'
p125311
sa(dp125312
S'description'
p125313
g3
sS'subblocks'
p125314
NsS'parameters'
p125315
(lp125316
(dp125317
S'description'
p125318
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125319
sS'cpp_type'
p125320
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125321
sS'default'
p125322
g3
sS'name'
p125323
S'block'
p125324
sS'required'
p125325
I00
sS'group_name'
p125326
Nsa(dp125327
S'description'
p125328
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125329
sS'cpp_type'
p125330
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125331
sS'default'
p125332
g3
sS'name'
p125333
S'control_tags'
p125334
sS'required'
p125335
I00
sS'group_name'
p125336
S'Advanced'
p125337
sa(dp125338
S'description'
p125339
S'Set the enabled status of the MooseObject.\n'
p125340
sS'cpp_type'
p125341
S'bool'
p125342
sS'default'
p125343
S'1'
p125344
sS'name'
p125345
S'enable'
p125346
sS'required'
p125347
I00
sS'group_name'
p125348
S'Advanced'
p125349
sa(dp125350
S'name'
p125351
S'execute_on'
p125352
sS'cpp_type'
p125353
S'MultiMooseEnum'
p125354
sS'default'
p125355
S'TIMESTEP_END'
p125356
sS'description'
p125357
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125358
sS'required'
p125359
I00
sS'options'
p125360
S'none initial linear nonlinear timestep_end timestep_begin custom'
p125361
sS'group_name'
p125362
Nsa(dp125363
S'description'
p125364
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125365
sS'cpp_type'
p125366
S'std::vector<OutputName, std::allocator<OutputName> >'
p125367
sS'default'
p125368
g3
sS'name'
p125369
S'outputs'
p125370
sS'required'
p125371
I00
sS'group_name'
p125372
S'Advanced'
p125373
sa(dp125374
S'description'
p125375
S'The seed for the master random number generator\n'
p125376
sS'cpp_type'
p125377
S'unsigned int'
p125378
sS'default'
p125379
S'0'
p125380
sS'name'
p125381
S'seed'
p125382
sS'required'
p125383
I00
sS'group_name'
p125384
S'Advanced'
p125385
sa(dp125386
S'description'
p125387
g3
sS'cpp_type'
p125388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125389
sS'default'
p125390
S'VolumePostprocessor'
p125391
sS'name'
p125392
S'type'
p125393
sS'required'
p125394
I00
sS'group_name'
p125395
Nsa(dp125396
S'description'
p125397
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125398
sS'cpp_type'
p125399
S'bool'
p125400
sS'default'
p125401
S'0'
p125402
sS'name'
p125403
S'use_displaced_mesh'
p125404
sS'required'
p125405
I00
sS'group_name'
p125406
S'Advanced'
p125407
sasS'name'
p125408
S'/UserObjects/VolumePostprocessor'
p125409
sasS'parameters'
p125410
NsS'name'
p125411
S'/UserObjects'
p125412
sa(dp125413
S'description'
p125414
g3
sS'subblocks'
p125415
(lp125416
(dp125417
S'description'
p125418
g3
sS'subblocks'
p125419
(lp125420
(dp125421
S'description'
p125422
g3
sS'subblocks'
p125423
(lp125424
(dp125425
S'description'
p125426
g3
sS'subblocks'
p125427
(lp125428
(dp125429
S'description'
p125430
S'Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n'
p125431
sS'subblocks'
p125432
NsS'parameters'
p125433
(lp125434
(dp125435
S'description'
p125436
S'Semiaxis a for each superellipsoid\n'
p125437
sS'cpp_type'
p125438
S'std::vector<double, std::allocator<double> >'
p125439
sS'default'
p125440
g3
sS'name'
p125441
S'as'
p125442
sS'required'
p125443
I01
sS'group_name'
p125444
Nsa(dp125445
S'description'
p125446
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125447
sS'cpp_type'
p125448
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125449
sS'default'
p125450
g3
sS'name'
p125451
S'block'
p125452
sS'required'
p125453
I00
sS'group_name'
p125454
Nsa(dp125455
S'description'
p125456
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125457
sS'cpp_type'
p125458
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125459
sS'default'
p125460
g3
sS'name'
p125461
S'boundary'
p125462
sS'required'
p125463
I00
sS'group_name'
p125464
Nsa(dp125465
S'description'
p125466
S'Semiaxis b for each superellipsoid\n'
p125467
sS'cpp_type'
p125468
S'std::vector<double, std::allocator<double> >'
p125469
sS'default'
p125470
g3
sS'name'
p125471
S'bs'
p125472
sS'required'
p125473
I01
sS'group_name'
p125474
Nsa(dp125475
S'description'
p125476
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125477
sS'cpp_type'
p125478
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125479
sS'default'
p125480
g3
sS'name'
p125481
S'control_tags'
p125482
sS'required'
p125483
I00
sS'group_name'
p125484
S'Advanced'
p125485
sa(dp125486
S'description'
p125487
S'Semiaxis c for each superellipsoid\n'
p125488
sS'cpp_type'
p125489
S'std::vector<double, std::allocator<double> >'
p125490
sS'default'
p125491
g3
sS'name'
p125492
S'cs'
p125493
sS'required'
p125494
I01
sS'group_name'
p125495
Nsa(dp125496
S'description'
p125497
S'Set the enabled status of the MooseObject.\n'
p125498
sS'cpp_type'
p125499
S'bool'
p125500
sS'default'
p125501
S'1'
p125502
sS'name'
p125503
S'enable'
p125504
sS'required'
p125505
I00
sS'group_name'
p125506
S'Advanced'
p125507
sa(dp125508
S'description'
p125509
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p125510
sS'cpp_type'
p125511
S'bool'
p125512
sS'default'
p125513
S'0'
p125514
sS'name'
p125515
S'ignore_uo_dependency'
p125516
sS'required'
p125517
I00
sS'group_name'
p125518
S'Advanced'
p125519
sa(dp125520
S'description'
p125521
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p125522
sS'cpp_type'
p125523
S'double'
p125524
sS'default'
p125525
S'0'
p125526
sS'name'
p125527
S'int_width'
p125528
sS'required'
p125529
I00
sS'group_name'
p125530
Nsa(dp125531
S'description'
p125532
S'The variable value inside the superellipsoid\n'
p125533
sS'cpp_type'
p125534
S'double'
p125535
sS'default'
p125536
g3
sS'name'
p125537
S'invalue'
p125538
sS'required'
p125539
I01
sS'group_name'
p125540
Nsa(dp125541
S'description'
p125542
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p125543
sS'cpp_type'
p125544
S'double'
p125545
sS'default'
p125546
g3
sS'name'
p125547
S'large_spac'
p125548
sS'required'
p125549
I01
sS'group_name'
p125550
Nsa(dp125551
S'description'
p125552
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p125553
sS'cpp_type'
p125554
S'double'
p125555
sS'default'
p125556
g3
sS'name'
p125557
S'nestedvalue'
p125558
sS'required'
p125559
I00
sS'group_name'
p125560
Nsa(dp125561
S'description'
p125562
S'The number of random (small) particles to place\n'
p125563
sS'cpp_type'
p125564
S'unsigned int'
p125565
sS'default'
p125566
g3
sS'name'
p125567
S'npart'
p125568
sS'required'
p125569
I01
sS'group_name'
p125570
Nsa(dp125571
S'description'
p125572
S'Exponent n for each superellipsoid\n'
p125573
sS'cpp_type'
p125574
S'std::vector<double, std::allocator<double> >'
p125575
sS'default'
p125576
g3
sS'name'
p125577
S'ns'
p125578
sS'required'
p125579
I01
sS'group_name'
p125580
Nsa(dp125581
S'description'
p125582
S'The number of tries to place the random particles\n'
p125583
sS'cpp_type'
p125584
S'unsigned int'
p125585
sS'default'
p125586
S'1000'
p125587
sS'name'
p125588
S'numtries'
p125589
sS'required'
p125590
I00
sS'group_name'
p125591
Nsa(dp125592
S'description'
p125593
S'The variable value outside the superellipsoid\n'
p125594
sS'cpp_type'
p125595
S'double'
p125596
sS'default'
p125597
g3
sS'name'
p125598
S'outvalue'
p125599
sS'required'
p125600
I01
sS'group_name'
p125601
Nsa(dp125602
S'description'
p125603
S'Seed value for the random number generator\n'
p125604
sS'cpp_type'
p125605
S'unsigned int'
p125606
sS'default'
p125607
S'12345'
p125608
sS'name'
p125609
S'rand_seed'
p125610
sS'required'
p125611
I00
sS'group_name'
p125612
Nsa(dp125613
S'description'
p125614
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p125615
sS'cpp_type'
p125616
S'double'
p125617
sS'default'
p125618
S'0'
p125619
sS'name'
p125620
S'size_variation'
p125621
sS'required'
p125622
I00
sS'group_name'
p125623
Nsa(dp125624
S'name'
p125625
S'size_variation_type'
p125626
sS'cpp_type'
p125627
S'MooseEnum'
p125628
sS'default'
p125629
S'none'
p125630
sS'description'
p125631
S'Type of distribution that random semiaxes will follow\n'
p125632
sS'required'
p125633
I00
sS'options'
p125634
S'uniform normal none'
p125635
sS'group_name'
p125636
Nsa(dp125637
S'description'
p125638
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p125639
sS'cpp_type'
p125640
S'double'
p125641
sS'default'
p125642
g3
sS'name'
p125643
S'small_a'
p125644
sS'required'
p125645
I01
sS'group_name'
p125646
Nsa(dp125647
S'description'
p125648
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p125649
sS'cpp_type'
p125650
S'double'
p125651
sS'default'
p125652
g3
sS'name'
p125653
S'small_b'
p125654
sS'required'
p125655
I01
sS'group_name'
p125656
Nsa(dp125657
S'description'
p125658
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p125659
sS'cpp_type'
p125660
S'double'
p125661
sS'default'
p125662
g3
sS'name'
p125663
S'small_c'
p125664
sS'required'
p125665
I01
sS'group_name'
p125666
Nsa(dp125667
S'description'
p125668
S'Exponent n for the randomly placed (small) superellipsoids\n'
p125669
sS'cpp_type'
p125670
S'double'
p125671
sS'default'
p125672
g3
sS'name'
p125673
S'small_n'
p125674
sS'required'
p125675
I01
sS'group_name'
p125676
Nsa(dp125677
S'description'
p125678
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p125679
sS'cpp_type'
p125680
S'double'
p125681
sS'default'
p125682
g3
sS'name'
p125683
S'small_spac'
p125684
sS'required'
p125685
I01
sS'group_name'
p125686
Nsa(dp125687
S'description'
p125688
g3
sS'cpp_type'
p125689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125690
sS'default'
p125691
S'BimodalInverseSuperellipsoidsIC'
p125692
sS'name'
p125693
S'type'
p125694
sS'required'
p125695
I00
sS'group_name'
p125696
Nsa(dp125697
S'description'
p125698
S'The variable this initial condition is supposed to provide values for.\n'
p125699
sS'cpp_type'
p125700
S'VariableName'
p125701
sS'default'
p125702
g3
sS'name'
p125703
S'variable'
p125704
sS'required'
p125705
I01
sS'group_name'
p125706
Nsa(dp125707
S'description'
p125708
S'The x-coordinate for each superellipsoid center\n'
p125709
sS'cpp_type'
p125710
S'std::vector<double, std::allocator<double> >'
p125711
sS'default'
p125712
g3
sS'name'
p125713
S'x_positions'
p125714
sS'required'
p125715
I01
sS'group_name'
p125716
Nsa(dp125717
S'description'
p125718
S'The y-coordinate for each superellipsoid center\n'
p125719
sS'cpp_type'
p125720
S'std::vector<double, std::allocator<double> >'
p125721
sS'default'
p125722
g3
sS'name'
p125723
S'y_positions'
p125724
sS'required'
p125725
I01
sS'group_name'
p125726
Nsa(dp125727
S'description'
p125728
S'The z-coordinate for each superellipsoid center\n'
p125729
sS'cpp_type'
p125730
S'std::vector<double, std::allocator<double> >'
p125731
sS'default'
p125732
g3
sS'name'
p125733
S'z_positions'
p125734
sS'required'
p125735
I01
sS'group_name'
p125736
Nsa(dp125737
S'description'
p125738
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p125739
sS'cpp_type'
p125740
S'bool'
p125741
sS'default'
p125742
S'0'
p125743
sS'name'
p125744
S'zero_gradient'
p125745
sS'required'
p125746
I00
sS'group_name'
p125747
NsasS'name'
p125748
S'/Variables/*/InitialCondition/<type>/BimodalInverseSuperellipsoidsIC'
p125749
sa(dp125750
S'description'
p125751
S'Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n'
p125752
sS'subblocks'
p125753
NsS'parameters'
p125754
(lp125755
(dp125756
S'description'
p125757
S'Semiaxis a for each superellipsoid\n'
p125758
sS'cpp_type'
p125759
S'std::vector<double, std::allocator<double> >'
p125760
sS'default'
p125761
g3
sS'name'
p125762
S'as'
p125763
sS'required'
p125764
I01
sS'group_name'
p125765
Nsa(dp125766
S'description'
p125767
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125768
sS'cpp_type'
p125769
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125770
sS'default'
p125771
g3
sS'name'
p125772
S'block'
p125773
sS'required'
p125774
I00
sS'group_name'
p125775
Nsa(dp125776
S'description'
p125777
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125778
sS'cpp_type'
p125779
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125780
sS'default'
p125781
g3
sS'name'
p125782
S'boundary'
p125783
sS'required'
p125784
I00
sS'group_name'
p125785
Nsa(dp125786
S'description'
p125787
S'Semiaxis b for each superellipsoid\n'
p125788
sS'cpp_type'
p125789
S'std::vector<double, std::allocator<double> >'
p125790
sS'default'
p125791
g3
sS'name'
p125792
S'bs'
p125793
sS'required'
p125794
I01
sS'group_name'
p125795
Nsa(dp125796
S'description'
p125797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125798
sS'cpp_type'
p125799
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125800
sS'default'
p125801
g3
sS'name'
p125802
S'control_tags'
p125803
sS'required'
p125804
I00
sS'group_name'
p125805
S'Advanced'
p125806
sa(dp125807
S'description'
p125808
S'Semiaxis c for each superellipsoid\n'
p125809
sS'cpp_type'
p125810
S'std::vector<double, std::allocator<double> >'
p125811
sS'default'
p125812
g3
sS'name'
p125813
S'cs'
p125814
sS'required'
p125815
I01
sS'group_name'
p125816
Nsa(dp125817
S'description'
p125818
S'Set the enabled status of the MooseObject.\n'
p125819
sS'cpp_type'
p125820
S'bool'
p125821
sS'default'
p125822
S'1'
p125823
sS'name'
p125824
S'enable'
p125825
sS'required'
p125826
I00
sS'group_name'
p125827
S'Advanced'
p125828
sa(dp125829
S'description'
p125830
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p125831
sS'cpp_type'
p125832
S'bool'
p125833
sS'default'
p125834
S'0'
p125835
sS'name'
p125836
S'ignore_uo_dependency'
p125837
sS'required'
p125838
I00
sS'group_name'
p125839
S'Advanced'
p125840
sa(dp125841
S'description'
p125842
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p125843
sS'cpp_type'
p125844
S'double'
p125845
sS'default'
p125846
S'0'
p125847
sS'name'
p125848
S'int_width'
p125849
sS'required'
p125850
I00
sS'group_name'
p125851
Nsa(dp125852
S'description'
p125853
S'The variable value inside the superellipsoid\n'
p125854
sS'cpp_type'
p125855
S'double'
p125856
sS'default'
p125857
g3
sS'name'
p125858
S'invalue'
p125859
sS'required'
p125860
I01
sS'group_name'
p125861
Nsa(dp125862
S'description'
p125863
S'minimum spacing between large and small particles, measured from closest edge to closest edge\n'
p125864
sS'cpp_type'
p125865
S'double'
p125866
sS'default'
p125867
g3
sS'name'
p125868
S'large_spac'
p125869
sS'required'
p125870
I01
sS'group_name'
p125871
Nsa(dp125872
S'description'
p125873
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p125874
sS'cpp_type'
p125875
S'double'
p125876
sS'default'
p125877
g3
sS'name'
p125878
S'nestedvalue'
p125879
sS'required'
p125880
I00
sS'group_name'
p125881
Nsa(dp125882
S'description'
p125883
S'The number of random (small) particles to place\n'
p125884
sS'cpp_type'
p125885
S'unsigned int'
p125886
sS'default'
p125887
g3
sS'name'
p125888
S'npart'
p125889
sS'required'
p125890
I01
sS'group_name'
p125891
Nsa(dp125892
S'description'
p125893
S'Exponent n for each superellipsoid\n'
p125894
sS'cpp_type'
p125895
S'std::vector<double, std::allocator<double> >'
p125896
sS'default'
p125897
g3
sS'name'
p125898
S'ns'
p125899
sS'required'
p125900
I01
sS'group_name'
p125901
Nsa(dp125902
S'description'
p125903
S'The number of tries to place the random particles\n'
p125904
sS'cpp_type'
p125905
S'unsigned int'
p125906
sS'default'
p125907
S'1000'
p125908
sS'name'
p125909
S'numtries'
p125910
sS'required'
p125911
I00
sS'group_name'
p125912
Nsa(dp125913
S'description'
p125914
S'The variable value outside the superellipsoid\n'
p125915
sS'cpp_type'
p125916
S'double'
p125917
sS'default'
p125918
g3
sS'name'
p125919
S'outvalue'
p125920
sS'required'
p125921
I01
sS'group_name'
p125922
Nsa(dp125923
S'description'
p125924
S'Seed value for the random number generator\n'
p125925
sS'cpp_type'
p125926
S'unsigned int'
p125927
sS'default'
p125928
S'12345'
p125929
sS'name'
p125930
S'rand_seed'
p125931
sS'required'
p125932
I00
sS'group_name'
p125933
Nsa(dp125934
S'description'
p125935
S'Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n'
p125936
sS'cpp_type'
p125937
S'double'
p125938
sS'default'
p125939
S'0'
p125940
sS'name'
p125941
S'size_variation'
p125942
sS'required'
p125943
I00
sS'group_name'
p125944
Nsa(dp125945
S'name'
p125946
S'size_variation_type'
p125947
sS'cpp_type'
p125948
S'MooseEnum'
p125949
sS'default'
p125950
S'none'
p125951
sS'description'
p125952
S'Type of distribution that random semiaxes will follow\n'
p125953
sS'required'
p125954
I00
sS'options'
p125955
S'uniform normal none'
p125956
sS'group_name'
p125957
Nsa(dp125958
S'description'
p125959
S'Mean semiaxis a value for the randomly placed (small) superellipsoids\n'
p125960
sS'cpp_type'
p125961
S'double'
p125962
sS'default'
p125963
g3
sS'name'
p125964
S'small_a'
p125965
sS'required'
p125966
I01
sS'group_name'
p125967
Nsa(dp125968
S'description'
p125969
S'Mean semiaxis b value for the randomly placed (small) superellipsoids\n'
p125970
sS'cpp_type'
p125971
S'double'
p125972
sS'default'
p125973
g3
sS'name'
p125974
S'small_b'
p125975
sS'required'
p125976
I01
sS'group_name'
p125977
Nsa(dp125978
S'description'
p125979
S'Mean semiaxis c value for the randomly placed (small) superellipsoids\n'
p125980
sS'cpp_type'
p125981
S'double'
p125982
sS'default'
p125983
g3
sS'name'
p125984
S'small_c'
p125985
sS'required'
p125986
I01
sS'group_name'
p125987
Nsa(dp125988
S'description'
p125989
S'Exponent n for the randomly placed (small) superellipsoids\n'
p125990
sS'cpp_type'
p125991
S'double'
p125992
sS'default'
p125993
g3
sS'name'
p125994
S'small_n'
p125995
sS'required'
p125996
I01
sS'group_name'
p125997
Nsa(dp125998
S'description'
p125999
S'minimum spacing between small particles, measured from closest edge to closest edge\n'
p126000
sS'cpp_type'
p126001
S'double'
p126002
sS'default'
p126003
g3
sS'name'
p126004
S'small_spac'
p126005
sS'required'
p126006
I01
sS'group_name'
p126007
Nsa(dp126008
S'description'
p126009
g3
sS'cpp_type'
p126010
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126011
sS'default'
p126012
S'BimodalSuperellipsoidsIC'
p126013
sS'name'
p126014
S'type'
p126015
sS'required'
p126016
I00
sS'group_name'
p126017
Nsa(dp126018
S'description'
p126019
S'The variable this initial condition is supposed to provide values for.\n'
p126020
sS'cpp_type'
p126021
S'VariableName'
p126022
sS'default'
p126023
g3
sS'name'
p126024
S'variable'
p126025
sS'required'
p126026
I01
sS'group_name'
p126027
Nsa(dp126028
S'description'
p126029
S'The x-coordinate for each superellipsoid center\n'
p126030
sS'cpp_type'
p126031
S'std::vector<double, std::allocator<double> >'
p126032
sS'default'
p126033
g3
sS'name'
p126034
S'x_positions'
p126035
sS'required'
p126036
I01
sS'group_name'
p126037
Nsa(dp126038
S'description'
p126039
S'The y-coordinate for each superellipsoid center\n'
p126040
sS'cpp_type'
p126041
S'std::vector<double, std::allocator<double> >'
p126042
sS'default'
p126043
g3
sS'name'
p126044
S'y_positions'
p126045
sS'required'
p126046
I01
sS'group_name'
p126047
Nsa(dp126048
S'description'
p126049
S'The z-coordinate for each superellipsoid center\n'
p126050
sS'cpp_type'
p126051
S'std::vector<double, std::allocator<double> >'
p126052
sS'default'
p126053
g3
sS'name'
p126054
S'z_positions'
p126055
sS'required'
p126056
I01
sS'group_name'
p126057
Nsa(dp126058
S'description'
p126059
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p126060
sS'cpp_type'
p126061
S'bool'
p126062
sS'default'
p126063
S'0'
p126064
sS'name'
p126065
S'zero_gradient'
p126066
sS'required'
p126067
I00
sS'group_name'
p126068
NsasS'name'
p126069
S'/Variables/*/InitialCondition/<type>/BimodalSuperellipsoidsIC'
p126070
sa(dp126071
S'description'
p126072
g3
sS'subblocks'
p126073
NsS'parameters'
p126074
(lp126075
(dp126076
S'description'
p126077
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126078
sS'cpp_type'
p126079
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126080
sS'default'
p126081
g3
sS'name'
p126082
S'block'
p126083
sS'required'
p126084
I00
sS'group_name'
p126085
Nsa(dp126086
S'description'
p126087
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126088
sS'cpp_type'
p126089
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126090
sS'default'
p126091
g3
sS'name'
p126092
S'boundary'
p126093
sS'required'
p126094
I00
sS'group_name'
p126095
Nsa(dp126096
S'description'
p126097
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126098
sS'cpp_type'
p126099
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126100
sS'default'
p126101
g3
sS'name'
p126102
S'control_tags'
p126103
sS'required'
p126104
I00
sS'group_name'
p126105
S'Advanced'
p126106
sa(dp126107
S'description'
p126108
S'Set the enabled status of the MooseObject.\n'
p126109
sS'cpp_type'
p126110
S'bool'
p126111
sS'default'
p126112
S'1'
p126113
sS'name'
p126114
S'enable'
p126115
sS'required'
p126116
I00
sS'group_name'
p126117
S'Advanced'
p126118
sa(dp126119
S'description'
p126120
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126121
sS'cpp_type'
p126122
S'bool'
p126123
sS'default'
p126124
S'0'
p126125
sS'name'
p126126
S'ignore_uo_dependency'
p126127
sS'required'
p126128
I00
sS'group_name'
p126129
S'Advanced'
p126130
sa(dp126131
S'description'
p126132
S'The value of the variable inside the box\n'
p126133
sS'cpp_type'
p126134
S'double'
p126135
sS'default'
p126136
S'0'
p126137
sS'name'
p126138
S'inside'
p126139
sS'required'
p126140
I00
sS'group_name'
p126141
Nsa(dp126142
S'description'
p126143
S'The value of the variable outside the box\n'
p126144
sS'cpp_type'
p126145
S'double'
p126146
sS'default'
p126147
S'0'
p126148
sS'name'
p126149
S'outside'
p126150
sS'required'
p126151
I00
sS'group_name'
p126152
Nsa(dp126153
S'description'
p126154
g3
sS'cpp_type'
p126155
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126156
sS'default'
p126157
S'BoundingBoxIC'
p126158
sS'name'
p126159
S'type'
p126160
sS'required'
p126161
I00
sS'group_name'
p126162
Nsa(dp126163
S'description'
p126164
S'The variable this initial condition is supposed to provide values for.\n'
p126165
sS'cpp_type'
p126166
S'VariableName'
p126167
sS'default'
p126168
g3
sS'name'
p126169
S'variable'
p126170
sS'required'
p126171
I01
sS'group_name'
p126172
Nsa(dp126173
S'description'
p126174
S'The x coordinate of the lower left-hand corner of the box\n'
p126175
sS'cpp_type'
p126176
S'double'
p126177
sS'default'
p126178
g3
sS'name'
p126179
S'x1'
p126180
sS'required'
p126181
I01
sS'group_name'
p126182
Nsa(dp126183
S'description'
p126184
S'The x coordinate of the upper right-hand corner of the box\n'
p126185
sS'cpp_type'
p126186
S'double'
p126187
sS'default'
p126188
g3
sS'name'
p126189
S'x2'
p126190
sS'required'
p126191
I01
sS'group_name'
p126192
Nsa(dp126193
S'description'
p126194
S'The y coordinate of the lower left-hand corner of the box\n'
p126195
sS'cpp_type'
p126196
S'double'
p126197
sS'default'
p126198
g3
sS'name'
p126199
S'y1'
p126200
sS'required'
p126201
I01
sS'group_name'
p126202
Nsa(dp126203
S'description'
p126204
S'The y coordinate of the upper right-hand corner of the box\n'
p126205
sS'cpp_type'
p126206
S'double'
p126207
sS'default'
p126208
g3
sS'name'
p126209
S'y2'
p126210
sS'required'
p126211
I01
sS'group_name'
p126212
Nsa(dp126213
S'description'
p126214
S'The z coordinate of the lower left-hand corner of the box\n'
p126215
sS'cpp_type'
p126216
S'double'
p126217
sS'default'
p126218
S'0'
p126219
sS'name'
p126220
S'z1'
p126221
sS'required'
p126222
I00
sS'group_name'
p126223
Nsa(dp126224
S'description'
p126225
S'The z coordinate of the upper right-hand corner of the box\n'
p126226
sS'cpp_type'
p126227
S'double'
p126228
sS'default'
p126229
S'0'
p126230
sS'name'
p126231
S'z2'
p126232
sS'required'
p126233
I00
sS'group_name'
p126234
NsasS'name'
p126235
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p126236
sa(dp126237
S'description'
p126238
S'Close packed arrangement of smooth circles\n'
p126239
sS'subblocks'
p126240
NsS'parameters'
p126241
(lp126242
(dp126243
S'description'
p126244
S'in 3D, whether the objects are spheres or columns\n'
p126245
sS'cpp_type'
p126246
S'bool'
p126247
sS'default'
p126248
S'1'
p126249
sS'name'
p126250
S'3D_spheres'
p126251
sS'required'
p126252
I00
sS'group_name'
p126253
Nsa(dp126254
S'description'
p126255
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126256
sS'cpp_type'
p126257
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126258
sS'default'
p126259
g3
sS'name'
p126260
S'block'
p126261
sS'required'
p126262
I00
sS'group_name'
p126263
Nsa(dp126264
S'description'
p126265
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126266
sS'cpp_type'
p126267
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126268
sS'default'
p126269
g3
sS'name'
p126270
S'boundary'
p126271
sS'required'
p126272
I00
sS'group_name'
p126273
Nsa(dp126274
S'description'
p126275
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126276
sS'cpp_type'
p126277
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126278
sS'default'
p126279
g3
sS'name'
p126280
S'control_tags'
p126281
sS'required'
p126282
I00
sS'group_name'
p126283
S'Advanced'
p126284
sa(dp126285
S'description'
p126286
S'Set the enabled status of the MooseObject.\n'
p126287
sS'cpp_type'
p126288
S'bool'
p126289
sS'default'
p126290
S'1'
p126291
sS'name'
p126292
S'enable'
p126293
sS'required'
p126294
I00
sS'group_name'
p126295
S'Advanced'
p126296
sa(dp126297
S'description'
p126298
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126299
sS'cpp_type'
p126300
S'bool'
p126301
sS'default'
p126302
S'0'
p126303
sS'name'
p126304
S'ignore_uo_dependency'
p126305
sS'required'
p126306
I00
sS'group_name'
p126307
S'Advanced'
p126308
sa(dp126309
S'description'
p126310
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p126311
sS'cpp_type'
p126312
S'double'
p126313
sS'default'
p126314
S'0'
p126315
sS'name'
p126316
S'int_width'
p126317
sS'required'
p126318
I00
sS'group_name'
p126319
Nsa(dp126320
S'description'
p126321
S'The variable value inside the circle\n'
p126322
sS'cpp_type'
p126323
S'double'
p126324
sS'default'
p126325
g3
sS'name'
p126326
S'invalue'
p126327
sS'required'
p126328
I01
sS'group_name'
p126329
Nsa(dp126330
S'description'
p126331
S'The variable value outside the circle\n'
p126332
sS'cpp_type'
p126333
S'double'
p126334
sS'default'
p126335
g3
sS'name'
p126336
S'outvalue'
p126337
sS'required'
p126338
I01
sS'group_name'
p126339
Nsa(dp126340
S'description'
p126341
S'The radius of a circle\n'
p126342
sS'cpp_type'
p126343
S'double'
p126344
sS'default'
p126345
g3
sS'name'
p126346
S'radius'
p126347
sS'required'
p126348
I01
sS'group_name'
p126349
Nsa(dp126350
S'description'
p126351
S'Seed value for the random number generator\n'
p126352
sS'cpp_type'
p126353
S'unsigned int'
p126354
sS'default'
p126355
S'12345'
p126356
sS'name'
p126357
S'rand_seed'
p126358
sS'required'
p126359
I00
sS'group_name'
p126360
Nsa(dp126361
S'description'
p126362
g3
sS'cpp_type'
p126363
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126364
sS'default'
p126365
S'ClosePackIC'
p126366
sS'name'
p126367
S'type'
p126368
sS'required'
p126369
I00
sS'group_name'
p126370
Nsa(dp126371
S'description'
p126372
S'The variable this initial condition is supposed to provide values for.\n'
p126373
sS'cpp_type'
p126374
S'VariableName'
p126375
sS'default'
p126376
g3
sS'name'
p126377
S'variable'
p126378
sS'required'
p126379
I01
sS'group_name'
p126380
Nsa(dp126381
S'description'
p126382
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p126383
sS'cpp_type'
p126384
S'bool'
p126385
sS'default'
p126386
S'0'
p126387
sS'name'
p126388
S'zero_gradient'
p126389
sS'required'
p126390
I00
sS'group_name'
p126391
NsasS'name'
p126392
S'/Variables/*/InitialCondition/<type>/ClosePackIC'
p126393
sa(dp126394
S'description'
p126395
g3
sS'subblocks'
p126396
NsS'parameters'
p126397
(lp126398
(dp126399
S'description'
p126400
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126401
sS'cpp_type'
p126402
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126403
sS'default'
p126404
g3
sS'name'
p126405
S'block'
p126406
sS'required'
p126407
I00
sS'group_name'
p126408
Nsa(dp126409
S'description'
p126410
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126411
sS'cpp_type'
p126412
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126413
sS'default'
p126414
g3
sS'name'
p126415
S'boundary'
p126416
sS'required'
p126417
I00
sS'group_name'
p126418
Nsa(dp126419
S'description'
p126420
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126421
sS'cpp_type'
p126422
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126423
sS'default'
p126424
g3
sS'name'
p126425
S'control_tags'
p126426
sS'required'
p126427
I00
sS'group_name'
p126428
S'Advanced'
p126429
sa(dp126430
S'description'
p126431
S'Set the enabled status of the MooseObject.\n'
p126432
sS'cpp_type'
p126433
S'bool'
p126434
sS'default'
p126435
S'1'
p126436
sS'name'
p126437
S'enable'
p126438
sS'required'
p126439
I00
sS'group_name'
p126440
S'Advanced'
p126441
sa(dp126442
S'description'
p126443
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126444
sS'cpp_type'
p126445
S'bool'
p126446
sS'default'
p126447
S'0'
p126448
sS'name'
p126449
S'ignore_uo_dependency'
p126450
sS'required'
p126451
I00
sS'group_name'
p126452
S'Advanced'
p126453
sa(dp126454
S'description'
p126455
g3
sS'cpp_type'
p126456
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126457
sS'default'
p126458
S'ConstantIC'
p126459
sS'name'
p126460
S'type'
p126461
sS'required'
p126462
I00
sS'group_name'
p126463
Nsa(dp126464
S'description'
p126465
S'The value to be set in IC\n'
p126466
sS'cpp_type'
p126467
S'double'
p126468
sS'default'
p126469
g3
sS'name'
p126470
S'value'
p126471
sS'required'
p126472
I01
sS'group_name'
p126473
Nsa(dp126474
S'description'
p126475
S'The variable this initial condition is supposed to provide values for.\n'
p126476
sS'cpp_type'
p126477
S'VariableName'
p126478
sS'default'
p126479
g3
sS'name'
p126480
S'variable'
p126481
sS'required'
p126482
I01
sS'group_name'
p126483
NsasS'name'
p126484
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p126485
sa(dp126486
S'description'
p126487
S'Cross-shaped initial condition\n'
p126488
sS'subblocks'
p126489
NsS'parameters'
p126490
(lp126491
(dp126492
S'description'
p126493
S'The amplitude\n'
p126494
sS'cpp_type'
p126495
S'double'
p126496
sS'default'
p126497
S'1'
p126498
sS'name'
p126499
S'amplitude'
p126500
sS'required'
p126501
I00
sS'group_name'
p126502
Nsa(dp126503
S'description'
p126504
S'The average value\n'
p126505
sS'cpp_type'
p126506
S'double'
p126507
sS'default'
p126508
S'0'
p126509
sS'name'
p126510
S'average'
p126511
sS'required'
p126512
I00
sS'group_name'
p126513
Nsa(dp126514
S'description'
p126515
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126516
sS'cpp_type'
p126517
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126518
sS'default'
p126519
g3
sS'name'
p126520
S'block'
p126521
sS'required'
p126522
I00
sS'group_name'
p126523
Nsa(dp126524
S'description'
p126525
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126526
sS'cpp_type'
p126527
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126528
sS'default'
p126529
g3
sS'name'
p126530
S'boundary'
p126531
sS'required'
p126532
I00
sS'group_name'
p126533
Nsa(dp126534
S'description'
p126535
S'A small area between the max value and the interface\n'
p126536
sS'cpp_type'
p126537
S'double'
p126538
sS'default'
p126539
S'0.03125'
p126540
sS'name'
p126541
S'buffer'
p126542
sS'required'
p126543
I00
sS'group_name'
p126544
Nsa(dp126545
S'description'
p126546
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126547
sS'cpp_type'
p126548
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126549
sS'default'
p126550
g3
sS'name'
p126551
S'control_tags'
p126552
sS'required'
p126553
I00
sS'group_name'
p126554
S'Advanced'
p126555
sa(dp126556
S'description'
p126557
S'Set the enabled status of the MooseObject.\n'
p126558
sS'cpp_type'
p126559
S'bool'
p126560
sS'default'
p126561
S'1'
p126562
sS'name'
p126563
S'enable'
p126564
sS'required'
p126565
I00
sS'group_name'
p126566
S'Advanced'
p126567
sa(dp126568
S'description'
p126569
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126570
sS'cpp_type'
p126571
S'bool'
p126572
sS'default'
p126573
S'0'
p126574
sS'name'
p126575
S'ignore_uo_dependency'
p126576
sS'required'
p126577
I00
sS'group_name'
p126578
S'Advanced'
p126579
sa(dp126580
S'description'
p126581
S'The interface width\n'
p126582
sS'cpp_type'
p126583
S'double'
p126584
sS'default'
p126585
S'0.03125'
p126586
sS'name'
p126587
S'interface'
p126588
sS'required'
p126589
I00
sS'group_name'
p126590
Nsa(dp126591
S'description'
p126592
S'The length\n'
p126593
sS'cpp_type'
p126594
S'double'
p126595
sS'default'
p126596
S'0.75'
p126597
sS'name'
p126598
S'length'
p126599
sS'required'
p126600
I00
sS'group_name'
p126601
Nsa(dp126602
S'description'
p126603
g3
sS'cpp_type'
p126604
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126605
sS'default'
p126606
S'CrossIC'
p126607
sS'name'
p126608
S'type'
p126609
sS'required'
p126610
I00
sS'group_name'
p126611
Nsa(dp126612
S'description'
p126613
S'The variable this initial condition is supposed to provide values for.\n'
p126614
sS'cpp_type'
p126615
S'VariableName'
p126616
sS'default'
p126617
g3
sS'name'
p126618
S'variable'
p126619
sS'required'
p126620
I01
sS'group_name'
p126621
Nsa(dp126622
S'description'
p126623
S'The width\n'
p126624
sS'cpp_type'
p126625
S'double'
p126626
sS'default'
p126627
S'0.125'
p126628
sS'name'
p126629
S'width'
p126630
sS'required'
p126631
I00
sS'group_name'
p126632
Nsa(dp126633
S'description'
p126634
S'The x coordinate of the lower left-hand corner of the box\n'
p126635
sS'cpp_type'
p126636
S'double'
p126637
sS'default'
p126638
S'0'
p126639
sS'name'
p126640
S'x1'
p126641
sS'required'
p126642
I00
sS'group_name'
p126643
Nsa(dp126644
S'description'
p126645
S'The x coordinate of the upper right-hand corner of the box\n'
p126646
sS'cpp_type'
p126647
S'double'
p126648
sS'default'
p126649
S'1'
p126650
sS'name'
p126651
S'x2'
p126652
sS'required'
p126653
I00
sS'group_name'
p126654
Nsa(dp126655
S'description'
p126656
S'The y coordinate of the lower left-hand corner of the box\n'
p126657
sS'cpp_type'
p126658
S'double'
p126659
sS'default'
p126660
S'0'
p126661
sS'name'
p126662
S'y1'
p126663
sS'required'
p126664
I00
sS'group_name'
p126665
Nsa(dp126666
S'description'
p126667
S'The y coordinate of the upper right-hand corner of the box\n'
p126668
sS'cpp_type'
p126669
S'double'
p126670
sS'default'
p126671
S'1'
p126672
sS'name'
p126673
S'y2'
p126674
sS'required'
p126675
I00
sS'group_name'
p126676
NsasS'name'
p126677
S'/Variables/*/InitialCondition/<type>/CrossIC'
p126678
sa(dp126679
S'description'
p126680
g3
sS'subblocks'
p126681
NsS'parameters'
p126682
(lp126683
(dp126684
S'description'
p126685
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126686
sS'cpp_type'
p126687
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126688
sS'default'
p126689
g3
sS'name'
p126690
S'block'
p126691
sS'required'
p126692
I00
sS'group_name'
p126693
Nsa(dp126694
S'description'
p126695
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126696
sS'cpp_type'
p126697
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126698
sS'default'
p126699
g3
sS'name'
p126700
S'boundary'
p126701
sS'required'
p126702
I00
sS'group_name'
p126703
Nsa(dp126704
S'description'
p126705
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126706
sS'cpp_type'
p126707
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126708
sS'default'
p126709
g3
sS'name'
p126710
S'control_tags'
p126711
sS'required'
p126712
I00
sS'group_name'
p126713
S'Advanced'
p126714
sa(dp126715
S'description'
p126716
S'Set the enabled status of the MooseObject.\n'
p126717
sS'cpp_type'
p126718
S'bool'
p126719
sS'default'
p126720
S'1'
p126721
sS'name'
p126722
S'enable'
p126723
sS'required'
p126724
I00
sS'group_name'
p126725
S'Advanced'
p126726
sa(dp126727
S'description'
p126728
S'The initial condition function.\n'
p126729
sS'cpp_type'
p126730
S'FunctionName'
p126731
sS'default'
p126732
g3
sS'name'
p126733
S'function'
p126734
sS'required'
p126735
I01
sS'group_name'
p126736
Nsa(dp126737
S'description'
p126738
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126739
sS'cpp_type'
p126740
S'bool'
p126741
sS'default'
p126742
S'0'
p126743
sS'name'
p126744
S'ignore_uo_dependency'
p126745
sS'required'
p126746
I00
sS'group_name'
p126747
S'Advanced'
p126748
sa(dp126749
S'description'
p126750
g3
sS'cpp_type'
p126751
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126752
sS'default'
p126753
S'FunctionIC'
p126754
sS'name'
p126755
S'type'
p126756
sS'required'
p126757
I00
sS'group_name'
p126758
Nsa(dp126759
S'description'
p126760
S'The variable this initial condition is supposed to provide values for.\n'
p126761
sS'cpp_type'
p126762
S'VariableName'
p126763
sS'default'
p126764
g3
sS'name'
p126765
S'variable'
p126766
sS'required'
p126767
I01
sS'group_name'
p126768
NsasS'name'
p126769
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p126770
sa(dp126771
S'description'
p126772
g3
sS'subblocks'
p126773
NsS'parameters'
p126774
(lp126775
(dp126776
S'description'
p126777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126778
sS'cpp_type'
p126779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126780
sS'default'
p126781
g3
sS'name'
p126782
S'control_tags'
p126783
sS'required'
p126784
I00
sS'group_name'
p126785
S'Advanced'
p126786
sa(dp126787
S'description'
p126788
S'Set the enabled status of the MooseObject.\n'
p126789
sS'cpp_type'
p126790
S'bool'
p126791
sS'default'
p126792
S'1'
p126793
sS'name'
p126794
S'enable'
p126795
sS'required'
p126796
I00
sS'group_name'
p126797
S'Advanced'
p126798
sa(dp126799
S'description'
p126800
S'The initial condition function.\n'
p126801
sS'cpp_type'
p126802
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p126803
sS'default'
p126804
g3
sS'name'
p126805
S'function'
p126806
sS'required'
p126807
I01
sS'group_name'
p126808
Nsa(dp126809
S'description'
p126810
g3
sS'cpp_type'
p126811
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126812
sS'default'
p126813
S'FunctionScalarIC'
p126814
sS'name'
p126815
S'type'
p126816
sS'required'
p126817
I00
sS'group_name'
p126818
Nsa(dp126819
S'description'
p126820
S'The variable this initial condition is supposed to provide values for.\n'
p126821
sS'cpp_type'
p126822
S'VariableName'
p126823
sS'default'
p126824
g3
sS'name'
p126825
S'variable'
p126826
sS'required'
p126827
I00
sS'group_name'
p126828
NsasS'name'
p126829
S'/Variables/*/InitialCondition/<type>/FunctionScalarIC'
p126830
sa(dp126831
S'description'
p126832
S'Perturbed hexagonal polycrystal\n'
p126833
sS'subblocks'
p126834
NsS'parameters'
p126835
(lp126836
(dp126837
S'description'
p126838
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126839
sS'cpp_type'
p126840
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126841
sS'default'
p126842
g3
sS'name'
p126843
S'block'
p126844
sS'required'
p126845
I00
sS'group_name'
p126846
Nsa(dp126847
S'description'
p126848
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126849
sS'cpp_type'
p126850
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126851
sS'default'
p126852
g3
sS'name'
p126853
S'boundary'
p126854
sS'required'
p126855
I00
sS'group_name'
p126856
Nsa(dp126857
S'name'
p126858
S'coloring_algorithm'
p126859
sS'cpp_type'
p126860
S'MooseEnum'
p126861
sS'default'
p126862
S'legacy'
p126863
sS'description'
p126864
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p126865
sS'required'
p126866
I00
sS'options'
p126867
S'legacy bt jp power greedy'
p126868
sS'group_name'
p126869
Nsa(dp126870
S'description'
p126871
S'3D microstructure will be columnar in the z-direction?\n'
p126872
sS'cpp_type'
p126873
S'bool'
p126874
sS'default'
p126875
S'0'
p126876
sS'name'
p126877
S'columnar_3D'
p126878
sS'required'
p126879
I00
sS'group_name'
p126880
Nsa(dp126881
S'description'
p126882
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126883
sS'cpp_type'
p126884
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126885
sS'default'
p126886
g3
sS'name'
p126887
S'control_tags'
p126888
sS'required'
p126889
I00
sS'group_name'
p126890
S'Advanced'
p126891
sa(dp126892
S'description'
p126893
S'Set the enabled status of the MooseObject.\n'
p126894
sS'cpp_type'
p126895
S'bool'
p126896
sS'default'
p126897
S'1'
p126898
sS'name'
p126899
S'enable'
p126900
sS'required'
p126901
I00
sS'group_name'
p126902
S'Advanced'
p126903
sa(dp126904
S'description'
p126905
S'Number of grains being represented by the order parameters\n'
p126906
sS'cpp_type'
p126907
S'unsigned int'
p126908
sS'default'
p126909
g3
sS'name'
p126910
S'grain_num'
p126911
sS'required'
p126912
I01
sS'group_name'
p126913
Nsa(dp126914
S'description'
p126915
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p126916
sS'cpp_type'
p126917
S'bool'
p126918
sS'default'
p126919
S'0'
p126920
sS'name'
p126921
S'ignore_uo_dependency'
p126922
sS'required'
p126923
I00
sS'group_name'
p126924
S'Advanced'
p126925
sa(dp126926
S'description'
p126927
S'The index for the current order parameter\n'
p126928
sS'cpp_type'
p126929
S'unsigned int'
p126930
sS'default'
p126931
g3
sS'name'
p126932
S'op_index'
p126933
sS'required'
p126934
I01
sS'group_name'
p126935
Nsa(dp126936
S'description'
p126937
S'Number of order parameters\n'
p126938
sS'cpp_type'
p126939
S'unsigned int'
p126940
sS'default'
p126941
g3
sS'name'
p126942
S'op_num'
p126943
sS'required'
p126944
I01
sS'group_name'
p126945
Nsa(dp126946
S'description'
p126947
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p126948
sS'cpp_type'
p126949
S'double'
p126950
sS'default'
p126951
S'0'
p126952
sS'name'
p126953
S'perturbation_percent'
p126954
sS'required'
p126955
I00
sS'group_name'
p126956
Nsa(dp126957
S'description'
p126958
S'The random seed\n'
p126959
sS'cpp_type'
p126960
S'unsigned int'
p126961
sS'default'
p126962
S'12444'
p126963
sS'name'
p126964
S'rand_seed'
p126965
sS'required'
p126966
I00
sS'group_name'
p126967
Nsa(dp126968
S'description'
p126969
g3
sS'cpp_type'
p126970
S'int'
p126971
sS'default'
p126972
S'1'
p126973
sS'name'
p126974
S'typ'
p126975
sS'required'
p126976
I00
sS'group_name'
p126977
Nsa(dp126978
S'description'
p126979
g3
sS'cpp_type'
p126980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126981
sS'default'
p126982
S'HexPolycrystalIC'
p126983
sS'name'
p126984
S'type'
p126985
sS'required'
p126986
I00
sS'group_name'
p126987
Nsa(dp126988
S'description'
p126989
S'The variable this initial condition is supposed to provide values for.\n'
p126990
sS'cpp_type'
p126991
S'VariableName'
p126992
sS'default'
p126993
g3
sS'name'
p126994
S'variable'
p126995
sS'required'
p126996
I01
sS'group_name'
p126997
Nsa(dp126998
S'description'
p126999
S'Specifies offset of hexagon grid in x-direction\n'
p127000
sS'cpp_type'
p127001
S'double'
p127002
sS'default'
p127003
S'0.5'
p127004
sS'name'
p127005
S'x_offset'
p127006
sS'required'
p127007
I00
sS'group_name'
p127008
NsasS'name'
p127009
S'/Variables/*/InitialCondition/<type>/HexPolycrystalIC'
p127010
sa(dp127011
S'description'
p127012
S'Perturbed square lattice of smooth circles\n'
p127013
sS'subblocks'
p127014
NsS'parameters'
p127015
(lp127016
(dp127017
S'description'
p127018
S'in 3D, whether the objects are spheres or columns\n'
p127019
sS'cpp_type'
p127020
S'bool'
p127021
sS'default'
p127022
S'1'
p127023
sS'name'
p127024
S'3D_spheres'
p127025
sS'required'
p127026
I00
sS'group_name'
p127027
Nsa(dp127028
S'description'
p127029
S'Variation from central lattice position\n'
p127030
sS'cpp_type'
p127031
S'double'
p127032
sS'default'
p127033
g3
sS'name'
p127034
S'Rnd_variation'
p127035
sS'required'
p127036
I00
sS'group_name'
p127037
Nsa(dp127038
S'description'
p127039
S"Don't place any bubbles on the simulation cell boundaries\n"
p127040
sS'cpp_type'
p127041
S'bool'
p127042
sS'default'
p127043
S'1'
p127044
sS'name'
p127045
S'avoid_bounds'
p127046
sS'required'
p127047
I00
sS'group_name'
p127048
Nsa(dp127049
S'description'
p127050
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127051
sS'cpp_type'
p127052
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127053
sS'default'
p127054
g3
sS'name'
p127055
S'block'
p127056
sS'required'
p127057
I00
sS'group_name'
p127058
Nsa(dp127059
S'description'
p127060
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127061
sS'cpp_type'
p127062
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127063
sS'default'
p127064
g3
sS'name'
p127065
S'boundary'
p127066
sS'required'
p127067
I00
sS'group_name'
p127068
Nsa(dp127069
S'description'
p127070
S'Vector containing the number of bubbles along each side\n'
p127071
sS'cpp_type'
p127072
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p127073
sS'default'
p127074
g3
sS'name'
p127075
S'circles_per_side'
p127076
sS'required'
p127077
I01
sS'group_name'
p127078
Nsa(dp127079
S'description'
p127080
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127081
sS'cpp_type'
p127082
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127083
sS'default'
p127084
g3
sS'name'
p127085
S'control_tags'
p127086
sS'required'
p127087
I00
sS'group_name'
p127088
S'Advanced'
p127089
sa(dp127090
S'description'
p127091
S'Set the enabled status of the MooseObject.\n'
p127092
sS'cpp_type'
p127093
S'bool'
p127094
sS'default'
p127095
S'1'
p127096
sS'name'
p127097
S'enable'
p127098
sS'required'
p127099
I00
sS'group_name'
p127100
S'Advanced'
p127101
sa(dp127102
S'description'
p127103
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127104
sS'cpp_type'
p127105
S'bool'
p127106
sS'default'
p127107
S'0'
p127108
sS'name'
p127109
S'ignore_uo_dependency'
p127110
sS'required'
p127111
I00
sS'group_name'
p127112
S'Advanced'
p127113
sa(dp127114
S'description'
p127115
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p127116
sS'cpp_type'
p127117
S'double'
p127118
sS'default'
p127119
S'0'
p127120
sS'name'
p127121
S'int_width'
p127122
sS'required'
p127123
I00
sS'group_name'
p127124
Nsa(dp127125
S'description'
p127126
S'The variable value inside the circle\n'
p127127
sS'cpp_type'
p127128
S'double'
p127129
sS'default'
p127130
g3
sS'name'
p127131
S'invalue'
p127132
sS'required'
p127133
I01
sS'group_name'
p127134
Nsa(dp127135
S'description'
p127136
S'The variable value outside the circle\n'
p127137
sS'cpp_type'
p127138
S'double'
p127139
sS'default'
p127140
g3
sS'name'
p127141
S'outvalue'
p127142
sS'required'
p127143
I01
sS'group_name'
p127144
Nsa(dp127145
S'description'
p127146
S'Variation from central lattice position\n'
p127147
sS'cpp_type'
p127148
S'double'
p127149
sS'default'
p127150
S'0'
p127151
sS'name'
p127152
S'pos_variation'
p127153
sS'required'
p127154
I00
sS'group_name'
p127155
Nsa(dp127156
S'description'
p127157
S'Mean radius value for the circels\n'
p127158
sS'cpp_type'
p127159
S'double'
p127160
sS'default'
p127161
g3
sS'name'
p127162
S'radius'
p127163
sS'required'
p127164
I01
sS'group_name'
p127165
Nsa(dp127166
S'description'
p127167
S'Plus or minus fraction of random variation in the bubble radius\n'
p127168
sS'cpp_type'
p127169
S'double'
p127170
sS'default'
p127171
S'0'
p127172
sS'name'
p127173
S'radius_variation'
p127174
sS'required'
p127175
I00
sS'group_name'
p127176
Nsa(dp127177
S'name'
p127178
S'radius_variation_type'
p127179
sS'cpp_type'
p127180
S'MooseEnum'
p127181
sS'default'
p127182
S'none'
p127183
sS'description'
p127184
S'Type of distribution that random circle radii will follow\n'
p127185
sS'required'
p127186
I00
sS'options'
p127187
S'uniform normal none'
p127188
sS'group_name'
p127189
Nsa(dp127190
S'description'
p127191
S'random seed\n'
p127192
sS'cpp_type'
p127193
S'unsigned int'
p127194
sS'default'
p127195
S'2000'
p127196
sS'name'
p127197
S'rand_seed'
p127198
sS'required'
p127199
I00
sS'group_name'
p127200
Nsa(dp127201
S'description'
p127202
g3
sS'cpp_type'
p127203
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127204
sS'default'
p127205
S'LatticeSmoothCircleIC'
p127206
sS'name'
p127207
S'type'
p127208
sS'required'
p127209
I00
sS'group_name'
p127210
Nsa(dp127211
S'description'
p127212
S'The variable this initial condition is supposed to provide values for.\n'
p127213
sS'cpp_type'
p127214
S'VariableName'
p127215
sS'default'
p127216
g3
sS'name'
p127217
S'variable'
p127218
sS'required'
p127219
I01
sS'group_name'
p127220
Nsa(dp127221
S'description'
p127222
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p127223
sS'cpp_type'
p127224
S'bool'
p127225
sS'default'
p127226
S'0'
p127227
sS'name'
p127228
S'zero_gradient'
p127229
sS'required'
p127230
I00
sS'group_name'
p127231
NsasS'name'
p127232
S'/Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p127233
sa(dp127234
S'description'
p127235
S'Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n'
p127236
sS'subblocks'
p127237
NsS'parameters'
p127238
(lp127239
(dp127240
S'description'
p127241
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127242
sS'cpp_type'
p127243
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127244
sS'default'
p127245
g3
sS'name'
p127246
S'block'
p127247
sS'required'
p127248
I00
sS'group_name'
p127249
Nsa(dp127250
S'description'
p127251
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127252
sS'cpp_type'
p127253
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127254
sS'default'
p127255
g3
sS'name'
p127256
S'boundary'
p127257
sS'required'
p127258
I00
sS'group_name'
p127259
Nsa(dp127260
S'description'
p127261
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127262
sS'cpp_type'
p127263
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127264
sS'default'
p127265
g3
sS'name'
p127266
S'control_tags'
p127267
sS'required'
p127268
I00
sS'group_name'
p127269
S'Advanced'
p127270
sa(dp127271
S'description'
p127272
S'The corner coordinates boxes\n'
p127273
sS'cpp_type'
p127274
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p127275
sS'default'
p127276
g3
sS'name'
p127277
S'corners'
p127278
sS'required'
p127279
I01
sS'group_name'
p127280
Nsa(dp127281
S'description'
p127282
S'Set the enabled status of the MooseObject.\n'
p127283
sS'cpp_type'
p127284
S'bool'
p127285
sS'default'
p127286
S'1'
p127287
sS'name'
p127288
S'enable'
p127289
sS'required'
p127290
I00
sS'group_name'
p127291
S'Advanced'
p127292
sa(dp127293
S'description'
p127294
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127295
sS'cpp_type'
p127296
S'bool'
p127297
sS'default'
p127298
S'0'
p127299
sS'name'
p127300
S'ignore_uo_dependency'
p127301
sS'required'
p127302
I00
sS'group_name'
p127303
S'Advanced'
p127304
sa(dp127305
S'description'
p127306
S'The value of the variable inside each box (one value per box or a single value for all boxes)\n'
p127307
sS'cpp_type'
p127308
S'std::vector<double, std::allocator<double> >'
p127309
sS'default'
p127310
g3
sS'name'
p127311
S'inside'
p127312
sS'required'
p127313
I01
sS'group_name'
p127314
Nsa(dp127315
S'description'
p127316
S'The coordinates of the opposite corners of the boxes\n'
p127317
sS'cpp_type'
p127318
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p127319
sS'default'
p127320
g3
sS'name'
p127321
S'opposite_corners'
p127322
sS'required'
p127323
I01
sS'group_name'
p127324
Nsa(dp127325
S'description'
p127326
S'The value of the variable outside the box\n'
p127327
sS'cpp_type'
p127328
S'double'
p127329
sS'default'
p127330
S'0'
p127331
sS'name'
p127332
S'outside'
p127333
sS'required'
p127334
I00
sS'group_name'
p127335
Nsa(dp127336
S'description'
p127337
g3
sS'cpp_type'
p127338
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127339
sS'default'
p127340
S'MultiBoundingBoxIC'
p127341
sS'name'
p127342
S'type'
p127343
sS'required'
p127344
I00
sS'group_name'
p127345
Nsa(dp127346
S'description'
p127347
S'The variable this initial condition is supposed to provide values for.\n'
p127348
sS'cpp_type'
p127349
S'VariableName'
p127350
sS'default'
p127351
g3
sS'name'
p127352
S'variable'
p127353
sS'required'
p127354
I01
sS'group_name'
p127355
NsasS'name'
p127356
S'/Variables/*/InitialCondition/<type>/MultiBoundingBoxIC'
p127357
sa(dp127358
S'description'
p127359
S'Random distribution of smooth circles with given minimum spacing\n'
p127360
sS'subblocks'
p127361
NsS'parameters'
p127362
(lp127363
(dp127364
S'description'
p127365
S'in 3D, whether the objects are spheres or columns\n'
p127366
sS'cpp_type'
p127367
S'bool'
p127368
sS'default'
p127369
S'1'
p127370
sS'name'
p127371
S'3D_spheres'
p127372
sS'required'
p127373
I00
sS'group_name'
p127374
Nsa(dp127375
S'description'
p127376
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127377
sS'cpp_type'
p127378
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127379
sS'default'
p127380
g3
sS'name'
p127381
S'block'
p127382
sS'required'
p127383
I00
sS'group_name'
p127384
Nsa(dp127385
S'description'
p127386
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127387
sS'cpp_type'
p127388
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127389
sS'default'
p127390
g3
sS'name'
p127391
S'boundary'
p127392
sS'required'
p127393
I00
sS'group_name'
p127394
Nsa(dp127395
S'description'
p127396
S'minimum spacing of bubbles, measured from center to center\n'
p127397
sS'cpp_type'
p127398
S'double'
p127399
sS'default'
p127400
g3
sS'name'
p127401
S'bubspac'
p127402
sS'required'
p127403
I01
sS'group_name'
p127404
Nsa(dp127405
S'description'
p127406
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127407
sS'cpp_type'
p127408
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127409
sS'default'
p127410
g3
sS'name'
p127411
S'control_tags'
p127412
sS'required'
p127413
I00
sS'group_name'
p127414
S'Advanced'
p127415
sa(dp127416
S'description'
p127417
S'Set the enabled status of the MooseObject.\n'
p127418
sS'cpp_type'
p127419
S'bool'
p127420
sS'default'
p127421
S'1'
p127422
sS'name'
p127423
S'enable'
p127424
sS'required'
p127425
I00
sS'group_name'
p127426
S'Advanced'
p127427
sa(dp127428
S'description'
p127429
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127430
sS'cpp_type'
p127431
S'bool'
p127432
sS'default'
p127433
S'0'
p127434
sS'name'
p127435
S'ignore_uo_dependency'
p127436
sS'required'
p127437
I00
sS'group_name'
p127438
S'Advanced'
p127439
sa(dp127440
S'description'
p127441
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p127442
sS'cpp_type'
p127443
S'double'
p127444
sS'default'
p127445
S'0'
p127446
sS'name'
p127447
S'int_width'
p127448
sS'required'
p127449
I00
sS'group_name'
p127450
Nsa(dp127451
S'description'
p127452
S'The variable value inside the circle\n'
p127453
sS'cpp_type'
p127454
S'double'
p127455
sS'default'
p127456
g3
sS'name'
p127457
S'invalue'
p127458
sS'required'
p127459
I01
sS'group_name'
p127460
Nsa(dp127461
S'description'
p127462
S'The number of bubbles to place\n'
p127463
sS'cpp_type'
p127464
S'unsigned int'
p127465
sS'default'
p127466
g3
sS'name'
p127467
S'numbub'
p127468
sS'required'
p127469
I01
sS'group_name'
p127470
Nsa(dp127471
S'description'
p127472
S'The number of tries\n'
p127473
sS'cpp_type'
p127474
S'unsigned int'
p127475
sS'default'
p127476
S'1000'
p127477
sS'name'
p127478
S'numtries'
p127479
sS'required'
p127480
I00
sS'group_name'
p127481
Nsa(dp127482
S'description'
p127483
S'The variable value outside the circle\n'
p127484
sS'cpp_type'
p127485
S'double'
p127486
sS'default'
p127487
g3
sS'name'
p127488
S'outvalue'
p127489
sS'required'
p127490
I01
sS'group_name'
p127491
Nsa(dp127492
S'description'
p127493
S'Mean radius value for the circles\n'
p127494
sS'cpp_type'
p127495
S'double'
p127496
sS'default'
p127497
g3
sS'name'
p127498
S'radius'
p127499
sS'required'
p127500
I01
sS'group_name'
p127501
Nsa(dp127502
S'description'
p127503
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p127504
sS'cpp_type'
p127505
S'double'
p127506
sS'default'
p127507
S'0'
p127508
sS'name'
p127509
S'radius_variation'
p127510
sS'required'
p127511
I00
sS'group_name'
p127512
Nsa(dp127513
S'name'
p127514
S'radius_variation_type'
p127515
sS'cpp_type'
p127516
S'MooseEnum'
p127517
sS'default'
p127518
S'none'
p127519
sS'description'
p127520
S'Type of distribution that random circle radii will follow\n'
p127521
sS'required'
p127522
I00
sS'options'
p127523
S'uniform normal none'
p127524
sS'group_name'
p127525
Nsa(dp127526
S'description'
p127527
S'Seed value for the random number generator\n'
p127528
sS'cpp_type'
p127529
S'unsigned int'
p127530
sS'default'
p127531
S'12345'
p127532
sS'name'
p127533
S'rand_seed'
p127534
sS'required'
p127535
I00
sS'group_name'
p127536
Nsa(dp127537
S'description'
p127538
g3
sS'cpp_type'
p127539
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127540
sS'default'
p127541
S'MultiSmoothCircleIC'
p127542
sS'name'
p127543
S'type'
p127544
sS'required'
p127545
I00
sS'group_name'
p127546
Nsa(dp127547
S'description'
p127548
S'The variable this initial condition is supposed to provide values for.\n'
p127549
sS'cpp_type'
p127550
S'VariableName'
p127551
sS'default'
p127552
g3
sS'name'
p127553
S'variable'
p127554
sS'required'
p127555
I01
sS'group_name'
p127556
Nsa(dp127557
S'description'
p127558
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p127559
sS'cpp_type'
p127560
S'bool'
p127561
sS'default'
p127562
S'0'
p127563
sS'name'
p127564
S'zero_gradient'
p127565
sS'required'
p127566
I00
sS'group_name'
p127567
NsasS'name'
p127568
S'/Variables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p127569
sa(dp127570
S'description'
p127571
S'Random distribution of smooth ellipse with given minimum spacing\n'
p127572
sS'subblocks'
p127573
NsS'parameters'
p127574
(lp127575
(dp127576
S'description'
p127577
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127578
sS'cpp_type'
p127579
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127580
sS'default'
p127581
g3
sS'name'
p127582
S'block'
p127583
sS'required'
p127584
I00
sS'group_name'
p127585
Nsa(dp127586
S'description'
p127587
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127588
sS'cpp_type'
p127589
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127590
sS'default'
p127591
g3
sS'name'
p127592
S'boundary'
p127593
sS'required'
p127594
I00
sS'group_name'
p127595
Nsa(dp127596
S'description'
p127597
S'Vector of the minimum spacing of bubbles of one type, measured from center to center\n'
p127598
sS'cpp_type'
p127599
S'std::vector<double, std::allocator<double> >'
p127600
sS'default'
p127601
g3
sS'name'
p127602
S'bubspac'
p127603
sS'required'
p127604
I01
sS'group_name'
p127605
Nsa(dp127606
S'description'
p127607
S'Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n'
p127608
sS'cpp_type'
p127609
S'bool'
p127610
sS'default'
p127611
S'0'
p127612
sS'name'
p127613
S'check_extremes'
p127614
sS'required'
p127615
I00
sS'group_name'
p127616
Nsa(dp127617
S'description'
p127618
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127619
sS'cpp_type'
p127620
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127621
sS'default'
p127622
g3
sS'name'
p127623
S'control_tags'
p127624
sS'required'
p127625
I00
sS'group_name'
p127626
S'Advanced'
p127627
sa(dp127628
S'description'
p127629
S'Set the enabled status of the MooseObject.\n'
p127630
sS'cpp_type'
p127631
S'bool'
p127632
sS'default'
p127633
S'1'
p127634
sS'name'
p127635
S'enable'
p127636
sS'required'
p127637
I00
sS'group_name'
p127638
S'Advanced'
p127639
sa(dp127640
S'description'
p127641
S'Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n'
p127642
sS'cpp_type'
p127643
S'std::vector<double, std::allocator<double> >'
p127644
sS'default'
p127645
g3
sS'name'
p127646
S'exponent'
p127647
sS'required'
p127648
I00
sS'group_name'
p127649
Nsa(dp127650
S'description'
p127651
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127652
sS'cpp_type'
p127653
S'bool'
p127654
sS'default'
p127655
S'0'
p127656
sS'name'
p127657
S'ignore_uo_dependency'
p127658
sS'required'
p127659
I00
sS'group_name'
p127660
S'Advanced'
p127661
sa(dp127662
S'description'
p127663
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p127664
sS'cpp_type'
p127665
S'double'
p127666
sS'default'
p127667
S'0'
p127668
sS'name'
p127669
S'int_width'
p127670
sS'required'
p127671
I00
sS'group_name'
p127672
Nsa(dp127673
S'description'
p127674
S'The variable value inside the superellipsoid\n'
p127675
sS'cpp_type'
p127676
S'double'
p127677
sS'default'
p127678
g3
sS'name'
p127679
S'invalue'
p127680
sS'required'
p127681
I01
sS'group_name'
p127682
Nsa(dp127683
S'description'
p127684
S'The number of tries\n'
p127685
sS'cpp_type'
p127686
S'unsigned int'
p127687
sS'default'
p127688
S'1000'
p127689
sS'name'
p127690
S'max_num_tries'
p127691
sS'required'
p127692
I00
sS'group_name'
p127693
Nsa(dp127694
S'description'
p127695
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p127696
sS'cpp_type'
p127697
S'double'
p127698
sS'default'
p127699
g3
sS'name'
p127700
S'nestedvalue'
p127701
sS'required'
p127702
I00
sS'group_name'
p127703
Nsa(dp127704
S'description'
p127705
S'Vector of the number of bubbles to place\n'
p127706
sS'cpp_type'
p127707
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p127708
sS'default'
p127709
g3
sS'name'
p127710
S'numbub'
p127711
sS'required'
p127712
I01
sS'group_name'
p127713
Nsa(dp127714
S'description'
p127715
S'The variable value outside the superellipsoid\n'
p127716
sS'cpp_type'
p127717
S'double'
p127718
sS'default'
p127719
g3
sS'name'
p127720
S'outvalue'
p127721
sS'required'
p127722
I01
sS'group_name'
p127723
Nsa(dp127724
S'description'
p127725
S'Check all Superellipsoid centers for overlap with other Superellipsoids.\n'
p127726
sS'cpp_type'
p127727
S'bool'
p127728
sS'default'
p127729
S'0'
p127730
sS'name'
p127731
S'prevent_overlap'
p127732
sS'required'
p127733
I00
sS'group_name'
p127734
Nsa(dp127735
S'description'
p127736
S'Seed value for the random number generator\n'
p127737
sS'cpp_type'
p127738
S'unsigned int'
p127739
sS'default'
p127740
S'12345'
p127741
sS'name'
p127742
S'rand_seed'
p127743
sS'required'
p127744
I00
sS'group_name'
p127745
Nsa(dp127746
S'description'
p127747
S'Vector of mean semiaxis values in the x direction for the ellipse\n'
p127748
sS'cpp_type'
p127749
S'std::vector<double, std::allocator<double> >'
p127750
sS'default'
p127751
g3
sS'name'
p127752
S'semiaxis_a'
p127753
sS'required'
p127754
I01
sS'group_name'
p127755
Nsa(dp127756
S'description'
p127757
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n'
p127758
sS'cpp_type'
p127759
S'std::vector<double, std::allocator<double> >'
p127760
sS'default'
p127761
g3
sS'name'
p127762
S'semiaxis_a_variation'
p127763
sS'required'
p127764
I00
sS'group_name'
p127765
Nsa(dp127766
S'description'
p127767
S'Vector of mean semiaxis values in the y direction for the ellipse\n'
p127768
sS'cpp_type'
p127769
S'std::vector<double, std::allocator<double> >'
p127770
sS'default'
p127771
g3
sS'name'
p127772
S'semiaxis_b'
p127773
sS'required'
p127774
I01
sS'group_name'
p127775
Nsa(dp127776
S'description'
p127777
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n'
p127778
sS'cpp_type'
p127779
S'std::vector<double, std::allocator<double> >'
p127780
sS'default'
p127781
g3
sS'name'
p127782
S'semiaxis_b_variation'
p127783
sS'required'
p127784
I00
sS'group_name'
p127785
Nsa(dp127786
S'description'
p127787
S'Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n'
p127788
sS'cpp_type'
p127789
S'std::vector<double, std::allocator<double> >'
p127790
sS'default'
p127791
g3
sS'name'
p127792
S'semiaxis_c'
p127793
sS'required'
p127794
I01
sS'group_name'
p127795
Nsa(dp127796
S'description'
p127797
S'Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n'
p127798
sS'cpp_type'
p127799
S'std::vector<double, std::allocator<double> >'
p127800
sS'default'
p127801
g3
sS'name'
p127802
S'semiaxis_c_variation'
p127803
sS'required'
p127804
I00
sS'group_name'
p127805
Nsa(dp127806
S'name'
p127807
S'semiaxis_variation_type'
p127808
sS'cpp_type'
p127809
S'MooseEnum'
p127810
sS'default'
p127811
S'none'
p127812
sS'description'
p127813
S'Type of distribution that random superellipsoid semiaxes will follow\n'
p127814
sS'required'
p127815
I00
sS'options'
p127816
S'uniform normal none'
p127817
sS'group_name'
p127818
Nsa(dp127819
S'description'
p127820
g3
sS'cpp_type'
p127821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127822
sS'default'
p127823
S'MultiSmoothSuperellipsoidIC'
p127824
sS'name'
p127825
S'type'
p127826
sS'required'
p127827
I00
sS'group_name'
p127828
Nsa(dp127829
S'description'
p127830
S'The variable this initial condition is supposed to provide values for.\n'
p127831
sS'cpp_type'
p127832
S'VariableName'
p127833
sS'default'
p127834
g3
sS'name'
p127835
S'variable'
p127836
sS'required'
p127837
I01
sS'group_name'
p127838
Nsa(dp127839
S'description'
p127840
S'If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n'
p127841
sS'cpp_type'
p127842
S'bool'
p127843
sS'default'
p127844
S'1'
p127845
sS'name'
p127846
S'vary_axes_independently'
p127847
sS'required'
p127848
I00
sS'group_name'
p127849
Nsa(dp127850
S'description'
p127851
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p127852
sS'cpp_type'
p127853
S'bool'
p127854
sS'default'
p127855
S'0'
p127856
sS'name'
p127857
S'zero_gradient'
p127858
sS'required'
p127859
I00
sS'group_name'
p127860
NsasS'name'
p127861
S'/Variables/*/InitialCondition/<type>/MultiSmoothSuperellipsoidIC'
p127862
sa(dp127863
S'description'
p127864
g3
sS'subblocks'
p127865
NsS'parameters'
p127866
(lp127867
(dp127868
S'description'
p127869
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127870
sS'cpp_type'
p127871
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127872
sS'default'
p127873
g3
sS'name'
p127874
S'block'
p127875
sS'required'
p127876
I00
sS'group_name'
p127877
Nsa(dp127878
S'description'
p127879
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127880
sS'cpp_type'
p127881
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127882
sS'default'
p127883
g3
sS'name'
p127884
S'boundary'
p127885
sS'required'
p127886
I00
sS'group_name'
p127887
Nsa(dp127888
S'description'
p127889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127890
sS'cpp_type'
p127891
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127892
sS'default'
p127893
g3
sS'name'
p127894
S'control_tags'
p127895
sS'required'
p127896
I00
sS'group_name'
p127897
S'Advanced'
p127898
sa(dp127899
S'name'
p127900
S'crystal_structure'
p127901
sS'cpp_type'
p127902
S'MooseEnum'
p127903
sS'default'
p127904
g3
sS'description'
p127905
S'The type of crystal structure\n'
p127906
sS'required'
p127907
I00
sS'options'
p127908
S'FCC BCC'
p127909
sS'group_name'
p127910
Nsa(dp127911
S'description'
p127912
S'Set the enabled status of the MooseObject.\n'
p127913
sS'cpp_type'
p127914
S'bool'
p127915
sS'default'
p127916
S'1'
p127917
sS'name'
p127918
S'enable'
p127919
sS'required'
p127920
I00
sS'group_name'
p127921
S'Advanced'
p127922
sa(dp127923
S'description'
p127924
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p127925
sS'cpp_type'
p127926
S'bool'
p127927
sS'default'
p127928
S'0'
p127929
sS'name'
p127930
S'ignore_uo_dependency'
p127931
sS'required'
p127932
I00
sS'group_name'
p127933
S'Advanced'
p127934
sa(dp127935
S'description'
p127936
S'Value inside sinusoids\n'
p127937
sS'cpp_type'
p127938
S'double'
p127939
sS'default'
p127940
S'1'
p127941
sS'name'
p127942
S'inside'
p127943
sS'required'
p127944
I00
sS'group_name'
p127945
Nsa(dp127946
S'description'
p127947
S'The lattice constant off the crystal structure\n'
p127948
sS'cpp_type'
p127949
S'double'
p127950
sS'default'
p127951
g3
sS'name'
p127952
S'lc'
p127953
sS'required'
p127954
I01
sS'group_name'
p127955
Nsa(dp127956
S'description'
p127957
S'Upper bound of the randomly generated values\n'
p127958
sS'cpp_type'
p127959
S'double'
p127960
sS'default'
p127961
S'1'
p127962
sS'name'
p127963
S'max'
p127964
sS'required'
p127965
I00
sS'group_name'
p127966
Nsa(dp127967
S'description'
p127968
S'Lower bound of the randomly generated values\n'
p127969
sS'cpp_type'
p127970
S'double'
p127971
sS'default'
p127972
S'0'
p127973
sS'name'
p127974
S'min'
p127975
sS'required'
p127976
I00
sS'group_name'
p127977
Nsa(dp127978
S'description'
p127979
S'Value outside sinusoids\n'
p127980
sS'cpp_type'
p127981
S'double'
p127982
sS'default'
p127983
S'0'
p127984
sS'name'
p127985
S'outside'
p127986
sS'required'
p127987
I00
sS'group_name'
p127988
Nsa(dp127989
S'description'
p127990
S'Seed value for the random number generator\n'
p127991
sS'cpp_type'
p127992
S'unsigned int'
p127993
sS'default'
p127994
S'0'
p127995
sS'name'
p127996
S'seed'
p127997
sS'required'
p127998
I00
sS'group_name'
p127999
Nsa(dp128000
S'description'
p128001
g3
sS'cpp_type'
p128002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128003
sS'default'
p128004
S'PFCFreezingIC'
p128005
sS'name'
p128006
S'type'
p128007
sS'required'
p128008
I00
sS'group_name'
p128009
Nsa(dp128010
S'description'
p128011
S'The variable this initial condition is supposed to provide values for.\n'
p128012
sS'cpp_type'
p128013
S'VariableName'
p128014
sS'default'
p128015
g3
sS'name'
p128016
S'variable'
p128017
sS'required'
p128018
I01
sS'group_name'
p128019
Nsa(dp128020
S'description'
p128021
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p128022
sS'cpp_type'
p128023
S'double'
p128024
sS'default'
p128025
g3
sS'name'
p128026
S'x1'
p128027
sS'required'
p128028
I01
sS'group_name'
p128029
Nsa(dp128030
S'description'
p128031
S'The x coordinate of the upper right-hand corner of the box\n'
p128032
sS'cpp_type'
p128033
S'double'
p128034
sS'default'
p128035
g3
sS'name'
p128036
S'x2'
p128037
sS'required'
p128038
I01
sS'group_name'
p128039
Nsa(dp128040
S'description'
p128041
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p128042
sS'cpp_type'
p128043
S'double'
p128044
sS'default'
p128045
g3
sS'name'
p128046
S'y1'
p128047
sS'required'
p128048
I01
sS'group_name'
p128049
Nsa(dp128050
S'description'
p128051
S'The y coordinate of the upper right-hand corner of the box\n'
p128052
sS'cpp_type'
p128053
S'double'
p128054
sS'default'
p128055
g3
sS'name'
p128056
S'y2'
p128057
sS'required'
p128058
I01
sS'group_name'
p128059
Nsa(dp128060
S'description'
p128061
S'The z coordinate of the lower left-hand corner of the box\n'
p128062
sS'cpp_type'
p128063
S'double'
p128064
sS'default'
p128065
S'0'
p128066
sS'name'
p128067
S'z1'
p128068
sS'required'
p128069
I00
sS'group_name'
p128070
Nsa(dp128071
S'description'
p128072
S'The z coordinate of the upper right-hand corner of the box\n'
p128073
sS'cpp_type'
p128074
S'double'
p128075
sS'default'
p128076
S'0'
p128077
sS'name'
p128078
S'z2'
p128079
sS'required'
p128080
I00
sS'group_name'
p128081
NsasS'name'
p128082
S'/Variables/*/InitialCondition/<type>/PFCFreezingIC'
p128083
sa(dp128084
S'description'
p128085
S'Random initial condition for a polycrystalline material\n'
p128086
sS'subblocks'
p128087
NsS'parameters'
p128088
(lp128089
(dp128090
S'description'
p128091
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128092
sS'cpp_type'
p128093
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128094
sS'default'
p128095
g3
sS'name'
p128096
S'block'
p128097
sS'required'
p128098
I00
sS'group_name'
p128099
Nsa(dp128100
S'description'
p128101
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128102
sS'cpp_type'
p128103
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128104
sS'default'
p128105
g3
sS'name'
p128106
S'boundary'
p128107
sS'required'
p128108
I00
sS'group_name'
p128109
Nsa(dp128110
S'description'
p128111
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128112
sS'cpp_type'
p128113
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128114
sS'default'
p128115
g3
sS'name'
p128116
S'control_tags'
p128117
sS'required'
p128118
I00
sS'group_name'
p128119
S'Advanced'
p128120
sa(dp128121
S'description'
p128122
S'Set the enabled status of the MooseObject.\n'
p128123
sS'cpp_type'
p128124
S'bool'
p128125
sS'default'
p128126
S'1'
p128127
sS'name'
p128128
S'enable'
p128129
sS'required'
p128130
I00
sS'group_name'
p128131
S'Advanced'
p128132
sa(dp128133
S'description'
p128134
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128135
sS'cpp_type'
p128136
S'bool'
p128137
sS'default'
p128138
S'0'
p128139
sS'name'
p128140
S'ignore_uo_dependency'
p128141
sS'required'
p128142
I00
sS'group_name'
p128143
S'Advanced'
p128144
sa(dp128145
S'description'
p128146
S'The index for the current order parameter\n'
p128147
sS'cpp_type'
p128148
S'unsigned int'
p128149
sS'default'
p128150
g3
sS'name'
p128151
S'op_index'
p128152
sS'required'
p128153
I01
sS'group_name'
p128154
Nsa(dp128155
S'description'
p128156
S'Number of order parameters\n'
p128157
sS'cpp_type'
p128158
S'unsigned int'
p128159
sS'default'
p128160
g3
sS'name'
p128161
S'op_num'
p128162
sS'required'
p128163
I01
sS'group_name'
p128164
Nsa(dp128165
S'description'
p128166
S'Type of random grain structure\n'
p128167
sS'cpp_type'
p128168
S'unsigned int'
p128169
sS'default'
p128170
g3
sS'name'
p128171
S'typ'
p128172
sS'required'
p128173
I01
sS'group_name'
p128174
Nsa(dp128175
S'description'
p128176
g3
sS'cpp_type'
p128177
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128178
sS'default'
p128179
S'PolycrystalRandomIC'
p128180
sS'name'
p128181
S'type'
p128182
sS'required'
p128183
I00
sS'group_name'
p128184
Nsa(dp128185
S'description'
p128186
S'The variable this initial condition is supposed to provide values for.\n'
p128187
sS'cpp_type'
p128188
S'VariableName'
p128189
sS'default'
p128190
g3
sS'name'
p128191
S'variable'
p128192
sS'required'
p128193
I01
sS'group_name'
p128194
NsasS'name'
p128195
S'/Variables/*/InitialCondition/<type>/PolycrystalRandomIC'
p128196
sa(dp128197
S'description'
p128198
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p128199
sS'subblocks'
p128200
NsS'parameters'
p128201
(lp128202
(dp128203
S'description'
p128204
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128205
sS'cpp_type'
p128206
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128207
sS'default'
p128208
g3
sS'name'
p128209
S'block'
p128210
sS'required'
p128211
I00
sS'group_name'
p128212
Nsa(dp128213
S'description'
p128214
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128215
sS'cpp_type'
p128216
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128217
sS'default'
p128218
g3
sS'name'
p128219
S'boundary'
p128220
sS'required'
p128221
I00
sS'group_name'
p128222
Nsa(dp128223
S'name'
p128224
S'coloring_algorithm'
p128225
sS'cpp_type'
p128226
S'MooseEnum'
p128227
sS'default'
p128228
S'legacy'
p128229
sS'description'
p128230
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p128231
sS'required'
p128232
I00
sS'options'
p128233
S'legacy bt jp power greedy'
p128234
sS'group_name'
p128235
Nsa(dp128236
S'description'
p128237
S'3D microstructure will be columnar in the z-direction?\n'
p128238
sS'cpp_type'
p128239
S'bool'
p128240
sS'default'
p128241
S'0'
p128242
sS'name'
p128243
S'columnar_3D'
p128244
sS'required'
p128245
I00
sS'group_name'
p128246
Nsa(dp128247
S'description'
p128248
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128249
sS'cpp_type'
p128250
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128251
sS'default'
p128252
g3
sS'name'
p128253
S'control_tags'
p128254
sS'required'
p128255
I00
sS'group_name'
p128256
S'Advanced'
p128257
sa(dp128258
S'description'
p128259
S'Set the enabled status of the MooseObject.\n'
p128260
sS'cpp_type'
p128261
S'bool'
p128262
sS'default'
p128263
S'1'
p128264
sS'name'
p128265
S'enable'
p128266
sS'required'
p128267
I00
sS'group_name'
p128268
S'Advanced'
p128269
sa(dp128270
S'description'
p128271
S'Number of grains being represented by the order parameters\n'
p128272
sS'cpp_type'
p128273
S'unsigned int'
p128274
sS'default'
p128275
g3
sS'name'
p128276
S'grain_num'
p128277
sS'required'
p128278
I01
sS'group_name'
p128279
Nsa(dp128280
S'description'
p128281
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128282
sS'cpp_type'
p128283
S'bool'
p128284
sS'default'
p128285
S'0'
p128286
sS'name'
p128287
S'ignore_uo_dependency'
p128288
sS'required'
p128289
I00
sS'group_name'
p128290
S'Advanced'
p128291
sa(dp128292
S'description'
p128293
S'The index for the current order parameter\n'
p128294
sS'cpp_type'
p128295
S'unsigned int'
p128296
sS'default'
p128297
g3
sS'name'
p128298
S'op_index'
p128299
sS'required'
p128300
I01
sS'group_name'
p128301
Nsa(dp128302
S'description'
p128303
S'Number of order parameters\n'
p128304
sS'cpp_type'
p128305
S'unsigned int'
p128306
sS'default'
p128307
g3
sS'name'
p128308
S'op_num'
p128309
sS'required'
p128310
I01
sS'group_name'
p128311
Nsa(dp128312
S'description'
p128313
S'The random seed\n'
p128314
sS'cpp_type'
p128315
S'unsigned int'
p128316
sS'default'
p128317
S'12444'
p128318
sS'name'
p128319
S'rand_seed'
p128320
sS'required'
p128321
I00
sS'group_name'
p128322
Nsa(dp128323
S'description'
p128324
g3
sS'cpp_type'
p128325
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128326
sS'default'
p128327
S'PolycrystalReducedIC'
p128328
sS'name'
p128329
S'type'
p128330
sS'required'
p128331
I00
sS'group_name'
p128332
Nsa(dp128333
S'description'
p128334
S'The variable this initial condition is supposed to provide values for.\n'
p128335
sS'cpp_type'
p128336
S'VariableName'
p128337
sS'default'
p128338
g3
sS'name'
p128339
S'variable'
p128340
sS'required'
p128341
I01
sS'group_name'
p128342
NsasS'name'
p128343
S'/Variables/*/InitialCondition/<type>/PolycrystalReducedIC'
p128344
sa(dp128345
S'description'
p128346
S'Random distribution of smooth circles with given minimum spacing\n'
p128347
sS'subblocks'
p128348
NsS'parameters'
p128349
(lp128350
(dp128351
S'description'
p128352
S'in 3D, whether the objects are spheres or columns\n'
p128353
sS'cpp_type'
p128354
S'bool'
p128355
sS'default'
p128356
S'1'
p128357
sS'name'
p128358
S'3D_spheres'
p128359
sS'required'
p128360
I00
sS'group_name'
p128361
Nsa(dp128362
S'description'
p128363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128364
sS'cpp_type'
p128365
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128366
sS'default'
p128367
g3
sS'name'
p128368
S'block'
p128369
sS'required'
p128370
I00
sS'group_name'
p128371
Nsa(dp128372
S'description'
p128373
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128374
sS'cpp_type'
p128375
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128376
sS'default'
p128377
g3
sS'name'
p128378
S'boundary'
p128379
sS'required'
p128380
I00
sS'group_name'
p128381
Nsa(dp128382
S'description'
p128383
S'minimum spacing of bubbles, measured from center to center\n'
p128384
sS'cpp_type'
p128385
S'double'
p128386
sS'default'
p128387
g3
sS'name'
p128388
S'bubspac'
p128389
sS'required'
p128390
I01
sS'group_name'
p128391
Nsa(dp128392
S'description'
p128393
S'3D microstructure will be columnar in the z-direction?\n'
p128394
sS'cpp_type'
p128395
S'bool'
p128396
sS'default'
p128397
S'0'
p128398
sS'name'
p128399
S'columnar_3D'
p128400
sS'required'
p128401
I00
sS'group_name'
p128402
Nsa(dp128403
S'description'
p128404
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128405
sS'cpp_type'
p128406
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128407
sS'default'
p128408
g3
sS'name'
p128409
S'control_tags'
p128410
sS'required'
p128411
I00
sS'group_name'
p128412
S'Advanced'
p128413
sa(dp128414
S'description'
p128415
S'Set the enabled status of the MooseObject.\n'
p128416
sS'cpp_type'
p128417
S'bool'
p128418
sS'default'
p128419
S'1'
p128420
sS'name'
p128421
S'enable'
p128422
sS'required'
p128423
I00
sS'group_name'
p128424
S'Advanced'
p128425
sa(dp128426
S'description'
p128427
S'Number of grains being represented by the order parameters\n'
p128428
sS'cpp_type'
p128429
S'unsigned int'
p128430
sS'default'
p128431
g3
sS'name'
p128432
S'grain_num'
p128433
sS'required'
p128434
I01
sS'group_name'
p128435
Nsa(dp128436
S'description'
p128437
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128438
sS'cpp_type'
p128439
S'bool'
p128440
sS'default'
p128441
S'0'
p128442
sS'name'
p128443
S'ignore_uo_dependency'
p128444
sS'required'
p128445
I00
sS'group_name'
p128446
S'Advanced'
p128447
sa(dp128448
S'description'
p128449
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p128450
sS'cpp_type'
p128451
S'double'
p128452
sS'default'
p128453
S'0'
p128454
sS'name'
p128455
S'int_width'
p128456
sS'required'
p128457
I00
sS'group_name'
p128458
Nsa(dp128459
S'description'
p128460
S'The variable value inside the circle\n'
p128461
sS'cpp_type'
p128462
S'double'
p128463
sS'default'
p128464
g3
sS'name'
p128465
S'invalue'
p128466
sS'required'
p128467
I01
sS'group_name'
p128468
Nsa(dp128469
S'description'
p128470
S'The number of bubbles to place\n'
p128471
sS'cpp_type'
p128472
S'unsigned int'
p128473
sS'default'
p128474
g3
sS'name'
p128475
S'numbub'
p128476
sS'required'
p128477
I01
sS'group_name'
p128478
Nsa(dp128479
S'description'
p128480
S'The number of tries\n'
p128481
sS'cpp_type'
p128482
S'unsigned int'
p128483
sS'default'
p128484
S'1000'
p128485
sS'name'
p128486
S'numtries'
p128487
sS'required'
p128488
I00
sS'group_name'
p128489
Nsa(dp128490
S'description'
p128491
S'The index for the current order parameter, not needed if structure_type = voids\n'
p128492
sS'cpp_type'
p128493
S'unsigned int'
p128494
sS'default'
p128495
S'0'
p128496
sS'name'
p128497
S'op_index'
p128498
sS'required'
p128499
I00
sS'group_name'
p128500
Nsa(dp128501
S'description'
p128502
S'Number of order parameters\n'
p128503
sS'cpp_type'
p128504
S'unsigned int'
p128505
sS'default'
p128506
g3
sS'name'
p128507
S'op_num'
p128508
sS'required'
p128509
I01
sS'group_name'
p128510
Nsa(dp128511
S'description'
p128512
S'The variable value outside the circle\n'
p128513
sS'cpp_type'
p128514
S'double'
p128515
sS'default'
p128516
g3
sS'name'
p128517
S'outvalue'
p128518
sS'required'
p128519
I01
sS'group_name'
p128520
Nsa(dp128521
S'description'
p128522
S'Mean radius value for the circles\n'
p128523
sS'cpp_type'
p128524
S'double'
p128525
sS'default'
p128526
g3
sS'name'
p128527
S'radius'
p128528
sS'required'
p128529
I01
sS'group_name'
p128530
Nsa(dp128531
S'description'
p128532
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p128533
sS'cpp_type'
p128534
S'double'
p128535
sS'default'
p128536
S'0'
p128537
sS'name'
p128538
S'radius_variation'
p128539
sS'required'
p128540
I00
sS'group_name'
p128541
Nsa(dp128542
S'name'
p128543
S'radius_variation_type'
p128544
sS'cpp_type'
p128545
S'MooseEnum'
p128546
sS'default'
p128547
S'none'
p128548
sS'description'
p128549
S'Type of distribution that random circle radii will follow\n'
p128550
sS'required'
p128551
I00
sS'options'
p128552
S'uniform normal none'
p128553
sS'group_name'
p128554
Nsa(dp128555
S'description'
p128556
S'The random seed\n'
p128557
sS'cpp_type'
p128558
S'unsigned int'
p128559
sS'default'
p128560
S'12444'
p128561
sS'name'
p128562
S'rand_seed'
p128563
sS'required'
p128564
I00
sS'group_name'
p128565
Nsa(dp128566
S'name'
p128567
S'structure_type'
p128568
sS'cpp_type'
p128569
S'MooseEnum'
p128570
sS'default'
p128571
g3
sS'description'
p128572
S'Which structure type is being initialized, grains or voids\n'
p128573
sS'required'
p128574
I01
sS'options'
p128575
S'grains voids'
p128576
sS'group_name'
p128577
Nsa(dp128578
S'description'
p128579
g3
sS'cpp_type'
p128580
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128581
sS'default'
p128582
S'PolycrystalVoronoiVoidIC'
p128583
sS'name'
p128584
S'type'
p128585
sS'required'
p128586
I00
sS'group_name'
p128587
Nsa(dp128588
S'description'
p128589
S'The variable this initial condition is supposed to provide values for.\n'
p128590
sS'cpp_type'
p128591
S'VariableName'
p128592
sS'default'
p128593
g3
sS'name'
p128594
S'variable'
p128595
sS'required'
p128596
I01
sS'group_name'
p128597
Nsa(dp128598
S'description'
p128599
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p128600
sS'cpp_type'
p128601
S'bool'
p128602
sS'default'
p128603
S'0'
p128604
sS'name'
p128605
S'zero_gradient'
p128606
sS'required'
p128607
I00
sS'group_name'
p128608
NsasS'name'
p128609
S'/Variables/*/InitialCondition/<type>/PolycrystalVoronoiVoidIC'
p128610
sa(dp128611
S'description'
p128612
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p128613
sS'subblocks'
p128614
NsS'parameters'
p128615
(lp128616
(dp128617
S'description'
p128618
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128619
sS'cpp_type'
p128620
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128621
sS'default'
p128622
g3
sS'name'
p128623
S'block'
p128624
sS'required'
p128625
I00
sS'group_name'
p128626
Nsa(dp128627
S'description'
p128628
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128629
sS'cpp_type'
p128630
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128631
sS'default'
p128632
g3
sS'name'
p128633
S'boundary'
p128634
sS'required'
p128635
I00
sS'group_name'
p128636
Nsa(dp128637
S'description'
p128638
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128639
sS'cpp_type'
p128640
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128641
sS'default'
p128642
g3
sS'name'
p128643
S'control_tags'
p128644
sS'required'
p128645
I00
sS'group_name'
p128646
S'Advanced'
p128647
sa(dp128648
S'description'
p128649
S'Set the enabled status of the MooseObject.\n'
p128650
sS'cpp_type'
p128651
S'bool'
p128652
sS'default'
p128653
S'1'
p128654
sS'name'
p128655
S'enable'
p128656
sS'required'
p128657
I00
sS'group_name'
p128658
S'Advanced'
p128659
sa(dp128660
S'description'
p128661
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128662
sS'cpp_type'
p128663
S'bool'
p128664
sS'default'
p128665
S'0'
p128666
sS'name'
p128667
S'ignore_uo_dependency'
p128668
sS'required'
p128669
I00
sS'group_name'
p128670
S'Advanced'
p128671
sa(dp128672
S'description'
p128673
g3
sS'cpp_type'
p128674
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128675
sS'default'
p128676
S'RampIC'
p128677
sS'name'
p128678
S'type'
p128679
sS'required'
p128680
I00
sS'group_name'
p128681
Nsa(dp128682
S'description'
p128683
S'The value on left (xmin) boundary.\n'
p128684
sS'cpp_type'
p128685
S'double'
p128686
sS'default'
p128687
g3
sS'name'
p128688
S'value_left'
p128689
sS'required'
p128690
I01
sS'group_name'
p128691
Nsa(dp128692
S'description'
p128693
S'The value on right (xmax) boundary.\n'
p128694
sS'cpp_type'
p128695
S'double'
p128696
sS'default'
p128697
g3
sS'name'
p128698
S'value_right'
p128699
sS'required'
p128700
I01
sS'group_name'
p128701
Nsa(dp128702
S'description'
p128703
S'The variable this initial condition is supposed to provide values for.\n'
p128704
sS'cpp_type'
p128705
S'VariableName'
p128706
sS'default'
p128707
g3
sS'name'
p128708
S'variable'
p128709
sS'required'
p128710
I01
sS'group_name'
p128711
NsasS'name'
p128712
S'/Variables/*/InitialCondition/<type>/RampIC'
p128713
sa(dp128714
S'description'
p128715
g3
sS'subblocks'
p128716
NsS'parameters'
p128717
(lp128718
(dp128719
S'description'
p128720
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128721
sS'cpp_type'
p128722
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128723
sS'default'
p128724
g3
sS'name'
p128725
S'block'
p128726
sS'required'
p128727
I00
sS'group_name'
p128728
Nsa(dp128729
S'description'
p128730
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128731
sS'cpp_type'
p128732
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128733
sS'default'
p128734
g3
sS'name'
p128735
S'boundary'
p128736
sS'required'
p128737
I00
sS'group_name'
p128738
Nsa(dp128739
S'description'
p128740
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128741
sS'cpp_type'
p128742
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128743
sS'default'
p128744
g3
sS'name'
p128745
S'control_tags'
p128746
sS'required'
p128747
I00
sS'group_name'
p128748
S'Advanced'
p128749
sa(dp128750
S'description'
p128751
S'Set the enabled status of the MooseObject.\n'
p128752
sS'cpp_type'
p128753
S'bool'
p128754
sS'default'
p128755
S'1'
p128756
sS'name'
p128757
S'enable'
p128758
sS'required'
p128759
I00
sS'group_name'
p128760
S'Advanced'
p128761
sa(dp128762
S'description'
p128763
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128764
sS'cpp_type'
p128765
S'bool'
p128766
sS'default'
p128767
S'0'
p128768
sS'name'
p128769
S'ignore_uo_dependency'
p128770
sS'required'
p128771
I00
sS'group_name'
p128772
S'Advanced'
p128773
sa(dp128774
S'description'
p128775
S'Upper bound of the randomly generated values\n'
p128776
sS'cpp_type'
p128777
S'double'
p128778
sS'default'
p128779
S'1'
p128780
sS'name'
p128781
S'max'
p128782
sS'required'
p128783
I00
sS'group_name'
p128784
Nsa(dp128785
S'description'
p128786
S'Lower bound of the randomly generated values\n'
p128787
sS'cpp_type'
p128788
S'double'
p128789
sS'default'
p128790
S'0'
p128791
sS'name'
p128792
S'min'
p128793
sS'required'
p128794
I00
sS'group_name'
p128795
Nsa(dp128796
S'description'
p128797
S'Seed value for the random number generator\n'
p128798
sS'cpp_type'
p128799
S'unsigned int'
p128800
sS'default'
p128801
S'0'
p128802
sS'name'
p128803
S'seed'
p128804
sS'required'
p128805
I00
sS'group_name'
p128806
Nsa(dp128807
S'description'
p128808
g3
sS'cpp_type'
p128809
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128810
sS'default'
p128811
S'RandomIC'
p128812
sS'name'
p128813
S'type'
p128814
sS'required'
p128815
I00
sS'group_name'
p128816
Nsa(dp128817
S'description'
p128818
S'The variable this initial condition is supposed to provide values for.\n'
p128819
sS'cpp_type'
p128820
S'VariableName'
p128821
sS'default'
p128822
g3
sS'name'
p128823
S'variable'
p128824
sS'required'
p128825
I01
sS'group_name'
p128826
NsasS'name'
p128827
S'/Variables/*/InitialCondition/<type>/RandomIC'
p128828
sa(dp128829
S'description'
p128830
g3
sS'subblocks'
p128831
NsS'parameters'
p128832
(lp128833
(dp128834
S'description'
p128835
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128836
sS'cpp_type'
p128837
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128838
sS'default'
p128839
g3
sS'name'
p128840
S'block'
p128841
sS'required'
p128842
I00
sS'group_name'
p128843
Nsa(dp128844
S'description'
p128845
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128846
sS'cpp_type'
p128847
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128848
sS'default'
p128849
g3
sS'name'
p128850
S'boundary'
p128851
sS'required'
p128852
I00
sS'group_name'
p128853
Nsa(dp128854
S'description'
p128855
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128856
sS'cpp_type'
p128857
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128858
sS'default'
p128859
g3
sS'name'
p128860
S'control_tags'
p128861
sS'required'
p128862
I00
sS'group_name'
p128863
S'Advanced'
p128864
sa(dp128865
S'description'
p128866
S'The EBSDReader object holding the EBSD data\n'
p128867
sS'cpp_type'
p128868
S'UserObjectName'
p128869
sS'default'
p128870
g3
sS'name'
p128871
S'ebsd_reader'
p128872
sS'required'
p128873
I01
sS'group_name'
p128874
Nsa(dp128875
S'description'
p128876
S'Set the enabled status of the MooseObject.\n'
p128877
sS'cpp_type'
p128878
S'bool'
p128879
sS'default'
p128880
S'1'
p128881
sS'name'
p128882
S'enable'
p128883
sS'required'
p128884
I00
sS'group_name'
p128885
S'Advanced'
p128886
sa(dp128887
S'description'
p128888
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p128889
sS'cpp_type'
p128890
S'bool'
p128891
sS'default'
p128892
S'0'
p128893
sS'name'
p128894
S'ignore_uo_dependency'
p128895
sS'required'
p128896
I00
sS'group_name'
p128897
S'Advanced'
p128898
sa(dp128899
S'description'
p128900
S'EBSD phase number this variable is to represent\n'
p128901
sS'cpp_type'
p128902
S'unsigned int'
p128903
sS'default'
p128904
g3
sS'name'
p128905
S'phase'
p128906
sS'required'
p128907
I01
sS'group_name'
p128908
Nsa(dp128909
S'description'
p128910
g3
sS'cpp_type'
p128911
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128912
sS'default'
p128913
S'ReconPhaseVarIC'
p128914
sS'name'
p128915
S'type'
p128916
sS'required'
p128917
I00
sS'group_name'
p128918
Nsa(dp128919
S'description'
p128920
S'The variable this initial condition is supposed to provide values for.\n'
p128921
sS'cpp_type'
p128922
S'VariableName'
p128923
sS'default'
p128924
g3
sS'name'
p128925
S'variable'
p128926
sS'required'
p128927
I01
sS'group_name'
p128928
NsasS'name'
p128929
S'/Variables/*/InitialCondition/<type>/ReconPhaseVarIC'
p128930
sa(dp128931
S'description'
p128932
g3
sS'subblocks'
p128933
NsS'parameters'
p128934
(lp128935
(dp128936
S'description'
p128937
g3
sS'cpp_type'
p128938
S'bool'
p128939
sS'default'
p128940
S'0'
p128941
sS'name'
p128942
S'all_op_elemental'
p128943
sS'required'
p128944
I00
sS'group_name'
p128945
Nsa(dp128946
S'description'
p128947
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128948
sS'cpp_type'
p128949
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128950
sS'default'
p128951
g3
sS'name'
p128952
S'block'
p128953
sS'required'
p128954
I00
sS'group_name'
p128955
Nsa(dp128956
S'description'
p128957
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128958
sS'cpp_type'
p128959
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128960
sS'default'
p128961
g3
sS'name'
p128962
S'boundary'
p128963
sS'required'
p128964
I00
sS'group_name'
p128965
Nsa(dp128966
S'name'
p128967
S'coloring_algorithm'
p128968
sS'cpp_type'
p128969
S'MooseEnum'
p128970
sS'default'
p128971
S'legacy'
p128972
sS'description'
p128973
S'The grain neighbor graph coloring algorithm to use. "legacy" is the original algorithm which does not guarantee a valid coloring. "bt" is a simple backtracking algorithm which will produce a valid coloring but has potential exponential run time. The remaining algorithms require PETSc but are recommended for larger problems (See MatColoringType)\n'
p128974
sS'required'
p128975
I00
sS'options'
p128976
S'legacy bt jp power greedy'
p128977
sS'group_name'
p128978
Nsa(dp128979
S'description'
p128980
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128981
sS'cpp_type'
p128982
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128983
sS'default'
p128984
g3
sS'name'
p128985
S'control_tags'
p128986
sS'required'
p128987
I00
sS'group_name'
p128988
S'Advanced'
p128989
sa(dp128990
S'description'
p128991
S'The EBSDReader GeneralUserObject\n'
p128992
sS'cpp_type'
p128993
S'UserObjectName'
p128994
sS'default'
p128995
g3
sS'name'
p128996
S'ebsd_reader'
p128997
sS'required'
p128998
I01
sS'group_name'
p128999
Nsa(dp129000
S'description'
p129001
S'Set the enabled status of the MooseObject.\n'
p129002
sS'cpp_type'
p129003
S'bool'
p129004
sS'default'
p129005
S'1'
p129006
sS'name'
p129007
S'enable'
p129008
sS'required'
p129009
I00
sS'group_name'
p129010
S'Advanced'
p129011
sa(dp129012
S'description'
p129013
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129014
sS'cpp_type'
p129015
S'bool'
p129016
sS'default'
p129017
S'0'
p129018
sS'name'
p129019
S'ignore_uo_dependency'
p129020
sS'required'
p129021
I00
sS'group_name'
p129022
S'Advanced'
p129023
sa(dp129024
S'description'
p129025
S'The index for the current order parameter\n'
p129026
sS'cpp_type'
p129027
S'unsigned int'
p129028
sS'default'
p129029
g3
sS'name'
p129030
S'op_index'
p129031
sS'required'
p129032
I01
sS'group_name'
p129033
Nsa(dp129034
S'description'
p129035
S'Specifies the number of order parameters to create\n'
p129036
sS'cpp_type'
p129037
S'unsigned int'
p129038
sS'default'
p129039
g3
sS'name'
p129040
S'op_num'
p129041
sS'required'
p129042
I01
sS'group_name'
p129043
Nsa(dp129044
S'description'
p129045
S'EBSD phase number to be assigned to this grain\n'
p129046
sS'cpp_type'
p129047
S'unsigned int'
p129048
sS'default'
p129049
g3
sS'name'
p129050
S'phase'
p129051
sS'required'
p129052
I00
sS'group_name'
p129053
Nsa(dp129054
S'description'
p129055
g3
sS'cpp_type'
p129056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129057
sS'default'
p129058
S'ReconVarIC'
p129059
sS'name'
p129060
S'type'
p129061
sS'required'
p129062
I00
sS'group_name'
p129063
Nsa(dp129064
S'description'
p129065
S'The variable this initial condition is supposed to provide values for.\n'
p129066
sS'cpp_type'
p129067
S'VariableName'
p129068
sS'default'
p129069
g3
sS'name'
p129070
S'variable'
p129071
sS'required'
p129072
I01
sS'group_name'
p129073
NsasS'name'
p129074
S'/Variables/*/InitialCondition/<type>/ReconVarIC'
p129075
sa(dp129076
S'description'
p129077
S'Random noise with different min/max inside/outside of a bounding box\n'
p129078
sS'subblocks'
p129079
NsS'parameters'
p129080
(lp129081
(dp129082
S'description'
p129083
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129084
sS'cpp_type'
p129085
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129086
sS'default'
p129087
g3
sS'name'
p129088
S'block'
p129089
sS'required'
p129090
I00
sS'group_name'
p129091
Nsa(dp129092
S'description'
p129093
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129094
sS'cpp_type'
p129095
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129096
sS'default'
p129097
g3
sS'name'
p129098
S'boundary'
p129099
sS'required'
p129100
I00
sS'group_name'
p129101
Nsa(dp129102
S'description'
p129103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129104
sS'cpp_type'
p129105
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129106
sS'default'
p129107
g3
sS'name'
p129108
S'control_tags'
p129109
sS'required'
p129110
I00
sS'group_name'
p129111
S'Advanced'
p129112
sa(dp129113
S'description'
p129114
S'Set the enabled status of the MooseObject.\n'
p129115
sS'cpp_type'
p129116
S'bool'
p129117
sS'default'
p129118
S'1'
p129119
sS'name'
p129120
S'enable'
p129121
sS'required'
p129122
I00
sS'group_name'
p129123
S'Advanced'
p129124
sa(dp129125
S'description'
p129126
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129127
sS'cpp_type'
p129128
S'bool'
p129129
sS'default'
p129130
S'0'
p129131
sS'name'
p129132
S'ignore_uo_dependency'
p129133
sS'required'
p129134
I00
sS'group_name'
p129135
S'Advanced'
p129136
sa(dp129137
S'description'
p129138
S'The min value of the variable invalue the box\n'
p129139
sS'cpp_type'
p129140
S'double'
p129141
sS'default'
p129142
S'0'
p129143
sS'name'
p129144
S'mn_invalue'
p129145
sS'required'
p129146
I00
sS'group_name'
p129147
Nsa(dp129148
S'description'
p129149
S'The min value of the variable outvalue the box\n'
p129150
sS'cpp_type'
p129151
S'double'
p129152
sS'default'
p129153
S'0'
p129154
sS'name'
p129155
S'mn_outvalue'
p129156
sS'required'
p129157
I00
sS'group_name'
p129158
Nsa(dp129159
S'description'
p129160
S'The max value of the variable invalue the box\n'
p129161
sS'cpp_type'
p129162
S'double'
p129163
sS'default'
p129164
g3
sS'name'
p129165
S'mx_invalue'
p129166
sS'required'
p129167
I01
sS'group_name'
p129168
Nsa(dp129169
S'description'
p129170
S'The max value of the variable outvalue the box\n'
p129171
sS'cpp_type'
p129172
S'double'
p129173
sS'default'
p129174
g3
sS'name'
p129175
S'mx_outvalue'
p129176
sS'required'
p129177
I01
sS'group_name'
p129178
Nsa(dp129179
S'description'
p129180
g3
sS'cpp_type'
p129181
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129182
sS'default'
p129183
S'RndBoundingBoxIC'
p129184
sS'name'
p129185
S'type'
p129186
sS'required'
p129187
I00
sS'group_name'
p129188
Nsa(dp129189
S'description'
p129190
S'The variable this initial condition is supposed to provide values for.\n'
p129191
sS'cpp_type'
p129192
S'VariableName'
p129193
sS'default'
p129194
g3
sS'name'
p129195
S'variable'
p129196
sS'required'
p129197
I01
sS'group_name'
p129198
Nsa(dp129199
S'description'
p129200
S'The x coordinate of the lower left-hand corner of the box\n'
p129201
sS'cpp_type'
p129202
S'double'
p129203
sS'default'
p129204
g3
sS'name'
p129205
S'x1'
p129206
sS'required'
p129207
I01
sS'group_name'
p129208
Nsa(dp129209
S'description'
p129210
S'The x coordinate of the upper right-hand corner of the box\n'
p129211
sS'cpp_type'
p129212
S'double'
p129213
sS'default'
p129214
g3
sS'name'
p129215
S'x2'
p129216
sS'required'
p129217
I01
sS'group_name'
p129218
Nsa(dp129219
S'description'
p129220
S'The y coordinate of the lower left-hand corner of the box\n'
p129221
sS'cpp_type'
p129222
S'double'
p129223
sS'default'
p129224
g3
sS'name'
p129225
S'y1'
p129226
sS'required'
p129227
I01
sS'group_name'
p129228
Nsa(dp129229
S'description'
p129230
S'The y coordinate of the upper right-hand corner of the box\n'
p129231
sS'cpp_type'
p129232
S'double'
p129233
sS'default'
p129234
g3
sS'name'
p129235
S'y2'
p129236
sS'required'
p129237
I01
sS'group_name'
p129238
Nsa(dp129239
S'description'
p129240
S'The z coordinate of the lower left-hand corner of the box\n'
p129241
sS'cpp_type'
p129242
S'double'
p129243
sS'default'
p129244
S'0'
p129245
sS'name'
p129246
S'z1'
p129247
sS'required'
p129248
I00
sS'group_name'
p129249
Nsa(dp129250
S'description'
p129251
S'The z coordinate of the upper right-hand corner of the box\n'
p129252
sS'cpp_type'
p129253
S'double'
p129254
sS'default'
p129255
S'0'
p129256
sS'name'
p129257
S'z2'
p129258
sS'required'
p129259
I00
sS'group_name'
p129260
NsasS'name'
p129261
S'/Variables/*/InitialCondition/<type>/RndBoundingBoxIC'
p129262
sa(dp129263
S'description'
p129264
S'Random noise with different min/max inside/outside of a smooth circle\n'
p129265
sS'subblocks'
p129266
NsS'parameters'
p129267
(lp129268
(dp129269
S'description'
p129270
S'in 3D, whether the objects are spheres or columns\n'
p129271
sS'cpp_type'
p129272
S'bool'
p129273
sS'default'
p129274
S'1'
p129275
sS'name'
p129276
S'3D_spheres'
p129277
sS'required'
p129278
I00
sS'group_name'
p129279
Nsa(dp129280
S'description'
p129281
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129282
sS'cpp_type'
p129283
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129284
sS'default'
p129285
g3
sS'name'
p129286
S'block'
p129287
sS'required'
p129288
I00
sS'group_name'
p129289
Nsa(dp129290
S'description'
p129291
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129292
sS'cpp_type'
p129293
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129294
sS'default'
p129295
g3
sS'name'
p129296
S'boundary'
p129297
sS'required'
p129298
I00
sS'group_name'
p129299
Nsa(dp129300
S'description'
p129301
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129302
sS'cpp_type'
p129303
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129304
sS'default'
p129305
g3
sS'name'
p129306
S'control_tags'
p129307
sS'required'
p129308
I00
sS'group_name'
p129309
S'Advanced'
p129310
sa(dp129311
S'description'
p129312
S'Set the enabled status of the MooseObject.\n'
p129313
sS'cpp_type'
p129314
S'bool'
p129315
sS'default'
p129316
S'1'
p129317
sS'name'
p129318
S'enable'
p129319
sS'required'
p129320
I00
sS'group_name'
p129321
S'Advanced'
p129322
sa(dp129323
S'description'
p129324
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129325
sS'cpp_type'
p129326
S'bool'
p129327
sS'default'
p129328
S'0'
p129329
sS'name'
p129330
S'ignore_uo_dependency'
p129331
sS'required'
p129332
I00
sS'group_name'
p129333
S'Advanced'
p129334
sa(dp129335
S'description'
p129336
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129337
sS'cpp_type'
p129338
S'double'
p129339
sS'default'
p129340
S'0'
p129341
sS'name'
p129342
S'int_width'
p129343
sS'required'
p129344
I00
sS'group_name'
p129345
Nsa(dp129346
S'description'
p129347
S'The variable value inside the circle\n'
p129348
sS'cpp_type'
p129349
S'double'
p129350
sS'default'
p129351
g3
sS'name'
p129352
S'invalue'
p129353
sS'required'
p129354
I01
sS'group_name'
p129355
Nsa(dp129356
S'description'
p129357
S'The variable value outside the circle\n'
p129358
sS'cpp_type'
p129359
S'double'
p129360
sS'default'
p129361
g3
sS'name'
p129362
S'outvalue'
p129363
sS'required'
p129364
I01
sS'group_name'
p129365
Nsa(dp129366
S'description'
p129367
S'The radius of a circle\n'
p129368
sS'cpp_type'
p129369
S'double'
p129370
sS'default'
p129371
g3
sS'name'
p129372
S'radius'
p129373
sS'required'
p129374
I01
sS'group_name'
p129375
Nsa(dp129376
S'description'
p129377
S'Seed value for the random number generator\n'
p129378
sS'cpp_type'
p129379
S'unsigned int'
p129380
sS'default'
p129381
S'12345'
p129382
sS'name'
p129383
S'rand_seed'
p129384
sS'required'
p129385
I00
sS'group_name'
p129386
Nsa(dp129387
S'description'
p129388
g3
sS'cpp_type'
p129389
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129390
sS'default'
p129391
S'RndSmoothCircleIC'
p129392
sS'name'
p129393
S'type'
p129394
sS'required'
p129395
I00
sS'group_name'
p129396
Nsa(dp129397
S'description'
p129398
S'The variable this initial condition is supposed to provide values for.\n'
p129399
sS'cpp_type'
p129400
S'VariableName'
p129401
sS'default'
p129402
g3
sS'name'
p129403
S'variable'
p129404
sS'required'
p129405
I01
sS'group_name'
p129406
Nsa(dp129407
S'description'
p129408
S'Plus or minus this amount on the invalue\n'
p129409
sS'cpp_type'
p129410
S'double'
p129411
sS'default'
p129412
g3
sS'name'
p129413
S'variation_invalue'
p129414
sS'required'
p129415
I01
sS'group_name'
p129416
Nsa(dp129417
S'description'
p129418
S'Plus or minus this amount on the outvalue\n'
p129419
sS'cpp_type'
p129420
S'double'
p129421
sS'default'
p129422
g3
sS'name'
p129423
S'variation_outvalue'
p129424
sS'required'
p129425
I01
sS'group_name'
p129426
Nsa(dp129427
S'description'
p129428
S'The x coordinate of the circle center\n'
p129429
sS'cpp_type'
p129430
S'double'
p129431
sS'default'
p129432
g3
sS'name'
p129433
S'x1'
p129434
sS'required'
p129435
I01
sS'group_name'
p129436
Nsa(dp129437
S'description'
p129438
S'The y coordinate of the circle center\n'
p129439
sS'cpp_type'
p129440
S'double'
p129441
sS'default'
p129442
g3
sS'name'
p129443
S'y1'
p129444
sS'required'
p129445
I01
sS'group_name'
p129446
Nsa(dp129447
S'description'
p129448
S'The z coordinate of the circle center\n'
p129449
sS'cpp_type'
p129450
S'double'
p129451
sS'default'
p129452
S'0'
p129453
sS'name'
p129454
S'z1'
p129455
sS'required'
p129456
I00
sS'group_name'
p129457
Nsa(dp129458
S'description'
p129459
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p129460
sS'cpp_type'
p129461
S'bool'
p129462
sS'default'
p129463
S'0'
p129464
sS'name'
p129465
S'zero_gradient'
p129466
sS'required'
p129467
I00
sS'group_name'
p129468
NsasS'name'
p129469
S'/Variables/*/InitialCondition/<type>/RndSmoothCircleIC'
p129470
sa(dp129471
S'description'
p129472
g3
sS'subblocks'
p129473
NsS'parameters'
p129474
(lp129475
(dp129476
S'description'
p129477
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129478
sS'cpp_type'
p129479
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129480
sS'default'
p129481
g3
sS'name'
p129482
S'control_tags'
p129483
sS'required'
p129484
I00
sS'group_name'
p129485
S'Advanced'
p129486
sa(dp129487
S'description'
p129488
S'Set the enabled status of the MooseObject.\n'
p129489
sS'cpp_type'
p129490
S'bool'
p129491
sS'default'
p129492
S'1'
p129493
sS'name'
p129494
S'enable'
p129495
sS'required'
p129496
I00
sS'group_name'
p129497
S'Advanced'
p129498
sa(dp129499
S'description'
p129500
g3
sS'cpp_type'
p129501
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129502
sS'default'
p129503
S'ScalarComponentIC'
p129504
sS'name'
p129505
S'type'
p129506
sS'required'
p129507
I00
sS'group_name'
p129508
Nsa(dp129509
S'description'
p129510
S'Initial values to initialize the scalar variable.\n'
p129511
sS'cpp_type'
p129512
S'std::vector<double, std::allocator<double> >'
p129513
sS'default'
p129514
g3
sS'name'
p129515
S'values'
p129516
sS'required'
p129517
I01
sS'group_name'
p129518
Nsa(dp129519
S'description'
p129520
S'The variable this initial condition is supposed to provide values for.\n'
p129521
sS'cpp_type'
p129522
S'VariableName'
p129523
sS'default'
p129524
g3
sS'name'
p129525
S'variable'
p129526
sS'required'
p129527
I00
sS'group_name'
p129528
NsasS'name'
p129529
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p129530
sa(dp129531
S'description'
p129532
g3
sS'subblocks'
p129533
NsS'parameters'
p129534
(lp129535
(dp129536
S'description'
p129537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129538
sS'cpp_type'
p129539
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129540
sS'default'
p129541
g3
sS'name'
p129542
S'control_tags'
p129543
sS'required'
p129544
I00
sS'group_name'
p129545
S'Advanced'
p129546
sa(dp129547
S'description'
p129548
S'Set the enabled status of the MooseObject.\n'
p129549
sS'cpp_type'
p129550
S'bool'
p129551
sS'default'
p129552
S'1'
p129553
sS'name'
p129554
S'enable'
p129555
sS'required'
p129556
I00
sS'group_name'
p129557
S'Advanced'
p129558
sa(dp129559
S'description'
p129560
g3
sS'cpp_type'
p129561
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129562
sS'default'
p129563
S'ScalarConstantIC'
p129564
sS'name'
p129565
S'type'
p129566
sS'required'
p129567
I00
sS'group_name'
p129568
Nsa(dp129569
S'description'
p129570
g3
sS'cpp_type'
p129571
S'double'
p129572
sS'default'
p129573
S'0'
p129574
sS'name'
p129575
S'value'
p129576
sS'required'
p129577
I00
sS'group_name'
p129578
Nsa(dp129579
S'description'
p129580
S'The variable this initial condition is supposed to provide values for.\n'
p129581
sS'cpp_type'
p129582
S'VariableName'
p129583
sS'default'
p129584
g3
sS'name'
p129585
S'variable'
p129586
sS'required'
p129587
I00
sS'group_name'
p129588
NsasS'name'
p129589
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p129590
sa(dp129591
S'description'
p129592
S'Circle with a smooth interface\n'
p129593
sS'subblocks'
p129594
NsS'parameters'
p129595
(lp129596
(dp129597
S'description'
p129598
S'in 3D, whether the objects are spheres or columns\n'
p129599
sS'cpp_type'
p129600
S'bool'
p129601
sS'default'
p129602
S'1'
p129603
sS'name'
p129604
S'3D_spheres'
p129605
sS'required'
p129606
I00
sS'group_name'
p129607
Nsa(dp129608
S'description'
p129609
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129610
sS'cpp_type'
p129611
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129612
sS'default'
p129613
g3
sS'name'
p129614
S'block'
p129615
sS'required'
p129616
I00
sS'group_name'
p129617
Nsa(dp129618
S'description'
p129619
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129620
sS'cpp_type'
p129621
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129622
sS'default'
p129623
g3
sS'name'
p129624
S'boundary'
p129625
sS'required'
p129626
I00
sS'group_name'
p129627
Nsa(dp129628
S'description'
p129629
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129630
sS'cpp_type'
p129631
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129632
sS'default'
p129633
g3
sS'name'
p129634
S'control_tags'
p129635
sS'required'
p129636
I00
sS'group_name'
p129637
S'Advanced'
p129638
sa(dp129639
S'description'
p129640
S'Set the enabled status of the MooseObject.\n'
p129641
sS'cpp_type'
p129642
S'bool'
p129643
sS'default'
p129644
S'1'
p129645
sS'name'
p129646
S'enable'
p129647
sS'required'
p129648
I00
sS'group_name'
p129649
S'Advanced'
p129650
sa(dp129651
S'description'
p129652
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129653
sS'cpp_type'
p129654
S'bool'
p129655
sS'default'
p129656
S'0'
p129657
sS'name'
p129658
S'ignore_uo_dependency'
p129659
sS'required'
p129660
I00
sS'group_name'
p129661
S'Advanced'
p129662
sa(dp129663
S'description'
p129664
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129665
sS'cpp_type'
p129666
S'double'
p129667
sS'default'
p129668
S'0'
p129669
sS'name'
p129670
S'int_width'
p129671
sS'required'
p129672
I00
sS'group_name'
p129673
Nsa(dp129674
S'description'
p129675
S'The variable value inside the circle\n'
p129676
sS'cpp_type'
p129677
S'double'
p129678
sS'default'
p129679
g3
sS'name'
p129680
S'invalue'
p129681
sS'required'
p129682
I01
sS'group_name'
p129683
Nsa(dp129684
S'description'
p129685
S'The variable value outside the circle\n'
p129686
sS'cpp_type'
p129687
S'double'
p129688
sS'default'
p129689
g3
sS'name'
p129690
S'outvalue'
p129691
sS'required'
p129692
I01
sS'group_name'
p129693
Nsa(dp129694
S'description'
p129695
S'The radius of a circle\n'
p129696
sS'cpp_type'
p129697
S'double'
p129698
sS'default'
p129699
g3
sS'name'
p129700
S'radius'
p129701
sS'required'
p129702
I01
sS'group_name'
p129703
Nsa(dp129704
S'description'
p129705
S'Seed value for the random number generator\n'
p129706
sS'cpp_type'
p129707
S'unsigned int'
p129708
sS'default'
p129709
S'12345'
p129710
sS'name'
p129711
S'rand_seed'
p129712
sS'required'
p129713
I00
sS'group_name'
p129714
Nsa(dp129715
S'description'
p129716
g3
sS'cpp_type'
p129717
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129718
sS'default'
p129719
S'SmoothCircleIC'
p129720
sS'name'
p129721
S'type'
p129722
sS'required'
p129723
I00
sS'group_name'
p129724
Nsa(dp129725
S'description'
p129726
S'The variable this initial condition is supposed to provide values for.\n'
p129727
sS'cpp_type'
p129728
S'VariableName'
p129729
sS'default'
p129730
g3
sS'name'
p129731
S'variable'
p129732
sS'required'
p129733
I01
sS'group_name'
p129734
Nsa(dp129735
S'description'
p129736
S'The x coordinate of the circle center\n'
p129737
sS'cpp_type'
p129738
S'double'
p129739
sS'default'
p129740
g3
sS'name'
p129741
S'x1'
p129742
sS'required'
p129743
I01
sS'group_name'
p129744
Nsa(dp129745
S'description'
p129746
S'The y coordinate of the circle center\n'
p129747
sS'cpp_type'
p129748
S'double'
p129749
sS'default'
p129750
g3
sS'name'
p129751
S'y1'
p129752
sS'required'
p129753
I01
sS'group_name'
p129754
Nsa(dp129755
S'description'
p129756
S'The z coordinate of the circle center\n'
p129757
sS'cpp_type'
p129758
S'double'
p129759
sS'default'
p129760
S'0'
p129761
sS'name'
p129762
S'z1'
p129763
sS'required'
p129764
I00
sS'group_name'
p129765
Nsa(dp129766
S'description'
p129767
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p129768
sS'cpp_type'
p129769
S'bool'
p129770
sS'default'
p129771
S'0'
p129772
sS'name'
p129773
S'zero_gradient'
p129774
sS'required'
p129775
I00
sS'group_name'
p129776
NsasS'name'
p129777
S'/Variables/*/InitialCondition/<type>/SmoothCircleIC'
p129778
sa(dp129779
S'description'
p129780
S'Superellipsoid with a smooth interface\n'
p129781
sS'subblocks'
p129782
NsS'parameters'
p129783
(lp129784
(dp129785
S'description'
p129786
S'Semiaxis a of the superellipsoid\n'
p129787
sS'cpp_type'
p129788
S'double'
p129789
sS'default'
p129790
g3
sS'name'
p129791
S'a'
p129792
sS'required'
p129793
I01
sS'group_name'
p129794
Nsa(dp129795
S'description'
p129796
S'Semiaxis b of the superellipsoid\n'
p129797
sS'cpp_type'
p129798
S'double'
p129799
sS'default'
p129800
g3
sS'name'
p129801
S'b'
p129802
sS'required'
p129803
I01
sS'group_name'
p129804
Nsa(dp129805
S'description'
p129806
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129807
sS'cpp_type'
p129808
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129809
sS'default'
p129810
g3
sS'name'
p129811
S'block'
p129812
sS'required'
p129813
I00
sS'group_name'
p129814
Nsa(dp129815
S'description'
p129816
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p129817
sS'cpp_type'
p129818
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p129819
sS'default'
p129820
g3
sS'name'
p129821
S'boundary'
p129822
sS'required'
p129823
I00
sS'group_name'
p129824
Nsa(dp129825
S'description'
p129826
S'Semiaxis c of the superellipsoid\n'
p129827
sS'cpp_type'
p129828
S'double'
p129829
sS'default'
p129830
S'1'
p129831
sS'name'
p129832
S'c'
p129833
sS'required'
p129834
I00
sS'group_name'
p129835
Nsa(dp129836
S'description'
p129837
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129838
sS'cpp_type'
p129839
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129840
sS'default'
p129841
g3
sS'name'
p129842
S'control_tags'
p129843
sS'required'
p129844
I00
sS'group_name'
p129845
S'Advanced'
p129846
sa(dp129847
S'description'
p129848
S'Set the enabled status of the MooseObject.\n'
p129849
sS'cpp_type'
p129850
S'bool'
p129851
sS'default'
p129852
S'1'
p129853
sS'name'
p129854
S'enable'
p129855
sS'required'
p129856
I00
sS'group_name'
p129857
S'Advanced'
p129858
sa(dp129859
S'description'
p129860
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p129861
sS'cpp_type'
p129862
S'bool'
p129863
sS'default'
p129864
S'0'
p129865
sS'name'
p129866
S'ignore_uo_dependency'
p129867
sS'required'
p129868
I00
sS'group_name'
p129869
S'Advanced'
p129870
sa(dp129871
S'description'
p129872
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p129873
sS'cpp_type'
p129874
S'double'
p129875
sS'default'
p129876
S'0'
p129877
sS'name'
p129878
S'int_width'
p129879
sS'required'
p129880
I00
sS'group_name'
p129881
Nsa(dp129882
S'description'
p129883
S'The variable value inside the superellipsoid\n'
p129884
sS'cpp_type'
p129885
S'double'
p129886
sS'default'
p129887
g3
sS'name'
p129888
S'invalue'
p129889
sS'required'
p129890
I01
sS'group_name'
p129891
Nsa(dp129892
S'description'
p129893
S'Exponent n of the superellipsoid\n'
p129894
sS'cpp_type'
p129895
S'double'
p129896
sS'default'
p129897
g3
sS'name'
p129898
S'n'
p129899
sS'required'
p129900
I01
sS'group_name'
p129901
Nsa(dp129902
S'description'
p129903
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p129904
sS'cpp_type'
p129905
S'double'
p129906
sS'default'
p129907
g3
sS'name'
p129908
S'nestedvalue'
p129909
sS'required'
p129910
I00
sS'group_name'
p129911
Nsa(dp129912
S'description'
p129913
S'The variable value outside the superellipsoid\n'
p129914
sS'cpp_type'
p129915
S'double'
p129916
sS'default'
p129917
g3
sS'name'
p129918
S'outvalue'
p129919
sS'required'
p129920
I01
sS'group_name'
p129921
Nsa(dp129922
S'description'
p129923
S'Seed value for the random number generator\n'
p129924
sS'cpp_type'
p129925
S'unsigned int'
p129926
sS'default'
p129927
S'12345'
p129928
sS'name'
p129929
S'rand_seed'
p129930
sS'required'
p129931
I00
sS'group_name'
p129932
Nsa(dp129933
S'description'
p129934
g3
sS'cpp_type'
p129935
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129936
sS'default'
p129937
S'SmoothSuperellipsoidIC'
p129938
sS'name'
p129939
S'type'
p129940
sS'required'
p129941
I00
sS'group_name'
p129942
Nsa(dp129943
S'description'
p129944
S'The variable this initial condition is supposed to provide values for.\n'
p129945
sS'cpp_type'
p129946
S'VariableName'
p129947
sS'default'
p129948
g3
sS'name'
p129949
S'variable'
p129950
sS'required'
p129951
I01
sS'group_name'
p129952
Nsa(dp129953
S'description'
p129954
S'The x coordinate of the superellipsoid center\n'
p129955
sS'cpp_type'
p129956
S'double'
p129957
sS'default'
p129958
g3
sS'name'
p129959
S'x1'
p129960
sS'required'
p129961
I01
sS'group_name'
p129962
Nsa(dp129963
S'description'
p129964
S'The y coordinate of the superellipsoid center\n'
p129965
sS'cpp_type'
p129966
S'double'
p129967
sS'default'
p129968
g3
sS'name'
p129969
S'y1'
p129970
sS'required'
p129971
I01
sS'group_name'
p129972
Nsa(dp129973
S'description'
p129974
S'The z coordinate of the superellipsoid center\n'
p129975
sS'cpp_type'
p129976
S'double'
p129977
sS'default'
p129978
S'0'
p129979
sS'name'
p129980
S'z1'
p129981
sS'required'
p129982
I00
sS'group_name'
p129983
Nsa(dp129984
S'description'
p129985
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p129986
sS'cpp_type'
p129987
S'bool'
p129988
sS'default'
p129989
S'0'
p129990
sS'name'
p129991
S'zero_gradient'
p129992
sS'required'
p129993
I00
sS'group_name'
p129994
NsasS'name'
p129995
S'/Variables/*/InitialCondition/<type>/SmoothSuperellipsoidIC'
p129996
sa(dp129997
S'description'
p129998
S'Multiple smooth circles with manually specified radii and center points\n'
p129999
sS'subblocks'
p130000
NsS'parameters'
p130001
(lp130002
(dp130003
S'description'
p130004
S'in 3D, whether the objects are spheres or columns\n'
p130005
sS'cpp_type'
p130006
S'bool'
p130007
sS'default'
p130008
S'1'
p130009
sS'name'
p130010
S'3D_spheres'
p130011
sS'required'
p130012
I00
sS'group_name'
p130013
Nsa(dp130014
S'description'
p130015
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130016
sS'cpp_type'
p130017
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130018
sS'default'
p130019
g3
sS'name'
p130020
S'block'
p130021
sS'required'
p130022
I00
sS'group_name'
p130023
Nsa(dp130024
S'description'
p130025
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130026
sS'cpp_type'
p130027
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130028
sS'default'
p130029
g3
sS'name'
p130030
S'boundary'
p130031
sS'required'
p130032
I00
sS'group_name'
p130033
Nsa(dp130034
S'description'
p130035
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130036
sS'cpp_type'
p130037
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130038
sS'default'
p130039
g3
sS'name'
p130040
S'control_tags'
p130041
sS'required'
p130042
I00
sS'group_name'
p130043
S'Advanced'
p130044
sa(dp130045
S'description'
p130046
S'Set the enabled status of the MooseObject.\n'
p130047
sS'cpp_type'
p130048
S'bool'
p130049
sS'default'
p130050
S'1'
p130051
sS'name'
p130052
S'enable'
p130053
sS'required'
p130054
I00
sS'group_name'
p130055
S'Advanced'
p130056
sa(dp130057
S'description'
p130058
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130059
sS'cpp_type'
p130060
S'bool'
p130061
sS'default'
p130062
S'0'
p130063
sS'name'
p130064
S'ignore_uo_dependency'
p130065
sS'required'
p130066
I00
sS'group_name'
p130067
S'Advanced'
p130068
sa(dp130069
S'description'
p130070
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p130071
sS'cpp_type'
p130072
S'double'
p130073
sS'default'
p130074
S'0'
p130075
sS'name'
p130076
S'int_width'
p130077
sS'required'
p130078
I00
sS'group_name'
p130079
Nsa(dp130080
S'description'
p130081
S'The variable value inside the circle\n'
p130082
sS'cpp_type'
p130083
S'double'
p130084
sS'default'
p130085
g3
sS'name'
p130086
S'invalue'
p130087
sS'required'
p130088
I01
sS'group_name'
p130089
Nsa(dp130090
S'description'
p130091
S'The variable value outside the circle\n'
p130092
sS'cpp_type'
p130093
S'double'
p130094
sS'default'
p130095
g3
sS'name'
p130096
S'outvalue'
p130097
sS'required'
p130098
I01
sS'group_name'
p130099
Nsa(dp130100
S'description'
p130101
S'The radius for each circle\n'
p130102
sS'cpp_type'
p130103
S'std::vector<double, std::allocator<double> >'
p130104
sS'default'
p130105
g3
sS'name'
p130106
S'radii'
p130107
sS'required'
p130108
I01
sS'group_name'
p130109
Nsa(dp130110
S'description'
p130111
S'Seed value for the random number generator\n'
p130112
sS'cpp_type'
p130113
S'unsigned int'
p130114
sS'default'
p130115
S'12345'
p130116
sS'name'
p130117
S'rand_seed'
p130118
sS'required'
p130119
I00
sS'group_name'
p130120
Nsa(dp130121
S'description'
p130122
g3
sS'cpp_type'
p130123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130124
sS'default'
p130125
S'SpecifiedSmoothCircleIC'
p130126
sS'name'
p130127
S'type'
p130128
sS'required'
p130129
I00
sS'group_name'
p130130
Nsa(dp130131
S'description'
p130132
S'The variable this initial condition is supposed to provide values for.\n'
p130133
sS'cpp_type'
p130134
S'VariableName'
p130135
sS'default'
p130136
g3
sS'name'
p130137
S'variable'
p130138
sS'required'
p130139
I01
sS'group_name'
p130140
Nsa(dp130141
S'description'
p130142
S'The x-coordinate for each circle center\n'
p130143
sS'cpp_type'
p130144
S'std::vector<double, std::allocator<double> >'
p130145
sS'default'
p130146
g3
sS'name'
p130147
S'x_positions'
p130148
sS'required'
p130149
I01
sS'group_name'
p130150
Nsa(dp130151
S'description'
p130152
S'The y-coordinate for each circle center\n'
p130153
sS'cpp_type'
p130154
S'std::vector<double, std::allocator<double> >'
p130155
sS'default'
p130156
g3
sS'name'
p130157
S'y_positions'
p130158
sS'required'
p130159
I01
sS'group_name'
p130160
Nsa(dp130161
S'description'
p130162
S'The z-coordinate for each circle center\n'
p130163
sS'cpp_type'
p130164
S'std::vector<double, std::allocator<double> >'
p130165
sS'default'
p130166
g3
sS'name'
p130167
S'z_positions'
p130168
sS'required'
p130169
I01
sS'group_name'
p130170
Nsa(dp130171
S'description'
p130172
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p130173
sS'cpp_type'
p130174
S'bool'
p130175
sS'default'
p130176
S'0'
p130177
sS'name'
p130178
S'zero_gradient'
p130179
sS'required'
p130180
I00
sS'group_name'
p130181
NsasS'name'
p130182
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p130183
sa(dp130184
S'description'
p130185
S'Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n'
p130186
sS'subblocks'
p130187
NsS'parameters'
p130188
(lp130189
(dp130190
S'description'
p130191
S'Semiaxis a for each superellipsoid\n'
p130192
sS'cpp_type'
p130193
S'std::vector<double, std::allocator<double> >'
p130194
sS'default'
p130195
g3
sS'name'
p130196
S'as'
p130197
sS'required'
p130198
I01
sS'group_name'
p130199
Nsa(dp130200
S'description'
p130201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130202
sS'cpp_type'
p130203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130204
sS'default'
p130205
g3
sS'name'
p130206
S'block'
p130207
sS'required'
p130208
I00
sS'group_name'
p130209
Nsa(dp130210
S'description'
p130211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130212
sS'cpp_type'
p130213
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130214
sS'default'
p130215
g3
sS'name'
p130216
S'boundary'
p130217
sS'required'
p130218
I00
sS'group_name'
p130219
Nsa(dp130220
S'description'
p130221
S'Semiaxis b for each superellipsoid\n'
p130222
sS'cpp_type'
p130223
S'std::vector<double, std::allocator<double> >'
p130224
sS'default'
p130225
g3
sS'name'
p130226
S'bs'
p130227
sS'required'
p130228
I01
sS'group_name'
p130229
Nsa(dp130230
S'description'
p130231
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130232
sS'cpp_type'
p130233
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130234
sS'default'
p130235
g3
sS'name'
p130236
S'control_tags'
p130237
sS'required'
p130238
I00
sS'group_name'
p130239
S'Advanced'
p130240
sa(dp130241
S'description'
p130242
S'Semiaxis c for each superellipsoid\n'
p130243
sS'cpp_type'
p130244
S'std::vector<double, std::allocator<double> >'
p130245
sS'default'
p130246
g3
sS'name'
p130247
S'cs'
p130248
sS'required'
p130249
I01
sS'group_name'
p130250
Nsa(dp130251
S'description'
p130252
S'Set the enabled status of the MooseObject.\n'
p130253
sS'cpp_type'
p130254
S'bool'
p130255
sS'default'
p130256
S'1'
p130257
sS'name'
p130258
S'enable'
p130259
sS'required'
p130260
I00
sS'group_name'
p130261
S'Advanced'
p130262
sa(dp130263
S'description'
p130264
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130265
sS'cpp_type'
p130266
S'bool'
p130267
sS'default'
p130268
S'0'
p130269
sS'name'
p130270
S'ignore_uo_dependency'
p130271
sS'required'
p130272
I00
sS'group_name'
p130273
S'Advanced'
p130274
sa(dp130275
S'description'
p130276
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p130277
sS'cpp_type'
p130278
S'double'
p130279
sS'default'
p130280
S'0'
p130281
sS'name'
p130282
S'int_width'
p130283
sS'required'
p130284
I00
sS'group_name'
p130285
Nsa(dp130286
S'description'
p130287
S'The variable value inside the superellipsoid\n'
p130288
sS'cpp_type'
p130289
S'double'
p130290
sS'default'
p130291
g3
sS'name'
p130292
S'invalue'
p130293
sS'required'
p130294
I01
sS'group_name'
p130295
Nsa(dp130296
S'description'
p130297
S'The variable value for nested particles inside the superellipsoid in inverse configuration\n'
p130298
sS'cpp_type'
p130299
S'double'
p130300
sS'default'
p130301
g3
sS'name'
p130302
S'nestedvalue'
p130303
sS'required'
p130304
I00
sS'group_name'
p130305
Nsa(dp130306
S'description'
p130307
S'Exponent n for each superellipsoid\n'
p130308
sS'cpp_type'
p130309
S'std::vector<double, std::allocator<double> >'
p130310
sS'default'
p130311
g3
sS'name'
p130312
S'ns'
p130313
sS'required'
p130314
I01
sS'group_name'
p130315
Nsa(dp130316
S'description'
p130317
S'The variable value outside the superellipsoid\n'
p130318
sS'cpp_type'
p130319
S'double'
p130320
sS'default'
p130321
g3
sS'name'
p130322
S'outvalue'
p130323
sS'required'
p130324
I01
sS'group_name'
p130325
Nsa(dp130326
S'description'
p130327
S'Seed value for the random number generator\n'
p130328
sS'cpp_type'
p130329
S'unsigned int'
p130330
sS'default'
p130331
S'12345'
p130332
sS'name'
p130333
S'rand_seed'
p130334
sS'required'
p130335
I00
sS'group_name'
p130336
Nsa(dp130337
S'description'
p130338
g3
sS'cpp_type'
p130339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130340
sS'default'
p130341
S'SpecifiedSmoothSuperellipsoidIC'
p130342
sS'name'
p130343
S'type'
p130344
sS'required'
p130345
I00
sS'group_name'
p130346
Nsa(dp130347
S'description'
p130348
S'The variable this initial condition is supposed to provide values for.\n'
p130349
sS'cpp_type'
p130350
S'VariableName'
p130351
sS'default'
p130352
g3
sS'name'
p130353
S'variable'
p130354
sS'required'
p130355
I01
sS'group_name'
p130356
Nsa(dp130357
S'description'
p130358
S'The x-coordinate for each superellipsoid center\n'
p130359
sS'cpp_type'
p130360
S'std::vector<double, std::allocator<double> >'
p130361
sS'default'
p130362
g3
sS'name'
p130363
S'x_positions'
p130364
sS'required'
p130365
I01
sS'group_name'
p130366
Nsa(dp130367
S'description'
p130368
S'The y-coordinate for each superellipsoid center\n'
p130369
sS'cpp_type'
p130370
S'std::vector<double, std::allocator<double> >'
p130371
sS'default'
p130372
g3
sS'name'
p130373
S'y_positions'
p130374
sS'required'
p130375
I01
sS'group_name'
p130376
Nsa(dp130377
S'description'
p130378
S'The z-coordinate for each superellipsoid center\n'
p130379
sS'cpp_type'
p130380
S'std::vector<double, std::allocator<double> >'
p130381
sS'default'
p130382
g3
sS'name'
p130383
S'z_positions'
p130384
sS'required'
p130385
I01
sS'group_name'
p130386
Nsa(dp130387
S'description'
p130388
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n'
p130389
sS'cpp_type'
p130390
S'bool'
p130391
sS'default'
p130392
S'0'
p130393
sS'name'
p130394
S'zero_gradient'
p130395
sS'required'
p130396
I00
sS'group_name'
p130397
NsasS'name'
p130398
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothSuperellipsoidIC'
p130399
sa(dp130400
S'description'
p130401
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p130402
sS'subblocks'
p130403
NsS'parameters'
p130404
(lp130405
(dp130406
S'description'
p130407
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130408
sS'cpp_type'
p130409
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130410
sS'default'
p130411
g3
sS'name'
p130412
S'block'
p130413
sS'required'
p130414
I00
sS'group_name'
p130415
Nsa(dp130416
S'description'
p130417
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130418
sS'cpp_type'
p130419
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130420
sS'default'
p130421
g3
sS'name'
p130422
S'boundary'
p130423
sS'required'
p130424
I00
sS'group_name'
p130425
Nsa(dp130426
S'description'
p130427
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130428
sS'cpp_type'
p130429
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130430
sS'default'
p130431
g3
sS'name'
p130432
S'control_tags'
p130433
sS'required'
p130434
I00
sS'group_name'
p130435
S'Advanced'
p130436
sa(dp130437
S'description'
p130438
S'Set the enabled status of the MooseObject.\n'
p130439
sS'cpp_type'
p130440
S'bool'
p130441
sS'default'
p130442
S'1'
p130443
sS'name'
p130444
S'enable'
p130445
sS'required'
p130446
I00
sS'group_name'
p130447
S'Advanced'
p130448
sa(dp130449
S'description'
p130450
S'The z coordinate of the circle center\n'
p130451
sS'cpp_type'
p130452
S'double'
p130453
sS'default'
p130454
g3
sS'name'
p130455
S'height'
p130456
sS'required'
p130457
I01
sS'group_name'
p130458
Nsa(dp130459
S'description'
p130460
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130461
sS'cpp_type'
p130462
S'bool'
p130463
sS'default'
p130464
S'0'
p130465
sS'name'
p130466
S'ignore_uo_dependency'
p130467
sS'required'
p130468
I00
sS'group_name'
p130469
S'Advanced'
p130470
sa(dp130471
S'description'
p130472
S'The variable value inside the circle\n'
p130473
sS'cpp_type'
p130474
S'double'
p130475
sS'default'
p130476
g3
sS'name'
p130477
S'invalue'
p130478
sS'required'
p130479
I01
sS'group_name'
p130480
Nsa(dp130481
S'description'
p130482
S'The variable value outside the circle\n'
p130483
sS'cpp_type'
p130484
S'double'
p130485
sS'default'
p130486
g3
sS'name'
p130487
S'outvalue'
p130488
sS'required'
p130489
I01
sS'group_name'
p130490
Nsa(dp130491
S'description'
p130492
g3
sS'cpp_type'
p130493
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130494
sS'default'
p130495
S'ThumbIC'
p130496
sS'name'
p130497
S'type'
p130498
sS'required'
p130499
I00
sS'group_name'
p130500
Nsa(dp130501
S'description'
p130502
S'The variable this initial condition is supposed to provide values for.\n'
p130503
sS'cpp_type'
p130504
S'VariableName'
p130505
sS'default'
p130506
g3
sS'name'
p130507
S'variable'
p130508
sS'required'
p130509
I01
sS'group_name'
p130510
Nsa(dp130511
S'description'
p130512
S'The y coordinate of the circle center\n'
p130513
sS'cpp_type'
p130514
S'double'
p130515
sS'default'
p130516
g3
sS'name'
p130517
S'width'
p130518
sS'required'
p130519
I01
sS'group_name'
p130520
Nsa(dp130521
S'description'
p130522
S'The x coordinate of the circle center\n'
p130523
sS'cpp_type'
p130524
S'double'
p130525
sS'default'
p130526
g3
sS'name'
p130527
S'xcoord'
p130528
sS'required'
p130529
I01
sS'group_name'
p130530
NsasS'name'
p130531
S'/Variables/*/InitialCondition/<type>/ThumbIC'
p130532
sa(dp130533
S'description'
p130534
S'Tricrystal with two circles/bubbles\n'
p130535
sS'subblocks'
p130536
NsS'parameters'
p130537
(lp130538
(dp130539
S'description'
p130540
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130541
sS'cpp_type'
p130542
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130543
sS'default'
p130544
g3
sS'name'
p130545
S'block'
p130546
sS'required'
p130547
I00
sS'group_name'
p130548
Nsa(dp130549
S'description'
p130550
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130551
sS'cpp_type'
p130552
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130553
sS'default'
p130554
g3
sS'name'
p130555
S'boundary'
p130556
sS'required'
p130557
I00
sS'group_name'
p130558
Nsa(dp130559
S'description'
p130560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130561
sS'cpp_type'
p130562
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130563
sS'default'
p130564
g3
sS'name'
p130565
S'control_tags'
p130566
sS'required'
p130567
I00
sS'group_name'
p130568
S'Advanced'
p130569
sa(dp130570
S'description'
p130571
S'Set the enabled status of the MooseObject.\n'
p130572
sS'cpp_type'
p130573
S'bool'
p130574
sS'default'
p130575
S'1'
p130576
sS'name'
p130577
S'enable'
p130578
sS'required'
p130579
I00
sS'group_name'
p130580
S'Advanced'
p130581
sa(dp130582
S'description'
p130583
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130584
sS'cpp_type'
p130585
S'bool'
p130586
sS'default'
p130587
S'0'
p130588
sS'name'
p130589
S'ignore_uo_dependency'
p130590
sS'required'
p130591
I00
sS'group_name'
p130592
S'Advanced'
p130593
sa(dp130594
S'description'
p130595
S'Index for the current grain order parameter\n'
p130596
sS'cpp_type'
p130597
S'unsigned int'
p130598
sS'default'
p130599
g3
sS'name'
p130600
S'op_index'
p130601
sS'required'
p130602
I01
sS'group_name'
p130603
Nsa(dp130604
S'description'
p130605
S'Number of grain order parameters\n'
p130606
sS'cpp_type'
p130607
S'unsigned int'
p130608
sS'default'
p130609
g3
sS'name'
p130610
S'op_num'
p130611
sS'required'
p130612
I01
sS'group_name'
p130613
Nsa(dp130614
S'description'
p130615
g3
sS'cpp_type'
p130616
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130617
sS'default'
p130618
S'Tricrystal2CircleGrainsIC'
p130619
sS'name'
p130620
S'type'
p130621
sS'required'
p130622
I00
sS'group_name'
p130623
Nsa(dp130624
S'description'
p130625
S'The variable this initial condition is supposed to provide values for.\n'
p130626
sS'cpp_type'
p130627
S'VariableName'
p130628
sS'default'
p130629
g3
sS'name'
p130630
S'variable'
p130631
sS'required'
p130632
I01
sS'group_name'
p130633
NsasS'name'
p130634
S'/Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p130635
sa(dp130636
S'description'
p130637
S'Tricrystal with a triple junction\n'
p130638
sS'subblocks'
p130639
NsS'parameters'
p130640
(lp130641
(dp130642
S'description'
p130643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130644
sS'cpp_type'
p130645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130646
sS'default'
p130647
g3
sS'name'
p130648
S'block'
p130649
sS'required'
p130650
I00
sS'group_name'
p130651
Nsa(dp130652
S'description'
p130653
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130654
sS'cpp_type'
p130655
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130656
sS'default'
p130657
g3
sS'name'
p130658
S'boundary'
p130659
sS'required'
p130660
I00
sS'group_name'
p130661
Nsa(dp130662
S'description'
p130663
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130664
sS'cpp_type'
p130665
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130666
sS'default'
p130667
g3
sS'name'
p130668
S'control_tags'
p130669
sS'required'
p130670
I00
sS'group_name'
p130671
S'Advanced'
p130672
sa(dp130673
S'description'
p130674
S'Set the enabled status of the MooseObject.\n'
p130675
sS'cpp_type'
p130676
S'bool'
p130677
sS'default'
p130678
S'1'
p130679
sS'name'
p130680
S'enable'
p130681
sS'required'
p130682
I00
sS'group_name'
p130683
S'Advanced'
p130684
sa(dp130685
S'description'
p130686
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130687
sS'cpp_type'
p130688
S'bool'
p130689
sS'default'
p130690
S'0'
p130691
sS'name'
p130692
S'ignore_uo_dependency'
p130693
sS'required'
p130694
I00
sS'group_name'
p130695
S'Advanced'
p130696
sa(dp130697
S'description'
p130698
S'The point where the triple junction is located. Default is the center of the mesh\n'
p130699
sS'cpp_type'
p130700
S'libMesh::Point'
p130701
sS'default'
p130702
g3
sS'name'
p130703
S'junction'
p130704
sS'required'
p130705
I00
sS'group_name'
p130706
Nsa(dp130707
S'description'
p130708
S'Index for the current grain order parameter\n'
p130709
sS'cpp_type'
p130710
S'unsigned int'
p130711
sS'default'
p130712
g3
sS'name'
p130713
S'op_index'
p130714
sS'required'
p130715
I01
sS'group_name'
p130716
Nsa(dp130717
S'description'
p130718
S'Number of grain order parameters\n'
p130719
sS'cpp_type'
p130720
S'unsigned int'
p130721
sS'default'
p130722
g3
sS'name'
p130723
S'op_num'
p130724
sS'required'
p130725
I01
sS'group_name'
p130726
Nsa(dp130727
S'description'
p130728
S'Angle of first grain at triple junction in degrees\n'
p130729
sS'cpp_type'
p130730
S'double'
p130731
sS'default'
p130732
S'135'
p130733
sS'name'
p130734
S'theta1'
p130735
sS'required'
p130736
I00
sS'group_name'
p130737
Nsa(dp130738
S'description'
p130739
S'Angle of second grain at triple junction in degrees\n'
p130740
sS'cpp_type'
p130741
S'double'
p130742
sS'default'
p130743
S'135'
p130744
sS'name'
p130745
S'theta2'
p130746
sS'required'
p130747
I00
sS'group_name'
p130748
Nsa(dp130749
S'description'
p130750
g3
sS'cpp_type'
p130751
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130752
sS'default'
p130753
S'TricrystalTripleJunctionIC'
p130754
sS'name'
p130755
S'type'
p130756
sS'required'
p130757
I00
sS'group_name'
p130758
Nsa(dp130759
S'description'
p130760
S'The variable this initial condition is supposed to provide values for.\n'
p130761
sS'cpp_type'
p130762
S'VariableName'
p130763
sS'default'
p130764
g3
sS'name'
p130765
S'variable'
p130766
sS'required'
p130767
I01
sS'group_name'
p130768
NsasS'name'
p130769
S'/Variables/*/InitialCondition/<type>/TricrystalTripleJunctionIC'
p130770
sa(dp130771
S'description'
p130772
g3
sS'subblocks'
p130773
NsS'parameters'
p130774
(lp130775
(dp130776
S'description'
p130777
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130778
sS'cpp_type'
p130779
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130780
sS'default'
p130781
g3
sS'name'
p130782
S'block'
p130783
sS'required'
p130784
I00
sS'group_name'
p130785
Nsa(dp130786
S'description'
p130787
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130788
sS'cpp_type'
p130789
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130790
sS'default'
p130791
g3
sS'name'
p130792
S'boundary'
p130793
sS'required'
p130794
I00
sS'group_name'
p130795
Nsa(dp130796
S'description'
p130797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130798
sS'cpp_type'
p130799
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130800
sS'default'
p130801
g3
sS'name'
p130802
S'control_tags'
p130803
sS'required'
p130804
I00
sS'group_name'
p130805
S'Advanced'
p130806
sa(dp130807
S'description'
p130808
S'Set the enabled status of the MooseObject.\n'
p130809
sS'cpp_type'
p130810
S'bool'
p130811
sS'default'
p130812
S'1'
p130813
sS'name'
p130814
S'enable'
p130815
sS'required'
p130816
I00
sS'group_name'
p130817
S'Advanced'
p130818
sa(dp130819
S'description'
p130820
S'Vector of order parameters\n'
p130821
sS'cpp_type'
p130822
S'std::vector<VariableName>'
p130823
sS'default'
p130824
g3
sS'name'
p130825
S'etas'
p130826
sS'required'
p130827
I01
sS'group_name'
p130828
Nsa(dp130829
S'description'
p130830
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130831
sS'cpp_type'
p130832
S'bool'
p130833
sS'default'
p130834
S'0'
p130835
sS'name'
p130836
S'ignore_uo_dependency'
p130837
sS'required'
p130838
I00
sS'group_name'
p130839
S'Advanced'
p130840
sa(dp130841
S'description'
p130842
g3
sS'cpp_type'
p130843
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130844
sS'default'
p130845
S'UnitySubVarIC'
p130846
sS'name'
p130847
S'type'
p130848
sS'required'
p130849
I00
sS'group_name'
p130850
Nsa(dp130851
S'description'
p130852
S'Turns on/off y_threshold\n'
p130853
sS'cpp_type'
p130854
S'bool'
p130855
sS'default'
p130856
S'0'
p130857
sS'name'
p130858
S'use_threshold'
p130859
sS'required'
p130860
I00
sS'group_name'
p130861
Nsa(dp130862
S'description'
p130863
S'The variable this initial condition is supposed to provide values for.\n'
p130864
sS'cpp_type'
p130865
S'VariableName'
p130866
sS'default'
p130867
g3
sS'name'
p130868
S'variable'
p130869
sS'required'
p130870
I01
sS'group_name'
p130871
Nsa(dp130872
S'description'
p130873
S'Sets variable to 0 at y coordinates below this value\n'
p130874
sS'cpp_type'
p130875
S'double'
p130876
sS'default'
p130877
S'0'
p130878
sS'name'
p130879
S'y_threshold'
p130880
sS'required'
p130881
I00
sS'group_name'
p130882
NsasS'name'
p130883
S'/Variables/*/InitialCondition/<type>/UnitySubVarIC'
p130884
sa(dp130885
S'description'
p130886
g3
sS'subblocks'
p130887
NsS'parameters'
p130888
(lp130889
(dp130890
S'description'
p130891
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130892
sS'cpp_type'
p130893
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130894
sS'default'
p130895
g3
sS'name'
p130896
S'block'
p130897
sS'required'
p130898
I00
sS'group_name'
p130899
Nsa(dp130900
S'description'
p130901
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130902
sS'cpp_type'
p130903
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130904
sS'default'
p130905
g3
sS'name'
p130906
S'boundary'
p130907
sS'required'
p130908
I00
sS'group_name'
p130909
Nsa(dp130910
S'description'
p130911
S'Vector of phase concentrations (must be the same lenght as etas)\n'
p130912
sS'cpp_type'
p130913
S'std::vector<VariableName>'
p130914
sS'default'
p130915
g3
sS'name'
p130916
S'cis'
p130917
sS'required'
p130918
I01
sS'group_name'
p130919
Nsa(dp130920
S'description'
p130921
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130922
sS'cpp_type'
p130923
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130924
sS'default'
p130925
g3
sS'name'
p130926
S'control_tags'
p130927
sS'required'
p130928
I00
sS'group_name'
p130929
S'Advanced'
p130930
sa(dp130931
S'description'
p130932
S'Set the enabled status of the MooseObject.\n'
p130933
sS'cpp_type'
p130934
S'bool'
p130935
sS'default'
p130936
S'1'
p130937
sS'name'
p130938
S'enable'
p130939
sS'required'
p130940
I00
sS'group_name'
p130941
S'Advanced'
p130942
sa(dp130943
S'description'
p130944
S'Vector of order parameters\n'
p130945
sS'cpp_type'
p130946
S'std::vector<VariableName>'
p130947
sS'default'
p130948
g3
sS'name'
p130949
S'etas'
p130950
sS'required'
p130951
I01
sS'group_name'
p130952
Nsa(dp130953
S'description'
p130954
S'When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n'
p130955
sS'cpp_type'
p130956
S'bool'
p130957
sS'default'
p130958
S'0'
p130959
sS'name'
p130960
S'ignore_uo_dependency'
p130961
sS'required'
p130962
I00
sS'group_name'
p130963
S'Advanced'
p130964
sa(dp130965
S'description'
p130966
g3
sS'cpp_type'
p130967
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130968
sS'default'
p130969
S'VarDepIC'
p130970
sS'name'
p130971
S'type'
p130972
sS'required'
p130973
I00
sS'group_name'
p130974
Nsa(dp130975
S'description'
p130976
S'The variable this initial condition is supposed to provide values for.\n'
p130977
sS'cpp_type'
p130978
S'VariableName'
p130979
sS'default'
p130980
g3
sS'name'
p130981
S'variable'
p130982
sS'required'
p130983
I01
sS'group_name'
p130984
NsasS'name'
p130985
S'/Variables/*/InitialCondition/<type>/VarDepIC'
p130986
sasS'parameters'
p130987
NsS'name'
p130988
S'/Variables/*/InitialCondition/<type>'
p130989
sasS'parameters'
p130990
(lp130991
(dp130992
S'description'
p130993
S'A string representing the Moose Object that will be built by this Action\n'
p130994
sS'cpp_type'
p130995
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130996
sS'default'
p130997
g3
sS'name'
p130998
S'type'
p130999
sS'required'
p131000
I01
sS'group_name'
p131001
NsasS'name'
p131002
S'/Variables/*/InitialCondition'
p131003
sasS'parameters'
p131004
(lp131005
(dp131006
S'description'
p131007
S'The block id where this variable lives\n'
p131008
sS'cpp_type'
p131009
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p131010
sS'default'
p131011
g3
sS'name'
p131012
S'block'
p131013
sS'required'
p131014
I00
sS'group_name'
p131015
Nsa(dp131016
S'description'
p131017
S'True to make this variable an eigen variable\n'
p131018
sS'cpp_type'
p131019
S'bool'
p131020
sS'default'
p131021
S'0'
p131022
sS'name'
p131023
S'eigen'
p131024
sS'required'
p131025
I00
sS'group_name'
p131026
S'Advanced'
p131027
sa(dp131028
S'name'
p131029
S'family'
p131030
sS'cpp_type'
p131031
S'MooseEnum'
p131032
sS'default'
p131033
S'LAGRANGE'
p131034
sS'description'
p131035
S'Specifies the family of FE shape functions to use for this variable\n'
p131036
sS'required'
p131037
I00
sS'options'
p131038
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p131039
sS'group_name'
p131040
Nsa(dp131041
S'description'
p131042
S'Specifies the initial condition for this variable\n'
p131043
sS'cpp_type'
p131044
S'double'
p131045
sS'default'
p131046
g3
sS'name'
p131047
S'initial_condition'
p131048
sS'required'
p131049
I00
sS'group_name'
p131050
Nsa(dp131051
S'name'
p131052
S'order'
p131053
sS'cpp_type'
p131054
S'MooseEnum'
p131055
sS'default'
p131056
S'FIRST'
p131057
sS'description'
p131058
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p131059
sS'required'
p131060
I00
sS'options'
p131061
S'CONSTANT FIRST SECOND THIRD FOURTH'
p131062
sS'group_name'
p131063
Nsa(dp131064
S'description'
p131065
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131066
sS'cpp_type'
p131067
S'std::vector<OutputName, std::allocator<OutputName> >'
p131068
sS'default'
p131069
g3
sS'name'
p131070
S'outputs'
p131071
sS'required'
p131072
I00
sS'group_name'
p131073
S'Advanced'
p131074
sa(dp131075
S'description'
p131076
S'Specifies a scaling factor to apply to this variable\n'
p131077
sS'cpp_type'
p131078
S'double'
p131079
sS'default'
p131080
S'1'
p131081
sS'name'
p131082
S'scaling'
p131083
sS'required'
p131084
I00
sS'group_name'
p131085
S'Advanced'
p131086
sa(dp131087
S'description'
p131088
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p131089
sS'cpp_type'
p131090
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131091
sS'default'
p131092
S'LATEST'
p131093
sS'name'
p131094
S'initial_from_file_timestep'
p131095
sS'required'
p131096
I00
sS'group_name'
p131097
S'Initial From File'
p131098
sa(dp131099
S'description'
p131100
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p131101
sS'cpp_type'
p131102
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131103
sS'default'
p131104
g3
sS'name'
p131105
S'initial_from_file_var'
p131106
sS'required'
p131107
I00
sS'group_name'
p131108
S'Initial From File'
p131109
sasS'name'
p131110
S'/Variables/*'
p131111
sa(dp131112
S'description'
p131113
g3
sS'subblocks'
p131114
NsS'parameters'
p131115
(lp131116
(dp131117
S'description'
p131118
S'Base name for the complex L variables\n'
p131119
sS'cpp_type'
p131120
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131121
sS'default'
p131122
g3
sS'name'
p131123
S'L_name_base'
p131124
sS'required'
p131125
I01
sS'group_name'
p131126
Nsa(dp131127
S'name'
p131128
S'family'
p131129
sS'cpp_type'
p131130
S'MooseEnum'
p131131
sS'default'
p131132
S'LAGRANGE'
p131133
sS'description'
p131134
S'Specifies the family of FE shape functions to use for the L variables\n'
p131135
sS'required'
p131136
I00
sS'options'
p131137
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p131138
sS'group_name'
p131139
Nsa(dp131140
S'description'
p131141
S'Name of atomic density variable\n'
p131142
sS'cpp_type'
p131143
S'AuxVariableName'
p131144
sS'default'
p131145
g3
sS'name'
p131146
S'n_name'
p131147
sS'required'
p131148
I01
sS'group_name'
p131149
Nsa(dp131150
S'description'
p131151
S'specifies the number of complex L variables will be solved for\n'
p131152
sS'cpp_type'
p131153
S'unsigned int'
p131154
sS'default'
p131155
g3
sS'name'
p131156
S'num_L'
p131157
sS'required'
p131158
I01
sS'group_name'
p131159
Nsa(dp131160
S'name'
p131161
S'order'
p131162
sS'cpp_type'
p131163
S'MooseEnum'
p131164
sS'default'
p131165
S'FIRST'
p131166
sS'description'
p131167
S'Specifies the order of the FE shape function to use for the L variables\n'
p131168
sS'required'
p131169
I00
sS'options'
p131170
S'CONSTANT FIRST SECOND THIRD FOURTH'
p131171
sS'group_name'
p131172
Nsa(dp131173
S'description'
p131174
S'Specifies a scaling factor to apply to the L variables\n'
p131175
sS'cpp_type'
p131176
S'double'
p131177
sS'default'
p131178
S'1'
p131179
sS'name'
p131180
S'scaling'
p131181
sS'required'
p131182
I00
sS'group_name'
p131183
Nsa(dp131184
S'description'
p131185
S'This is the filename of the sub.i file\n'
p131186
sS'cpp_type'
p131187
S'std::vector<FileName, std::allocator<FileName> >'
p131188
sS'default'
p131189
g3
sS'name'
p131190
S'sub_filenames'
p131191
sS'required'
p131192
I01
sS'group_name'
p131193
NsasS'name'
p131194
S'/Variables/CHPFCRFFSplitVariables'
p131195
sa(dp131196
S'description'
p131197
g3
sS'subblocks'
p131198
NsS'parameters'
p131199
(lp131200
(dp131201
S'description'
p131202
S'Base name for the complex L variables\n'
p131203
sS'cpp_type'
p131204
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131205
sS'default'
p131206
g3
sS'name'
p131207
S'L_name_base'
p131208
sS'required'
p131209
I01
sS'group_name'
p131210
Nsa(dp131211
S'name'
p131212
S'family'
p131213
sS'cpp_type'
p131214
S'MooseEnum'
p131215
sS'default'
p131216
S'LAGRANGE'
p131217
sS'description'
p131218
S'Specifies the family of FE shape functions to use for the L variables\n'
p131219
sS'required'
p131220
I00
sS'options'
p131221
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p131222
sS'group_name'
p131223
Nsa(dp131224
S'description'
p131225
S'specifies the number of complex L variables will be solved for\n'
p131226
sS'cpp_type'
p131227
S'unsigned int'
p131228
sS'default'
p131229
g3
sS'name'
p131230
S'num_L'
p131231
sS'required'
p131232
I01
sS'group_name'
p131233
Nsa(dp131234
S'name'
p131235
S'order'
p131236
sS'cpp_type'
p131237
S'MooseEnum'
p131238
sS'default'
p131239
S'FIRST'
p131240
sS'description'
p131241
S'Specifies the order of the FE shape function to use for the L variables\n'
p131242
sS'required'
p131243
I00
sS'options'
p131244
S'CONSTANT FIRST SECOND THIRD FOURTH'
p131245
sS'group_name'
p131246
Nsa(dp131247
S'description'
p131248
S'Specifies a scaling factor to apply to the L variables\n'
p131249
sS'cpp_type'
p131250
S'double'
p131251
sS'default'
p131252
S'1'
p131253
sS'name'
p131254
S'scaling'
p131255
sS'required'
p131256
I00
sS'group_name'
p131257
NsasS'name'
p131258
S'/Variables/HHPFCRFFSplitVariables'
p131259
sa(dp131260
S'description'
p131261
g3
sS'subblocks'
p131262
NsS'parameters'
p131263
(lp131264
(dp131265
S'description'
p131266
S'Base name for the complex L variables\n'
p131267
sS'cpp_type'
p131268
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131269
sS'default'
p131270
g3
sS'name'
p131271
S'L_name_base'
p131272
sS'required'
p131273
I01
sS'group_name'
p131274
Nsa(dp131275
S'name'
p131276
S'family'
p131277
sS'cpp_type'
p131278
S'MooseEnum'
p131279
sS'default'
p131280
S'LAGRANGE'
p131281
sS'description'
p131282
S'Specifies the family of FE shape functions to use for the L variables\n'
p131283
sS'required'
p131284
I00
sS'options'
p131285
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p131286
sS'group_name'
p131287
Nsa(dp131288
S'description'
p131289
S'specifies the number of complex L variables will be solved for\n'
p131290
sS'cpp_type'
p131291
S'unsigned int'
p131292
sS'default'
p131293
g3
sS'name'
p131294
S'num_L'
p131295
sS'required'
p131296
I01
sS'group_name'
p131297
Nsa(dp131298
S'name'
p131299
S'order'
p131300
sS'cpp_type'
p131301
S'MooseEnum'
p131302
sS'default'
p131303
S'FIRST'
p131304
sS'description'
p131305
S'Specifies the order of the FE shape function to use for the L variables\n'
p131306
sS'required'
p131307
I00
sS'options'
p131308
S'CONSTANT FIRST SECOND THIRD FOURTH'
p131309
sS'group_name'
p131310
Nsa(dp131311
S'description'
p131312
S'Specifies a scaling factor to apply to the L variables\n'
p131313
sS'cpp_type'
p131314
S'double'
p131315
sS'default'
p131316
S'1'
p131317
sS'name'
p131318
S'scaling'
p131319
sS'required'
p131320
I00
sS'group_name'
p131321
NsasS'name'
p131322
S'/Variables/PFCRFFVariables'
p131323
sa(dp131324
S'description'
p131325
g3
sS'subblocks'
p131326
NsS'parameters'
p131327
(lp131328
(dp131329
S'description'
p131330
S'Specifies the family of FE shape functions to use for this variable\n'
p131331
sS'cpp_type'
p131332
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131333
sS'default'
p131334
S'LAGRANGE'
p131335
sS'name'
p131336
S'family'
p131337
sS'required'
p131338
I00
sS'group_name'
p131339
Nsa(dp131340
S'description'
p131341
S'specifies the number of order parameters to create\n'
p131342
sS'cpp_type'
p131343
S'unsigned int'
p131344
sS'default'
p131345
g3
sS'name'
p131346
S'op_num'
p131347
sS'required'
p131348
I01
sS'group_name'
p131349
Nsa(dp131350
S'description'
p131351
S'Specifies the order of the FE shape function to use for this variable\n'
p131352
sS'cpp_type'
p131353
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131354
sS'default'
p131355
S'FIRST'
p131356
sS'name'
p131357
S'order'
p131358
sS'required'
p131359
I00
sS'group_name'
p131360
Nsa(dp131361
S'description'
p131362
S'Specifies a scaling factor to apply to this variable\n'
p131363
sS'cpp_type'
p131364
S'double'
p131365
sS'default'
p131366
S'1'
p131367
sS'name'
p131368
S'scaling'
p131369
sS'required'
p131370
I00
sS'group_name'
p131371
Nsa(dp131372
S'description'
p131373
S'specifies the base name of the variables\n'
p131374
sS'cpp_type'
p131375
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131376
sS'default'
p131377
g3
sS'name'
p131378
S'var_name_base'
p131379
sS'required'
p131380
I01
sS'group_name'
p131381
NsasS'name'
p131382
S'/Variables/PolycrystalVariables'
p131383
sasS'parameters'
p131384
NsS'name'
p131385
S'/Variables'
p131386
sa(dp131387
S'description'
p131388
g3
sS'subblocks'
p131389
(lp131390
(dp131391
S'description'
p131392
g3
sS'subblocks'
p131393
NsS'parameters'
p131394
(lp131395
(dp131396
S'description'
p131397
S'A string representing the Moose Object that will be built by this Action\n'
p131398
sS'cpp_type'
p131399
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131400
sS'default'
p131401
g3
sS'name'
p131402
S'type'
p131403
sS'required'
p131404
I01
sS'group_name'
p131405
NsasS'name'
p131406
S'/VectorPostprocessors/*'
p131407
sa(dp131408
S'description'
p131409
g3
sS'subblocks'
p131410
NsS'parameters'
p131411
(lp131412
(dp131413
S'description'
p131414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131415
sS'cpp_type'
p131416
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131417
sS'default'
p131418
g3
sS'name'
p131419
S'control_tags'
p131420
sS'required'
p131421
I00
sS'group_name'
p131422
S'Advanced'
p131423
sa(dp131424
S'description'
p131425
S'Set the enabled status of the MooseObject.\n'
p131426
sS'cpp_type'
p131427
S'bool'
p131428
sS'default'
p131429
S'1'
p131430
sS'name'
p131431
S'enable'
p131432
sS'required'
p131433
I00
sS'group_name'
p131434
S'Advanced'
p131435
sa(dp131436
S'name'
p131437
S'execute_on'
p131438
sS'cpp_type'
p131439
S'MultiMooseEnum'
p131440
sS'default'
p131441
S'TIMESTEP_END'
p131442
sS'description'
p131443
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131444
sS'required'
p131445
I00
sS'options'
p131446
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131447
sS'group_name'
p131448
Nsa(dp131449
S'description'
p131450
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131451
sS'cpp_type'
p131452
S'std::vector<OutputName, std::allocator<OutputName> >'
p131453
sS'default'
p131454
g3
sS'name'
p131455
S'outputs'
p131456
sS'required'
p131457
I00
sS'group_name'
p131458
S'Advanced'
p131459
sa(dp131460
S'description'
p131461
g3
sS'cpp_type'
p131462
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131463
sS'default'
p131464
S'ConstantVectorPostprocessor'
p131465
sS'name'
p131466
S'type'
p131467
sS'required'
p131468
I00
sS'group_name'
p131469
Nsa(dp131470
S'description'
p131471
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131472
sS'cpp_type'
p131473
S'bool'
p131474
sS'default'
p131475
S'0'
p131476
sS'name'
p131477
S'use_displaced_mesh'
p131478
sS'required'
p131479
I00
sS'group_name'
p131480
S'Advanced'
p131481
sa(dp131482
S'description'
p131483
S'The vector value this object will have.\n'
p131484
sS'cpp_type'
p131485
S'std::vector<double, std::allocator<double> >'
p131486
sS'default'
p131487
g3
sS'name'
p131488
S'value'
p131489
sS'required'
p131490
I01
sS'group_name'
p131491
NsasS'name'
p131492
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p131493
sa(dp131494
S'description'
p131495
g3
sS'subblocks'
p131496
NsS'parameters'
p131497
(lp131498
(dp131499
S'description'
p131500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131501
sS'cpp_type'
p131502
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131503
sS'default'
p131504
g3
sS'name'
p131505
S'control_tags'
p131506
sS'required'
p131507
I00
sS'group_name'
p131508
S'Advanced'
p131509
sa(dp131510
S'description'
p131511
S'Set the enabled status of the MooseObject.\n'
p131512
sS'cpp_type'
p131513
S'bool'
p131514
sS'default'
p131515
S'1'
p131516
sS'name'
p131517
S'enable'
p131518
sS'required'
p131519
I00
sS'group_name'
p131520
S'Advanced'
p131521
sa(dp131522
S'name'
p131523
S'execute_on'
p131524
sS'cpp_type'
p131525
S'MultiMooseEnum'
p131526
sS'default'
p131527
S'TIMESTEP_END'
p131528
sS'description'
p131529
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131530
sS'required'
p131531
I00
sS'options'
p131532
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131533
sS'group_name'
p131534
Nsa(dp131535
S'description'
p131536
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131537
sS'cpp_type'
p131538
S'std::vector<OutputName, std::allocator<OutputName> >'
p131539
sS'default'
p131540
g3
sS'name'
p131541
S'outputs'
p131542
sS'required'
p131543
I00
sS'group_name'
p131544
S'Advanced'
p131545
sa(dp131546
S'description'
p131547
g3
sS'cpp_type'
p131548
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131549
sS'default'
p131550
S'Eigenvalues'
p131551
sS'name'
p131552
S'type'
p131553
sS'required'
p131554
I00
sS'group_name'
p131555
Nsa(dp131556
S'description'
p131557
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131558
sS'cpp_type'
p131559
S'bool'
p131560
sS'default'
p131561
S'0'
p131562
sS'name'
p131563
S'use_displaced_mesh'
p131564
sS'required'
p131565
I00
sS'group_name'
p131566
S'Advanced'
p131567
sasS'name'
p131568
S'/VectorPostprocessors/Eigenvalues'
p131569
sa(dp131570
S'description'
p131571
g3
sS'subblocks'
p131572
NsS'parameters'
p131573
(lp131574
(dp131575
S'description'
p131576
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131577
sS'cpp_type'
p131578
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131579
sS'default'
p131580
g3
sS'name'
p131581
S'control_tags'
p131582
sS'required'
p131583
I00
sS'group_name'
p131584
S'Advanced'
p131585
sa(dp131586
S'description'
p131587
S'Set the enabled status of the MooseObject.\n'
p131588
sS'cpp_type'
p131589
S'bool'
p131590
sS'default'
p131591
S'1'
p131592
sS'name'
p131593
S'enable'
p131594
sS'required'
p131595
I00
sS'group_name'
p131596
S'Advanced'
p131597
sa(dp131598
S'description'
p131599
S'The end of the line\n'
p131600
sS'cpp_type'
p131601
S'libMesh::Point'
p131602
sS'default'
p131603
g3
sS'name'
p131604
S'end'
p131605
sS'required'
p131606
I01
sS'group_name'
p131607
Nsa(dp131608
S'name'
p131609
S'execute_on'
p131610
sS'cpp_type'
p131611
S'MultiMooseEnum'
p131612
sS'default'
p131613
S'TIMESTEP_END'
p131614
sS'description'
p131615
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131616
sS'required'
p131617
I00
sS'options'
p131618
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131619
sS'group_name'
p131620
Nsa(dp131621
S'description'
p131622
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131623
sS'cpp_type'
p131624
S'std::vector<OutputName, std::allocator<OutputName> >'
p131625
sS'default'
p131626
g3
sS'name'
p131627
S'outputs'
p131628
sS'required'
p131629
I00
sS'group_name'
p131630
S'Advanced'
p131631
sa(dp131632
S'description'
p131633
S'The beginning of the line\n'
p131634
sS'cpp_type'
p131635
S'libMesh::Point'
p131636
sS'default'
p131637
g3
sS'name'
p131638
S'start'
p131639
sS'required'
p131640
I01
sS'group_name'
p131641
Nsa(dp131642
S'description'
p131643
g3
sS'cpp_type'
p131644
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131645
sS'default'
p131646
S'ElementsAlongLine'
p131647
sS'name'
p131648
S'type'
p131649
sS'required'
p131650
I00
sS'group_name'
p131651
Nsa(dp131652
S'description'
p131653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131654
sS'cpp_type'
p131655
S'bool'
p131656
sS'default'
p131657
S'0'
p131658
sS'name'
p131659
S'use_displaced_mesh'
p131660
sS'required'
p131661
I00
sS'group_name'
p131662
S'Advanced'
p131663
sasS'name'
p131664
S'/VectorPostprocessors/ElementsAlongLine'
p131665
sa(dp131666
S'description'
p131667
g3
sS'subblocks'
p131668
NsS'parameters'
p131669
(lp131670
(dp131671
S'description'
p131672
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131673
sS'cpp_type'
p131674
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131675
sS'default'
p131676
g3
sS'name'
p131677
S'control_tags'
p131678
sS'required'
p131679
I00
sS'group_name'
p131680
S'Advanced'
p131681
sa(dp131682
S'description'
p131683
S'Set the enabled status of the MooseObject.\n'
p131684
sS'cpp_type'
p131685
S'bool'
p131686
sS'default'
p131687
S'1'
p131688
sS'name'
p131689
S'enable'
p131690
sS'required'
p131691
I00
sS'group_name'
p131692
S'Advanced'
p131693
sa(dp131694
S'name'
p131695
S'execute_on'
p131696
sS'cpp_type'
p131697
S'MultiMooseEnum'
p131698
sS'default'
p131699
S'TIMESTEP_END'
p131700
sS'description'
p131701
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131702
sS'required'
p131703
I00
sS'options'
p131704
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131705
sS'group_name'
p131706
Nsa(dp131707
S'description'
p131708
S'Normal vector to the plane\n'
p131709
sS'cpp_type'
p131710
S'libMesh::Point'
p131711
sS'default'
p131712
g3
sS'name'
p131713
S'normal'
p131714
sS'required'
p131715
I01
sS'group_name'
p131716
Nsa(dp131717
S'description'
p131718
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131719
sS'cpp_type'
p131720
S'std::vector<OutputName, std::allocator<OutputName> >'
p131721
sS'default'
p131722
g3
sS'name'
p131723
S'outputs'
p131724
sS'required'
p131725
I00
sS'group_name'
p131726
S'Advanced'
p131727
sa(dp131728
S'description'
p131729
S'Point in the plane\n'
p131730
sS'cpp_type'
p131731
S'libMesh::Point'
p131732
sS'default'
p131733
g3
sS'name'
p131734
S'point'
p131735
sS'required'
p131736
I01
sS'group_name'
p131737
Nsa(dp131738
S'description'
p131739
g3
sS'cpp_type'
p131740
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131741
sS'default'
p131742
S'ElementsAlongPlane'
p131743
sS'name'
p131744
S'type'
p131745
sS'required'
p131746
I00
sS'group_name'
p131747
Nsa(dp131748
S'description'
p131749
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131750
sS'cpp_type'
p131751
S'bool'
p131752
sS'default'
p131753
S'0'
p131754
sS'name'
p131755
S'use_displaced_mesh'
p131756
sS'required'
p131757
I00
sS'group_name'
p131758
S'Advanced'
p131759
sasS'name'
p131760
S'/VectorPostprocessors/ElementsAlongPlane'
p131761
sa(dp131762
S'description'
p131763
S'Provide updated euler angles after rigid body rotation of the grains.\n'
p131764
sS'subblocks'
p131765
NsS'parameters'
p131766
(lp131767
(dp131768
S'description'
p131769
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131770
sS'cpp_type'
p131771
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131772
sS'default'
p131773
g3
sS'name'
p131774
S'control_tags'
p131775
sS'required'
p131776
I00
sS'group_name'
p131777
S'Advanced'
p131778
sa(dp131779
S'description'
p131780
S'Set the enabled status of the MooseObject.\n'
p131781
sS'cpp_type'
p131782
S'bool'
p131783
sS'default'
p131784
S'1'
p131785
sS'name'
p131786
S'enable'
p131787
sS'required'
p131788
I00
sS'group_name'
p131789
S'Advanced'
p131790
sa(dp131791
S'description'
p131792
S'Name of Euler angle provider user object\n'
p131793
sS'cpp_type'
p131794
S'UserObjectName'
p131795
sS'default'
p131796
g3
sS'name'
p131797
S'euler_angle_updater'
p131798
sS'required'
p131799
I00
sS'group_name'
p131800
Nsa(dp131801
S'name'
p131802
S'execute_on'
p131803
sS'cpp_type'
p131804
S'MultiMooseEnum'
p131805
sS'default'
p131806
S'TIMESTEP_END'
p131807
sS'description'
p131808
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131809
sS'required'
p131810
I00
sS'options'
p131811
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131812
sS'group_name'
p131813
Nsa(dp131814
S'description'
p131815
S'Name of Euler angle provider user object\n'
p131816
sS'cpp_type'
p131817
S'UserObjectName'
p131818
sS'default'
p131819
g3
sS'name'
p131820
S'grain_torques_object'
p131821
sS'required'
p131822
I01
sS'group_name'
p131823
Nsa(dp131824
S'description'
p131825
S'The FeatureFloodCount UserObject to get values from.\n'
p131826
sS'cpp_type'
p131827
S'UserObjectName'
p131828
sS'default'
p131829
g3
sS'name'
p131830
S'grain_tracker_object'
p131831
sS'required'
p131832
I01
sS'group_name'
p131833
Nsa(dp131834
S'description'
p131835
S'The feature volume VectorPostprocessorValue.\n'
p131836
sS'cpp_type'
p131837
S'VectorPostprocessorName'
p131838
sS'default'
p131839
g3
sS'name'
p131840
S'grain_volumes'
p131841
sS'required'
p131842
I01
sS'group_name'
p131843
Nsa(dp131844
S'description'
p131845
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131846
sS'cpp_type'
p131847
S'std::vector<OutputName, std::allocator<OutputName> >'
p131848
sS'default'
p131849
g3
sS'name'
p131850
S'outputs'
p131851
sS'required'
p131852
I00
sS'group_name'
p131853
S'Advanced'
p131854
sa(dp131855
S'description'
p131856
S'constant value characterizing grain rotation\n'
p131857
sS'cpp_type'
p131858
S'double'
p131859
sS'default'
p131860
S'1'
p131861
sS'name'
p131862
S'rotation_constant'
p131863
sS'required'
p131864
I00
sS'group_name'
p131865
Nsa(dp131866
S'description'
p131867
g3
sS'cpp_type'
p131868
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131869
sS'default'
p131870
S'EulerAngleUpdaterCheck'
p131871
sS'name'
p131872
S'type'
p131873
sS'required'
p131874
I00
sS'group_name'
p131875
Nsa(dp131876
S'description'
p131877
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131878
sS'cpp_type'
p131879
S'bool'
p131880
sS'default'
p131881
S'0'
p131882
sS'name'
p131883
S'use_displaced_mesh'
p131884
sS'required'
p131885
I00
sS'group_name'
p131886
S'Advanced'
p131887
sasS'name'
p131888
S'/VectorPostprocessors/EulerAngleUpdaterCheck'
p131889
sa(dp131890
S'description'
p131891
g3
sS'subblocks'
p131892
NsS'parameters'
p131893
(lp131894
(dp131895
S'description'
p131896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131897
sS'cpp_type'
p131898
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131899
sS'default'
p131900
g3
sS'name'
p131901
S'control_tags'
p131902
sS'required'
p131903
I00
sS'group_name'
p131904
S'Advanced'
p131905
sa(dp131906
S'description'
p131907
S'Set the enabled status of the MooseObject.\n'
p131908
sS'cpp_type'
p131909
S'bool'
p131910
sS'default'
p131911
S'1'
p131912
sS'name'
p131913
S'enable'
p131914
sS'required'
p131915
I00
sS'group_name'
p131916
S'Advanced'
p131917
sa(dp131918
S'name'
p131919
S'execute_on'
p131920
sS'cpp_type'
p131921
S'MultiMooseEnum'
p131922
sS'default'
p131923
S'TIMESTEP_END'
p131924
sS'description'
p131925
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p131926
sS'required'
p131927
I00
sS'options'
p131928
S'none initial linear nonlinear timestep_end timestep_begin custom'
p131929
sS'group_name'
p131930
Nsa(dp131931
S'description'
p131932
S'The FeatureFloodCount UserObject to get values from.\n'
p131933
sS'cpp_type'
p131934
S'UserObjectName'
p131935
sS'default'
p131936
g3
sS'name'
p131937
S'flood_counter'
p131938
sS'required'
p131939
I01
sS'group_name'
p131940
Nsa(dp131941
S'description'
p131942
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p131943
sS'cpp_type'
p131944
S'std::vector<OutputName, std::allocator<OutputName> >'
p131945
sS'default'
p131946
g3
sS'name'
p131947
S'outputs'
p131948
sS'required'
p131949
I00
sS'group_name'
p131950
S'Advanced'
p131951
sa(dp131952
S'description'
p131953
S'Set this Boolean if you wish to use an element based volume where the dominant order parameter determines the feature that accumulates the entire element volume\n'
p131954
sS'cpp_type'
p131955
S'bool'
p131956
sS'default'
p131957
S'0'
p131958
sS'name'
p131959
S'single_feature_per_element'
p131960
sS'required'
p131961
I00
sS'group_name'
p131962
Nsa(dp131963
S'description'
p131964
g3
sS'cpp_type'
p131965
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p131966
sS'default'
p131967
S'FeatureVolumeVectorPostprocessor'
p131968
sS'name'
p131969
S'type'
p131970
sS'required'
p131971
I00
sS'group_name'
p131972
Nsa(dp131973
S'description'
p131974
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p131975
sS'cpp_type'
p131976
S'bool'
p131977
sS'default'
p131978
S'0'
p131979
sS'name'
p131980
S'use_displaced_mesh'
p131981
sS'required'
p131982
I00
sS'group_name'
p131983
S'Advanced'
p131984
sasS'name'
p131985
S'/VectorPostprocessors/FeatureVolumeVectorPostprocessor'
p131986
sa(dp131987
S'description'
p131988
S'Outputs the values from GrainForcesPostprocessor\n'
p131989
sS'subblocks'
p131990
NsS'parameters'
p131991
(lp131992
(dp131993
S'description'
p131994
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p131995
sS'cpp_type'
p131996
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p131997
sS'default'
p131998
g3
sS'name'
p131999
S'control_tags'
p132000
sS'required'
p132001
I00
sS'group_name'
p132002
S'Advanced'
p132003
sa(dp132004
S'description'
p132005
S'Set the enabled status of the MooseObject.\n'
p132006
sS'cpp_type'
p132007
S'bool'
p132008
sS'default'
p132009
S'1'
p132010
sS'name'
p132011
S'enable'
p132012
sS'required'
p132013
I00
sS'group_name'
p132014
S'Advanced'
p132015
sa(dp132016
S'name'
p132017
S'execute_on'
p132018
sS'cpp_type'
p132019
S'MultiMooseEnum'
p132020
sS'default'
p132021
S'TIMESTEP_END'
p132022
sS'description'
p132023
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132024
sS'required'
p132025
I00
sS'options'
p132026
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132027
sS'group_name'
p132028
Nsa(dp132029
S'description'
p132030
S'Specify userobject that gives center of mass and volume of grains\n'
p132031
sS'cpp_type'
p132032
S'UserObjectName'
p132033
sS'default'
p132034
g3
sS'name'
p132035
S'grain_force'
p132036
sS'required'
p132037
I00
sS'group_name'
p132038
Nsa(dp132039
S'description'
p132040
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132041
sS'cpp_type'
p132042
S'std::vector<OutputName, std::allocator<OutputName> >'
p132043
sS'default'
p132044
g3
sS'name'
p132045
S'outputs'
p132046
sS'required'
p132047
I00
sS'group_name'
p132048
S'Advanced'
p132049
sa(dp132050
S'description'
p132051
g3
sS'cpp_type'
p132052
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132053
sS'default'
p132054
S'GrainForcesPostprocessor'
p132055
sS'name'
p132056
S'type'
p132057
sS'required'
p132058
I00
sS'group_name'
p132059
Nsa(dp132060
S'description'
p132061
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132062
sS'cpp_type'
p132063
S'bool'
p132064
sS'default'
p132065
S'0'
p132066
sS'name'
p132067
S'use_displaced_mesh'
p132068
sS'required'
p132069
I00
sS'group_name'
p132070
S'Advanced'
p132071
sasS'name'
p132072
S'/VectorPostprocessors/GrainForcesPostprocessor'
p132073
sa(dp132074
S'description'
p132075
S'Gives out info on the grain boundary properties\n'
p132076
sS'subblocks'
p132077
NsS'parameters'
p132078
(lp132079
(dp132080
S'description'
p132081
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132082
sS'cpp_type'
p132083
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132084
sS'default'
p132085
g3
sS'name'
p132086
S'block'
p132087
sS'required'
p132088
I00
sS'group_name'
p132089
Nsa(dp132090
S'description'
p132091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132092
sS'cpp_type'
p132093
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132094
sS'default'
p132095
g3
sS'name'
p132096
S'control_tags'
p132097
sS'required'
p132098
I00
sS'group_name'
p132099
S'Advanced'
p132100
sa(dp132101
S'description'
p132102
S'Set the enabled status of the MooseObject.\n'
p132103
sS'cpp_type'
p132104
S'bool'
p132105
sS'default'
p132106
S'1'
p132107
sS'name'
p132108
S'enable'
p132109
sS'required'
p132110
I00
sS'group_name'
p132111
S'Advanced'
p132112
sa(dp132113
S'description'
p132114
S'The EulerAngleProvider User object\n'
p132115
sS'cpp_type'
p132116
S'UserObjectName'
p132117
sS'default'
p132118
g3
sS'name'
p132119
S'euler_angle_provider'
p132120
sS'required'
p132121
I01
sS'group_name'
p132122
Nsa(dp132123
S'name'
p132124
S'execute_on'
p132125
sS'cpp_type'
p132126
S'MultiMooseEnum'
p132127
sS'default'
p132128
S'TIMESTEP_END'
p132129
sS'description'
p132130
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132131
sS'required'
p132132
I00
sS'options'
p132133
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132134
sS'group_name'
p132135
Nsa(dp132136
S'description'
p132137
S'the number of grains\n'
p132138
sS'cpp_type'
p132139
S'unsigned int'
p132140
sS'default'
p132141
g3
sS'name'
p132142
S'grain_num'
p132143
sS'required'
p132144
I01
sS'group_name'
p132145
Nsa(dp132146
S'description'
p132147
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132148
sS'cpp_type'
p132149
S'std::vector<OutputName, std::allocator<OutputName> >'
p132150
sS'default'
p132151
g3
sS'name'
p132152
S'outputs'
p132153
sS'required'
p132154
I00
sS'group_name'
p132155
S'Advanced'
p132156
sa(dp132157
S'description'
p132158
S'The seed for the master random number generator\n'
p132159
sS'cpp_type'
p132160
S'unsigned int'
p132161
sS'default'
p132162
S'0'
p132163
sS'name'
p132164
S'seed'
p132165
sS'required'
p132166
I00
sS'group_name'
p132167
S'Advanced'
p132168
sa(dp132169
S'name'
p132170
S'sort_by'
p132171
sS'cpp_type'
p132172
S'MooseEnum'
p132173
sS'default'
p132174
g3
sS'description'
p132175
S'What to sort the samples by\n'
p132176
sS'required'
p132177
I01
sS'options'
p132178
S'x y z id'
p132179
sS'group_name'
p132180
Nsa(dp132181
S'description'
p132182
g3
sS'cpp_type'
p132183
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132184
sS'default'
p132185
S'GrainTextureVectorPostprocessor'
p132186
sS'name'
p132187
S'type'
p132188
sS'required'
p132189
I00
sS'group_name'
p132190
Nsa(dp132191
S'description'
p132192
S'The grain number\n'
p132193
sS'cpp_type'
p132194
S'std::vector<VariableName>'
p132195
sS'default'
p132196
g3
sS'name'
p132197
S'unique_grains'
p132198
sS'required'
p132199
I01
sS'group_name'
p132200
Nsa(dp132201
S'description'
p132202
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132203
sS'cpp_type'
p132204
S'bool'
p132205
sS'default'
p132206
S'0'
p132207
sS'name'
p132208
S'use_displaced_mesh'
p132209
sS'required'
p132210
I00
sS'group_name'
p132211
S'Advanced'
p132212
sasS'name'
p132213
S'/VectorPostprocessors/GrainTextureVectorPostprocessor'
p132214
sa(dp132215
S'description'
p132216
g3
sS'subblocks'
p132217
NsS'parameters'
p132218
(lp132219
(dp132220
S'description'
p132221
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132222
sS'cpp_type'
p132223
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132224
sS'default'
p132225
g3
sS'name'
p132226
S'control_tags'
p132227
sS'required'
p132228
I00
sS'group_name'
p132229
S'Advanced'
p132230
sa(dp132231
S'description'
p132232
S'Set the enabled status of the MooseObject.\n'
p132233
sS'cpp_type'
p132234
S'bool'
p132235
sS'default'
p132236
S'1'
p132237
sS'name'
p132238
S'enable'
p132239
sS'required'
p132240
I00
sS'group_name'
p132241
S'Advanced'
p132242
sa(dp132243
S'description'
p132244
S'The end of the line\n'
p132245
sS'cpp_type'
p132246
S'libMesh::Point'
p132247
sS'default'
p132248
g3
sS'name'
p132249
S'end'
p132250
sS'required'
p132251
I01
sS'group_name'
p132252
Nsa(dp132253
S'name'
p132254
S'execute_on'
p132255
sS'cpp_type'
p132256
S'MultiMooseEnum'
p132257
sS'default'
p132258
S'TIMESTEP_END'
p132259
sS'description'
p132260
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132261
sS'required'
p132262
I00
sS'options'
p132263
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132264
sS'group_name'
p132265
Nsa(dp132266
S'description'
p132267
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132268
sS'cpp_type'
p132269
S'std::vector<OutputName, std::allocator<OutputName> >'
p132270
sS'default'
p132271
g3
sS'name'
p132272
S'outputs'
p132273
sS'required'
p132274
I00
sS'group_name'
p132275
S'Advanced'
p132276
sa(dp132277
S'description'
p132278
S'The beginning of the line\n'
p132279
sS'cpp_type'
p132280
S'libMesh::Point'
p132281
sS'default'
p132282
g3
sS'name'
p132283
S'start'
p132284
sS'required'
p132285
I01
sS'group_name'
p132286
Nsa(dp132287
S'description'
p132288
g3
sS'cpp_type'
p132289
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132290
sS'default'
p132291
S'IntersectionPointsAlongLine'
p132292
sS'name'
p132293
S'type'
p132294
sS'required'
p132295
I00
sS'group_name'
p132296
Nsa(dp132297
S'description'
p132298
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132299
sS'cpp_type'
p132300
S'bool'
p132301
sS'default'
p132302
S'0'
p132303
sS'name'
p132304
S'use_displaced_mesh'
p132305
sS'required'
p132306
I00
sS'group_name'
p132307
S'Advanced'
p132308
sasS'name'
p132309
S'/VectorPostprocessors/IntersectionPointsAlongLine'
p132310
sa(dp132311
S'description'
p132312
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p132313
sS'subblocks'
p132314
NsS'parameters'
p132315
(lp132316
(dp132317
S'description'
p132318
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132319
sS'cpp_type'
p132320
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132321
sS'default'
p132322
g3
sS'name'
p132323
S'control_tags'
p132324
sS'required'
p132325
I00
sS'group_name'
p132326
S'Advanced'
p132327
sa(dp132328
S'description'
p132329
S'Set the enabled status of the MooseObject.\n'
p132330
sS'cpp_type'
p132331
S'bool'
p132332
sS'default'
p132333
S'1'
p132334
sS'name'
p132335
S'enable'
p132336
sS'required'
p132337
I00
sS'group_name'
p132338
S'Advanced'
p132339
sa(dp132340
S'name'
p132341
S'execute_on'
p132342
sS'cpp_type'
p132343
S'MultiMooseEnum'
p132344
sS'default'
p132345
S'TIMESTEP_END'
p132346
sS'description'
p132347
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132348
sS'required'
p132349
I00
sS'options'
p132350
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132351
sS'group_name'
p132352
Nsa(dp132353
S'description'
p132354
S'The number of samples to be output\n'
p132355
sS'cpp_type'
p132356
S'unsigned int'
p132357
sS'default'
p132358
g3
sS'name'
p132359
S'num_samples'
p132360
sS'required'
p132361
I00
sS'group_name'
p132362
Nsa(dp132363
S'description'
p132364
S'The order of the polynomial fit\n'
p132365
sS'cpp_type'
p132366
S'unsigned int'
p132367
sS'default'
p132368
g3
sS'name'
p132369
S'order'
p132370
sS'required'
p132371
I01
sS'group_name'
p132372
Nsa(dp132373
S'name'
p132374
S'output'
p132375
sS'cpp_type'
p132376
S'MooseEnum'
p132377
sS'default'
p132378
S'Coefficients'
p132379
sS'description'
p132380
S'The quantity to output.  Options are: Coefficients Samples\n'
p132381
sS'required'
p132382
I00
sS'options'
p132383
S'Coefficients Samples'
p132384
sS'group_name'
p132385
Nsa(dp132386
S'description'
p132387
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132388
sS'cpp_type'
p132389
S'std::vector<OutputName, std::allocator<OutputName> >'
p132390
sS'default'
p132391
g3
sS'name'
p132392
S'outputs'
p132393
sS'required'
p132394
I00
sS'group_name'
p132395
S'Advanced'
p132396
sa(dp132397
S'description'
p132398
S'The maximum x value of the of samples to be output\n'
p132399
sS'cpp_type'
p132400
S'double'
p132401
sS'default'
p132402
g3
sS'name'
p132403
S'sample_x_max'
p132404
sS'required'
p132405
I00
sS'group_name'
p132406
Nsa(dp132407
S'description'
p132408
S'The minimum x value of the of samples to be output\n'
p132409
sS'cpp_type'
p132410
S'double'
p132411
sS'default'
p132412
g3
sS'name'
p132413
S'sample_x_min'
p132414
sS'required'
p132415
I00
sS'group_name'
p132416
Nsa(dp132417
S'description'
p132418
g3
sS'cpp_type'
p132419
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132420
sS'default'
p132421
S'LeastSquaresFit'
p132422
sS'name'
p132423
S'type'
p132424
sS'required'
p132425
I00
sS'group_name'
p132426
Nsa(dp132427
S'description'
p132428
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132429
sS'cpp_type'
p132430
S'bool'
p132431
sS'default'
p132432
S'0'
p132433
sS'name'
p132434
S'use_displaced_mesh'
p132435
sS'required'
p132436
I00
sS'group_name'
p132437
S'Advanced'
p132438
sa(dp132439
S'description'
p132440
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p132441
sS'cpp_type'
p132442
S'VectorPostprocessorName'
p132443
sS'default'
p132444
g3
sS'name'
p132445
S'vectorpostprocessor'
p132446
sS'required'
p132447
I01
sS'group_name'
p132448
Nsa(dp132449
S'description'
p132450
S'The name of the independent variable\n'
p132451
sS'cpp_type'
p132452
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132453
sS'default'
p132454
g3
sS'name'
p132455
S'x_name'
p132456
sS'required'
p132457
I01
sS'group_name'
p132458
Nsa(dp132459
S'description'
p132460
S'Value used to scale x values (scaling is done after shifting)\n'
p132461
sS'cpp_type'
p132462
S'double'
p132463
sS'default'
p132464
S'1'
p132465
sS'name'
p132466
S'x_scale'
p132467
sS'required'
p132468
I00
sS'group_name'
p132469
Nsa(dp132470
S'description'
p132471
S'Value used to shift x values (shifting is done before scaling)\n'
p132472
sS'cpp_type'
p132473
S'double'
p132474
sS'default'
p132475
S'0'
p132476
sS'name'
p132477
S'x_shift'
p132478
sS'required'
p132479
I00
sS'group_name'
p132480
Nsa(dp132481
S'description'
p132482
S'The name of the dependent variable\n'
p132483
sS'cpp_type'
p132484
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132485
sS'default'
p132486
g3
sS'name'
p132487
S'y_name'
p132488
sS'required'
p132489
I01
sS'group_name'
p132490
Nsa(dp132491
S'description'
p132492
S'Value used to scale y values (scaling is done after shifting)\n'
p132493
sS'cpp_type'
p132494
S'double'
p132495
sS'default'
p132496
S'1'
p132497
sS'name'
p132498
S'y_scale'
p132499
sS'required'
p132500
I00
sS'group_name'
p132501
Nsa(dp132502
S'description'
p132503
S'Value used to shift y values (shifting is done before scaling)\n'
p132504
sS'cpp_type'
p132505
S'double'
p132506
sS'default'
p132507
S'0'
p132508
sS'name'
p132509
S'y_shift'
p132510
sS'required'
p132511
I00
sS'group_name'
p132512
NsasS'name'
p132513
S'/VectorPostprocessors/LeastSquaresFit'
p132514
sa(dp132515
S'description'
p132516
g3
sS'subblocks'
p132517
NsS'parameters'
p132518
(lp132519
(dp132520
S'description'
p132521
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132522
sS'cpp_type'
p132523
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132524
sS'default'
p132525
g3
sS'name'
p132526
S'control_tags'
p132527
sS'required'
p132528
I00
sS'group_name'
p132529
S'Advanced'
p132530
sa(dp132531
S'description'
p132532
S'Set the enabled status of the MooseObject.\n'
p132533
sS'cpp_type'
p132534
S'bool'
p132535
sS'default'
p132536
S'1'
p132537
sS'name'
p132538
S'enable'
p132539
sS'required'
p132540
I00
sS'group_name'
p132541
S'Advanced'
p132542
sa(dp132543
S'description'
p132544
S'The ending of the line\n'
p132545
sS'cpp_type'
p132546
S'libMesh::Point'
p132547
sS'default'
p132548
g3
sS'name'
p132549
S'end_point'
p132550
sS'required'
p132551
I01
sS'group_name'
p132552
Nsa(dp132553
S'name'
p132554
S'execute_on'
p132555
sS'cpp_type'
p132556
S'MultiMooseEnum'
p132557
sS'default'
p132558
S'TIMESTEP_END'
p132559
sS'description'
p132560
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132561
sS'required'
p132562
I00
sS'options'
p132563
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132564
sS'group_name'
p132565
Nsa(dp132566
S'description'
p132567
S'The Functions to sample along the line\n'
p132568
sS'cpp_type'
p132569
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p132570
sS'default'
p132571
g3
sS'name'
p132572
S'functions'
p132573
sS'required'
p132574
I01
sS'group_name'
p132575
Nsa(dp132576
S'description'
p132577
S'The number of points to sample along the line\n'
p132578
sS'cpp_type'
p132579
S'unsigned int'
p132580
sS'default'
p132581
g3
sS'name'
p132582
S'num_points'
p132583
sS'required'
p132584
I01
sS'group_name'
p132585
Nsa(dp132586
S'description'
p132587
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132588
sS'cpp_type'
p132589
S'std::vector<OutputName, std::allocator<OutputName> >'
p132590
sS'default'
p132591
g3
sS'name'
p132592
S'outputs'
p132593
sS'required'
p132594
I00
sS'group_name'
p132595
S'Advanced'
p132596
sa(dp132597
S'name'
p132598
S'sort_by'
p132599
sS'cpp_type'
p132600
S'MooseEnum'
p132601
sS'default'
p132602
g3
sS'description'
p132603
S'What to sort the samples by\n'
p132604
sS'required'
p132605
I01
sS'options'
p132606
S'x y z id'
p132607
sS'group_name'
p132608
Nsa(dp132609
S'description'
p132610
S'The beginning of the line\n'
p132611
sS'cpp_type'
p132612
S'libMesh::Point'
p132613
sS'default'
p132614
g3
sS'name'
p132615
S'start_point'
p132616
sS'required'
p132617
I01
sS'group_name'
p132618
Nsa(dp132619
S'description'
p132620
g3
sS'cpp_type'
p132621
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132622
sS'default'
p132623
S'LineFunctionSampler'
p132624
sS'name'
p132625
S'type'
p132626
sS'required'
p132627
I00
sS'group_name'
p132628
Nsa(dp132629
S'description'
p132630
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132631
sS'cpp_type'
p132632
S'bool'
p132633
sS'default'
p132634
S'0'
p132635
sS'name'
p132636
S'use_displaced_mesh'
p132637
sS'required'
p132638
I00
sS'group_name'
p132639
S'Advanced'
p132640
sasS'name'
p132641
S'/VectorPostprocessors/LineFunctionSampler'
p132642
sa(dp132643
S'description'
p132644
S'Access a component of a RankTwoTensor\n'
p132645
sS'subblocks'
p132646
NsS'parameters'
p132647
(lp132648
(dp132649
S'description'
p132650
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132651
sS'cpp_type'
p132652
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132653
sS'default'
p132654
g3
sS'name'
p132655
S'block'
p132656
sS'required'
p132657
I00
sS'group_name'
p132658
Nsa(dp132659
S'description'
p132660
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132661
sS'cpp_type'
p132662
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132663
sS'default'
p132664
g3
sS'name'
p132665
S'control_tags'
p132666
sS'required'
p132667
I00
sS'group_name'
p132668
S'Advanced'
p132669
sa(dp132670
S'description'
p132671
S'Set the enabled status of the MooseObject.\n'
p132672
sS'cpp_type'
p132673
S'bool'
p132674
sS'default'
p132675
S'1'
p132676
sS'name'
p132677
S'enable'
p132678
sS'required'
p132679
I00
sS'group_name'
p132680
S'Advanced'
p132681
sa(dp132682
S'description'
p132683
S'The end of the line\n'
p132684
sS'cpp_type'
p132685
S'libMesh::Point'
p132686
sS'default'
p132687
g3
sS'name'
p132688
S'end'
p132689
sS'required'
p132690
I01
sS'group_name'
p132691
Nsa(dp132692
S'name'
p132693
S'execute_on'
p132694
sS'cpp_type'
p132695
S'MultiMooseEnum'
p132696
sS'default'
p132697
S'TIMESTEP_END'
p132698
sS'description'
p132699
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132700
sS'required'
p132701
I00
sS'options'
p132702
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132703
sS'group_name'
p132704
Nsa(dp132705
S'description'
p132706
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p132707
sS'cpp_type'
p132708
S'unsigned int'
p132709
sS'default'
p132710
g3
sS'name'
p132711
S'index_i'
p132712
sS'required'
p132713
I01
sS'group_name'
p132714
Nsa(dp132715
S'description'
p132716
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p132717
sS'cpp_type'
p132718
S'unsigned int'
p132719
sS'default'
p132720
g3
sS'name'
p132721
S'index_j'
p132722
sS'required'
p132723
I01
sS'group_name'
p132724
Nsa(dp132725
S'description'
p132726
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132727
sS'cpp_type'
p132728
S'std::vector<OutputName, std::allocator<OutputName> >'
p132729
sS'default'
p132730
g3
sS'name'
p132731
S'outputs'
p132732
sS'required'
p132733
I00
sS'group_name'
p132734
S'Advanced'
p132735
sa(dp132736
S'description'
p132737
S'Name of the material property to be output along a line\n'
p132738
sS'cpp_type'
p132739
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132740
sS'default'
p132741
g3
sS'name'
p132742
S'property'
p132743
sS'required'
p132744
I01
sS'group_name'
p132745
Nsa(dp132746
S'name'
p132747
S'sort_by'
p132748
sS'cpp_type'
p132749
S'MooseEnum'
p132750
sS'default'
p132751
g3
sS'description'
p132752
S'What to sort the samples by\n'
p132753
sS'required'
p132754
I01
sS'options'
p132755
S'x y z id'
p132756
sS'group_name'
p132757
Nsa(dp132758
S'description'
p132759
S'The beginning of the line\n'
p132760
sS'cpp_type'
p132761
S'libMesh::Point'
p132762
sS'default'
p132763
g3
sS'name'
p132764
S'start'
p132765
sS'required'
p132766
I01
sS'group_name'
p132767
Nsa(dp132768
S'description'
p132769
g3
sS'cpp_type'
p132770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132771
sS'default'
p132772
S'LineMaterialRankTwoSampler'
p132773
sS'name'
p132774
S'type'
p132775
sS'required'
p132776
I00
sS'group_name'
p132777
Nsa(dp132778
S'description'
p132779
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132780
sS'cpp_type'
p132781
S'bool'
p132782
sS'default'
p132783
S'0'
p132784
sS'name'
p132785
S'use_displaced_mesh'
p132786
sS'required'
p132787
I00
sS'group_name'
p132788
S'Advanced'
p132789
sasS'name'
p132790
S'/VectorPostprocessors/LineMaterialRankTwoSampler'
p132791
sa(dp132792
S'description'
p132793
S'Compute a scalar property of a RankTwoTensor\n'
p132794
sS'subblocks'
p132795
NsS'parameters'
p132796
(lp132797
(dp132798
S'description'
p132799
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132800
sS'cpp_type'
p132801
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132802
sS'default'
p132803
g3
sS'name'
p132804
S'block'
p132805
sS'required'
p132806
I00
sS'group_name'
p132807
Nsa(dp132808
S'description'
p132809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132810
sS'cpp_type'
p132811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132812
sS'default'
p132813
g3
sS'name'
p132814
S'control_tags'
p132815
sS'required'
p132816
I00
sS'group_name'
p132817
S'Advanced'
p132818
sa(dp132819
S'description'
p132820
S'Direction vector\n'
p132821
sS'cpp_type'
p132822
S'libMesh::Point'
p132823
sS'default'
p132824
S'0 0 1'
p132825
sS'name'
p132826
S'direction'
p132827
sS'required'
p132828
I00
sS'group_name'
p132829
Nsa(dp132830
S'description'
p132831
S'Set the enabled status of the MooseObject.\n'
p132832
sS'cpp_type'
p132833
S'bool'
p132834
sS'default'
p132835
S'1'
p132836
sS'name'
p132837
S'enable'
p132838
sS'required'
p132839
I00
sS'group_name'
p132840
S'Advanced'
p132841
sa(dp132842
S'description'
p132843
S'The end of the line\n'
p132844
sS'cpp_type'
p132845
S'libMesh::Point'
p132846
sS'default'
p132847
g3
sS'name'
p132848
S'end'
p132849
sS'required'
p132850
I01
sS'group_name'
p132851
Nsa(dp132852
S'name'
p132853
S'execute_on'
p132854
sS'cpp_type'
p132855
S'MultiMooseEnum'
p132856
sS'default'
p132857
S'TIMESTEP_END'
p132858
sS'description'
p132859
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p132860
sS'required'
p132861
I00
sS'options'
p132862
S'none initial linear nonlinear timestep_end timestep_begin custom'
p132863
sS'group_name'
p132864
Nsa(dp132865
S'description'
p132866
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p132867
sS'cpp_type'
p132868
S'std::vector<OutputName, std::allocator<OutputName> >'
p132869
sS'default'
p132870
g3
sS'name'
p132871
S'outputs'
p132872
sS'required'
p132873
I00
sS'group_name'
p132874
S'Advanced'
p132875
sa(dp132876
S'description'
p132877
S'Start point for axis used to calculate some cylinderical material tensor quantities\n'
p132878
sS'cpp_type'
p132879
S'libMesh::Point'
p132880
sS'default'
p132881
S'0 0 0'
p132882
sS'name'
p132883
S'point1'
p132884
sS'required'
p132885
I00
sS'group_name'
p132886
Nsa(dp132887
S'description'
p132888
S'End point for axis used to calculate some material tensor quantities\n'
p132889
sS'cpp_type'
p132890
S'libMesh::Point'
p132891
sS'default'
p132892
S'0 1 0'
p132893
sS'name'
p132894
S'point2'
p132895
sS'required'
p132896
I00
sS'group_name'
p132897
Nsa(dp132898
S'description'
p132899
S'Name of the material property to be output along a line\n'
p132900
sS'cpp_type'
p132901
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132902
sS'default'
p132903
g3
sS'name'
p132904
S'property'
p132905
sS'required'
p132906
I01
sS'group_name'
p132907
Nsa(dp132908
S'name'
p132909
S'scalar_type'
p132910
sS'cpp_type'
p132911
S'MooseEnum'
p132912
sS'default'
p132913
g3
sS'description'
p132914
S'A scalar to ouput\n'
p132915
sS'required'
p132916
I00
sS'options'
p132917
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction'
p132918
sS'group_name'
p132919
Nsa(dp132920
S'name'
p132921
S'sort_by'
p132922
sS'cpp_type'
p132923
S'MooseEnum'
p132924
sS'default'
p132925
g3
sS'description'
p132926
S'What to sort the samples by\n'
p132927
sS'required'
p132928
I01
sS'options'
p132929
S'x y z id'
p132930
sS'group_name'
p132931
Nsa(dp132932
S'description'
p132933
S'The beginning of the line\n'
p132934
sS'cpp_type'
p132935
S'libMesh::Point'
p132936
sS'default'
p132937
g3
sS'name'
p132938
S'start'
p132939
sS'required'
p132940
I01
sS'group_name'
p132941
Nsa(dp132942
S'description'
p132943
g3
sS'cpp_type'
p132944
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p132945
sS'default'
p132946
S'LineMaterialRankTwoScalarSampler'
p132947
sS'name'
p132948
S'type'
p132949
sS'required'
p132950
I00
sS'group_name'
p132951
Nsa(dp132952
S'description'
p132953
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p132954
sS'cpp_type'
p132955
S'bool'
p132956
sS'default'
p132957
S'0'
p132958
sS'name'
p132959
S'use_displaced_mesh'
p132960
sS'required'
p132961
I00
sS'group_name'
p132962
S'Advanced'
p132963
sasS'name'
p132964
S'/VectorPostprocessors/LineMaterialRankTwoScalarSampler'
p132965
sa(dp132966
S'description'
p132967
g3
sS'subblocks'
p132968
NsS'parameters'
p132969
(lp132970
(dp132971
S'description'
p132972
S'The list of block ids (SubdomainID) that this object will be applied\n'
p132973
sS'cpp_type'
p132974
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p132975
sS'default'
p132976
g3
sS'name'
p132977
S'block'
p132978
sS'required'
p132979
I00
sS'group_name'
p132980
Nsa(dp132981
S'description'
p132982
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p132983
sS'cpp_type'
p132984
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p132985
sS'default'
p132986
g3
sS'name'
p132987
S'control_tags'
p132988
sS'required'
p132989
I00
sS'group_name'
p132990
S'Advanced'
p132991
sa(dp132992
S'description'
p132993
S'Set the enabled status of the MooseObject.\n'
p132994
sS'cpp_type'
p132995
S'bool'
p132996
sS'default'
p132997
S'1'
p132998
sS'name'
p132999
S'enable'
p133000
sS'required'
p133001
I00
sS'group_name'
p133002
S'Advanced'
p133003
sa(dp133004
S'description'
p133005
S'The end of the line\n'
p133006
sS'cpp_type'
p133007
S'libMesh::Point'
p133008
sS'default'
p133009
g3
sS'name'
p133010
S'end'
p133011
sS'required'
p133012
I01
sS'group_name'
p133013
Nsa(dp133014
S'name'
p133015
S'execute_on'
p133016
sS'cpp_type'
p133017
S'MultiMooseEnum'
p133018
sS'default'
p133019
S'TIMESTEP_END'
p133020
sS'description'
p133021
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133022
sS'required'
p133023
I00
sS'options'
p133024
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133025
sS'group_name'
p133026
Nsa(dp133027
S'description'
p133028
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133029
sS'cpp_type'
p133030
S'std::vector<OutputName, std::allocator<OutputName> >'
p133031
sS'default'
p133032
g3
sS'name'
p133033
S'outputs'
p133034
sS'required'
p133035
I00
sS'group_name'
p133036
S'Advanced'
p133037
sa(dp133038
S'description'
p133039
S'Name of the material property to be output along a line\n'
p133040
sS'cpp_type'
p133041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133042
sS'default'
p133043
g3
sS'name'
p133044
S'property'
p133045
sS'required'
p133046
I01
sS'group_name'
p133047
Nsa(dp133048
S'name'
p133049
S'sort_by'
p133050
sS'cpp_type'
p133051
S'MooseEnum'
p133052
sS'default'
p133053
g3
sS'description'
p133054
S'What to sort the samples by\n'
p133055
sS'required'
p133056
I01
sS'options'
p133057
S'x y z id'
p133058
sS'group_name'
p133059
Nsa(dp133060
S'description'
p133061
S'The beginning of the line\n'
p133062
sS'cpp_type'
p133063
S'libMesh::Point'
p133064
sS'default'
p133065
g3
sS'name'
p133066
S'start'
p133067
sS'required'
p133068
I01
sS'group_name'
p133069
Nsa(dp133070
S'description'
p133071
g3
sS'cpp_type'
p133072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133073
sS'default'
p133074
S'LineMaterialRealSampler'
p133075
sS'name'
p133076
S'type'
p133077
sS'required'
p133078
I00
sS'group_name'
p133079
Nsa(dp133080
S'description'
p133081
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133082
sS'cpp_type'
p133083
S'bool'
p133084
sS'default'
p133085
S'0'
p133086
sS'name'
p133087
S'use_displaced_mesh'
p133088
sS'required'
p133089
I00
sS'group_name'
p133090
S'Advanced'
p133091
sasS'name'
p133092
S'/VectorPostprocessors/LineMaterialRealSampler'
p133093
sa(dp133094
S'description'
p133095
g3
sS'subblocks'
p133096
NsS'parameters'
p133097
(lp133098
(dp133099
S'description'
p133100
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133101
sS'cpp_type'
p133102
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133103
sS'default'
p133104
g3
sS'name'
p133105
S'control_tags'
p133106
sS'required'
p133107
I00
sS'group_name'
p133108
S'Advanced'
p133109
sa(dp133110
S'description'
p133111
S'Set the enabled status of the MooseObject.\n'
p133112
sS'cpp_type'
p133113
S'bool'
p133114
sS'default'
p133115
S'1'
p133116
sS'name'
p133117
S'enable'
p133118
sS'required'
p133119
I00
sS'group_name'
p133120
S'Advanced'
p133121
sa(dp133122
S'description'
p133123
S'The ending of the line\n'
p133124
sS'cpp_type'
p133125
S'libMesh::Point'
p133126
sS'default'
p133127
g3
sS'name'
p133128
S'end_point'
p133129
sS'required'
p133130
I01
sS'group_name'
p133131
Nsa(dp133132
S'name'
p133133
S'execute_on'
p133134
sS'cpp_type'
p133135
S'MultiMooseEnum'
p133136
sS'default'
p133137
S'TIMESTEP_END'
p133138
sS'description'
p133139
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133140
sS'required'
p133141
I00
sS'options'
p133142
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133143
sS'group_name'
p133144
Nsa(dp133145
S'description'
p133146
S'The number of points to sample along the line\n'
p133147
sS'cpp_type'
p133148
S'unsigned int'
p133149
sS'default'
p133150
g3
sS'name'
p133151
S'num_points'
p133152
sS'required'
p133153
I01
sS'group_name'
p133154
Nsa(dp133155
S'description'
p133156
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133157
sS'cpp_type'
p133158
S'std::vector<OutputName, std::allocator<OutputName> >'
p133159
sS'default'
p133160
g3
sS'name'
p133161
S'outputs'
p133162
sS'required'
p133163
I00
sS'group_name'
p133164
S'Advanced'
p133165
sa(dp133166
S'name'
p133167
S'sort_by'
p133168
sS'cpp_type'
p133169
S'MooseEnum'
p133170
sS'default'
p133171
g3
sS'description'
p133172
S'What to sort the samples by\n'
p133173
sS'required'
p133174
I01
sS'options'
p133175
S'x y z id'
p133176
sS'group_name'
p133177
Nsa(dp133178
S'description'
p133179
S'The beginning of the line\n'
p133180
sS'cpp_type'
p133181
S'libMesh::Point'
p133182
sS'default'
p133183
g3
sS'name'
p133184
S'start_point'
p133185
sS'required'
p133186
I01
sS'group_name'
p133187
Nsa(dp133188
S'description'
p133189
g3
sS'cpp_type'
p133190
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133191
sS'default'
p133192
S'LineValueSampler'
p133193
sS'name'
p133194
S'type'
p133195
sS'required'
p133196
I00
sS'group_name'
p133197
Nsa(dp133198
S'description'
p133199
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133200
sS'cpp_type'
p133201
S'bool'
p133202
sS'default'
p133203
S'0'
p133204
sS'name'
p133205
S'use_displaced_mesh'
p133206
sS'required'
p133207
I00
sS'group_name'
p133208
S'Advanced'
p133209
sa(dp133210
S'description'
p133211
S'The names of the variables that this VectorPostprocessor operates on\n'
p133212
sS'cpp_type'
p133213
S'std::vector<VariableName>'
p133214
sS'default'
p133215
g3
sS'name'
p133216
S'variable'
p133217
sS'required'
p133218
I01
sS'group_name'
p133219
NsasS'name'
p133220
S'/VectorPostprocessors/LineValueSampler'
p133221
sa(dp133222
S'description'
p133223
g3
sS'subblocks'
p133224
NsS'parameters'
p133225
(lp133226
(dp133227
S'description'
p133228
S'The list of block ids (SubdomainID) that this object will be applied\n'
p133229
sS'cpp_type'
p133230
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p133231
sS'default'
p133232
g3
sS'name'
p133233
S'block'
p133234
sS'required'
p133235
I00
sS'group_name'
p133236
Nsa(dp133237
S'description'
p133238
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133239
sS'cpp_type'
p133240
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133241
sS'default'
p133242
g3
sS'name'
p133243
S'control_tags'
p133244
sS'required'
p133245
I00
sS'group_name'
p133246
S'Advanced'
p133247
sa(dp133248
S'description'
p133249
S'Element IDs to print data for (others are ignored).\n'
p133250
sS'cpp_type'
p133251
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p133252
sS'default'
p133253
g3
sS'name'
p133254
S'elem_ids'
p133255
sS'required'
p133256
I01
sS'group_name'
p133257
Nsa(dp133258
S'description'
p133259
S'Set the enabled status of the MooseObject.\n'
p133260
sS'cpp_type'
p133261
S'bool'
p133262
sS'default'
p133263
S'1'
p133264
sS'name'
p133265
S'enable'
p133266
sS'required'
p133267
I00
sS'group_name'
p133268
S'Advanced'
p133269
sa(dp133270
S'name'
p133271
S'execute_on'
p133272
sS'cpp_type'
p133273
S'MultiMooseEnum'
p133274
sS'default'
p133275
S'TIMESTEP_END'
p133276
sS'description'
p133277
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133278
sS'required'
p133279
I00
sS'options'
p133280
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133281
sS'group_name'
p133282
Nsa(dp133283
S'description'
p133284
S'Material for which all properties will be recorded.\n'
p133285
sS'cpp_type'
p133286
S'MaterialName'
p133287
sS'default'
p133288
g3
sS'name'
p133289
S'material'
p133290
sS'required'
p133291
I01
sS'group_name'
p133292
Nsa(dp133293
S'description'
p133294
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133295
sS'cpp_type'
p133296
S'std::vector<OutputName, std::allocator<OutputName> >'
p133297
sS'default'
p133298
g3
sS'name'
p133299
S'outputs'
p133300
sS'required'
p133301
I00
sS'group_name'
p133302
S'Advanced'
p133303
sa(dp133304
S'description'
p133305
S'The seed for the master random number generator\n'
p133306
sS'cpp_type'
p133307
S'unsigned int'
p133308
sS'default'
p133309
S'0'
p133310
sS'name'
p133311
S'seed'
p133312
sS'required'
p133313
I00
sS'group_name'
p133314
S'Advanced'
p133315
sa(dp133316
S'description'
p133317
g3
sS'cpp_type'
p133318
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133319
sS'default'
p133320
S'MaterialVectorPostprocessor'
p133321
sS'name'
p133322
S'type'
p133323
sS'required'
p133324
I00
sS'group_name'
p133325
Nsa(dp133326
S'description'
p133327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133328
sS'cpp_type'
p133329
S'bool'
p133330
sS'default'
p133331
S'0'
p133332
sS'name'
p133333
S'use_displaced_mesh'
p133334
sS'required'
p133335
I00
sS'group_name'
p133336
S'Advanced'
p133337
sasS'name'
p133338
S'/VectorPostprocessors/MaterialVectorPostprocessor'
p133339
sa(dp133340
S'description'
p133341
g3
sS'subblocks'
p133342
NsS'parameters'
p133343
(lp133344
(dp133345
S'description'
p133346
S'The list of block ids (SubdomainID) that this object will be applied\n'
p133347
sS'cpp_type'
p133348
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p133349
sS'default'
p133350
g3
sS'name'
p133351
S'block'
p133352
sS'required'
p133353
I00
sS'group_name'
p133354
Nsa(dp133355
S'description'
p133356
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p133357
sS'cpp_type'
p133358
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p133359
sS'default'
p133360
g3
sS'name'
p133361
S'boundary'
p133362
sS'required'
p133363
I00
sS'group_name'
p133364
Nsa(dp133365
S'description'
p133366
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133367
sS'cpp_type'
p133368
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133369
sS'default'
p133370
g3
sS'name'
p133371
S'control_tags'
p133372
sS'required'
p133373
I00
sS'group_name'
p133374
S'Advanced'
p133375
sa(dp133376
S'description'
p133377
S'Set the enabled status of the MooseObject.\n'
p133378
sS'cpp_type'
p133379
S'bool'
p133380
sS'default'
p133381
S'1'
p133382
sS'name'
p133383
S'enable'
p133384
sS'required'
p133385
I00
sS'group_name'
p133386
S'Advanced'
p133387
sa(dp133388
S'name'
p133389
S'execute_on'
p133390
sS'cpp_type'
p133391
S'MultiMooseEnum'
p133392
sS'default'
p133393
S'TIMESTEP_END'
p133394
sS'description'
p133395
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133396
sS'required'
p133397
I00
sS'options'
p133398
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133399
sS'group_name'
p133400
Nsa(dp133401
S'description'
p133402
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133403
sS'cpp_type'
p133404
S'std::vector<OutputName, std::allocator<OutputName> >'
p133405
sS'default'
p133406
g3
sS'name'
p133407
S'outputs'
p133408
sS'required'
p133409
I00
sS'group_name'
p133410
S'Advanced'
p133411
sa(dp133412
S'description'
p133413
S'The seed for the master random number generator\n'
p133414
sS'cpp_type'
p133415
S'unsigned int'
p133416
sS'default'
p133417
S'0'
p133418
sS'name'
p133419
S'seed'
p133420
sS'required'
p133421
I00
sS'group_name'
p133422
S'Advanced'
p133423
sa(dp133424
S'name'
p133425
S'sort_by'
p133426
sS'cpp_type'
p133427
S'MooseEnum'
p133428
sS'default'
p133429
g3
sS'description'
p133430
S'What to sort the samples by\n'
p133431
sS'required'
p133432
I01
sS'options'
p133433
S'x y z id'
p133434
sS'group_name'
p133435
Nsa(dp133436
S'description'
p133437
g3
sS'cpp_type'
p133438
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133439
sS'default'
p133440
S'NodalValueSampler'
p133441
sS'name'
p133442
S'type'
p133443
sS'required'
p133444
I00
sS'group_name'
p133445
Nsa(dp133446
S'description'
p133447
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p133448
sS'cpp_type'
p133449
S'bool'
p133450
sS'default'
p133451
S'0'
p133452
sS'name'
p133453
S'unique_node_execute'
p133454
sS'required'
p133455
I00
sS'group_name'
p133456
Nsa(dp133457
S'description'
p133458
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133459
sS'cpp_type'
p133460
S'bool'
p133461
sS'default'
p133462
S'0'
p133463
sS'name'
p133464
S'use_displaced_mesh'
p133465
sS'required'
p133466
I00
sS'group_name'
p133467
S'Advanced'
p133468
sa(dp133469
S'description'
p133470
S'The names of the variables that this VectorPostprocessor operates on\n'
p133471
sS'cpp_type'
p133472
S'std::vector<VariableName>'
p133473
sS'default'
p133474
g3
sS'name'
p133475
S'variable'
p133476
sS'required'
p133477
I01
sS'group_name'
p133478
NsasS'name'
p133479
S'/VectorPostprocessors/NodalValueSampler'
p133480
sa(dp133481
S'description'
p133482
g3
sS'subblocks'
p133483
NsS'parameters'
p133484
(lp133485
(dp133486
S'description'
p133487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133488
sS'cpp_type'
p133489
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133490
sS'default'
p133491
g3
sS'name'
p133492
S'control_tags'
p133493
sS'required'
p133494
I00
sS'group_name'
p133495
S'Advanced'
p133496
sa(dp133497
S'description'
p133498
S'Set the enabled status of the MooseObject.\n'
p133499
sS'cpp_type'
p133500
S'bool'
p133501
sS'default'
p133502
S'1'
p133503
sS'name'
p133504
S'enable'
p133505
sS'required'
p133506
I00
sS'group_name'
p133507
S'Advanced'
p133508
sa(dp133509
S'name'
p133510
S'execute_on'
p133511
sS'cpp_type'
p133512
S'MultiMooseEnum'
p133513
sS'default'
p133514
S'TIMESTEP_END'
p133515
sS'description'
p133516
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133517
sS'required'
p133518
I00
sS'options'
p133519
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133520
sS'group_name'
p133521
Nsa(dp133522
S'description'
p133523
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133524
sS'cpp_type'
p133525
S'std::vector<OutputName, std::allocator<OutputName> >'
p133526
sS'default'
p133527
g3
sS'name'
p133528
S'outputs'
p133529
sS'required'
p133530
I00
sS'group_name'
p133531
S'Advanced'
p133532
sa(dp133533
S'description'
p133534
S'The points where you want to evaluate the variables\n'
p133535
sS'cpp_type'
p133536
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p133537
sS'default'
p133538
g3
sS'name'
p133539
S'points'
p133540
sS'required'
p133541
I01
sS'group_name'
p133542
Nsa(dp133543
S'name'
p133544
S'sort_by'
p133545
sS'cpp_type'
p133546
S'MooseEnum'
p133547
sS'default'
p133548
g3
sS'description'
p133549
S'What to sort the samples by\n'
p133550
sS'required'
p133551
I01
sS'options'
p133552
S'x y z id'
p133553
sS'group_name'
p133554
Nsa(dp133555
S'description'
p133556
g3
sS'cpp_type'
p133557
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133558
sS'default'
p133559
S'PointValueSampler'
p133560
sS'name'
p133561
S'type'
p133562
sS'required'
p133563
I00
sS'group_name'
p133564
Nsa(dp133565
S'description'
p133566
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133567
sS'cpp_type'
p133568
S'bool'
p133569
sS'default'
p133570
S'0'
p133571
sS'name'
p133572
S'use_displaced_mesh'
p133573
sS'required'
p133574
I00
sS'group_name'
p133575
S'Advanced'
p133576
sa(dp133577
S'description'
p133578
S'The names of the variables that this VectorPostprocessor operates on\n'
p133579
sS'cpp_type'
p133580
S'std::vector<VariableName>'
p133581
sS'default'
p133582
g3
sS'name'
p133583
S'variable'
p133584
sS'required'
p133585
I01
sS'group_name'
p133586
NsasS'name'
p133587
S'/VectorPostprocessors/PointValueSampler'
p133588
sa(dp133589
S'description'
p133590
g3
sS'subblocks'
p133591
NsS'parameters'
p133592
(lp133593
(dp133594
S'description'
p133595
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p133596
sS'cpp_type'
p133597
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p133598
sS'default'
p133599
g3
sS'name'
p133600
S'boundary'
p133601
sS'required'
p133602
I01
sS'group_name'
p133603
Nsa(dp133604
S'description'
p133605
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133606
sS'cpp_type'
p133607
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133608
sS'default'
p133609
g3
sS'name'
p133610
S'control_tags'
p133611
sS'required'
p133612
I00
sS'group_name'
p133613
S'Advanced'
p133614
sa(dp133615
S'description'
p133616
S'Set the enabled status of the MooseObject.\n'
p133617
sS'cpp_type'
p133618
S'bool'
p133619
sS'default'
p133620
S'1'
p133621
sS'name'
p133622
S'enable'
p133623
sS'required'
p133624
I00
sS'group_name'
p133625
S'Advanced'
p133626
sa(dp133627
S'name'
p133628
S'execute_on'
p133629
sS'cpp_type'
p133630
S'MultiMooseEnum'
p133631
sS'default'
p133632
S'TIMESTEP_END'
p133633
sS'description'
p133634
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133635
sS'required'
p133636
I00
sS'options'
p133637
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133638
sS'group_name'
p133639
Nsa(dp133640
S'description'
p133641
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133642
sS'cpp_type'
p133643
S'std::vector<OutputName, std::allocator<OutputName> >'
p133644
sS'default'
p133645
g3
sS'name'
p133646
S'outputs'
p133647
sS'required'
p133648
I00
sS'group_name'
p133649
S'Advanced'
p133650
sa(dp133651
S'name'
p133652
S'sort_by'
p133653
sS'cpp_type'
p133654
S'MooseEnum'
p133655
sS'default'
p133656
g3
sS'description'
p133657
S'What to sort the samples by\n'
p133658
sS'required'
p133659
I01
sS'options'
p133660
S'x y z id'
p133661
sS'group_name'
p133662
Nsa(dp133663
S'description'
p133664
g3
sS'cpp_type'
p133665
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133666
sS'default'
p133667
S'SideValueSampler'
p133668
sS'name'
p133669
S'type'
p133670
sS'required'
p133671
I00
sS'group_name'
p133672
Nsa(dp133673
S'description'
p133674
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133675
sS'cpp_type'
p133676
S'bool'
p133677
sS'default'
p133678
S'0'
p133679
sS'name'
p133680
S'use_displaced_mesh'
p133681
sS'required'
p133682
I00
sS'group_name'
p133683
S'Advanced'
p133684
sa(dp133685
S'description'
p133686
S'The names of the variables that this VectorPostprocessor operates on\n'
p133687
sS'cpp_type'
p133688
S'std::vector<VariableName>'
p133689
sS'default'
p133690
g3
sS'name'
p133691
S'variable'
p133692
sS'required'
p133693
I01
sS'group_name'
p133694
NsasS'name'
p133695
S'/VectorPostprocessors/SideValueSampler'
p133696
sa(dp133697
S'description'
p133698
g3
sS'subblocks'
p133699
NsS'parameters'
p133700
(lp133701
(dp133702
S'description'
p133703
S'Number of histogram bins\n'
p133704
sS'cpp_type'
p133705
S'unsigned int'
p133706
sS'default'
p133707
S'50'
p133708
sS'name'
p133709
S'bin_number'
p133710
sS'required'
p133711
I00
sS'group_name'
p133712
Nsa(dp133713
S'description'
p133714
S'The list of block ids (SubdomainID) that this object will be applied\n'
p133715
sS'cpp_type'
p133716
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p133717
sS'default'
p133718
g3
sS'name'
p133719
S'block'
p133720
sS'required'
p133721
I00
sS'group_name'
p133722
Nsa(dp133723
S'description'
p133724
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133725
sS'cpp_type'
p133726
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133727
sS'default'
p133728
g3
sS'name'
p133729
S'control_tags'
p133730
sS'required'
p133731
I00
sS'group_name'
p133732
S'Advanced'
p133733
sa(dp133734
S'description'
p133735
S'Value to assign to bins into which no datapoints fall\n'
p133736
sS'cpp_type'
p133737
S'double'
p133738
sS'default'
p133739
S'0'
p133740
sS'name'
p133741
S'empty_bin_value'
p133742
sS'required'
p133743
I00
sS'group_name'
p133744
Nsa(dp133745
S'description'
p133746
S'Set the enabled status of the MooseObject.\n'
p133747
sS'cpp_type'
p133748
S'bool'
p133749
sS'default'
p133750
S'1'
p133751
sS'name'
p133752
S'enable'
p133753
sS'required'
p133754
I00
sS'group_name'
p133755
S'Advanced'
p133756
sa(dp133757
S'name'
p133758
S'execute_on'
p133759
sS'cpp_type'
p133760
S'MultiMooseEnum'
p133761
sS'default'
p133762
S'TIMESTEP_END'
p133763
sS'description'
p133764
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133765
sS'required'
p133766
I00
sS'options'
p133767
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133768
sS'group_name'
p133769
Nsa(dp133770
S'description'
p133771
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133772
sS'cpp_type'
p133773
S'std::vector<OutputName, std::allocator<OutputName> >'
p133774
sS'default'
p133775
g3
sS'name'
p133776
S'outputs'
p133777
sS'required'
p133778
I00
sS'group_name'
p133779
S'Advanced'
p133780
sa(dp133781
S'description'
p133782
S'Radius to average out to\n'
p133783
sS'cpp_type'
p133784
S'double'
p133785
sS'default'
p133786
g3
sS'name'
p133787
S'radius'
p133788
sS'required'
p133789
I01
sS'group_name'
p133790
Nsa(dp133791
S'description'
p133792
S'The seed for the master random number generator\n'
p133793
sS'cpp_type'
p133794
S'unsigned int'
p133795
sS'default'
p133796
S'0'
p133797
sS'name'
p133798
S'seed'
p133799
sS'required'
p133800
I00
sS'group_name'
p133801
S'Advanced'
p133802
sa(dp133803
S'description'
p133804
g3
sS'cpp_type'
p133805
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133806
sS'default'
p133807
S'SphericalAverage'
p133808
sS'name'
p133809
S'type'
p133810
sS'required'
p133811
I00
sS'group_name'
p133812
Nsa(dp133813
S'description'
p133814
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133815
sS'cpp_type'
p133816
S'bool'
p133817
sS'default'
p133818
S'0'
p133819
sS'name'
p133820
S'use_displaced_mesh'
p133821
sS'required'
p133822
I00
sS'group_name'
p133823
S'Advanced'
p133824
sa(dp133825
S'description'
p133826
S'Variables to average radially\n'
p133827
sS'cpp_type'
p133828
S'std::vector<VariableName>'
p133829
sS'default'
p133830
g3
sS'name'
p133831
S'variable'
p133832
sS'required'
p133833
I00
sS'group_name'
p133834
NsasS'name'
p133835
S'/VectorPostprocessors/SphericalAverage'
p133836
sa(dp133837
S'description'
p133838
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p133839
sS'subblocks'
p133840
NsS'parameters'
p133841
(lp133842
(dp133843
S'description'
p133844
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133845
sS'cpp_type'
p133846
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133847
sS'default'
p133848
g3
sS'name'
p133849
S'control_tags'
p133850
sS'required'
p133851
I00
sS'group_name'
p133852
S'Advanced'
p133853
sa(dp133854
S'description'
p133855
S'Set the enabled status of the MooseObject.\n'
p133856
sS'cpp_type'
p133857
S'bool'
p133858
sS'default'
p133859
S'1'
p133860
sS'name'
p133861
S'enable'
p133862
sS'required'
p133863
I00
sS'group_name'
p133864
S'Advanced'
p133865
sa(dp133866
S'name'
p133867
S'execute_on'
p133868
sS'cpp_type'
p133869
S'MultiMooseEnum'
p133870
sS'default'
p133871
S'TIMESTEP_END'
p133872
sS'description'
p133873
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133874
sS'required'
p133875
I00
sS'options'
p133876
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133877
sS'group_name'
p133878
Nsa(dp133879
S'description'
p133880
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p133881
sS'cpp_type'
p133882
S'std::vector<OutputName, std::allocator<OutputName> >'
p133883
sS'default'
p133884
g3
sS'name'
p133885
S'outputs'
p133886
sS'required'
p133887
I00
sS'group_name'
p133888
S'Advanced'
p133889
sa(dp133890
S'description'
p133891
S'The postprocessors whose values are to be reported\n'
p133892
sS'cpp_type'
p133893
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p133894
sS'default'
p133895
g3
sS'name'
p133896
S'postprocessors'
p133897
sS'required'
p133898
I01
sS'group_name'
p133899
Nsa(dp133900
S'description'
p133901
g3
sS'cpp_type'
p133902
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p133903
sS'default'
p133904
S'VectorOfPostprocessors'
p133905
sS'name'
p133906
S'type'
p133907
sS'required'
p133908
I00
sS'group_name'
p133909
Nsa(dp133910
S'description'
p133911
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p133912
sS'cpp_type'
p133913
S'bool'
p133914
sS'default'
p133915
S'0'
p133916
sS'name'
p133917
S'use_displaced_mesh'
p133918
sS'required'
p133919
I00
sS'group_name'
p133920
S'Advanced'
p133921
sasS'name'
p133922
S'/VectorPostprocessors/VectorOfPostprocessors'
p133923
sa(dp133924
S'description'
p133925
g3
sS'subblocks'
p133926
NsS'parameters'
p133927
(lp133928
(dp133929
S'description'
p133930
S'Number of histogram bins\n'
p133931
sS'cpp_type'
p133932
S'unsigned int'
p133933
sS'default'
p133934
S'50'
p133935
sS'name'
p133936
S'bin_number'
p133937
sS'required'
p133938
I00
sS'group_name'
p133939
Nsa(dp133940
S'description'
p133941
S'The list of block ids (SubdomainID) that this object will be applied\n'
p133942
sS'cpp_type'
p133943
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p133944
sS'default'
p133945
g3
sS'name'
p133946
S'block'
p133947
sS'required'
p133948
I00
sS'group_name'
p133949
Nsa(dp133950
S'description'
p133951
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p133952
sS'cpp_type'
p133953
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p133954
sS'default'
p133955
g3
sS'name'
p133956
S'control_tags'
p133957
sS'required'
p133958
I00
sS'group_name'
p133959
S'Advanced'
p133960
sa(dp133961
S'description'
p133962
S'Set the enabled status of the MooseObject.\n'
p133963
sS'cpp_type'
p133964
S'bool'
p133965
sS'default'
p133966
S'1'
p133967
sS'name'
p133968
S'enable'
p133969
sS'required'
p133970
I00
sS'group_name'
p133971
S'Advanced'
p133972
sa(dp133973
S'name'
p133974
S'execute_on'
p133975
sS'cpp_type'
p133976
S'MultiMooseEnum'
p133977
sS'default'
p133978
S'TIMESTEP_END'
p133979
sS'description'
p133980
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p133981
sS'required'
p133982
I00
sS'options'
p133983
S'none initial linear nonlinear timestep_end timestep_begin custom'
p133984
sS'group_name'
p133985
Nsa(dp133986
S'description'
p133987
S'Maximum variable value\n'
p133988
sS'cpp_type'
p133989
S'double'
p133990
sS'default'
p133991
g3
sS'name'
p133992
S'max_value'
p133993
sS'required'
p133994
I01
sS'group_name'
p133995
Nsa(dp133996
S'description'
p133997
S'Minimum variable value\n'
p133998
sS'cpp_type'
p133999
S'double'
p134000
sS'default'
p134001
g3
sS'name'
p134002
S'min_value'
p134003
sS'required'
p134004
I01
sS'group_name'
p134005
Nsa(dp134006
S'description'
p134007
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p134008
sS'cpp_type'
p134009
S'std::vector<OutputName, std::allocator<OutputName> >'
p134010
sS'default'
p134011
g3
sS'name'
p134012
S'outputs'
p134013
sS'required'
p134014
I00
sS'group_name'
p134015
S'Advanced'
p134016
sa(dp134017
S'description'
p134018
S'The seed for the master random number generator\n'
p134019
sS'cpp_type'
p134020
S'unsigned int'
p134021
sS'default'
p134022
S'0'
p134023
sS'name'
p134024
S'seed'
p134025
sS'required'
p134026
I00
sS'group_name'
p134027
S'Advanced'
p134028
sa(dp134029
S'description'
p134030
g3
sS'cpp_type'
p134031
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p134032
sS'default'
p134033
S'VolumeHistogram'
p134034
sS'name'
p134035
S'type'
p134036
sS'required'
p134037
I00
sS'group_name'
p134038
Nsa(dp134039
S'description'
p134040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p134041
sS'cpp_type'
p134042
S'bool'
p134043
sS'default'
p134044
S'0'
p134045
sS'name'
p134046
S'use_displaced_mesh'
p134047
sS'required'
p134048
I00
sS'group_name'
p134049
S'Advanced'
p134050
sa(dp134051
S'description'
p134052
S'Variable to bin the volume of\n'
p134053
sS'cpp_type'
p134054
S'std::vector<VariableName>'
p134055
sS'default'
p134056
g3
sS'name'
p134057
S'variable'
p134058
sS'required'
p134059
I00
sS'group_name'
p134060
NsasS'name'
p134061
S'/VectorPostprocessors/VolumeHistogram'
p134062
sasS'parameters'
p134063
NsS'name'
p134064
S'/VectorPostprocessors'
p134065
sa.